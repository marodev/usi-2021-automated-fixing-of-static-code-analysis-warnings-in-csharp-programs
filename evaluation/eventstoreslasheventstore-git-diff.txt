diff --git a/.config/dotnet-tools.json b/.config/dotnet-tools.json
index 091181076..12a077993 100644
--- a/.config/dotnet-tools.json
+++ b/.config/dotnet-tools.json
@@ -19,6 +19,18 @@
       "commands": [
         "gpr"
       ]
+    },
+    "jetbrains.resharper.globaltools": {
+      "version": "2020.3.3",
+      "commands": [
+        "jb"
+      ]
+    },
+    "eaglerepair.cli": {
+      "version": "0.0.28",
+      "commands": [
+        "eaglerepair"
+      ]
     }
   }
 }
\ No newline at end of file
diff --git a/src/EventStore.ClientAPI.Embedded/EmbeddedResponderBase.cs b/src/EventStore.ClientAPI.Embedded/EmbeddedResponderBase.cs
index fbfee383b..d24bc4024 100644
--- a/src/EventStore.ClientAPI.Embedded/EmbeddedResponderBase.cs
+++ b/src/EventStore.ClientAPI.Embedded/EmbeddedResponderBase.cs
@@ -22,13 +22,10 @@ namespace EventStore.ClientAPI.Embedded {
 			try {
 				Ensure.NotNull(message, "message");
 
-				var response = message as TResponse;
-
-				if (response != null)
+				if (message is TResponse response)
 					InspectResponse(response);
 				else
-					Fail(new NoResultException(String.Format("Expected response of {0}, received {1} instead.",
-						typeof(TResponse), message.GetType())));
+					Fail(new NoResultException($"Expected response of {typeof(TResponse)}, received {message.GetType()} instead."));
 			} catch (Exception ex) {
 				Fail(ex);
 			}
diff --git a/src/EventStore.ClientAPI.Embedded/EmbeddedResponders.cs b/src/EventStore.ClientAPI.Embedded/EmbeddedResponders.cs
index 263c6b8e8..a3733e813 100644
--- a/src/EventStore.ClientAPI.Embedded/EmbeddedResponders.cs
+++ b/src/EventStore.ClientAPI.Embedded/EmbeddedResponders.cs
@@ -28,9 +28,7 @@ namespace EventStore.ClientAPI.Embedded {
 					case OperationResult.CommitTimeout:
 						break;
 					case OperationResult.WrongExpectedVersion:
-						var err = string.Format(
-							"Append failed due to WrongExpectedVersion. Stream: {0}, Expected version: {1}", _stream,
-							_expectedVersion);
+						var err = $"Append failed due to WrongExpectedVersion. Stream: {_stream}, Expected version: {_expectedVersion}";
 						Fail(new WrongExpectedVersionException(err, _expectedVersion, response.CurrentVersion));
 						break;
 					case OperationResult.StreamDeleted:
@@ -40,11 +38,10 @@ namespace EventStore.ClientAPI.Embedded {
 						Fail(new InvalidTransactionException());
 						break;
 					case OperationResult.AccessDenied:
-						Fail(new AccessDeniedException(string.Format("Write access denied for stream '{0}'.",
-							_stream)));
+						Fail(new AccessDeniedException($"Write access denied for stream '{_stream}'."));
 						break;
 					default:
-						throw new Exception(string.Format("Unexpected OperationResult: {0}.", response.Result));
+						throw new Exception($"Unexpected OperationResult: {response.Result}.");
 				}
 			}
 
@@ -82,11 +79,10 @@ namespace EventStore.ClientAPI.Embedded {
 						Fail(new InvalidTransactionException());
 						break;
 					case OperationResult.AccessDenied:
-						Fail(new AccessDeniedException(string.Format("Write access denied for stream '{0}'.",
-							_stream)));
+						Fail(new AccessDeniedException($"Write access denied for stream '{_stream}'."));
 						break;
 					default:
-						throw new Exception(string.Format("Unexpected OperationResult: {0}.", response.Result));
+						throw new Exception($"Unexpected OperationResult: {response.Result}.");
 				}
 			}
 
@@ -127,9 +123,7 @@ namespace EventStore.ClientAPI.Embedded {
 						break;
 					case OperationResult.WrongExpectedVersion:
 						var err =
-							string.Format(
-								"Delete stream failed due to WrongExpectedVersion. Stream: {0}, Expected version: {1}.",
-								_stream, _expectedVersion);
+							$"Delete stream failed due to WrongExpectedVersion. Stream: {_stream}, Expected version: {_expectedVersion}.";
 						Fail(new WrongExpectedVersionException(err));
 						break;
 					case OperationResult.StreamDeleted:
@@ -139,11 +133,10 @@ namespace EventStore.ClientAPI.Embedded {
 						Fail(new InvalidTransactionException());
 						break;
 					case OperationResult.AccessDenied:
-						Fail(new AccessDeniedException(string.Format("Write access denied for stream '{0}'.",
-							_stream)));
+						Fail(new AccessDeniedException($"Write access denied for stream '{_stream}'."));
 						break;
 					default:
-						throw new Exception(string.Format("Unexpected OperationResult: {0}.", response.Result));
+						throw new Exception($"Unexpected OperationResult: {response.Result}.");
 				}
 			}
 
@@ -172,7 +165,7 @@ namespace EventStore.ClientAPI.Embedded {
 						Fail(new AccessDeniedException("Read access denied for $all."));
 						break;
 					default:
-						throw new Exception(string.Format("Unexpected ReadAllResult: {0}.", response.Result));
+						throw new Exception($"Unexpected ReadAllResult: {response.Result}.");
 				}
 			}
 
@@ -204,7 +197,7 @@ namespace EventStore.ClientAPI.Embedded {
 						Fail(new AccessDeniedException("Read access denied for $all."));
 						break;
 					default:
-						throw new Exception(string.Format("Unexpected ReadAllResult: {0}.", response.Result));
+						throw new Exception($"Unexpected ReadAllResult: {response.Result}.");
 				}
 			}
 
@@ -236,7 +229,7 @@ namespace EventStore.ClientAPI.Embedded {
 						Fail(new AccessDeniedException("Read access denied for $all."));
 						break;
 					default:
-						throw new Exception(string.Format("Unexpected ReadAllResult: {0}.", response.Result));
+						throw new Exception($"Unexpected ReadAllResult: {response.Result}.");
 				}
 			}
 
@@ -268,7 +261,7 @@ namespace EventStore.ClientAPI.Embedded {
 						Fail(new AccessDeniedException("Read access denied for $all."));
 						break;
 					default:
-						throw new Exception(string.Format("Unexpected ReadAllResult: {0}.", response.Result));
+						throw new Exception($"Unexpected ReadAllResult: {response.Result}.");
 				}
 			}
 
@@ -306,10 +299,10 @@ namespace EventStore.ClientAPI.Embedded {
 							: response.Error));
 						return;
 					case ReadEventResult.AccessDenied:
-						Fail(new AccessDeniedException(string.Format("Read access denied for stream '{0}'.", _stream)));
+						Fail(new AccessDeniedException($"Read access denied for stream '{_stream}'."));
 						return;
 					default:
-						throw new Exception(string.Format("Unexpected ReadEventResult: {0}.", response.Result));
+						throw new Exception($"Unexpected ReadEventResult: {response.Result}.");
 				}
 			}
 
@@ -330,7 +323,7 @@ namespace EventStore.ClientAPI.Embedded {
 					case ReadEventResult.StreamDeleted:
 						return EventReadStatus.StreamDeleted;
 					default:
-						throw new Exception(string.Format("Unexpected ReadEventResult: {0}.", result));
+						throw new Exception($"Unexpected ReadEventResult: {result}.");
 				}
 			}
 		}
@@ -360,10 +353,10 @@ namespace EventStore.ClientAPI.Embedded {
 							: response.Error));
 						break;
 					case ReadStreamResult.AccessDenied:
-						Fail(new AccessDeniedException(string.Format("Read access denied for stream '{0}'.", _stream)));
+						Fail(new AccessDeniedException($"Read access denied for stream '{_stream}'."));
 						break;
 					default:
-						throw new Exception(string.Format("Unexpected ReadStreamResult: {0}.", response.Result));
+						throw new Exception($"Unexpected ReadStreamResult: {response.Result}.");
 				}
 			}
 
@@ -388,7 +381,7 @@ namespace EventStore.ClientAPI.Embedded {
 					case ReadStreamResult.StreamDeleted:
 						return SliceReadStatus.StreamDeleted;
 					default:
-						throw new Exception(string.Format("Unexpected ReadStreamResult: {0}.", result));
+						throw new Exception($"Unexpected ReadStreamResult: {result}.");
 				}
 			}
 		}
@@ -417,10 +410,10 @@ namespace EventStore.ClientAPI.Embedded {
 							: response.Error));
 						break;
 					case ReadStreamResult.AccessDenied:
-						Fail(new AccessDeniedException(string.Format("Read access denied for stream '{0}'.", _stream)));
+						Fail(new AccessDeniedException($"Read access denied for stream '{_stream}'."));
 						break;
 					default:
-						throw new Exception(string.Format("Unexpected ReadStreamResult: {0}.", response.Result));
+						throw new Exception($"Unexpected ReadStreamResult: {response.Result}.");
 				}
 			}
 
@@ -445,7 +438,7 @@ namespace EventStore.ClientAPI.Embedded {
 					case ReadStreamResult.StreamDeleted:
 						return SliceReadStatus.StreamDeleted;
 					default:
-						throw new Exception(string.Format("Unexpected ReadStreamResult: {0}.", result));
+						throw new Exception($"Unexpected ReadStreamResult: {result}.");
 				}
 			}
 		}
@@ -466,9 +459,7 @@ namespace EventStore.ClientAPI.Embedded {
 					case OperationResult.ForwardTimeout:
 						break;
 					case OperationResult.WrongExpectedVersion:
-						var err = string.Format(
-							"Commit transaction failed due to WrongExpectedVersion. TransactionID: {0}.",
-							response.TransactionId);
+						var err = $"Commit transaction failed due to WrongExpectedVersion. TransactionID: {response.TransactionId}.";
 						Fail(new WrongExpectedVersionException(err));
 						break;
 					case OperationResult.StreamDeleted:
@@ -481,7 +472,7 @@ namespace EventStore.ClientAPI.Embedded {
 						Fail(new AccessDeniedException("Write access denied."));
 						break;
 					default:
-						throw new Exception(string.Format("Unexpected OperationResult: {0}.", response.Result));
+						throw new Exception($"Unexpected OperationResult: {response.Result}.");
 				}
 			}
 
@@ -514,9 +505,7 @@ namespace EventStore.ClientAPI.Embedded {
 					case OperationResult.ForwardTimeout:
 						break;
 					case OperationResult.WrongExpectedVersion:
-						var err = string.Format(
-							"Start transaction failed due to WrongExpectedVersion. Stream: {0}, Expected version: {1}.",
-							_stream, _expectedVersion);
+						var err = $"Start transaction failed due to WrongExpectedVersion. Stream: {_stream}, Expected version: {_expectedVersion}.";
 						Fail(new WrongExpectedVersionException(err));
 						break;
 					case OperationResult.StreamDeleted:
@@ -526,11 +515,10 @@ namespace EventStore.ClientAPI.Embedded {
 						Fail(new InvalidTransactionException());
 						break;
 					case OperationResult.AccessDenied:
-						Fail(new AccessDeniedException(string.Format("Write access denied for stream '{0}'.",
-							_stream)));
+						Fail(new AccessDeniedException($"Write access denied for stream '{_stream}'."));
 						break;
 					default:
-						throw new Exception(string.Format("Unexpected OperationResult: {0}.", response.Result));
+						throw new Exception($"Unexpected OperationResult: {response.Result}.");
 				}
 			}
 
@@ -563,7 +551,7 @@ namespace EventStore.ClientAPI.Embedded {
 						Fail(new AccessDeniedException(string.Format("Write access denied.")));
 						break;
 					default:
-						throw new Exception(string.Format("Unexpected OperationResult: {0}.", response.Result));
+						throw new Exception($"Unexpected OperationResult: {response.Result}.");
 				}
 			}
 
@@ -592,22 +580,19 @@ namespace EventStore.ClientAPI.Embedded {
 						Succeed(response);
 						break;
 					case ClientMessage.CreatePersistentSubscriptionCompleted.CreatePersistentSubscriptionResult.Fail:
-						Fail(new InvalidOperationException(String.Format(
-							"Subscription group {0} on stream {1} failed '{2}'", _groupName, _stream,
-							response.Reason)));
+						Fail(new InvalidOperationException($"Subscription group {_groupName} on stream {_stream} failed '{response.Reason}'"));
 						break;
 					case ClientMessage.CreatePersistentSubscriptionCompleted.CreatePersistentSubscriptionResult
 						.AccessDenied:
-						Fail(new AccessDeniedException(string.Format("Write access denied for stream '{0}'.",
-							_stream)));
+						Fail(new AccessDeniedException($"Write access denied for stream '{_stream}'."));
 						break;
 					case ClientMessage.CreatePersistentSubscriptionCompleted.CreatePersistentSubscriptionResult
 						.AlreadyExists:
 						Fail(new InvalidOperationException(
-							String.Format("Subscription group {0} on stream {1} already exists", _groupName, _stream)));
+							$"Subscription group {_groupName} on stream {_stream} already exists"));
 						break;
 					default:
-						throw new Exception(string.Format("Unexpected OperationResult: {0}.", response.Result));
+						throw new Exception($"Unexpected OperationResult: {response.Result}.");
 				}
 			}
 
@@ -636,22 +621,19 @@ namespace EventStore.ClientAPI.Embedded {
 						Succeed(response);
 						break;
 					case ClientMessage.UpdatePersistentSubscriptionCompleted.UpdatePersistentSubscriptionResult.Fail:
-						Fail(new InvalidOperationException(String.Format(
-							"Subscription group {0} on stream {1} failed '{2}'", _groupName, _stream,
-							response.Reason)));
+						Fail(new InvalidOperationException($"Subscription group {_groupName} on stream {_stream} failed '{response.Reason}'"));
 						break;
 					case ClientMessage.UpdatePersistentSubscriptionCompleted.UpdatePersistentSubscriptionResult
 						.AccessDenied:
-						Fail(new AccessDeniedException(string.Format("Write access denied for stream '{0}'.",
-							_stream)));
+						Fail(new AccessDeniedException($"Write access denied for stream '{_stream}'."));
 						break;
 					case ClientMessage.UpdatePersistentSubscriptionCompleted.UpdatePersistentSubscriptionResult
 						.DoesNotExist:
 						Fail(new InvalidOperationException(
-							String.Format("Subscription group {0} on stream {1} does not exist", _groupName, _stream)));
+							$"Subscription group {_groupName} on stream {_stream} does not exist"));
 						break;
 					default:
-						throw new Exception(string.Format("Unexpected OperationResult: {0}.", response.Result));
+						throw new Exception($"Unexpected OperationResult: {response.Result}.");
 				}
 			}
 
@@ -680,22 +662,19 @@ namespace EventStore.ClientAPI.Embedded {
 						Succeed(response);
 						break;
 					case ClientMessage.DeletePersistentSubscriptionCompleted.DeletePersistentSubscriptionResult.Fail:
-						Fail(new InvalidOperationException(String.Format(
-							"Subscription group {0} on stream {1} failed '{2}'", _groupName, _stream,
-							response.Reason)));
+						Fail(new InvalidOperationException($"Subscription group {_groupName} on stream {_stream} failed '{response.Reason}'"));
 						break;
 					case ClientMessage.DeletePersistentSubscriptionCompleted.DeletePersistentSubscriptionResult
 						.AccessDenied:
-						Fail(new AccessDeniedException(string.Format("Write access denied for stream '{0}'.",
-							_stream)));
+						Fail(new AccessDeniedException($"Write access denied for stream '{_stream}'."));
 						break;
 					case ClientMessage.DeletePersistentSubscriptionCompleted.DeletePersistentSubscriptionResult
 						.DoesNotExist:
 						Fail(new InvalidOperationException(
-							String.Format("Subscription group {0} on stream {1} does not exist", _groupName, _stream)));
+							$"Subscription group {_groupName} on stream {_stream} does not exist"));
 						break;
 					default:
-						throw new Exception(string.Format("Unexpected OperationResult: {0}.", response.Result));
+						throw new Exception($"Unexpected OperationResult: {response.Result}.");
 				}
 			}
 
diff --git a/src/EventStore.ClientAPI.Embedded/EmbeddedSubscriptionBase.cs b/src/EventStore.ClientAPI.Embedded/EmbeddedSubscriptionBase.cs
index 39abe5201..9e06886c4 100644
--- a/src/EventStore.ClientAPI.Embedded/EmbeddedSubscriptionBase.cs
+++ b/src/EventStore.ClientAPI.Embedded/EmbeddedSubscriptionBase.cs
@@ -45,9 +45,7 @@ namespace EventStore.ClientAPI.Embedded {
 			switch (reason) {
 				case Core.Services.SubscriptionDropReason.AccessDenied:
 					DropSubscription(SubscriptionDropReason.AccessDenied,
-						ex ?? new AccessDeniedException(string.Format(
-							"Subscription to '{0}' failed due to access denied.",
-							StreamId == string.Empty ? "<all>" : StreamId)));
+						ex ?? new AccessDeniedException($"Subscription to '{(StreamId == string.Empty ? "<all>" : StreamId)}' failed due to access denied."));
 					break;
 				case Core.Services.SubscriptionDropReason.Unsubscribed:
 					Unsubscribe();
@@ -62,7 +60,7 @@ namespace EventStore.ClientAPI.Embedded {
 		public void ConfirmSubscription(long lastCommitPosition, long? lastEventNumber) {
 			if (lastCommitPosition < -1)
 				throw new ArgumentOutOfRangeException("lastCommitPosition",
-					string.Format("Invalid lastCommitPosition {0} on subscription confirmation.", lastCommitPosition));
+					$"Invalid lastCommitPosition {lastCommitPosition} on subscription confirmation.");
 			if (Subscription != null)
 				throw new Exception("Double confirmation of subscription.");
 
@@ -80,8 +78,7 @@ namespace EventStore.ClientAPI.Embedded {
 			if (Interlocked.CompareExchange(ref _unsubscribed, 1, 0) == 0) {
 				if (reason != SubscriptionDropReason.UserInitiated) {
 					if (exception == null)
-						throw new Exception(string.Format("No exception provided for subscription drop reason '{0}",
-							reason));
+						throw new Exception($"No exception provided for subscription drop reason '{reason}");
 					_source.TrySetException(exception);
 				}
 
diff --git a/src/EventStore.ClientAPI.Embedded/EventStoreEmbeddedNodeConnection.cs b/src/EventStore.ClientAPI.Embedded/EventStoreEmbeddedNodeConnection.cs
index d8329948e..a2ea84936 100644
--- a/src/EventStore.ClientAPI.Embedded/EventStoreEmbeddedNodeConnection.cs
+++ b/src/EventStore.ClientAPI.Embedded/EventStoreEmbeddedNodeConnection.cs
@@ -317,9 +317,7 @@ namespace EventStore.ClientAPI.Embedded {
 			Ensure.Nonnegative(start, nameof(start));
 			Ensure.Positive(count, nameof(count));
 			if (count > ClientApiConstants.MaxReadSize)
-				throw new ArgumentException(string.Format(
-					"Count should be less than {0}. For larger reads you should page.",
-					ClientApiConstants.MaxReadSize));
+				throw new ArgumentException($"Count should be less than {ClientApiConstants.MaxReadSize}. For larger reads you should page.");
 			var source =
 				new TaskCompletionSource<StreamEventsSlice>(TaskCreationOptions.RunContinuationsAsynchronously);
 
@@ -341,9 +339,7 @@ namespace EventStore.ClientAPI.Embedded {
 			Ensure.NotNullOrEmpty(stream, nameof(stream));
 			Ensure.Positive(count, nameof(count));
 			if (count > ClientApiConstants.MaxReadSize)
-				throw new ArgumentException(string.Format(
-					"Count should be less than {0}. For larger reads you should page.",
-					ClientApiConstants.MaxReadSize));
+				throw new ArgumentException($"Count should be less than {ClientApiConstants.MaxReadSize}. For larger reads you should page.");
 			var source =
 				new TaskCompletionSource<StreamEventsSlice>(TaskCreationOptions.RunContinuationsAsynchronously);
 
@@ -364,9 +360,7 @@ namespace EventStore.ClientAPI.Embedded {
 			UserCredentials userCredentials = null) {
 			Ensure.Positive(maxCount, nameof(maxCount));
 			if (maxCount > ClientApiConstants.MaxReadSize)
-				throw new ArgumentException(string.Format(
-					"Count should be less than {0}. For larger reads you should page.",
-					ClientApiConstants.MaxReadSize));
+				throw new ArgumentException($"Count should be less than {ClientApiConstants.MaxReadSize}. For larger reads you should page.");
 			var source = new TaskCompletionSource<AllEventsSlice>(TaskCreationOptions.RunContinuationsAsynchronously);
 
 			var envelope = new EmbeddedResponseEnvelope(new EmbeddedResponders.ReadAllEventsForward(source));
@@ -396,9 +390,7 @@ namespace EventStore.ClientAPI.Embedded {
 			Ensure.NotNull(filter, nameof(filter));
 
 			if (maxCount > ClientApiConstants.MaxReadSize)
-				throw new ArgumentException(string.Format(
-					"Count should be less than {0}. For larger reads you should page.",
-					ClientApiConstants.MaxReadSize));
+				throw new ArgumentException($"Count should be less than {ClientApiConstants.MaxReadSize}. For larger reads you should page.");
 			var source = new TaskCompletionSource<AllEventsSlice>(TaskCreationOptions.RunContinuationsAsynchronously);
 
 			var envelope = new EmbeddedResponseEnvelope(new EmbeddedResponders.FilteredReadAllEventsForward(source));
@@ -420,9 +412,7 @@ namespace EventStore.ClientAPI.Embedded {
 			UserCredentials userCredentials = null) {
 			Ensure.Positive(maxCount, nameof(maxCount));
 			if (maxCount > ClientApiConstants.MaxReadSize)
-				throw new ArgumentException(string.Format(
-					"Count should be less than {0}. For larger reads you should page.",
-					ClientApiConstants.MaxReadSize));
+				throw new ArgumentException($"Count should be less than {ClientApiConstants.MaxReadSize}. For larger reads you should page.");
 			var source = new TaskCompletionSource<AllEventsSlice>(TaskCreationOptions.RunContinuationsAsynchronously);
 			var envelope = new EmbeddedResponseEnvelope(new EmbeddedResponders.ReadAllEventsBackward(source));
 			Guid corrId = Guid.NewGuid();
@@ -448,9 +438,7 @@ namespace EventStore.ClientAPI.Embedded {
 			Ensure.NotNull(filter, nameof(filter));
 
 			if (maxCount > ClientApiConstants.MaxReadSize)
-				throw new ArgumentException(string.Format(
-					"Count should be less than {0}. For larger reads you should page.",
-					ClientApiConstants.MaxReadSize));
+				throw new ArgumentException($"Count should be less than {ClientApiConstants.MaxReadSize}. For larger reads you should page.");
 			var source = new TaskCompletionSource<AllEventsSlice>(TaskCreationOptions.RunContinuationsAsynchronously);
 			var envelope = new EmbeddedResponseEnvelope(new EmbeddedResponders.FilteredReadAllEventsBackward(source));
 			Guid corrId = Guid.NewGuid();
@@ -793,7 +781,7 @@ namespace EventStore.ClientAPI.Embedded {
 			Ensure.NotNullOrEmpty(stream, nameof(stream));
 			if (SystemStreams.IsMetastream(stream))
 				throw new ArgumentException(
-					string.Format("Setting metadata for metastream '{0}' is not supported.", stream), "stream");
+					$"Setting metadata for metastream '{stream}' is not supported.", "stream");
 
 			var metaevent = new EventData(Guid.NewGuid(), SystemEventTypes.StreamMetadata, true,
 				metadata ?? Empty.ByteArray, null);
@@ -849,8 +837,7 @@ namespace EventStore.ClientAPI.Embedded {
 					case EventReadStatus.StreamDeleted:
 						return new RawStreamMetadataResult(stream, true, long.MaxValue, Empty.ByteArray);
 					default:
-						throw new ArgumentOutOfRangeException(string.Format("Unexpected ReadEventResult: {0}.",
-							res.Status));
+						throw new ArgumentOutOfRangeException($"Unexpected ReadEventResult: {res.Status}.");
 				}
 			});
 		}
diff --git a/src/EventStore.ClientAPI/CatchUpSubscriptionSettings.cs b/src/EventStore.ClientAPI/CatchUpSubscriptionSettings.cs
index 419ebe8ec..8613feb45 100644
--- a/src/EventStore.ClientAPI/CatchUpSubscriptionSettings.cs
+++ b/src/EventStore.ClientAPI/CatchUpSubscriptionSettings.cs
@@ -55,9 +55,7 @@ namespace EventStore.ClientAPI {
 			Ensure.Positive(readBatchSize, "readBatchSize");
 			Ensure.Positive(maxLiveQueueSize, "maxLiveQueueSize");
 			if (readBatchSize > ClientApiConstants.MaxReadSize)
-				throw new ArgumentException(string.Format(
-					"Read batch size should be less than {0}. For larger reads you should page.",
-					ClientApiConstants.MaxReadSize));
+				throw new ArgumentException($"Read batch size should be less than {ClientApiConstants.MaxReadSize}. For larger reads you should page.");
 			MaxLiveQueueSize = maxLiveQueueSize;
 			ReadBatchSize = readBatchSize;
 			VerboseLogging = verboseLogging;
diff --git a/src/EventStore.ClientAPI/ClientOperations/AppendToStreamOperation.cs b/src/EventStore.ClientAPI/ClientOperations/AppendToStreamOperation.cs
index 5593b131d..3bcfb2f2d 100644
--- a/src/EventStore.ClientAPI/ClientOperations/AppendToStreamOperation.cs
+++ b/src/EventStore.ClientAPI/ClientOperations/AppendToStreamOperation.cs
@@ -52,9 +52,7 @@ namespace EventStore.ClientAPI.ClientOperations {
 					_wasCommitTimeout = true;
 					return new InspectionResult(InspectionDecision.Retry, "CommitTimeout");
 				case ClientMessage.OperationResult.WrongExpectedVersion:
-					var err = string.Format(
-						"Append failed due to WrongExpectedVersion. Stream: {0}, Expected version: {1}, Current version: {2}",
-						_stream, _expectedVersion, response.CurrentVersion);
+					var err = $"Append failed due to WrongExpectedVersion. Stream: {_stream}, Expected version: {_expectedVersion}, Current version: {response.CurrentVersion}";
 					Fail(new WrongExpectedVersionException(err, _expectedVersion, response.CurrentVersion));
 					return new InspectionResult(InspectionDecision.EndOperation, "WrongExpectedVersion");
 				case ClientMessage.OperationResult.StreamDeleted:
@@ -64,10 +62,10 @@ namespace EventStore.ClientAPI.ClientOperations {
 					Fail(new InvalidTransactionException());
 					return new InspectionResult(InspectionDecision.EndOperation, "InvalidTransaction");
 				case ClientMessage.OperationResult.AccessDenied:
-					Fail(new AccessDeniedException(string.Format("Write access denied for stream '{0}'.", _stream)));
+					Fail(new AccessDeniedException($"Write access denied for stream '{_stream}'."));
 					return new InspectionResult(InspectionDecision.EndOperation, "AccessDenied");
 				default:
-					throw new Exception(string.Format("Unexpected OperationResult: {0}.", response.Result));
+					throw new Exception($"Unexpected OperationResult: {response.Result}.");
 			}
 		}
 
@@ -77,7 +75,7 @@ namespace EventStore.ClientAPI.ClientOperations {
 		}
 
 		public override string ToString() {
-			return string.Format("Stream: {0}, ExpectedVersion: {1}", _stream, _expectedVersion);
+			return $"Stream: {_stream}, ExpectedVersion: {_expectedVersion}";
 		}
 	}
 }
diff --git a/src/EventStore.ClientAPI/ClientOperations/CommitTransactionOperation.cs b/src/EventStore.ClientAPI/ClientOperations/CommitTransactionOperation.cs
index 1a3a5bcf1..e9eec2318 100644
--- a/src/EventStore.ClientAPI/ClientOperations/CommitTransactionOperation.cs
+++ b/src/EventStore.ClientAPI/ClientOperations/CommitTransactionOperation.cs
@@ -32,8 +32,7 @@ namespace EventStore.ClientAPI.ClientOperations {
 				case ClientMessage.OperationResult.ForwardTimeout:
 					return new InspectionResult(InspectionDecision.Retry, "ForwardTimeout");
 				case ClientMessage.OperationResult.WrongExpectedVersion:
-					var err = string.Format(
-						"Commit transaction failed due to WrongExpectedVersion. TransactionID: {0}.", _transactionId);
+					var err = $"Commit transaction failed due to WrongExpectedVersion. TransactionID: {_transactionId}.";
 					Fail(new WrongExpectedVersionException(err));
 					return new InspectionResult(InspectionDecision.EndOperation, "WrongExpectedVersion");
 				case ClientMessage.OperationResult.StreamDeleted:
@@ -46,7 +45,7 @@ namespace EventStore.ClientAPI.ClientOperations {
 					Fail(new AccessDeniedException("Write access denied."));
 					return new InspectionResult(InspectionDecision.EndOperation, "AccessDenied");
 				default:
-					throw new Exception(string.Format("Unexpected OperationResult: {0}.", response.Result));
+					throw new Exception($"Unexpected OperationResult: {response.Result}.");
 			}
 		}
 
@@ -56,7 +55,7 @@ namespace EventStore.ClientAPI.ClientOperations {
 		}
 
 		public override string ToString() {
-			return string.Format("TransactionId: {0}", _transactionId);
+			return $"TransactionId: {_transactionId}";
 		}
 	}
 }
diff --git a/src/EventStore.ClientAPI/ClientOperations/ConditionalAppendToStreamOperation.cs b/src/EventStore.ClientAPI/ClientOperations/ConditionalAppendToStreamOperation.cs
index 7418add4a..8839e3713 100644
--- a/src/EventStore.ClientAPI/ClientOperations/ConditionalAppendToStreamOperation.cs
+++ b/src/EventStore.ClientAPI/ClientOperations/ConditionalAppendToStreamOperation.cs
@@ -62,10 +62,10 @@ namespace EventStore.ClientAPI.ClientOperations {
 					Fail(new InvalidTransactionException());
 					return new InspectionResult(InspectionDecision.EndOperation, "InvalidTransaction");
 				case ClientMessage.OperationResult.AccessDenied:
-					Fail(new AccessDeniedException(string.Format("Write access denied for stream '{0}'.", _stream)));
+					Fail(new AccessDeniedException($"Write access denied for stream '{_stream}'."));
 					return new InspectionResult(InspectionDecision.EndOperation, "AccessDenied");
 				default:
-					throw new Exception(string.Format("Unexpected OperationResult: {0}.", response.Result));
+					throw new Exception($"Unexpected OperationResult: {response.Result}.");
 			}
 		}
 
@@ -83,7 +83,7 @@ namespace EventStore.ClientAPI.ClientOperations {
 		}
 
 		public override string ToString() {
-			return string.Format("Stream: {0}, ExpectedVersion: {1}", _stream, _expectedVersion);
+			return $"Stream: {_stream}, ExpectedVersion: {_expectedVersion}";
 		}
 	}
 }
diff --git a/src/EventStore.ClientAPI/ClientOperations/CreatePersistentSubscriptionOperation.cs b/src/EventStore.ClientAPI/ClientOperations/CreatePersistentSubscriptionOperation.cs
index 28fc79365..e0a754dce 100644
--- a/src/EventStore.ClientAPI/ClientOperations/CreatePersistentSubscriptionOperation.cs
+++ b/src/EventStore.ClientAPI/ClientOperations/CreatePersistentSubscriptionOperation.cs
@@ -67,20 +67,19 @@ namespace EventStore.ClientAPI.ClientOperations {
 					Succeed();
 					return new InspectionResult(InspectionDecision.EndOperation, "Success");
 				case ClientMessage.CreatePersistentSubscriptionCompleted.CreatePersistentSubscriptionResult.Fail:
-					Fail(new InvalidOperationException(String.Format(
-						"Subscription group {0} on stream {1} failed '{2}'", _groupName, _stream, response.Reason)));
+					Fail(new InvalidOperationException($"Subscription group {_groupName} on stream {_stream} failed '{response.Reason}'"));
 					return new InspectionResult(InspectionDecision.EndOperation, "Fail");
 				case ClientMessage.CreatePersistentSubscriptionCompleted.CreatePersistentSubscriptionResult
 					.AccessDenied:
-					Fail(new AccessDeniedException(string.Format("Write access denied for stream '{0}'.", _stream)));
+					Fail(new AccessDeniedException($"Write access denied for stream '{_stream}'."));
 					return new InspectionResult(InspectionDecision.EndOperation, "AccessDenied");
 				case ClientMessage.CreatePersistentSubscriptionCompleted.CreatePersistentSubscriptionResult
 					.AlreadyExists:
 					Fail(new InvalidOperationException(
-						String.Format("Subscription group {0} on stream {1} already exists", _groupName, _stream)));
+						$"Subscription group {_groupName} on stream {_stream} already exists"));
 					return new InspectionResult(InspectionDecision.EndOperation, "AlreadyExists");
 				default:
-					throw new Exception(string.Format("Unexpected OperationResult: {0}.", response.Result));
+					throw new Exception($"Unexpected OperationResult: {response.Result}.");
 			}
 		}
 
@@ -90,7 +89,7 @@ namespace EventStore.ClientAPI.ClientOperations {
 		}
 
 		public override string ToString() {
-			return string.Format("Stream: {0}, Group Name: {1}", _stream, _groupName);
+			return $"Stream: {_stream}, Group Name: {_groupName}";
 		}
 	}
 }
diff --git a/src/EventStore.ClientAPI/ClientOperations/DeletePersistentSubscriptionOperation.cs b/src/EventStore.ClientAPI/ClientOperations/DeletePersistentSubscriptionOperation.cs
index 1c5f23168..697dd3199 100644
--- a/src/EventStore.ClientAPI/ClientOperations/DeletePersistentSubscriptionOperation.cs
+++ b/src/EventStore.ClientAPI/ClientOperations/DeletePersistentSubscriptionOperation.cs
@@ -33,20 +33,19 @@ namespace EventStore.ClientAPI.ClientOperations {
 					Succeed();
 					return new InspectionResult(InspectionDecision.EndOperation, "Success");
 				case ClientMessage.DeletePersistentSubscriptionCompleted.DeletePersistentSubscriptionResult.Fail:
-					Fail(new InvalidOperationException(String.Format(
-						"Subscription group {0} on stream {1} failed '{2}'", _groupName, _stream, response.Reason)));
+					Fail(new InvalidOperationException($"Subscription group {_groupName} on stream {_stream} failed '{response.Reason}'"));
 					return new InspectionResult(InspectionDecision.EndOperation, "Fail");
 				case ClientMessage.DeletePersistentSubscriptionCompleted.DeletePersistentSubscriptionResult
 					.AccessDenied:
-					Fail(new AccessDeniedException(string.Format("Write access denied for stream '{0}'.", _stream)));
+					Fail(new AccessDeniedException($"Write access denied for stream '{_stream}'."));
 					return new InspectionResult(InspectionDecision.EndOperation, "AccessDenied");
 				case ClientMessage.DeletePersistentSubscriptionCompleted.DeletePersistentSubscriptionResult
 					.DoesNotExist:
 					Fail(new InvalidOperationException(
-						String.Format("Subscription group {0} on stream {1} does not exist", _groupName, _stream)));
+						$"Subscription group {_groupName} on stream {_stream} does not exist"));
 					return new InspectionResult(InspectionDecision.EndOperation, "AlreadyExists");
 				default:
-					throw new Exception(string.Format("Unexpected OperationResult: {0}.", response.Result));
+					throw new Exception($"Unexpected OperationResult: {response.Result}.");
 			}
 		}
 
@@ -57,7 +56,7 @@ namespace EventStore.ClientAPI.ClientOperations {
 
 
 		public override string ToString() {
-			return string.Format("Stream: {0}, Group Name: {1}", _stream, _groupName);
+			return $"Stream: {_stream}, Group Name: {_groupName}";
 		}
 	}
 }
diff --git a/src/EventStore.ClientAPI/ClientOperations/DeleteStreamOperation.cs b/src/EventStore.ClientAPI/ClientOperations/DeleteStreamOperation.cs
index ce92465a6..afcc8173f 100644
--- a/src/EventStore.ClientAPI/ClientOperations/DeleteStreamOperation.cs
+++ b/src/EventStore.ClientAPI/ClientOperations/DeleteStreamOperation.cs
@@ -37,9 +37,7 @@ namespace EventStore.ClientAPI.ClientOperations {
 				case ClientMessage.OperationResult.ForwardTimeout:
 					return new InspectionResult(InspectionDecision.Retry, "ForwardTimeout");
 				case ClientMessage.OperationResult.WrongExpectedVersion:
-					var err = string.Format(
-						"Delete stream failed due to WrongExpectedVersion. Stream: {0}, Expected version: {1}.",
-						_stream, _expectedVersion);
+					var err = $"Delete stream failed due to WrongExpectedVersion. Stream: {_stream}, Expected version: {_expectedVersion}.";
 					Fail(new WrongExpectedVersionException(err));
 					return new InspectionResult(InspectionDecision.EndOperation, "WrongExpectedVersion");
 				case ClientMessage.OperationResult.StreamDeleted:
@@ -49,10 +47,10 @@ namespace EventStore.ClientAPI.ClientOperations {
 					Fail(new InvalidTransactionException());
 					return new InspectionResult(InspectionDecision.EndOperation, "InvalidTransaction");
 				case ClientMessage.OperationResult.AccessDenied:
-					Fail(new AccessDeniedException(string.Format("Write access denied for stream '{0}'.", _stream)));
+					Fail(new AccessDeniedException($"Write access denied for stream '{_stream}'."));
 					return new InspectionResult(InspectionDecision.EndOperation, "AccessDenied");
 				default:
-					throw new Exception(string.Format("Unexpected OperationResult: {0}.", response.Result));
+					throw new Exception($"Unexpected OperationResult: {response.Result}.");
 			}
 		}
 
@@ -61,7 +59,7 @@ namespace EventStore.ClientAPI.ClientOperations {
 		}
 
 		public override string ToString() {
-			return string.Format("Stream: {0}, ExpectedVersion: {1}.", _stream, _expectedVersion);
+			return $"Stream: {_stream}, ExpectedVersion: {_expectedVersion}.";
 		}
 	}
 }
diff --git a/src/EventStore.ClientAPI/ClientOperations/FilteredReadAllEventsBackwardOperation.cs b/src/EventStore.ClientAPI/ClientOperations/FilteredReadAllEventsBackwardOperation.cs
index b651cbfca..937f2887f 100644
--- a/src/EventStore.ClientAPI/ClientOperations/FilteredReadAllEventsBackwardOperation.cs
+++ b/src/EventStore.ClientAPI/ClientOperations/FilteredReadAllEventsBackwardOperation.cs
@@ -47,7 +47,7 @@ namespace EventStore.ClientAPI.ClientOperations {
 					Fail(new AccessDeniedException("Read access denied for $all."));
 					return new InspectionResult(InspectionDecision.EndOperation, "AccessDenied");
 				default:
-					throw new Exception(string.Format("Unexpected ReadAllResult: {0}.", response.Result));
+					throw new Exception($"Unexpected ReadAllResult: {response.Result}.");
 			}
 		}
 
@@ -59,8 +59,7 @@ namespace EventStore.ClientAPI.ClientOperations {
 		}
 
 		public override string ToString() {
-			return string.Format("Position: {0}, MaxCount: {1}, ResolveLinkTos: {2}, RequireLeader: {3}",
-				_position, _maxCount, _resolveLinkTos, _requireLeader);
+			return $"Position: {_position}, MaxCount: {_maxCount}, ResolveLinkTos: {_resolveLinkTos}, RequireLeader: {_requireLeader}";
 		}
 	}
 }
diff --git a/src/EventStore.ClientAPI/ClientOperations/FilteredReadAllEventsForwardOperation.cs b/src/EventStore.ClientAPI/ClientOperations/FilteredReadAllEventsForwardOperation.cs
index f8e0a527c..ed3f6ce88 100644
--- a/src/EventStore.ClientAPI/ClientOperations/FilteredReadAllEventsForwardOperation.cs
+++ b/src/EventStore.ClientAPI/ClientOperations/FilteredReadAllEventsForwardOperation.cs
@@ -48,7 +48,7 @@ namespace EventStore.ClientAPI.ClientOperations {
 					Fail(new AccessDeniedException("Read access denied for $all."));
 					return new InspectionResult(InspectionDecision.EndOperation, "AccessDenied");
 				default:
-					throw new Exception(string.Format("Unexpected ReadAllResult: {0}.", response.Result));
+					throw new Exception($"Unexpected ReadAllResult: {response.Result}.");
 			}
 		}
 
@@ -60,8 +60,7 @@ namespace EventStore.ClientAPI.ClientOperations {
 		}
 
 		public override string ToString() {
-			return string.Format("Position: {0}, MaxCount: {1}, ResolveLinkTos: {2}, RequireLeader: {3}",
-				_position, _maxCount, _resolveLinkTos, _requireLeader);
+			return $"Position: {_position}, MaxCount: {_maxCount}, ResolveLinkTos: {_resolveLinkTos}, RequireLeader: {_requireLeader}";
 		}
 	}
 }
diff --git a/src/EventStore.ClientAPI/ClientOperations/OperationBase.cs b/src/EventStore.ClientAPI/ClientOperations/OperationBase.cs
index 5e41daead..f7899c98e 100644
--- a/src/EventStore.ClientAPI/ClientOperations/OperationBase.cs
+++ b/src/EventStore.ClientAPI/ClientOperations/OperationBase.cs
@@ -69,7 +69,7 @@ namespace EventStore.ClientAPI.ClientOperations {
 			} catch (Exception e) {
 				Fail(e);
 				return new InspectionResult(InspectionDecision.EndOperation,
-					string.Format("Exception - {0}", e.Message));
+					$"Exception - {e.Message}");
 			}
 		}
 
@@ -101,7 +101,7 @@ namespace EventStore.ClientAPI.ClientOperations {
 			string message = Helper.EatException(() =>
 				Helper.UTF8NoBom.GetString(package.Data.Array, package.Data.Offset, package.Data.Count));
 			Fail(new ServerErrorException(string.IsNullOrEmpty(message) ? "<no message>" : message));
-			return new InspectionResult(InspectionDecision.EndOperation, string.Format("BadRequest - {0}", message));
+			return new InspectionResult(InspectionDecision.EndOperation, $"BadRequest - {message}");
 		}
 
 		public InspectionResult InspectNotHandled(TcpPackage package) {
@@ -130,7 +130,7 @@ namespace EventStore.ClientAPI.ClientOperations {
 
 		public InspectionResult InspectUnexpectedCommand(TcpPackage package, TcpCommand expectedCommand) {
 			if (package.Command == expectedCommand)
-				throw new ArgumentException(string.Format("Command should not be {0}.", package.Command));
+				throw new ArgumentException($"Command should not be {package.Command}.");
 
 			Log.Error("Unexpected TcpCommand received.");
 			Log.Error("Expected: {0}, Actual: {1}, Flags: {2}, CorrelationId: {3}", expectedCommand, package.Command,
@@ -141,7 +141,7 @@ namespace EventStore.ClientAPI.ClientOperations {
 
 			Fail(new CommandNotExpectedException(expectedCommand.ToString(), package.Command.ToString()));
 			return new InspectionResult(InspectionDecision.EndOperation,
-				string.Format("Unexpected command - {0}", package.Command.ToString()));
+				$"Unexpected command - {package.Command.ToString()}");
 		}
 	}
 }
diff --git a/src/EventStore.ClientAPI/ClientOperations/ReadAllEventsBackwardOperation.cs b/src/EventStore.ClientAPI/ClientOperations/ReadAllEventsBackwardOperation.cs
index 5a5746778..2b3d0fcf1 100644
--- a/src/EventStore.ClientAPI/ClientOperations/ReadAllEventsBackwardOperation.cs
+++ b/src/EventStore.ClientAPI/ClientOperations/ReadAllEventsBackwardOperation.cs
@@ -41,7 +41,7 @@ namespace EventStore.ClientAPI.ClientOperations {
 					Fail(new AccessDeniedException("Read access denied for $all."));
 					return new InspectionResult(InspectionDecision.EndOperation, "AccessDenied");
 				default:
-					throw new Exception(string.Format("Unexpected ReadAllResult: {0}.", response.Result));
+					throw new Exception($"Unexpected ReadAllResult: {response.Result}.");
 			}
 		}
 
@@ -53,8 +53,7 @@ namespace EventStore.ClientAPI.ClientOperations {
 		}
 
 		public override string ToString() {
-			return string.Format("Position: {0}, MaxCount: {1}, ResolveLinkTos: {2}, RequireLeader: {3}",
-				_position, _maxCount, _resolveLinkTos, _requireLeader);
+			return $"Position: {_position}, MaxCount: {_maxCount}, ResolveLinkTos: {_resolveLinkTos}, RequireLeader: {_requireLeader}";
 		}
 	}
 }
diff --git a/src/EventStore.ClientAPI/ClientOperations/ReadAllEventsForwardOperation.cs b/src/EventStore.ClientAPI/ClientOperations/ReadAllEventsForwardOperation.cs
index 92a0c46f7..f2ca772f4 100644
--- a/src/EventStore.ClientAPI/ClientOperations/ReadAllEventsForwardOperation.cs
+++ b/src/EventStore.ClientAPI/ClientOperations/ReadAllEventsForwardOperation.cs
@@ -40,7 +40,7 @@ namespace EventStore.ClientAPI.ClientOperations {
 					Fail(new AccessDeniedException("Read access denied for $all."));
 					return new InspectionResult(InspectionDecision.EndOperation, "AccessDenied");
 				default:
-					throw new Exception(string.Format("Unexpected ReadAllResult: {0}.", response.Result));
+					throw new Exception($"Unexpected ReadAllResult: {response.Result}.");
 			}
 		}
 
@@ -52,8 +52,7 @@ namespace EventStore.ClientAPI.ClientOperations {
 		}
 
 		public override string ToString() {
-			return string.Format("Position: {0}, MaxCount: {1}, ResolveLinkTos: {2}, RequireLeader: {3}",
-				_position, _maxCount, _resolveLinkTos, _requireLeader);
+			return $"Position: {_position}, MaxCount: {_maxCount}, ResolveLinkTos: {_resolveLinkTos}, RequireLeader: {_requireLeader}";
 		}
 	}
 }
diff --git a/src/EventStore.ClientAPI/ClientOperations/ReadEventOperation.cs b/src/EventStore.ClientAPI/ClientOperations/ReadEventOperation.cs
index a9d3cefa3..8248935b8 100644
--- a/src/EventStore.ClientAPI/ClientOperations/ReadEventOperation.cs
+++ b/src/EventStore.ClientAPI/ClientOperations/ReadEventOperation.cs
@@ -43,10 +43,10 @@ namespace EventStore.ClientAPI.ClientOperations {
 						string.IsNullOrEmpty(response.Error) ? "<no message>" : response.Error));
 					return new InspectionResult(InspectionDecision.EndOperation, "Error");
 				case ClientMessage.ReadEventCompleted.ReadEventResult.AccessDenied:
-					Fail(new AccessDeniedException(string.Format("Read access denied for stream '{0}'.", _stream)));
+					Fail(new AccessDeniedException($"Read access denied for stream '{_stream}'."));
 					return new InspectionResult(InspectionDecision.EndOperation, "AccessDenied");
 				default:
-					throw new Exception(string.Format("Unexpected ReadEventResult: {0}.", response.Result));
+					throw new Exception($"Unexpected ReadEventResult: {response.Result}.");
 			}
 		}
 
@@ -66,13 +66,12 @@ namespace EventStore.ClientAPI.ClientOperations {
 				case ClientMessage.ReadEventCompleted.ReadEventResult.StreamDeleted:
 					return EventReadStatus.StreamDeleted;
 				default:
-					throw new Exception(string.Format("Unexpected ReadEventResult: {0}.", result));
+					throw new Exception($"Unexpected ReadEventResult: {result}.");
 			}
 		}
 
 		public override string ToString() {
-			return string.Format("Stream: {0}, EventNumber: {1}, ResolveLinkTo: {2}, RequireLeader: {3}",
-				_stream, _eventNumber, _resolveLinkTo, _requireLeader);
+			return $"Stream: {_stream}, EventNumber: {_eventNumber}, ResolveLinkTo: {_resolveLinkTo}, RequireLeader: {_requireLeader}";
 		}
 	}
 }
diff --git a/src/EventStore.ClientAPI/ClientOperations/ReadStreamEventsBackwardOperation.cs b/src/EventStore.ClientAPI/ClientOperations/ReadStreamEventsBackwardOperation.cs
index 4d25ff831..d446f0cf8 100644
--- a/src/EventStore.ClientAPI/ClientOperations/ReadStreamEventsBackwardOperation.cs
+++ b/src/EventStore.ClientAPI/ClientOperations/ReadStreamEventsBackwardOperation.cs
@@ -46,10 +46,10 @@ namespace EventStore.ClientAPI.ClientOperations {
 						string.IsNullOrEmpty(response.Error) ? "<no message>" : response.Error));
 					return new InspectionResult(InspectionDecision.EndOperation, "Error");
 				case ClientMessage.ReadStreamEventsCompleted.ReadStreamResult.AccessDenied:
-					Fail(new AccessDeniedException(string.Format("Read access denied for stream '{0}'.", _stream)));
+					Fail(new AccessDeniedException($"Read access denied for stream '{_stream}'."));
 					return new InspectionResult(InspectionDecision.EndOperation, "AccessDenied");
 				default:
-					throw new Exception(string.Format("Unexpected ReadStreamResult: {0}.", response.Result));
+					throw new Exception($"Unexpected ReadStreamResult: {response.Result}.");
 			}
 		}
 
@@ -65,9 +65,7 @@ namespace EventStore.ClientAPI.ClientOperations {
 		}
 
 		public override string ToString() {
-			return string.Format(
-				"Stream: {0}, FromEventNumber: {1}, MaxCount: {2}, ResolveLinkTos: {3}, RequireLeader: {4}",
-				_stream, _fromEventNumber, _maxCount, _resolveLinkTos, _requireLeader);
+			return $"Stream: {_stream}, FromEventNumber: {_fromEventNumber}, MaxCount: {_maxCount}, ResolveLinkTos: {_resolveLinkTos}, RequireLeader: {_requireLeader}";
 		}
 	}
 }
diff --git a/src/EventStore.ClientAPI/ClientOperations/ReadStreamEventsForwardOperation.cs b/src/EventStore.ClientAPI/ClientOperations/ReadStreamEventsForwardOperation.cs
index e5eb7f250..c04be72ea 100644
--- a/src/EventStore.ClientAPI/ClientOperations/ReadStreamEventsForwardOperation.cs
+++ b/src/EventStore.ClientAPI/ClientOperations/ReadStreamEventsForwardOperation.cs
@@ -46,10 +46,10 @@ namespace EventStore.ClientAPI.ClientOperations {
 						string.IsNullOrEmpty(response.Error) ? "<no message>" : response.Error));
 					return new InspectionResult(InspectionDecision.EndOperation, "Error");
 				case ClientMessage.ReadStreamEventsCompleted.ReadStreamResult.AccessDenied:
-					Fail(new AccessDeniedException(string.Format("Read access denied for stream '{0}'.", _stream)));
+					Fail(new AccessDeniedException($"Read access denied for stream '{_stream}'."));
 					return new InspectionResult(InspectionDecision.EndOperation, "AccessDenied");
 				default:
-					throw new Exception(string.Format("Unexpected ReadStreamResult: {0}.", response.Result));
+					throw new Exception($"Unexpected ReadStreamResult: {response.Result}.");
 			}
 		}
 
@@ -65,9 +65,7 @@ namespace EventStore.ClientAPI.ClientOperations {
 		}
 
 		public override string ToString() {
-			return string.Format(
-				"Stream: {0}, FromEventNumber: {1}, MaxCount: {2}, ResolveLinkTos: {3}, RequireLeader: {4}",
-				_stream, _fromEventNumber, _maxCount, _resolveLinkTos, _requireLeader);
+			return $"Stream: {_stream}, FromEventNumber: {_fromEventNumber}, MaxCount: {_maxCount}, ResolveLinkTos: {_resolveLinkTos}, RequireLeader: {_requireLeader}";
 		}
 	}
 }
diff --git a/src/EventStore.ClientAPI/ClientOperations/StartTransactionOperation.cs b/src/EventStore.ClientAPI/ClientOperations/StartTransactionOperation.cs
index 948ceca55..e801fa585 100644
--- a/src/EventStore.ClientAPI/ClientOperations/StartTransactionOperation.cs
+++ b/src/EventStore.ClientAPI/ClientOperations/StartTransactionOperation.cs
@@ -39,9 +39,7 @@ namespace EventStore.ClientAPI.ClientOperations {
 				case ClientMessage.OperationResult.ForwardTimeout:
 					return new InspectionResult(InspectionDecision.Retry, "ForwardTimeout");
 				case ClientMessage.OperationResult.WrongExpectedVersion:
-					var err = string.Format(
-						"Start transaction failed due to WrongExpectedVersion. Stream: {0}, Expected version: {1}.",
-						_stream, _expectedVersion);
+					var err = $"Start transaction failed due to WrongExpectedVersion. Stream: {_stream}, Expected version: {_expectedVersion}.";
 					Fail(new WrongExpectedVersionException(err));
 					return new InspectionResult(InspectionDecision.EndOperation, "WrongExpectedVersion");
 				case ClientMessage.OperationResult.StreamDeleted:
@@ -51,10 +49,10 @@ namespace EventStore.ClientAPI.ClientOperations {
 					Fail(new InvalidTransactionException());
 					return new InspectionResult(InspectionDecision.EndOperation, "InvalidTransaction");
 				case ClientMessage.OperationResult.AccessDenied:
-					Fail(new AccessDeniedException(string.Format("Write access denied for stream '{0}'.", _stream)));
+					Fail(new AccessDeniedException($"Write access denied for stream '{_stream}'."));
 					return new InspectionResult(InspectionDecision.EndOperation, "AccessDenied");
 				default:
-					throw new Exception(string.Format("Unexpected OperationResult: {0}.", response.Result));
+					throw new Exception($"Unexpected OperationResult: {response.Result}.");
 			}
 		}
 
@@ -63,7 +61,7 @@ namespace EventStore.ClientAPI.ClientOperations {
 		}
 
 		public override string ToString() {
-			return string.Format("Stream: {0}, ExpectedVersion: {1}", _stream, _expectedVersion);
+			return $"Stream: {_stream}, ExpectedVersion: {_expectedVersion}";
 		}
 	}
 }
diff --git a/src/EventStore.ClientAPI/ClientOperations/SubscriptionOperation.cs b/src/EventStore.ClientAPI/ClientOperations/SubscriptionOperation.cs
index 01fb39b0b..27477d649 100644
--- a/src/EventStore.ClientAPI/ClientOperations/SubscriptionOperation.cs
+++ b/src/EventStore.ClientAPI/ClientOperations/SubscriptionOperation.cs
@@ -108,27 +108,22 @@ namespace EventStore.ClientAPI.ClientOperations {
 								break;
 							case ClientMessage.SubscriptionDropped.SubscriptionDropReason.AccessDenied:
 								DropSubscription(SubscriptionDropReason.AccessDenied,
-									new AccessDeniedException(string.Format(
-										"Subscription to '{0}' failed due to access denied.",
-										_streamId == string.Empty ? "<all>" : _streamId)));
+									new AccessDeniedException($"Subscription to '{(_streamId == string.Empty ? "<all>" : _streamId)}' failed due to access denied."));
 								break;
 							case ClientMessage.SubscriptionDropped.SubscriptionDropReason.NotFound:
 								DropSubscription(SubscriptionDropReason.NotFound,
-									new ArgumentException(string.Format(
-										"Subscription to '{0}' failed due to not found.",
-										_streamId == string.Empty ? "<all>" : _streamId)));
+									new ArgumentException($"Subscription to '{(_streamId == string.Empty ? "<all>" : _streamId)}' failed due to not found."));
 								break;
 							default:
 								if (_verboseLogging)
 									_log.Debug("Subscription dropped by server. Reason: {0}.", dto.Reason);
 								DropSubscription(SubscriptionDropReason.Unknown,
-									new CommandNotExpectedException(string.Format("Unsubscribe reason: '{0}'.",
-										dto.Reason)));
+									new CommandNotExpectedException($"Unsubscribe reason: '{dto.Reason}'."));
 								break;
 						}
 
 						return new InspectionResult(InspectionDecision.EndOperation,
-							string.Format("SubscriptionDropped: {0}", dto.Reason));
+							$"SubscriptionDropped: {dto.Reason}");
 					}
 
 					case TcpCommand.NotAuthenticated: {
@@ -147,7 +142,7 @@ namespace EventStore.ClientAPI.ClientOperations {
 						DropSubscription(SubscriptionDropReason.ServerError,
 							new ServerErrorException(string.IsNullOrEmpty(message) ? "<no message>" : message));
 						return new InspectionResult(InspectionDecision.EndOperation,
-							string.Format("BadRequest: {0}", message));
+							$"BadRequest: {message}");
 					}
 
 					case TcpCommand.NotHandled: {
@@ -183,7 +178,7 @@ namespace EventStore.ClientAPI.ClientOperations {
 			} catch (Exception e) {
 				DropSubscription(SubscriptionDropReason.Unknown, e);
 				return new InspectionResult(InspectionDecision.EndOperation,
-					string.Format("Exception - {0}", e.Message));
+					$"Exception - {e.Message}");
 			}
 		}
 
@@ -207,7 +202,7 @@ namespace EventStore.ClientAPI.ClientOperations {
 						_correlationId, _streamId == string.Empty ? "<all>" : _streamId, reason, exc);
 
 				if (reason != SubscriptionDropReason.UserInitiated) {
-					var er = exc ?? new Exception(String.Format("Subscription dropped for {0}", reason));
+					var er = exc ?? new Exception($"Subscription dropped for {reason}");
 					_source.TrySetException(er);
 				}
 
@@ -225,7 +220,7 @@ namespace EventStore.ClientAPI.ClientOperations {
 		protected void ConfirmSubscription(long lastCommitPosition, long? lastEventNumber) {
 			if (lastCommitPosition < -1)
 				throw new ArgumentOutOfRangeException(nameof(lastCommitPosition),
-					string.Format("Invalid lastCommitPosition {0} on subscription confirmation.", lastCommitPosition));
+					$"Invalid lastCommitPosition {lastCommitPosition} on subscription confirmation.");
 			if (_subscription != null)
 				throw new Exception("Double confirmation of subscription.");
 
diff --git a/src/EventStore.ClientAPI/ClientOperations/TransactionalWriteOperation.cs b/src/EventStore.ClientAPI/ClientOperations/TransactionalWriteOperation.cs
index 64bee4a86..419db0d85 100644
--- a/src/EventStore.ClientAPI/ClientOperations/TransactionalWriteOperation.cs
+++ b/src/EventStore.ClientAPI/ClientOperations/TransactionalWriteOperation.cs
@@ -44,7 +44,7 @@ namespace EventStore.ClientAPI.ClientOperations {
 					Fail(new AccessDeniedException("Write access denied."));
 					return new InspectionResult(InspectionDecision.EndOperation, "AccessDenied");
 				default:
-					throw new Exception(string.Format("Unexpected OperationResult: {0}.", response.Result));
+					throw new Exception($"Unexpected OperationResult: {response.Result}.");
 			}
 		}
 
@@ -53,7 +53,7 @@ namespace EventStore.ClientAPI.ClientOperations {
 		}
 
 		public override string ToString() {
-			return string.Format("TransactionId: {0}", _transactionId);
+			return $"TransactionId: {_transactionId}";
 		}
 	}
 }
diff --git a/src/EventStore.ClientAPI/ClientOperations/UpdatePersistentSubscriptionOperation.cs b/src/EventStore.ClientAPI/ClientOperations/UpdatePersistentSubscriptionOperation.cs
index 21090a4ca..5c0d8f63f 100644
--- a/src/EventStore.ClientAPI/ClientOperations/UpdatePersistentSubscriptionOperation.cs
+++ b/src/EventStore.ClientAPI/ClientOperations/UpdatePersistentSubscriptionOperation.cs
@@ -67,20 +67,19 @@ namespace EventStore.ClientAPI.ClientOperations {
 					Succeed();
 					return new InspectionResult(InspectionDecision.EndOperation, "Success");
 				case ClientMessage.UpdatePersistentSubscriptionCompleted.UpdatePersistentSubscriptionResult.Fail:
-					Fail(new InvalidOperationException(String.Format(
-						"Subscription group {0} on stream {1} failed '{2}'", _groupName, _stream, response.Reason)));
+					Fail(new InvalidOperationException($"Subscription group {_groupName} on stream {_stream} failed '{response.Reason}'"));
 					return new InspectionResult(InspectionDecision.EndOperation, "Fail");
 				case ClientMessage.UpdatePersistentSubscriptionCompleted.UpdatePersistentSubscriptionResult
 					.AccessDenied:
-					Fail(new AccessDeniedException(string.Format("Write access denied for stream '{0}'.", _stream)));
+					Fail(new AccessDeniedException($"Write access denied for stream '{_stream}'."));
 					return new InspectionResult(InspectionDecision.EndOperation, "AccessDenied");
 				case ClientMessage.UpdatePersistentSubscriptionCompleted.UpdatePersistentSubscriptionResult
 					.DoesNotExist:
 					Fail(new InvalidOperationException(
-						String.Format("Subscription group {0} on stream {1} does not exist", _groupName, _stream)));
+						$"Subscription group {_groupName} on stream {_stream} does not exist"));
 					return new InspectionResult(InspectionDecision.EndOperation, "DoesNotExist");
 				default:
-					throw new Exception(string.Format("Unexpected OperationResult: {0}.", response.Result));
+					throw new Exception($"Unexpected OperationResult: {response.Result}.");
 			}
 		}
 
@@ -90,7 +89,7 @@ namespace EventStore.ClientAPI.ClientOperations {
 		}
 
 		public override string ToString() {
-			return string.Format("Stream: {0}, Group Name: {1}", _stream, _groupName);
+			return $"Stream: {_stream}, Group Name: {_groupName}";
 		}
 	}
 }
diff --git a/src/EventStore.ClientAPI/ClusterSettings.cs b/src/EventStore.ClientAPI/ClusterSettings.cs
index 35d87fdb7..02e0082ba 100644
--- a/src/EventStore.ClientAPI/ClusterSettings.cs
+++ b/src/EventStore.ClientAPI/ClusterSettings.cs
@@ -74,8 +74,7 @@ namespace EventStore.ClientAPI {
 			Ensure.NotNullOrEmpty(clusterDns, "clusterDns");
 			if (maxDiscoverAttempts < -1)
 				throw new ArgumentOutOfRangeException("maxDiscoverAttempts",
-					string.Format("maxDiscoverAttempts value is out of range: {0}. Allowed range: [-1, infinity].",
-						maxDiscoverAttempts));
+					$"maxDiscoverAttempts value is out of range: {maxDiscoverAttempts}. Allowed range: [-1, infinity].");
 			Ensure.Positive(httpPort, nameof(httpPort));
 
 			ClusterDns = clusterDns;
diff --git a/src/EventStore.ClientAPI/Common/Utils/Ensure.cs b/src/EventStore.ClientAPI/Common/Utils/Ensure.cs
index da9bd1321..723615788 100644
--- a/src/EventStore.ClientAPI/Common/Utils/Ensure.cs
+++ b/src/EventStore.ClientAPI/Common/Utils/Ensure.cs
@@ -45,7 +45,7 @@ namespace EventStore.ClientAPI.Common.Utils {
 
 		public static void Equal(int expected, int actual) {
 			if (expected != actual)
-				throw new Exception(string.Format("expected {0} actual {1}", expected, actual));
+				throw new Exception($"expected {expected} actual {actual}");
 		}
 	}
 }
diff --git a/src/EventStore.ClientAPI/Common/Utils/Threading/TaskExtensions.cs b/src/EventStore.ClientAPI/Common/Utils/Threading/TaskExtensions.cs
index b65c1fd4e..95349c6b7 100644
--- a/src/EventStore.ClientAPI/Common/Utils/Threading/TaskExtensions.cs
+++ b/src/EventStore.ClientAPI/Common/Utils/Threading/TaskExtensions.cs
@@ -7,7 +7,7 @@ namespace EventStore.ClientAPI.Common.Utils.Threading {
 		public static async Task<TResult> WithTimeout<TResult>(this Task<TResult> task, TimeSpan timeout) {
 			if (await Task.WhenAny(task, Task.Delay(timeout)).ConfigureAwait(false) != task) {
 				throw new OperationTimedOutException(
-					string.Format("The operation did not complete within the specified time of {0}", timeout));
+					$"The operation did not complete within the specified time of {timeout}");
 			}
 
 			return await task.ConfigureAwait(false);
diff --git a/src/EventStore.ClientAPI/ConnectionSettings.cs b/src/EventStore.ClientAPI/ConnectionSettings.cs
index 7ba459fac..42efe2429 100644
--- a/src/EventStore.ClientAPI/ConnectionSettings.cs
+++ b/src/EventStore.ClientAPI/ConnectionSettings.cs
@@ -192,11 +192,10 @@ namespace EventStore.ClientAPI {
 			Ensure.Positive(maxConcurrentItems, "maxConcurrentItems");
 			if (maxRetries < -1)
 				throw new ArgumentOutOfRangeException("maxRetries",
-					string.Format("maxRetries value is out of range: {0}. Allowed range: [-1, infinity].", maxRetries));
+					$"maxRetries value is out of range: {maxRetries}. Allowed range: [-1, infinity].");
 			if (maxReconnections < -1)
 				throw new ArgumentOutOfRangeException("maxReconnections",
-					string.Format("maxReconnections value is out of range: {0}. Allowed range: [-1, infinity].",
-						maxRetries));
+					$"maxReconnections value is out of range: {maxRetries}. Allowed range: [-1, infinity].");
 
 			if (nodePreference == NodePreference.ReadOnlyReplica && requireLeader) {
 				throw new ArgumentException($"Having the Node Preference set to {nodePreference} and Requires Leader" +
diff --git a/src/EventStore.ClientAPI/ConnectionSettingsBuilder.cs b/src/EventStore.ClientAPI/ConnectionSettingsBuilder.cs
index 448c34730..5f62076c9 100644
--- a/src/EventStore.ClientAPI/ConnectionSettingsBuilder.cs
+++ b/src/EventStore.ClientAPI/ConnectionSettingsBuilder.cs
@@ -327,8 +327,7 @@ namespace EventStore.ClientAPI {
 		public ConnectionSettingsBuilder SetMaxDiscoverAttempts(int maxDiscoverAttempts) {
 			if (maxDiscoverAttempts <= 0)
 				throw new ArgumentOutOfRangeException("maxDiscoverAttempts",
-					string.Format("maxDiscoverAttempts value is out of range: {0}. Allowed range: [1, infinity].",
-						maxDiscoverAttempts));
+					$"maxDiscoverAttempts value is out of range: {maxDiscoverAttempts}. Allowed range: [1, infinity].");
 			_maxDiscoverAttempts = maxDiscoverAttempts;
 			return this;
 		}
diff --git a/src/EventStore.ClientAPI/ConnectionString.cs b/src/EventStore.ClientAPI/ConnectionString.cs
index c50159827..bf0c4e1b9 100644
--- a/src/EventStore.ClientAPI/ConnectionString.cs
+++ b/src/EventStore.ClientAPI/ConnectionString.cs
@@ -57,7 +57,7 @@ namespace EventStore.ClientAPI {
 
 							return new GossipSeed(endPoint, seedOverTls);
 						} catch (Exception ex) {
-							throw new Exception(string.Format("Gossip seed {0} is not in correct format", q), ex);
+							throw new Exception($"Gossip seed {q} is not in correct format", ex);
 						}
 					}).ToArray()
 				}, {
@@ -69,9 +69,7 @@ namespace EventStore.ClientAPI {
 							return new UserCredentials(pieces[0], pieces[1]);
 						} catch (Exception ex) {
 							throw new Exception(
-								string.Format(
-									"User credentials {0} is not in correct format. Expected format is username:password.",
-									x), ex);
+								$"User credentials {x} is not in correct format. Expected format is username:password.", ex);
 						}
 					}
 				},
@@ -146,8 +144,7 @@ namespace EventStore.ClientAPI {
 				if (!fields.TryGetValue(item.Key, out fi)) continue;
 				Func<string, object> func = null;
 				if (!translators.TryGetValue(fi.FieldType, out func)) {
-					throw new Exception(string.Format("Can not map field named {0} as type {1} has no translator", item,
-						fi.FieldType.Name));
+					throw new Exception($"Can not map field named {item} as type {fi.FieldType.Name} has no translator");
 				}
 
 				fi.SetValue(obj, func(item.Value));
diff --git a/src/EventStore.ClientAPI/DnsClusterSettingsBuilder.cs b/src/EventStore.ClientAPI/DnsClusterSettingsBuilder.cs
index 131098825..7cbc41fa9 100644
--- a/src/EventStore.ClientAPI/DnsClusterSettingsBuilder.cs
+++ b/src/EventStore.ClientAPI/DnsClusterSettingsBuilder.cs
@@ -35,8 +35,7 @@ namespace EventStore.ClientAPI {
 		public DnsClusterSettingsBuilder SetMaxDiscoverAttempts(int maxDiscoverAttempts) {
 			if (maxDiscoverAttempts <= 0)
 				throw new ArgumentOutOfRangeException("maxDiscoverAttempts",
-					string.Format("maxDiscoverAttempts value is out of range: {0}. Allowed range: [-1, infinity].",
-						maxDiscoverAttempts));
+					$"maxDiscoverAttempts value is out of range: {maxDiscoverAttempts}. Allowed range: [-1, infinity].");
 			_maxDiscoverAttempts = maxDiscoverAttempts;
 			return this;
 		}
diff --git a/src/EventStore.ClientAPI/EventStoreAllCatchUpSubscription.cs b/src/EventStore.ClientAPI/EventStoreAllCatchUpSubscription.cs
index a58924d61..14375e527 100644
--- a/src/EventStore.ClientAPI/EventStoreAllCatchUpSubscription.cs
+++ b/src/EventStore.ClientAPI/EventStoreAllCatchUpSubscription.cs
@@ -89,8 +89,7 @@ namespace EventStore.ClientAPI
 		private async Task<bool> ProcessEventsAsync(long? lastCommitPosition, AllEventsSlice slice) {
 			foreach (var e in slice.Events) {
 				if (e.OriginalPosition == null)
-					throw new Exception(String.Format("Subscription {0} event came up with no OriginalPosition.",
-						SubscriptionName));
+					throw new Exception($"Subscription {SubscriptionName} event came up with no OriginalPosition.");
 				await TryProcessAsync(e).ConfigureAwait(false);
 			}
 
diff --git a/src/EventStore.ClientAPI/EventStoreAllFilteredCatchUpSubscription.cs b/src/EventStore.ClientAPI/EventStoreAllFilteredCatchUpSubscription.cs
index 637de62cb..a36aa4c67 100644
--- a/src/EventStore.ClientAPI/EventStoreAllFilteredCatchUpSubscription.cs
+++ b/src/EventStore.ClientAPI/EventStoreAllFilteredCatchUpSubscription.cs
@@ -78,8 +78,7 @@ namespace EventStore.ClientAPI {
 		private async Task<bool> ProcessEventsAsync(long? lastCommitPosition, AllEventsSlice slice) {
 			foreach (var e in slice.Events) {
 				if (e.OriginalPosition == null)
-					throw new Exception(String.Format("Subscription {0} event came up with no OriginalPosition.",
-						SubscriptionName));
+					throw new Exception($"Subscription {SubscriptionName} event came up with no OriginalPosition.");
 				await TryProcessAsync(e).ConfigureAwait(false);
 			}
 
diff --git a/src/EventStore.ClientAPI/EventStoreCatchUpSubscription.cs b/src/EventStore.ClientAPI/EventStoreCatchUpSubscription.cs
index d054c7346..13bf49e7c 100644
--- a/src/EventStore.ClientAPI/EventStoreCatchUpSubscription.cs
+++ b/src/EventStore.ClientAPI/EventStoreCatchUpSubscription.cs
@@ -166,7 +166,7 @@ namespace EventStore.ClientAPI {
 			Stop();
 			if (Verbose) Log.Debug("Waiting on subscription {0} to stop", SubscriptionName);
 			if (!_stopped.Wait(timeout))
-				throw new TimeoutException(string.Format("Could not stop {0} in time.", GetType().Name));
+				throw new TimeoutException($"Could not stop {GetType().Name} in time.");
 		}
 
 		/// <summary>
diff --git a/src/EventStore.ClientAPI/EventStoreConnection.cs b/src/EventStore.ClientAPI/EventStoreConnection.cs
index 31f763cb6..327187dea 100644
--- a/src/EventStore.ClientAPI/EventStoreConnection.cs
+++ b/src/EventStore.ClientAPI/EventStoreConnection.cs
@@ -49,14 +49,11 @@ namespace EventStore.ClientAPI {
 			var settings = ConnectionString.GetConnectionSettings(connectionString, builder);
 			var uri = GetUriFromConnectionString(connectionString);
 			if (uri == null && (settings.GossipSeeds == null || settings.GossipSeeds.Length == 0)) {
-				throw new Exception(string.Format(
-					"Did not find ConnectTo or GossipSeeds in the connection string.\n'{0}'", connectionString));
+				throw new Exception($"Did not find ConnectTo or GossipSeeds in the connection string.\n'{connectionString}'");
 			}
 
 			if (uri != null && settings.GossipSeeds != null && settings.GossipSeeds.Length > 0) {
-				throw new NotSupportedException(string.Format(
-					"Setting ConnectTo as well as GossipSeeds on the connection string is currently not supported.\n{0}",
-					connectionString));
+				throw new NotSupportedException($"Setting ConnectTo as well as GossipSeeds on the connection string is currently not supported.\n{connectionString}");
 			}
 
 			return Create(settings, uri, connectionName);
@@ -119,7 +116,7 @@ namespace EventStore.ClientAPI {
 						new StaticEndPointDiscoverer(tcpEndPoint, connectionSettings.UseSslConnection), connectionName);
 				}
 
-				throw new Exception(string.Format("Unknown scheme for connection '{0}'", scheme));
+				throw new Exception($"Unknown scheme for connection '{scheme}'");
 			}
 
 			if (connectionSettings.GossipSeeds != null && connectionSettings.GossipSeeds.Length > 0) {
@@ -145,7 +142,7 @@ namespace EventStore.ClientAPI {
 			if (uri == null || string.IsNullOrEmpty(uri.UserInfo)) return null;
 			var pieces = uri.UserInfo.Split(':');
 			if (pieces.Length != 2)
-				throw new Exception(string.Format("Unable to parse user information '{0}'", uri.UserInfo));
+				throw new Exception($"Unable to parse user information '{uri.UserInfo}'");
 			return new UserCredentials(pieces[0], pieces[1]);
 		}
 
diff --git a/src/EventStore.ClientAPI/EventStorePersistentSubscriptionBase.cs b/src/EventStore.ClientAPI/EventStorePersistentSubscriptionBase.cs
index dd1f0021a..5a83d56d7 100644
--- a/src/EventStore.ClientAPI/EventStorePersistentSubscriptionBase.cs
+++ b/src/EventStore.ClientAPI/EventStorePersistentSubscriptionBase.cs
@@ -164,7 +164,7 @@ namespace EventStore.ClientAPI {
 				_log.Debug("Persistent Subscription to {0}: requesting stop...", _streamId);
 			EnqueueSubscriptionDropNotification(SubscriptionDropReason.UserInitiated, null);
 			if (!_stopped.Wait(timeout))
-				throw new TimeoutException(string.Format("Could not stop {0} in time.", GetType().Name));
+				throw new TimeoutException($"Could not stop {GetType().Name} in time.");
 		}
 
 		private void EnqueueSubscriptionDropNotification(SubscriptionDropReason reason, Exception error) {
diff --git a/src/EventStore.ClientAPI/EventStoreStreamCatchUpSubscription.cs b/src/EventStore.ClientAPI/EventStoreStreamCatchUpSubscription.cs
index feef62e66..3501e2e3c 100644
--- a/src/EventStore.ClientAPI/EventStoreStreamCatchUpSubscription.cs
+++ b/src/EventStore.ClientAPI/EventStoreStreamCatchUpSubscription.cs
@@ -97,9 +97,7 @@ namespace EventStore.ClientAPI {
 				case SliceReadStatus.StreamNotFound: {
 					if (lastEventNumber.HasValue && lastEventNumber != -1) {
 						throw new Exception(
-							string.Format(
-								"Impossible: stream {0} disappeared in the middle of catching up subscription {1}.",
-								StreamId, SubscriptionName));
+							$"Impossible: stream {StreamId} disappeared in the middle of catching up subscription {SubscriptionName}.");
 					}
 
 					done = true;
@@ -108,9 +106,7 @@ namespace EventStore.ClientAPI {
 				case SliceReadStatus.StreamDeleted:
 					throw new StreamDeletedException(StreamId);
 				default:
-					throw new ArgumentOutOfRangeException(string.Format(
-						"Subscription {0} unexpected StreamEventsSlice.Status: {1}.",
-						SubscriptionName, slice.Status));
+					throw new ArgumentOutOfRangeException($"Subscription {SubscriptionName} unexpected StreamEventsSlice.Status: {slice.Status}.");
 			}
 
 			if (!done && slice.IsEndOfStream)
diff --git a/src/EventStore.ClientAPI/Exceptions/CommandNotExpectedException.cs b/src/EventStore.ClientAPI/Exceptions/CommandNotExpectedException.cs
index 2e361c467..670dd2c4b 100644
--- a/src/EventStore.ClientAPI/Exceptions/CommandNotExpectedException.cs
+++ b/src/EventStore.ClientAPI/Exceptions/CommandNotExpectedException.cs
@@ -7,14 +7,14 @@
 		/// Constructs a new <see cref="CommandNotExpectedException" />.
 		/// </summary>
 		public CommandNotExpectedException(string expected, string actual)
-			: base(string.Format("Expected : {0}. Actual : {1}.", expected, actual)) {
+			: base($"Expected : {expected}. Actual : {actual}.") {
 		}
 
 		/// <summary>
 		/// Constructs a new <see cref="CommandNotExpectedException" />.
 		/// </summary>
 		public CommandNotExpectedException(string unexpectedCommand)
-			: base(string.Format("Unexpected command: {0}.", unexpectedCommand)) {
+			: base($"Unexpected command: {unexpectedCommand}.") {
 		}
 	}
 }
diff --git a/src/EventStore.ClientAPI/Exceptions/OperationNotSupportedException.cs b/src/EventStore.ClientAPI/Exceptions/OperationNotSupportedException.cs
index 8788a6c16..c0746c4d3 100644
--- a/src/EventStore.ClientAPI/Exceptions/OperationNotSupportedException.cs
+++ b/src/EventStore.ClientAPI/Exceptions/OperationNotSupportedException.cs
@@ -16,7 +16,7 @@ namespace EventStore.ClientAPI.Exceptions {
 		/// <param name="operation">The name of the operation attempted.</param>
 		/// <param name="reason">The reason the operation is not supported.</param>
 		public OperationNotSupportedException(string operation, string reason)
-			: base(string.Format("Operation '{0}' is not supported : {1}", operation, reason)) {
+			: base($"Operation '{operation}' is not supported : {reason}") {
 		}
 
 		/// <summary>
@@ -24,7 +24,7 @@ namespace EventStore.ClientAPI.Exceptions {
 		/// </summary>
 		/// <param name="operation">The name of the operation attempted.</param>
 		public OperationNotSupportedException(string operation)
-			: base(string.Format("Operation '{0}' is not supported", operation)) {
+			: base($"Operation '{operation}' is not supported") {
 		}
 	}
 }
diff --git a/src/EventStore.ClientAPI/Exceptions/RetriesLimitReachedException.cs b/src/EventStore.ClientAPI/Exceptions/RetriesLimitReachedException.cs
index 8431e86b2..c6c47eec5 100644
--- a/src/EventStore.ClientAPI/Exceptions/RetriesLimitReachedException.cs
+++ b/src/EventStore.ClientAPI/Exceptions/RetriesLimitReachedException.cs
@@ -12,7 +12,7 @@
 		/// </summary>
 		/// <param name="retries">The number of retries attempted.</param>
 		public RetriesLimitReachedException(int retries)
-			: base(string.Format("Reached retries limit : {0}", retries)) {
+			: base($"Reached retries limit : {retries}") {
 		}
 
 		/// <summary>
@@ -21,7 +21,7 @@
 		/// <param name="item">The name of the item for which retries were attempted.</param>
 		/// <param name="retries">The number of retries attempted.</param>
 		public RetriesLimitReachedException(string item, int retries)
-			: base(string.Format("Item {0} reached retries limit : {1}", item, retries)) {
+			: base($"Item {item} reached retries limit : {retries}") {
 		}
 	}
 }
diff --git a/src/EventStore.ClientAPI/Exceptions/ServerErrorException.cs b/src/EventStore.ClientAPI/Exceptions/ServerErrorException.cs
index c5db81478..a958a6a51 100644
--- a/src/EventStore.ClientAPI/Exceptions/ServerErrorException.cs
+++ b/src/EventStore.ClientAPI/Exceptions/ServerErrorException.cs
@@ -17,14 +17,14 @@ namespace EventStore.ClientAPI.Exceptions {
 		/// Constructs a new instance of <see cref="ServerErrorException"/>.
 		/// </summary>
 		public ServerErrorException(string message)
-			: base(string.Format("Unexpected error on server: {0}", message)) {
+			: base($"Unexpected error on server: {message}") {
 		}
 
 		/// <summary>
 		/// Constructs a new instance of <see cref="ServerErrorException"/>.
 		/// </summary>
 		public ServerErrorException(string message, Exception innerException)
-			: base(string.Format("Unexpected error on server: {0}", message), innerException) {
+			: base($"Unexpected error on server: {message}", innerException) {
 		}
 
 		/// <summary>
diff --git a/src/EventStore.ClientAPI/Exceptions/StreamDeletedException.cs b/src/EventStore.ClientAPI/Exceptions/StreamDeletedException.cs
index 1ffae3e08..5eac69948 100644
--- a/src/EventStore.ClientAPI/Exceptions/StreamDeletedException.cs
+++ b/src/EventStore.ClientAPI/Exceptions/StreamDeletedException.cs
@@ -16,7 +16,7 @@ namespace EventStore.ClientAPI.Exceptions {
 		/// </summary>
 		/// <param name="stream">The name of the deleted stream.</param>
 		public StreamDeletedException(string stream)
-			: base(string.Format("Event stream '{0}' is deleted.", stream)) {
+			: base($"Event stream '{stream}' is deleted.") {
 			Ensure.NotNullOrEmpty(stream, "stream");
 			Stream = stream;
 		}
diff --git a/src/EventStore.ClientAPI/GossipSeedClusterSettingsBuilder.cs b/src/EventStore.ClientAPI/GossipSeedClusterSettingsBuilder.cs
index 5528ab85f..540828716 100644
--- a/src/EventStore.ClientAPI/GossipSeedClusterSettingsBuilder.cs
+++ b/src/EventStore.ClientAPI/GossipSeedClusterSettingsBuilder.cs
@@ -83,8 +83,7 @@ namespace EventStore.ClientAPI {
 		public GossipSeedClusterSettingsBuilder SetMaxDiscoverAttempts(int maxDiscoverAttempts) {
 			if (maxDiscoverAttempts <= 0)
 				throw new ArgumentOutOfRangeException("maxDiscoverAttempts",
-					string.Format("maxDiscoverAttempts value is out of range: {0}. Allowed range: [1, infinity].",
-						maxDiscoverAttempts));
+					$"maxDiscoverAttempts value is out of range: {maxDiscoverAttempts}. Allowed range: [1, infinity].");
 			_maxDiscoverAttempts = maxDiscoverAttempts;
 			return this;
 		}
diff --git a/src/EventStore.ClientAPI/Internal/EndPointExtensions.cs b/src/EventStore.ClientAPI/Internal/EndPointExtensions.cs
index a57f1a5a3..e60ed5417 100644
--- a/src/EventStore.ClientAPI/Internal/EndPointExtensions.cs
+++ b/src/EventStore.ClientAPI/Internal/EndPointExtensions.cs
@@ -6,12 +6,11 @@ using System.Net.Sockets;
 namespace EventStore.ClientAPI.Internal {
 	static class EndPointExtensions {
 		public static Uri ToESTcpUri(this IPEndPoint ipEndPoint) {	
-			return new Uri(string.Format("tcp://{0}:{1}", ipEndPoint.Address, ipEndPoint.Port));	
+			return new Uri($"tcp://{ipEndPoint.Address}:{ipEndPoint.Port}");	
 		}	
 
 		public static Uri ToESTcpUri(this IPEndPoint ipEndPoint, string username, string password) {	
-			return new Uri(string.Format("tcp://{0}:{1}@{2}:{3}", username, password, ipEndPoint.Address,	
-				ipEndPoint.Port));	
+			return new Uri($"tcp://{username}:{password}@{ipEndPoint.Address}:{ipEndPoint.Port}");	
 		}
 		
 		public static string GetHost(this EndPoint endpoint) =>
diff --git a/src/EventStore.ClientAPI/Internal/EventStoreConnectionLogicHandler.cs b/src/EventStore.ClientAPI/Internal/EventStoreConnectionLogicHandler.cs
index da1129054..13d719a2a 100644
--- a/src/EventStore.ClientAPI/Internal/EventStoreConnectionLogicHandler.cs
+++ b/src/EventStore.ClientAPI/Internal/EventStoreConnectionLogicHandler.cs
@@ -102,14 +102,14 @@ namespace EventStore.ClientAPI.Internal {
 				case ConnectionState.Connecting:
 				case ConnectionState.Connected: {
 					task.SetException(new InvalidOperationException(
-						string.Format("EventStoreConnection '{0}' is already active.", _esConnection.ConnectionName)));
+						$"EventStoreConnection '{_esConnection.ConnectionName}' is already active."));
 					break;
 				}
 				case ConnectionState.Closed:
 					task.SetException(new ObjectDisposedException(_esConnection.ConnectionName));
 					break;
 				default:
-					task.SetException(new Exception(string.Format("Unknown state: {0}", _state)));
+					task.SetException(new Exception($"Unknown state: {_state}"));
 					break;
 			}
 		}
@@ -374,7 +374,7 @@ namespace EventStore.ClientAPI.Internal {
 				case ConnectionState.Closed:
 					break;
 				default:
-					throw new Exception(string.Format("Unknown state: {0}.", _state));
+					throw new Exception($"Unknown state: {_state}.");
 			}
 		}
 
@@ -398,10 +398,7 @@ namespace EventStore.ClientAPI.Internal {
 				_heartbeatInfo = new HeartbeatInfo(_heartbeatInfo.LastPackageNumber, false, _stopwatch.Elapsed);
 			} else {
 				// TcpMessage.HeartbeatTimeout analog
-				var msg = string.Format(
-					"EventStoreConnection '{0}': closing TCP connection [{1}, {2}, {3}] due to HEARTBEAT TIMEOUT at pkgNum {4}.",
-					_esConnection.ConnectionName, _connection.RemoteEndPoint, _connection.LocalEndPoint,
-					_connection.ConnectionId, packageNumber);
+				var msg = $"EventStoreConnection '{_esConnection.ConnectionName}': closing TCP connection [{_connection.RemoteEndPoint}, {_connection.LocalEndPoint}, {_connection.ConnectionId}] due to HEARTBEAT TIMEOUT at pkgNum {packageNumber}.";
 				_settings.Log.Info(msg);
 				CloseTcpConnection(msg);
 			}
@@ -411,7 +408,7 @@ namespace EventStore.ClientAPI.Internal {
 			switch (_state) {
 				case ConnectionState.Init:
 					operation.Fail(new InvalidOperationException(
-						string.Format("EventStoreConnection '{0}' is not active.", _esConnection.ConnectionName)));
+						$"EventStoreConnection '{_esConnection.ConnectionName}' is not active."));
 					break;
 				case ConnectionState.Connecting:
 					LogDebug("StartOperation enqueue {0}, {1}, {2}, {3}.", operation.GetType().Name, operation,
@@ -427,7 +424,7 @@ namespace EventStore.ClientAPI.Internal {
 					operation.Fail(new ObjectDisposedException(_esConnection.ConnectionName));
 					break;
 				default:
-					throw new Exception(string.Format("Unknown state: {0}.", _state));
+					throw new Exception($"Unknown state: {_state}.");
 			}
 		}
 
@@ -435,7 +432,7 @@ namespace EventStore.ClientAPI.Internal {
 			switch (_state) {
 				case ConnectionState.Init:
 					msg.Source.SetException(new InvalidOperationException(
-						string.Format("EventStoreConnection '{0}' is not active.", _esConnection.ConnectionName)));
+						$"EventStoreConnection '{_esConnection.ConnectionName}' is not active."));
 					break;
 				case ConnectionState.Connecting:
 				case ConnectionState.Connected:
@@ -455,7 +452,7 @@ namespace EventStore.ClientAPI.Internal {
 					msg.Source.SetException(new ObjectDisposedException(_esConnection.ConnectionName));
 					break;
 				default:
-					throw new Exception(string.Format("Unknown state: {0}.", _state));
+					throw new Exception($"Unknown state: {_state}.");
 			}
 		}
 
@@ -463,7 +460,7 @@ namespace EventStore.ClientAPI.Internal {
 			switch (_state) {
 				case ConnectionState.Init:
 					msg.Source.SetException(new InvalidOperationException(
-						string.Format("EventStoreConnection '{0}' is not active.", _esConnection.ConnectionName)));
+						$"EventStoreConnection '{_esConnection.ConnectionName}' is not active."));
 					break;
 				case ConnectionState.Connecting:
 				case ConnectionState.Connected:
@@ -482,7 +479,7 @@ namespace EventStore.ClientAPI.Internal {
 				case ConnectionState.Closed:
 					msg.Source.SetException(new ObjectDisposedException(_esConnection.ConnectionName));
 					break;
-				default: throw new Exception(string.Format("Unknown state: {0}.", _state));
+				default: throw new Exception($"Unknown state: {_state}.");
 			}
 		}
 
@@ -490,7 +487,7 @@ namespace EventStore.ClientAPI.Internal {
 			switch (_state) {
 				case ConnectionState.Init:
 					msg.Source.SetException(new InvalidOperationException(
-						string.Format("EventStoreConnection '{0}' is not active.", _esConnection.ConnectionName)));
+						$"EventStoreConnection '{_esConnection.ConnectionName}' is not active."));
 					break;
 				case ConnectionState.Connecting:
 				case ConnectionState.Connected:
@@ -510,7 +507,7 @@ namespace EventStore.ClientAPI.Internal {
 					msg.Source.SetException(new ObjectDisposedException(_esConnection.ConnectionName));
 					break;
 				default:
-					throw new Exception(string.Format("Unknown state: {0}.", _state));
+					throw new Exception($"Unknown state: {_state}.");
 			}
 		}
 
@@ -557,8 +554,7 @@ namespace EventStore.ClientAPI.Internal {
 				string message = Helper.EatException(() =>
 					Helper.UTF8NoBom.GetString(package.Data.Array, package.Data.Offset, package.Data.Count));
 				var exc = new EventStoreConnectionException(
-					string.Format("Bad request received from server. Error: {0}",
-						string.IsNullOrEmpty(message) ? "<no message>" : message));
+					$"Bad request received from server. Error: {(string.IsNullOrEmpty(message) ? "<no message>" : message)}");
 				CloseConnection("Connection-wide BadRequest received. Too dangerous to continue.", exc);
 				return;
 			}
@@ -588,7 +584,7 @@ namespace EventStore.ClientAPI.Internal {
 						_operations.RemoveOperation(operation);
 						break;
 					default:
-						throw new Exception(string.Format("Unknown InspectionDecision: {0}", result.Decision));
+						throw new Exception($"Unknown InspectionDecision: {result.Decision}");
 				}
 
 				if (_state == ConnectionState.Connected)
@@ -614,7 +610,7 @@ namespace EventStore.ClientAPI.Internal {
 						subscription.IsSubscribed = true;
 						break;
 					default:
-						throw new Exception(string.Format("Unknown InspectionDecision: {0}", result.Decision));
+						throw new Exception($"Unknown InspectionDecision: {result.Decision}");
 				}
 			} else {
 				LogDebug("HandleTcpPackage UNMAPPED PACKAGE with CorrelationId {0:B}, Command: {1}",
@@ -634,9 +630,7 @@ namespace EventStore.ClientAPI.Internal {
 			if (_state != ConnectionState.Connected || _connection.RemoteEndPoint.Equals(endPoint))
 				return;
 
-			var msg = string.Format(
-				"EventStoreConnection '{0}': going to reconnect to [{1}]. Current endpoint: [{2}, L{3}].",
-				_esConnection.ConnectionName, endPoint, _connection.RemoteEndPoint, _connection.LocalEndPoint);
+			var msg = $"EventStoreConnection '{_esConnection.ConnectionName}': going to reconnect to [{endPoint}]. Current endpoint: [{_connection.RemoteEndPoint}, L{_connection.LocalEndPoint}].";
 			if (_settings.VerboseLogging)
 				_settings.Log.Info(msg);
 			CloseTcpConnection(msg);
diff --git a/src/EventStore.ClientAPI/Internal/EventStoreNodeConnection.cs b/src/EventStore.ClientAPI/Internal/EventStoreNodeConnection.cs
index d69fe0681..405310973 100644
--- a/src/EventStore.ClientAPI/Internal/EventStoreNodeConnection.cs
+++ b/src/EventStore.ClientAPI/Internal/EventStoreNodeConnection.cs
@@ -55,7 +55,7 @@ namespace EventStore.ClientAPI.Internal {
 			Ensure.NotNull(settings, "settings");
 			Ensure.NotNull(endPointDiscoverer, "endPointDiscoverer");
 
-			ConnectionName = connectionName ?? string.Format("ES-{0}", Guid.NewGuid());
+			ConnectionName = connectionName ?? $"ES-{Guid.NewGuid()}";
 			Settings = settings;
 			ClusterSettings = clusterSettings;
 			_endPointDiscoverer = endPointDiscoverer;
@@ -195,9 +195,7 @@ namespace EventStore.ClientAPI.Internal {
 			Ensure.Nonnegative(start, "start");
 			Ensure.Positive(count, "count");
 			if (count > ClientApiConstants.MaxReadSize)
-				throw new ArgumentException(string.Format(
-					"Count should be less than {0}. For larger reads you should page.",
-					ClientApiConstants.MaxReadSize));
+				throw new ArgumentException($"Count should be less than {ClientApiConstants.MaxReadSize}. For larger reads you should page.");
 			var source = TaskCompletionSourceFactory.Create<StreamEventsSlice>();
 			var operation = new ReadStreamEventsForwardOperation(Settings.Log, source, stream, start, count,
 				resolveLinkTos, Settings.RequireLeader, userCredentials);
@@ -211,9 +209,7 @@ namespace EventStore.ClientAPI.Internal {
 			Ensure.Positive(count, "count");
 			Ensure.GreaterThanOrEqualTo(start, StreamPosition.End, nameof(start));
 			if (count > ClientApiConstants.MaxReadSize)
-				throw new ArgumentException(string.Format(
-					"Count should be less than {0}. For larger reads you should page.",
-					ClientApiConstants.MaxReadSize));
+				throw new ArgumentException($"Count should be less than {ClientApiConstants.MaxReadSize}. For larger reads you should page.");
 			var source = TaskCompletionSourceFactory.Create<StreamEventsSlice>();
 			var operation = new ReadStreamEventsBackwardOperation(Settings.Log, source, stream, start, count,
 				resolveLinkTos, Settings.RequireLeader, userCredentials);
@@ -225,9 +221,7 @@ namespace EventStore.ClientAPI.Internal {
 			bool resolveLinkTos, UserCredentials userCredentials = null) {
 			Ensure.Positive(maxCount, "maxCount");
 			if (maxCount > ClientApiConstants.MaxReadSize)
-				throw new ArgumentException(string.Format(
-					"Count should be less than {0}. For larger reads you should page.",
-					ClientApiConstants.MaxReadSize));
+				throw new ArgumentException($"Count should be less than {ClientApiConstants.MaxReadSize}. For larger reads you should page.");
 			var source = TaskCompletionSourceFactory.Create<AllEventsSlice>();
 			var operation = new ReadAllEventsForwardOperation(Settings.Log, source, position, maxCount,
 				resolveLinkTos, Settings.RequireLeader, userCredentials);
@@ -250,9 +244,7 @@ namespace EventStore.ClientAPI.Internal {
 			Ensure.NotNull(filter, nameof(filter));
 
 			if (maxCount > ClientApiConstants.MaxReadSize)
-				throw new ArgumentException(string.Format(
-					"Count should be less than {0}. For larger reads you should page.",
-					ClientApiConstants.MaxReadSize));
+				throw new ArgumentException($"Count should be less than {ClientApiConstants.MaxReadSize}. For larger reads you should page.");
 
 			var source = TaskCompletionSourceFactory.Create<AllEventsSlice>();
 			var operation = new FilteredReadAllEventsForwardOperation(Settings.Log, source, position, maxCount,
@@ -266,9 +258,7 @@ namespace EventStore.ClientAPI.Internal {
 			bool resolveLinkTos, UserCredentials userCredentials = null) {
 			Ensure.Positive(maxCount, "maxCount");
 			if (maxCount > ClientApiConstants.MaxReadSize)
-				throw new ArgumentException(string.Format(
-					"Count should be less than {0}. For larger reads you should page.",
-					ClientApiConstants.MaxReadSize));
+				throw new ArgumentException($"Count should be less than {ClientApiConstants.MaxReadSize}. For larger reads you should page.");
 			var source = TaskCompletionSourceFactory.Create<AllEventsSlice>();
 			var operation = new ReadAllEventsBackwardOperation(Settings.Log, source, position, maxCount,
 				resolveLinkTos, Settings.RequireLeader, userCredentials);
@@ -290,9 +280,7 @@ namespace EventStore.ClientAPI.Internal {
 			Ensure.NotNull(filter, nameof(filter));
 
 			if (maxCount > ClientApiConstants.MaxReadSize)
-				throw new ArgumentException(string.Format(
-					"Count should be less than {0}. For larger reads you should page.",
-					ClientApiConstants.MaxReadSize));
+				throw new ArgumentException($"Count should be less than {ClientApiConstants.MaxReadSize}. For larger reads you should page.");
 
 			var source = TaskCompletionSourceFactory.Create<AllEventsSlice>();
 			var operation = new FilteredReadAllEventsBackwardOperation(Settings.Log, source, position, maxCount,
@@ -603,7 +591,7 @@ namespace EventStore.ClientAPI.Internal {
 			Ensure.NotNullOrEmpty(stream, "stream");
 			if (SystemStreams.IsMetastream(stream))
 				throw new ArgumentException(
-					string.Format("Setting metadata for metastream '{0}' is not supported.", stream), nameof(stream));
+					$"Setting metadata for metastream '{stream}' is not supported.", nameof(stream));
 
 			var source = TaskCompletionSourceFactory.Create<WriteResult>();
 
@@ -654,8 +642,7 @@ namespace EventStore.ClientAPI.Internal {
 					case EventReadStatus.StreamDeleted:
 						return new RawStreamMetadataResult(stream, true, long.MaxValue, Empty.ByteArray);
 					default:
-						throw new ArgumentOutOfRangeException(string.Format("Unexpected ReadEventResult: {0}.",
-							res.Status));
+						throw new ArgumentOutOfRangeException($"Unexpected ReadEventResult: {res.Status}.");
 				}
 			});
 		}
diff --git a/src/EventStore.ClientAPI/Internal/OperationsManager.cs b/src/EventStore.ClientAPI/Internal/OperationsManager.cs
index c8ef4bdf7..29fb2aaf2 100644
--- a/src/EventStore.ClientAPI/Internal/OperationsManager.cs
+++ b/src/EventStore.ClientAPI/Internal/OperationsManager.cs
@@ -75,7 +75,7 @@ namespace EventStore.ClientAPI.Internal {
 
 		public void CleanUp() {
 			var connectionClosedException =
-				new ConnectionClosedException(string.Format("Connection '{0}' was closed.", _connectionName));
+				new ConnectionClosedException($"Connection '{_connectionName}' was closed.");
 			foreach (var operation in _activeOperations.Values
 				.Concat(_waitingOperations)
 				.Concat(_retryPendingOperations)) {
diff --git a/src/EventStore.ClientAPI/Internal/SubscriptionsManager.cs b/src/EventStore.ClientAPI/Internal/SubscriptionsManager.cs
index 1556cfb7f..4865b109b 100644
--- a/src/EventStore.ClientAPI/Internal/SubscriptionsManager.cs
+++ b/src/EventStore.ClientAPI/Internal/SubscriptionsManager.cs
@@ -62,7 +62,7 @@ namespace EventStore.ClientAPI.Internal {
 
 		public void CleanUp() {
 			var connectionClosedException =
-				new ConnectionClosedException(string.Format("Connection '{0}' was closed.", _connectionName));
+				new ConnectionClosedException($"Connection '{_connectionName}' was closed.");
 			foreach (var subscription in _activeSubscriptions.Values
 				.Concat(_waitingSubscriptions)
 				.Concat(_retryPendingSubscriptions)) {
diff --git a/src/EventStore.ClientAPI/Messages/ClusterMessages.cs b/src/EventStore.ClientAPI/Messages/ClusterMessages.cs
index 4241a7236..15b0452f7 100644
--- a/src/EventStore.ClientAPI/Messages/ClusterMessages.cs
+++ b/src/EventStore.ClientAPI/Messages/ClusterMessages.cs
@@ -59,9 +59,9 @@ namespace EventStore.ClientAPI.Messages {
 					"VND {0:B} <{1}> [{2}, {3}:{4}, {5}, {6}:{7}, {8}, {9}:{10}] {11}/{12}/{13}/E{14}@{15}:{16:B} | {17:yyyy-MM-dd HH:mm:ss.fff}",
 					InstanceId, IsAlive ? "LIVE" : "DEAD", State,
 					InternalTcpIp, InternalTcpPort,
-					InternalSecureTcpPort > 0 ? string.Format("{0}:{1}", InternalTcpIp, InternalSecureTcpPort) : "n/a",
+					InternalSecureTcpPort > 0 ? $"{InternalTcpIp}:{InternalSecureTcpPort}" : "n/a",
 					ExternalTcpIp, ExternalTcpPort,
-					ExternalSecureTcpPort > 0 ? string.Format("{0}:{1}", ExternalTcpIp, ExternalSecureTcpPort) : "n/a",
+					ExternalSecureTcpPort > 0 ? $"{ExternalTcpIp}:{ExternalSecureTcpPort}" : "n/a",
 					HttpAddress, HttpPort,
 					LastCommitPosition, WriterCheckpoint, ChaserCheckpoint,
 					EpochNumber, EpochPosition, EpochId,
diff --git a/src/EventStore.ClientAPI/NodeEndPoints.cs b/src/EventStore.ClientAPI/NodeEndPoints.cs
index 85a7d24e3..64f6f735e 100644
--- a/src/EventStore.ClientAPI/NodeEndPoints.cs
+++ b/src/EventStore.ClientAPI/NodeEndPoints.cs
@@ -32,9 +32,7 @@ namespace EventStore.ClientAPI {
 		/// Formats the endpoints as a string
 		/// </summary>
 		public override string ToString() {
-			return string.Format("[{0}, {1}]",
-				TcpEndPoint == null ? "n/a" : TcpEndPoint.ToString(),
-				SecureTcpEndPoint == null ? "n/a" : SecureTcpEndPoint.ToString());
+			return $"[{(TcpEndPoint == null ? "n/a" : TcpEndPoint.ToString())}, {(SecureTcpEndPoint == null ? "n/a" : SecureTcpEndPoint.ToString())}]";
 		}
 	}
 }
diff --git a/src/EventStore.ClientAPI/PersistentSubscriptions/PersistentSubscriptionsClient.cs b/src/EventStore.ClientAPI/PersistentSubscriptions/PersistentSubscriptionsClient.cs
index e23c674f1..2bc5fa018 100644
--- a/src/EventStore.ClientAPI/PersistentSubscriptions/PersistentSubscriptionsClient.cs
+++ b/src/EventStore.ClientAPI/PersistentSubscriptions/PersistentSubscriptionsClient.cs
@@ -70,8 +70,7 @@ namespace EventStore.ClientAPI.PersistentSubscriptions {
 				else
 					source.SetException(new PersistentSubscriptionCommandFailedException(
 						response.HttpStatusCode,
-						string.Format("Server returned {0} ({1}) for GET on {2}", response.HttpStatusCode,
-							response.StatusDescription, url)));
+						$"Server returned {response.HttpStatusCode} ({response.StatusDescription}) for GET on {url}"));
 			}, new Action<Exception>(source.SetException), "");
 			return source.Task;
 		}
@@ -86,8 +85,7 @@ namespace EventStore.ClientAPI.PersistentSubscriptions {
 				else
 					source.SetException(new PersistentSubscriptionCommandFailedException(
 						response.HttpStatusCode,
-						string.Format("Server returned {0} ({1}) for POST on {2}", response.HttpStatusCode,
-							response.StatusDescription, url)));
+						$"Server returned {response.HttpStatusCode} ({response.StatusDescription}) for POST on {url}"));
 			}, new Action<Exception>(source.SetException));
 			return source.Task;
 		}
diff --git a/src/EventStore.ClientAPI/Position.cs b/src/EventStore.ClientAPI/Position.cs
index 401e07737..d4bf88388 100644
--- a/src/EventStore.ClientAPI/Position.cs
+++ b/src/EventStore.ClientAPI/Position.cs
@@ -149,7 +149,7 @@ namespace EventStore.ClientAPI {
 		/// </returns>
 		/// <filterpriority>2</filterpriority>
 		public override string ToString() {
-			return string.Format("{0}/{1}", CommitPosition, PreparePosition);
+			return $"{CommitPosition}/{PreparePosition}";
 		}
 	}
 }
diff --git a/src/EventStore.ClientAPI/Projections/ProjectionsClient.cs b/src/EventStore.ClientAPI/Projections/ProjectionsClient.cs
index 612b7b2ac..bb6822c44 100644
--- a/src/EventStore.ClientAPI/Projections/ProjectionsClient.cs
+++ b/src/EventStore.ClientAPI/Projections/ProjectionsClient.cs
@@ -187,10 +187,7 @@ namespace EventStore.ClientAPI.Projections {
 					else
 						source.SetException(new ProjectionCommandFailedException(
 							response.HttpStatusCode,
-							string.Format("Server returned {0} ({1}) for GET on {2}",
-								response.HttpStatusCode,
-								response.StatusDescription,
-								url)));
+							$"Server returned {response.HttpStatusCode} ({response.StatusDescription}) for GET on {url}"));
 				},
 				source.SetException);
 
@@ -207,10 +204,7 @@ namespace EventStore.ClientAPI.Projections {
 					else
 						source.SetException(new ProjectionCommandFailedException(
 							response.HttpStatusCode,
-							string.Format("Server returned {0} ({1}) for DELETE on {2}",
-								response.HttpStatusCode,
-								response.StatusDescription,
-								url)));
+							$"Server returned {response.HttpStatusCode} ({response.StatusDescription}) for DELETE on {url}"));
 				},
 				source.SetException);
 
@@ -229,10 +223,7 @@ namespace EventStore.ClientAPI.Projections {
 					else
 						source.SetException(new ProjectionCommandFailedException(
 							response.HttpStatusCode,
-							string.Format("Server returned {0} ({1}) for PUT on {2}",
-								response.HttpStatusCode,
-								response.StatusDescription,
-								url)));
+							$"Server returned {response.HttpStatusCode} ({response.StatusDescription}) for PUT on {url}"));
 				},
 				source.SetException);
 
@@ -254,10 +245,7 @@ namespace EventStore.ClientAPI.Projections {
 					else
 						source.SetException(new ProjectionCommandFailedException(
 							response.HttpStatusCode,
-							string.Format("Server returned {0} ({1}) for POST on {2}",
-								response.HttpStatusCode,
-								response.StatusDescription,
-								url)));
+							$"Server returned {response.HttpStatusCode} ({response.StatusDescription}) for POST on {url}"));
 				},
 				source.SetException);
 
diff --git a/src/EventStore.ClientAPI/StreamAcl.cs b/src/EventStore.ClientAPI/StreamAcl.cs
index 945677bba..b013537a1 100644
--- a/src/EventStore.ClientAPI/StreamAcl.cs
+++ b/src/EventStore.ClientAPI/StreamAcl.cs
@@ -107,12 +107,7 @@ namespace EventStore.ClientAPI {
 		/// </returns>
 		/// <filterpriority>2</filterpriority>
 		public override string ToString() {
-			return string.Format("Read: {0}, Write: {1}, Delete: {2}, MetaRead: {3}, MetaWrite: {4}",
-				ReadRoles == null ? "<null>" : "[" + string.Join(",", ReadRoles) + "]",
-				WriteRoles == null ? "<null>" : "[" + string.Join(",", WriteRoles) + "]",
-				DeleteRoles == null ? "<null>" : "[" + string.Join(",", DeleteRoles) + "]",
-				MetaReadRoles == null ? "<null>" : "[" + string.Join(",", MetaReadRoles) + "]",
-				MetaWriteRoles == null ? "<null>" : "[" + string.Join(",", MetaWriteRoles) + "]");
+			return $"Read: {(ReadRoles == null ? "<null>" : "[" + string.Join(",", ReadRoles) + "]")}, Write: {(WriteRoles == null ? "<null>" : "[" + string.Join(",", WriteRoles) + "]")}, Delete: {(DeleteRoles == null ? "<null>" : "[" + string.Join(",", DeleteRoles) + "]")}, MetaRead: {(MetaReadRoles == null ? "<null>" : "[" + string.Join(",", MetaReadRoles) + "]")}, MetaWrite: {(MetaWriteRoles == null ? "<null>" : "[" + string.Join(",", MetaWriteRoles) + "]")}";
 		}
 
 		private static string CheckAndReturnIfSingle(string[] roles) {
diff --git a/src/EventStore.ClientAPI/StreamMetadata.cs b/src/EventStore.ClientAPI/StreamMetadata.cs
index 40dde8647..f979c8c19 100644
--- a/src/EventStore.ClientAPI/StreamMetadata.cs
+++ b/src/EventStore.ClientAPI/StreamMetadata.cs
@@ -60,17 +60,17 @@ namespace EventStore.ClientAPI {
 			StreamAcl acl, IDictionary<string, JToken> customMetadata = null) {
 			if (maxCount <= 0)
 				throw new ArgumentOutOfRangeException("maxCount",
-					string.Format("{0} should be positive value.", SystemMetadata.MaxCount));
+					$"{SystemMetadata.MaxCount} should be positive value.");
 			if (maxAge <= TimeSpan.Zero)
 				throw new ArgumentOutOfRangeException("maxAge",
-					string.Format("{0} should be positive time span.", SystemMetadata.MaxAge));
+					$"{SystemMetadata.MaxAge} should be positive time span.");
 			if (truncateBefore < 0)
 				throw new ArgumentOutOfRangeException("truncateBefore",
-					string.Format("{0} should be non-negative value.", SystemMetadata.TruncateBefore));
+					$"{SystemMetadata.TruncateBefore} should be non-negative value.");
 
 			if (cacheControl <= TimeSpan.Zero)
 				throw new ArgumentOutOfRangeException("cacheControl",
-					string.Format("{0} should be positive time span.", SystemMetadata.CacheControl));
+					$"{SystemMetadata.CacheControl} should be positive time span.");
 
 			MaxCount = maxCount;
 			MaxAge = maxAge;
@@ -138,7 +138,7 @@ namespace EventStore.ClientAPI {
 		public T GetValue<T>(string key) {
 			T res;
 			if (!TryGetValue(key, out res))
-				throw new ArgumentException(string.Format("Key '{0}' not found in custom metadata.", key));
+				throw new ArgumentException($"Key '{key}' not found in custom metadata.");
 			return res;
 		}
 
@@ -173,7 +173,7 @@ namespace EventStore.ClientAPI {
 		public string GetValueAsRawJsonString(string key) {
 			string res;
 			if (!TryGetValueAsRawJsonString(key, out res))
-				throw new ArgumentException(string.Format("No key '{0}' found in custom metadata.", key));
+				throw new ArgumentException($"No key '{key}' found in custom metadata.");
 			return res;
 		}
 
diff --git a/src/EventStore.ClientAPI/SystemData/InspectionResult.cs b/src/EventStore.ClientAPI/SystemData/InspectionResult.cs
index f307df7d8..4b3e29009 100644
--- a/src/EventStore.ClientAPI/SystemData/InspectionResult.cs
+++ b/src/EventStore.ClientAPI/SystemData/InspectionResult.cs
@@ -15,7 +15,7 @@ namespace EventStore.ClientAPI.SystemData {
 					throw new ArgumentNullException("Both TCP endpoints are null");
 			} else {
 				if (tcpEndPoint != null || secureTcpEndPoint != null)
-					throw new ArgumentException(string.Format("tcpEndPoint or secureTcpEndPoint is not null for decision {0}.", decision));
+					throw new ArgumentException($"tcpEndPoint or secureTcpEndPoint is not null for decision {decision}.");
 			}
 
 			Decision = decision;
diff --git a/src/EventStore.ClientAPI/SystemSettings.cs b/src/EventStore.ClientAPI/SystemSettings.cs
index 0ce499cb6..875ad984c 100644
--- a/src/EventStore.ClientAPI/SystemSettings.cs
+++ b/src/EventStore.ClientAPI/SystemSettings.cs
@@ -38,7 +38,7 @@ namespace EventStore.ClientAPI {
 		/// </returns>
 		/// <filterpriority>2</filterpriority>
 		public override string ToString() {
-			return string.Format("UserStreamAcl: ({0}), SystemStreamAcl: ({1})", UserStreamAcl, SystemStreamAcl);
+			return $"UserStreamAcl: ({UserStreamAcl}), SystemStreamAcl: ({SystemStreamAcl})";
 		}
 
 		/// <summary>
diff --git a/src/EventStore.ClientAPI/Transport.Tcp/LengthPrefixFramer.cs b/src/EventStore.ClientAPI/Transport.Tcp/LengthPrefixFramer.cs
index 5e116378f..d82fb74f5 100644
--- a/src/EventStore.ClientAPI/Transport.Tcp/LengthPrefixFramer.cs
+++ b/src/EventStore.ClientAPI/Transport.Tcp/LengthPrefixFramer.cs
@@ -54,9 +54,7 @@ namespace EventStore.ClientAPI.Transport.Tcp {
 					++_headerBytes;
 					if (_headerBytes != HeaderLength) continue;
 					if (_packageLength <= 0 || _packageLength > _maxPackageSize)
-						throw new PackageFramingException(string.Format(
-							"Package size is out of bounds: {0} (max: {1}). This is likely an exceptionally large message (reading too many things) or there is a problem with the framing if working on a new client.",
-							_packageLength, _maxPackageSize));
+						throw new PackageFramingException($"Package size is out of bounds: {_packageLength} (max: {_maxPackageSize}). This is likely an exceptionally large message (reading too many things) or there is a problem with the framing if working on a new client.");
 
 					_messageBuffer = new byte[_packageLength];
 				} else {
diff --git a/src/EventStore.ClientAPI/Transport.Tcp/TcpPackageConnection.cs b/src/EventStore.ClientAPI/Transport.Tcp/TcpPackageConnection.cs
index 2dd162e94..a805e9a48 100644
--- a/src/EventStore.ClientAPI/Transport.Tcp/TcpPackageConnection.cs
+++ b/src/EventStore.ClientAPI/Transport.Tcp/TcpPackageConnection.cs
@@ -117,13 +117,9 @@ namespace EventStore.ClientAPI.Transport.Tcp {
 				valid = true;
 				_handlePackage(this, package);
 			} catch (Exception e) {
-				_connection.Close(string.Format("Error when processing TcpPackage {0}: {1}",
-					valid ? package.Command.ToString() : "<invalid package>", e.Message));
+				_connection.Close($"Error when processing TcpPackage {(valid ? package.Command.ToString() : "<invalid package>")}: {e.Message}");
 
-				var message = string.Format(
-					"TcpPackageConnection: [{0}, L{1}, {2}] ERROR for {3}. Connection will be closed.",
-					RemoteEndPoint, LocalEndPoint, ConnectionId,
-					valid ? package.Command.ToString() : "<invalid package>");
+				var message = $"TcpPackageConnection: [{RemoteEndPoint}, L{LocalEndPoint}, {ConnectionId}] ERROR for {(valid ? package.Command.ToString() : "<invalid package>")}. Connection will be closed.";
 				if (_onError != null)
 					_onError(this, e);
 				_log.Debug(e, message);
diff --git a/src/EventStore.ClientAPI/UserManagement/UsersClient.cs b/src/EventStore.ClientAPI/UserManagement/UsersClient.cs
index 2d2e70d3d..dcf350b84 100644
--- a/src/EventStore.ClientAPI/UserManagement/UsersClient.cs
+++ b/src/EventStore.ClientAPI/UserManagement/UsersClient.cs
@@ -104,10 +104,7 @@ namespace EventStore.ClientAPI.UserManagement {
 					else
 						source.SetException(new UserCommandFailedException(
 							response.HttpStatusCode,
-							string.Format("Server returned {0} ({1}) for GET on {2}",
-								response.HttpStatusCode,
-								response.StatusDescription,
-								url)));
+							$"Server returned {response.HttpStatusCode} ({response.StatusDescription}) for GET on {url}"));
 				},
 				source.SetException);
 
@@ -124,10 +121,7 @@ namespace EventStore.ClientAPI.UserManagement {
 					else
 						source.SetException(new UserCommandFailedException(
 							response.HttpStatusCode,
-							string.Format("Server returned {0} ({1}) for DELETE on {2}",
-								response.HttpStatusCode,
-								response.StatusDescription,
-								url)));
+							$"Server returned {response.HttpStatusCode} ({response.StatusDescription}) for DELETE on {url}"));
 				},
 				source.SetException);
 
@@ -146,10 +140,7 @@ namespace EventStore.ClientAPI.UserManagement {
 					else
 						source.SetException(new UserCommandFailedException(
 							response.HttpStatusCode,
-							string.Format("Server returned {0} ({1}) for PUT on {2}",
-								response.HttpStatusCode,
-								response.StatusDescription,
-								url)));
+							$"Server returned {response.HttpStatusCode} ({response.StatusDescription}) for PUT on {url}"));
 				},
 				source.SetException);
 
@@ -171,10 +162,7 @@ namespace EventStore.ClientAPI.UserManagement {
 					else
 						source.SetException(new UserCommandFailedException(
 							response.HttpStatusCode,
-							string.Format("Server returned {0} ({1}) for POST on {2}",
-								response.HttpStatusCode,
-								response.StatusDescription,
-								url)));
+							$"Server returned {response.HttpStatusCode} ({response.StatusDescription}) for POST on {url}"));
 				},
 				source.SetException);
 
diff --git a/src/EventStore.Common/Options/EventStoreOptions.cs b/src/EventStore.Common/Options/EventStoreOptions.cs
index bd0376625..b99d8430e 100644
--- a/src/EventStore.Common/Options/EventStoreOptions.cs
+++ b/src/EventStore.Common/Options/EventStoreOptions.cs
@@ -42,7 +42,7 @@ namespace EventStore.Common.Options {
 			if (configFile != null) {
 				if (!File.Exists(configFile)) {
 					throw new OptionException(
-						String.Format("The specified config file {0} could not be found", configFile), "config");
+						$"The specified config file {configFile} could not be found", "config");
 				}
 
 				yield return Yaml.FromFile(configFile);
@@ -78,7 +78,7 @@ namespace EventStore.Common.Options {
 			var displayingModifiedOptions = true;
 			dumpOptionsBuilder.AppendLine("MODIFIED OPTIONS:");
 			dumpOptionsBuilder.AppendLine();
-			if (_effectiveOptions.Count(x => !x.Source.ToLower().Contains("default")) == 0) {
+			if (!_effectiveOptions.Any(x => !x.Source.ToLower().Contains("default"))) {
 				dumpOptionsBuilder.AppendLine("NONE");
 				dumpOptionsBuilder.AppendLine();
 				dumpOptionsBuilder.AppendLine(defaultOptionsHeading);
@@ -109,8 +109,7 @@ namespace EventStore.Common.Options {
 					}
 				}
 
-				dumpOptionsBuilder.AppendLine(String.Format("\t{0,-25} {1} ({2})", optionName + ":",
-					String.IsNullOrEmpty(valueToDump) ? "<empty>" : valueToDump, option.Source));
+				dumpOptionsBuilder.AppendLine($"\t{optionName + ":", -25} {(String.IsNullOrEmpty(valueToDump) ? "<empty>" : valueToDump)} ({option.Source})");
 			}
 
 			return dumpOptionsBuilder.ToString();
@@ -144,7 +143,7 @@ namespace EventStore.Common.Options {
 			var properties = typeof(TOptions).GetProperties();
 			foreach (var optionSource in optionSources) {
 				if (!properties.Any(x => x.Name.Equals(optionSource.Name, StringComparison.OrdinalIgnoreCase))) {
-					throw new OptionException(String.Format("The option {0} is not a known option", optionSource.Name),
+					throw new OptionException($"The option {optionSource.Name} is not a known option",
 						optionSource.Name);
 				}
 			}
@@ -192,8 +191,7 @@ namespace EventStore.Common.Options {
 					}
 				} catch {
 					throw new OptionException(
-						String.Format("The value {0} could not be converted to {1}", optionSource.Value,
-							property.PropertyType.Name), property.Name);
+						$"The value {optionSource.Value} could not be converted to {property.PropertyType.Name}", property.Name);
 				}
 			}
 
diff --git a/src/EventStore.Common/Utils/Ensure.cs b/src/EventStore.Common/Utils/Ensure.cs
index 05261812f..c3d0d7789 100644
--- a/src/EventStore.Common/Utils/Ensure.cs
+++ b/src/EventStore.Common/Utils/Ensure.cs
@@ -39,20 +39,17 @@ namespace EventStore.Common.Utils {
 
 		public static void Equal(int expected, int actual, string argumentName) {
 			if (expected != actual)
-				throw new ArgumentException(string.Format("{0} expected value: {1}, actual value: {2}", argumentName,
-					expected, actual));
+				throw new ArgumentException($"{argumentName} expected value: {expected}, actual value: {actual}");
 		}
 
 		public static void Equal(long expected, long actual, string argumentName) {
 			if (expected != actual)
-				throw new ArgumentException(string.Format("{0} expected value: {1}, actual value: {2}", argumentName,
-					expected, actual));
+				throw new ArgumentException($"{argumentName} expected value: {expected}, actual value: {actual}");
 		}
 
 		public static void Equal(bool expected, bool actual, string argumentName) {
 			if (expected != actual)
-				throw new ArgumentException(string.Format("{0} expected value: {1}, actual value: {2}", argumentName,
-					expected, actual));
+				throw new ArgumentException($"{argumentName} expected value: {expected}, actual value: {actual}");
 		}
 	}
 }
diff --git a/src/EventStore.Common/Utils/EnumerableExtensions.cs b/src/EventStore.Common/Utils/EnumerableExtensions.cs
index 00a9097df..47c17b6ef 100644
--- a/src/EventStore.Common/Utils/EnumerableExtensions.cs
+++ b/src/EventStore.Common/Utils/EnumerableExtensions.cs
@@ -16,8 +16,8 @@ namespace EventStore.Common.Utils {
 		public static bool IsEmpty<T>(this IEnumerable<T> collection) {
 			if (collection == null)
 				return true;
-			var coll = collection as ICollection;
-			if (coll != null)
+
+			if (collection is ICollection coll)
 				return coll.Count == 0;
 			return !collection.Any();
 		}
diff --git a/src/EventStore.Common/Utils/IPAddressConverter.cs b/src/EventStore.Common/Utils/IPAddressConverter.cs
index 59356ed36..2b5538a2b 100644
--- a/src/EventStore.Common/Utils/IPAddressConverter.cs
+++ b/src/EventStore.Common/Utils/IPAddressConverter.cs
@@ -13,8 +13,7 @@ namespace EventStore.Common.Utils {
 
 		public override object ConvertFrom(ITypeDescriptorContext context, System.Globalization.CultureInfo culture,
 			object value) {
-			var valueAsString = value as string;
-			if (valueAsString != null) {
+			if (value is string valueAsString) {
 				return IPAddress.Parse(valueAsString);
 			}
 
diff --git a/src/EventStore.Common/Utils/IPEndPointArrayConverter.cs b/src/EventStore.Common/Utils/IPEndPointArrayConverter.cs
index d6979a089..728c951fb 100644
--- a/src/EventStore.Common/Utils/IPEndPointArrayConverter.cs
+++ b/src/EventStore.Common/Utils/IPEndPointArrayConverter.cs
@@ -16,8 +16,7 @@ namespace EventStore.Common.Utils {
 		public override object ConvertFrom(ITypeDescriptorContext context, System.Globalization.CultureInfo culture,
 			object value) {
 			if (value.GetType() == typeof(string)) {
-				var valueAsString = value as string;
-				if (valueAsString != null) {
+				if (value is string valueAsString) {
 					var ipEndPointList = valueAsString.Split(new[] {","}, StringSplitOptions.None)
 						.Select(x => (IPEndPoint)new IPEndPointConverter().ConvertFrom(x));
 					return ipEndPointList.ToArray();
diff --git a/src/EventStore.Common/Utils/IPEndpointConverter.cs b/src/EventStore.Common/Utils/IPEndpointConverter.cs
index 52055769d..dffe7560a 100644
--- a/src/EventStore.Common/Utils/IPEndpointConverter.cs
+++ b/src/EventStore.Common/Utils/IPEndpointConverter.cs
@@ -13,8 +13,7 @@ namespace EventStore.Common.Utils {
 
 		public override object ConvertFrom(ITypeDescriptorContext context, System.Globalization.CultureInfo culture,
 			object value) {
-			var valueAsString = value as string;
-			if (valueAsString != null) {
+			if (value is string valueAsString) {
 				var address = valueAsString.Substring(0, valueAsString.LastIndexOf(':'));
 				var port = valueAsString.Substring(valueAsString.LastIndexOf(':') + 1);
 
diff --git a/src/EventStore.Core.Tests/Bus/Helpers/WaitingConsumer.cs b/src/EventStore.Core.Tests/Bus/Helpers/WaitingConsumer.cs
index 7f88a8f3a..ce8440cac 100644
--- a/src/EventStore.Core.Tests/Bus/Helpers/WaitingConsumer.cs
+++ b/src/EventStore.Core.Tests/Bus/Helpers/WaitingConsumer.cs
@@ -25,12 +25,10 @@ namespace EventStore.Core.Tests.Bus.Helpers {
 		public void Handle(Message message) {
 			HandledMessages.Add(message);
 
-			var typedMsg = message as DeferredExecutionTestMessage;
-			if (typedMsg != null)
+			if (message is DeferredExecutionTestMessage typedMsg)
 				((Action<DeferredExecutionTestMessage>)(deffered => deffered.Execute()))(typedMsg);
 
-			var executableTestMessage = message as ExecutableTestMessage;
-			if (executableTestMessage != null)
+			if (message is ExecutableTestMessage executableTestMessage)
 				((Action<ExecutableTestMessage>)(deffered => deffered.Execute()))(executableTestMessage);
 
 			_countdownEvent.Signal();
diff --git a/src/EventStore.Core.Tests/ClientAPI/ExpectedVersion64Bit/MiniNodeWithExistingRecords.cs b/src/EventStore.Core.Tests/ClientAPI/ExpectedVersion64Bit/MiniNodeWithExistingRecords.cs
index 288dda5db..fc7bb46d6 100644
--- a/src/EventStore.Core.Tests/ClientAPI/ExpectedVersion64Bit/MiniNodeWithExistingRecords.cs
+++ b/src/EventStore.Core.Tests/ClientAPI/ExpectedVersion64Bit/MiniNodeWithExistingRecords.cs
@@ -47,7 +47,7 @@ namespace EventStore.Core.Tests.ClientAPI.ExpectedVersion64Bit {
 		[OneTimeSetUp]
 		public override async Task TestFixtureSetUp() {
 			await base.TestFixtureSetUp();
-			string dbPath = Path.Combine(PathName, string.Format("mini-node-db-{0}", Guid.NewGuid()));
+			string dbPath = Path.Combine(PathName, $"mini-node-db-{Guid.NewGuid()}");
 
 			Bus = new InMemoryBus("bus");
 			IODispatcher = new IODispatcher(Bus, new PublishEnvelope(Bus));
diff --git a/src/EventStore.Core.Tests/ClientAPI/ExpectedVersion64Bit/read_stream_with_link_to_event_with_event_number_greater_than_int_maxvalue.cs b/src/EventStore.Core.Tests/ClientAPI/ExpectedVersion64Bit/read_stream_with_link_to_event_with_event_number_greater_than_int_maxvalue.cs
index 1acb59ff3..9864ddaf9 100644
--- a/src/EventStore.Core.Tests/ClientAPI/ExpectedVersion64Bit/read_stream_with_link_to_event_with_event_number_greater_than_int_maxvalue.cs
+++ b/src/EventStore.Core.Tests/ClientAPI/ExpectedVersion64Bit/read_stream_with_link_to_event_with_event_number_greater_than_int_maxvalue.cs
@@ -20,9 +20,9 @@ namespace EventStore.Core.Tests.ClientAPI.ExpectedVersion64Bit {
 			_event1 = WriteSingleEvent(StreamName, intMaxValue + 1, new string('.', 3000));
 			_event2 = WriteSingleEvent(StreamName, intMaxValue + 2, new string('.', 3000));
 
-			WriteSingleEvent(_linkedStreamName, 0, string.Format("{0}@{1}", intMaxValue + 1, StreamName),
+			WriteSingleEvent(_linkedStreamName, 0, $"{intMaxValue + 1}@{StreamName}",
 				eventType: SystemEventTypes.LinkTo);
-			WriteSingleEvent(_linkedStreamName, 1, string.Format("{0}@{1}", intMaxValue + 2, StreamName),
+			WriteSingleEvent(_linkedStreamName, 1, $"{intMaxValue + 2}@{StreamName}",
 				eventType: SystemEventTypes.LinkTo);
 		}
 
@@ -60,7 +60,7 @@ namespace EventStore.Core.Tests.ClientAPI.ExpectedVersion64Bit {
 			var readResult = await _store.ReadAllEventsForwardAsync(Position.Start, 100, true, DefaultData.AdminCredentials)
 ;
 			var linkedEvents = readResult.Events.Where(x => x.OriginalStreamId == _linkedStreamName).ToList();
-			Assert.AreEqual(2, linkedEvents.Count());
+			Assert.AreEqual(2, linkedEvents.Count);
 			Assert.AreEqual(_event1.EventId, linkedEvents[0].Event.EventId);
 			Assert.AreEqual(_event2.EventId, linkedEvents[1].Event.EventId);
 			Assert.AreEqual(intMaxValue + 1, linkedEvents[0].Event.EventNumber);
@@ -72,7 +72,7 @@ namespace EventStore.Core.Tests.ClientAPI.ExpectedVersion64Bit {
 			var readResult = await _store.ReadAllEventsBackwardAsync(Position.End, 100, true, DefaultData.AdminCredentials)
 ;
 			var linkedEvents = readResult.Events.Where(x => x.OriginalStreamId == _linkedStreamName).ToList();
-			Assert.AreEqual(2, linkedEvents.Count());
+			Assert.AreEqual(2, linkedEvents.Count);
 			Assert.AreEqual(_event2.EventId, linkedEvents[0].Event.EventId);
 			Assert.AreEqual(_event1.EventId, linkedEvents[1].Event.EventId);
 			Assert.AreEqual(intMaxValue + 2, linkedEvents[0].Event.EventNumber);
diff --git a/src/EventStore.Core.Tests/ClientAPI/ExpectedVersion64Bit/subscribe_to_stream_with_link_to_event_with_event_number_greater_than_int_maxvalue.cs b/src/EventStore.Core.Tests/ClientAPI/ExpectedVersion64Bit/subscribe_to_stream_with_link_to_event_with_event_number_greater_than_int_maxvalue.cs
index d7c44be46..e59333cad 100644
--- a/src/EventStore.Core.Tests/ClientAPI/ExpectedVersion64Bit/subscribe_to_stream_with_link_to_event_with_event_number_greater_than_int_maxvalue.cs
+++ b/src/EventStore.Core.Tests/ClientAPI/ExpectedVersion64Bit/subscribe_to_stream_with_link_to_event_with_event_number_greater_than_int_maxvalue.cs
@@ -38,7 +38,7 @@ namespace EventStore.Core.Tests.ClientAPI.ExpectedVersion64Bit {
 			await _store.AppendToStreamAsync(_linkedStreamName, ExpectedVersion.NoStream,
 				new EventData(Guid.NewGuid(),
 					SystemEventTypes.LinkTo, false, Helper.UTF8NoBom.GetBytes(
-						string.Format("{0}@{1}", intMaxValue + 1, StreamName)
+						$"{intMaxValue + 1}@{StreamName}"
 					), null));
 		}
 
diff --git a/src/EventStore.Core.Tests/ClientAPI/Helpers/TestConnection.cs b/src/EventStore.Core.Tests/ClientAPI/Helpers/TestConnection.cs
index c86cf63cf..411504835 100644
--- a/src/EventStore.Core.Tests/ClientAPI/Helpers/TestConnection.cs
+++ b/src/EventStore.Core.Tests/ClientAPI/Helpers/TestConnection.cs
@@ -15,14 +15,14 @@ namespace EventStore.Core.Tests.ClientAPI.Helpers {
 			UserCredentials userCredentials = null) {
 			return EventStoreConnection.Create(Settings(tcpType, userCredentials),
 				endPoint.ToESTcpUri(),
-				string.Format("ESC-{0}", Interlocked.Increment(ref _nextConnId)));
+				$"ESC-{Interlocked.Increment(ref _nextConnId)}");
 		}
 
 		public static IEventStoreConnection To(MiniNode miniNode, TcpType tcpType,
 			UserCredentials userCredentials = null) {
 			return EventStoreConnection.Create(Settings(tcpType, userCredentials),
 				tcpType == TcpType.Ssl ? miniNode.TcpSecEndPoint.ToESTcpUri() : miniNode.TcpEndPoint.ToESTcpUri(),
-				string.Format("ESC-{0}", Interlocked.Increment(ref _nextConnId)));
+				$"ESC-{Interlocked.Increment(ref _nextConnId)}");
 		}
 
 		private static ConnectionSettingsBuilder Settings(TcpType tcpType, UserCredentials userCredentials) {
@@ -52,7 +52,7 @@ namespace EventStore.Core.Tests.ClientAPI.Helpers {
 
 		public static IEventStoreConnection To(MiniNode miniNode, UserCredentials credentials = null) {
 			return EmbeddedEventStoreConnection.Create(miniNode.Node, Settings(credentials),
-				string.Format("ESC-{0}", Interlocked.Increment(ref _nextConnId)));
+				$"ESC-{Interlocked.Increment(ref _nextConnId)}");
 		}
 
 		private static ConnectionSettingsBuilder Settings(UserCredentials credentials = null) {
diff --git a/src/EventStore.Core.Tests/ClientAPI/connecting_to_a_persistent_subscription.cs b/src/EventStore.Core.Tests/ClientAPI/connecting_to_a_persistent_subscription.cs
index b98006dfa..6fbcf2042 100644
--- a/src/EventStore.Core.Tests/ClientAPI/connecting_to_a_persistent_subscription.cs
+++ b/src/EventStore.Core.Tests/ClientAPI/connecting_to_a_persistent_subscription.cs
@@ -690,7 +690,7 @@ namespace EventStore.Core.Tests.ClientAPI {
 				DefaultData.AdminCredentials);
 			await _store.AppendToStreamAsync(_linkedStreamName, ExpectedVersion.Any, new EventData(Guid.NewGuid(),
 				SystemEventTypes.LinkTo, false, Helper.UTF8NoBom.GetBytes(
-					string.Format("{0}@{1}", intMaxValue + 1, StreamName)), null));
+					$"{intMaxValue + 1}@{StreamName}"), null));
 		}
 
 		private Task HandleEvent(EventStorePersistentSubscriptionBase sub, ResolvedEvent resolvedEvent) {
diff --git a/src/EventStore.Core.Tests/ClientAPI/connecting_with_connection_string.cs b/src/EventStore.Core.Tests/ClientAPI/connecting_with_connection_string.cs
index a6496148d..6504314a1 100644
--- a/src/EventStore.Core.Tests/ClientAPI/connecting_with_connection_string.cs
+++ b/src/EventStore.Core.Tests/ClientAPI/connecting_with_connection_string.cs
@@ -25,7 +25,7 @@ namespace EventStore.Core.Tests.ClientAPI {
 
 		[Test]
 		public async Task should_not_throw_when_connect_to_is_set() {
-			string connectionString = string.Format("ConnectTo=tcp://{0};", _node.TcpEndPoint);
+			string connectionString = $"ConnectTo=tcp://{_node.TcpEndPoint};";
 			using (var connection = EventStoreConnection.Create(connectionString)) {
 				await connection.ConnectAsync();
 				connection.Close();
@@ -34,7 +34,7 @@ namespace EventStore.Core.Tests.ClientAPI {
 
 		[Test]
 		public void should_not_throw_when_only_gossip_seeds_is_set() {
-			string connectionString = string.Format("GossipSeeds={0};", _node.HttpEndPoint);
+			string connectionString = $"GossipSeeds={_node.HttpEndPoint};";
 			IEventStoreConnection connection = null;
 
 			Assert.DoesNotThrow(() => connection = EventStoreConnection.Create(connectionString));
@@ -45,8 +45,7 @@ namespace EventStore.Core.Tests.ClientAPI {
 
 		[Test]
 		public void should_throw_when_gossip_seeds_and_connect_to_is_set() {
-			string connectionString = string.Format("ConnectTo=tcp://{0};GossipSeeds={1}", _node.TcpEndPoint,
-				_node.HttpEndPoint);
+			string connectionString = $"ConnectTo=tcp://{_node.TcpEndPoint};GossipSeeds={_node.HttpEndPoint}";
 			Assert.Throws<NotSupportedException>(() => EventStoreConnection.Create(connectionString));
 		}
 
diff --git a/src/EventStore.Core.Tests/Common/EventStoreOptionsTests/when_parsing/with_a_complex_type.cs b/src/EventStore.Core.Tests/Common/EventStoreOptionsTests/when_parsing/with_a_complex_type.cs
index f4915903d..948f7b834 100644
--- a/src/EventStore.Core.Tests/Common/EventStoreOptionsTests/when_parsing/with_a_complex_type.cs
+++ b/src/EventStore.Core.Tests/Common/EventStoreOptionsTests/when_parsing/with_a_complex_type.cs
@@ -34,7 +34,7 @@ namespace EventStore.Core.Tests.Common.EventStoreOptionsTests.when_parsing {
 
 		[Test]
 		public void should_be_able_to_parse_the_value_from_an_environment_variable() {
-			Environment.SetEnvironmentVariable(String.Format("{0}GOSSIP_SEED", Opts.EnvPrefix),
+			Environment.SetEnvironmentVariable($"{Opts.EnvPrefix}GOSSIP_SEED",
 				"127.0.0.1:1000,127.0.0.2:2000");
 			var args = new string[] { };
 			var testArgs = EventStoreOptions.Parse<TestArgs>(args, Opts.EnvPrefix);
diff --git a/src/EventStore.Core.Tests/Common/EventStoreOptionsTests/when_parsing/with_command_line_argument_with_config_file_and_environment_variable.cs b/src/EventStore.Core.Tests/Common/EventStoreOptionsTests/when_parsing/with_command_line_argument_with_config_file_and_environment_variable.cs
index e8ccd0653..193a3348f 100644
--- a/src/EventStore.Core.Tests/Common/EventStoreOptionsTests/when_parsing/with_command_line_argument_with_config_file_and_environment_variable.cs
+++ b/src/EventStore.Core.Tests/Common/EventStoreOptionsTests/when_parsing/with_command_line_argument_with_config_file_and_environment_variable.cs
@@ -14,12 +14,12 @@ namespace EventStore.Core.Tests.Common.EventStoreOptionsTests.when_parsing {
 		[Test]
 		public void should_use_the_command_line_argument() {
 			var configFile = HelperExtensions.GetFilePathFromAssembly("TestConfigs/test_config.yaml");
-			Environment.SetEnvironmentVariable(String.Format("{0}HTTP_PORT", Opts.EnvPrefix), "2111",
+			Environment.SetEnvironmentVariable($"{Opts.EnvPrefix}HTTP_PORT", "2111",
 				EnvironmentVariableTarget.Process);
 			var args = new string[] {"-config", configFile, "-httpPort", "2115"};
 			var testArgs = EventStoreOptions.Parse<TestArgs>(args, Opts.EnvPrefix);
 			Assert.AreEqual(2115, testArgs.HttpPort);
-			Environment.SetEnvironmentVariable(String.Format("{0}HTTP_PORT", Opts.EnvPrefix), null,
+			Environment.SetEnvironmentVariable($"{Opts.EnvPrefix}HTTP_PORT", null,
 				EnvironmentVariableTarget.Process);
 		}
 	}
diff --git a/src/EventStore.Core.Tests/Common/EventStoreOptionsTests/when_parsing/with_config_file_and_environment_variable.cs b/src/EventStore.Core.Tests/Common/EventStoreOptionsTests/when_parsing/with_config_file_and_environment_variable.cs
index 8dfaf8f53..07a9c49fe 100644
--- a/src/EventStore.Core.Tests/Common/EventStoreOptionsTests/when_parsing/with_config_file_and_environment_variable.cs
+++ b/src/EventStore.Core.Tests/Common/EventStoreOptionsTests/when_parsing/with_config_file_and_environment_variable.cs
@@ -14,11 +14,11 @@ namespace EventStore.Core.Tests.Common.EventStoreOptionsTests.when_parsing {
 		[Test]
 		public void should_use_the_environment_variable_over_the_config_value() {
 			var configFile = HelperExtensions.GetFilePathFromAssembly("TestConfigs/test_config.yaml");
-			Environment.SetEnvironmentVariable(String.Format("{0}HTTP_PORT", Opts.EnvPrefix), "2111");
+			Environment.SetEnvironmentVariable($"{Opts.EnvPrefix}HTTP_PORT", "2111");
 			var args = new string[] {"-config", configFile};
 			var testArgs = EventStoreOptions.Parse<TestArgs>(args, Opts.EnvPrefix);
 			Assert.AreEqual(2111, testArgs.HttpPort);
-			Environment.SetEnvironmentVariable(String.Format("{0}HTTP_PORT", Opts.EnvPrefix), String.Empty);
+			Environment.SetEnvironmentVariable($"{Opts.EnvPrefix}HTTP_PORT", String.Empty);
 		}
 	}
 }
diff --git a/src/EventStore.Core.Tests/Common/EventStoreOptionsTests/when_parsing/with_no_arguments_and_environment_variables_exist.cs b/src/EventStore.Core.Tests/Common/EventStoreOptionsTests/when_parsing/with_no_arguments_and_environment_variables_exist.cs
index ecd69e78e..4e815fa02 100644
--- a/src/EventStore.Core.Tests/Common/EventStoreOptionsTests/when_parsing/with_no_arguments_and_environment_variables_exist.cs
+++ b/src/EventStore.Core.Tests/Common/EventStoreOptionsTests/when_parsing/with_no_arguments_and_environment_variables_exist.cs
@@ -12,11 +12,11 @@ namespace EventStore.Core.Tests.Common.EventStoreOptionsTests.when_parsing {
 	public class with_no_arguments_and_environment_variables_exist {
 		[Test]
 		public void should_use_the_environment_variable_over_the_default_value() {
-			Environment.SetEnvironmentVariable(String.Format("{0}HTTP_PORT", Opts.EnvPrefix), "2111");
+			Environment.SetEnvironmentVariable($"{Opts.EnvPrefix}HTTP_PORT", "2111");
 			var args = new string[] { };
 			var testArgs = EventStoreOptions.Parse<TestArgs>(args, Opts.EnvPrefix);
 			Assert.AreEqual(2111, testArgs.HttpPort);
-			Environment.SetEnvironmentVariable(String.Format("{0}HTTP_PORT", Opts.EnvPrefix), String.Empty);
+			Environment.SetEnvironmentVariable($"{Opts.EnvPrefix}HTTP_PORT", String.Empty);
 		}
 	}
 }
diff --git a/src/EventStore.Core.Tests/Common/EventStoreOptionsTests/when_parsing/with_unknown_options.cs b/src/EventStore.Core.Tests/Common/EventStoreOptionsTests/when_parsing/with_unknown_options.cs
index 83b49e857..76302713e 100644
--- a/src/EventStore.Core.Tests/Common/EventStoreOptionsTests/when_parsing/with_unknown_options.cs
+++ b/src/EventStore.Core.Tests/Common/EventStoreOptionsTests/when_parsing/with_unknown_options.cs
@@ -34,11 +34,11 @@ namespace EventStore.Core.Tests.Common.EventStoreOptionsTests.when_parsing {
 
 		[Test]
 		public void should_not_contain_the_unknown_option_in_the_dumping_of_the_options_environment_variable() {
-			Environment.SetEnvironmentVariable(String.Format("{0}UNKNOWN_OPTION", Opts.EnvPrefix), "true");
+			Environment.SetEnvironmentVariable($"{Opts.EnvPrefix}UNKNOWN_OPTION", "true");
 			var args = new string[] { };
 			EventStoreOptions.Parse<TestArgs>(args, Opts.EnvPrefix);
 
-			Assert.False(EventStoreOptions.DumpOptions().Contains(String.Format("{0}UNKNOWN_OPTION", Opts.EnvPrefix)));
+			Assert.False(EventStoreOptions.DumpOptions().Contains($"{Opts.EnvPrefix}UNKNOWN_OPTION"));
 		}
 	}
 }
diff --git a/src/EventStore.Core.Tests/Common/VNodeBuilderTests/when_building/with_secure_tcp.cs b/src/EventStore.Core.Tests/Common/VNodeBuilderTests/when_building/with_secure_tcp.cs
index 8ac2ef2c4..050c4fbd6 100644
--- a/src/EventStore.Core.Tests/Common/VNodeBuilderTests/when_building/with_secure_tcp.cs
+++ b/src/EventStore.Core.Tests/Common/VNodeBuilderTests/when_building/with_secure_tcp.cs
@@ -45,7 +45,7 @@ namespace EventStore.Core.Tests.Common.VNodeBuilderTests.when_building {
 		}
 
 		private string GetCertificatePath() {
-			var filePath = Path.Combine(Path.GetTempPath(), string.Format("cert-{0}.p12", Guid.NewGuid()));
+			var filePath = Path.Combine(Path.GetTempPath(), $"cert-{Guid.NewGuid()}.p12");
 			using (var stream = Assembly.GetExecutingAssembly()
 				.GetManifestResourceStream("EventStore.Core.Tests.Services.Transport.Tcp.test_certificates.untrusted.untrusted.p12"))
 			using (var fileStream = File.Create(filePath)) {
diff --git a/src/EventStore.Core.Tests/Common/VNodeBuilderTests/when_building/with_single_node_and_custom_settings.cs b/src/EventStore.Core.Tests/Common/VNodeBuilderTests/when_building/with_single_node_and_custom_settings.cs
index 0a6a62129..0680de418 100644
--- a/src/EventStore.Core.Tests/Common/VNodeBuilderTests/when_building/with_single_node_and_custom_settings.cs
+++ b/src/EventStore.Core.Tests/Common/VNodeBuilderTests/when_building/with_single_node_and_custom_settings.cs
@@ -15,7 +15,7 @@ namespace EventStore.Core.Tests.Common.VNodeBuilderTests.when_building {
 		private string _dbPath;
 
 		public override void Given() {
-			_dbPath = Path.Combine(Path.GetTempPath(), string.Format("Test-{0}", Guid.NewGuid()));
+			_dbPath = Path.Combine(Path.GetTempPath(), $"Test-{Guid.NewGuid()}");
 			_builder.RunOnDisk(_dbPath);
 		}
 
@@ -425,8 +425,8 @@ namespace EventStore.Core.Tests.Common.VNodeBuilderTests.when_building {
 
 			var httpEndPoint = new IPEndPoint(baseIpAddress, extPort);
 
-			_extPrefix = string.Format("http://{0}/", httpEndPoint);
-			_extLoopbackPrefix = string.Format("http://{0}/", new IPEndPoint(IPAddress.Loopback, extPort));
+			_extPrefix = $"http://{httpEndPoint}/";
+			_extLoopbackPrefix = $"http://{new IPEndPoint(IPAddress.Loopback, extPort)}/";
 
 			_builder.WithHttpOn(httpEndPoint);
 		}
diff --git a/src/EventStore.Core.Tests/Helpers/HelperExtensions.cs b/src/EventStore.Core.Tests/Helpers/HelperExtensions.cs
index f090ceb87..aa89b1d9b 100644
--- a/src/EventStore.Core.Tests/Helpers/HelperExtensions.cs
+++ b/src/EventStore.Core.Tests/Helpers/HelperExtensions.cs
@@ -67,9 +67,9 @@ namespace EventStore.Core.Tests.Helpers {
 					AssertJObject(v as JObject, vv as JObject, path + "/" + index);
 				} else if (v.Type == JTokenType.Array) {
 					AssertJArray(v as JArray, vv as JArray, path + "/" + index);
-				} else if (v is JValue) {
+				} else if (v is JValue jValue) {
 					Assert.AreEqual(
-						((JValue)v).Value, ((JValue)vv).Value, "{0}/{1} value is '{2}' but '{3}' is expected", path,
+						jValue.Value, ((JValue)vv).Value, "{0}/{1} value is '{2}' but '{3}' is expected", path,
 						index, vv, v);
 				} else
 					Assert.Fail();
diff --git a/src/EventStore.Core.Tests/Helpers/MiniClusterNode.cs b/src/EventStore.Core.Tests/Helpers/MiniClusterNode.cs
index 708de82b8..1d8615c97 100644
--- a/src/EventStore.Core.Tests/Helpers/MiniClusterNode.cs
+++ b/src/EventStore.Core.Tests/Helpers/MiniClusterNode.cs
@@ -90,8 +90,7 @@ namespace EventStore.Core.Tests.Helpers {
 
 			_dbPath = Path.Combine(
 				pathname,
-				string.Format(
-					"mini-cluster-node-db-{0}-{1}-{2}", externalTcp.Port, externalTcpSec.Port, httpEndPoint.Port));
+				$"mini-cluster-node-db-{externalTcp.Port}-{externalTcpSec.Port}-{httpEndPoint.Port}");
 
 			Directory.CreateDirectory(_dbPath);
 			FileStreamExtensions.ConfigureFlush(disableFlushToDisk);
@@ -155,7 +154,7 @@ namespace EventStore.Core.Tests.Helpers {
 				Marshal.SizeOf(typeof(IntPtr)) * 8, "GC:",
 				GC.MaxGeneration == 0
 					? "NON-GENERATION (PROBABLY BOEHM)"
-					: string.Format("{0} GENERATIONS", GC.MaxGeneration + 1), "DBPATH:", _dbPath, "ExTCP ENDPOINT:",
+					: $"{GC.MaxGeneration + 1} GENERATIONS", "DBPATH:", _dbPath, "ExTCP ENDPOINT:",
 				ExternalTcpEndPoint, "ExTCP SECURE ENDPOINT:", ExternalTcpSecEndPoint, "ExHTTP ENDPOINT:",
 				HttpEndPoint);
 
diff --git a/src/EventStore.Core.Tests/Helpers/MiniNode.cs b/src/EventStore.Core.Tests/Helpers/MiniNode.cs
index d7370b389..b84619d18 100644
--- a/src/EventStore.Core.Tests/Helpers/MiniNode.cs
+++ b/src/EventStore.Core.Tests/Helpers/MiniNode.cs
@@ -144,7 +144,7 @@ namespace EventStore.Core.Tests.Helpers {
 				"GC:",
 				GC.MaxGeneration == 0
 					? "NON-GENERATION (PROBABLY BOEHM)"
-					: string.Format("{0} GENERATIONS", GC.MaxGeneration + 1),
+					: $"{GC.MaxGeneration + 1} GENERATIONS",
 				"DBPATH:", DbPath,
 				"TCP ENDPOINT:", TcpEndPoint,
 				"TCP SECURE ENDPOINT:", TcpSecEndPoint,
diff --git a/src/EventStore.Core.Tests/Helpers/ReflectionDynamic.cs b/src/EventStore.Core.Tests/Helpers/ReflectionDynamic.cs
index 2ff5a1dbf..d68b1ed90 100644
--- a/src/EventStore.Core.Tests/Helpers/ReflectionDynamic.cs
+++ b/src/EventStore.Core.Tests/Helpers/ReflectionDynamic.cs
@@ -143,9 +143,7 @@ namespace EventStore.Core.Tests.Helpers {
 			// For fields, skip the auto property backing fields (which name start with <)
 			var propNames = typeProperties.Keys.Where(name => name[0] != '<').OrderBy(name => name);
 			throw new ArgumentException(
-				string.Format(
-					"The property {0} does not exist on type {1}. Supported properties are: {2}",
-					propertyName, RealObject.GetType(), string.Join(", ", propNames)));
+				$"The property {propertyName} does not exist on type {RealObject.GetType()}. Supported properties are: {string.Join(", ", propNames)}");
 		}
 
 		private static IDictionary<string, IProperty> GetTypeProperties(Type type) {
diff --git a/src/EventStore.Core.Tests/Helpers/TestFixtureWithExistingEvents.cs b/src/EventStore.Core.Tests/Helpers/TestFixtureWithExistingEvents.cs
index 6cbaef954..9a699fdab 100644
--- a/src/EventStore.Core.Tests/Helpers/TestFixtureWithExistingEvents.cs
+++ b/src/EventStore.Core.Tests/Helpers/TestFixtureWithExistingEvents.cs
@@ -538,7 +538,7 @@ namespace EventStore.Core.Tests.Helpers {
 		}
 
 		public void AssertLastEvent(string streamId, string data, string message = null, int skip = 0) {
-			message = message ?? string.Format("Invalid last event in the '{0}' stream. ", streamId);
+			message = message ?? $"Invalid last event in the '{streamId}' stream. ";
 			List<EventRecord> events;
 			Assert.That(_streams.TryGetValue(streamId, out events), message + "The stream does not exist.");
 			events = events.Take(events.Count - skip).ToList();
@@ -548,7 +548,7 @@ namespace EventStore.Core.Tests.Helpers {
 		}
 
 		public void AssertLastEventJson<T>(string streamId, T json, string message = null, int skip = 0) {
-			message = message ?? string.Format("Invalid last event in the '{0}' stream. ", streamId);
+			message = message ?? $"Invalid last event in the '{streamId}' stream. ";
 			List<EventRecord> events;
 			Assert.That(_streams.TryGetValue(streamId, out events), message + "The stream does not exist.");
 			events = events.Take(events.Count - skip).ToList();
@@ -559,7 +559,7 @@ namespace EventStore.Core.Tests.Helpers {
 		}
 
 		public void AssertLastEventIs(string streamId, string eventType, string message = null, int skip = 0) {
-			message = message ?? string.Format("Invalid last event in the '{0}' stream. ", streamId);
+			message = message ?? $"Invalid last event in the '{streamId}' stream. ";
 			List<EventRecord> events;
 			Assert.That(_streams.TryGetValue(streamId, out events), message + "The stream does not exist.");
 			events = events.Take(events.Count - skip).ToList();
@@ -569,7 +569,7 @@ namespace EventStore.Core.Tests.Helpers {
 		}
 
 		public void AssertStreamTail(string streamId, params string[] data) {
-			var message = string.Format("Invalid events in the '{0}' stream. ", streamId);
+			var message = $"Invalid events in the '{streamId}' stream. ";
 			List<EventRecord> events;
 			Assert.That(_streams.TryGetValue(streamId, out events), message + "The stream does not exist.");
 			var eventsText = events.Skip(events.Count - data.Length).Select(v => Encoding.UTF8.GetString(v.Data.Span))
@@ -579,13 +579,11 @@ namespace EventStore.Core.Tests.Helpers {
 
 			Assert.That(
 				data.SequenceEqual(eventsText),
-				string.Format(
-					"{0} does end with: {1} the tail is: {2}", streamId, data.Aggregate("", (a, v) => a + " " + v),
-					eventsText.Aggregate("", (a, v) => a + " " + v)));
+				$"{streamId} does end with: {data.Aggregate("", (a, v) => a + " " + v)} the tail is: {eventsText.Aggregate("", (a, v) => a + " " + v)}");
 		}
 
 		public void AssertStreamTailWithLinks(string streamId, params string[] data) {
-			var message = string.Format("Invalid events in the '{0}' stream. ", streamId);
+			var message = $"Invalid events in the '{streamId}' stream. ";
 			List<EventRecord> events;
 			Assert.That(_streams.TryGetValue(streamId, out events), message + "The stream does not exist.");
 			var eventsText =
@@ -602,9 +600,7 @@ namespace EventStore.Core.Tests.Helpers {
 
 			Assert.That(
 				data.SequenceEqual(eventsText),
-				string.Format(
-					"{0} does not end with: {1}. the tail is: {2}", streamId, data.Aggregate("", (a, v) => a + " " + v),
-					eventsText.Aggregate("", (a, v) => a + " " + v)));
+				$"{streamId} does not end with: {data.Aggregate("", (a, v) => a + " " + v)}. the tail is: {eventsText.Aggregate("", (a, v) => a + " " + v)}");
 		}
 
 		private string ResolveEventText(string link) {
@@ -617,7 +613,7 @@ namespace EventStore.Core.Tests.Helpers {
 		}
 
 		public void AssertStreamContains(string streamId, params string[] data) {
-			var message = string.Format("Invalid events in the '{0}' stream. ", streamId);
+			var message = $"Invalid events in the '{streamId}' stream. ";
 			List<EventRecord> events;
 			Assert.That(_streams.TryGetValue(streamId, out events), message + "The stream does not exist.");
 			if (data.Length > 0)
@@ -627,7 +623,7 @@ namespace EventStore.Core.Tests.Helpers {
 			var missing = data.Where(v => !eventsData.Contains(v)).ToArray();
 
 			Assert.That(missing.Length == 0,
-				string.Format("{0} does not contain: {1}", streamId, missing.Aggregate("", (a, v) => a + " " + v)));
+				$"{streamId} does not contain: {missing.Aggregate("", (a, v) => a + " " + v)}");
 		}
 
 		public void AssertEvent(string streamId, long eventNumber, string data) {
@@ -642,7 +638,7 @@ namespace EventStore.Core.Tests.Helpers {
 			List<EventRecord> events;
 			Assert.That(
 				!_streams.TryGetValue(streamId, out events) || events.Count == 0,
-				string.Format("The stream {0} should not exist.", streamId));
+				$"The stream {streamId} should not exist.");
 		}
 
 		[Conditional("DEBUG")]
diff --git a/src/EventStore.Core.Tests/Http/PersistentSubscription/creating.cs b/src/EventStore.Core.Tests/Http/PersistentSubscription/creating.cs
index 20b63862e..39fcbe790 100644
--- a/src/EventStore.Core.Tests/Http/PersistentSubscription/creating.cs
+++ b/src/EventStore.Core.Tests/Http/PersistentSubscription/creating.cs
@@ -152,7 +152,7 @@ namespace EventStore.Core.Tests.Http.PersistentSubscription {
 
 		protected override async Task When() {
 			GroupName = Guid.NewGuid().ToString();
-			SubscriptionPath = string.Format("/subscriptions/{0}/{1}", TestStream.Substring(9), GroupName);
+			SubscriptionPath = $"/subscriptions/{TestStream.Substring(9)}/{GroupName}";
 			Response = await MakeJsonPut(SubscriptionPath,
 				new {
 					ResolveLinkTos = true,
@@ -184,7 +184,7 @@ namespace EventStore.Core.Tests.Http.PersistentSubscription {
 
 		protected override async Task When() {
 			GroupName = Guid.NewGuid().ToString();
-			SubscriptionPath = string.Format("/subscriptions/{0}/{1}", TestStream.Substring(9), GroupName);
+			SubscriptionPath = $"/subscriptions/{TestStream.Substring(9)}/{GroupName}";
 			Response = await MakeJsonPut(SubscriptionPath,
 				new {
 					ResolveLinkTos = true,
@@ -223,7 +223,7 @@ namespace EventStore.Core.Tests.Http.PersistentSubscription {
 		protected override Task Given() => Task.CompletedTask;
 		protected override async Task When() {
 			GroupName = Guid.NewGuid().ToString();
-			SubscriptionPath = string.Format("/subscriptions/{0}/{1}", TestStream.Substring(9), GroupName);
+			SubscriptionPath = $"/subscriptions/{TestStream.Substring(9)}/{GroupName}";
 			Response = await MakeJsonPut(SubscriptionPath,
 				new {
 					ResolveLinkTos = true,
diff --git a/src/EventStore.Core.Tests/Http/PersistentSubscription/deleting.cs b/src/EventStore.Core.Tests/Http/PersistentSubscription/deleting.cs
index 086df9e3e..bfc582715 100644
--- a/src/EventStore.Core.Tests/Http/PersistentSubscription/deleting.cs
+++ b/src/EventStore.Core.Tests/Http/PersistentSubscription/deleting.cs
@@ -83,7 +83,7 @@ namespace EventStore.Core.Tests.Http.PersistentSubscription {
 
 		protected override async Task Given() {
 			_response = await MakeJsonPut(
-				string.Format("/subscriptions/{0}/{1}", _stream, _groupName),
+				$"/subscriptions/{_stream}/{_groupName}",
 				new {
 					ResolveLinkTos = true
 				}, _admin);
@@ -96,7 +96,7 @@ namespace EventStore.Core.Tests.Http.PersistentSubscription {
 		}
 
 		protected override async Task When() {
-			var req = CreateRequest(string.Format("/subscriptions/{0}/{1}", _stream, _groupName), "DELETE", _admin);
+			var req = CreateRequest($"/subscriptions/{_stream}/{_groupName}", "DELETE", _admin);
 			_response = await GetRequestResponse(req);
 		}
 
diff --git a/src/EventStore.Core.Tests/Http/PersistentSubscription/feed.cs b/src/EventStore.Core.Tests/Http/PersistentSubscription/feed.cs
index 137233722..53b68acfc 100644
--- a/src/EventStore.Core.Tests/Http/PersistentSubscription/feed.cs
+++ b/src/EventStore.Core.Tests/Http/PersistentSubscription/feed.cs
@@ -37,7 +37,7 @@ namespace EventStore.Core.Tests.Http.PersistentSubscription {
 			_subscriptionStream = streamId;
 			_subscriptionGroupName = groupName;
 			_subscriptionEndpoint =
-				String.Format("/subscriptions/{0}/{1}", _subscriptionStream, _subscriptionGroupName);
+				$"/subscriptions/{_subscriptionStream}/{_subscriptionGroupName}";
 
 			var response = await MakeJsonPut(
 				_subscriptionEndpoint,
@@ -125,7 +125,7 @@ namespace EventStore.Core.Tests.Http.PersistentSubscription {
 		private List<JToken> _entries;
 
 		protected override async Task When() {
-			var allMessagesFeedLink = String.Format("{0}/{1}", _subscriptionEndpoint, _numberOfEvents);
+			var allMessagesFeedLink = $"{_subscriptionEndpoint}/{_numberOfEvents}";
 			_feed = await GetJson<JObject>(allMessagesFeedLink, ContentType.CompetingJson);
 			_entries = _feed != null ? _feed["entries"].ToList() : new List<JToken>();
 		}
@@ -142,15 +142,15 @@ namespace EventStore.Core.Tests.Http.PersistentSubscription {
 
 		[Test]
 		public void the_ackAll_link_is_to_correct_uri() {
-			var ids = String.Format("ids={0}", String.Join(",", _eventIds.ToArray()));
-			var ackAllLink = String.Format("subscriptions/{0}/{1}/ack", TestStreamName, SubscriptionGroupName);
+			var ids = $"ids={String.Join(",", _eventIds.ToArray())}";
+			var ackAllLink = $"subscriptions/{TestStreamName}/{SubscriptionGroupName}/ack";
 			Assert.AreEqual(MakeUrl(ackAllLink, ids), GetLink(_feed, "ackAll"));
 		}
 
 		[Test]
 		public void the_nackAll_link_is_to_correct_uri() {
-			var ids = String.Format("ids={0}", String.Join(",", _eventIds.ToArray()));
-			var nackAllLink = String.Format("subscriptions/{0}/{1}/nack", TestStreamName, SubscriptionGroupName);
+			var ids = $"ids={String.Join(",", _eventIds.ToArray())}";
+			var nackAllLink = $"subscriptions/{TestStreamName}/{SubscriptionGroupName}/nack";
 			Assert.AreEqual(MakeUrl(nackAllLink, ids), GetLink(_feed, "nackAll"));
 		}
 		
@@ -195,8 +195,7 @@ namespace EventStore.Core.Tests.Http.PersistentSubscription {
 		public void the_ack_link_is_to_correct_uri() {
 			var link = _entries[0]["links"][2];
 			Assert.AreEqual("ack", link["relation"].ToString());
-			var ackLink = String.Format("subscriptions/{0}/{1}/ack/{2}", TestStreamName, SubscriptionGroupName,
-				_eventIds.Last());
+			var ackLink = $"subscriptions/{TestStreamName}/{SubscriptionGroupName}/ack/{_eventIds.Last()}";
 			Assert.AreEqual(MakeUrl(ackLink), link["uri"].ToString());
 		}
 
@@ -204,8 +203,7 @@ namespace EventStore.Core.Tests.Http.PersistentSubscription {
 		public void the_nack_link_is_to_correct_uri() {
 			var link = _entries[0]["links"][3];
 			Assert.AreEqual("nack", link["relation"].ToString());
-			var ackLink = String.Format("subscriptions/{0}/{1}/nack/{2}", TestStreamName, SubscriptionGroupName,
-				_eventIds.Last());
+			var ackLink = $"subscriptions/{TestStreamName}/{SubscriptionGroupName}/nack/{_eventIds.Last()}";
 			Assert.AreEqual(MakeUrl(ackLink), link["uri"].ToString());
 		}
 	}
@@ -233,16 +231,16 @@ namespace EventStore.Core.Tests.Http.PersistentSubscription {
 
 		[Test]
 		public void the_ackAll_link_is_to_correct_uri() {
-			var ids = String.Format("ids={0}", _eventIds[0]);
-			var ackAllLink = String.Format("subscriptions/{0}/{1}/ack", TestStreamName, SubscriptionGroupName);
+			var ids = $"ids={_eventIds[0]}";
+			var ackAllLink = $"subscriptions/{TestStreamName}/{SubscriptionGroupName}/ack";
 			Assert.AreEqual(MakeUrl(ackAllLink, ids),
 				document.Element(XDocumentAtomExtensions.AtomNamespace + "feed").GetLink("ackAll"));
 		}
 
 		[Test]
 		public void the_nackAll_link_is_to_correct_uri() {
-			var ids = String.Format("ids={0}", _eventIds[0]);
-			var nackAllLink = String.Format("subscriptions/{0}/{1}/nack", TestStreamName, SubscriptionGroupName);
+			var ids = $"ids={_eventIds[0]}";
+			var nackAllLink = $"subscriptions/{TestStreamName}/{SubscriptionGroupName}/nack";
 			Assert.AreEqual(MakeUrl(nackAllLink, ids),
 				document.Element(XDocumentAtomExtensions.AtomNamespace + "feed").GetLink("nackAll"));
 		}
@@ -252,8 +250,7 @@ namespace EventStore.Core.Tests.Http.PersistentSubscription {
 			var result = document.Element(XDocumentAtomExtensions.AtomNamespace + "feed")
 				.Element(XDocumentAtomExtensions.AtomNamespace + "entry")
 				.GetLink("ack");
-			var ackLink = String.Format("subscriptions/{0}/{1}/ack/{2}", TestStreamName, SubscriptionGroupName,
-				_eventIds[0]);
+			var ackLink = $"subscriptions/{TestStreamName}/{SubscriptionGroupName}/ack/{_eventIds[0]}";
 			Assert.AreEqual(MakeUrl(ackLink), result);
 		}
 
@@ -263,8 +260,7 @@ namespace EventStore.Core.Tests.Http.PersistentSubscription {
 				.Element(XDocumentAtomExtensions.AtomNamespace + "entry")
 				.GetLink("nack");
 			;
-			var nackLink = String.Format("subscriptions/{0}/{1}/nack/{2}", TestStreamName, SubscriptionGroupName,
-				_eventIds[0]);
+			var nackLink = $"subscriptions/{TestStreamName}/{SubscriptionGroupName}/nack/{_eventIds[0]}";
 			Assert.AreEqual(MakeUrl(nackLink), result);
 		}
 	}
@@ -291,7 +287,7 @@ namespace EventStore.Core.Tests.Http.PersistentSubscription {
 			_prefix = "myprefix";
 			var headers = new NameValueCollection();
 			headers.Add("X-Forwarded-Prefix", _prefix);
-			var allMessagesFeedLink = String.Format("{0}/{1}", _subscriptionEndpoint, _numberOfEvents);
+			var allMessagesFeedLink = $"{_subscriptionEndpoint}/{_numberOfEvents}";
 			_feed = await GetJson<JObject>(allMessagesFeedLink, ContentType.CompetingJson, headers: headers);
 			_entries = _feed != null ? _feed["entries"].ToList() : new List<JToken>();
 		}
@@ -308,30 +304,27 @@ namespace EventStore.Core.Tests.Http.PersistentSubscription {
 
 		[Test]
 		public void contains_previous_link_with_prefix() {
-			var previousLink = String.Format("{0}/subscriptions/{1}/{2}/5", _prefix, TestStreamName,
-				SubscriptionGroupName);
+			var previousLink = $"{_prefix}/subscriptions/{TestStreamName}/{SubscriptionGroupName}/5";
 			Assert.AreEqual(MakeUrl(previousLink), GetLink(_feed, "previous"));
 		}
 
 		[Test]
 		public void contains_self_link_with_prefix() {
-			var selfLink = String.Format("{0}/subscriptions/{1}/{2}", _prefix, TestStreamName, SubscriptionGroupName);
+			var selfLink = $"{_prefix}/subscriptions/{TestStreamName}/{SubscriptionGroupName}";
 			Assert.AreEqual(MakeUrl(selfLink), GetLink(_feed, "self"));
 		}
 
 		[Test]
 		public void the_ackAll_link_is_to_correct_uri_with_prefix() {
-			var ids = String.Format("ids={0}", String.Join(",", _eventIds.ToArray()));
-			var ackAllLink = String.Format("{0}/subscriptions/{1}/{2}/ack", _prefix, TestStreamName,
-				SubscriptionGroupName);
+			var ids = $"ids={String.Join(",", _eventIds.ToArray())}";
+			var ackAllLink = $"{_prefix}/subscriptions/{TestStreamName}/{SubscriptionGroupName}/ack";
 			Assert.AreEqual(MakeUrl(ackAllLink, ids), GetLink(_feed, "ackAll"));
 		}
 
 		[Test]
 		public void the_nackAll_link_is_to_correct_uri_with_prefix() {
-			var ids = String.Format("ids={0}", String.Join(",", _eventIds.ToArray()));
-			var nackAllLink = String.Format("{0}/subscriptions/{1}/{2}/nack", _prefix, TestStreamName,
-				SubscriptionGroupName);
+			var ids = $"ids={String.Join(",", _eventIds.ToArray())}";
+			var nackAllLink = $"{_prefix}/subscriptions/{TestStreamName}/{SubscriptionGroupName}/nack";
 			Assert.AreEqual(MakeUrl(nackAllLink, ids), GetLink(_feed, "nackAll"));
 		}
 	}
diff --git a/src/EventStore.Core.Tests/Http/PersistentSubscription/getting.cs b/src/EventStore.Core.Tests/Http/PersistentSubscription/getting.cs
index 1dcda0762..553906fbc 100644
--- a/src/EventStore.Core.Tests/Http/PersistentSubscription/getting.cs
+++ b/src/EventStore.Core.Tests/Http/PersistentSubscription/getting.cs
@@ -38,7 +38,7 @@ namespace EventStore.Core.Tests.Http.PersistentSubscription {
 			Assert.AreEqual(HttpStatusCode.Created, response.StatusCode);
 
 			GroupName = Guid.NewGuid().ToString();
-			SubscriptionPath = string.Format("/subscriptions/{0}/{1}", TestStream.Substring(9), GroupName);
+			SubscriptionPath = $"/subscriptions/{TestStream.Substring(9)}/{GroupName}";
 			response = await MakeJsonPut(SubscriptionPath,
 				new {
 					ResolveLinkTos = true,
@@ -108,7 +108,7 @@ namespace EventStore.Core.Tests.Http.PersistentSubscription {
 			};
 
 			GroupName = Guid.NewGuid().ToString();
-			SubscriptionPath = string.Format("/subscriptions/{0}/{1}", TestStream.Substring(9), GroupName);
+			SubscriptionPath = $"/subscriptions/{TestStream.Substring(9)}/{GroupName}";
 			var response = await MakeJsonPut(SubscriptionPath,
 				new {
 					ResolveLinkTos = true,
diff --git a/src/EventStore.Core.Tests/Http/PersistentSubscription/parked.cs b/src/EventStore.Core.Tests/Http/PersistentSubscription/parked.cs
index f36e5ae38..5ba141cce 100644
--- a/src/EventStore.Core.Tests/Http/PersistentSubscription/parked.cs
+++ b/src/EventStore.Core.Tests/Http/PersistentSubscription/parked.cs
@@ -39,7 +39,7 @@ namespace EventStore.Core.Tests.Http.PersistentSubscription {
 		}
 
 		protected override async Task When() {
-			var parkedStreamId = String.Format("$persistentsubscription-{0}::{1}-parked", TestStreamName, GroupName);
+			var parkedStreamId = $"$persistentsubscription-{TestStreamName}::{GroupName}-parked";
 
 			await _connection.SubscribeToStreamAsync(parkedStreamId, true, (x, y) => {
 					_parkedEventId = y.Event.EventId;
diff --git a/src/EventStore.Core.Tests/Http/PersistentSubscription/statistics.cs b/src/EventStore.Core.Tests/Http/PersistentSubscription/statistics.cs
index d89108deb..3b6644a69 100644
--- a/src/EventStore.Core.Tests/Http/PersistentSubscription/statistics.cs
+++ b/src/EventStore.Core.Tests/Http/PersistentSubscription/statistics.cs
@@ -188,7 +188,7 @@ namespace EventStore.Core.Tests.Http.PersistentSubscription {
 		[Test]
 		public void detail_rel_href_is_correct() {
 			Assert.AreEqual(
-				string.Format("http://{0}/subscriptions/{1}/{2}/info", _node.HttpEndPoint, _streamName, _groupName),
+				$"http://{_node.HttpEndPoint}/subscriptions/{_streamName}/{_groupName}/info",
 				_json["links"][0]["href"].Value<string>());
 		}
 
@@ -302,7 +302,7 @@ namespace EventStore.Core.Tests.Http.PersistentSubscription {
 		[Test]
 		public void the_first_event_stream_detail_uri_is_correct() {
 			Assert.AreEqual(
-				string.Format("http://{0}/subscriptions/{1}/{2}/info", _node.HttpEndPoint, _streamName, _groupName),
+				$"http://{_node.HttpEndPoint}/subscriptions/{_streamName}/{_groupName}/info",
 				_json[0]["links"][0]["href"].Value<string>());
 		}
 
@@ -321,8 +321,7 @@ namespace EventStore.Core.Tests.Http.PersistentSubscription {
 		[Test]
 		public void the_second_event_stream_detail_uri_is_correct() {
 			Assert.AreEqual(
-				string.Format("http://{0}/subscriptions/{1}/{2}/info", _node.HttpEndPoint, _streamName,
-					"secondgroup"),
+				$"http://{_node.HttpEndPoint}/subscriptions/{_streamName}/{"secondgroup"}/info",
 				_json[1]["links"][0]["href"].Value<string>());
 		}
 
@@ -341,15 +340,13 @@ namespace EventStore.Core.Tests.Http.PersistentSubscription {
 		[Test]
 		public void the_first_parked_message_queue_uri_is_correct() {
 			Assert.AreEqual(
-				string.Format("http://{0}/streams/%24persistentsubscription-{1}::{2}-parked", _node.HttpEndPoint,
-					_streamName, _groupName), _json[0]["parkedMessageUri"].Value<string>());
+				$"http://{_node.HttpEndPoint}/streams/%24persistentsubscription-{_streamName}::{_groupName}-parked", _json[0]["parkedMessageUri"].Value<string>());
 		}
 
 		[Test]
 		public void the_second_parked_message_queue_uri_is_correct() {
 			Assert.AreEqual(
-				string.Format("http://{0}/streams/%24persistentsubscription-{1}::{2}-parked", _node.HttpEndPoint,
-					_streamName, "secondgroup"), _json[1]["parkedMessageUri"].Value<string>());
+				$"http://{_node.HttpEndPoint}/streams/%24persistentsubscription-{_streamName}::{"secondgroup"}-parked", _json[1]["parkedMessageUri"].Value<string>());
 		}
 
 		[Test]
@@ -441,30 +438,27 @@ namespace EventStore.Core.Tests.Http.PersistentSubscription {
 		[Test]
 		public void the_first_event_stream_detail_uri_is_correct() {
 			Assert.AreEqual(
-				string.Format("http://{0}/subscriptions/{1}/{2}/info", _node.HttpEndPoint, _streamName, _groupName),
+				$"http://{_node.HttpEndPoint}/subscriptions/{_streamName}/{_groupName}/info",
 				_json[0]["links"][0]["href"].Value<string>());
 		}
 
 		[Test]
 		public void the_second_event_stream_detail_uri_is_correct() {
 			Assert.AreEqual(
-				string.Format("http://{0}/subscriptions/{1}/{2}/info", _node.HttpEndPoint, _streamName,
-					"secondgroup"),
+				$"http://{_node.HttpEndPoint}/subscriptions/{_streamName}/{"secondgroup"}/info",
 				_json[1]["links"][0]["href"].Value<string>());
 		}
 
 		[Test]
 		public void the_first_parked_message_queue_uri_is_correct() {
 			Assert.AreEqual(
-				string.Format("http://{0}/streams/%24persistentsubscription-{1}::{2}-parked", _node.HttpEndPoint,
-					_streamName, _groupName), _json[0]["parkedMessageUri"].Value<string>());
+				$"http://{_node.HttpEndPoint}/streams/%24persistentsubscription-{_streamName}::{_groupName}-parked", _json[0]["parkedMessageUri"].Value<string>());
 		}
 
 		[Test]
 		public void the_second_parked_message_queue_uri_is_correct() {
 			Assert.AreEqual(
-				string.Format("http://{0}/streams/%24persistentsubscription-{1}::{2}-parked", _node.HttpEndPoint,
-					_streamName, "secondgroup"), _json[1]["parkedMessageUri"].Value<string>());
+				$"http://{_node.HttpEndPoint}/streams/%24persistentsubscription-{_streamName}::{"secondgroup"}-parked", _json[1]["parkedMessageUri"].Value<string>());
 		}
 
 		[Test]
diff --git a/src/EventStore.Core.Tests/Http/PersistentSubscription/updating.cs b/src/EventStore.Core.Tests/Http/PersistentSubscription/updating.cs
index 486c7af43..5fe65b640 100644
--- a/src/EventStore.Core.Tests/Http/PersistentSubscription/updating.cs
+++ b/src/EventStore.Core.Tests/Http/PersistentSubscription/updating.cs
@@ -68,7 +68,7 @@ namespace EventStore.Core.Tests.Http.PersistentSubscription {
 
 		protected override async Task Given() {
 			_response = await MakeJsonPut(
-				string.Format("/subscriptions/{0}/{1}", _stream, _groupName),
+				$"/subscriptions/{_stream}/{_groupName}",
 				new {
 					ResolveLinkTos = true
 				}, DefaultData.AdminNetworkCredentials);
@@ -86,7 +86,7 @@ namespace EventStore.Core.Tests.Http.PersistentSubscription {
 
 		protected override async Task When() {
 			_response = await MakeJsonPost(
-				string.Format("/subscriptions/{0}/{1}", _stream, _groupName),
+				$"/subscriptions/{_stream}/{_groupName}",
 				new {
 					ResolveLinkTos = true
 				}, DefaultData.AdminNetworkCredentials);
@@ -107,7 +107,7 @@ namespace EventStore.Core.Tests.Http.PersistentSubscription {
 		[Test]
 		public void location_header_is_present() {
 			Assert.AreEqual(
-				string.Format("http://{0}/subscriptions/{1}/{2}", _node.HttpEndPoint, _stream, _groupName),
+				$"http://{_node.HttpEndPoint}/subscriptions/{_stream}/{_groupName}",
 				_response.Headers.Location.ToString());
 		}
 	}
diff --git a/src/EventStore.Core.Tests/Http/Streams/feed.cs b/src/EventStore.Core.Tests/Http/Streams/feed.cs
index 212c5bad2..b0cfca991 100644
--- a/src/EventStore.Core.Tests/Http/Streams/feed.cs
+++ b/src/EventStore.Core.Tests/Http/Streams/feed.cs
@@ -226,7 +226,7 @@ namespace EventStore.Core.Tests.Http.Streams {
 
 			[Test]
 			public void the_feed_has_one_event() {
-				Assert.AreEqual(1, _entries.Count());
+				Assert.AreEqual(1, _entries.Count);
 			}
 
 			[Test]
@@ -256,7 +256,7 @@ namespace EventStore.Core.Tests.Http.Streams {
 
 			[Test]
 			public void the_feed_has_two_events() {
-				Assert.AreEqual(2, _entries.Count());
+				Assert.AreEqual(2, _entries.Count);
 			}
 
 			[Test]
@@ -331,7 +331,7 @@ namespace EventStore.Core.Tests.Http.Streams {
 
 			[Test]
 			public void the_feed_has_two_events() {
-				Assert.AreEqual(2, _entries.Count());
+				Assert.AreEqual(2, _entries.Count);
 			}
 
 			[Test]
@@ -380,7 +380,7 @@ namespace EventStore.Core.Tests.Http.Streams {
 
 			[Test]
 			public void the_feed_has_no_events() {
-				Assert.AreEqual(1, _entries.Count());
+				Assert.AreEqual(1, _entries.Count);
 			}
 		}
 
@@ -400,7 +400,7 @@ namespace EventStore.Core.Tests.Http.Streams {
 
 			[Test]
 			public void the_feed_has_some_events() {
-				Assert.AreEqual(1, _entries.Count());
+				Assert.AreEqual(1, _entries.Count);
 			}
 		}
 
@@ -448,7 +448,7 @@ namespace EventStore.Core.Tests.Http.Streams {
 
 			[Test]
 			public void the_feed_has_one_event() {
-				Assert.AreEqual(1, _entries.Count());
+				Assert.AreEqual(1, _entries.Count);
 			}
 
 			[Test]
@@ -478,7 +478,7 @@ namespace EventStore.Core.Tests.Http.Streams {
 
 			[Test]
 			public void the_feed_has_one_event() {
-				Assert.AreEqual(1, _entries.Count());
+				Assert.AreEqual(1, _entries.Count);
 			}
 
 			[Test]
@@ -511,7 +511,7 @@ namespace EventStore.Core.Tests.Http.Streams {
 
 			[Test]
 			public void the_feed_has_one_event() {
-				Assert.AreEqual(1, _entries.Count());
+				Assert.AreEqual(1, _entries.Count);
 			}
 
 			[Test]
diff --git a/src/EventStore.Core.Tests/Index/IndexV1/index_map_should_detect_corruption.cs b/src/EventStore.Core.Tests/Index/IndexV1/index_map_should_detect_corruption.cs
index 640bf49dc..3a869bbc0 100644
--- a/src/EventStore.Core.Tests/Index/IndexV1/index_map_should_detect_corruption.cs
+++ b/src/EventStore.Core.Tests/Index/IndexV1/index_map_should_detect_corruption.cs
@@ -113,7 +113,7 @@ namespace EventStore.Core.Tests.Index.IndexV1 {
 		[Test]
 		public void when_ptable_line_is_missing_one_number() {
 			var lines = File.ReadAllLines(_indexMapFileName);
-			File.WriteAllLines(_indexMapFileName, new[] { lines[0], lines[1], string.Format("0,{0}", _ptableFileName) });
+			File.WriteAllLines(_indexMapFileName, new[] { lines[0], lines[1], $"0,{_ptableFileName}" });
 
 			Assert.Throws<CorruptIndexException>(() =>
 				IndexMapTestFactory.FromFile(_indexMapFileName, maxTablesPerLevel: 2));
diff --git a/src/EventStore.Core.Tests/Index/IndexV1/ptable_midpoint_cache_should.cs b/src/EventStore.Core.Tests/Index/IndexV1/ptable_midpoint_cache_should.cs
index 0a7162957..150800f05 100644
--- a/src/EventStore.Core.Tests/Index/IndexV1/ptable_midpoint_cache_should.cs
+++ b/src/EventStore.Core.Tests/Index/IndexV1/ptable_midpoint_cache_should.cs
@@ -30,13 +30,11 @@ namespace EventStore.Core.Tests.Index.IndexV1 {
 					try {
 						Log.Verbose("Creating PTable with count {0}, depth {1}", count, depth);
 						ptable = ConstructPTable(
-							GetFilePathFor(string.Format("{0}-{1}-indexv{2}.ptable", count, depth, _ptableVersion)),
+							GetFilePathFor($"{count}-{depth}-indexv{_ptableVersion}.ptable"),
 							count, rnd, depth);
 						ValidateCache(ptable.GetMidPoints(), count, depth);
 					} finally {
-						if (ptable != null) {
-							ptable.Dispose();
-						}
+						ptable?.Dispose();
 					}
 				}
 			}
diff --git a/src/EventStore.Core.Tests/Index/IndexV1/table_index_on_range_query.cs b/src/EventStore.Core.Tests/Index/IndexV1/table_index_on_range_query.cs
index e8676d74c..1639e0bbe 100644
--- a/src/EventStore.Core.Tests/Index/IndexV1/table_index_on_range_query.cs
+++ b/src/EventStore.Core.Tests/Index/IndexV1/table_index_on_range_query.cs
@@ -75,7 +75,7 @@ namespace EventStore.Core.Tests.Index.IndexV1 {
 			var res = _tableIndex.GetRange("0xJEEP", 0, 100).ToList();
 			ulong hash = (ulong)_lowHasher.Hash("0xJEEP");
 			hash = _ptableVersion == PTableVersions.IndexV1 ? hash : hash << 32 | _highHasher.Hash("0xJEEP");
-			Assert.That(res.Count(), Is.EqualTo(2));
+			Assert.That(res.Count, Is.EqualTo(2));
 			Assert.That(res[0].Stream, Is.EqualTo(hash));
 			Assert.That(res[0].Version, Is.EqualTo(1));
 			Assert.That(res[0].Position, Is.EqualTo(0xFF01));
@@ -89,7 +89,7 @@ namespace EventStore.Core.Tests.Index.IndexV1 {
 			var res = _tableIndex.GetRange("0xDEAD", 0, 100).ToList();
 			ulong hash = (ulong)_lowHasher.Hash("0xDEAD");
 			hash = _ptableVersion == PTableVersions.IndexV1 ? hash : hash << 32 | _highHasher.Hash("0xDEAD");
-			Assert.That(res.Count(), Is.EqualTo(4));
+			Assert.That(res.Count, Is.EqualTo(4));
 			Assert.That(res[0].Stream, Is.EqualTo(hash));
 			Assert.That(res[0].Version, Is.EqualTo(1));
 			Assert.That(res[0].Position, Is.EqualTo(0xFF11));
diff --git a/src/EventStore.Core.Tests/Index/IndexV1/table_index_on_try_get_one_value_query.cs b/src/EventStore.Core.Tests/Index/IndexV1/table_index_on_try_get_one_value_query.cs
index 3dfc75d7b..c6d1587b2 100644
--- a/src/EventStore.Core.Tests/Index/IndexV1/table_index_on_try_get_one_value_query.cs
+++ b/src/EventStore.Core.Tests/Index/IndexV1/table_index_on_try_get_one_value_query.cs
@@ -91,7 +91,7 @@ namespace EventStore.Core.Tests.Index.IndexV1 {
 			var res = _tableIndex.GetRange("0xADA", 0, 100).ToList();
 			ulong hash = (ulong)_lowHasher.Hash("0xADA");
 			hash = _ptableVersion == PTableVersions.IndexV1 ? hash : hash << 32 | _highHasher.Hash("0xADA");
-			Assert.That(res.Count(), Is.EqualTo(1));
+			Assert.That(res.Count, Is.EqualTo(1));
 			Assert.That(res[0].Stream, Is.EqualTo(hash));
 			Assert.That(res[0].Version, Is.EqualTo(0));
 			Assert.That(res[0].Position, Is.EqualTo(0xFF00));
diff --git a/src/EventStore.Core.Tests/Infrastructure/RandTestQueueItem.cs b/src/EventStore.Core.Tests/Infrastructure/RandTestQueueItem.cs
index d74e5ebcd..5d286832a 100644
--- a/src/EventStore.Core.Tests/Infrastructure/RandTestQueueItem.cs
+++ b/src/EventStore.Core.Tests/Infrastructure/RandTestQueueItem.cs
@@ -20,7 +20,7 @@ namespace EventStore.Core.Tests.Infrastructure {
 		}
 
 		public override string ToString() {
-			return string.Format("{0}-{1} :{2} to {3}", LogicalTime, GlobalId, Message, EndPoint.GetPort());
+			return $"{LogicalTime}-{GlobalId} :{Message} to {EndPoint.GetPort()}";
 		}
 	}
 }
diff --git a/src/EventStore.Core.Tests/Integration/when_a_leader_is_shutdown.cs b/src/EventStore.Core.Tests/Integration/when_a_leader_is_shutdown.cs
index 6177433d3..e36f2409e 100644
--- a/src/EventStore.Core.Tests/Integration/when_a_leader_is_shutdown.cs
+++ b/src/EventStore.Core.Tests/Integration/when_a_leader_is_shutdown.cs
@@ -61,14 +61,14 @@ namespace EventStore.Core.Tests.Integration {
 
 		[Test]
 		public void should_assign_leader_and_follower_roles_correctly() {
-			Assert.AreEqual(5, _roleAssignments.Count());
+			Assert.AreEqual(5, _roleAssignments.Count);
 
-			Assert.AreEqual(1, _roleAssignments.Take(3).Where(x => x.Equals("leader")).Count());
-			Assert.AreEqual(2, _roleAssignments.Take(3).Where(x => x.Equals("follower")).Count());
+			Assert.AreEqual(1, _roleAssignments.Take(3).Count(x => x.Equals("leader")));
+			Assert.AreEqual(2, _roleAssignments.Take(3).Count(x => x.Equals("follower")));
 
 			//after shutting down
-			Assert.AreEqual(1, _roleAssignments.Skip(3).Take(2).Where(x => x.Equals("leader")).Count());
-			Assert.AreEqual(1, _roleAssignments.Skip(3).Take(2).Where(x => x.Equals("follower")).Count());
+			Assert.AreEqual(1, _roleAssignments.Skip(3).Take(2).Count(x => x.Equals("leader")));
+			Assert.AreEqual(1, _roleAssignments.Skip(3).Take(2).Count(x => x.Equals("follower")));
 		}
 
 		[Test]
diff --git a/src/EventStore.Core.Tests/Services/ElectionsService/ClusterSettings.cs b/src/EventStore.Core.Tests/Services/ElectionsService/ClusterSettings.cs
index 4d52ba5de..9144eb9ca 100644
--- a/src/EventStore.Core.Tests/Services/ElectionsService/ClusterSettings.cs
+++ b/src/EventStore.Core.Tests/Services/ElectionsService/ClusterSettings.cs
@@ -20,7 +20,7 @@ namespace EventStore.Core.Tests.Services.ElectionsService {
 			ClusterVNodeSettings[] groupMembers,
 			int expectedNodesCount) {
 			if (string.IsNullOrWhiteSpace(clusterDns))
-				throw new ArgumentException(string.Format("Wrong cluster DNS name: {0}", clusterDns), clusterDns);
+				throw new ArgumentException($"Wrong cluster DNS name: {clusterDns}", clusterDns);
 			if (self == null)
 				throw new ArgumentNullException("self");
 			if (groupMembers == null)
diff --git a/src/EventStore.Core.Tests/Services/ElectionsService/ElectionServiceUnit.cs b/src/EventStore.Core.Tests/Services/ElectionsService/ElectionServiceUnit.cs
index 023e55df7..3503abfeb 100644
--- a/src/EventStore.Core.Tests/Services/ElectionsService/ElectionServiceUnit.cs
+++ b/src/EventStore.Core.Tests/Services/ElectionsService/ElectionServiceUnit.cs
@@ -103,7 +103,7 @@ namespace EventStore.Core.Tests.Services.ElectionsService {
 						Guid.Empty, 0, false)));
 
 			var ordered = members.OrderBy(x =>
-				string.Format("{0}:{1}", x.HttpEndPoint.ToString(), x.HttpEndPoint.GetPort()));
+				$"{x.HttpEndPoint.ToString()}:{x.HttpEndPoint.GetPort()}");
 
 			return new ClusterInfo(ordered.ToArray());
 		}
diff --git a/src/EventStore.Core.Tests/Services/ElectionsService/Randomized/ElectionsLogger.cs b/src/EventStore.Core.Tests/Services/ElectionsService/Randomized/ElectionsLogger.cs
index 6b9147085..ba88993a1 100644
--- a/src/EventStore.Core.Tests/Services/ElectionsService/Randomized/ElectionsLogger.cs
+++ b/src/EventStore.Core.Tests/Services/ElectionsService/Randomized/ElectionsLogger.cs
@@ -26,15 +26,13 @@ namespace EventStore.Core.Tests.Services.ElectionsService.Randomized {
 			foreach (var it in ProcessedItems) {
 				Console.WriteLine(it);
 
-				var gossip = it.Message as Messages.GossipMessage.GossipUpdated;
-				if (gossip != null) {
+				if (it.Message is Messages.GossipMessage.GossipUpdated gossip) {
 					Console.WriteLine("=== gsp on {0}", it.EndPoint);
 					Console.WriteLine(gossip.ClusterInfo.ToString().Replace("; ", Environment.NewLine));
 					Console.WriteLine("===");
 				}
 
-				var done = it.Message as Messages.ElectionMessage.ElectionsDone;
-				if (done != null) {
+				if (it.Message is Messages.ElectionMessage.ElectionsDone done) {
 					Console.WriteLine("=== leader on {0}: {1}", it.EndPoint, done.Leader);
 				}
 			}
diff --git a/src/EventStore.Core.Tests/Services/ElectionsService/Randomized/ElectionsProgressCondition.cs b/src/EventStore.Core.Tests/Services/ElectionsService/Randomized/ElectionsProgressCondition.cs
index 85d9200c1..0f2773525 100644
--- a/src/EventStore.Core.Tests/Services/ElectionsService/Randomized/ElectionsProgressCondition.cs
+++ b/src/EventStore.Core.Tests/Services/ElectionsService/Randomized/ElectionsProgressCondition.cs
@@ -29,8 +29,7 @@ namespace EventStore.Core.Tests.Services.ElectionsService.Randomized {
 		}
 
 		public virtual void Process(int iteration, RandTestQueueItem item) {
-			var msg = item.Message as ElectionMessage.ElectionsDone;
-			if (msg != null) {
+			if (item.Message is ElectionMessage.ElectionsDone msg) {
 				var leader = msg.Leader.HttpEndPoint;
 				ElectionsResults[item.EndPoint] = Tuple.Create(msg.InstalledView, leader);
 				Done = ElectionsResults.Values.Count(x => x.Item1 == msg.InstalledView) >= _majorityCount;
diff --git a/src/EventStore.Core.Tests/Services/ElectionsService/Randomized/ElectionsSafetyCondition.cs b/src/EventStore.Core.Tests/Services/ElectionsService/Randomized/ElectionsSafetyCondition.cs
index f72e8861f..609a270ec 100644
--- a/src/EventStore.Core.Tests/Services/ElectionsService/Randomized/ElectionsSafetyCondition.cs
+++ b/src/EventStore.Core.Tests/Services/ElectionsService/Randomized/ElectionsSafetyCondition.cs
@@ -27,8 +27,7 @@ namespace EventStore.Core.Tests.Services.ElectionsService.Randomized {
 		}
 
 		public void Process(int iteration, RandTestQueueItem item) {
-			var electionsMsg = item.Message as ElectionMessage.ElectionsDone;
-			if (electionsMsg != null) {
+			if (item.Message is ElectionMessage.ElectionsDone electionsMsg) {
 				_electionsResults[item.EndPoint] = electionsMsg.Leader.HttpEndPoint;
 				Done = _electionsResults.Count == _instancesCount;
 			}
diff --git a/src/EventStore.Core.Tests/Services/ElectionsService/Randomized/RandomizedElectionsTestCase.cs b/src/EventStore.Core.Tests/Services/ElectionsService/Randomized/RandomizedElectionsTestCase.cs
index 7e57765e3..8459aa38e 100644
--- a/src/EventStore.Core.Tests/Services/ElectionsService/Randomized/RandomizedElectionsTestCase.cs
+++ b/src/EventStore.Core.Tests/Services/ElectionsService/Randomized/RandomizedElectionsTestCase.cs
@@ -65,8 +65,8 @@ namespace EventStore.Core.Tests.Services.ElectionsService.Randomized {
 			var sendOverHttpHandler = GetSendOverHttpProcessor();
 
 			for (int i = 0; i < InstancesCnt; ++i) {
-				var inputBus = new InMemoryBus(string.Format("ELECTIONS-INPUT-BUS-{0}", i));
-				var outputBus = new InMemoryBus(string.Format("ELECTIONS-OUTPUT-BUS-{0}", i));
+				var inputBus = new InMemoryBus($"ELECTIONS-INPUT-BUS-{i}");
+				var outputBus = new InMemoryBus($"ELECTIONS-OUTPUT-BUS-{i}");
 				var endPoint = new IPEndPoint(BaseEndPoint.Address, BaseEndPoint.Port + i);
 				var memberInfo = MemberInfo.Initial(Guid.NewGuid(), DateTime.UtcNow, VNodeState.Unknown, true,
 					endPoint, endPoint, endPoint, endPoint, endPoint, null, 0, 0, 0, false);
diff --git a/src/EventStore.Core.Tests/Services/ElectionsService/Randomized/SendOverGrpcProcessor.cs b/src/EventStore.Core.Tests/Services/ElectionsService/Randomized/SendOverGrpcProcessor.cs
index 518ca6c9e..6dccb1d0d 100644
--- a/src/EventStore.Core.Tests/Services/ElectionsService/Randomized/SendOverGrpcProcessor.cs
+++ b/src/EventStore.Core.Tests/Services/ElectionsService/Randomized/SendOverGrpcProcessor.cs
@@ -42,8 +42,7 @@ namespace EventStore.Core.Tests.Services.ElectionsService.Randomized {
 
 			IPublisher publisher;
 			if (!_httpBuses.TryGetValue(message.DestinationEndpoint, out publisher))
-				throw new InvalidOperationException(string.Format("No HTTP bus subscribed for EndPoint: {0}.",
-					message.DestinationEndpoint));
+				throw new InvalidOperationException($"No HTTP bus subscribed for EndPoint: {message.DestinationEndpoint}.");
 
 			_runner.Enqueue(message.DestinationEndpoint, message.Message, publisher, 1 + _rnd.Next(_maxDelay));
 
diff --git a/src/EventStore.Core.Tests/Services/ElectionsService/Randomized/UpdateGossipProcessor.cs b/src/EventStore.Core.Tests/Services/ElectionsService/Randomized/UpdateGossipProcessor.cs
index e3a2123e1..7d23362ca 100644
--- a/src/EventStore.Core.Tests/Services/ElectionsService/Randomized/UpdateGossipProcessor.cs
+++ b/src/EventStore.Core.Tests/Services/ElectionsService/Randomized/UpdateGossipProcessor.cs
@@ -43,8 +43,7 @@ namespace EventStore.Core.Tests.Services.ElectionsService.Randomized {
 		public IEnumerable<RandTestQueueItem> ProcessedItems { get; private set; }
 
 		public void Process(int iteration, RandTestQueueItem item) {
-			var electionsDone = item.Message as ElectionMessage.ElectionsDone;
-			if (electionsDone != null) {
+			if (item.Message is ElectionMessage.ElectionsDone electionsDone) {
 				MemberInfo[] previousMembers;
 				if (_previousGossip.TryGetValue(item.EndPoint, out previousMembers)) {
 					var leaderIndex = Array.FindIndex(previousMembers,
diff --git a/src/EventStore.Core.Tests/Services/PersistentSubscription/OutstandingMessageCacheTests.cs b/src/EventStore.Core.Tests/Services/PersistentSubscription/OutstandingMessageCacheTests.cs
index 7cc090e81..08b067561 100644
--- a/src/EventStore.Core.Tests/Services/PersistentSubscription/OutstandingMessageCacheTests.cs
+++ b/src/EventStore.Core.Tests/Services/PersistentSubscription/OutstandingMessageCacheTests.cs
@@ -127,7 +127,7 @@ namespace EventStore.Core.Tests.Services.PersistentSubscription {
 			cache.StartMessage(new OutstandingMessage(id, null, Helper.BuildFakeEvent(id, "type", "name", 0), 0),
 				DateTime.Now.AddSeconds(-1));
 			var expired = cache.GetMessagesExpiringBefore(DateTime.Now).ToList();
-			Assert.AreEqual(1, expired.Count());
+			Assert.AreEqual(1, expired.Count);
 			Assert.AreEqual(id, expired.FirstOrDefault().EventId);
 		}
 
@@ -141,7 +141,7 @@ namespace EventStore.Core.Tests.Services.PersistentSubscription {
 				new OutstandingMessage(Guid.NewGuid(), null, Helper.BuildFakeEvent(Guid.NewGuid(), "type", "name", 1),
 					0), DateTime.Now.AddSeconds(1));
 			var expired = cache.GetMessagesExpiringBefore(DateTime.Now).ToList();
-			Assert.AreEqual(1, expired.Count());
+			Assert.AreEqual(1, expired.Count);
 			Assert.AreEqual(id, expired.FirstOrDefault().EventId);
 		}
 
@@ -211,7 +211,7 @@ namespace EventStore.Core.Tests.Services.PersistentSubscription {
 			cache.StartMessage(new OutstandingMessage(id, null, Helper.BuildFakeEvent(id, "type", "name", 0), 0),
 				DateTime.Now.AddSeconds(1));
 			var expired = cache.GetMessagesExpiringBefore(DateTime.Now).ToList();
-			Assert.AreEqual(0, expired.Count());
+			Assert.AreEqual(0, expired.Count);
 		}
 	}
 }
diff --git a/src/EventStore.Core.Tests/Services/PersistentSubscription/PersistentSubscriptionTests.cs b/src/EventStore.Core.Tests/Services/PersistentSubscription/PersistentSubscriptionTests.cs
index ef6cfef99..543491ffe 100644
--- a/src/EventStore.Core.Tests/Services/PersistentSubscription/PersistentSubscriptionTests.cs
+++ b/src/EventStore.Core.Tests/Services/PersistentSubscription/PersistentSubscriptionTests.cs
@@ -1729,7 +1729,7 @@ namespace EventStore.Core.Tests.Services.PersistentSubscription {
 			bool resolved = true) {
 			var link = new EventRecord(version, 1234567, Guid.NewGuid(), id, 1234567, 1234, stream, version,
 				DateTime.UtcNow, PrepareFlags.SingleWrite, SystemEventTypes.LinkTo,
-				Encoding.UTF8.GetBytes(string.Format("{0}@{1}", ev.OriginalEventNumber, ev.OriginalStreamId)),
+				Encoding.UTF8.GetBytes($"{ev.OriginalEventNumber}@{ev.OriginalStreamId}"),
 				new byte[0]);
 			if (resolved)
 				return ResolvedEvent.ForResolvedLink(ev.Event, link);
diff --git a/src/EventStore.Core.Tests/Services/Transport/Http/Authorization/authorization_tests.cs b/src/EventStore.Core.Tests/Services/Transport/Http/Authorization/authorization_tests.cs
index cb6b4ae49..1c57904c4 100644
--- a/src/EventStore.Core.Tests/Services/Transport/Http/Authorization/authorization_tests.cs
+++ b/src/EventStore.Core.Tests/Services/Transport/Http/Authorization/authorization_tests.cs
@@ -92,14 +92,14 @@ namespace EventStore.Core.Tests.Services.Transport.Http {
 					content.Headers.Add("Content-Type", "application/json");
 
 					var res = await _httpClients["Admin"].PostAsync(
-						string.Format("https://{0}/users/", _nodes[_leaderId].HttpEndPoint),
+						$"https://{_nodes[_leaderId].HttpEndPoint}/users/",
 						content
 					);
 					res.EnsureSuccessStatusCode();
 					break;
 				} catch (HttpRequestException) {
 					if (trial == 5) {
-						throw new Exception(string.Format("Error creating user: {0}", username));
+						throw new Exception($"Error creating user: {username}");
 					}
 					await Task.Delay(1000);
 				}
diff --git a/src/EventStore.Core.Tests/Services/Transport/Http/auto_convertion.cs b/src/EventStore.Core.Tests/Services/Transport/Http/auto_convertion.cs
index 812e84100..254c4d9e6 100644
--- a/src/EventStore.Core.Tests/Services/Transport/Http/auto_convertion.cs
+++ b/src/EventStore.Core.Tests/Services/Transport/Http/auto_convertion.cs
@@ -58,10 +58,7 @@ namespace EventStore.Core.Tests.Services.Transport.Http {
 		}
 
 		public static string GetJsonWrite(params Tuple<string, string>[] events) {
-			return string.Format("[{0}]",
-				string.Join(",", events.Select(x =>
-					string.Format(JsonEventWriteFormat, string.Format("\"{0}\"", Guid.NewGuid()), "\"type\"", x.Item1,
-						x.Item2))));
+			return $"[{string.Join(",", events.Select(x => string.Format(JsonEventWriteFormat, string.Format("\"{0}\"", Guid.NewGuid()), "\"type\"", x.Item1, x.Item2)))}]";
 		}
 
 		public static string
@@ -77,8 +74,7 @@ namespace EventStore.Core.Tests.Services.Transport.Http {
 
 		public static string GetJsonEventsReadResult(IEnumerable<ResolvedEvent> events, bool dataJson = true,
 			bool metadataJson = true) {
-			return string.Format("[{0}]",
-				string.Join(",", events.Select(x => GetJsonEventReadResult(x, dataJson, metadataJson))));
+			return $"[{string.Join(",", events.Select(x => GetJsonEventReadResult(x, dataJson, metadataJson)))}]";
 		}
 
 		public static string GetXmlWrite(string data, string metadata) {
@@ -86,9 +82,7 @@ namespace EventStore.Core.Tests.Services.Transport.Http {
 		}
 
 		public static string GetXmlWrite(params Tuple<string, string>[] events) {
-			return string.Format("<events>{0}</events>",
-				string.Join("\n", events.Select(x =>
-					string.Format(XmlEventWriteFormat, Guid.NewGuid(), "type", x.Item1, x.Item2))));
+			return $"<events>{string.Join("\n", events.Select(x => string.Format(XmlEventWriteFormat, Guid.NewGuid(), "type", x.Item1, x.Item2)))}</events>";
 		}
 
 		public static string GetXmlEventReadResult(ResolvedEvent evnt, bool dataJson = true, bool metadataJson = true) {
@@ -103,8 +97,7 @@ namespace EventStore.Core.Tests.Services.Transport.Http {
 
 		public static string GetXmlEventsReadResult(IEnumerable<ResolvedEvent> events, bool dataJson = true,
 			bool metadataJson = true) {
-			return string.Format("<events>{0}</events>",
-				string.Join("\n", events.Select(x => GetXmlEventReadResult(x, dataJson, metadataJson))));
+			return $"<events>{string.Join("\n", events.Select(x => GetXmlEventReadResult(x, dataJson, metadataJson)))}</events>";
 		}
 
 		public static string AsString(byte[] bytes) {
@@ -116,7 +109,7 @@ namespace EventStore.Core.Tests.Services.Transport.Http {
 		}
 
 		private static string WrapIntoQuotes(string s) {
-			return string.Format("\"{0}\"", s);
+			return $"\"{s}\"";
 		}
 	}
 
diff --git a/src/EventStore.Core.Tests/Services/Transport/Http/http_service_should.cs b/src/EventStore.Core.Tests/Services/Transport/Http/http_service_should.cs
index dcb9c5c79..b0b884e98 100644
--- a/src/EventStore.Core.Tests/Services/Transport/Http/http_service_should.cs
+++ b/src/EventStore.Core.Tests/Services/Transport/Http/http_service_should.cs
@@ -159,7 +159,7 @@ namespace EventStore.Core.Tests.Services.Transport.Http {
 		public void should_throw_an_exception() {
 			var sleepFor = _timeout + 1000;
 			var url = _serverEndPoint.ToHttpUrl(EndpointExtensions.HTTP_SCHEMA,
-				string.Format("/test-timeout?sleepfor={0}", sleepFor));
+				$"/test-timeout?sleepfor={sleepFor}");
 			Func<HttpResponse, bool> verifier = response => { return true; };
 			var result = _portableServer.StartServiceAndSendRequest(url, verifier);
 			Assert.IsFalse(result.Item1, "Should not have got a response"); // We should not have got a response
diff --git a/src/EventStore.Core.Tests/Services/Transport/Tcp/TcpClientDispatcherTests.cs b/src/EventStore.Core.Tests/Services/Transport/Tcp/TcpClientDispatcherTests.cs
index 6adbc46f6..336253ed0 100644
--- a/src/EventStore.Core.Tests/Services/Transport/Tcp/TcpClientDispatcherTests.cs
+++ b/src/EventStore.Core.Tests/Services/Transport/Tcp/TcpClientDispatcherTests.cs
@@ -495,7 +495,7 @@ namespace EventStore.Core.Tests.Services.Transport.Tcp {
 		private EventRecord CreateLinkEventRecord() {
 			return new EventRecord(0, LogRecord.Prepare(100, Guid.NewGuid(), Guid.NewGuid(), 0, 0,
 				"link-stream", -1, PrepareFlags.SingleWrite | PrepareFlags.Data, SystemEventTypes.LinkTo,
-				Encoding.UTF8.GetBytes(string.Format("{0}@test-stream", long.MaxValue)), new byte[0]));
+				Encoding.UTF8.GetBytes($"{long.MaxValue}@test-stream"), new byte[0]));
 		}
 	}
 }
diff --git a/src/EventStore.Core.Tests/SpecificationWithDirectory.cs b/src/EventStore.Core.Tests/SpecificationWithDirectory.cs
index e539499eb..7a0091fe2 100644
--- a/src/EventStore.Core.Tests/SpecificationWithDirectory.cs
+++ b/src/EventStore.Core.Tests/SpecificationWithDirectory.cs
@@ -8,7 +8,7 @@ namespace EventStore.Core.Tests {
 		protected string PathName;
 
 		protected string GetTempFilePath() {
-			return Path.Combine(PathName, string.Format("{0}-{1}", Guid.NewGuid(), GetType().FullName));
+			return Path.Combine(PathName, $"{Guid.NewGuid()}-{GetType().FullName}");
 		}
 
 		protected string GetFilePathFor(string fileName) {
@@ -18,7 +18,7 @@ namespace EventStore.Core.Tests {
 		[SetUp]
 		public virtual Task SetUp() {
 			var typeName = GetType().Name.Length > 30 ? GetType().Name.Substring(0, 30) : GetType().Name;
-			PathName = Path.Combine(Path.GetTempPath(), string.Format("{0}-{1}", Guid.NewGuid(), typeName));
+			PathName = Path.Combine(Path.GetTempPath(), $"{Guid.NewGuid()}-{typeName}");
 			Directory.CreateDirectory(PathName);
 
 			return Task.CompletedTask;
diff --git a/src/EventStore.Core.Tests/SpecificationWithDirectoryPerTestFixture.cs b/src/EventStore.Core.Tests/SpecificationWithDirectoryPerTestFixture.cs
index fbfb349f6..3d7f5d4ef 100644
--- a/src/EventStore.Core.Tests/SpecificationWithDirectoryPerTestFixture.cs
+++ b/src/EventStore.Core.Tests/SpecificationWithDirectoryPerTestFixture.cs
@@ -10,7 +10,7 @@ namespace EventStore.Core.Tests {
 
 		protected string GetTempFilePath() {
 			var typeName = GetType().Name.Length > 30 ? GetType().Name.Substring(0, 30) : GetType().Name;
-			return Path.Combine(PathName, string.Format("{0}-{1}", Guid.NewGuid(), typeName));
+			return Path.Combine(PathName, $"{Guid.NewGuid()}-{typeName}");
 		}
 
 		protected string GetFilePathFor(string fileName) {
@@ -21,7 +21,7 @@ namespace EventStore.Core.Tests {
 		public virtual Task TestFixtureSetUp() {
 			ThreadPool.SetMinThreads(100, 1000);
 			var typeName = GetType().Name.Length > 30 ? GetType().Name.Substring(0, 30) : GetType().Name;
-			PathName = Path.Combine(Path.GetTempPath(), string.Format("{0}-{1}", Guid.NewGuid(), typeName));
+			PathName = Path.Combine(Path.GetTempPath(), $"{Guid.NewGuid()}-{typeName}");
 			Directory.CreateDirectory(PathName);
 
 			return Task.CompletedTask;
diff --git a/src/EventStore.Core.Tests/SpecificationWithFile.cs b/src/EventStore.Core.Tests/SpecificationWithFile.cs
index 7bd312ab7..d0505479b 100644
--- a/src/EventStore.Core.Tests/SpecificationWithFile.cs
+++ b/src/EventStore.Core.Tests/SpecificationWithFile.cs
@@ -9,7 +9,7 @@ namespace EventStore.Core.Tests {
 		[SetUp]
 		public virtual void SetUp() {
 			var typeName = GetType().Name.Length > 30 ? GetType().Name.Substring(0, 30) : GetType().Name;
-			Filename = Path.Combine(Path.GetTempPath(), string.Format("{0}-{1}", Guid.NewGuid(), typeName));
+			Filename = Path.Combine(Path.GetTempPath(), $"{Guid.NewGuid()}-{typeName}");
 		}
 
 		[TearDown]
diff --git a/src/EventStore.Core.Tests/SpecificationWithFilePerTestFixture.cs b/src/EventStore.Core.Tests/SpecificationWithFilePerTestFixture.cs
index 88e324b88..d69764c77 100644
--- a/src/EventStore.Core.Tests/SpecificationWithFilePerTestFixture.cs
+++ b/src/EventStore.Core.Tests/SpecificationWithFilePerTestFixture.cs
@@ -9,7 +9,7 @@ namespace EventStore.Core.Tests {
 		[OneTimeSetUp]
 		public virtual void TestFixtureSetUp() {
 			var typeName = GetType().Name.Length > 30 ? GetType().Name.Substring(0, 30) : GetType().Name;
-			Filename = Path.Combine(Path.GetTempPath(), string.Format("{0}-{1}", Guid.NewGuid(), typeName));
+			Filename = Path.Combine(Path.GetTempPath(), $"{Guid.NewGuid()}-{typeName}");
 		}
 
 		[OneTimeTearDown]
diff --git a/src/EventStore.Core.Tests/TestsInitFixture.cs b/src/EventStore.Core.Tests/TestsInitFixture.cs
index 3760d5d47..661ada3a3 100644
--- a/src/EventStore.Core.Tests/TestsInitFixture.cs
+++ b/src/EventStore.Core.Tests/TestsInitFixture.cs
@@ -27,7 +27,7 @@ namespace EventStore.Core.Tests {
 				"GC:",
 				GC.MaxGeneration == 0
 					? "NON-GENERATION (PROBABLY BOEHM)"
-					: string.Format("{0} GENERATIONS", GC.MaxGeneration + 1));
+					: $"{GC.MaxGeneration + 1} GENERATIONS");
 		}
 
 		[OneTimeTearDown]
diff --git a/src/EventStore.Core.Tests/TransactionLog/Scavenging/Helpers/TFChunkDbCreationHelper.cs b/src/EventStore.Core.Tests/TransactionLog/Scavenging/Helpers/TFChunkDbCreationHelper.cs
index 1480c2afb..a0728e0d8 100644
--- a/src/EventStore.Core.Tests/TransactionLog/Scavenging/Helpers/TFChunkDbCreationHelper.cs
+++ b/src/EventStore.Core.Tests/TransactionLog/Scavenging/Helpers/TFChunkDbCreationHelper.cs
@@ -62,14 +62,11 @@ namespace EventStore.Core.Tests.TransactionLog.Scavenging.Helpers {
 						streamUncommitedVersion[rec.StreamId] = -1;
 					} else {
 						if (rec.Type == Rec.RecType.TransStart)
-							throw new Exception(string.Format("Unexpected record type: {0}.", rec.Type));
+							throw new Exception($"Unexpected record type: {rec.Type}.");
 					}
 
 					if (transInfo.StreamId != rec.StreamId) {
-						throw new Exception(string.Format(
-							"Wrong stream id for transaction. Transaction StreamId: {0}, record StreamId: {1}.",
-							transInfo.StreamId,
-							rec.StreamId));
+						throw new Exception($"Wrong stream id for transaction. Transaction StreamId: {transInfo.StreamId}, record StreamId: {rec.StreamId}.");
 					}
 
 					if (rec.Type != Rec.RecType.Commit && transInfo.IsDelete)
@@ -96,12 +93,11 @@ namespace EventStore.Core.Tests.TransactionLog.Scavenging.Helpers {
 					    && rec.Type != Rec.RecType.TransStart
 					    && rec.Type != Rec.RecType.Prepare
 					    && rec.Type != Rec.RecType.Delete) {
-						throw new Exception(string.Format("Stream {0} is empty.", rec.StreamId));
+						throw new Exception($"Stream {rec.StreamId} is empty.");
 					}
 
 					if (streamVersion == EventNumber.DeletedStream && rec.Type != Rec.RecType.Commit)
-						throw new Exception(string.Format(
-							"Stream {0} was deleted, but we need to write some more prepares.", rec.StreamId));
+						throw new Exception($"Stream {rec.StreamId} was deleted, but we need to write some more prepares.");
 
 					if (transInfo.FirstPrepareId == rec.Id) {
 						transInfo.TransactionPosition = logPos;
@@ -160,7 +156,7 @@ namespace EventStore.Core.Tests.TransactionLog.Scavenging.Helpers {
 
 					var writerRes = chunk.TryAppend(record);
 					if (!writerRes.Success)
-						throw new Exception(string.Format("Could not write log record: {0}", record));
+						throw new Exception($"Could not write log record: {record}");
 					_db.Config.WriterCheckpoint.Write(i * (long)_db.Config.ChunkSize + writerRes.NewPosition);
 
 					records[i][j] = record;
diff --git a/src/EventStore.Core.Tests/TransactionLog/when_having_scavenged_tfchunk_with_all_records_removed.cs b/src/EventStore.Core.Tests/TransactionLog/when_having_scavenged_tfchunk_with_all_records_removed.cs
index 0099a6d12..03281b397 100644
--- a/src/EventStore.Core.Tests/TransactionLog/when_having_scavenged_tfchunk_with_all_records_removed.cs
+++ b/src/EventStore.Core.Tests/TransactionLog/when_having_scavenged_tfchunk_with_all_records_removed.cs
@@ -149,8 +149,7 @@ namespace EventStore.Core.Tests.TransactionLog {
 		[Test]
 		public void scavenged_chunk_should_have_saved_space() {
 			Assert.IsTrue(_scavengedChunk.FileSize < _originalFileSize,
-				String.Format("Expected scavenged file size ({0}) to be less than original file size ({1})",
-					_scavengedChunk.FileSize, _originalFileSize));
+				$"Expected scavenged file size ({_scavengedChunk.FileSize}) to be less than original file size ({_originalFileSize})");
 		}
 
 		[Test]
diff --git a/src/EventStore.Core/Authentication/InternalAuthentication/UserManagementService.cs b/src/EventStore.Core/Authentication/InternalAuthentication/UserManagementService.cs
index 575eb47ba..3cc2dc22e 100644
--- a/src/EventStore.Core/Authentication/InternalAuthentication/UserManagementService.cs
+++ b/src/EventStore.Core/Authentication/InternalAuthentication/UserManagementService.cs
@@ -61,7 +61,7 @@ namespace EventStore.Core.Authentication.InternalAuthentication {
 
 			var userData = CreateUserData(message);
 			BeginReadUserDetails(message.LoginName, read => {
-				if (read.Events.Count() > 0) {
+				if (read.Events.Any()) {
 					var data = read.Events[read.Events.Length - 1].Event.Data.ParseJson<UserData>();
 					if (VerifyPassword(message.Password, data)) {
 						ReplyUpdated(message);
diff --git a/src/EventStore.Core/Bus/InMemoryBus.cs b/src/EventStore.Core/Bus/InMemoryBus.cs
index be84513c8..919020566 100644
--- a/src/EventStore.Core/Bus/InMemoryBus.cs
+++ b/src/EventStore.Core/Bus/InMemoryBus.cs
@@ -146,7 +146,7 @@ namespace EventStore.Core.Bus {
 
 				List<Type> descendants;
 				if (!MessageHierarchy.Descendants.TryGetValue(typeof(T), out descendants))
-					throw new Exception(string.Format("No descendants for message of type '{0}'.", typeof(T).Name));
+					throw new Exception($"No descendants for message of type '{typeof(T).Name}'.");
 
 				foreach (var descendant in descendants) {
 					List<IMessageHandler> handlers;
@@ -167,7 +167,7 @@ namespace EventStore.Core.Bus {
 
 				List<Type> descendants;
 				if (!MessageHierarchy.Descendants.TryGetValue(typeof(T), out descendants))
-					throw new Exception(string.Format("No descendants for message of type '{0}'.", typeof(T).Name));
+					throw new Exception($"No descendants for message of type '{typeof(T).Name}'.");
 
 				foreach (var descendant in descendants) {
 					List<IMessageHandler> handlers;
diff --git a/src/EventStore.Core/Bus/MessageHandler.cs b/src/EventStore.Core/Bus/MessageHandler.cs
index 0c9ac3a10..648c97961 100644
--- a/src/EventStore.Core/Bus/MessageHandler.cs
+++ b/src/EventStore.Core/Bus/MessageHandler.cs
@@ -21,8 +21,7 @@ namespace EventStore.Core.Bus {
 		}
 
 		public bool TryHandle(Message message) {
-			var msg = message as T;
-			if (msg != null) {
+			if (message is T msg) {
 				_handler.Handle(msg);
 				return true;
 			}
diff --git a/src/EventStore.Core/Bus/QueueStatsCollector.cs b/src/EventStore.Core/Bus/QueueStatsCollector.cs
index a1f3cf9b8..716178168 100644
--- a/src/EventStore.Core/Bus/QueueStatsCollector.cs
+++ b/src/EventStore.Core/Bus/QueueStatsCollector.cs
@@ -54,9 +54,9 @@ namespace EventStore.Core.Bus {
 			_totalTimeWatch.Start();
 #if DEBUG
 			Debug.Assert(!_started,
-				string.Format("QueueStatsCollector [{0}] was already started when Start() entered", Name));
+				$"QueueStatsCollector [{Name}] was already started when Start() entered");
 			Debug.Assert(!_stopped,
-				string.Format("QueueStatsCollector [{0}] was stopped when Start() entered", Name));
+				$"QueueStatsCollector [{Name}] was stopped when Start() entered");
 			_started = true;
 #endif
 			EnterIdle();
@@ -65,9 +65,9 @@ namespace EventStore.Core.Bus {
 		public void Stop() {
 #if DEBUG
 			Debug.Assert(_started,
-				string.Format("QueueStatsCollector [{0}] was not started when Stop() entered", Name));
+				$"QueueStatsCollector [{Name}] was not started when Stop() entered");
 			Debug.Assert(!_stopped,
-				string.Format("QueueStatsCollector [{0}] was already stopped when Stop() entered", Name));
+				$"QueueStatsCollector [{Name}] was already stopped when Stop() entered");
 #endif
 			EnterIdle();
 			_totalTimeWatch.Stop();
@@ -96,7 +96,7 @@ namespace EventStore.Core.Bus {
 		public void EnterIdle() {
 #if DEBUG
 			Debug.Assert(_started,
-				string.Format("QueueStatsCollector [{0}] was not started when EnterIdle() entered", Name));
+				$"QueueStatsCollector [{Name}] was not started when EnterIdle() entered");
 #endif
 			if (_wasIdle)
 				return;
@@ -116,7 +116,7 @@ namespace EventStore.Core.Bus {
 		public void EnterBusy() {
 #if DEBUG
 			Debug.Assert(_started,
-				string.Format("QueueStatsCollector [{0}] was not started when EnterBusy() entered", Name));
+				$"QueueStatsCollector [{Name}] was not started when EnterBusy() entered");
 #endif
 			if (!_wasIdle)
 				return;
@@ -187,9 +187,9 @@ namespace EventStore.Core.Bus {
 		public void Dequeued(Message msg) {
 #if DEBUG
 			Debug.Assert(_started,
-				string.Format("QueueStatsCollector [{0}] was not started when Dequeued() entered", Name));
+				$"QueueStatsCollector [{Name}] was not started when Dequeued() entered");
 			Debug.Assert(!_stopped,
-				string.Format("QueueStatsCollector [{0}] was stopped when Dequeued() entered", Name));
+				$"QueueStatsCollector [{Name}] was stopped when Dequeued() entered");
 			Interlocked.Decrement(ref _length);
 #endif
 		}
diff --git a/src/EventStore.Core/Bus/QueuedHandlerAutoReset.cs b/src/EventStore.Core/Bus/QueuedHandlerAutoReset.cs
index 47ba59356..a7f9c4137 100644
--- a/src/EventStore.Core/Bus/QueuedHandlerAutoReset.cs
+++ b/src/EventStore.Core/Bus/QueuedHandlerAutoReset.cs
@@ -81,7 +81,7 @@ namespace EventStore.Core.Bus {
 		public void Stop() {
 			_stop = true;
 			if (!_stopped.Wait(_threadStopWaitTimeout))
-				throw new TimeoutException(string.Format("Unable to stop thread '{0}'.", Name));
+				throw new TimeoutException($"Unable to stop thread '{Name}'.");
 		}
 
 		public void RequestStop() {
diff --git a/src/EventStore.Core/Bus/QueuedHandlerAutoResetWithMPSC.cs b/src/EventStore.Core/Bus/QueuedHandlerAutoResetWithMPSC.cs
index e00698815..760f2f906 100644
--- a/src/EventStore.Core/Bus/QueuedHandlerAutoResetWithMPSC.cs
+++ b/src/EventStore.Core/Bus/QueuedHandlerAutoResetWithMPSC.cs
@@ -78,7 +78,7 @@ namespace EventStore.Core.Bus {
 		public void Stop() {
 			_stop = true;
 			if (!_stopped.Wait(_threadStopWaitTimeout))
-				throw new TimeoutException(string.Format("Unable to stop thread '{0}'.", Name));
+				throw new TimeoutException($"Unable to stop thread '{Name}'.");
 		}
 
 		public void RequestStop() {
diff --git a/src/EventStore.Core/Bus/QueuedHandlerMRES.cs b/src/EventStore.Core/Bus/QueuedHandlerMRES.cs
index 27c9b2e85..dcba82d56 100644
--- a/src/EventStore.Core/Bus/QueuedHandlerMRES.cs
+++ b/src/EventStore.Core/Bus/QueuedHandlerMRES.cs
@@ -81,7 +81,7 @@ namespace EventStore.Core.Bus {
 		public void Stop() {
 			_stop = true;
 			if (!_stopped.Wait(_threadStopWaitTimeout))
-				throw new TimeoutException(string.Format("Unable to stop thread '{0}'.", Name));
+				throw new TimeoutException($"Unable to stop thread '{Name}'.");
 		}
 
 		public void RequestStop() {
diff --git a/src/EventStore.Core/Bus/QueuedHandlerMRESWithMPSC.cs b/src/EventStore.Core/Bus/QueuedHandlerMRESWithMPSC.cs
index 0d4c9246d..19181e05b 100644
--- a/src/EventStore.Core/Bus/QueuedHandlerMRESWithMPSC.cs
+++ b/src/EventStore.Core/Bus/QueuedHandlerMRESWithMPSC.cs
@@ -77,7 +77,7 @@ namespace EventStore.Core.Bus {
 		public void Stop() {
 			_stop = true;
 			if (!_stopped.Wait(_threadStopWaitTimeout))
-				throw new TimeoutException(string.Format("Unable to stop thread '{0}'.", Name));
+				throw new TimeoutException($"Unable to stop thread '{Name}'.");
 		}
 
 		public void RequestStop() {
diff --git a/src/EventStore.Core/Bus/QueuedHandlerPulse.cs b/src/EventStore.Core/Bus/QueuedHandlerPulse.cs
index a9bce63a0..85f235935 100644
--- a/src/EventStore.Core/Bus/QueuedHandlerPulse.cs
+++ b/src/EventStore.Core/Bus/QueuedHandlerPulse.cs
@@ -82,7 +82,7 @@ namespace EventStore.Core.Bus {
 		public void Stop() {
 			_stop = true;
 			if (!_stopped.Wait(_threadStopWaitTimeout))
-				throw new TimeoutException(string.Format("Unable to stop thread '{0}'.", Name));
+				throw new TimeoutException($"Unable to stop thread '{Name}'.");
 		}
 
 		public void RequestStop() {
diff --git a/src/EventStore.Core/Bus/QueuedHandlerSleep.cs b/src/EventStore.Core/Bus/QueuedHandlerSleep.cs
index 792c90944..e1546ce24 100644
--- a/src/EventStore.Core/Bus/QueuedHandlerSleep.cs
+++ b/src/EventStore.Core/Bus/QueuedHandlerSleep.cs
@@ -79,7 +79,7 @@ namespace EventStore.Core.Bus {
 		public void Stop() {
 			_stop = true;
 			if (!_stopped.Wait(_threadStopWaitTimeout))
-				throw new TimeoutException(string.Format("Unable to stop thread '{0}'.", Name));
+				throw new TimeoutException($"Unable to stop thread '{Name}'.");
 		}
 
 		public void RequestStop() {
diff --git a/src/EventStore.Core/Bus/QueuedHandlerThreadPool.cs b/src/EventStore.Core/Bus/QueuedHandlerThreadPool.cs
index 2b5c291a2..b4484e6d6 100644
--- a/src/EventStore.Core/Bus/QueuedHandlerThreadPool.cs
+++ b/src/EventStore.Core/Bus/QueuedHandlerThreadPool.cs
@@ -75,7 +75,7 @@ namespace EventStore.Core.Bus {
 		public void Stop() {
 			_stop = true;
 			if (!_stopped.Wait(_threadStopWaitTimeout))
-				throw new TimeoutException(string.Format("Unable to stop thread '{0}'.", Name));
+				throw new TimeoutException($"Unable to stop thread '{Name}'.");
 			TryStopQueueStats();
 			_queueMonitor.Unregister(this);
 		}
diff --git a/src/EventStore.Core/Bus/WideningHandler.cs b/src/EventStore.Core/Bus/WideningHandler.cs
index 91ad6a433..d841568a3 100644
--- a/src/EventStore.Core/Bus/WideningHandler.cs
+++ b/src/EventStore.Core/Bus/WideningHandler.cs
@@ -15,7 +15,7 @@ namespace EventStore.Core.Bus {
 		}
 
 		public override string ToString() {
-			return string.Format("WideningHandler<{0}, {1}>({2})", typeof(TInput).Name, typeof(TOutput).Name, _handler);
+			return $"WideningHandler<{typeof(TInput).Name}, {typeof(TOutput).Name}>({_handler})";
 		}
 	}
 }
diff --git a/src/EventStore.Core/CertificateLoader.cs b/src/EventStore.Core/CertificateLoader.cs
index 5d95dafa8..47e2bebd6 100644
--- a/src/EventStore.Core/CertificateLoader.cs
+++ b/src/EventStore.Core/CertificateLoader.cs
@@ -53,20 +53,17 @@ namespace EventStore.Core {
 				store.Open(OpenFlags.OpenExistingOnly);
 			} catch (Exception exc) {
 				throw new Exception(
-					string.Format("Could not open certificate store '{0}' in location {1}'.", store.Name,
-						store.Location), exc);
+					$"Could not open certificate store '{store.Name}' in location {store.Location}'.", exc);
 			}
 
 			if (!string.IsNullOrWhiteSpace(certificateThumbprint)) {
 				var certificates = store.Certificates.Find(X509FindType.FindByThumbprint, certificateThumbprint, true);
 				if (certificates.Count == 0)
-					throw new Exception(string.Format("Could not find valid certificate with thumbprint '{0}'.",
-						certificateThumbprint));
+					throw new Exception($"Could not find valid certificate with thumbprint '{certificateThumbprint}'.");
 
 				//Can this even happen?
 				if (certificates.Count > 1)
-					throw new Exception(string.Format("Could not determine a unique certificate from thumbprint '{0}'.",
-						certificateThumbprint));
+					throw new Exception($"Could not determine a unique certificate from thumbprint '{certificateThumbprint}'.");
 
 				return certificates[0];
 			}
@@ -75,13 +72,11 @@ namespace EventStore.Core {
 				var certificates =
 					store.Certificates.Find(X509FindType.FindBySubjectName, certificateSubjectName, true);
 				if (certificates.Count == 0)
-					throw new Exception(string.Format("Could not find valid certificate with subject name '{0}'.",
-						certificateSubjectName));
+					throw new Exception($"Could not find valid certificate with subject name '{certificateSubjectName}'.");
 
 				//Can this even happen?
 				if (certificates.Count > 1)
-					throw new Exception(string.Format(
-						"Could not determine a unique certificate from subject name '{0}'.", certificateSubjectName));
+					throw new Exception($"Could not determine a unique certificate from subject name '{certificateSubjectName}'.");
 
 				return certificates[0];
 			}
diff --git a/src/EventStore.Core/Cluster/ClientClusterInfo.cs b/src/EventStore.Core/Cluster/ClientClusterInfo.cs
index 02732d754..e34bfff6d 100644
--- a/src/EventStore.Core/Cluster/ClientClusterInfo.cs
+++ b/src/EventStore.Core/Cluster/ClientClusterInfo.cs
@@ -19,9 +19,7 @@ namespace EventStore.Core.Cluster {
 		}
 
 		public override string ToString() {
-			return string.Format("Server: {0}:{1}, Members: [{2}]",
-				ServerIp, ServerPort,
-				Members != null ? string.Join(",", Members.Select(m => m.ToString())) : "null");
+			return $"Server: {ServerIp}:{ServerPort}, Members: [{(Members != null ? string.Join(",", Members.Select(m => m.ToString())) : "null")}]";
 		}
 
 		public class ClientMemberInfo {
diff --git a/src/EventStore.Core/Cluster/MemberInfo.cs b/src/EventStore.Core/Cluster/MemberInfo.cs
index 6d4db65a1..a8a95ae07 100644
--- a/src/EventStore.Core/Cluster/MemberInfo.cs
+++ b/src/EventStore.Core/Cluster/MemberInfo.cs
@@ -61,7 +61,7 @@ namespace EventStore.Core.Cluster {
 			int nodePriority,
 			bool isReadOnlyReplica) {
 			if (state == VNodeState.Manager)
-				throw new ArgumentException(string.Format("Wrong State for VNode: {0}", state), "state");
+				throw new ArgumentException($"Wrong State for VNode: {state}", "state");
 			return new MemberInfo(instanceId, timeStamp, state, isAlive,
 				internalTcpEndPoint, internalSecureTcpEndPoint,
 				externalTcpEndPoint, externalSecureTcpEndPoint,
@@ -85,7 +85,7 @@ namespace EventStore.Core.Cluster {
 			int nodePriority,
 			bool isReadOnlyReplica) {
 			if (state == VNodeState.Manager)
-				throw new ArgumentException(string.Format("Wrong State for VNode: {0}", state), "state");
+				throw new ArgumentException($"Wrong State for VNode: {state}", "state");
 			return new MemberInfo(instanceId, timeStamp, state, isAlive,
 				internalTcpEndPoint, internalSecureTcpEndPoint,
 				externalTcpEndPoint, externalSecureTcpEndPoint,
diff --git a/src/EventStore.Core/ClusterNodeMutex.cs b/src/EventStore.Core/ClusterNodeMutex.cs
index 5c9502986..1755dea08 100644
--- a/src/EventStore.Core/ClusterNodeMutex.cs
+++ b/src/EventStore.Core/ClusterNodeMutex.cs
@@ -18,13 +18,12 @@ namespace EventStore.Core {
 		private bool _acquired;
 
 		public ClusterNodeMutex() {
-			MutexName = string.Format("ESCLUSTERNODE:{0}", Process.GetCurrentProcess().Id);
+			MutexName = $"ESCLUSTERNODE:{Process.GetCurrentProcess().Id}";
 		}
 
 		public bool Acquire() {
 			if (_acquired)
-				throw new InvalidOperationException(string.Format("Cluster Node mutex '{0}' is already acquired.",
-					MutexName));
+				throw new InvalidOperationException($"Cluster Node mutex '{MutexName}' is already acquired.");
 
 			try {
 				_clusterNodeMutex = new Mutex(initiallyOwned: true, name: MutexName, createdNew: out _acquired);
@@ -40,13 +39,12 @@ namespace EventStore.Core {
 
 		public void Release() {
 			if (!_acquired)
-				throw new InvalidOperationException(string.Format("Cluster Node mutex '{0}' was not acquired.",
-					MutexName));
+				throw new InvalidOperationException($"Cluster Node mutex '{MutexName}' was not acquired.");
 			_clusterNodeMutex.ReleaseMutex();
 		}
 
 		public static bool IsPresent(int pid) {
-			var mutexName = string.Format("ESCLUSTERNODE:{0}", pid);
+			var mutexName = $"ESCLUSTERNODE:{pid}";
 			try {
 				using (Mutex.OpenExisting(mutexName)) {
 					return true;
diff --git a/src/EventStore.Core/ClusterVNode.cs b/src/EventStore.Core/ClusterVNode.cs
index 3c9c0e50e..d7b1a322b 100644
--- a/src/EventStore.Core/ClusterVNode.cs
+++ b/src/EventStore.Core/ClusterVNode.cs
@@ -197,13 +197,13 @@ namespace EventStore.Core {
 
 			// MISC WORKERS
 			_workerBuses = Enumerable.Range(0, vNodeSettings.WorkerThreads).Select(queueNum =>
-				new InMemoryBus(string.Format("Worker #{0} Bus", queueNum + 1),
+				new InMemoryBus($"Worker #{queueNum + 1} Bus",
 					watchSlowMsg: true,
 					slowMsgThreshold: TimeSpan.FromMilliseconds(200))).ToArray();
 			_workersHandler = new MultiQueuedHandler(
 				vNodeSettings.WorkerThreads,
 				queueNum => new QueuedHandlerThreadPool(_workerBuses[queueNum],
-					string.Format("Worker #{0}", queueNum + 1),
+					$"Worker #{queueNum + 1}",
 					_queueStatsManager,
 					groupName: "Workers",
 					watchSlowMsg: true,
diff --git a/src/EventStore.Core/Data/CommitEventRecord.cs b/src/EventStore.Core/Data/CommitEventRecord.cs
index a4ce01e8c..6922bc261 100644
--- a/src/EventStore.Core/Data/CommitEventRecord.cs
+++ b/src/EventStore.Core/Data/CommitEventRecord.cs
@@ -9,7 +9,7 @@ namespace EventStore.Core.Data {
 		}
 
 		public override string ToString() {
-			return string.Format("CommitPosition: {0}, Event: {1}", CommitPosition, Event);
+			return $"CommitPosition: {CommitPosition}, Event: {Event}";
 		}
 	}
 }
diff --git a/src/EventStore.Core/Data/StreamAcl.cs b/src/EventStore.Core/Data/StreamAcl.cs
index cc2849303..5b01f8763 100644
--- a/src/EventStore.Core/Data/StreamAcl.cs
+++ b/src/EventStore.Core/Data/StreamAcl.cs
@@ -25,12 +25,7 @@ namespace EventStore.Core.Data {
 		}
 
 		public override string ToString() {
-			return string.Format("Read: {0}, Write: {1}, Delete: {2}, MetaRead: {3}, MetaWrite: {4}",
-				ReadRoles == null ? "<null>" : "[" + string.Join(",", ReadRoles) + "]",
-				WriteRoles == null ? "<null>" : "[" + string.Join(",", WriteRoles) + "]",
-				DeleteRoles == null ? "<null>" : "[" + string.Join(",", DeleteRoles) + "]",
-				MetaReadRoles == null ? "<null>" : "[" + string.Join(",", MetaReadRoles) + "]",
-				MetaWriteRoles == null ? "<null>" : "[" + string.Join(",", MetaWriteRoles) + "]");
+			return $"Read: {(ReadRoles == null ? "<null>" : "[" + string.Join(",", ReadRoles) + "]")}, Write: {(WriteRoles == null ? "<null>" : "[" + string.Join(",", WriteRoles) + "]")}, Delete: {(DeleteRoles == null ? "<null>" : "[" + string.Join(",", DeleteRoles) + "]")}, MetaRead: {(MetaReadRoles == null ? "<null>" : "[" + string.Join(",", MetaReadRoles) + "]")}, MetaWrite: {(MetaWriteRoles == null ? "<null>" : "[" + string.Join(",", MetaWriteRoles) + "]")}";
 		}
 	}
 }
diff --git a/src/EventStore.Core/Data/StreamMetadata.cs b/src/EventStore.Core/Data/StreamMetadata.cs
index 1a9db7a53..c3f5490f7 100644
--- a/src/EventStore.Core/Data/StreamMetadata.cs
+++ b/src/EventStore.Core/Data/StreamMetadata.cs
@@ -24,17 +24,17 @@ namespace EventStore.Core.Data {
 			TimeSpan? cacheControl = null, StreamAcl acl = null) {
 			if (maxCount <= 0)
 				throw new ArgumentOutOfRangeException(
-					"maxCount", string.Format("{0} should be positive value.", SystemMetadata.MaxCount));
+					"maxCount", $"{SystemMetadata.MaxCount} should be positive value.");
 			if (maxAge <= TimeSpan.Zero)
 				throw new ArgumentOutOfRangeException(
-					"maxAge", string.Format("{0} should be positive time span.", SystemMetadata.MaxAge));
+					"maxAge", $"{SystemMetadata.MaxAge} should be positive time span.");
 			if (truncateBefore < 0)
 				throw new ArgumentOutOfRangeException(
 					"truncateBefore",
-					string.Format("{0} should be non-negative value.", SystemMetadata.TruncateBefore));
+					$"{SystemMetadata.TruncateBefore} should be non-negative value.");
 			if (cacheControl <= TimeSpan.Zero)
 				throw new ArgumentOutOfRangeException(
-					"cacheControl", string.Format("{0} should be positive time span.", SystemMetadata.CacheControl));
+					"cacheControl", $"{SystemMetadata.CacheControl} should be positive time span.");
 
 			MaxCount = maxCount;
 			MaxAge = maxAge;
@@ -45,9 +45,7 @@ namespace EventStore.Core.Data {
 		}
 
 		public override string ToString() {
-			return string.Format(
-				"MaxCount: {0}, MaxAge: {1}, TruncateBefore: {2}, TempStream: {3}, CacheControl: {4}, Acl: {5}",
-				MaxCount, MaxAge, TruncateBefore, TempStream, CacheControl, Acl);
+			return $"MaxCount: {MaxCount}, MaxAge: {MaxAge}, TruncateBefore: {TruncateBefore}, TempStream: {TempStream}, CacheControl: {CacheControl}, Acl: {Acl}";
 		}
 
 		public static StreamMetadata FromJsonBytes(ReadOnlyMemory<byte> json) {
diff --git a/src/EventStore.Core/Data/SystemSettings.cs b/src/EventStore.Core/Data/SystemSettings.cs
index dbdc8b584..e0e6c82f5 100644
--- a/src/EventStore.Core/Data/SystemSettings.cs
+++ b/src/EventStore.Core/Data/SystemSettings.cs
@@ -21,7 +21,7 @@ namespace EventStore.Core.Data {
 		}
 
 		public override string ToString() {
-			return string.Format("UserStreamAcl: ({0}), SystemStreamAcl: ({1})", UserStreamAcl, SystemStreamAcl);
+			return $"UserStreamAcl: ({UserStreamAcl}), SystemStreamAcl: ({SystemStreamAcl})";
 		}
 
 		public static SystemSettings FromJsonBytes(ReadOnlyMemory<byte> json) {
diff --git a/src/EventStore.Core/Data/TFPos.cs b/src/EventStore.Core/Data/TFPos.cs
index cbb6c3000..3e268d42d 100644
--- a/src/EventStore.Core/Data/TFPos.cs
+++ b/src/EventStore.Core/Data/TFPos.cs
@@ -16,7 +16,7 @@ namespace EventStore.Core.Data {
 
 		[Pure]
 		public string AsString() {
-			return string.Format("{0:X16}{1:X16}", CommitPosition, PreparePosition);
+			return $"{CommitPosition:X16}{PreparePosition:X16}";
 		}
 
 		public static bool TryParse(string s, out TFPos pos) {
@@ -84,7 +84,7 @@ namespace EventStore.Core.Data {
 		}
 
 		public override string ToString() {
-			return string.Format("C:{0}/P:{1}", CommitPosition, PreparePosition);
+			return $"C:{CommitPosition}/P:{PreparePosition}";
 		}
 	}
 }
diff --git a/src/EventStore.Core/DataStructures/ObjectPool.cs b/src/EventStore.Core/DataStructures/ObjectPool.cs
index 45f944ec7..31782b29c 100644
--- a/src/EventStore.Core/DataStructures/ObjectPool.cs
+++ b/src/EventStore.Core/DataStructures/ObjectPool.cs
@@ -10,7 +10,7 @@ namespace EventStore.Core.DataStructures {
 		}
 
 		public ObjectPoolDisposingException(string poolName, Exception innerException)
-			: base(string.Format("Object pool '{0}' is disposing/disposed while Get operation is requested.", poolName),
+			: base($"Object pool '{poolName}' is disposing/disposed while Get operation is requested.",
 				innerException) {
 			Ensure.NotNullOrEmpty(poolName, "poolName");
 		}
@@ -22,7 +22,7 @@ namespace EventStore.Core.DataStructures {
 		}
 
 		public ObjectPoolMaxLimitReachedException(string poolName, int maxLimit, Exception innerException)
-			: base(string.Format("Object pool '{0}' has reached its max limit for items: {1}.", poolName, maxLimit),
+			: base($"Object pool '{poolName}' has reached its max limit for items: {maxLimit}.",
 				innerException) {
 			Ensure.NotNullOrEmpty(poolName, "poolName");
 			Ensure.Nonnegative(maxLimit, "maxLimit");
diff --git a/src/EventStore.Core/DataStructures/PairingHeap.cs b/src/EventStore.Core/DataStructures/PairingHeap.cs
index f24881ade..b86553ecd 100644
--- a/src/EventStore.Core/DataStructures/PairingHeap.cs
+++ b/src/EventStore.Core/DataStructures/PairingHeap.cs
@@ -114,7 +114,7 @@ namespace EventStore.Core.DataStructures {
 			HeapNode tail = null;
 			HeapNode cur = node;
 
-			while (cur != null && cur.Next != null) {
+			while (cur?.Next != null) {
 				var n1 = cur;
 				var n2 = cur.Next;
 				cur = cur.Next.Next;
diff --git a/src/EventStore.Core/Exceptions/ReaderCheckpointHigherThanWriterException.cs b/src/EventStore.Core/Exceptions/ReaderCheckpointHigherThanWriterException.cs
index ad5768535..75074b752 100644
--- a/src/EventStore.Core/Exceptions/ReaderCheckpointHigherThanWriterException.cs
+++ b/src/EventStore.Core/Exceptions/ReaderCheckpointHigherThanWriterException.cs
@@ -3,7 +3,7 @@ using System;
 namespace EventStore.Core.Exceptions {
 	public class ReaderCheckpointHigherThanWriterException : Exception {
 		public ReaderCheckpointHigherThanWriterException(string checkpointName)
-			: base(string.Format("Checkpoint '{0}' has greater value than writer checkpoint.", checkpointName)) {
+			: base($"Checkpoint '{checkpointName}' has greater value than writer checkpoint.") {
 		}
 	}
 }
diff --git a/src/EventStore.Core/Exceptions/WrongFileVersionException.cs b/src/EventStore.Core/Exceptions/WrongFileVersionException.cs
index 825d16f30..350687dc9 100644
--- a/src/EventStore.Core/Exceptions/WrongFileVersionException.cs
+++ b/src/EventStore.Core/Exceptions/WrongFileVersionException.cs
@@ -3,10 +3,7 @@ using System;
 namespace EventStore.Core.Exceptions {
 	public class WrongFileVersionException : Exception {
 		public WrongFileVersionException(string filename, byte fileVersion, byte expectedVersion)
-			: base(string.Format("File {0} has wrong version: {1}, while expected version is: {2}.",
-				filename,
-				fileVersion,
-				expectedVersion)) {
+			: base($"File {filename} has wrong version: {fileVersion}, while expected version is: {expectedVersion}.") {
 		}
 	}
 }
diff --git a/src/EventStore.Core/Helpers/LengthPrefixSuffixFramer.cs b/src/EventStore.Core/Helpers/LengthPrefixSuffixFramer.cs
index 7fe83fcaa..794a4febf 100644
--- a/src/EventStore.Core/Helpers/LengthPrefixSuffixFramer.cs
+++ b/src/EventStore.Core/Helpers/LengthPrefixSuffixFramer.cs
@@ -69,9 +69,7 @@ namespace EventStore.Core.Helpers {
 					if (_prefixBytes == PrefixLength) {
 						if (_packageLength <= 0 || _packageLength > _maxPackageSize) {
 							Log.Error("FRAMING ERROR! Data:\n{data}", Helper.FormatBinaryDump(bytes));
-							throw new PackageFramingException(string.Format(
-								"Package size is out of bounds: {0} (max: {1}).",
-								_packageLength, _maxPackageSize));
+							throw new PackageFramingException($"Package size is out of bounds: {_packageLength} (max: {_maxPackageSize}).");
 						}
 
 						_packageLength += PrefixLength; // we need to read suffix as well
@@ -89,8 +87,7 @@ namespace EventStore.Core.Helpers {
 						                   | (buf[_packageLength - 2] << 16)
 						                   | (buf[_packageLength - 1] << 24);
 						if (_packageLength - PrefixLength != suffixLength) {
-							throw new Exception(string.Format("Prefix length: {0} is not equal to suffix length: {1}.",
-								_packageLength - PrefixLength, suffixLength));
+							throw new Exception($"Prefix length: {_packageLength - PrefixLength} is not equal to suffix length: {suffixLength}.");
 						}
 #endif
 						_memStream.SetLength(_packageLength - PrefixLength); // remove suffix length
diff --git a/src/EventStore.Core/Index/IndexEntry.cs b/src/EventStore.Core/Index/IndexEntry.cs
index bd13af10f..1acb071ba 100644
--- a/src/EventStore.Core/Index/IndexEntry.cs
+++ b/src/EventStore.Core/Index/IndexEntry.cs
@@ -33,7 +33,7 @@ namespace EventStore.Core.Index {
 		}
 
 		public override string ToString() {
-			return string.Format("Stream: {0}, Version: {1}, Position: {2}", Stream, Version, Position);
+			return $"Stream: {Stream}, Version: {Version}, Position: {Position}";
 		}
 	}
 }
diff --git a/src/EventStore.Core/Index/IndexEntryV1.cs b/src/EventStore.Core/Index/IndexEntryV1.cs
index c6d81babb..fd24eaf42 100644
--- a/src/EventStore.Core/Index/IndexEntryV1.cs
+++ b/src/EventStore.Core/Index/IndexEntryV1.cs
@@ -33,7 +33,7 @@ namespace EventStore.Core.Index {
 		}
 
 		public override string ToString() {
-			return string.Format("Key: {0}, Stream: {1}, Version: {2}, Position: {3}", Key, Stream, Version, Position);
+			return $"Key: {Key}, Stream: {Stream}, Version: {Version}, Position: {Position}";
 		}
 	}
 }
diff --git a/src/EventStore.Core/Index/IndexEntryV2.cs b/src/EventStore.Core/Index/IndexEntryV2.cs
index f250f072c..e1146b9aa 100644
--- a/src/EventStore.Core/Index/IndexEntryV2.cs
+++ b/src/EventStore.Core/Index/IndexEntryV2.cs
@@ -33,7 +33,7 @@ namespace EventStore.Core {
 		}
 
 		public override string ToString() {
-			return string.Format("Stream: {0}, Version: {1}, Position: {2}", Stream, Version, Position);
+			return $"Stream: {Stream}, Version: {Version}, Position: {Position}";
 		}
 	}
 }
diff --git a/src/EventStore.Core/Index/IndexMap.cs b/src/EventStore.Core/Index/IndexMap.cs
index 14686b2f4..e99ca2d8e 100644
--- a/src/EventStore.Core/Index/IndexMap.cs
+++ b/src/EventStore.Core/Index/IndexMap.cs
@@ -159,8 +159,7 @@ namespace EventStore.Core.Index {
 
 					if (!loadPTables && reader.ReadLine() != null)
 						throw new CorruptIndexException(
-							string.Format("Negative prepare/commit checkpoint in non-empty IndexMap: {0}.",
-								checkpoints));
+							$"Negative prepare/commit checkpoint in non-empty IndexMap: {checkpoints}.");
 
 					return new IndexMap(version, tables, prepareCheckpoint, commitCheckpoint, maxTablesPerLevel,
 						maxAutoMergeLevel, pTableMaxReaderCount);
@@ -174,8 +173,7 @@ namespace EventStore.Core.Index {
 			if ((text = reader.ReadLine()) == null)
 				throw new CorruptIndexException("IndexMap file is empty.");
 			if (text.Length != 32 || !text.All(x => char.IsDigit(x) || (x >= 'A' && x <= 'F')))
-				throw new CorruptIndexException(string.Format("Corrupted IndexMap MD5 hash. Hash ({0}): {1}.",
-					text.Length, text));
+				throw new CorruptIndexException($"Corrupted IndexMap MD5 hash. Hash ({text.Length}): {text}.");
 
 			// check expected and real hashes are the same
 			var expectedHash = new byte[16];
@@ -219,9 +217,9 @@ namespace EventStore.Core.Index {
 				long commitCheckpoint;
 				var checkpoints = text.Split('/');
 				if (!long.TryParse(checkpoints[0], out prepareCheckpoint) || prepareCheckpoint < -1)
-					throw new CorruptIndexException(string.Format("Invalid prepare checkpoint: {0}.", checkpoints[0]));
+					throw new CorruptIndexException($"Invalid prepare checkpoint: {checkpoints[0]}.");
 				if (!long.TryParse(checkpoints[1], out commitCheckpoint) || commitCheckpoint < -1)
-					throw new CorruptIndexException(string.Format("Invalid commit checkpoint: {0}.", checkpoints[1]));
+					throw new CorruptIndexException($"Invalid commit checkpoint: {checkpoints[1]}.");
 				return new TFPos(commitCheckpoint, prepareCheckpoint);
 			} catch (Exception exc) {
 				throw new CorruptIndexException("Corrupted prepare/commit checkpoints pair.", exc);
@@ -256,8 +254,7 @@ namespace EventStore.Core.Index {
 						indexMapEntry => {
 							if (checkpoints.PreparePosition < 0 || checkpoints.CommitPosition < 0)
 								throw new CorruptIndexException(
-									string.Format("Negative prepare/commit checkpoint in non-empty IndexMap: {0}.",
-										checkpoints));
+									$"Negative prepare/commit checkpoint in non-empty IndexMap: {checkpoints}.");
 
 							PTable ptable = null;
 							var pieces = indexMapEntry.Split(',');
@@ -311,7 +308,7 @@ namespace EventStore.Core.Index {
 		}
 
 		public void SaveToFile(string filename) {
-			var tmpIndexMap = string.Format("{0}.{1}.indexmap.tmp", filename, Guid.NewGuid());
+			var tmpIndexMap = $"{filename}.{Guid.NewGuid()}.indexmap.tmp";
 
 			using (var memStream = new MemoryStream())
 			using (var memWriter = new StreamWriter(memStream)) {
diff --git a/src/EventStore.Core/Index/PTable.cs b/src/EventStore.Core/Index/PTable.cs
index c85c0b5d8..595f0139f 100644
--- a/src/EventStore.Core/Index/PTable.cs
+++ b/src/EventStore.Core/Index/PTable.cs
@@ -108,7 +108,7 @@ namespace EventStore.Core.Index {
 
 			File.SetAttributes(_filename, FileAttributes.ReadOnly | FileAttributes.NotContentIndexed);
 
-			_workItems = new ObjectPool<WorkItem>(string.Format("PTable {0} work items", _id),
+			_workItems = new ObjectPool<WorkItem>($"PTable {_id} work items",
 				initialReaders,
 				maxReaders,
 				() => new WorkItem(filename, DefaultBufferSize),
@@ -149,8 +149,7 @@ namespace EventStore.Core.Index {
 					var footer = PTableFooter.FromStream(readerWorkItem.Stream);
 					if (footer.Version != header.Version)
 						throw new CorruptIndexException(
-							String.Format("PTable header/footer version mismatch: {0}/{1}", header.Version,
-								footer.Version), new InvalidFileException("Invalid PTable file."));
+							$"PTable header/footer version mismatch: {header.Version}/{footer.Version}", new InvalidFileException("Invalid PTable file."));
 
 					if (_version == PTableVersions.IndexV4) {
 						_indexEntrySize = IndexEntryV4Size;
@@ -167,28 +166,19 @@ namespace EventStore.Core.Index {
 											  PTableFooter.GetSize(_version) - MD5Size);
 
 				if (indexEntriesTotalSize < 0) {
-					throw new CorruptIndexException(String.Format(
-						"Total size of index entries < 0: {0}. _size: {1}, header size: {2}, _midpointsCacheSize: {3}, footer size: {4}, md5 size: {5}",
-						indexEntriesTotalSize, _size, PTableHeader.Size, _midpointsCacheSize,
-						PTableFooter.GetSize(_version), MD5Size));
+					throw new CorruptIndexException($"Total size of index entries < 0: {indexEntriesTotalSize}. _size: {_size}, header size: {PTableHeader.Size}, _midpointsCacheSize: {_midpointsCacheSize}, footer size: {PTableFooter.GetSize(_version)}, md5 size: {MD5Size}");
 				} else if (indexEntriesTotalSize % _indexEntrySize != 0) {
-					throw new CorruptIndexException(String.Format(
-						"Total size of index entries: {0} is not divisible by index entry size: {1}",
-						indexEntriesTotalSize, _indexEntrySize));
+					throw new CorruptIndexException($"Total size of index entries: {indexEntriesTotalSize} is not divisible by index entry size: {_indexEntrySize}");
 				}
 
 				_count = indexEntriesTotalSize / _indexEntrySize;
 
 				if (_version >= PTableVersions.IndexV4 && _count > 0 && _midpointsCached > 0 && _midpointsCached < 2) {
 					//if there is at least 1 index entry with version>=4 and there are cached midpoints, there should always be at least 2 midpoints cached
-					throw new CorruptIndexException(String.Format(
-						"Less than 2 midpoints cached in PTable. Index entries: {0}, Midpoints cached: {1}", _count,
-						_midpointsCached));
+					throw new CorruptIndexException($"Less than 2 midpoints cached in PTable. Index entries: {_count}, Midpoints cached: {_midpointsCached}");
 				} else if (_count >= 2 && _midpointsCached > _count) {
 					//if there are at least 2 index entries, midpoints count should be at most the number of index entries
-					throw new CorruptIndexException(String.Format(
-						"More midpoints cached in PTable than index entries. Midpoints: {0} , Index entries: {1}",
-						_midpointsCached, _count));
+					throw new CorruptIndexException($"More midpoints cached in PTable than index entries. Midpoints: {_midpointsCached} , Index entries: {_count}");
 				}
 
 				if (Count == 0) {
@@ -282,14 +272,9 @@ namespace EventStore.Core.Index {
 
 								if (k > 0) {
 									if (midpoints[k].Key.GreaterThan(midpoints[k - 1].Key)) {
-										throw new CorruptIndexException(String.Format(
-											"Index entry key for midpoint {0} (stream: {1}, version: {2}) < index entry key for midpoint {3} (stream: {4}, version: {5})",
-											k - 1, midpoints[k - 1].Key.Stream, midpoints[k - 1].Key.Version, k,
-											midpoints[k].Key.Stream, midpoints[k].Key.Version));
+										throw new CorruptIndexException($"Index entry key for midpoint {k - 1} (stream: {midpoints[k - 1].Key.Stream}, version: {midpoints[k - 1].Key.Version}) < index entry key for midpoint {k} (stream: {midpoints[k].Key.Stream}, version: {midpoints[k].Key.Version})");
 									} else if (midpoints[k - 1].ItemIndex > midpoints[k].ItemIndex) {
-										throw new CorruptIndexException(String.Format(
-											"Item index for midpoint {0} ({1}) > Item index for midpoint {2} ({3})",
-											k - 1, midpoints[k - 1].ItemIndex, k, midpoints[k].ItemIndex));
+										throw new CorruptIndexException($"Item index for midpoint {k - 1} ({midpoints[k - 1].ItemIndex}) > Item index for midpoint {k} ({midpoints[k].ItemIndex})");
 									}
 								}
 							}
@@ -342,14 +327,9 @@ namespace EventStore.Core.Index {
 
 						if (k > 0) {
 							if (midpoints[k].Key.GreaterThan(midpoints[k - 1].Key)) {
-								throw new CorruptIndexException(String.Format(
-									"Index entry key for midpoint {0} (stream: {1}, version: {2}) < index entry key for midpoint {3} (stream: {4}, version: {5})",
-									k - 1, midpoints[k - 1].Key.Stream, midpoints[k - 1].Key.Version, k,
-									midpoints[k].Key.Stream, midpoints[k].Key.Version));
+								throw new CorruptIndexException($"Index entry key for midpoint {k - 1} (stream: {midpoints[k - 1].Key.Stream}, version: {midpoints[k - 1].Key.Version}) < index entry key for midpoint {k} (stream: {midpoints[k].Key.Stream}, version: {midpoints[k].Key.Version})");
 							} else if (midpoints[k - 1].ItemIndex > midpoints[k].ItemIndex) {
-								throw new CorruptIndexException(String.Format(
-									"Item index for midpoint {0} ({1}) > Item index for midpoint {2} ({3})", k - 1,
-									midpoints[k - 1].ItemIndex, k, midpoints[k].ItemIndex));
+								throw new CorruptIndexException($"Item index for midpoint {k - 1} ({midpoints[k - 1].ItemIndex}) > Item index for midpoint {k} ({midpoints[k].ItemIndex})");
 							}
 						}
 					}
@@ -407,21 +387,13 @@ namespace EventStore.Core.Index {
 			if (computed.Length != fromFile.Length)
 				throw new CorruptIndexException(
 					new HashValidationException(
-						string.Format(
-							"Hash sizes differ! FileHash({0}): {1}, hash({2}): {3}.",
-							computed.Length,
-							BitConverter.ToString(computed),
-							fromFile.Length,
-							BitConverter.ToString(fromFile))));
+						$"Hash sizes differ! FileHash({computed.Length}): {BitConverter.ToString(computed)}, hash({fromFile.Length}): {BitConverter.ToString(fromFile)}."));
 
 			for (int i = 0; i < fromFile.Length; i++) {
 				if (fromFile[i] != computed[i])
 					throw new CorruptIndexException(
 						new HashValidationException(
-							string.Format(
-								"Hashes are different! computed: {0}, hash: {1}.",
-								BitConverter.ToString(computed),
-								BitConverter.ToString(fromFile))));
+							$"Hashes are different! computed: {BitConverter.ToString(computed)}, hash: {BitConverter.ToString(fromFile)}."));
 			}
 		}
 
@@ -479,13 +451,9 @@ namespace EventStore.Core.Index {
 					var midpointKey = new IndexEntryKey(midpoint.Stream, midpoint.Version);
 
 					if (midpointKey.GreaterThan(lowBoundsCheck)) {
-						throw new MaybeCorruptIndexException(String.Format(
-							"Midpoint key (stream: {0}, version: {1}) > low bounds check key (stream: {2}, version: {3})",
-							midpointKey.Stream, midpointKey.Version, lowBoundsCheck.Stream, lowBoundsCheck.Version));
+						throw new MaybeCorruptIndexException($"Midpoint key (stream: {midpointKey.Stream}, version: {midpointKey.Version}) > low bounds check key (stream: {lowBoundsCheck.Stream}, version: {lowBoundsCheck.Version})");
 					} else if (!midpointKey.GreaterEqualsThan(highBoundsCheck)) {
-						throw new MaybeCorruptIndexException(String.Format(
-							"Midpoint key (stream: {0}, version: {1}) < high bounds check key (stream: {2}, version: {3})",
-							midpointKey.Stream, midpointKey.Version, highBoundsCheck.Stream, highBoundsCheck.Version));
+						throw new MaybeCorruptIndexException($"Midpoint key (stream: {midpointKey.Stream}, version: {midpointKey.Version}) < high bounds check key (stream: {highBoundsCheck.Stream}, version: {highBoundsCheck.Version})");
 					}
 
 					if (midpointKey.GreaterThan(endKey)) {
@@ -500,9 +468,7 @@ namespace EventStore.Core.Index {
 				var candEntry = ReadEntry(_indexEntrySize, high, workItem, _version);
 				var candKey = new IndexEntryKey(candEntry.Stream, candEntry.Version);
 				if (candKey.GreaterThan(endKey))
-					throw new MaybeCorruptIndexException(string.Format(
-						"candEntry ({0}@{1}) > startKey {2}, stream {3}, startNum {4}, endNum {5}, PTable: {6}.",
-						candEntry.Stream, candEntry.Version, startKey, stream, startNumber, endNumber, Filename));
+					throw new MaybeCorruptIndexException($"candEntry ({candEntry.Stream}@{candEntry.Version}) > startKey {startKey}, stream {stream}, startNum {startNumber}, endNum {endNumber}, PTable: {Filename}.");
 				if (candKey.SmallerThan(startKey))
 					return false;
 				entry = candEntry;
@@ -542,13 +508,9 @@ namespace EventStore.Core.Index {
 					var midpointKey = new IndexEntryKey(midpoint.Stream, midpoint.Version);
 
 					if (midpointKey.GreaterThan(lowBoundsCheck)) {
-						throw new MaybeCorruptIndexException(String.Format(
-							"Midpoint key (stream: {0}, version: {1}) > low bounds check key (stream: {2}, version: {3})",
-							midpointKey.Stream, midpointKey.Version, lowBoundsCheck.Stream, lowBoundsCheck.Version));
+						throw new MaybeCorruptIndexException($"Midpoint key (stream: {midpointKey.Stream}, version: {midpointKey.Version}) > low bounds check key (stream: {lowBoundsCheck.Stream}, version: {lowBoundsCheck.Version})");
 					} else if (!midpointKey.GreaterEqualsThan(highBoundsCheck)) {
-						throw new MaybeCorruptIndexException(String.Format(
-							"Midpoint key (stream: {0}, version: {1}) < high bounds check key (stream: {2}, version: {3})",
-							midpointKey.Stream, midpointKey.Version, highBoundsCheck.Stream, highBoundsCheck.Version));
+						throw new MaybeCorruptIndexException($"Midpoint key (stream: {midpointKey.Stream}, version: {midpointKey.Version}) < high bounds check key (stream: {highBoundsCheck.Stream}, version: {highBoundsCheck.Version})");
 					}
 
 					if (midpointKey.SmallerThan(startKey)) {
@@ -563,9 +525,7 @@ namespace EventStore.Core.Index {
 				var candEntry = ReadEntry(_indexEntrySize, high, workItem, _version);
 				var candidateKey = new IndexEntryKey(candEntry.Stream, candEntry.Version);
 				if (candidateKey.SmallerThan(startKey))
-					throw new MaybeCorruptIndexException(string.Format(
-						"candEntry ({0}@{1}) < startKey {2}, stream {3}, startNum {4}, endNum {5}, PTable: {6}.",
-						candEntry.Stream, candEntry.Version, startKey, stream, startNumber, endNumber, Filename));
+					throw new MaybeCorruptIndexException($"candEntry ({candEntry.Stream}@{candEntry.Version}) < startKey {startKey}, stream {stream}, startNum {startNumber}, endNum {endNumber}, PTable: {Filename}.");
 				if (candidateKey.GreaterThan(endKey))
 					return false;
 				entry = candEntry;
@@ -600,13 +560,9 @@ namespace EventStore.Core.Index {
 					var midpointKey = new IndexEntryKey(midpoint.Stream, midpoint.Version);
 
 					if (midpointKey.GreaterThan(lowBoundsCheck)) {
-						throw new MaybeCorruptIndexException(String.Format(
-							"Midpoint key (stream: {0}, version: {1}) > low bounds check key (stream: {2}, version: {3})",
-							midpointKey.Stream, midpointKey.Version, lowBoundsCheck.Stream, lowBoundsCheck.Version));
+						throw new MaybeCorruptIndexException($"Midpoint key (stream: {midpointKey.Stream}, version: {midpointKey.Version}) > low bounds check key (stream: {lowBoundsCheck.Stream}, version: {lowBoundsCheck.Version})");
 					} else if (!midpointKey.GreaterEqualsThan(highBoundsCheck)) {
-						throw new MaybeCorruptIndexException(String.Format(
-							"Midpoint key (stream: {0}, version: {1}) < high bounds check key (stream: {2}, version: {3})",
-							midpointKey.Stream, midpointKey.Version, highBoundsCheck.Stream, highBoundsCheck.Version));
+						throw new MaybeCorruptIndexException($"Midpoint key (stream: {midpointKey.Stream}, version: {midpointKey.Version}) < high bounds check key (stream: {highBoundsCheck.Stream}, version: {highBoundsCheck.Version})");
 					}
 
 					if (midpointKey.SmallerEqualsThan(endKey)) {
@@ -623,9 +579,7 @@ namespace EventStore.Core.Index {
 					IndexEntry entry = ReadNextNoSeek(workItem, _version);
 					var candidateKey = new IndexEntryKey(entry.Stream, entry.Version);
 					if (candidateKey.GreaterThan(endKey))
-						throw new MaybeCorruptIndexException(string.Format(
-							"entry ({0}@{1}) > endKey {2}, stream {3}, startNum {4}, endNum {5}, PTable: {6}.",
-							entry.Stream, entry.Version, startKey, stream, startNumber, endNumber, Filename));
+						throw new MaybeCorruptIndexException($"entry ({entry.Stream}@{entry.Version}) > endKey {startKey}, stream {stream}, startNum {startNumber}, endNum {endNumber}, PTable: {Filename}.");
 					if (candidateKey.SmallerThan(startKey))
 						return result;
 					result.Add(entry);
@@ -824,7 +778,7 @@ namespace EventStore.Core.Index {
 			}
 
 			public override string ToString() {
-				return string.Format("Stream: {0}, Version: {1}", Stream, Version);
+				return $"Stream: {Stream}, Version: {Version}";
 			}
 		}
 
diff --git a/src/EventStore.Core/Index/PTableConstruction.cs b/src/EventStore.Core/Index/PTableConstruction.cs
index 189d8c5a0..b433e7b4c 100644
--- a/src/EventStore.Core/Index/PTableConstruction.cs
+++ b/src/EventStore.Core/Index/PTableConstruction.cs
@@ -605,9 +605,7 @@ namespace EventStore.Core.Index {
 			}
 
 			public void Dispose() {
-				if (_ptableEnumerator != null) {
-					_ptableEnumerator.Dispose();
-				}
+				_ptableEnumerator?.Dispose();
 
 				_enumerator.Dispose();
 			}
diff --git a/src/EventStore.Core/Index/TableIndex.cs b/src/EventStore.Core/Index/TableIndex.cs
index c815c1214..589cf6ba7 100644
--- a/src/EventStore.Core/Index/TableIndex.cs
+++ b/src/EventStore.Core/Index/TableIndex.cs
@@ -144,9 +144,7 @@ namespace EventStore.Core.Index {
 					_skipIndexVerify, _initializationThreads, _maxAutoMergeIndexLevel, _pTableMaxReaderCount);
 				if (_indexMap.CommitCheckpoint >= chaserCheckpoint) {
 					_indexMap.Dispose(TimeSpan.FromMilliseconds(5000));
-					throw new CorruptIndexException(String.Format(
-						"IndexMap's CommitCheckpoint ({0}) is greater than ChaserCheckpoint ({1}).",
-						_indexMap.CommitCheckpoint, chaserCheckpoint));
+					throw new CorruptIndexException($"IndexMap's CommitCheckpoint ({_indexMap.CommitCheckpoint}) is greater than ChaserCheckpoint ({chaserCheckpoint}).");
 				}
 
 				//verification should be completed by now
@@ -310,8 +308,8 @@ namespace EventStore.Core.Index {
 					}
 
 					PTable ptable;
-					var memtable = tableItem.Table as IMemTable;
-					if (memtable != null) {
+
+					if (tableItem.Table is IMemTable memtable) {
 						memtable.MarkForConversion();
 						ptable = PTable.FromMemtable(memtable, _fileNameProvider.GetFilenameNewTable(),
 							ESConsts.PTableInitialReaderCount,
@@ -466,8 +464,7 @@ namespace EventStore.Core.Index {
 			if (!result.Success)
 				return new Tuple<string, bool>(String.Empty, false);
 			if (result.LogRecord.RecordType != TransactionLog.LogRecords.LogRecordType.Prepare)
-				throw new Exception(string.Format("Incorrect type of log record {0}, expected Prepare record.",
-					result.LogRecord.RecordType));
+				throw new Exception($"Incorrect type of log record {result.LogRecord.RecordType}, expected Prepare record.");
 			return new Tuple<string, bool>(((TransactionLog.LogRecords.PrepareLogRecord)result.LogRecord).EventStreamId,
 				true);
 		}
diff --git a/src/EventStore.Core/Messages/ClientMessage.cs b/src/EventStore.Core/Messages/ClientMessage.cs
index c0e596117..3a8be8799 100644
--- a/src/EventStore.Core/Messages/ClientMessage.cs
+++ b/src/EventStore.Core/Messages/ClientMessage.cs
@@ -194,9 +194,7 @@ namespace EventStore.Core.Messages {
 			}
 
 			public override string ToString() {
-				return String.Format(
-					"WRITE: InternalCorrId: {0}, CorrelationId: {1}, EventStreamId: {2}, ExpectedVersion: {3}, Events: {4}",
-					InternalCorrId, CorrelationId, EventStreamId, ExpectedVersion, Events.Length);
+				return $"WRITE: InternalCorrId: {InternalCorrId}, CorrelationId: {CorrelationId}, EventStreamId: {EventStreamId}, ExpectedVersion: {ExpectedVersion}, Events: {Events.Length}";
 			}
 		}
 
@@ -403,10 +401,10 @@ namespace EventStore.Core.Messages {
 				long lastEventNumber, long preparePosition, long commitPosition) {
 				if (firstEventNumber < -1)
 					throw new ArgumentOutOfRangeException("firstEventNumber",
-						String.Format("FirstEventNumber: {0}", firstEventNumber));
+						$"FirstEventNumber: {firstEventNumber}");
 				if (lastEventNumber - firstEventNumber + 1 < 0)
 					throw new ArgumentOutOfRangeException("lastEventNumber",
-						String.Format("LastEventNumber {0}, FirstEventNumber {1}.", lastEventNumber, firstEventNumber));
+						$"LastEventNumber {lastEventNumber}, FirstEventNumber {firstEventNumber}.");
 				CorrelationId = correlationId;
 				TransactionId = transactionId;
 				Result = OperationResult.Success;
@@ -1686,7 +1684,7 @@ namespace EventStore.Core.Messages {
 			}
 
 			public override string ToString() {
-				return String.Format("Result: {0}", Result);
+				return $"Result: {Result}";
 			}
 
 			public enum MergeIndexesResult {
@@ -1782,7 +1780,7 @@ namespace EventStore.Core.Messages {
 			}
 
 			public override string ToString() {
-				return String.Format("Result: {0}, ScavengeId: {1}", Result, ScavengeId);
+				return $"Result: {Result}, ScavengeId: {ScavengeId}";
 			}
 
 			public enum ScavengeResult {
@@ -1814,7 +1812,7 @@ namespace EventStore.Core.Messages {
 			}
 
 			public override string ToString() {
-				return String.Format("Version: {0}, Connection Name: {1}", Version, ConnectionName);
+				return $"Version: {Version}, Connection Name: {ConnectionName}";
 			}
 		}
 
diff --git a/src/EventStore.Core/Messages/ClusterInfoDto.cs b/src/EventStore.Core/Messages/ClusterInfoDto.cs
index 4ac19bb3d..e17277da9 100644
--- a/src/EventStore.Core/Messages/ClusterInfoDto.cs
+++ b/src/EventStore.Core/Messages/ClusterInfoDto.cs
@@ -19,9 +19,7 @@ namespace EventStore.Core.Messages {
 		}
 
 		public override string ToString() {
-			return string.Format("Server: {0}:{1}, Members: [{2}]",
-				ServerIp, ServerPort,
-				Members != null ? string.Join(",", Members.Select(m => m.ToString())) : "null");
+			return $"Server: {ServerIp}:{ServerPort}, Members: [{(Members != null ? string.Join(",", Members.Select(m => m.ToString())) : "null")}]";
 		}
 	}
 }
diff --git a/src/EventStore.Core/Messages/ElectionMessage.cs b/src/EventStore.Core/Messages/ElectionMessage.cs
index 984366505..ad1437386 100644
--- a/src/EventStore.Core/Messages/ElectionMessage.cs
+++ b/src/EventStore.Core/Messages/ElectionMessage.cs
@@ -47,8 +47,7 @@ namespace EventStore.Core.Messages {
 			}
 
 			public override string ToString() {
-				return string.Format("---- ViewChange: attemptedView {0}, serverId {1}, serverHttp {2}",
-					AttemptedView, ServerId, ServerHttpEndPoint);
+				return $"---- ViewChange: attemptedView {AttemptedView}, serverId {ServerId}, serverHttp {ServerHttpEndPoint}";
 			}
 		}
 
@@ -77,8 +76,7 @@ namespace EventStore.Core.Messages {
 			}
 
 			public override string ToString() {
-				return string.Format("---- ViewChangeProof: serverId {0}, serverHttp {1}, installedView {2}",
-					ServerId, ServerHttpEndPoint, InstalledView);
+				return $"---- ViewChangeProof: serverId {ServerId}, serverHttp {ServerHttpEndPoint}, installedView {InstalledView}";
 			}
 		}
 
@@ -108,7 +106,7 @@ namespace EventStore.Core.Messages {
 			}
 
 			public override string ToString() {
-				return string.Format("---- ElectionsTimedOut: view {0}", View);
+				return $"---- ElectionsTimedOut: view {View}";
 			}
 		}
 
@@ -137,8 +135,7 @@ namespace EventStore.Core.Messages {
 			}
 
 			public override string ToString() {
-				return string.Format("---- Prepare: serverId {0}, serverHttp {1}, view {2}", ServerId,
-					ServerHttpEndPoint, View);
+				return $"---- Prepare: serverId {ServerId}, serverHttp {ServerHttpEndPoint}, view {View}";
 			}
 		}
 
@@ -315,9 +312,7 @@ namespace EventStore.Core.Messages {
 			}
 
 			public override string ToString() {
-				return string.Format(
-					"---- Accept: serverId {0}, serverHttp {1}, leaderId {2}, leaderHttp {3}, view {4}",
-					ServerId, ServerHttpEndPoint, LeaderId, LeaderHttpEndPoint, View);
+				return $"---- Accept: serverId {ServerId}, serverHttp {ServerHttpEndPoint}, leaderId {LeaderId}, leaderHttp {LeaderHttpEndPoint}, view {View}";
 			}
 		}
 
diff --git a/src/EventStore.Core/Messages/GossipMessage.cs b/src/EventStore.Core/Messages/GossipMessage.cs
index 3858aec13..1ad9d024a 100644
--- a/src/EventStore.Core/Messages/GossipMessage.cs
+++ b/src/EventStore.Core/Messages/GossipMessage.cs
@@ -148,7 +148,7 @@ namespace EventStore.Core.Messages {
 			}
 
 			public override string ToString() {
-				return String.Format("Reason: {0}, Recipient: {1}", Reason, Recipient);
+				return $"Reason: {Reason}, Recipient: {Recipient}";
 			}
 		}
 		
@@ -178,7 +178,7 @@ namespace EventStore.Core.Messages {
 			}
 
 			public override string ToString() {
-				return String.Format("Reason: {0}, Recipient: {1}", Reason, Recipient);
+				return $"Reason: {Reason}, Recipient: {Recipient}";
 			}
 		}
 		
diff --git a/src/EventStore.Core/Messages/HttpClientMessageDto.cs b/src/EventStore.Core/Messages/HttpClientMessageDto.cs
index be4172433..3bf7b4ab8 100644
--- a/src/EventStore.Core/Messages/HttpClientMessageDto.cs
+++ b/src/EventStore.Core/Messages/HttpClientMessageDto.cs
@@ -89,14 +89,7 @@ namespace EventStore.Core.Messages {
 			}
 
 			public override string ToString() {
-				return string.Format(
-					"id: {5} eventStreamId: {0}, eventNumber: {1}, eventType: {2}, data: {3}, metadata: {4}",
-					eventStreamId,
-					eventNumber,
-					eventType,
-					data,
-					metadata,
-					eventId);
+				return $"id: {eventStreamId} eventStreamId: {eventNumber}, eventNumber: {eventType}, eventType: {data}, data: {metadata}, metadata: {eventId}";
 			}
 		}
 	}
diff --git a/src/EventStore.Core/Messages/HttpMessage.cs b/src/EventStore.Core/Messages/HttpMessage.cs
index 233b3c561..a5d9227bd 100644
--- a/src/EventStore.Core/Messages/HttpMessage.cs
+++ b/src/EventStore.Core/Messages/HttpMessage.cs
@@ -95,7 +95,7 @@ namespace EventStore.Core.Messages {
 			}
 
 			public override string ToString() {
-				return string.Format("Text: {0}", Text);
+				return $"Text: {Text}";
 			}
 		}
 	}
diff --git a/src/EventStore.Core/Messages/ReplicationMessage.cs b/src/EventStore.Core/Messages/ReplicationMessage.cs
index fbd12e4cd..ec639bebd 100644
--- a/src/EventStore.Core/Messages/ReplicationMessage.cs
+++ b/src/EventStore.Core/Messages/ReplicationMessage.cs
@@ -343,9 +343,7 @@ namespace EventStore.Core.Messages {
 			}
 
 			public override string ToString() {
-				return string.Format(
-					"CreateChunk message: LeaderId: {0}, SubscriptionId: {1}, ChunkHeader: {2}, FileSize: {3}, IsCompletedChunk: {4}",
-					LeaderId, SubscriptionId, ChunkHeader, FileSize, IsCompletedChunk);
+				return $"CreateChunk message: LeaderId: {LeaderId}, SubscriptionId: {SubscriptionId}, ChunkHeader: {ChunkHeader}, FileSize: {FileSize}, IsCompletedChunk: {IsCompletedChunk}";
 			}
 		}
 
@@ -393,10 +391,7 @@ namespace EventStore.Core.Messages {
 			}
 
 			public override string ToString() {
-				return string.Format(
-					"RawChunkBulk message: LeaderId: {0}, SubscriptionId: {1}, ChunkStartNumber: {2}, ChunkEndNumber: {3}, RawPosition: {4}, RawBytes length: {5}, CompleteChunk: {6}",
-					LeaderId, SubscriptionId,
-					ChunkStartNumber, ChunkEndNumber, RawPosition, RawBytes.Length, CompleteChunk);
+				return $"RawChunkBulk message: LeaderId: {LeaderId}, SubscriptionId: {SubscriptionId}, ChunkStartNumber: {ChunkStartNumber}, ChunkEndNumber: {ChunkEndNumber}, RawPosition: {RawPosition}, RawBytes length: {RawBytes.Length}, CompleteChunk: {CompleteChunk}";
 			}
 		}
 
@@ -447,10 +442,7 @@ namespace EventStore.Core.Messages {
 			}
 
 			public override string ToString() {
-				return string.Format(
-					"DataChunkBulk message: LeaderId: {0}, SubscriptionId: {1}, ChunkStartNumber: {2}, ChunkEndNumber: {3}, SubscriptionPosition: {4}, DataBytes length: {5}, CompleteChunk: {6}",
-					LeaderId, SubscriptionId, ChunkStartNumber, ChunkEndNumber,
-					SubscriptionPosition, DataBytes.Length, CompleteChunk);
+				return $"DataChunkBulk message: LeaderId: {LeaderId}, SubscriptionId: {SubscriptionId}, ChunkStartNumber: {ChunkStartNumber}, ChunkEndNumber: {ChunkEndNumber}, SubscriptionPosition: {SubscriptionPosition}, DataBytes length: {DataBytes.Length}, CompleteChunk: {CompleteChunk}";
 			}
 		}
 
diff --git a/src/EventStore.Core/Messages/ScavengeResultDto.cs b/src/EventStore.Core/Messages/ScavengeResultDto.cs
index 60f32bd57..b1d3c5bfb 100644
--- a/src/EventStore.Core/Messages/ScavengeResultDto.cs
+++ b/src/EventStore.Core/Messages/ScavengeResultDto.cs
@@ -12,7 +12,7 @@ namespace EventStore.Core.Messages {
 		}
 
 		public override string ToString() {
-			return String.Format("ScavengeId: {0}", ScavengeId);
+			return $"ScavengeId: {ScavengeId}";
 		}
 	}
 }
diff --git a/src/EventStore.Core/Messages/StorageMessage.cs b/src/EventStore.Core/Messages/StorageMessage.cs
index 2ba5f73cc..9a69b6b69 100644
--- a/src/EventStore.Core/Messages/StorageMessage.cs
+++ b/src/EventStore.Core/Messages/StorageMessage.cs
@@ -48,9 +48,7 @@ namespace EventStore.Core.Messages {
 			}
 
 			public override string ToString() {
-				return string.Format(
-					"WRITE_PREPARES: CorrelationId: {0}, EventStreamId: {1}, ExpectedVersion: {2}",
-					CorrelationId, EventStreamId, ExpectedVersion);
+				return $"WRITE_PREPARES: CorrelationId: {CorrelationId}, EventStreamId: {EventStreamId}, ExpectedVersion: {ExpectedVersion}";
 			}
 		}
 
@@ -215,10 +213,10 @@ namespace EventStore.Core.Messages {
 				Ensure.Nonnegative(transactionPosition, "transactionPosition");
 				if (firstEventNumber < -1)
 					throw new ArgumentOutOfRangeException("firstEventNumber",
-						string.Format("FirstEventNumber: {0}", firstEventNumber));
+						$"FirstEventNumber: {firstEventNumber}");
 				if (lastEventNumber - firstEventNumber + 1 < 0)
 					throw new ArgumentOutOfRangeException("lastEventNumber",
-						string.Format("LastEventNumber {0}, FirstEventNumber {1}.", lastEventNumber, firstEventNumber));
+						$"LastEventNumber {lastEventNumber}, FirstEventNumber {firstEventNumber}.");
 
 				CorrelationId = correlationId;
 				LogPosition = logPosition;
@@ -248,10 +246,10 @@ namespace EventStore.Core.Messages {
 				Ensure.Nonnegative(transactionPosition, "transactionPosition");
 				if (firstEventNumber < -1)
 					throw new ArgumentOutOfRangeException("firstEventNumber",
-						string.Format("FirstEventNumber: {0}", firstEventNumber));
+						$"FirstEventNumber: {firstEventNumber}");
 				if (lastEventNumber - firstEventNumber + 1 < 0)
 					throw new ArgumentOutOfRangeException("lastEventNumber",
-						string.Format("LastEventNumber {0}, FirstEventNumber {1}.", lastEventNumber, firstEventNumber));
+						$"LastEventNumber {lastEventNumber}, FirstEventNumber {firstEventNumber}.");
 				CorrelationId = correlationId;
 				LogPosition = logPosition;
 				TransactionPosition = transactionPosition;
@@ -317,9 +315,7 @@ namespace EventStore.Core.Messages {
 			}
 
 			public override string ToString() {
-				return string.Format(
-					"EventStreamId: {0}, CorrelationId: {1}, FirstEventNumber: {2}, LastEventNumber: {3}",
-					EventStreamId, CorrelationId, FirstEventNumber, LastEventNumber);
+				return $"EventStreamId: {EventStreamId}, CorrelationId: {CorrelationId}, FirstEventNumber: {FirstEventNumber}, LastEventNumber: {LastEventNumber}";
 			}
 		}
 
diff --git a/src/EventStore.Core/Messaging/Message.cs b/src/EventStore.Core/Messaging/Message.cs
index 70424ad48..1a4736c41 100644
--- a/src/EventStore.Core/Messaging/Message.cs
+++ b/src/EventStore.Core/Messaging/Message.cs
@@ -146,7 +146,7 @@ namespace EventStore.Core.Messaging {
 				.FirstOrDefault(x => x.Name == "TypeId");
 			if (msgTypeField == null) {
 				Console.WriteLine("Message {0} doesn't have TypeId field!", msgType.Name);
-				throw new Exception(string.Format("Message {0} doesn't have TypeId field!", msgType.Name));
+				throw new Exception($"Message {msgType.Name} doesn't have TypeId field!");
 			}
 
 			var msgTypeId = (int)msgTypeField.GetValue(null);
diff --git a/src/EventStore.Core/Messaging/SendToThisEnvelope.cs b/src/EventStore.Core/Messaging/SendToThisEnvelope.cs
index c720cb6b0..78fb07d4c 100644
--- a/src/EventStore.Core/Messaging/SendToThisEnvelope.cs
+++ b/src/EventStore.Core/Messaging/SendToThisEnvelope.cs
@@ -10,8 +10,7 @@ namespace EventStore.Core.Messaging {
 		}
 
 		public void ReplyWith<T>(T message) where T : Message {
-			var x = _receiver as IHandle<T>;
-			if (x != null)
+			if (_receiver is IHandle<T> x)
 				x.Handle(message);
 		}
 	}
diff --git a/src/EventStore.Core/Services/Gossip/GossipServiceBase.cs b/src/EventStore.Core/Services/Gossip/GossipServiceBase.cs
index 2d82ae6e9..a434197a4 100644
--- a/src/EventStore.Core/Services/Gossip/GossipServiceBase.cs
+++ b/src/EventStore.Core/Services/Gossip/GossipServiceBase.cs
@@ -255,7 +255,7 @@ namespace EventStore.Core.Services.Gossip {
 				DeadMemberRemovalPeriod);
 
 			if (_cluster.HasChangedSince(oldCluster))
-				LogClusterChange(oldCluster, _cluster, string.Format("gossip received from [{0}]", message.Server));
+				LogClusterChange(oldCluster, _cluster, $"gossip received from [{message.Server}]");
 			_bus.Publish(new GossipMessage.GossipUpdated(_cluster));
 		}
 
@@ -274,7 +274,7 @@ namespace EventStore.Core.Services.Gossip {
 				_timeProvider, DeadMemberRemovalPeriod);
 			if (_cluster.HasChangedSince(oldCluster))
 				LogClusterChange(oldCluster, _cluster,
-					string.Format("TCP connection lost to [{0}]", message.Recipient));
+					$"TCP connection lost to [{message.Recipient}]");
 			_bus.Publish(new GossipMessage.GossipUpdated(_cluster));
 		}
 
@@ -287,7 +287,7 @@ namespace EventStore.Core.Services.Gossip {
 				_timeProvider, DeadMemberRemovalPeriod);
 			if (_cluster.HasChangedSince(oldCluster))
 				LogClusterChange(oldCluster, _cluster,
-					string.Format("TCP connection established to [{0}]", message.VNodeEndPoint));
+					$"TCP connection established to [{message.VNodeEndPoint}]");
 			_bus.Publish(new GossipMessage.GossipUpdated(_cluster));
 		}
 
diff --git a/src/EventStore.Core/Services/HttpSendService.cs b/src/EventStore.Core/Services/HttpSendService.cs
index e7906bfd1..890bf6019 100644
--- a/src/EventStore.Core/Services/HttpSendService.cs
+++ b/src/EventStore.Core/Services/HttpSendService.cs
@@ -73,13 +73,12 @@ namespace EventStore.Core.Services {
 					_leaderInfo = null;
 					break;
 				default:
-					throw new Exception(string.Format("Unknown node state: {0}.", message.State));
+					throw new Exception($"Unknown node state: {message.State}.");
 			}
 		}
 
 		public void Handle(HttpMessage.HttpSend message) {
-			var deniedToHandle = message.Message as HttpMessage.DeniedToHandle;
-			if (deniedToHandle != null) {
+			if (message.Message is HttpMessage.DeniedToHandle deniedToHandle) {
 				int code;
 				switch (deniedToHandle.Reason) {
 					case DenialReason.ServerTooBusy:
@@ -198,8 +197,7 @@ namespace EventStore.Core.Services {
 			}
 
 			if (!request.Headers.Contains(ProxyHeaders.XForwardedHost)) {
-				request.Headers.Add(ProxyHeaders.XForwardedHost, string.Format("{0}:{1}",
-					manager.RequestedUrl.Host, manager.RequestedUrl.Port));
+				request.Headers.Add(ProxyHeaders.XForwardedHost, $"{manager.RequestedUrl.Host}:{manager.RequestedUrl.Port}");
 			}
 
 			// Copy content (if content body is allowed)
diff --git a/src/EventStore.Core/Services/Monitoring/MonitoringService.cs b/src/EventStore.Core/Services/Monitoring/MonitoringService.cs
index 71ab94cf9..eb63ee9bc 100644
--- a/src/EventStore.Core/Services/Monitoring/MonitoringService.cs
+++ b/src/EventStore.Core/Services/Monitoring/MonitoringService.cs
@@ -88,7 +88,7 @@ namespace EventStore.Core.Services.Monitoring {
 			_statsCollectionPeriodMs = statsCollectionPeriod > TimeSpan.Zero
 				? (long)statsCollectionPeriod.TotalMilliseconds
 				: Timeout.Infinite;
-			_nodeStatsStream = string.Format("{0}-{1}", SystemStreams.StatsStreamPrefix, nodeEndpoint);
+			_nodeStatsStream = $"{SystemStreams.StatsStreamPrefix}-{nodeEndpoint}";
 			_tcpEndpoint = tcpEndpoint;
 			_tcpSecureEndpoint = tcpSecureEndpoint;
 			_timer = new Timer(OnTimerTick, null, Timeout.Infinite, Timeout.Infinite);
@@ -286,8 +286,7 @@ namespace EventStore.Core.Services.Monitoring {
 
 				List<MonitoringMessage.TcpConnectionStats> connStats = new List<MonitoringMessage.TcpConnectionStats>();
 				foreach (var conn in connections) {
-					var tcpConn = conn as TcpConnection;
-					if (tcpConn != null) {
+					if (conn is TcpConnection tcpConn) {
 						var isExternalConnection = _tcpEndpoint != null && _tcpEndpoint.Port == tcpConn.LocalEndPoint.GetPort();
 						connStats.Add(new MonitoringMessage.TcpConnectionStats {
 							IsExternalConnection = isExternalConnection,
@@ -303,8 +302,7 @@ namespace EventStore.Core.Services.Monitoring {
 						});
 					}
 
-					var tcpConnSsl = conn as TcpConnectionSsl;
-					if (tcpConnSsl != null) {
+					if (conn is TcpConnectionSsl tcpConnSsl) {
 						var isExternalConnection = _tcpSecureEndpoint != null &&
 						                           _tcpSecureEndpoint.Port == tcpConnSsl.LocalEndPoint.GetPort();
 						connStats.Add(new MonitoringMessage.TcpConnectionStats {
diff --git a/src/EventStore.Core/Services/Monitoring/Stats/DiskIo.cs b/src/EventStore.Core/Services/Monitoring/Stats/DiskIo.cs
index cce5e8b9b..167ff1948 100644
--- a/src/EventStore.Core/Services/Monitoring/Stats/DiskIo.cs
+++ b/src/EventStore.Core/Services/Monitoring/Stats/DiskIo.cs
@@ -48,7 +48,7 @@ namespace EventStore.Core.Services.Monitoring.Stats {
 
 		// http://stackoverflow.com/questions/3633286/understanding-the-counters-in-proc-pid-io
 		private static DiskIo GetOnUnix(int procId, Serilog.ILogger log) {
-			var procIoFile = string.Format("/proc/{0}/io", procId);
+			var procIoFile = $"/proc/{procId}/io";
 			if (!File.Exists(procIoFile)) // if no procfs exists/is mounted -- just don't return stats
 				return null;
 			var procIoStr = File.ReadAllText(procIoFile);
diff --git a/src/EventStore.Core/Services/Monitoring/Stats/EsDriveInfo.cs b/src/EventStore.Core/Services/Monitoring/Stats/EsDriveInfo.cs
index d6676fe3c..67b75140c 100644
--- a/src/EventStore.Core/Services/Monitoring/Stats/EsDriveInfo.cs
+++ b/src/EventStore.Core/Services/Monitoring/Stats/EsDriveInfo.cs
@@ -69,7 +69,7 @@ namespace EventStore.Core.Services.Monitoring.Stats {
 
 			try {
 				if (!Directory.Exists(directory)) return null;
-				var driveInfo = ShellExecutor.GetOutput("df", string.Format("-P {0}", directory));
+				var driveInfo = ShellExecutor.GetOutput("df", $"-P {directory}");
 				var driveInfoLines =
 					driveInfo.Split(new[] {Environment.NewLine}, StringSplitOptions.RemoveEmptyEntries);
 				if (driveInfoLines.Length == 0) return null;
diff --git a/src/EventStore.Core/Services/Monitoring/Stats/StatsContainer.cs b/src/EventStore.Core/Services/Monitoring/Stats/StatsContainer.cs
index efdd682dc..d092a1af8 100644
--- a/src/EventStore.Core/Services/Monitoring/Stats/StatsContainer.cs
+++ b/src/EventStore.Core/Services/Monitoring/Stats/StatsContainer.cs
@@ -94,8 +94,7 @@ namespace EventStore.Core.Services.Monitoring.Stats {
 			var result = NewDictionary();
 
 			foreach (var entry in groupContainer) {
-				var subgroup = entry.Value as Dictionary<string, object>;
-				if (subgroup != null)
+				if (entry.Value is Dictionary<string, object> subgroup)
 					result[entry.Key] = Group(subgroup);
 				else
 					result[entry.Key] = entry.Value;
diff --git a/src/EventStore.Core/Services/Monitoring/StatsCollectorEnvelope.cs b/src/EventStore.Core/Services/Monitoring/StatsCollectorEnvelope.cs
index 4907833bc..d378b42bf 100644
--- a/src/EventStore.Core/Services/Monitoring/StatsCollectorEnvelope.cs
+++ b/src/EventStore.Core/Services/Monitoring/StatsCollectorEnvelope.cs
@@ -13,8 +13,7 @@ namespace EventStore.Core.Services.Monitoring {
 		}
 
 		public void ReplyWith<T>(T message) where T : Message {
-			var msg = message as MonitoringMessage.InternalStatsRequestResponse;
-			if (msg != null)
+			if (message is MonitoringMessage.InternalStatsRequestResponse msg)
 				_statsContainer.Add(msg.Stats);
 		}
 	}
diff --git a/src/EventStore.Core/Services/Monitoring/SystemStatsHelper.cs b/src/EventStore.Core/Services/Monitoring/SystemStatsHelper.cs
index badefb9e9..4b8a55692 100644
--- a/src/EventStore.Core/Services/Monitoring/SystemStatsHelper.cs
+++ b/src/EventStore.Core/Services/Monitoring/SystemStatsHelper.cs
@@ -71,7 +71,7 @@ namespace EventStore.Core.Services.Monitoring {
 			var drive = EsDriveInfo.FromDirectory(_dbPath, _log);
 			if (drive != null) {
 				Func<string, string, string> driveStat = (diskName, stat) =>
-					string.Format("sys-drive-{0}-{1}", diskName.Replace("\\", "").Replace(":", ""), stat);
+					$"sys-drive-{diskName.Replace("\\", "").Replace(":", "")}-{stat}";
 				stats[driveStat(drive.DiskName, "availableBytes")] = drive.AvailableBytes;
 				stats[driveStat(drive.DiskName, "totalBytes")] = drive.TotalBytes;
 				stats[driveStat(drive.DiskName, "usage")] = drive.Usage;
@@ -79,7 +79,7 @@ namespace EventStore.Core.Services.Monitoring {
 			}
 
 			Func<string, string, string> queueStat = (queueName, stat) =>
-				string.Format("es-queue-{0}-{1}", queueName, stat);
+				$"es-queue-{queueName}-{stat}";
 			var queues = QueueMonitor.Default.GetStats();
 			foreach (var queue in queues) {
 				stats[queueStat(queue.Name, "queueName")] = queue.Name;
diff --git a/src/EventStore.Core/Services/Monitoring/Utils/ProcessUtil.cs b/src/EventStore.Core/Services/Monitoring/Utils/ProcessUtil.cs
index c97b18f78..7b6912ee2 100644
--- a/src/EventStore.Core/Services/Monitoring/Utils/ProcessUtil.cs
+++ b/src/EventStore.Core/Services/Monitoring/Utils/ProcessUtil.cs
@@ -141,7 +141,7 @@ static public class ProcessUtil {
 			var processList = processes.Count == 0
 				? "None"
 				: string.Join(Environment.NewLine,
-					processes.Select(x => string.Format("[{0}] {1}", x.Id, x.MainModule.FileName)));
+					processes.Select(x => $"[{x.Id}] {x.MainModule.FileName}"));
 			logger.Error("Processes locking {path}:" + Environment.NewLine + "{processList}", path, processList);
 		} catch (Exception e) {
 			logger.Error(e, "Could not retrieve list of processes using file handle {path}", path);
diff --git a/src/EventStore.Core/Services/Monitoring/Utils/StatsCsvEncoder.cs b/src/EventStore.Core/Services/Monitoring/Utils/StatsCsvEncoder.cs
index 5754e02e0..5737ac3df 100644
--- a/src/EventStore.Core/Services/Monitoring/Utils/StatsCsvEncoder.cs
+++ b/src/EventStore.Core/Services/Monitoring/Utils/StatsCsvEncoder.cs
@@ -17,7 +17,7 @@ namespace EventStore.Core.Services.Monitoring.Utils {
 		}
 
 		private static string Prepend(this string csvLine, string column) {
-			return string.Format("{0}{1}{2}", column, Comma, csvLine);
+			return $"{column}{Comma}{csvLine}";
 		}
 
 		private static string PrependTime(this string csvLine) {
@@ -35,8 +35,7 @@ namespace EventStore.Core.Services.Monitoring.Utils {
 			if (obj == null)
 				return string.Empty;
 
-			var convertible = obj as IConvertible;
-			if (convertible != null)
+			if (obj is IConvertible convertible)
 				return convertible.ToString(CultureInfo.InvariantCulture);
 
 			return obj.ToString();
diff --git a/src/EventStore.Core/Services/PersistentSubscription/ConsumerStrategy/PersistentSubscriptionConsumerStrategyRegistry.cs b/src/EventStore.Core/Services/PersistentSubscription/ConsumerStrategy/PersistentSubscriptionConsumerStrategyRegistry.cs
index 8efd615cc..3fb9a5e06 100644
--- a/src/EventStore.Core/Services/PersistentSubscription/ConsumerStrategy/PersistentSubscriptionConsumerStrategyRegistry.cs
+++ b/src/EventStore.Core/Services/PersistentSubscription/ConsumerStrategy/PersistentSubscriptionConsumerStrategyRegistry.cs
@@ -39,7 +39,7 @@ namespace EventStore.Core.Services.PersistentSubscription.ConsumerStrategy {
 			GetInstance(string namedConsumerStrategy, string subscriptionId) {
 			if (!ValidateStrategy(namedConsumerStrategy)) {
 				throw new ArgumentException(
-					string.Format("The named consumer strategy '{0}' is unknown.", namedConsumerStrategy),
+					$"The named consumer strategy '{namedConsumerStrategy}' is unknown.",
 					"namedConsumerStrategy");
 			}
 
diff --git a/src/EventStore.Core/Services/PersistentSubscription/PersistentSubscription.cs b/src/EventStore.Core/Services/PersistentSubscription/PersistentSubscription.cs
index ee96d2644..86df8f94b 100644
--- a/src/EventStore.Core/Services/PersistentSubscription/PersistentSubscription.cs
+++ b/src/EventStore.Core/Services/PersistentSubscription/PersistentSubscription.cs
@@ -509,7 +509,7 @@ namespace EventStore.Core.Services.PersistentSubscription {
 		private bool ActionTakenForRetriedMessage(OutstandingMessage message) {
 			if (message.RetryCount < _settings.MaxRetryCount)
 				return false;
-			ParkMessage(message.ResolvedEvent, string.Format("Reached retry count of {0}", _settings.MaxRetryCount), 0);
+			ParkMessage(message.ResolvedEvent, $"Reached retry count of {_settings.MaxRetryCount}", 0);
 			return true;
 		}
 
diff --git a/src/EventStore.Core/Services/PersistentSubscription/PersistentSubscriptionMessageParker.cs b/src/EventStore.Core/Services/PersistentSubscription/PersistentSubscriptionMessageParker.cs
index ccdeec74e..0e54dd382 100644
--- a/src/EventStore.Core/Services/PersistentSubscription/PersistentSubscriptionMessageParker.cs
+++ b/src/EventStore.Core/Services/PersistentSubscription/PersistentSubscriptionMessageParker.cs
@@ -72,7 +72,7 @@ namespace EventStore.Core.Services.PersistentSubscription {
 				return Encoding.UTF8.GetString(ev.Link.Data.Span);
 			}
 
-			return string.Format("{0}@{1}", ev.Event.EventNumber, ev.Event.EventStreamId);
+			return $"{ev.Event.EventNumber}@{ev.Event.EventStreamId}";
 		}
 
 		public void BeginDelete(Action<IPersistentSubscriptionMessageParker> completed) {
diff --git a/src/EventStore.Core/Services/PersistentSubscription/PersistentSubscriptionService.cs b/src/EventStore.Core/Services/PersistentSubscription/PersistentSubscriptionService.cs
index e472a5c3c..80d32e54a 100644
--- a/src/EventStore.Core/Services/PersistentSubscription/PersistentSubscriptionService.cs
+++ b/src/EventStore.Core/Services/PersistentSubscription/PersistentSubscriptionService.cs
@@ -169,7 +169,7 @@ namespace EventStore.Core.Services.PersistentSubscription {
 				message.Envelope.ReplyWith(new ClientMessage.CreatePersistentSubscriptionCompleted(
 					message.CorrelationId,
 					ClientMessage.CreatePersistentSubscriptionCompleted.CreatePersistentSubscriptionResult.Fail,
-					string.Format("Consumer strategy {0} does not exist.", message.NamedConsumerStrategy)));
+					$"Consumer strategy {message.NamedConsumerStrategy} does not exist."));
 				return;
 			}
 
@@ -232,7 +232,7 @@ namespace EventStore.Core.Services.PersistentSubscription {
 				message.Envelope.ReplyWith(new ClientMessage.UpdatePersistentSubscriptionCompleted(
 					message.CorrelationId,
 					ClientMessage.UpdatePersistentSubscriptionCompleted.UpdatePersistentSubscriptionResult.Fail,
-					string.Format("Consumer strategy {0} does not exist.", message.NamedConsumerStrategy)));
+					$"Consumer strategy {message.NamedConsumerStrategy} does not exist."));
 				return;
 			}
 
@@ -524,7 +524,7 @@ namespace EventStore.Core.Services.PersistentSubscription {
 			message.Envelope.ReplyWith(
 				new ClientMessage.ReadNextNPersistentMessagesCompleted(message.CorrelationId,
 					ClientMessage.ReadNextNPersistentMessagesCompleted.ReadNextNPersistentMessagesResult.Success,
-					string.Format("{0} read.", messages.Length),
+					$"{messages.Length} read.",
 					messages));
 		}
 
diff --git a/src/EventStore.Core/Services/Replication/LeaderReplicationService.cs b/src/EventStore.Core/Services/Replication/LeaderReplicationService.cs
index 249f0cf07..d1b5280cd 100644
--- a/src/EventStore.Core/Services/Replication/LeaderReplicationService.cs
+++ b/src/EventStore.Core/Services/Replication/LeaderReplicationService.cs
@@ -170,8 +170,7 @@ namespace EventStore.Core.Services.Replication {
 			var connections = TcpConnectionMonitor.Default.GetTcpConnectionStats();
 			var replicaStats = new List<ReplicationMessage.ReplicationStats>();
 			foreach (var conn in connections) {
-				var tcpConn = conn as ITcpConnection;
-				if (tcpConn != null) {
+				if (conn is ITcpConnection tcpConn) {
 					var subscription = _subscriptions.FirstOrDefault(x => x.Value.ConnectionId == tcpConn.ConnectionId);
 					if (subscription.Value != null) {
 						var stats = new ReplicationMessage.ReplicationStats(subscription.Key, tcpConn.ConnectionId,
@@ -204,8 +203,7 @@ namespace EventStore.Core.Services.Replication {
 			} catch (Exception exc) {
 				Log.Error(exc, "Exception while subscribing replica. Connection will be dropped.");
 				replica.SendBadRequestAndClose(correlationId,
-					string.Format("Exception while subscribing replica. Connection will be dropped. Error: {0}",
-						exc.Message));
+					$"Exception while subscribing replica. Connection will be dropped. Error: {exc.Message}");
 				return false;
 			}
 		}
@@ -501,9 +499,7 @@ namespace EventStore.Core.Services.Replication {
 					subscription.SendMessage(msg);
 				} else {
 					if (chunkHeader.GetLocalLogPosition(subscription.LogPosition) != bulkResult.OldPosition) {
-						throw new Exception(string.Format(
-							"Replication invariant failure. SubscriptionPosition {0}, bulkResult.OldPosition {1}",
-							subscription.LogPosition, bulkResult.OldPosition));
+						throw new Exception($"Replication invariant failure. SubscriptionPosition {subscription.LogPosition}, bulkResult.OldPosition {bulkResult.OldPosition}");
 					}
 
 					var msg = new ReplicationMessage.DataChunkBulk(
diff --git a/src/EventStore.Core/Services/Replication/ReplicaService.cs b/src/EventStore.Core/Services/Replication/ReplicaService.cs
index a81cccaa7..fdfc72e80 100644
--- a/src/EventStore.Core/Services/Replication/ReplicaService.cs
+++ b/src/EventStore.Core/Services/Replication/ReplicaService.cs
@@ -130,7 +130,7 @@ namespace EventStore.Core.Services.Replication {
 
 		private void Disconnect() {
 			if (_connection != null) {
-				_connection.Stop(string.Format("Node state changed to {0}. Closing replication connection.", _state));
+				_connection.Stop($"Node state changed to {_state}. Closing replication connection.");
 				_connection = null;
 			}
 		}
@@ -158,8 +158,7 @@ namespace EventStore.Core.Services.Replication {
 			}
 
 			if (_connection != null)
-				_connection.Stop(string.Format("Reconnecting from old leader [{0}] to new leader: [{1}].",
-					_connection.RemoteEndPoint, leaderEndPoint));
+				_connection.Stop($"Reconnecting from old leader [{_connection.RemoteEndPoint}] to new leader: [{leaderEndPoint}].");
 
 			_connection = new TcpConnectionManager(_useSsl ? "leader-secure" : "leader-normal",
 				Guid.NewGuid(),
@@ -199,8 +198,7 @@ namespace EventStore.Core.Services.Replication {
 
 		public void Handle(ReplicationMessage.SubscribeToLeader message) {
 			if (_state != VNodeState.PreReplica && _state != VNodeState.PreReadOnlyReplica)
-				throw new Exception(string.Format("_state is {0}, but is expected to be {1} or {2}", _state,
-					VNodeState.PreReplica, VNodeState.PreReadOnlyReplica));
+				throw new Exception($"_state is {_state}, but is expected to be {VNodeState.PreReplica} or {VNodeState.PreReadOnlyReplica}");
 
 			var logPosition = _db.Config.WriterCheckpoint.ReadNonFlushed();
 			var epochs = _epochManager.GetLastEpochs(ClusterConsts.SubscriptionLastEpochCount).ToArray();
@@ -249,7 +247,7 @@ namespace EventStore.Core.Services.Replication {
 				}
 
 				default:
-					throw new Exception(string.Format("Unexpected state: {0}", _state));
+					throw new Exception($"Unexpected state: {_state}");
 			}
 		}
 
diff --git a/src/EventStore.Core/Services/Storage/ReaderIndex/AllReader.cs b/src/EventStore.Core/Services/Storage/ReaderIndex/AllReader.cs
index fa4b3ae9d..cb48e4421 100644
--- a/src/EventStore.Core/Services/Storage/ReaderIndex/AllReader.cs
+++ b/src/EventStore.Core/Services/Storage/ReaderIndex/AllReader.cs
@@ -159,8 +159,7 @@ namespace EventStore.Core.Services.Storage.ReaderIndex {
 						}
 
 						default:
-							throw new Exception(string.Format("Unexpected log record type: {0}.",
-								result.LogRecord.RecordType));
+							throw new Exception($"Unexpected log record type: {result.LogRecord.RecordType}.");
 					}
 				}
 
@@ -289,8 +288,7 @@ namespace EventStore.Core.Services.Storage.ReaderIndex {
 						}
 
 						default:
-							throw new Exception(string.Format("Unexpected log record type: {0}.",
-								result.LogRecord.RecordType));
+							throw new Exception($"Unexpected log record type: {result.LogRecord.RecordType}.");
 					}
 				}
 
diff --git a/src/EventStore.Core/Services/Storage/ReaderIndex/IndexCommitter.cs b/src/EventStore.Core/Services/Storage/ReaderIndex/IndexCommitter.cs
index 4979feda8..05b390198 100644
--- a/src/EventStore.Core/Services/Storage/ReaderIndex/IndexCommitter.cs
+++ b/src/EventStore.Core/Services/Storage/ReaderIndex/IndexCommitter.cs
@@ -64,8 +64,7 @@ namespace EventStore.Core.Services.Storage.ReaderIndex {
 			_indexChk.Flush();
 
 			if (_indexChk.Read() >= buildToPosition)
-				throw new Exception(string.Format("_lastCommitPosition {0} >= buildToPosition {1}", _indexChk.Read(),
-					buildToPosition));
+				throw new Exception($"_lastCommitPosition {_indexChk.Read()} >= buildToPosition {buildToPosition}");
 
 			var startTime = DateTime.UtcNow;
 			var lastTime = DateTime.UtcNow;
@@ -110,7 +109,7 @@ namespace EventStore.Core.Services.Storage.ReaderIndex {
 						case LogRecordType.System:
 							break;
 						default:
-							throw new Exception(string.Format("Unknown RecordType: {0}", result.LogRecord.RecordType));
+							throw new Exception($"Unknown RecordType: {result.LogRecord.RecordType}");
 					}
 
 					processed += 1;
@@ -186,8 +185,7 @@ namespace EventStore.Core.Services.Storage.ReaderIndex {
 					streamId = prepare.EventStreamId;
 				} else {
 					if (prepare.EventStreamId != streamId)
-						throw new Exception(string.Format("Expected stream: {0}, actual: {1}. LogPosition: {2}",
-							streamId, prepare.EventStreamId, commit.LogPosition));
+						throw new Exception($"Expected stream: {streamId}, actual: {prepare.EventStreamId}. LogPosition: {commit.LogPosition}");
 				}
 
 				eventNumber = prepare.Flags.HasAllOf(PrepareFlags.StreamDelete)
@@ -212,7 +210,7 @@ namespace EventStore.Core.Services.Storage.ReaderIndex {
 
 			if (eventNumber != EventNumber.Invalid) {
 				if (eventNumber < 0)
-					throw new Exception(string.Format("EventNumber {0} is incorrect.", eventNumber));
+					throw new Exception($"EventNumber {eventNumber} is incorrect.");
 
 				if (cacheLastEventNumber) {
 					_backend.SetStreamLastEventNumber(streamId, eventNumber);
@@ -265,8 +263,7 @@ namespace EventStore.Core.Services.Storage.ReaderIndex {
 
 				if (prepare.EventStreamId != streamId) {
 					var sb = new StringBuilder();
-					sb.Append(string.Format("ERROR: Expected stream: {0}, actual: {1}.", streamId,
-						prepare.EventStreamId));
+					sb.Append($"ERROR: Expected stream: {streamId}, actual: {prepare.EventStreamId}.");
 					sb.Append(Environment.NewLine);
 					sb.Append(Environment.NewLine);
 					sb.Append("Prepares: (" + commitedPrepares.Count + ")");
@@ -315,7 +312,7 @@ namespace EventStore.Core.Services.Storage.ReaderIndex {
 
 			if (eventNumber != EventNumber.Invalid) {
 				if (eventNumber < 0)
-					throw new Exception(string.Format("EventNumber {0} is incorrect.", eventNumber));
+					throw new Exception($"EventNumber {eventNumber} is incorrect.");
 
 				if (cacheLastEventNumber) {
 					_backend.SetStreamLastEventNumber(streamId, eventNumber);
@@ -427,8 +424,7 @@ namespace EventStore.Core.Services.Storage.ReaderIndex {
 			if (!result.Success)
 				return null;
 			if (result.LogRecord.RecordType != LogRecordType.Prepare)
-				throw new Exception(string.Format("Incorrect type of log record {0}, expected Prepare record.",
-					result.LogRecord.RecordType));
+				throw new Exception($"Incorrect type of log record {result.LogRecord.RecordType}, expected Prepare record.");
 			return (PrepareLogRecord)result.LogRecord;
 		}
 	}
diff --git a/src/EventStore.Core/Services/Storage/ReaderIndex/IndexReadAllResult.cs b/src/EventStore.Core/Services/Storage/ReaderIndex/IndexReadAllResult.cs
index 9416079c6..90a7ada7e 100644
--- a/src/EventStore.Core/Services/Storage/ReaderIndex/IndexReadAllResult.cs
+++ b/src/EventStore.Core/Services/Storage/ReaderIndex/IndexReadAllResult.cs
@@ -25,8 +25,7 @@ namespace EventStore.Core.Services.Storage.ReaderIndex {
 		}
 
 		public override string ToString() {
-			return string.Format("CurrentPos: {0}, NextPos: {1}, PrevPos: {2}, IsEndOfStream: {3}, Records: {4}",
-				CurrentPos, NextPos, PrevPos, string.Join("\n", IsEndOfStream, Records.Select(x => x.ToString())));
+			return $"CurrentPos: {CurrentPos}, NextPos: {NextPos}, PrevPos: {PrevPos}, IsEndOfStream: {string.Join("\n", IsEndOfStream, Records.Select(x => x.ToString()))}, Records: ";
 		}
 	}
 }
diff --git a/src/EventStore.Core/Services/Storage/ReaderIndex/IndexReadEventResult.cs b/src/EventStore.Core/Services/Storage/ReaderIndex/IndexReadEventResult.cs
index 9759a142c..c99018bd0 100644
--- a/src/EventStore.Core/Services/Storage/ReaderIndex/IndexReadEventResult.cs
+++ b/src/EventStore.Core/Services/Storage/ReaderIndex/IndexReadEventResult.cs
@@ -13,7 +13,7 @@ namespace EventStore.Core.Services.Storage.ReaderIndex {
 			bool originalStreamExists) {
 			if (result == ReadEventResult.Success)
 				throw new ArgumentException(
-					string.Format("Wrong ReadEventResult provided for failure constructor: {0}.", result), "result");
+					$"Wrong ReadEventResult provided for failure constructor: {result}.", "result");
 
 			Result = result;
 			Record = null;
diff --git a/src/EventStore.Core/Services/Storage/ReaderIndex/IndexReadStreamResult.cs b/src/EventStore.Core/Services/Storage/ReaderIndex/IndexReadStreamResult.cs
index 9df359a05..5c871436d 100644
--- a/src/EventStore.Core/Services/Storage/ReaderIndex/IndexReadStreamResult.cs
+++ b/src/EventStore.Core/Services/Storage/ReaderIndex/IndexReadStreamResult.cs
@@ -21,7 +21,7 @@ namespace EventStore.Core.Services.Storage.ReaderIndex {
 			StreamMetadata metadata, long lastEventNumber) {
 			if (result == ReadStreamResult.Success)
 				throw new ArgumentException(
-					String.Format("Wrong ReadStreamResult provided for failure constructor: {0}.", result), "result");
+					$"Wrong ReadStreamResult provided for failure constructor: {result}.", "result");
 
 			FromEventNumber = fromEventNumber;
 			MaxCount = maxCount;
diff --git a/src/EventStore.Core/Services/Storage/ReaderIndex/IndexReader.cs b/src/EventStore.Core/Services/Storage/ReaderIndex/IndexReader.cs
index 56e114619..f3caedab9 100644
--- a/src/EventStore.Core/Services/Storage/ReaderIndex/IndexReader.cs
+++ b/src/EventStore.Core/Services/Storage/ReaderIndex/IndexReader.cs
@@ -138,7 +138,7 @@ namespace EventStore.Core.Services.Storage.ReaderIndex {
 				.Select(x => new {x.Version, Prepare = ReadPrepareInternal(reader, x.Position)})
 				.Where(x => x.Prepare != null && x.Prepare.EventStreamId == streamId)
 				.GroupBy(x => x.Version).Select(x => x.Last()).ToList();
-			if (recordsQuery.Count() == 1) {
+			if (recordsQuery.Count == 1) {
 				return recordsQuery.First().Prepare;
 			}
 
@@ -171,8 +171,7 @@ namespace EventStore.Core.Services.Storage.ReaderIndex {
 				return null;
 
 			if (result.LogRecord.RecordType != LogRecordType.Prepare)
-				throw new Exception(string.Format("Incorrect type of log record {0}, expected Prepare record.",
-					result.LogRecord.RecordType));
+				throw new Exception($"Incorrect type of log record {result.LogRecord.RecordType}, expected Prepare record.");
 			return (PrepareLogRecord)result.LogRecord;
 		}
 
diff --git a/src/EventStore.Core/Services/Storage/ReaderIndex/IndexWriter.cs b/src/EventStore.Core/Services/Storage/ReaderIndex/IndexWriter.cs
index ad5f992e4..026347e15 100644
--- a/src/EventStore.Core/Services/Storage/ReaderIndex/IndexWriter.cs
+++ b/src/EventStore.Core/Services/Storage/ReaderIndex/IndexWriter.cs
@@ -129,8 +129,7 @@ namespace EventStore.Core.Services.Storage.ReaderIndex {
 			if (!result.Success)
 				return null;
 			if (result.LogRecord.RecordType != LogRecordType.Prepare)
-				throw new Exception(string.Format("Incorrect type of log record {0}, expected Prepare record.",
-					result.LogRecord.RecordType));
+				throw new Exception($"Incorrect type of log record {result.LogRecord.RecordType}, expected Prepare record.");
 			return (PrepareLogRecord)result.LogRecord;
 		}
 
@@ -250,8 +249,7 @@ namespace EventStore.Core.Services.Storage.ReaderIndex {
 					streamId = prepare.EventStreamId;
 
 				if (prepare.EventStreamId != streamId)
-					throw new Exception(string.Format("Expected stream: {0}, actual: {1}.", streamId,
-						prepare.EventStreamId));
+					throw new Exception($"Expected stream: {streamId}, actual: {prepare.EventStreamId}.");
 
 				eventNumber = prepare.Flags.HasAnyOf(PrepareFlags.StreamDelete)
 					? EventNumber.DeletedStream
@@ -282,8 +280,7 @@ namespace EventStore.Core.Services.Storage.ReaderIndex {
 					continue;
 
 				if (prepare.EventStreamId != streamId)
-					throw new Exception(string.Format("Expected stream: {0}, actual: {1}.", streamId,
-						prepare.EventStreamId));
+					throw new Exception($"Expected stream: {streamId}, actual: {prepare.EventStreamId}.");
 
 				eventNumber =
 					prepare.ExpectedVersion + 1; /* for committed prepare expected version is always explicit */
@@ -350,7 +347,7 @@ namespace EventStore.Core.Services.Storage.ReaderIndex {
 					x => {
 						if (!Debugger.IsAttached) Debugger.Launch();
 						else Debugger.Break();
-						throw new Exception(string.Format("CommitInfo for stream '{0}' is not present!", x));
+						throw new Exception($"CommitInfo for stream '{x}' is not present!");
 					},
 					(streamId, oldVersion) => oldVersion,
 					stickiness: -1);
@@ -360,9 +357,7 @@ namespace EventStore.Core.Services.Storage.ReaderIndex {
 						x => {
 							if (!Debugger.IsAttached) Debugger.Launch();
 							else Debugger.Break();
-							throw new Exception(string.Format(
-								"Original stream CommitInfo for meta-stream '{0}' is not present!",
-								SystemStreams.MetastreamOf(x)));
+							throw new Exception($"Original stream CommitInfo for meta-stream '{SystemStreams.MetastreamOf(x)}' is not present!");
 						},
 						(streamId, oldVersion) => oldVersion,
 						stickiness: -1);
@@ -376,7 +371,7 @@ namespace EventStore.Core.Services.Storage.ReaderIndex {
 				// decrease stickiness
 				_transactionInfoCache.Put(
 					transInfo.TransactionId,
-					x => { throw new Exception(string.Format("TransInfo for transaction ID {0} is not present!", x)); },
+					x => { throw new Exception($"TransInfo for transaction ID {x} is not present!"); },
 					(streamId, oldTransInfo) => oldTransInfo,
 					stickiness: -1);
 			}
diff --git a/src/EventStore.Core/Services/Storage/StorageReaderService.cs b/src/EventStore.Core/Services/Storage/StorageReaderService.cs
index 65d30ab0b..e33cc7fe3 100644
--- a/src/EventStore.Core/Services/Storage/StorageReaderService.cs
+++ b/src/EventStore.Core/Services/Storage/StorageReaderService.cs
@@ -56,7 +56,7 @@ namespace EventStore.Core.Services.Storage {
 			_workersMultiHandler = new MultiQueuedHandler(
 				_threadCount,
 				queueNum => new QueuedHandlerThreadPool(storageReaderBuses[queueNum],
-					string.Format("StorageReaderQueue #{0}", queueNum + 1),
+					$"StorageReaderQueue #{queueNum + 1}",
 					queueStatsManager,
 					groupName: "StorageReaderQueue",
 					watchSlowMsg: true,
diff --git a/src/EventStore.Core/Services/Storage/StorageWriterService.cs b/src/EventStore.Core/Services/Storage/StorageWriterService.cs
index e737b8c48..ab2f073c0 100644
--- a/src/EventStore.Core/Services/Storage/StorageWriterService.cs
+++ b/src/EventStore.Core/Services/Storage/StorageWriterService.cs
@@ -152,8 +152,7 @@ namespace EventStore.Core.Services.Storage {
 			if (_vnodeState != VNodeState.Leader && _vnodeState != VNodeState.ResigningLeader && message is StorageMessage.ILeaderWriteMessage) {
 				Log.Fatal("{message} appeared in StorageWriter during state {vnodeStrate}.", message.GetType().Name,
 					_vnodeState);
-				var msg = String.Format("{0} appeared in StorageWriter during state {1}.", message.GetType().Name,
-					_vnodeState);
+				var msg = $"{message.GetType().Name} appeared in StorageWriter during state {_vnodeState}.";
 				Application.Exit(ExitCode.Error, msg);
 				return;
 			}
@@ -164,7 +163,7 @@ namespace EventStore.Core.Services.Storage {
 				BlockWriter = true;
 				Log.Fatal(exc, "Unexpected error in StorageWriterService. Terminating the process...");
 				Application.Exit(ExitCode.Error,
-					string.Format("Unexpected error in StorageWriterService: {0}", exc.Message));
+					$"Unexpected error in StorageWriterService: {exc.Message}");
 			}
 		}
 
@@ -193,7 +192,7 @@ namespace EventStore.Core.Services.Storage {
 			if (_vnodeState == VNodeState.PreLeader)
 				return;
 			if (_vnodeState != VNodeState.Leader)
-				throw new Exception(string.Format("New Epoch request not in leader state. State: {0}.", _vnodeState));
+				throw new Exception($"New Epoch request not in leader state. State: {_vnodeState}.");
 			EpochManager.WriteNewEpoch(message.EpochNumber);
 			PurgeNotProcessedInfo();
 		}
@@ -203,7 +202,7 @@ namespace EventStore.Core.Services.Storage {
 			if (_vnodeState != VNodeState.PreLeader &&
 				_vnodeState != VNodeState.PreReplica &&
 				_vnodeState != VNodeState.PreReadOnlyReplica)
-				throw new Exception(string.Format("{0} appeared in {1} state.", message.GetType().Name, _vnodeState));
+				throw new Exception($"{message.GetType().Name} appeared in {_vnodeState} state.");
 
 			if (Writer.Checkpoint.Read() != Writer.Checkpoint.ReadNonFlushed())
 				Writer.Flush();
@@ -572,9 +571,7 @@ namespace EventStore.Core.Services.Storage {
 				writtenPos = newPos;
 				if (!Writer.Write(record, out newPos)) {
 					throw new Exception(
-						string.Format("Second write try failed when first writing prepare at {0}, then at {1}.",
-							prepare.LogPosition,
-							writtenPos));
+						$"Second write try failed when first writing prepare at {prepare.LogPosition}, then at {writtenPos}.");
 				}
 			}
 
@@ -595,9 +592,7 @@ namespace EventStore.Core.Services.Storage {
 				long writtenPos = newPos;
 				if (!Writer.Write(record, out newPos)) {
 					throw new Exception(
-						string.Format("Second write try failed when first writing commit at {0}, then at {1}.",
-							commit.LogPosition,
-							writtenPos));
+						$"Second write try failed when first writing commit at {commit.LogPosition}, then at {writtenPos}.");
 				}
 
 				return record;
diff --git a/src/EventStore.Core/Services/SubscriptionsService.cs b/src/EventStore.Core/Services/SubscriptionsService.cs
index 3ba4938fe..ff3167bd5 100644
--- a/src/EventStore.Core/Services/SubscriptionsService.cs
+++ b/src/EventStore.Core/Services/SubscriptionsService.cs
@@ -234,22 +234,19 @@ namespace EventStore.Core.Services {
 		}
 
 		private Message CloneReadRequestWithNoPollFlag(Message originalRequest) {
-			var streamReq = originalRequest as ClientMessage.ReadStreamEventsForward;
-			if (streamReq != null)
+			if (originalRequest is ClientMessage.ReadStreamEventsForward streamReq)
 				return new ClientMessage.ReadStreamEventsForward(
 					streamReq.InternalCorrId, streamReq.CorrelationId, streamReq.Envelope,
 					streamReq.EventStreamId, streamReq.FromEventNumber, streamReq.MaxCount, streamReq.ResolveLinkTos,
 					streamReq.RequireLeader, streamReq.ValidationStreamVersion, streamReq.User);
 
-			var allReq = originalRequest as ClientMessage.ReadAllEventsForward;
-			if (allReq != null)
+			if (originalRequest is ClientMessage.ReadAllEventsForward allReq)
 				return new ClientMessage.ReadAllEventsForward(
 					allReq.InternalCorrId, allReq.CorrelationId, allReq.Envelope,
 					allReq.CommitPosition, allReq.PreparePosition, allReq.MaxCount, allReq.ResolveLinkTos,
 					allReq.RequireLeader, allReq.ValidationTfLastCommitPosition, allReq.User);
 
-			throw new Exception(string.Format("Unexpected read request of type {0} for long polling: {1}.",
-				originalRequest.GetType(), originalRequest));
+			throw new Exception($"Unexpected read request of type {originalRequest.GetType()} for long polling: {originalRequest}.");
 		}
 
 		public void Handle(StorageMessage.EventCommitted message) {
diff --git a/src/EventStore.Core/Services/Transport/Http/AutoEventConverter.cs b/src/EventStore.Core/Services/Transport/Http/AutoEventConverter.cs
index 69d1d4fbb..7e2bf1a93 100644
--- a/src/EventStore.Core/Services/Transport/Http/AutoEventConverter.cs
+++ b/src/EventStore.Core/Services/Transport/Http/AutoEventConverter.cs
@@ -163,9 +163,9 @@ namespace EventStore.Core.Services.Transport.Http {
 			if (obj is JObject || obj is JArray) {
 				isJson = true;
 				return Helper.UTF8NoBom.GetBytes(Codec.Json.To(obj));
-			} else if(obj is string){
+			} else if(obj is string s){
 				try{
-					var jsonObject = JsonConvert.DeserializeObject((string)obj);
+					var jsonObject = JsonConvert.DeserializeObject(s);
 					if(jsonObject is JObject || jsonObject is JArray){
 						isJson = true;
 						return Helper.UTF8NoBom.GetBytes(Codec.Json.To(jsonObject));
diff --git a/src/EventStore.Core/Services/Transport/Http/Configure.cs b/src/EventStore.Core/Services/Transport/Http/Configure.cs
index 399065a62..44e19fade 100644
--- a/src/EventStore.Core/Services/Transport/Http/Configure.cs
+++ b/src/EventStore.Core/Services/Transport/Http/Configure.cs
@@ -34,21 +34,21 @@ namespace EventStore.Core.Services.Transport.Http {
 				headrs.Add(new KeyValuePair<string, string>(
 					"Cache-Control",
 					cacheSeconds.HasValue
-						? string.Format("max-age={0}, {1}", cacheSeconds, isCachePublic ? "public" : "private")
+						? $"max-age={cacheSeconds}, {(isCachePublic ? "public" : "private")}"
 						: "max-age=0, no-cache, must-revalidate"));
 			}
 
 			headrs.Add(new KeyValuePair<string, string>("Vary", "Accept"));
 			if (etag.IsNotEmptyString())
-				headrs.Add(new KeyValuePair<string, string>("ETag", string.Format("\"{0}\"", etag)));
+				headrs.Add(new KeyValuePair<string, string>("ETag", $"\"{etag}\""));
 			return new ResponseConfiguration(HttpStatusCode.OK, "OK", contentType, encoding, headrs);
 		}
 
 		public static ResponseConfiguration TemporaryRedirect(Uri originalUrl, string targetHost, int targetPort) {
 			var srcBase =
-				new Uri(string.Format("{0}://{1}:{2}/", originalUrl.Scheme, originalUrl.Host, originalUrl.Port),
+				new Uri($"{originalUrl.Scheme}://{originalUrl.Host}:{originalUrl.Port}/",
 					UriKind.Absolute);
-			var targetBase = new Uri(string.Format("{0}://{1}:{2}/", originalUrl.Scheme, targetHost, targetPort),
+			var targetBase = new Uri($"{originalUrl.Scheme}://{targetHost}:{targetPort}/",
 				UriKind.Absolute);
 			var forwardUri = new Uri(targetBase, srcBase.MakeRelativeUri(originalUrl));
 			return new ResponseConfiguration(HttpStatusCode.TemporaryRedirect, "Temporary Redirect", "text/plain",
@@ -58,9 +58,9 @@ namespace EventStore.Core.Services.Transport.Http {
 
 		public static ResponseConfiguration DenyRequestBecauseReadOnly(Uri originalUrl, string targetHost, int targetPort) {
 			var srcBase =
-				new Uri(string.Format("{0}://{1}:{2}/", originalUrl.Scheme, originalUrl.Host, originalUrl.Port),
+				new Uri($"{originalUrl.Scheme}://{originalUrl.Host}:{originalUrl.Port}/",
 					UriKind.Absolute);
-			var targetBase = new Uri(string.Format("{0}://{1}:{2}/", originalUrl.Scheme, targetHost, targetPort),
+			var targetBase = new Uri($"{originalUrl.Scheme}://{targetHost}:{targetPort}/",
 				UriKind.Absolute);
 			var forwardUri = new Uri(targetBase, srcBase.MakeRelativeUri(originalUrl));
 			return new ResponseConfiguration(HttpStatusCode.InternalServerError,
@@ -79,11 +79,11 @@ namespace EventStore.Core.Services.Transport.Http {
 			headrs.Add(new KeyValuePair<string, string>(
 				"Cache-Control",
 				cacheSeconds.HasValue
-					? string.Format("max-age={0}, {1}", cacheSeconds, isCachePublic ? "public" : "private")
+					? $"max-age={cacheSeconds}, {(isCachePublic ? "public" : "private")}"
 					: "max-age=0, no-cache, must-revalidate"));
 			headrs.Add(new KeyValuePair<string, string>("Vary", "Accept"));
 			if (etag.IsNotEmptyString())
-				headrs.Add(new KeyValuePair<string, string>("ETag", string.Format("\"{0}\"", etag)));
+				headrs.Add(new KeyValuePair<string, string>("ETag", $"\"{etag}\""));
 			return new ResponseConfiguration(HttpStatusCode.NotFound, "Not Found", contentType, Helper.UTF8NoBom,
 				headrs);
 		}
@@ -125,8 +125,7 @@ namespace EventStore.Core.Services.Transport.Http {
 
 		public static ResponseConfiguration EventEntry(HttpResponseConfiguratorArgs entity, Message message,
 			bool headEvent) {
-			var msg = message as ClientMessage.ReadEventCompleted;
-			if (msg != null) {
+			if (message is ClientMessage.ReadEventCompleted msg) {
 				switch (msg.Result) {
 					case ReadEventResult.Success:
 						var codec = entity.ResponseCodec;
@@ -157,8 +156,7 @@ namespace EventStore.Core.Services.Transport.Http {
 				}
 			}
 
-			var notHandled = message as ClientMessage.NotHandled;
-			if (notHandled != null)
+			if (message is ClientMessage.NotHandled notHandled)
 				return HandleNotHandled(entity.RequestedUrl, notHandled);
 			return InternalServerError();
 		}
@@ -169,8 +167,7 @@ namespace EventStore.Core.Services.Transport.Http {
 
 		public static ResponseConfiguration GetStreamEventsBackward(HttpResponseConfiguratorArgs entity,
 			Message message, bool headOfStream) {
-			var msg = message as ClientMessage.ReadStreamEventsBackwardCompleted;
-			if (msg != null) {
+			if (message is ClientMessage.ReadStreamEventsBackwardCompleted msg) {
 				switch (msg.Result) {
 					case ReadStreamResult.Success:
 						var codec = entity.ResponseCodec;
@@ -194,16 +191,14 @@ namespace EventStore.Core.Services.Transport.Http {
 				}
 			}
 
-			var notHandled = message as ClientMessage.NotHandled;
-			if (notHandled != null)
+			if (message is ClientMessage.NotHandled notHandled)
 				return HandleNotHandled(entity.RequestedUrl, notHandled);
 			return InternalServerError();
 		}
 
 		public static ResponseConfiguration
 			GetStreamEventsForward(HttpResponseConfiguratorArgs entity, Message message) {
-			var msg = message as ClientMessage.ReadStreamEventsForwardCompleted;
-			if (msg != null) {
+			if (message is ClientMessage.ReadStreamEventsForwardCompleted msg) {
 				switch (msg.Result) {
 					case ReadStreamResult.Success:
 						var codec = entity.ResponseCodec;
@@ -227,16 +222,14 @@ namespace EventStore.Core.Services.Transport.Http {
 				}
 			}
 
-			var notHandled = message as ClientMessage.NotHandled;
-			if (notHandled != null)
+			if (message is ClientMessage.NotHandled notHandled)
 				return HandleNotHandled(entity.RequestedUrl, notHandled);
 			return InternalServerError();
 		}
 
 		public static ResponseConfiguration ReadAllEventsBackwardCompleted(HttpResponseConfiguratorArgs entity,
 			Message message, bool headOfTf) {
-			var msg = message as ClientMessage.ReadAllEventsBackwardCompleted;
-			if (msg != null) {
+			if (message is ClientMessage.ReadAllEventsBackwardCompleted msg) {
 				switch (msg.Result) {
 					case ReadAllResult.Success:
 						var codec = entity.ResponseCodec;
@@ -256,16 +249,14 @@ namespace EventStore.Core.Services.Transport.Http {
 				}
 			}
 
-			var notHandled = message as ClientMessage.NotHandled;
-			if (notHandled != null)
+			if (message is ClientMessage.NotHandled notHandled)
 				return HandleNotHandled(entity.RequestedUrl, notHandled);
 			return InternalServerError();
 		}
 		
 		public static ResponseConfiguration ReadAllEventsBackwardFilteredCompleted(HttpResponseConfiguratorArgs entity,
 			Message message, bool headOfTf) {
-			var msg = message as ClientMessage.FilteredReadAllEventsBackwardCompleted;
-			if (msg != null) {
+			if (message is ClientMessage.FilteredReadAllEventsBackwardCompleted msg) {
 				switch (msg.Result) {
 					case FilteredReadAllResult.Success:
 						var codec = entity.ResponseCodec;
@@ -285,16 +276,14 @@ namespace EventStore.Core.Services.Transport.Http {
 				}
 			}
 
-			var notHandled = message as ClientMessage.NotHandled;
-			if (notHandled != null)
+			if (message is ClientMessage.NotHandled notHandled)
 				return HandleNotHandled(entity.RequestedUrl, notHandled);
 			return InternalServerError();
 		}
 
 		public static ResponseConfiguration ReadAllEventsForwardCompleted(HttpResponseConfiguratorArgs entity,
 			Message message, bool headOfTf) {
-			var msg = message as ClientMessage.ReadAllEventsForwardCompleted;
-			if (msg != null) {
+			if (message is ClientMessage.ReadAllEventsForwardCompleted msg) {
 				switch (msg.Result) {
 					case ReadAllResult.Success:
 						var codec = entity.ResponseCodec;
@@ -314,16 +303,14 @@ namespace EventStore.Core.Services.Transport.Http {
 				}
 			}
 
-			var notHandled = message as ClientMessage.NotHandled;
-			if (notHandled != null)
+			if (message is ClientMessage.NotHandled notHandled)
 				return HandleNotHandled(entity.RequestedUrl, notHandled);
 			return InternalServerError();
 		}
 		
 		public static ResponseConfiguration ReadAllEventsForwardFilteredCompleted(HttpResponseConfiguratorArgs entity,
 			Message message, bool headOfTf) {
-			var msg = message as ClientMessage.FilteredReadAllEventsForwardCompleted;
-			if (msg != null) {
+			if (message is ClientMessage.FilteredReadAllEventsForwardCompleted msg) {
 				switch (msg.Result) {
 					case FilteredReadAllResult.Success:
 						var codec = entity.ResponseCodec;
@@ -343,14 +330,13 @@ namespace EventStore.Core.Services.Transport.Http {
 				}
 			}
 
-			var notHandled = message as ClientMessage.NotHandled;
-			if (notHandled != null)
+			if (message is ClientMessage.NotHandled notHandled)
 				return HandleNotHandled(entity.RequestedUrl, notHandled);
 			return InternalServerError();
 		}
 
 		public static string GetPositionETag(long position, string contentType) {
-			return string.Format("{0}{1}{2}", position, AtomController.ETagSeparator, contentType.GetHashCode());
+			return $"{position}{AtomController.ETagSeparator}{contentType.GetHashCode()}";
 		}
 
 		private static int? GetCacheSeconds(StreamMetadata metadata) {
@@ -361,8 +347,7 @@ namespace EventStore.Core.Services.Transport.Http {
 
 		public static ResponseConfiguration WriteEventsCompleted(HttpResponseConfiguratorArgs entity, Message message,
 			string eventStreamId) {
-			var msg = message as ClientMessage.WriteEventsCompleted;
-			if (msg != null) {
+			if (message is ClientMessage.WriteEventsCompleted msg) {
 				switch (msg.Result) {
 					case OperationResult.Success:
 						var location = HostName.Combine(entity.ResponseUrl, "/streams/{0}/{1}",
@@ -390,16 +375,14 @@ namespace EventStore.Core.Services.Transport.Http {
 				}
 			}
 
-			var notHandled = message as ClientMessage.NotHandled;
-			if (notHandled != null)
+			if (message is ClientMessage.NotHandled notHandled)
 				return HandleNotHandled(entity.RequestedUrl, notHandled);
 			return InternalServerError();
 		}
 
 		public static ResponseConfiguration
 			DeleteStreamCompleted(HttpResponseConfiguratorArgs entity, Message message) {
-			var msg = message as ClientMessage.DeleteStreamCompleted;
-			if (msg != null) {
+			if (message is ClientMessage.DeleteStreamCompleted msg) {
 				switch (msg.Result) {
 					case OperationResult.Success:
 						return new ResponseConfiguration(HttpStatusCode.NoContent, "Stream deleted", "text/plain",
@@ -421,8 +404,7 @@ namespace EventStore.Core.Services.Transport.Http {
 				}
 			}
 
-			var notHandled = message as ClientMessage.NotHandled;
-			if (notHandled != null)
+			if (message is ClientMessage.NotHandled notHandled)
 				return HandleNotHandled(entity.RequestedUrl, notHandled);
 			return InternalServerError();
 		}
@@ -446,7 +428,7 @@ namespace EventStore.Core.Services.Transport.Http {
 					return DenyRequestBecauseReadOnly(requestedUri, leaderInfo.HttpAddress, leaderInfo.HttpPort);
 				}
 				default:
-					return InternalServerError(string.Format("Unknown not handled reason: {0}", notHandled.Reason));
+					return InternalServerError($"Unknown not handled reason: {notHandled.Reason}");
 			}
 		}
 
diff --git a/src/EventStore.Core/Services/Transport/Http/ControllerAction.cs b/src/EventStore.Core/Services/Transport/Http/ControllerAction.cs
index 56f65b509..f882a2c9f 100644
--- a/src/EventStore.Core/Services/Transport/Http/ControllerAction.cs
+++ b/src/EventStore.Core/Services/Transport/Http/ControllerAction.cs
@@ -59,11 +59,7 @@ namespace EventStore.Core.Services.Transport.Http {
 		}
 
 		public override string ToString() {
-			return string.Format("UriTemplate: {0}, HttpMethod: {1}, SupportedCodecs: {2}, DefaultCodec: {3}",
-				UriTemplate,
-				HttpMethod,
-				SupportedResponseCodecs,
-				DefaultResponseCodec);
+			return $"UriTemplate: {UriTemplate}, HttpMethod: {HttpMethod}, SupportedCodecs: {SupportedResponseCodecs}, DefaultCodec: {DefaultResponseCodec}";
 		}
 	}
 }
diff --git a/src/EventStore.Core/Services/Transport/Http/Controllers/AdminController.cs b/src/EventStore.Core/Services/Transport/Http/Controllers/AdminController.cs
index b3342d3d4..7eedce7c7 100644
--- a/src/EventStore.Core/Services/Transport/Http/Controllers/AdminController.cs
+++ b/src/EventStore.Core/Services/Transport/Http/Controllers/AdminController.cs
@@ -305,28 +305,28 @@ namespace EventStore.Core.Services.Transport.Http.Controllers {
 				stream = stream + "-" + scavengeId;
 
 			if (stream.IsEmptyString()) {
-				SendBadRequest(manager, string.Format("Invalid stream name '{0}'", stream));
+				SendBadRequest(manager, $"Invalid stream name '{stream}'");
 				return;
 			}
 
 			if (evNum != null && evNum != "head" && (!long.TryParse(evNum, out eventNumber) || eventNumber < 0)) {
-				SendBadRequest(manager, string.Format("'{0}' is not valid event number", evNum));
+				SendBadRequest(manager, $"'{evNum}' is not valid event number");
 				return;
 			}
 
 			if (cnt.IsNotEmptyString() && (!int.TryParse(cnt, out count) || count <= 0)) {
-				SendBadRequest(manager, string.Format("'{0}' is not valid count. Should be positive integer", cnt));
+				SendBadRequest(manager, $"'{cnt}' is not valid count. Should be positive integer");
 				return;
 			}
 
 			bool resolveLinkTos;
 			if (!GetResolveLinkTos(manager, out resolveLinkTos, true)) {
-				SendBadRequest(manager, string.Format("{0} header in wrong format.", SystemHeaders.ResolveLinkTos));
+				SendBadRequest(manager, $"{SystemHeaders.ResolveLinkTos} header in wrong format.");
 				return;
 			}
 
 			if (!GetRequireLeader(manager, out var requireLeader)) {
-				SendBadRequest(manager, string.Format("{0} header in wrong format.", SystemHeaders.RequireLeader));
+				SendBadRequest(manager, $"{SystemHeaders.RequireLeader} header in wrong format.");
 				return;
 			}
 
diff --git a/src/EventStore.Core/Services/Transport/Http/Controllers/AtomController.cs b/src/EventStore.Core/Services/Transport/Http/Controllers/AtomController.cs
index 53312eb6d..fc7a1226f 100644
--- a/src/EventStore.Core/Services/Transport/Http/Controllers/AtomController.cs
+++ b/src/EventStore.Core/Services/Transport/Http/Controllers/AtomController.cs
@@ -287,7 +287,7 @@ namespace EventStore.Core.Services.Transport.Http.Controllers {
 
 			string includedType;
 			if (!GetIncludedType(manager, out includedType)) {
-				SendBadRequest(manager, string.Format("{0} header in wrong format.", SystemHeaders.EventType));
+				SendBadRequest(manager, $"{SystemHeaders.EventType} header in wrong format.");
 				return;
 			}
 
@@ -299,7 +299,7 @@ namespace EventStore.Core.Services.Transport.Http.Controllers {
 
 			Guid includedId;
 			if (!GetIncludedId(manager, out includedId)) {
-				SendBadRequest(manager, string.Format("{0} header in wrong format.", SystemHeaders.EventId));
+				SendBadRequest(manager, $"{SystemHeaders.EventId} header in wrong format.");
 				return;
 			}
 
@@ -314,12 +314,12 @@ namespace EventStore.Core.Services.Transport.Http.Controllers {
 
 			long expectedVersion;
 			if (!GetExpectedVersion(manager, out expectedVersion)) {
-				SendBadRequest(manager, string.Format("{0} header in wrong format.", SystemHeaders.ExpectedVersion));
+				SendBadRequest(manager, $"{SystemHeaders.ExpectedVersion} header in wrong format.");
 				return;
 			}
 
 			if (!GetRequireLeader(manager, out var requireLeader)) {
-				SendBadRequest(manager, string.Format("{0} header in wrong format.", SystemHeaders.RequireLeader));
+				SendBadRequest(manager, $"{SystemHeaders.RequireLeader} header in wrong format.");
 				return;
 			}
 
@@ -342,18 +342,18 @@ namespace EventStore.Core.Services.Transport.Http.Controllers {
 
 			string includedType;
 			if (!GetIncludedType(manager, out includedType)) {
-				SendBadRequest(manager, string.Format("{0} header in wrong format.", SystemHeaders.EventType));
+				SendBadRequest(manager, $"{SystemHeaders.EventType} header in wrong format.");
 				return;
 			}
 
 			long expectedVersion;
 			if (!GetExpectedVersion(manager, out expectedVersion)) {
-				SendBadRequest(manager, string.Format("{0} header in wrong format.", SystemHeaders.ExpectedVersion));
+				SendBadRequest(manager, $"{SystemHeaders.ExpectedVersion} header in wrong format.");
 				return;
 			}
 
 			if (!GetRequireLeader(manager, out var requireLeader)) {
-				SendBadRequest(manager, string.Format("{0} header in wrong format.", SystemHeaders.RequireLeader));
+				SendBadRequest(manager, $"{SystemHeaders.RequireLeader} header in wrong format.");
 				return;
 			}
 
@@ -363,24 +363,24 @@ namespace EventStore.Core.Services.Transport.Http.Controllers {
 		private void DeleteStream(HttpEntityManager manager, UriTemplateMatch match) {
 			var stream = match.BoundVariables["stream"];
 			if (stream.IsEmptyString()) {
-				SendBadRequest(manager, string.Format("Invalid stream name '{0}'", stream));
+				SendBadRequest(manager, $"Invalid stream name '{stream}'");
 				return;
 			}
 
 			long expectedVersion;
 			if (!GetExpectedVersion(manager, out expectedVersion)) {
-				SendBadRequest(manager, string.Format("{0} header in wrong format.", SystemHeaders.ExpectedVersion));
+				SendBadRequest(manager, $"{SystemHeaders.ExpectedVersion} header in wrong format.");
 				return;
 			}
 
 			if (!GetRequireLeader(manager, out var requireLeader)) {
-				SendBadRequest(manager, string.Format("{0} header in wrong format.", SystemHeaders.RequireLeader));
+				SendBadRequest(manager, $"{SystemHeaders.RequireLeader} header in wrong format.");
 				return;
 			}
 
 			bool hardDelete;
 			if (!GetHardDelete(manager, out hardDelete)) {
-				SendBadRequest(manager, string.Format("{0} header in wrong format.", SystemHeaders.HardDelete));
+				SendBadRequest(manager, $"{SystemHeaders.HardDelete} header in wrong format.");
 				return;
 			}
 
@@ -406,23 +406,23 @@ namespace EventStore.Core.Services.Transport.Http.Controllers {
 			var embed = GetEmbedLevel(manager, match, EmbedLevel.TryHarder);
 
 			if (stream.IsEmptyString()) {
-				SendBadRequest(manager, string.Format("Invalid stream name '{0}'", stream));
+				SendBadRequest(manager, $"Invalid stream name '{stream}'");
 				return;
 			}
 
 			if (evNum != "head" && (!long.TryParse(evNum, out eventNumber) || eventNumber < 0)) {
-				SendBadRequest(manager, string.Format("'{0}' is not valid event number", evNum));
+				SendBadRequest(manager, $"'{evNum}' is not valid event number");
 				return;
 			}
 
 			bool resolveLinkTos;
 			if (!GetResolveLinkTos(manager, out resolveLinkTos, true)) {
-				SendBadRequest(manager, string.Format("{0} header in wrong format.", SystemHeaders.ResolveLinkTos));
+				SendBadRequest(manager, $"{SystemHeaders.ResolveLinkTos} header in wrong format.");
 				return;
 			}
 
 			if (!GetRequireLeader(manager, out var requireLeader)) {
-				SendBadRequest(manager, string.Format("{0} header in wrong format.", SystemHeaders.RequireLeader));
+				SendBadRequest(manager, $"{SystemHeaders.RequireLeader} header in wrong format.");
 				return;
 			}
 
@@ -442,28 +442,28 @@ namespace EventStore.Core.Services.Transport.Http.Controllers {
 			var embed = GetEmbedLevel(manager, match);
 
 			if (stream.IsEmptyString()) {
-				SendBadRequest(manager, string.Format("Invalid stream name '{0}'", stream));
+				SendBadRequest(manager, $"Invalid stream name '{stream}'");
 				return;
 			}
 
 			if (evNum != null && evNum != "head" && (!long.TryParse(evNum, out eventNumber) || eventNumber < 0)) {
-				SendBadRequest(manager, string.Format("'{0}' is not valid event number", evNum));
+				SendBadRequest(manager, $"'{evNum}' is not valid event number");
 				return;
 			}
 
 			if (cnt.IsNotEmptyString() && (!int.TryParse(cnt, out count) || count <= 0)) {
-				SendBadRequest(manager, string.Format("'{0}' is not valid count. Should be positive integer", cnt));
+				SendBadRequest(manager, $"'{cnt}' is not valid count. Should be positive integer");
 				return;
 			}
 
 			bool resolveLinkTos;
 			if (!GetResolveLinkTos(manager, out resolveLinkTos, true)) {
-				SendBadRequest(manager, string.Format("{0} header in wrong format.", SystemHeaders.ResolveLinkTos));
+				SendBadRequest(manager, $"{SystemHeaders.ResolveLinkTos} header in wrong format.");
 				return;
 			}
 
 			if (!GetRequireLeader(manager, out var requireLeader)) {
-				SendBadRequest(manager, string.Format("{0} header in wrong format.", SystemHeaders.RequireLeader));
+				SendBadRequest(manager, $"{SystemHeaders.RequireLeader} header in wrong format.");
 				return;
 			}
 
@@ -482,22 +482,22 @@ namespace EventStore.Core.Services.Transport.Http.Controllers {
 			var embed = GetEmbedLevel(manager, match);
 
 			if (stream.IsEmptyString())
-				return SendBadRequest(manager, string.Format("Invalid stream name '{0}'", stream));
+				return SendBadRequest(manager, $"Invalid stream name '{stream}'");
 			if (evNum.IsEmptyString() || !long.TryParse(evNum, out eventNumber) || eventNumber < 0)
-				return SendBadRequest(manager, string.Format("'{0}' is not valid event number", evNum));
+				return SendBadRequest(manager, $"'{evNum}' is not valid event number");
 			if (cnt.IsEmptyString() || !int.TryParse(cnt, out count) || count <= 0)
 				return SendBadRequest(manager,
-					string.Format("'{0}' is not valid count. Should be positive integer", cnt));
+					$"'{cnt}' is not valid count. Should be positive integer");
 			bool resolveLinkTos;
 			if (!GetResolveLinkTos(manager, out resolveLinkTos, true))
 				return SendBadRequest(manager,
-					string.Format("{0} header in wrong format.", SystemHeaders.ResolveLinkTos));
+					$"{SystemHeaders.ResolveLinkTos} header in wrong format.");
 			if (!GetRequireLeader(manager, out var requireLeader))
 				return SendBadRequest(manager,
-					string.Format("{0} header in wrong format.", SystemHeaders.RequireLeader));
+					$"{SystemHeaders.RequireLeader} header in wrong format.");
 			TimeSpan? longPollTimeout;
 			if (!GetLongPoll(manager, out longPollTimeout))
-				return SendBadRequest(manager, string.Format("{0} header in wrong format.", SystemHeaders.LongPoll));
+				return SendBadRequest(manager, $"{SystemHeaders.LongPoll} header in wrong format.");
 			var etag = GetETagStreamVersion(manager);
 
 			GetStreamEventsForward(manager, stream, eventNumber, count, resolveLinkTos, requireLeader, etag,
@@ -516,7 +516,7 @@ namespace EventStore.Core.Services.Transport.Http.Controllers {
 
 			Guid includedId;
 			if (!GetIncludedId(manager, out includedId)) {
-				SendBadRequest(manager, string.Format("{0} header in wrong format.", SystemHeaders.EventId));
+				SendBadRequest(manager, $"{SystemHeaders.EventId} header in wrong format.");
 				return;
 			}
 
@@ -530,12 +530,12 @@ namespace EventStore.Core.Services.Transport.Http.Controllers {
 			const string includedType = SystemEventTypes.StreamMetadata;
 			long expectedVersion;
 			if (!GetExpectedVersion(manager, out expectedVersion)) {
-				SendBadRequest(manager, string.Format("{0} header in wrong format.", SystemHeaders.ExpectedVersion));
+				SendBadRequest(manager, $"{SystemHeaders.ExpectedVersion} header in wrong format.");
 				return;
 			}
 
 			if (!GetRequireLeader(manager, out var requireLeader)) {
-				SendBadRequest(manager, string.Format("{0} header in wrong format.", SystemHeaders.RequireLeader));
+				SendBadRequest(manager, $"{SystemHeaders.RequireLeader} header in wrong format.");
 				return;
 			}
 
@@ -556,18 +556,18 @@ namespace EventStore.Core.Services.Transport.Http.Controllers {
 			}
 
 			if (evNum != null && evNum != "head" && (!long.TryParse(evNum, out eventNumber) || eventNumber < 0)) {
-				SendBadRequest(manager, string.Format("'{0}' is not valid event number", evNum));
+				SendBadRequest(manager, $"'{evNum}' is not valid event number");
 				return;
 			}
 
 			bool resolveLinkTos;
 			if (!GetResolveLinkTos(manager, out resolveLinkTos)) {
-				SendBadRequest(manager, string.Format("{0} header in wrong format.", SystemHeaders.ResolveLinkTos));
+				SendBadRequest(manager, $"{SystemHeaders.ResolveLinkTos} header in wrong format.");
 				return;
 			}
 
 			if (!GetRequireLeader(manager, out var requireLeader)) {
-				SendBadRequest(manager, string.Format("{0} header in wrong format.", SystemHeaders.RequireLeader));
+				SendBadRequest(manager, $"{SystemHeaders.RequireLeader} header in wrong format.");
 				return;
 			}
 
@@ -585,28 +585,28 @@ namespace EventStore.Core.Services.Transport.Http.Controllers {
 			var embed = GetEmbedLevel(manager, match);
 
 			if (stream.IsEmptyString() || SystemStreams.IsMetastream(stream)) {
-				SendBadRequest(manager, string.Format("Invalid stream name '{0}'", stream));
+				SendBadRequest(manager, $"Invalid stream name '{stream}'");
 				return;
 			}
 
 			if (evNum != null && evNum != "head" && (!long.TryParse(evNum, out eventNumber) || eventNumber < 0)) {
-				SendBadRequest(manager, string.Format("'{0}' is not valid event number", evNum));
+				SendBadRequest(manager, $"'{evNum}' is not valid event number");
 				return;
 			}
 
 			if (cnt.IsNotEmptyString() && (!int.TryParse(cnt, out count) || count <= 0)) {
-				SendBadRequest(manager, string.Format("'{0}' is not valid count. Should be positive integer", cnt));
+				SendBadRequest(manager, $"'{cnt}' is not valid count. Should be positive integer");
 				return;
 			}
 
 			bool resolveLinkTos;
 			if (!GetResolveLinkTos(manager, out resolveLinkTos)) {
-				SendBadRequest(manager, string.Format("{0} header in wrong format.", SystemHeaders.ResolveLinkTos));
+				SendBadRequest(manager, $"{SystemHeaders.ResolveLinkTos} header in wrong format.");
 				return;
 			}
 
 			if (!GetRequireLeader(manager, out var requireLeader)) {
-				SendBadRequest(manager, string.Format("{0} header in wrong format.", SystemHeaders.RequireLeader));
+				SendBadRequest(manager, $"{SystemHeaders.RequireLeader} header in wrong format.");
 				return;
 			}
 
@@ -625,22 +625,22 @@ namespace EventStore.Core.Services.Transport.Http.Controllers {
 			var embed = GetEmbedLevel(manager, match);
 
 			if (stream.IsEmptyString() || SystemStreams.IsMetastream(stream))
-				return SendBadRequest(manager, string.Format("Invalid stream name '{0}'", stream));
+				return SendBadRequest(manager, $"Invalid stream name '{stream}'");
 			if (evNum.IsEmptyString() || !long.TryParse(evNum, out eventNumber) || eventNumber < 0)
-				return SendBadRequest(manager, string.Format("'{0}' is not valid event number", evNum));
+				return SendBadRequest(manager, $"'{evNum}' is not valid event number");
 			if (cnt.IsEmptyString() || !int.TryParse(cnt, out count) || count <= 0)
 				return SendBadRequest(manager,
-					string.Format("'{0}' is not valid count. Should be positive integer", cnt));
+					$"'{cnt}' is not valid count. Should be positive integer");
 			bool resolveLinkTos;
 			if (!GetResolveLinkTos(manager, out resolveLinkTos))
 				return SendBadRequest(manager,
-					string.Format("{0} header in wrong format.", SystemHeaders.ResolveLinkTos));
+					$"{SystemHeaders.ResolveLinkTos} header in wrong format.");
 			if (!GetRequireLeader(manager, out var requireLeader))
 				return SendBadRequest(manager,
-					string.Format("{0} header in wrong format.", SystemHeaders.RequireLeader));
+					$"{SystemHeaders.RequireLeader} header in wrong format.");
 			TimeSpan? longPollTimeout;
 			if (!GetLongPoll(manager, out longPollTimeout))
-				return SendBadRequest(manager, string.Format("{0} header in wrong format.", SystemHeaders.LongPoll));
+				return SendBadRequest(manager, $"{SystemHeaders.LongPoll} header in wrong format.");
 			var etag = GetETagStreamVersion(manager);
 
 			GetStreamEventsForward(manager, SystemStreams.MetastreamOf(stream), eventNumber, count, resolveLinkTos,
@@ -660,12 +660,12 @@ namespace EventStore.Core.Services.Transport.Http.Controllers {
 			if (pos != null && pos != "head"
 							&& (!TFPos.TryParse(pos, out position) || position.PreparePosition < 0 ||
 								position.CommitPosition < 0)) {
-				SendBadRequest(manager, string.Format("Invalid position argument: {0}", pos));
+				SendBadRequest(manager, $"Invalid position argument: {pos}");
 				return;
 			}
 
 			if (cnt.IsNotEmptyString() && (!int.TryParse(cnt, out count) || count <= 0)) {
-				SendBadRequest(manager, string.Format("Invalid count argument: {0}", cnt));
+				SendBadRequest(manager, $"Invalid count argument: {cnt}");
 				return;
 			}
 
@@ -673,7 +673,7 @@ namespace EventStore.Core.Services.Transport.Http.Controllers {
 				SendBadRequest(manager, $"{SystemHeaders.ResolveLinkTos} header in wrong format.");
 			}
 			if (!GetRequireLeader(manager, out var requireLeader)) {
-				SendBadRequest(manager, string.Format("{0} header in wrong format.", SystemHeaders.RequireLeader));
+				SendBadRequest(manager, $"{SystemHeaders.RequireLeader} header in wrong format.");
 				return;
 			}
 
@@ -704,17 +704,17 @@ namespace EventStore.Core.Services.Transport.Http.Controllers {
 			if (pos != null && pos != "head"
 							&& (!TFPos.TryParse(pos, out position) || position.PreparePosition < 0 ||
 								position.CommitPosition < 0)) {
-				SendBadRequest(manager, string.Format("Invalid position argument: {0}", pos));
+				SendBadRequest(manager, $"Invalid position argument: {pos}");
 				return;
 			}
 
 			if (cnt.IsNotEmptyString() && (!int.TryParse(cnt, out count) || count <= 0)) {
-				SendBadRequest(manager, string.Format("Invalid count argument: {0}", cnt));
+				SendBadRequest(manager, $"Invalid count argument: {cnt}");
 				return;
 			}
 
 			if (!GetRequireLeader(manager, out var requireLeader)) {
-				SendBadRequest(manager, string.Format("{0} header in wrong format.", SystemHeaders.RequireLeader));
+				SendBadRequest(manager, $"{SystemHeaders.RequireLeader} header in wrong format.");
 				return;
 			}
 
@@ -739,17 +739,17 @@ namespace EventStore.Core.Services.Transport.Http.Controllers {
 			var embed = GetEmbedLevel(manager, match);
 
 			if (!TFPos.TryParse(pos, out position) || position.PreparePosition < 0 || position.CommitPosition < 0)
-				return SendBadRequest(manager, string.Format("Invalid position argument: {0}", pos));
+				return SendBadRequest(manager, $"Invalid position argument: {pos}");
 			if (!int.TryParse(cnt, out count) || count <= 0)
-				return SendBadRequest(manager, string.Format("Invalid count argument: {0}", cnt));
+				return SendBadRequest(manager, $"Invalid count argument: {cnt}");
 			if (!GetResolveLinkTos(manager, out var resolveLinkTos))
 				return SendBadRequest(manager, $"{SystemHeaders.ResolveLinkTos} header in wrong format.");
 			if (!GetRequireLeader(manager, out var requireLeader))
 				return SendBadRequest(manager,
-					string.Format("{0} header in wrong format.", SystemHeaders.RequireLeader));
+					$"{SystemHeaders.RequireLeader} header in wrong format.");
 			TimeSpan? longPollTimeout;
 			if (!GetLongPoll(manager, out longPollTimeout))
-				return SendBadRequest(manager, string.Format("{0} header in wrong format.", SystemHeaders.LongPoll));
+				return SendBadRequest(manager, $"{SystemHeaders.LongPoll} header in wrong format.");
 
 			var envelope = new SendToHttpEnvelope(_networkSendQueue,
 				manager,
@@ -777,15 +777,15 @@ namespace EventStore.Core.Services.Transport.Http.Controllers {
 			var embed = GetEmbedLevel(manager, match);
 
 			if (!TFPos.TryParse(pos, out position) || position.PreparePosition < 0 || position.CommitPosition < 0)
-				return SendBadRequest(manager, string.Format("Invalid position argument: {0}", pos));
+				return SendBadRequest(manager, $"Invalid position argument: {pos}");
 			if (!int.TryParse(cnt, out count) || count <= 0)
-				return SendBadRequest(manager, string.Format("Invalid count argument: {0}", cnt));
+				return SendBadRequest(manager, $"Invalid count argument: {cnt}");
 			if (!GetRequireLeader(manager, out var requireLeader))
 				return SendBadRequest(manager,
-					string.Format("{0} header in wrong format.", SystemHeaders.RequireLeader));
+					$"{SystemHeaders.RequireLeader} header in wrong format.");
 			TimeSpan? longPollTimeout;
 			if (!GetLongPoll(manager, out longPollTimeout))
-				return SendBadRequest(manager, string.Format("{0} header in wrong format.", SystemHeaders.LongPoll));
+				return SendBadRequest(manager, $"{SystemHeaders.LongPoll} header in wrong format.");
 
 			var envelope = new SendToHttpEnvelope(_networkSendQueue,
 				manager,
diff --git a/src/EventStore.Core/Services/Transport/Http/Controllers/PersistentSubscriptionController.cs b/src/EventStore.Core/Services/Transport/Http/Controllers/PersistentSubscriptionController.cs
index 61f23c750..d770aac3a 100644
--- a/src/EventStore.Core/Services/Transport/Http/Controllers/PersistentSubscriptionController.cs
+++ b/src/EventStore.Core/Services/Transport/Http/Controllers/PersistentSubscriptionController.cs
@@ -88,22 +88,22 @@ namespace EventStore.Core.Services.Transport.Http.Controllers {
 			var embed = GetEmbedLevel(manager, match);
 
 			if (stream.IsEmptyString())
-				return SendBadRequest(manager, string.Format("Invalid stream name '{0}'", stream));
+				return SendBadRequest(manager, $"Invalid stream name '{stream}'");
 			if (evNum.IsEmptyString() || !long.TryParse(evNum, out eventNumber) || eventNumber < 0)
-				return SendBadRequest(manager, string.Format("'{0}' is not valid event number", evNum));
+				return SendBadRequest(manager, $"'{evNum}' is not valid event number");
 			if (cnt.IsEmptyString() || !int.TryParse(cnt, out count) || count <= 0)
 				return SendBadRequest(manager,
-					string.Format("'{0}' is not valid count. Should be positive integer", cnt));
+					$"'{cnt}' is not valid count. Should be positive integer");
 			bool resolveLinkTos;
 			if (!GetResolveLinkTos(manager, out resolveLinkTos, true))
 				return SendBadRequest(manager,
-					string.Format("{0} header in wrong format.", SystemHeaders.ResolveLinkTos));
+					$"{SystemHeaders.ResolveLinkTos} header in wrong format.");
 			if (!GetRequireLeader(manager, out var requireLeader))
 				return SendBadRequest(manager,
-					string.Format("{0} header in wrong format.", SystemHeaders.RequireLeader));
+					$"{SystemHeaders.RequireLeader} header in wrong format.");
 			TimeSpan? longPollTimeout;
 			if (!GetLongPoll(manager, out longPollTimeout))
-				return SendBadRequest(manager, string.Format("{0} header in wrong format.", SystemHeaders.LongPoll));
+				return SendBadRequest(manager, $"{SystemHeaders.LongPoll} header in wrong format.");
 			var etag = GetETagStreamVersion(manager);
 
 			GetStreamEventsForward(manager, stream, eventNumber, count, resolveLinkTos, requireLeader, etag,
@@ -146,28 +146,28 @@ namespace EventStore.Core.Services.Transport.Http.Controllers {
 			var embed = GetEmbedLevel(http, match);
 
 			if (stream.IsEmptyString()) {
-				SendBadRequest(http, string.Format("Invalid stream name '{0}'", stream));
+				SendBadRequest(http, $"Invalid stream name '{stream}'");
 				return;
 			}
 
 			if (evNum != null && evNum != "head" && (!long.TryParse(evNum, out eventNumber) || eventNumber < 0)) {
-				SendBadRequest(http, string.Format("'{0}' is not valid event number", evNum));
+				SendBadRequest(http, $"'{evNum}' is not valid event number");
 				return;
 			}
 
 			if (cnt.IsNotEmptyString() && (!int.TryParse(cnt, out count) || count <= 0)) {
-				SendBadRequest(http, string.Format("'{0}' is not valid count. Should be positive integer", cnt));
+				SendBadRequest(http, $"'{cnt}' is not valid count. Should be positive integer");
 				return;
 			}
 
 			bool resolveLinkTos;
 			if (!GetResolveLinkTos(http, out resolveLinkTos, true)) {
-				SendBadRequest(http, string.Format("{0} header in wrong format.", SystemHeaders.ResolveLinkTos));
+				SendBadRequest(http, $"{SystemHeaders.ResolveLinkTos} header in wrong format.");
 				return;
 			}
 
 			if (!GetRequireLeader(http, out var requireLeader)) {
-				SendBadRequest(http, string.Format("{0} header in wrong format.", SystemHeaders.RequireLeader));
+				SendBadRequest(http, $"{SystemHeaders.RequireLeader} header in wrong format.");
 				return;
 			}
 
@@ -593,36 +593,28 @@ namespace EventStore.Core.Services.Transport.Http.Controllers {
 			if (config.BufferSize <= 0) {
 				SendBadRequest(
 					http,
-					string.Format(
-						"Buffer Size ({0}) must be positive",
-						config.BufferSize));
+					$"Buffer Size ({config.BufferSize}) must be positive");
 				return false;
 			}
 
 			if (config.LiveBufferSize <= 0) {
 				SendBadRequest(
 					http,
-					string.Format(
-						"Live Buffer Size ({0}) must be positive",
-						config.LiveBufferSize));
+					$"Live Buffer Size ({config.LiveBufferSize}) must be positive");
 				return false;
 			}
 
 			if (config.ReadBatchSize <= 0) {
 				SendBadRequest(
 					http,
-					string.Format(
-						"Read Batch Size ({0}) must be positive",
-						config.ReadBatchSize));
+					$"Read Batch Size ({config.ReadBatchSize}) must be positive");
 				return false;
 			}
 
 			if (!(config.BufferSize > config.ReadBatchSize)) {
 				SendBadRequest(
 					http,
-					string.Format(
-						"BufferSize ({0}) must be larger than ReadBatchSize ({1})",
-						config.BufferSize, config.ReadBatchSize));
+					$"BufferSize ({config.BufferSize}) must be larger than ReadBatchSize ({config.ReadBatchSize})");
 				return false;
 			}
 
@@ -776,7 +768,7 @@ namespace EventStore.Core.Services.Transport.Http.Controllers {
 			int count = DefaultNumberOfMessagesToGet;
 			if (!cnt.IsEmptyString() && (!int.TryParse(cnt, out count) || count > 100 || count < 1)) {
 				SendBadRequest(http,
-					string.Format("Message count must be an integer between 1 and 100 'count' ='{0}'", count));
+					$"Message count must be an integer between 1 and 100 'count' ='{count}'");
 				return;
 			}
 
@@ -854,12 +846,11 @@ namespace EventStore.Core.Services.Transport.Http.Controllers {
 					Links = new List<RelLink>() {
 						new RelLink(
 							MakeUrl(manager,
-								string.Format("/subscriptions/{0}/{1}/info", escapedStreamId, escapedGroupName)),
+								$"/subscriptions/{escapedStreamId}/{escapedGroupName}/info"),
 							"detail"),
 						new RelLink(
 							MakeUrl(manager,
-								string.Format("/subscriptions/{0}/{1}/replayParked", escapedStreamId,
-									escapedGroupName)), "replayParked")
+								$"/subscriptions/{escapedStreamId}/{escapedGroupName}/replayParked"), "replayParked")
 					},
 					EventStreamId = stat.EventStreamId,
 					GroupName = stat.GroupName,
@@ -877,8 +868,7 @@ namespace EventStore.Core.Services.Transport.Http.Controllers {
 					ParkedMessageUri = MakeUrl(manager,
 						string.Format(parkedMessageUriTemplate, escapedStreamId, escapedGroupName)),
 					GetMessagesUri = MakeUrl(manager,
-						string.Format("/subscriptions/{0}/{1}/{2}", escapedStreamId, escapedGroupName,
-							DefaultNumberOfMessagesToGet)),
+						$"/subscriptions/{escapedStreamId}/{escapedGroupName}/{DefaultNumberOfMessagesToGet}"),
 					Config = new SubscriptionConfigData {
 						CheckPointAfterMilliseconds = stat.CheckPointAfterMilliseconds,
 						BufferSize = stat.BufferSize,
@@ -930,7 +920,7 @@ namespace EventStore.Core.Services.Transport.Http.Controllers {
 					Links = new List<RelLink>() {
 						new RelLink(
 							MakeUrl(manager,
-								string.Format("/subscriptions/{0}/{1}/info", escapedStreamId, escapedGroupName)),
+								$"/subscriptions/{escapedStreamId}/{escapedGroupName}/info"),
 							"detail"),
 					},
 					EventStreamId = stat.EventStreamId,
@@ -943,8 +933,7 @@ namespace EventStore.Core.Services.Transport.Http.Controllers {
 					ParkedMessageUri = MakeUrl(manager,
 						string.Format(parkedMessageUriTemplate, escapedStreamId, escapedGroupName)),
 					GetMessagesUri = MakeUrl(manager,
-						string.Format("/subscriptions/{0}/{1}/{2}", escapedStreamId, escapedGroupName,
-							DefaultNumberOfMessagesToGet)),
+						$"/subscriptions/{escapedStreamId}/{escapedGroupName}/{DefaultNumberOfMessagesToGet}"),
 					TotalInFlightMessages = stat.TotalInFlightMessages,
 				};
 				if (stat.Connections != null) {
diff --git a/src/EventStore.Core/Services/Transport/Http/Convert.cs b/src/EventStore.Core/Services/Transport/Http/Convert.cs
index 788e3b039..3c246bad4 100644
--- a/src/EventStore.Core/Services/Transport/Http/Convert.cs
+++ b/src/EventStore.Core/Services/Transport/Http/Convert.cs
@@ -27,7 +27,7 @@ namespace EventStore.Core.Services.Transport.Http {
 			string escapedStreamId = Uri.EscapeDataString(msg.EventStreamId);
 			var self = HostName.Combine(requestedUrl, "/streams/{0}", escapedStreamId);
 			var feed = new FeedElement();
-			feed.SetTitle(string.Format("Event stream '{0}'", msg.EventStreamId));
+			feed.SetTitle($"Event stream '{msg.EventStreamId}'");
 			feed.StreamId = msg.EventStreamId;
 			feed.SetId(self);
 			feed.SetUpdated(msg.Events.Length > 0 && msg.Events[0].Event != null
@@ -70,7 +70,7 @@ namespace EventStore.Core.Services.Transport.Http {
 			string escapedStreamId = Uri.EscapeDataString(msg.EventStreamId);
 			var self = HostName.Combine(requestedUrl, "/streams/{0}", escapedStreamId);
 			var feed = new FeedElement();
-			feed.SetTitle(string.Format("Event stream '{0}'", msg.EventStreamId));
+			feed.SetTitle($"Event stream '{msg.EventStreamId}'");
 			feed.StreamId = msg.EventStreamId;
 			feed.SetId(self);
 			feed.SetUpdated(msg.Events.Length > 0 && msg.Events[0].Event != null
@@ -91,8 +91,7 @@ namespace EventStore.Core.Services.Transport.Http {
 				HostName.Combine(requestedUrl, "/streams/{0}/head/backward/{1}", escapedStreamId, msg.MaxCount));
 			if (!msg.IsEndOfStream) {
 				if (nextEventNumber < 0)
-					throw new Exception(string.Format("nextEventNumber is negative: {0} while IsEndOfStream",
-						nextEventNumber));
+					throw new Exception($"nextEventNumber is negative: {nextEventNumber} while IsEndOfStream");
 				feed.AddLink("last",
 					HostName.Combine(requestedUrl, "/streams/{0}/{1}/forward/{2}", escapedStreamId, 0, msg.MaxCount));
 				feed.AddLink("next",
@@ -253,7 +252,7 @@ namespace EventStore.Core.Services.Transport.Http {
 			string escapedGroupName = Uri.EscapeDataString(groupName);
 			var self = HostName.Combine(requestedUrl, "/subscriptions/{0}/{1}", escapedStreamId, escapedGroupName);
 			var feed = new FeedElement();
-			feed.SetTitle(string.Format("Messages for '{0}/{1}'", streamId, groupName));
+			feed.SetTitle($"Messages for '{streamId}/{groupName}'");
 			feed.SetId(self);
 			feed.SetUpdated(msg.Events.Length > 0 && msg.Events[0].ResolvedEvent.Event != null
 				? msg.Events[msg.Events.Length - 1].ResolvedEvent.Event.TimeStamp
@@ -261,15 +260,13 @@ namespace EventStore.Core.Services.Transport.Http {
 			feed.SetAuthor(AtomSpecs.Author);
 
 			if (msg.Events != null && msg.Events.Length > 0) {
-				var ackAllQueryString = String.Format("?ids={0}",
-					String.Join(",", msg.Events.Select(x => x.ResolvedEvent.OriginalEvent.EventId)));
+				var ackAllQueryString = $"?ids={String.Join(",", msg.Events.Select(x => x.ResolvedEvent.OriginalEvent.EventId))}";
 				var ackAll =
 					HostName.Combine(requestedUrl, "/subscriptions/{0}/{1}/ack", escapedStreamId, escapedGroupName) +
 					ackAllQueryString;
 				feed.AddLink("ackAll", ackAll);
 
-				var nackAllQueryString = String.Format("?ids={0}",
-					String.Join(",", msg.Events.Select(x => x.ResolvedEvent.OriginalEvent.EventId)));
+				var nackAllQueryString = $"?ids={String.Join(",", msg.Events.Select(x => x.ResolvedEvent.OriginalEvent.EventId))}";
 				var nackAll =
 					HostName.Combine(requestedUrl, "/subscriptions/{0}/{1}/nack", escapedStreamId, escapedGroupName) +
 					nackAllQueryString;
@@ -300,7 +297,7 @@ namespace EventStore.Core.Services.Transport.Http {
 			string[] subscriptions) {
 			string escapedStreamId = Uri.EscapeDataString(streamId);
 			var descriptionDocument = new DescriptionDocument();
-			descriptionDocument.SetTitle(string.Format("Description document for '{0}'", streamId));
+			descriptionDocument.SetTitle($"Description document for '{streamId}'");
 			descriptionDocument.SetDescription(
 				@"The description document will be presented when no accept header is present or it was requested");
 
@@ -314,7 +311,7 @@ namespace EventStore.Core.Services.Transport.Http {
 			if (subscriptions != null) {
 				foreach (var group in subscriptions) {
 					descriptionDocument.AddStreamSubscription(
-						String.Format("/subscriptions/{0}/{1}", escapedStreamId, group),
+						$"/subscriptions/{escapedStreamId}/{group}",
 						Codec.CompetingXml.ContentType,
 						Codec.CompetingJson.ContentType);
 				}
@@ -423,7 +420,7 @@ namespace EventStore.Core.Services.Transport.Http {
 		private static Tuple<string, long> GetLinkData(string link) {
 			Ensure.NotNull(link, "link data cannot be null");
 			var loc = link.IndexOf("@", StringComparison.Ordinal);
-			if (loc == -1) throw new Exception(String.Format("Unable to parse link {0}", link));
+			if (loc == -1) throw new Exception($"Unable to parse link {link}");
 			var position = long.Parse(link.Substring(0, loc));
 			var stream = link.Substring(loc + 1, link.Length - loc - 1);
 			return new Tuple<string, long>(stream, position);
diff --git a/src/EventStore.Core/Services/Transport/Http/Format.cs b/src/EventStore.Core/Services/Transport/Http/Format.cs
index 5f6c52502..494c3f115 100644
--- a/src/EventStore.Core/Services/Transport/Http/Format.cs
+++ b/src/EventStore.Core/Services/Transport/Http/Format.cs
@@ -11,8 +11,7 @@ using EventStore.Core.Cluster;
 namespace EventStore.Core.Services.Transport.Http {
 	public static class Format {
 		public static string TextMessage(HttpResponseFormatterArgs entity, Message message) {
-			var textMessage = message as HttpMessage.TextMessage;
-			return textMessage != null ? entity.ResponseCodec.To(textMessage) : String.Empty;
+			return message is HttpMessage.TextMessage textMessage ? entity.ResponseCodec.To(textMessage) : String.Empty;
 		}
 
 		public static object EventEntry(HttpResponseFormatterArgs entity, Message message, EmbedLevel embed) {
@@ -104,9 +103,7 @@ namespace EventStore.Core.Services.Transport.Http {
 
 		public static string GetReplicationStatsCompleted(HttpResponseFormatterArgs entity, Message message) {
 			if (message.GetType() != typeof(ReplicationMessage.GetReplicationStatsCompleted))
-				throw new Exception(string.Format("Unexpected type of Response message: {0}, expected: {1}",
-					message.GetType().Name,
-					typeof(ReplicationMessage.GetReplicationStatsCompleted).Name));
+				throw new Exception($"Unexpected type of Response message: {message.GetType().Name}, expected: {typeof(ReplicationMessage.GetReplicationStatsCompleted).Name}");
 			var completed = message as ReplicationMessage.GetReplicationStatsCompleted;
 			return entity.ResponseCodec.To(completed.ReplicationStats);
 		}
@@ -121,12 +118,8 @@ namespace EventStore.Core.Services.Transport.Http {
 
 		public static string SendPublicGossip(HttpResponseFormatterArgs entity, Message message) {
 			if (message.GetType() != typeof(GossipMessage.SendClientGossip))
-				throw new Exception(string.Format("Unexpected type of response message: {0}, expected: {1}",
-					message.GetType().Name,
-					typeof(GossipMessage.SendClientGossip).Name));
-
-			var sendPublicGossip = message as GossipMessage.SendClientGossip;
-			return sendPublicGossip != null
+				throw new Exception($"Unexpected type of response message: {message.GetType().Name}, expected: {typeof(GossipMessage.SendClientGossip).Name}");
+			return message is GossipMessage.SendClientGossip sendPublicGossip
 				? entity.ResponseCodec.To(sendPublicGossip.ClusterInfo)
 				: string.Empty;
 		}
diff --git a/src/EventStore.Core/Services/Transport/Tcp/TcpConnectionManager.cs b/src/EventStore.Core/Services/Transport/Tcp/TcpConnectionManager.cs
index 774bbfb7a..f7778f812 100644
--- a/src/EventStore.Core/Services/Transport/Tcp/TcpConnectionManager.cs
+++ b/src/EventStore.Core/Services/Transport/Tcp/TcpConnectionManager.cs
@@ -220,7 +220,7 @@ namespace EventStore.Core.Services.Transport.Tcp {
 				_framer.UnFrameData(data);
 			} catch (PackageFramingException exc) {
 				SendBadRequestAndClose(Guid.Empty,
-					string.Format("Invalid TCP frame received. Error: {0}.", exc.Message));
+					$"Invalid TCP frame received. Error: {exc.Message}.");
 				return;
 			}
 
@@ -232,7 +232,7 @@ namespace EventStore.Core.Services.Transport.Tcp {
 			try {
 				package = TcpPackage.FromArraySegment(data);
 			} catch (Exception e) {
-				SendBadRequestAndClose(Guid.Empty, string.Format("Received bad network package. Error: {0}", e));
+				SendBadRequestAndClose(Guid.Empty, $"Received bad network package. Error: {e}");
 				return;
 			}
 
@@ -244,7 +244,7 @@ namespace EventStore.Core.Services.Transport.Tcp {
 				ProcessPackage(package);
 			} catch (Exception e) {
 				SendBadRequestAndClose(package.CorrelationId,
-					string.Format("Error while processing package. Error: {0}", e));
+					$"Error while processing package. Error: {e}");
 			}
 		}
 
@@ -339,7 +339,7 @@ namespace EventStore.Core.Services.Transport.Tcp {
 				_authorization.Authorize(message, _publisher);
 			else
 				SendBadRequest(package.CorrelationId,
-					string.Format("Could not unwrap network package for command {0}.\n{1}", package.Command, error));
+					$"Could not unwrap network package for command {package.Command}.\n{error}");
 		}
 
 		private void ReplyNotAuthenticated(Guid correlationId, string description) {
@@ -400,14 +400,14 @@ namespace EventStore.Core.Services.Transport.Tcp {
 			if (checkQueueSize) {
 				if ((queueSize = _connection.SendQueueSize) > _connectionQueueSizeThreshold) {
 					SendBadRequestAndClose(Guid.Empty,
-						string.Format("Connection queue size is too large: {0}.", queueSize));
+						$"Connection queue size is too large: {queueSize}.");
 					return;
 				}
 
 				if (_connectionPendingSendBytesThreshold > ESConsts.UnrestrictedPendingSendBytes &&
 				    (queueSendBytes = _connection.PendingSendBytes) > _connectionPendingSendBytesThreshold) {
 					SendBadRequestAndClose(Guid.Empty,
-						string.Format("Connection pending send bytes is too large: {0}.", queueSendBytes));
+						$"Connection pending send bytes is too large: {queueSendBytes}.");
 					return;
 				}
 			}
@@ -472,8 +472,7 @@ namespace EventStore.Core.Services.Transport.Tcp {
 			}
 
 			public void ReplyWith<T>(T message) where T : Message {
-				var x = _receiver.Target as IHandle<T>;
-				if (x != null)
+				if (_receiver.Target is IHandle<T> x)
 					x.Handle(message);
 			}
 		}
diff --git a/src/EventStore.Core/Services/VNode/ClusterVNodeController.cs b/src/EventStore.Core/Services/VNode/ClusterVNodeController.cs
index f25972725..5aaed3f20 100644
--- a/src/EventStore.Core/Services/VNode/ClusterVNodeController.cs
+++ b/src/EventStore.Core/Services/VNode/ClusterVNodeController.cs
@@ -106,7 +106,7 @@ namespace EventStore.Core.Services.VNode {
 				.InAnyState()
 				.When<SystemMessage.StateChangeMessage>()
 				.Do(m => Application.Exit(ExitCode.Error,
-					string.Format("{0} message was unhandled in {1}.", m.GetType().Name, GetType().Name)))
+					$"{m.GetType().Name} message was unhandled in {GetType().Name}."))
 				.When<AuthenticationMessage.AuthenticationProviderInitialized>().Do(Handle)
 				.When<AuthenticationMessage.AuthenticationProviderInitializationFailed>().Do(Handle)
 				.When<SystemMessage.SubSystemInitialized>().Do(Handle)
diff --git a/src/EventStore.Core/Services/VNode/VNodeFSM.cs b/src/EventStore.Core/Services/VNode/VNodeFSM.cs
index 611015035..5148321a2 100644
--- a/src/EventStore.Core/Services/VNode/VNodeFSM.cs
+++ b/src/EventStore.Core/Services/VNode/VNodeFSM.cs
@@ -40,7 +40,7 @@ namespace EventStore.Core.Services.VNode {
 			}
 
 			throw new InvalidOperationException(
-				string.Format("Unhandled message: {0} occured in state: {1}.", message, state));
+				$"Unhandled message: {message} occured in state: {state}.");
 		}
 
 		private bool TryHandle(VNodeState state,
@@ -97,7 +97,7 @@ namespace EventStore.Core.Services.VNode {
 				return;
 			}
 
-			throw new Exception(string.Format("Unhandled message: {0} occurred in state: {1}.", message, state));
+			throw new Exception($"Unhandled message: {message} occurred in state: {state}.");
 		}
 
 		private static bool TryHandle(VNodeState state, Action<VNodeState, Message>[] handlers, Message message,
diff --git a/src/EventStore.Core/Services/VNode/VNodeFSMBuilder.cs b/src/EventStore.Core/Services/VNode/VNodeFSMBuilder.cs
index daf7ea4ba..ce645ec2a 100644
--- a/src/EventStore.Core/Services/VNode/VNodeFSMBuilder.cs
+++ b/src/EventStore.Core/Services/VNode/VNodeFSMBuilder.cs
@@ -37,9 +37,7 @@ namespace EventStore.Core.Services.VNode {
 
 			if (stateHandlers.ContainsKey(typeof(TActualMessage)))
 				throw new InvalidOperationException(
-					string.Format("Handler already defined for state {0} and message {1}",
-						state,
-						typeof(TActualMessage).FullName));
+					$"Handler already defined for state {state} and message {typeof(TActualMessage).FullName}");
 			stateHandlers[typeof(TActualMessage)] = handler;
 		}
 
@@ -50,8 +48,7 @@ namespace EventStore.Core.Services.VNode {
 			//                                ? handler
 			//                                : (s, m) => { existingHandler(s, m); handler(s, m); };
 			if (_defaultHandlers[stateNum] != null)
-				throw new InvalidOperationException(string.Format("Default handler already defined for state {0}",
-					state));
+				throw new InvalidOperationException($"Default handler already defined for state {state}");
 			_defaultHandlers[stateNum] = handler;
 		}
 
diff --git a/src/EventStore.Core/TransactionLog/Chunks/ChunkFooter.cs b/src/EventStore.Core/TransactionLog/Chunks/ChunkFooter.cs
index 62604da33..eddb9d93e 100644
--- a/src/EventStore.Core/TransactionLog/Chunks/ChunkFooter.cs
+++ b/src/EventStore.Core/TransactionLog/Chunks/ChunkFooter.cs
@@ -28,8 +28,7 @@ namespace EventStore.Core.TransactionLog.Chunks {
 			Ensure.Nonnegative(logicalDataSize, "logicalDataSize");
 			if (logicalDataSize < physicalDataSize)
 				throw new ArgumentOutOfRangeException("logicalDataSize",
-					string.Format("LogicalDataSize {0} is less than PhysicalDataSize {1}", logicalDataSize,
-						physicalDataSize));
+					$"LogicalDataSize {logicalDataSize} is less than PhysicalDataSize {physicalDataSize}");
 			Ensure.Nonnegative(mapSize, "mapSize");
 			Ensure.NotNull(md5Hash, "md5Hash");
 			if (md5Hash.Length != ChecksumSize)
@@ -45,8 +44,7 @@ namespace EventStore.Core.TransactionLog.Chunks {
 
 			var posMapSize = isMap12Bytes ? PosMap.FullSize : PosMap.DeprecatedSize;
 			if (MapSize % posMapSize != 0)
-				throw new Exception(string.Format("Wrong MapSize {0} -- not divisible by PosMap.Size {1}.", MapSize,
-					posMapSize));
+				throw new Exception($"Wrong MapSize {MapSize} -- not divisible by PosMap.Size {posMapSize}.");
 			MapCount = mapSize / posMapSize;
 		}
 
diff --git a/src/EventStore.Core/TransactionLog/Chunks/ChunkHeader.cs b/src/EventStore.Core/TransactionLog/Chunks/ChunkHeader.cs
index ccb302fac..a6c015845 100644
--- a/src/EventStore.Core/TransactionLog/Chunks/ChunkHeader.cs
+++ b/src/EventStore.Core/TransactionLog/Chunks/ChunkHeader.cs
@@ -73,9 +73,7 @@ namespace EventStore.Core.TransactionLog.Chunks {
 
 		public long GetLocalLogPosition(long globalLogicalPosition) {
 			if (globalLogicalPosition < ChunkStartPosition || globalLogicalPosition > ChunkEndPosition) {
-				throw new Exception(string.Format(
-					"globalLogicalPosition {0} is out of chunk logical positions [{1}, {2}].",
-					globalLogicalPosition, ChunkStartPosition, ChunkEndPosition));
+				throw new Exception($"globalLogicalPosition {globalLogicalPosition} is out of chunk logical positions [{ChunkStartPosition}, {ChunkEndPosition}].");
 			}
 
 			return globalLogicalPosition - ChunkStartPosition;
diff --git a/src/EventStore.Core/TransactionLog/Chunks/TFChunk/PosMap.cs b/src/EventStore.Core/TransactionLog/Chunks/TFChunk/PosMap.cs
index 8e54f3b1e..92f925d79 100644
--- a/src/EventStore.Core/TransactionLog/Chunks/TFChunk/PosMap.cs
+++ b/src/EventStore.Core/TransactionLog/Chunks/TFChunk/PosMap.cs
@@ -32,7 +32,7 @@ namespace EventStore.Core.TransactionLog.Chunks.TFChunk {
 		}
 
 		public override string ToString() {
-			return string.Format("LogPos: {0}, ActualPos: {1}", LogPos, ActualPos);
+			return $"LogPos: {LogPos}, ActualPos: {ActualPos}";
 		}
 	}
 }
diff --git a/src/EventStore.Core/TransactionLog/Chunks/TFChunk/TFChunk.cs b/src/EventStore.Core/TransactionLog/Chunks/TFChunk/TFChunk.cs
index 40d6c58d6..e681cd416 100644
--- a/src/EventStore.Core/TransactionLog/Chunks/TFChunk/TFChunk.cs
+++ b/src/EventStore.Core/TransactionLog/Chunks/TFChunk/TFChunk.cs
@@ -71,7 +71,7 @@ namespace EventStore.Core.TransactionLog.Chunks.TFChunk {
 			get {
 				var writerWorkItem = _writerWorkItem;
 				if (writerWorkItem == null)
-					throw new InvalidOperationException(string.Format("TFChunk {0} is not in write mode.", _filename));
+					throw new InvalidOperationException($"TFChunk {_filename} is not in write mode.");
 				return (int)writerWorkItem.StreamPosition;
 			}
 		}
@@ -242,7 +242,7 @@ namespace EventStore.Core.TransactionLog.Chunks.TFChunk {
 				_chunkFooter = ReadFooter(reader.Stream);
 				if (!_chunkFooter.IsCompleted) {
 					throw new CorruptDatabaseException(new BadChunkInDatabaseException(
-						string.Format("Chunk file '{0}' should be completed, but is not.", _filename)));
+						$"Chunk file '{_filename}' should be completed, but is not."));
 				}
 
 				_logicalDataSize = _chunkFooter.LogicalDataSize;
@@ -251,11 +251,7 @@ namespace EventStore.Core.TransactionLog.Chunks.TFChunk {
 				                       ChunkFooter.Size;
 				if (_chunkHeader.Version == (byte)ChunkVersions.Unaligned && reader.Stream.Length != expectedFileSize) {
 					throw new CorruptDatabaseException(new BadChunkInDatabaseException(
-						string.Format(
-							"Chunk file '{0}' should have a file size of {1} bytes, but it has a size of {2} bytes.",
-							_filename,
-							expectedFileSize,
-							reader.Stream.Length)));
+						$"Chunk file '{_filename}' should have a file size of {expectedFileSize} bytes, but it has a size of {reader.Stream.Length} bytes."));
 				}
 			} finally {
 				ReturnReaderWorkItem(reader);
@@ -317,11 +313,7 @@ namespace EventStore.Core.TransactionLog.Chunks.TFChunk {
 				var expectedFileSize = _chunkHeader.ChunkSize + ChunkHeader.Size + ChunkFooter.Size;
 				if (_writerWorkItem.StreamLength != expectedFileSize) {
 					throw new CorruptDatabaseException(new BadChunkInDatabaseException(
-						string.Format(
-							"Chunk file '{0}' should have file size {1} bytes, but instead has {2} bytes length.",
-							_filename,
-							expectedFileSize,
-							_writerWorkItem.StreamLength)));
+						$"Chunk file '{_filename}' should have file size {expectedFileSize} bytes, but instead has {_writerWorkItem.StreamLength} bytes length."));
 				}
 			}
 
@@ -417,7 +409,7 @@ namespace EventStore.Core.TransactionLog.Chunks.TFChunk {
 			// create temp file first and set desired length
 			// if there is not enough disk space or something else prevents file to be resized as desired
 			// we'll end up with empty temp file, which won't trigger false error on next DB verification
-			var tempFilename = string.Format("{0}.{1}.tmp", _filename, Guid.NewGuid());
+			var tempFilename = $"{_filename}.{Guid.NewGuid()}.tmp";
 			var tempFile = new FileStream(tempFilename, FileMode.CreateNew, FileAccess.ReadWrite, FileShare.Read,
 				WriteBufferSize, FileOptions.SequentialScan);
 			tempFile.SetLength(fileSize);
@@ -545,9 +537,7 @@ namespace EventStore.Core.TransactionLog.Chunks.TFChunk {
 		private ChunkHeader ReadHeader(Stream stream) {
 			if (stream.Length < ChunkHeader.Size) {
 				throw new CorruptDatabaseException(new BadChunkInDatabaseException(
-					string.Format("Chunk file '{0}' is too short to even read ChunkHeader, its size is {1} bytes.",
-						_filename,
-						stream.Length)));
+					$"Chunk file '{_filename}' is too short to even read ChunkHeader, its size is {stream.Length} bytes."));
 			}
 
 			stream.Seek(0, SeekOrigin.Begin);
@@ -558,9 +548,7 @@ namespace EventStore.Core.TransactionLog.Chunks.TFChunk {
 		private ChunkFooter ReadFooter(Stream stream) {
 			if (stream.Length < ChunkFooter.Size) {
 				throw new CorruptDatabaseException(new BadChunkInDatabaseException(
-					string.Format("Chunk file '{0}' is too short to even read ChunkFooter, its size is {1} bytes.",
-						_filename,
-						stream.Length)));
+					$"Chunk file '{_filename}' is too short to even read ChunkFooter, its size is {stream.Length} bytes."));
 			}
 
 			try {
@@ -749,9 +737,7 @@ namespace EventStore.Core.TransactionLog.Chunks.TFChunk {
 			// for scavenged chunk _logicalDataSize should be at least the same as _physicalDataSize
 			if ((!ChunkHeader.IsScavenged && _logicalDataSize != _physicalDataSize)
 			    || (ChunkHeader.IsScavenged && _logicalDataSize < _physicalDataSize)) {
-				throw new Exception(string.Format(
-					"Data sizes violation. Chunk: {0}, IsScavenged: {1}, LogicalDataSize: {2}, PhysicalDataSize: {3}.",
-					FileName, ChunkHeader.IsScavenged, _logicalDataSize, _physicalDataSize));
+				throw new Exception($"Data sizes violation. Chunk: {FileName}, IsScavenged: {ChunkHeader.IsScavenged}, LogicalDataSize: {_logicalDataSize}, PhysicalDataSize: {_physicalDataSize}.");
 			}
 
 			return RecordWriteResult.Successful(oldPosition, _physicalDataSize);
@@ -1078,8 +1064,7 @@ namespace EventStore.Core.TransactionLog.Chunks.TFChunk {
 		}
 
 		public override string ToString() {
-			return string.Format("#{0}-{1} ({2})", _chunkHeader.ChunkStartNumber, _chunkHeader.ChunkEndNumber,
-				Path.GetFileName(_filename));
+			return $"#{_chunkHeader.ChunkStartNumber}-{_chunkHeader.ChunkEndNumber} ({Path.GetFileName(_filename)})";
 		}
 
 		private struct Midpoint {
@@ -1092,7 +1077,7 @@ namespace EventStore.Core.TransactionLog.Chunks.TFChunk {
 			}
 
 			public override string ToString() {
-				return string.Format("ItemIndex: {0}, LogPos: {1}", ItemIndex, LogPos);
+				return $"ItemIndex: {ItemIndex}, LogPos: {LogPos}";
 			}
 		}
 	}
diff --git a/src/EventStore.Core/TransactionLog/Chunks/TFChunk/TFChunkReadSide.cs b/src/EventStore.Core/TransactionLog/Chunks/TFChunk/TFChunkReadSide.cs
index b2559b37f..4779d60ff 100644
--- a/src/EventStore.Core/TransactionLog/Chunks/TFChunk/TFChunkReadSide.cs
+++ b/src/EventStore.Core/TransactionLog/Chunks/TFChunk/TFChunkReadSide.cs
@@ -118,7 +118,7 @@ namespace EventStore.Core.TransactionLog.Chunks.TFChunk {
 				: base(chunk) {
 				_optimizeCache = optimizeCache;
 				if (!chunk.ChunkHeader.IsScavenged)
-					throw new ArgumentException(string.Format("Chunk provided is not scavenged: {0}", chunk));
+					throw new ArgumentException($"Chunk provided is not scavenged: {chunk}");
 			}
 
 			public void Uncache() {
diff --git a/src/EventStore.Core/TransactionLog/Chunks/TFChunk/WriterWorkItem.cs b/src/EventStore.Core/TransactionLog/Chunks/TFChunk/WriterWorkItem.cs
index ce8a526a3..ab6580e48 100644
--- a/src/EventStore.Core/TransactionLog/Chunks/TFChunk/WriterWorkItem.cs
+++ b/src/EventStore.Core/TransactionLog/Chunks/TFChunk/WriterWorkItem.cs
@@ -67,8 +67,8 @@ namespace EventStore.Core.TransactionLog.Chunks.TFChunk {
 
 		public void FlushToDisk() {
 			if (_fileStream == null) return;
-			var fs = _fileStream as FileStream;
-			if (fs != null)
+
+			if (_fileStream is FileStream fs)
 				fs.FlushToDisk(); //because of broken flush in filestream in 3.5
 			else {
 				_fileStream.Flush();
diff --git a/src/EventStore.Core/TransactionLog/Chunks/TFChunkBulkReader.cs b/src/EventStore.Core/TransactionLog/Chunks/TFChunkBulkReader.cs
index 51cfa5588..a919629d3 100644
--- a/src/EventStore.Core/TransactionLog/Chunks/TFChunkBulkReader.cs
+++ b/src/EventStore.Core/TransactionLog/Chunks/TFChunkBulkReader.cs
@@ -32,7 +32,7 @@ namespace EventStore.Core.TransactionLog.Chunks {
 		public void SetRawPosition(int rawPosition) {
 			if (rawPosition >= _stream.Length)
 				throw new ArgumentOutOfRangeException("rawPosition",
-					string.Format("Raw position {0} is out of bounds.", rawPosition));
+					$"Raw position {rawPosition} is out of bounds.");
 			_stream.Position = rawPosition;
 		}
 
@@ -40,7 +40,7 @@ namespace EventStore.Core.TransactionLog.Chunks {
 			var rawPos = dataPosition + ChunkHeader.Size;
 			if (rawPos >= _stream.Length)
 				throw new ArgumentOutOfRangeException("dataPosition",
-					string.Format("Data position {0} is out of bounds.", dataPosition));
+					$"Data position {dataPosition} is out of bounds.");
 			_stream.Position = rawPos;
 		}
 
diff --git a/src/EventStore.Core/TransactionLog/Chunks/TFChunkDb.cs b/src/EventStore.Core/TransactionLog/Chunks/TFChunkDb.cs
index 62ac08ba1..c4e9d3f29 100644
--- a/src/EventStore.Core/TransactionLog/Chunks/TFChunkDb.cs
+++ b/src/EventStore.Core/TransactionLog/Chunks/TFChunkDb.cs
@@ -179,7 +179,7 @@ namespace EventStore.Core.TransactionLog.Chunks {
 						} catch (Exception exc) {
 							_log.Fatal(exc, "Verification of chunk {chunk} failed, terminating server...",
 								chunk);
-							var msg = string.Format("Verification of chunk {0} failed, terminating server...", chunk);
+							var msg = $"Verification of chunk {chunk} failed, terminating server...";
 							Application.Exit(ExitCode.Error, msg);
 							return;
 						}
@@ -205,9 +205,7 @@ namespace EventStore.Core.TransactionLog.Chunks {
 			using (var fs = new FileStream(chunkFileName, FileMode.Open, FileAccess.Read, FileShare.ReadWrite)) {
 				if (fs.Length < ChunkFooter.Size + ChunkHeader.Size) {
 					throw new CorruptDatabaseException(new BadChunkInDatabaseException(
-						string.Format(
-							"Chunk file '{0}' is bad. It does not have enough size for header and footer. File size is {1} bytes.",
-							chunkFileName, fs.Length)));
+						$"Chunk file '{chunkFileName}' is bad. It does not have enough size for header and footer. File size is {fs.Length} bytes."));
 				}
 
 				chunkHeader = ChunkHeader.FromStream(fs);
@@ -221,9 +219,7 @@ namespace EventStore.Core.TransactionLog.Chunks {
 			using (var fs = new FileStream(chunkFileName, FileMode.Open, FileAccess.Read, FileShare.ReadWrite)) {
 				if (fs.Length < ChunkFooter.Size + ChunkHeader.Size) {
 					throw new CorruptDatabaseException(new BadChunkInDatabaseException(
-						string.Format(
-							"Chunk file '{0}' is bad. It does not have enough size for header and footer. File size is {1} bytes.",
-							chunkFileName, fs.Length)));
+						$"Chunk file '{chunkFileName}' is bad. It does not have enough size for header and footer. File size is {fs.Length} bytes."));
 				}
 
 				fs.Seek(-ChunkFooter.Size, SeekOrigin.End);
@@ -245,7 +241,7 @@ namespace EventStore.Core.TransactionLog.Chunks {
 			var allFiles = Config.FileNamingStrategy.GetAllPresentFiles();
 			if (allFiles.Length != cnt) {
 				throw new CorruptDatabaseException(new ExtraneousFileFoundException(
-					string.Format("Unexpected files: {0}.", string.Join(", ", allFiles.Except(allowedFiles)))));
+					$"Unexpected files: {string.Join(", ", allFiles.Except(allowedFiles))}."));
 			}
 		}
 
diff --git a/src/EventStore.Core/TransactionLog/Chunks/TFChunkDbTruncator.cs b/src/EventStore.Core/TransactionLog/Chunks/TFChunkDbTruncator.cs
index 7c767da02..ef224ad43 100644
--- a/src/EventStore.Core/TransactionLog/Chunks/TFChunkDbTruncator.cs
+++ b/src/EventStore.Core/TransactionLog/Chunks/TFChunkDbTruncator.cs
@@ -22,7 +22,7 @@ namespace EventStore.Core.TransactionLog.Chunks {
 					"MaxTruncation is set and truncate checkpoint is out of bounds. MaxTruncation {maxTruncation} vs requested truncation {requestedTruncation} [{writerChk} => {truncateChk}].  To proceed, set MaxTruncation to -1 (no max) or greater than {requestedTruncationHint}.",
 					_config.MaxTruncation, requestedTruncation, writerChk, truncateChk, requestedTruncation);
 				throw new Exception(
-					string.Format("MaxTruncation is set ({0}) and truncate checkpoint is out of bounds (requested truncation is {1} [{2} => {3}]).", _config.MaxTruncation, requestedTruncation, writerChk, truncateChk));
+					$"MaxTruncation is set ({_config.MaxTruncation}) and truncate checkpoint is out of bounds (requested truncation is {requestedTruncation} [{writerChk} => {truncateChk}]).");
 			}
 			
 			var oldLastChunkNum = (int)(writerChk / _config.ChunkSize);
@@ -30,8 +30,7 @@ namespace EventStore.Core.TransactionLog.Chunks {
 
 			var excessiveChunks = _config.FileNamingStrategy.GetAllVersionsFor(oldLastChunkNum + 1);
 			if (excessiveChunks.Length > 0)
-				throw new Exception(string.Format("During truncation of DB excessive TFChunks were found:\n{0}.",
-					string.Join("\n", excessiveChunks)));
+				throw new Exception($"During truncation of DB excessive TFChunks were found:\n{string.Join("\n", excessiveChunks)}.");
 
 			ChunkHeader newLastChunkHeader = null;
 			string newLastChunkFilename = null;
@@ -39,7 +38,7 @@ namespace EventStore.Core.TransactionLog.Chunks {
 				var chunks = _config.FileNamingStrategy.GetAllVersionsFor(chunkNum);
 				if (chunks.Length == 0) {
 					if (chunkNum != newLastChunkNum)
-						throw new Exception(string.Format("Could not find any chunk #{0}.", chunkNum));
+						throw new Exception($"Could not find any chunk #{chunkNum}.");
 					break;
 				}
 
@@ -127,10 +126,7 @@ namespace EventStore.Core.TransactionLog.Chunks {
 			    || truncateChk < chunkHeader.ChunkStartPosition
 			    || truncateChk >= chunkHeader.ChunkEndPosition) {
 				throw new Exception(
-					string.Format(
-						"Chunk #{0}-{1} ({2}) is not correct unscavenged chunk. TruncatePosition: {3}, ChunkHeader: {4}.",
-						chunkHeader.ChunkStartNumber, chunkHeader.ChunkEndNumber, chunkFilename, truncateChk,
-						chunkHeader));
+					$"Chunk #{chunkHeader.ChunkStartNumber}-{chunkHeader.ChunkEndNumber} ({chunkFilename}) is not correct unscavenged chunk. TruncatePosition: {truncateChk}, ChunkHeader: {chunkHeader}.");
 			}
 
 			File.SetAttributes(chunkFilename, FileAttributes.Normal);
diff --git a/src/EventStore.Core/TransactionLog/Chunks/TFChunkManager.cs b/src/EventStore.Core/TransactionLog/Chunks/TFChunkManager.cs
index 2c60950b4..d904c227a 100644
--- a/src/EventStore.Core/TransactionLog/Chunks/TFChunkManager.cs
+++ b/src/EventStore.Core/TransactionLog/Chunks/TFChunkManager.cs
@@ -127,9 +127,7 @@ namespace EventStore.Core.TransactionLog.Chunks {
 
 			lock (_chunksLocker) {
 				if (chunkHeader.ChunkStartNumber != _chunksCount)
-					throw new Exception(string.Format(
-						"Received request to create a new ongoing chunk #{0}-{1}, but current chunks count is {2}.",
-						chunkHeader.ChunkStartNumber, chunkHeader.ChunkEndNumber, _chunksCount));
+					throw new Exception($"Received request to create a new ongoing chunk #{chunkHeader.ChunkStartNumber}-{chunkHeader.ChunkEndNumber}, but current chunks count is {_chunksCount}.");
 
 				var chunkName = _config.FileNamingStrategy.GetFilenameFor(chunkHeader.ChunkStartNumber, 0);
 				var chunk = TFChunk.TFChunk.CreateWithHeader(chunkName,
@@ -164,7 +162,7 @@ namespace EventStore.Core.TransactionLog.Chunks {
 			bool removeChunksWithGreaterNumbers) {
 			Ensure.NotNull(chunk, "chunk");
 			if (!chunk.IsReadOnly)
-				throw new ArgumentException(string.Format("Passed TFChunk is not completed: {0}.", chunk.FileName));
+				throw new ArgumentException($"Passed TFChunk is not completed: {chunk.FileName}.");
 
 			var chunkHeader = chunk.ChunkHeader;
 			var oldFileName = chunk.FileName;
@@ -181,7 +179,7 @@ namespace EventStore.Core.TransactionLog.Chunks {
 					chunk.WaitForDestroy(0); // should happen immediately
 				} catch (TimeoutException exc) {
 					throw new Exception(
-						string.Format("The chunk that is being switched {0} is used by someone else.", chunk), exc);
+						$"The chunk that is being switched {chunk} is used by someone else.", exc);
 				}
 
 				var newFileName =
@@ -211,8 +209,7 @@ namespace EventStore.Core.TransactionLog.Chunks {
 					_chunksCount = newChunk.ChunkHeader.ChunkEndNumber + 1;
 					RemoveChunks(chunkHeader.ChunkEndNumber + 1, oldChunksCount - 1, "Excessive");
 					if (_chunks[_chunksCount] != null)
-						throw new Exception(string.Format("Excessive chunk #{0} found after raw replication switch.",
-							_chunksCount));
+						throw new Exception($"Excessive chunk #{_chunksCount} found after raw replication switch.");
 				}
 
 				TryCacheChunk(newChunk);
@@ -292,24 +289,22 @@ namespace EventStore.Core.TransactionLog.Chunks {
 			var chunkNum = (int)(logPosition / _config.ChunkSize);
 			if (chunkNum < 0 || chunkNum >= _chunksCount)
 				throw new ArgumentOutOfRangeException("logPosition",
-					string.Format("LogPosition {0} does not have corresponding chunk in DB.", logPosition));
+					$"LogPosition {logPosition} does not have corresponding chunk in DB.");
 
 			var chunk = _chunks[chunkNum];
 			if (chunk == null)
-				throw new Exception(string.Format(
-					"Requested chunk for LogPosition {0}, which is not present in TFChunkManager.", logPosition));
+				throw new Exception($"Requested chunk for LogPosition {logPosition}, which is not present in TFChunkManager.");
 			return chunk;
 		}
 
 		public TFChunk.TFChunk GetChunk(int chunkNum) {
 			if (chunkNum < 0 || chunkNum >= _chunksCount)
 				throw new ArgumentOutOfRangeException("chunkNum",
-					string.Format("Chunk #{0} is not present in DB.", chunkNum));
+					$"Chunk #{chunkNum} is not present in DB.");
 
 			var chunk = _chunks[chunkNum];
 			if (chunk == null)
-				throw new Exception(string.Format("Requested chunk #{0}, which is not present in TFChunkManager.",
-					chunkNum));
+				throw new Exception($"Requested chunk #{chunkNum}, which is not present in TFChunkManager.");
 			return chunk;
 		}
 
diff --git a/src/EventStore.Core/TransactionLog/Chunks/TFChunkReader.cs b/src/EventStore.Core/TransactionLog/Chunks/TFChunkReader.cs
index 1b5e62dfa..8273f1c0a 100644
--- a/src/EventStore.Core/TransactionLog/Chunks/TFChunkReader.cs
+++ b/src/EventStore.Core/TransactionLog/Chunks/TFChunkReader.cs
@@ -61,9 +61,7 @@ namespace EventStore.Core.TransactionLog.Chunks {
 				} catch (FileBeingDeletedException) {
 					if (retries > MaxRetries)
 						throw new Exception(
-							string.Format(
-								"Got a file that was being deleted {0} times from TFChunkDb, likely a bug there.",
-								MaxRetries));
+							$"Got a file that was being deleted {MaxRetries} times from TFChunkDb, likely a bug there.");
 					return TryReadNextInternal(retries + 1);
 				}
 
@@ -91,9 +89,7 @@ namespace EventStore.Core.TransactionLog.Chunks {
 				var writerChk = _writerCheckpoint.Read();
 				// we allow == writerChk, that means read the very last record
 				if (pos > writerChk)
-					throw new Exception(string.Format(
-						"Requested position {0} is greater than writer checkpoint {1} when requesting to read previous record from TF.",
-						pos, writerChk));
+					throw new Exception($"Requested position {pos} is greater than writer checkpoint {writerChk} when requesting to read previous record from TF.");
 				if (pos <= 0)
 					return SeqReadResult.Failure;
 
@@ -114,9 +110,7 @@ namespace EventStore.Core.TransactionLog.Chunks {
 					CountRead(chunk.IsCached);
 				} catch (FileBeingDeletedException) {
 					if (retries > MaxRetries)
-						throw new Exception(string.Format(
-							"Got a file that was being deleted {0} times from TFChunkDb, likely a bug there.",
-							MaxRetries));
+						throw new Exception($"Got a file that was being deleted {MaxRetries} times from TFChunkDb, likely a bug there.");
 					return TryReadPrevInternal(retries + 1);
 				}
 
diff --git a/src/EventStore.Core/TransactionLog/Chunks/TFChunkScavenger.cs b/src/EventStore.Core/TransactionLog/Chunks/TFChunkScavenger.cs
index ad38d3e80..648c108a6 100644
--- a/src/EventStore.Core/TransactionLog/Chunks/TFChunkScavenger.cs
+++ b/src/EventStore.Core/TransactionLog/Chunks/TFChunkScavenger.cs
@@ -96,7 +96,7 @@ namespace EventStore.Core.TransactionLog.Chunks {
 				} catch (Exception exc) {
 					result = ScavengeResult.Failed;
 					Log.Error(exc, "SCAVENGING: error while scavenging DB.");
-					error = string.Format("Error while scavenging DB: {0}.", exc.Message);
+					error = $"Error while scavenging DB: {exc.Message}.";
 				} finally {
 					try {
 						_scavengerLog.ScavengeCompleted(result, error, sw.Elapsed);
@@ -671,10 +671,7 @@ namespace EventStore.Core.TransactionLog.Chunks {
 		private static PosMap WriteRecord(TFChunk.TFChunk newChunk, LogRecord record) {
 			var writeResult = newChunk.TryAppend(record);
 			if (!writeResult.Success) {
-				throw new Exception(string.Format(
-					"Unable to append record during scavenging. Scavenge position: {0}, Record: {1}.",
-					writeResult.OldPosition,
-					record));
+				throw new Exception($"Unable to append record during scavenging. Scavenge position: {writeResult.OldPosition}, Record: {record}.");
 			}
 
 			long logPos = newChunk.ChunkHeader.GetLocalLogPosition(record.LogPosition);
@@ -692,7 +689,7 @@ namespace EventStore.Core.TransactionLog.Chunks {
 			}
 
 			public override string ToString() {
-				return string.Format("EventNumber: {0}, KeepCommit: {1}", EventNumber, KeepCommit);
+				return $"EventNumber: {EventNumber}, KeepCommit: {KeepCommit}";
 			}
 		}
 
diff --git a/src/EventStore.Core/TransactionLog/Chunks/TFChunkScavengerLog.cs b/src/EventStore.Core/TransactionLog/Chunks/TFChunkScavengerLog.cs
index 83f465a0e..5ea353606 100644
--- a/src/EventStore.Core/TransactionLog/Chunks/TFChunkScavengerLog.cs
+++ b/src/EventStore.Core/TransactionLog/Chunks/TFChunkScavengerLog.cs
@@ -37,7 +37,7 @@ namespace EventStore.Core.TransactionLog.Chunks {
 			_retryAttempts = retryAttempts;
 			_scavengeHistoryMaxAge = scavengeHistoryMaxAge;
 
-			_streamName = string.Format("{0}-{1}", SystemStreams.ScavengesStream, scavengeId);
+			_streamName = $"{SystemStreams.ScavengesStream}-{scavengeId}";
 		}
 
 		public string ScavengeId => _scavengeId;
@@ -264,7 +264,7 @@ namespace EventStore.Core.TransactionLog.Chunks {
 						streamId, _retryAttempts, msg.Result);
 				}
 			} else {
-				string eventLinkTo = string.Format("{0}@{1}", msg.FirstEventNumber, streamId);
+				string eventLinkTo = $"{msg.FirstEventNumber}@{streamId}";
 				var linkToIndexEvent = new Event(Guid.NewGuid(), SystemEventTypes.LinkTo, false, eventLinkTo, null);
 				WriteScavengeIndexEvent(linkToIndexEvent, _retryAttempts);
 			}
diff --git a/src/EventStore.Core/TransactionLog/Chunks/TFChunkScavengerLogManager.cs b/src/EventStore.Core/TransactionLog/Chunks/TFChunkScavengerLogManager.cs
index 229bfd038..91868e893 100644
--- a/src/EventStore.Core/TransactionLog/Chunks/TFChunkScavengerLogManager.cs
+++ b/src/EventStore.Core/TransactionLog/Chunks/TFChunkScavengerLogManager.cs
@@ -249,7 +249,7 @@ namespace EventStore.Core.TransactionLog.Chunks {
 
 		class IncompleteScavengeStats {
 			public string ScavengeId { get; private set; }
-			public string ScavengeStream => string.Format("{0}-{1}", SystemStreams.ScavengesStream, ScavengeId);
+			public string ScavengeStream => $"{SystemStreams.ScavengesStream}-{ScavengeId}";
 
 			public IncompleteScavengeStats(string scavengeId) {
 				ScavengeId = scavengeId;
diff --git a/src/EventStore.Core/TransactionLog/FileNamingStrategy/VersionedPatternFileNamingStrategy.cs b/src/EventStore.Core/TransactionLog/FileNamingStrategy/VersionedPatternFileNamingStrategy.cs
index cba02f0fe..b38491814 100644
--- a/src/EventStore.Core/TransactionLog/FileNamingStrategy/VersionedPatternFileNamingStrategy.cs
+++ b/src/EventStore.Core/TransactionLog/FileNamingStrategy/VersionedPatternFileNamingStrategy.cs
@@ -23,7 +23,7 @@ namespace EventStore.Core.TransactionLog.FileNamingStrategy {
 			Ensure.Nonnegative(index, "index");
 			Ensure.Nonnegative(version, "version");
 
-			return Path.Combine(_path, string.Format("{0}{1:000000}.{2:000000}", _prefix, index, version));
+			return Path.Combine(_path, $"{_prefix}{index:000000}.{version:000000}");
 		}
 
 		public string DetermineBestVersionFilenameFor(int index) {
@@ -32,12 +32,12 @@ namespace EventStore.Core.TransactionLog.FileNamingStrategy {
 				return GetFilenameFor(index, 0);
 			int lastVersion;
 			if (!int.TryParse(allVersions[0].Substring(allVersions[0].LastIndexOf('.') + 1), out lastVersion))
-				throw new Exception(string.Format("Could not determine version from filename '{0}'.", allVersions[0]));
+				throw new Exception($"Could not determine version from filename '{allVersions[0]}'.");
 			return GetFilenameFor(index, lastVersion + 1);
 		}
 
 		public string[] GetAllVersionsFor(int index) {
-			var versions = Directory.EnumerateFiles(_path, string.Format("{0}{1:000000}.*", _prefix, index))
+			var versions = Directory.EnumerateFiles(_path, $"{_prefix}{index:000000}.*")
 				.Where(x => _chunkNamePattern.IsMatch(Path.GetFileName(x)))
 				.OrderByDescending(x => x, StringComparer.CurrentCultureIgnoreCase)
 				.ToArray();
@@ -45,14 +45,14 @@ namespace EventStore.Core.TransactionLog.FileNamingStrategy {
 		}
 
 		public string[] GetAllPresentFiles() {
-			var versions = Directory.EnumerateFiles(_path, string.Format("{0}*.*", _prefix))
+			var versions = Directory.EnumerateFiles(_path, $"{_prefix}*.*")
 				.Where(x => _chunkNamePattern.IsMatch(Path.GetFileName(x)))
 				.ToArray();
 			return versions;
 		}
 
 		public string GetTempFilename() {
-			return Path.Combine(_path, string.Format("{0}.tmp", Guid.NewGuid()));
+			return Path.Combine(_path, $"{Guid.NewGuid()}.tmp");
 		}
 
 		public string[] GetAllTempFiles() {
diff --git a/src/EventStore.Core/TransactionLog/LogRecords/CommitLogRecord.cs b/src/EventStore.Core/TransactionLog/LogRecords/CommitLogRecord.cs
index 677f5124b..80dbc0df0 100644
--- a/src/EventStore.Core/TransactionLog/LogRecords/CommitLogRecord.cs
+++ b/src/EventStore.Core/TransactionLog/LogRecords/CommitLogRecord.cs
@@ -35,8 +35,7 @@ namespace EventStore.Core.TransactionLog.LogRecords {
 			version, logPosition) {
 			if (version != LogRecordVersion.LogRecordV0 && version != LogRecordVersion.LogRecordV1)
 				throw new ArgumentException(
-					string.Format("CommitRecord version {0} is incorrect. Supported version: {1}.", version,
-						CommitRecordVersion));
+					$"CommitRecord version {version} is incorrect. Supported version: {CommitRecordVersion}.");
 
 			TransactionPosition = reader.ReadInt64();
 			FirstEventNumber = version == LogRecordVersion.LogRecordV0 ? reader.ReadInt32() : reader.ReadInt64();
diff --git a/src/EventStore.Core/TransactionLog/LogRecords/EpochRecord.cs b/src/EventStore.Core/TransactionLog/LogRecords/EpochRecord.cs
index f86264ec4..824ff01de 100644
--- a/src/EventStore.Core/TransactionLog/LogRecords/EpochRecord.cs
+++ b/src/EventStore.Core/TransactionLog/LogRecords/EpochRecord.cs
@@ -48,14 +48,7 @@ namespace EventStore.Core.TransactionLog.LogRecords {
 		}
 
 		public override string ToString() {
-			return string.Format(
-				"EpochPosition: {0}, EpochNumber: {1}, EpochId: {2}, PrevEpochPosition: {3}, TimeStamp: {4}, LeaderInstanceId: {5}",
-				EpochPosition,
-				EpochNumber,
-				EpochId,
-				PrevEpochPosition,
-				TimeStamp,
-				LeaderInstanceId);
+			return $"EpochPosition: {EpochPosition}, EpochNumber: {EpochNumber}, EpochId: {EpochId}, PrevEpochPosition: {PrevEpochPosition}, TimeStamp: {TimeStamp}, LeaderInstanceId: {LeaderInstanceId}";
 		}
 
 		public int CompareTo(object obj) {
diff --git a/src/EventStore.Core/TransactionLog/LogRecords/PrepareLogRecord.cs b/src/EventStore.Core/TransactionLog/LogRecords/PrepareLogRecord.cs
index bc957c057..ea0b785d8 100644
--- a/src/EventStore.Core/TransactionLog/LogRecords/PrepareLogRecord.cs
+++ b/src/EventStore.Core/TransactionLog/LogRecords/PrepareLogRecord.cs
@@ -114,8 +114,7 @@ namespace EventStore.Core.TransactionLog.LogRecords {
 		internal PrepareLogRecord(BinaryReader reader, byte version, long logPosition) : base(LogRecordType.Prepare,
 			version, logPosition) {
 			if (version != LogRecordVersion.LogRecordV0 && version != LogRecordVersion.LogRecordV1)
-				throw new ArgumentException(string.Format(
-					"PrepareRecord version {0} is incorrect. Supported version: {1}.", version, PrepareRecordVersion));
+				throw new ArgumentException($"PrepareRecord version {version} is incorrect. Supported version: {PrepareRecordVersion}.");
 
 			Flags = (PrepareFlags)reader.ReadUInt16();
 			TransactionPosition = reader.ReadInt64();
diff --git a/src/EventStore.Core/TransactionLog/LogRecords/SystemLogRecord.cs b/src/EventStore.Core/TransactionLog/LogRecords/SystemLogRecord.cs
index ed6f5e498..01c2d77d2 100644
--- a/src/EventStore.Core/TransactionLog/LogRecords/SystemLogRecord.cs
+++ b/src/EventStore.Core/TransactionLog/LogRecords/SystemLogRecord.cs
@@ -40,18 +40,15 @@ namespace EventStore.Core.TransactionLog.LogRecords {
 		internal SystemLogRecord(BinaryReader reader, byte version, long logPosition) : base(LogRecordType.System,
 			version, logPosition) {
 			if (version != SystemRecordVersion)
-				throw new ArgumentException(string.Format(
-					"SystemRecord version {0} is incorrect. Supported version: {1}.", version, SystemRecordVersion));
+				throw new ArgumentException($"SystemRecord version {version} is incorrect. Supported version: {SystemRecordVersion}.");
 
 			TimeStamp = new DateTime(reader.ReadInt64());
 			SystemRecordType = (SystemRecordType)reader.ReadByte();
 			if (SystemRecordType == SystemRecordType.Invalid)
-				throw new ArgumentException(string.Format("Invalid SystemRecordType {0} at LogPosition {1}.",
-					SystemRecordType, LogPosition));
+				throw new ArgumentException($"Invalid SystemRecordType {SystemRecordType} at LogPosition {LogPosition}.");
 			SystemRecordSerialization = (SystemRecordSerialization)reader.ReadByte();
 			if (SystemRecordSerialization == SystemRecordSerialization.Invalid)
-				throw new ArgumentException(string.Format("Invalid SystemRecordSerialization {0} at LogPosition {1}.",
-					SystemRecordSerialization, LogPosition));
+				throw new ArgumentException($"Invalid SystemRecordSerialization {SystemRecordSerialization} at LogPosition {LogPosition}.");
 			Reserved = reader.ReadInt64();
 
 			var dataCount = reader.ReadInt32();
@@ -61,8 +58,7 @@ namespace EventStore.Core.TransactionLog.LogRecords {
 		public EpochRecord GetEpochRecord() {
 			if (SystemRecordType != SystemRecordType.Epoch)
 				throw new ArgumentException(
-					string.Format("Unexpected type of system record. Requested: {0}, actual: {1}.",
-						SystemRecordType.Epoch, SystemRecordType));
+					$"Unexpected type of system record. Requested: {SystemRecordType.Epoch}, actual: {SystemRecordType}.");
 
 			switch (SystemRecordSerialization) {
 				case SystemRecordSerialization.Json: {
@@ -71,7 +67,7 @@ namespace EventStore.Core.TransactionLog.LogRecords {
 				}
 				default:
 					throw new ArgumentOutOfRangeException(
-						string.Format("Unexpected SystemRecordSerialization type: {0}", SystemRecordSerialization),
+						$"Unexpected SystemRecordSerialization type: {SystemRecordSerialization}",
 						"SystemRecordSerialization");
 			}
 		}
diff --git a/src/EventStore.Core/TransactionLog/ReadResults.cs b/src/EventStore.Core/TransactionLog/ReadResults.cs
index c2b77186a..81d616a86 100644
--- a/src/EventStore.Core/TransactionLog/ReadResults.cs
+++ b/src/EventStore.Core/TransactionLog/ReadResults.cs
@@ -17,11 +17,7 @@ namespace EventStore.Core.TransactionLog {
 		}
 
 		public override string ToString() {
-			return string.Format("Success: {0}, NextPosition: {1}, RecordLength: {2}, LogRecord: {3}",
-				Success,
-				NextPosition,
-				RecordLength,
-				LogRecord);
+			return $"Success: {Success}, NextPosition: {NextPosition}, RecordLength: {RecordLength}, LogRecord: {LogRecord}";
 		}
 	}
 
@@ -50,13 +46,7 @@ namespace EventStore.Core.TransactionLog {
 		}
 
 		public override string ToString() {
-			return string.Format(
-				"Success: {0}, RecordLength: {1}, RecordPrePosition: {2}, RecordPostPosition: {3}, LogRecord: {4}",
-				Success,
-				RecordLength,
-				RecordPrePosition,
-				RecordPostPosition,
-				LogRecord);
+			return $"Success: {Success}, RecordLength: {RecordLength}, RecordPrePosition: {RecordPrePosition}, RecordPostPosition: {RecordPostPosition}, LogRecord: {LogRecord}";
 		}
 	}
 }
diff --git a/src/EventStore.Core/TransactionLog/RecordWriteResult.cs b/src/EventStore.Core/TransactionLog/RecordWriteResult.cs
index 356665c6c..26ffa0ea3 100644
--- a/src/EventStore.Core/TransactionLog/RecordWriteResult.cs
+++ b/src/EventStore.Core/TransactionLog/RecordWriteResult.cs
@@ -24,7 +24,7 @@ namespace EventStore.Core.TransactionLog {
 		}
 
 		public override string ToString() {
-			return string.Format("Success: {0}, OldPosition: {1}, NewPosition: {2}", Success, OldPosition, NewPosition);
+			return $"Success: {Success}, OldPosition: {OldPosition}, NewPosition: {NewPosition}";
 		}
 	}
 }
diff --git a/src/EventStore.NETCore.Compatibility/System.UriTemplate/UriTemplateCompoundPathSegment.cs b/src/EventStore.NETCore.Compatibility/System.UriTemplate/UriTemplateCompoundPathSegment.cs
index 576529366..c2578e20f 100644
--- a/src/EventStore.NETCore.Compatibility/System.UriTemplate/UriTemplateCompoundPathSegment.cs
+++ b/src/EventStore.NETCore.Compatibility/System.UriTemplate/UriTemplateCompoundPathSegment.cs
@@ -221,21 +221,13 @@ namespace System
             {
                 if (string.IsNullOrEmpty(this.varLitPairs[varLitPairs.Count - 1].Literal))
                 {
-                    if (boundParameters != null)
-                    {
-                        boundParameters.Add(this.varLitPairs[varLitPairs.Count - 1].VarName,
-                            segment.Substring(segmentPosition));
-                    }
+                    boundParameters?.Add(this.varLitPairs[varLitPairs.Count - 1].VarName, segment.Substring(segmentPosition));
                     return true;
                 }
                 else if ((segmentPosition + this.varLitPairs[varLitPairs.Count - 1].Literal.Length < segment.Length) &&
                     segment.EndsWith(this.varLitPairs[varLitPairs.Count - 1].Literal, StringComparison.Ordinal))
                 {
-                    if (boundParameters != null)
-                    {
-                        boundParameters.Add(this.varLitPairs[varLitPairs.Count - 1].VarName,
-                            segment.Substring(segmentPosition, segment.Length - segmentPosition - this.varLitPairs[varLitPairs.Count - 1].Literal.Length));
-                    }
+                    boundParameters?.Add(this.varLitPairs[varLitPairs.Count - 1].VarName, segment.Substring(segmentPosition, segment.Length - segmentPosition - this.varLitPairs[varLitPairs.Count - 1].Literal.Length));
                     return true;
                 }
                 else
diff --git a/src/EventStore.NETCore.Compatibility/System.UriTemplate/stubs/SR.cs b/src/EventStore.NETCore.Compatibility/System.UriTemplate/stubs/SR.cs
index 9c94e1f70..7d99742ac 100644
--- a/src/EventStore.NETCore.Compatibility/System.UriTemplate/stubs/SR.cs
+++ b/src/EventStore.NETCore.Compatibility/System.UriTemplate/stubs/SR.cs
@@ -101,8 +101,7 @@ namespace System.ServiceModel
             }
             for (int i = 0; i < args.Length; i++)
             {
-                string str2 = args[i] as string;
-                if ((str2 != null) && (str2.Length > 0x400))
+                if ((args[i] is string str2) && (str2.Length > 0x400))
                 {
                     args[i] = str2.Substring(0, 0x3fd) + "...";
                 }
diff --git a/src/EventStore.Projections.Core.Tests/ClientAPI/projectionsManager/projectionsManagerTests.cs b/src/EventStore.Projections.Core.Tests/ClientAPI/projectionsManager/projectionsManagerTests.cs
index 8724cd012..1c1a7c07f 100644
--- a/src/EventStore.Projections.Core.Tests/ClientAPI/projectionsManager/projectionsManagerTests.cs
+++ b/src/EventStore.Projections.Core.Tests/ClientAPI/projectionsManager/projectionsManagerTests.cs
@@ -95,7 +95,7 @@ namespace EventStore.Projections.Core.Tests.ClientAPI.projectionsManager {
 		[Test]
 		public async Task should_have_turn_on_emit_to_stream() {
 			var events = await _connection
-				.ReadEventAsync(string.Format("$projections-{0}", _projectionId), 0, true, _credentials);
+				.ReadEventAsync($"$projections-{_projectionId}", 0, true, _credentials);
 			var data = System.Text.Encoding.UTF8.GetString(events.Event.Value.Event.Data);
 			var eventData = data.ParseJson<JObject>();
 			Assert.IsTrue((bool)eventData["emitEnabled"]);
@@ -136,7 +136,7 @@ namespace EventStore.Projections.Core.Tests.ClientAPI.projectionsManager {
 		[Test]
 		public async Task should_enable_track_emitted_streams() {
 			var events = await _connection
-				.ReadEventAsync(string.Format("$projections-{0}", _projectionId), 0, true, _credentials);
+				.ReadEventAsync($"$projections-{_projectionId}", 0, true, _credentials);
 			var data = System.Text.Encoding.UTF8.GetString(events.Event.Value.Event.Data);
 			var eventData = data.ParseJson<JObject>();
 			Assert.IsTrue((bool)eventData["trackEmittedStreams"]);
diff --git a/src/EventStore.Projections.Core.Tests/Other/json_serialization.cs b/src/EventStore.Projections.Core.Tests/Other/json_serialization.cs
index 62e6abdd7..0f223e4ee 100644
--- a/src/EventStore.Projections.Core.Tests/Other/json_serialization.cs
+++ b/src/EventStore.Projections.Core.Tests/Other/json_serialization.cs
@@ -191,7 +191,7 @@ namespace EventStore.Projections.Core.Tests.Other {
 			}
 
 			public override string ToString() {
-				return string.Format("Data: {0}", Data);
+				return $"Data: {Data}";
 			}
 		}
 	}
diff --git a/src/EventStore.Projections.Core.Tests/Services/core_projection/checkpoint_manager/multi_stream/when_starting_and_enqueue_prerecorded_events_read_times_out.cs b/src/EventStore.Projections.Core.Tests/Services/core_projection/checkpoint_manager/multi_stream/when_starting_and_enqueue_prerecorded_events_read_times_out.cs
index e80560739..7294a26ce 100644
--- a/src/EventStore.Projections.Core.Tests/Services/core_projection/checkpoint_manager/multi_stream/when_starting_and_enqueue_prerecorded_events_read_times_out.cs
+++ b/src/EventStore.Projections.Core.Tests/Services/core_projection/checkpoint_manager/multi_stream/when_starting_and_enqueue_prerecorded_events_read_times_out.cs
@@ -43,8 +43,7 @@ namespace EventStore.Projections.Core.Tests.Services.core_projection.checkpoint_
 		}
 
 		public void Handle(TimerMessage.Schedule message) {
-			var delay = message.ReplyMessage as IODispatcherDelayedMessage;
-			if (delay != null && delay.MessageCorrelationId == _timeoutCorrelationId) {
+			if (message.ReplyMessage is IODispatcherDelayedMessage delay && delay.MessageCorrelationId == _timeoutCorrelationId) {
 				message.Reply();
 			}
 		}
diff --git a/src/EventStore.Projections.Core.Tests/Services/core_projection/checkpoint_manager/multi_stream/when_starting_and_read_prerecorded_events_times_out.cs b/src/EventStore.Projections.Core.Tests/Services/core_projection/checkpoint_manager/multi_stream/when_starting_and_read_prerecorded_events_times_out.cs
index b0e61e4f0..057dd9103 100644
--- a/src/EventStore.Projections.Core.Tests/Services/core_projection/checkpoint_manager/multi_stream/when_starting_and_read_prerecorded_events_times_out.cs
+++ b/src/EventStore.Projections.Core.Tests/Services/core_projection/checkpoint_manager/multi_stream/when_starting_and_read_prerecorded_events_times_out.cs
@@ -43,8 +43,7 @@ namespace EventStore.Projections.Core.Tests.Services.core_projection.checkpoint_
 		}
 
 		public void Handle(TimerMessage.Schedule message) {
-			var delay = message.ReplyMessage as IODispatcherDelayedMessage;
-			if (delay != null && delay.MessageCorrelationId == _timeoutCorrelationId) {
+			if (message.ReplyMessage is IODispatcherDelayedMessage delay && delay.MessageCorrelationId == _timeoutCorrelationId) {
 				message.Reply();
 			}
 		}
diff --git a/src/EventStore.Projections.Core.Tests/Services/core_projection/projection_checkpoint_reader/when_projection_reader_times_out_on_read.cs b/src/EventStore.Projections.Core.Tests/Services/core_projection/projection_checkpoint_reader/when_projection_reader_times_out_on_read.cs
index 9b37914fd..3a2da4e0a 100644
--- a/src/EventStore.Projections.Core.Tests/Services/core_projection/projection_checkpoint_reader/when_projection_reader_times_out_on_read.cs
+++ b/src/EventStore.Projections.Core.Tests/Services/core_projection/projection_checkpoint_reader/when_projection_reader_times_out_on_read.cs
@@ -51,8 +51,7 @@ namespace EventStore.Projections.Core.Tests.Services.core_projection.projection_
 		}
 
 		public void Handle(TimerMessage.Schedule message) {
-			var delay = message.ReplyMessage as IODispatcherDelayedMessage;
-			if (delay != null && delay.MessageCorrelationId == _timeoutCorrelationId) {
+			if (message.ReplyMessage is IODispatcherDelayedMessage delay && delay.MessageCorrelationId == _timeoutCorrelationId) {
 				message.Reply();
 			}
 		}
diff --git a/src/EventStore.Projections.Core.Tests/Services/emitted_streams_deleter/when_deleting/when_checkpoint_read_times_out.cs b/src/EventStore.Projections.Core.Tests/Services/emitted_streams_deleter/when_deleting/when_checkpoint_read_times_out.cs
index 92b6081ad..b4376dd86 100644
--- a/src/EventStore.Projections.Core.Tests/Services/emitted_streams_deleter/when_deleting/when_checkpoint_read_times_out.cs
+++ b/src/EventStore.Projections.Core.Tests/Services/emitted_streams_deleter/when_deleting/when_checkpoint_read_times_out.cs
@@ -48,8 +48,7 @@ namespace EventStore.Projections.Core.Tests.Services.emitted_streams_deleter.whe
 
 		public void Handle(TimerMessage.Schedule message) {
 			if (!_hasTimerTimedOut) {
-				var delay = message.ReplyMessage as IODispatcherDelayedMessage;
-				if (delay != null) {
+				if (message.ReplyMessage is IODispatcherDelayedMessage delay) {
 					_timedOutCorrelationId = delay.MessageCorrelationId.Value;
 					_hasTimerTimedOut = true;
 					message.Reply();
diff --git a/src/EventStore.Projections.Core.Tests/Services/emitted_streams_deleter/when_deleting/when_emitted_streams_read_times_out.cs b/src/EventStore.Projections.Core.Tests/Services/emitted_streams_deleter/when_deleting/when_emitted_streams_read_times_out.cs
index b1cf76be7..990a129ba 100644
--- a/src/EventStore.Projections.Core.Tests/Services/emitted_streams_deleter/when_deleting/when_emitted_streams_read_times_out.cs
+++ b/src/EventStore.Projections.Core.Tests/Services/emitted_streams_deleter/when_deleting/when_emitted_streams_read_times_out.cs
@@ -49,8 +49,7 @@ namespace EventStore.Projections.Core.Tests.Services.emitted_streams_deleter.whe
 		}
 
 		public void Handle(TimerMessage.Schedule message) {
-			var delay = message.ReplyMessage as IODispatcherDelayedMessage;
-			if (delay != null && delay.MessageCorrelationId.Value == _timedOutCorrelationId) {
+			if (message.ReplyMessage is IODispatcherDelayedMessage delay && delay.MessageCorrelationId.Value == _timedOutCorrelationId) {
 				message.Reply();
 			}
 		}
diff --git a/src/EventStore.Projections.Core.Tests/Services/event_reader/multi_stream_reader/when_handling_read_completed_for_all_streams_then_pause_requested_then_eof.cs b/src/EventStore.Projections.Core.Tests/Services/event_reader/multi_stream_reader/when_handling_read_completed_for_all_streams_then_pause_requested_then_eof.cs
index 58a4971ee..f7f34ffe2 100644
--- a/src/EventStore.Projections.Core.Tests/Services/event_reader/multi_stream_reader/when_handling_read_completed_for_all_streams_then_pause_requested_then_eof.cs
+++ b/src/EventStore.Projections.Core.Tests/Services/event_reader/multi_stream_reader/when_handling_read_completed_for_all_streams_then_pause_requested_then_eof.cs
@@ -115,8 +115,8 @@ namespace EventStore.Projections.Core.Tests.Services.event_reader.multi_stream_r
 		[Test]
 		public void does_not_publish_schedule() {
 			Assert.AreEqual(0,
-				_consumer.HandledMessages.OfType<TimerMessage.Schedule>().Where(x =>
-					x.ReplyMessage.GetType() != typeof(ProjectionManagementMessage.Internal.ReadTimeout)).Count());
+				_consumer.HandledMessages.OfType<TimerMessage.Schedule>().Count(x =>
+					x.ReplyMessage.GetType() != typeof(ProjectionManagementMessage.Internal.ReadTimeout)));
 		}
 	}
 }
diff --git a/src/EventStore.Projections.Core.Tests/Services/event_reader/stream_reader/when_handling_read_completed_then_pause_then_eof.cs b/src/EventStore.Projections.Core.Tests/Services/event_reader/stream_reader/when_handling_read_completed_then_pause_then_eof.cs
index 116b2b053..e8bca459a 100644
--- a/src/EventStore.Projections.Core.Tests/Services/event_reader/stream_reader/when_handling_read_completed_then_pause_then_eof.cs
+++ b/src/EventStore.Projections.Core.Tests/Services/event_reader/stream_reader/when_handling_read_completed_then_pause_then_eof.cs
@@ -111,8 +111,8 @@ namespace EventStore.Projections.Core.Tests.Services.event_reader.stream_reader
 		[Test]
 		public void does_not_publish_schedule() {
 			Assert.AreEqual(0,
-				_consumer.HandledMessages.OfType<TimerMessage.Schedule>().Where(x =>
-					x.ReplyMessage.GetType() != typeof(ProjectionManagementMessage.Internal.ReadTimeout)).Count());
+				_consumer.HandledMessages.OfType<TimerMessage.Schedule>().Count(x =>
+					x.ReplyMessage.GetType() != typeof(ProjectionManagementMessage.Internal.ReadTimeout)));
 		}
 	}
 }
diff --git a/src/EventStore.Projections.Core.Tests/Services/event_reader/stream_reader/when_handling_soft_deleted_stream_with_a_single_event_event_reader.cs b/src/EventStore.Projections.Core.Tests/Services/event_reader/stream_reader/when_handling_soft_deleted_stream_with_a_single_event_event_reader.cs
index e216ab508..c00ce2f5c 100644
--- a/src/EventStore.Projections.Core.Tests/Services/event_reader/stream_reader/when_handling_soft_deleted_stream_with_a_single_event_event_reader.cs
+++ b/src/EventStore.Projections.Core.Tests/Services/event_reader/stream_reader/when_handling_soft_deleted_stream_with_a_single_event_event_reader.cs
@@ -62,11 +62,11 @@ namespace EventStore.Projections.Core.Tests.Services.event_reader.stream_reader
 
 			var first = _consumer.HandledMessages.OfType<ReaderSubscriptionMessage.CommittedEventDistributed>().First();
 			Assert.AreEqual(first.Data.EventId, _firstEventId,
-				String.Format("Expected the first event to be {0}, but got {1}", _firstEventId, first.Data.EventId));
+				$"Expected the first event to be {_firstEventId}, but got {first.Data.EventId}");
 			var second = _consumer.HandledMessages.OfType<ReaderSubscriptionMessage.CommittedEventDistributed>().Skip(1)
 				.First();
 			Assert.AreEqual(second.Data.EventId, _secondEventId,
-				String.Format("Expected the second event to be {0}, but got {1}", _secondEventId, second.Data.EventId));
+				$"Expected the second event to be {_secondEventId}, but got {second.Data.EventId}");
 		}
 	}
 }
diff --git a/src/EventStore.Projections.Core.Tests/Services/event_reader/stream_reader/when_paused_then_handling_no_stream.cs b/src/EventStore.Projections.Core.Tests/Services/event_reader/stream_reader/when_paused_then_handling_no_stream.cs
index 01dffdbad..c89fefeb7 100644
--- a/src/EventStore.Projections.Core.Tests/Services/event_reader/stream_reader/when_paused_then_handling_no_stream.cs
+++ b/src/EventStore.Projections.Core.Tests/Services/event_reader/stream_reader/when_paused_then_handling_no_stream.cs
@@ -70,8 +70,8 @@ namespace EventStore.Projections.Core.Tests.Services.event_reader.stream_reader
 		[Test]
 		public void does_not_publish_schedule() {
 			Assert.AreEqual(0,
-				_consumer.HandledMessages.OfType<TimerMessage.Schedule>().Where(x =>
-					x.ReplyMessage.GetType() != typeof(ProjectionManagementMessage.Internal.ReadTimeout)).Count());
+				_consumer.HandledMessages.OfType<TimerMessage.Schedule>().Count(x =>
+					x.ReplyMessage.GetType() != typeof(ProjectionManagementMessage.Internal.ReadTimeout)));
 		}
 	}
 }
diff --git a/src/EventStore.Projections.Core.Tests/Services/http_service/authorization_tests.cs b/src/EventStore.Projections.Core.Tests/Services/http_service/authorization_tests.cs
index e79f9e144..1a9e49efc 100644
--- a/src/EventStore.Projections.Core.Tests/Services/http_service/authorization_tests.cs
+++ b/src/EventStore.Projections.Core.Tests/Services/http_service/authorization_tests.cs
@@ -87,14 +87,14 @@ namespace EventStore.Projections.Core.Tests.Services.Transport.Http {
 					content.Headers.Add("Content-Type", "application/json");
 
 					var res = await _httpClients["Admin"].PostAsync(
-						string.Format("http://{0}/users/", _nodes[_leaderId].HttpEndPoint),
+						$"http://{_nodes[_leaderId].HttpEndPoint}/users/",
 						content
 					);
 					res.EnsureSuccessStatusCode();
 					break;
 				} catch (HttpRequestException) {
 					if (trial == 5) {
-						throw new Exception(string.Format("Error creating user: {0}", username));
+						throw new Exception($"Error creating user: {username}");
 					}
 					await Task.Delay(1000);
 				}
diff --git a/src/EventStore.Projections.Core.Tests/Services/projections_manager/managed_projection/when_persisted_state_write_fails.cs b/src/EventStore.Projections.Core.Tests/Services/projections_manager/managed_projection/when_persisted_state_write_fails.cs
index f834efe33..063f9d00e 100644
--- a/src/EventStore.Projections.Core.Tests/Services/projections_manager/managed_projection/when_persisted_state_write_fails.cs
+++ b/src/EventStore.Projections.Core.Tests/Services/projections_manager/managed_projection/when_persisted_state_write_fails.cs
@@ -106,7 +106,7 @@ namespace EventStore.Projections.Core.Tests.Services.projections_manager.managed
 					_coreProjectionId, projectionSourceDefinition));
 
 			_originalPersistedStateEventId = _consumer.HandledMessages.OfType<ClientMessage.WriteEvents>()
-				.Where(x => x.EventStreamId == _projectionDefinitionStreamId).First().Events[0].EventId;
+				.First(x => x.EventStreamId == _projectionDefinitionStreamId).Events[0].EventId;
 
 			CompleteWriteWithResult(_failureCondition);
 
@@ -118,7 +118,7 @@ namespace EventStore.Projections.Core.Tests.Services.projections_manager.managed
 		[Test]
 		public void should_retry_writing_the_persisted_state_with_the_same_event_id() {
 			var eventId = _consumer.HandledMessages.OfType<ClientMessage.WriteEvents>()
-				.Where(x => x.EventStreamId == _projectionDefinitionStreamId).First().Events[0].EventId;
+				.First(x => x.EventStreamId == _projectionDefinitionStreamId).Events[0].EventId;
 			Assert.AreEqual(eventId, _originalPersistedStateEventId);
 		}
 	}
diff --git a/src/EventStore.Projections.Core.Tests/Services/projections_manager/managed_projection/when_updating_projection_config.cs b/src/EventStore.Projections.Core.Tests/Services/projections_manager/managed_projection/when_updating_projection_config.cs
index a36bd31eb..999d3c4bc 100644
--- a/src/EventStore.Projections.Core.Tests/Services/projections_manager/managed_projection/when_updating_projection_config.cs
+++ b/src/EventStore.Projections.Core.Tests/Services/projections_manager/managed_projection/when_updating_projection_config.cs
@@ -120,7 +120,7 @@ namespace EventStore.Projections.Core.Tests.Services.projections_manager.managed
 		[Test]
 		public void persisted_state_is_written() {
 			var writeEvents = _consumer.HandledMessages.OfType<ClientMessage.WriteEvents>().ToList();
-			Assert.AreEqual(1, writeEvents.Count());
+			Assert.AreEqual(1, writeEvents.Count);
 			Assert.AreEqual("$projections-name", writeEvents[0].EventStreamId);
 		}
 
diff --git a/src/EventStore.Projections.Core.Tests/Services/projections_manager/when_posting_a_persistent_projection_and_registration_write_fails.cs b/src/EventStore.Projections.Core.Tests/Services/projections_manager/when_posting_a_persistent_projection_and_registration_write_fails.cs
index 21cd9bb61..6cd416d7a 100644
--- a/src/EventStore.Projections.Core.Tests/Services/projections_manager/when_posting_a_persistent_projection_and_registration_write_fails.cs
+++ b/src/EventStore.Projections.Core.Tests/Services/projections_manager/when_posting_a_persistent_projection_and_registration_write_fails.cs
@@ -53,7 +53,7 @@ namespace EventStore.Projections.Core.Tests.Services.projections_manager {
 		public void retries_creating_the_projection_only_the_specified_number_of_times_and_the_same_event_id() {
 			int retryCount = 0;
 			var projectionRegistrationWrite = _consumer.HandledMessages.OfType<ClientMessage.WriteEvents>()
-				.Where(x => x.EventStreamId == ProjectionNamesBuilder.ProjectionsRegistrationStream).Last();
+				.Last(x => x.EventStreamId == ProjectionNamesBuilder.ProjectionsRegistrationStream);
 			var eventId = projectionRegistrationWrite.Events[0].EventId;
 			while (projectionRegistrationWrite != null) {
 				Assert.AreEqual(eventId, projectionRegistrationWrite.Events[0].EventId);
diff --git a/src/EventStore.Projections.Core.Tests/Services/projections_manager/when_the_projections_initialized_write_fails.cs b/src/EventStore.Projections.Core.Tests/Services/projections_manager/when_the_projections_initialized_write_fails.cs
index 96703b7f0..7a3c5b157 100644
--- a/src/EventStore.Projections.Core.Tests/Services/projections_manager/when_the_projections_initialized_write_fails.cs
+++ b/src/EventStore.Projections.Core.Tests/Services/projections_manager/when_the_projections_initialized_write_fails.cs
@@ -42,9 +42,9 @@ namespace EventStore.Projections.Core.Tests.Services.projections_manager {
 		[Test, Category("v8")]
 		public void retries_writing_with_the_same_event_id() {
 			int retryCount = 0;
-			var projectionsInitializedWrite = _consumer.HandledMessages.OfType<ClientMessage.WriteEvents>().Where(x =>
+			var projectionsInitializedWrite = _consumer.HandledMessages.OfType<ClientMessage.WriteEvents>().Last(x =>
 				x.EventStreamId == ProjectionNamesBuilder.ProjectionsRegistrationStream &&
-				x.Events[0].EventType == ProjectionEventTypes.ProjectionsInitialized).Last();
+				x.Events[0].EventType == ProjectionEventTypes.ProjectionsInitialized);
 			var eventId = projectionsInitializedWrite.Events[0].EventId;
 			while (retryCount < 5) {
 				Assert.AreEqual(eventId, projectionsInitializedWrite.Events[0].EventId);
diff --git a/src/EventStore.Projections.Core/Services/Http/ProjectionsController.cs b/src/EventStore.Projections.Core/Services/Http/ProjectionsController.cs
index 835509a67..f081cb5cc 100644
--- a/src/EventStore.Projections.Core/Services/Http/ProjectionsController.cs
+++ b/src/EventStore.Projections.Core/Services/Http/ProjectionsController.cs
@@ -385,7 +385,7 @@ namespace EventStore.Projections.Core.Services.Http {
 
 			var envelope = new SendToHttpEnvelope<ProjectionManagementMessage.Updated>(
 				_networkSendQueue, http, DefaultFormatter, (codec, message) => {
-					var localPath = string.Format("/projection/{0}", message.Name);
+					var localPath = $"/projection/{message.Name}";
 					var url = MakeUrl(http, localPath);
 					return new ResponseConfiguration(
 						201, "Created", codec.ContentType, codec.Encoding,
diff --git a/src/EventStore.Projections.Core/Services/Management/ManagedProjection.cs b/src/EventStore.Projections.Core/Services/Management/ManagedProjection.cs
index eab66c2cf..c51c03a84 100644
--- a/src/EventStore.Projections.Core/Services/Management/ManagedProjection.cs
+++ b/src/EventStore.Projections.Core/Services/Management/ManagedProjection.cs
@@ -878,9 +878,7 @@ namespace EventStore.Projections.Core.Services.Management {
 				case ManagedProjectionState.Loading:
 				case ManagedProjectionState.Creating:
 					throw new InvalidOperationException(
-						string.Format(
-							"Cannot stop a projection in the '{0}' state",
-							Enum.GetName(typeof(ManagedProjectionState), _state)));
+						$"Cannot stop a projection in the '{Enum.GetName(typeof(ManagedProjectionState), _state)}' state");
 				case ManagedProjectionState.Stopping:
 				case ManagedProjectionState.Aborting:
 					return;
@@ -906,9 +904,7 @@ namespace EventStore.Projections.Core.Services.Management {
 				case ManagedProjectionState.Loading:
 				case ManagedProjectionState.Creating:
 					throw new InvalidOperationException(
-						string.Format(
-							"Cannot stop a projection in the '{0}' state",
-							Enum.GetName(typeof(ManagedProjectionState), _state)));
+						$"Cannot stop a projection in the '{Enum.GetName(typeof(ManagedProjectionState), _state)}' state");
 				case ManagedProjectionState.Stopping:
 					SetState(ManagedProjectionState.Aborting);
 					_output.Publish(new CoreProjectionManagementMessage.Kill(Id, _workerId));
diff --git a/src/EventStore.Projections.Core/Services/Management/ProjectionManager.cs b/src/EventStore.Projections.Core/Services/Management/ProjectionManager.cs
index 48eecd941..a19b22146 100644
--- a/src/EventStore.Projections.Core/Services/Management/ProjectionManager.cs
+++ b/src/EventStore.Projections.Core/Services/Management/ProjectionManager.cs
@@ -977,9 +977,7 @@ namespace EventStore.Projections.Core.Services.Management {
 			}
 
 			envelope.ReplyWith(new ProjectionManagementMessage.OperationFailed(
-				string.Format(
-					"The projections '{0}' could not be created because the registration could not be written due to {1}",
-					string.Join(", ", newProjections.Keys), completed.Result)));
+				$"The projections '{string.Join(", ", newProjections.Keys)}' could not be created because the registration could not be written due to {completed.Result}"));
 		}
 
 		private void StartNewlyRegisteredProjections
diff --git a/src/EventStore.Projections.Core/Services/Management/ProjectionStateHandlerFactory.cs b/src/EventStore.Projections.Core/Services/Management/ProjectionStateHandlerFactory.cs
index e661e0c6a..28ba8c4b5 100644
--- a/src/EventStore.Projections.Core/Services/Management/ProjectionStateHandlerFactory.cs
+++ b/src/EventStore.Projections.Core/Services/Management/ProjectionStateHandlerFactory.cs
@@ -38,7 +38,7 @@ namespace EventStore.Projections.Core.Services.Management {
 					result = (IProjectionStateHandler)handler;
 					break;
 				default:
-					throw new NotSupportedException(string.Format("'{0}' handler type is not supported", factoryType));
+					throw new NotSupportedException($"'{factoryType}' handler type is not supported");
 			}
 
 			return result;
diff --git a/src/EventStore.Projections.Core/Services/Processing/CategoryEventFilter.cs b/src/EventStore.Projections.Core/Services/Processing/CategoryEventFilter.cs
index b491d92d7..5d5f2258f 100644
--- a/src/EventStore.Projections.Core/Services/Processing/CategoryEventFilter.cs
+++ b/src/EventStore.Projections.Core/Services/Processing/CategoryEventFilter.cs
@@ -22,13 +22,13 @@ namespace EventStore.Projections.Core.Services.Processing {
 
 		public override string GetCategory(string positionStreamId) {
 			if (!positionStreamId.StartsWith("$ce-"))
-				throw new ArgumentException(string.Format("'{0}' is not a category stream", positionStreamId),
+				throw new ArgumentException($"'{positionStreamId}' is not a category stream",
 					"positionStreamId");
 			return positionStreamId.Substring("$ce-".Length);
 		}
 
 		public override string ToString() {
-			return string.Format("Category: {0}, CategoryStream: {1}", _category, _categoryStream);
+			return $"Category: {_category}, CategoryStream: {_categoryStream}";
 		}
 	}
 }
diff --git a/src/EventStore.Projections.Core/Services/Processing/CheckpointTag.cs b/src/EventStore.Projections.Core/Services/Processing/CheckpointTag.cs
index f36f5d6e2..e9fc17722 100644
--- a/src/EventStore.Projections.Core/Services/Processing/CheckpointTag.cs
+++ b/src/EventStore.Projections.Core/Services/Processing/CheckpointTag.cs
@@ -182,7 +182,7 @@ namespace EventStore.Projections.Core.Services.Processing {
 
 		private static void ThrowIncomparable(CheckpointTag left, CheckpointTag right) {
 			throw new InvalidOperationException(
-				string.Format("Incomparable multi-stream checkpoint tags. '{0}' and '{1}'", left, right));
+				$"Incomparable multi-stream checkpoint tags. '{left}' and '{right}'");
 		}
 
 		public static bool operator >=(CheckpointTag left, CheckpointTag right) {
@@ -407,9 +407,7 @@ namespace EventStore.Projections.Core.Services.Processing {
 					result = sb.ToString();
 					break;
 				case Mode.ByStream:
-					result = string.Format(
-						"{0}:{1}/{2}:{3}/{4}", CatalogStream, CatalogPosition, DataStream, DataPosition,
-						CommitPosition);
+					result = $"{CatalogStream}:{CatalogPosition}/{DataStream}:{DataPosition}/{CommitPosition}";
 					break;
 				default:
 					return "Unsupported mode: " + Mode_.ToString();
diff --git a/src/EventStore.Projections.Core/Services/Processing/CoreProjection.cs b/src/EventStore.Projections.Core/Services/Processing/CoreProjection.cs
index d91395d2a..95c30b3ad 100644
--- a/src/EventStore.Projections.Core/Services/Processing/CoreProjection.cs
+++ b/src/EventStore.Projections.Core/Services/Processing/CoreProjection.cs
@@ -312,9 +312,7 @@ namespace EventStore.Projections.Core.Services.Processing {
 				message.Reason);
 			if (_state != State.Running) {
 				SetFaulted(
-					string.Format(
-						"A concurrency violation was detected, but the projection is not running. Current state is: {0}.  The reason for the restart is: '{1}' ",
-						_state, message.Reason));
+					$"A concurrency violation was detected, but the projection is not running. Current state is: {_state}.  The reason for the restart is: '{message.Reason}' ");
 				return;
 			}
 
@@ -515,7 +513,7 @@ namespace EventStore.Projections.Core.Services.Processing {
 		private void EnsureState(State expectedStates) {
 			if ((_state & expectedStates) == 0) {
 				throw new Exception(
-					string.Format("Current state is {0}. Expected states are: {1}", _state, expectedStates));
+					$"Current state is {_state}. Expected states are: {expectedStates}");
 			}
 		}
 
diff --git a/src/EventStore.Projections.Core/Services/Processing/CoreProjectionCheckpointWriter.cs b/src/EventStore.Projections.Core/Services/Processing/CoreProjectionCheckpointWriter.cs
index e45b40ea5..d7550fdb5 100644
--- a/src/EventStore.Projections.Core/Services/Processing/CoreProjectionCheckpointWriter.cs
+++ b/src/EventStore.Projections.Core/Services/Processing/CoreProjectionCheckpointWriter.cs
@@ -67,11 +67,7 @@ namespace EventStore.Projections.Core.Services.Processing {
 				_envelope.ReplyWith(
 					new CoreProjectionCheckpointWriterMessage.CheckpointWritten(_requestedCheckpointPosition));
 			} else {
-				if (_logger != null) {
-					_logger.Information(
-						"Failed to write projection checkpoint to stream {stream}. Error: {e}", eventStreamId,
-						Enum.GetName(typeof(OperationResult), operationResult));
-				}
+				_logger?.Information("Failed to write projection checkpoint to stream {stream}. Error: {e}", eventStreamId, Enum.GetName(typeof(OperationResult), operationResult));
 
 				switch (operationResult) {
 					case OperationResult.WrongExpectedVersion:
@@ -85,10 +81,7 @@ namespace EventStore.Projections.Core.Services.Processing {
 						if (_inCheckpointWriteAttempt >= MaxNumberOfRetries) {
 							//The first parameter is not needed in this case as the CoreProjectionCheckpointManager takes care of filling in the projection id when it reconstructs the message
 							_envelope.ReplyWith(new CoreProjectionProcessingMessage.Failed(Guid.Empty,
-								string.Format(
-									"After retrying {0} times, we failed to write the checkpoint for {1} to {2} due to a {3}",
-									MaxNumberOfRetries, _name, eventStreamId,
-									Enum.GetName(typeof(OperationResult), operationResult))));
+								$"After retrying {MaxNumberOfRetries} times, we failed to write the checkpoint for {_name} to {eventStreamId} due to a {Enum.GetName(typeof(OperationResult), operationResult)}"));
 							_inCheckpointWriteAttempt = 0;
 							return;
 						}
diff --git a/src/EventStore.Projections.Core/Services/Processing/CoreProjectionQueue.cs b/src/EventStore.Projections.Core/Services/Processing/CoreProjectionQueue.cs
index 73fdbe149..5b009ba61 100644
--- a/src/EventStore.Projections.Core/Services/Processing/CoreProjectionQueue.cs
+++ b/src/EventStore.Projections.Core/Services/Processing/CoreProjectionQueue.cs
@@ -91,9 +91,7 @@ namespace EventStore.Projections.Core.Services.Processing {
 			if (eventTag < _lastEnqueuedEventTag ||
 				(!(allowCurrentPosition || _justInitialized) && eventTag <= _lastEnqueuedEventTag))
 				throw new InvalidOperationException(
-					string.Format(
-						"Invalid order.  Last known tag is: '{0}'.  Current tag is: '{1}'", _lastEnqueuedEventTag,
-						eventTag));
+					$"Invalid order.  Last known tag is: '{_lastEnqueuedEventTag}'.  Current tag is: '{eventTag}'");
 			_justInitialized = _justInitialized && (eventTag == _lastEnqueuedEventTag);
 			_lastEnqueuedEventTag = eventTag;
 		}
diff --git a/src/EventStore.Projections.Core/Services/Processing/EmittedDataEvent.cs b/src/EventStore.Projections.Core/Services/Processing/EmittedDataEvent.cs
index 19a75b900..5485764c6 100644
--- a/src/EventStore.Projections.Core/Services/Processing/EmittedDataEvent.cs
+++ b/src/EventStore.Projections.Core/Services/Processing/EmittedDataEvent.cs
@@ -39,7 +39,7 @@ namespace EventStore.Projections.Core.Services.Processing {
 		}
 
 		public override string ToString() {
-			return string.Format("Event Id: {0}, Event Type: {1}, Data: {2}", EventId, EventType, Data);
+			return $"Event Id: {EventId}, Event Type: {EventType}, Data: {Data}";
 		}
 	}
 }
diff --git a/src/EventStore.Projections.Core/Services/Processing/EmittedStream.cs b/src/EventStore.Projections.Core/Services/Processing/EmittedStream.cs
index a2162d890..c2ee7955a 100644
--- a/src/EventStore.Projections.Core/Services/Processing/EmittedStream.cs
+++ b/src/EventStore.Projections.Core/Services/Processing/EmittedStream.cs
@@ -173,8 +173,7 @@ namespace EventStore.Projections.Core.Services.Processing {
 					if (!(_lastQueuedEventPosition != null && groupCausedBy > _lastQueuedEventPosition) &&
 					    !(_lastQueuedEventPosition == null && groupCausedBy >= _fromCheckpointPosition))
 						throw new InvalidOperationException(
-							string.Format("Invalid event order.  '{0}' goes after '{1}'", @event.CausedByTag,
-								_lastQueuedEventPosition));
+							$"Invalid event order.  '{@event.CausedByTag}' goes after '{_lastQueuedEventPosition}'");
 					_lastQueuedEventPosition = groupCausedBy;
 				} else if (@event.CausedByTag != groupCausedBy)
 					throw new ArgumentException("events must share the same CausedByTag");
@@ -230,17 +229,11 @@ namespace EventStore.Projections.Core.Services.Processing {
 				return;
 			}
 
-			if (_logger != null) {
-				_logger.Information("Failed to write events to stream {stream}. Error: {e}",
-					_streamId,
-					Enum.GetName(typeof(OperationResult), message.Result));
-			}
+			_logger?.Information("Failed to write events to stream {stream}. Error: {e}", _streamId, Enum.GetName(typeof(OperationResult), message.Result));
 
 			switch (message.Result) {
 				case OperationResult.WrongExpectedVersion:
-					RequestRestart(string.Format(
-						"The '{0}' stream has been written to from the outside. Expected Version: {1}, Current Version: {2}. Checkpoint: {3}.",
-						_streamId, _lastKnownEventNumber, message.CurrentVersion, _fromCheckpointPosition));
+					RequestRestart($"The '{_streamId}' stream has been written to from the outside. Expected Version: {_lastKnownEventNumber}, Current Version: {message.CurrentVersion}. Checkpoint: {_fromCheckpointPosition}.");
 					break;
 				case OperationResult.PrepareTimeout:
 				case OperationResult.ForwardTimeout:
@@ -248,9 +241,7 @@ namespace EventStore.Projections.Core.Services.Processing {
 					if (retryCount > 0) {
 						PublishWriteEvents(--retryCount);
 					} else {
-						Failed(string.Format(
-							"Failed to write events to {0}. Retry limit of {1} reached. Reason: {2}. Checkpoint: {3}.",
-							_streamId, MaxRetryCount, message.Result, _fromCheckpointPosition));
+						Failed($"Failed to write events to {_streamId}. Retry limit of {MaxRetryCount} reached. Reason: {message.Result}. Checkpoint: {_fromCheckpointPosition}.");
 					}
 
 					break;
@@ -288,17 +279,13 @@ namespace EventStore.Projections.Core.Services.Processing {
 				if (!newPhysicalStream && message.Events.Length > 0) {
 					parsed = message.Events[0].Event.Metadata.ParseCheckpointTagVersionExtraJson(_projectionVersion);
 					if (parsed.Tag == null) {
-						Failed(string.Format(
-							"The '{0}' stream managed by projection {1} has been written to from the outside.",
-							_streamId, _projectionVersion.ProjectionId));
+						Failed($"The '{_streamId}' stream managed by projection {_projectionVersion.ProjectionId} has been written to from the outside.");
 						return;
 					}
 
 					if (_projectionVersion.ProjectionId != parsed.Version.ProjectionId) {
 						Failed(
-							string.Format(
-								"Multiple projections emitting to the same stream detected.  Stream: '{0}'. Last event projection: '{1}'.  Emitting projection: '{2}'",
-								_streamId, parsed.Version.ProjectionId, _projectionVersion.ProjectionId));
+							$"Multiple projections emitting to the same stream detected.  Stream: '{_streamId}'. Last event projection: '{parsed.Version.ProjectionId}'.  Emitting projection: '{_projectionVersion.ProjectionId}'");
 						return;
 					}
 				}
@@ -348,9 +335,7 @@ namespace EventStore.Projections.Core.Services.Processing {
 
 				if (checkpointTagVersion.Tag == null) {
 					Failed(
-						string.Format(
-							"A unstamped event found. Stream: '{0}'. EventNumber: '{1}'", message.EventStreamId,
-							e.OriginalEventNumber));
+						$"A unstamped event found. Stream: '{message.EventStreamId}'. EventNumber: '{e.OriginalEventNumber}'");
 					return true;
 				}
 
@@ -481,16 +466,11 @@ namespace EventStore.Projections.Core.Services.Processing {
 				return;
 			}
 
-			if (_logger != null) {
-				_logger.Information("Failed to write events to stream {stream}. Error: {e}",
-					_metadataStreamId,
-					Enum.GetName(typeof(OperationResult), message.Result));
-			}
+			_logger?.Information("Failed to write events to stream {stream}. Error: {e}", _metadataStreamId, Enum.GetName(typeof(OperationResult), message.Result));
 
 			switch (message.Result) {
 				case OperationResult.WrongExpectedVersion:
-					RequestRestart(string.Format("The '{0}' stream has been written to from the outside",
-						_metadataStreamId));
+					RequestRestart($"The '{_metadataStreamId}' stream has been written to from the outside");
 					break;
 				case OperationResult.PrepareTimeout:
 				case OperationResult.ForwardTimeout:
@@ -498,9 +478,7 @@ namespace EventStore.Projections.Core.Services.Processing {
 					if (retryCount > 0) {
 						PublishWriteMetaStream(--retryCount);
 					} else {
-						Failed(string.Format(
-							"Failed to write an events to {0}. Retry limit of {1} reached. Reason: {2}",
-							_metadataStreamId, MaxRetryCount, message.Result));
+						Failed($"Failed to write an events to {_metadataStreamId}. Retry limit of {MaxRetryCount} reached. Reason: {message.Result}");
 					}
 
 					break;
@@ -534,9 +512,7 @@ namespace EventStore.Projections.Core.Services.Processing {
 				if (expectedTag != null)
 					if (DetectConcurrencyViolations(expectedTag)) {
 						RequestRestart(
-							string.Format(
-								"Wrong expected tag while submitting write event request to the '{0}' stream.  The last known stream tag is: '{1}'  the expected tag is: '{2}'",
-								_streamId, _lastCommittedOrSubmittedEventPosition, expectedTag));
+							$"Wrong expected tag while submitting write event request to the '{_streamId}' stream.  The last known stream tag is: '{_lastCommittedOrSubmittedEventPosition}'  the expected tag is: '{expectedTag}'");
 						return;
 					}
 
@@ -547,8 +523,7 @@ namespace EventStore.Projections.Core.Services.Processing {
 							e.EventId, e.EventType, e.IsJson, e.Data != null ? Helper.UTF8NoBom.GetBytes(e.Data) : null,
 							e.CausedByTag.ToJsonBytes(_projectionVersion, MetadataWithCausedByAndCorrelationId(e))));
 				} catch (ArgumentException ex) {
-					Failed(string.Format("Failed to write the event: {0} to stream: {1} failed. Reason: {2}.", e,
-						_streamId, ex.Message));
+					Failed($"Failed to write the event: {e} to stream: {_streamId} failed. Reason: {ex.Message}.");
 					return;
 				}
 
diff --git a/src/EventStore.Projections.Core/Services/Processing/EventByTypeIndexEventReader.cs b/src/EventStore.Projections.Core/Services/Processing/EventByTypeIndexEventReader.cs
index a1fc89be2..9ef93e504 100644
--- a/src/EventStore.Projections.Core/Services/Processing/EventByTypeIndexEventReader.cs
+++ b/src/EventStore.Projections.Core/Services/Processing/EventByTypeIndexEventReader.cs
@@ -77,7 +77,7 @@ namespace EventStore.Projections.Core.Services.Processing {
 
 			foreach (var stream in _streamToEventType.Keys.Where(stream => !fromPositions.ContainsKey(stream))) {
 				throw new ArgumentException(
-					String.Format("The '{0}' stream position has not been set", stream), "fromPositions");
+					$"The '{stream}' stream position has not been set", "fromPositions");
 			}
 		}
 
@@ -239,7 +239,7 @@ namespace EventStore.Projections.Core.Services.Processing {
 
 				if (!_streamToEventType.ContainsKey(message.EventStreamId))
 					throw new InvalidOperationException(
-						String.Format("Invalid stream name: {0}", message.EventStreamId));
+						$"Invalid stream name: {message.EventStreamId}");
 				if (!_eventsRequested.Contains(message.EventStreamId))
 					throw new InvalidOperationException("Read events has not been requested");
 				if (_reader.Paused)
@@ -258,7 +258,7 @@ namespace EventStore.Projections.Core.Services.Processing {
 						break;
 					default:
 						throw new NotSupportedException(
-							String.Format("ReadEvents result code was not recognized. Code: {0}", message.Result));
+							$"ReadEvents result code was not recognized. Code: {message.Result}");
 				}
 			}
 
@@ -387,7 +387,7 @@ namespace EventStore.Projections.Core.Services.Processing {
 						break;
 					default:
 						throw new NotSupportedException(
-							String.Format("ReadEvents result code was not recognized. Code: {0}", result));
+							$"ReadEvents result code was not recognized. Code: {result}");
 				}
 			}
 
@@ -634,7 +634,7 @@ namespace EventStore.Projections.Core.Services.Processing {
 						break;
 					default:
 						throw new NotSupportedException(
-							String.Format("ReadEvents result code was not recognized. Code: {0}", message.Result));
+							$"ReadEvents result code was not recognized. Code: {message.Result}");
 				}
 			}
 
diff --git a/src/EventStore.Projections.Core/Services/Processing/EventByTypeIndexPositionTagger.cs b/src/EventStore.Projections.Core/Services/Processing/EventByTypeIndexPositionTagger.cs
index 6796ec1c1..62ecf48d8 100644
--- a/src/EventStore.Projections.Core/Services/Processing/EventByTypeIndexPositionTagger.cs
+++ b/src/EventStore.Projections.Core/Services/Processing/EventByTypeIndexPositionTagger.cs
@@ -39,13 +39,11 @@ namespace EventStore.Projections.Core.Services.Processing {
 			CheckpointTag previous, ReaderSubscriptionMessage.CommittedEventDistributed committedEvent) {
 			if (previous.Phase != Phase)
 				throw new ArgumentException(
-					string.Format("Invalid checkpoint tag phase.  Expected: {0} Was: {1}", Phase, previous.Phase));
+					$"Invalid checkpoint tag phase.  Expected: {Phase} Was: {previous.Phase}");
 
 			if (committedEvent.Data.EventOrLinkTargetPosition < previous.Position)
 				throw new InvalidOperationException(
-					string.Format(
-						"Cannot make a checkpoint tag at earlier position. '{0}' < '{1}'",
-						committedEvent.Data.EventOrLinkTargetPosition, previous.Position));
+					$"Cannot make a checkpoint tag at earlier position. '{committedEvent.Data.EventOrLinkTargetPosition}' < '{previous.Position}'");
 			var byIndex = _streams.Contains(committedEvent.Data.PositionStreamId);
 			return byIndex
 				? previous.UpdateEventTypeIndexPosition(
@@ -64,13 +62,11 @@ namespace EventStore.Projections.Core.Services.Processing {
 			CheckpointTag previous, ReaderSubscriptionMessage.EventReaderPartitionDeleted partitionDeleted) {
 			if (previous.Phase != Phase)
 				throw new ArgumentException(
-					string.Format("Invalid checkpoint tag phase.  Expected: {0} Was: {1}", Phase, previous.Phase));
+					$"Invalid checkpoint tag phase.  Expected: {Phase} Was: {previous.Phase}");
 
 			if (partitionDeleted.DeleteEventOrLinkTargetPosition < previous.Position)
 				throw new InvalidOperationException(
-					string.Format(
-						"Cannot make a checkpoint tag at earlier position. '{0}' < '{1}'",
-						partitionDeleted.DeleteEventOrLinkTargetPosition, previous.Position));
+					$"Cannot make a checkpoint tag at earlier position. '{partitionDeleted.DeleteEventOrLinkTargetPosition}' < '{previous.Position}'");
 			var byIndex = _streams.Contains(partitionDeleted.PositionStreamId);
 			//TODO: handle invalid partition deleted messages without required values
 			return byIndex
@@ -97,8 +93,7 @@ namespace EventStore.Projections.Core.Services.Processing {
 				return tag;
 			if (tag.Phase > Phase)
 				throw new ArgumentException(
-					string.Format("Invalid checkpoint tag phase.  Expected less or equal to: {0} Was: {1}", Phase,
-						tag.Phase), "tag");
+					$"Invalid checkpoint tag phase.  Expected less or equal to: {Phase} Was: {tag.Phase}", "tag");
 
 			if (tag.Mode_ == CheckpointTag.Mode.EventTypeIndex) {
 				long p;
@@ -121,9 +116,7 @@ namespace EventStore.Projections.Core.Services.Processing {
 					return CheckpointTag.FromEventTypeIndexPositions(
 						tag.Phase, tag.Position, _eventTypes.ToDictionary(v => v, v => (long)-1));
 				default:
-					throw new NotSupportedException(string.Format(
-						"The given checkpoint is invalid. Possible causes might include having written an event to the projection's managed stream. The bad checkpoint: {0}",
-						tag.ToString()));
+					throw new NotSupportedException($"The given checkpoint is invalid. Possible causes might include having written an event to the projection's managed stream. The bad checkpoint: {tag.ToString()}");
 			}
 		}
 	}
diff --git a/src/EventStore.Projections.Core/Services/Processing/EventProcessingProjectionProcessingPhase.cs b/src/EventStore.Projections.Core/Services/Processing/EventProcessingProjectionProcessingPhase.cs
index 555c60f87..f53bc5a54 100644
--- a/src/EventStore.Projections.Core/Services/Processing/EventProcessingProjectionProcessingPhase.cs
+++ b/src/EventStore.Projections.Core/Services/Processing/EventProcessingProjectionProcessingPhase.cs
@@ -200,9 +200,7 @@ namespace EventStore.Projections.Core.Services.Processing {
 				// update progress to reflect exact fault position
 				_checkpointManager.Progress(message.Progress);
 				SetFaulting(
-					String.Format(
-						"The {0} projection failed to process an event.\r\nHandler: {1}\r\nEvent Position: {2}\r\n\r\nMessage:\r\n\r\n{3}",
-						_projectionName, GetHandlerTypeName(), message.CheckpointTag, ex.Message), ex);
+					$"The {_projectionName} projection failed to process an event.\r\nHandler: {GetHandlerTypeName()}\r\nEvent Position: {message.CheckpointTag}\r\n\r\nMessage:\r\n\r\n{ex.Message}", ex);
 				newState = null;
 				newSharedState = null;
 				emittedEvents = null;
@@ -224,9 +222,7 @@ namespace EventStore.Projections.Core.Services.Processing {
 					partition, deletedPosition, out newState, out projectionResult);
 			} catch (Exception ex) {
 				SetFaulting(
-					String.Format(
-						"The {0} projection failed to process a delete partition notification.\r\nHandler: {1}\r\nEvent Position: {2}\r\n\r\nMessage:\r\n\r\n{3}",
-						_projectionName, GetHandlerTypeName(), deletedPosition, ex.Message), ex);
+					$"The {_projectionName} projection failed to process a delete partition notification.\r\nHandler: {GetHandlerTypeName()}\r\nEvent Position: {deletedPosition}\r\n\r\nMessage:\r\n\r\n{ex.Message}", ex);
 				newState = null;
 				hasBeenProcessed = false;
 			}
@@ -342,16 +338,13 @@ namespace EventStore.Projections.Core.Services.Processing {
 				return;
 			}
 
-			var checkpointHandler = _projectionStateHandler as IProjectionCheckpointHandler;
-			if (checkpointHandler != null) {
+			if (_projectionStateHandler is IProjectionCheckpointHandler checkpointHandler) {
 				EmittedEventEnvelope[] emittedEvents;
 				try {
 					checkpointHandler.ProcessNewCheckpoint(at, out emittedEvents);
 				} catch (Exception ex) {
 					var faultedReason =
-						String.Format(
-							"The {0} projection failed to process a checkpoint start.\r\nHandler: {1}\r\nEvent Position: {2}\r\n\r\nMessage:\r\n\r\n{3}",
-							_projectionName, GetHandlerTypeName(), at, ex.Message);
+						$"The {_projectionName} projection failed to process a checkpoint start.\r\nHandler: {GetHandlerTypeName()}\r\nEvent Position: {at}\r\n\r\nMessage:\r\n\r\n{ex.Message}";
 					SetFaulting(faultedReason, ex);
 					emittedEvents = null;
 				}
diff --git a/src/EventStore.Projections.Core/Services/Processing/EventReaderCoreService.cs b/src/EventStore.Projections.Core/Services/Processing/EventReaderCoreService.cs
index 977f5050b..ab109cfd2 100644
--- a/src/EventStore.Projections.Core/Services/Processing/EventReaderCoreService.cs
+++ b/src/EventStore.Projections.Core/Services/Processing/EventReaderCoreService.cs
@@ -154,9 +154,7 @@ namespace EventStore.Projections.Core.Services.Processing {
 					var subscription = _subscriptions[projectionId];
 					Handle(new ReaderSubscriptionManagement.Unsubscribe(subscription.SubscriptionId));
 					_publisher.Publish(new EventReaderSubscriptionMessage.Failed(subscription.SubscriptionId,
-						string.Format("The subscription failed to handle an event {0}:{1}@{2} because {3}",
-							message.Data.EventStreamId, message.Data.EventType, message.Data.EventSequenceNumber,
-							ex.Message)));
+						$"The subscription failed to handle an event {message.Data.EventStreamId}:{message.Data.EventType}@{message.Data.EventSequenceNumber} because {ex.Message}"));
 				}
 			}
 		}
diff --git a/src/EventStore.Projections.Core/Services/Processing/HeadingEventReader.cs b/src/EventStore.Projections.Core/Services/Processing/HeadingEventReader.cs
index 5be914e96..07bd29b12 100644
--- a/src/EventStore.Projections.Core/Services/Processing/HeadingEventReader.cs
+++ b/src/EventStore.Projections.Core/Services/Processing/HeadingEventReader.cs
@@ -32,11 +32,7 @@ namespace EventStore.Projections.Core.Services.Processing {
 			}
 
 			public override string ToString() {
-				return string.Format(
-					"{0} : {2}@{1}",
-					Message.Data.EventType,
-					Message.Data.PositionStreamId,
-					Message.Data.PositionSequenceNumber);
+				return $"{Message.Data.EventType} : {Message.Data.PositionStreamId}@{Message.Data.PositionSequenceNumber}";
 			}
 		}
 
@@ -112,9 +108,7 @@ namespace EventStore.Projections.Core.Services.Processing {
 		private void ValidateEventOrder(ReaderSubscriptionMessage.CommittedEventDistributed message) {
 			if (_lastEventPosition >= message.Data.Position || _lastDeletePosition > message.Data.Position)
 				throw new InvalidOperationException(
-					string.Format(
-						"Invalid committed event order.  Last: '{0}' Received: '{1}'  LastDelete: '{2}'",
-						_lastEventPosition, message.Data.Position, _lastEventPosition));
+					$"Invalid committed event order.  Last: '{_lastEventPosition}' Received: '{message.Data.Position}'  LastDelete: '{_lastEventPosition}'");
 			_lastEventPosition = message.Data.Position;
 		}
 
@@ -122,9 +116,7 @@ namespace EventStore.Projections.Core.Services.Processing {
 			if (_lastEventPosition > message.DeleteLinkOrEventPosition.Value
 			    || _lastDeletePosition >= message.DeleteLinkOrEventPosition.Value)
 				throw new InvalidOperationException(
-					string.Format(
-						"Invalid partition deleted event order.  Last: '{0}' Received: '{1}'  LastDelete: '{2}'",
-						_lastEventPosition, message.DeleteLinkOrEventPosition.Value, _lastEventPosition));
+					$"Invalid partition deleted event order.  Last: '{_lastEventPosition}' Received: '{message.DeleteLinkOrEventPosition.Value}'  LastDelete: '{_lastEventPosition}'");
 			_lastDeletePosition = message.DeleteLinkOrEventPosition.Value;
 		}
 
@@ -150,7 +142,7 @@ namespace EventStore.Projections.Core.Services.Processing {
 			EnsureStarted();
 			if (_headSubscribers.ContainsKey(projectionId))
 				throw new InvalidOperationException(
-					string.Format("Projection '{0}' has been already subscribed", projectionId));
+					$"Projection '{projectionId}' has been already subscribed");
 			if (_subscribeFromPosition.CommitPosition <= fromTransactionFilePosition) {
 				if (!DispatchRecentMessagesTo(readerSubscription, fromTransactionFilePosition)) {
 					return false;
@@ -167,7 +159,7 @@ namespace EventStore.Projections.Core.Services.Processing {
 			EnsureStarted();
 			if (!_headSubscribers.ContainsKey(projectionId))
 				throw new InvalidOperationException(
-					string.Format("Projection '{0}' has not been subscribed", projectionId));
+					$"Projection '{projectionId}' has not been subscribed");
 			_headSubscribers.Remove(projectionId);
 		}
 
@@ -177,17 +169,12 @@ namespace EventStore.Projections.Core.Services.Processing {
 					try {
 						m.Handle(subscription);
 					} catch (Exception ex) {
-						var item = m as CommittedEventItem;
 						string message;
-						if (item != null) {
-							message = string.Format(
-								"The heading subscription failed to handle a recently cached event {0}:{1}@{2} because {3}",
-								item.Message.Data.EventStreamId, item.Message.Data.EventType,
-								item.Message.Data.PositionSequenceNumber, ex.Message);
+
+						if (m is CommittedEventItem item) {
+							message = $"The heading subscription failed to handle a recently cached event {item.Message.Data.EventStreamId}:{item.Message.Data.EventType}@{item.Message.Data.PositionSequenceNumber} because {ex.Message}";
 						} else {
-							message = string.Format(
-								"The heading subscription failed to handle a recently cached deleted event at position {0} because {1}",
-								m.Position, ex.Message);
+							message = $"The heading subscription failed to handle a recently cached deleted event at position {m.Position} because {ex.Message}";
 						}
 
 						_publisher.Publish(
@@ -206,9 +193,7 @@ namespace EventStore.Projections.Core.Services.Processing {
 					subscriber.Handle(message);
 				} catch (Exception ex) {
 					_publisher.Publish(new EventReaderSubscriptionMessage.Failed(subscriber.SubscriptionId,
-						string.Format("The heading subscription failed to handle an event {0}:{1}@{2} because {3}",
-							message.Data.EventStreamId, message.Data.EventType, message.Data.PositionSequenceNumber,
-							ex.Message)));
+						$"The heading subscription failed to handle an event {message.Data.EventStreamId}:{message.Data.EventType}@{message.Data.PositionSequenceNumber} because {ex.Message}"));
 				}
 			}
 		}
diff --git a/src/EventStore.Projections.Core/Services/Processing/MultiStreamEventReader.cs b/src/EventStore.Projections.Core/Services/Processing/MultiStreamEventReader.cs
index d404c93fc..3af02f504 100644
--- a/src/EventStore.Projections.Core/Services/Processing/MultiStreamEventReader.cs
+++ b/src/EventStore.Projections.Core/Services/Processing/MultiStreamEventReader.cs
@@ -69,7 +69,7 @@ namespace EventStore.Projections.Core.Services.Processing {
 			foreach (var stream in _streams) {
 				if (!fromPositions.Streams.ContainsKey(stream))
 					throw new ArgumentException(
-						string.Format("The '{0}' stream position has not been set", stream), "fromPositions");
+						$"The '{stream}' stream position has not been set", "fromPositions");
 			}
 		}
 
@@ -98,7 +98,7 @@ namespace EventStore.Projections.Core.Services.Processing {
 			if (_disposed)
 				return;
 			if (!_streams.Contains(message.EventStreamId))
-				throw new InvalidOperationException(string.Format("Invalid stream name: {0}", message.EventStreamId));
+				throw new InvalidOperationException($"Invalid stream name: {message.EventStreamId}");
 			if (!_eventsRequested.Contains(message.EventStreamId))
 				throw new InvalidOperationException("Read events has not been requested");
 			if (Paused)
@@ -151,7 +151,7 @@ namespace EventStore.Projections.Core.Services.Processing {
 					return;
 				default:
 					throw new NotSupportedException(
-						string.Format("ReadEvents result code was not recognized. Code: {0}", message.Result));
+						$"ReadEvents result code was not recognized. Code: {message.Result}");
 			}
 		}
 
@@ -320,9 +320,7 @@ namespace EventStore.Projections.Core.Services.Processing {
 
 			if (positionEvent.EventNumber != fromPosition) {
 				// This can happen when the original stream has $maxAge/$maxCount set
-				_publisher.Publish(new ReaderSubscriptionMessage.Faulted(EventReaderCorrelationId, string.Format(
-					"Event number {0} was expected in the stream {1}, but event number {2} was received. This may happen if events have been deleted from the beginning of your stream, please reset your projection.",
-					fromPosition, streamId, positionEvent.EventNumber), this.GetType()));
+				_publisher.Publish(new ReaderSubscriptionMessage.Faulted(EventReaderCorrelationId, $"Event number {fromPosition} was expected in the stream {streamId}, but event number {positionEvent.EventNumber} was received. This may happen if events have been deleted from the beginning of your stream, please reset your projection.", this.GetType()));
 				return;
 			}
 
diff --git a/src/EventStore.Projections.Core/Services/Processing/MultiStreamMultiOutputCheckpointManager.cs b/src/EventStore.Projections.Core/Services/Processing/MultiStreamMultiOutputCheckpointManager.cs
index 6f4093724..186c98bae 100644
--- a/src/EventStore.Projections.Core/Services/Processing/MultiStreamMultiOutputCheckpointManager.cs
+++ b/src/EventStore.Projections.Core/Services/Processing/MultiStreamMultiOutputCheckpointManager.cs
@@ -163,13 +163,13 @@ namespace EventStore.Projections.Core.Services.Processing {
 					case ReadStreamResult.Success:
 						if (completed.Events.Length != 1)
 							throw new Exception(
-								string.Format("Cannot read {0}. Error: {1}", linkTo, completed.Error));
+								$"Cannot read {linkTo}. Error: {completed.Error}");
 						item.SetLoadedEvent(completed.Events[0]);
 						_loadingItemsCount--;
 						CheckAllEventsLoaded();
 						break;
 					default:
-						throw new Exception(string.Format("Cannot read {0}. Error: {1}", linkTo, completed.Error));
+						throw new Exception($"Cannot read {linkTo}. Error: {completed.Error}");
 				}
 			});
 		}
diff --git a/src/EventStore.Projections.Core/Services/Processing/MultiStreamPositionTagger.cs b/src/EventStore.Projections.Core/Services/Processing/MultiStreamPositionTagger.cs
index 1b2b34f7e..fe671a0e5 100644
--- a/src/EventStore.Projections.Core/Services/Processing/MultiStreamPositionTagger.cs
+++ b/src/EventStore.Projections.Core/Services/Processing/MultiStreamPositionTagger.cs
@@ -29,11 +29,11 @@ namespace EventStore.Projections.Core.Services.Processing {
 			CheckpointTag previous, ReaderSubscriptionMessage.CommittedEventDistributed committedEvent) {
 			if (previous.Phase != Phase)
 				throw new ArgumentException(
-					string.Format("Invalid checkpoint tag phase.  Expected: {0} Was: {1}", Phase, previous.Phase));
+					$"Invalid checkpoint tag phase.  Expected: {Phase} Was: {previous.Phase}");
 
 			if (!_streams.Contains(committedEvent.Data.PositionStreamId))
 				throw new InvalidOperationException(
-					string.Format("Invalid stream '{0}'", committedEvent.Data.EventStreamId));
+					$"Invalid stream '{committedEvent.Data.EventStreamId}'");
 			return previous.UpdateStreamPosition(
 				committedEvent.Data.PositionStreamId, committedEvent.Data.PositionSequenceNumber);
 		}
@@ -64,8 +64,7 @@ namespace EventStore.Projections.Core.Services.Processing {
 				return tag;
 			if (tag.Phase > Phase)
 				throw new ArgumentException(
-					string.Format("Invalid checkpoint tag phase.  Expected less or equal to: {0} Was: {1}", Phase,
-						tag.Phase), "tag");
+					$"Invalid checkpoint tag phase.  Expected less or equal to: {Phase} Was: {tag.Phase}", "tag");
 
 			if (tag.Mode_ == CheckpointTag.Mode.MultiStream) {
 				long p;
@@ -88,9 +87,7 @@ namespace EventStore.Projections.Core.Services.Processing {
 					throw new NotSupportedException(
 						"Conversion from Position to MultiStream position tag is not supported");
 				default:
-					throw new NotSupportedException(string.Format(
-						"The given checkpoint is invalid. Possible causes might include having written an event to the projection's managed stream. The bad checkpoint: {0}",
-						tag.ToString()));
+					throw new NotSupportedException($"The given checkpoint is invalid. Possible causes might include having written an event to the projection's managed stream. The bad checkpoint: {tag.ToString()}");
 			}
 		}
 	}
diff --git a/src/EventStore.Projections.Core/Services/Processing/PartitionState.cs b/src/EventStore.Projections.Core/Services/Processing/PartitionState.cs
index f59ab950d..c74a33326 100644
--- a/src/EventStore.Projections.Core/Services/Processing/PartitionState.cs
+++ b/src/EventStore.Projections.Core/Services/Processing/PartitionState.cs
@@ -24,8 +24,8 @@ namespace EventStore.Projections.Core.Services.Processing {
 
 			if (!string.IsNullOrEmpty(serializedState)) {
 				var deserialized = JsonConvert.DeserializeObject(serializedState, JsonSettings);
-				var array = deserialized as JArray;
-				if (array != null && array.Count > 0) {
+
+				if (deserialized is JArray array && array.Count > 0) {
 					state = array[0] as JToken;
 					if (array.Count == 2) {
 						result = array[1] as JToken;
@@ -42,7 +42,7 @@ namespace EventStore.Projections.Core.Services.Processing {
 		}
 
 		private static void Error(JsonTextReader reader, string message) {
-			throw new Exception(string.Format("{0} (At: {1}, {2})", message, reader.LineNumber, reader.LinePosition));
+			throw new Exception($"{message} (At: {reader.LineNumber}, {reader.LinePosition})");
 		}
 
 		private readonly string _state;
diff --git a/src/EventStore.Projections.Core/Services/Processing/PartitionStateCache.cs b/src/EventStore.Projections.Core/Services/Processing/PartitionStateCache.cs
index 1f72287e2..e621f3ebf 100644
--- a/src/EventStore.Projections.Core/Services/Processing/PartitionStateCache.cs
+++ b/src/EventStore.Projections.Core/Services/Processing/PartitionStateCache.cs
@@ -67,9 +67,7 @@ namespace EventStore.Projections.Core.Services.Processing {
 			EnsureCanLockPartitionAt(partition, lockAt);
 			if (lockAt != null && lockAt <= stateData.Item2)
 				throw new InvalidOperationException(
-					string.Format(
-						"Attempt to relock the '{0}' partition state locked at the '{1}' position at the earlier position '{2}'",
-						partition, stateData.Item2, lockAt));
+					$"Attempt to relock the '{partition}' partition state locked at the '{stateData.Item2}' position at the earlier position '{lockAt}'");
 
 			_partitionStates[partition] = Tuple.Create(stateData.Item1, lockAt);
 			_cachedItemCount = _partitionStates.Count;
@@ -92,14 +90,12 @@ namespace EventStore.Projections.Core.Services.Processing {
 			Tuple<PartitionState, CheckpointTag> stateData;
 			if (!_partitionStates.TryGetValue(partition, out stateData)) {
 				throw new InvalidOperationException(
-					string.Format(
-						"Partition '{0}' state was requested as locked but it is missing in the cache.", partition));
+					$"Partition '{partition}' state was requested as locked but it is missing in the cache.");
 			}
 
 			if (stateData.Item2 != null && stateData.Item2 <= _unlockedBefore)
 				throw new InvalidOperationException(
-					string.Format(
-						"Partition '{0}' state was requested as locked but it is cached as unlocked", partition));
+					$"Partition '{partition}' state was requested as locked but it is cached as unlocked");
 			return stateData.Item1;
 		}
 
@@ -136,9 +132,7 @@ namespace EventStore.Projections.Core.Services.Processing {
 				throw new InvalidOperationException("Root partition must be locked forever");
 			if (at != null && at <= _unlockedBefore)
 				throw new InvalidOperationException(
-					string.Format(
-						"Attempt to lock the '{0}' partition state at the position '{1}' before the unlocked position '{2}'",
-						partition, at, _unlockedBefore));
+					$"Attempt to lock the '{partition}' partition state at the position '{at}' before the unlocked position '{_unlockedBefore}'");
 		}
 
 		public IEnumerable<Tuple<string, PartitionState>> Enumerate() {
diff --git a/src/EventStore.Projections.Core/Services/Processing/PhasePositionTagger.cs b/src/EventStore.Projections.Core/Services/Processing/PhasePositionTagger.cs
index 5255bc872..0406f3417 100644
--- a/src/EventStore.Projections.Core/Services/Processing/PhasePositionTagger.cs
+++ b/src/EventStore.Projections.Core/Services/Processing/PhasePositionTagger.cs
@@ -40,8 +40,7 @@ namespace EventStore.Projections.Core.Services.Processing {
 				return tag;
 			if (tag.Phase > Phase)
 				throw new ArgumentException(
-					string.Format("Invalid checkpoint tag phase.  Expected less or equal to: {0} Was: {1}", Phase,
-						tag.Phase), "tag");
+					$"Invalid checkpoint tag phase.  Expected less or equal to: {Phase} Was: {tag.Phase}", "tag");
 
 			if (tag.Mode_ == CheckpointTag.Mode.Phase) {
 				return tag;
diff --git a/src/EventStore.Projections.Core/Services/Processing/PositionTracker.cs b/src/EventStore.Projections.Core/Services/Processing/PositionTracker.cs
index d88058250..0460fd0bc 100644
--- a/src/EventStore.Projections.Core/Services/Processing/PositionTracker.cs
+++ b/src/EventStore.Projections.Core/Services/Processing/PositionTracker.cs
@@ -18,7 +18,7 @@ namespace EventStore.Projections.Core.Services.Processing {
 				throw new InvalidOperationException("Initial position was not set");
 			if (newTag <= _lastTag)
 				throw new InvalidOperationException(
-					string.Format("Event at checkpoint tag {0} has been already processed", newTag));
+					$"Event at checkpoint tag {newTag} has been already processed");
 			InternalUpdate(newTag);
 		}
 
diff --git a/src/EventStore.Projections.Core/Services/Processing/PreparePositionTagger.cs b/src/EventStore.Projections.Core/Services/Processing/PreparePositionTagger.cs
index bd09cf752..d44a07383 100644
--- a/src/EventStore.Projections.Core/Services/Processing/PreparePositionTagger.cs
+++ b/src/EventStore.Projections.Core/Services/Processing/PreparePositionTagger.cs
@@ -18,7 +18,7 @@ namespace EventStore.Projections.Core.Services.Processing {
 			CheckpointTag previous, ReaderSubscriptionMessage.CommittedEventDistributed committedEvent) {
 			if (previous.Phase != Phase)
 				throw new ArgumentException(
-					string.Format("Invalid checkpoint tag phase.  Expected: {0} Was: {1}", Phase, previous.Phase));
+					$"Invalid checkpoint tag phase.  Expected: {Phase} Was: {previous.Phase}");
 
 			return CheckpointTag.FromPreparePosition(previous.Phase, committedEvent.Data.Position.PreparePosition);
 		}
@@ -46,8 +46,7 @@ namespace EventStore.Projections.Core.Services.Processing {
 				return tag;
 			if (tag.Phase > Phase)
 				throw new ArgumentException(
-					string.Format(
-						"Invalid checkpoint tag phase.  Expected less or equal to: {0} Was: {1}", Phase, tag.Phase),
+					$"Invalid checkpoint tag phase.  Expected less or equal to: {Phase} Was: {tag.Phase}",
 					"tag");
 
 			if (tag.Mode_ == CheckpointTag.Mode.PreparePosition)
@@ -67,9 +66,7 @@ namespace EventStore.Projections.Core.Services.Processing {
 					throw new NotSupportedException(
 						"Conversion from Position to PreparePosition position tag is not supported");
 				default:
-					throw new NotSupportedException(string.Format(
-						"The given checkpoint is invalid. Possible causes might include having written an event to the projection's managed stream. The bad checkpoint: {0}",
-						tag.ToString()));
+					throw new NotSupportedException($"The given checkpoint is invalid. Possible causes might include having written an event to the projection's managed stream. The bad checkpoint: {tag.ToString()}");
 			}
 		}
 	}
diff --git a/src/EventStore.Projections.Core/Services/Processing/ProjectionCheckpoint.cs b/src/EventStore.Projections.Core/Services/Processing/ProjectionCheckpoint.cs
index 52c9ab3ff..d20728192 100644
--- a/src/EventStore.Projections.Core/Services/Processing/ProjectionCheckpoint.cs
+++ b/src/EventStore.Projections.Core/Services/Processing/ProjectionCheckpoint.cs
@@ -94,14 +94,10 @@ namespace EventStore.Projections.Core.Services.Processing {
 		private void ValidateCheckpointPosition(CheckpointTag position) {
 			if (position <= _from)
 				throw new InvalidOperationException(
-					string.Format(
-						"Checkpoint position before or equal to the checkpoint start position. Requested: '{0}' Started: '{1}'",
-						position, _from));
+					$"Checkpoint position before or equal to the checkpoint start position. Requested: '{position}' Started: '{_from}'");
 			if (position < _last)
 				throw new InvalidOperationException(
-					string.Format(
-						"Checkpoint position before last handled position. Requested: '{0}' Last: '{1}'", position,
-						_last));
+					$"Checkpoint position before last handled position. Requested: '{position}' Last: '{_last}'");
 		}
 
 		public void Prepare(CheckpointTag position) {
diff --git a/src/EventStore.Projections.Core/Services/Processing/StagedProcessingQueue.cs b/src/EventStore.Projections.Core/Services/Processing/StagedProcessingQueue.cs
index 835adc5e6..9f640d46c 100644
--- a/src/EventStore.Projections.Core/Services/Processing/StagedProcessingQueue.cs
+++ b/src/EventStore.Projections.Core/Services/Processing/StagedProcessingQueue.cs
@@ -31,8 +31,7 @@ namespace EventStore.Projections.Core.Services.Processing {
 			}
 
 			public override string ToString() {
-				return string.Format("ReadForStage: {3},  Busy: {1}, Completed: {2} => {0}", Task, Busy, Completed,
-					ReadForStage);
+				return $"ReadForStage: {Task},  Busy: {Busy}, Completed: {Completed} => {ReadForStage}";
 			}
 		}
 
@@ -203,14 +202,14 @@ namespace EventStore.Projections.Core.Services.Processing {
 			if (!_orderedStage[stage]) {
 				if (_byUnorderedStageFirst[stage].Entry != entry)
 					throw new ArgumentException(
-						string.Format("entry is not a head of the queue at the stage {0}", stage), "entry");
+						$"entry is not a head of the queue at the stage {stage}", "entry");
 				_byUnorderedStageFirst[stage] = _byUnorderedStageFirst[stage].Next;
 				if (_byUnorderedStageFirst[stage] == null)
 					_byUnorderedStageLast[stage] = null;
 			} else {
 				if (_byOrderedStageLast[stage] != entry)
 					throw new ArgumentException(
-						string.Format("entry is not a head of the queue at the stage {0}", stage), "entry");
+						$"entry is not a head of the queue at the stage {stage}", "entry");
 				_byOrderedStageLast[stage] = entry.Next;
 			}
 		}
diff --git a/src/EventStore.Projections.Core/Services/Processing/StreamEventFilter.cs b/src/EventStore.Projections.Core/Services/Processing/StreamEventFilter.cs
index 33d13237e..9feb220ef 100644
--- a/src/EventStore.Projections.Core/Services/Processing/StreamEventFilter.cs
+++ b/src/EventStore.Projections.Core/Services/Processing/StreamEventFilter.cs
@@ -22,7 +22,7 @@ namespace EventStore.Projections.Core.Services.Processing {
 		}
 
 		public override string ToString() {
-			return string.Format("StreamId: {0}", _streamId);
+			return $"StreamId: {_streamId}";
 		}
 	}
 }
diff --git a/src/EventStore.Projections.Core/Services/Processing/StreamEventReader.cs b/src/EventStore.Projections.Core/Services/Processing/StreamEventReader.cs
index fb6518d45..f2b96065d 100644
--- a/src/EventStore.Projections.Core/Services/Processing/StreamEventReader.cs
+++ b/src/EventStore.Projections.Core/Services/Processing/StreamEventReader.cs
@@ -58,7 +58,7 @@ namespace EventStore.Projections.Core.Services.Processing {
 				throw new InvalidOperationException("Read events has not been requested");
 			if (message.EventStreamId != _streamName)
 				throw new InvalidOperationException(
-					string.Format("Invalid stream name: {0}.  Expected: {1}", message.EventStreamId, _streamName));
+					$"Invalid stream name: {message.EventStreamId}.  Expected: {_streamName}");
 			if (Paused)
 				throw new InvalidOperationException("Paused");
 			if (message.CorrelationId != _pendingRequestCorrelationId) {
@@ -119,7 +119,7 @@ namespace EventStore.Projections.Core.Services.Processing {
 					return;
 				default:
 					throw new NotSupportedException(
-						string.Format("ReadEvents result code was not recognized. Code: {0}", message.Result));
+						$"ReadEvents result code was not recognized. Code: {message.Result}");
 			}
 		}
 
@@ -201,9 +201,7 @@ namespace EventStore.Projections.Core.Services.Processing {
 			EventRecord positionEvent = pair.OriginalEvent;
 			if (positionEvent.EventNumber != sequenceNumber) {
 				// This can happen when the original stream has $maxAge/$maxCount set
-				_publisher.Publish(new ReaderSubscriptionMessage.Faulted(EventReaderCorrelationId, string.Format(
-					"Event number {0} was expected in the stream {1}, but event number {2} was received. This may happen if events have been deleted from the beginning of your stream, please reset your projection.",
-					sequenceNumber, _streamName, positionEvent.EventNumber), this.GetType()));
+				_publisher.Publish(new ReaderSubscriptionMessage.Faulted(EventReaderCorrelationId, $"Event number {sequenceNumber} was expected in the stream {_streamName}, but event number {positionEvent.EventNumber} was received. This may happen if events have been deleted from the beginning of your stream, please reset your projection.", this.GetType()));
 				return;
 			}
 
diff --git a/src/EventStore.Projections.Core/Services/Processing/StreamPositionTagger.cs b/src/EventStore.Projections.Core/Services/Processing/StreamPositionTagger.cs
index 5b95a88a5..1b0e47115 100644
--- a/src/EventStore.Projections.Core/Services/Processing/StreamPositionTagger.cs
+++ b/src/EventStore.Projections.Core/Services/Processing/StreamPositionTagger.cs
@@ -27,12 +27,11 @@ namespace EventStore.Projections.Core.Services.Processing {
 			CheckpointTag previous, ReaderSubscriptionMessage.CommittedEventDistributed committedEvent) {
 			if (previous.Phase != Phase)
 				throw new ArgumentException(
-					string.Format("Invalid checkpoint tag phase.  Expected: {0} Was: {1}", Phase, previous.Phase));
+					$"Invalid checkpoint tag phase.  Expected: {Phase} Was: {previous.Phase}");
 
 			if (committedEvent.Data.PositionStreamId != _stream)
 				throw new InvalidOperationException(
-					string.Format(
-						"Invalid stream '{0}'.  Expected stream is '{1}'", committedEvent.Data.EventStreamId, _stream));
+					$"Invalid stream '{committedEvent.Data.EventStreamId}'.  Expected stream is '{_stream}'");
 			return CheckpointTag.FromStreamPosition(previous.Phase, committedEvent.Data.PositionStreamId,
 				committedEvent.Data.PositionSequenceNumber);
 		}
@@ -46,12 +45,11 @@ namespace EventStore.Projections.Core.Services.Processing {
 			CheckpointTag previous, ReaderSubscriptionMessage.EventReaderPartitionDeleted partitionDeleted) {
 			if (previous.Phase != Phase)
 				throw new ArgumentException(
-					string.Format("Invalid checkpoint tag phase.  Expected: {0} Was: {1}", Phase, previous.Phase));
+					$"Invalid checkpoint tag phase.  Expected: {Phase} Was: {previous.Phase}");
 
 			if (partitionDeleted.PositionStreamId != _stream)
 				throw new InvalidOperationException(
-					string.Format(
-						"Invalid stream '{0}'.  Expected stream is '{1}'", partitionDeleted.Partition, _stream));
+					$"Invalid stream '{partitionDeleted.Partition}'.  Expected stream is '{_stream}'");
 
 			// return ordinary checkpoint tag (suitable for fromCategory.foreachStream as well as for regular fromStream
 			return CheckpointTag.FromStreamPosition(
@@ -71,8 +69,7 @@ namespace EventStore.Projections.Core.Services.Processing {
 				return tag;
 			if (tag.Phase > Phase)
 				throw new ArgumentException(
-					string.Format("Invalid checkpoint tag phase.  Expected less or equal to: {0} Was: {1}", Phase,
-						tag.Phase), "tag");
+					$"Invalid checkpoint tag phase.  Expected less or equal to: {Phase} Was: {tag.Phase}", "tag");
 
 
 			if (tag.Mode_ == CheckpointTag.Mode.Stream) {
@@ -95,9 +92,7 @@ namespace EventStore.Projections.Core.Services.Processing {
 				case CheckpointTag.Mode.Position:
 					throw new NotSupportedException("Conversion from Position to Stream position tag is not supported");
 				default:
-					throw new NotSupportedException(string.Format(
-						"The given checkpoint is invalid. Possible causes might include having written an event to the projection's managed stream. The bad checkpoint: {0}",
-						tag.ToString()));
+					throw new NotSupportedException($"The given checkpoint is invalid. Possible causes might include having written an event to the projection's managed stream. The bad checkpoint: {tag.ToString()}");
 			}
 		}
 	}
diff --git a/src/EventStore.Projections.Core/Services/Processing/TransactionFileEventReader.cs b/src/EventStore.Projections.Core/Services/Processing/TransactionFileEventReader.cs
index 4167d2ce8..182024392 100644
--- a/src/EventStore.Projections.Core/Services/Processing/TransactionFileEventReader.cs
+++ b/src/EventStore.Projections.Core/Services/Processing/TransactionFileEventReader.cs
@@ -164,9 +164,7 @@ namespace EventStore.Projections.Core.Services.Processing {
 			TFPos receivedPosition = @event.OriginalPosition.Value;
 			if (currentFrom > receivedPosition)
 				throw new Exception(
-					string.Format(
-						"ReadFromTF returned events in incorrect order.  Last known position is: {0}.  Received position is: {1}",
-						currentFrom, receivedPosition));
+					$"ReadFromTF returned events in incorrect order.  Last known position is: {currentFrom}.  Received position is: {receivedPosition}");
 
 			var resolvedEvent = new ResolvedEvent(@event, null);
 
diff --git a/src/EventStore.Projections.Core/Services/Processing/TransactionFilePositionTagger.cs b/src/EventStore.Projections.Core/Services/Processing/TransactionFilePositionTagger.cs
index f1f9e7b1e..9740bbde9 100644
--- a/src/EventStore.Projections.Core/Services/Processing/TransactionFilePositionTagger.cs
+++ b/src/EventStore.Projections.Core/Services/Processing/TransactionFilePositionTagger.cs
@@ -16,8 +16,7 @@ namespace EventStore.Projections.Core.Services.Processing {
 				return tag;
 			if (tag.Phase > Phase)
 				throw new ArgumentException(
-					string.Format("Invalid checkpoint tag phase.  Expected less or equal to: {0} Was: {1}", Phase,
-						tag.Phase), "tag");
+					$"Invalid checkpoint tag phase.  Expected less or equal to: {Phase} Was: {tag.Phase}", "tag");
 
 			if (tag.Mode_ == CheckpointTag.Mode.Position)
 				return tag;
@@ -35,9 +34,7 @@ namespace EventStore.Projections.Core.Services.Processing {
 					throw new NotSupportedException(
 						"Conversion from PreparePosition to Position position tag is not supported");
 				default:
-					throw new NotSupportedException(string.Format(
-						"The given checkpoint is invalid. Possible causes might include having written an event to the projection's managed stream. The bad checkpoint: {0}",
-						tag.ToString()));
+					throw new NotSupportedException($"The given checkpoint is invalid. Possible causes might include having written an event to the projection's managed stream. The bad checkpoint: {tag.ToString()}");
 			}
 		}
 
@@ -54,7 +51,7 @@ namespace EventStore.Projections.Core.Services.Processing {
 			CheckpointTag previous, ReaderSubscriptionMessage.CommittedEventDistributed committedEvent) {
 			if (previous.Phase != Phase)
 				throw new ArgumentException(
-					string.Format("Invalid checkpoint tag phase.  Expected: {0} Was: {1}", Phase, previous.Phase));
+					$"Invalid checkpoint tag phase.  Expected: {Phase} Was: {previous.Phase}");
 
 			return CheckpointTag.FromPosition(previous.Phase, committedEvent.Data.Position);
 		}
@@ -68,7 +65,7 @@ namespace EventStore.Projections.Core.Services.Processing {
 			ReaderSubscriptionMessage.EventReaderPartitionDeleted partitionDeleted) {
 			if (previous.Phase != Phase)
 				throw new ArgumentException(
-					string.Format("Invalid checkpoint tag phase.  Expected: {0} Was: {1}", Phase, previous.Phase));
+					$"Invalid checkpoint tag phase.  Expected: {Phase} Was: {previous.Phase}");
 
 			if (partitionDeleted.DeleteLinkOrEventPosition == null)
 				throw new ArgumentException(
diff --git a/src/EventStore.Projections.Core/Services/PublishSubscribeDispatcher.cs b/src/EventStore.Projections.Core/Services/PublishSubscribeDispatcher.cs
index cc400619f..bebb9a057 100644
--- a/src/EventStore.Projections.Core/Services/PublishSubscribeDispatcher.cs
+++ b/src/EventStore.Projections.Core/Services/PublishSubscribeDispatcher.cs
@@ -85,8 +85,7 @@ namespace EventStore.Projections.Core.Services {
 			lock (_map) {
 				object subscriber;
 				if (_map.TryGetValue(correlationId, out subscriber)) {
-					var h = subscriber as IHandle<T>;
-					if (h != null)
+					if (subscriber is IHandle<T> h)
 						h.Handle(message);
 					return true;
 				}
diff --git a/src/EventStore.Projections.Core/Services/v8/DefaultV8ProjectionStateHandler.cs b/src/EventStore.Projections.Core/Services/v8/DefaultV8ProjectionStateHandler.cs
index 5fb9f8f26..200d28bda 100644
--- a/src/EventStore.Projections.Core/Services/v8/DefaultV8ProjectionStateHandler.cs
+++ b/src/EventStore.Projections.Core/Services/v8/DefaultV8ProjectionStateHandler.cs
@@ -11,7 +11,7 @@ namespace EventStore.Projections.Core.Services.v8 {
 		}
 
 		public static Tuple<string, string> GetModuleSource(string name) {
-			var resourceName = string.Format("{0}.{1}.js", Locations.PreludeResourcesPath, name);
+			var resourceName = $"{Locations.PreludeResourcesPath}.{name}.js";
 			var assembly = Assembly.GetAssembly(typeof(ProjectionManagerNode));
 			using (Stream stream = assembly.GetManifestResourceStream(resourceName))
 			using (StreamReader reader = new StreamReader(stream, Helper.UTF8NoBom)) {
diff --git a/src/EventStore.Rags/ConsoleString.cs b/src/EventStore.Rags/ConsoleString.cs
index 594ebded9..7ba951073 100644
--- a/src/EventStore.Rags/ConsoleString.cs
+++ b/src/EventStore.Rags/ConsoleString.cs
@@ -62,7 +62,7 @@ namespace EventStore.Rags {
 		/// <param name="obj">The ConsoleCharacter or char to compare to.</param>
 		/// <returns></returns>
 		public override bool Equals(object obj) {
-			if (obj is char) return Value.Equals((char)obj);
+			if (obj is char c) return Value.Equals(c);
 			if (obj is ConsoleCharacter == false) return false;
 			var other = (ConsoleCharacter)obj;
 
diff --git a/src/EventStore.Rags/Translators.cs b/src/EventStore.Rags/Translators.cs
index ef1069654..86a49a47d 100644
--- a/src/EventStore.Rags/Translators.cs
+++ b/src/EventStore.Rags/Translators.cs
@@ -38,42 +38,42 @@ namespace EventStore.Rags {
 		public static DateTime TranslateDateTime(string prop, string val) {
 			DateTime ret;
 			if (DateTime.TryParse(val, out ret) == false)
-				throw new FormatException(String.Format("value for {0} must be a valid date time: {1}", prop, val));
+				throw new FormatException($"value for {prop} must be a valid date time: {val}");
 			return ret;
 		}
 
 		public static double TranslateDouble(string prop, string val) {
 			double ret;
 			if (double.TryParse(val, out ret) == false)
-				throw new FormatException(String.Format("value for {0} must be a number: {1}", prop, val));
+				throw new FormatException($"value for {prop} must be a number: {val}");
 			return ret;
 		}
 
 		public static long TranslateLong(string prop, string val) {
 			long ret;
 			if (long.TryParse(val, out ret) == false)
-				throw new FormatException(String.Format("value for {0} must be an integer: {1}", prop, val));
+				throw new FormatException($"value for {prop} must be an integer: {val}");
 			return ret;
 		}
 
 		public static int TranslateInt(string prop, string val) {
 			int ret;
 			if (int.TryParse(val, out ret) == false)
-				throw new FormatException(String.Format("value for {0} must be an integer: {1}", prop, val));
+				throw new FormatException($"value for {prop} must be an integer: {val}");
 			return ret;
 		}
 
 		public static byte TranslateByte(string prop, string val) {
 			byte ret;
 			if (byte.TryParse(val, out ret) == false)
-				throw new FormatException(String.Format("value for {0} must be a byte: {1}", prop, val));
+				throw new FormatException($"value for {prop} must be a byte: {val}");
 			return ret;
 		}
 
 		public static Guid TranslateGuid(string prop, string val) {
 			Guid ret;
 			if (Guid.TryParse(val, out ret) == false)
-				throw new FormatException(String.Format("value for {0} must be a Guid: {1}", prop, val));
+				throw new FormatException($"value for {prop} must be a Guid: {val}");
 			return ret;
 		}
 	}
diff --git a/src/EventStore.Rags/Yaml.cs b/src/EventStore.Rags/Yaml.cs
index baefd1748..583130675 100644
--- a/src/EventStore.Rags/Yaml.cs
+++ b/src/EventStore.Rags/Yaml.cs
@@ -18,8 +18,7 @@ namespace EventStore.Rags {
 				yamlStream.Load(reader);
 			} catch (Exception ex) {
 				throw new OptionException(
-					String.Format("An invalid configuration file has been specified. {0}{1}", Environment.NewLine,
-						ex.Message), "config");
+					$"An invalid configuration file has been specified. {Environment.NewLine}{ex.Message}", "config");
 			}
 
 			var yamlNode = (YamlMappingNode)yamlStream.Documents[0].RootNode;
@@ -35,23 +34,19 @@ namespace EventStore.Rags {
 			}
 
 			foreach (var yamlElement in yamlNode.Children) {
-				var yamlScalarNode = yamlElement.Value as YamlScalarNode;
-				var yamlSequenceNode = yamlElement.Value as YamlSequenceNode;
-				var yamlMappingNode = yamlElement.Value as YamlMappingNode;
-				if (yamlSequenceNode != null) {
+				if (yamlElement.Value is YamlSequenceNode yamlSequenceNode) {
 					var values = yamlSequenceNode.Children.Select(x => ((YamlScalarNode)x).Value);
 					try {
 						//TODO GFY DO WE PREFER STRINGS OR TYPES HERE?
 						options.Add(OptionSource.String("Config File", yamlElement.Key.ToString(), values.ToArray()));
 					} catch (InvalidCastException) {
-						var message = String.Format("Please ensure that {0} is a valid YAML array.{1}", yamlElement.Key,
-							Environment.NewLine);
+						var message = $"Please ensure that {yamlElement.Key} is a valid YAML array.{Environment.NewLine}";
 						throw new OptionException(message, yamlElement.Key.ToString());
 					}
-				} else if (yamlScalarNode != null) {
+				} else if (yamlElement.Value is YamlScalarNode yamlScalarNode) {
 					options.Add(OptionSource.String("Config File", yamlElement.Key.ToString(),
 						yamlElement.Value.ToString()));
-				} else if (yamlMappingNode != null && !string.IsNullOrEmpty(sectionName)) {
+				} else if (yamlElement.Value is YamlMappingNode yamlMappingNode && !string.IsNullOrEmpty(sectionName)) {
 					options.Add(OptionSource.Typed("Config File", yamlElement.Key.ToString(),
 						yamlMappingNode.ToDictionary(x => x.Key.ToString(), x => x.Value.ToString())));
 				}
diff --git a/src/EventStore.TestClient/Client.cs b/src/EventStore.TestClient/Client.cs
index e3e205398..fbbeaae4c 100644
--- a/src/EventStore.TestClient/Client.cs
+++ b/src/EventStore.TestClient/Client.cs
@@ -169,7 +169,7 @@ namespace EventStore.TestClient {
 					connectionClosed(null, error);
 
 				if (failContextOnError)
-					context.Fail(reason: string.Format("Socket connection failed with error {0}.", error));
+					context.Fail(reason: $"Socket connection failed with error {error}.");
 			};
 
 			var endpoint = tcpEndPoint ?? TcpEndpoint;
diff --git a/src/EventStore.TestClient/Commands/DeleteProcessor.cs b/src/EventStore.TestClient/Commands/DeleteProcessor.cs
index 9d499253a..eb87aef25 100644
--- a/src/EventStore.TestClient/Commands/DeleteProcessor.cs
+++ b/src/EventStore.TestClient/Commands/DeleteProcessor.cs
@@ -45,14 +45,14 @@ namespace EventStore.TestClient.Commands {
 					context.Log.Information("Delete request took: {elapsed}.", sw.Elapsed);
 
 					if (pkg.Command != TcpCommand.DeleteStreamCompleted) {
-						context.Fail(reason: string.Format("Unexpected TCP package: {0}.", pkg.Command));
+						context.Fail(reason: $"Unexpected TCP package: {pkg.Command}.");
 						return;
 					}
 
 					var dto = pkg.Data.Deserialize<TcpClientMessageDto.DeleteStreamCompleted>();
 					if (dto.Result == TcpClientMessageDto.OperationResult.Success) {
 						context.Log.Information("DELETED event stream {stream}.", eventStreamId);
-						PerfUtils.LogTeamCityGraphData(string.Format("{0}-latency-ms", Keyword),
+						PerfUtils.LogTeamCityGraphData($"{Keyword}-latency-ms",
 							(int)Math.Round(sw.Elapsed.TotalMilliseconds));
 						context.Success();
 					} else {
diff --git a/src/EventStore.TestClient/Commands/DvuBasic/BankAccountBasicProducer.cs b/src/EventStore.TestClient/Commands/DvuBasic/BankAccountBasicProducer.cs
index 38caf2de2..d35037dc1 100644
--- a/src/EventStore.TestClient/Commands/DvuBasic/BankAccountBasicProducer.cs
+++ b/src/EventStore.TestClient/Commands/DvuBasic/BankAccountBasicProducer.cs
@@ -38,7 +38,7 @@ namespace EventStore.TestClient.Commands.DvuBasic {
 
 				if (deserialized.GetType() != generated.GetType()) {
 					isEqual = false;
-					reason = string.Format("Type does not match, actual type is {0}", deserialized.GetType().Name);
+					reason = $"Type does not match, actual type is {deserialized.GetType().Name}";
 				} else {
 					isEqual = generated.Equals(deserialized);
 					reason = "Value differs";
@@ -67,8 +67,7 @@ namespace EventStore.TestClient.Commands.DvuBasic {
 						if (eventType == typeof(AccountCheckPoint).Name) {
 							result = Codec.Json.From<AccountCheckPoint>(strData);
 						} else {
-							throw new NotSupportedException(string.Format("Event type {0} is not recognized.",
-								eventType));
+							throw new NotSupportedException($"Event type {eventType} is not recognized.");
 						}
 					}
 				}
@@ -115,7 +114,7 @@ namespace EventStore.TestClient.Commands.DvuBasic {
 		}
 
 		public override string ToString() {
-			return string.Format("Type: {0}; AccountNumber: {1}", GetType().Name, AccountNumber);
+			return $"Type: {GetType().Name}; AccountNumber: {AccountNumber}";
 		}
 	}
 
@@ -148,7 +147,7 @@ namespace EventStore.TestClient.Commands.DvuBasic {
 		}
 
 		public override string ToString() {
-			return string.Format("Type: {0}; CreditedAmount: {1}", GetType().Name, CreditedAmount);
+			return $"Type: {GetType().Name}; CreditedAmount: {CreditedAmount}";
 		}
 	}
 
@@ -181,7 +180,7 @@ namespace EventStore.TestClient.Commands.DvuBasic {
 		}
 
 		public override string ToString() {
-			return string.Format("Type: {0}; DebitedAmount: {1}", GetType().Name, DebitedAmount);
+			return $"Type: {GetType().Name}; DebitedAmount: {DebitedAmount}";
 		}
 	}
 
@@ -216,10 +215,7 @@ namespace EventStore.TestClient.Commands.DvuBasic {
 		}
 
 		public override string ToString() {
-			return string.Format("Type: {0}; CreditedAmount: {1}, DebitedAmount: {2}",
-				GetType().Name,
-				CreditedAmount,
-				DebitedAmount);
+			return $"Type: {GetType().Name}; CreditedAmount: {CreditedAmount}, DebitedAmount: {DebitedAmount}";
 		}
 	}
 }
diff --git a/src/EventStore.TestClient/Commands/DvuBasic/Status.cs b/src/EventStore.TestClient/Commands/DvuBasic/Status.cs
index 698627c1f..0fbbb0b0b 100644
--- a/src/EventStore.TestClient/Commands/DvuBasic/Status.cs
+++ b/src/EventStore.TestClient/Commands/DvuBasic/Status.cs
@@ -29,9 +29,9 @@ namespace EventStore.TestClient.Commands.DvuBasic {
 				"Failed %", "Failed/Sent", "Prepare Timeouts",
 				"Commit Timeouts", "Forward Timeouts",
 				"Wrong Versions", "Stream Deleted");
-			table.AppendRow(threadId.ToString(), string.Format("{0:0.0}%", sentP),
-				string.Format("{0}/{1}", sent, requests),
-				string.Format("{0:0.0}%", failsP), string.Format("{0}/{1}", fails, sent), prepareTimeouts.ToString(),
+			table.AppendRow(threadId.ToString(), $"{sentP:0.0}%",
+				$"{sent}/{requests}",
+				$"{failsP:0.0}%", $"{fails}/{sent}", prepareTimeouts.ToString(),
 				commitTimeouts.ToString(), forwardTimeouts.ToString(),
 				wrongExpctdVersions.ToString(), streamsDeleted.ToString());
 
diff --git a/src/EventStore.TestClient/Commands/DvuBasic/StreamNamesGenerator.cs b/src/EventStore.TestClient/Commands/DvuBasic/StreamNamesGenerator.cs
index 337b0dceb..c5c11dd43 100644
--- a/src/EventStore.TestClient/Commands/DvuBasic/StreamNamesGenerator.cs
+++ b/src/EventStore.TestClient/Commands/DvuBasic/StreamNamesGenerator.cs
@@ -3,7 +3,7 @@ using System;
 namespace EventStore.TestClient.Commands.DvuBasic {
 	public static class StreamNamesGenerator {
 		public static string GenerateName(string original, int index) {
-			return string.Format("{0}-{1}", original, index);
+			return $"{original}-{index}";
 		}
 
 		public static string GetOriginalName(string autogenerated) {
diff --git a/src/EventStore.TestClient/Commands/MultiWriteFloodWaiting.cs b/src/EventStore.TestClient/Commands/MultiWriteFloodWaiting.cs
index c47d4f567..8d454abb4 100644
--- a/src/EventStore.TestClient/Commands/MultiWriteFloodWaiting.cs
+++ b/src/EventStore.TestClient/Commands/MultiWriteFloodWaiting.cs
@@ -62,7 +62,7 @@ namespace EventStore.TestClient.Commands {
 					context,
 					(conn, pkg) => {
 						if (pkg.Command != TcpCommand.WriteEventsCompleted) {
-							context.Fail(reason: string.Format("Unexpected TCP package: {0}.", pkg.Command));
+							context.Fail(reason: $"Unexpected TCP package: {pkg.Command}.");
 							return;
 						}
 
@@ -118,12 +118,12 @@ namespace EventStore.TestClient.Commands {
 					PerfUtils.Col("requestsCnt", requestsCnt),
 					PerfUtils.Col("ElapsedMilliseconds", sw.ElapsedMilliseconds)),
 				PerfUtils.Row(PerfUtils.Col("successes", succ), PerfUtils.Col("failures", fail)));
-			PerfUtils.LogTeamCityGraphData(string.Format("{0}-{1}-{2}-reqPerSec", Keyword, clientsCnt, requestsCnt),
+			PerfUtils.LogTeamCityGraphData($"{Keyword}-{clientsCnt}-{requestsCnt}-reqPerSec",
 				(int)reqPerSec);
 			PerfUtils.LogTeamCityGraphData(
-				string.Format("{0}-{1}-{2}-failureSuccessRate", Keyword, clientsCnt, requestsCnt),
+				$"{Keyword}-{clientsCnt}-{requestsCnt}-failureSuccessRate",
 				(int)(100.0 * fail / (fail + succ)));
-			PerfUtils.LogTeamCityGraphData(string.Format("{0}-latency-ms", Keyword),
+			PerfUtils.LogTeamCityGraphData($"{Keyword}-latency-ms",
 				(int)Math.Round(sw.Elapsed.TotalMilliseconds / requestsCnt));
 
 			if (succ != requestsCnt)
diff --git a/src/EventStore.TestClient/Commands/MultiWriteProcessor.cs b/src/EventStore.TestClient/Commands/MultiWriteProcessor.cs
index 7754e50d2..c42a22061 100644
--- a/src/EventStore.TestClient/Commands/MultiWriteProcessor.cs
+++ b/src/EventStore.TestClient/Commands/MultiWriteProcessor.cs
@@ -62,14 +62,14 @@ namespace EventStore.TestClient.Commands {
 					context.Log.Information("Write request took: {elapsed}.", sw.Elapsed);
 
 					if (pkg.Command != TcpCommand.WriteEventsCompleted) {
-						context.Fail(reason: string.Format("Unexpected TCP package: {0}.", pkg.Command));
+						context.Fail(reason: $"Unexpected TCP package: {pkg.Command}.");
 						return;
 					}
 
 					var dto = pkg.Data.Deserialize<TcpClientMessageDto.WriteEventsCompleted>();
 					if (dto.Result == TcpClientMessageDto.OperationResult.Success) {
 						context.Log.Information("Successfully written {writeCount} events.", writeCount);
-						PerfUtils.LogTeamCityGraphData(string.Format("{0}-latency-ms", Keyword),
+						PerfUtils.LogTeamCityGraphData($"{Keyword}-latency-ms",
 							(int)Math.Round(sw.Elapsed.TotalMilliseconds));
 						context.Success();
 					} else {
diff --git a/src/EventStore.TestClient/Commands/PingFloodProcessor.cs b/src/EventStore.TestClient/Commands/PingFloodProcessor.cs
index 144ffe3fc..379f61c42 100644
--- a/src/EventStore.TestClient/Commands/PingFloodProcessor.cs
+++ b/src/EventStore.TestClient/Commands/PingFloodProcessor.cs
@@ -88,7 +88,7 @@ namespace EventStore.TestClient.Commands {
 				PerfUtils.Row(PerfUtils.Col("clientsCnt", clientsCnt),
 					PerfUtils.Col("requestsCnt", requestsCnt),
 					PerfUtils.Col("ElapsedMilliseconds", sw.ElapsedMilliseconds)));
-			PerfUtils.LogTeamCityGraphData(string.Format("{0}-{1}-{2}-reqPerSec", Keyword, clientsCnt, requestsCnt),
+			PerfUtils.LogTeamCityGraphData($"{Keyword}-{clientsCnt}-{requestsCnt}-reqPerSec",
 				(int)reqPerSec);
 
 			if (Interlocked.Read(ref all) == requestsCnt)
diff --git a/src/EventStore.TestClient/Commands/PingFloodWaitingProcessor.cs b/src/EventStore.TestClient/Commands/PingFloodWaitingProcessor.cs
index 2bc3b3e34..b5cf6a433 100644
--- a/src/EventStore.TestClient/Commands/PingFloodWaitingProcessor.cs
+++ b/src/EventStore.TestClient/Commands/PingFloodWaitingProcessor.cs
@@ -80,9 +80,9 @@ namespace EventStore.TestClient.Commands {
 				PerfUtils.Row(PerfUtils.Col("clientsCnt", clientsCnt),
 					PerfUtils.Col("requestsCnt", requestsCnt),
 					PerfUtils.Col("ElapsedMilliseconds", sw.ElapsedMilliseconds)));
-			PerfUtils.LogTeamCityGraphData(string.Format("{0}-{1}-{2}-reqPerSec", Keyword, clientsCnt, requestsCnt),
+			PerfUtils.LogTeamCityGraphData($"{Keyword}-{clientsCnt}-{requestsCnt}-reqPerSec",
 				(int)reqPerSec);
-			PerfUtils.LogTeamCityGraphData(string.Format("{0}-latency-ms", Keyword),
+			PerfUtils.LogTeamCityGraphData($"{Keyword}-latency-ms",
 				(int)Math.Round(sw.Elapsed.TotalMilliseconds / all));
 
 			if (Interlocked.Read(ref all) == requestsCnt)
diff --git a/src/EventStore.TestClient/Commands/PingProcessor.cs b/src/EventStore.TestClient/Commands/PingProcessor.cs
index 50ff704c2..c1adad813 100644
--- a/src/EventStore.TestClient/Commands/PingProcessor.cs
+++ b/src/EventStore.TestClient/Commands/PingProcessor.cs
@@ -24,7 +24,7 @@ namespace EventStore.TestClient.Commands {
 				},
 				handlePackage: (conn, pkg) => {
 					if (pkg.Command != TcpCommand.Pong) {
-						context.Fail(reason: string.Format("Unexpected TCP package: {0}.", pkg.Command));
+						context.Fail(reason: $"Unexpected TCP package: {pkg.Command}.");
 						return;
 					}
 
diff --git a/src/EventStore.TestClient/Commands/ReadAllProcessor.cs b/src/EventStore.TestClient/Commands/ReadAllProcessor.cs
index 735b5dd9c..53322b5c1 100644
--- a/src/EventStore.TestClient/Commands/ReadAllProcessor.cs
+++ b/src/EventStore.TestClient/Commands/ReadAllProcessor.cs
@@ -69,7 +69,7 @@ namespace EventStore.TestClient.Commands {
 				},
 				handlePackage: (conn, pkg) => {
 					if (pkg.Command != tcpCommand) {
-						context.Fail(reason: string.Format("Unexpected TCP package: {0}.", pkg.Command));
+						context.Fail(reason: $"Unexpected TCP package: {pkg.Command}.");
 						return;
 					}
 
diff --git a/src/EventStore.TestClient/Commands/ReadFloodProcessor.cs b/src/EventStore.TestClient/Commands/ReadFloodProcessor.cs
index 546b6e949..cc25a7c4d 100644
--- a/src/EventStore.TestClient/Commands/ReadFloodProcessor.cs
+++ b/src/EventStore.TestClient/Commands/ReadFloodProcessor.cs
@@ -62,7 +62,7 @@ namespace EventStore.TestClient.Commands {
 					context,
 					(conn, pkg) => {
 						if (pkg.Command != TcpCommand.ReadEventCompleted) {
-							context.Fail(reason: string.Format("Unexpected TCP package: {0}.", pkg.Command));
+							context.Fail(reason: $"Unexpected TCP package: {pkg.Command}.");
 							return;
 						}
 
@@ -126,7 +126,7 @@ namespace EventStore.TestClient.Commands {
 					PerfUtils.Col("requestsCnt", requestsCnt),
 					PerfUtils.Col("ElapsedMilliseconds", sw.ElapsedMilliseconds)),
 				PerfUtils.Row(PerfUtils.Col("readsCnt", all)));
-			PerfUtils.LogTeamCityGraphData(string.Format("{0}-{1}-{2}-reqPerSec", Keyword, clientsCnt, requestsCnt),
+			PerfUtils.LogTeamCityGraphData($"{Keyword}-{clientsCnt}-{requestsCnt}-reqPerSec",
 				(int)reqPerSec);
 
 			if (succ != requestsCnt)
diff --git a/src/EventStore.TestClient/Commands/ReadProcessor.cs b/src/EventStore.TestClient/Commands/ReadProcessor.cs
index 20dbfe794..60644fcc0 100644
--- a/src/EventStore.TestClient/Commands/ReadProcessor.cs
+++ b/src/EventStore.TestClient/Commands/ReadProcessor.cs
@@ -51,7 +51,7 @@ namespace EventStore.TestClient.Commands {
 					context.Log.Information("Read request took: {elapsed}.", sw.Elapsed);
 
 					if (pkg.Command != TcpCommand.ReadEventCompleted) {
-						context.Fail(reason: string.Format("Unexpected TCP package: {0}.", pkg.Command));
+						context.Fail(reason: $"Unexpected TCP package: {pkg.Command}.");
 						return;
 					}
 
@@ -73,7 +73,7 @@ namespace EventStore.TestClient.Commands {
 
 
 					if (dto.Result == TcpClientMessageDto.ReadEventCompleted.ReadEventResult.Success) {
-						PerfUtils.LogTeamCityGraphData(string.Format("{0}-latency-ms", Keyword),
+						PerfUtils.LogTeamCityGraphData($"{Keyword}-latency-ms",
 							(int)Math.Round(sw.Elapsed.TotalMilliseconds));
 						context.Success();
 					} else
diff --git a/src/EventStore.TestClient/Commands/RunTestScenarios/LoopingProjTranWriteScenario.cs b/src/EventStore.TestClient/Commands/RunTestScenarios/LoopingProjTranWriteScenario.cs
index 89371148e..f1303bc01 100644
--- a/src/EventStore.TestClient/Commands/RunTestScenarios/LoopingProjTranWriteScenario.cs
+++ b/src/EventStore.TestClient/Commands/RunTestScenarios/LoopingProjTranWriteScenario.cs
@@ -59,12 +59,7 @@ namespace EventStore.TestClient.Commands.RunTestScenarios {
 
 			var runIndex = 0;
 			while (stopWatch.Elapsed < _executionPeriod) {
-				var msg = string.Format(
-					"=================== Start run #{0}, elapsed {1} of {2} minutes, {3} =================== ",
-					runIndex,
-					(int)stopWatch.Elapsed.TotalMinutes,
-					_executionPeriod.TotalMinutes,
-					GetType().Name);
+				var msg = $"=================== Start run #{runIndex}, elapsed {(int)stopWatch.Elapsed.TotalMinutes} of {_executionPeriod.TotalMinutes} minutes, {GetType().Name} =================== ";
 				Log.Information(
 					"=================== Start run #{runIndex}, elapsed {elapsed} of {executionPeriod} minutes, {type} =================== ",
 					runIndex,
@@ -84,8 +79,8 @@ namespace EventStore.TestClient.Commands.RunTestScenarios {
 			try {
 				EnableProjectionByCategory();
 
-				var streamA = string.Format("numberedevents{0}-stream_a", runIndex);
-				var streamB = string.Format("numberedevents{0}-stream_b", runIndex);
+				var streamA = $"numberedevents{runIndex}-stream_a";
+				var streamB = $"numberedevents{runIndex}-stream_b";
 
 				var store = GetConnection();
 
@@ -114,7 +109,7 @@ namespace EventStore.TestClient.Commands.RunTestScenarios {
 					writtenCountB += batchSizeB;
 				}
 
-				var projectionName = string.Format("NumberedByType{0}", runIndex);
+				var projectionName = $"NumberedByType{runIndex}";
 				var projection = string.Format(@"
                 fromCategory('numberedevents{0}')
                     .when({{
@@ -224,7 +219,7 @@ namespace EventStore.TestClient.Commands.RunTestScenarios {
 				string reason;
 				var failed = GetProjectionIsFaulted(projectionName, out reason);
 				if (failed) {
-					var message = string.Format("Projection {0} failed, reason:\n{1}", projectionName, reason);
+					var message = $"Projection {projectionName} failed, reason:\n{reason}";
 					throw new ApplicationException(message);
 				}
 
diff --git a/src/EventStore.TestClient/Commands/RunTestScenarios/LoopingProjectionKillScenario.cs b/src/EventStore.TestClient/Commands/RunTestScenarios/LoopingProjectionKillScenario.cs
index 75f2972d7..b519f1279 100644
--- a/src/EventStore.TestClient/Commands/RunTestScenarios/LoopingProjectionKillScenario.cs
+++ b/src/EventStore.TestClient/Commands/RunTestScenarios/LoopingProjectionKillScenario.cs
@@ -38,12 +38,7 @@ namespace EventStore.TestClient.Commands.RunTestScenarios {
 			var stopWatch = Stopwatch.StartNew();
 
 			while (stopWatch.Elapsed < _executionPeriod) {
-				var msg = string.Format(
-					"=================== Start run #{0}, elapsed {1} of {2} minutes, {3} =================== ",
-					GetIterationCode(),
-					(int)stopWatch.Elapsed.TotalMinutes,
-					_executionPeriod.TotalMinutes,
-					GetType().Name);
+				var msg = $"=================== Start run #{GetIterationCode()}, elapsed {(int)stopWatch.Elapsed.TotalMinutes} of {_executionPeriod.TotalMinutes} minutes, {GetType().Name} =================== ";
 				Log.Information(
 					"=================== Start run #{iteration}, elapsed {elapsed} of {executionPeriod} minutes, {type} =================== ",
 					GetIterationCode(),
diff --git a/src/EventStore.TestClient/Commands/RunTestScenarios/LoopingScenario.cs b/src/EventStore.TestClient/Commands/RunTestScenarios/LoopingScenario.cs
index 706ae2fd4..36ac6b8c9 100644
--- a/src/EventStore.TestClient/Commands/RunTestScenarios/LoopingScenario.cs
+++ b/src/EventStore.TestClient/Commands/RunTestScenarios/LoopingScenario.cs
@@ -41,12 +41,7 @@ namespace EventStore.TestClient.Commands.RunTestScenarios {
 
 			var runIndex = 0;
 			while (stopWatch.Elapsed < _executionPeriod) {
-				var msg = string.Format(
-					"=================== Start run #{0}, elapsed {1} of {2} minutes, {3} =================== ",
-					runIndex,
-					(int)stopWatch.Elapsed.TotalMinutes,
-					_executionPeriod.TotalMinutes,
-					GetType().Name);
+				var msg = $"=================== Start run #{runIndex}, elapsed {(int)stopWatch.Elapsed.TotalMinutes} of {_executionPeriod.TotalMinutes} minutes, {GetType().Name} =================== ";
 				Log.Information(
 					"=================== Start run #{runIndex}, elapsed {elapsed} of {executionPeriod} minutes, {type} =================== ",
 					runIndex,
@@ -152,10 +147,7 @@ namespace EventStore.TestClient.Commands.RunTestScenarios {
 					Log.Debug("Start RunParallelWrites #{index} for runIndex {runIndex}", index, runIndex);
 
 					var parallelStreams = Enumerable.Range(0, 2)
-						.Select(x => string.Format("parallel-write-stream-in{0}-{1}-{2}",
-							runIndex,
-							x,
-							string.Format("rnd{0}-{1}", _rnd.Next(), DateTime.UtcNow.Ticks)))
+						.Select(x => $"parallel-write-stream-in{runIndex}-{x}-{string.Format("rnd{0}-{1}", _rnd.Next(), DateTime.UtcNow.Ticks)}")
 						.ToArray();
 
 					var wr = Write(WriteMode.SingleEventAtTime, parallelStreams, EventsPerStream);
@@ -176,7 +168,7 @@ namespace EventStore.TestClient.Commands.RunTestScenarios {
 		}
 
 		protected static string FormatStreamName(int runIndex, int i) {
-			return string.Format("stream-in{0}-{1}", runIndex, i);
+			return $"stream-in{runIndex}-{i}";
 		}
 	}
 }
diff --git a/src/EventStore.TestClient/Commands/RunTestScenarios/NodeConnectionInfo.cs b/src/EventStore.TestClient/Commands/RunTestScenarios/NodeConnectionInfo.cs
index 30addbe66..6e693863f 100644
--- a/src/EventStore.TestClient/Commands/RunTestScenarios/NodeConnectionInfo.cs
+++ b/src/EventStore.TestClient/Commands/RunTestScenarios/NodeConnectionInfo.cs
@@ -13,7 +13,7 @@ namespace EventStore.TestClient.Commands.RunTestScenarios {
 		}
 
 		public override string ToString() {
-			return string.Format("[{0}:{1}:{2}]", IpAddress, TcpPort, HttpPort);
+			return $"[{IpAddress}:{TcpPort}:{HttpPort}]";
 		}
 	}
 }
diff --git a/src/EventStore.TestClient/Commands/RunTestScenarios/ProjForeachForcedCommonNameScenario.cs b/src/EventStore.TestClient/Commands/RunTestScenarios/ProjForeachForcedCommonNameScenario.cs
index e6db25544..d655e9ed7 100644
--- a/src/EventStore.TestClient/Commands/RunTestScenarios/ProjForeachForcedCommonNameScenario.cs
+++ b/src/EventStore.TestClient/Commands/RunTestScenarios/ProjForeachForcedCommonNameScenario.cs
@@ -39,12 +39,7 @@ namespace EventStore.TestClient.Commands.RunTestScenarios {
 			var started = DateTime.UtcNow;
 
 			while ((DateTime.UtcNow - started) < _executionPeriod) {
-				var msg = string.Format(
-					"=================== Start run #{0}, elapsed {1} of {2} minutes, {3} =================== ",
-					GetIterationCode(),
-					(int)(DateTime.Now - started).TotalMinutes,
-					_executionPeriod.TotalMinutes,
-					GetType().Name);
+				var msg = $"=================== Start run #{GetIterationCode()}, elapsed {(int)(DateTime.Now - started).TotalMinutes} of {_executionPeriod.TotalMinutes} minutes, {GetType().Name} =================== ";
 				Log.Information(
 					"=================== Start run #{iteration}, elapsed {elapsed} of {executionPeriod} minutes, {type} =================== ",
 					GetIterationCode(),
@@ -132,7 +127,7 @@ namespace EventStore.TestClient.Commands.RunTestScenarios {
 				KillNode(nodeProcessId);
 
 			if (failed)
-				throw new ApplicationException(string.Format("Projection failed due to reason: {0}.", failReason));
+				throw new ApplicationException($"Projection failed due to reason: {failReason}.");
 		}
 
 		private bool CheckIsFaulted(IEnumerable<string> projectionsNames, out string failReason) {
@@ -160,7 +155,7 @@ namespace EventStore.TestClient.Commands.RunTestScenarios {
 
 		protected Task WriteData() {
 			var streams = Enumerable.Range(0, Streams)
-				.Select(i => string.Format("bank_account_it{0}-{1}", GetIterationCode(), i)).ToArray();
+				.Select(i => $"bank_account_it{GetIterationCode()}-{i}").ToArray();
 			var slices = Split(streams, 3);
 
 			var w1 = Write(WriteMode.SingleEventAtTime, slices[0], EventsPerStream, CreateBankEvent);
@@ -172,7 +167,7 @@ namespace EventStore.TestClient.Commands.RunTestScenarios {
 		}
 
 		protected string CreateSumCheckForBankAccounts(string projectionName, string suffix = "") {
-			var fullProjectionName = string.Format("{0}_it{1}_{2}", projectionName, GetIterationCode(), suffix);
+			var fullProjectionName = $"{projectionName}_it{GetIterationCode()}_{suffix}";
 			var countItemsProjection = string.Format(@"
                 fromCategory('bank_account_it{1}').foreachStream().when({{
                     $init: function() {{ 
diff --git a/src/EventStore.TestClient/Commands/RunTestScenarios/ProjectionWrongTagCheck.cs b/src/EventStore.TestClient/Commands/RunTestScenarios/ProjectionWrongTagCheck.cs
index 90f21b919..6a890b83d 100644
--- a/src/EventStore.TestClient/Commands/RunTestScenarios/ProjectionWrongTagCheck.cs
+++ b/src/EventStore.TestClient/Commands/RunTestScenarios/ProjectionWrongTagCheck.cs
@@ -34,12 +34,7 @@ namespace EventStore.TestClient.Commands.RunTestScenarios {
 			var stopWatch = Stopwatch.StartNew();
 
 			while (stopWatch.Elapsed < _executionPeriod) {
-				var msg = string.Format(
-					"=================== Start run #{0}, elapsed {1} of {2} minutes, {3} =================== ",
-					GetIterationCode(),
-					(int)stopWatch.Elapsed.TotalMinutes,
-					_executionPeriod.TotalMinutes,
-					GetType().Name);
+				var msg = $"=================== Start run #{GetIterationCode()}, elapsed {(int)stopWatch.Elapsed.TotalMinutes} of {_executionPeriod.TotalMinutes} minutes, {GetType().Name} =================== ";
 
 				Log.Information(
 					"=================== Start run #{iteration}, elapsed {elapsed} of {executionPeriod} minutes, {type} =================== ",
@@ -111,9 +106,7 @@ namespace EventStore.TestClient.Commands.RunTestScenarios {
 				KillNode(nodeProcessId);
 
 				if (!success)
-					throw new ApplicationException(string.Format(
-						"Projection {0} has not completed with expected result {1} in time.", sumCheckForBankAccount0,
-						lastExpectedEventVersion));
+					throw new ApplicationException($"Projection {sumCheckForBankAccount0} has not completed with expected result {lastExpectedEventVersion} in time.");
 
 				return success;
 			});
diff --git a/src/EventStore.TestClient/Commands/RunTestScenarios/ProjectionsKillScenario.cs b/src/EventStore.TestClient/Commands/RunTestScenarios/ProjectionsKillScenario.cs
index c95b2273b..da8e27b97 100644
--- a/src/EventStore.TestClient/Commands/RunTestScenarios/ProjectionsKillScenario.cs
+++ b/src/EventStore.TestClient/Commands/RunTestScenarios/ProjectionsKillScenario.cs
@@ -89,7 +89,7 @@ namespace EventStore.TestClient.Commands.RunTestScenarios {
 
 		protected Task WriteData() {
 			var streams = Enumerable.Range(0, Streams)
-				.Select(i => string.Format("bank_account_it{0}-{1}", GetIterationCode(), i)).ToArray();
+				.Select(i => $"bank_account_it{GetIterationCode()}-{i}").ToArray();
 			var slices = Split(streams, 3);
 
 			var w1 = Write(WriteMode.SingleEventAtTime, slices[0], EventsPerStream, CreateBankEvent);
@@ -103,7 +103,7 @@ namespace EventStore.TestClient.Commands.RunTestScenarios {
 		protected string CreateCountItem() {
 			var projectionManager = GetProjectionsManager();
 
-			string countItemsProjectionName = string.Format("CountItems_it{0}", GetIterationCode());
+			string countItemsProjectionName = $"CountItems_it{GetIterationCode()}";
 			string countItemsProjection = string.Format(@"
                 fromCategory('bank_account_it{0}').when({{
                 $init: function() {{ return {{count:0}}; }},
@@ -125,7 +125,7 @@ namespace EventStore.TestClient.Commands.RunTestScenarios {
 		}
 
 		protected string CreateSumCheckForBankAccount0() {
-			string countItemsProjectionName = string.Format("CheckSumsInAccounts_it{0}", GetIterationCode());
+			string countItemsProjectionName = $"CheckSumsInAccounts_it{GetIterationCode()}";
 			string countItemsProjection = string.Format(@"
                 fromStream('bank_account_it{0}-0').when({{
                     $init: function() {{ 
diff --git a/src/EventStore.TestClient/Commands/RunTestScenarios/ScenarioBase.cs b/src/EventStore.TestClient/Commands/RunTestScenarios/ScenarioBase.cs
index ac06eca2f..a0e0500fe 100644
--- a/src/EventStore.TestClient/Commands/RunTestScenarios/ScenarioBase.cs
+++ b/src/EventStore.TestClient/Commands/RunTestScenarios/ScenarioBase.cs
@@ -98,11 +98,11 @@ namespace EventStore.TestClient.Commands.RunTestScenarios {
 
 			var dataFolder = Path.Combine(dbParent, "data");
 			var idx = 0;
-			var dbPath = Path.Combine(dataFolder, string.Format("es_{0}", idx));
+			var dbPath = Path.Combine(dataFolder, $"es_{idx}");
 
 			while (Directory.Exists(dbPath)) {
 				idx += 1;
-				dbPath = Path.Combine(dataFolder, string.Format("es_{0}", idx));
+				dbPath = Path.Combine(dataFolder, $"es_{idx}");
 			}
 
 			return dbPath;
@@ -129,9 +129,8 @@ namespace EventStore.TestClient.Commands.RunTestScenarios {
 						.LimitRetriesForOperationTo(maxReconnections)
 						.LimitReconnectionsTo(maxOperationRetries)
 						.FailOnNoServerResponse(),
-					new Uri(string.Format("tcp://admin:changeit@{0}:{1}", _nodeConnection.IpAddress,
-						_nodeConnection.TcpPort)),
-					string.Format("ESConn-{0}", i));
+					new Uri($"tcp://admin:changeit@{_nodeConnection.IpAddress}:{_nodeConnection.TcpPort}"),
+					$"ESConn-{i}");
 				_connections[i].Closed += (s, e) =>
 					Log.Debug("[SCENARIO] {connection} closed.", e.Connection.ConnectionName);
 				_connections[i].Connected += (s, e) =>
@@ -242,7 +241,7 @@ namespace EventStore.TestClient.Commands.RunTestScenarios {
 				var s = stream;
 				var task = store.ReadStreamEventsForwardAsync(stream, 0, 1, resolveLinkTos: false).ContinueWith(t => {
 					if (t.Result.Status != SliceReadStatus.StreamDeleted)
-						throw new Exception(string.Format("Stream '{0}' is not deleted, but should be!", s));
+						throw new Exception($"Stream '{s}' is not deleted, but should be!");
 				});
 
 				tasks.Add(task);
@@ -301,20 +300,13 @@ namespace EventStore.TestClient.Commands.RunTestScenarios {
 			if (TryGetPathToMono(out pathToMono)) {
 				Log.Information("Mono at {pathToMono} will be used.", pathToMono);
 				fileName = pathToMono;
-				argumentsHead = string.Format("--debug --gc=sgen {0}",
-					Path.Combine(clusterNodeFolder, "EventStore.ClusterNode.exe"));
+				argumentsHead = $"--debug --gc=sgen {Path.Combine(clusterNodeFolder, "EventStore.ClusterNode.exe")}";
 			} else {
 				fileName = Path.Combine(clusterNodeFolder, "EventStore.ClusterNode.exe");
 				argumentsHead = "";
 			}
 
-			var arguments = string.Format(
-				"{0} --run-projections=all --ext-ip {1} --ext-tcp-port {2} --ext-http-port {3} --db {4}",
-				argumentsHead,
-				_nodeConnection.IpAddress,
-				_nodeConnection.TcpPort,
-				_nodeConnection.HttpPort,
-				_dbPath);
+			var arguments = $"{argumentsHead} --run-projections=all --ext-ip {_nodeConnection.IpAddress} --ext-tcp-port {_nodeConnection.TcpPort} --ext-http-port {_nodeConnection.HttpPort} --db {_dbPath}";
 
 			Log.Information("Starting [{fileName} {arguments}]...", fileName, arguments);
 
@@ -322,15 +314,13 @@ namespace EventStore.TestClient.Commands.RunTestScenarios {
 
 			var nodeProcess = Process.Start(startInfo);
 			if (nodeProcess == null || nodeProcess.HasExited)
-				throw new ApplicationException(string.Format("Process was not started [{0} {1}].", fileName,
-					arguments));
+				throw new ApplicationException($"Process was not started [{fileName} {arguments}].");
 
 			Thread.Sleep(3000);
 			Process tmp;
 			var running = TryGetProcessById(nodeProcess.Id, out tmp);
 			if (!running || tmp.HasExited)
-				throw new ApplicationException(string.Format("Process was not started [{0} {1}].", fileName,
-					arguments));
+				throw new ApplicationException($"Process was not started [{fileName} {arguments}].");
 
 			_startedNodesProcIds.Add(nodeProcess.Id);
 
@@ -562,26 +552,13 @@ namespace EventStore.TestClient.Commands.RunTestScenarios {
 				try {
 					var slice = t.Result;
 					if (slice == null || slice.Events == null || slice.Events.Length != count) {
-						throw new Exception(string.Format(
-							"Tried to read {0} events from event number {1} from stream '{2}' but failed. Reason: {3}.",
-							count,
-							from,
-							stream,
-							slice == null ? "slice == null"
-							: slice.Events == null ? "slive.Events == null"
-							: slice.Events.Length != count ? string.Format("Expected count: {0}, actual count: {1}.",
-								count, slice.Events.Length)
-							: "WAT?!?"));
+						throw new Exception($"Tried to read {count} events from event number {from} from stream '{stream}' but failed. Reason: {(slice == null ? "slice == null" : slice.Events == null ? "slive.Events == null" : slice.Events.Length != count ? string.Format("Expected count: {0}, actual count: {1}.", count, slice.Events.Length) : "WAT?!?")}.");
 					}
 
 					for (int i = 0; i < count; ++i) {
 						var evnt = slice.Events[i].Event;
 						if (evnt.EventNumber != i + from) {
-							throw new Exception(string.Format(
-								"Received event with wrong event number. Expected: {0}, actual: {1}.\nEvent: {2}.",
-								from + i,
-								evnt.EventNumber,
-								evnt));
+							throw new Exception($"Received event with wrong event number. Expected: {from + i}, actual: {evnt.EventNumber}.\nEvent: {evnt}.");
 						}
 
 						TestEvent.VerifyIfMatched(evnt);
diff --git a/src/EventStore.TestClient/Commands/RunTestScenarios/TestEvent.cs b/src/EventStore.TestClient/Commands/RunTestScenarios/TestEvent.cs
index 5d62b826f..417f3a53e 100644
--- a/src/EventStore.TestClient/Commands/RunTestScenarios/TestEvent.cs
+++ b/src/EventStore.TestClient/Commands/RunTestScenarios/TestEvent.cs
@@ -9,7 +9,7 @@ namespace EventStore.TestClient.Commands.RunTestScenarios {
 			var subIndex = (index % 50);
 			var type = "TestEvent-" + subIndex.ToString();
 			var body = new string('#', 1 + subIndex * subIndex);
-			var encodedData = Helper.UTF8NoBom.GetBytes(string.Format("{0}-{1}-{2}", index, body.Length, body));
+			var encodedData = Helper.UTF8NoBom.GetBytes($"{index}-{body.Length}-{body}");
 
 			return new EventData(Guid.NewGuid(), type, false, encodedData, new byte[0]);
 		}
@@ -19,28 +19,20 @@ namespace EventStore.TestClient.Commands.RunTestScenarios {
 				var data = Common.Utils.Helper.UTF8NoBom.GetString(evnt.Data);
 				var atoms = data.Split('-');
 				if (atoms.Length != 3)
-					throw new ApplicationException(string.Format("Invalid TestEvent object: currupted data format: {0}",
-						RecordDetailsString(evnt)));
+					throw new ApplicationException($"Invalid TestEvent object: currupted data format: {RecordDetailsString(evnt)}");
 
 				var expectedLength = int.Parse(atoms[1]);
 				if (expectedLength != atoms[2].Length)
-					throw new ApplicationException(string.Format(
-						"Invalid TestEvent object: not expected data length: {0}",
-						RecordDetailsString(evnt)));
+					throw new ApplicationException($"Invalid TestEvent object: not expected data length: {RecordDetailsString(evnt)}");
 
 				if (new string('#', expectedLength) != atoms[2])
-					throw new ApplicationException(string.Format("Invalid TestEvent object: currupted data: {0}",
-						RecordDetailsString(evnt)));
+					throw new ApplicationException($"Invalid TestEvent object: currupted data: {RecordDetailsString(evnt)}");
 			}
 		}
 
 		private static string RecordDetailsString(RecordedEvent evnt) {
 			var data = Common.Utils.Helper.UTF8NoBom.GetString(evnt.Data);
-			return string.Format("[stream:{0}; eventNumber:{1}; type:{2}; data:{3}]",
-				evnt.EventStreamId,
-				evnt.EventNumber,
-				evnt.EventType,
-				data.Length > 12 ? (data.Substring(0, 12) + "...") : data);
+			return $"[stream:{evnt.EventStreamId}; eventNumber:{evnt.EventNumber}; type:{evnt.EventType}; data:{(data.Length > 12 ? (data.Substring(0, 12) + "...") : data)}]";
 		}
 	}
 }
diff --git a/src/EventStore.TestClient/Commands/SubscribeToStreamProcessor.cs b/src/EventStore.TestClient/Commands/SubscribeToStreamProcessor.cs
index ded5e46d5..dba35457f 100644
--- a/src/EventStore.TestClient/Commands/SubscribeToStreamProcessor.cs
+++ b/src/EventStore.TestClient/Commands/SubscribeToStreamProcessor.cs
@@ -54,7 +54,7 @@ namespace EventStore.TestClient.Commands {
 							break;
 						}
 						default:
-							context.Fail(reason: string.Format("Unexpected TCP package: {0}.", pkg.Command));
+							context.Fail(reason: $"Unexpected TCP package: {pkg.Command}.");
 							break;
 					}
 				},
diff --git a/src/EventStore.TestClient/Commands/SubscriptionStressTestProcessor.cs b/src/EventStore.TestClient/Commands/SubscriptionStressTestProcessor.cs
index e4c86e580..cc308d95a 100644
--- a/src/EventStore.TestClient/Commands/SubscriptionStressTestProcessor.cs
+++ b/src/EventStore.TestClient/Commands/SubscriptionStressTestProcessor.cs
@@ -37,7 +37,7 @@ namespace EventStore.TestClient.Commands {
 			var sw = Stopwatch.StartNew();
 			for (int i = 0; i < subscriptionCount; ++i) {
 				conn.SubscribeToStreamAsync(
-					string.Format("stream-{0}", i),
+					$"stream-{i}",
 					false,
 					(s, e) => {
 						var c = Interlocked.Increment(ref appearedCnt);
diff --git a/src/EventStore.TestClient/Commands/TcpSanitazationCheckProcessor.cs b/src/EventStore.TestClient/Commands/TcpSanitazationCheckProcessor.cs
index 998f57640..0f6255e80 100644
--- a/src/EventStore.TestClient/Commands/TcpSanitazationCheckProcessor.cs
+++ b/src/EventStore.TestClient/Commands/TcpSanitazationCheckProcessor.cs
@@ -62,7 +62,7 @@ namespace EventStore.TestClient.Commands {
 					context,
 					(conn, package) => {
 						if (package.Command != TcpCommand.BadRequest)
-							context.Fail(null, string.Format("Bad request expected, got {0}!", package.Command));
+							context.Fail(null, $"Bad request expected, got {package.Command}!");
 					},
 					conn => established.Set(),
 					(conn, err) => dropped.Set());
diff --git a/src/EventStore.TestClient/Commands/TransactionWriteProcessor.cs b/src/EventStore.TestClient/Commands/TransactionWriteProcessor.cs
index ef75c6d91..cffbef2ba 100644
--- a/src/EventStore.TestClient/Commands/TransactionWriteProcessor.cs
+++ b/src/EventStore.TestClient/Commands/TransactionWriteProcessor.cs
@@ -52,14 +52,13 @@ namespace EventStore.TestClient.Commands {
 					switch (stage) {
 						case Stage.AcquiringTransactionId: {
 							if (pkg.Command != TcpCommand.TransactionStartCompleted) {
-								context.Fail(reason: string.Format("Unexpected TCP package: {0}.", pkg.Command));
+								context.Fail(reason: $"Unexpected TCP package: {pkg.Command}.");
 								return;
 							}
 
 							var dto = pkg.Data.Deserialize<TcpClientMessageDto.TransactionStartCompleted>();
 							if (dto.Result != TcpClientMessageDto.OperationResult.Success) {
-								var msg = string.Format("Error while starting transaction: {0} ({1}).", dto.Message,
-									dto.Result);
+								var msg = $"Error while starting transaction: {dto.Message} ({dto.Result}).";
 								context.Log.Information("Error while starting transaction: {message} ({e}).", dto.Message,
 									dto.Result);
 								context.Fail(reason: msg);
@@ -92,7 +91,7 @@ namespace EventStore.TestClient.Commands {
 						}
 						case Stage.Writing: {
 							if (pkg.Command != TcpCommand.TransactionWriteCompleted) {
-								context.Fail(reason: string.Format("Unexpected TCP package: {0}.", pkg.Command));
+								context.Fail(reason: $"Unexpected TCP package: {pkg.Command}.");
 								return;
 							}
 
@@ -100,8 +99,7 @@ namespace EventStore.TestClient.Commands {
 							if (dto.Result != TcpClientMessageDto.OperationResult.Success) {
 								context.Log.Information("Error while writing transactional event: {message} ({e}).",
 									dto.Message, dto.Result);
-								var msg = String.Format("Error while writing transactional event: {0} ({1}).",
-									dto.Message, dto.Result);
+								var msg = $"Error while writing transactional event: {dto.Message} ({dto.Result}).";
 								context.Fail(reason: msg);
 							} else {
 								writtenEvents += 1;
@@ -120,7 +118,7 @@ namespace EventStore.TestClient.Commands {
 						}
 						case Stage.Committing: {
 							if (pkg.Command != TcpCommand.TransactionCommitCompleted) {
-								context.Fail(reason: string.Format("Unexpected TCP package: {0}.", pkg.Command));
+								context.Fail(reason: $"Unexpected TCP package: {pkg.Command}.");
 								return;
 							}
 
@@ -128,8 +126,7 @@ namespace EventStore.TestClient.Commands {
 
 							var dto = pkg.Data.Deserialize<TcpClientMessageDto.TransactionCommitCompleted>();
 							if (dto.Result != TcpClientMessageDto.OperationResult.Success) {
-								var msg = string.Format("Error while committing transaction: {0} ({1}).", dto.Message,
-									dto.Result);
+								var msg = $"Error while committing transaction: {dto.Message} ({dto.Result}).";
 								context.Log.Information("Error while committing transaction: {message} ({e}).", dto.Message,
 									dto.Result);
 								context.Log.Information("Transaction took: {elapsed}.", sw.Elapsed);
@@ -138,7 +135,7 @@ namespace EventStore.TestClient.Commands {
 								context.Log.Information("Successfully committed transaction [{transactionId}]!",
 									dto.TransactionId);
 								context.Log.Information("Transaction took: {elapsed}.", sw.Elapsed);
-								PerfUtils.LogTeamCityGraphData(string.Format("{0}-latency-ms", Keyword),
+								PerfUtils.LogTeamCityGraphData($"{Keyword}-latency-ms",
 									(int)Math.Round(sw.Elapsed.TotalMilliseconds));
 								context.Success();
 							}
diff --git a/src/EventStore.TestClient/Commands/WriteFloodClientApiProcessor.cs b/src/EventStore.TestClient/Commands/WriteFloodClientApiProcessor.cs
index c04cfb244..b6fd7b315 100644
--- a/src/EventStore.TestClient/Commands/WriteFloodClientApiProcessor.cs
+++ b/src/EventStore.TestClient/Commands/WriteFloodClientApiProcessor.cs
@@ -132,16 +132,15 @@ namespace EventStore.TestClient.Commands {
 					PerfUtils.Col("ElapsedMilliseconds", sw.ElapsedMilliseconds)),
 				PerfUtils.Row(PerfUtils.Col("successes", succ), PerfUtils.Col("failures", fail)));
 			var failuresRate = (int)(100 * fail / (fail + succ));
-			PerfUtils.LogTeamCityGraphData(string.Format("{0}-{1}-{2}-reqPerSec", Keyword, clientsCnt, requestsCnt),
+			PerfUtils.LogTeamCityGraphData($"{Keyword}-{clientsCnt}-{requestsCnt}-reqPerSec",
 				(int)reqPerSec);
 			PerfUtils.LogTeamCityGraphData(
-				string.Format("{0}-{1}-{2}-failureSuccessRate", Keyword, clientsCnt, requestsCnt), failuresRate);
+				$"{Keyword}-{clientsCnt}-{requestsCnt}-failureSuccessRate", failuresRate);
 			PerfUtils.LogTeamCityGraphData(
-				string.Format("{0}-c{1}-r{2}-st{3}-s{4}-reqPerSec", Keyword, clientsCnt, requestsCnt, streamsCnt, size),
+				$"{Keyword}-c{clientsCnt}-r{requestsCnt}-st{streamsCnt}-s{size}-reqPerSec",
 				(int)reqPerSec);
 			PerfUtils.LogTeamCityGraphData(
-				string.Format("{0}-c{1}-r{2}-st{3}-s{4}-failureSuccessRate", Keyword, clientsCnt, requestsCnt,
-					streamsCnt, size), failuresRate);
+				$"{Keyword}-c{clientsCnt}-r{requestsCnt}-st{streamsCnt}-s{size}-failureSuccessRate", failuresRate);
 
 			if (Interlocked.Read(ref succ) != requestsCnt)
 				context.Fail(reason: "There were errors or not all requests completed.");
diff --git a/src/EventStore.TestClient/Commands/WriteFloodProcessor.cs b/src/EventStore.TestClient/Commands/WriteFloodProcessor.cs
index 9d1064165..64be526cf 100644
--- a/src/EventStore.TestClient/Commands/WriteFloodProcessor.cs
+++ b/src/EventStore.TestClient/Commands/WriteFloodProcessor.cs
@@ -79,7 +79,7 @@ namespace EventStore.TestClient.Commands {
 					context,
 					(conn, pkg) => {
 						if (pkg.Command != TcpCommand.WriteEventsCompleted) {
-							context.Fail(reason: string.Format("Unexpected TCP package: {0}.", pkg.Command));
+							context.Fail(reason: $"Unexpected TCP package: {pkg.Command}.");
 							return;
 						}
 
@@ -192,16 +192,15 @@ namespace EventStore.TestClient.Commands {
 				PerfUtils.Row(PerfUtils.Col("successes", succ), PerfUtils.Col("failures", fail)));
 
 			var failuresRate = (int)(100 * fail / (fail + succ));
-			PerfUtils.LogTeamCityGraphData(string.Format("{0}-{1}-{2}-reqPerSec", Keyword, clientsCnt, requestsCnt),
+			PerfUtils.LogTeamCityGraphData($"{Keyword}-{clientsCnt}-{requestsCnt}-reqPerSec",
 				(int)reqPerSec);
 			PerfUtils.LogTeamCityGraphData(
-				string.Format("{0}-{1}-{2}-failureSuccessRate", Keyword, clientsCnt, requestsCnt), failuresRate);
+				$"{Keyword}-{clientsCnt}-{requestsCnt}-failureSuccessRate", failuresRate);
 			PerfUtils.LogTeamCityGraphData(
-				string.Format("{0}-c{1}-r{2}-st{3}-s{4}-reqPerSec", Keyword, clientsCnt, requestsCnt, streamsCnt, size),
+				$"{Keyword}-c{clientsCnt}-r{requestsCnt}-st{streamsCnt}-s{size}-reqPerSec",
 				(int)reqPerSec);
 			PerfUtils.LogTeamCityGraphData(
-				string.Format("{0}-c{1}-r{2}-st{3}-s{4}-failureSuccessRate", Keyword, clientsCnt, requestsCnt,
-					streamsCnt, size), failuresRate);
+				$"{Keyword}-c{clientsCnt}-r{requestsCnt}-st{streamsCnt}-s{size}-failureSuccessRate", failuresRate);
 			monitor.GetMeasurementDetails();
 			if (Interlocked.Read(ref succ) != requestsCnt)
 				context.Fail(reason: "There were errors or not all requests completed.");
diff --git a/src/EventStore.TestClient/Commands/WriteFloodWaitingProcessor.cs b/src/EventStore.TestClient/Commands/WriteFloodWaitingProcessor.cs
index a8d8a4eb4..a90e8caa5 100644
--- a/src/EventStore.TestClient/Commands/WriteFloodWaitingProcessor.cs
+++ b/src/EventStore.TestClient/Commands/WriteFloodWaitingProcessor.cs
@@ -61,7 +61,7 @@ namespace EventStore.TestClient.Commands {
 					context,
 					(conn, pkg) => {
 						if (pkg.Command != TcpCommand.WriteEventsCompleted) {
-							context.Fail(reason: string.Format("Unexpected TCP package: {0}.", pkg.Command));
+							context.Fail(reason: $"Unexpected TCP package: {pkg.Command}.");
 							return;
 						}
 
@@ -119,12 +119,12 @@ namespace EventStore.TestClient.Commands {
 					PerfUtils.Col("requestsCnt", requestsCnt),
 					PerfUtils.Col("ElapsedMilliseconds", sw.ElapsedMilliseconds)),
 				PerfUtils.Row(PerfUtils.Col("successes", succ), PerfUtils.Col("failures", fail)));
-			PerfUtils.LogTeamCityGraphData(string.Format("{0}-{1}-{2}-reqPerSec", Keyword, clientsCnt, requestsCnt),
+			PerfUtils.LogTeamCityGraphData($"{Keyword}-{clientsCnt}-{requestsCnt}-reqPerSec",
 				(int)reqPerSec);
 			PerfUtils.LogTeamCityGraphData(
-				string.Format("{0}-{1}-{2}-failureSuccessRate", Keyword, clientsCnt, requestsCnt),
+				$"{Keyword}-{clientsCnt}-{requestsCnt}-failureSuccessRate",
 				(int)(100.0 * fail / (fail + succ)));
-			PerfUtils.LogTeamCityGraphData(string.Format("{0}-latency-ms", Keyword),
+			PerfUtils.LogTeamCityGraphData($"{Keyword}-latency-ms",
 				(int)Math.Round(sw.Elapsed.TotalMilliseconds / requestsCnt));
 
 			if (succ != requestsCnt)
diff --git a/src/EventStore.TestClient/Commands/WriteJsonProcessor.cs b/src/EventStore.TestClient/Commands/WriteJsonProcessor.cs
index eac94ab31..80d73ac8f 100644
--- a/src/EventStore.TestClient/Commands/WriteJsonProcessor.cs
+++ b/src/EventStore.TestClient/Commands/WriteJsonProcessor.cs
@@ -63,7 +63,7 @@ namespace EventStore.TestClient.Commands {
 				},
 				handlePackage: (conn, pkg) => {
 					if (pkg.Command != TcpCommand.WriteEventsCompleted) {
-						context.Fail(reason: string.Format("Unexpected TCP package: {0}.", pkg.Command));
+						context.Fail(reason: $"Unexpected TCP package: {pkg.Command}.");
 						return;
 					}
 
@@ -73,7 +73,7 @@ namespace EventStore.TestClient.Commands {
 					var dto = pkg.Data.Deserialize<TcpClientMessageDto.WriteEventsCompleted>();
 					if (dto.Result == TcpClientMessageDto.OperationResult.Success) {
 						context.Log.Information("Successfully written. EventId: {correlationId}.", package.CorrelationId);
-						PerfUtils.LogTeamCityGraphData(string.Format("{0}-latency-ms", Keyword),
+						PerfUtils.LogTeamCityGraphData($"{Keyword}-latency-ms",
 							(int)Math.Round(sw.Elapsed.TotalMilliseconds));
 					} else {
 						context.Log.Information("Error while writing: {message} ({e}).", dto.Message, dto.Result);
diff --git a/src/EventStore.TestClient/Commands/WriteLongTermProcessor.cs b/src/EventStore.TestClient/Commands/WriteLongTermProcessor.cs
index 23e0536cc..de7aab418 100644
--- a/src/EventStore.TestClient/Commands/WriteLongTermProcessor.cs
+++ b/src/EventStore.TestClient/Commands/WriteLongTermProcessor.cs
@@ -83,7 +83,7 @@ namespace EventStore.TestClient.Commands {
 					context,
 					(conn, pkg) => {
 						if (pkg.Command != TcpCommand.WriteEventsCompleted) {
-							context.Fail(reason: string.Format("Unexpected TCP package: {0}.", pkg.Command));
+							context.Fail(reason: $"Unexpected TCP package: {pkg.Command}.");
 							return;
 						}
 
@@ -203,11 +203,11 @@ namespace EventStore.TestClient.Commands {
 				PerfUtils.Row(PerfUtils.Col("successes", succ), PerfUtils.Col("failures", fail))
 			);
 
-			PerfUtils.LogTeamCityGraphData(string.Format("{0}-{1}-{2}-reqPerSec", Keyword, clientsCnt, requestsCnt),
+			PerfUtils.LogTeamCityGraphData($"{Keyword}-{clientsCnt}-{requestsCnt}-reqPerSec",
 				(int)reqPerSec);
 
 			PerfUtils.LogTeamCityGraphData(
-				string.Format("{0}-{1}-{2}-failureSuccessRate", Keyword, clientsCnt, requestsCnt),
+				$"{Keyword}-{clientsCnt}-{requestsCnt}-failureSuccessRate",
 				100 * fail / (fail + succ));
 
 			context.Success();
diff --git a/src/EventStore.TestClient/Commands/WriteProcessor.cs b/src/EventStore.TestClient/Commands/WriteProcessor.cs
index 8d1fa7f84..5938644dd 100644
--- a/src/EventStore.TestClient/Commands/WriteProcessor.cs
+++ b/src/EventStore.TestClient/Commands/WriteProcessor.cs
@@ -73,14 +73,14 @@ namespace EventStore.TestClient.Commands {
 					context.Log.Information("Write request took: {elapsed}.", sw.Elapsed);
 
 					if (pkg.Command != TcpCommand.WriteEventsCompleted) {
-						context.Fail(reason: string.Format("Unexpected TCP package: {0}.", pkg.Command));
+						context.Fail(reason: $"Unexpected TCP package: {pkg.Command}.");
 						return;
 					}
 
 					var dto = pkg.Data.Deserialize<TcpClientMessageDto.WriteEventsCompleted>();
 					if (dto.Result == TcpClientMessageDto.OperationResult.Success) {
 						context.Log.Information("Successfully written.");
-						PerfUtils.LogTeamCityGraphData(string.Format("{0}-latency-ms", Keyword),
+						PerfUtils.LogTeamCityGraphData($"{Keyword}-latency-ms",
 							(int)Math.Round(sw.Elapsed.TotalMilliseconds));
 						context.Success();
 					} else {
diff --git a/src/EventStore.TestClient/CommandsProcessor.cs b/src/EventStore.TestClient/CommandsProcessor.cs
index c8d43a3fe..171fd585c 100644
--- a/src/EventStore.TestClient/CommandsProcessor.cs
+++ b/src/EventStore.TestClient/CommandsProcessor.cs
@@ -24,7 +24,7 @@ namespace EventStore.TestClient {
 
 			if (_processors.ContainsKey(cmd))
 				throw new InvalidOperationException(
-					string.Format("The processor for command '{0}' is already registered.", cmd));
+					$"The processor for command '{cmd}' is already registered.");
 
 			_processors[cmd] = processor;
 
@@ -101,7 +101,7 @@ namespace EventStore.TestClient {
 				details.AppendFormat("\n{0}-->{1}", new string(' ', level * 2), ex.Message);
 
 				var aggregated = ex as AggregateException;
-				if (aggregated != null && aggregated.InnerExceptions != null) {
+				if (aggregated?.InnerExceptions != null) {
 					if (level > maxLevel)
 						break;
 
diff --git a/src/EventStore.TestClient/PerfUtils.cs b/src/EventStore.TestClient/PerfUtils.cs
index f64b53622..702c793f0 100644
--- a/src/EventStore.TestClient/PerfUtils.cs
+++ b/src/EventStore.TestClient/PerfUtils.cs
@@ -36,7 +36,7 @@ namespace EventStore.TestClient {
 		}
 
 		private static string Format(string name, object value) {
-			return string.Format("{0}{1}{2}{3}", name, PairSplitter, value, ColumnSplitter);
+			return $"{name}{PairSplitter}{value}{ColumnSplitter}";
 		}
 
 		/// <summary>
diff --git a/src/EventStore.TestClient/PortsHelper.cs b/src/EventStore.TestClient/PortsHelper.cs
index 6e4a91aba..193f0cad5 100644
--- a/src/EventStore.TestClient/PortsHelper.cs
+++ b/src/EventStore.TestClient/PortsHelper.cs
@@ -41,7 +41,7 @@ namespace EventStore.TestClient {
 
 				try {
 					var httpListener = new HttpListener();
-					httpListener.Prefixes.Add(string.Format("http://+:{0}/", port));
+					httpListener.Prefixes.Add($"http://+:{port}/");
 					httpListener.Start();
 
 					Exception httpListenerError = null;
@@ -54,11 +54,11 @@ namespace EventStore.TestClient {
 						}
 					});
 
-					var request = (HttpWebRequest)WebRequest.Create(string.Format("http://{0}:{1}/", ip, port));
+					var request = (HttpWebRequest)WebRequest.Create($"http://{ip}:{port}/");
 					var buffer = new byte[256];
 					var read = request.GetResponse().GetResponseStream().Read(buffer, 0, buffer.Length);
 					if (read != 3 || buffer[0] != 1 || buffer[1] != 2 || buffer[2] != 3)
-						throw new Exception(string.Format("Unexpected response received from HTTP on port {0}.", port));
+						throw new Exception($"Unexpected response received from HTTP on port {port}.");
 
 					if (!listenTask.Wait(5000))
 						throw new Exception("PortsHelper: time out waiting for HttpListener to return.");
@@ -105,7 +105,7 @@ namespace EventStore.TestClient {
 
 				try {
 					var httpListener = new HttpListener();
-					httpListener.Prefixes.Add(string.Format("http://127.0.0.1:{0}/", port));
+					httpListener.Prefixes.Add($"http://127.0.0.1:{port}/");
 					httpListener.Start();
 					httpListener.Stop();
 				} catch (Exception) {
diff --git a/src/EventStore.Transport.Http/Codecs/XmlCodec.cs b/src/EventStore.Transport.Http/Codecs/XmlCodec.cs
index f374cea89..5af7476a2 100644
--- a/src/EventStore.Transport.Http/Codecs/XmlCodec.cs
+++ b/src/EventStore.Transport.Http/Codecs/XmlCodec.cs
@@ -61,8 +61,7 @@ namespace EventStore.Transport.Http.Codecs {
 			try {
 				using (var memory = new MemoryStream())
 				using (var writer = new XmlTextWriter(memory, Helper.UTF8NoBom)) {
-					var serializable = value as IXmlSerializable;
-					if (serializable != null) {
+					if (value is IXmlSerializable serializable) {
 						writer.WriteStartDocument();
 						serializable.WriteXml(writer);
 						writer.WriteEndDocument();
diff --git a/src/EventStore.Transport.Tcp/Framing/LengthPrefixMessageFramer.cs b/src/EventStore.Transport.Tcp/Framing/LengthPrefixMessageFramer.cs
index ddbc49378..efcdbf4e0 100644
--- a/src/EventStore.Transport.Tcp/Framing/LengthPrefixMessageFramer.cs
+++ b/src/EventStore.Transport.Tcp/Framing/LengthPrefixMessageFramer.cs
@@ -65,9 +65,7 @@ namespace EventStore.Transport.Tcp.Framing {
 					if (_headerBytes == HeaderLength) {
 						if (_packageLength <= 0 || _packageLength > _maxPackageSize) {
 							Log.Error("FRAMING ERROR! Data:\n {data}", Common.Utils.Helper.FormatBinaryDump(bytes));
-							throw new PackageFramingException(string.Format(
-								"Package size is out of bounds: {0} (max: {1}).",
-								_packageLength, _maxPackageSize));
+							throw new PackageFramingException($"Package size is out of bounds: {_packageLength} (max: {_maxPackageSize}).");
 						}
 
 						_messageBuffer = new byte[_packageLength];
diff --git a/src/EventStore.Transport.Tcp/Framing/LengthPrefixMessageFramerWithBufferPool.cs b/src/EventStore.Transport.Tcp/Framing/LengthPrefixMessageFramerWithBufferPool.cs
index bdf65f8dd..deebc6b69 100644
--- a/src/EventStore.Transport.Tcp/Framing/LengthPrefixMessageFramerWithBufferPool.cs
+++ b/src/EventStore.Transport.Tcp/Framing/LengthPrefixMessageFramerWithBufferPool.cs
@@ -62,9 +62,7 @@ namespace EventStore.Transport.Tcp.Framing {
 					if (_headerBytes == PrefixLength) {
 						if (_packageLength <= 0 || _packageLength > _maxPackageSize) {
 							Log.Error("FRAMING ERROR! Data:\n {data}", Common.Utils.Helper.FormatBinaryDump(bytes));
-							throw new PackageFramingException(string.Format(
-								"Package size is out of bounds: {0} (max: {1}).",
-								_packageLength, _maxPackageSize));
+							throw new PackageFramingException($"Package size is out of bounds: {_packageLength} (max: {_maxPackageSize}).");
 						}
 
 						_messageBuffer = new BufferPool(_bufferManager);
