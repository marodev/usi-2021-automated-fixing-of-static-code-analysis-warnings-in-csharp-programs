diff --git a/Grand.Api/Commands/Handlers/Catalog/DeleteProductCategoryCommandHandler.cs b/Grand.Api/Commands/Handlers/Catalog/DeleteProductCategoryCommandHandler.cs
index 2b23e920c..2adc3b6d5 100644
--- a/Grand.Api/Commands/Handlers/Catalog/DeleteProductCategoryCommandHandler.cs
+++ b/Grand.Api/Commands/Handlers/Catalog/DeleteProductCategoryCommandHandler.cs
@@ -23,7 +23,7 @@ public class DeleteProductCategoryCommandHandler : IRequestHandler<DeleteProduct
         public async Task<bool> Handle(DeleteProductCategoryCommand request, CancellationToken cancellationToken)
         {
             var product = await _productService.GetProductById(request.Product.Id, true);
-            var productCategory = product.ProductCategories.Where(x => x.CategoryId == request.CategoryId).FirstOrDefault();
+            var productCategory = product.ProductCategories.FirstOrDefault(x => x.CategoryId == request.CategoryId);
             if (productCategory == null)
                 throw new ArgumentException("No product category mapping found with the specified id");
 
diff --git a/Grand.Api/Commands/Handlers/Catalog/DeleteProductManufacturerCommandHandler.cs b/Grand.Api/Commands/Handlers/Catalog/DeleteProductManufacturerCommandHandler.cs
index 1f751e3bc..a2256d9e4 100644
--- a/Grand.Api/Commands/Handlers/Catalog/DeleteProductManufacturerCommandHandler.cs
+++ b/Grand.Api/Commands/Handlers/Catalog/DeleteProductManufacturerCommandHandler.cs
@@ -21,7 +21,7 @@ public DeleteProductManufacturerCommandHandler(IManufacturerService manufacturer
         public async Task<bool> Handle(DeleteProductManufacturerCommand request, CancellationToken cancellationToken)
         {
             var product = await _productService.GetProductById(request.Product.Id, true);
-            var productManufacturer = product.ProductManufacturers.Where(x => x.ManufacturerId == request.ManufacturerId).FirstOrDefault();
+            var productManufacturer = product.ProductManufacturers.FirstOrDefault(x => x.ManufacturerId == request.ManufacturerId);
             if (productManufacturer == null)
                 throw new ArgumentException("No product manufacturer mapping found with the specified id");
 
diff --git a/Grand.Api/Commands/Handlers/Catalog/DeleteProductPictureCommandHandler.cs b/Grand.Api/Commands/Handlers/Catalog/DeleteProductPictureCommandHandler.cs
index c57fa393c..583311ff3 100644
--- a/Grand.Api/Commands/Handlers/Catalog/DeleteProductPictureCommandHandler.cs
+++ b/Grand.Api/Commands/Handlers/Catalog/DeleteProductPictureCommandHandler.cs
@@ -21,7 +21,7 @@ public async Task<bool> Handle(DeleteProductPictureCommand request, Cancellation
         {
             var product = await _productService.GetProductById(request.Product.Id);
 
-            var productPicture = product.ProductPictures.Where(x => x.PictureId == request.PictureId).FirstOrDefault();
+            var productPicture = product.ProductPictures.FirstOrDefault(x => x.PictureId == request.PictureId);
             if (productPicture == null)
                 throw new ArgumentException("No product picture found with the specified pictureid");
 
diff --git a/Grand.Api/Commands/Handlers/Catalog/DeleteProductTierPriceCommandHandler.cs b/Grand.Api/Commands/Handlers/Catalog/DeleteProductTierPriceCommandHandler.cs
index 82e9659da..793d5aff5 100644
--- a/Grand.Api/Commands/Handlers/Catalog/DeleteProductTierPriceCommandHandler.cs
+++ b/Grand.Api/Commands/Handlers/Catalog/DeleteProductTierPriceCommandHandler.cs
@@ -18,7 +18,7 @@ public DeleteProductTierPriceCommandHandler(IProductService productService)
         public async Task<bool> Handle(DeleteProductTierPriceCommand request, CancellationToken cancellationToken)
         {
             var product = await _productService.GetProductById(request.Product.Id, true);
-            var tierPrice = product.TierPrices.Where(x => x.Id == request.Id).FirstOrDefault();
+            var tierPrice = product.TierPrices.FirstOrDefault(x => x.Id == request.Id);
             tierPrice.ProductId = product.Id;
             await _productService.DeleteTierPrice(tierPrice);
 
diff --git a/Grand.Api/Commands/Handlers/Catalog/UpdateProductCategoryCommandHandler.cs b/Grand.Api/Commands/Handlers/Catalog/UpdateProductCategoryCommandHandler.cs
index 336438da4..76156cd62 100644
--- a/Grand.Api/Commands/Handlers/Catalog/UpdateProductCategoryCommandHandler.cs
+++ b/Grand.Api/Commands/Handlers/Catalog/UpdateProductCategoryCommandHandler.cs
@@ -23,7 +23,7 @@ public class UpdateProductCategoryCommandHandler : IRequestHandler<UpdateProduct
         public async Task<bool> Handle(UpdateProductCategoryCommand request, CancellationToken cancellationToken)
         {
             var product = await _productService.GetProductById(request.Product.Id, true);
-            var productCategory = product.ProductCategories.Where(x => x.CategoryId == request.Model.CategoryId).FirstOrDefault();
+            var productCategory = product.ProductCategories.FirstOrDefault(x => x.CategoryId == request.Model.CategoryId);
             if (productCategory == null)
                 throw new ArgumentException("No product category mapping found with the specified id");
 
diff --git a/Grand.Api/Commands/Handlers/Catalog/UpdateProductManufacturerCommandHandler.cs b/Grand.Api/Commands/Handlers/Catalog/UpdateProductManufacturerCommandHandler.cs
index 0304b4166..7673c3253 100644
--- a/Grand.Api/Commands/Handlers/Catalog/UpdateProductManufacturerCommandHandler.cs
+++ b/Grand.Api/Commands/Handlers/Catalog/UpdateProductManufacturerCommandHandler.cs
@@ -21,7 +21,7 @@ public UpdateProductManufacturerCommandHandler(IManufacturerService manufacturer
         public async Task<bool> Handle(UpdateProductManufacturerCommand request, CancellationToken cancellationToken)
         {
             var product = await _productService.GetProductById(request.Product.Id, true);
-            var productManufacturer = product.ProductManufacturers.Where(x => x.ManufacturerId == request.Model.ManufacturerId).FirstOrDefault();
+            var productManufacturer = product.ProductManufacturers.FirstOrDefault(x => x.ManufacturerId == request.Model.ManufacturerId);
             if (productManufacturer == null)
                 throw new ArgumentException("No product manufacturer mapping found with the specified id");
 
diff --git a/Grand.Api/Commands/Handlers/Catalog/UpdateProductPictureCommandHandler.cs b/Grand.Api/Commands/Handlers/Catalog/UpdateProductPictureCommandHandler.cs
index bbefb9c97..534685f6e 100644
--- a/Grand.Api/Commands/Handlers/Catalog/UpdateProductPictureCommandHandler.cs
+++ b/Grand.Api/Commands/Handlers/Catalog/UpdateProductPictureCommandHandler.cs
@@ -25,7 +25,7 @@ public async Task<bool> Handle(UpdateProductPictureCommand request, Cancellation
         {
             var product = await _productService.GetProductById(request.Product.Id, true);
 
-            var productPicture = product.ProductPictures.Where(x => x.PictureId == request.Model.PictureId).FirstOrDefault();
+            var productPicture = product.ProductPictures.FirstOrDefault(x => x.PictureId == request.Model.PictureId);
             if (productPicture == null)
                 throw new ArgumentException("No product picture found with the specified id");
 
diff --git a/Grand.Api/Controllers/OData/ProductController.cs b/Grand.Api/Controllers/OData/ProductController.cs
index 8bc66661d..2805f9809 100644
--- a/Grand.Api/Controllers/OData/ProductController.cs
+++ b/Grand.Api/Controllers/OData/ProductController.cs
@@ -166,7 +166,7 @@ public async Task<IActionResult> CreateProductCategory(string key, [FromBody] Pr
             if (!product.Any())
                 return NotFound();
 
-            var pc = product.FirstOrDefault().Categories.Where(x => x.CategoryId == productCategory.CategoryId).FirstOrDefault();
+            var pc = product.FirstOrDefault().Categories.FirstOrDefault(x => x.CategoryId == productCategory.CategoryId);
             if (pc != null)
                 ModelState.AddModelError("", "Product category mapping found with the specified categoryid");
 
@@ -194,7 +194,7 @@ public async Task<IActionResult> UpdateProductCategory(string key, [FromBody] Pr
                 return NotFound();
 
 
-            var pc = product.FirstOrDefault().Categories.Where(x => x.CategoryId == productCategory.CategoryId).FirstOrDefault();
+            var pc = product.FirstOrDefault().Categories.FirstOrDefault(x => x.CategoryId == productCategory.CategoryId);
             if (pc == null)
                 ModelState.AddModelError("", "No product category mapping found with the specified id");
 
@@ -225,7 +225,7 @@ public async Task<IActionResult> DeleteProductCategory(string key, [FromBody] OD
             var categoryId = parameters.FirstOrDefault(x => x.Key == "CategoryId").Value;
             if (categoryId != null)
             {
-                var pc = product.FirstOrDefault().Categories.Where(x => x.CategoryId == categoryId.ToString()).FirstOrDefault();
+                var pc = product.FirstOrDefault().Categories.FirstOrDefault(x => x.CategoryId == categoryId.ToString());
                 if (pc == null)
                     ModelState.AddModelError("", "No product category mapping found with the specified id");
 
@@ -259,7 +259,7 @@ public async Task<IActionResult> CreateProductManufacturer(string key, [FromBody
                 return NotFound();
 
 
-            var pm = product.FirstOrDefault().Manufacturers.Where(x => x.ManufacturerId == productManufacturer.ManufacturerId).FirstOrDefault();
+            var pm = product.FirstOrDefault().Manufacturers.FirstOrDefault(x => x.ManufacturerId == productManufacturer.ManufacturerId);
             if (pm != null)
                 ModelState.AddModelError("", "Product manufacturer mapping found with the specified manufacturerid");
 
@@ -286,7 +286,7 @@ public async Task<IActionResult> UpdateProductManufacturer(string key, [FromBody
             if (!product.Any())
                 return NotFound();
 
-            var pm = product.FirstOrDefault().Manufacturers.Where(x => x.ManufacturerId == productManufacturer.ManufacturerId).FirstOrDefault();
+            var pm = product.FirstOrDefault().Manufacturers.FirstOrDefault(x => x.ManufacturerId == productManufacturer.ManufacturerId);
             if (pm == null)
                 ModelState.AddModelError("", "No product manufacturer mapping found with the specified id");
 
@@ -316,7 +316,7 @@ public async Task<IActionResult> DeleteProductManufacturer(string key, [FromBody
             var manufacturerId = parameters.FirstOrDefault(x => x.Key == "ManufacturerId").Value;
             if (manufacturerId != null)
             {
-                var pm = product.FirstOrDefault().Manufacturers.Where(x => x.ManufacturerId == manufacturerId.ToString()).FirstOrDefault();
+                var pm = product.FirstOrDefault().Manufacturers.FirstOrDefault(x => x.ManufacturerId == manufacturerId.ToString());
                 if (pm == null)
                     ModelState.AddModelError("", "No product manufacturer mapping found with the specified id");
 
@@ -350,7 +350,7 @@ public async Task<IActionResult> CreateProductPicture(string key, [FromBody] Pro
                 return NotFound();
 
 
-            var pp = product.FirstOrDefault().Pictures.Where(x => x.PictureId == productPicture.PictureId).FirstOrDefault();
+            var pp = product.FirstOrDefault().Pictures.FirstOrDefault(x => x.PictureId == productPicture.PictureId);
             if (pp != null)
                 ModelState.AddModelError("", "Product picture mapping found with the specified pictureid");
 
@@ -378,7 +378,7 @@ public async Task<IActionResult> UpdateProductPicture(string key, [FromBody] Pro
                 return NotFound();
 
 
-            var pp = product.FirstOrDefault().Pictures.Where(x => x.PictureId == productPicture.PictureId).FirstOrDefault();
+            var pp = product.FirstOrDefault().Pictures.FirstOrDefault(x => x.PictureId == productPicture.PictureId);
             if (pp == null)
                 ModelState.AddModelError("", "No product picture mapping found with the specified id");
 
@@ -409,7 +409,7 @@ public async Task<IActionResult> DeleteProductPicture(string key, [FromBody] ODa
             var pictureId = parameters.FirstOrDefault(x => x.Key == "PictureId").Value;
             if (pictureId != null)
             {
-                var pp = product.FirstOrDefault().Pictures.Where(x => x.PictureId == pictureId.ToString()).FirstOrDefault();
+                var pp = product.FirstOrDefault().Pictures.FirstOrDefault(x => x.PictureId == pictureId.ToString());
                 if (pp == null)
                     ModelState.AddModelError("", "No product picture mapping found with the specified id");
 
@@ -442,7 +442,7 @@ public async Task<IActionResult> CreateProductSpecification(string key, [FromBod
             if (!product.Any())
                 return NotFound();
 
-            var psa = product.FirstOrDefault().SpecificationAttribute.Where(x => x.Id == productSpecification.Id).FirstOrDefault();
+            var psa = product.FirstOrDefault().SpecificationAttribute.FirstOrDefault(x => x.Id == productSpecification.Id);
             if (psa != null)
                 ModelState.AddModelError("", "Product specification mapping found with the specified id");
 
@@ -469,7 +469,7 @@ public async Task<IActionResult> UpdateProductSpecification(string key, [FromBod
             if (!product.Any())
                 return NotFound();
 
-            var psa = product.FirstOrDefault().SpecificationAttribute.Where(x => x.Id == productSpecification.Id).FirstOrDefault();
+            var psa = product.FirstOrDefault().SpecificationAttribute.FirstOrDefault(x => x.Id == productSpecification.Id);
             if (psa == null)
                 ModelState.AddModelError("", "No product specification mapping found with the specified id");
 
@@ -500,7 +500,7 @@ public async Task<IActionResult> DeleteProductSpecification(string key, [FromBod
             var specificationId = parameters.FirstOrDefault(x => x.Key == "Id").Value;
             if (specificationId != null)
             {
-                var psa = product.FirstOrDefault().SpecificationAttribute.Where(x => x.Id == specificationId.ToString()).FirstOrDefault();
+                var psa = product.FirstOrDefault().SpecificationAttribute.FirstOrDefault(x => x.Id == specificationId.ToString());
                 if (psa == null)
                     ModelState.AddModelError("", "No product specification mapping found with the specified id");
 
@@ -533,7 +533,7 @@ public async Task<IActionResult> CreateProductTierPrice(string key, [FromBody] P
             if (!product.Any())
                 return NotFound();
 
-            var pt = product.FirstOrDefault().TierPrices.Where(x => x.Id == productTierPrice.Id).FirstOrDefault();
+            var pt = product.FirstOrDefault().TierPrices.FirstOrDefault(x => x.Id == productTierPrice.Id);
             if (pt != null)
                 ModelState.AddModelError("", "Product tier price mapping found with the specified id");
 
@@ -560,7 +560,7 @@ public async Task<IActionResult> UpdateProductTierPrice(string key, [FromBody] P
             if (!product.Any())
                 return NotFound();
 
-            var pt = product.FirstOrDefault().TierPrices.Where(x => x.Id == productTierPrice.Id).FirstOrDefault();
+            var pt = product.FirstOrDefault().TierPrices.FirstOrDefault(x => x.Id == productTierPrice.Id);
             if (pt == null)
                 ModelState.AddModelError("", "No product tier price mapping found with the specified id");
 
@@ -590,7 +590,7 @@ public async Task<IActionResult> DeleteProductTierPrice(string key, [FromBody] O
             var tierPriceId = parameters.FirstOrDefault(x => x.Key == "Id").Value;
             if (tierPriceId != null)
             {
-                var pt = product.FirstOrDefault().TierPrices.Where(x => x.Id == tierPriceId.ToString()).FirstOrDefault();
+                var pt = product.FirstOrDefault().TierPrices.FirstOrDefault(x => x.Id == tierPriceId.ToString());
                 if (pt == null)
                     ModelState.AddModelError("", "No product tier price mapping found with the specified id");
 
@@ -623,7 +623,7 @@ public async Task<IActionResult> CreateProductAttributeMapping(string key, [From
             if (!product.Any())
                 return NotFound();
 
-            var pam = product.FirstOrDefault().AttributeMappings.Where(x => x.Id == productAttributeMapping.Id).FirstOrDefault();
+            var pam = product.FirstOrDefault().AttributeMappings.FirstOrDefault(x => x.Id == productAttributeMapping.Id);
             if (pam != null)
                 ModelState.AddModelError("", "Product attribute mapping found with the specified id");
 
@@ -650,7 +650,7 @@ public async Task<IActionResult> UpdateProductAttributeMapping(string key, [From
             if (!product.Any())
                 return NotFound();
 
-            var pam = product.FirstOrDefault().AttributeMappings.Where(x => x.Id == productAttributeMapping.Id).FirstOrDefault();
+            var pam = product.FirstOrDefault().AttributeMappings.FirstOrDefault(x => x.Id == productAttributeMapping.Id);
             if (pam == null)
                 ModelState.AddModelError("", "No product attribute mapping found with the specified id");
 
@@ -681,7 +681,7 @@ public async Task<IActionResult> DeleteProductAttributeMapping(string key, [From
             var attrId = parameters.FirstOrDefault(x => x.Key == "Id").Value;
             if (attrId != null)
             {
-                var pam = product.FirstOrDefault().AttributeMappings.Where(x => x.Id == attrId.ToString()).FirstOrDefault();
+                var pam = product.FirstOrDefault().AttributeMappings.FirstOrDefault(x => x.Id == attrId.ToString());
                 if (pam == null)
                     ModelState.AddModelError("", "No product attribute mapping found with the specified id");
 
diff --git a/Grand.Core/Data/MongoDBDataProviderManager.cs b/Grand.Core/Data/MongoDBDataProviderManager.cs
index 016848d02..db0cab23c 100644
--- a/Grand.Core/Data/MongoDBDataProviderManager.cs
+++ b/Grand.Core/Data/MongoDBDataProviderManager.cs
@@ -13,7 +13,7 @@ public override IDataProvider LoadDataProvider()
         {
             var providerName = Settings.DataProvider;
             if (!String.IsNullOrWhiteSpace(providerName) && providerName.ToLowerInvariant() != "mongodb")
-                throw new GrandException(string.Format("Not supported dataprovider name: {0}", providerName));
+                throw new GrandException($"Not supported dataprovider name: {providerName}");
 
             return new MongoDBDataProvider();
         }
diff --git a/Grand.Core/Plugins/PluginExtensions.cs b/Grand.Core/Plugins/PluginExtensions.cs
index 804c60fca..cb24aeb6a 100644
--- a/Grand.Core/Plugins/PluginExtensions.cs
+++ b/Grand.Core/Plugins/PluginExtensions.cs
@@ -22,12 +22,12 @@ public static string GetLogoUrl(this PluginDescriptor pluginDescriptor, IWebHelp
             var logoPluginJpg = Path.Combine(pluginDirectory.FullName, "logo.jpg");
             if (File.Exists(logoPluginJpg))
             {
-                return string.Format("{0}{1}/{2}/logo.jpg", webHelper.GetStoreLocation(), pluginDirectory.Parent.Name, pluginDirectory.Name);
+                return $"{webHelper.GetStoreLocation()}{pluginDirectory.Parent.Name}/{pluginDirectory.Name}/logo.jpg";
             }
             var logoPluginPng = Path.Combine(pluginDirectory.FullName, "logo.png");
             if (File.Exists(logoPluginPng))
             {
-                return string.Format("{0}{1}/{2}/logo.png", webHelper.GetStoreLocation(), pluginDirectory.Parent.Name, pluginDirectory.Name);
+                return $"{webHelper.GetStoreLocation()}{pluginDirectory.Parent.Name}/{pluginDirectory.Name}/logo.png";
             }
             return null;
 
diff --git a/Grand.Core/Plugins/PluginFileParser.cs b/Grand.Core/Plugins/PluginFileParser.cs
index 7f3aac455..47f903522 100644
--- a/Grand.Core/Plugins/PluginFileParser.cs
+++ b/Grand.Core/Plugins/PluginFileParser.cs
@@ -39,7 +39,7 @@ public static async Task SaveInstalledPluginsFile(IList<string> pluginSystemName
         {
             string result = "";
             foreach (var sn in pluginSystemNames)
-                result += string.Format("{0}{1}", sn, Environment.NewLine);
+                result += $"{sn}{Environment.NewLine}";
 
             await File.WriteAllTextAsync(filePath, result);
             await Task.CompletedTask;
diff --git a/Grand.Core/Plugins/PluginManager.cs b/Grand.Core/Plugins/PluginManager.cs
index 709432476..99af4394d 100644
--- a/Grand.Core/Plugins/PluginManager.cs
+++ b/Grand.Core/Plugins/PluginManager.cs
@@ -113,9 +113,9 @@ public static void Initialize(IMvcCoreBuilder mvcCoreBuilder, GrandConfig config
 
                         //some validation
                         if (string.IsNullOrWhiteSpace(pluginDescriptor.SystemName))
-                            throw new Exception(string.Format("A plugin '{0}' has no system name. Try assigning the plugin a unique name and recompiling.", pluginDescriptor.SystemName));
+                            throw new Exception($"A plugin '{pluginDescriptor.SystemName}' has no system name. Try assigning the plugin a unique name and recompiling.");
                         if (referencedPlugins.Contains(pluginDescriptor))
-                            throw new Exception(string.Format("A plugin with '{0}' system name is already defined", pluginDescriptor.SystemName));
+                            throw new Exception($"A plugin with '{pluginDescriptor.SystemName}' system name is already defined");
 
                         //set 'Installed' property
                         pluginDescriptor.Installed = installedPluginSystemNames
@@ -158,7 +158,7 @@ public static void Initialize(IMvcCoreBuilder mvcCoreBuilder, GrandConfig config
                         catch (ReflectionTypeLoadException ex)
                         {
                             //add a plugin name. this way we can easily identify a problematic plugin
-                            var msg = string.Format("Plugin '{0}'. ", pluginDescriptor.FriendlyName);
+                            var msg = $"Plugin '{pluginDescriptor.FriendlyName}'. ";
                             foreach (var e in ex.LoaderExceptions)
                                 msg += e.Message + Environment.NewLine;
 
@@ -168,7 +168,7 @@ public static void Initialize(IMvcCoreBuilder mvcCoreBuilder, GrandConfig config
                         catch (Exception ex)
                         {
                             //add a plugin name. this way we can easily identify a problematic plugin
-                            var msg = string.Format("Plugin '{0}'. {1}", pluginDescriptor.FriendlyName, ex.Message);
+                            var msg = $"Plugin '{pluginDescriptor.FriendlyName}'. {ex.Message}";
 
                             var fail = new Exception(msg, ex);
                             throw fail;
diff --git a/Grand.Core/Roslyn/RoslynCompiler.cs b/Grand.Core/Roslyn/RoslynCompiler.cs
index 722ab27cb..269bf03f1 100644
--- a/Grand.Core/Roslyn/RoslynCompiler.cs
+++ b/Grand.Core/Roslyn/RoslynCompiler.cs
@@ -109,7 +109,7 @@ public static void Initialize(ApplicationPartManager applicationPartManager, Gra
             }
             catch (Exception ex)
             {
-                var msg = string.Format("Roslyn '{0}'", ex.Message);
+                var msg = $"Roslyn '{ex.Message}'";
 
                 var fail = new Exception(msg, ex);
                 throw fail;
diff --git a/Grand.Core/TypeConverters/Converter/CustomAttributeListTypeConverter.cs b/Grand.Core/TypeConverters/Converter/CustomAttributeListTypeConverter.cs
index 483b36075..58659b11f 100644
--- a/Grand.Core/TypeConverters/Converter/CustomAttributeListTypeConverter.cs
+++ b/Grand.Core/TypeConverters/Converter/CustomAttributeListTypeConverter.cs
@@ -45,8 +45,7 @@ public override object ConvertTo(ITypeDescriptorContext context, CultureInfo cul
         {
             if (destinationType == typeof(string))
             {
-                var customAttributes = value as List<CustomAttribute>;
-                if (customAttributes != null)
+                if (value is List<CustomAttribute> customAttributes)
                 {
                     return JsonSerializer.Serialize(customAttributes);
                 }
diff --git a/Grand.Core/TypeConverters/Converter/GenericDictionaryTypeConverter.cs b/Grand.Core/TypeConverters/Converter/GenericDictionaryTypeConverter.cs
index 7b8501310..4305a97bd 100644
--- a/Grand.Core/TypeConverters/Converter/GenericDictionaryTypeConverter.cs
+++ b/Grand.Core/TypeConverters/Converter/GenericDictionaryTypeConverter.cs
@@ -54,9 +54,8 @@ public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceT
         /// <returns>Result</returns>
         public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
         {
-            if (value is string)
+            if (value is string input)
             {
-                string input = (string)value;
                 string[] items = string.IsNullOrEmpty(input) ? new string[0] : input.Split(';').Select(x => x.Trim()).ToArray();
 
                 var result = new Dictionary<K, V>();
@@ -103,7 +102,7 @@ public override object ConvertTo(ITypeDescriptorContext context, CultureInfo cul
                     var dictionary = (IDictionary<K, V>)value;
                     foreach (var keyValue in dictionary)
                     {
-                        result += string.Format("{0},{1}", Convert.ToString(keyValue.Key, CultureInfo.InvariantCulture), Convert.ToString(keyValue.Value, CultureInfo.InvariantCulture));
+                        result += $"{Convert.ToString(keyValue.Key, CultureInfo.InvariantCulture)},{Convert.ToString(keyValue.Value, CultureInfo.InvariantCulture)}";
                         //don't add ; after the last element
                         if (counter != dictionary.Count - 1)
                             result += ";";
diff --git a/Grand.Core/TypeConverters/Converter/GenericListTypeConverter.cs b/Grand.Core/TypeConverters/Converter/GenericListTypeConverter.cs
index fe9719336..90b617c64 100644
--- a/Grand.Core/TypeConverters/Converter/GenericListTypeConverter.cs
+++ b/Grand.Core/TypeConverters/Converter/GenericListTypeConverter.cs
@@ -65,9 +65,9 @@ public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceT
         /// <returns>Result</returns>
         public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
         {
-            if (value is string)
+            if (value is string s)
             {
-                var items = GetStringArray((string)value);
+                var items = GetStringArray(s);
                 var result = new List<T>();
                 Array.ForEach(items, s =>
                 {
diff --git a/Grand.Core/TypeConverters/Converter/ShippingOptionListTypeConverter.cs b/Grand.Core/TypeConverters/Converter/ShippingOptionListTypeConverter.cs
index d51f47b63..ab688ba25 100644
--- a/Grand.Core/TypeConverters/Converter/ShippingOptionListTypeConverter.cs
+++ b/Grand.Core/TypeConverters/Converter/ShippingOptionListTypeConverter.cs
@@ -45,8 +45,7 @@ public override object ConvertTo(ITypeDescriptorContext context, CultureInfo cul
         {
             if (destinationType == typeof(string))
             {
-                var shippingOptions = value as List<ShippingOption>;
-                if (shippingOptions != null)
+                if (value is List<ShippingOption> shippingOptions)
                 {
                     return JsonSerializer.Serialize(shippingOptions);
                 }
diff --git a/Grand.Core/TypeConverters/Converter/ShippingOptionTypeConverter.cs b/Grand.Core/TypeConverters/Converter/ShippingOptionTypeConverter.cs
index 8e7b99994..378bfe507 100644
--- a/Grand.Core/TypeConverters/Converter/ShippingOptionTypeConverter.cs
+++ b/Grand.Core/TypeConverters/Converter/ShippingOptionTypeConverter.cs
@@ -44,8 +44,7 @@ public override object ConvertTo(ITypeDescriptorContext context, CultureInfo cul
         {
             if (destinationType == typeof(string))
             {
-                var shippingOption = value as ShippingOption;
-                if (shippingOption != null)
+                if (value is ShippingOption shippingOption)
                 {
                     return JsonSerializer.Serialize(shippingOption);
                 }
diff --git a/Grand.Core/TypeFinders/TypeFinder.cs b/Grand.Core/TypeFinders/TypeFinder.cs
index 599143b95..636122dcc 100644
--- a/Grand.Core/TypeFinders/TypeFinder.cs
+++ b/Grand.Core/TypeFinders/TypeFinder.cs
@@ -126,8 +126,7 @@ private IList<Assembly> AssembliesInAppDomain()
             {
                 var product = assembly.GetCustomAttribute<AssemblyProductAttribute>();
                 var referencedAssemblies = assembly.GetReferencedAssemblies().ToList();
-                if (referencedAssemblies.Where(x => x.FullName == currentAssem.FullName).Any()
-                    || product?.Product == "grandnode")
+                if (referencedAssemblies.Any(x => x.FullName == currentAssem.FullName)                    || product?.Product == "grandnode")
                 {
                     if (!addedAssemblyNames.Contains(assembly.FullName))
                     {
diff --git a/Grand.Domain/Directory/ExchangeRate.cs b/Grand.Domain/Directory/ExchangeRate.cs
index 9c59956f6..d21ee5fbc 100644
--- a/Grand.Domain/Directory/ExchangeRate.cs
+++ b/Grand.Domain/Directory/ExchangeRate.cs
@@ -38,7 +38,7 @@ public ExchangeRate()
         /// <returns></returns>
         public override string ToString()
         {
-            return string.Format("{0} {1}", CurrencyCode, Rate);
+            return $"{CurrencyCode} {Rate}";
         }
     }
 
diff --git a/Grand.Framework/Controllers/BaseController.cs b/Grand.Framework/Controllers/BaseController.cs
index 41fab61ec..48ee886cd 100644
--- a/Grand.Framework/Controllers/BaseController.cs
+++ b/Grand.Framework/Controllers/BaseController.cs
@@ -251,7 +251,7 @@ protected void LogException(Exception exception)
         /// <param name="persistForTheNextRequest">A value indicating whether a message should be persisted for the next request</param>
         protected virtual void AddNotification(NotifyType type, string message, bool persistForTheNextRequest)
         {
-            var dataKey = string.Format("grand.notifications.{0}", type);
+            var dataKey = $"grand.notifications.{type}";
 
             if (persistForTheNextRequest)
             {
diff --git a/Grand.Framework/Extensions/HtmlExtensions.cs b/Grand.Framework/Extensions/HtmlExtensions.cs
index 46c439fcc..1400ff193 100644
--- a/Grand.Framework/Extensions/HtmlExtensions.cs
+++ b/Grand.Framework/Extensions/HtmlExtensions.cs
@@ -42,7 +42,7 @@ public static class HtmlExtensions
             if (localizationSupported)
             {
                 var tabStrip = new StringBuilder();
-                tabStrip.AppendLine(string.Format("<div id='{0}'>", name));
+                tabStrip.AppendLine($"<div id='{name}'>");
                 tabStrip.AppendLine("<ul>");
 
                 //default tab
@@ -59,7 +59,7 @@ public static class HtmlExtensions
                     tabStrip.AppendLine("<li>");
                     var urlHelper = new UrlHelper(helper.ViewContext);
                     var iconUrl = urlHelper.Content("~/content/images/flags/" + language.FlagImageFileName);
-                    tabStrip.AppendLine(string.Format("<img class='k-image' alt='' src='{0}'>", iconUrl));
+                    tabStrip.AppendLine($"<img class='k-image' alt='' src='{iconUrl}'>");
                     tabStrip.AppendLine(WebUtility.HtmlEncode(language.Name));
                     tabStrip.AppendLine("</li>");
                 }
@@ -80,7 +80,7 @@ public static class HtmlExtensions
                 tabStrip.AppendLine("</div>");
                 tabStrip.AppendLine("<script>");
                 tabStrip.AppendLine("$(document).ready(function() {");
-                tabStrip.AppendLine(string.Format("$('#{0}').kendoTabStrip(", name));
+                tabStrip.AppendLine($"$('#{name}').kendoTabStrip(");
                 tabStrip.AppendLine("{");
                 tabStrip.AppendLine("animation:  {");
                 tabStrip.AppendLine("open: {");
@@ -161,7 +161,7 @@ public static class HtmlExtensions
                 {
                     dataInputSelector = "#" + String.Join(", #", datainputIds);
                 }
-                var onClick = string.Format("checkOverriddenStoreValue(this, '{0}')", dataInputSelector);
+                var onClick = $"checkOverriddenStoreValue(this, '{dataInputSelector}')";
                 result.Append("<label class=\"mt-checkbox control control-checkbox\">");
                 var check = helper.CheckBoxFor(expression, new Dictionary<string, object>
                 {
diff --git a/Grand.Framework/Middleware/InstallUrlMiddleware.cs b/Grand.Framework/Middleware/InstallUrlMiddleware.cs
index 376a8e5a9..ba701474a 100644
--- a/Grand.Framework/Middleware/InstallUrlMiddleware.cs
+++ b/Grand.Framework/Middleware/InstallUrlMiddleware.cs
@@ -36,7 +36,7 @@ public async Task InvokeAsync(HttpContext context, IWebHelper webHelper)
             //whether database is installed
             if (!DataSettingsHelper.DatabaseIsInstalled())
             {
-                var installUrl = string.Format("{0}install", webHelper.GetStoreLocation());
+                var installUrl = $"{webHelper.GetStoreLocation()}install";
                 if (!webHelper.GetThisPageUrl(false).StartsWith(installUrl, StringComparison.OrdinalIgnoreCase))
                 {
                     //redirect
diff --git a/Grand.Framework/Security/Captcha/GRecaptchaControl.cs b/Grand.Framework/Security/Captcha/GRecaptchaControl.cs
index 55594e641..9ee8d2408 100644
--- a/Grand.Framework/Security/Captcha/GRecaptchaControl.cs
+++ b/Grand.Framework/Security/Captcha/GRecaptchaControl.cs
@@ -49,7 +49,7 @@ private string RenderV2()
 
             var scriptLoadApiTag = new TagBuilder("script");
             scriptLoadApiTag.TagRenderMode = TagRenderMode.Normal;
-            scriptLoadApiTag.Attributes.Add("src", RECAPTCHA_API_URL_VERSION + (string.IsNullOrEmpty(Language) ? "" : string.Format("&hl={0}", Language)));
+            scriptLoadApiTag.Attributes.Add("src", RECAPTCHA_API_URL_VERSION + (string.IsNullOrEmpty(Language) ? "" : $"&hl={Language}"));
             scriptLoadApiTag.Attributes.Add("async", null);
             scriptLoadApiTag.Attributes.Add("defer", null);
 
@@ -92,7 +92,7 @@ private string RenderV3()
 
             var scriptLoadApiTag = new TagBuilder("script");
             scriptLoadApiTag.TagRenderMode = TagRenderMode.Normal;
-            scriptLoadApiTag.Attributes.Add("src", RECAPTCHA_API_URL_VERSION + (string.IsNullOrEmpty(Language) ? "" : string.Format("&hl={0}", Language)));
+            scriptLoadApiTag.Attributes.Add("src", RECAPTCHA_API_URL_VERSION + (string.IsNullOrEmpty(Language) ? "" : $"&hl={Language}"));
 
             return scriptLoadApiTag.RenderHtmlContent() + scriptCallbackTag.RenderHtmlContent() + captchaTagInput.RenderHtmlContent() + captchaTagDiv.RenderHtmlContent();
         }
diff --git a/Grand.Framework/TagHelpers/Admin/AdminDeleteConfirmationTagHelper.cs b/Grand.Framework/TagHelpers/Admin/AdminDeleteConfirmationTagHelper.cs
index 18bd5da3f..3f0fa6218 100644
--- a/Grand.Framework/TagHelpers/Admin/AdminDeleteConfirmationTagHelper.cs
+++ b/Grand.Framework/TagHelpers/Admin/AdminDeleteConfirmationTagHelper.cs
@@ -61,14 +61,14 @@ public override async Task ProcessAsync(TagHelperContext tagHelperContext, TagHe
             var window = new StringBuilder();
             window.AppendLine("<script>");
             window.AppendLine("$(document).ready(function() {");
-            window.AppendLine(string.Format("$('#{0}').click(function (e) ", ButtonId));
+            window.AppendLine($"$('#{ButtonId}').click(function (e) ");
             window.AppendLine("{");
             window.AppendLine("e.preventDefault();");
-            window.AppendLine(string.Format("var window = $('#{0}');", windowId));
+            window.AppendLine($"var window = $('#{windowId}');");
             window.AppendLine("if (!window.data('kendoWindow')) {");
             window.AppendLine("window.kendoWindow({");
             window.AppendLine("modal: true,");
-            window.AppendLine(string.Format("title: '{0}',", _localizationService.GetResource("Admin.Common.AreYouSure")));
+            window.AppendLine($"title: '{_localizationService.GetResource("Admin.Common.AreYouSure")}',");
             window.AppendLine("actions: ['Close']");
             window.AppendLine("});");
             window.AppendLine("}");
diff --git a/Grand.Framework/TagHelpers/Admin/Extend/DefaultHtmlGenerator.cs b/Grand.Framework/TagHelpers/Admin/Extend/DefaultHtmlGenerator.cs
index 8041a8c4d..4de42782e 100644
--- a/Grand.Framework/TagHelpers/Admin/Extend/DefaultHtmlGenerator.cs
+++ b/Grand.Framework/TagHelpers/Admin/Extend/DefaultHtmlGenerator.cs
@@ -699,7 +699,7 @@ public virtual IHtmlContent GenerateAntiforgery(ViewContext viewContext)
             viewContext.ViewData.ModelState.TryGetValue(fullName, out var entry);
 
             var value = string.Empty;
-            if (entry != null && entry.AttemptedValue != null)
+            if (entry?.AttemptedValue != null)
             {
                 value = entry.AttemptedValue;
             }
diff --git a/Grand.Framework/TagHelpers/BBCodeEditorTagHelper.cs b/Grand.Framework/TagHelpers/BBCodeEditorTagHelper.cs
index d9bb60ee4..d50efb578 100644
--- a/Grand.Framework/TagHelpers/BBCodeEditorTagHelper.cs
+++ b/Grand.Framework/TagHelpers/BBCodeEditorTagHelper.cs
@@ -29,7 +29,7 @@ public override Task ProcessAsync(TagHelperContext context, TagHelperOutput outp
             var sb = new StringBuilder();
 
             var storeLocation = _webHelper.GetStoreLocation();
-            string bbEditorWebRoot = String.Format("{0}content/", storeLocation);
+            string bbEditorWebRoot = $"{storeLocation}content/";
 
             sb.AppendFormat("<script src=\"{0}content/bbeditor/ed.js\" ></script>", storeLocation);
             sb.Append(Environment.NewLine);
diff --git a/Grand.Framework/WebStoreContext.cs b/Grand.Framework/WebStoreContext.cs
index 9341666f0..0363d92c0 100644
--- a/Grand.Framework/WebStoreContext.cs
+++ b/Grand.Framework/WebStoreContext.cs
@@ -61,7 +61,7 @@ public virtual async Task<Store> SetCurrentStore()
 
             var allStores = await _storeService.GetAllStores();
             var stores = allStores.Where(s => s.ContainsHostValue(host));
-            if (stores.Count() == 0)
+            if (!stores.Any())
             {
                 _cachedStore = allStores.FirstOrDefault();
             }
diff --git a/Grand.Services/Affiliates/AffiliateExtensions.cs b/Grand.Services/Affiliates/AffiliateExtensions.cs
index 2e8a88cf4..ff6300f4e 100644
--- a/Grand.Services/Affiliates/AffiliateExtensions.cs
+++ b/Grand.Services/Affiliates/AffiliateExtensions.cs
@@ -24,7 +24,7 @@ public static string GetFullName(this Affiliate affiliate)
 
             string fullName = "";
             if (!String.IsNullOrWhiteSpace(firstName) && !String.IsNullOrWhiteSpace(lastName))
-                fullName = string.Format("{0} {1}", firstName, lastName);
+                fullName = $"{firstName} {lastName}";
             else
             {
                 if (!String.IsNullOrWhiteSpace(firstName))
@@ -97,7 +97,7 @@ public static async Task<string> ValidateFriendlyUrlName(this Affiliate affiliat
                 if (!reserved)
                     break;
 
-                tempName = string.Format("{0}-{1}", friendlyUrlName, i);
+                tempName = $"{friendlyUrlName}-{i}";
                 i++;
             }
             friendlyUrlName = tempName;
diff --git a/Grand.Services/Catalog/CategoryService.cs b/Grand.Services/Catalog/CategoryService.cs
index 2f86bd2c7..6c8107c28 100644
--- a/Grand.Services/Catalog/CategoryService.cs
+++ b/Grand.Services/Catalog/CategoryService.cs
@@ -376,7 +376,7 @@ public virtual async Task<string> GetFormattedBreadCrumb(Category category, stri
                 var categoryName = breadcrumb[i].GetLocalized(x => x.Name, languageId);
                 result = String.IsNullOrEmpty(result)
                     ? categoryName
-                    : string.Format("{0} {1} {2}", result, separator, categoryName);
+                    : $"{result} {separator} {categoryName}";
             }
 
             return result;
@@ -401,7 +401,7 @@ public virtual async Task<string> GetFormattedBreadCrumb(Category category, stri
                 var categoryName = breadcrumb[i].GetLocalized(x => x.Name, languageId);
                 result = String.IsNullOrEmpty(result)
                     ? categoryName
-                    : string.Format("{0} {1} {2}", result, separator, categoryName);
+                    : $"{result} {separator} {categoryName}";
             }
 
             return result;
diff --git a/Grand.Services/Catalog/PriceCalculationService.cs b/Grand.Services/Catalog/PriceCalculationService.cs
index 43b9eac44..1f780530b 100644
--- a/Grand.Services/Catalog/PriceCalculationService.cs
+++ b/Grand.Services/Catalog/PriceCalculationService.cs
@@ -269,27 +269,27 @@ protected virtual async Task<IList<AppliedDiscount>> GetAllowedDiscounts(Product
 
             //discounts applied to products
             foreach (var discount in await GetAllowedDiscountsAppliedToProduct(product, customer))
-                if (!allowedDiscounts.Where(x => x.DiscountId == discount.DiscountId).Any())
+                if (!allowedDiscounts.Any(x => x.DiscountId == discount.DiscountId))
                     allowedDiscounts.Add(discount);
 
             //discounts applied to all products
             foreach (var discount in await GetAllowedDiscountsAppliedToAllProduct(product, customer))
-                if (!allowedDiscounts.Where(x => x.DiscountId == discount.DiscountId).Any())
+                if (!allowedDiscounts.Any(x => x.DiscountId == discount.DiscountId))
                     allowedDiscounts.Add(discount);
 
             //discounts applied to categories
             foreach (var discount in await GetAllowedDiscountsAppliedToCategories(product, customer))
-                if (!allowedDiscounts.Where(x => x.DiscountId == discount.DiscountId).Any())
+                if (!allowedDiscounts.Any(x => x.DiscountId == discount.DiscountId))
                     allowedDiscounts.Add(discount);
 
             //discounts applied to manufacturers
             foreach (var discount in await GetAllowedDiscountsAppliedToManufacturers(product, customer))
-                if (!allowedDiscounts.Where(x => x.DiscountId == discount.DiscountId).Any())
+                if (!allowedDiscounts.Any(x => x.DiscountId == discount.DiscountId))
                     allowedDiscounts.Add(discount);
 
             //discounts applied to vendors
             foreach (var discount in await GetAllowedDiscountsAppliedToVendors(product, customer))
-                if (!allowedDiscounts.Where(x => x.DiscountId == discount.DiscountId).Any())
+                if (!allowedDiscounts.Any(x => x.DiscountId == discount.DiscountId))
                     allowedDiscounts.Add(discount);
 
             return allowedDiscounts;
diff --git a/Grand.Services/Catalog/PriceFormatter.cs b/Grand.Services/Catalog/PriceFormatter.cs
index fa008518a..d5b7c646d 100644
--- a/Grand.Services/Catalog/PriceFormatter.cs
+++ b/Grand.Services/Catalog/PriceFormatter.cs
@@ -81,13 +81,13 @@ protected virtual string GetCurrencyString(decimal amount)
                 }
                 else
                 {
-                    result = String.Format("{0} ({1})", amount.ToString("N"), targetCurrency.CurrencyCode);
+                    result = $"{amount.ToString("N")} ({targetCurrency.CurrencyCode})";
                     return result;
                 }
             }
 
             if (showCurrency && _currencySettings.DisplayCurrencyLabel)
-                result = String.Format("{0} ({1})", result, targetCurrency.CurrencyCode);
+                result = $"{result} ({targetCurrency.CurrencyCode})";
             return result;
         }
 
diff --git a/Grand.Services/Catalog/ProductAttributeFormatter.cs b/Grand.Services/Catalog/ProductAttributeFormatter.cs
index ae43f6f32..dc56d76bc 100644
--- a/Grand.Services/Catalog/ProductAttributeFormatter.cs
+++ b/Grand.Services/Catalog/ProductAttributeFormatter.cs
@@ -207,7 +207,7 @@ public virtual Task<string> FormatAttributes(Product product, IList<CustomAttrib
                             //encode (if required)
                             if (htmlEncode)
                                 attributeName = WebUtility.HtmlEncode(attributeName);
-                            formattedAttribute = string.Format("{0}: {1}", attributeName, FormatText.ConvertText(valueStr));
+                            formattedAttribute = $"{attributeName}: {FormatText.ConvertText(valueStr)}";
                             //we never encode multiline textbox input
                         }
                         else if (attribute.AttributeControlType == AttributeControlType.FileUpload)
@@ -220,17 +220,15 @@ public virtual Task<string> FormatAttributes(Product product, IList<CustomAttrib
                             {
                                 //TODO add a method for getting URL (use routing because it handles all SEO friendly URLs)
                                 string attributeText = "";
-                                var fileName = string.Format("{0}{1}",
-                                    download.Filename ?? download.DownloadGuid.ToString(),
-                                    download.Extension);
+                                var fileName = $"{download.Filename ?? download.DownloadGuid.ToString()}{download.Extension}";
                                 //encode (if required)
                                 if (htmlEncode)
                                     fileName = WebUtility.HtmlEncode(fileName);
                                 if (allowHyperlinks)
                                 {
                                     //hyperlinks are allowed
-                                    var downloadLink = string.Format("{0}download/getfileupload/?downloadId={1}", _webHelper.GetStoreLocation(false), download.DownloadGuid);
-                                    attributeText = string.Format("<a href=\"{0}\" class=\"fileuploadattribute\">{1}</a>", downloadLink, fileName);
+                                    var downloadLink = $"{_webHelper.GetStoreLocation(false)}download/getfileupload/?downloadId={download.DownloadGuid}";
+                                    attributeText = $"<a href=\"{downloadLink}\" class=\"fileuploadattribute\">{fileName}</a>";
                                 }
                                 else
                                 {
@@ -241,13 +239,13 @@ public virtual Task<string> FormatAttributes(Product product, IList<CustomAttrib
                                 //encode (if required)
                                 if (htmlEncode)
                                     attributeName = WebUtility.HtmlEncode(attributeName);
-                                formattedAttribute = string.Format("{0}: {1}", attributeName, attributeText);
+                                formattedAttribute = $"{attributeName}: {attributeText}";
                             }
                         }
                         else
                         {
                             //other attributes (textbox, datepicker)
-                            formattedAttribute = string.Format("{0}: {1}", productAttribute.GetLocalized(a => a.Name, langId), valueStr);
+                            formattedAttribute = $"{productAttribute.GetLocalized(a => a.Name, langId)}: {valueStr}";
                             //encode (if required)
                             if (htmlEncode)
                                 formattedAttribute = WebUtility.HtmlEncode(formattedAttribute);
@@ -256,13 +254,13 @@ public virtual Task<string> FormatAttributes(Product product, IList<CustomAttrib
                     else
                     {
                         //attributes with values
-                        if (product.ProductAttributeMappings.Where(x => x.Id == attributes[i].Id).FirstOrDefault() != null)
+                        if (product.ProductAttributeMappings.FirstOrDefault(x => x.Id == attributes[i].Id)!= null)
                         {
 
-                            var attributeValue = product.ProductAttributeMappings.Where(x => x.Id == attributes[i].Id).FirstOrDefault().ProductAttributeValues.Where(x => x.Id == valueStr).FirstOrDefault();
+                            var attributeValue = product.ProductAttributeMappings.FirstOrDefault(x => x.Id == attributes[i].Id).ProductAttributeValues.Where(x => x.Id == valueStr).FirstOrDefault();
                             if (attributeValue != null)
                             {
-                                formattedAttribute = string.Format("{0}: {1}", productAttribute.GetLocalized(a => a.Name, langId), attributeValue.GetLocalized(a => a.Name, langId));
+                                formattedAttribute = $"{productAttribute.GetLocalized(a => a.Name, langId)}: {attributeValue.GetLocalized(a => a.Name, langId)}";
 
                                 if (renderPrices)
                                 {
@@ -274,12 +272,12 @@ public virtual Task<string> FormatAttributes(Product product, IList<CustomAttrib
                                     if (priceAdjustmentBase > 0)
                                     {
                                         string priceAdjustmentStr = _priceFormatter.FormatPrice(priceAdjustment, false, false);
-                                        formattedAttribute += string.Format(" [+{0}]", priceAdjustmentStr);
+                                        formattedAttribute += $" [+{priceAdjustmentStr}]";
                                     }
                                     else if (priceAdjustmentBase < decimal.Zero)
                                     {
                                         string priceAdjustmentStr = _priceFormatter.FormatPrice(-priceAdjustment, false, false);
-                                        formattedAttribute += string.Format(" [-{0}]", priceAdjustmentStr);
+                                        formattedAttribute += $" [-{priceAdjustmentStr}]";
                                     }
                                 }
 
@@ -291,14 +289,14 @@ public virtual Task<string> FormatAttributes(Product product, IList<CustomAttrib
                                     if (attributeValue.Quantity > 1)
                                     {
                                         //TODO localize resource
-                                        formattedAttribute += string.Format(" - qty {0}", attributeValue.Quantity);
+                                        formattedAttribute += $" - qty {attributeValue.Quantity}";
                                     }
                                 }
                             }
                             else
                             {
                                 if (showInAdmin)
-                                    formattedAttribute += string.Format("{0}: {1}", productAttribute.GetLocalized(a => a.Name, langId), "");
+                                    formattedAttribute += $"{productAttribute.GetLocalized(a => a.Name, langId)}: {""}";
                             }
 
                             //encode (if required)
diff --git a/Grand.Services/Catalog/ProductAttributeParser.cs b/Grand.Services/Catalog/ProductAttributeParser.cs
index d549e72e4..ea30bd0c8 100644
--- a/Grand.Services/Catalog/ProductAttributeParser.cs
+++ b/Grand.Services/Catalog/ProductAttributeParser.cs
@@ -36,7 +36,7 @@ public virtual IList<ProductAttributeMapping> ParseProductAttributeMappings(Prod
 
             foreach (var customAttribute in customAttributes.GroupBy(x => x.Key))
             {
-                var attribute = product.ProductAttributeMappings.Where(x => x.Id == customAttribute.Key).FirstOrDefault();
+                var attribute = product.ProductAttributeMappings.FirstOrDefault(x => x.Id == customAttribute.Key);
                 if (attribute != null)
                 {
                     attribute.ProductId = product.Id;
@@ -68,9 +68,9 @@ public virtual IList<ProductAttributeValue> ParseProductAttributeValues(Product
                 {
                     if (!string.IsNullOrEmpty(valueStr))
                     {
-                        if (attribute.ProductAttributeValues.Where(x => x.Id == valueStr).Count() > 0)
+                        if (attribute.ProductAttributeValues.Any(x => x.Id == valueStr))
                         {
-                            var value = attribute.ProductAttributeValues.Where(x => x.Id == valueStr).FirstOrDefault();
+                            var value = attribute.ProductAttributeValues.FirstOrDefault(x => x.Id == valueStr);
                             if (value != null)
                             {
                                 value.ProductId = product.Id;
diff --git a/Grand.Services/Catalog/ProductAttributeService.cs b/Grand.Services/Catalog/ProductAttributeService.cs
index bd37043e2..bd117f9df 100644
--- a/Grand.Services/Catalog/ProductAttributeService.cs
+++ b/Grand.Services/Catalog/ProductAttributeService.cs
@@ -255,10 +255,10 @@ public virtual async Task DeleteProductAttributeValue(ProductAttributeValue prod
             var p = await _productRepository.GetByIdAsync(productAttributeValue.ProductId);
             if (p != null)
             {
-                var pavs = p.ProductAttributeMappings.Where(x => x.Id == productAttributeValue.ProductAttributeMappingId).FirstOrDefault();
+                var pavs = p.ProductAttributeMappings.FirstOrDefault(x => x.Id == productAttributeValue.ProductAttributeMappingId);
                 if (pavs != null)
                 {
-                    var pav = pavs.ProductAttributeValues.Where(x => x.Id == productAttributeValue.Id).FirstOrDefault();
+                    var pav = pavs.ProductAttributeValues.FirstOrDefault(x => x.Id == productAttributeValue.Id);
                     if (pav != null)
                     {
                         pavs.ProductAttributeValues.Remove(pav);
@@ -317,10 +317,10 @@ public virtual async Task UpdateProductAttributeValue(ProductAttributeValue prod
             var p = await _productRepository.GetByIdAsync(productAttributeValue.ProductId);
             if (p != null)
             {
-                var pavs = p.ProductAttributeMappings.Where(x => x.Id == productAttributeValue.ProductAttributeMappingId).FirstOrDefault();
+                var pavs = p.ProductAttributeMappings.FirstOrDefault(x => x.Id == productAttributeValue.ProductAttributeMappingId);
                 if (pavs != null)
                 {
-                    var pav = pavs.ProductAttributeValues.Where(x => x.Id == productAttributeValue.Id).FirstOrDefault();
+                    var pav = pavs.ProductAttributeValues.FirstOrDefault(x => x.Id == productAttributeValue.Id);
                     if (pav != null)
                     {
                         pav.AttributeValueTypeId = productAttributeValue.AttributeValueTypeId;
diff --git a/Grand.Services/Catalog/SpecificationAttributeService.cs b/Grand.Services/Catalog/SpecificationAttributeService.cs
index 8e8840a8d..b6cb48006 100644
--- a/Grand.Services/Catalog/SpecificationAttributeService.cs
+++ b/Grand.Services/Catalog/SpecificationAttributeService.cs
@@ -194,7 +194,7 @@ public virtual async Task DeleteSpecificationAttributeOption(SpecificationAttrib
             await _productRepository.Collection.UpdateManyAsync(new BsonDocument(), updatefilter);
 
             var specificationAttribute = await GetSpecificationAttributeByOptionId(specificationAttributeOption.Id);
-            var sao = specificationAttribute.SpecificationAttributeOptions.Where(x => x.Id == specificationAttributeOption.Id).FirstOrDefault();
+            var sao = specificationAttribute.SpecificationAttributeOptions.FirstOrDefault(x => x.Id == specificationAttributeOption.Id);
             if (sao == null)
                 throw new ArgumentException("No specification attribute option found with the specified id");
 
diff --git a/Grand.Services/Commands/Handlers/Customers/CustomerActionEventConditionCommandHandler.cs b/Grand.Services/Commands/Handlers/Customers/CustomerActionEventConditionCommandHandler.cs
index 4bc83761a..8a15e3c61 100644
--- a/Grand.Services/Commands/Handlers/Customers/CustomerActionEventConditionCommandHandler.cs
+++ b/Grand.Services/Commands/Handlers/Customers/CustomerActionEventConditionCommandHandler.cs
@@ -298,9 +298,9 @@ protected bool ConditionProductAttribute(CustomerAction.ActionCondition conditio
                     var attributeValuesStr = productAttributeParser.ParseValues(customAttributes, attr.Id);
                     foreach (var attrV in attributeValuesStr)
                     {
-                        var attrsv = attr.ProductAttributeValues.Where(x => x.Id == attrV).FirstOrDefault();
+                        var attrsv = attr.ProductAttributeValues.FirstOrDefault(x => x.Id == attrV);
                         if (attrsv != null)
-                            if (condition.ProductAttribute.Where(x => x.ProductAttributeId == attr.ProductAttributeId && x.Name == attrsv.Name).Count() > 0)
+                            if (condition.ProductAttribute.Any(x => x.ProductAttributeId == attr.ProductAttributeId && x.Name == attrsv.Name))
                             {
                                 cond = true;
                             }
@@ -313,7 +313,7 @@ protected bool ConditionProductAttribute(CustomerAction.ActionCondition conditio
                 foreach (var itemPA in condition.ProductAttribute)
                 {
                     var attributes = productAttributeParser.ParseProductAttributeMappings(product, customAttributes);
-                    if (attributes.Where(x => x.ProductAttributeId == itemPA.ProductAttributeId).Count() > 0)
+                    if (attributes.Any(x => x.ProductAttributeId == itemPA.ProductAttributeId))
                     {
                         cond = false;
                         foreach (var attr in attributes.Where(x => x.ProductAttributeId == itemPA.ProductAttributeId))
@@ -321,7 +321,7 @@ protected bool ConditionProductAttribute(CustomerAction.ActionCondition conditio
                             var attributeValuesStr = productAttributeParser.ParseValues(customAttributes, attr.Id);
                             foreach (var attrV in attributeValuesStr)
                             {
-                                var attrsv = attr.ProductAttributeValues.Where(x => x.Id == attrV).FirstOrDefault();
+                                var attrsv = attr.ProductAttributeValues.FirstOrDefault(x => x.Id == attrV);
                                 if (attrsv != null)
                                 {
                                     if (attrsv.Name == itemPA.Name)
@@ -356,7 +356,7 @@ protected bool ConditionSpecificationAttribute(CustomerAction.ActionCondition co
                 cond = true;
                 foreach (var spec in condition.ProductSpecifications)
                 {
-                    if (productspecificationattribute.Where(x => x.SpecificationAttributeId == spec.ProductSpecyficationId && x.SpecificationAttributeOptionId == spec.ProductSpecyficationValueId).Count() == 0)
+                    if (!productspecificationattribute.Any(x => x.SpecificationAttributeId == spec.ProductSpecyficationId && x.SpecificationAttributeOptionId == spec.ProductSpecyficationValueId))
                         cond = false;
                 }
             }
@@ -364,7 +364,7 @@ protected bool ConditionSpecificationAttribute(CustomerAction.ActionCondition co
             {
                 foreach (var spec in productspecificationattribute)
                 {
-                    if (condition.ProductSpecifications.Where(x => x.ProductSpecyficationId == spec.SpecificationAttributeId && x.ProductSpecyficationValueId == spec.SpecificationAttributeOptionId).Count() > 0)
+                    if (condition.ProductSpecifications.Any(x => x.ProductSpecyficationId == spec.SpecificationAttributeId && x.ProductSpecyficationValueId == spec.SpecificationAttributeOptionId))
                         cond = true;
                 }
             }
@@ -420,7 +420,7 @@ protected async Task<bool> ConditionCustomerRegister(CustomerAction.ActionCondit
                     cond = true;
                     foreach (var item in condition.CustomerRegistration)
                     {
-                        if (_genericAttributes.Where(x => x.Key == item.RegisterField && x.Value.ToLower() == item.RegisterValue.ToLower()).Count() == 0)
+                        if (!_genericAttributes.Any(x => x.Key == item.RegisterField && x.Value.ToLower() == item.RegisterValue.ToLower()))
                             cond = false;
                     }
                 }
@@ -428,7 +428,7 @@ protected async Task<bool> ConditionCustomerRegister(CustomerAction.ActionCondit
                 {
                     foreach (var item in condition.CustomerRegistration)
                     {
-                        if (_genericAttributes.Where(x => x.Key == item.RegisterField && x.Value.ToLower() == item.RegisterValue.ToLower()).Count() > 0)
+                        if (_genericAttributes.Any(x => x.Key == item.RegisterField && x.Value.ToLower() == item.RegisterValue.ToLower()))
                             cond = true;
                     }
                 }
@@ -453,7 +453,7 @@ protected async Task<bool> ConditionCustomerAttribute(CustomerAction.ActionCondi
                             var _fields = item.RegisterField.Split(':');
                             if (_fields.Count() > 1)
                             {
-                                if (selectedValues.Where(x => x.CustomerAttributeId == _fields.FirstOrDefault() && x.Id == _fields.LastOrDefault()).Count() == 0)
+                                if (!selectedValues.Any(x => x.CustomerAttributeId == _fields.FirstOrDefault() && x.Id == _fields.LastOrDefault()))
                                     cond = false;
                             }
                             else
@@ -471,7 +471,7 @@ protected async Task<bool> ConditionCustomerAttribute(CustomerAction.ActionCondi
                             var _fields = item.RegisterField.Split(':');
                             if (_fields.Count() > 1)
                             {
-                                if (selectedValues.Where(x => x.CustomerAttributeId == _fields.FirstOrDefault() && x.Id == _fields.LastOrDefault()).Count() > 0)
+                                if (selectedValues.Any(x => x.CustomerAttributeId == _fields.FirstOrDefault() && x.Id == _fields.LastOrDefault()))
                                     cond = true;
                             }
                         }
diff --git a/Grand.Services/Commands/Handlers/Customers/CustomerActionEventReactionCommandHandler.cs b/Grand.Services/Commands/Handlers/Customers/CustomerActionEventReactionCommandHandler.cs
index 8656670e9..e9c3a6946 100644
--- a/Grand.Services/Commands/Handlers/Customers/CustomerActionEventReactionCommandHandler.cs
+++ b/Grand.Services/Commands/Handlers/Customers/CustomerActionEventReactionCommandHandler.cs
@@ -143,68 +143,66 @@ protected string PrepareDataInteractiveForm(InteractiveForm form)
             {
                 if (item.AttributeControlType == FormControlType.TextBox)
                 {
-                    string _style = string.Format("{0}", item.Style);
-                    string _class = string.Format("{0} {1}", "form-control", item.Class);
+                    string _style = $"{item.Style}";
+                    string _class = $"{"form-control"} {item.Class}";
                     string _value = item.DefaultValue;
-                    var textbox = string.Format("<input type='text'  name='{0}' class='{1}' style='{2}' value='{3}' {4}>", item.SystemName, _class, _style, _value, item.IsRequired ? "required" : "");
-                    body = body.Replace(string.Format("%{0}%", item.SystemName), textbox);
+                    var textbox = $"<input type='text'  name='{item.SystemName}' class='{_class}' style='{_style}' value='{_value}' {(item.IsRequired ? "required" : "")}>";
+                    body = body.Replace($"%{item.SystemName}%", textbox);
                 }
                 if (item.AttributeControlType == FormControlType.MultilineTextbox)
                 {
-                    string _style = string.Format("{0}", item.Style);
-                    string _class = string.Format("{0} {1}", "form-control", item.Class);
+                    string _style = $"{item.Style}";
+                    string _class = $"{"form-control"} {item.Class}";
                     string _value = item.DefaultValue;
-                    var textarea = string.Format("<textarea name='{0}' class='{1}' style='{2}' {3}> {4} </textarea>", item.SystemName, _class, _style, item.IsRequired ? "required" : "", _value);
-                    body = body.Replace(string.Format("%{0}%", item.SystemName), textarea);
+                    var textarea = $"<textarea name='{item.SystemName}' class='{_class}' style='{_style}' {(item.IsRequired ? "required" : "")}> {_value} </textarea>";
+                    body = body.Replace($"%{item.SystemName}%", textarea);
                 }
                 if (item.AttributeControlType == FormControlType.Checkboxes)
                 {
                     var checkbox = "<div class='custom-controls-stacked'>";
                     foreach (var itemcheck in item.FormAttributeValues.OrderBy(x => x.DisplayOrder))
                     {
-                        string _style = string.Format("{0}", item.Style);
-                        string _class = string.Format("{0} {1}", "custom-control-input", item.Class);
+                        string _style = $"{item.Style}";
+                        string _class = $"{"custom-control-input"} {item.Class}";
 
                         checkbox += "<div class='custom-control custom-checkbox'>";
-                        checkbox += string.Format("<input type='checkbox' class='{0}' style='{1}' {2} id='{3}' name='{4}' value='{5}'>", _class, _style,
-                            itemcheck.IsPreSelected ? "checked" : "", itemcheck.Id, item.SystemName, itemcheck.GetLocalized(x => x.Name, _workContext.WorkingLanguage.Id));
-                        checkbox += string.Format("<label class='custom-control-label' for='{0}'>{1}</label>", itemcheck.Id, itemcheck.GetLocalized(x => x.Name, _workContext.WorkingLanguage.Id));
+                        checkbox += $"<input type='checkbox' class='{_class}' style='{_style}' {(itemcheck.IsPreSelected ? "checked" : "")} id='{itemcheck.Id}' name='{item.SystemName}' value='{itemcheck.GetLocalized(x => x.Name, _workContext.WorkingLanguage.Id)}'>";
+                        checkbox += $"<label class='custom-control-label' for='{itemcheck.Id}'>{itemcheck.GetLocalized(x => x.Name, _workContext.WorkingLanguage.Id)}</label>";
                         checkbox += "</div>";
                     }
                     checkbox += "</div>";
-                    body = body.Replace(string.Format("%{0}%", item.SystemName), checkbox);
+                    body = body.Replace($"%{item.SystemName}%", checkbox);
                 }
 
                 if (item.AttributeControlType == FormControlType.DropdownList)
                 {
                     var dropdown = string.Empty;
-                    string _style = string.Format("{0}", item.Style);
-                    string _class = string.Format("{0} {1}", "form-control custom-select", item.Class);
+                    string _style = $"{item.Style}";
+                    string _class = $"{"form-control custom-select"} {item.Class}";
 
-                    dropdown = string.Format("<select name='{0}' class='{1}' style='{2}'>", item.SystemName, _class, _style);
+                    dropdown = $"<select name='{item.SystemName}' class='{_class}' style='{_style}'>";
                     foreach (var itemdropdown in item.FormAttributeValues.OrderBy(x => x.DisplayOrder))
                     {
-                        dropdown += string.Format("<option value='{0}' {1}>{2}</option>", itemdropdown.GetLocalized(x => x.Name, _workContext.WorkingLanguage.Id), itemdropdown.IsPreSelected ? "selected" : "", itemdropdown.GetLocalized(x => x.Name, _workContext.WorkingLanguage.Id));
+                        dropdown += $"<option value='{itemdropdown.GetLocalized(x => x.Name, _workContext.WorkingLanguage.Id)}' {(itemdropdown.IsPreSelected ? "selected" : "")}>{itemdropdown.GetLocalized(x => x.Name, _workContext.WorkingLanguage.Id)}</option>";
                     }
                     dropdown += "</select>";
-                    body = body.Replace(string.Format("%{0}%", item.SystemName), dropdown);
+                    body = body.Replace($"%{item.SystemName}%", dropdown);
                 }
                 if (item.AttributeControlType == FormControlType.RadioList)
                 {
                     var radio = "<div class='custom-controls-stacked'>";
                     foreach (var itemradio in item.FormAttributeValues.OrderBy(x => x.DisplayOrder))
                     {
-                        string _style = string.Format("{0}", item.Style);
-                        string _class = string.Format("{0} {1}", "custom-control-input", item.Class);
+                        string _style = $"{item.Style}";
+                        string _class = $"{"custom-control-input"} {item.Class}";
 
                         radio += "<div class='custom-control custom-radio'>";
-                        radio += string.Format("<input type='radio' class='{0}' style='{1}' {2} id='{3}' name='{4}' value='{5}'>", _class, _style,
-                            itemradio.IsPreSelected ? "checked" : "", itemradio.Id, item.SystemName, itemradio.GetLocalized(x => x.Name, _workContext.WorkingLanguage.Id));
-                        radio += string.Format("<label class='custom-control-label' for='{0}'>{1}</label>", itemradio.Id, itemradio.GetLocalized(x => x.Name, _workContext.WorkingLanguage.Id));
+                        radio += $"<input type='radio' class='{_class}' style='{_style}' {(itemradio.IsPreSelected ? "checked" : "")} id='{itemradio.Id}' name='{item.SystemName}' value='{itemradio.GetLocalized(x => x.Name, _workContext.WorkingLanguage.Id)}'>";
+                        radio += $"<label class='custom-control-label' for='{itemradio.Id}'>{itemradio.GetLocalized(x => x.Name, _workContext.WorkingLanguage.Id)}</label>";
                         radio += "</div>";
                     }
                     radio += "</div>";
-                    body = body.Replace(string.Format("%{0}%", item.SystemName), radio);
+                    body = body.Replace($"%{item.SystemName}%", radio);
                 }
             }
             body = body.Replace("%sendbutton%", "<input type='submit' id='send-interactive-form' class='btn btn-success interactive-form-button' value='Send' />");
@@ -215,7 +213,7 @@ protected string PrepareDataInteractiveForm(InteractiveForm form)
 
         protected async Task AssignToCustomerRole(CustomerAction action, Customer customer)
         {
-            if (customer.CustomerRoles.Where(x => x.Id == action.CustomerRoleId).Count() == 0)
+            if (!customer.CustomerRoles.Any(x => x.Id == action.CustomerRoleId))
             {
                 var customerService = _serviceProvider.GetRequiredService<ICustomerService>();
                 var customerRole = await customerService.GetCustomerRoleById(action.CustomerRoleId);
@@ -229,7 +227,7 @@ protected async Task AssignToCustomerRole(CustomerAction action, Customer custom
 
         protected async Task AssignToCustomerTag(CustomerAction action, Customer customer)
         {
-            if (customer.CustomerTags.Where(x => x == action.CustomerTagId).Count() == 0)
+            if (!customer.CustomerTags.Any(x => x == action.CustomerTagId))
             {
                 var customerTagService = _serviceProvider.GetRequiredService<ICustomerTagService>();
                 await customerTagService.InsertTagToCustomer(action.CustomerTagId, customer.Id);
diff --git a/Grand.Services/Commands/Handlers/Messages/GetReturnRequestTokensCommandHandler.cs b/Grand.Services/Commands/Handlers/Messages/GetReturnRequestTokensCommandHandler.cs
index 1f9e324a9..3c21b280e 100644
--- a/Grand.Services/Commands/Handlers/Messages/GetReturnRequestTokensCommandHandler.cs
+++ b/Grand.Services/Commands/Handlers/Messages/GetReturnRequestTokensCommandHandler.cs
@@ -63,19 +63,19 @@ async Task<string> ProductListToHtmlTable()
                 sb.AppendLine("<table border=\"0\" style=\"width:100%;\">");
 
                 sb.AppendLine(string.Format("<tr style=\"text-align:center;\">"));
-                sb.AppendLine(string.Format("<th>{0}</th>", _localizationService.GetResource("Messages.Order.Product(s).Name")));
-                sb.AppendLine(string.Format("<th>{0}</th>", _localizationService.GetResource("Messages.Order.Product(s).Price")));
-                sb.AppendLine(string.Format("<th>{0}</th>", _localizationService.GetResource("Messages.Order.Product(s).Quantity")));
-                sb.AppendLine(string.Format("<th>{0}</th>", _localizationService.GetResource("Messages.Order.Product(s).ReturnReason")));
-                sb.AppendLine(string.Format("<th>{0}</th>", _localizationService.GetResource("Messages.Order.Product(s).ReturnAction")));
+                sb.AppendLine($"<th>{_localizationService.GetResource("Messages.Order.Product(s).Name")}</th>");
+                sb.AppendLine($"<th>{_localizationService.GetResource("Messages.Order.Product(s).Price")}</th>");
+                sb.AppendLine($"<th>{_localizationService.GetResource("Messages.Order.Product(s).Quantity")}</th>");
+                sb.AppendLine($"<th>{_localizationService.GetResource("Messages.Order.Product(s).ReturnReason")}</th>");
+                sb.AppendLine($"<th>{_localizationService.GetResource("Messages.Order.Product(s).ReturnAction")}</th>");
                 sb.AppendLine("</tr>");
 
                 var currency = await _currencyService.GetCurrencyByCode(request.Order.CustomerCurrencyCode);
                 foreach (var rrItem in request.ReturnRequest.ReturnRequestItems)
                 {
-                    var orderItem = request.Order.OrderItems.Where(x => x.Id == rrItem.OrderItemId).First();
+                    var orderItem = request.Order.OrderItems.First(x => x.Id == rrItem.OrderItemId);
 
-                    sb.AppendLine(string.Format("<tr style=\"background-color: {0};text-align: center;\">", _templatesSettings.Color2));
+                    sb.AppendLine($"<tr style=\"background-color: {_templatesSettings.Color2};text-align: center;\">");
                     string productName = (await _productService.GetProductById(orderItem.ProductId))?.GetLocalized(x => x.Name, request.Order.CustomerLanguageId);
 
                     sb.AppendLine("<td style=\"padding: 0.6em 0.4em;text-align: left;\">" + WebUtility.HtmlEncode(productName));
@@ -93,10 +93,10 @@ async Task<string> ProductListToHtmlTable()
                         //excluding tax
                         unitPriceStr = _priceFormatter.FormatPrice(orderItem.UnitPriceExclTax, true, currency, request.Language, false);
                     }
-                    sb.AppendLine(string.Format("<td style=\"padding: 0.6em 0.4em;text-align: right;\">{0}</td>", unitPriceStr));
-                    sb.AppendLine(string.Format("<td style=\"padding: 0.6em 0.4em;text-align: center;\">{0}</td>", orderItem.Quantity));
-                    sb.AppendLine(string.Format("<td style=\"padding: 0.6em 0.4em;text-align: center;\">{0}</td>", rrItem.ReasonForReturn));
-                    sb.AppendLine(string.Format("<td style=\"padding: 0.6em 0.4em;text-align: center;\">{0}</td>", rrItem.RequestedAction));
+                    sb.AppendLine($"<td style=\"padding: 0.6em 0.4em;text-align: right;\">{unitPriceStr}</td>");
+                    sb.AppendLine($"<td style=\"padding: 0.6em 0.4em;text-align: center;\">{orderItem.Quantity}</td>");
+                    sb.AppendLine($"<td style=\"padding: 0.6em 0.4em;text-align: center;\">{rrItem.ReasonForReturn}</td>");
+                    sb.AppendLine($"<td style=\"padding: 0.6em 0.4em;text-align: center;\">{rrItem.RequestedAction}</td>");
                 }
 
                 sb.AppendLine("</table>");
diff --git a/Grand.Services/Commands/Handlers/Messages/GetShoppingCartTokensCommandHandler.cs b/Grand.Services/Commands/Handlers/Messages/GetShoppingCartTokensCommandHandler.cs
index f54cea95e..1a32dc14f 100644
--- a/Grand.Services/Commands/Handlers/Messages/GetShoppingCartTokensCommandHandler.cs
+++ b/Grand.Services/Commands/Handlers/Messages/GetShoppingCartTokensCommandHandler.cs
@@ -52,18 +52,18 @@ async Task<string> ShoppingCartWishListProductListToHtmlTable(bool cart, bool wi
                 sb.AppendLine("<table border=\"0\" style=\"width:100%;\">");
 
                 #region Products
-                sb.AppendLine(string.Format("<tr style=\"background-color:{0};text-align:center;\">", _templatesSettings.Color1));
+                sb.AppendLine($"<tr style=\"background-color:{_templatesSettings.Color1};text-align:center;\">");
                 if (withPicture)
-                    sb.AppendLine(string.Format("<th>{0}</th>", cart ? _localizationService.GetResource("Messages.ShoppingCart.Product(s).Picture", request.Language.Id) : _localizationService.GetResource("Messages.Wishlist.Product(s).Picture", request.Language.Id)));
-                sb.AppendLine(string.Format("<th>{0}</th>", cart ? _localizationService.GetResource("Messages.ShoppingCart.Product(s).Name", request.Language.Id) : _localizationService.GetResource("Messages.Wishlist.Product(s).Name", request.Language.Id)));
-                sb.AppendLine(string.Format("<th>{0}</th>", cart ? _localizationService.GetResource("Messages.ShoppingCart.Product(s).Quantity", request.Language.Id) : _localizationService.GetResource("Messages.Wishlist.Product(s).Quantity", request.Language.Id)));
+                    sb.AppendLine($"<th>{(cart ? _localizationService.GetResource("Messages.ShoppingCart.Product(s).Picture", request.Language.Id) : _localizationService.GetResource("Messages.Wishlist.Product(s).Picture", request.Language.Id))}</th>");
+                sb.AppendLine($"<th>{(cart ? _localizationService.GetResource("Messages.ShoppingCart.Product(s).Name", request.Language.Id) : _localizationService.GetResource("Messages.Wishlist.Product(s).Name", request.Language.Id))}</th>");
+                sb.AppendLine($"<th>{(cart ? _localizationService.GetResource("Messages.ShoppingCart.Product(s).Quantity", request.Language.Id) : _localizationService.GetResource("Messages.Wishlist.Product(s).Quantity", request.Language.Id))}</th>");
                 sb.AppendLine("</tr>");
 
                 foreach (var item in cart ? request.Customer.ShoppingCartItems.Where(x => x.ShoppingCartType == ShoppingCartType.ShoppingCart) :
                     request.Customer.ShoppingCartItems.Where(x => x.ShoppingCartType == ShoppingCartType.Wishlist))
                 {
                     var product = await _productService.GetProductById(item.ProductId);
-                    sb.AppendLine(string.Format("<tr style=\"background-color: {0};text-align: center;\">", _templatesSettings.Color2));
+                    sb.AppendLine($"<tr style=\"background-color: {_templatesSettings.Color2};text-align: center;\">");
                     //product name
                     string productName = product.GetLocalized(x => x.Name, request.Language.Id);
                     if (withPicture)
@@ -73,7 +73,7 @@ async Task<string> ShoppingCartWishListProductListToHtmlTable(bool cart, bool wi
                         {
                             pictureUrl = await _pictureService.GetPictureUrl(product.ProductPictures.OrderBy(x => x.DisplayOrder).FirstOrDefault().PictureId, _templatesSettings.PictureSize, storeLocation: request.Store.SslEnabled ? request.Store.SecureUrl : request.Store.Url);
                         }
-                        sb.Append(string.Format("<td><img src=\"{0}\" alt=\"\"/></td>", pictureUrl));
+                        sb.Append($"<td><img src=\"{pictureUrl}\" alt=\"\"/></td>");
                     }
                     sb.AppendLine("<td style=\"padding: 0.6em 0.4em;text-align: left;\">" + WebUtility.HtmlEncode(productName));
                     //attributes
@@ -85,7 +85,7 @@ async Task<string> ShoppingCartWishListProductListToHtmlTable(bool cart, bool wi
                     }
                     sb.AppendLine("</td>");
 
-                    sb.AppendLine(string.Format("<td style=\"padding: 0.6em 0.4em;text-align: center;\">{0}</td>", item.Quantity));
+                    sb.AppendLine($"<td style=\"padding: 0.6em 0.4em;text-align: center;\">{item.Quantity}</td>");
 
                     sb.AppendLine("</tr>");
                 }
diff --git a/Grand.Services/Commands/Handlers/Orders/CancelRecurringPaymentCommandHandler.cs b/Grand.Services/Commands/Handlers/Orders/CancelRecurringPaymentCommandHandler.cs
index d44cebf88..d59916cfe 100644
--- a/Grand.Services/Commands/Handlers/Orders/CancelRecurringPaymentCommandHandler.cs
+++ b/Grand.Services/Commands/Handlers/Orders/CancelRecurringPaymentCommandHandler.cs
@@ -78,7 +78,7 @@ await _workflowMessageService
             {
                 if (result == null)
                     result = new CancelRecurringPaymentResult();
-                result.AddError(string.Format("Error: {0}. Full exception: {1}", exc.Message, exc));
+                result.AddError($"Error: {exc.Message}. Full exception: {exc}");
             }
 
 
@@ -86,7 +86,7 @@ await _workflowMessageService
             string error = "";
             for (int i = 0; i < result.Errors.Count; i++)
             {
-                error += string.Format("Error {0}: {1}", i, result.Errors[i]);
+                error += $"Error {i}: {result.Errors[i]}";
                 if (i != result.Errors.Count - 1)
                     error += ". ";
             }
@@ -94,7 +94,7 @@ await _workflowMessageService
             {
                 //add a note
                 await _orderService.InsertOrderNote(new OrderNote {
-                    Note = string.Format("Unable to cancel recurring payment. {0}", error),
+                    Note = $"Unable to cancel recurring payment. {error}",
                     DisplayToCustomer = false,
                     CreatedOnUtc = DateTime.UtcNow,
                     OrderId = initialOrder.Id,
@@ -102,7 +102,7 @@ await _workflowMessageService
                 });
 
                 //log it
-                var logError = string.Format("Error cancelling recurring payment. Order #{0}. Error: {1}", initialOrder.OrderNumber, error);
+                var logError = $"Error cancelling recurring payment. Order #{initialOrder.OrderNumber}. Error: {error}";
                 await _logger.InsertLog(LogLevel.Error, logError, logError);
             }
             return result.Errors;
diff --git a/Grand.Services/Commands/Handlers/Orders/OrderStatusCommandHandler.cs b/Grand.Services/Commands/Handlers/Orders/OrderStatusCommandHandler.cs
index 1abcbd096..db9f2c005 100644
--- a/Grand.Services/Commands/Handlers/Orders/OrderStatusCommandHandler.cs
+++ b/Grand.Services/Commands/Handlers/Orders/OrderStatusCommandHandler.cs
@@ -56,7 +56,7 @@ public async Task<bool> Handle(SetOrderStatusCommand request, CancellationToken
 
             //order notes, notifications
             await _orderService.InsertOrderNote(new OrderNote {
-                Note = string.Format("Order status has been changed to {0}", request.Os.ToString()),
+                Note = $"Order status has been changed to {request.Os.ToString()}",
                 DisplayToCustomer = false,
                 OrderId = request.Order.Id,
                 CreatedOnUtc = DateTime.UtcNow
diff --git a/Grand.Services/Commands/Handlers/Shipping/ShipCommandHandler.cs b/Grand.Services/Commands/Handlers/Shipping/ShipCommandHandler.cs
index e8f076581..740766163 100644
--- a/Grand.Services/Commands/Handlers/Shipping/ShipCommandHandler.cs
+++ b/Grand.Services/Commands/Handlers/Shipping/ShipCommandHandler.cs
@@ -58,7 +58,7 @@ public async Task<bool> Handle(ShipCommand request, CancellationToken cancellati
             //process products with "Multiple warehouse" support enabled
             foreach (var item in request.Shipment.ShipmentItems)
             {
-                var orderItem = order.OrderItems.Where(x => x.Id == item.OrderItemId).FirstOrDefault();
+                var orderItem = order.OrderItems.FirstOrDefault(x => x.Id == item.OrderItemId);
                 var product = await _productService.GetProductByIdIncludeArch(orderItem.ProductId);
                 await _inventoryManageService.BookReservedInventory(product, item.Attributes, item.WarehouseId, -item.Quantity);
             }
diff --git a/Grand.Services/Common/AddressAttributeParser.cs b/Grand.Services/Common/AddressAttributeParser.cs
index feb32cf1c..199b0bd59 100644
--- a/Grand.Services/Common/AddressAttributeParser.cs
+++ b/Grand.Services/Common/AddressAttributeParser.cs
@@ -181,7 +181,7 @@ public virtual async Task<IList<string>> GetAttributeWarnings(IList<CustomAttrib
                             //encode (if required)
                             if (htmlEncode)
                                 attributeName = WebUtility.HtmlEncode(attributeName);
-                            formattedAttribute = string.Format("{0}: {1}", attributeName, FormatText.ConvertText(valueStr));
+                            formattedAttribute = $"{attributeName}: {FormatText.ConvertText(valueStr)}";
                             //we never encode multiline textbox input
                         }
                         else if (attribute.AttributeControlType == AttributeControlType.FileUpload)
@@ -192,7 +192,7 @@ public virtual async Task<IList<string>> GetAttributeWarnings(IList<CustomAttrib
                         else
                         {
                             //other attributes (textbox, datepicker)
-                            formattedAttribute = string.Format("{0}: {1}", attribute.GetLocalized(a => a.Name, language.Id), valueStr);
+                            formattedAttribute = $"{attribute.GetLocalized(a => a.Name, language.Id)}: {valueStr}";
                             //encode (if required)
                             if (htmlEncode)
                                 formattedAttribute = WebUtility.HtmlEncode(formattedAttribute);
@@ -204,7 +204,7 @@ public virtual async Task<IList<string>> GetAttributeWarnings(IList<CustomAttrib
                         var attributeValue = attribute.AddressAttributeValues.FirstOrDefault(x => x.Id == attributeValueId);
                         if (attributeValue != null)
                         {
-                            formattedAttribute = string.Format("{0}: {1}", attribute.GetLocalized(a => a.Name, language.Id), attributeValue.GetLocalized(a => a.Name, language.Id));
+                            formattedAttribute = $"{attribute.GetLocalized(a => a.Name, language.Id)}: {attributeValue.GetLocalized(a => a.Name, language.Id)}";
                         }
                         //encode (if required)
                         if (htmlEncode)
diff --git a/Grand.Services/Common/WkPdfService.cs b/Grand.Services/Common/WkPdfService.cs
index 722e1bc29..9eaa94902 100644
--- a/Grand.Services/Common/WkPdfService.cs
+++ b/Grand.Services/Common/WkPdfService.cs
@@ -61,7 +61,7 @@ public async Task<string> PrintOrderToPdf(Order order, string languageId, string
             if (order == null)
                 throw new ArgumentNullException("order");
 
-            var fileName = string.Format("order_{0}_{1}.pdf", order.OrderGuid, CommonHelper.GenerateRandomDigitCode(4));
+            var fileName = $"order_{order.OrderGuid}_{CommonHelper.GenerateRandomDigitCode(4)}.pdf";
             var filePath = Path.Combine(CommonHelper.WebMapPath("content/files/exportimport"), fileName);
             FileStream fileStream = null;
             try
@@ -90,7 +90,7 @@ public async Task PrintPackagingSlipsToPdf(Stream stream, IList<Shipment> shipme
 
             var lang = await _languageService.GetLanguageById(languageId);
             if (lang == null)
-                throw new ArgumentException(string.Format("Cannot load language. ID={0}", languageId));
+                throw new ArgumentException($"Cannot load language. ID={languageId}");
 
             _generatePdf.SetConvertOptions(new ConvertOptions() {
                 PageSize = Wkhtmltopdf.NetCore.Options.Size.A4,
@@ -129,7 +129,7 @@ public async Task<string> SaveOrderToBinary(Order order, string languageId, stri
             if (order == null)
                 throw new ArgumentNullException("order");
 
-            string fileName = string.Format("order_{0}_{1}", order.OrderGuid, CommonHelper.GenerateRandomDigitCode(4));
+            string fileName = $"order_{order.OrderGuid}_{CommonHelper.GenerateRandomDigitCode(4)}";
             string downloadId = string.Empty;
             using (MemoryStream ms = new MemoryStream())
             {
diff --git a/Grand.Services/Configuration/SettingExtensions.cs b/Grand.Services/Configuration/SettingExtensions.cs
index aebdfd5eb..e2675c92d 100644
--- a/Grand.Services/Configuration/SettingExtensions.cs
+++ b/Grand.Services/Configuration/SettingExtensions.cs
@@ -22,17 +22,13 @@ public static class SettingExtensions
             var member = keySelector.Body as MemberExpression;
             if (member == null)
             {
-                throw new ArgumentException(string.Format(
-                    "Expression '{0}' refers to a method, not a property.",
-                    keySelector));
+                throw new ArgumentException($"Expression '{keySelector}' refers to a method, not a property.");
             }
 
             var propInfo = member.Member as PropertyInfo;
             if (propInfo == null)
             {
-                throw new ArgumentException(string.Format(
-                       "Expression '{0}' refers to a field, not a property.",
-                       keySelector));
+                throw new ArgumentException($"Expression '{keySelector}' refers to a field, not a property.");
             }
 
             var key = typeof(T).Name + "." + propInfo.Name;
diff --git a/Grand.Services/Configuration/SettingService.cs b/Grand.Services/Configuration/SettingService.cs
index 7482bca34..2472db0c9 100644
--- a/Grand.Services/Configuration/SettingService.cs
+++ b/Grand.Services/Configuration/SettingService.cs
@@ -405,17 +405,13 @@ public virtual async Task SaveSetting<T>(T settings, string storeId = "") where
             var member = keySelector.Body as MemberExpression;
             if (member == null)
             {
-                throw new ArgumentException(string.Format(
-                    "Expression '{0}' refers to a method, not a property.",
-                    keySelector));
+                throw new ArgumentException($"Expression '{keySelector}' refers to a method, not a property.");
             }
 
             var propInfo = member.Member as PropertyInfo;
             if (propInfo == null)
             {
-                throw new ArgumentException(string.Format(
-                       "Expression '{0}' refers to a field, not a property.",
-                       keySelector));
+                throw new ArgumentException($"Expression '{keySelector}' refers to a field, not a property.");
             }
 
             string key = settings.GetSettingKey(keySelector);
diff --git a/Grand.Services/Customers/CustomerActionEventService.cs b/Grand.Services/Customers/CustomerActionEventService.cs
index 90a7f6a65..1a4e0a05c 100644
--- a/Grand.Services/Customers/CustomerActionEventService.cs
+++ b/Grand.Services/Customers/CustomerActionEventService.cs
@@ -60,7 +60,7 @@ protected bool UsedAction(string actionId, string customerId)
             var query = from u in _customerActionHistoryRepository.Table
                         where u.CustomerId == customerId && u.CustomerActionId == actionId
                         select u.Id;
-            if (query.Count() > 0)
+            if (query.Any())
                 return true;
 
             return false;
@@ -73,7 +73,7 @@ protected bool UsedAction(string actionId, string customerId)
         public virtual async Task AddToCart(ShoppingCartItem cart, Product product, Customer customer)
         {
             var actiontypes = await GetAllCustomerActionType();
-            var actionType = actiontypes.Where(x => x.SystemKeyword == CustomerActionTypeEnum.AddToCart.ToString()).FirstOrDefault();
+            var actionType = actiontypes.FirstOrDefault(x => x.SystemKeyword == CustomerActionTypeEnum.AddToCart.ToString());
             if (actionType?.Enabled == true)
             {
                 var datetimeUtcNow = DateTime.UtcNow;
@@ -109,7 +109,7 @@ public virtual async Task AddToCart(ShoppingCartItem cart, Product product, Cust
         public virtual async Task AddOrder(Order order, CustomerActionTypeEnum customerActionType)
         {
             var actiontypes = await GetAllCustomerActionType();
-            var actionType = actiontypes.Where(x => x.SystemKeyword == customerActionType.ToString()).FirstOrDefault();
+            var actionType = actiontypes.FirstOrDefault(x => x.SystemKeyword == customerActionType.ToString());
             if (actionType?.Enabled == true)
             {
                 var datetimeUtcNow = DateTime.UtcNow;
@@ -191,7 +191,7 @@ public virtual async Task Viewed(Customer customer, string currentUrl, string pr
             if (!customer.IsSystemAccount)
             {
                 var actiontypes = await GetAllCustomerActionType();
-                var actionType = actiontypes.Where(x => x.SystemKeyword == CustomerActionTypeEnum.Viewed.ToString()).FirstOrDefault();
+                var actionType = actiontypes.FirstOrDefault(x => x.SystemKeyword == CustomerActionTypeEnum.Viewed.ToString());
                 if (actionType?.Enabled == true)
                 {
                     var datetimeUtcNow = DateTime.UtcNow;
@@ -229,7 +229,7 @@ public virtual async Task Viewed(Customer customer, string currentUrl, string pr
         public virtual async Task Registration(Customer customer)
         {
             var actiontypes = await GetAllCustomerActionType();
-            var actionType = actiontypes.Where(x => x.SystemKeyword == CustomerActionTypeEnum.Registration.ToString()).FirstOrDefault();
+            var actionType = actiontypes.FirstOrDefault(x => x.SystemKeyword == CustomerActionTypeEnum.Registration.ToString());
             if (actionType?.Enabled == true)
             {
                 var datetimeUtcNow = DateTime.UtcNow;
diff --git a/Grand.Services/Customers/CustomerAttributeParser.cs b/Grand.Services/Customers/CustomerAttributeParser.cs
index 984501833..d874fa980 100644
--- a/Grand.Services/Customers/CustomerAttributeParser.cs
+++ b/Grand.Services/Customers/CustomerAttributeParser.cs
@@ -182,7 +182,7 @@ public virtual async Task<IList<string>> GetAttributeWarnings(IList<CustomAttrib
                             //encode (if required)
                             if (htmlEncode)
                                 attributeName = WebUtility.HtmlEncode(attributeName);
-                            formattedAttribute = string.Format("{0}: {1}", attributeName, FormatText.ConvertText(valueStr));
+                            formattedAttribute = $"{attributeName}: {FormatText.ConvertText(valueStr)}";
                             //we never encode multiline textbox input
                         }
                         else if (attribute.AttributeControlType == AttributeControlType.FileUpload)
@@ -193,7 +193,7 @@ public virtual async Task<IList<string>> GetAttributeWarnings(IList<CustomAttrib
                         else
                         {
                             //other attributes (textbox, datepicker)
-                            formattedAttribute = string.Format("{0}: {1}", attribute.GetLocalized(a => a.Name, language.Id), valueStr);
+                            formattedAttribute = $"{attribute.GetLocalized(a => a.Name, language.Id)}: {valueStr}";
                             //encode (if required)
                             if (htmlEncode)
                                 formattedAttribute = WebUtility.HtmlEncode(formattedAttribute);
@@ -206,7 +206,7 @@ public virtual async Task<IList<string>> GetAttributeWarnings(IList<CustomAttrib
                         var attributeValue = attribute.CustomerAttributeValues.FirstOrDefault(x => x.Id == attributeValueId);
                         if (attributeValue != null)
                         {
-                            formattedAttribute = string.Format("{0}: {1}", attribute.GetLocalized(a => a.Name, language.Id), attributeValue.GetLocalized(a => a.Name, language.Id));
+                            formattedAttribute = $"{attribute.GetLocalized(a => a.Name, language.Id)}: {attributeValue.GetLocalized(a => a.Name, language.Id)}";
                         }
                         //encode (if required)
                         if (htmlEncode)
diff --git a/Grand.Services/Customers/CustomerExtensions.cs b/Grand.Services/Customers/CustomerExtensions.cs
index 7f09c3e3b..c78165b0c 100644
--- a/Grand.Services/Customers/CustomerExtensions.cs
+++ b/Grand.Services/Customers/CustomerExtensions.cs
@@ -25,7 +25,7 @@ public static string GetFullName(this Customer customer)
 
             string fullName = "";
             if (!String.IsNullOrWhiteSpace(firstName) && !String.IsNullOrWhiteSpace(lastName))
-                fullName = string.Format("{0} {1}", firstName, lastName);
+                fullName = $"{firstName} {lastName}";
             else
             {
                 if (!String.IsNullOrWhiteSpace(firstName))
diff --git a/Grand.Services/Customers/CustomerReminderService.cs b/Grand.Services/Customers/CustomerReminderService.cs
index 23c6215fd..52a07194e 100644
--- a/Grand.Services/Customers/CustomerReminderService.cs
+++ b/Grand.Services/Customers/CustomerReminderService.cs
@@ -132,7 +132,7 @@ protected async Task<bool> SendEmail(Customer customer, CustomerReminder custome
 
             await _queuedEmailService.InsertQueuedEmail(email);
             //activity log
-            await _customerActivityService.InsertActivity(string.Format("CustomerReminder.{0}", customerReminder.ReminderRule.ToString()), customer.Id, _localizationService.GetResource(string.Format("ActivityLog.{0}", customerReminder.ReminderRule.ToString())), customer, customerReminder.Name);
+            await _customerActivityService.InsertActivity($"CustomerReminder.{customerReminder.ReminderRule.ToString()}", customer.Id, _localizationService.GetResource($"ActivityLog.{customerReminder.ReminderRule.ToString()}"), customer, customerReminder.Name);
 
             return true;
         }
@@ -201,7 +201,7 @@ protected async Task<bool> SendEmail(Customer customer, Order order, CustomerRem
 
             await _queuedEmailService.InsertQueuedEmail(email);
             //activity log
-            await _customerActivityService.InsertActivity(string.Format("CustomerReminder.{0}", customerReminder.ReminderRule.ToString()), customer.Id, string.Format("ActivityLog.{0}", customerReminder.ReminderRule.ToString()), customer, customerReminder.Name);
+            await _customerActivityService.InsertActivity($"CustomerReminder.{customerReminder.ReminderRule.ToString()}", customer.Id, $"ActivityLog.{customerReminder.ReminderRule.ToString()}", customer, customerReminder.Name);
 
             return true;
         }
@@ -303,7 +303,7 @@ protected async Task<bool> ConditionCategory(CustomerReminder.ReminderCondition
                         var pr = await _productService.GetProductById(product);
                         if (pr != null)
                         {
-                            if (pr.ProductCategories.Where(x => x.CategoryId == item).Count() == 0)
+                            if (!pr.ProductCategories.Any(x => x.CategoryId == item))
                                 return false;
                         }
                         else
@@ -323,7 +323,7 @@ protected async Task<bool> ConditionCategory(CustomerReminder.ReminderCondition
                         var pr = await _productService.GetProductById(product);
                         if (pr != null)
                         {
-                            if (pr.ProductCategories.Where(x => x.CategoryId == item).Count() > 0)
+                            if (pr.ProductCategories.Any(x => x.CategoryId == item))
                                 return true;
                         }
                     }
@@ -345,7 +345,7 @@ protected async Task<bool> ConditionManufacturer(CustomerReminder.ReminderCondit
                         var pr = await _productService.GetProductById(product);
                         if (pr != null)
                         {
-                            if (pr.ProductManufacturers.Where(x => x.ManufacturerId == item).Count() == 0)
+                            if (!pr.ProductManufacturers.Any(x => x.ManufacturerId == item))
                                 return false;
                         }
                         else
@@ -365,7 +365,7 @@ protected async Task<bool> ConditionManufacturer(CustomerReminder.ReminderCondit
                         var pr = await _productService.GetProductById(product);
                         if (pr != null)
                         {
-                            if (pr.ProductManufacturers.Where(x => x.ManufacturerId == item).Count() > 0)
+                            if (pr.ProductManufacturers.Any(x => x.ManufacturerId == item))
                                 return true;
                         }
                     }
@@ -432,7 +432,7 @@ protected bool ConditionCustomerRegister(CustomerReminder.ReminderCondition cond
                     cond = true;
                     foreach (var item in condition.CustomerRegistration)
                     {
-                        if (customer.GenericAttributes.Where(x => x.Key == item.RegisterField && x.Value == item.RegisterValue).Count() == 0)
+                        if (!customer.GenericAttributes.Any(x => x.Key == item.RegisterField && x.Value == item.RegisterValue))
                             cond = false;
                     }
                 }
@@ -440,7 +440,7 @@ protected bool ConditionCustomerRegister(CustomerReminder.ReminderCondition cond
                 {
                     foreach (var item in condition.CustomerRegistration)
                     {
-                        if (customer.GenericAttributes.Where(x => x.Key == item.RegisterField && x.Value == item.RegisterValue).Count() > 0)
+                        if (customer.GenericAttributes.Any(x => x.Key == item.RegisterField && x.Value == item.RegisterValue))
                             cond = true;
                     }
                 }
@@ -463,7 +463,7 @@ protected async Task<bool> ConditionCustomerAttribute(CustomerReminder.ReminderC
                             var _fields = item.RegisterField.Split(':');
                             if (_fields.Count() > 1)
                             {
-                                if (selectedValues.Where(x => x.CustomerAttributeId == _fields.FirstOrDefault() && x.Id == _fields.LastOrDefault()).Count() == 0)
+                                if (!selectedValues.Any(x => x.CustomerAttributeId == _fields.FirstOrDefault() && x.Id == _fields.LastOrDefault()))
                                     cond = false;
                             }
                             else
@@ -481,7 +481,7 @@ protected async Task<bool> ConditionCustomerAttribute(CustomerReminder.ReminderC
                             var _fields = item.RegisterField.Split(':');
                             if (_fields.Count() > 1)
                             {
-                                if (selectedValues.Where(x => x.CustomerAttributeId == _fields.FirstOrDefault() && x.Id == _fields.LastOrDefault()).Count() > 0)
+                                if (selectedValues.Any(x => x.CustomerAttributeId == _fields.FirstOrDefault() && x.Id == _fields.LastOrDefault()))
                                     cond = true;
                             }
                         }
diff --git a/Grand.Services/Customers/CustomerService.cs b/Grand.Services/Customers/CustomerService.cs
index d8fb12d81..a347d835f 100644
--- a/Grand.Services/Customers/CustomerService.cs
+++ b/Grand.Services/Customers/CustomerService.cs
@@ -166,7 +166,7 @@ public partial class CustomerService : ICustomerService
 
                 query = sct.HasValue ?
                     query.Where(c => c.ShoppingCartItems.Any(x => x.ShoppingCartTypeId == sctId.Value)) :
-                    query.Where(c => c.ShoppingCartItems.Count() > 0);
+                    query.Where(c => c.ShoppingCartItems.Any());
             }
 
             if (orderBySelector == null)
@@ -258,7 +258,7 @@ public virtual async Task DeleteCustomer(Customer customer, bool hard = false)
                 throw new ArgumentNullException("customer");
 
             if (customer.IsSystemAccount)
-                throw new GrandException(string.Format("System customer account ({0}) could not be deleted", customer.SystemName));
+                throw new GrandException($"System customer account ({customer.SystemName}) could not be deleted");
 
             customer.Deleted = true;
             customer.Email = $"DELETED@{DateTime.UtcNow.Ticks}.COM";
diff --git a/Grand.Services/Directory/CurrencyService.cs b/Grand.Services/Directory/CurrencyService.cs
index 8aec9b243..031654892 100644
--- a/Grand.Services/Directory/CurrencyService.cs
+++ b/Grand.Services/Directory/CurrencyService.cs
@@ -270,7 +270,7 @@ public virtual async Task<decimal> ConvertToPrimaryExchangeRateCurrency(decimal
             decimal result = amount;
             decimal exchangeRate = sourceCurrencyCode.Rate;
             if (exchangeRate == decimal.Zero)
-                throw new GrandException(string.Format("Exchange rate not found for currency [{0}]", sourceCurrencyCode.Name));
+                throw new GrandException($"Exchange rate not found for currency [{sourceCurrencyCode.Name}]");
             result = result / exchangeRate;
             return result;
         }
@@ -294,7 +294,7 @@ public virtual async Task<decimal> ConvertFromPrimaryExchangeRateCurrency(decima
 
             decimal exchangeRate = targetCurrencyCode.Rate;
             if (exchangeRate == decimal.Zero)
-                throw new GrandException(string.Format("Exchange rate not found for currency [{0}]", targetCurrencyCode.Name));
+                throw new GrandException($"Exchange rate not found for currency [{targetCurrencyCode.Name}]");
 
             result = result * exchangeRate;
 
diff --git a/Grand.Services/Directory/GeoLookupService.cs b/Grand.Services/Directory/GeoLookupService.cs
index 2d4208eee..3f23add41 100644
--- a/Grand.Services/Directory/GeoLookupService.cs
+++ b/Grand.Services/Directory/GeoLookupService.cs
@@ -82,7 +82,7 @@ protected virtual CountryResponse GetInformation(string ipAddress)
         public virtual string LookupCountryIsoCode(string ipAddress)
         {
             var response = GetInformation(ipAddress);
-            if (response != null && response.Country != null)
+            if (response?.Country != null)
                 return response.Country.IsoCode;
 
             return "";
@@ -96,7 +96,7 @@ public virtual string LookupCountryIsoCode(string ipAddress)
         public virtual string LookupCountryName(string ipAddress)
         {
             var response = GetInformation(ipAddress);
-            if (response != null && response.Country != null)
+            if (response?.Country != null)
                 return response.Country.Name;
 
             return "";
diff --git a/Grand.Services/Directory/MeasureService.cs b/Grand.Services/Directory/MeasureService.cs
index a8182314a..32ee2f6d4 100644
--- a/Grand.Services/Directory/MeasureService.cs
+++ b/Grand.Services/Directory/MeasureService.cs
@@ -206,7 +206,7 @@ public virtual async Task UpdateMeasureDimension(MeasureDimension measure)
             {
                 decimal exchangeRatio = sourceMeasureDimension.Ratio;
                 if (exchangeRatio == decimal.Zero)
-                    throw new GrandException(string.Format("Exchange ratio not set for dimension [{0}]", sourceMeasureDimension.Name));
+                    throw new GrandException($"Exchange ratio not set for dimension [{sourceMeasureDimension.Name}]");
                 result = result / exchangeRatio;
             }
             return result;
@@ -230,7 +230,7 @@ public virtual async Task UpdateMeasureDimension(MeasureDimension measure)
             {
                 decimal exchangeRatio = targetMeasureDimension.Ratio;
                 if (exchangeRatio == decimal.Zero)
-                    throw new GrandException(string.Format("Exchange ratio not set for dimension [{0}]", targetMeasureDimension.Name));
+                    throw new GrandException($"Exchange ratio not set for dimension [{targetMeasureDimension.Name}]");
                 result = result * exchangeRatio;
             }
             return result;
@@ -380,7 +380,7 @@ public virtual async Task<decimal> ConvertToPrimaryMeasureWeight(decimal value,
             {
                 decimal exchangeRatio = sourceMeasureWeight.Ratio;
                 if (exchangeRatio == decimal.Zero)
-                    throw new GrandException(string.Format("Exchange ratio not set for weight [{0}]", sourceMeasureWeight.Name));
+                    throw new GrandException($"Exchange ratio not set for weight [{sourceMeasureWeight.Name}]");
                 result = result / exchangeRatio;
             }
             return result;
@@ -404,7 +404,7 @@ public virtual async Task<decimal> ConvertToPrimaryMeasureWeight(decimal value,
             {
                 decimal exchangeRatio = targetMeasureWeight.Ratio;
                 if (exchangeRatio == decimal.Zero)
-                    throw new GrandException(string.Format("Exchange ratio not set for weight [{0}]", targetMeasureWeight.Name));
+                    throw new GrandException($"Exchange ratio not set for weight [{targetMeasureWeight.Name}]");
                 result = result * exchangeRatio;
             }
             return result;
diff --git a/Grand.Services/ExportImport/ExportManager.cs b/Grand.Services/ExportImport/ExportManager.cs
index e5a1b0455..300040ce6 100644
--- a/Grand.Services/ExportImport/ExportManager.cs
+++ b/Grand.Services/ExportImport/ExportManager.cs
@@ -1012,7 +1012,7 @@ public virtual async Task<string> ExportCustomersToXml(IList<Customer> customers
                 {
                     var newsletter = await _newsLetterSubscriptionService.GetNewsLetterSubscriptionByEmailAndStoreId(customer.Email, store.Id);
                     bool subscribedToNewsletters = newsletter != null && newsletter.Active;
-                    xmlWriter.WriteElementString(string.Format("Newsletter-in-store-{0}", store.Id), null, subscribedToNewsletters.ToString());
+                    xmlWriter.WriteElementString($"Newsletter-in-store-{store.Id}", null, subscribedToNewsletters.ToString());
                 }
 
                 xmlWriter.WriteEndElement();
diff --git a/Grand.Services/Installation/CodeFirstInstallationService.cs b/Grand.Services/Installation/CodeFirstInstallationService.cs
index a71f8f482..aae1faa7c 100644
--- a/Grand.Services/Installation/CodeFirstInstallationService.cs
+++ b/Grand.Services/Installation/CodeFirstInstallationService.cs
@@ -453,7 +453,7 @@ protected virtual async Task InstallCurrencies()
                     CurrencyCode = "EUR",
                     Rate = 0.95M,
                     DisplayLocale = "",
-                    CustomFormatting = string.Format("{0}0.00", "\u20ac"),
+                    CustomFormatting = $"{"\u20ac"}0.00",
                     NumberDecimal = 2,
                     Published = true,
                     DisplayOrder = 2,
@@ -7577,9 +7577,9 @@ protected virtual async Task InstallProducts(string defaultUserEmail)
 
             var productAttribute = _productAttributeRepository.Table.Where(x => x.Name == "Color").FirstOrDefault();
 
-            productAdidasNitrocharge.ProductAttributeMappings.Where(x => x.ProductAttributeId == productAttribute.Id).First().ProductAttributeValues.Where(x => x.Name == "Blue").First().PictureId = productAdidasNitrocharge.ProductPictures.ElementAt(1).PictureId;
-            productAdidasNitrocharge.ProductAttributeMappings.Where(x => x.ProductAttributeId == productAttribute.Id).First().ProductAttributeValues.Where(x => x.Name == "Yellow").First().PictureId = productAdidasNitrocharge.ProductPictures.ElementAt(2).PictureId;
-            productAdidasNitrocharge.ProductAttributeMappings.Where(x => x.ProductAttributeId == productAttribute.Id).First().ProductAttributeValues.Where(x => x.Name == "Orange").First().PictureId = productAdidasNitrocharge.ProductPictures.ElementAt(3).PictureId;
+            productAdidasNitrocharge.ProductAttributeMappings.First(x => x.ProductAttributeId == productAttribute.Id).ProductAttributeValues.Where(x => x.Name == "Blue").First().PictureId = productAdidasNitrocharge.ProductPictures.ElementAt(1).PictureId;
+            productAdidasNitrocharge.ProductAttributeMappings.First(x => x.ProductAttributeId == productAttribute.Id).ProductAttributeValues.Where(x => x.Name == "Yellow").First().PictureId = productAdidasNitrocharge.ProductPictures.ElementAt(2).PictureId;
+            productAdidasNitrocharge.ProductAttributeMappings.First(x => x.ProductAttributeId == productAttribute.Id).ProductAttributeValues.Where(x => x.Name == "Orange").First().PictureId = productAdidasNitrocharge.ProductPictures.ElementAt(3).PictureId;
             await _productRepository.UpdateAsync(productAdidasNitrocharge);
 
 
@@ -9579,7 +9579,7 @@ protected virtual async Task InstallProducts(string defaultUserEmail)
                     IsApproved = true,
                     StoreId = defaultStore.Id,
                     Title = "Some sample review",
-                    ReviewText = string.Format("This sample review is for the {0}. I've been waiting for this product to be available. It is priced just right.", product.Name),
+                    ReviewText = $"This sample review is for the {product.Name}. I've been waiting for this product to be available. It is priced just right.",
                     Rating = rating,
                     HelpfulYesTotal = 0,
                     HelpfulNoTotal = 0,
diff --git a/Grand.Services/Installation/UpgradeService.cs b/Grand.Services/Installation/UpgradeService.cs
index e59327196..1d5d07dab 100644
--- a/Grand.Services/Installation/UpgradeService.cs
+++ b/Grand.Services/Installation/UpgradeService.cs
@@ -1344,7 +1344,7 @@ static List<CustomAttribute> ParseProductCustomAttributes(string attributesXml)
                     update = true;
                 }
 
-                if (c.Addresses.Where(x => !string.IsNullOrEmpty(x.CustomAttributes)).Any())
+                if (c.Addresses.Any(x => !string.IsNullOrEmpty(x.CustomAttributes)))
                 {
                     foreach (var address in c.Addresses.Where(x => !string.IsNullOrEmpty(x.CustomAttributes)))
                     {
@@ -1352,7 +1352,7 @@ static List<CustomAttribute> ParseProductCustomAttributes(string attributesXml)
                         update = true;
                     }
                 }
-                if (c.GenericAttributes.Where(x => x.Key == "CustomCustomerAttributes").Any())
+                if (c.GenericAttributes.Any(x => x.Key == "CustomCustomerAttributes"))
                 {
                     var value = c.GenericAttributes.FirstOrDefault(x => x.Key == "CustomCustomerAttributes").Value;
                     if (!string.IsNullOrEmpty(value))
@@ -1361,7 +1361,7 @@ static List<CustomAttribute> ParseProductCustomAttributes(string attributesXml)
                         update = true;
                     }
                 }
-                if (c.ShoppingCartItems.Where(x => !string.IsNullOrEmpty(x.AttributesXml)).Any())
+                if (c.ShoppingCartItems.Any(x => !string.IsNullOrEmpty(x.AttributesXml)))
                 {
                     foreach (var sc in c.ShoppingCartItems.Where(x => !string.IsNullOrEmpty(x.AttributesXml)))
                     {
@@ -1387,7 +1387,7 @@ static List<CustomAttribute> ParseProductCustomAttributes(string attributesXml)
 
                     await orderAttributesRepository.ReplaceOneAsync(x => x.Id == o.Id, o);
                 }
-                if (o.OrderItems.Where(x => !string.IsNullOrEmpty(x.AttributesXml)).Any())
+                if (o.OrderItems.Any(x => !string.IsNullOrEmpty(x.AttributesXml)))
                 {
                     foreach (var item in o.OrderItems.Where(x => !string.IsNullOrEmpty(x.AttributesXml)))
                     {
@@ -1401,7 +1401,7 @@ static List<CustomAttribute> ParseProductCustomAttributes(string attributesXml)
             var shipmentAttributesRepository = dBContext.Database().GetCollection<Shipment>("Shipment");
             await shipmentAttributesRepository.Find(new BsonDocument()).ForEachAsync(async (o) =>
             {
-                if (o.ShipmentItems.Where(x => !string.IsNullOrEmpty(x.AttributeXML)).Any())
+                if (o.ShipmentItems.Any(x => !string.IsNullOrEmpty(x.AttributeXML)))
                 {
                     foreach (var item in o.ShipmentItems.Where(x => !string.IsNullOrEmpty(x.AttributeXML)))
                     {
diff --git a/Grand.Services/Knowledgebase/KnowledgebaseExtensions.cs b/Grand.Services/Knowledgebase/KnowledgebaseExtensions.cs
index fbd3c2d8d..8abcb8525 100644
--- a/Grand.Services/Knowledgebase/KnowledgebaseExtensions.cs
+++ b/Grand.Services/Knowledgebase/KnowledgebaseExtensions.cs
@@ -35,7 +35,7 @@ public static class KnowledgebaseExtensions
                 var categoryName = breadcrumb[i].GetLocalized(x => x.Name, languageId);
                 result = String.IsNullOrEmpty(result)
                     ? categoryName
-                    : string.Format("{0} {1} {2}", result, separator, categoryName);
+                    : $"{result} {separator} {categoryName}";
             }
 
             return result;
diff --git a/Grand.Services/Localization/LocalizationExtensions.cs b/Grand.Services/Localization/LocalizationExtensions.cs
index 969583944..68fa2c3fe 100644
--- a/Grand.Services/Localization/LocalizationExtensions.cs
+++ b/Grand.Services/Localization/LocalizationExtensions.cs
@@ -56,17 +56,13 @@ public static class LocalizationExtensions
             var member = keySelector.Body as MemberExpression;
             if (member == null)
             {
-                throw new ArgumentException(string.Format(
-                    "Expression '{0}' refers to a method, not a property.",
-                    keySelector));
+                throw new ArgumentException($"Expression '{keySelector}' refers to a method, not a property.");
             }
 
             var propInfo = member.Member as PropertyInfo;
             if (propInfo == null)
             {
-                throw new ArgumentException(string.Format(
-                       "Expression '{0}' refers to a field, not a property.",
-                       keySelector));
+                throw new ArgumentException($"Expression '{keySelector}' refers to a field, not a property.");
             }
 
             TPropType result = default(TPropType);
@@ -158,9 +154,7 @@ public static string GetLocalizedEnum<T>(this T enumValue, ILocalizationService
             if (!typeof(T).GetTypeInfo().IsEnum) throw new ArgumentException("T must be an enumerated type");
 
             //localized value
-            string resourceName = string.Format("Enums.{0}.{1}",
-                typeof(T),
-                enumValue.ToString());
+            string resourceName = $"Enums.{typeof(T)}.{enumValue.ToString()}";
             string result = localizationService.GetResource(resourceName, languageId, false, "", true);
 
             //set default value if required
@@ -205,7 +199,7 @@ public static string GetLocalizedEnum<T>(this T enumValue, ILocalizationService
                 throw new ArgumentNullException("localizationService");
 
             //localized value
-            string resourceName = string.Format("Permission.{0}", permissionRecord.SystemName);
+            string resourceName = $"Permission.{permissionRecord.SystemName}";
             string result = localizationService.GetResource(resourceName, languageId, false, "", true);
 
             //set default value if required
@@ -230,7 +224,7 @@ public static string GetLocalizedEnum<T>(this T enumValue, ILocalizationService
             if (languageService == null)
                 throw new ArgumentNullException("languageService");
 
-            string resourceName = string.Format("Permission.{0}", permissionRecord.SystemName);
+            string resourceName = $"Permission.{permissionRecord.SystemName}";
             string resourceValue = permissionRecord.Name;
 
             foreach (var lang in await languageService.GetAllLanguages(true))
@@ -269,7 +263,7 @@ public static string GetLocalizedEnum<T>(this T enumValue, ILocalizationService
             if (languageService == null)
                 throw new ArgumentNullException("languageService");
 
-            string resourceName = string.Format("Permission.{0}", permissionRecord.SystemName);
+            string resourceName = $"Permission.{permissionRecord.SystemName}";
             foreach (var lang in await languageService.GetAllLanguages(true))
             {
                 var lsr = await localizationService.GetLocaleStringResourceByName(resourceName, lang.Id, false);
@@ -378,8 +372,7 @@ public static string GetLocalizedEnum<T>(this T enumValue, ILocalizationService
 
             string systemName = plugin.PluginDescriptor.SystemName;
             //localized value
-            string resourceName = string.Format("Plugins.FriendlyName.{0}",
-                systemName);
+            string resourceName = $"Plugins.FriendlyName.{systemName}";
             string result = localizationService.GetResource(resourceName, languageId, false, "", true);
 
             //set default value if required
@@ -416,7 +409,7 @@ public static string GetLocalizedEnum<T>(this T enumValue, ILocalizationService
             string systemName = plugin.PluginDescriptor.SystemName;
 
             //localized value
-            string resourceName = string.Format("Plugins.FriendlyName.{0}", systemName);
+            string resourceName = $"Plugins.FriendlyName.{systemName}";
             if (string.IsNullOrEmpty(resourceName))
                 resourceName = resourceName.ToLowerInvariant();
 
diff --git a/Grand.Services/Localization/LocalizationService.cs b/Grand.Services/Localization/LocalizationService.cs
index 177d0f328..0ffdf10be 100644
--- a/Grand.Services/Localization/LocalizationService.cs
+++ b/Grand.Services/Localization/LocalizationService.cs
@@ -113,7 +113,7 @@ orderby lsr.ResourceName
             var localeStringResource = query.FirstOrDefaultAsync();
 
             if (localeStringResource == null && logIfNotFound)
-                _logger.Warning(string.Format("Resource string ({0}) not found. Language ID = {1}", resourceName, languageId));
+                _logger.Warning($"Resource string ({resourceName}) not found. Language ID = {languageId}");
             return localeStringResource;
         }
 
@@ -244,7 +244,7 @@ public virtual string GetResource(string resourceKey)
             if (string.IsNullOrEmpty(result))
             {
                 if (logIfNotFound)
-                    _logger.Warning(string.Format("Resource string ({0}) is not found. Language ID = {1}", resourceKey, languageId));
+                    _logger.Warning($"Resource string ({resourceKey}) is not found. Language ID = {languageId}");
 
                 if (!string.IsNullOrEmpty(defaultValue))
                 {
diff --git a/Grand.Services/Media/AmazonPictureService.cs b/Grand.Services/Media/AmazonPictureService.cs
index 339ac9abb..38b924f89 100644
--- a/Grand.Services/Media/AmazonPictureService.cs
+++ b/Grand.Services/Media/AmazonPictureService.cs
@@ -152,11 +152,11 @@ protected override string GetThumbLocalPath(string thumbFileName)
         {
             if (string.IsNullOrEmpty(_distributionDomainName))
             {
-                var url = string.Format("https://{0}.s3.amazonAws.com/{1}", _bucketName, thumbFileName);
+                var url = $"https://{_bucketName}.s3.amazonAws.com/{thumbFileName}";
                 return url;
             }
             else
-                return string.Format("https://{0}/{1}", _distributionDomainName, thumbFileName);
+                return $"https://{_distributionDomainName}/{thumbFileName}";
 
         }
 
@@ -171,11 +171,11 @@ protected override string GetThumbUrl(string thumbFileName, string storeLocation
 
             if (string.IsNullOrEmpty(_distributionDomainName))
             {
-                var url = string.Format("https://{0}.s3.amazonAws.com/{1}", _bucketName, thumbFileName);
+                var url = $"https://{_bucketName}.s3.amazonAws.com/{thumbFileName}";
                 return url;
             }
             else
-                return string.Format("https://{0}/{1}", _distributionDomainName, thumbFileName);
+                return $"https://{_distributionDomainName}/{thumbFileName}";
 
         }
 
diff --git a/Grand.Services/Media/AzurePictureService.cs b/Grand.Services/Media/AzurePictureService.cs
index e4488a3bd..1d74485e4 100644
--- a/Grand.Services/Media/AzurePictureService.cs
+++ b/Grand.Services/Media/AzurePictureService.cs
@@ -70,7 +70,7 @@ public partial class AzurePictureService : PictureService
         /// <param name="picture">Picture</param>
         protected override async Task DeletePictureThumbs(Picture picture)
         {
-            string filter = string.Format("{0}", picture.Id);
+            string filter = $"{picture.Id}";
             var blobs = container.GetBlobs(Azure.Storage.Blobs.Models.BlobTraits.All, Azure.Storage.Blobs.Models.BlobStates.All, filter);
 
             foreach (var blob in blobs)
diff --git a/Grand.Services/Media/PictureService.cs b/Grand.Services/Media/PictureService.cs
index 6a77b6ec1..59a77b00e 100644
--- a/Grand.Services/Media/PictureService.cs
+++ b/Grand.Services/Media/PictureService.cs
@@ -118,7 +118,7 @@ protected virtual string GetFileExtensionFromMimeType(string mimeType)
         protected virtual byte[] LoadPictureFromFile(string pictureId, string mimeType)
         {
             string lastPart = GetFileExtensionFromMimeType(mimeType);
-            string fileName = string.Format("{0}_0.{1}", pictureId, lastPart);
+            string fileName = $"{pictureId}_0.{lastPart}";
             var filePath = GetPictureLocalPath(fileName);
             if (!File.Exists(filePath))
                 return new byte[0];
@@ -132,7 +132,7 @@ protected virtual byte[] LoadPictureFromFile(string pictureId, string mimeType)
         /// <param name="picture">Picture</param>
         protected virtual Task DeletePictureThumbs(Picture picture)
         {
-            string filter = string.Format("{0}*.*", picture.Id);
+            string filter = $"{picture.Id}*.*";
             var thumbDirectoryPath = Path.Combine(_hostingEnvironment.WebRootPath, "content/images/thumbs");
             string[] currentFiles = System.IO.Directory.GetFiles(thumbDirectoryPath, filter, SearchOption.AllDirectories);
             foreach (string currentFileName in currentFiles)
@@ -314,10 +314,7 @@ public virtual string GetPictureSeName(string name)
             else
             {
                 string fileExtension = Path.GetExtension(filePath);
-                string thumbFileName = string.Format("{0}_{1}{2}",
-                    Path.GetFileNameWithoutExtension(filePath),
-                    targetSize,
-                    fileExtension);
+                string thumbFileName = $"{Path.GetFileNameWithoutExtension(filePath)}_{targetSize}{fileExtension}";
 
                 var thumbFilePath = GetThumbLocalPath(thumbFileName);
 
@@ -411,8 +408,8 @@ public virtual string GetPictureSeName(string name)
             if (targetSize == 0)
             {
                 thumbFileName = !string.IsNullOrEmpty(seoFileName) ?
-                    string.Format("{0}_{1}.{2}", picture.Id, seoFileName, lastPart) :
-                    string.Format("{0}.{1}", picture.Id, lastPart);
+                    $"{picture.Id}_{seoFileName}.{lastPart}" :
+                    $"{picture.Id}.{lastPart}";
                 var thumbFilePath = GetThumbLocalPath(thumbFileName);
 
                 if (await GeneratedThumbExists(thumbFilePath, thumbFileName))
@@ -432,8 +429,8 @@ public virtual string GetPictureSeName(string name)
             else
             {
                 thumbFileName = !string.IsNullOrEmpty(seoFileName) ?
-                    string.Format("{0}_{1}_{2}.{3}", picture.Id, seoFileName, targetSize, lastPart) :
-                    string.Format("{0}_{1}.{2}", picture.Id, targetSize, lastPart);
+                    $"{picture.Id}_{seoFileName}_{targetSize}.{lastPart}" :
+                    $"{picture.Id}_{targetSize}.{lastPart}";
                 var thumbFilePath = GetThumbLocalPath(thumbFileName);
 
                 if (await GeneratedThumbExists(thumbFilePath, thumbFileName))
@@ -529,7 +526,7 @@ public virtual void DeletePictureOnFileSystem(Picture picture)
                 throw new ArgumentNullException("picture");
 
             var lastPart = GetFileExtensionFromMimeType(picture.MimeType);
-            var fileName = string.Format("{0}_0.{1}", picture.Id, lastPart);
+            var fileName = $"{picture.Id}_0.{lastPart}";
             var filePath = GetPictureLocalPath(fileName);
             if (File.Exists(filePath))
             {
@@ -698,7 +695,7 @@ public virtual async Task<Picture> UpdatePicture(Picture picture)
         public virtual void SavePictureInFile(string pictureId, byte[] pictureBinary, string mimeType)
         {
             var lastPart = GetFileExtensionFromMimeType(mimeType);
-            var fileName = string.Format("{0}_0.{1}", pictureId, lastPart);
+            var fileName = $"{pictureId}_0.{lastPart}";
             File.WriteAllBytes(GetPictureLocalPath(fileName), pictureBinary);
         }
 
diff --git a/Grand.Services/Messages/ContactAttributeParser.cs b/Grand.Services/Messages/ContactAttributeParser.cs
index 5cfbd5e34..40a514fb7 100644
--- a/Grand.Services/Messages/ContactAttributeParser.cs
+++ b/Grand.Services/Messages/ContactAttributeParser.cs
@@ -80,7 +80,7 @@ public virtual async Task<IList<ContactAttributeValue>> ParseContactAttributeVal
                 {
                     if (!string.IsNullOrEmpty(valueStr))
                     {
-                        var value = attribute.ContactAttributeValues.Where(x => x.Id == valueStr).FirstOrDefault();
+                        var value = attribute.ContactAttributeValues.FirstOrDefault(x => x.Id == valueStr);
                         if (value != null)
                             values.Add(value);
                     }
@@ -209,7 +209,7 @@ public virtual IList<CustomAttribute> RemoveContactAttribute(IList<CustomAttribu
                             //encode (if required)
                             if (htmlEncode)
                                 attributeName = WebUtility.HtmlEncode(attributeName);
-                            formattedAttribute = string.Format("{0}: {1}", attributeName, FormatText.ConvertText(valueStr));
+                            formattedAttribute = $"{attributeName}: {FormatText.ConvertText(valueStr)}";
                             //we never encode multiline textbox input
                         }
                         else if (attribute.AttributeControlType == AttributeControlType.FileUpload)
@@ -222,17 +222,15 @@ public virtual IList<CustomAttribute> RemoveContactAttribute(IList<CustomAttribu
                             {
                                 //TODO add a method for getting URL (use routing because it handles all SEO friendly URLs)
                                 string attributeText = "";
-                                var fileName = string.Format("{0}{1}",
-                                    download.Filename ?? download.DownloadGuid.ToString(),
-                                    download.Extension);
+                                var fileName = $"{download.Filename ?? download.DownloadGuid.ToString()}{download.Extension}";
                                 //encode (if required)
                                 if (htmlEncode)
                                     fileName = WebUtility.HtmlEncode(fileName);
                                 if (allowHyperlinks)
                                 {
                                     //hyperlinks are allowed
-                                    var downloadLink = string.Format("{0}download/getfileupload/?downloadId={1}", _webHelper.GetStoreLocation(), download.DownloadGuid);
-                                    attributeText = string.Format("<a href=\"{0}\" class=\"fileuploadattribute\">{1}</a>", downloadLink, fileName);
+                                    var downloadLink = $"{_webHelper.GetStoreLocation()}download/getfileupload/?downloadId={download.DownloadGuid}";
+                                    attributeText = $"<a href=\"{downloadLink}\" class=\"fileuploadattribute\">{fileName}</a>";
                                 }
                                 else
                                 {
@@ -243,13 +241,13 @@ public virtual IList<CustomAttribute> RemoveContactAttribute(IList<CustomAttribu
                                 //encode (if required)
                                 if (htmlEncode)
                                     attributeName = WebUtility.HtmlEncode(attributeName);
-                                formattedAttribute = string.Format("{0}: {1}", attributeName, attributeText);
+                                formattedAttribute = $"{attributeName}: {attributeText}";
                             }
                         }
                         else
                         {
                             //other attributes (textbox, datepicker)
-                            formattedAttribute = string.Format("{0}: {1}", attribute.GetLocalized(a => a.Name, language.Id), valueStr);
+                            formattedAttribute = $"{attribute.GetLocalized(a => a.Name, language.Id)}: {valueStr}";
                             //encode (if required)
                             if (htmlEncode)
                                 formattedAttribute = WebUtility.HtmlEncode(formattedAttribute);
@@ -257,10 +255,10 @@ public virtual IList<CustomAttribute> RemoveContactAttribute(IList<CustomAttribu
                     }
                     else
                     {
-                        var attributeValue = attribute.ContactAttributeValues.Where(x => x.Id == valueStr).FirstOrDefault();
+                        var attributeValue = attribute.ContactAttributeValues.FirstOrDefault(x => x.Id == valueStr);
                         if (attributeValue != null)
                         {
-                            formattedAttribute = string.Format("{0}: {1}", attribute.GetLocalized(a => a.Name, language.Id), attributeValue.GetLocalized(a => a.Name, language.Id));
+                            formattedAttribute = $"{attribute.GetLocalized(a => a.Name, language.Id)}: {attributeValue.GetLocalized(a => a.Name, language.Id)}";
                         }
                         //encode (if required)
                         if (htmlEncode)
diff --git a/Grand.Services/Messages/DotLiquidDrops/LiquidBackInStockSubscription.cs b/Grand.Services/Messages/DotLiquidDrops/LiquidBackInStockSubscription.cs
index 46b6090ae..c588520ec 100644
--- a/Grand.Services/Messages/DotLiquidDrops/LiquidBackInStockSubscription.cs
+++ b/Grand.Services/Messages/DotLiquidDrops/LiquidBackInStockSubscription.cs
@@ -33,7 +33,7 @@ public LiquidBackInStockSubscription(Product product, BackInStockSubscription ba
         }
 
         public string ProductUrl {
-            get { return string.Format("{0}{1}", _store.SslEnabled ? _store.SecureUrl : _store.Url, _product.GetSeName(_language.Id)); }
+            get { return $"{(_store.SslEnabled ? _store.SecureUrl : _store.Url)}{_product.GetSeName(_language.Id)}"; }
         }
 
         public IDictionary<string, string> AdditionalTokens { get; set; }
diff --git a/Grand.Services/Messages/DotLiquidDrops/LiquidCustomer.cs b/Grand.Services/Messages/DotLiquidDrops/LiquidCustomer.cs
index bd8da4437..aaea3e9b6 100644
--- a/Grand.Services/Messages/DotLiquidDrops/LiquidCustomer.cs
+++ b/Grand.Services/Messages/DotLiquidDrops/LiquidCustomer.cs
@@ -104,17 +104,17 @@ public string VatNumberStatus
 
         public string PasswordRecoveryURL
         {
-            get { return string.Format("{0}passwordrecovery/confirm?token={1}&email={2}", (_store.SslEnabled ? _store.SecureUrl : _store.Url), _customer.GetAttributeFromEntity<string>(SystemCustomerAttributeNames.PasswordRecoveryToken), WebUtility.UrlEncode(_customer.Email)); }
+            get { return $"{(_store.SslEnabled ? _store.SecureUrl : _store.Url)}passwordrecovery/confirm?token={_customer.GetAttributeFromEntity<string>(SystemCustomerAttributeNames.PasswordRecoveryToken)}&email={WebUtility.UrlEncode(_customer.Email)}"; }
         }
 
         public string AccountActivationURL
         {
-            get { return string.Format("{0}customer/activation?token={1}&email={2}", (_store.SslEnabled ? _store.SecureUrl : _store.Url), _customer.GetAttributeFromEntity<string>(SystemCustomerAttributeNames.AccountActivationToken), WebUtility.UrlEncode(_customer.Email)); ; }
+            get { return $"{(_store.SslEnabled ? _store.SecureUrl : _store.Url)}customer/activation?token={_customer.GetAttributeFromEntity<string>(SystemCustomerAttributeNames.AccountActivationToken)}&email={WebUtility.UrlEncode(_customer.Email)}"; ; }
         }
 
         public string WishlistURLForCustomer
         {
-            get { return string.Format("{0}wishlist/{1}", (_store.SslEnabled ? _store.SecureUrl : _store.Url), _customer.CustomerGuid); }
+            get { return $"{(_store.SslEnabled ? _store.SecureUrl : _store.Url)}wishlist/{_customer.CustomerGuid}"; }
         }
 
         public string NewNoteText
@@ -129,7 +129,7 @@ public string NewTitleText
 
         public string CustomerNoteAttachmentUrl
         {
-            get { return string.Format("{0}download/customernotefile/{1}", (_store.SslEnabled ? _store.SecureUrl : _store.Url), _customerNote.Id); }
+            get { return $"{(_store.SslEnabled ? _store.SecureUrl : _store.Url)}download/customernotefile/{_customerNote.Id}"; }
         }
 
         public string Token {
diff --git a/Grand.Services/Messages/DotLiquidDrops/LiquidOrder.cs b/Grand.Services/Messages/DotLiquidDrops/LiquidOrder.cs
index f4db87db4..98372235f 100644
--- a/Grand.Services/Messages/DotLiquidDrops/LiquidOrder.cs
+++ b/Grand.Services/Messages/DotLiquidDrops/LiquidOrder.cs
@@ -48,7 +48,7 @@ public LiquidOrder(Order order, Customer customer, Language language, Currency c
         }
 
         public string CustomerFullName {
-            get { return string.Format("{0} {1}", _order.BillingAddress.FirstName, _order.BillingAddress.LastName); }
+            get { return $"{_order.BillingAddress.FirstName} {_order.BillingAddress.LastName}"; }
         }
 
         public string CustomerEmail {
@@ -195,7 +195,7 @@ public LiquidOrder(Order order, Customer customer, Language language, Currency c
         }
 
         public string OrderURLForCustomer {
-            get { return string.Format("{0}orderdetails/{1}", (_store.SslEnabled ? _store.SecureUrl : _store.Url), _order.Id); }
+            get { return $"{(_store.SslEnabled ? _store.SecureUrl : _store.Url)}orderdetails/{_order.Id}"; }
         }
 
         public string AmountRefunded { get; set; }
@@ -206,7 +206,7 @@ public LiquidOrder(Order order, Customer customer, Language language, Currency c
 
         public string OrderNoteAttachmentUrl {
             get {
-                return string.Format("{0}download/ordernotefile/{1}", (_store.SslEnabled ? _store.SecureUrl : _store.Url), _orderNote.Id);
+                return $"{(_store.SslEnabled ? _store.SecureUrl : _store.Url)}download/ordernotefile/{_orderNote.Id}";
             }
         }
 
diff --git a/Grand.Services/Messages/DotLiquidDrops/LiquidOrderItem.cs b/Grand.Services/Messages/DotLiquidDrops/LiquidOrderItem.cs
index 8e7e85071..ed01862c6 100644
--- a/Grand.Services/Messages/DotLiquidDrops/LiquidOrderItem.cs
+++ b/Grand.Services/Messages/DotLiquidDrops/LiquidOrderItem.cs
@@ -51,7 +51,7 @@ public string DownloadUrl
             get
             {
                 var storeId = _order?.StoreId;
-                string downloadUrl = string.Format("{0}download/getdownload/{1}", (_store.SslEnabled ? _store.SecureUrl : _store.Url), _orderItem.OrderItemGuid);
+                string downloadUrl = $"{(_store.SslEnabled ? _store.SecureUrl : _store.Url)}download/getdownload/{_orderItem.OrderItemGuid}";
                 return downloadUrl;
             }
         }
@@ -60,7 +60,7 @@ public string LicenseUrl
         {
             get
             {
-                string licenseUrl = string.Format("{0}download/getlicense/{1}", (_store.SslEnabled ? _store.SecureUrl : _store.Url), _orderItem.OrderItemGuid);
+                string licenseUrl = $"{(_store.SslEnabled ? _store.SecureUrl : _store.Url)}download/getlicense/{_orderItem.OrderItemGuid}";
                 return licenseUrl;
             }
         }
diff --git a/Grand.Services/Messages/DotLiquidDrops/LiquidProduct.cs b/Grand.Services/Messages/DotLiquidDrops/LiquidProduct.cs
index 6b960fe28..7dcce55ce 100644
--- a/Grand.Services/Messages/DotLiquidDrops/LiquidProduct.cs
+++ b/Grand.Services/Messages/DotLiquidDrops/LiquidProduct.cs
@@ -55,7 +55,7 @@ public decimal Price
 
         public string ProductURLForCustomer
         {
-            get { return string.Format("{0}{1}", (_store.SslEnabled ? _store.SecureUrl : _store.Url), _product.GetSeName(_language.Id)); }
+            get { return $"{(_store.SslEnabled ? _store.SecureUrl : _store.Url)}{_product.GetSeName(_language.Id)}"; }
         }
 
         public IDictionary<string, string> AdditionalTokens { get; set; }
diff --git a/Grand.Services/Messages/DotLiquidDrops/LiquidReturnRequest.cs b/Grand.Services/Messages/DotLiquidDrops/LiquidReturnRequest.cs
index 049bdd1e9..3bccb9952 100644
--- a/Grand.Services/Messages/DotLiquidDrops/LiquidReturnRequest.cs
+++ b/Grand.Services/Messages/DotLiquidDrops/LiquidReturnRequest.cs
@@ -125,7 +125,7 @@ public LiquidReturnRequest(ReturnRequest returnRequest, Store store, Order order
 
         public string ReturnRequestNoteAttachmentUrl {
             get {
-                return string.Format("{0}download/returnrequestnotefile/{1}", (_store.SslEnabled ? _store.SecureUrl : _store.Url), _returnRequestNote.Id);
+                return $"{(_store.SslEnabled ? _store.SecureUrl : _store.Url)}download/returnrequestnotefile/{_returnRequestNote.Id}";
             }
         }
         public IDictionary<string, string> AdditionalTokens { get; set; }
diff --git a/Grand.Services/Messages/DotLiquidDrops/LiquidShipment.cs b/Grand.Services/Messages/DotLiquidDrops/LiquidShipment.cs
index 3011955b9..78723a1eb 100644
--- a/Grand.Services/Messages/DotLiquidDrops/LiquidShipment.cs
+++ b/Grand.Services/Messages/DotLiquidDrops/LiquidShipment.cs
@@ -63,7 +63,7 @@ public string URLForCustomer
         {
             get
             {
-                return string.Format("{0}orderdetails/shipment/{1}", (_store.SslEnabled ? _store.SecureUrl : _store.Url), _shipment.Id);
+                return $"{(_store.SslEnabled ? _store.SecureUrl : _store.Url)}orderdetails/shipment/{_shipment.Id}";
             }
         }
 
diff --git a/Grand.Services/Messages/DotLiquidDrops/LiquidShoppingCart.cs b/Grand.Services/Messages/DotLiquidDrops/LiquidShoppingCart.cs
index ed3a45f42..8283b9e88 100644
--- a/Grand.Services/Messages/DotLiquidDrops/LiquidShoppingCart.cs
+++ b/Grand.Services/Messages/DotLiquidDrops/LiquidShoppingCart.cs
@@ -49,7 +49,7 @@ public string WishlistURLForCustomer
         {
             get
             {
-                var wishlistUrl = string.Format("{0}wishlist/{1}", (_store.SslEnabled ? _store.SecureUrl : _store.Url), _customer.CustomerGuid);
+                var wishlistUrl = $"{(_store.SslEnabled ? _store.SecureUrl : _store.Url)}wishlist/{_customer.CustomerGuid}";
                 return wishlistUrl;
             }
         }
diff --git a/Grand.Services/Messages/Token.cs b/Grand.Services/Messages/Token.cs
index a3d441fc0..fc68174b4 100644
--- a/Grand.Services/Messages/Token.cs
+++ b/Grand.Services/Messages/Token.cs
@@ -33,7 +33,7 @@ public Token(string key, string value, bool neverHtmlEncoded)
 
         public override string ToString()
         {
-            return string.Format("{0}: {1}", Key, Value);
+            return $"{Key}: {Value}";
         }
     }
 }
diff --git a/Grand.Services/Messages/WorkflowMessageService.cs b/Grand.Services/Messages/WorkflowMessageService.cs
index 5d7b630ea..fd45bb790 100644
--- a/Grand.Services/Messages/WorkflowMessageService.cs
+++ b/Grand.Services/Messages/WorkflowMessageService.cs
@@ -411,7 +411,7 @@ public virtual async Task<int> SendOrderPaidStoreOwnerNotification(Order order,
             await _mediator.MessageTokensAdded(messageTemplate, liquidObject);
 
             var toEmail = order.BillingAddress.Email;
-            var toName = string.Format("{0} {1}", order.BillingAddress.FirstName, order.BillingAddress.LastName);
+            var toName = $"{order.BillingAddress.FirstName} {order.BillingAddress.LastName}";
             return await SendNotification(messageTemplate, emailAccount,
                 languageId, liquidObject,
                 toEmail, toName,
@@ -499,7 +499,7 @@ public virtual async Task<int> SendOrderPaidVendorNotification(Order order, Vend
             await _mediator.MessageTokensAdded(messageTemplate, liquidObject);
 
             var toEmail = order.BillingAddress.Email;
-            var toName = string.Format("{0} {1}", order.BillingAddress.FirstName, order.BillingAddress.LastName);
+            var toName = $"{order.BillingAddress.FirstName} {order.BillingAddress.LastName}";
             return await SendNotification(messageTemplate, emailAccount,
                 languageId, liquidObject,
                 toEmail, toName,
@@ -545,7 +545,7 @@ public virtual async Task<int> SendShipmentSentCustomerNotification(Shipment shi
             await _mediator.MessageTokensAdded(messageTemplate, liquidObject);
 
             var toEmail = order.BillingAddress.Email;
-            var toName = string.Format("{0} {1}", order.BillingAddress.FirstName, order.BillingAddress.LastName);
+            var toName = $"{order.BillingAddress.FirstName} {order.BillingAddress.LastName}";
             return await SendNotification(messageTemplate, emailAccount,
                 language.Id, liquidObject,
                 toEmail, toName);
@@ -589,7 +589,7 @@ public virtual async Task<int> SendShipmentDeliveredCustomerNotification(Shipmen
             await _mediator.MessageTokensAdded(messageTemplate, liquidObject);
 
             var toEmail = order.BillingAddress.Email;
-            var toName = string.Format("{0} {1}", order.BillingAddress.FirstName, order.BillingAddress.LastName);
+            var toName = $"{order.BillingAddress.FirstName} {order.BillingAddress.LastName}";
             return await SendNotification(messageTemplate, emailAccount,
                 language.Id, liquidObject,
                 toEmail, toName);
@@ -632,7 +632,7 @@ public virtual async Task<int> SendShipmentDeliveredCustomerNotification(Shipmen
             await _mediator.MessageTokensAdded(messageTemplate, liquidObject);
 
             var toEmail = order.BillingAddress.Email;
-            var toName = string.Format("{0} {1}", order.BillingAddress.FirstName, order.BillingAddress.LastName);
+            var toName = $"{order.BillingAddress.FirstName} {order.BillingAddress.LastName}";
             return await SendNotification(messageTemplate, emailAccount,
                 languageId, liquidObject,
                 toEmail, toName,
@@ -674,7 +674,7 @@ public virtual async Task<int> SendOrderCancelledCustomerNotification(Order orde
             await _mediator.MessageTokensAdded(messageTemplate, liquidObject);
 
             var toEmail = order.BillingAddress.Email;
-            var toName = string.Format("{0} {1}", order.BillingAddress.FirstName, order.BillingAddress.LastName);
+            var toName = $"{order.BillingAddress.FirstName} {order.BillingAddress.LastName}";
             return await SendNotification(messageTemplate, emailAccount,
                 languageId, liquidObject,
                 toEmail, toName);
@@ -834,7 +834,7 @@ public virtual async Task<int> SendOrderRefundedCustomerNotification(Order order
             await _mediator.MessageTokensAdded(messageTemplate, liquidObject);
 
             var toEmail = order.BillingAddress.Email;
-            var toName = string.Format("{0} {1}", order.BillingAddress.FirstName, order.BillingAddress.LastName);
+            var toName = $"{order.BillingAddress.FirstName} {order.BillingAddress.LastName}";
             return await SendNotification(messageTemplate, emailAccount,
                 languageId, liquidObject,
                 toEmail, toName);
@@ -876,7 +876,7 @@ public virtual async Task<int> SendNewOrderNoteAddedCustomerNotification(Order o
             await _mediator.MessageTokensAdded(messageTemplate, liquidObject);
 
             var toEmail = order.BillingAddress.Email;
-            var toName = string.Format("{0} {1}", order.BillingAddress.FirstName, order.BillingAddress.LastName);
+            var toName = $"{order.BillingAddress.FirstName} {order.BillingAddress.LastName}";
             return await SendNotification(messageTemplate, emailAccount,
                 language.Id, liquidObject,
                 toEmail, toName);
@@ -2102,14 +2102,14 @@ public virtual async Task<int> SendCustomerActionEvent_AddToOrder_Notification(C
             if (order.BillingAddress != null)
             {
                 toEmail = order.BillingAddress.Email;
-                toName = string.Format("{0} {1}", order.BillingAddress.FirstName, order.BillingAddress.LastName);
+                toName = $"{order.BillingAddress.FirstName} {order.BillingAddress.LastName}";
             }
             else
             {
                 if (order.ShippingAddress != null)
                 {
                     toEmail = order.ShippingAddress.Email;
-                    toName = string.Format("{0} {1}", order.ShippingAddress.FirstName, order.ShippingAddress.LastName);
+                    toName = $"{order.ShippingAddress.FirstName} {order.ShippingAddress.LastName}";
                 }
             }
 
diff --git a/Grand.Services/Orders/CheckoutAttributeFormatter.cs b/Grand.Services/Orders/CheckoutAttributeFormatter.cs
index d1972b80b..f367d7067 100644
--- a/Grand.Services/Orders/CheckoutAttributeFormatter.cs
+++ b/Grand.Services/Orders/CheckoutAttributeFormatter.cs
@@ -99,7 +99,7 @@ public virtual async Task<string> FormatAttributes(IList<CustomAttribute> custom
                             //encode (if required)
                             if (htmlEncode)
                                 attributeName = WebUtility.HtmlEncode(attributeName);
-                            formattedAttribute = string.Format("{0}: {1}", attributeName, FormatText.ConvertText(valueStr));
+                            formattedAttribute = $"{attributeName}: {FormatText.ConvertText(valueStr)}";
                             //we never encode multiline textbox input
                         }
                         else if (attribute.AttributeControlType == AttributeControlType.FileUpload)
@@ -112,17 +112,15 @@ public virtual async Task<string> FormatAttributes(IList<CustomAttribute> custom
                             {
                                 //TODO add a method for getting URL (use routing because it handles all SEO friendly URLs)
                                 string attributeText = "";
-                                var fileName = string.Format("{0}{1}",
-                                    download.Filename ?? download.DownloadGuid.ToString(),
-                                    download.Extension);
+                                var fileName = $"{download.Filename ?? download.DownloadGuid.ToString()}{download.Extension}";
                                 //encode (if required)
                                 if (htmlEncode)
                                     fileName = WebUtility.HtmlEncode(fileName);
                                 if (allowHyperlinks)
                                 {
                                     //hyperlinks are allowed
-                                    var downloadLink = string.Format("{0}download/getfileupload/?downloadId={1}", _webHelper.GetStoreLocation(false), download.DownloadGuid);
-                                    attributeText = string.Format("<a href=\"{0}\" class=\"fileuploadattribute\">{1}</a>", downloadLink, fileName);
+                                    var downloadLink = $"{_webHelper.GetStoreLocation(false)}download/getfileupload/?downloadId={download.DownloadGuid}";
+                                    attributeText = $"<a href=\"{downloadLink}\" class=\"fileuploadattribute\">{fileName}</a>";
                                 }
                                 else
                                 {
@@ -133,13 +131,13 @@ public virtual async Task<string> FormatAttributes(IList<CustomAttribute> custom
                                 //encode (if required)
                                 if (htmlEncode)
                                     attributeName = WebUtility.HtmlEncode(attributeName);
-                                formattedAttribute = string.Format("{0}: {1}", attributeName, attributeText);
+                                formattedAttribute = $"{attributeName}: {attributeText}";
                             }
                         }
                         else
                         {
                             //other attributes (textbox, datepicker)
-                            formattedAttribute = string.Format("{0}: {1}", attribute.GetLocalized(a => a.Name, _workContext.WorkingLanguage.Id), valueStr);
+                            formattedAttribute = $"{attribute.GetLocalized(a => a.Name, _workContext.WorkingLanguage.Id)}: {valueStr}";
                             //encode (if required)
                             if (htmlEncode)
                                 formattedAttribute = WebUtility.HtmlEncode(formattedAttribute);
@@ -147,10 +145,10 @@ public virtual async Task<string> FormatAttributes(IList<CustomAttribute> custom
                     }
                     else
                     {
-                        var attributeValue = attribute.CheckoutAttributeValues.Where(x => x.Id == valueStr).FirstOrDefault();
+                        var attributeValue = attribute.CheckoutAttributeValues.FirstOrDefault(x => x.Id == valueStr);
                         if (attributeValue != null)
                         {
-                            formattedAttribute = string.Format("{0}: {1}", attribute.GetLocalized(a => a.Name, _workContext.WorkingLanguage.Id), attributeValue.GetLocalized(a => a.Name, _workContext.WorkingLanguage.Id));
+                            formattedAttribute = $"{attribute.GetLocalized(a => a.Name, _workContext.WorkingLanguage.Id)}: {attributeValue.GetLocalized(a => a.Name, _workContext.WorkingLanguage.Id)}";
                             if (renderPrices)
                             {
                                 decimal priceAdjustmentBase = (await _taxService.GetCheckoutAttributePrice(attribute, attributeValue, customer)).checkoutPrice;
@@ -158,7 +156,7 @@ public virtual async Task<string> FormatAttributes(IList<CustomAttribute> custom
                                 if (priceAdjustmentBase > 0)
                                 {
                                     string priceAdjustmentStr = _priceFormatter.FormatPrice(priceAdjustment);
-                                    formattedAttribute += string.Format(" [+{0}]", priceAdjustmentStr);
+                                    formattedAttribute += $" [+{priceAdjustmentStr}]";
                                 }
                             }
                         }
diff --git a/Grand.Services/Orders/CheckoutAttributeParser.cs b/Grand.Services/Orders/CheckoutAttributeParser.cs
index f6d7ae173..758807cd4 100644
--- a/Grand.Services/Orders/CheckoutAttributeParser.cs
+++ b/Grand.Services/Orders/CheckoutAttributeParser.cs
@@ -63,7 +63,7 @@ public virtual async Task<IList<CheckoutAttributeValue>> ParseCheckoutAttributeV
                 {
                     if (!string.IsNullOrEmpty(valueStr))
                     {
-                        var value = attribute.CheckoutAttributeValues.Where(x => x.Id == valueStr).FirstOrDefault();
+                        var value = attribute.CheckoutAttributeValues.FirstOrDefault(x => x.Id == valueStr);
                         if (value != null)
                             values.Add(value);
                     }
@@ -94,7 +94,7 @@ public virtual async Task<IList<(CheckoutAttribute ca, CheckoutAttributeValue ca
                 {
                     if (!string.IsNullOrEmpty(valueStr))
                     {
-                        var value = attribute.CheckoutAttributeValues.Where(x => x.Id == valueStr).FirstOrDefault();
+                        var value = attribute.CheckoutAttributeValues.FirstOrDefault(x => x.Id == valueStr);
                         if (value != null)
                             values.Add((attribute, value));
                     }
diff --git a/Grand.Services/Orders/OrderConfirmationService.cs b/Grand.Services/Orders/OrderConfirmationService.cs
index 1765f25a9..540b0112c 100644
--- a/Grand.Services/Orders/OrderConfirmationService.cs
+++ b/Grand.Services/Orders/OrderConfirmationService.cs
@@ -403,7 +403,7 @@ protected virtual async Task<PlaceOrderContainter> PreparePlaceOrderDetails(Proc
                 var country = await _countryService.GetCountryById(details.BillingAddress.CountryId);
                 if (country != null)
                     if (!country.AllowsBilling)
-                        throw new GrandException(string.Format("Country '{0}' is not allowed for billing", country.Name));
+                        throw new GrandException($"Country '{country.Name}' is not allowed for billing");
             }
 
             //checkout attributes
@@ -481,7 +481,7 @@ protected virtual async Task<PlaceOrderContainter> PreparePlaceOrderDetails(Proc
             details.OrderSubTotalDiscountInclTax = orderSubTotalDiscountAmount;
 
             foreach (var disc in orderSubTotalAppliedDiscounts)
-                if (!details.AppliedDiscounts.Where(x => x.DiscountId == disc.DiscountId).Any())
+                if (!details.AppliedDiscounts.Any(x => x.DiscountId == disc.DiscountId))
                     details.AppliedDiscounts.Add(disc);
 
             //sub total (excl tax)
@@ -520,7 +520,7 @@ protected virtual async Task<PlaceOrderContainter> PreparePlaceOrderDetails(Proc
                         var country = await _countryService.GetCountryById(details.ShippingAddress.CountryId);
                         if (country != null)
                             if (!country.AllowsShipping)
-                                throw new GrandException(string.Format("Country '{0}' is not allowed for shipping", country.Name));
+                                throw new GrandException($"Country '{country.Name}' is not allowed for shipping");
                     }
                 }
                 var shippingOption = details.Customer.GetAttributeFromEntity<ShippingOption>(SystemCustomerAttributeNames.SelectedShippingOption, processPaymentRequest.StoreId);
@@ -546,7 +546,7 @@ protected virtual async Task<PlaceOrderContainter> PreparePlaceOrderDetails(Proc
 
             foreach (var disc in shippingTotalDiscounts)
             {
-                if (!details.AppliedDiscounts.Where(x => x.DiscountId == disc.DiscountId).Any())
+                if (!details.AppliedDiscounts.Any(x => x.DiscountId == disc.DiscountId))
                     details.AppliedDiscounts.Add(disc);
             }
 
@@ -593,7 +593,7 @@ protected virtual async Task<PlaceOrderContainter> PreparePlaceOrderDetails(Proc
             //discount history
             foreach (var disc in orderAppliedDiscounts)
             {
-                if (!details.AppliedDiscounts.Where(x => x.DiscountId == disc.DiscountId).Any())
+                if (!details.AppliedDiscounts.Any(x => x.DiscountId == disc.DiscountId))
                     details.AppliedDiscounts.Add(disc);
             }
 
@@ -770,7 +770,7 @@ protected virtual async Task<OrderItem> PrepareOrderItem(ShoppingCartItem sc, Pr
 
             foreach (var disc in scDiscounts)
             {
-                if (!details.AppliedDiscounts.Where(x => x.DiscountId == disc.DiscountId).Any())
+                if (!details.AppliedDiscounts.Any(x => x.DiscountId == disc.DiscountId))
                     details.AppliedDiscounts.Add(disc);
             }
 
@@ -1203,8 +1203,7 @@ public virtual async Task SendNotification(Order order)
             {
                 //this order is placed by a store administrator impersonating a customer
                 await _orderService.InsertOrderNote(new OrderNote {
-                    Note = string.Format("Order placed by a store owner ('{0}'. ID = {1}) impersonating the customer.",
-                        _workContext.OriginalCustomerIfImpersonated.Email, _workContext.OriginalCustomerIfImpersonated.Id),
+                    Note = $"Order placed by a store owner ('{_workContext.OriginalCustomerIfImpersonated.Email}'. ID = {_workContext.OriginalCustomerIfImpersonated.Id}) impersonating the customer.",
                     DisplayToCustomer = false,
                     CreatedOnUtc = DateTime.UtcNow,
                     OrderId = order.Id,
@@ -1380,14 +1379,14 @@ public virtual async Task<PlaceOrderResult> PlaceOrder(ProcessPaymentRequest pro
             string error = "";
             for (int i = 0; i < result.Errors.Count; i++)
             {
-                error += string.Format("Error {0}: {1}", i + 1, result.Errors[i]);
+                error += $"Error {i + 1}: {result.Errors[i]}";
                 if (i != result.Errors.Count - 1)
                     error += ". ";
             }
             if (!string.IsNullOrEmpty(error))
             {
                 //log it
-                string logError = string.Format("Error while placing order. {0}", error);
+                string logError = $"Error while placing order. {error}";
                 _logger.Error(logError);
             }
 
diff --git a/Grand.Services/Orders/OrderProcessingService.cs b/Grand.Services/Orders/OrderProcessingService.cs
index e73256b11..81fc98cd4 100644
--- a/Grand.Services/Orders/OrderProcessingService.cs
+++ b/Grand.Services/Orders/OrderProcessingService.cs
@@ -205,7 +205,7 @@ public virtual async Task<IList<string>> Capture(Order order)
             {
                 if (result == null)
                     result = new CapturePaymentResult();
-                result.AddError(string.Format("Error: {0}. Full exception: {1}", exc.Message, exc));
+                result.AddError($"Error: {exc.Message}. Full exception: {exc}");
             }
 
 
@@ -213,7 +213,7 @@ public virtual async Task<IList<string>> Capture(Order order)
             string error = "";
             for (int i = 0; i < result.Errors.Count; i++)
             {
-                error += string.Format("Error {0}: {1}", i, result.Errors[i]);
+                error += $"Error {i}: {result.Errors[i]}";
                 if (i != result.Errors.Count - 1)
                     error += ". ";
             }
@@ -221,14 +221,14 @@ public virtual async Task<IList<string>> Capture(Order order)
             {
                 //add a note
                 await _orderService.InsertOrderNote(new OrderNote {
-                    Note = string.Format("Unable to capture order. {0}", error),
+                    Note = $"Unable to capture order. {error}",
                     DisplayToCustomer = false,
                     CreatedOnUtc = DateTime.UtcNow,
                     OrderId = order.Id,
                 });
 
                 //log it
-                string logError = string.Format("Error capturing order #{0}. Error: {1}", order.Id, error);
+                string logError = $"Error capturing order #{order.Id}. Error: {error}";
                 await _logger.InsertLog(LogLevel.Error, logError, logError);
             }
             return result.Errors;
@@ -348,7 +348,7 @@ public virtual async Task<IList<string>> Refund(Order order)
 
                     //add a note
                     await _orderService.InsertOrderNote(new OrderNote {
-                        Note = string.Format("Order has been refunded. Amount = {0}", request.AmountToRefund),
+                        Note = $"Order has been refunded. Amount = {request.AmountToRefund}",
                         DisplayToCustomer = false,
                         CreatedOnUtc = DateTime.UtcNow,
                         OrderId = order.Id,
@@ -390,14 +390,14 @@ public virtual async Task<IList<string>> Refund(Order order)
             {
                 if (result == null)
                     result = new RefundPaymentResult();
-                result.AddError(string.Format("Error: {0}. Full exception: {1}", exc.Message, exc.ToString()));
+                result.AddError($"Error: {exc.Message}. Full exception: {exc.ToString()}");
             }
 
             //process errors
             string error = "";
             for (int i = 0; i < result.Errors.Count; i++)
             {
-                error += string.Format("Error {0}: {1}", i, result.Errors[i]);
+                error += $"Error {i}: {result.Errors[i]}";
                 if (i != result.Errors.Count - 1)
                     error += ". ";
             }
@@ -405,14 +405,14 @@ public virtual async Task<IList<string>> Refund(Order order)
             {
                 //add a note
                 await _orderService.InsertOrderNote(new OrderNote {
-                    Note = string.Format("Unable to refund order. {0}", error),
+                    Note = $"Unable to refund order. {error}",
                     DisplayToCustomer = false,
                     CreatedOnUtc = DateTime.UtcNow,
                     OrderId = order.Id,
                 });
 
                 //log it
-                string logError = string.Format("Error refunding order #{0}. Error: {1}", order.Id, error);
+                string logError = $"Error refunding order #{order.Id}. Error: {error}";
                 await _logger.InsertLog(LogLevel.Error, logError, logError);
             }
             return result.Errors;
@@ -471,7 +471,7 @@ public virtual async Task RefundOffline(Order order)
 
             //add a note
             await _orderService.InsertOrderNote(new OrderNote {
-                Note = string.Format("Order has been marked as refunded. Amount = {0}", amountToRefund),
+                Note = $"Order has been marked as refunded. Amount = {amountToRefund}",
                 DisplayToCustomer = false,
                 CreatedOnUtc = DateTime.UtcNow,
                 OrderId = order.Id,
@@ -578,7 +578,7 @@ public virtual async Task<IList<string>> PartiallyRefund(Order order, decimal am
 
                     //add a note
                     await _orderService.InsertOrderNote(new OrderNote {
-                        Note = string.Format("Order has been partially refunded. Amount = {0}", amountToRefund),
+                        Note = $"Order has been partially refunded. Amount = {amountToRefund}",
                         DisplayToCustomer = false,
                         CreatedOnUtc = DateTime.UtcNow,
                         OrderId = order.Id,
@@ -619,14 +619,14 @@ public virtual async Task<IList<string>> PartiallyRefund(Order order, decimal am
             {
                 if (result == null)
                     result = new RefundPaymentResult();
-                result.AddError(string.Format("Error: {0}. Full exception: {1}", exc.Message, exc.ToString()));
+                result.AddError($"Error: {exc.Message}. Full exception: {exc.ToString()}");
             }
 
             //process errors
             string error = "";
             for (int i = 0; i < result.Errors.Count; i++)
             {
-                error += string.Format("Error {0}: {1}", i, result.Errors[i]);
+                error += $"Error {i}: {result.Errors[i]}";
                 if (i != result.Errors.Count - 1)
                     error += ". ";
             }
@@ -634,14 +634,14 @@ public virtual async Task<IList<string>> PartiallyRefund(Order order, decimal am
             {
                 //add a note
                 await _orderService.InsertOrderNote(new OrderNote {
-                    Note = string.Format("Unable to partially refund order. {0}", error),
+                    Note = $"Unable to partially refund order. {error}",
                     DisplayToCustomer = false,
                     CreatedOnUtc = DateTime.UtcNow,
                     OrderId = order.Id,
                 });
 
                 //log it
-                string logError = string.Format("Error refunding order #{0}. Error: {1}", order.Id, error);
+                string logError = $"Error refunding order #{order.Id}. Error: {error}";
                 await _logger.InsertLog(LogLevel.Error, logError, logError);
             }
             return result.Errors;
@@ -702,7 +702,7 @@ public virtual async Task PartiallyRefundOffline(Order order, decimal amountToRe
 
             //add a note
             await _orderService.InsertOrderNote(new OrderNote {
-                Note = string.Format("Order has been marked as partially refunded. Amount = {0}", amountToRefund),
+                Note = $"Order has been marked as partially refunded. Amount = {amountToRefund}",
                 DisplayToCustomer = false,
                 CreatedOnUtc = DateTime.UtcNow,
                 OrderId = order.Id,
@@ -802,14 +802,14 @@ public virtual async Task<IList<string>> Void(Order order)
             {
                 if (result == null)
                     result = new VoidPaymentResult();
-                result.AddError(string.Format("Error: {0}. Full exception: {1}", exc.Message, exc.ToString()));
+                result.AddError($"Error: {exc.Message}. Full exception: {exc.ToString()}");
             }
 
             //process errors
             string error = "";
             for (int i = 0; i < result.Errors.Count; i++)
             {
-                error += string.Format("Error {0}: {1}", i, result.Errors[i]);
+                error += $"Error {i}: {result.Errors[i]}";
                 if (i != result.Errors.Count - 1)
                     error += ". ";
             }
@@ -817,14 +817,14 @@ public virtual async Task<IList<string>> Void(Order order)
             {
                 //add a note
                 await _orderService.InsertOrderNote(new OrderNote {
-                    Note = string.Format("Unable to voiding order. {0}", error),
+                    Note = $"Unable to voiding order. {error}",
                     DisplayToCustomer = false,
                     CreatedOnUtc = DateTime.UtcNow,
                     OrderId = order.Id,
                 });
 
                 //log it
-                string logError = string.Format("Error voiding order #{0}. Error: {1}", order.Id, error);
+                string logError = $"Error voiding order #{order.Id}. Error: {error}";
                 await _logger.InsertLog(LogLevel.Error, logError, logError);
             }
             return result.Errors;
diff --git a/Grand.Services/Orders/OrderRecurringPayment.cs b/Grand.Services/Orders/OrderRecurringPayment.cs
index f5e77ee97..ca6a20835 100644
--- a/Grand.Services/Orders/OrderRecurringPayment.cs
+++ b/Grand.Services/Orders/OrderRecurringPayment.cs
@@ -101,7 +101,7 @@ public virtual async Task ProcessNextRecurringPayment(RecurringPayment recurring
                     string error = "";
                     for (int i = 0; i < result.Errors.Count; i++)
                     {
-                        error += string.Format("Error {0}: {1}", i, result.Errors[i]);
+                        error += $"Error {i}: {result.Errors[i]}";
                         if (i != result.Errors.Count - 1)
                             error += ". ";
                     }
@@ -110,7 +110,7 @@ public virtual async Task ProcessNextRecurringPayment(RecurringPayment recurring
             }
             catch (Exception exc)
             {
-                _logger.Error(string.Format("Error while processing recurring order. {0}", exc.Message), exc);
+                _logger.Error($"Error while processing recurring order. {exc.Message}", exc);
                 throw;
             }
         }
@@ -160,7 +160,7 @@ await _workflowMessageService
             {
                 if (result == null)
                     result = new CancelRecurringPaymentResult();
-                result.AddError(string.Format("Error: {0}. Full exception: {1}", exc.Message, exc));
+                result.AddError($"Error: {exc.Message}. Full exception: {exc}");
             }
 
 
@@ -168,7 +168,7 @@ await _workflowMessageService
             string error = "";
             for (int i = 0; i < result.Errors.Count; i++)
             {
-                error += string.Format("Error {0}: {1}", i, result.Errors[i]);
+                error += $"Error {i}: {result.Errors[i]}";
                 if (i != result.Errors.Count - 1)
                     error += ". ";
             }
@@ -176,7 +176,7 @@ await _workflowMessageService
             {
                 //add a note
                 await _orderService.InsertOrderNote(new OrderNote {
-                    Note = string.Format("Unable to cancel recurring payment. {0}", error),
+                    Note = $"Unable to cancel recurring payment. {error}",
                     DisplayToCustomer = false,
                     CreatedOnUtc = DateTime.UtcNow,
                     OrderId = initialOrder.Id,
@@ -184,7 +184,7 @@ await _workflowMessageService
                 });
 
                 //log it
-                string logError = string.Format("Error cancelling recurring payment. Order #{0}. Error: {1}", initialOrder.Id, error);
+                string logError = $"Error cancelling recurring payment. Order #{initialOrder.Id}. Error: {error}";
                 await _logger.InsertLog(LogLevel.Error, logError, logError);
             }
             return result.Errors;
diff --git a/Grand.Services/Orders/OrderReportService.cs b/Grand.Services/Orders/OrderReportService.cs
index 593ab97af..3f4a67bf6 100644
--- a/Grand.Services/Orders/OrderReportService.cs
+++ b/Grand.Services/Orders/OrderReportService.cs
@@ -284,7 +284,7 @@ select new
                     }).ToListAsync();
 
 
-            var item2 = query.Count() > 0 ? query.FirstOrDefault() : new OrderAverageReportLine {
+            var item2 = query.Any()? query.FirstOrDefault() : new OrderAverageReportLine {
                 CountOrders = 0,
                 SumShippingExclTax = decimal.Zero,
                 SumTax = decimal.Zero,
diff --git a/Grand.Services/Orders/OrderTotalCalculationService.cs b/Grand.Services/Orders/OrderTotalCalculationService.cs
index b4232b5e8..779c1e3bc 100644
--- a/Grand.Services/Orders/OrderTotalCalculationService.cs
+++ b/Grand.Services/Orders/OrderTotalCalculationService.cs
@@ -133,7 +133,7 @@ protected virtual async Task<(decimal ordersubtotaldiscount, List<AppliedDiscoun
                     var validDiscount = await _discountService.ValidateDiscount(discount, customer);
                     if (validDiscount.IsValid &&
                         discount.DiscountType == DiscountType.AssignedToOrderSubTotal &&
-                        !allowedDiscounts.Where(x => x.DiscountId == discount.Id).Any())
+                        !allowedDiscounts.Any(x => x.DiscountId == discount.Id))
                     {
                         allowedDiscounts.Add(new AppliedDiscount
                         {
@@ -176,7 +176,7 @@ protected virtual async Task<(decimal shippingDiscount, List<AppliedDiscount> ap
                     var validDiscount = await _discountService.ValidateDiscount(discount, customer);
                     if (validDiscount.IsValid &&
                         discount.DiscountType == DiscountType.AssignedToShipping &&
-                        !allowedDiscounts.Where(x => x.DiscountId == discount.Id).Any())
+                        !allowedDiscounts.Any(x => x.DiscountId == discount.Id))
                     {
                         allowedDiscounts.Add(new AppliedDiscount
                         {
@@ -224,7 +224,7 @@ protected virtual async Task<(decimal orderTotalDiscount, List<AppliedDiscount>
                     var validDiscount = await _discountService.ValidateDiscount(discount, customer);
                     if (validDiscount.IsValid &&
                                discount.DiscountType == DiscountType.AssignedToOrderTotal &&
-                               !allowedDiscounts.Where(x => x.DiscountId == discount.Id).Any())
+                               !allowedDiscounts.Any(x => x.DiscountId == discount.Id))
                     {
                         allowedDiscounts.Add(new AppliedDiscount
                         {
diff --git a/Grand.Services/Orders/ShoppingCartExtensions.cs b/Grand.Services/Orders/ShoppingCartExtensions.cs
index 32428affb..4663d6607 100644
--- a/Grand.Services/Orders/ShoppingCartExtensions.cs
+++ b/Grand.Services/Orders/ShoppingCartExtensions.cs
@@ -68,7 +68,7 @@ public static bool IsRecurring(this IList<ShoppingCartItem> shoppingCart)
                 var product = await productService.GetProductById(sci.ProductId);
                 if (product == null)
                 {
-                    throw new GrandException(string.Format("Product (Id={0}) cannot be loaded", sci.ProductId));
+                    throw new GrandException($"Product (Id={sci.ProductId}) cannot be loaded");
                 }
 
                 if (product.IsRecurring)
diff --git a/Grand.Services/Orders/ShoppingCartService.cs b/Grand.Services/Orders/ShoppingCartService.cs
index a85de5c99..282b5a6f4 100644
--- a/Grand.Services/Orders/ShoppingCartService.cs
+++ b/Grand.Services/Orders/ShoppingCartService.cs
@@ -130,7 +130,7 @@ public partial class ShoppingCartService : IShoppingCartService
             }
 
             //delete item
-            customer.ShoppingCartItems.Remove(customer.ShoppingCartItems.Where(x => x.Id == shoppingCartItem.Id).FirstOrDefault());
+            customer.ShoppingCartItems.Remove(customer.ShoppingCartItems.FirstOrDefault(x => x.Id == shoppingCartItem.Id));
             await _customerService.DeleteShoppingCartItem(customer.Id, shoppingCartItem);
 
             //validate checkout attributes
@@ -685,7 +685,7 @@ public IList<ShoppingCartItem> GetShoppingCart(string storeId = null, params Sho
             var attributeValues = _productAttributeParser.ParseProductAttributeValues(product, shoppingCartItem.Attributes);
             foreach (var attributeValue in attributeValues)
             {
-                var _productAttributeMapping = product.ProductAttributeMappings.Where(x => x.Id == attributeValue.ProductAttributeMappingId).FirstOrDefault();
+                var _productAttributeMapping = product.ProductAttributeMappings.FirstOrDefault(x => x.Id == attributeValue.ProductAttributeMappingId);
                 if (attributeValue.AttributeValueType == AttributeValueType.AssociatedToProduct && _productAttributeMapping != null)
                 {
                     if (ignoreNonCombinableAttributes && _productAttributeMapping.IsNonCombinable())
@@ -714,7 +714,7 @@ public IList<ShoppingCartItem> GetShoppingCart(string storeId = null, params Sho
                     }
                     else
                     {
-                        warnings.Add(string.Format("Associated product cannot be loaded - {0}", attributeValue.AssociatedProductId));
+                        warnings.Add($"Associated product cannot be loaded - {attributeValue.AssociatedProductId}");
                     }
                 }
             }
@@ -1190,7 +1190,7 @@ public virtual async Task<IList<string>> GetReservationProductWarnings(Customer
             if (!string.IsNullOrEmpty(reservationId))
             {
                 var reservations = await _productReservationService.GetCustomerReservationsHelpers(_workContext.CurrentCustomer.Id);
-                if (reservations.Where(x => x.ReservationId == reservationId).Any())
+                if (reservations.Any(x => x.ReservationId == reservationId))
                     warnings.Add(_localizationService.GetResource("ShoppingCart.AlreadyReservation"));
             }
 
diff --git a/Grand.Services/Payments/PaymentService.cs b/Grand.Services/Payments/PaymentService.cs
index bdbdb11da..a9ebe657e 100644
--- a/Grand.Services/Payments/PaymentService.cs
+++ b/Grand.Services/Payments/PaymentService.cs
@@ -77,7 +77,7 @@ public virtual async Task<IList<IPaymentMethod>> LoadActivePaymentMethods(Custom
                 for (int i = pm.Count - 1; i >= 0; i--)
                 {
                     var restictedRoleIds = GetRestrictedRoleIds(pm[i]);
-                    if (filterByCustomer.CustomerRoles.Where(x => restictedRoleIds.Contains(x.Id)).Count() > 0)
+                    if (filterByCustomer.CustomerRoles.Any(x => restictedRoleIds.Contains(x.Id)))
                     {
                         pm.Remove(pm[i]);
                     }
@@ -148,7 +148,7 @@ public virtual IList<string> GetRestrictedCountryIds(IPaymentMethod paymentMetho
             if (paymentMethod == null)
                 throw new ArgumentNullException("paymentMethod");
 
-            var settingKey = string.Format("PaymentMethodRestictions.{0}", paymentMethod.PluginDescriptor.SystemName);
+            var settingKey = $"PaymentMethodRestictions.{paymentMethod.PluginDescriptor.SystemName}";
             var restictedCountryIds = _settingService.GetSettingByKey<List<string>>(settingKey);
             if (restictedCountryIds == null)
                 restictedCountryIds = new List<string>();
@@ -165,7 +165,7 @@ public virtual IList<string> GetRestrictedRoleIds(IPaymentMethod paymentMethod)
             if (paymentMethod == null)
                 throw new ArgumentNullException("paymentMethod");
 
-            var settingKey = string.Format("PaymentMethodRestictionsRole.{0}", paymentMethod.PluginDescriptor.SystemName);
+            var settingKey = $"PaymentMethodRestictionsRole.{paymentMethod.PluginDescriptor.SystemName}";
             var restictedRoleIds = _settingService.GetSettingByKey<List<string>>(settingKey);
             if (restictedRoleIds == null)
                 restictedRoleIds = new List<string>();
@@ -182,7 +182,7 @@ public virtual IList<string> GetRestrictedShippingIds(IPaymentMethod paymentMeth
             if (paymentMethod == null)
                 throw new ArgumentNullException("paymentMethod");
 
-            var settingKey = string.Format("PaymentMethodRestictionsShipping.{0}", paymentMethod.PluginDescriptor.SystemName);
+            var settingKey = $"PaymentMethodRestictionsShipping.{paymentMethod.PluginDescriptor.SystemName}";
             var restictedShippingIds = _settingService.GetSettingByKey<List<string>>(settingKey);
             if (restictedShippingIds == null)
                 restictedShippingIds = new List<string>();
@@ -198,7 +198,7 @@ public virtual async Task SaveRestictedCountryIds(IPaymentMethod paymentMethod,
             if (paymentMethod == null)
                 throw new ArgumentNullException("paymentMethod");
 
-            var settingKey = string.Format("PaymentMethodRestictions.{0}", paymentMethod.PluginDescriptor.SystemName);
+            var settingKey = $"PaymentMethodRestictions.{paymentMethod.PluginDescriptor.SystemName}";
             await _settingService.SetSetting(settingKey, countryIds);
         }
 
@@ -212,7 +212,7 @@ public virtual async Task SaveRestictedRoleIds(IPaymentMethod paymentMethod, Lis
             if (paymentMethod == null)
                 throw new ArgumentNullException("paymentMethod");
 
-            var settingKey = string.Format("PaymentMethodRestictionsRole.{0}", paymentMethod.PluginDescriptor.SystemName);
+            var settingKey = $"PaymentMethodRestictionsRole.{paymentMethod.PluginDescriptor.SystemName}";
             await _settingService.SetSetting(settingKey, roleIds);
         }
 
@@ -226,7 +226,7 @@ public virtual async Task SaveRestictedShippingIds(IPaymentMethod paymentMethod,
             if (paymentMethod == null)
                 throw new ArgumentNullException("paymentMethod");
 
-            var settingKey = string.Format("PaymentMethodRestictionsShipping.{0}", paymentMethod.PluginDescriptor.SystemName);
+            var settingKey = $"PaymentMethodRestictionsShipping.{paymentMethod.PluginDescriptor.SystemName}";
             await _settingService.SetSetting(settingKey, shippingIds);
         }
 
diff --git a/Grand.Services/Polls/PollService.cs b/Grand.Services/Polls/PollService.cs
index 2fd9bb933..93f3b2d05 100644
--- a/Grand.Services/Polls/PollService.cs
+++ b/Grand.Services/Polls/PollService.cs
@@ -183,7 +183,7 @@ public virtual async Task<bool> AlreadyVoted(string pollId, string customerId)
             filter = filter & builder.Where(x => x.PollAnswers.Any(y => y.PollVotingRecords.Any(z => z.CustomerId == customerId)));
             var query = await _pollRepository.Collection.Find(filter).ToListAsync();
 
-            var result = (query.Count() > 0);            
+            var result = (query.Any());            
 
             return result;
         }
diff --git a/Grand.Services/PushNotifications/PushNotificationsService.cs b/Grand.Services/PushNotifications/PushNotificationsService.cs
index 981c7949e..5655549f2 100644
--- a/Grand.Services/PushNotifications/PushNotificationsService.cs
+++ b/Grand.Services/PushNotifications/PushNotificationsService.cs
@@ -184,8 +184,8 @@ public virtual async Task<(bool, string)> SendPushNotification(string title, str
 
             var json = JsonConvert.SerializeObject(data);
             Byte[] byteArray = Encoding.UTF8.GetBytes(json);
-            tRequest.Headers.Add(string.Format("Authorization: key={0}", _pushNotificationsSettings.PrivateApiKey));
-            tRequest.Headers.Add(string.Format("Sender: id={0}", _pushNotificationsSettings.SenderId));
+            tRequest.Headers.Add($"Authorization: key={_pushNotificationsSettings.PrivateApiKey}");
+            tRequest.Headers.Add($"Sender: id={_pushNotificationsSettings.SenderId}");
             tRequest.ContentLength = byteArray.Length;
             try
             {
diff --git a/Grand.Services/Seo/SeoExtensions.cs b/Grand.Services/Seo/SeoExtensions.cs
index 208a33c99..4c2ce3ee4 100644
--- a/Grand.Services/Seo/SeoExtensions.cs
+++ b/Grand.Services/Seo/SeoExtensions.cs
@@ -58,7 +58,7 @@ public static string GetSeName<T>(this T entity, string languageId, bool returnD
             var seName = string.Empty;
             if (!string.IsNullOrEmpty(languageId))
             {
-                var value = entity.Locales.Where(x => x.LanguageId == languageId && x.LocaleKey == "SeName").FirstOrDefault();
+                var value = entity.Locales.FirstOrDefault(x => x.LanguageId == languageId && x.LocaleKey == "SeName");
                 if (value != null)
                     if (!string.IsNullOrEmpty(value.LocaleValue))
                         seName = value.LocaleValue;
@@ -130,7 +130,7 @@ public static string GetSeName<T>(this T entity, string languageId, bool returnD
                 if (!reserved1 && !reserved2 && !reserved3)
                     break;
 
-                tempSeName = string.Format("{0}-{1}", seName, i);
+                tempSeName = $"{seName}-{i}";
                 i++;
             }
             seName = tempSeName;
diff --git a/Grand.Services/Shipping/ShippingService.cs b/Grand.Services/Shipping/ShippingService.cs
index e43c5fe29..f2209e0d9 100644
--- a/Grand.Services/Shipping/ShippingService.cs
+++ b/Grand.Services/Shipping/ShippingService.cs
@@ -595,7 +595,7 @@ public virtual async Task<Warehouse> GetNearestWarehouse(Address address, IList<
                         foreach (string error in getShippingOptionResponse.Errors)
                         {
                             result.AddError(error);
-                            _logger.Warning(string.Format("Shipping ({0}). {1}", srcm.PluginDescriptor.FriendlyName, error));
+                            _logger.Warning($"Shipping ({srcm.PluginDescriptor.FriendlyName}). {error}");
                         }
                         //clear the shipping options in this case
                         srcmShippingOptions = new List<ShippingOption>();
diff --git a/Grand.Services/Tasks/QueuedMessagesSendScheduleTask.cs b/Grand.Services/Tasks/QueuedMessagesSendScheduleTask.cs
index 50a5d17d4..8936bcb71 100644
--- a/Grand.Services/Tasks/QueuedMessagesSendScheduleTask.cs
+++ b/Grand.Services/Tasks/QueuedMessagesSendScheduleTask.cs
@@ -63,7 +63,7 @@ public async Task Execute()
                 }
                 catch (Exception exc)
                 {
-                    _logger.Error(string.Format("Error sending e-mail. {0}", exc.Message), exc);
+                    _logger.Error($"Error sending e-mail. {exc.Message}", exc);
                 }
                 finally
                 {
diff --git a/Grand.Services/Tax/TaxService.cs b/Grand.Services/Tax/TaxService.cs
index f8588c726..c28575461 100644
--- a/Grand.Services/Tax/TaxService.cs
+++ b/Grand.Services/Tax/TaxService.cs
@@ -275,11 +275,11 @@ await IsVatExempt(calculateTaxRequest.Address, calculateTaxRequest.Customer))
                 {
                     if (activeTaxProvider.PluginDescriptor == null)
                     {
-                        _logger.Error(string.Format("{0} - {1}", "PluginDescriptor is NULL!!", error), null, customer);
+                        _logger.Error($"{"PluginDescriptor is NULL!!"} - {error}", null, customer);
                     }
                     else
                     {
-                        _logger.Error(string.Format("{0} - {1}", activeTaxProvider.PluginDescriptor.FriendlyName, error), null, customer);
+                        _logger.Error($"{activeTaxProvider.PluginDescriptor.FriendlyName} - {error}", null, customer);
                     }
 
                 }
diff --git a/Grand.Web/Areas/Admin/Controllers/BlogController.cs b/Grand.Web/Areas/Admin/Controllers/BlogController.cs
index e282fdd7d..cc66fee67 100644
--- a/Grand.Web/Areas/Admin/Controllers/BlogController.cs
+++ b/Grand.Web/Areas/Admin/Controllers/BlogController.cs
@@ -491,7 +491,7 @@ public async Task<IActionResult> BlogPostAddPopup(AddBlogPostCategoryModel model
                         var post = _blogService.GetBlogPostById(id);
                         if (post != null)
                         {
-                            if (blogCategory.BlogPosts.Where(x => x.BlogPostId == id).Count() == 0)
+                            if (!blogCategory.BlogPosts.Any(x => x.BlogPostId == id))
                             {
                                 blogCategory.BlogPosts.Add(new Domain.Blogs.BlogCategoryPost() { BlogPostId = id });
                                 await _blogService.UpdateBlogCategory(blogCategory);
diff --git a/Grand.Web/Areas/Admin/Controllers/CampaignController.cs b/Grand.Web/Areas/Admin/Controllers/CampaignController.cs
index 22ecadb7c..d15b70585 100644
--- a/Grand.Web/Areas/Admin/Controllers/CampaignController.cs
+++ b/Grand.Web/Areas/Admin/Controllers/CampaignController.cs
@@ -113,7 +113,7 @@ public async Task<IActionResult> ExportCsv(string campaignId)
                 var customers = await _campaignService.CustomerSubscriptions(campaign);
                 string result = _exportManager.ExportNewsletterSubscribersToTxt(customers.Select(x => x.Email).ToList());
 
-                string fileName = String.Format("newsletter_emails_campaign_{0}_{1}.txt", campaign.Name, CommonHelper.GenerateRandomDigitCode(4));
+                string fileName = $"newsletter_emails_campaign_{campaign.Name}_{CommonHelper.GenerateRandomDigitCode(4)}.txt";
                 return File(Encoding.UTF8.GetBytes(result), "text/csv", fileName);
             }
             catch (Exception exc)
diff --git a/Grand.Web/Areas/Admin/Controllers/CheckoutAttributeController.cs b/Grand.Web/Areas/Admin/Controllers/CheckoutAttributeController.cs
index cb5b07f88..cb5998bc7 100644
--- a/Grand.Web/Areas/Admin/Controllers/CheckoutAttributeController.cs
+++ b/Grand.Web/Areas/Admin/Controllers/CheckoutAttributeController.cs
@@ -271,7 +271,7 @@ public async Task<IActionResult> ValueCreatePopup(CheckoutAttributeValueModel mo
         public async Task<IActionResult> ValueEditPopup(string id, string checkoutAttributeId)
         {
             var checkoutAttribute = await _checkoutAttributeService.GetCheckoutAttributeById(checkoutAttributeId);
-            var cav = checkoutAttribute.CheckoutAttributeValues.Where(x=>x.Id == id).FirstOrDefault();
+            var cav = checkoutAttribute.CheckoutAttributeValues.FirstOrDefault(x=>x.Id == id);
             if (cav == null)
                 //No checkout attribute value found with the specified id
                 return RedirectToAction("List");
@@ -293,7 +293,7 @@ public async Task<IActionResult> ValueEditPopup(CheckoutAttributeValueModel mode
         {
             var checkoutAttribute = await _checkoutAttributeService.GetCheckoutAttributeById(model.CheckoutAttributeId);
 
-            var cav = checkoutAttribute.CheckoutAttributeValues.Where(x => x.Id == model.Id).FirstOrDefault();
+            var cav = checkoutAttribute.CheckoutAttributeValues.FirstOrDefault(x => x.Id == model.Id);
             if (cav == null)
                 //No checkout attribute value found with the specified id
                 return RedirectToAction("List");
@@ -325,7 +325,7 @@ public async Task<IActionResult> ValueEditPopup(CheckoutAttributeValueModel mode
         public async Task<IActionResult> ValueDelete(string id, string checkoutAttributeId)
         {
             var checkoutAttribute = await _checkoutAttributeService.GetCheckoutAttributeById(checkoutAttributeId);
-            var cav = checkoutAttribute.CheckoutAttributeValues.Where(x => x.Id == id).FirstOrDefault();
+            var cav = checkoutAttribute.CheckoutAttributeValues.FirstOrDefault(x => x.Id == id);
             if (cav == null)
                 throw new ArgumentException("No checkout attribute value found with the specified id");
 
diff --git a/Grand.Web/Areas/Admin/Controllers/ContactAttributeController.cs b/Grand.Web/Areas/Admin/Controllers/ContactAttributeController.cs
index 30ea74f32..50676ca21 100644
--- a/Grand.Web/Areas/Admin/Controllers/ContactAttributeController.cs
+++ b/Grand.Web/Areas/Admin/Controllers/ContactAttributeController.cs
@@ -204,12 +204,12 @@ public async Task<IActionResult> ValueList(string contactAttributeId, DataSource
                 {
                     Id = x.Id,
                     ContactAttributeId = x.ContactAttributeId,
-                    Name = contactAttribute.AttributeControlType != AttributeControlType.ColorSquares ? x.Name : string.Format("{0} - {1}", x.Name, x.ColorSquaresRgb),
+                    Name = contactAttribute.AttributeControlType != AttributeControlType.ColorSquares ? x.Name : $"{x.Name} - {x.ColorSquaresRgb}",
                     ColorSquaresRgb = x.ColorSquaresRgb,
                     IsPreSelected = x.IsPreSelected,
                     DisplayOrder = x.DisplayOrder,
                 }),
-                Total = values.Count()
+                Total = values.Count
             };
             return Json(gridModel);
         }
@@ -259,7 +259,7 @@ public async Task<IActionResult> ValueCreatePopup(ContactAttributeValueModel mod
         public async Task<IActionResult> ValueEditPopup(string id, string contactAttributeId)
         {
             var contactAttribute = await _contactAttributeService.GetContactAttributeById(contactAttributeId);
-            var cav = contactAttribute.ContactAttributeValues.Where(x => x.Id == id).FirstOrDefault();
+            var cav = contactAttribute.ContactAttributeValues.FirstOrDefault(x => x.Id == id);
             if (cav == null)
                 //No contact attribute value found with the specified id
                 return RedirectToAction("List");
@@ -280,7 +280,7 @@ public async Task<IActionResult> ValueEditPopup(ContactAttributeValueModel model
         {
             var contactAttribute = await _contactAttributeService.GetContactAttributeById(model.ContactAttributeId);
 
-            var cav = contactAttribute.ContactAttributeValues.Where(x => x.Id == model.Id).FirstOrDefault();
+            var cav = contactAttribute.ContactAttributeValues.FirstOrDefault(x => x.Id == model.Id);
             if (cav == null)
                 //No contact attribute value found with the specified id
                 return RedirectToAction("List");
@@ -309,7 +309,7 @@ public async Task<IActionResult> ValueEditPopup(ContactAttributeValueModel model
         public async Task<IActionResult> ValueDelete(string id, string contactAttributeId)
         {
             var contactAttribute = await _contactAttributeService.GetContactAttributeById(contactAttributeId);
-            var cav = contactAttribute.ContactAttributeValues.Where(x => x.Id == id).FirstOrDefault();
+            var cav = contactAttribute.ContactAttributeValues.FirstOrDefault(x => x.Id == id);
             if (cav == null)
                 throw new ArgumentException("No contact attribute value found with the specified id");
             if (ModelState.IsValid)
diff --git a/Grand.Web/Areas/Admin/Controllers/CountryController.cs b/Grand.Web/Areas/Admin/Controllers/CountryController.cs
index 90edd71d1..47c947dab 100644
--- a/Grand.Web/Areas/Admin/Controllers/CountryController.cs
+++ b/Grand.Web/Areas/Admin/Controllers/CountryController.cs
@@ -351,7 +351,7 @@ public async Task<IActionResult> StateDelete(string id)
         [PermissionAuthorizeAction(PermissionActionName.Export)]
         public async Task<IActionResult> ExportCsv()
         {
-            string fileName = String.Format("states_{0}_{1}.txt", DateTime.Now.ToString("yyyy-MM-dd-HH-mm-ss"), CommonHelper.GenerateRandomDigitCode(4));
+            string fileName = $"states_{DateTime.Now.ToString("yyyy-MM-dd-HH-mm-ss")}_{CommonHelper.GenerateRandomDigitCode(4)}.txt";
 
             var states = await _stateProvinceService.GetStateProvinces(true);
             string result = await _exportManager.ExportStatesToTxt(states);
diff --git a/Grand.Web/Areas/Admin/Controllers/CustomerActionController.cs b/Grand.Web/Areas/Admin/Controllers/CustomerActionController.cs
index e771010ee..337b7a6c1 100644
--- a/Grand.Web/Areas/Admin/Controllers/CustomerActionController.cs
+++ b/Grand.Web/Areas/Admin/Controllers/CustomerActionController.cs
@@ -115,7 +115,7 @@ public async Task<IActionResult> List(DataSourceRequest command)
             var gridModel = new DataSourceResult
             {
                 Data = customeractions.Select(x => new { Id = x.Id, Name = x.Name, Active = x.Active, ActionType = actions.FirstOrDefault(y=>y.Id == x.ActionTypeId)?.Name }),
-                Total = customeractions.Count()
+                Total = customeractions.Count
             };
             return Json(gridModel);
         }
@@ -338,8 +338,7 @@ public async Task<IActionResult> ConditionProduct(string customerActionId, strin
             var gridModel = new DataSourceResult
             {
                 Data = items.Select(x=>new { Id = x.Id, ProductName = x.ProductName }),
-                Total = customerActions.Conditions.Where(x => x.Id == conditionId).Count()
-            };
+                Total = customerActions.Conditions.Count(x => x.Id == conditionId)            };
             return Json(gridModel);
         }
 
@@ -390,8 +389,7 @@ public async Task<IActionResult> ConditionCategory(string customerActionId, stri
             var gridModel = new DataSourceResult
             {
                 Data = items.Select(x => new { Id = x.Id, CategoryName = x.CategoryName }),
-                Total = customerActions.Conditions.Where(x => x.Id == conditionId).Count()
-            };
+                Total = customerActions.Conditions.Count(x => x.Id == conditionId)            };
             return Json(gridModel);
         }
 
@@ -456,8 +454,7 @@ public async Task<IActionResult> ConditionManufacturer(string customerActionId,
             var gridModel = new DataSourceResult
             {
                 Data = items.Select(x => new { Id = x.Id, ManufacturerName = x.ManufacturerName }),
-                Total = customerActions.Conditions.Where(x => x.Id == conditionId).Count()
-            };
+                Total = customerActions.Conditions.Count(x => x.Id == conditionId)            };
             return Json(gridModel);
         }
 
@@ -510,8 +507,7 @@ public async Task<IActionResult> ConditionVendor(string customerActionId, string
             var gridModel = new DataSourceResult
             {
                 Data = condition != null ? condition.Vendors.Select(z => new { Id = z, VendorName = vendors.FirstOrDefault(y=>y.Id == z).Name }) : null,
-                Total = customerActions.Conditions.Where(x => x.Id == conditionId).Count()
-            };
+                Total = customerActions.Conditions.Count(x => x.Id == conditionId)            };
             return Json(gridModel);
         }
 
@@ -546,8 +542,7 @@ public async Task<IActionResult> ConditionCustomerRole(string customerActionId,
             var gridModel = new DataSourceResult
             {
                 Data = items.Select(x => new { Id = x.Id, CustomerRole = x.CustomerRole }),
-                Total = customerActions.Conditions.Where(x => x.Id == conditionId).Count()
-            };
+                Total = customerActions.Conditions.Count(x => x.Id == conditionId)            };
             return Json(gridModel);
         }
 
@@ -590,8 +585,7 @@ public async Task<IActionResult> ConditionStore(string customerActionId, string
             var gridModel = new DataSourceResult
             {
                 Data = items.Select(x => new { Id = x.Id, Store = x.Store }),
-                Total = customerActions.Conditions.Where(x => x.Id == conditionId).Count()
-            };
+                Total = customerActions.Conditions.Count(x => x.Id == conditionId)            };
             return Json(gridModel);
         }
 
@@ -620,8 +614,7 @@ public async Task<IActionResult> ConditionCustomerTag(string customerActionId, s
             var gridModel = new DataSourceResult
             {
                 Data = items.Select(x => new { Id = x.Id, CustomerTag = x.CustomerTag }),
-                Total = customerActions.Conditions.Where(x => x.Id == conditionId).Count()
-            };
+                Total = customerActions.Conditions.Count(x => x.Id == conditionId)            };
             return Json(gridModel);
         }
 
@@ -656,8 +649,7 @@ public async Task<IActionResult> ConditionProductAttribute(string customerAction
             var gridModel = new DataSourceResult
             {
                 Data = items.Select(x => new { Id = x.Id, ProductAttributeId = x.ProductAttributeId, ProductAttributeName = x.ProductAttributeName }),
-                Total = customerActions.Conditions.Where(x => x.Id == conditionId).Count()
-            };
+                Total = customerActions.Conditions.Count(x => x.Id == conditionId)            };
             return Json(gridModel);
         }
 
@@ -700,8 +692,7 @@ public async Task<IActionResult> ConditionProductSpecification(string customerAc
                             SpecificationName = specs.FirstOrDefault(x=>x.Id == z.ProductSpecyficationId)?.Name,
                             SpecificationValueName = !String.IsNullOrEmpty(z.ProductSpecyficationValueId) ? specs.FirstOrDefault(x => x.Id == z.ProductSpecyficationId).SpecificationAttributeOptions.FirstOrDefault(x => x.Id == z.ProductSpecyficationValueId).Name : "Undefined"
                         }) : null,
-                Total = customerActions.Conditions.Where(x => x.Id == conditionId).Count()
-            };
+                Total = customerActions.Conditions.Count(x => x.Id == conditionId)            };
             return Json(gridModel);
         }
 
@@ -748,8 +739,7 @@ public async Task<IActionResult> ConditionCustomerRegister(string customerAction
                     CustomerRegisterValue = z.RegisterValue
                 })
                     : null,
-                Total = customerActions.Conditions.Where(x => x.Id == conditionId).Count()
-            };
+                Total = customerActions.Conditions.Count(x => x.Id == conditionId)            };
             return Json(gridModel);
         }
 
@@ -824,8 +814,7 @@ public async Task<IActionResult> ConditionCustomCustomerAttribute(string custome
                     CustomerAttributeValue = z.RegisterValue
                 })
                     : null,
-                Total = customerActions.Conditions.Where(x => x.Id == conditionId).Count()
-            };
+                Total = customerActions.Conditions.Count(x => x.Id == conditionId)            };
             return Json(gridModel);
         }
 
@@ -854,7 +843,7 @@ public async Task<IActionResult> CustomCustomerAttributeFields()
                 {
                     foreach (var value in item.CustomerAttributeValues)
                     {
-                        list.Add(Tuple.Create(string.Format("{0}:{1}", item.Id, value.Id), item.Name + "->" + value.Name));
+                        list.Add(Tuple.Create($"{item.Id}:{value.Id}", item.Name + "->" + value.Name));
                     }
                 }
             }
@@ -874,8 +863,7 @@ public async Task<IActionResult> ConditionUrlReferrer(string customerActionId, s
             var gridModel = new DataSourceResult
             {
                 Data = condition != null ? condition.UrlReferrer.Select(z => new { Id = z.Id, Name = z.Name }) : null,
-                Total = customerActions.Conditions.Where(x => x.Id == conditionId).Count()
-            };
+                Total = customerActions.Conditions.Count(x => x.Id == conditionId)            };
             return Json(gridModel);
         }
 
@@ -905,8 +893,7 @@ public async Task<IActionResult> ConditionUrlCurrent(string customerActionId, st
             var gridModel = new DataSourceResult
             {
                 Data = condition != null ? condition.UrlCurrent.Select(z => new { Id = z.Id, Name = z.Name }) : null,
-                Total = customerActions.Conditions.Where(x => x.Id == conditionId).Count()
-            };
+                Total = customerActions.Conditions.Count(x => x.Id == conditionId)            };
             return Json(gridModel);
         }
 
diff --git a/Grand.Web/Areas/Admin/Controllers/CustomerController.cs b/Grand.Web/Areas/Admin/Controllers/CustomerController.cs
index 0744d723e..a92cabd8c 100644
--- a/Grand.Web/Areas/Admin/Controllers/CustomerController.cs
+++ b/Grand.Web/Areas/Admin/Controllers/CustomerController.cs
@@ -115,7 +115,7 @@ protected virtual async Task<IList<CustomAttribute>> ParseCustomCustomerAttribut
             var customerAttributes = await _customerAttributeService.GetAllCustomerAttributes();
             foreach (var attribute in customerAttributes)
             {
-                string controlId = string.Format("customer_attribute_{0}", attribute.Id);
+                string controlId = $"customer_attribute_{attribute.Id}";
                 switch (attribute.AttributeControlType)
                 {
                     case AttributeControlType.DropdownList:
@@ -737,7 +737,7 @@ public async Task<IActionResult> AddressEdit(string addressId, string customerId
                 //No customer found with the specified id
                 return RedirectToAction("List");
 
-            var address = customer.Addresses.Where(x => x.Id == addressId).FirstOrDefault();
+            var address = customer.Addresses.FirstOrDefault(x => x.Id == addressId);
             if (address == null)
                 //No address found with the specified id
                 return RedirectToAction("Edit", new { id = customer.Id });
@@ -757,7 +757,7 @@ public async Task<IActionResult> AddressEdit(CustomerAddressModel model, IFormCo
                 //No customer found with the specified id
                 return RedirectToAction("List");
 
-            var address = customer.Addresses.Where(x => x.Id == model.Address.Id).FirstOrDefault();
+            var address = customer.Addresses.FirstOrDefault(x => x.Id == model.Address.Id);
             if (address == null)
                 //No address found with the specified id
                 return RedirectToAction("Edit", new { id = customer.Id });
diff --git a/Grand.Web/Areas/Admin/Controllers/CustomerReminderController.cs b/Grand.Web/Areas/Admin/Controllers/CustomerReminderController.cs
index c1130523b..be2b2bb86 100644
--- a/Grand.Web/Areas/Admin/Controllers/CustomerReminderController.cs
+++ b/Grand.Web/Areas/Admin/Controllers/CustomerReminderController.cs
@@ -86,7 +86,7 @@ public async Task<IActionResult> List(DataSourceRequest command)
             var gridModel = new DataSourceResult
             {
                 Data = customeractions.Select(x => new { Id = x.Id, Name = x.Name, Active = x.Active, Rule = x.ReminderRule.ToString() }),
-                Total = customeractions.Count()
+                Total = customeractions.Count
             };
             return Json(gridModel);
         }
@@ -327,8 +327,7 @@ public async Task<IActionResult> ConditionCategory(string customerReminderId, st
             var gridModel = new DataSourceResult
             {
                 Data = items.Select(x => new { Id = x.Id, CategoryName = x.CategoryName }),
-                Total = customerReminder.Conditions.Where(x => x.Id == conditionId).Count()
-            };
+                Total = customerReminder.Conditions.Count(x => x.Id == conditionId)            };
             return Json(gridModel);
         }
 
@@ -392,8 +391,7 @@ public async Task<IActionResult> ConditionManufacturer(string customerReminderId
             var gridModel = new DataSourceResult
             {
                 Data = items.Select(x => new { Id = x.Id, ManufacturerName = x.ManufacturerName }),
-                Total = customerReminder.Conditions.Where(x => x.Id == conditionId).Count()
-            };
+                Total = customerReminder.Conditions.Count(x => x.Id == conditionId)            };
             return Json(gridModel);
         }
 
@@ -450,8 +448,7 @@ public async Task<IActionResult> ConditionProduct(string customerReminderId, str
             var gridModel = new DataSourceResult
             {
                 Data = items.Select(x => new { Id = x.Id, ProductName = x.ProductName }),
-                Total = customerReminder.Conditions.Where(x => x.Id == conditionId).Count()
-            };
+                Total = customerReminder.Conditions.Count(x => x.Id == conditionId)            };
             return Json(gridModel);
         }
 
@@ -504,8 +501,7 @@ public async Task<IActionResult> ConditionCustomerTag(string customerReminderId,
             var gridModel = new DataSourceResult
             {
                 Data = items.Select(x => new { Id = x.Id, CustomerTag = x.CustomerTag }),
-                Total = customerReminder.Conditions.Where(x => x.Id == conditionId).Count()
-            };
+                Total = customerReminder.Conditions.Count(x => x.Id == conditionId)            };
             return Json(gridModel);
         }
         [HttpPost]
@@ -544,8 +540,7 @@ public async Task<IActionResult> ConditionCustomerRole(string customerReminderId
             var gridModel = new DataSourceResult
             {
                 Data = items.Select(x => new { Id = x.Id, CustomerRole = x.CustomerRole }),
-                Total = customerReminder.Conditions.Where(x => x.Id == conditionId).Count()
-            };
+                Total = customerReminder.Conditions.Count(x => x.Id == conditionId)            };
             return Json(gridModel);
         }
 
@@ -585,8 +580,7 @@ public async Task<IActionResult> ConditionCustomerRegister(string customerRemind
                     CustomerRegisterValue = z.RegisterValue
                 })
                     : null,
-                Total = customerReminder.Conditions.Where(x => x.Id == conditionId).Count()
-            };
+                Total = customerReminder.Conditions.Count(x => x.Id == conditionId)            };
             return Json(gridModel);
         }
 
@@ -666,8 +660,7 @@ public async Task<IActionResult> ConditionCustomCustomerAttribute(string custome
             var gridModel = new DataSourceResult
             {
                 Data = items.Select(x => new { Id = x.Id, CustomerAttributeId = x.CustomerAttributeId, CustomerAttributeName = x.CustomerAttributeName, CustomerAttributeValue = x.CustomerAttributeValue }),
-                Total = customerReminder.Conditions.Where(x => x.Id == conditionId).Count()
-            };
+                Total = customerReminder.Conditions.Count(x => x.Id == conditionId)            };
             return Json(gridModel);
         }
 
@@ -704,7 +697,7 @@ public async Task<IActionResult> CustomCustomerAttributeFields()
                 {
                     foreach (var value in item.CustomerAttributeValues)
                     {
-                        list.Add(Tuple.Create(string.Format("{0}:{1}", item.Id, value.Id), item.Name + "->" + value.Name));
+                        list.Add(Tuple.Create($"{item.Id}:{value.Id}", item.Name + "->" + value.Name));
                     }
                 }
             }
@@ -747,7 +740,7 @@ public async Task<IActionResult> AddLevel(CustomerReminderModel.ReminderLevelMod
             {
                 return RedirectToAction("List");
             }
-            if (customerReminder.Levels.Where(x => x.Level == model.Level).Count() > 0)
+            if (customerReminder.Levels.Any(x => x.Level == model.Level))
             {
                 ModelState.AddModelError("Error-LevelExists", _localizationService.GetResource("Admin.Customers.CustomerReminderLevel.Exists"));
             }
@@ -793,7 +786,7 @@ public async Task<IActionResult> EditLevel(string customerReminderId, string cid
 
             if (level.Level != model.Level)
             {
-                if (customerReminder.Levels.Where(x => x.Level == model.Level).Count() > 0)
+                if (customerReminder.Levels.Any(x => x.Level == model.Level))
                 {
                     ModelState.AddModelError("Error-LevelExists", _localizationService.GetResource("Admin.Customers.CustomerReminderLevel.Exists"));
                 }
diff --git a/Grand.Web/Areas/Admin/Controllers/CustomerRoleController.cs b/Grand.Web/Areas/Admin/Controllers/CustomerRoleController.cs
index 026d47d36..4c6f10675 100644
--- a/Grand.Web/Areas/Admin/Controllers/CustomerRoleController.cs
+++ b/Grand.Web/Areas/Admin/Controllers/CustomerRoleController.cs
@@ -175,7 +175,7 @@ public async Task<IActionResult> Products(string customerRoleId, DataSourceReque
             var products = await _customerRoleViewModelService.PrepareCustomerRoleProductModel(customerRoleId);
             var gridModel = new DataSourceResult {
                 Data = products,
-                Total = products.Count()
+                Total = products.Count
             };
             return Json(gridModel);
         }
@@ -268,7 +268,7 @@ public async Task<IActionResult> Acl(string customerRoleId)
 
             var gridModel = new DataSourceResult {
                 Data = model,
-                Total = model.Count()
+                Total = model.Count
             };
             return Json(gridModel);
         }
diff --git a/Grand.Web/Areas/Admin/Controllers/CustomerTagController.cs b/Grand.Web/Areas/Admin/Controllers/CustomerTagController.cs
index 240a219b8..bb6d249bc 100644
--- a/Grand.Web/Areas/Admin/Controllers/CustomerTagController.cs
+++ b/Grand.Web/Areas/Admin/Controllers/CustomerTagController.cs
@@ -60,7 +60,7 @@ public async Task<IActionResult> List(DataSourceRequest command)
             var gridModel = new DataSourceResult
             {
                 Data = items.Select(x => new { Id = x.Id, Name = x.Name, Count = x.Count }),
-                Total = customertags.Count()
+                Total = customertags.Count
             };
             return Json(gridModel);
         }
@@ -211,7 +211,7 @@ public async Task<IActionResult> Products(string customerTagId, DataSourceReques
             var gridModel = new DataSourceResult
             {
                 Data = items,
-                Total = products.Count()
+                Total = products.Count
             };
             return Json(gridModel);
         }
diff --git a/Grand.Web/Areas/Admin/Controllers/DownloadController.cs b/Grand.Web/Areas/Admin/Controllers/DownloadController.cs
index c43630091..8bc4c2207 100644
--- a/Grand.Web/Areas/Admin/Controllers/DownloadController.cs
+++ b/Grand.Web/Areas/Admin/Controllers/DownloadController.cs
@@ -31,7 +31,7 @@ public async Task<IActionResult> DownloadFile(Guid downloadGuid)
 
             //use stored data
             if (download.DownloadBinary == null)
-                return Content(string.Format("Download data is not available any more. Download GD={0}", download.Id));
+                return Content($"Download data is not available any more. Download GD={download.Id}");
 
             string fileName = !String.IsNullOrWhiteSpace(download.Filename) ? download.Filename : download.Id.ToString();
             string contentType = !String.IsNullOrWhiteSpace(download.ContentType)
diff --git a/Grand.Web/Areas/Admin/Controllers/EmailAccountController.cs b/Grand.Web/Areas/Admin/Controllers/EmailAccountController.cs
index 7f34c1667..1b80f87c6 100644
--- a/Grand.Web/Areas/Admin/Controllers/EmailAccountController.cs
+++ b/Grand.Web/Areas/Admin/Controllers/EmailAccountController.cs
@@ -60,7 +60,7 @@ public async Task<IActionResult> List(DataSourceRequest command)
             var gridModel = new DataSourceResult
             {
                 Data = emailAccountModels,
-                Total = emailAccountModels.Count()
+                Total = emailAccountModels.Count
             };
 
             return Json(gridModel);
diff --git a/Grand.Web/Areas/Admin/Controllers/HomeController.cs b/Grand.Web/Areas/Admin/Controllers/HomeController.cs
index b1b7f594f..e5ffcddeb 100644
--- a/Grand.Web/Areas/Admin/Controllers/HomeController.cs
+++ b/Grand.Web/Areas/Admin/Controllers/HomeController.cs
@@ -187,11 +187,11 @@ public IActionResult AccessDenied(string pageUrl)
             var currentCustomer = _workContext.CurrentCustomer;
             if (currentCustomer == null || currentCustomer.IsGuest())
             {
-                _logger.Information(string.Format("Access denied to anonymous request on {0}", pageUrl));
+                _logger.Information($"Access denied to anonymous request on {pageUrl}");
                 return View();
             }
 
-            _logger.Information(string.Format("Access denied to user #{0} '{1}' on {2}", currentCustomer.Email, currentCustomer.Email, pageUrl));
+            _logger.Information($"Access denied to user #{currentCustomer.Email} '{currentCustomer.Email}' on {pageUrl}");
 
 
             return View();
diff --git a/Grand.Web/Areas/Admin/Controllers/InteractiveFormController.cs b/Grand.Web/Areas/Admin/Controllers/InteractiveFormController.cs
index 37db49e7f..128736ef9 100644
--- a/Grand.Web/Areas/Admin/Controllers/InteractiveFormController.cs
+++ b/Grand.Web/Areas/Admin/Controllers/InteractiveFormController.cs
@@ -346,7 +346,7 @@ public async Task<IActionResult> AttributeValuesList(string formId, string aId)
                     IsPreSelected = x.IsPreSelected,
                     DisplayOrder = x.DisplayOrder,
                 }).OrderBy(x=>x.DisplayOrder),
-                Total = values.Count()
+                Total = values.Count
             };
             return Json(gridModel);
         }
@@ -413,7 +413,7 @@ public async Task<IActionResult> ValueEditPopup(string id, string form, string a
             if (attribute == null)
                 return RedirectToAction("List");
 
-            var vaf = attribute.FormAttributeValues.Where(x => x.Id == id).FirstOrDefault();
+            var vaf = attribute.FormAttributeValues.FirstOrDefault(x => x.Id == id);
             if (vaf == null)
                 return RedirectToAction("List");
 
@@ -441,7 +441,7 @@ public async Task<IActionResult> ValueEditPopup(string btnId, string formId, str
             if (attribute == null)
                 return RedirectToAction("List");
 
-            var vaf = attribute.FormAttributeValues.Where(x => x.Id == model.Id).FirstOrDefault();
+            var vaf = attribute.FormAttributeValues.FirstOrDefault(x => x.Id == model.Id);
             if (vaf == null)
                 return RedirectToAction("List");
 
@@ -470,7 +470,7 @@ public async Task<IActionResult> AttributeValuesDelete(string id, string formId,
             if (attribute == null)
                 return RedirectToAction("List");
 
-            var vaf = attribute.FormAttributeValues.Where(x => x.Id == id).FirstOrDefault();
+            var vaf = attribute.FormAttributeValues.FirstOrDefault(x => x.Id == id);
             if (vaf == null)
                 return RedirectToAction("List");
 
diff --git a/Grand.Web/Areas/Admin/Controllers/JbimagesController.cs b/Grand.Web/Areas/Admin/Controllers/JbimagesController.cs
index d4aa45228..4b994d4bb 100644
--- a/Grand.Web/Areas/Admin/Controllers/JbimagesController.cs
+++ b/Grand.Web/Areas/Admin/Controllers/JbimagesController.cs
@@ -71,7 +71,7 @@ public virtual async Task<IActionResult> Upload()
             if (!GetAllowedFileTypes().Contains(fileExtension))
             {
                 ViewData["resultCode"] = "failed";
-                ViewData["result"] = string.Format("Files with {0} extension cannot be uploaded", fileExtension);
+                ViewData["result"] = $"Files with {fileExtension} extension cannot be uploaded";
                 return View();
             }
 
@@ -82,7 +82,7 @@ public virtual async Task<IActionResult> Upload()
 
             ViewData["resultCode"] = "success";
             ViewData["result"] = "success";
-            ViewData["filename"] = this.Url.Content(string.Format("{0}{1}", directory, fileName));
+            ViewData["filename"] = this.Url.Content($"{directory}{fileName}");
             return View();
         }
     }
diff --git a/Grand.Web/Areas/Admin/Controllers/LanguageController.cs b/Grand.Web/Areas/Admin/Controllers/LanguageController.cs
index eff0eeee1..a58329a99 100644
--- a/Grand.Web/Areas/Admin/Controllers/LanguageController.cs
+++ b/Grand.Web/Areas/Admin/Controllers/LanguageController.cs
@@ -58,7 +58,7 @@ public async Task<IActionResult> List(DataSourceRequest command)
             var languages = await _languageService.GetAllLanguages(true);
             var gridModel = new DataSourceResult {
                 Data = languages.Select(x => x.ToModel()),
-                Total = languages.Count()
+                Total = languages.Count
             };
             return Json(gridModel);
         }
diff --git a/Grand.Web/Areas/Admin/Controllers/NewsLetterSubscriptionController.cs b/Grand.Web/Areas/Admin/Controllers/NewsLetterSubscriptionController.cs
index 1542b454c..311e93cb6 100644
--- a/Grand.Web/Areas/Admin/Controllers/NewsLetterSubscriptionController.cs
+++ b/Grand.Web/Areas/Admin/Controllers/NewsLetterSubscriptionController.cs
@@ -193,7 +193,7 @@ public async Task<IActionResult> ExportCsv(NewsLetterSubscriptionListModel model
 
             string result = _exportManager.ExportNewsletterSubscribersToTxt(subscriptions);
 
-            string fileName = String.Format("newsletter_emails_{0}_{1}.txt", DateTime.Now.ToString("yyyy-MM-dd-HH-mm-ss"), CommonHelper.GenerateRandomDigitCode(4));
+            string fileName = $"newsletter_emails_{DateTime.Now.ToString("yyyy-MM-dd-HH-mm-ss")}_{CommonHelper.GenerateRandomDigitCode(4)}.txt";
             return File(Encoding.UTF8.GetBytes(result), "text/csv", fileName);
         }
 
diff --git a/Grand.Web/Areas/Admin/Controllers/OrderController.cs b/Grand.Web/Areas/Admin/Controllers/OrderController.cs
index d29567437..826cd3889 100644
--- a/Grand.Web/Areas/Admin/Controllers/OrderController.cs
+++ b/Grand.Web/Areas/Admin/Controllers/OrderController.cs
@@ -708,7 +708,7 @@ public async Task<IActionResult> ChangeOrderStatus(string id, OrderModel model)
 
                 //add a note
                 await _orderService.InsertOrderNote(new OrderNote {
-                    Note = string.Format("Order status has been edited. New status: {0}", order.OrderStatus.GetLocalizedEnum(_localizationService, _workContext)),
+                    Note = $"Order status has been edited. New status: {order.OrderStatus.GetLocalizedEnum(_localizationService, _workContext)}",
                     DisplayToCustomer = false,
                     CreatedOnUtc = DateTime.UtcNow,
                     OrderId = order.Id,
@@ -830,7 +830,7 @@ public async Task<IActionResult> PdfInvoice(string orderId)
                 await _pdfService.PrintOrdersToPdf(stream, orders, _workContext.WorkingLanguage.Id, vendorId);
                 bytes = stream.ToArray();
             }
-            return File(bytes, "application/pdf", string.Format("order_{0}.pdf", order.Id));
+            return File(bytes, "application/pdf", $"order_{order.Id}.pdf");
         }
 
         [PermissionAuthorizeAction(PermissionActionName.Export)]
@@ -1175,7 +1175,7 @@ public async Task<IActionResult> EditGenericAttributes(string id, OrderModel mod
             var shipments = (await shipmentService.GetShipmentsByOrder(order.Id));
             foreach (var shipment in shipments)
             {
-                if (shipment.ShipmentItems.Where(x => x.OrderItemId == orderItemId).Any())
+                if (shipment.ShipmentItems.Any(x => x.OrderItemId == orderItemId))
                 {
                     ErrorNotification($"This order item is in associated with shipment {shipment.ShipmentNumber}. Please delete it first.", false);
                     //selected tab
diff --git a/Grand.Web/Areas/Admin/Controllers/OrderTagsController.cs b/Grand.Web/Areas/Admin/Controllers/OrderTagsController.cs
index a5007ff72..157f5c0be 100644
--- a/Grand.Web/Areas/Admin/Controllers/OrderTagsController.cs
+++ b/Grand.Web/Areas/Admin/Controllers/OrderTagsController.cs
@@ -54,7 +54,7 @@ public async Task<IActionResult> List(DataSourceRequest command)
 
             var gridModel = new DataSourceResult {
                 Data = orderTagsList.OrderByDescending(x => x.OrderCount).PagedForCommand(command),
-                Total = tags.Count()
+                Total = tags.Count
             };
 
             return Json(gridModel);
diff --git a/Grand.Web/Areas/Admin/Controllers/PluginController.cs b/Grand.Web/Areas/Admin/Controllers/PluginController.cs
index 0cc9ee4d3..afffd858d 100644
--- a/Grand.Web/Areas/Admin/Controllers/PluginController.cs
+++ b/Grand.Web/Areas/Admin/Controllers/PluginController.cs
@@ -141,17 +141,17 @@ public partial class PluginController : BaseAdminController
 
 
                 //enabled/disabled (only for some plugin types)
-                if (pluginInstance is IPaymentMethod)
+                if (pluginInstance is IPaymentMethod iPaymentMethod)
                 {
                     //payment plugin
                     pluginModel.CanChangeEnabled = true;
-                    pluginModel.IsEnabled = ((IPaymentMethod)pluginInstance).IsPaymentMethodActive(_paymentSettings);
+                    pluginModel.IsEnabled = iPaymentMethod.IsPaymentMethodActive(_paymentSettings);
                 }
-                else if (pluginInstance is IShippingRateComputationMethod)
+                else if (pluginInstance is IShippingRateComputationMethod iShippingRateComputationMethod)
                 {
                     //shipping rate computation method
                     pluginModel.CanChangeEnabled = true;
-                    pluginModel.IsEnabled = ((IShippingRateComputationMethod)pluginInstance).IsShippingRateComputationMethodActive(_shippingSettings);
+                    pluginModel.IsEnabled = iShippingRateComputationMethod.IsShippingRateComputationMethodActive(_shippingSettings);
                 }
                 else if (pluginInstance is ITaxProvider)
                 {
@@ -159,17 +159,17 @@ public partial class PluginController : BaseAdminController
                     pluginModel.CanChangeEnabled = true;
                     pluginModel.IsEnabled = pluginDescriptor.SystemName.Equals(_taxSettings.ActiveTaxProviderSystemName, StringComparison.OrdinalIgnoreCase);
                 }
-                else if (pluginInstance is IExternalAuthenticationMethod)
+                else if (pluginInstance is IExternalAuthenticationMethod iExternalAuthenticationMethod)
                 {
                     //external auth method
                     pluginModel.CanChangeEnabled = true;
-                    pluginModel.IsEnabled = ((IExternalAuthenticationMethod)pluginInstance).IsMethodActive(_externalAuthenticationSettings);
+                    pluginModel.IsEnabled = iExternalAuthenticationMethod.IsMethodActive(_externalAuthenticationSettings);
                 }
-                else if (pluginInstance is IWidgetPlugin)
+                else if (pluginInstance is IWidgetPlugin iWidgetPlugin)
                 {
                     //Misc plugins
                     pluginModel.CanChangeEnabled = true;
-                    pluginModel.IsEnabled = ((IWidgetPlugin)pluginInstance).IsWidgetActive(_widgetSettings);
+                    pluginModel.IsEnabled = iWidgetPlugin.IsWidgetActive(_widgetSettings);
                 }
 
             }
@@ -249,7 +249,7 @@ public async Task<IActionResult> ListSelect(DataSourceRequest command, PluginLis
             }
             var gridModel = new DataSourceResult {
                 Data = items,
-                Total = pluginDescriptors.Count()
+                Total = pluginDescriptors.Count
             };
             return Json(gridModel);
         }
@@ -498,7 +498,7 @@ private IDescriptor UploadSingleItem(string archivePath)
                 //get directory name (remove the ending /)
                 uploadedItemDirectoryName = rootDirectories.First().FullName.TrimEnd('/');
 
-                var themeDescriptorEntry = archive.Entries.Where(x => x.FullName.Contains("theme.cfg")).FirstOrDefault();
+                var themeDescriptorEntry = archive.Entries.FirstOrDefault(x => x.FullName.Contains("theme.cfg"));
                 if (themeDescriptorEntry != null)
                 {
                     using var unzippedEntryStream = themeDescriptorEntry.Open();
diff --git a/Grand.Web/Areas/Admin/Controllers/PollController.cs b/Grand.Web/Areas/Admin/Controllers/PollController.cs
index 99715e104..2a87d20c6 100644
--- a/Grand.Web/Areas/Admin/Controllers/PollController.cs
+++ b/Grand.Web/Areas/Admin/Controllers/PollController.cs
@@ -261,7 +261,7 @@ public async Task<IActionResult> PollAnswerCreatePopup(PollAnswerModel model)
         [PermissionAuthorizeAction(PermissionActionName.Edit)]
         public async Task<IActionResult> PollAnswerEditPopup(string id, string pollId)
         {
-            var pollAnswer = (await _pollService.GetPollById(pollId)).PollAnswers.Where(x => x.Id == id).FirstOrDefault();
+            var pollAnswer = (await _pollService.GetPollById(pollId)).PollAnswers.FirstOrDefault(x => x.Id == id);
             if (pollAnswer == null)
                 //No poll answer found with the specified id
                 return RedirectToAction("List");
@@ -285,7 +285,7 @@ public async Task<IActionResult> PollAnswerEditPopup(PollAnswerModel model)
                 //No poll found with the specified id
                 return RedirectToAction("List");
 
-            var pollAnswer = poll.PollAnswers.Where(x => x.Id == model.Id).FirstOrDefault();
+            var pollAnswer = poll.PollAnswers.FirstOrDefault(x => x.Id == model.Id);
             if (pollAnswer == null)
                 //No poll answer found with the specified id
                 return RedirectToAction("List");
@@ -308,7 +308,7 @@ public async Task<IActionResult> PollAnswerEditPopup(PollAnswerModel model)
         public async Task<IActionResult> PollAnswerDelete(PollAnswer answer)
         {
             var pol = (await _pollService.GetPolls()).FirstOrDefault(x => x.PollAnswers.Any(y => y.Id == answer.Id));
-            var pollAnswer = pol.PollAnswers.Where(x => x.Id == answer.Id).FirstOrDefault();
+            var pollAnswer = pol.PollAnswers.FirstOrDefault(x => x.Id == answer.Id);
             if (pollAnswer == null)
                 throw new ArgumentException("No poll answer found with the specified id", "id");
             if (ModelState.IsValid)
diff --git a/Grand.Web/Areas/Admin/Controllers/ProductAttributeController.cs b/Grand.Web/Areas/Admin/Controllers/ProductAttributeController.cs
index 5c40a3170..ece0bf504 100644
--- a/Grand.Web/Areas/Admin/Controllers/ProductAttributeController.cs
+++ b/Grand.Web/Areas/Admin/Controllers/ProductAttributeController.cs
@@ -258,7 +258,7 @@ public async Task<IActionResult> PredefinedProductAttributeValueList(string prod
             var gridModel = new DataSourceResult
             {
                 Data = values.Select(x =>x.ToModel()),
-                Total = values.Count(),
+                Total = values.Count,
             };
 
             return Json(gridModel);
@@ -308,7 +308,7 @@ public async Task<IActionResult> PredefinedProductAttributeValueCreatePopup(Pred
         [PermissionAuthorizeAction(PermissionActionName.Edit)]
         public async Task<IActionResult> PredefinedProductAttributeValueEditPopup(string id, string productAttributeId)
         {
-            var ppav = (await _productAttributeService.GetProductAttributeById(productAttributeId)).PredefinedProductAttributeValues.Where(x=>x.Id == id).FirstOrDefault();
+            var ppav = (await _productAttributeService.GetProductAttributeById(productAttributeId)).PredefinedProductAttributeValues.FirstOrDefault(x=>x.Id == id);
             if (ppav == null)
                 throw new ArgumentException("No product attribute value found with the specified id");
 
@@ -326,7 +326,7 @@ public async Task<IActionResult> PredefinedProductAttributeValueEditPopup(string
         public async Task<IActionResult> PredefinedProductAttributeValueEditPopup(PredefinedProductAttributeValueModel model)
         {
             var productAttribute = await _productAttributeService.GetProductAttributeById(model.ProductAttributeId);
-            var ppav = productAttribute.PredefinedProductAttributeValues.Where(x=>x.Id == model.Id).FirstOrDefault();
+            var ppav = productAttribute.PredefinedProductAttributeValues.FirstOrDefault(x=>x.Id == model.Id);
             if (ppav == null)
                 throw new ArgumentException("No product attribute value found with the specified id");
 
@@ -350,7 +350,7 @@ public async Task<IActionResult> PredefinedProductAttributeValueDelete(string id
             if (ModelState.IsValid)
             {
                 var productAttribute = (await _productAttributeService.GetAllProductAttributes()).FirstOrDefault(x=>x.PredefinedProductAttributeValues.Any(y=>y.Id == id));
-                var ppav = productAttribute.PredefinedProductAttributeValues.Where(x => x.Id == id).FirstOrDefault();
+                var ppav = productAttribute.PredefinedProductAttributeValues.FirstOrDefault(x => x.Id == id);
                 if (ppav == null)
                     throw new ArgumentException("No predefined product attribute value found with the specified id");
                 productAttribute.PredefinedProductAttributeValues.Remove(ppav);
diff --git a/Grand.Web/Areas/Admin/Controllers/ProductController.cs b/Grand.Web/Areas/Admin/Controllers/ProductController.cs
index f1f509b1d..87fd470b6 100644
--- a/Grand.Web/Areas/Admin/Controllers/ProductController.cs
+++ b/Grand.Web/Areas/Admin/Controllers/ProductController.cs
@@ -920,7 +920,7 @@ public async Task<IActionResult> CrossSellProductDelete(ProductModel.CrossSellPr
             {
                 throw new ArgumentException("Product not exists");
             }
-            var crossSellProduct = product.CrossSellProduct.Where(x => x == model.Id).FirstOrDefault();
+            var crossSellProduct = product.CrossSellProduct.FirstOrDefault(x => x == model.Id);
             if (string.IsNullOrEmpty(crossSellProduct))
                 throw new ArgumentException("No cross-sell product found with the specified id");
 
@@ -1242,7 +1242,7 @@ public async Task<IActionResult> ProductSpecAttrDelete(ProductSpecificationAttri
                 if (product == null)
                     return Content("Product not exists");
 
-                var psa = product.ProductSpecificationAttributes.Where(x => x.Id == model.Id && x.SpecificationAttributeId == model.ProductSpecificationId).FirstOrDefault();
+                var psa = product.ProductSpecificationAttributes.FirstOrDefault(x => x.Id == model.Id && x.SpecificationAttributeId == model.ProductSpecificationId);
                 if (psa == null)
                     throw new ArgumentException("No specification attribute found with the specified id");
 
@@ -1553,7 +1553,7 @@ public async Task<IActionResult> ProductPriceInsert(string productId, ProductMod
             if (product == null)
                 throw new ArgumentException("No product found with the specified id");
 
-            if (product.ProductPrices.Where(x => x.CurrencyCode == model.CurrencyCode).Any())
+            if (product.ProductPrices.Any(x => x.CurrencyCode == model.CurrencyCode))
                 ModelState.AddModelError("", "Currency code exists");
 
             if (ModelState.IsValid)
@@ -1587,7 +1587,7 @@ public async Task<IActionResult> ProductPriceUpdate(string productId, ProductMod
             if (productPrice == null)
                 ModelState.AddModelError("", "Product price model not exists");
 
-            if (product.ProductPrices.Where(x => x.Id != model.Id && x.CurrencyCode == model.CurrencyCode).Any())
+            if (product.ProductPrices.Any(x => x.Id != model.Id && x.CurrencyCode == model.CurrencyCode))
                 ModelState.AddModelError("", "You can't use this currency code");
 
             if (ModelState.IsValid)
@@ -1696,7 +1696,7 @@ public async Task<IActionResult> TierPriceEditPopup(string id, string productId)
             if (product == null)
                 throw new ArgumentException("No product found with the specified id");
 
-            var tierPrice = product.TierPrices.Where(x => x.Id == id).FirstOrDefault();
+            var tierPrice = product.TierPrices.FirstOrDefault(x => x.Id == id);
             if (tierPrice == null)
                 return Content("Empty tier price");
 
@@ -1720,7 +1720,7 @@ public async Task<IActionResult> TierPriceEditPopup(string productId, ProductMod
                 if (product == null)
                     throw new ArgumentException("No product found with the specified id");
 
-                var tierPrice = product.TierPrices.Where(x => x.Id == model.Id).FirstOrDefault();
+                var tierPrice = product.TierPrices.FirstOrDefault(x => x.Id == model.Id);
                 if (tierPrice == null)
                     return Content("Empty tier price");
 
@@ -1746,7 +1746,7 @@ public async Task<IActionResult> TierPriceDelete(ProductModel.TierPriceModel mod
                 if (product == null)
                     throw new ArgumentException("No product found with the specified id");
 
-                var tierPrice = product.TierPrices.Where(x => x.Id == model.Id).FirstOrDefault();
+                var tierPrice = product.TierPrices.FirstOrDefault(x => x.Id == model.Id);
                 if (tierPrice == null)
                     throw new ArgumentException("No tier price found with the specified id");
                 tierPrice.ProductId = product.Id;
@@ -1833,7 +1833,7 @@ public async Task<IActionResult> ProductAttributeMappingDelete(string id, string
             if (product == null)
                 throw new ArgumentException("No product found with the specified id");
 
-            var productAttributeMapping = product.ProductAttributeMappings.Where(x => x.Id == id).FirstOrDefault();
+            var productAttributeMapping = product.ProductAttributeMappings.FirstOrDefault(x => x.Id == id);
             if (productAttributeMapping == null)
                 throw new ArgumentException("No product attribute mapping found with the specified id");
 
@@ -1860,7 +1860,7 @@ public async Task<IActionResult> ProductAttributeValidationRulesPopup(string id,
             if (!permission.allow)
                 return Content(permission.message);
 
-            var productAttributeMapping = product.ProductAttributeMappings.Where(x => x.Id == id).FirstOrDefault();
+            var productAttributeMapping = product.ProductAttributeMappings.FirstOrDefault(x => x.Id == id);
             if (productAttributeMapping == null)
                 return Content("No attribute value found with the specified id");
 
@@ -1877,7 +1877,7 @@ public async Task<IActionResult> ProductAttributeValidationRulesPopup(ProductMod
             if (product == null)
                 throw new ArgumentException("No product found with the specified id");
 
-            var productAttributeMapping = product.ProductAttributeMappings.Where(x => x.Id == model.Id).FirstOrDefault();
+            var productAttributeMapping = product.ProductAttributeMappings.FirstOrDefault(x => x.Id == model.Id);
             if (productAttributeMapping == null)
                 throw new ArgumentException("No attribute value found with the specified id");
 
@@ -1905,7 +1905,7 @@ public async Task<IActionResult> ProductAttributeConditionPopup(string productId
             if (!permission.allow)
                 return Content(permission.message);
 
-            var productAttributeMapping = product.ProductAttributeMappings.Where(x => x.Id == productAttributeMappingId).FirstOrDefault();
+            var productAttributeMapping = product.ProductAttributeMappings.FirstOrDefault(x => x.Id == productAttributeMappingId);
             if (productAttributeMapping == null)
                 //No attribute value found with the specified id
                 return Content("No attribute value found with the specified id");
@@ -1922,7 +1922,7 @@ public async Task<IActionResult> ProductAttributeConditionPopup(ProductAttribute
             if (product == null)
                 throw new ArgumentException("No product found with the specified id");
 
-            var productAttributeMapping = product.ProductAttributeMappings.Where(x => x.Id == model.ProductAttributeMappingId).FirstOrDefault();
+            var productAttributeMapping = product.ProductAttributeMappings.FirstOrDefault(x => x.Id == model.ProductAttributeMappingId);
             if (productAttributeMapping == null)
                 return Content("No attribute value found with the specified id");
 
@@ -1956,7 +1956,7 @@ public async Task<IActionResult> EditAttributeValues(string productAttributeMapp
             if (product == null)
                 throw new ArgumentException("No product found with the specified id");
 
-            var productAttributeMapping = product.ProductAttributeMappings.Where(x => x.Id == productAttributeMappingId).FirstOrDefault();
+            var productAttributeMapping = product.ProductAttributeMappings.FirstOrDefault(x => x.Id == productAttributeMappingId);
             if (productAttributeMapping == null)
                 throw new ArgumentException("No product attribute mapping found with the specified id");
 
@@ -1990,14 +1990,14 @@ public async Task<IActionResult> ProductAttributeValueList(string productAttribu
             if (!permission.allow)
                 return ErrorForKendoGridJson(permission.message);
 
-            var productAttributeMapping = product.ProductAttributeMappings.Where(x => x.Id == productAttributeMappingId).FirstOrDefault();
+            var productAttributeMapping = product.ProductAttributeMappings.FirstOrDefault(x => x.Id == productAttributeMappingId);
             if (productAttributeMapping == null)
                 throw new ArgumentException("No product attribute mapping found with the specified id");
 
             var values = await _productViewModelService.PrepareProductAttributeValueModels(product, productAttributeMapping);
             var gridModel = new DataSourceResult {
                 Data = values,
-                Total = values.Count()
+                Total = values.Count
             };
             return Json(gridModel);
         }
@@ -2012,7 +2012,7 @@ public async Task<IActionResult> ProductAttributeValueCreatePopup(string product
             if (!permission.allow)
                 return Content(permission.message);
 
-            var productAttributeMapping = product.ProductAttributeMappings.Where(x => x.Id == productAttributeMappingId).FirstOrDefault();
+            var productAttributeMapping = product.ProductAttributeMappings.FirstOrDefault(x => x.Id == productAttributeMappingId);
             if (productAttributeMapping == null)
                 throw new ArgumentException("No product attribute mapping found with the specified id");
 
@@ -2031,7 +2031,7 @@ public async Task<IActionResult> ProductAttributeValueCreatePopup(ProductModel.P
             if (product == null)
                 throw new ArgumentException("No product found with the specified id");
 
-            var productAttributeMapping = product.ProductAttributeMappings.Where(x => x.Id == model.ProductAttributeMappingId).FirstOrDefault();
+            var productAttributeMapping = product.ProductAttributeMappings.FirstOrDefault(x => x.Id == model.ProductAttributeMappingId);
             if (productAttributeMapping == null)
                 //No product attribute found with the specified id
                 return RedirectToAction("List", "Product");
@@ -2070,11 +2070,11 @@ public async Task<IActionResult> ProductAttributeValueEditPopup(string id, strin
             if (!permission.allow)
                 return ErrorForKendoGridJson(permission.message);
 
-            var pa = product.ProductAttributeMappings.Where(x => x.Id == productAttributeMappingId).FirstOrDefault();
+            var pa = product.ProductAttributeMappings.FirstOrDefault(x => x.Id == productAttributeMappingId);
             if (pa == null)
                 return RedirectToAction("List", "Product");
 
-            var pav = pa.ProductAttributeValues.Where(x => x.Id == id).FirstOrDefault();
+            var pav = pa.ProductAttributeValues.FirstOrDefault(x => x.Id == id);
             if (pav == null)
                 //No attribute value found with the specified id
                 return RedirectToAction("List", "Product");
@@ -2098,12 +2098,12 @@ public async Task<IActionResult> ProductAttributeValueEditPopup(string productId
             if (product == null)
                 throw new ArgumentException("No product found with the specified id");
 
-            var pav = product.ProductAttributeMappings.Where(x => x.Id == model.ProductAttributeMappingId).FirstOrDefault().ProductAttributeValues.Where(x => x.Id == model.Id).FirstOrDefault();
+            var pav = product.ProductAttributeMappings.FirstOrDefault(x => x.Id == model.ProductAttributeMappingId).ProductAttributeValues.Where(x => x.Id == model.Id).FirstOrDefault();
             if (pav == null)
                 //No attribute value found with the specified id
                 return RedirectToAction("List", "Product");
 
-            var productAttributeMapping = product.ProductAttributeMappings.Where(x => x.Id == model.ProductAttributeMappingId).FirstOrDefault();
+            var productAttributeMapping = product.ProductAttributeMappings.FirstOrDefault(x => x.Id == model.ProductAttributeMappingId);
             if (productAttributeMapping.AttributeControlType == AttributeControlType.ColorSquares)
             {
                 //ensure valid color is chosen/entered
@@ -2137,7 +2137,7 @@ public async Task<IActionResult> ProductAttributeValueDelete(string Id, string p
             if (product == null)
                 throw new ArgumentException("No product found with the specified id");
 
-            var pav = product.ProductAttributeMappings.Where(x => x.Id == pam).FirstOrDefault().ProductAttributeValues.Where(x => x.Id == Id).FirstOrDefault();
+            var pav = product.ProductAttributeMappings.FirstOrDefault(x => x.Id == pam).ProductAttributeValues.Where(x => x.Id == Id).FirstOrDefault();
             if (pav == null)
                 throw new ArgumentException("No product attribute value found with the specified id");
 
@@ -2229,7 +2229,7 @@ public async Task<IActionResult> ProductAttributeCombinationDelete(string id, st
             if (product == null)
                 throw new ArgumentException("No product found with the specified id");
 
-            var combination = product.ProductAttributeCombinations.Where(x => x.Id == id).FirstOrDefault();
+            var combination = product.ProductAttributeCombinations.FirstOrDefault(x => x.Id == id);
             if (combination == null)
                 throw new ArgumentException("No product attribute combination found with the specified id");
 
diff --git a/Grand.Web/Areas/Admin/Controllers/ProductTagsController.cs b/Grand.Web/Areas/Admin/Controllers/ProductTagsController.cs
index 666deb4df..7776fcb9c 100644
--- a/Grand.Web/Areas/Admin/Controllers/ProductTagsController.cs
+++ b/Grand.Web/Areas/Admin/Controllers/ProductTagsController.cs
@@ -54,7 +54,7 @@ public async Task<IActionResult> List(DataSourceRequest command)
             var gridModel = new DataSourceResult
             {
                 Data = productTags.OrderByDescending(x=>x.ProductCount).PagedForCommand(command),
-                Total = tags.Count()
+                Total = tags.Count
             };
 
             return Json(gridModel);
diff --git a/Grand.Web/Areas/Admin/Controllers/ReportsController.cs b/Grand.Web/Areas/Admin/Controllers/ReportsController.cs
index bbbac9e93..366d862b0 100644
--- a/Grand.Web/Areas/Admin/Controllers/ReportsController.cs
+++ b/Grand.Web/Areas/Admin/Controllers/ReportsController.cs
@@ -433,7 +433,7 @@ public async Task<IActionResult> ReportLatestOrder(DataSourceRequest command, Da
                     PaymentStatus = x.PaymentStatus.GetLocalizedEnum(_localizationService, _workContext),
                     ShippingStatus = x.ShippingStatus.GetLocalizedEnum(_localizationService, _workContext),
                     CustomerEmail = x.BillingAddress.Email,
-                    CustomerFullName = string.Format("{0} {1}", x.BillingAddress.FirstName, x.BillingAddress.LastName),
+                    CustomerFullName = $"{x.BillingAddress.FirstName} {x.BillingAddress.LastName}",
                     CreatedOn = _dateTimeHelper.ConvertToUserTime(x.CreatedOnUtc, DateTimeKind.Utc)
                 });
             }
diff --git a/Grand.Web/Areas/Admin/Controllers/SearchController.cs b/Grand.Web/Areas/Admin/Controllers/SearchController.cs
index 481d7a6fb..17d727edd 100644
--- a/Grand.Web/Areas/Admin/Controllers/SearchController.cs
+++ b/Grand.Web/Areas/Admin/Controllers/SearchController.cs
@@ -65,9 +65,9 @@ public async Task<IActionResult> Index(string searchTerm, FoundMenuItem[] foundM
 
             if (searchTerm.Length >= _adminSearchSettings.MinSearchTermLength)
             {
-                if (result.Count() < _adminSearchSettings.MaxSearchResultsCount && _adminSearchSettings.SearchInProducts)
+                if (result.Count < _adminSearchSettings.MaxSearchResultsCount && _adminSearchSettings.SearchInProducts)
                 {
-                    var products = (await _productService.SearchProducts(keywords: searchTerm, pageSize: _adminSearchSettings.MaxSearchResultsCount - result.Count(), showHidden: true)).products;
+                    var products = (await _productService.SearchProducts(keywords: searchTerm, pageSize: _adminSearchSettings.MaxSearchResultsCount - result.Count, showHidden: true)).products;
                     foreach (var product in products)
                     {
                         result.Add(new Tuple<object, int>(new
@@ -79,9 +79,9 @@ public async Task<IActionResult> Index(string searchTerm, FoundMenuItem[] foundM
                     }
                 }
 
-                if (result.Count() < _adminSearchSettings.MaxSearchResultsCount && _adminSearchSettings.SearchInCategories)
+                if (result.Count < _adminSearchSettings.MaxSearchResultsCount && _adminSearchSettings.SearchInCategories)
                 {
-                    var categories = await _categoryService.GetAllCategories(searchTerm, pageSize: _adminSearchSettings.MaxSearchResultsCount - result.Count(), showHidden: _workContext.CurrentCustomer.IsAdmin());
+                    var categories = await _categoryService.GetAllCategories(searchTerm, pageSize: _adminSearchSettings.MaxSearchResultsCount - result.Count, showHidden: _workContext.CurrentCustomer.IsAdmin());
                     foreach (var category in categories)
                     {
                         result.Add(new Tuple<object, int>(new
@@ -93,9 +93,9 @@ public async Task<IActionResult> Index(string searchTerm, FoundMenuItem[] foundM
                     }
                 }
 
-                if (result.Count() < _adminSearchSettings.MaxSearchResultsCount && _adminSearchSettings.SearchInManufacturers)
+                if (result.Count < _adminSearchSettings.MaxSearchResultsCount && _adminSearchSettings.SearchInManufacturers)
                 {
-                    var manufacturers = await _manufacturerService.GetAllManufacturers(searchTerm, pageSize: _adminSearchSettings.MaxSearchResultsCount - result.Count(), showHidden: true);
+                    var manufacturers = await _manufacturerService.GetAllManufacturers(searchTerm, pageSize: _adminSearchSettings.MaxSearchResultsCount - result.Count, showHidden: true);
                     foreach (var manufacturer in manufacturers)
                     {
                         result.Add(new Tuple<object, int>(new
@@ -107,7 +107,7 @@ public async Task<IActionResult> Index(string searchTerm, FoundMenuItem[] foundM
                     }
                 }
 
-                if (result.Count() < _adminSearchSettings.MaxSearchResultsCount && _adminSearchSettings.SearchInTopics)
+                if (result.Count < _adminSearchSettings.MaxSearchResultsCount && _adminSearchSettings.SearchInTopics)
                 {
                     var topics = (await _topicService.GetAllTopics("")).Where(x => (x.SystemName != null && x.SystemName.ToLower().Contains(searchTerm.ToLower())) ||
                     (x.Title != null && x.Title.ToLower().Contains(searchTerm.ToLower())));
@@ -122,9 +122,9 @@ public async Task<IActionResult> Index(string searchTerm, FoundMenuItem[] foundM
                     }
                 }
 
-                if (result.Count() < _adminSearchSettings.MaxSearchResultsCount && _adminSearchSettings.SearchInNews)
+                if (result.Count < _adminSearchSettings.MaxSearchResultsCount && _adminSearchSettings.SearchInNews)
                 {
-                    var news = await _newsService.GetAllNews(newsTitle: searchTerm, pageSize: _adminSearchSettings.MaxSearchResultsCount - result.Count(), showHidden: true);
+                    var news = await _newsService.GetAllNews(newsTitle: searchTerm, pageSize: _adminSearchSettings.MaxSearchResultsCount - result.Count, showHidden: true);
                     foreach (var signleNews in news)
                     {
                         result.Add(new Tuple<object, int>(new
@@ -136,9 +136,9 @@ public async Task<IActionResult> Index(string searchTerm, FoundMenuItem[] foundM
                     }
                 }
 
-                if (result.Count() < _adminSearchSettings.MaxSearchResultsCount && _adminSearchSettings.SearchInBlogs)
+                if (result.Count < _adminSearchSettings.MaxSearchResultsCount && _adminSearchSettings.SearchInBlogs)
                 {
-                    var blogPosts = await _blogService.GetAllBlogPosts(blogPostName: searchTerm, pageSize: _adminSearchSettings.MaxSearchResultsCount - result.Count(), showHidden: true);
+                    var blogPosts = await _blogService.GetAllBlogPosts(blogPostName: searchTerm, pageSize: _adminSearchSettings.MaxSearchResultsCount - result.Count, showHidden: true);
                     foreach (var blogPost in blogPosts)
                     {
                         result.Add(new Tuple<object, int>(new
@@ -150,14 +150,14 @@ public async Task<IActionResult> Index(string searchTerm, FoundMenuItem[] foundM
                     }
                 }
 
-                if (result.Count() < _adminSearchSettings.MaxSearchResultsCount && _adminSearchSettings.SearchInCustomers)
+                if (result.Count < _adminSearchSettings.MaxSearchResultsCount && _adminSearchSettings.SearchInCustomers)
                 {
-                    var customersByEmail = await _customerService.GetAllCustomers(email: searchTerm, pageSize: _adminSearchSettings.MaxSearchResultsCount - result.Count());
+                    var customersByEmail = await _customerService.GetAllCustomers(email: searchTerm, pageSize: _adminSearchSettings.MaxSearchResultsCount - result.Count);
                     IPagedList<Customer> customersByUsername = new PagedList<Customer>();
-                    if (_adminSearchSettings.MaxSearchResultsCount - result.Count() - customersByEmail.Count() > 0)
+                    if (_adminSearchSettings.MaxSearchResultsCount - result.Count - customersByEmail.Count() > 0)
                     {
                         customersByUsername = await _customerService.GetAllCustomers(username: searchTerm, pageSize: _adminSearchSettings.MaxSearchResultsCount
-                            - result.Count() - customersByEmail.Count());
+                            - result.Count - customersByEmail.Count());
                     }
                     var combined = customersByEmail.Union(customersByUsername).GroupBy(x => x.Email).Select(x => x.First());
 
@@ -172,11 +172,11 @@ public async Task<IActionResult> Index(string searchTerm, FoundMenuItem[] foundM
                     }
                 }
 
-                if (result.Count() < _adminSearchSettings.MaxSearchResultsCount && _adminSearchSettings.SearchInMenu && foundMenuItems != null && foundMenuItems.Any())
+                if (result.Count < _adminSearchSettings.MaxSearchResultsCount && _adminSearchSettings.SearchInMenu && foundMenuItems != null&& foundMenuItems.Any())
                 {
                     foreach (var menuItem in foundMenuItems)
                     {
-                        if (result.Count() >= _adminSearchSettings.MaxSearchResultsCount)
+                        if (result.Count >= _adminSearchSettings.MaxSearchResultsCount)
                             break;
 
                         string formatted = _localizationService.GetResource("Admin.AdminSearch.Menu") + " > ";
@@ -199,7 +199,7 @@ public async Task<IActionResult> Index(string searchTerm, FoundMenuItem[] foundM
                 }
             }
 
-            if (result.Count() < _adminSearchSettings.MaxSearchResultsCount && _adminSearchSettings.SearchInOrders)
+            if (result.Count < _adminSearchSettings.MaxSearchResultsCount && _adminSearchSettings.SearchInOrders)
             {
                 int.TryParse(searchTerm, out int orderNumber);
                 if (orderNumber > 0)
diff --git a/Grand.Web/Areas/Admin/Controllers/SecurityController.cs b/Grand.Web/Areas/Admin/Controllers/SecurityController.cs
index d7374b242..9d018bede 100644
--- a/Grand.Web/Areas/Admin/Controllers/SecurityController.cs
+++ b/Grand.Web/Areas/Admin/Controllers/SecurityController.cs
@@ -77,7 +77,7 @@ public async Task<IActionResult> Permissions()
             foreach (var pr in permissionRecords)
                 foreach (var cr in customerRoles)
                 {
-                    bool allowed = pr.CustomerRoles.Count(x => x == cr.Id) > 0;
+                    bool allowed = pr.CustomerRoles.Any(x => x == cr.Id);
                     if (!model.Allowed.ContainsKey(pr.SystemName))
                         model.Allowed[pr.SystemName] = new Dictionary<string, bool>();
                     model.Allowed[pr.SystemName][cr.Id] = allowed;
diff --git a/Grand.Web/Areas/Admin/Controllers/SettingController.cs b/Grand.Web/Areas/Admin/Controllers/SettingController.cs
index 5262a2a3b..6391ce732 100644
--- a/Grand.Web/Areas/Admin/Controllers/SettingController.cs
+++ b/Grand.Web/Areas/Admin/Controllers/SettingController.cs
@@ -2020,7 +2020,7 @@ public async Task<IActionResult> AllSettings(DataSourceRequest command, SettingF
             }
             var gridModel = new DataSourceResult {
                 Data = settings.PagedForCommand(command).ToList(),
-                Total = settings.Count()
+                Total = settings.Count
             };
 
             return Json(gridModel);
diff --git a/Grand.Web/Areas/Admin/Controllers/ShipmentController.cs b/Grand.Web/Areas/Admin/Controllers/ShipmentController.cs
index 9b51e623e..6e216b303 100644
--- a/Grand.Web/Areas/Admin/Controllers/ShipmentController.cs
+++ b/Grand.Web/Areas/Admin/Controllers/ShipmentController.cs
@@ -650,7 +650,7 @@ public async Task<IActionResult> PdfPackagingSlip(string shipmentId)
                 await _pdfService.PrintPackagingSlipsToPdf(stream, shipments, _workContext.WorkingLanguage.Id);
                 bytes = stream.ToArray();
             }
-            return File(bytes, "application/pdf", string.Format("packagingslip_{0}.pdf", shipment.Id));
+            return File(bytes, "application/pdf", $"packagingslip_{shipment.Id}.pdf");
         }
 
         [PermissionAuthorizeAction(PermissionActionName.Export)]
diff --git a/Grand.Web/Areas/Admin/Controllers/ShippingController.cs b/Grand.Web/Areas/Admin/Controllers/ShippingController.cs
index 4e82bcd16..ea02d5549 100644
--- a/Grand.Web/Areas/Admin/Controllers/ShippingController.cs
+++ b/Grand.Web/Areas/Admin/Controllers/ShippingController.cs
@@ -173,7 +173,7 @@ public IActionResult Providers(DataSourceRequest command)
             shippingProvidersModel = shippingProvidersModel.ToList();
             var gridModel = new DataSourceResult {
                 Data = shippingProvidersModel,
-                Total = shippingProvidersModel.Count()
+                Total = shippingProvidersModel.Count
             };
 
             return Json(gridModel);
diff --git a/Grand.Web/Areas/Admin/Controllers/SpecificationAttributeController.cs b/Grand.Web/Areas/Admin/Controllers/SpecificationAttributeController.cs
index ac7037fb2..0a4bc020c 100644
--- a/Grand.Web/Areas/Admin/Controllers/SpecificationAttributeController.cs
+++ b/Grand.Web/Areas/Admin/Controllers/SpecificationAttributeController.cs
@@ -272,7 +272,7 @@ public async Task<IActionResult> OptionCreatePopup(SpecificationAttributeOptionM
         [PermissionAuthorizeAction(PermissionActionName.Edit)]
         public async Task<IActionResult> OptionEditPopup(string id)
         {
-            var sao = (await _specificationAttributeService.GetSpecificationAttributeByOptionId(id)).SpecificationAttributeOptions.Where(x => x.Id == id).FirstOrDefault();
+            var sao = (await _specificationAttributeService.GetSpecificationAttributeByOptionId(id)).SpecificationAttributeOptions.FirstOrDefault(x => x.Id == id);
             if (sao == null)
                 //No specification attribute option found with the specified id
                 return RedirectToAction("List");
@@ -293,7 +293,7 @@ public async Task<IActionResult> OptionEditPopup(string id)
         public async Task<IActionResult> OptionEditPopup(SpecificationAttributeOptionModel model)
         {
             var specificationAttribute = await _specificationAttributeService.GetSpecificationAttributeByOptionId(model.Id);
-            var sao = specificationAttribute.SpecificationAttributeOptions.Where(x => x.Id == model.Id).FirstOrDefault();
+            var sao = specificationAttribute.SpecificationAttributeOptions.FirstOrDefault(x => x.Id == model.Id);
             if (sao == null)
                 //No specification attribute option found with the specified id
                 return RedirectToAction("List");
@@ -325,7 +325,7 @@ public async Task<IActionResult> OptionDelete(string id)
             if (ModelState.IsValid)
             {
                 var specificationAttribute = await _specificationAttributeService.GetSpecificationAttributeByOptionId(id);
-                var sao = specificationAttribute.SpecificationAttributeOptions.Where(x => x.Id == id).FirstOrDefault();
+                var sao = specificationAttribute.SpecificationAttributeOptions.FirstOrDefault(x => x.Id == id);
                 if (sao == null)
                     throw new ArgumentException("No specification attribute option found with the specified id");
 
diff --git a/Grand.Web/Areas/Admin/Controllers/StoreController.cs b/Grand.Web/Areas/Admin/Controllers/StoreController.cs
index b614514db..b5edf55ba 100644
--- a/Grand.Web/Areas/Admin/Controllers/StoreController.cs
+++ b/Grand.Web/Areas/Admin/Controllers/StoreController.cs
@@ -47,7 +47,7 @@ public async Task<IActionResult> List(DataSourceRequest command)
             var gridModel = new DataSourceResult
             {
                 Data = storeModels,
-                Total = storeModels.Count()
+                Total = storeModels.Count
             };
 
             return Json(gridModel);
diff --git a/Grand.Web/Areas/Admin/Controllers/TaxController.cs b/Grand.Web/Areas/Admin/Controllers/TaxController.cs
index e1443912a..a7cf3ffd7 100644
--- a/Grand.Web/Areas/Admin/Controllers/TaxController.cs
+++ b/Grand.Web/Areas/Admin/Controllers/TaxController.cs
@@ -71,7 +71,7 @@ public IActionResult Providers(DataSourceRequest command)
             var gridModel = new DataSourceResult
             {
                 Data = taxProvidersModel,
-                Total = taxProvidersModel.Count()
+                Total = taxProvidersModel.Count
             };
 
             return Json(gridModel);
diff --git a/Grand.Web/Areas/Admin/Controllers/WidgetController.cs b/Grand.Web/Areas/Admin/Controllers/WidgetController.cs
index e1341fc3b..32256175e 100644
--- a/Grand.Web/Areas/Admin/Controllers/WidgetController.cs
+++ b/Grand.Web/Areas/Admin/Controllers/WidgetController.cs
@@ -68,7 +68,7 @@ public IActionResult List(DataSourceRequest command)
             var gridModel = new DataSourceResult
             {
                 Data = widgetsModel,
-                Total = widgetsModel.Count()
+                Total = widgetsModel.Count
             };
 
             return Json(gridModel);
diff --git a/Grand.Web/Areas/Admin/Extensions/AclMappingExtension.cs b/Grand.Web/Areas/Admin/Extensions/AclMappingExtension.cs
index 345afc091..2b9e6f329 100644
--- a/Grand.Web/Areas/Admin/Extensions/AclMappingExtension.cs
+++ b/Grand.Web/Areas/Admin/Extensions/AclMappingExtension.cs
@@ -44,7 +44,7 @@ public static async Task PrepareACLModel<T>(this T baseGrandEntityModel, IAclSup
                 //return true if no store specified/found
                 return true;
 
-            if (entity.LimitedToStores && entity.Stores.Where(x => x == storeId).Any() && entity.Stores.Count == 1)
+            if (entity.LimitedToStores && entity.Stores.Any(x => x == storeId)&& entity.Stores.Count == 1)
                 //yes, we have such permission
                 return true;
 
diff --git a/Grand.Web/Areas/Admin/Extensions/AttributeParserHelper.cs b/Grand.Web/Areas/Admin/Extensions/AttributeParserHelper.cs
index 8617cce32..ed9e5497a 100644
--- a/Grand.Web/Areas/Admin/Extensions/AttributeParserHelper.cs
+++ b/Grand.Web/Areas/Admin/Extensions/AttributeParserHelper.cs
@@ -25,7 +25,7 @@ public static class AttributeParserHelper
             var attributes = await addressAttributeService.GetAllAddressAttributes();
             foreach (var attribute in attributes)
             {
-                string controlId = string.Format("address_attribute_{0}", attribute.Id);
+                string controlId = $"address_attribute_{attribute.Id}";
                 switch (attribute.AttributeControlType)
                 {
                     case AttributeControlType.DropdownList:
diff --git a/Grand.Web/Areas/Admin/Extensions/HasAccess.cs b/Grand.Web/Areas/Admin/Extensions/HasAccess.cs
index 3b082d39a..12c204a1b 100644
--- a/Grand.Web/Areas/Admin/Extensions/HasAccess.cs
+++ b/Grand.Web/Areas/Admin/Extensions/HasAccess.cs
@@ -61,7 +61,7 @@ public static bool HasAccessToShipment(this IWorkContext _workContext, Order ord
             var vendorId = _workContext.CurrentVendor.Id;
             foreach (var shipmentItem in shipment.ShipmentItems)
             {
-                var orderItem = order.OrderItems.Where(x => x.Id == shipmentItem.OrderItemId).FirstOrDefault();
+                var orderItem = order.OrderItems.FirstOrDefault(x => x.Id == shipmentItem.OrderItemId);
                 if (orderItem != null)
                 {
                     if (orderItem.VendorId == vendorId)
diff --git a/Grand.Web/Areas/Admin/Extensions/LocalizedExtension.cs b/Grand.Web/Areas/Admin/Extensions/LocalizedExtension.cs
index a12e6ffdb..495aaa1b3 100644
--- a/Grand.Web/Areas/Admin/Extensions/LocalizedExtension.cs
+++ b/Grand.Web/Areas/Admin/Extensions/LocalizedExtension.cs
@@ -68,16 +68,12 @@ public static class LocalizedExtension
                             var member = keySelector.Body as MemberExpression;
                             if (member == null)
                             {
-                                throw new ArgumentException(string.Format(
-                                    "Expression '{0}' refers to a method, not a property.",
-                                    keySelector));
+                                throw new ArgumentException($"Expression '{keySelector}' refers to a method, not a property.");
                             }
                             var propInfo = member.Member as PropertyInfo;
                             if (propInfo == null)
                             {
-                                throw new ArgumentException(string.Format(
-                                       "Expression '{0}' refers to a field, not a property.",
-                                       keySelector));
+                                throw new ArgumentException($"Expression '{keySelector}' refers to a field, not a property.");
                             }
                             var value = item.GetType().GetProperty(propInfo.Name).GetValue(item, null);
                             if (value != null)
diff --git a/Grand.Web/Areas/Admin/Extensions/TinyMceHelper.cs b/Grand.Web/Areas/Admin/Extensions/TinyMceHelper.cs
index 7e7f9211e..403b1c597 100644
--- a/Grand.Web/Areas/Admin/Extensions/TinyMceHelper.cs
+++ b/Grand.Web/Areas/Admin/Extensions/TinyMceHelper.cs
@@ -21,29 +21,29 @@ public static string GetTinyMceLanguage(IWorkContext workContext, IWebHostEnviro
 
             var languageCulture = workContext.WorkingLanguage.LanguageCulture;
 
-            var langFile = string.Format("{0}.js", languageCulture);
+            var langFile = $"{languageCulture}.js";
             var path = Path.Combine(webHostEnvironment.WebRootPath, "administration\\tinymce\\langs");
-            var fileExists = File.Exists(string.Format("{0}{1}{2}", path, "/", langFile));
+            var fileExists = File.Exists($"{path}{"/"}{langFile}");
 
             if (!fileExists)
             {
                 languageCulture = languageCulture.Replace('-', '_');
-                langFile = string.Format("{0}.js", languageCulture);
-                fileExists = File.Exists(string.Format("{0}{1}{2}", path, "/", langFile));
+                langFile = $"{languageCulture}.js";
+                fileExists = File.Exists($"{path}{"/"}{langFile}");
             }
 
             if (!fileExists)
             {
                 languageCulture = languageCulture.Replace('-', '_');
-                langFile = string.Format("{0}.js", languageCulture);
-                fileExists = File.Exists(string.Format("{0}{1}{2}", path, "/", langFile));
+                langFile = $"{languageCulture}.js";
+                fileExists = File.Exists($"{path}{"/"}{langFile}");
             }
 
             if (!fileExists)
             {
                 languageCulture = languageCulture.Split('_', '-')[0];
-                langFile = string.Format("{0}.js", languageCulture);
-                fileExists = File.Exists(string.Format("{0}{1}{2}", path, "/", langFile));
+                langFile = $"{languageCulture}.js";
+                fileExists = File.Exists($"{path}{"/"}{langFile}");
             }
 
             return fileExists ? languageCulture : string.Empty;
diff --git a/Grand.Web/Areas/Admin/Services/AddressAttributeViewModelService.cs b/Grand.Web/Areas/Admin/Services/AddressAttributeViewModelService.cs
index 94c2c4aa8..c1dd94f54 100644
--- a/Grand.Web/Areas/Admin/Services/AddressAttributeViewModelService.cs
+++ b/Grand.Web/Areas/Admin/Services/AddressAttributeViewModelService.cs
@@ -33,7 +33,7 @@ public virtual async Task<(IEnumerable<AddressAttributeModel> addressAttributes,
                     var attributeModel = x.ToModel();
                     attributeModel.AttributeControlTypeName = x.AttributeControlType.GetLocalizedEnum(_localizationService, _workContext);
                     return attributeModel;
-                }), addressAttributes.Count());
+                }), addressAttributes.Count);
         }
 
         public virtual AddressAttributeModel PrepareAddressAttributeModel()
@@ -63,7 +63,7 @@ public virtual async Task<AddressAttribute> UpdateAddressAttributeModel(AddressA
         public virtual async Task<(IEnumerable<AddressAttributeValueModel> addressAttributeValues, int totalCount)> PrepareAddressAttributeValues(string addressAttributeId)
         {
             var values = (await _addressAttributeService.GetAddressAttributeById(addressAttributeId)).AddressAttributeValues;
-            return (values.Select(x => x.ToModel()), values.Count());
+            return (values.Select(x => x.ToModel()), values.Count);
         }
 
         public virtual AddressAttributeValueModel PrepareAddressAttributeValueModel(string addressAttributeId)
diff --git a/Grand.Web/Areas/Admin/Services/CategoryViewModelService.cs b/Grand.Web/Areas/Admin/Services/CategoryViewModelService.cs
index b0c3ed5a8..788bbc723 100644
--- a/Grand.Web/Areas/Admin/Services/CategoryViewModelService.cs
+++ b/Grand.Web/Areas/Admin/Services/CategoryViewModelService.cs
@@ -275,13 +275,13 @@ public virtual async Task<Category> UpdateCategoryModel(Category category, Categ
                 if (model.SelectedDiscountIds != null && model.SelectedDiscountIds.Contains(discount.Id))
                 {
                     //new discount
-                    if (category.AppliedDiscounts.Count(d => d == discount.Id) == 0)
+                    if (!category.AppliedDiscounts.Any(d => d == discount.Id))
                         category.AppliedDiscounts.Add(discount.Id);
                 }
                 else
                 {
                     //remove discount
-                    if (category.AppliedDiscounts.Count(d => d == discount.Id) > 0)
+                    if (category.AppliedDiscounts.Any(d => d == discount.Id))
                         category.AppliedDiscounts.Remove(discount.Id);
                 }
             }
@@ -346,7 +346,7 @@ public virtual async Task DeleteProductCategoryModel(string id, string productId
             if (product == null)
                 throw new ArgumentException("No product found with the specified id");
 
-            var productCategory = product.ProductCategories.Where(x => x.Id == id).FirstOrDefault();
+            var productCategory = product.ProductCategories.FirstOrDefault(x => x.Id == id);
             if (productCategory == null)
                 throw new ArgumentException("No product category mapping found with the specified id");
             productCategory.ProductId = productId;
@@ -390,7 +390,7 @@ public virtual async Task InsertCategoryProductModel(CategoryModel.AddCategoryPr
                 var product = await _productService.GetProductById(id);
                 if (product != null)
                 {
-                    if (product.ProductCategories.Where(x => x.CategoryId == model.CategoryId).Count() == 0)
+                    if (!product.ProductCategories.Any(x => x.CategoryId == model.CategoryId))
                     {
                         await _categoryService.InsertProductCategory(
                             new ProductCategory {
diff --git a/Grand.Web/Areas/Admin/Services/CheckoutAttributeViewModelService.cs b/Grand.Web/Areas/Admin/Services/CheckoutAttributeViewModelService.cs
index 1391d9546..27c33462b 100644
--- a/Grand.Web/Areas/Admin/Services/CheckoutAttributeViewModelService.cs
+++ b/Grand.Web/Areas/Admin/Services/CheckoutAttributeViewModelService.cs
@@ -176,7 +176,7 @@ public virtual async Task<IEnumerable<CheckoutAttributeValueModel>> PrepareCheck
             return values.Select(x => new CheckoutAttributeValueModel {
                 Id = x.Id,
                 CheckoutAttributeId = x.CheckoutAttributeId,
-                Name = checkoutAttribute.AttributeControlType != AttributeControlType.ColorSquares ? x.Name : string.Format("{0} - {1}", x.Name, x.ColorSquaresRgb),
+                Name = checkoutAttribute.AttributeControlType != AttributeControlType.ColorSquares ? x.Name : $"{x.Name} - {x.ColorSquaresRgb}",
                 ColorSquaresRgb = x.ColorSquaresRgb,
                 PriceAdjustment = x.PriceAdjustment,
                 WeightAdjustment = x.WeightAdjustment,
diff --git a/Grand.Web/Areas/Admin/Services/CustomerActionViewModelService.cs b/Grand.Web/Areas/Admin/Services/CustomerActionViewModelService.cs
index 2bdd75a07..3dc41e239 100644
--- a/Grand.Web/Areas/Admin/Services/CustomerActionViewModelService.cs
+++ b/Grand.Web/Areas/Admin/Services/CustomerActionViewModelService.cs
@@ -165,7 +165,7 @@ public virtual async Task<CustomerAction> InsertCustomerActionModel(CustomerActi
         }
         public virtual async Task<CustomerAction> UpdateCustomerActionModel(CustomerAction customeraction, CustomerActionModel model)
         {
-            if (customeraction.Conditions.Count() > 0)
+            if (customeraction.Conditions.Any())
                 model.ActionTypeId = customeraction.ActionTypeId;
             if (String.IsNullOrEmpty(model.ActionTypeId))
                 model.ActionTypeId = customeraction.ActionTypeId;
@@ -348,7 +348,7 @@ public virtual async Task InsertProductToConditionModel(CustomerActionConditionM
                     var condition = customerAction.Conditions.FirstOrDefault(x => x.Id == model.CustomerActionConditionId);
                     if (condition != null)
                     {
-                        if (condition.Products.Where(x => x == id).Count() == 0)
+                        if (!condition.Products.Any(x => x == id))
                         {
                             condition.Products.Add(id);
                             await _customerActionService.UpdateCustomerAction(customerAction);
@@ -367,7 +367,7 @@ public virtual async Task InsertCategoryConditionModel(CustomerActionConditionMo
                     var condition = customerAction.Conditions.FirstOrDefault(x => x.Id == model.CustomerActionConditionId);
                     if (condition != null)
                     {
-                        if (condition.Categories.Where(x => x == id).Count() == 0)
+                        if (!condition.Categories.Any(x => x == id))
                         {
                             condition.Categories.Add(id);
                             await _customerActionService.UpdateCustomerAction(customerAction);
@@ -386,7 +386,7 @@ public virtual async Task InsertManufacturerConditionModel(CustomerActionConditi
                     var condition = customerAction.Conditions.FirstOrDefault(x => x.Id == model.CustomerActionConditionId);
                     if (condition != null)
                     {
-                        if (condition.Manufacturers.Where(x => x == id).Count() == 0)
+                        if (!condition.Manufacturers.Any(x => x == id))
                         {
                             condition.Manufacturers.Add(id);
                             await _customerActionService.UpdateCustomerAction(customerAction);
@@ -403,7 +403,7 @@ public virtual async Task InsertCustomerRoleConditionModel(CustomerActionConditi
                 var condition = customerAction.Conditions.FirstOrDefault(x => x.Id == model.ConditionId);
                 if (condition != null)
                 {
-                    if (condition.CustomerRoles.Where(x => x == model.CustomerRoleId).Count() == 0)
+                    if (!condition.CustomerRoles.Any(x => x == model.CustomerRoleId))
                     {
                         condition.CustomerRoles.Add(model.CustomerRoleId);
                         await _customerActionService.UpdateCustomerAction(customerAction);
@@ -420,7 +420,7 @@ public virtual async Task InsertStoreConditionModel(CustomerActionConditionModel
                 var condition = customerAction.Conditions.FirstOrDefault(x => x.Id == model.ConditionId);
                 if (condition != null)
                 {
-                    if (condition.Stores.Where(x => x == model.StoreId).Count() == 0)
+                    if (!condition.Stores.Any(x => x == model.StoreId))
                     {
                         condition.Stores.Add(model.StoreId);
                         await _customerActionService.UpdateCustomerAction(customerAction);
@@ -436,7 +436,7 @@ public virtual async Task InsertVendorConditionModel(CustomerActionConditionMode
                 var condition = customerAction.Conditions.FirstOrDefault(x => x.Id == model.ConditionId);
                 if (condition != null)
                 {
-                    if (condition.Vendors.Where(x => x == model.VendorId).Count() == 0)
+                    if (!condition.Vendors.Any(x => x == model.VendorId))
                     {
                         condition.Vendors.Add(model.VendorId);
                         await _customerActionService.UpdateCustomerAction(customerAction);
@@ -453,7 +453,7 @@ public virtual async Task InsertCustomerTagConditionModel(CustomerActionConditio
                 var condition = customerAction.Conditions.FirstOrDefault(x => x.Id == model.ConditionId);
                 if (condition != null)
                 {
-                    if (condition.CustomerTags.Where(x => x == model.CustomerTagId).Count() == 0)
+                    if (!condition.CustomerTags.Any(x => x == model.CustomerTagId))
                     {
                         condition.CustomerTags.Add(model.CustomerTagId);
                         await _customerActionService.UpdateCustomerAction(customerAction);
@@ -502,7 +502,7 @@ public virtual async Task InsertProductSpecificationConditionModel(CustomerActio
                 var condition = customerAction.Conditions.FirstOrDefault(x => x.Id == model.ConditionId);
                 if (condition != null)
                 {
-                    if (condition.ProductSpecifications.Where(x => x.ProductSpecyficationId == model.SpecificationId && x.ProductSpecyficationValueId == model.SpecificationValueId).Count() == 0)
+                    if (!condition.ProductSpecifications.Any(x => x.ProductSpecyficationId == model.SpecificationId && x.ProductSpecyficationValueId == model.SpecificationValueId))
                     {
                         var _ps = new CustomerAction.ActionCondition.ProductSpecification()
                         {
diff --git a/Grand.Web/Areas/Admin/Services/CustomerReminderViewModelService.cs b/Grand.Web/Areas/Admin/Services/CustomerReminderViewModelService.cs
index 6c8325c85..6e33559b8 100644
--- a/Grand.Web/Areas/Admin/Services/CustomerReminderViewModelService.cs
+++ b/Grand.Web/Areas/Admin/Services/CustomerReminderViewModelService.cs
@@ -75,7 +75,7 @@ public virtual async Task<CustomerReminder> InsertCustomerReminderModel(Customer
         }
         public virtual async Task<CustomerReminder> UpdateCustomerReminderModel(CustomerReminder customerReminder, CustomerReminderModel model)
         {
-            if (customerReminder.Conditions.Count() > 0)
+            if (customerReminder.Conditions.Any())
                 model.ReminderRuleId = customerReminder.ReminderRuleId;
             if (model.ReminderRuleId == 0)
                 model.ReminderRuleId = customerReminder.ReminderRuleId;
@@ -254,7 +254,7 @@ public virtual async Task InsertCategoryConditionModel(CustomerReminderModel.Con
                     var condition = customerReminder.Conditions.FirstOrDefault(x => x.Id == model.ConditionId);
                     if (condition != null)
                     {
-                        if (condition.Categories.Where(x => x == id).Count() == 0)
+                        if (!condition.Categories.Any(x => x == id))
                         {
                             condition.Categories.Add(id);
                             await _customerReminderService.UpdateCustomerReminder(customerReminder);
@@ -273,7 +273,7 @@ public virtual async Task InsertManufacturerConditionModel(CustomerReminderModel
                     var condition = customerReminder.Conditions.FirstOrDefault(x => x.Id == model.ConditionId);
                     if (condition != null)
                     {
-                        if (condition.Manufacturers.Where(x => x == id).Count() == 0)
+                        if (!condition.Manufacturers.Any(x => x == id))
                         {
                             condition.Manufacturers.Add(id);
                             await _customerReminderService.UpdateCustomerReminder(customerReminder);
@@ -292,7 +292,7 @@ public virtual async Task InsertProductToConditionModel(CustomerReminderModel.Co
                     var condition = customerReminder.Conditions.FirstOrDefault(x => x.Id == model.ConditionId);
                     if (condition != null)
                     {
-                        if (condition.Products.Where(x => x == id).Count() == 0)
+                        if (!condition.Products.Any(x => x == id))
                         {
                             condition.Products.Add(id);
                             await _customerReminderService.UpdateCustomerReminder(customerReminder);
@@ -309,7 +309,7 @@ public virtual async Task InsertCustomerTagConditionModel(CustomerReminderModel.
                 var condition = customerReminder.Conditions.FirstOrDefault(x => x.Id == model.ConditionId);
                 if (condition != null)
                 {
-                    if (condition.CustomerTags.Where(x => x == model.CustomerTagId).Count() == 0)
+                    if (!condition.CustomerTags.Any(x => x == model.CustomerTagId))
                     {
                         condition.CustomerTags.Add(model.CustomerTagId);
                         await _customerReminderService.UpdateCustomerReminder(customerReminder);
@@ -325,7 +325,7 @@ public virtual async Task InsertCustomerRoleConditionModel(CustomerReminderModel
                 var condition = customerReminder.Conditions.FirstOrDefault(x => x.Id == model.ConditionId);
                 if (condition != null)
                 {
-                    if (condition.CustomerRoles.Where(x => x == model.CustomerRoleId).Count() == 0)
+                    if (!condition.CustomerRoles.Any(x => x == model.CustomerRoleId))
                     {
                         condition.CustomerRoles.Add(model.CustomerRoleId);
                         await _customerReminderService.UpdateCustomerReminder(customerReminder);
diff --git a/Grand.Web/Areas/Admin/Services/CustomerViewModelService.cs b/Grand.Web/Areas/Admin/Services/CustomerViewModelService.cs
index 079b0746d..a0d3c6d03 100644
--- a/Grand.Web/Areas/Admin/Services/CustomerViewModelService.cs
+++ b/Grand.Web/Areas/Admin/Services/CustomerViewModelService.cs
@@ -1006,7 +1006,7 @@ public virtual async Task<Customer> UpdateCustomerModel(Customer customer, Custo
                 model.SelectedCustomerRoleIds.Contains(customerRole.Id))
                 {
                     //new role
-                    if (customer.CustomerRoles.Count(cr => cr.Id == customerRole.Id) == 0)
+                    if (!customer.CustomerRoles.Any(cr => cr.Id == customerRole.Id))
                     {
                         customer.CustomerRoles.Add(customerRole);
                     }
@@ -1014,7 +1014,7 @@ public virtual async Task<Customer> UpdateCustomerModel(Customer customer, Custo
                 else
                 {
                     //remove role
-                    if (customer.CustomerRoles.Count(cr => cr.Id == customerRole.Id) > 0)
+                    if (customer.CustomerRoles.Any(cr => cr.Id == customerRole.Id))
                         customer.CustomerRoles.Remove(customer.CustomerRoles.First(x => x.Id == customerRole.Id));
                 }
             }
diff --git a/Grand.Web/Areas/Admin/Services/DiscountViewModelService.cs b/Grand.Web/Areas/Admin/Services/DiscountViewModelService.cs
index 084a62732..3f5faf302 100644
--- a/Grand.Web/Areas/Admin/Services/DiscountViewModelService.cs
+++ b/Grand.Web/Areas/Admin/Services/DiscountViewModelService.cs
@@ -180,7 +180,7 @@ public virtual async Task<Discount> UpdateDiscountModel(Discount discount, Disco
                 //update "HasDiscountsApplied" property
                 foreach (var category in categories)
                 {
-                    var item = category.AppliedDiscounts.Where(x => x == discount.Id).FirstOrDefault();
+                    var item = category.AppliedDiscounts.FirstOrDefault(x => x == discount.Id);
                     category.AppliedDiscounts.Remove(item);
                 }
             }
@@ -191,7 +191,7 @@ public virtual async Task<Discount> UpdateDiscountModel(Discount discount, Disco
                 var manufacturers = await _manufacturerService.GetAllManufacturersByDiscount(discount.Id);
                 foreach (var manufacturer in manufacturers)
                 {
-                    var item = manufacturer.AppliedDiscounts.Where(x => x == discount.Id).FirstOrDefault();
+                    var item = manufacturer.AppliedDiscounts.FirstOrDefault(x => x == discount.Id);
                     manufacturer.AppliedDiscounts.Remove(item);
                 }
             }
@@ -203,7 +203,7 @@ public virtual async Task<Discount> UpdateDiscountModel(Discount discount, Disco
 
                 foreach (var p in products)
                 {
-                    var item = p.AppliedDiscounts.Where(x => x == discount.Id).FirstOrDefault();
+                    var item = p.AppliedDiscounts.FirstOrDefault(x => x == discount.Id);
                     p.AppliedDiscounts.Remove(item);
                     await _productService.DeleteDiscount(item, p.Id);
                 }
@@ -236,7 +236,7 @@ public virtual string GetRequirementUrlInternal(IDiscountRequirementRule discoun
             if (discount == null)
                 throw new ArgumentNullException("discount");
 
-            string url = string.Format("{0}{1}", _webHelper.GetStoreLocation(), discountRequirementRule.GetConfigurationUrl(discount.Id, discountRequirementId));
+            string url = $"{_webHelper.GetStoreLocation()}{discountRequirementRule.GetConfigurationUrl(discount.Id, discountRequirementId)}";
             return url;
         }
         public virtual async Task DeleteDiscountRequirement(DiscountRequirement discountRequirement, Discount discount)
@@ -286,7 +286,7 @@ public virtual async Task InsertProductToDiscountModel(DiscountModel.AddProductT
                 var product = await _productService.GetProductById(id);
                 if (product != null)
                 {
-                    if (product.AppliedDiscounts.Count(d => d == model.DiscountId) == 0)
+                    if (!product.AppliedDiscounts.Any(d => d == model.DiscountId))
                     {
                         product.AppliedDiscounts.Add(model.DiscountId);
                         await _productService.InsertDiscount(model.DiscountId, product.Id);
@@ -297,7 +297,7 @@ public virtual async Task InsertProductToDiscountModel(DiscountModel.AddProductT
         public virtual async Task DeleteProduct(Discount discount, Product product)
         {
             //remove discount
-            if (product.AppliedDiscounts.Count(d => d == discount.Id) > 0)
+            if (product.AppliedDiscounts.Any(d => d == discount.Id))
             {
                 product.AppliedDiscounts.Remove(discount.Id);
                 await _productService.DeleteDiscount(discount.Id, product.Id);
@@ -306,7 +306,7 @@ public virtual async Task DeleteProduct(Discount discount, Product product)
         public virtual async Task DeleteCategory(Discount discount, Category category)
         {
             //remove discount
-            if (category.AppliedDiscounts.Count(d => d == discount.Id) > 0)
+            if (category.AppliedDiscounts.Any(d => d == discount.Id))
                 category.AppliedDiscounts.Remove(discount.Id);
 
             await _categoryService.UpdateCategory(category);
@@ -318,7 +318,7 @@ public virtual async Task InsertCategoryToDiscountModel(DiscountModel.AddCategor
                 var category = await _categoryService.GetCategoryById(id);
                 if (category != null)
                 {
-                    if (category.AppliedDiscounts.Count(d => d == model.DiscountId) == 0)
+                    if (!category.AppliedDiscounts.Any(d => d == model.DiscountId))
                         category.AppliedDiscounts.Add(model.DiscountId);
 
                     await _categoryService.UpdateCategory(category);
@@ -328,7 +328,7 @@ public virtual async Task InsertCategoryToDiscountModel(DiscountModel.AddCategor
         public virtual async Task DeleteManufacturer(Discount discount, Manufacturer manufacturer)
         {
             //remove discount
-            if (manufacturer.AppliedDiscounts.Count(d => d == discount.Id) > 0)
+            if (manufacturer.AppliedDiscounts.Any(d => d == discount.Id))
                 manufacturer.AppliedDiscounts.Remove(discount.Id);
 
             await _manufacturerService.UpdateManufacturer(manufacturer);
@@ -340,7 +340,7 @@ public virtual async Task InsertManufacturerToDiscountModel(DiscountModel.AddMan
                 var manufacturer = await _manufacturerService.GetManufacturerById(id);
                 if (manufacturer != null)
                 {
-                    if (manufacturer.AppliedDiscounts.Count(d => d == model.DiscountId) == 0)
+                    if (!manufacturer.AppliedDiscounts.Any(d => d == model.DiscountId))
                         manufacturer.AppliedDiscounts.Add(model.DiscountId);
 
                     await _manufacturerService.UpdateManufacturer(manufacturer);
@@ -350,7 +350,7 @@ public virtual async Task InsertManufacturerToDiscountModel(DiscountModel.AddMan
         public virtual async Task DeleteVendor(Discount discount, Vendor vendor)
         {
             //remove discount
-            if (vendor.AppliedDiscounts.Count(d => d == discount.Id) > 0)
+            if (vendor.AppliedDiscounts.Any(d => d == discount.Id))
                 vendor.AppliedDiscounts.Remove(discount.Id);
 
             await _vendorService.UpdateVendor(vendor);
@@ -362,7 +362,7 @@ public virtual async Task InsertVendorToDiscountModel(DiscountModel.AddVendorToD
                 var vendor = await _vendorService.GetVendorById(id);
                 if (vendor != null)
                 {
-                    if (vendor.AppliedDiscounts.Count(d => d == model.DiscountId) == 0)
+                    if (!vendor.AppliedDiscounts.Any(d => d == model.DiscountId))
                         vendor.AppliedDiscounts.Add(model.DiscountId);
 
                     await _vendorService.UpdateVendor(vendor);
diff --git a/Grand.Web/Areas/Admin/Services/ManufacturerViewModelService.cs b/Grand.Web/Areas/Admin/Services/ManufacturerViewModelService.cs
index 1a290a101..9df547008 100644
--- a/Grand.Web/Areas/Admin/Services/ManufacturerViewModelService.cs
+++ b/Grand.Web/Areas/Admin/Services/ManufacturerViewModelService.cs
@@ -171,13 +171,13 @@ public virtual async Task<Manufacturer> UpdateManufacturerModel(Manufacturer man
                 if (model.SelectedDiscountIds != null && model.SelectedDiscountIds.Contains(discount.Id))
                 {
                     //new discount
-                    if (manufacturer.AppliedDiscounts.Count(d => d == discount.Id) == 0)
+                    if (!manufacturer.AppliedDiscounts.Any(d => d == discount.Id))
                         manufacturer.AppliedDiscounts.Add(discount.Id);
                 }
                 else
                 {
                     //remove discount
-                    if (manufacturer.AppliedDiscounts.Count(d => d == discount.Id) > 0)
+                    if (manufacturer.AppliedDiscounts.Any(d => d == discount.Id))
                         manufacturer.AppliedDiscounts.Remove(discount.Id);
                 }
             }
@@ -271,7 +271,7 @@ public virtual async Task ProductUpdate(ManufacturerModel.ManufacturerProductMod
             if (product == null)
                 throw new ArgumentException("No product found with the specified id");
 
-            var productManufacturer = product.ProductManufacturers.Where(x => x.Id == model.Id).FirstOrDefault();
+            var productManufacturer = product.ProductManufacturers.FirstOrDefault(x => x.Id == model.Id);
             if (productManufacturer == null)
                 throw new ArgumentException("No product manufacturer mapping found with the specified id");
 
@@ -286,7 +286,7 @@ public virtual async Task ProductDelete(string id, string productId)
             if (product == null)
                 throw new ArgumentException("No product found with the specified id");
 
-            var productManufacturer = product.ProductManufacturers.Where(x => x.Id == id).FirstOrDefault();
+            var productManufacturer = product.ProductManufacturers.FirstOrDefault(x => x.Id == id);
             if (productManufacturer == null)
                 throw new ArgumentException("No product manufacturer mapping found with the specified id");
 
@@ -302,7 +302,7 @@ public virtual async Task InsertManufacturerProductModel(ManufacturerModel.AddMa
                 if (product != null)
                 {
                     var existingProductmanufacturers = product.ProductManufacturers;
-                    if (product.ProductManufacturers.Where(x => x.ManufacturerId == model.ManufacturerId).Count() == 0)
+                    if (!product.ProductManufacturers.Any(x => x.ManufacturerId == model.ManufacturerId))
                     {
                         await _manufacturerService.InsertProductManufacturer(
                             new ProductManufacturer
diff --git a/Grand.Web/Areas/Admin/Services/OrderViewModelService.cs b/Grand.Web/Areas/Admin/Services/OrderViewModelService.cs
index 06066f273..53616801a 100644
--- a/Grand.Web/Areas/Admin/Services/OrderViewModelService.cs
+++ b/Grand.Web/Areas/Admin/Services/OrderViewModelService.cs
@@ -388,7 +388,7 @@ public virtual async Task<(IEnumerable<OrderModel> orderModels, OrderAggreratorM
                     ShippingStatus = x.ShippingStatus.GetLocalizedEnum(_localizationService, _workContext),
                     CustomerEmail = x.BillingAddress?.Email,
                     CustomerId = x.CustomerId,
-                    CustomerFullName = string.Format("{0} {1}", x.BillingAddress?.FirstName, x.BillingAddress?.LastName),
+                    CustomerFullName = $"{x.BillingAddress?.FirstName} {x.BillingAddress?.LastName}",
                     CreatedOn = _dateTimeHelper.ConvertToUserTime(x.CreatedOnUtc, DateTimeKind.Utc)
                 });
             }
@@ -740,7 +740,7 @@ public virtual async Task PrepareOrderDetailsModel(OrderModel model, Order order
                         model.ShippingAddress.FaxEnabled = _addressSettings.FaxEnabled;
                         model.ShippingAddress.FaxRequired = _addressSettings.FaxRequired;
 
-                        model.ShippingAddressGoogleMapsUrl = string.Format("http://maps.google.com/maps?f=q&hl=en&ie=UTF8&oe=UTF8&geocode=&q={0}", WebUtility.UrlEncode(order.ShippingAddress.Address1 + " " + order.ShippingAddress.ZipPostalCode + " " + order.ShippingAddress.City + " " + (!String.IsNullOrEmpty(order.ShippingAddress.CountryId) ? (await _countryService.GetCountryById(order.ShippingAddress.CountryId))?.Name : "")));
+                        model.ShippingAddressGoogleMapsUrl = $"http://maps.google.com/maps?f=q&hl=en&ie=UTF8&oe=UTF8&geocode=&q={WebUtility.UrlEncode(order.ShippingAddress.Address1 + " " + order.ShippingAddress.ZipPostalCode + " " + order.ShippingAddress.City + " " + (!String.IsNullOrEmpty(order.ShippingAddress.CountryId) ? (await _countryService.GetCountryById(order.ShippingAddress.CountryId))?.Name : ""))}";
                     }
                 }
                 else
@@ -1113,7 +1113,7 @@ public virtual async Task<IList<string>> AddProductToOrderDetails(string orderId
             var attributes = product.ProductAttributeMappings;
             foreach (var attribute in attributes)
             {
-                string controlId = string.Format("product_attribute_{0}", attribute.Id);
+                string controlId = $"product_attribute_{attribute.Id}";
                 switch (attribute.AttributeControlType)
                 {
                     case AttributeControlType.DropdownList:
diff --git a/Grand.Web/Areas/Admin/Services/ProductViewModelService.cs b/Grand.Web/Areas/Admin/Services/ProductViewModelService.cs
index 69a0d5bdc..861aa6d44 100644
--- a/Grand.Web/Areas/Admin/Services/ProductViewModelService.cs
+++ b/Grand.Web/Areas/Admin/Services/ProductViewModelService.cs
@@ -1019,7 +1019,7 @@ public virtual async Task<Product> UpdateProductModel(Product product, ProductMo
                 if (model.SelectedDiscountIds != null && model.SelectedDiscountIds.Contains(discount.Id))
                 {
                     //new discount
-                    if (product.AppliedDiscounts.Count(d => d == discount.Id) == 0)
+                    if (!product.AppliedDiscounts.Any(d => d == discount.Id))
                     {
                         product.AppliedDiscounts.Add(discount.Id);
                         await _productService.InsertDiscount(discount.Id, product.Id);
@@ -1028,7 +1028,7 @@ public virtual async Task<Product> UpdateProductModel(Product product, ProductMo
                 else
                 {
                     //remove discount
-                    if (product.AppliedDiscounts.Count(d => d == discount.Id) > 0)
+                    if (product.AppliedDiscounts.Any(d => d == discount.Id))
                     {
                         product.AppliedDiscounts.Remove(discount.Id);
                         await _productService.DeleteDiscount(discount.Id, product.Id);
@@ -1248,7 +1248,7 @@ public virtual async Task InsertProductCategoryModel(ProductModel.ProductCategor
                 }
             }
 
-            if (product.ProductCategories.Where(x => x.CategoryId == model.CategoryId).Count() == 0)
+            if (!product.ProductCategories.Any(x => x.CategoryId == model.CategoryId))
             {
                 var productCategory = new ProductCategory {
                     ProductId = model.ProductId,
@@ -1266,11 +1266,11 @@ public virtual async Task InsertProductCategoryModel(ProductModel.ProductCategor
         public virtual async Task UpdateProductCategoryModel(ProductModel.ProductCategoryModel model)
         {
             var product = await _productService.GetProductById(model.ProductId, true);
-            var productCategory = product.ProductCategories.Where(x => x.Id == model.Id).FirstOrDefault();
+            var productCategory = product.ProductCategories.FirstOrDefault(x => x.Id == model.Id);
             if (productCategory == null)
                 throw new ArgumentException("No product category mapping found with the specified id");
 
-            if (product.ProductCategories.Where(x => x.Id != model.Id && x.CategoryId == model.CategoryId).Any())
+            if (product.ProductCategories.Any(x => x.Id != model.Id && x.CategoryId == model.CategoryId))
                 throw new ArgumentException("This category is already mapped with this product");
 
             //a vendor should have access only to his products
@@ -1294,7 +1294,7 @@ public virtual async Task UpdateProductCategoryModel(ProductModel.ProductCategor
         public virtual async Task DeleteProductCategory(string id, string productId)
         {
             var product = await _productService.GetProductById(productId, true);
-            var productCategory = product.ProductCategories.Where(x => x.Id == id).FirstOrDefault();
+            var productCategory = product.ProductCategories.FirstOrDefault(x => x.Id == id);
             if (productCategory == null)
                 throw new ArgumentException("No product category mapping found with the specified id");
             productCategory.ProductId = productId;
@@ -1339,7 +1339,7 @@ public virtual async Task InsertProductManufacturer(ProductModel.ProductManufact
             }
 
             var existingProductmanufacturers = product.ProductManufacturers;
-            if (product.ProductManufacturers.Where(x => x.ManufacturerId == manufacturerId).Count() == 0)
+            if (!product.ProductManufacturers.Any(x => x.ManufacturerId == manufacturerId))
             {
                 var productManufacturer = new ProductManufacturer {
                     ProductId = model.ProductId,
@@ -1357,11 +1357,11 @@ public virtual async Task InsertProductManufacturer(ProductModel.ProductManufact
         public virtual async Task UpdateProductManufacturer(ProductModel.ProductManufacturerModel model)
         {
             var product = await _productService.GetProductById(model.ProductId, true);
-            var productManufacturer = product.ProductManufacturers.Where(x => x.Id == model.Id).FirstOrDefault();
+            var productManufacturer = product.ProductManufacturers.FirstOrDefault(x => x.Id == model.Id);
             if (productManufacturer == null)
                 throw new ArgumentException("No product manufacturer mapping found with the specified id");
 
-            if (product.ProductManufacturers.Where(x => x.Id != model.Id && x.ManufacturerId == model.ManufacturerId).Any())
+            if (product.ProductManufacturers.Any(x => x.Id != model.Id && x.ManufacturerId == model.ManufacturerId))
                 throw new ArgumentException("This manufacturer is already mapped with this product");
 
             //a vendor should have access only to his products
@@ -1385,7 +1385,7 @@ public virtual async Task UpdateProductManufacturer(ProductModel.ProductManufact
         public virtual async Task DeleteProductManufacturer(string id, string productId)
         {
             var product = await _productService.GetProductById(productId, true);
-            var productManufacturer = product.ProductManufacturers.Where(x => x.Id == id).FirstOrDefault();
+            var productManufacturer = product.ProductManufacturers.FirstOrDefault(x => x.Id == id);
             if (productManufacturer == null)
                 throw new ArgumentException("No product manufacturer mapping found with the specified id");
             productManufacturer.ProductId = productId;
@@ -1414,7 +1414,7 @@ public virtual async Task InsertRelatedProductModel(ProductModel.AddRelatedProdu
 
                     var existingRelatedProducts = productId1.RelatedProducts;
                     if (model.ProductId != id)
-                        if (existingRelatedProducts.Where(x => x.ProductId2 == id).Count() == 0)
+                        if (!existingRelatedProducts.Any(x => x.ProductId2 == id))
                         {
                             var related = new RelatedProduct {
                                 ProductId1 = model.ProductId,
@@ -1430,7 +1430,7 @@ public virtual async Task InsertRelatedProductModel(ProductModel.AddRelatedProdu
         public virtual async Task UpdateRelatedProductModel(ProductModel.RelatedProductModel model)
         {
             var product1 = await _productService.GetProductById(model.ProductId1, true);
-            var relatedProduct = product1.RelatedProducts.Where(x => x.Id == model.Id).FirstOrDefault();
+            var relatedProduct = product1.RelatedProducts.FirstOrDefault(x => x.Id == model.Id);
             if (relatedProduct == null)
                 throw new ArgumentException("No related product found with the specified id");
 
@@ -1452,7 +1452,7 @@ public virtual async Task UpdateRelatedProductModel(ProductModel.RelatedProductM
         public virtual async Task DeleteRelatedProductModel(ProductModel.RelatedProductModel model)
         {
             var product = await _productService.GetProductById(model.ProductId1, true);
-            var relatedProduct = product.RelatedProducts.Where(x => x.Id == model.Id).FirstOrDefault();
+            var relatedProduct = product.RelatedProducts.FirstOrDefault(x => x.Id == model.Id);
             if (relatedProduct == null)
                 throw new ArgumentException("No related product found with the specified id");
 
@@ -1482,7 +1482,7 @@ public virtual async Task InsertSimilarProductModel(ProductModel.AddSimilarProdu
 
                     var existingSimilarProducts = productId1.SimilarProducts;
                     if (model.ProductId != id)
-                        if (existingSimilarProducts.Where(x => x.ProductId2 == id).Count() == 0)
+                        if (!existingSimilarProducts.Any(x => x.ProductId2 == id))
                         {
                             var similar = new SimilarProduct {
                                 ProductId1 = model.ProductId,
@@ -1498,7 +1498,7 @@ public virtual async Task InsertSimilarProductModel(ProductModel.AddSimilarProdu
         public virtual async Task UpdateSimilarProductModel(ProductModel.SimilarProductModel model)
         {
             var product1 = await _productService.GetProductById(model.ProductId1, true);
-            var similarProduct = product1.SimilarProducts.Where(x => x.Id == model.Id).FirstOrDefault();
+            var similarProduct = product1.SimilarProducts.FirstOrDefault(x => x.Id == model.Id);
             if (similarProduct == null)
                 throw new ArgumentException("No similar product found with the specified id");
 
@@ -1520,7 +1520,7 @@ public virtual async Task UpdateSimilarProductModel(ProductModel.SimilarProductM
         public virtual async Task DeleteSimilarProductModel(ProductModel.SimilarProductModel model)
         {
             var product = await _productService.GetProductById(model.ProductId1, true);
-            var similarProduct = product.SimilarProducts.Where(x => x.Id == model.Id).FirstOrDefault();
+            var similarProduct = product.SimilarProducts.FirstOrDefault(x => x.Id == model.Id);
             if (similarProduct == null)
                 throw new ArgumentException("No similar product found with the specified id");
 
@@ -1550,7 +1550,7 @@ public virtual async Task InsertBundleProductModel(ProductModel.AddBundleProduct
 
                     var existingBundleProducts = productId1.BundleProducts;
                     if (model.ProductId != id)
-                        if (existingBundleProducts.Where(x => x.ProductId == id).Count() == 0)
+                        if (!existingBundleProducts.Any(x => x.ProductId == id))
                         {
                             var bundle = new BundleProduct {
                                 ProductBundleId = model.ProductId,
@@ -1567,7 +1567,7 @@ public virtual async Task InsertBundleProductModel(ProductModel.AddBundleProduct
         public virtual async Task UpdateBundleProductModel(ProductModel.BundleProductModel model)
         {
             var product = await _productService.GetProductById(model.ProductBundleId, true);
-            var bundleProduct = product.BundleProducts.Where(x => x.Id == model.Id).FirstOrDefault();
+            var bundleProduct = product.BundleProducts.FirstOrDefault(x => x.Id == model.Id);
             if (bundleProduct == null)
                 throw new ArgumentException("No bundle product found with the specified id");
 
@@ -1591,7 +1591,7 @@ public virtual async Task UpdateBundleProductModel(ProductModel.BundleProductMod
         public virtual async Task DeleteBundleProductModel(ProductModel.BundleProductModel model)
         {
             var product = await _productService.GetProductById(model.ProductBundleId, true);
-            var bundleProduct = product.BundleProducts.Where(x => x.Id == model.Id).FirstOrDefault();
+            var bundleProduct = product.BundleProducts.FirstOrDefault(x => x.Id == model.Id);
             if (bundleProduct == null)
                 throw new ArgumentException("No bundle product found with the specified id");
 
@@ -1618,7 +1618,7 @@ public virtual async Task InsertCrossSellProductModel(ProductModel.AddCrossSellP
                     if (_workContext.CurrentVendor != null && product.VendorId != _workContext.CurrentVendor.Id)
                         continue;
 
-                    if (crossSellProduct.CrossSellProduct.Where(x => x == id).Count() == 0)
+                    if (!crossSellProduct.CrossSellProduct.Any(x => x == id))
                     {
                         if (model.ProductId != id)
                             await _productService.InsertCrossSellProduct(
@@ -2170,9 +2170,7 @@ public virtual async Task<IList<ProductModel.ProductAttributeMappingModel>> Prep
                 {
                     var productAttribute = await _productAttributeService.GetProductAttributeById(conditionAttribute.ProductAttributeId);
                     var _paname = productAttribute != null ? productAttribute.Name : "";
-                    attributeModel.ConditionString = string.Format("{0}: {1}",
-                        System.Net.WebUtility.HtmlEncode(_paname),
-                        System.Net.WebUtility.HtmlEncode(conditionValue.Name));
+                    attributeModel.ConditionString = $"{System.Net.WebUtility.HtmlEncode(_paname)}: {System.Net.WebUtility.HtmlEncode(conditionValue.Name)}";
                 }
                 else
                     attributeModel.ConditionString = string.Empty;
@@ -2210,7 +2208,7 @@ public virtual async Task UpdateProductAttributeMappingModel(ProductModel.Produc
             var product = await _productService.GetProductById(model.ProductId, true);
             if (product != null)
             {
-                var productAttributeMapping = product.ProductAttributeMappings.Where(x => x.Id == model.Id).FirstOrDefault();
+                var productAttributeMapping = product.ProductAttributeMappings.FirstOrDefault(x => x.Id == model.Id);
                 if (productAttributeMapping != null)
                 {
                     productAttributeMapping = model.ToEntity(productAttributeMapping);
@@ -2341,7 +2339,7 @@ public virtual async Task UpdateProductAttributeConditionModel(Product product,
                 var attribute = product.ProductAttributeMappings.FirstOrDefault(x => x.Id == model.SelectedProductAttributeId);
                 if (attribute != null)
                 {
-                    var controlId = string.Format("product_attribute_{0}", attribute.Id);
+                    var controlId = $"product_attribute_{attribute.Id}";
                     switch (attribute.AttributeControlType)
                     {
                         case AttributeControlType.DropdownList:
@@ -2466,7 +2464,7 @@ public virtual async Task<IList<ProductModel.ProductAttributeValueModel>> Prepar
                     AttributeValueTypeName = x.AttributeValueType.GetLocalizedEnum(_localizationService, _workContext),
                     AssociatedProductId = x.AssociatedProductId,
                     AssociatedProductName = associatedProduct != null ? associatedProduct.Name : "",
-                    Name = productAttributeMapping.AttributeControlType != AttributeControlType.ColorSquares ? x.Name : string.Format("{0} - {1}", x.Name, x.ColorSquaresRgb),
+                    Name = productAttributeMapping.AttributeControlType != AttributeControlType.ColorSquares ? x.Name : $"{x.Name} - {x.ColorSquaresRgb}",
                     ColorSquaresRgb = x.ColorSquaresRgb,
                     ImageSquaresPictureId = x.ImageSquaresPictureId,
                     PriceAdjustment = x.PriceAdjustment,
@@ -2734,7 +2732,7 @@ async Task PrepareCombinationWarehouseInventory(ProductAttributeCombination comb
                 foreach (var attribute in attributes)
                 {
                     attribute.ProductId = product.Id;
-                    var controlId = string.Format("product_attribute_{0}", attribute.Id);
+                    var controlId = $"product_attribute_{attribute.Id}";
                     switch (attribute.AttributeControlType)
                     {
                         case AttributeControlType.DropdownList:
@@ -3078,7 +3076,7 @@ public virtual async Task InsertProductPicture(Product product, string pictureId
             if (picture == null)
                 throw new ArgumentException("No picture found with the specified id");
 
-            if (product.ProductPictures.Where(x => x.PictureId == pictureId).Count() > 0)
+            if (product.ProductPictures.Any(x => x.PictureId == pictureId))
                 return;
 
             await _pictureService.UpdatePicture(picture.Id,
@@ -3104,7 +3102,7 @@ public virtual async Task UpdateProductPicture(ProductModel.ProductPictureModel
         {
             var product = await _productService.GetProductById(model.ProductId, true);
 
-            var productPicture = product.ProductPictures.Where(x => x.Id == model.Id).FirstOrDefault();
+            var productPicture = product.ProductPictures.FirstOrDefault(x => x.Id == model.Id);
             if (productPicture == null)
                 throw new ArgumentException("No product picture found with the specified id");
             productPicture.ProductId = product.Id;
@@ -3142,7 +3140,7 @@ public virtual async Task DeleteProductPicture(ProductModel.ProductPictureModel
         {
             var product = await _productService.GetProductById(model.ProductId, true);
 
-            var productPicture = product.ProductPictures.Where(x => x.Id == model.Id).FirstOrDefault();
+            var productPicture = product.ProductPictures.FirstOrDefault(x => x.Id == model.Id);
             if (productPicture == null)
                 throw new ArgumentException("No product picture found with the specified id");
             productPicture.ProductId = product.Id;
@@ -3184,7 +3182,7 @@ public virtual async Task<IList<ProductSpecificationAttributeModel>> PrepareProd
                 switch (x.AttributeType)
                 {
                     case SpecificationAttributeType.Option:
-                        psaModel.ValueRaw = System.Net.WebUtility.HtmlEncode(specificationAttribute.SpecificationAttributeOptions.Where(y => y.Id == x.SpecificationAttributeOptionId).FirstOrDefault()?.Name);
+                        psaModel.ValueRaw = System.Net.WebUtility.HtmlEncode(specificationAttribute.SpecificationAttributeOptions.FirstOrDefault(y => y.Id == x.SpecificationAttributeOptionId)?.Name);
                         psaModel.SpecificationAttributeOptionId = x.SpecificationAttributeOptionId;
                         break;
                     case SpecificationAttributeType.CustomText:
diff --git a/Grand.Web/Areas/Admin/Services/ReturnRequestViewModelService.cs b/Grand.Web/Areas/Admin/Services/ReturnRequestViewModelService.cs
index bc87a9dd1..24c674b16 100644
--- a/Grand.Web/Areas/Admin/Services/ReturnRequestViewModelService.cs
+++ b/Grand.Web/Areas/Admin/Services/ReturnRequestViewModelService.cs
@@ -108,7 +108,7 @@ public partial class ReturnRequestViewModelService : IReturnRequestViewModelServ
             decimal unitPriceInclTaxInCustomerCurrency = 0;
             foreach (var item in returnRequest.ReturnRequestItems)
             {
-                var orderItem = order.OrderItems.Where(x => x.Id == item.OrderItemId).First();
+                var orderItem = order.OrderItems.First(x => x.Id == item.OrderItemId);
                 unitPriceInclTaxInCustomerCurrency += orderItem.UnitPriceInclTax * item.Quantity;
             }
 
@@ -258,7 +258,7 @@ public virtual async Task<IList<ReturnRequestModel.ReturnRequestItemModel>> Prep
 
             foreach (var item in returnRequest.ReturnRequestItems)
             {
-                var orderItem = order.OrderItems.Where(x => x.Id == item.OrderItemId).FirstOrDefault();
+                var orderItem = order.OrderItems.FirstOrDefault(x => x.Id == item.OrderItemId);
 
                 items.Add(new ReturnRequestModel.ReturnRequestItemModel {
                     ProductId = orderItem.ProductId,
diff --git a/Grand.Web/Areas/Admin/Services/ShipmentViewModelService.cs b/Grand.Web/Areas/Admin/Services/ShipmentViewModelService.cs
index 4f3e6fd74..8e90f9f03 100644
--- a/Grand.Web/Areas/Admin/Services/ShipmentViewModelService.cs
+++ b/Grand.Web/Areas/Admin/Services/ShipmentViewModelService.cs
@@ -93,7 +93,7 @@ public virtual async Task<ShipmentModel> PrepareShipmentModel(Shipment shipment,
                 OrderNumber = order != null ? order.OrderNumber : 0,
                 OrderCode = order != null ? order.Code : "",
                 TrackingNumber = shipment.TrackingNumber,
-                TotalWeight = shipment.TotalWeight.HasValue ? string.Format("{0:F2} [{1}]", shipment.TotalWeight, baseWeightIn) : "",
+                TotalWeight = shipment.TotalWeight.HasValue ? $"{shipment.TotalWeight:F2} [{baseWeightIn}]" : "",
                 ShippedDate = shipment.ShippedDateUtc.HasValue ? _dateTimeHelper.ConvertToUserTime(shipment.ShippedDateUtc.Value, DateTimeKind.Utc) : new DateTime?(),
                 ShippedDateUtc = shipment.ShippedDateUtc,
                 CanShip = !shipment.ShippedDateUtc.HasValue,
@@ -109,7 +109,7 @@ public virtual async Task<ShipmentModel> PrepareShipmentModel(Shipment shipment,
                 foreach (var shipmentItem in shipment.ShipmentItems)
                 {
 
-                    var orderItem = order.OrderItems.Where(x => x.Id == shipmentItem.OrderItemId).FirstOrDefault();
+                    var orderItem = order.OrderItems.FirstOrDefault(x => x.Id == shipmentItem.OrderItemId);
                     if (orderItem == null)
                         continue;
 
@@ -135,7 +135,7 @@ public virtual async Task<ShipmentModel> PrepareShipmentModel(Shipment shipment,
                             AttributeInfo = orderItem.AttributeDescription,
                             ShippedFromWarehouse = warehouse != null ? warehouse.Name : null,
                             ShipSeparately = product.ShipSeparately,
-                            ItemWeight = orderItem.ItemWeight.HasValue ? string.Format("{0:F2} [{1}]", orderItem.ItemWeight, baseWeightIn) : "",
+                            ItemWeight = orderItem.ItemWeight.HasValue ? $"{orderItem.ItemWeight:F2} [{baseWeightIn}]" : "",
                             ItemDimensions = string.Format("{0:F2} x {1:F2} x {2:F2} [{3}]", product.Length, product.Width, product.Height, baseDimensionIn),
                             QuantityOrdered = qtyOrdered,
                             QuantityInThisShipment = qtyInThisShipment,
@@ -384,7 +384,7 @@ public virtual async Task<ShipmentModel> PrepareShipmentModel(Order order)
                     Sku = product.FormatSku(orderItem.Attributes, _productAttributeParser),
                     AttributeInfo = orderItem.AttributeDescription,
                     ShipSeparately = product.ShipSeparately,
-                    ItemWeight = orderItem.ItemWeight.HasValue ? string.Format("{0:F2} [{1}]", orderItem.ItemWeight, baseWeightIn) : "",
+                    ItemWeight = orderItem.ItemWeight.HasValue ? $"{orderItem.ItemWeight:F2} [{baseWeightIn}]" : "",
                     ItemDimensions = string.Format("{0:F2} x {1:F2} x {2:F2} [{3}]", product.Length, product.Width, product.Height, baseDimensionIn),
                     QuantityOrdered = qtyOrdered,
                     QuantityInThisShipment = qtyInThisShipment,
@@ -528,7 +528,7 @@ public virtual async Task<(Shipment shipment, decimal? totalWeight)> PrepareShip
 
                 int qtyToAdd = 0; //parse quantity
                 foreach (string formKey in form.Keys)
-                    if (formKey.Equals(string.Format("qtyToAdd{0}", orderItem.Id), StringComparison.OrdinalIgnoreCase))
+                    if (formKey.Equals($"qtyToAdd{orderItem.Id}", StringComparison.OrdinalIgnoreCase))
                     {
                         int.TryParse(form[formKey], out qtyToAdd);
                         break;
@@ -541,7 +541,7 @@ public virtual async Task<(Shipment shipment, decimal? totalWeight)> PrepareShip
                     //multiple warehouses supported
                     //warehouse is chosen by a store owner
                     foreach (string formKey in form.Keys)
-                        if (formKey.Equals(string.Format("warehouse_{0}", orderItem.Id), StringComparison.OrdinalIgnoreCase))
+                        if (formKey.Equals($"warehouse_{orderItem.Id}", StringComparison.OrdinalIgnoreCase))
                         {
                             warehouseId = form[formKey];
                             break;
@@ -554,7 +554,7 @@ public virtual async Task<(Shipment shipment, decimal? totalWeight)> PrepareShip
                 }
 
                 foreach (string formKey in form.Keys)
-                    if (formKey.Equals(string.Format("qtyToAdd{0}", orderItem.Id), StringComparison.OrdinalIgnoreCase))
+                    if (formKey.Equals($"qtyToAdd{orderItem.Id}", StringComparison.OrdinalIgnoreCase))
                     {
                         int.TryParse(form[formKey], out qtyToAdd);
                         break;
diff --git a/Grand.Web/Areas/Admin/Services/VendorViewModelService.cs b/Grand.Web/Areas/Admin/Services/VendorViewModelService.cs
index f932d04ea..54fbdcd3f 100644
--- a/Grand.Web/Areas/Admin/Services/VendorViewModelService.cs
+++ b/Grand.Web/Areas/Admin/Services/VendorViewModelService.cs
@@ -242,13 +242,13 @@ public virtual async Task<Vendor> UpdateVendorModel(Vendor vendor, VendorModel m
                 if (model.SelectedDiscountIds != null && model.SelectedDiscountIds.Contains(discount.Id))
                 {
                     //new discount
-                    if (vendor.AppliedDiscounts.Count(d => d == discount.Id) == 0)
+                    if (!vendor.AppliedDiscounts.Any(d => d == discount.Id))
                         vendor.AppliedDiscounts.Add(discount.Id);
                 }
                 else
                 {
                     //remove discount
-                    if (vendor.AppliedDiscounts.Count(d => d == discount.Id) > 0)
+                    if (vendor.AppliedDiscounts.Any(d => d == discount.Id))
                         vendor.AppliedDiscounts.Remove(discount.Id);
                 }
             }
diff --git a/Grand.Web/Commands/Handler/Common/ContactAttributeChangeCommandHandler.cs b/Grand.Web/Commands/Handler/Common/ContactAttributeChangeCommandHandler.cs
index 1de023c24..ebddce81b 100644
--- a/Grand.Web/Commands/Handler/Common/ContactAttributeChangeCommandHandler.cs
+++ b/Grand.Web/Commands/Handler/Common/ContactAttributeChangeCommandHandler.cs
@@ -53,7 +53,7 @@ private async Task<IList<CustomAttribute>> ParseContactAttributes(ContactAttribu
             var contactAttributes = await _contactAttributeService.GetAllContactAttributes(request.Store.Id);
             foreach (var attribute in contactAttributes)
             {
-                string controlId = string.Format("contact_attribute_{0}", attribute.Id);
+                string controlId = $"contact_attribute_{attribute.Id}";
                 switch (attribute.AttributeControlType)
                 {
                     case AttributeControlType.DropdownList:
diff --git a/Grand.Web/Commands/Handler/Common/ContactUsSendCommandHandler.cs b/Grand.Web/Commands/Handler/Common/ContactUsSendCommandHandler.cs
index c3d43690c..49abab4e8 100644
--- a/Grand.Web/Commands/Handler/Common/ContactUsSendCommandHandler.cs
+++ b/Grand.Web/Commands/Handler/Common/ContactUsSendCommandHandler.cs
@@ -88,7 +88,7 @@ private async Task<IList<CustomAttribute>> ParseContactAttributes(ContactUsSendC
             var contactAttributes = await _contactAttributeService.GetAllContactAttributes(request.Store.Id);
             foreach (var attribute in contactAttributes)
             {
-                string controlId = string.Format("contact_attribute_{0}", attribute.Id);
+                string controlId = $"contact_attribute_{attribute.Id}";
                 switch (attribute.AttributeControlType)
                 {
                     case AttributeControlType.DropdownList:
diff --git a/Grand.Web/Commands/Handler/Common/PopupInteractiveCommandHandler.cs b/Grand.Web/Commands/Handler/Common/PopupInteractiveCommandHandler.cs
index 0ed9dbbd1..0b133efce 100644
--- a/Grand.Web/Commands/Handler/Common/PopupInteractiveCommandHandler.cs
+++ b/Grand.Web/Commands/Handler/Common/PopupInteractiveCommandHandler.cs
@@ -54,7 +54,7 @@ public async Task<IList<string>> Handle(PopupInteractiveCommand request, Cancell
             var enquiryForm = new List<(string attrName, string attrValue)>();
             foreach (var item in form.FormAttributes)
             {
-                enquiry += string.Format("{0}: {1} <br />", item.Name, request.Form[item.SystemName]);
+                enquiry += $"{item.Name}: {request.Form[item.SystemName]} <br />";
                 enquiryForm.Add((item.Name, request.Form[item.SystemName]));
                 if (!string.IsNullOrEmpty(item.RegexValidation))
                 {
diff --git a/Grand.Web/Commands/Handler/Orders/ReturnRequestSubmitCommandHandler.cs b/Grand.Web/Commands/Handler/Orders/ReturnRequestSubmitCommandHandler.cs
index 29084d353..0599e65de 100644
--- a/Grand.Web/Commands/Handler/Orders/ReturnRequestSubmitCommandHandler.cs
+++ b/Grand.Web/Commands/Handler/Orders/ReturnRequestSubmitCommandHandler.cs
@@ -75,17 +75,17 @@ public async Task<(ReturnRequestModel model, ReturnRequest rr)> Handle(ReturnReq
 
                     foreach (string formKey in request.Form.Keys)
                     {
-                        if (formKey.Equals(string.Format("quantity{0}", orderItem.Id), StringComparison.OrdinalIgnoreCase))
+                        if (formKey.Equals($"quantity{orderItem.Id}", StringComparison.OrdinalIgnoreCase))
                         {
                             int.TryParse(request.Form[formKey], out quantity);
                         }
 
-                        if (formKey.Equals(string.Format("reason{0}", orderItem.Id), StringComparison.OrdinalIgnoreCase))
+                        if (formKey.Equals($"reason{orderItem.Id}", StringComparison.OrdinalIgnoreCase))
                         {
                             rrrId = request.Form[formKey];
                         }
 
-                        if (formKey.Equals(string.Format("action{0}", orderItem.Id), StringComparison.OrdinalIgnoreCase))
+                        if (formKey.Equals($"action{orderItem.Id}", StringComparison.OrdinalIgnoreCase))
                         {
                             rraId = request.Form[formKey];
                         }
diff --git a/Grand.Web/Commands/Handler/ShoppingCart/SaveCheckoutAttributesCommandHandler.cs b/Grand.Web/Commands/Handler/ShoppingCart/SaveCheckoutAttributesCommandHandler.cs
index dc45fd25f..7b11184d7 100644
--- a/Grand.Web/Commands/Handler/ShoppingCart/SaveCheckoutAttributesCommandHandler.cs
+++ b/Grand.Web/Commands/Handler/ShoppingCart/SaveCheckoutAttributesCommandHandler.cs
@@ -45,7 +45,7 @@ public async Task<IList<CustomAttribute>> Handle(SaveCheckoutAttributesCommand r
             var checkoutAttributes = await _checkoutAttributeService.GetAllCheckoutAttributes(request.Store.Id, !request.Cart.RequiresShipping());
             foreach (var attribute in checkoutAttributes)
             {
-                string controlId = string.Format("checkout_attribute_{0}", attribute.Id);
+                string controlId = $"checkout_attribute_{attribute.Id}";
                 switch (attribute.AttributeControlType)
                 {
                     case AttributeControlType.DropdownList:
diff --git a/Grand.Web/Components/Favicon.cs b/Grand.Web/Components/Favicon.cs
index c38864279..3afcaefaf 100644
--- a/Grand.Web/Components/Favicon.cs
+++ b/Grand.Web/Components/Favicon.cs
@@ -32,7 +32,7 @@ public IViewComponentResult Invoke()
         private FaviconModel PrepareFavicon()
         {
             var model = new FaviconModel();
-            var faviconFileName = string.Format("favicon-{0}.ico", _storeContext.CurrentStore.Id);
+            var faviconFileName = $"favicon-{_storeContext.CurrentStore.Id}.ico";
             var localFaviconPath = System.IO.Path.Combine(_hostingEnvironment.WebRootPath, faviconFileName);
             if (!System.IO.File.Exists(localFaviconPath))
             {
diff --git a/Grand.Web/Components/Logo.cs b/Grand.Web/Components/Logo.cs
index dc43f66d4..45356b1b9 100644
--- a/Grand.Web/Components/Logo.cs
+++ b/Grand.Web/Components/Logo.cs
@@ -61,7 +61,7 @@ private async Task<LogoModel> PrepareLogo()
                 if (string.IsNullOrEmpty(logo))
                 {
                     //use default logo
-                    logo = string.Format("{0}://{1}/Themes/{2}/Content/images/logo.png", HttpContext.Request.Scheme, HttpContext.Request.Host, _themeContext.WorkingThemeName);
+                    logo = $"{HttpContext.Request.Scheme}://{HttpContext.Request.Host}/Themes/{_themeContext.WorkingThemeName}/Content/images/logo.png";
                 }
                 return logo;
             });
diff --git a/Grand.Web/Controllers/ActionCartController.cs b/Grand.Web/Controllers/ActionCartController.cs
index c9b98abef..a53e858da 100644
--- a/Grand.Web/Controllers/ActionCartController.cs
+++ b/Grand.Web/Controllers/ActionCartController.cs
@@ -329,7 +329,7 @@ public virtual async Task<IActionResult> AddProductToCart_Details(string product
             #region Update existing shopping cart item?
             string updatecartitemid = "";
             foreach (string formKey in form.Keys)
-                if (formKey.Equals(string.Format("addtocart_{0}.UpdatedShoppingCartItemId", productId), StringComparison.OrdinalIgnoreCase))
+                if (formKey.Equals($"addtocart_{productId}.UpdatedShoppingCartItemId", StringComparison.OrdinalIgnoreCase))
                 {
                     updatecartitemid = form[formKey];
                     break;
@@ -359,7 +359,7 @@ public virtual async Task<IActionResult> AddProductToCart_Details(string product
             {
                 foreach (string formKey in form.Keys)
                 {
-                    if (formKey.Equals(string.Format("addtocart_{0}.CustomerEnteredPrice", productId), StringComparison.OrdinalIgnoreCase))
+                    if (formKey.Equals($"addtocart_{productId}.CustomerEnteredPrice", StringComparison.OrdinalIgnoreCase))
                     {
                         if (decimal.TryParse(form[formKey], out decimal customerEnteredPrice))
                             customerEnteredPriceConverted = await _currencyService.ConvertToPrimaryStoreCurrency(customerEnteredPrice, _workContext.WorkingCurrency);
@@ -373,7 +373,7 @@ public virtual async Task<IActionResult> AddProductToCart_Details(string product
 
             int quantity = 1;
             foreach (string formKey in form.Keys)
-                if (formKey.Equals(string.Format("addtocart_{0}.EnteredQuantity", productId), StringComparison.OrdinalIgnoreCase))
+                if (formKey.Equals($"addtocart_{productId}.EnteredQuantity", StringComparison.OrdinalIgnoreCase))
                 {
                     int.TryParse(form[formKey], out quantity);
                     break;
@@ -637,7 +637,7 @@ public virtual async Task<IActionResult> AddProductToCart_Details(string product
             decimal bid = 0;
             foreach (string formKey in form.Keys)
             {
-                if (formKey.Equals(string.Format("auction_{0}.HighestBidValue", productId), StringComparison.OrdinalIgnoreCase))
+                if (formKey.Equals($"auction_{productId}.HighestBidValue", StringComparison.OrdinalIgnoreCase))
                 {
                     decimal.TryParse(form[formKey], out bid);
                     if (bid == 0)
diff --git a/Grand.Web/Controllers/BlogController.cs b/Grand.Web/Controllers/BlogController.cs
index 61a72b336..08f17b3ac 100644
--- a/Grand.Web/Controllers/BlogController.cs
+++ b/Grand.Web/Controllers/BlogController.cs
@@ -107,7 +107,7 @@ public virtual async Task<IActionResult> BlogByKeyword(BlogPagingFilteringModel
         public virtual async Task<IActionResult> ListRss(string languageId)
         {
             var feed = new RssFeed(
-                string.Format("{0}: Blog", _storeContext.CurrentStore.GetLocalized(x => x.Name, _workContext.WorkingLanguage.Id)),
+                $"{_storeContext.CurrentStore.GetLocalized(x => x.Name, _workContext.WorkingLanguage.Id)}: Blog",
                 "Blog",
                 new Uri(_webHelper.GetStoreLocation()),
                 DateTime.UtcNow);
@@ -120,7 +120,7 @@ public virtual async Task<IActionResult> ListRss(string languageId)
             foreach (var blogPost in blogPosts)
             {
                 string blogPostUrl = Url.RouteUrl("BlogPost", new { SeName = blogPost.GetSeName(_workContext.WorkingLanguage.Id) }, _webHelper.IsCurrentConnectionSecured() ? "https" : "http");
-                items.Add(new RssItem(blogPost.Title, blogPost.Body, new Uri(blogPostUrl), String.Format("urn:store:{0}:blog:post:{1}", _storeContext.CurrentStore.Id, blogPost.Id), blogPost.CreatedOnUtc));
+                items.Add(new RssItem(blogPost.Title, blogPost.Body, new Uri(blogPostUrl), $"urn:store:{_storeContext.CurrentStore.Id}:blog:post:{blogPost.Id}", blogPost.CreatedOnUtc));
             }
             feed.Items = items;
             return new RssActionResult(feed, _webHelper.GetThisPageUrl(false));
diff --git a/Grand.Web/Controllers/CheckoutController.cs b/Grand.Web/Controllers/CheckoutController.cs
index cec395726..5aac12a9d 100644
--- a/Grand.Web/Controllers/CheckoutController.cs
+++ b/Grand.Web/Controllers/CheckoutController.cs
@@ -477,7 +477,7 @@ public virtual async Task<IActionResult> NewShippingAddress(CheckoutShippingAddr
                         Name = string.Format(_localizationService.GetResource("Checkout.PickupPoints.Name"), selectedPoint.Name),
                         Rate = selectedPoint.PickupFee,
                         Description = selectedPoint.Description,
-                        ShippingRateComputationMethodSystemName = string.Format("PickupPoint_{0}", selectedPoint.Id)
+                        ShippingRateComputationMethodSystemName = $"PickupPoint_{selectedPoint.Id}"
                     };
 
                     await _genericAttributeService.SaveAttribute(_workContext.CurrentCustomer,
@@ -1351,7 +1351,7 @@ public virtual async Task<IActionResult> OpcSaveShipping(CheckoutShippingAddress
                             Name = string.Format(_localizationService.GetResource("Checkout.PickupPoints.Name"), selectedPoint.Name),
                             Rate = selectedPoint.PickupFee,
                             Description = selectedPoint.Description,
-                            ShippingRateComputationMethodSystemName = string.Format("PickupPoint_{0}", selectedPoint.Id)
+                            ShippingRateComputationMethodSystemName = $"PickupPoint_{selectedPoint.Id}"
                         };
 
                         await _genericAttributeService.SaveAttribute(_workContext.CurrentCustomer,
@@ -1714,7 +1714,7 @@ public virtual async Task<IActionResult> OpcSavePaymentInfo(IFormCollection form
                         //redirect
                         return Json(new
                         {
-                            redirect = string.Format("{0}checkout/OpcCompleteRedirectionPayment", _webHelper.GetStoreLocation())
+                            redirect = $"{_webHelper.GetStoreLocation()}checkout/OpcCompleteRedirectionPayment"
                         });
                     }
 
diff --git a/Grand.Web/Controllers/CourseController.cs b/Grand.Web/Controllers/CourseController.cs
index 666abf983..7edb4f360 100644
--- a/Grand.Web/Controllers/CourseController.cs
+++ b/Grand.Web/Controllers/CourseController.cs
@@ -190,7 +190,7 @@ public virtual async Task<IActionResult> DownloadFile(string id)
 
             //use stored data
             if (download.DownloadBinary == null)
-                return Content(string.Format("Download data is not available any more. Download GD={0}", download.Id));
+                return Content($"Download data is not available any more. Download GD={download.Id}");
 
             string fileName = !string.IsNullOrWhiteSpace(download.Filename) ? download.Filename : download.Id.ToString();
             string contentType = !string.IsNullOrWhiteSpace(download.ContentType)
@@ -225,7 +225,7 @@ public virtual async Task<IActionResult> VideoFile(string id)
 
             //use stored data
             if (download.DownloadBinary == null)
-                return Content(string.Format("Download data is not available any more. Download GD={0}", download.Id));
+                return Content($"Download data is not available any more. Download GD={download.Id}");
 
             string fileName = !string.IsNullOrWhiteSpace(download.Filename) ? download.Filename : download.Id.ToString();
             string contentType = !string.IsNullOrWhiteSpace(download.ContentType)
diff --git a/Grand.Web/Controllers/NewsController.cs b/Grand.Web/Controllers/NewsController.cs
index 15d839413..3fe7b0a3a 100644
--- a/Grand.Web/Controllers/NewsController.cs
+++ b/Grand.Web/Controllers/NewsController.cs
@@ -85,7 +85,7 @@ public virtual async Task<IActionResult> List(NewsPagingFilteringModel command)
         public virtual async Task<IActionResult> ListRss(string languageId)
         {
             var feed = new RssFeed(
-                string.Format("{0}: News", _storeContext.CurrentStore.GetLocalized(x => x.Name, _workContext.WorkingLanguage.Id)),
+                $"{_storeContext.CurrentStore.GetLocalized(x => x.Name, _workContext.WorkingLanguage.Id)}: News",
                 "News",
                 new Uri(_webHelper.GetStoreLocation()),
                 DateTime.UtcNow);
@@ -98,7 +98,7 @@ public virtual async Task<IActionResult> ListRss(string languageId)
             foreach (var n in newsItems)
             {
                 string newsUrl = Url.RouteUrl("NewsItem", new { SeName = n.GetSeName(_workContext.WorkingLanguage.Id) }, _webHelper.IsCurrentConnectionSecured() ? "https" : "http");
-                items.Add(new RssItem(n.Title, n.Short, new Uri(newsUrl), String.Format("urn:store:{0}:news:blog:{1}", _storeContext.CurrentStore.Id, n.Id), n.CreatedOnUtc));
+                items.Add(new RssItem(n.Title, n.Short, new Uri(newsUrl), $"urn:store:{_storeContext.CurrentStore.Id}:news:blog:{n.Id}", n.CreatedOnUtc));
             }
             feed.Items = items;
             return new RssActionResult(feed, _webHelper.GetThisPageUrl(false));
diff --git a/Grand.Web/Controllers/OrderController.cs b/Grand.Web/Controllers/OrderController.cs
index 2e2f7bb00..4ac73a97c 100644
--- a/Grand.Web/Controllers/OrderController.cs
+++ b/Grand.Web/Controllers/OrderController.cs
@@ -190,7 +190,7 @@ public virtual async Task<IActionResult> GetPdfInvoice(string orderId, [FromServ
                 await pdfService.PrintOrdersToPdf(stream, orders, _workContext.WorkingLanguage.Id);
                 bytes = stream.ToArray();
             }
-            return File(bytes, "application/pdf", string.Format("order_{0}.pdf", order.Id));
+            return File(bytes, "application/pdf", $"order_{order.Id}.pdf");
         }
 
         //My account / Order details page / Add order note
diff --git a/Grand.Web/Controllers/ProductController.cs b/Grand.Web/Controllers/ProductController.cs
index 962a3ecea..bc009e498 100644
--- a/Grand.Web/Controllers/ProductController.cs
+++ b/Grand.Web/Controllers/ProductController.cs
@@ -255,7 +255,7 @@ public virtual async Task<IActionResult> ProductDetails_WarehouseChange(string p
                     downloadGuid = Guid.Empty,
                 });
             }
-            var attribute = product.ProductAttributeMappings.Where(x => x.Id == attributeId).FirstOrDefault();
+            var attribute = product.ProductAttributeMappings.FirstOrDefault(x => x.Id == attributeId);
             if (attribute == null || attribute.AttributeControlType != AttributeControlType.FileUpload)
             {
                 return Json(new
@@ -477,7 +477,7 @@ public virtual async Task<IActionResult> NewProducts()
         public virtual async Task<IActionResult> NewProductsRss([FromServices] IWebHelper webHelper)
         {
             var feed = new RssFeed(
-                                    string.Format("{0}: New products", _storeContext.CurrentStore.GetLocalized(x => x.Name, _workContext.WorkingLanguage.Id)),
+                                    $"{_storeContext.CurrentStore.GetLocalized(x => x.Name, _workContext.WorkingLanguage.Id)}: New products",
                                     "Information about products",
                                     new Uri(webHelper.GetStoreLocation(false)),
                                     DateTime.UtcNow);
@@ -498,7 +498,7 @@ public virtual async Task<IActionResult> NewProductsRss([FromServices] IWebHelpe
                 string productUrl = Url.RouteUrl("Product", new { SeName = product.GetSeName(_workContext.WorkingLanguage.Id) }, webHelper.IsCurrentConnectionSecured() ? "https" : "http");
                 string productName = product.GetLocalized(x => x.Name, _workContext.WorkingLanguage.Id);
                 string productDescription = product.GetLocalized(x => x.ShortDescription, _workContext.WorkingLanguage.Id);
-                var item = new RssItem(productName, productDescription, new Uri(productUrl), String.Format("urn:store:{0}:newProducts:product:{1}", _storeContext.CurrentStore.Id, product.Id), product.CreatedOnUtc);
+                var item = new RssItem(productName, productDescription, new Uri(productUrl), $"urn:store:{_storeContext.CurrentStore.Id}:newProducts:product:{product.Id}", product.CreatedOnUtc);
                 items.Add(item);
             }
             feed.Items = items;
diff --git a/Grand.Web/Controllers/ShoppingCartController.cs b/Grand.Web/Controllers/ShoppingCartController.cs
index 3fb058b81..61b915050 100644
--- a/Grand.Web/Controllers/ShoppingCartController.cs
+++ b/Grand.Web/Controllers/ShoppingCartController.cs
@@ -266,7 +266,7 @@ public virtual async Task<IActionResult> UpdateCart(IFormCollection form)
             foreach (var sci in cart)
             {
                 foreach (string formKey in form.Keys)
-                    if (formKey.Equals(string.Format("itemquantity{0}", sci.Id), StringComparison.OrdinalIgnoreCase))
+                    if (formKey.Equals($"itemquantity{sci.Id}", StringComparison.OrdinalIgnoreCase))
                     {
                         if (int.TryParse(form[formKey], out int newQuantity))
                         {
@@ -798,7 +798,7 @@ public virtual async Task<IActionResult> UpdateWishlist(IFormCollection form)
                 else
                 {
                     foreach (string formKey in form.Keys)
-                        if (formKey.Equals(string.Format("itemquantity{0}", sci.Id), StringComparison.OrdinalIgnoreCase))
+                        if (formKey.Equals($"itemquantity{sci.Id}", StringComparison.OrdinalIgnoreCase))
                         {
                             if (int.TryParse(form[formKey], out int newQuantity))
                             {
diff --git a/Grand.Web/Extensions/MappingExtensions.cs b/Grand.Web/Extensions/MappingExtensions.cs
index 2d12ae7c6..a5b2cf1c8 100644
--- a/Grand.Web/Extensions/MappingExtensions.cs
+++ b/Grand.Web/Extensions/MappingExtensions.cs
@@ -240,8 +240,8 @@ public static Address ToEntity(this VendorAddressModel model, Address destinatio
             startDate = null;
             endDate = null;
 
-            string startControlId = string.Format("reservationDatepickerFrom_{0}", product.Id);
-            string endControlId = string.Format("reservationDatepickerTo_{0}", product.Id);
+            string startControlId = $"reservationDatepickerFrom_{product.Id}";
+            string endControlId = $"reservationDatepickerTo_{product.Id}";
             var ctrlStartDate = form[startControlId];
             var ctrlEndDate = form[endControlId];
             try
diff --git a/Grand.Web/Features/Handlers/Common/GetParseCustomAddressAttributesHandler.cs b/Grand.Web/Features/Handlers/Common/GetParseCustomAddressAttributesHandler.cs
index a617377a3..6e8420686 100644
--- a/Grand.Web/Features/Handlers/Common/GetParseCustomAddressAttributesHandler.cs
+++ b/Grand.Web/Features/Handlers/Common/GetParseCustomAddressAttributesHandler.cs
@@ -33,7 +33,7 @@ public async Task<IList<CustomAttribute>> Handle(GetParseCustomAddressAttributes
             var attributes = await _addressAttributeService.GetAllAddressAttributes();
             foreach (var attribute in attributes)
             {
-                string controlId = string.Format("address_attribute_{0}", attribute.Id);
+                string controlId = $"address_attribute_{attribute.Id}";
                 switch (attribute.AttributeControlType)
                 {
                     case AttributeControlType.DropdownList:
diff --git a/Grand.Web/Features/Handlers/Customers/GetParseCustomAttributesHandler.cs b/Grand.Web/Features/Handlers/Customers/GetParseCustomAttributesHandler.cs
index 48a3a8348..8582db9af 100644
--- a/Grand.Web/Features/Handlers/Customers/GetParseCustomAttributesHandler.cs
+++ b/Grand.Web/Features/Handlers/Customers/GetParseCustomAttributesHandler.cs
@@ -28,7 +28,7 @@ public async Task<IList<CustomAttribute>> Handle(GetParseCustomAttributes reques
             var attributes = await _customerAttributeService.GetAllCustomerAttributes();
             foreach (var attribute in attributes)
             {
-                string controlId = string.Format("customer_attribute_{0}", attribute.Id);
+                string controlId = $"customer_attribute_{attribute.Id}";
                 switch (attribute.AttributeControlType)
                 {
                     case AttributeControlType.DropdownList:
diff --git a/Grand.Web/Features/Handlers/Messages/GetInteractiveFormHandler.cs b/Grand.Web/Features/Handlers/Messages/GetInteractiveFormHandler.cs
index 34cbf1ad1..4575b9498 100644
--- a/Grand.Web/Features/Handlers/Messages/GetInteractiveFormHandler.cs
+++ b/Grand.Web/Features/Handlers/Messages/GetInteractiveFormHandler.cs
@@ -43,68 +43,66 @@ protected string PrepareDataInteractiveForm(InteractiveForm form)
             {
                 if (item.AttributeControlType == FormControlType.TextBox)
                 {
-                    string _style = string.Format("{0}", item.Style);
-                    string _class = string.Format("{0} {1}", "form-control", item.Class);
+                    string _style = $"{item.Style}";
+                    string _class = $"{"form-control"} {item.Class}";
                     string _value = item.DefaultValue;
-                    var textbox = string.Format("<input type='text'  name='{0}' class='{1}' style='{2}' value='{3}' {4}>", item.SystemName, _class, _style, _value, item.IsRequired ? "required" : "");
-                    body = body.Replace(string.Format("%{0}%", item.SystemName), textbox);
+                    var textbox = $"<input type='text'  name='{item.SystemName}' class='{_class}' style='{_style}' value='{_value}' {(item.IsRequired ? "required" : "")}>";
+                    body = body.Replace($"%{item.SystemName}%", textbox);
                 }
                 if (item.AttributeControlType == FormControlType.MultilineTextbox)
                 {
-                    string _style = string.Format("{0}", item.Style);
-                    string _class = string.Format("{0} {1}", "form-control", item.Class);
+                    string _style = $"{item.Style}";
+                    string _class = $"{"form-control"} {item.Class}";
                     string _value = item.DefaultValue;
-                    var textarea = string.Format("<textarea name='{0}' class='{1}' style='{2}' {3}> {4} </textarea>", item.SystemName, _class, _style, item.IsRequired ? "required" : "", _value);
-                    body = body.Replace(string.Format("%{0}%", item.SystemName), textarea);
+                    var textarea = $"<textarea name='{item.SystemName}' class='{_class}' style='{_style}' {(item.IsRequired ? "required" : "")}> {_value} </textarea>";
+                    body = body.Replace($"%{item.SystemName}%", textarea);
                 }
                 if (item.AttributeControlType == FormControlType.Checkboxes)
                 {
                     var checkbox = "<div class='custom-controls-stacked'>";
                     foreach (var itemcheck in item.FormAttributeValues.OrderBy(x => x.DisplayOrder))
                     {
-                        string _style = string.Format("{0}", item.Style);
-                        string _class = string.Format("{0} {1}", "custom-control-input", item.Class);
+                        string _style = $"{item.Style}";
+                        string _class = $"{"custom-control-input"} {item.Class}";
 
                         checkbox += "<div class='custom-control custom-checkbox'>";
-                        checkbox += string.Format("<input type='checkbox' class='{0}' style='{1}' {2} id='{3}' name='{4}' value='{5}'>", _class, _style,
-                            itemcheck.IsPreSelected ? "checked" : "", itemcheck.Id, item.SystemName, itemcheck.GetLocalized(x => x.Name, _workContext.WorkingLanguage.Id));
-                        checkbox += string.Format("<label class='custom-control-label' for='{0}'>{1}</label>", itemcheck.Id, itemcheck.GetLocalized(x => x.Name, _workContext.WorkingLanguage.Id));
+                        checkbox += $"<input type='checkbox' class='{_class}' style='{_style}' {(itemcheck.IsPreSelected ? "checked" : "")} id='{itemcheck.Id}' name='{item.SystemName}' value='{itemcheck.GetLocalized(x => x.Name, _workContext.WorkingLanguage.Id)}'>";
+                        checkbox += $"<label class='custom-control-label' for='{itemcheck.Id}'>{itemcheck.GetLocalized(x => x.Name, _workContext.WorkingLanguage.Id)}</label>";
                         checkbox += "</div>";
                     }
                     checkbox += "</div>";
-                    body = body.Replace(string.Format("%{0}%", item.SystemName), checkbox);
+                    body = body.Replace($"%{item.SystemName}%", checkbox);
                 }
 
                 if (item.AttributeControlType == FormControlType.DropdownList)
                 {
                     var dropdown = string.Empty;
-                    string _style = string.Format("{0}", item.Style);
-                    string _class = string.Format("{0} {1}", "form-control custom-select", item.Class);
+                    string _style = $"{item.Style}";
+                    string _class = $"{"form-control custom-select"} {item.Class}";
 
-                    dropdown = string.Format("<select name='{0}' class='{1}' style='{2}'>", item.SystemName, _class, _style);
+                    dropdown = $"<select name='{item.SystemName}' class='{_class}' style='{_style}'>";
                     foreach (var itemdropdown in item.FormAttributeValues.OrderBy(x => x.DisplayOrder))
                     {
-                        dropdown += string.Format("<option value='{0}' {1}>{2}</option>", itemdropdown.GetLocalized(x => x.Name, _workContext.WorkingLanguage.Id), itemdropdown.IsPreSelected ? "selected" : "", itemdropdown.GetLocalized(x => x.Name, _workContext.WorkingLanguage.Id));
+                        dropdown += $"<option value='{itemdropdown.GetLocalized(x => x.Name, _workContext.WorkingLanguage.Id)}' {(itemdropdown.IsPreSelected ? "selected" : "")}>{itemdropdown.GetLocalized(x => x.Name, _workContext.WorkingLanguage.Id)}</option>";
                     }
                     dropdown += "</select>";
-                    body = body.Replace(string.Format("%{0}%", item.SystemName), dropdown);
+                    body = body.Replace($"%{item.SystemName}%", dropdown);
                 }
                 if (item.AttributeControlType == FormControlType.RadioList)
                 {
                     var radio = "<div class='custom-controls-stacked'>";
                     foreach (var itemradio in item.FormAttributeValues.OrderBy(x => x.DisplayOrder))
                     {
-                        string _style = string.Format("{0}", item.Style);
-                        string _class = string.Format("{0} {1}", "custom-control-input", item.Class);
+                        string _style = $"{item.Style}";
+                        string _class = $"{"custom-control-input"} {item.Class}";
 
                         radio += "<div class='custom-control custom-radio'>";
-                        radio += string.Format("<input type='radio' class='{0}' style='{1}' {2} id='{3}' name='{4}' value='{5}'>", _class, _style,
-                            itemradio.IsPreSelected ? "checked" : "", itemradio.Id, item.SystemName, itemradio.GetLocalized(x => x.Name, _workContext.WorkingLanguage.Id));
-                        radio += string.Format("<label class='custom-control-label' for='{0}'>{1}</label>", itemradio.Id, itemradio.GetLocalized(x => x.Name, _workContext.WorkingLanguage.Id));
+                        radio += $"<input type='radio' class='{_class}' style='{_style}' {(itemradio.IsPreSelected ? "checked" : "")} id='{itemradio.Id}' name='{item.SystemName}' value='{itemradio.GetLocalized(x => x.Name, _workContext.WorkingLanguage.Id)}'>";
+                        radio += $"<label class='custom-control-label' for='{itemradio.Id}'>{itemradio.GetLocalized(x => x.Name, _workContext.WorkingLanguage.Id)}</label>";
                         radio += "</div>";
                     }
                     radio += "</div>";
-                    body = body.Replace(string.Format("%{0}%", item.SystemName), radio);
+                    body = body.Replace($"%{item.SystemName}%", radio);
                 }
             }
             body = body.Replace("%sendbutton%", "<input type='submit' id='send-interactive-form' class='btn btn-success interactive-form-button' value='Send' />");
diff --git a/Grand.Web/Features/Handlers/Orders/GetCustomerOrderListHandler.cs b/Grand.Web/Features/Handlers/Orders/GetCustomerOrderListHandler.cs
index 38afb0f00..cb3f7d293 100644
--- a/Grand.Web/Features/Handlers/Orders/GetCustomerOrderListHandler.cs
+++ b/Grand.Web/Features/Handlers/Orders/GetCustomerOrderListHandler.cs
@@ -91,7 +91,7 @@ private async Task PrepareRecurringPayments(CustomerOrderListModel model, GetCus
                 var recurringPaymentModel = new CustomerOrderListModel.RecurringOrderModel {
                     Id = recurringPayment.Id,
                     StartDate = _dateTimeHelper.ConvertToUserTime(recurringPayment.StartDateUtc, DateTimeKind.Utc).ToString(),
-                    CycleInfo = string.Format("{0} {1}", recurringPayment.CycleLength, recurringPayment.CyclePeriod.GetLocalizedEnum(_localizationService, request.Language.Id)),
+                    CycleInfo = $"{recurringPayment.CycleLength} {recurringPayment.CyclePeriod.GetLocalizedEnum(_localizationService, request.Language.Id)}",
                     NextPayment = recurringPayment.NextPaymentDate.HasValue ? _dateTimeHelper.ConvertToUserTime(recurringPayment.NextPaymentDate.Value, DateTimeKind.Utc).ToString() : "",
                     TotalCycles = recurringPayment.TotalCycles,
                     CyclesRemaining = recurringPayment.CyclesRemaining,
diff --git a/Grand.Web/Features/Handlers/Orders/GetReturnRequestDetailsHandler.cs b/Grand.Web/Features/Handlers/Orders/GetReturnRequestDetailsHandler.cs
index 5c2e4b1df..5de258d24 100644
--- a/Grand.Web/Features/Handlers/Orders/GetReturnRequestDetailsHandler.cs
+++ b/Grand.Web/Features/Handlers/Orders/GetReturnRequestDetailsHandler.cs
@@ -69,7 +69,7 @@ public async Task<ReturnRequestDetailsModel> Handle(GetReturnRequestDetails requ
 
             foreach (var item in request.ReturnRequest.ReturnRequestItems)
             {
-                var orderItem = request.Order.OrderItems.Where(x => x.Id == item.OrderItemId).FirstOrDefault();
+                var orderItem = request.Order.OrderItems.FirstOrDefault(x => x.Id == item.OrderItemId);
                 var product = await _productService.GetProductByIdIncludeArch(orderItem.ProductId);
 
                 string unitPrice = string.Empty;
diff --git a/Grand.Web/Features/Handlers/Orders/GetReturnRequestsHandler.cs b/Grand.Web/Features/Handlers/Orders/GetReturnRequestsHandler.cs
index e065778dc..c18639c94 100644
--- a/Grand.Web/Features/Handlers/Orders/GetReturnRequestsHandler.cs
+++ b/Grand.Web/Features/Handlers/Orders/GetReturnRequestsHandler.cs
@@ -62,7 +62,7 @@ public async Task<CustomerReturnRequestsModel> Handle(GetReturnRequests request,
                 decimal total = 0;
                 foreach (var rrItem in returnRequest.ReturnRequestItems)
                 {
-                    var orderItem = order.OrderItems.Where(x => x.Id == rrItem.OrderItemId).First();
+                    var orderItem = order.OrderItems.First(x => x.Id == rrItem.OrderItemId);
 
                     if (order.CustomerTaxDisplayType == TaxDisplayType.IncludingTax)
                     {
diff --git a/Grand.Web/Features/Handlers/Orders/GetShipmentDetailsHandler.cs b/Grand.Web/Features/Handlers/Orders/GetShipmentDetailsHandler.cs
index 749a1ab10..d0e9f37a1 100644
--- a/Grand.Web/Features/Handlers/Orders/GetShipmentDetailsHandler.cs
+++ b/Grand.Web/Features/Handlers/Orders/GetShipmentDetailsHandler.cs
@@ -100,7 +100,7 @@ public async Task<ShipmentDetailsModel> Handle(GetShipmentDetails request, Cance
             model.ShowSku = _catalogSettings.ShowSkuOnProductDetailsPage;
             foreach (var shipmentItem in request.Shipment.ShipmentItems)
             {
-                var orderItem = request.Order.OrderItems.Where(x => x.Id == shipmentItem.OrderItemId).FirstOrDefault();
+                var orderItem = request.Order.OrderItems.FirstOrDefault(x => x.Id == shipmentItem.OrderItemId);
                 if (orderItem == null)
                     continue;
                 var product = await _productService.GetProductByIdIncludeArch(orderItem.ProductId);
diff --git a/Grand.Web/Features/Handlers/Products/GetProductSpecificationHandler.cs b/Grand.Web/Features/Handlers/Products/GetProductSpecificationHandler.cs
index eb524585a..f26a7773d 100644
--- a/Grand.Web/Features/Handlers/Products/GetProductSpecificationHandler.cs
+++ b/Grand.Web/Features/Handlers/Products/GetProductSpecificationHandler.cs
@@ -34,14 +34,14 @@ public async Task<IList<ProductSpecificationModel>> Handle(GetProductSpecificati
                 var m = new ProductSpecificationModel {
                     SpecificationAttributeId = item.SpecificationAttributeId,
                     SpecificationAttributeName = specificationAttribute.GetLocalized(x => x.Name, request.Language.Id),
-                    ColorSquaresRgb = specificationAttribute.SpecificationAttributeOptions.Where(x => x.Id == item.SpecificationAttributeOptionId).FirstOrDefault() != null ? specificationAttribute.SpecificationAttributeOptions.Where(x => x.Id == item.SpecificationAttributeOptionId).FirstOrDefault().ColorSquaresRgb : "",
+                    ColorSquaresRgb = specificationAttribute.SpecificationAttributeOptions.FirstOrDefault(x => x.Id == item.SpecificationAttributeOptionId)!= null ? specificationAttribute.SpecificationAttributeOptions.FirstOrDefault(x => x.Id == item.SpecificationAttributeOptionId).ColorSquaresRgb : "",
                     GenericAttributes = specificationAttribute.GenericAttributes,
                 };
 
                 switch (item.AttributeType)
                 {
                     case SpecificationAttributeType.Option:
-                        m.ValueRaw = WebUtility.HtmlEncode(specificationAttribute.SpecificationAttributeOptions.Where(x => x.Id == item.SpecificationAttributeOptionId).FirstOrDefault().GetLocalized(x => x.Name, request.Language.Id));
+                        m.ValueRaw = WebUtility.HtmlEncode(specificationAttribute.SpecificationAttributeOptions.FirstOrDefault(x => x.Id == item.SpecificationAttributeOptionId).GetLocalized(x => x.Name, request.Language.Id));
                         break;
                     case SpecificationAttributeType.CustomText:
                         m.ValueRaw = WebUtility.HtmlEncode(item.CustomValue);
diff --git a/Grand.Web/Features/Handlers/ShoppingCart/GetParseProductAttributesHandler.cs b/Grand.Web/Features/Handlers/ShoppingCart/GetParseProductAttributesHandler.cs
index e1e91bda8..1e1e2e166 100644
--- a/Grand.Web/Features/Handlers/ShoppingCart/GetParseProductAttributesHandler.cs
+++ b/Grand.Web/Features/Handlers/ShoppingCart/GetParseProductAttributesHandler.cs
@@ -47,7 +47,7 @@ public async Task<IList<CustomAttribute>> Handle(GetParseProductAttributes reque
 
             foreach (var attribute in productAttributes)
             {
-                string controlId = string.Format("product_attribute_{0}", attribute.Id);
+                string controlId = $"product_attribute_{attribute.Id}";
                 switch (attribute.AttributeControlType)
                 {
                     case AttributeControlType.DropdownList:
@@ -159,27 +159,27 @@ public async Task<IList<CustomAttribute>> Handle(GetParseProductAttributes reque
                 string giftCardMessage = "";
                 foreach (string formKey in request.Form.Keys)
                 {
-                    if (formKey.Equals(string.Format("giftcard_{0}.RecipientName", request.Product.Id), StringComparison.OrdinalIgnoreCase))
+                    if (formKey.Equals($"giftcard_{request.Product.Id}.RecipientName", StringComparison.OrdinalIgnoreCase))
                     {
                         recipientName = request.Form[formKey];
                         continue;
                     }
-                    if (formKey.Equals(string.Format("giftcard_{0}.RecipientEmail", request.Product.Id), StringComparison.OrdinalIgnoreCase))
+                    if (formKey.Equals($"giftcard_{request.Product.Id}.RecipientEmail", StringComparison.OrdinalIgnoreCase))
                     {
                         recipientEmail = request.Form[formKey];
                         continue;
                     }
-                    if (formKey.Equals(string.Format("giftcard_{0}.SenderName", request.Product.Id), StringComparison.OrdinalIgnoreCase))
+                    if (formKey.Equals($"giftcard_{request.Product.Id}.SenderName", StringComparison.OrdinalIgnoreCase))
                     {
                         senderName = request.Form[formKey];
                         continue;
                     }
-                    if (formKey.Equals(string.Format("giftcard_{0}.SenderEmail", request.Product.Id), StringComparison.OrdinalIgnoreCase))
+                    if (formKey.Equals($"giftcard_{request.Product.Id}.SenderEmail", StringComparison.OrdinalIgnoreCase))
                     {
                         senderEmail = request.Form[formKey];
                         continue;
                     }
-                    if (formKey.Equals(string.Format("giftcard_{0}.Message", request.Product.Id), StringComparison.OrdinalIgnoreCase))
+                    if (formKey.Equals($"giftcard_{request.Product.Id}.Message", StringComparison.OrdinalIgnoreCase))
                     {
                         giftCardMessage = request.Form[formKey];
                         continue;
diff --git a/Plugins/Grand.Plugin.DiscountRequirements.Standard/Controllers/CustomerRolesController.cs b/Plugins/Grand.Plugin.DiscountRequirements.Standard/Controllers/CustomerRolesController.cs
index e771c36df..532063f9a 100644
--- a/Plugins/Grand.Plugin.DiscountRequirements.Standard/Controllers/CustomerRolesController.cs
+++ b/Plugins/Grand.Plugin.DiscountRequirements.Standard/Controllers/CustomerRolesController.cs
@@ -51,7 +51,7 @@ public async Task<IActionResult> Configure(string discountId, string discountReq
                     return Content("Failed to load requirement.");
             }
 
-            var restrictedToCustomerRoleId = _settingService.GetSettingByKey<string>(string.Format("DiscountRequirements.Standard.MustBeAssignedToCustomerRole-{0}-{1}", discount.Id, !String.IsNullOrEmpty(discountRequirementId) ? discountRequirementId : ""));
+            var restrictedToCustomerRoleId = _settingService.GetSettingByKey<string>($"DiscountRequirements.Standard.MustBeAssignedToCustomerRole-{discount.Id}-{(!String.IsNullOrEmpty(discountRequirementId) ? discountRequirementId : "")}");
             
             var model = new RequirementModel();
             model.RequirementId = !String.IsNullOrEmpty(discountRequirementId) ? discountRequirementId : "";
@@ -64,7 +64,7 @@ public async Task<IActionResult> Configure(string discountId, string discountReq
                 model.AvailableCustomerRoles.Add(new SelectListItem { Text = cr.Name, Value = cr.Id.ToString(), Selected = discountRequirement != null && cr.Id == restrictedToCustomerRoleId });
 
             //add a prefix
-            ViewData.TemplateInfo.HtmlFieldPrefix = string.Format("DiscountRequirementsCustomerRoles{0}", !String.IsNullOrEmpty(discountRequirementId) ? discountRequirementId : "");
+            ViewData.TemplateInfo.HtmlFieldPrefix = $"DiscountRequirementsCustomerRoles{(!String.IsNullOrEmpty(discountRequirementId) ? discountRequirementId : "")}";
 
             return View("~/Plugins/DiscountRequirements.Standard/Views/CustomerRoles/Configure.cshtml", model);
         }
@@ -87,7 +87,7 @@ public async Task<IActionResult> Configure(string discountId, string discountReq
             if (discountRequirement != null)
             {
                 //update existing rule
-                await _settingService.SetSetting(string.Format("DiscountRequirements.Standard.MustBeAssignedToCustomerRole-{0}-{1}",discount.Id, discountRequirement.Id), customerRoleId);
+                await _settingService.SetSetting($"DiscountRequirements.Standard.MustBeAssignedToCustomerRole-{discount.Id}-{discountRequirement.Id}", customerRoleId);
             }
             else
             {
@@ -99,7 +99,7 @@ public async Task<IActionResult> Configure(string discountId, string discountReq
                 discount.DiscountRequirements.Add(discountRequirement);
                 await _discountService.UpdateDiscount(discount);
 
-                await _settingService.SetSetting(string.Format("DiscountRequirements.Standard.MustBeAssignedToCustomerRole-{0}-{1}", discount.Id, discountRequirement.Id), customerRoleId);
+                await _settingService.SetSetting($"DiscountRequirements.Standard.MustBeAssignedToCustomerRole-{discount.Id}-{discountRequirement.Id}", customerRoleId);
             }
             return Json(new { Result = true, NewRequirementId = discountRequirement.Id });
         }
diff --git a/Plugins/Grand.Plugin.DiscountRequirements.Standard/Controllers/HadSpentAmountController.cs b/Plugins/Grand.Plugin.DiscountRequirements.Standard/Controllers/HadSpentAmountController.cs
index 929126c18..5c99eb2e9 100644
--- a/Plugins/Grand.Plugin.DiscountRequirements.Standard/Controllers/HadSpentAmountController.cs
+++ b/Plugins/Grand.Plugin.DiscountRequirements.Standard/Controllers/HadSpentAmountController.cs
@@ -46,7 +46,7 @@ public async Task<IActionResult> Configure(string discountId, string discountReq
                     return Content("Failed to load requirement.");
             }
 
-            var spentAmountRequirement = _settingService.GetSettingByKey<decimal>(string.Format("DiscountRequirements.Standard.HadSpentAmount-{0}-{1}", discount.Id, !String.IsNullOrEmpty(discountRequirementId) ? discountRequirementId : ""));
+            var spentAmountRequirement = _settingService.GetSettingByKey<decimal>($"DiscountRequirements.Standard.HadSpentAmount-{discount.Id}-{(!String.IsNullOrEmpty(discountRequirementId) ? discountRequirementId : "")}");
 
             var model = new RequirementModel();
             model.RequirementId = !String.IsNullOrEmpty(discountRequirementId) ? discountRequirementId : "";
@@ -54,7 +54,7 @@ public async Task<IActionResult> Configure(string discountId, string discountReq
             model.SpentAmount = spentAmountRequirement;
 
             //add a prefix
-            ViewData.TemplateInfo.HtmlFieldPrefix = string.Format("DiscountRequirementsHadSpentAmount{0}-{1}",discount.Id,  !String.IsNullOrEmpty(discountRequirementId) ? discountRequirementId : "");
+            ViewData.TemplateInfo.HtmlFieldPrefix = $"DiscountRequirementsHadSpentAmount{discount.Id}-{(!String.IsNullOrEmpty(discountRequirementId) ? discountRequirementId : "")}";
 
             return View("~/Plugins/DiscountRequirements.Standard/Views/HadSpentAmount/Configure.cshtml", model);
         }
@@ -77,7 +77,7 @@ public async Task<IActionResult> Configure(string discountId, string discountReq
             if (discountRequirement != null)
             {
                 //update existing rule
-                await _settingService.SetSetting(string.Format("DiscountRequirements.Standard.HadSpentAmount-{0}-{1}", discount.Id, discountRequirement.Id), spentAmount);
+                await _settingService.SetSetting($"DiscountRequirements.Standard.HadSpentAmount-{discount.Id}-{discountRequirement.Id}", spentAmount);
             }
             else
             {
@@ -89,7 +89,7 @@ public async Task<IActionResult> Configure(string discountId, string discountReq
                 discount.DiscountRequirements.Add(discountRequirement);
                 await _discountService.UpdateDiscount(discount);
 
-                await _settingService.SetSetting(string.Format("DiscountRequirements.Standard.HadSpentAmount-{0}-{1}", discount.Id, discountRequirement.Id), spentAmount);
+                await _settingService.SetSetting($"DiscountRequirements.Standard.HadSpentAmount-{discount.Id}-{discountRequirement.Id}", spentAmount);
             }
             return new JsonResult(new { Result = true, NewRequirementId = discountRequirement.Id });
         }
diff --git a/Plugins/Grand.Plugin.DiscountRequirements.Standard/Controllers/HasAllProductsController.cs b/Plugins/Grand.Plugin.DiscountRequirements.Standard/Controllers/HasAllProductsController.cs
index e4a5dd8d0..9f62d756f 100644
--- a/Plugins/Grand.Plugin.DiscountRequirements.Standard/Controllers/HasAllProductsController.cs
+++ b/Plugins/Grand.Plugin.DiscountRequirements.Standard/Controllers/HasAllProductsController.cs
@@ -77,7 +77,7 @@ public async Task<IActionResult> Configure(string discountId, string discountReq
                     return Content("Failed to load requirement.");
             }
 
-            var restrictedProductIds = _settingService.GetSettingByKey<string>(string.Format("DiscountRequirements.Standard.RestrictedProductIds-{0}-{1}", discount.Id, !String.IsNullOrEmpty(discountRequirementId) ? discountRequirementId : ""));
+            var restrictedProductIds = _settingService.GetSettingByKey<string>($"DiscountRequirements.Standard.RestrictedProductIds-{discount.Id}-{(!String.IsNullOrEmpty(discountRequirementId) ? discountRequirementId : "")}");
 
             var model = new RequirementModel();
             model.RequirementId = !String.IsNullOrEmpty(discountRequirementId) ? discountRequirementId : "";
@@ -85,7 +85,7 @@ public async Task<IActionResult> Configure(string discountId, string discountReq
             model.Products = restrictedProductIds;
 
             //add a prefix
-            ViewData.TemplateInfo.HtmlFieldPrefix = string.Format("DiscountRequirementsHasAllProducts{0}-{1}", discount.Id, !String.IsNullOrEmpty(discountRequirementId) ? discountRequirementId : "");
+            ViewData.TemplateInfo.HtmlFieldPrefix = $"DiscountRequirementsHasAllProducts{discount.Id}-{(!String.IsNullOrEmpty(discountRequirementId) ? discountRequirementId : "")}";
 
             return View("~/Plugins/DiscountRequirements.Standard/Views/HasAllProducts/Configure.cshtml", model);
         }
@@ -108,7 +108,7 @@ public async Task<IActionResult> Configure(string discountId, string discountReq
             if (discountRequirement != null)
             {
                 //update existing rule
-                await _settingService.SetSetting(string.Format("DiscountRequirements.Standard.RestrictedProductIds-{0}-{1}", discount.Id, discountRequirement.Id), productIds);
+                await _settingService.SetSetting($"DiscountRequirements.Standard.RestrictedProductIds-{discount.Id}-{discountRequirement.Id}", productIds);
             }
             else
             {
@@ -120,7 +120,7 @@ public async Task<IActionResult> Configure(string discountId, string discountReq
                 discount.DiscountRequirements.Add(discountRequirement);
                 await _discountService.UpdateDiscount(discount);
 
-                await _settingService.SetSetting(string.Format("DiscountRequirements.Standard.RestrictedProductIds-{0}-{1}", discount.Id, discountRequirement.Id), productIds);
+                await _settingService.SetSetting($"DiscountRequirements.Standard.RestrictedProductIds-{discount.Id}-{discountRequirement.Id}", productIds);
             }
             return new JsonResult(new { Result = true, NewRequirementId = discountRequirement.Id });
         }
diff --git a/Plugins/Grand.Plugin.DiscountRequirements.Standard/Controllers/HasOneProductController.cs b/Plugins/Grand.Plugin.DiscountRequirements.Standard/Controllers/HasOneProductController.cs
index f2965202b..3a81573a1 100644
--- a/Plugins/Grand.Plugin.DiscountRequirements.Standard/Controllers/HasOneProductController.cs
+++ b/Plugins/Grand.Plugin.DiscountRequirements.Standard/Controllers/HasOneProductController.cs
@@ -77,7 +77,7 @@ public async Task<IActionResult> Configure(string discountId, string discountReq
                     return Content("Failed to load requirement.");
             }
 
-            var restrictedProductIds = _settingService.GetSettingByKey<string>(string.Format("DiscountRequirements.Standard.RestrictedProductIds-{0}-{1}", discount.Id, !String.IsNullOrEmpty(discountRequirementId) ? discountRequirementId : ""));
+            var restrictedProductIds = _settingService.GetSettingByKey<string>($"DiscountRequirements.Standard.RestrictedProductIds-{discount.Id}-{(!String.IsNullOrEmpty(discountRequirementId) ? discountRequirementId : "")}");
 
             var model = new RequirementModel();
             model.RequirementId = !String.IsNullOrEmpty(discountRequirementId) ? discountRequirementId : "";
@@ -85,7 +85,7 @@ public async Task<IActionResult> Configure(string discountId, string discountReq
             model.Products = restrictedProductIds;
 
             //add a prefix
-            ViewData.TemplateInfo.HtmlFieldPrefix = string.Format("DiscountRequirementsHasOneProduct{0}-{1}", discount.Id, !String.IsNullOrEmpty(discountRequirementId) ? discountRequirementId : "");
+            ViewData.TemplateInfo.HtmlFieldPrefix = $"DiscountRequirementsHasOneProduct{discount.Id}-{(!String.IsNullOrEmpty(discountRequirementId) ? discountRequirementId : "")}";
 
             return View("~/Plugins/DiscountRequirements.Standard/Views/HasOneProduct/Configure.cshtml", model);
         }
@@ -108,7 +108,7 @@ public async Task<IActionResult> Configure(string discountId, string discountReq
             if (discountRequirement != null)
             {
                 //update existing rule
-                await _settingService.SetSetting(string.Format("DiscountRequirements.Standard.RestrictedProductIds-{0}-{1}", discount.Id, discountRequirement.Id), productIds);
+                await _settingService.SetSetting($"DiscountRequirements.Standard.RestrictedProductIds-{discount.Id}-{discountRequirement.Id}", productIds);
             }
             else
             {
@@ -120,7 +120,7 @@ public async Task<IActionResult> Configure(string discountId, string discountReq
                 discount.DiscountRequirements.Add(discountRequirement);
                 await _discountService.UpdateDiscount(discount);
 
-                await _settingService.SetSetting(string.Format("DiscountRequirements.Standard.RestrictedProductIds-{0}-{1}", discount.Id, discountRequirement.Id), productIds);
+                await _settingService.SetSetting($"DiscountRequirements.Standard.RestrictedProductIds-{discount.Id}-{discountRequirement.Id}", productIds);
             }
             return new JsonResult(new { Result = true, NewRequirementId = discountRequirement.Id });
         }
diff --git a/Plugins/Grand.Plugin.DiscountRequirements.Standard/Controllers/ShoppingCartAmountController.cs b/Plugins/Grand.Plugin.DiscountRequirements.Standard/Controllers/ShoppingCartAmountController.cs
index c0063a9ca..e285ecf37 100644
--- a/Plugins/Grand.Plugin.DiscountRequirements.Standard/Controllers/ShoppingCartAmountController.cs
+++ b/Plugins/Grand.Plugin.DiscountRequirements.Standard/Controllers/ShoppingCartAmountController.cs
@@ -45,7 +45,7 @@ public async Task<IActionResult> Configure(string discountId, string discountReq
                     return Content("Failed to load requirement.");
             }
 
-            var spentAmountRequirement = _settingService.GetSettingByKey<decimal>(string.Format("DiscountRequirement.ShoppingCart-{0}", !String.IsNullOrEmpty(discountRequirementId) ? discountRequirementId : ""));
+            var spentAmountRequirement = _settingService.GetSettingByKey<decimal>($"DiscountRequirement.ShoppingCart-{(!String.IsNullOrEmpty(discountRequirementId) ? discountRequirementId : "")}");
 
             var model = new RequirementModel();
             model.RequirementId = !String.IsNullOrEmpty(discountRequirementId) ? discountRequirementId : "";
@@ -53,7 +53,7 @@ public async Task<IActionResult> Configure(string discountId, string discountReq
             model.SpentAmount = spentAmountRequirement;
 
             //add a prefix
-            ViewData.TemplateInfo.HtmlFieldPrefix = string.Format("DiscountRulesShoppingCart{0}", !String.IsNullOrEmpty(discountRequirementId) ? discountRequirementId : "");
+            ViewData.TemplateInfo.HtmlFieldPrefix = $"DiscountRulesShoppingCart{(!String.IsNullOrEmpty(discountRequirementId) ? discountRequirementId : "")}";
 
             return View("~/Plugins/DiscountRequirements.Standard/Views/ShoppingCartAmount/Configure.cshtml", model);
         }
@@ -76,7 +76,7 @@ public async Task<IActionResult> Configure(string discountId, string discountReq
             if (discountRequirement != null)
             {
                 //update existing rule
-                await _settingService.SetSetting(string.Format("DiscountRequirement.ShoppingCart-{0}", discountRequirement.Id), spentAmount);
+                await _settingService.SetSetting($"DiscountRequirement.ShoppingCart-{discountRequirement.Id}", spentAmount);
             }
             else
             {
@@ -88,7 +88,7 @@ public async Task<IActionResult> Configure(string discountId, string discountReq
                 discount.DiscountRequirements.Add(discountRequirement);
                 await _discountService.UpdateDiscount(discount);
 
-                await _settingService.SetSetting(string.Format("DiscountRequirement.ShoppingCart-{0}", discountRequirement.Id), spentAmount);
+                await _settingService.SetSetting($"DiscountRequirement.ShoppingCart-{discountRequirement.Id}", spentAmount);
             }
             return Json(new { Result = true, NewRequirementId = discountRequirement.Id });
         }
diff --git a/Plugins/Grand.Plugin.DiscountRequirements.Standard/Providers/CustomerRoleDiscountRequirementRule.cs b/Plugins/Grand.Plugin.DiscountRequirements.Standard/Providers/CustomerRoleDiscountRequirementRule.cs
index 5a7db7eb9..805ec9814 100644
--- a/Plugins/Grand.Plugin.DiscountRequirements.Standard/Providers/CustomerRoleDiscountRequirementRule.cs
+++ b/Plugins/Grand.Plugin.DiscountRequirements.Standard/Providers/CustomerRoleDiscountRequirementRule.cs
@@ -31,7 +31,7 @@ public async Task<DiscountRequirementValidationResult> CheckRequirement(Discount
             if (request.Customer == null)
                 return result;
 
-            var restrictedToCustomerRoleId = _settingService.GetSettingByKey<string>(string.Format("DiscountRequirements.Standard.MustBeAssignedToCustomerRole-{0}-{1}", request.DiscountId, request.DiscountRequirementId));
+            var restrictedToCustomerRoleId = _settingService.GetSettingByKey<string>($"DiscountRequirements.Standard.MustBeAssignedToCustomerRole-{request.DiscountId}-{request.DiscountRequirementId}");
 
             if (String.IsNullOrEmpty(restrictedToCustomerRoleId))
                 return result;
@@ -58,7 +58,7 @@ public string GetConfigurationUrl(string discountId, string discountRequirementI
             //configured in RouteProvider.cs
             string result = "Admin/CustomerRoles/Configure/?discountId=" + discountId;
             if (!String.IsNullOrEmpty(discountRequirementId))
-                result += string.Format("&discountRequirementId={0}", discountRequirementId);
+                result += $"&discountRequirementId={discountRequirementId}";
             return result;
         }
 
diff --git a/Plugins/Grand.Plugin.DiscountRequirements.Standard/Providers/HadSpentAmountDiscountRequirementRule.cs b/Plugins/Grand.Plugin.DiscountRequirements.Standard/Providers/HadSpentAmountDiscountRequirementRule.cs
index be83fbd44..42a32f7d0 100644
--- a/Plugins/Grand.Plugin.DiscountRequirements.Standard/Providers/HadSpentAmountDiscountRequirementRule.cs
+++ b/Plugins/Grand.Plugin.DiscountRequirements.Standard/Providers/HadSpentAmountDiscountRequirementRule.cs
@@ -36,7 +36,7 @@ public async Task<DiscountRequirementValidationResult> CheckRequirement(Discount
             //invalid by default
             var result = new DiscountRequirementValidationResult();
 
-            var spentAmountRequirement = _settingService.GetSettingByKey<decimal>(string.Format("DiscountRequirements.Standard.HadSpentAmount-{0}-{1}", request.DiscountId, request.DiscountRequirementId));
+            var spentAmountRequirement = _settingService.GetSettingByKey<decimal>($"DiscountRequirements.Standard.HadSpentAmount-{request.DiscountId}-{request.DiscountRequirementId}");
 
             if (spentAmountRequirement == decimal.Zero)
             {
@@ -74,7 +74,7 @@ public string GetConfigurationUrl(string discountId, string discountRequirementI
             //configured in RouteProvider.cs
             string result = "Admin/HadSpentAmount/Configure/?discountId=" + discountId;
             if (!String.IsNullOrEmpty(discountRequirementId))
-                result += string.Format("&discountRequirementId={0}", discountRequirementId);
+                result += $"&discountRequirementId={discountRequirementId}";
             return result;
         }
 
diff --git a/Plugins/Grand.Plugin.DiscountRequirements.Standard/Providers/HasAllProductsDiscountRequirementRule.cs b/Plugins/Grand.Plugin.DiscountRequirements.Standard/Providers/HasAllProductsDiscountRequirementRule.cs
index 62fdf04e5..cdd3e6c5a 100644
--- a/Plugins/Grand.Plugin.DiscountRequirements.Standard/Providers/HasAllProductsDiscountRequirementRule.cs
+++ b/Plugins/Grand.Plugin.DiscountRequirements.Standard/Providers/HasAllProductsDiscountRequirementRule.cs
@@ -32,7 +32,7 @@ public async Task<DiscountRequirementValidationResult> CheckRequirement(Discount
             //invalid by default
             var result = new DiscountRequirementValidationResult();
 
-            var restrictedProductIds = _settingService.GetSettingByKey<string>(string.Format("DiscountRequirements.Standard.RestrictedProductIds-{0}-{1}", request.DiscountId, request.DiscountRequirementId));
+            var restrictedProductIds = _settingService.GetSettingByKey<string>($"DiscountRequirements.Standard.RestrictedProductIds-{request.DiscountId}-{request.DiscountRequirementId}");
 
             if (String.IsNullOrWhiteSpace(restrictedProductIds))
             {
@@ -154,7 +154,7 @@ public string GetConfigurationUrl(string discountId, string discountRequirementI
             //configured in RouteProvider.cs
             string result = "Admin/HasAllProducts/Configure/?discountId=" + discountId;
             if (!String.IsNullOrEmpty(discountRequirementId))
-                result += string.Format("&discountRequirementId={0}", discountRequirementId);
+                result += $"&discountRequirementId={discountRequirementId}";
             return result;
         }
 
diff --git a/Plugins/Grand.Plugin.DiscountRequirements.Standard/Providers/HasOneProductDiscountRequirementRule.cs b/Plugins/Grand.Plugin.DiscountRequirements.Standard/Providers/HasOneProductDiscountRequirementRule.cs
index 2f68e3d6d..58c4f31f2 100644
--- a/Plugins/Grand.Plugin.DiscountRequirements.Standard/Providers/HasOneProductDiscountRequirementRule.cs
+++ b/Plugins/Grand.Plugin.DiscountRequirements.Standard/Providers/HasOneProductDiscountRequirementRule.cs
@@ -32,7 +32,7 @@ public async Task<DiscountRequirementValidationResult> CheckRequirement(Discount
             //invalid by default
             var result = new DiscountRequirementValidationResult();
 
-            var restrictedProductIds = _settingService.GetSettingByKey<string>(string.Format("DiscountRequirements.Standard.RestrictedProductIds-{0}-{1}", request.DiscountId, request.DiscountRequirementId));
+            var restrictedProductIds = _settingService.GetSettingByKey<string>($"DiscountRequirements.Standard.RestrictedProductIds-{request.DiscountId}-{request.DiscountRequirementId}");
 
             if (String.IsNullOrWhiteSpace(restrictedProductIds))
             {
@@ -154,7 +154,7 @@ public string GetConfigurationUrl(string discountId, string discountRequirementI
             //configured in RouteProvider.cs
             string result = "Admin/HasOneProduct/Configure/?discountId=" + discountId;
             if (!String.IsNullOrEmpty(discountRequirementId))
-                result += string.Format("&discountRequirementId={0}", discountRequirementId);
+                result += $"&discountRequirementId={discountRequirementId}";
             return result;
         }
 
diff --git a/Plugins/Grand.Plugin.DiscountRequirements.Standard/Providers/ShoppingCartDiscountRequirementRule.cs b/Plugins/Grand.Plugin.DiscountRequirements.Standard/Providers/ShoppingCartDiscountRequirementRule.cs
index 26b13a1ae..fd286027f 100644
--- a/Plugins/Grand.Plugin.DiscountRequirements.Standard/Providers/ShoppingCartDiscountRequirementRule.cs
+++ b/Plugins/Grand.Plugin.DiscountRequirements.Standard/Providers/ShoppingCartDiscountRequirementRule.cs
@@ -40,7 +40,7 @@ public async Task<DiscountRequirementValidationResult> CheckRequirement(Discount
 
             var result = new DiscountRequirementValidationResult();
 
-            var spentAmountRequirement = _settingService.GetSettingByKey<decimal>(string.Format("DiscountRequirement.ShoppingCart-{0}", request.DiscountRequirementId));
+            var spentAmountRequirement = _settingService.GetSettingByKey<decimal>($"DiscountRequirement.ShoppingCart-{request.DiscountRequirementId}");
 
             if (spentAmountRequirement == decimal.Zero)
             {
@@ -82,7 +82,7 @@ public string GetConfigurationUrl(string discountId, string discountRequirementI
             //configured in RouteProvider.cs
             string result = "Admin/ShoppingCartAmount/Configure/?discountId=" + discountId;
             if (!String.IsNullOrEmpty(discountRequirementId))
-                result += string.Format("&discountRequirementId={0}", discountRequirementId);
+                result += $"&discountRequirementId={discountRequirementId}";
             return result;
         }
         public string FriendlyName => "SubTotal in Shopping Cart x.xx ";
diff --git a/Plugins/Grand.Plugin.Payments.PayPalStandard/Controllers/PaymentPayPalStandardController.cs b/Plugins/Grand.Plugin.Payments.PayPalStandard/Controllers/PaymentPayPalStandardController.cs
index 2c01d1206..bda437c0e 100644
--- a/Plugins/Grand.Plugin.Payments.PayPalStandard/Controllers/PaymentPayPalStandardController.cs
+++ b/Plugins/Grand.Plugin.Payments.PayPalStandard/Controllers/PaymentPayPalStandardController.cs
@@ -261,7 +261,7 @@ public async Task<IActionResult> PDTHandler(IFormCollection form)
                     //validate order total
                     if (payPalStandardPaymentSettings.PdtValidateOrderTotal && !Math.Round(mc_gross, 2).Equals(Math.Round(order.OrderTotal * order.CurrencyRate, 2)))
                     {
-                        string errorStr = string.Format("PayPal PDT. Returned order total {0} doesn't equal order total {1}. Order# {2}.", mc_gross, order.OrderTotal * order.CurrencyRate, order.OrderNumber);
+                        string errorStr = $"PayPal PDT. Returned order total {mc_gross} doesn't equal order total {order.OrderTotal * order.CurrencyRate}. Order# {order.OrderNumber}.";
                         _logger.Error(errorStr);
 
                         //order note
@@ -478,7 +478,7 @@ public async Task<IActionResult> IPNHandler()
                                             else
                                             {
                                                 //not valid
-                                                string errorStr = string.Format("PayPal IPN. Returned order total {0} doesn't equal order total {1}. Order# {2}.", mc_gross, order.OrderTotal * order.CurrencyRate, order.Id);
+                                                string errorStr = $"PayPal IPN. Returned order total {mc_gross} doesn't equal order total {order.OrderTotal * order.CurrencyRate}. Order# {order.Id}.";
                                                 //log
                                                 _logger.Error(errorStr);
                                                 //order note
@@ -507,7 +507,7 @@ public async Task<IActionResult> IPNHandler()
                                             else
                                             {
                                                 //not valid
-                                                string errorStr = string.Format("PayPal IPN. Returned order total {0} doesn't equal order total {1}. Order# {2}.", mc_gross, order.OrderTotal * order.CurrencyRate, order.Id);
+                                                string errorStr = $"PayPal IPN. Returned order total {mc_gross} doesn't equal order total {order.OrderTotal * order.CurrencyRate}. Order# {order.Id}.";
                                                 //log
                                                 _logger.Error(errorStr);
                                                 //order note
diff --git a/Plugins/Grand.Plugin.Shipping.FixedRateShipping/Controllers/ShippingFixedRateController.cs b/Plugins/Grand.Plugin.Shipping.FixedRateShipping/Controllers/ShippingFixedRateController.cs
index b14d47c42..015e1d21f 100644
--- a/Plugins/Grand.Plugin.Shipping.FixedRateShipping/Controllers/ShippingFixedRateController.cs
+++ b/Plugins/Grand.Plugin.Shipping.FixedRateShipping/Controllers/ShippingFixedRateController.cs
@@ -69,7 +69,7 @@ public async Task<IActionResult> ShippingRateUpdate(FixedShippingRateModel model
             string shippingMethodId = model.ShippingMethodId;
             decimal rate = model.Rate;
 
-            await _settingService.SetSetting(string.Format("ShippingRateComputationMethod.FixedRate.Rate.ShippingMethodId{0}", shippingMethodId), rate);
+            await _settingService.SetSetting($"ShippingRateComputationMethod.FixedRate.Rate.ShippingMethodId{shippingMethodId}", rate);
 
             return new NullJsonResult();
         }
@@ -77,7 +77,7 @@ public async Task<IActionResult> ShippingRateUpdate(FixedShippingRateModel model
         [NonAction]
         protected decimal GetShippingRate(string shippingMethodId)
         {
-            var rate = _settingService.GetSettingByKey<decimal>(string.Format("ShippingRateComputationMethod.FixedRate.Rate.ShippingMethodId{0}", shippingMethodId));
+            var rate = _settingService.GetSettingByKey<decimal>($"ShippingRateComputationMethod.FixedRate.Rate.ShippingMethodId{shippingMethodId}");
             return rate;
         }
     }
diff --git a/Plugins/Grand.Plugin.Shipping.FixedRateShipping/FixedRateShippingComputationMethod.cs b/Plugins/Grand.Plugin.Shipping.FixedRateShipping/FixedRateShippingComputationMethod.cs
index 52a940967..8731b4c23 100644
--- a/Plugins/Grand.Plugin.Shipping.FixedRateShipping/FixedRateShippingComputationMethod.cs
+++ b/Plugins/Grand.Plugin.Shipping.FixedRateShipping/FixedRateShippingComputationMethod.cs
@@ -50,7 +50,7 @@ public class FixedRateShippingComputationMethod : BasePlugin, IShippingRateCompu
 
         private decimal GetRate(string shippingMethodId)
         {
-            string key = string.Format("ShippingRateComputationMethod.FixedRate.Rate.ShippingMethodId{0}", shippingMethodId);
+            string key = $"ShippingRateComputationMethod.FixedRate.Rate.ShippingMethodId{shippingMethodId}";
             var rate = this._settingService.GetSettingByKey<decimal>(key);
             return rate;
         }
diff --git a/Plugins/Grand.Plugin.Shipping.ShippingPoint/ShippingPointComputationMethod.cs b/Plugins/Grand.Plugin.Shipping.ShippingPoint/ShippingPointComputationMethod.cs
index bb7994d31..4744e4e4b 100644
--- a/Plugins/Grand.Plugin.Shipping.ShippingPoint/ShippingPointComputationMethod.cs
+++ b/Plugins/Grand.Plugin.Shipping.ShippingPoint/ShippingPointComputationMethod.cs
@@ -206,10 +206,7 @@ public async Task<IList<string>> ValidateShippingForm(IFormCollection form)
                 _storeContext.CurrentStore.Id);
 
             var forCustomer =
-            string.Format("<strong>{0}:</strong> {1}<br><strong>{2}:</strong> {3}<br>",
-                _localizationService.GetResource("Plugins.Shipping.ShippingPoint.Fields.ShippingPointName"), chosenShippingOption.ShippingPointName,
-                _localizationService.GetResource("Plugins.Shipping.ShippingPoint.Fields.Description"), chosenShippingOption.Description
-            );
+            $"<strong>{_localizationService.GetResource("Plugins.Shipping.ShippingPoint.Fields.ShippingPointName")}:</strong> {chosenShippingOption.ShippingPointName}<br><strong>{_localizationService.GetResource("Plugins.Shipping.ShippingPoint.Fields.Description")}:</strong> {chosenShippingOption.Description}<br>";
 
             await _genericAttributeService.SaveAttribute(
                 _workContext.CurrentCustomer,
diff --git a/Plugins/Grand.Plugin.Tax.FixedRate/Controllers/TaxFixedRateController.cs b/Plugins/Grand.Plugin.Tax.FixedRate/Controllers/TaxFixedRateController.cs
index 814493843..318ae8b4e 100644
--- a/Plugins/Grand.Plugin.Tax.FixedRate/Controllers/TaxFixedRateController.cs
+++ b/Plugins/Grand.Plugin.Tax.FixedRate/Controllers/TaxFixedRateController.cs
@@ -59,7 +59,7 @@ public async Task<IActionResult> TaxRateUpdate(FixedTaxRateModel model)
             string taxCategoryId = model.TaxCategoryId;
             decimal rate = model.Rate;
 
-            await _settingService.SetSetting(string.Format("Tax.TaxProvider.FixedRate.TaxCategoryId{0}", taxCategoryId), rate);
+            await _settingService.SetSetting($"Tax.TaxProvider.FixedRate.TaxCategoryId{taxCategoryId}", rate);
 
             return new NullJsonResult();
         }
@@ -67,7 +67,7 @@ public async Task<IActionResult> TaxRateUpdate(FixedTaxRateModel model)
         [NonAction]
         protected decimal GetTaxRate(string taxCategoryId)
         {
-            var rate = _settingService.GetSettingByKey<decimal>(string.Format("Tax.TaxProvider.FixedRate.TaxCategoryId{0}", taxCategoryId));
+            var rate = _settingService.GetSettingByKey<decimal>($"Tax.TaxProvider.FixedRate.TaxCategoryId{taxCategoryId}");
             return rate;
         }
     }
diff --git a/Plugins/Grand.Plugin.Tax.FixedRate/FixedRateTaxProvider.cs b/Plugins/Grand.Plugin.Tax.FixedRate/FixedRateTaxProvider.cs
index 1c32755ab..49f6586e1 100644
--- a/Plugins/Grand.Plugin.Tax.FixedRate/FixedRateTaxProvider.cs
+++ b/Plugins/Grand.Plugin.Tax.FixedRate/FixedRateTaxProvider.cs
@@ -47,7 +47,7 @@ public Task<CalculateTaxResult> GetTaxRate(CalculateTaxRequest calculateTaxReque
         /// <returns>Tax rate</returns>
         protected decimal GetTaxRate(string taxCategoryId)
         {
-            var rate = _settingService.GetSettingByKey<decimal>(string.Format("Tax.TaxProvider.FixedRate.TaxCategoryId{0}", taxCategoryId));
+            var rate = _settingService.GetSettingByKey<decimal>($"Tax.TaxProvider.FixedRate.TaxCategoryId{taxCategoryId}");
             return rate;
         }
 
diff --git a/Tests/Grand.Core.Tests/ComponentModel/GenericListTypeConverterTests.cs b/Tests/Grand.Core.Tests/ComponentModel/GenericListTypeConverterTests.cs
index 4e1c023d5..1a18b8f07 100644
--- a/Tests/Grand.Core.Tests/ComponentModel/GenericListTypeConverterTests.cs
+++ b/Tests/Grand.Core.Tests/ComponentModel/GenericListTypeConverterTests.cs
@@ -38,7 +38,7 @@ public void Can_get_int_list_from_string()
             var result = converter.ConvertFrom(items) as IList<int>;
 
             Assert.IsNotNull(result);
-            Assert.AreEqual(5, result.Count());
+            Assert.AreEqual(5, result.Count);
 
             Assert.AreEqual(0, result.IndexOf(10));
             Assert.AreEqual(1, result.IndexOf(20));
@@ -61,7 +61,7 @@ public void Can_get_string_list_from_string()
             var result = converter.ConvertFrom(items) as List<string>;
 
             Assert.IsNotNull(result);
-            Assert.AreEqual(6, result.Count());
+            Assert.AreEqual(6, result.Count);
 
             Assert.AreEqual(0, result.IndexOf("eins"));
             Assert.AreEqual(1, result.IndexOf("zwei"));
diff --git a/Tests/Grand.Services.Tests/Affiliates/AffiliateExtensionsTests.cs b/Tests/Grand.Services.Tests/Affiliates/AffiliateExtensionsTests.cs
index cc29676fa..641bd6150 100644
--- a/Tests/Grand.Services.Tests/Affiliates/AffiliateExtensionsTests.cs
+++ b/Tests/Grand.Services.Tests/Affiliates/AffiliateExtensionsTests.cs
@@ -59,7 +59,7 @@ public void GetFullName_NullFirstName_ReturnLastName()
         [TestMethod()]
         public void GetFullName_ValidParameter_ReturnLastName()
         {
-            var fullName = string.Format("{0} {1}", "first name", "lastName");
+            var fullName = $"{"first name"} {"lastName"}";
             Affiliate affiliate = new Affiliate {
                 Address = new Domain.Common.Address() { LastName = "lastName",FirstName="first name" }
             };
diff --git a/Tests/Grand.Services.Tests/Blogs/BlogExtensionsTests.cs b/Tests/Grand.Services.Tests/Blogs/BlogExtensionsTests.cs
index 064daa29b..5eb94d28f 100644
--- a/Tests/Grand.Services.Tests/Blogs/BlogExtensionsTests.cs
+++ b/Tests/Grand.Services.Tests/Blogs/BlogExtensionsTests.cs
@@ -32,7 +32,7 @@ public void GetPostsByDate_BlogPostContainsInDateRange()
             var from = DateTime.Now;
             var to = DateTime.Now.AddDays(3);
             var result = _blogPosts.GetPostsByDate(from, to);
-            Assert.AreEqual(4, result.Count());
+            Assert.AreEqual(4, result.Count);
             Assert.IsTrue(result.Any(b => b.Id.Equals("1")));
             Assert.IsTrue(result.Any(b => b.Id.Equals("2")));
             Assert.IsTrue(result.Any(b => b.Id.Equals("3")));
@@ -45,7 +45,7 @@ public void GetPostsByDate_BlogPostsNotContainsInDateRange_ReturnEmptyList()
             var from = DateTime.Now.AddDays(-3);
             var to = DateTime.Now.AddDays(-1);
             var result = _blogPosts.GetPostsByDate(from, to);
-            Assert.AreEqual(0, result.Count());
+            Assert.AreEqual(0, result.Count);
         }
     }
 }
diff --git a/Tests/Grand.Services.Tests/CoreTestConfiguration.cs b/Tests/Grand.Services.Tests/CoreTestConfiguration.cs
index 865385a61..ff300beb4 100644
--- a/Tests/Grand.Services.Tests/CoreTestConfiguration.cs
+++ b/Tests/Grand.Services.Tests/CoreTestConfiguration.cs
@@ -161,26 +161,18 @@ public static ICluster CreateCluster()
                 }
                 Interlocked.Exchange(ref hasWritableServer, anyWritableServer ? 1 : 0);
             };
-            if (__traceSource != null)
-            {
-                __traceSource.TraceEvent(TraceEventType.Information, 0, "CreateCluster: initializing cluster.");
-            }
+            __traceSource?.TraceEvent(TraceEventType.Information, 0, "CreateCluster: initializing cluster.");
             cluster.Initialize();
 
             // wait until the cluster has connected to a writable server
             SpinWait.SpinUntil(() => Interlocked.CompareExchange(ref hasWritableServer, 0, 0) != 0, TimeSpan.FromSeconds(30));
             if (Interlocked.CompareExchange(ref hasWritableServer, 0, 0) == 0)
             {
-                var message = string.Format(
-                    "Test cluster has no writable server. Client view of the cluster is {0}.",
-                    cluster.Description.ToString());
+                var message = $"Test cluster has no writable server. Client view of the cluster is {cluster.Description.ToString()}.";
                 throw new Exception(message);
             }
 
-            if (__traceSource != null)
-            {
-                __traceSource.TraceEvent(TraceEventType.Information, 0, "CreateCluster: writable server found.");
-            }
+            __traceSource?.TraceEvent(TraceEventType.Information, 0, "CreateCluster: writable server found.");
 
             return cluster;
         }
@@ -253,8 +245,8 @@ private static MethodInfo GetTestMethodInfoFromCallStack()
             for (var index = 0; index < stackTrace.FrameCount; index++)
             {
                 var frame = stackTrace.GetFrame(index);
-                var methodInfo = frame.GetMethod() as MethodInfo;
-                if (methodInfo != null)
+
+                if (frame.GetMethod() is MethodInfo methodInfo)
                 {
                     var testAttribute = methodInfo.GetCustomAttribute<TestAttribute>(inherit: false);
                     if (testAttribute != null)
diff --git a/Tests/Grand.Services.Tests/Knowledgebase/KnowledgebaseTests.cs b/Tests/Grand.Services.Tests/Knowledgebase/KnowledgebaseTests.cs
index 9ebd42861..8accc51dc 100644
--- a/Tests/Grand.Services.Tests/Knowledgebase/KnowledgebaseTests.cs
+++ b/Tests/Grand.Services.Tests/Knowledgebase/KnowledgebaseTests.cs
@@ -304,7 +304,7 @@ public async Task CanGetKnowledgebaseArticles()
 
             var all = await _knowledgebaseService.GetKnowledgebaseArticles();
 
-            Assert.AreEqual(3, all.Count());
+            Assert.AreEqual(3, all.Count);
         }
 
         [TestMethod()]
@@ -322,7 +322,7 @@ public async Task CanGetKnowledgebaseCategories()
 
             var all = await _knowledgebaseService.GetKnowledgebaseCategories();
 
-            Assert.AreEqual(3, all.Count());
+            Assert.AreEqual(3, all.Count);
         }
 
         [TestMethod()]
diff --git a/Tests/Grand.Services.Tests/Orders/CheckoutAttributeExtensionsTests.cs b/Tests/Grand.Services.Tests/Orders/CheckoutAttributeExtensionsTests.cs
index 46df0c045..2e013a5f0 100644
--- a/Tests/Grand.Services.Tests/Orders/CheckoutAttributeExtensionsTests.cs
+++ b/Tests/Grand.Services.Tests/Orders/CheckoutAttributeExtensionsTests.cs
@@ -17,7 +17,7 @@ public class CheckoutAttributeExtensionsTests {
 
             //removes these with "ShippableProductRequired = true"
             IList<CheckoutAttribute> afterRemoval = attributes.RemoveShippableAttributes();
-            Assert.AreEqual(2, afterRemoval.Count());
+            Assert.AreEqual(2, afterRemoval.Count);
             Assert.AreEqual("Attribute001", afterRemoval[0].Name);
             Assert.AreEqual("3", afterRemoval[1].Id);
         }
diff --git a/Tests/Grand.Services.Tests/Payments/PaymentExtensionsTests.cs b/Tests/Grand.Services.Tests/Payments/PaymentExtensionsTests.cs
index 7c6e780d5..b5cf712da 100644
--- a/Tests/Grand.Services.Tests/Payments/PaymentExtensionsTests.cs
+++ b/Tests/Grand.Services.Tests/Payments/PaymentExtensionsTests.cs
@@ -16,7 +16,7 @@ public void Can_deserialize_empty_string()
             Dictionary<string, object> deserialized = processPaymentRequest.DeserializeCustomValues("");
 
             Assert.IsNotNull(deserialized);
-            Assert.AreEqual(0, deserialized.Count());
+            Assert.AreEqual(0, deserialized.Count);
         }
 
         [TestMethod()]
@@ -27,7 +27,7 @@ public void Can_deserialize_null_string()
             Dictionary<string, object> deserialized = processPaymentRequest.DeserializeCustomValues(null);
 
             Assert.IsNotNull(deserialized);
-            Assert.AreEqual(0, deserialized.Count());
+            Assert.AreEqual(0, deserialized.Count);
         }
 
         [TestMethod()]
@@ -39,7 +39,7 @@ public void Can_serialize_and_deserialize_empty_CustomValues()
             Dictionary<string, object> deserialized = processPaymentRequest.DeserializeCustomValues(serializedXML);
 
             Assert.IsNotNull(deserialized);
-            Assert.AreEqual(0, deserialized.Count());
+            Assert.AreEqual(0, deserialized.Count);
         }
 
         [TestMethod()]
