Found the following rules to apply: UseMethodAnyRewriterR6, MergeSequentialChecksRewriterR2, NullChecksShouldNotBeUsedWithIsRewriterR3, SimplifyLinqRewriterR4, TypeCheckAndCastRewriterR5, UseNullPropagationRewriterR7, UsePatternMatchingRewriterR8, UseStringInterpolationRewriterR9, UseStringIsNullOrEmptyRewriterR10



Project: Net45.Specs
    #1 Path: D:\a\1\s\Tests\Shared.Specs\EventAssertionSpecs.cs, Line: 646, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #2 Path: D:\a\1\s\Tests\Shared.Specs\ExceptionAssertionSpecs.cs, Line: 501, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #3 Path: D:\a\1\s\Tests\Shared.Specs\ExceptionAssertionSpecs.cs, Line: 751, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #4 Path: D:\a\1\s\Tests\Shared.Specs\ExtensibilityRelatedEquivalencySpecs.cs, Line: 137, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #5 Path: D:\a\1\s\Tests\Shared.Specs\ExtensibilityRelatedEquivalencySpecs.cs, Line: 64, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #6 Path: D:\a\1\s\Tests\Shared.Specs\ReferenceTypeAssertionsSpecs.cs, Line: 422, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #7 Path: D:\a\1\s\Tests\Shared.Specs\ReferenceTypeAssertionsSpecs.cs, Line: 509, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #8 Path: D:\a\1\s\Tests\Shared.Specs\StringAssertionSpecs.cs, Line: 3368, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html



Project: FluentAssertions(net45)
    #9 Path: D:\a\1\s\Src\FluentAssertions\AndWhichConstraint.cs, Line: 46, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #10 Path: D:\a\1\s\Src\FluentAssertions\Common\Configuration.cs, Line: 69, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #11 Path: D:\a\1\s\Src\FluentAssertions\Common\ExpressionExtensions.cs, Line: 35, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #12 Path: D:\a\1\s\Src\FluentAssertions\Common\TypeExtensions.cs, Line: 436, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #13 Path: D:\a\1\s\Src\FluentAssertions\Common\TypeExtensions.cs, Line: 439, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #14 Path: D:\a\1\s\Src\FluentAssertions\Equivalency\EnumEqualityStep.cs, Line: 49, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #15 Path: D:\a\1\s\Src\FluentAssertions\EventRaisingExtensions.cs, Line: 24, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #16 Path: D:\a\1\s\Src\FluentAssertions\Execution\GallioTestFramework.cs, Line: 22, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #17 Path: D:\a\1\s\Src\FluentAssertions\Execution\LateBoundTestFramework.cs, Line: 16, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #18 Path: D:\a\1\s\Src\FluentAssertions\Formatting\DefaultValueFormatter.cs, Line: 36, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #19 Path: D:\a\1\s\Src\FluentAssertions\Formatting\DefaultValueFormatter.cs, Line: 95, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #20 Path: D:\a\1\s\Src\FluentAssertions\Formatting\DefaultValueFormatter.cs, Line: 98, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #21 Path: D:\a\1\s\Src\FluentAssertions\Specialized\ExceptionAssertions.cs, Line: 170, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #22 Path: D:\a\1\s\Src\FluentAssertions\Types\ConstructorInfoAssertions.cs, Line: 22, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #23 Path: D:\a\1\s\Src\FluentAssertions\Types\MemberInfoAssertions.cs, Line: 139, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #24 Path: D:\a\1\s\Src\FluentAssertions\Types\MethodInfoAssertions.cs, Line: 226, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #25 Path: D:\a\1\s\Src\FluentAssertions\Types\PropertyInfoAssertions.cs, Line: 272, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #26 Path: D:\a\1\s\Src\FluentAssertions\Types\TypeAssertions.cs, Line: 850, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #27 Path: D:\a\1\s\Src\FluentAssertions\Types\TypeAssertions.cs, Line: 890, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html



Project: NetCore.Specs
    #28 Path: D:\a\1\s\Tests\Shared.Specs\ExceptionAssertionSpecs.cs, Line: 501, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #29 Path: D:\a\1\s\Tests\Shared.Specs\ExceptionAssertionSpecs.cs, Line: 751, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #30 Path: D:\a\1\s\Tests\Shared.Specs\ExtensibilityRelatedEquivalencySpecs.cs, Line: 137, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #31 Path: D:\a\1\s\Tests\Shared.Specs\ExtensibilityRelatedEquivalencySpecs.cs, Line: 64, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #32 Path: D:\a\1\s\Tests\Shared.Specs\ReferenceTypeAssertionsSpecs.cs, Line: 422, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #33 Path: D:\a\1\s\Tests\Shared.Specs\ReferenceTypeAssertionsSpecs.cs, Line: 509, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #34 Path: D:\a\1\s\Tests\Shared.Specs\StringAssertionSpecs.cs, Line: 3368, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html



Project: NetCore20.Specs
    #35 Path: D:\a\1\s\Tests\Shared.Specs\ExceptionAssertionSpecs.cs, Line: 501, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #36 Path: D:\a\1\s\Tests\Shared.Specs\ExceptionAssertionSpecs.cs, Line: 751, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #37 Path: D:\a\1\s\Tests\Shared.Specs\ExtensibilityRelatedEquivalencySpecs.cs, Line: 137, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #38 Path: D:\a\1\s\Tests\Shared.Specs\ExtensibilityRelatedEquivalencySpecs.cs, Line: 64, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #39 Path: D:\a\1\s\Tests\Shared.Specs\ReferenceTypeAssertionsSpecs.cs, Line: 422, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #40 Path: D:\a\1\s\Tests\Shared.Specs\ReferenceTypeAssertionsSpecs.cs, Line: 509, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #41 Path: D:\a\1\s\Tests\Shared.Specs\StringAssertionSpecs.cs, Line: 3368, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html



Project: Net47.Specs
    #42 Path: D:\a\1\s\Tests\Shared.Specs\EventAssertionSpecs.cs, Line: 646, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #43 Path: D:\a\1\s\Tests\Shared.Specs\ExceptionAssertionSpecs.cs, Line: 501, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #44 Path: D:\a\1\s\Tests\Shared.Specs\ExceptionAssertionSpecs.cs, Line: 751, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #45 Path: D:\a\1\s\Tests\Shared.Specs\ExtensibilityRelatedEquivalencySpecs.cs, Line: 137, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #46 Path: D:\a\1\s\Tests\Shared.Specs\ExtensibilityRelatedEquivalencySpecs.cs, Line: 64, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #47 Path: D:\a\1\s\Tests\Shared.Specs\ReferenceTypeAssertionsSpecs.cs, Line: 422, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #48 Path: D:\a\1\s\Tests\Shared.Specs\ReferenceTypeAssertionsSpecs.cs, Line: 509, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #49 Path: D:\a\1\s\Tests\Shared.Specs\StringAssertionSpecs.cs, Line: 3368, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html



Project: NetStandard13.Specs
    #50 Path: D:\a\1\s\Tests\Shared.Specs\ExceptionAssertionSpecs.cs, Line: 501, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #51 Path: D:\a\1\s\Tests\Shared.Specs\ExceptionAssertionSpecs.cs, Line: 751, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #52 Path: D:\a\1\s\Tests\Shared.Specs\ExtensibilityRelatedEquivalencySpecs.cs, Line: 137, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #53 Path: D:\a\1\s\Tests\Shared.Specs\ExtensibilityRelatedEquivalencySpecs.cs, Line: 64, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #54 Path: D:\a\1\s\Tests\Shared.Specs\ReferenceTypeAssertionsSpecs.cs, Line: 422, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #55 Path: D:\a\1\s\Tests\Shared.Specs\ReferenceTypeAssertionsSpecs.cs, Line: 509, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #56 Path: D:\a\1\s\Tests\Shared.Specs\StringAssertionSpecs.cs, Line: 3368, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html



Project: NetCore30.Specs
    #57 Path: D:\a\1\s\Tests\Shared.Specs\ExceptionAssertionSpecs.cs, Line: 501, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #58 Path: D:\a\1\s\Tests\Shared.Specs\ExceptionAssertionSpecs.cs, Line: 751, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #59 Path: D:\a\1\s\Tests\Shared.Specs\ExtensibilityRelatedEquivalencySpecs.cs, Line: 137, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #60 Path: D:\a\1\s\Tests\Shared.Specs\ExtensibilityRelatedEquivalencySpecs.cs, Line: 64, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #61 Path: D:\a\1\s\Tests\Shared.Specs\ReferenceTypeAssertionsSpecs.cs, Line: 422, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #62 Path: D:\a\1\s\Tests\Shared.Specs\ReferenceTypeAssertionsSpecs.cs, Line: 509, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #63 Path: D:\a\1\s\Tests\Shared.Specs\StringAssertionSpecs.cs, Line: 3368, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html



Project: NetCore21.Specs
    #64 Path: D:\a\1\s\Tests\Shared.Specs\ExceptionAssertionSpecs.cs, Line: 501, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #65 Path: D:\a\1\s\Tests\Shared.Specs\ExceptionAssertionSpecs.cs, Line: 751, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #66 Path: D:\a\1\s\Tests\Shared.Specs\ExtensibilityRelatedEquivalencySpecs.cs, Line: 137, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #67 Path: D:\a\1\s\Tests\Shared.Specs\ExtensibilityRelatedEquivalencySpecs.cs, Line: 64, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #68 Path: D:\a\1\s\Tests\Shared.Specs\ReferenceTypeAssertionsSpecs.cs, Line: 422, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #69 Path: D:\a\1\s\Tests\Shared.Specs\ReferenceTypeAssertionsSpecs.cs, Line: 509, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #70 Path: D:\a\1\s\Tests\Shared.Specs\StringAssertionSpecs.cs, Line: 3368, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html



--- Rules Summary ---
R9: 70

--- Summary ---
Fixed ReSharper issues: 70
Fixed SonarQube issues: 0
Total fixed issues: 70

Finished in: 35 s

######################################################################
Nr: 1 - UsePatternMatchingRewriterR8
Filepath: D:\a\1\s\Src\FluentAssertions\Equivalency\DictionaryEquivalencyStep.cs
Description: Error: The created Syntax Tree is semantically incorrect.
------------------------------------------------------------------------
---- Original Tree ----
using System.Collections;
using System.Diagnostics.CodeAnalysis;
using System.Reflection;
using FluentAssertions.Execution;

namespace FluentAssertions.Equivalency
{
    public class DictionaryEquivalencyStep : IEquivalencyStep
    {
        /// <summary>
        /// Gets a value indicating whether this step can handle the current subject and/or expectation.
        /// </summary>
        public bool CanHandle(IEquivalencyValidationContext context, IEquivalencyAssertionOptions config)
        {
            return typeof(IDictionary).IsAssignableFrom(config.GetExpectationType(context));
        }

        /// <summary>
        /// Applies a step as part of the task to compare two objects for structural equality.
        /// </summary>
        /// <value>
        /// Should return <c>true</c> if the subject matches the expectation or if no additional assertions
        /// have to be executed. Should return <c>false</c> otherwise.
        /// </value>
        /// <remarks>
        /// May throw when preconditions are not met or if it detects mismatching data.
        /// </remarks>
        [SuppressMessage("ReSharper", "PossibleNullReferenceException")]
        public virtual bool Handle(IEquivalencyValidationContext context, IEquivalencyValidator parent, IEquivalencyAssertionOptions config)
        {
            var subject = context.Subject as IDictionary;
            var expectation = context.Expectation as IDictionary;

            if (PreconditionsAreMet(expectation, subject))
            {
                if (expectation != null)
                {
                    foreach (object key in expectation.Keys)
                    {
                        if (config.IsRecursive)
                        {
                            context.TraceSingle(path => $"Recursing into dictionary item {key} at {path}");
                            parent.AssertEqualityUsing(context.CreateForDictionaryItem(key, subject[key], expectation[key]));
                        }
                        else
                        {
                            context.TraceSingle(path => $"Comparing dictionary item {key} at {path} between subject and expectation");
                            subject[key].Should().Be(expectation[key], context.Because, context.BecauseArgs);
                        }
                    }
                }
            }

            return true;
        }

        private static bool PreconditionsAreMet(IDictionary expectation, IDictionary subject)
        {
            return AssertIsDictionary(subject)
                   && AssertEitherIsNotNull(expectation, subject)
                   && AssertSameLength(expectation, subject);
        }

        private static bool AssertEitherIsNotNull(IDictionary expectation, IDictionary subject)
        {
            return AssertionScope.Current
                .ForCondition(((expectation is null) && (subject is null)) || (expectation != null))
                .FailWith("Expected {context:subject} to be {0}, but found {1}.", null, subject);
        }

        private static bool AssertIsDictionary(IDictionary subject)
        {
            return AssertionScope.Current
                .ForCondition(subject != null)
                .FailWith("Expected {context:subject} to be a dictionary, but it is not.");
        }

        private static bool AssertSameLength(IDictionary expectation, IDictionary subject)
        {
            return AssertionScope.Current
                .ForCondition((expectation is null) || (subject.Keys.Count == expectation.Keys.Count))
                .FailWith("Expected {context:subject} to be a dictionary with {0} item(s), but it only contains {1} item(s).",
                    expectation?.Keys.Count, subject?.Keys.Count);
        }
    }
}

---- Transformed Tree ----
using System.Collections;
using System.Diagnostics.CodeAnalysis;
using System.Reflection;
using FluentAssertions.Execution;

namespace FluentAssertions.Equivalency
{
    public class DictionaryEquivalencyStep : IEquivalencyStep
    {
        /// <summary>
        /// Gets a value indicating whether this step can handle the current subject and/or expectation.
        /// </summary>
        public bool CanHandle(IEquivalencyValidationContext context, IEquivalencyAssertionOptions config)
        {
            return typeof(IDictionary).IsAssignableFrom(config.GetExpectationType(context));
        }

        /// <summary>
        /// Applies a step as part of the task to compare two objects for structural equality.
        /// </summary>
        /// <value>
        /// Should return <c>true</c> if the subject matches the expectation or if no additional assertions
        /// have to be executed. Should return <c>false</c> otherwise.
        /// </value>
        /// <remarks>
        /// May throw when preconditions are not met or if it detects mismatching data.
        /// </remarks>
        [SuppressMessage("ReSharper", "PossibleNullReferenceException")]
        public virtual bool Handle(IEquivalencyValidationContext context, IEquivalencyValidator parent, IEquivalencyAssertionOptions config)
        {
            var subject = context.Subject as IDictionary;

            if (PreconditionsAreMet(expectation, subject))
            {
                if (context.Expectation is IDictionary expectation)
                {
                    foreach (object key in expectation.Keys)
                    {
                        if (config.IsRecursive)
                        {
                            context.TraceSingle(path => $"Recursing into dictionary item {key} at {path}");
                            parent.AssertEqualityUsing(context.CreateForDictionaryItem(key, subject[key], expectation[key]));
                        }
                        else
                        {
                            context.TraceSingle(path => $"Comparing dictionary item {key} at {path} between subject and expectation");
                            subject[key].Should().Be(expectation[key], context.Because, context.BecauseArgs);
                        }
                    }
                }
            }

            return true;
        }

        private static bool PreconditionsAreMet(IDictionary expectation, IDictionary subject)
        {
            return AssertIsDictionary(subject)
                   && AssertEitherIsNotNull(expectation, subject)
                   && AssertSameLength(expectation, subject);
        }

        private static bool AssertEitherIsNotNull(IDictionary expectation, IDictionary subject)
        {
            return AssertionScope.Current
                .ForCondition(((expectation is null) && (subject is null)) || (expectation != null))
                .FailWith("Expected {context:subject} to be {0}, but found {1}.", null, subject);
        }

        private static bool AssertIsDictionary(IDictionary subject)
        {
            return AssertionScope.Current
                .ForCondition(subject != null)
                .FailWith("Expected {context:subject} to be a dictionary, but it is not.");
        }

        private static bool AssertSameLength(IDictionary expectation, IDictionary subject)
        {
            return AssertionScope.Current
                .ForCondition((expectation is null) || (subject.Keys.Count == expectation.Keys.Count))
                .FailWith("Expected {context:subject} to be a dictionary with {0} item(s), but it only contains {1} item(s).",
                    expectation?.Keys.Count, subject?.Keys.Count);
        }
    }
}

---- Semantic diagnostics *before* transformation ----
D:\a\1\s\Src\FluentAssertions\Equivalency\DictionaryEquivalencyStep.cs(3,1): hidden CS8019: Unnecessary using directive.
---- Semantic diagnostics *after* transformation ----
D:\a\1\s\Src\FluentAssertions\Equivalency\DictionaryEquivalencyStep.cs(33,37): error CS0103: The name 'expectation' does not exist in the current context,D:\a\1\s\Src\FluentAssertions\Equivalency\DictionaryEquivalencyStep.cs(3,1): hidden CS8019: Unnecessary using directive.
######################################################################


