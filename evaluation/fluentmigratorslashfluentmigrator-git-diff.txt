diff --git a/src/FluentMigrator.Abstractions/Expressions/AlterDefaultConstraintExpression.cs b/src/FluentMigrator.Abstractions/Expressions/AlterDefaultConstraintExpression.cs
index b2004905..8f8bd26e 100644
--- a/src/FluentMigrator.Abstractions/Expressions/AlterDefaultConstraintExpression.cs
+++ b/src/FluentMigrator.Abstractions/Expressions/AlterDefaultConstraintExpression.cs
@@ -42,11 +42,7 @@ namespace FluentMigrator.Expressions
         public override string ToString()
         {
             return base.ToString() +
-                    string.Format("{0}.{1} {2} {3}",
-                                SchemaName,
-                                TableName,
-                                ColumnName,
-                                DefaultValue);
+                    $"{SchemaName}.{TableName} {ColumnName} {DefaultValue}";
         }
     }
 }
diff --git a/src/FluentMigrator.Abstractions/Expressions/CreateForeignKeyExpression.cs b/src/FluentMigrator.Abstractions/Expressions/CreateForeignKeyExpression.cs
index 0360914a..00a936d5 100644
--- a/src/FluentMigrator.Abstractions/Expressions/CreateForeignKeyExpression.cs
+++ b/src/FluentMigrator.Abstractions/Expressions/CreateForeignKeyExpression.cs
@@ -48,12 +48,7 @@ namespace FluentMigrator.Expressions
         public override string ToString()
         {
             return base.ToString() +
-                    string.Format("{0} {1}({2}) {3}({4})",
-                                ForeignKey.Name,
-                                ForeignKey.ForeignTable,
-                                string.Join(", ", ForeignKey.ForeignColumns.ToArray()),
-                                ForeignKey.PrimaryTable,
-                                string.Join(", ", ForeignKey.PrimaryColumns.ToArray()));
+                    $"{ForeignKey.Name} {ForeignKey.ForeignTable}({string.Join(", ", ForeignKey.ForeignColumns.ToArray())}) {ForeignKey.PrimaryTable}({string.Join(", ", ForeignKey.PrimaryColumns.ToArray())})";
         }
 
         /// <inheritdoc />
diff --git a/src/FluentMigrator.Abstractions/Expressions/DeleteDefaultConstraintExpression.cs b/src/FluentMigrator.Abstractions/Expressions/DeleteDefaultConstraintExpression.cs
index ffafd21b..ecfa817a 100644
--- a/src/FluentMigrator.Abstractions/Expressions/DeleteDefaultConstraintExpression.cs
+++ b/src/FluentMigrator.Abstractions/Expressions/DeleteDefaultConstraintExpression.cs
@@ -34,10 +34,7 @@ namespace FluentMigrator.Expressions
         public override string ToString()
         {
             return base.ToString() +
-                   string.Format("{0}.{1} {2}",
-                                 SchemaName,
-                                 TableName,
-                                 ColumnName);
+                   $"{SchemaName}.{TableName} {ColumnName}";
         }
     }
 }
diff --git a/src/FluentMigrator.Abstractions/Infrastructure/MigrationInfo.cs b/src/FluentMigrator.Abstractions/Infrastructure/MigrationInfo.cs
index fdce90d0..d4a2f9cb 100644
--- a/src/FluentMigrator.Abstractions/Infrastructure/MigrationInfo.cs
+++ b/src/FluentMigrator.Abstractions/Infrastructure/MigrationInfo.cs
@@ -106,7 +106,7 @@ namespace FluentMigrator.Infrastructure
         /// <inheritdoc />
         public string GetName()
         {
-            return string.Format("{0}: {1}", Version, Migration.GetType().Name);
+            return $"{Version}: {Migration.GetType().Name}";
         }
 
         /// <summary>
@@ -122,8 +122,7 @@ namespace FluentMigrator.Infrastructure
         /// <inheritdoc />
         public override string ToString()
         {
-            return string.Format("MigrationType: {0}, TransactionBehavior: {1}", Migration.GetType(),
-                                 TransactionBehavior);
+            return $"MigrationType: {Migration.GetType()}, TransactionBehavior: {TransactionBehavior}";
         }
     }
 }
diff --git a/src/FluentMigrator.Console/Options.cs b/src/FluentMigrator.Console/Options.cs
index 18de5898..6b8ccd10 100644
--- a/src/FluentMigrator.Console/Options.cs
+++ b/src/FluentMigrator.Console/Options.cs
@@ -318,7 +318,7 @@ namespace Mono.Options
                         "maxValueCount");
             if (this.type == OptionValueType.None && maxValueCount > 1)
                 throw new ArgumentException(
-                        string.Format("Cannot provide maxValueCount of {0} for OptionValueType.None.", maxValueCount),
+                        $"Cannot provide maxValueCount of {maxValueCount} for OptionValueType.None.",
                         "maxValueCount");
             if (Array.IndexOf(names, "<>") >= 0 &&
                     ((names.Length == 1 && this.type != OptionValueType.None) ||
@@ -393,7 +393,7 @@ namespace Mono.Options
                     type = name[end];
                 else
                     throw new ArgumentException(
-                            string.Format("Conflicting option types: '{0}' vs. '{1}'.", type, name[end]),
+                            $"Conflicting option types: '{type}' vs. '{name[end]}'.",
                             "prototype");
                 AddSeparators(name, end, seps);
             }
@@ -403,7 +403,7 @@ namespace Mono.Options
 
             if (count <= 1 && seps.Count != 0)
                 throw new ArgumentException(
-                        string.Format("Cannot provide key/value separators for Options taking {0} value(s).", count),
+                        $"Cannot provide key/value separators for Options taking {count} value(s).",
                         "prototype");
             if (count > 1)
             {
@@ -428,14 +428,14 @@ namespace Mono.Options
                     case '{':
                         if (start != -1)
                             throw new ArgumentException(
-                                    string.Format("Ill-formed name/value separator found in \"{0}\".", name),
+                                    $"Ill-formed name/value separator found in \"{name}\".",
                                     "prototype");
                         start = i + 1;
                         break;
                     case '}':
                         if (start == -1)
                             throw new ArgumentException(
-                                    string.Format("Ill-formed name/value separator found in \"{0}\".", name),
+                                    $"Ill-formed name/value separator found in \"{name}\".",
                                     "prototype");
                         seps.Add(name.Substring(start, i - start));
                         start = -1;
@@ -448,7 +448,7 @@ namespace Mono.Options
             }
             if (start != -1)
                 throw new ArgumentException(
-                        string.Format("Ill-formed name/value separator found in \"{0}\".", name),
+                        $"Ill-formed name/value separator found in \"{name}\".",
                         "prototype");
         }
 
@@ -833,9 +833,7 @@ namespace Mono.Options
                 c.Option.Invoke(c);
             else if (c.OptionValues.Count > c.Option.MaxValueCount)
             {
-                throw new OptionException(localizer(string.Format(
-                                "Error: Found {0} option values when expecting {1}.",
-                                c.OptionValues.Count, c.Option.MaxValueCount)),
+                throw new OptionException(localizer($"Error: Found {c.OptionValues.Count} option values when expecting {c.Option.MaxValueCount}."),
                         c.OptionName);
             }
         }
diff --git a/src/FluentMigrator.Runner.Core/Conventions/DefaultAutoNameConvention.cs b/src/FluentMigrator.Runner.Core/Conventions/DefaultAutoNameConvention.cs
index 777a33d5..96b3d74b 100644
--- a/src/FluentMigrator.Runner.Core/Conventions/DefaultAutoNameConvention.cs
+++ b/src/FluentMigrator.Runner.Core/Conventions/DefaultAutoNameConvention.cs
@@ -59,10 +59,7 @@ namespace FluentMigrator.Runner.Conventions
                 var version = migrationAttribute.Version;
                 foreach (var databaseType in databaseTypes)
                 {
-                    yield return string.Format("Scripts.Up.{0}_{1}_{2}.sql"
-                        , version
-                        , type.Name
-                        , databaseType);
+                    yield return $"Scripts.Up.{version}_{type.Name}_{databaseType}.sql";
                 }
             }
         }
@@ -78,10 +75,7 @@ namespace FluentMigrator.Runner.Conventions
                 var version = migrationAttribute.Version;
                 foreach (var databaseType in databaseTypes)
                 {
-                    yield return string.Format("Scripts.Down.{0}_{1}_{2}.sql"
-                        , version
-                        , type.Name
-                        , databaseType);
+                    yield return $"Scripts.Down.{version}_{type.Name}_{databaseType}.sql";
                 }
             }
         }
diff --git a/src/FluentMigrator.Runner.Core/Generators/Base/ColumnBase.cs b/src/FluentMigrator.Runner.Core/Generators/Base/ColumnBase.cs
index f0427b4c..c6debfe5 100644
--- a/src/FluentMigrator.Runner.Core/Generators/Base/ColumnBase.cs
+++ b/src/FluentMigrator.Runner.Core/Generators/Base/ColumnBase.cs
@@ -210,13 +210,13 @@ namespace FluentMigrator.Runner.Generators.Base
                     break;
             }
 
-            return string.Format(" ON {0} {1}", onWhat, action);
+            return $" ON {onWhat} {action}";
         }
 
         /// <inheritdoc />
         public virtual string GenerateForeignKeyName(ForeignKeyDefinition foreignKey)
         {
-            return string.Format("FK_{0}_{1}", foreignKey.PrimaryTable.Substring(0, 5), foreignKey.ForeignTable.Substring(0, 5));
+            return $"FK_{foreignKey.PrimaryTable.Substring(0, 5)}_{foreignKey.ForeignTable.Substring(0, 5)}";
         }
 
         /// <inheritdoc />
@@ -318,7 +318,7 @@ namespace FluentMigrator.Runner.Generators.Base
             var pkColDefs = primaryKeyColumns.ToList();
             var keyColumns = string.Join(", ", pkColDefs.Select(x => Quoter.QuoteColumnName(x.Name)).ToArray());
 
-            return string.Format(", {0}PRIMARY KEY ({1})", GetPrimaryKeyConstraintName(pkColDefs, tableName), keyColumns);
+            return $", {GetPrimaryKeyConstraintName(pkColDefs, tableName)}PRIMARY KEY ({keyColumns})";
         }
 
         /// <summary>
@@ -336,7 +336,7 @@ namespace FluentMigrator.Runner.Generators.Base
                 return string.Empty;
             }
 
-            return string.Format("CONSTRAINT {0} ", Quoter.QuoteIndexName(primaryKeyName));
+            return $"CONSTRAINT {Quoter.QuoteIndexName(primaryKeyName)} ";
         }
     }
 }
diff --git a/src/FluentMigrator.Runner.Core/Generators/Generic/GenericGenerator.cs b/src/FluentMigrator.Runner.Core/Generators/Generic/GenericGenerator.cs
index b3283d8b..d6a84565 100644
--- a/src/FluentMigrator.Runner.Core/Generators/Generic/GenericGenerator.cs
+++ b/src/FluentMigrator.Runner.Core/Generators/Generic/GenericGenerator.cs
@@ -295,9 +295,7 @@ namespace FluentMigrator.Runner.Generators.Generic
 
                 if (unsupportedFeatures.Count > 0) {
                     var errorMessage =
-                        string.Format(
-                            "The following database specific additional features are not supported in strict mode [{0}]",
-                            unsupportedFeatures.Aggregate((x, y) => x + ", " + y));
+                        $"The following database specific additional features are not supported in strict mode [{unsupportedFeatures.Aggregate((x, y) => x + ", " + y)}]";
                     {
                         return CompatibilityMode.HandleCompatibilty(errorMessage);
                     }
@@ -313,7 +311,7 @@ namespace FluentMigrator.Runner.Generators.Generic
 
             foreach (var item in expression.Set)
             {
-                updateItems.Add(string.Format("{0} = {1}", Quoter.QuoteColumnName(item.Key), Quoter.QuoteValue(item.Value)));
+                updateItems.Add($"{Quoter.QuoteColumnName(item.Key)} = {Quoter.QuoteValue(item.Value)}");
             }
 
             if(expression.IsAllRows)
@@ -325,8 +323,7 @@ namespace FluentMigrator.Runner.Generators.Generic
                 foreach (var item in expression.Where)
                 {
                     var op = item.Value == null || item.Value == DBNull.Value ? "IS" : "=";
-                    whereClauses.Add(string.Format("{0} {1} {2}", Quoter.QuoteColumnName(item.Key),
-                                                   op, Quoter.QuoteValue(item.Value)));
+                    whereClauses.Add($"{Quoter.QuoteColumnName(item.Key)} {op} {Quoter.QuoteValue(item.Value)}");
                 }
             }
             return string.Format(UpdateData, Quoter.QuoteTableName(expression.TableName, expression.SchemaName), string.Join(", ", updateItems.ToArray()), string.Join(" AND ", whereClauses.ToArray()));
@@ -349,11 +346,7 @@ namespace FluentMigrator.Runner.Generators.Generic
                     {
                         var op = item.Value == null || item.Value == DBNull.Value ? "IS" : "=";
                         whereClauses.Add(
-                            string.Format(
-                                "{0} {1} {2}",
-                                Quoter.QuoteColumnName(item.Key),
-                                op,
-                                Quoter.QuoteValue(item.Value)));
+                            $"{Quoter.QuoteColumnName(item.Key)} {op} {Quoter.QuoteValue(item.Value)}");
                     }
 
                     deleteItems.Add(string.Format(DeleteData, Quoter.QuoteTableName(expression.TableName, expression.SchemaName), string.Join(" AND ", whereClauses.ToArray())));
diff --git a/src/FluentMigrator.Runner.Db2/Generators/Db2/Db2Column.cs b/src/FluentMigrator.Runner.Db2/Generators/Db2/Db2Column.cs
index 6f784067..191de216 100644
--- a/src/FluentMigrator.Runner.Db2/Generators/Db2/Db2Column.cs
+++ b/src/FluentMigrator.Runner.Db2/Generators/Db2/Db2Column.cs
@@ -69,10 +69,7 @@ namespace FluentMigrator.Runner.Generators.DB2
                 return acc;
             });
 
-            return string.Format(
-                "ALTER COLUMN {0} SET DATA TYPE {1}",
-                Quoter.QuoteColumnName(column.Name),
-                alterClauses);
+            return $"ALTER COLUMN {Quoter.QuoteColumnName(column.Name)} SET DATA TYPE {alterClauses}";
         }
 
         protected virtual string FormatCCSID(ColumnDefinition column)
diff --git a/src/FluentMigrator.Runner.Db2/Generators/Db2/Db2Generator.cs b/src/FluentMigrator.Runner.Db2/Generators/Db2/Db2Generator.cs
index 526eaf9f..90681b91 100644
--- a/src/FluentMigrator.Runner.Db2/Generators/Db2/Db2Generator.cs
+++ b/src/FluentMigrator.Runner.Db2/Generators/Db2/Db2Generator.cs
@@ -52,27 +52,17 @@ namespace FluentMigrator.Runner.Generators.DB2
 
         public override string Generate(Expressions.AlterDefaultConstraintExpression expression)
         {
-            return string.Format(
-                "ALTER TABLE {0} ALTER COLUMN {1} SET DEFAULT {2}",
-                Quoter.QuoteTableName(expression.TableName, expression.SchemaName),
-                Quoter.QuoteColumnName(expression.ColumnName),
-                ((Db2Column)Column).FormatAlterDefaultValue(expression.ColumnName, expression.DefaultValue));
+            return $"ALTER TABLE {Quoter.QuoteTableName(expression.TableName, expression.SchemaName)} ALTER COLUMN {Quoter.QuoteColumnName(expression.ColumnName)} SET DEFAULT {((Db2Column)Column).FormatAlterDefaultValue(expression.ColumnName, expression.DefaultValue)}";
         }
 
         public override string Generate(Expressions.DeleteDefaultConstraintExpression expression)
         {
-            return string.Format(
-                "ALTER TABLE {0} ALTER COLUMN {1} DROP DEFAULT",
-                Quoter.QuoteTableName(expression.TableName, expression.SchemaName),
-                Quoter.QuoteColumnName(expression.ColumnName));
+            return $"ALTER TABLE {Quoter.QuoteTableName(expression.TableName, expression.SchemaName)} ALTER COLUMN {Quoter.QuoteColumnName(expression.ColumnName)} DROP DEFAULT";
         }
 
         public override string Generate(Expressions.RenameTableExpression expression)
         {
-            return string.Format(
-                "RENAME TABLE {0} TO {1}",
-                Quoter.QuoteTableName(expression.OldName, expression.SchemaName),
-                Quoter.QuoteTableName(expression.NewName));
+            return $"RENAME TABLE {Quoter.QuoteTableName(expression.OldName, expression.SchemaName)} TO {Quoter.QuoteTableName(expression.NewName)}";
         }
 
         public override string Generate(Expressions.DeleteColumnExpression expression)
@@ -96,10 +86,7 @@ namespace FluentMigrator.Runner.Generators.DB2
         {
             expression.Column.AdditionalFeatures.Add(new KeyValuePair<string, object>("IsCreateColumn", true));
 
-            return string.Format(
-                "ALTER TABLE {0} ADD COLUMN {1}",
-                Quoter.QuoteTableName(expression.TableName, expression.SchemaName),
-                Column.Generate(expression.Column));
+            return $"ALTER TABLE {Quoter.QuoteTableName(expression.TableName, expression.SchemaName)} ADD COLUMN {Column.Generate(expression.Column)}";
         }
 
         public override string Generate(Expressions.CreateForeignKeyExpression expression)
@@ -126,14 +113,7 @@ namespace FluentMigrator.Runner.Generators.DB2
                 return acc.AppendFormat("{0}{1}", separator, Quoter.QuoteColumnName(col));
             });
 
-            return string.Format(
-                "ALTER TABLE {0} ADD CONSTRAINT {1} FOREIGN KEY ({2}) REFERENCES {3} ({4}){5}",
-                Quoter.QuoteTableName(expression.ForeignKey.ForeignTable, expression.ForeignKey.ForeignTableSchema),
-                keyWithSchema,
-                foreignColumns,
-                Quoter.QuoteTableName(expression.ForeignKey.PrimaryTable, expression.ForeignKey.PrimaryTableSchema),
-                primaryColumns,
-                Column.FormatCascade("DELETE", expression.ForeignKey.OnDelete));
+            return $"ALTER TABLE {Quoter.QuoteTableName(expression.ForeignKey.ForeignTable, expression.ForeignKey.ForeignTableSchema)} ADD CONSTRAINT {keyWithSchema} FOREIGN KEY ({foreignColumns}) REFERENCES {Quoter.QuoteTableName(expression.ForeignKey.PrimaryTable, expression.ForeignKey.PrimaryTableSchema)} ({primaryColumns}){Column.FormatCascade("DELETE", expression.ForeignKey.OnDelete)}";
         }
 
         public override string Generate(Expressions.CreateConstraintExpression expression)
@@ -144,12 +124,7 @@ namespace FluentMigrator.Runner.Generators.DB2
             var quotedNames = expression.Constraint.Columns.Select(q => Quoter.QuoteColumnName(q));
             var columnList = string.Join(", ", quotedNames.ToArray());
 
-            return string.Format(
-                "ALTER TABLE {0} ADD CONSTRAINT {1} {2} ({3})",
-                Quoter.QuoteTableName(expression.Constraint.TableName, expression.Constraint.SchemaName),
-                constraintName,
-                constraintType,
-                columnList);
+            return $"ALTER TABLE {Quoter.QuoteTableName(expression.Constraint.TableName, expression.Constraint.SchemaName)} ADD CONSTRAINT {constraintName} {constraintType} ({columnList})";
         }
 
         public override string Generate(Expressions.CreateIndexExpression expression)
@@ -164,60 +139,49 @@ namespace FluentMigrator.Runner.Generators.DB2
                 return item.AppendFormat("{0}{1}{2}", accumulator, Quoter.QuoteColumnName(itemToo.Name), direction);
             });
 
-            return string.Format(
-                "CREATE {0}INDEX {1} ON {2} ({3})",
-                expression.Index.IsUnique ? "UNIQUE " : string.Empty,
-                indexWithSchema,
-                Quoter.QuoteTableName(expression.Index.TableName, expression.Index.SchemaName),
-                columnList);
+            return $"CREATE {(expression.Index.IsUnique ? "UNIQUE " : string.Empty)}INDEX {indexWithSchema} ON {Quoter.QuoteTableName(expression.Index.TableName, expression.Index.SchemaName)} ({columnList})";
         }
 
         public override string Generate(Expressions.CreateSchemaExpression expression)
         {
-            return string.Format("CREATE SCHEMA {0}", Quoter.QuoteSchemaName(expression.SchemaName));
+            return $"CREATE SCHEMA {Quoter.QuoteSchemaName(expression.SchemaName)}";
         }
 
         public override string Generate(Expressions.DeleteTableExpression expression)
         {
-            return string.Format("DROP TABLE {0}", Quoter.QuoteTableName(expression.TableName, expression.SchemaName));
+            return $"DROP TABLE {Quoter.QuoteTableName(expression.TableName, expression.SchemaName)}";
         }
 
         public override string Generate(Expressions.DeleteIndexExpression expression)
         {
             var indexWithSchema = Quoter.QuoteIndexName(expression.Index.Name, expression.Index.SchemaName);
-            return string.Format("DROP INDEX {0}", indexWithSchema);
+            return $"DROP INDEX {indexWithSchema}";
         }
 
         public override string Generate(Expressions.DeleteSchemaExpression expression)
         {
-            return string.Format("DROP SCHEMA {0} RESTRICT", Quoter.QuoteSchemaName(expression.SchemaName));
+            return $"DROP SCHEMA {Quoter.QuoteSchemaName(expression.SchemaName)} RESTRICT";
         }
 
         public override string Generate(Expressions.DeleteConstraintExpression expression)
         {
             var constraintName = Quoter.QuoteConstraintName(expression.Constraint.ConstraintName, expression.Constraint.SchemaName);
 
-            return string.Format(
-                "ALTER TABLE {0} DROP CONSTRAINT {1}",
-                Quoter.QuoteTableName(expression.Constraint.TableName, expression.Constraint.SchemaName),
-                constraintName);
+            return $"ALTER TABLE {Quoter.QuoteTableName(expression.Constraint.TableName, expression.Constraint.SchemaName)} DROP CONSTRAINT {constraintName}";
         }
 
         public override string Generate(Expressions.DeleteForeignKeyExpression expression)
         {
             var constraintName = Quoter.QuoteConstraintName(expression.ForeignKey.Name, expression.ForeignKey.ForeignTableSchema);
 
-            return string.Format(
-                "ALTER TABLE {0} DROP FOREIGN KEY {1}",
-                Quoter.QuoteTableName(expression.ForeignKey.ForeignTable, expression.ForeignKey.ForeignTableSchema),
-                constraintName);
+            return $"ALTER TABLE {Quoter.QuoteTableName(expression.ForeignKey.ForeignTable, expression.ForeignKey.ForeignTableSchema)} DROP FOREIGN KEY {constraintName}";
         }
 
         public override string Generate(Expressions.DeleteDataExpression expression)
         {
             if (expression.IsAllRows)
             {
-                return string.Format("DELETE FROM {0}", Quoter.QuoteTableName(expression.TableName, expression.SchemaName));
+                return $"DELETE FROM {Quoter.QuoteTableName(expression.TableName, expression.SchemaName)}";
             }
             else
             {
@@ -287,7 +251,7 @@ namespace FluentMigrator.Runner.Generators.DB2
 
             if (expression.IsAllRows)
             {
-                return string.Format("UPDATE {0} SET {1}", Quoter.QuoteTableName(expression.TableName, expression.SchemaName), updateClauses);
+                return $"UPDATE {Quoter.QuoteTableName(expression.TableName, expression.SchemaName)} SET {updateClauses}";
             }
 
             var whereClauses = expression.Where.Aggregate(new StringBuilder(), (acc, rowVal) =>
@@ -298,12 +262,12 @@ namespace FluentMigrator.Runner.Generators.DB2
                 return acc.AppendFormat("{0}{1} {2} {3}", accumulator, Quoter.QuoteColumnName(rowVal.Key), clauseOperator, Quoter.QuoteValue(rowVal.Value));
             });
 
-            return string.Format("UPDATE {0} SET {1} WHERE {2}", Quoter.QuoteTableName(expression.TableName, expression.SchemaName), updateClauses, whereClauses);
+            return $"UPDATE {Quoter.QuoteTableName(expression.TableName, expression.SchemaName)} SET {updateClauses} WHERE {whereClauses}";
         }
 
         public override string Generate(Expressions.CreateTableExpression expression)
         {
-            return string.Format("CREATE TABLE {0} ({1})", Quoter.QuoteTableName(expression.TableName, expression.SchemaName), Column.Generate(expression.Columns, expression.TableName));
+            return $"CREATE TABLE {Quoter.QuoteTableName(expression.TableName, expression.SchemaName)} ({Column.Generate(expression.Columns, expression.TableName)})";
         }
 
         public override string Generate(Expressions.AlterColumnExpression expression)
@@ -311,7 +275,7 @@ namespace FluentMigrator.Runner.Generators.DB2
             try
             {
                 // throws an exception of an attempt is made to alter an identity column, as it is not supported by most version of DB2.
-                return string.Format("ALTER TABLE {0} {1}", Quoter.QuoteTableName(expression.TableName, expression.SchemaName), ((Db2Column)Column).GenerateAlterClause(expression.Column));
+                return $"ALTER TABLE {Quoter.QuoteTableName(expression.TableName, expression.SchemaName)} {((Db2Column)Column).GenerateAlterClause(expression.Column)}";
             }
             catch (NotSupportedException e)
             {
diff --git a/src/FluentMigrator.Runner.Db2/Processors/Db2/Db2Processor.cs b/src/FluentMigrator.Runner.Db2/Processors/Db2/Db2Processor.cs
index 6c10b899..38c41707 100644
--- a/src/FluentMigrator.Runner.Db2/Processors/Db2/Db2Processor.cs
+++ b/src/FluentMigrator.Runner.Db2/Processors/Db2/Db2Processor.cs
@@ -99,7 +99,7 @@ namespace FluentMigrator.Runner.Processors.DB2
 
         public override bool DefaultValueExists(string schemaName, string tableName, string columnName, object defaultValue)
         {
-            var defaultValueAsString = string.Format("%{0}%", FormatHelper.FormatSqlEscape(defaultValue.ToString()));
+            var defaultValueAsString = $"%{FormatHelper.FormatSqlEscape(defaultValue.ToString())}%";
 
             var conditions = new List<string>
             {
diff --git a/src/FluentMigrator.Runner.Db2/Processors/Db2/iSeries/Db2ISeriesProcessor.cs b/src/FluentMigrator.Runner.Db2/Processors/Db2/iSeries/Db2ISeriesProcessor.cs
index 1655cb50..93824bee 100644
--- a/src/FluentMigrator.Runner.Db2/Processors/Db2/iSeries/Db2ISeriesProcessor.cs
+++ b/src/FluentMigrator.Runner.Db2/Processors/Db2/iSeries/Db2ISeriesProcessor.cs
@@ -84,7 +84,7 @@ namespace FluentMigrator.Runner.Processors.DB2.iSeries
         public override bool DefaultValueExists(string schemaName, string tableName, string columnName, object defaultValue)
         {
             var schema = string.IsNullOrEmpty(schemaName) ? string.Empty : "TABLE_SCHEMA = '" + FormatToSafeName(schemaName) + "' AND ";
-            var defaultValueAsString = string.Format("%{0}%", FormatHelper.FormatSqlEscape(defaultValue.ToString()));
+            var defaultValueAsString = $"%{FormatHelper.FormatSqlEscape(defaultValue.ToString())}%";
 
             return Exists("SELECT COLUMN_DEFAULT FROM INFORMATION_SCHEMA.COLUMNS WHERE {0} TABLE_NAME = '{1}' AND COLUMN_NAME = '{2}' AND COLUMN_DEFAULT LIKE '{3}'", schema, FormatToSafeName(tableName), columnName.ToUpper(), defaultValueAsString);
         }
diff --git a/src/FluentMigrator.Runner.Firebird/Generators/Firebird/FirebirdGenerator.cs b/src/FluentMigrator.Runner.Firebird/Generators/Firebird/FirebirdGenerator.cs
index a2213e0a..ca3d2e17 100644
--- a/src/FluentMigrator.Runner.Firebird/Generators/Firebird/FirebirdGenerator.cs
+++ b/src/FluentMigrator.Runner.Firebird/Generators/Firebird/FirebirdGenerator.cs
@@ -88,20 +88,13 @@ namespace FluentMigrator.Runner.Generators.Firebird
         public override string Generate(AlterDefaultConstraintExpression expression)
         {
             Truncator.Truncate(expression);
-            return string.Format("ALTER TABLE {0} ALTER COLUMN {1} SET DEFAULT {2}",
-                Quoter.QuoteTableName(expression.TableName),
-                Quoter.QuoteColumnName(expression.ColumnName),
-                Quoter.QuoteValue(expression.DefaultValue)
-                );
+            return $"ALTER TABLE {Quoter.QuoteTableName(expression.TableName)} ALTER COLUMN {Quoter.QuoteColumnName(expression.ColumnName)} SET DEFAULT {Quoter.QuoteValue(expression.DefaultValue)}";
         }
 
         public override string Generate(DeleteDefaultConstraintExpression expression)
         {
             Truncator.Truncate(expression);
-            return string.Format("ALTER TABLE {0} ALTER COLUMN {1} DROP DEFAULT",
-                Quoter.QuoteTableName(expression.TableName),
-                Quoter.QuoteColumnName(expression.ColumnName)
-                );
+            return $"ALTER TABLE {Quoter.QuoteTableName(expression.TableName)} ALTER COLUMN {Quoter.QuoteColumnName(expression.ColumnName)} DROP DEFAULT";
         }
 
         public override string Generate(CreateIndexExpression expression)
@@ -148,20 +141,20 @@ namespace FluentMigrator.Runner.Generators.Firebird
         public override string Generate(CreateSequenceExpression expression)
         {
             Truncator.Truncate(expression);
-            return string.Format("CREATE SEQUENCE {0}", Quoter.QuoteSequenceName(expression.Sequence.Name));
+            return $"CREATE SEQUENCE {Quoter.QuoteSequenceName(expression.Sequence.Name)}";
         }
 
         public override string Generate(DeleteSequenceExpression expression)
         {
             Truncator.Truncate(expression);
-            return string.Format("DROP SEQUENCE {0}", Quoter.QuoteSequenceName(expression.SequenceName));
+            return $"DROP SEQUENCE {Quoter.QuoteSequenceName(expression.SequenceName)}";
         }
 
         public string GenerateAlterSequence(SequenceDefinition sequence)
         {
             Truncator.Truncate(sequence);
             if (sequence.StartWith != null)
-                return string.Format("ALTER SEQUENCE {0} RESTART WITH {1}", Quoter.QuoteSequenceName(sequence.Name), sequence.StartWith.ToString());
+                return $"ALTER SEQUENCE {Quoter.QuoteSequenceName(sequence.Name)} RESTART WITH {sequence.StartWith.ToString()}";
 
             return string.Empty;
         }
diff --git a/src/FluentMigrator.Runner.Firebird/Generators/Firebird/FirebirdTruncator.cs b/src/FluentMigrator.Runner.Firebird/Generators/Firebird/FirebirdTruncator.cs
index 4f896d7a..87775f55 100644
--- a/src/FluentMigrator.Runner.Firebird/Generators/Firebird/FirebirdTruncator.cs
+++ b/src/FluentMigrator.Runner.Firebird/Generators/Firebird/FirebirdTruncator.cs
@@ -258,7 +258,7 @@ namespace FluentMigrator.Runner.Generators.Firebird
                 if (name.Length > FirebirdOptions.MaxNameLength)
                 {
                     if (!_enabled)
-                        throw new ArgumentException(string.Format("Name too long: {0}", name));
+                        throw new ArgumentException($"Name too long: {name}");
 
                     return name.Substring(0, Math.Min(FirebirdOptions.MaxNameLength, name.Length));
                 }
@@ -273,7 +273,7 @@ namespace FluentMigrator.Runner.Generators.Firebird
                 if (name.Length > FirebirdOptions.MaxNameLength)
                 {
                     if (!_enabled)
-                        throw new ArgumentException(string.Format("Name too long: {0}", name));
+                        throw new ArgumentException($"Name too long: {name}");
 
                     byte[] byteHash = MD5.Create().ComputeHash(Encoding.ASCII.GetBytes(name));
                     string hash = Convert.ToBase64String(byteHash);
@@ -286,7 +286,7 @@ namespace FluentMigrator.Runner.Generators.Firebird
                             sb.Append(c);
                     }
                     hash = sb.ToString();
-                    return string.Format("fk_{0}", hash.Substring(0, Math.Min(28, hash.Length)));
+                    return $"fk_{hash.Substring(0, Math.Min(28, hash.Length))}";
                 }
             }
             return name;
diff --git a/src/FluentMigrator.Runner.Firebird/Processors/Firebird/FirebirdProcessor.cs b/src/FluentMigrator.Runner.Firebird/Processors/Firebird/FirebirdProcessor.cs
index a1dc448d..10e9b1ad 100644
--- a/src/FluentMigrator.Runner.Firebird/Processors/Firebird/FirebirdProcessor.cs
+++ b/src/FluentMigrator.Runner.Firebird/Processors/Firebird/FirebirdProcessor.cs
@@ -317,7 +317,7 @@ namespace FluentMigrator.Runner.Processors.Firebird
                 }
 
                 if (FBOptions.VirtualLock)
-                    throw new InvalidOperationException(string.Format("Table {0} is locked", tableName));
+                    throw new InvalidOperationException($"Table {tableName} is locked");
             }
         }
 
@@ -338,7 +338,7 @@ namespace FluentMigrator.Runner.Processors.Firebird
                 }
 
                 if (FBOptions.VirtualLock)
-                    throw new InvalidOperationException(string.Format("Column {0} in table {1} is locked", columnName, tableName));
+                    throw new InvalidOperationException($"Column {columnName} in table {tableName} is locked");
             }
         }
 
@@ -805,7 +805,7 @@ namespace FluentMigrator.Runner.Processors.Firebird
             }
             string triggerName = GetIdentityTriggerName(tableName, columnName);
             string quotedColumn = _quoter.Quote(columnName);
-            string trigger = string.Format("as begin if (NEW.{0} is NULL) then NEW.{1} = GEN_ID({2}, 1); end", quotedColumn, quotedColumn, _quoter.QuoteSequenceName(sequenceName, string.Empty));
+            string trigger = $"as begin if (NEW.{quotedColumn} is NULL) then NEW.{quotedColumn} = GEN_ID({_quoter.QuoteSequenceName(sequenceName, string.Empty)}, 1); end";
 
             PerformDBOperationExpression createTrigger = CreateTriggerExpression(tableName, triggerName, true, TriggerEvent.Insert, trigger);
             Process(createTrigger);
@@ -878,7 +878,7 @@ namespace FluentMigrator.Runner.Processors.Firebird
             PerformDBOperationExpression deleteTrigger = new PerformDBOperationExpression();
             deleteTrigger.Operation = (connection, transaction) =>
             {
-                string triggerSql = string.Format("DROP TRIGGER {0}", _quoter.Quote(triggerName));
+                string triggerSql = $"DROP TRIGGER {_quoter.Quote(triggerName)}";
                 Logger.LogSql(triggerSql);
                 using (var cmd = CreateCommand(triggerSql, connection, transaction))
                 {
diff --git a/src/FluentMigrator.Runner.Firebird/Processors/Firebird/FirebirdSchemaInfo.cs b/src/FluentMigrator.Runner.Firebird/Processors/Firebird/FirebirdSchemaInfo.cs
index 15f4bdc2..4a52532f 100644
--- a/src/FluentMigrator.Runner.Firebird/Processors/Firebird/FirebirdSchemaInfo.cs
+++ b/src/FluentMigrator.Runner.Firebird/Processors/Firebird/FirebirdSchemaInfo.cs
@@ -202,7 +202,7 @@ namespace FluentMigrator.Runner.Processors.Firebird
 
                 }
             }
-            throw new NotSupportedException(string.Format("Can't parse default value {0}", src));
+            throw new NotSupportedException($"Can't parse default value {src}");
         }
     }
 
diff --git a/src/FluentMigrator.Runner.Hana/Generators/Hana/HanaColumn.cs b/src/FluentMigrator.Runner.Hana/Generators/Hana/HanaColumn.cs
index 33e0021a..185d6a81 100644
--- a/src/FluentMigrator.Runner.Hana/Generators/Hana/HanaColumn.cs
+++ b/src/FluentMigrator.Runner.Hana/Generators/Hana/HanaColumn.cs
@@ -57,11 +57,9 @@ namespace FluentMigrator.Runner.Generators.Hana
 
             if (primaryKeyName.Length > HanaObjectNameMaxLength)
                 throw new DatabaseOperationNotSupportedException(
-                    string.Format(
-                        "Hana does not support length of primary key name greater than {0} characters. Reduce length of primary key name. ({1})",
-                        HanaObjectNameMaxLength, primaryKeyName));
+                    $"Hana does not support length of primary key name greater than {HanaObjectNameMaxLength} characters. Reduce length of primary key name. ({primaryKeyName})");
 
-            var result = string.Format("CONSTRAINT {0} ", Quoter.QuoteConstraintName(primaryKeyName));
+            var result = $"CONSTRAINT {Quoter.QuoteConstraintName(primaryKeyName)} ";
 
             return result;
         }
@@ -70,7 +68,7 @@ namespace FluentMigrator.Runner.Generators.Hana
         {
             var keyColumns = string.Join(", ", primaryKeyColumns.Select(x => Quoter.QuoteColumnName(x.Name)).ToArray());
 
-            return string.Format(", PRIMARY KEY ({0})", keyColumns);
+            return $", PRIMARY KEY ({keyColumns})";
         }
     }
 }
diff --git a/src/FluentMigrator.Runner.Hana/Generators/Hana/HanaDescriptionGenerator.cs b/src/FluentMigrator.Runner.Hana/Generators/Hana/HanaDescriptionGenerator.cs
index 9132de6a..ec167bba 100644
--- a/src/FluentMigrator.Runner.Hana/Generators/Hana/HanaDescriptionGenerator.cs
+++ b/src/FluentMigrator.Runner.Hana/Generators/Hana/HanaDescriptionGenerator.cs
@@ -15,7 +15,7 @@ namespace FluentMigrator.Runner.Generators.Hana
         {
             return string.IsNullOrEmpty(schemaName)
                ? tableName
-               : string.Format("{0}.{1}", schemaName, tableName);
+               : $"{schemaName}.{tableName}";
         }
 
         protected override string GenerateTableDescription(
diff --git a/src/FluentMigrator.Runner.Hana/Generators/Hana/HanaGenerator.cs b/src/FluentMigrator.Runner.Hana/Generators/Hana/HanaGenerator.cs
index 73dd8cfa..0bac8ffa 100644
--- a/src/FluentMigrator.Runner.Hana/Generators/Hana/HanaGenerator.cs
+++ b/src/FluentMigrator.Runner.Hana/Generators/Hana/HanaGenerator.cs
@@ -57,12 +57,12 @@ namespace FluentMigrator.Runner.Generators.Hana
         }
         public override string Generate(DeleteTableExpression expression)
         {
-            return string.Format("{0};", base.Generate(expression));
+            return $"{base.Generate(expression)};";
         }
 
         public override string Generate(RenameTableExpression expression)
         {
-            return string.Format("{0};", base.Generate(expression));
+            return $"{base.Generate(expression)};";
         }
 
         public override string Generate(CreateSequenceExpression expression)
@@ -136,23 +136,23 @@ namespace FluentMigrator.Runner.Generators.Hana
 
         public override string Generate(DeleteDataExpression expression)
         {
-            return string.Format("{0};", base.Generate(expression));
+            return $"{base.Generate(expression)};";
         }
 
         public override string Generate(InsertDataExpression expression)
         {
-            return string.Format("{0};", base.Generate(expression));
+            return $"{base.Generate(expression)};";
         }
 
         private string InnerGenerate(CreateTableExpression expression)
         {
             var tableName = Quoter.QuoteTableName(expression.TableName);
-            return string.Format("CREATE COLUMN TABLE {0} ({1});", tableName, Column.Generate(expression.Columns, tableName));
+            return $"CREATE COLUMN TABLE {tableName} ({Column.Generate(expression.Columns, tableName)});";
         }
 
         public override string Generate(UpdateDataExpression expression)
         {
-            return string.Format("{0};", base.Generate(expression));
+            return $"{base.Generate(expression)};";
         }
 
         public override string Generate(CreateTableExpression expression)
@@ -181,9 +181,7 @@ namespace FluentMigrator.Runner.Generators.Hana
         {
             var descriptionStatement = DescriptionGenerator.GenerateDescriptionStatement(expression);
 
-            return string.Format("{0};",
-                string.IsNullOrEmpty(descriptionStatement)
-                ? base.Generate(expression) : descriptionStatement);
+            return $"{(string.IsNullOrEmpty(descriptionStatement) ? base.Generate(expression) : descriptionStatement)};";
         }
 
         public override string Generate(CreateColumnExpression expression)
@@ -191,7 +189,7 @@ namespace FluentMigrator.Runner.Generators.Hana
             var descriptionStatement = DescriptionGenerator.GenerateDescriptionStatement(expression);
 
             if (string.IsNullOrEmpty(descriptionStatement))
-                return string.Format("{0};",base.Generate(expression) );
+                return $"{base.Generate(expression)};";
 
             var wrappedCreateColumnStatement = base.Generate(expression);
 
@@ -206,7 +204,7 @@ namespace FluentMigrator.Runner.Generators.Hana
             var descriptionStatement = DescriptionGenerator.GenerateDescriptionStatement(expression);
 
             if (string.IsNullOrEmpty(descriptionStatement))
-                return string.Format("{0};", base.Generate(expression));
+                return $"{base.Generate(expression)};";
 
             var wrappedAlterColumnStatement = base.Generate(expression);
 
@@ -218,31 +216,31 @@ namespace FluentMigrator.Runner.Generators.Hana
 
         public override string Generate(DeleteColumnExpression expression)
         {
-            return string.Format("{0};", base.Generate(expression));
+            return $"{base.Generate(expression)};";
         }
 
         public override string Generate(CreateForeignKeyExpression expression)
         {
-            return string.Format("{0};", base.Generate(expression));
+            return $"{base.Generate(expression)};";
         }
         public override string Generate(CreateConstraintExpression expression)
         {
-            return string.Format("{0};", base.Generate(expression));
+            return $"{base.Generate(expression)};";
         }
 
         public override string Generate(DeleteForeignKeyExpression expression)
         {
-            return string.Format("{0};", base.Generate(expression));
+            return $"{base.Generate(expression)};";
         }
 
         public override string Generate(DeleteConstraintExpression expression)
         {
             if (expression.Constraint.IsPrimaryKeyConstraint)
             {
-                return string.Format("ALTER TABLE {0} DROP PRIMARY KEY;", Quoter.QuoteTableName(expression.Constraint.TableName));
+                return $"ALTER TABLE {Quoter.QuoteTableName(expression.Constraint.TableName)} DROP PRIMARY KEY;";
             }
 
-            return string.Format("{0};", base.Generate(expression));
+            return $"{base.Generate(expression)};";
         }
 
         public override string Generate(AlterDefaultConstraintExpression expression)
@@ -257,12 +255,12 @@ namespace FluentMigrator.Runner.Generators.Hana
 
         public override string Generate(CreateIndexExpression expression)
         {
-            return string.Format("{0};", base.Generate(expression));
+            return $"{base.Generate(expression)};";
         }
 
         public override string Generate(DeleteIndexExpression expression)
         {
-            return string.Format("{0};", base.Generate(expression));
+            return $"{base.Generate(expression)};";
         }
 
         public override string Generate(DeleteSequenceExpression expression)
@@ -275,14 +273,14 @@ namespace FluentMigrator.Runner.Generators.Hana
 
         public override string Generate(RenameColumnExpression expression)
         {
-            return string.Format("{0};", base.Generate(expression));
+            return $"{base.Generate(expression)};";
         }
 
         private static string WrapInBlock(string sql)
         {
             return string.IsNullOrEmpty(sql)
                 ? string.Empty
-                : string.Format("BEGIN {0} END;", sql);
+                : $"BEGIN {sql} END;";
         }
     }
 }
diff --git a/src/FluentMigrator.Runner.Jet/Processors/Jet/JetProcessor.cs b/src/FluentMigrator.Runner.Jet/Processors/Jet/JetProcessor.cs
index a1dabc83..4c0b88f0 100644
--- a/src/FluentMigrator.Runner.Jet/Processors/Jet/JetProcessor.cs
+++ b/src/FluentMigrator.Runner.Jet/Processors/Jet/JetProcessor.cs
@@ -126,7 +126,7 @@ namespace FluentMigrator.Runner.Processors.Jet
                 }
                 catch (OleDbException ex)
                 {
-                    throw new Exception(string.Format("Exception while processing \"{0}\"", sql), ex);
+                    throw new Exception($"Exception while processing \"{sql}\"", ex);
                 }
             }
         }
diff --git a/src/FluentMigrator.Runner.MySql/Generators/MySql/MySql4Generator.cs b/src/FluentMigrator.Runner.MySql/Generators/MySql/MySql4Generator.cs
index d5d889ae..5608c25a 100644
--- a/src/FluentMigrator.Runner.MySql/Generators/MySql/MySql4Generator.cs
+++ b/src/FluentMigrator.Runner.MySql/Generators/MySql/MySql4Generator.cs
@@ -77,12 +77,9 @@ namespace FluentMigrator.Runner.Generators.MySql
 
             string tableDescription = string.IsNullOrEmpty(expression.TableDescription)
                 ? string.Empty
-                : string.Format(" COMMENT {0}", Quoter.QuoteValue(expression.TableDescription));
+                : $" COMMENT {Quoter.QuoteValue(expression.TableDescription)}";
 
-            return string.Format("CREATE TABLE {0} ({1}){2} ENGINE = INNODB",
-                quotedTableName,
-                Column.Generate(expression.Columns, quotedTableName),
-                tableDescription);
+            return $"CREATE TABLE {quotedTableName} ({Column.Generate(expression.Columns, quotedTableName)}){tableDescription} ENGINE = INNODB";
         }
 
         public override string Generate(AlterTableExpression expression)
@@ -90,28 +87,24 @@ namespace FluentMigrator.Runner.Generators.MySql
             if (string.IsNullOrEmpty(expression.TableDescription))
                 return base.Generate(expression);
 
-            return string.Format("ALTER TABLE {0} COMMENT {1}", Quoter.QuoteTableName(expression.TableName), Quoter.QuoteValue(expression.TableDescription));
+            return $"ALTER TABLE {Quoter.QuoteTableName(expression.TableName)} COMMENT {Quoter.QuoteValue(expression.TableDescription)}";
         }
 
         public override string Generate(DeleteIndexExpression expression)
         {
-            return string.Format("DROP INDEX {0} ON {1}", Quoter.QuoteIndexName(expression.Index.Name), Quoter.QuoteTableName(expression.Index.TableName));
+            return $"DROP INDEX {Quoter.QuoteIndexName(expression.Index.Name)} ON {Quoter.QuoteTableName(expression.Index.TableName)}";
         }
 
         public override string Generate(RenameColumnExpression expression)
         {
-            return string.Format("ALTER TABLE {0} CHANGE {1} {2} ", Quoter.QuoteTableName(expression.TableName), Quoter.QuoteColumnName(expression.OldName), Quoter.QuoteColumnName(expression.NewName));
+            return $"ALTER TABLE {Quoter.QuoteTableName(expression.TableName)} CHANGE {Quoter.QuoteColumnName(expression.OldName)} {Quoter.QuoteColumnName(expression.NewName)} ";
         }
 
         public override string Generate(AlterDefaultConstraintExpression expression)
         {
             // Available since MySQL 4.0.22 (2005)
             var defaultValue = ((MySqlColumn)Column).FormatDefaultValue(expression.DefaultValue);
-            return string.Format(
-                "ALTER TABLE {0} ALTER {1} SET {2}",
-                Quoter.QuoteTableName(expression.TableName),
-                Quoter.QuoteColumnName(expression.ColumnName),
-                defaultValue);
+            return $"ALTER TABLE {Quoter.QuoteTableName(expression.TableName)} ALTER {Quoter.QuoteColumnName(expression.ColumnName)} SET {defaultValue}";
         }
 
         public override string Generate(CreateSequenceExpression expression)
@@ -141,10 +134,7 @@ namespace FluentMigrator.Runner.Generators.MySql
         public override string Generate(DeleteDefaultConstraintExpression expression)
         {
             // Available since MySQL 4.0.22 (2005)
-            return string.Format(
-                "ALTER TABLE {0} ALTER {1} DROP DEFAULT",
-                Quoter.QuoteTableName(expression.TableName),
-                Quoter.QuoteColumnName(expression.ColumnName));
+            return $"ALTER TABLE {Quoter.QuoteTableName(expression.TableName)} ALTER {Quoter.QuoteColumnName(expression.ColumnName)} DROP DEFAULT";
         }
     }
 }
diff --git a/src/FluentMigrator.Runner.MySql/Generators/MySql/MySqlColumn.cs b/src/FluentMigrator.Runner.MySql/Generators/MySql/MySqlColumn.cs
index 3d663071..453ac609 100644
--- a/src/FluentMigrator.Runner.MySql/Generators/MySql/MySqlColumn.cs
+++ b/src/FluentMigrator.Runner.MySql/Generators/MySql/MySqlColumn.cs
@@ -37,7 +37,7 @@ namespace FluentMigrator.Runner.Generators.MySql
         {
             return string.IsNullOrEmpty(column.ColumnDescription)
                 ? string.Empty
-                : string.Format("COMMENT {0}", Quoter.QuoteValue(column.ColumnDescription));
+                : $"COMMENT {Quoter.QuoteValue(column.ColumnDescription)}";
         }
 
         /// <inheritdoc />
diff --git a/src/FluentMigrator.Runner.MySql/Processors/MySql/MySqlProcessor.cs b/src/FluentMigrator.Runner.MySql/Processors/MySql/MySqlProcessor.cs
index c538636e..1efe8f60 100644
--- a/src/FluentMigrator.Runner.MySql/Processors/MySql/MySqlProcessor.cs
+++ b/src/FluentMigrator.Runner.MySql/Processors/MySql/MySqlProcessor.cs
@@ -98,7 +98,7 @@ namespace FluentMigrator.Runner.Processors.MySql
 
         public override bool DefaultValueExists(string schemaName, string tableName, string columnName, object defaultValue)
         {
-            var defaultValueAsString = string.Format("%{0}%", FormatHelper.FormatSqlEscape(defaultValue.ToString()));
+            var defaultValueAsString = $"%{FormatHelper.FormatSqlEscape(defaultValue.ToString())}%";
             return Exists("SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = SCHEMA() AND TABLE_NAME = '{0}' AND COLUMN_NAME = '{1}' AND COLUMN_DEFAULT LIKE '{2}'",
                FormatHelper.FormatSqlEscape(tableName), FormatHelper.FormatSqlEscape(columnName), defaultValueAsString);
         }
diff --git a/src/FluentMigrator.Runner.Oracle/Generators/Oracle/OracleColumn.cs b/src/FluentMigrator.Runner.Oracle/Generators/Oracle/OracleColumn.cs
index 7fcd4e7a..45909237 100644
--- a/src/FluentMigrator.Runner.Oracle/Generators/Oracle/OracleColumn.cs
+++ b/src/FluentMigrator.Runner.Oracle/Generators/Oracle/OracleColumn.cs
@@ -91,11 +91,9 @@ namespace FluentMigrator.Runner.Generators.Oracle
 
             if (primaryKeyName.Length > OracleObjectNameMaxLength)
                 throw new DatabaseOperationNotSupportedException(
-                    string.Format(
-                        "Oracle does not support length of primary key name greater than {0} characters. Reduce length of primary key name. ({1})",
-                        OracleObjectNameMaxLength, primaryKeyName));
+                    $"Oracle does not support length of primary key name greater than {OracleObjectNameMaxLength} characters. Reduce length of primary key name. ({primaryKeyName})");
 
-            var result = string.Format("CONSTRAINT {0} ", Quoter.QuoteConstraintName(primaryKeyName));
+            var result = $"CONSTRAINT {Quoter.QuoteConstraintName(primaryKeyName)} ";
             return result;
         }
     }
diff --git a/src/FluentMigrator.Runner.Oracle/Generators/Oracle/OracleDescriptionGenerator.cs b/src/FluentMigrator.Runner.Oracle/Generators/Oracle/OracleDescriptionGenerator.cs
index 1653dc0f..36289c01 100644
--- a/src/FluentMigrator.Runner.Oracle/Generators/Oracle/OracleDescriptionGenerator.cs
+++ b/src/FluentMigrator.Runner.Oracle/Generators/Oracle/OracleDescriptionGenerator.cs
@@ -33,7 +33,7 @@ namespace FluentMigrator.Runner.Generators.Oracle
         {
             return string.IsNullOrEmpty(schemaName)
                ? tableName
-               : string.Format("{0}.{1}", schemaName, tableName);
+               : $"{schemaName}.{tableName}";
         }
 
         protected override string GenerateTableDescription(
diff --git a/src/FluentMigrator.Runner.Oracle/Generators/Oracle/OracleGenerator.cs b/src/FluentMigrator.Runner.Oracle/Generators/Oracle/OracleGenerator.cs
index 24a3cc2f..5055718c 100644
--- a/src/FluentMigrator.Runner.Oracle/Generators/Oracle/OracleGenerator.cs
+++ b/src/FluentMigrator.Runner.Oracle/Generators/Oracle/OracleGenerator.cs
@@ -178,7 +178,7 @@ namespace FluentMigrator.Runner.Generators.Oracle
                 return string.Empty;
             }
 
-            return string.Format("EXECUTE IMMEDIATE '{0}';", FormatHelper.FormatSqlEscape(statement));
+            return $"EXECUTE IMMEDIATE '{FormatHelper.FormatSqlEscape(statement)}';";
         }
 
         private static string WrapInBlock(string sql)
@@ -188,7 +188,7 @@ namespace FluentMigrator.Runner.Generators.Oracle
                 return string.Empty;
             }
 
-            return string.Format("BEGIN {0} END;", sql);
+            return $"BEGIN {sql} END;";
         }
 
         private string InnerGenerate(CreateTableExpression expression)
@@ -196,7 +196,7 @@ namespace FluentMigrator.Runner.Generators.Oracle
             var tableName = Quoter.QuoteTableName(expression.TableName);
             var schemaName = Quoter.QuoteSchemaName(expression.SchemaName);
 
-            return string.Format("CREATE TABLE {0} ({1})",ExpandTableName(schemaName,tableName), Column.Generate(expression.Columns, tableName));
+            return $"CREATE TABLE {ExpandTableName(schemaName, tableName)} ({Column.Generate(expression.Columns, tableName)})";
         }
 
         protected override StringBuilder AppendSqlStatementEndToken(StringBuilder stringBuilder)
@@ -340,7 +340,7 @@ namespace FluentMigrator.Runner.Generators.Oracle
             var quotedSchema = Quoter.QuoteSchemaName(expression.Index.SchemaName);
             var quotedIndex = Quoter.QuoteIndexName(expression.Index.Name);
             var indexName = string.IsNullOrEmpty(quotedSchema) ? quotedIndex : $"{quotedSchema}.{quotedIndex}";
-            return string.Format("DROP INDEX {0}", indexName);
+            return $"DROP INDEX {indexName}";
         }
     }
 }
diff --git a/src/FluentMigrator.Runner.Postgres/Generators/Postgres/Postgres10_0Column.cs b/src/FluentMigrator.Runner.Postgres/Generators/Postgres/Postgres10_0Column.cs
index b955ae83..ae7d2b8e 100644
--- a/src/FluentMigrator.Runner.Postgres/Generators/Postgres/Postgres10_0Column.cs
+++ b/src/FluentMigrator.Runner.Postgres/Generators/Postgres/Postgres10_0Column.cs
@@ -40,10 +40,10 @@ namespace FluentMigrator.Runner.Generators.Postgres
             switch (column.GetAdditionalFeature(PostgresExtensions.IdentityModificationType, PostgresIdentityModificationType.Add))
             {
                 case PostgresIdentityModificationType.Add:
-                    return string.Format("ADD {0} AS IDENTITY", FormatIdentity(column));
+                    return $"ADD {FormatIdentity(column)} AS IDENTITY";
 
                 case PostgresIdentityModificationType.Set:
-                    return string.Format("SET {0}", FormatIdentity(column));
+                    return $"SET {FormatIdentity(column)}";
 
                 case PostgresIdentityModificationType.Drop:
                     return "DROP IDENTITY";
diff --git a/src/FluentMigrator.Runner.Postgres/Generators/Postgres/PostgresColumn.cs b/src/FluentMigrator.Runner.Postgres/Generators/Postgres/PostgresColumn.cs
index 3470982d..d20e9913 100644
--- a/src/FluentMigrator.Runner.Postgres/Generators/Postgres/PostgresColumn.cs
+++ b/src/FluentMigrator.Runner.Postgres/Generators/Postgres/PostgresColumn.cs
@@ -52,7 +52,7 @@ namespace FluentMigrator.Runner.Generators.Postgres
         {
             string formatDefaultValue = FormatDefaultValue(new ColumnDefinition { Name = column, DefaultValue = defaultValue });
 
-            return string.Format("SET {0}", formatDefaultValue);
+            return $"SET {formatDefaultValue}";
         }
 
         private string FormatAlterNullable(ColumnDefinition column)
@@ -68,7 +68,7 @@ namespace FluentMigrator.Runner.Generators.Postgres
 
         private string FormatAlterType(ColumnDefinition column)
         {
-            return string.Format("TYPE {0}", GetColumnType(column));
+            return $"TYPE {GetColumnType(column)}";
         }
 
         protected IList<Func<ColumnDefinition, string>> AlterClauseOrder { get; set; }
@@ -80,7 +80,7 @@ namespace FluentMigrator.Runner.Generators.Postgres
             {
                 string columnClause = action(column);
                 if (!string.IsNullOrEmpty(columnClause))
-                    clauses.Add(string.Format("ALTER {0} {1}", Quoter.QuoteColumnName(column.Name), columnClause));
+                    clauses.Add($"ALTER {Quoter.QuoteColumnName(column.Name)} {columnClause}");
             }
 
             return string.Join(", ", clauses.ToArray());
@@ -121,9 +121,9 @@ namespace FluentMigrator.Runner.Generators.Postgres
             }
 
             if (string.IsNullOrEmpty(pkName))
-                return string.Format(", PRIMARY KEY ({0})", cols);
+                return $", PRIMARY KEY ({cols})";
 
-            return string.Format(", {0}PRIMARY KEY ({1})", pkName, cols);
+            return $", {pkName}PRIMARY KEY ({cols})";
         }
 
         protected void FormatTypeValidator(ColumnDefinition column)
diff --git a/src/FluentMigrator.Runner.Postgres/Generators/Postgres/PostgresGenerator.cs b/src/FluentMigrator.Runner.Postgres/Generators/Postgres/PostgresGenerator.cs
index 40bc5027..4ba32002 100644
--- a/src/FluentMigrator.Runner.Postgres/Generators/Postgres/PostgresGenerator.cs
+++ b/src/FluentMigrator.Runner.Postgres/Generators/Postgres/PostgresGenerator.cs
@@ -87,12 +87,12 @@ namespace FluentMigrator.Runner.Generators.Postgres
 
         public override string Generate(CreateSchemaExpression expression)
         {
-            return string.Format("CREATE SCHEMA {0};", Quoter.QuoteSchemaName(expression.SchemaName));
+            return $"CREATE SCHEMA {Quoter.QuoteSchemaName(expression.SchemaName)};";
         }
 
         public override string Generate(DeleteSchemaExpression expression)
         {
-            return string.Format("DROP SCHEMA {0};", Quoter.QuoteSchemaName(expression.SchemaName));
+            return $"DROP SCHEMA {Quoter.QuoteSchemaName(expression.SchemaName)};";
         }
 
         public override string Generate(CreateTableExpression expression)
@@ -178,9 +178,7 @@ namespace FluentMigrator.Runner.Generators.Postgres
 
         public override string Generate(DeleteForeignKeyExpression expression)
         {
-            return string.Format("ALTER TABLE {0} DROP CONSTRAINT {1};",
-                Quoter.QuoteTableName(expression.ForeignKey.ForeignTable, expression.ForeignKey.ForeignTableSchema),
-                Quoter.Quote(expression.ForeignKey.Name));
+            return $"ALTER TABLE {Quoter.QuoteTableName(expression.ForeignKey.ForeignTable, expression.ForeignKey.ForeignTableSchema)} DROP CONSTRAINT {Quoter.Quote(expression.ForeignKey.Name)};";
         }
 
 
@@ -400,12 +398,12 @@ namespace FluentMigrator.Runner.Generators.Postgres
             var quotedSchema = Quoter.QuoteSchemaName(expression.Index.SchemaName);
             var quotedIndex = Quoter.QuoteIndexName(expression.Index.Name);
             var indexName = string.IsNullOrEmpty(quotedSchema) ? quotedIndex : $"{quotedSchema}.{quotedIndex}";
-            return string.Format("DROP INDEX {0};", indexName);
+            return $"DROP INDEX {indexName};";
         }
 
         public override string Generate(RenameTableExpression expression)
         {
-            return string.Format("ALTER TABLE {0} RENAME TO {1};", Quoter.QuoteTableName(expression.OldName, expression.SchemaName), Quoter.Quote(expression.NewName));
+            return $"ALTER TABLE {Quoter.QuoteTableName(expression.OldName, expression.SchemaName)} RENAME TO {Quoter.Quote(expression.NewName)};";
         }
 
         public override string Generate(RenameColumnExpression expression)
@@ -469,7 +467,7 @@ namespace FluentMigrator.Runner.Generators.Postgres
                         }
 
                         var op = item.Value == null || item.Value == DBNull.Value ? "IS" : "=";
-                        where += string.Format("{0} {1} {2}", Quoter.QuoteColumnName(item.Key), op, Quoter.QuoteValue(item.Value));
+                        where += $"{Quoter.QuoteColumnName(item.Key)} {op} {Quoter.QuoteValue(item.Value)}";
                         i++;
                     }
 
@@ -487,7 +485,7 @@ namespace FluentMigrator.Runner.Generators.Postgres
 
             foreach (var item in expression.Set)
             {
-                updateItems.Add(string.Format("{0} = {1}", Quoter.QuoteColumnName(item.Key), Quoter.QuoteValue(item.Value)));
+                updateItems.Add($"{Quoter.QuoteColumnName(item.Key)} = {Quoter.QuoteValue(item.Value)}");
             }
 
             if (expression.IsAllRows)
@@ -499,31 +497,26 @@ namespace FluentMigrator.Runner.Generators.Postgres
                 foreach (var item in expression.Where)
                 {
                     var op = item.Value == null || item.Value == DBNull.Value ? "IS" : "=";
-                    whereClauses.Add(string.Format("{0} {1} {2}", Quoter.QuoteColumnName(item.Key),
-                                                   op, Quoter.QuoteValue(item.Value)));
+                    whereClauses.Add($"{Quoter.QuoteColumnName(item.Key)} {op} {Quoter.QuoteValue(item.Value)}");
                 }
             }
 
-            return string.Format(
-                "UPDATE {0} SET {1} WHERE {2};",
-                Quoter.QuoteTableName(expression.TableName, expression.SchemaName),
-                string.Join(", ", updateItems.ToArray()),
-                string.Join(" AND ", whereClauses.ToArray()));
+            return $"UPDATE {Quoter.QuoteTableName(expression.TableName, expression.SchemaName)} SET {string.Join(", ", updateItems.ToArray())} WHERE {string.Join(" AND ", whereClauses.ToArray())};";
         }
 
         public override string Generate(AlterSchemaExpression expression)
         {
-            return string.Format("ALTER TABLE {0} SET SCHEMA {1};", Quoter.QuoteTableName(expression.TableName, expression.SourceSchemaName), Quoter.QuoteSchemaName(expression.DestinationSchemaName));
+            return $"ALTER TABLE {Quoter.QuoteTableName(expression.TableName, expression.SourceSchemaName)} SET SCHEMA {Quoter.QuoteSchemaName(expression.DestinationSchemaName)};";
         }
 
         public override string Generate(DeleteDefaultConstraintExpression expression)
         {
-            return string.Format("ALTER TABLE {0} ALTER {1} DROP DEFAULT;", Quoter.QuoteTableName(expression.TableName, expression.SchemaName), Quoter.Quote(expression.ColumnName));
+            return $"ALTER TABLE {Quoter.QuoteTableName(expression.TableName, expression.SchemaName)} ALTER {Quoter.Quote(expression.ColumnName)} DROP DEFAULT;";
         }
 
         public override string Generate(DeleteConstraintExpression expression)
         {
-            return string.Format("ALTER TABLE {0} DROP CONSTRAINT {1};", Quoter.QuoteTableName(expression.Constraint.TableName, expression.Constraint.SchemaName), Quoter.Quote(expression.Constraint.ConstraintName));
+            return $"ALTER TABLE {Quoter.QuoteTableName(expression.Constraint.TableName, expression.Constraint.SchemaName)} DROP CONSTRAINT {Quoter.Quote(expression.Constraint.ConstraintName)};";
         }
 
         public override string Generate(CreateConstraintExpression expression)
@@ -537,12 +530,7 @@ namespace FluentMigrator.Runner.Generators.Postgres
                 columns[i] = Quoter.QuoteColumnName(expression.Constraint.Columns.ElementAt(i));
             }
 
-            return string.Format(
-                "ALTER TABLE {0} ADD CONSTRAINT {1} {2} ({3});",
-                Quoter.QuoteTableName(expression.Constraint.TableName, expression.Constraint.SchemaName),
-                Quoter.QuoteConstraintName(expression.Constraint.ConstraintName),
-                constraintType,
-                string.Join(", ", columns));
+            return $"ALTER TABLE {Quoter.QuoteTableName(expression.Constraint.TableName, expression.Constraint.SchemaName)} ADD CONSTRAINT {Quoter.QuoteConstraintName(expression.Constraint.ConstraintName)} {constraintType} ({string.Join(", ", columns)});";
         }
 
         protected string GetColumnList(IEnumerable<string> columns)
@@ -610,12 +598,12 @@ namespace FluentMigrator.Runner.Generators.Postgres
                 result.Append(" CYCLE");
             }
 
-            return string.Format("{0};", result.ToString());
+            return $"{result.ToString()};";
         }
 
         public override string Generate(DeleteSequenceExpression expression)
         {
-            return string.Format("{0};", base.Generate(expression));
+            return $"{base.Generate(expression)};";
         }
     }
 }
diff --git a/src/FluentMigrator.Runner.Postgres/Processors/Postgres/PostgresProcessor.cs b/src/FluentMigrator.Runner.Postgres/Processors/Postgres/PostgresProcessor.cs
index 28fc5c04..2e305312 100644
--- a/src/FluentMigrator.Runner.Postgres/Processors/Postgres/PostgresProcessor.cs
+++ b/src/FluentMigrator.Runner.Postgres/Processors/Postgres/PostgresProcessor.cs
@@ -112,7 +112,7 @@ namespace FluentMigrator.Runner.Processors.Postgres
 
         public override bool DefaultValueExists(string schemaName, string tableName, string columnName, object defaultValue)
         {
-            string defaultValueAsString = string.Format("%{0}%", FormatHelper.FormatSqlEscape(defaultValue.ToString()));
+            string defaultValueAsString = $"%{FormatHelper.FormatSqlEscape(defaultValue.ToString())}%";
             return Exists("select * from information_schema.columns where table_schema = '{0}' and table_name = '{1}' and column_name = '{2}' and column_default like '{3}'", FormatToSafeSchemaName(schemaName), FormatToSafeName(tableName), FormatToSafeName(columnName), defaultValueAsString);
         }
 
diff --git a/src/FluentMigrator.Runner.Redshift/Generators/Redshift/RedshiftColumn.cs b/src/FluentMigrator.Runner.Redshift/Generators/Redshift/RedshiftColumn.cs
index b19d1ad9..50f8188a 100644
--- a/src/FluentMigrator.Runner.Redshift/Generators/Redshift/RedshiftColumn.cs
+++ b/src/FluentMigrator.Runner.Redshift/Generators/Redshift/RedshiftColumn.cs
@@ -36,7 +36,7 @@ namespace FluentMigrator.Runner.Generators.Redshift
         {
             string formatDefaultValue = FormatDefaultValue(new ColumnDefinition { Name = column, DefaultValue = defaultValue});
 
-            return string.Format("SET {0}", formatDefaultValue);
+            return $"SET {formatDefaultValue}";
         }
 
         private string FormatAlterNullable(ColumnDefinition column)
@@ -52,7 +52,7 @@ namespace FluentMigrator.Runner.Generators.Redshift
 
         private string FormatAlterType(ColumnDefinition column)
         {
-            return string.Format("TYPE {0}", GetColumnType(column));
+            return $"TYPE {GetColumnType(column)}";
         }
 
         protected IList<Func<ColumnDefinition, string>> AlterClauseOrder { get; set; }
@@ -64,7 +64,7 @@ namespace FluentMigrator.Runner.Generators.Redshift
             {
                 string columnClause = action(column);
                 if (!string.IsNullOrEmpty(columnClause))
-                    clauses.Add(string.Format("ALTER {0} {1}", Quoter.QuoteColumnName(column.Name), columnClause));
+                    clauses.Add($"ALTER {Quoter.QuoteColumnName(column.Name)} {columnClause}");
             }
 
             return string.Join(", ", clauses.ToArray());
@@ -85,9 +85,9 @@ namespace FluentMigrator.Runner.Generators.Redshift
             var cols = string.Join(",", pkColDef.Select(c => Quoter.QuoteColumnName(c.Name)));
 
             if (string.IsNullOrEmpty(pkName))
-                return string.Format(", PRIMARY KEY ({0})", cols);
+                return $", PRIMARY KEY ({cols})";
 
-            return string.Format(", {0}PRIMARY KEY ({1})", pkName, cols);
+            return $", {pkName}PRIMARY KEY ({cols})";
         }
 
         public string GetColumnType(ColumnDefinition column)
diff --git a/src/FluentMigrator.Runner.Redshift/Generators/Redshift/RedshiftDescriptionGenerator.cs b/src/FluentMigrator.Runner.Redshift/Generators/Redshift/RedshiftDescriptionGenerator.cs
index 2d91a119..d08e6732 100644
--- a/src/FluentMigrator.Runner.Redshift/Generators/Redshift/RedshiftDescriptionGenerator.cs
+++ b/src/FluentMigrator.Runner.Redshift/Generators/Redshift/RedshiftDescriptionGenerator.cs
@@ -49,7 +49,7 @@ namespace FluentMigrator.Runner.Generators.Redshift
         {
             return string.IsNullOrEmpty(schemaName)
                ? Quoter.QuoteTableName(tableName)
-               : string.Format("{0}.{1}", Quoter.QuoteSchemaName(schemaName), Quoter.QuoteTableName(tableName));
+               : $"{Quoter.QuoteSchemaName(schemaName)}.{Quoter.QuoteTableName(tableName)}";
         }
 
         protected override string GenerateTableDescription(
diff --git a/src/FluentMigrator.Runner.Redshift/Generators/Redshift/RedshiftGenerator.cs b/src/FluentMigrator.Runner.Redshift/Generators/Redshift/RedshiftGenerator.cs
index 3a659e01..7e722ffc 100644
--- a/src/FluentMigrator.Runner.Redshift/Generators/Redshift/RedshiftGenerator.cs
+++ b/src/FluentMigrator.Runner.Redshift/Generators/Redshift/RedshiftGenerator.cs
@@ -64,12 +64,12 @@ namespace FluentMigrator.Runner.Generators.Redshift
 
         public override string Generate(CreateSchemaExpression expression)
         {
-            return string.Format("CREATE SCHEMA {0};", Quoter.QuoteSchemaName(expression.SchemaName));
+            return $"CREATE SCHEMA {Quoter.QuoteSchemaName(expression.SchemaName)};";
         }
 
         public override string Generate(DeleteSchemaExpression expression)
         {
-            return string.Format("DROP SCHEMA {0};", Quoter.QuoteSchemaName(expression.SchemaName));
+            return $"DROP SCHEMA {Quoter.QuoteSchemaName(expression.SchemaName)};";
         }
 
         public override string Generate(CreateTableExpression expression)
@@ -117,7 +117,7 @@ namespace FluentMigrator.Runner.Generators.Redshift
 
         public override string Generate(DeleteTableExpression expression)
         {
-            return string.Format("DROP TABLE {0};", Quoter.QuoteTableName(expression.TableName, expression.SchemaName));
+            return $"DROP TABLE {Quoter.QuoteTableName(expression.TableName, expression.SchemaName)};";
         }
 
         public override string Generate(DeleteColumnExpression expression)
@@ -152,10 +152,7 @@ namespace FluentMigrator.Runner.Generators.Redshift
 
         public override string Generate(DeleteForeignKeyExpression expression)
         {
-            return string.Format(
-                "ALTER TABLE {0} DROP CONSTRAINT {1};",
-                Quoter.QuoteTableName(expression.ForeignKey.ForeignTable, expression.ForeignKey.ForeignTableSchema),
-                Quoter.Quote(expression.ForeignKey.Name));
+            return $"ALTER TABLE {Quoter.QuoteTableName(expression.ForeignKey.ForeignTable, expression.ForeignKey.ForeignTableSchema)} DROP CONSTRAINT {Quoter.Quote(expression.ForeignKey.Name)};";
         }
 
         public override string Generate(CreateIndexExpression expression)
@@ -171,19 +168,12 @@ namespace FluentMigrator.Runner.Generators.Redshift
 
         public override string Generate(RenameTableExpression expression)
         {
-            return string.Format(
-                "ALTER TABLE {0} RENAME TO {1};",
-                Quoter.QuoteTableName(expression.OldName, expression.SchemaName),
-                Quoter.Quote(expression.NewName));
+            return $"ALTER TABLE {Quoter.QuoteTableName(expression.OldName, expression.SchemaName)} RENAME TO {Quoter.Quote(expression.NewName)};";
         }
 
         public override string Generate(RenameColumnExpression expression)
         {
-            return string.Format(
-                "ALTER TABLE {0} RENAME COLUMN {1} TO {2};",
-                Quoter.QuoteTableName(expression.TableName, expression.SchemaName),
-                Quoter.QuoteColumnName(expression.OldName),
-                Quoter.QuoteColumnName(expression.NewName));
+            return $"ALTER TABLE {Quoter.QuoteTableName(expression.TableName, expression.SchemaName)} RENAME COLUMN {Quoter.QuoteColumnName(expression.OldName)} TO {Quoter.QuoteColumnName(expression.NewName)};";
         }
 
         public override string Generate(InsertDataExpression expression)
@@ -238,7 +228,7 @@ namespace FluentMigrator.Runner.Generators.Redshift
                         }
 
                         var op = item.Value == null || item.Value == DBNull.Value ? "IS" : "=";
-                        where += string.Format("{0} {1} {2}", Quoter.QuoteColumnName(item.Key), op, Quoter.QuoteValue(item.Value));
+                        where += $"{Quoter.QuoteColumnName(item.Key)} {op} {Quoter.QuoteValue(item.Value)}";
                         i++;
                     }
 
@@ -256,7 +246,7 @@ namespace FluentMigrator.Runner.Generators.Redshift
 
             foreach (var item in expression.Set)
             {
-                updateItems.Add(string.Format("{0} = {1}", Quoter.QuoteColumnName(item.Key), Quoter.QuoteValue(item.Value)));
+                updateItems.Add($"{Quoter.QuoteColumnName(item.Key)} = {Quoter.QuoteValue(item.Value)}");
             }
 
             if (expression.IsAllRows)
@@ -268,37 +258,26 @@ namespace FluentMigrator.Runner.Generators.Redshift
                 foreach (var item in expression.Where)
                 {
                     var op = item.Value == null || item.Value == DBNull.Value ? "IS" : "=";
-                    whereClauses.Add(string.Format("{0} {1} {2}", Quoter.QuoteColumnName(item.Key),
-                                                   op, Quoter.QuoteValue(item.Value)));
+                    whereClauses.Add($"{Quoter.QuoteColumnName(item.Key)} {op} {Quoter.QuoteValue(item.Value)}");
                 }
             }
 
-            return string.Format(
-                "UPDATE {0} SET {1} WHERE {2};",
-                Quoter.QuoteTableName(expression.TableName, expression.SchemaName),
-                string.Join(", ", updateItems.ToArray()),
-                string.Join(" AND ", whereClauses.ToArray()));
+            return $"UPDATE {Quoter.QuoteTableName(expression.TableName, expression.SchemaName)} SET {string.Join(", ", updateItems.ToArray())} WHERE {string.Join(" AND ", whereClauses.ToArray())};";
         }
 
         public override string Generate(AlterSchemaExpression expression)
         {
-            return string.Format(
-                "ALTER TABLE {0} SET SCHEMA {1};",
-                Quoter.QuoteTableName(expression.TableName, expression.SourceSchemaName),
-                Quoter.QuoteSchemaName(expression.DestinationSchemaName));
+            return $"ALTER TABLE {Quoter.QuoteTableName(expression.TableName, expression.SourceSchemaName)} SET SCHEMA {Quoter.QuoteSchemaName(expression.DestinationSchemaName)};";
         }
 
         public override string Generate(DeleteDefaultConstraintExpression expression)
         {
-            return string.Format("ALTER TABLE {0} ALTER {1} DROP DEFAULT;", Quoter.QuoteTableName(expression.TableName, expression.SchemaName), Quoter.Quote(expression.ColumnName));
+            return $"ALTER TABLE {Quoter.QuoteTableName(expression.TableName, expression.SchemaName)} ALTER {Quoter.Quote(expression.ColumnName)} DROP DEFAULT;";
         }
 
         public override string Generate(DeleteConstraintExpression expression)
         {
-            return string.Format(
-                "ALTER TABLE {0} DROP CONSTRAINT {1};",
-                Quoter.QuoteTableName(expression.Constraint.TableName, expression.Constraint.SchemaName),
-                Quoter.Quote(expression.Constraint.ConstraintName));
+            return $"ALTER TABLE {Quoter.QuoteTableName(expression.Constraint.TableName, expression.Constraint.SchemaName)} DROP CONSTRAINT {Quoter.Quote(expression.Constraint.ConstraintName)};";
         }
 
         public override string Generate(CreateConstraintExpression expression)
@@ -312,12 +291,7 @@ namespace FluentMigrator.Runner.Generators.Redshift
                 columns[i] = Quoter.QuoteColumnName(expression.Constraint.Columns.ElementAt(i));
             }
 
-            return string.Format(
-                "ALTER TABLE {0} ADD CONSTRAINT {1} {2} ({3});",
-                Quoter.QuoteTableName(expression.Constraint.TableName, expression.Constraint.SchemaName),
-                Quoter.QuoteConstraintName(expression.Constraint.ConstraintName),
-                constraintType,
-                string.Join(", ", columns));
+            return $"ALTER TABLE {Quoter.QuoteTableName(expression.Constraint.TableName, expression.Constraint.SchemaName)} ADD CONSTRAINT {Quoter.QuoteConstraintName(expression.Constraint.ConstraintName)} {constraintType} ({string.Join(", ", columns)});";
         }
 
         protected string GetColumnList(IEnumerable<string> columns)
diff --git a/src/FluentMigrator.Runner.Redshift/Processors/Redshift/RedshiftProcessor.cs b/src/FluentMigrator.Runner.Redshift/Processors/Redshift/RedshiftProcessor.cs
index fdbdc0eb..93ad1809 100644
--- a/src/FluentMigrator.Runner.Redshift/Processors/Redshift/RedshiftProcessor.cs
+++ b/src/FluentMigrator.Runner.Redshift/Processors/Redshift/RedshiftProcessor.cs
@@ -93,7 +93,7 @@ namespace FluentMigrator.Runner.Processors.Redshift
 
         public override bool DefaultValueExists(string schemaName, string tableName, string columnName, object defaultValue)
         {
-            string defaultValueAsString = string.Format("%{0}%", FormatHelper.FormatSqlEscape(defaultValue.ToString()));
+            string defaultValueAsString = $"%{FormatHelper.FormatSqlEscape(defaultValue.ToString())}%";
             return Exists("select * from information_schema.columns where table_schema ilike '{0}' and table_name ilike '{1}' and column_name ilike '{2}' and column_default like '{3}'", FormatToSafeSchemaName(schemaName), FormatToSafeName(tableName), FormatToSafeName(columnName), defaultValueAsString);
         }
 
diff --git a/src/FluentMigrator.Runner.SQLite/Processors/SQLite/SQLiteProcessor.cs b/src/FluentMigrator.Runner.SQLite/Processors/SQLite/SQLiteProcessor.cs
index 7c75c562..d608938d 100644
--- a/src/FluentMigrator.Runner.SQLite/Processors/SQLite/SQLiteProcessor.cs
+++ b/src/FluentMigrator.Runner.SQLite/Processors/SQLite/SQLiteProcessor.cs
@@ -99,7 +99,7 @@ namespace FluentMigrator.Runner.Processors.SQLite
             var table = dataSet.Tables[0];
             if (!table.Columns.Contains("Name"))
                 return false;
-            return table.Select(string.Format("Name={0}", _quoter.QuoteValue(columnName))).Length > 0;
+            return table.Select($"Name={_quoter.QuoteValue(columnName)}").Length > 0;
         }
 
         public override bool ConstraintExists(string schemaName, string tableName, string constraintName)
diff --git a/src/FluentMigrator.Runner.SqlServer/Generators/SqlServer/SqlServer2000Column.cs b/src/FluentMigrator.Runner.SqlServer/Generators/SqlServer/SqlServer2000Column.cs
index 14839788..d8a9f992 100644
--- a/src/FluentMigrator.Runner.SqlServer/Generators/SqlServer/SqlServer2000Column.cs
+++ b/src/FluentMigrator.Runner.SqlServer/Generators/SqlServer/SqlServer2000Column.cs
@@ -55,9 +55,7 @@ namespace FluentMigrator.Runner.Generators.SqlServer
 
         private static string GetIdentityString(ColumnDefinition column)
         {
-            return string.Format("IDENTITY({0},{1})",
-                column.GetAdditionalFeature(SqlServerExtensions.IdentitySeed, 1),
-                column.GetAdditionalFeature(SqlServerExtensions.IdentityIncrement, 1));
+            return $"IDENTITY({column.GetAdditionalFeature(SqlServerExtensions.IdentitySeed, 1)},{column.GetAdditionalFeature(SqlServerExtensions.IdentityIncrement, 1)})";
         }
 
         public static string FormatDefaultValue(object defaultValue, IQuoter quoter)
@@ -70,7 +68,7 @@ namespace FluentMigrator.Runner.Generators.SqlServer
 
         public static string GetDefaultConstraintName(string tableName, string columnName)
         {
-            return string.Format("DF_{0}_{1}", tableName, columnName);
+            return $"DF_{tableName}_{columnName}";
         }
     }
 }
diff --git a/src/FluentMigrator.Runner.SqlServer/Generators/SqlServer/SqlServer2000Generator.cs b/src/FluentMigrator.Runner.SqlServer/Generators/SqlServer/SqlServer2000Generator.cs
index 992edff0..e60622da 100644
--- a/src/FluentMigrator.Runner.SqlServer/Generators/SqlServer/SqlServer2000Generator.cs
+++ b/src/FluentMigrator.Runner.SqlServer/Generators/SqlServer/SqlServer2000Generator.cs
@@ -179,10 +179,7 @@ namespace FluentMigrator.Runner.Generators.SqlServer
         {
             if (IsUsingIdentityInsert(expression))
             {
-                return string.Format("{0}; {1}; {2}",
-                            string.Format(IdentityInsert, Quoter.QuoteTableName(expression.TableName, expression.SchemaName), "ON"),
-                            base.Generate(expression),
-                            string.Format(IdentityInsert, Quoter.QuoteTableName(expression.TableName, expression.SchemaName), "OFF"));
+                return $"{string.Format(IdentityInsert, Quoter.QuoteTableName(expression.TableName, expression.SchemaName), "ON")}; {base.Generate(expression)}; {string.Format(IdentityInsert, Quoter.QuoteTableName(expression.TableName, expression.SchemaName), "OFF")}";
             }
             return base.Generate(expression);
         }
diff --git a/src/FluentMigrator.Runner.SqlServer/Generators/SqlServer/SqlServer2005DescriptionGenerator.cs b/src/FluentMigrator.Runner.SqlServer/Generators/SqlServer/SqlServer2005DescriptionGenerator.cs
index 672258a9..baff0e64 100644
--- a/src/FluentMigrator.Runner.SqlServer/Generators/SqlServer/SqlServer2005DescriptionGenerator.cs
+++ b/src/FluentMigrator.Runner.SqlServer/Generators/SqlServer/SqlServer2005DescriptionGenerator.cs
@@ -45,7 +45,7 @@ namespace FluentMigrator.Runner.Generators.SqlServer
 
             // For this, we need to remove the extended property first if exists (or implement verification and use sp_updateextendedproperty)
             var tableVerificationStatement = string.Format(TableDescriptionVerificationTemplate, formattedSchemaName, expression.TableName);
-            var removalStatement = string.Format("{0} {1}", tableVerificationStatement, GenerateTableDescriptionRemoval(formattedSchemaName, expression.TableName));
+            var removalStatement = $"{tableVerificationStatement} {GenerateTableDescriptionRemoval(formattedSchemaName, expression.TableName)}";
             var newDescriptionStatement = GenerateTableDescription(formattedSchemaName, expression.TableName, expression.TableDescription);
 
             return string.Join(";", new[] { removalStatement, newDescriptionStatement });
@@ -60,7 +60,7 @@ namespace FluentMigrator.Runner.Generators.SqlServer
 
             // For this, we need to remove the extended property first if exists (or implement verification and use sp_updateextendedproperty)
             var columnVerificationStatement = string.Format(ColumnDescriptionVerificationTemplate, formattedSchemaName, expression.TableName, expression.Column.Name);
-            var removalStatement = string.Format("{0} {1}", columnVerificationStatement, GenerateColumnDescriptionRemoval(formattedSchemaName, expression.TableName, expression.Column.Name));
+            var removalStatement = $"{columnVerificationStatement} {GenerateColumnDescriptionRemoval(formattedSchemaName, expression.TableName, expression.Column.Name)}";
             var newDescriptionStatement = GenerateColumnDescription(formattedSchemaName, expression.TableName, expression.Column.Name, expression.Column.ColumnDescription);
 
             return string.Join(";", new[] { removalStatement, newDescriptionStatement });
diff --git a/src/FluentMigrator.Runner.SqlServer/Processors/SqlServer/SqlServerProcessor.cs b/src/FluentMigrator.Runner.SqlServer/Processors/SqlServer/SqlServerProcessor.cs
index f2756f70..2329cf04 100644
--- a/src/FluentMigrator.Runner.SqlServer/Processors/SqlServer/SqlServerProcessor.cs
+++ b/src/FluentMigrator.Runner.SqlServer/Processors/SqlServer/SqlServerProcessor.cs
@@ -177,7 +177,7 @@ namespace FluentMigrator.Runner.Processors.SqlServer
 
         public override bool DefaultValueExists(string schemaName, string tableName, string columnName, object defaultValue)
         {
-            var defaultValueAsString = string.Format("%{0}%", FormatHelper.FormatSqlEscape(defaultValue.ToString()));
+            var defaultValueAsString = $"%{FormatHelper.FormatSqlEscape(defaultValue.ToString())}%";
             return Exists(DEFAULTVALUE_EXISTS, SafeSchemaName(schemaName),
                 FormatHelper.FormatSqlEscape(tableName),
                 FormatHelper.FormatSqlEscape(columnName), defaultValueAsString);
diff --git a/src/FluentMigrator.Runner.SqlServerCe/Generators/SqlServer/SqlServerCeGenerator.cs b/src/FluentMigrator.Runner.SqlServerCe/Generators/SqlServer/SqlServerCeGenerator.cs
index 56d7e05f..33643ed2 100644
--- a/src/FluentMigrator.Runner.SqlServerCe/Generators/SqlServer/SqlServerCeGenerator.cs
+++ b/src/FluentMigrator.Runner.SqlServerCe/Generators/SqlServer/SqlServerCeGenerator.cs
@@ -65,7 +65,7 @@ namespace FluentMigrator.Runner.Generators.SqlServer
 
         public override string Generate(RenameTableExpression expression)
         {
-            return string.Format("sp_rename {0}, {1}", Quoter.QuoteValue(expression.OldName), Quoter.QuoteValue(expression.NewName));
+            return $"sp_rename {Quoter.QuoteValue(expression.OldName)}, {Quoter.QuoteValue(expression.NewName)}";
         }
 
         public override string Generate(RenameColumnExpression expression)
@@ -103,7 +103,7 @@ namespace FluentMigrator.Runner.Generators.SqlServer
 
         public override string Generate(DeleteIndexExpression expression)
         {
-            return string.Format("DROP INDEX {0}.{1}", Quoter.QuoteTableName(expression.Index.TableName), Quoter.QuoteIndexName(expression.Index.Name));
+            return $"DROP INDEX {Quoter.QuoteTableName(expression.Index.TableName)}.{Quoter.QuoteIndexName(expression.Index.Name)}";
         }
 
         public override string Generate(AlterDefaultConstraintExpression expression)
@@ -128,10 +128,7 @@ namespace FluentMigrator.Runner.Generators.SqlServer
 
             if (IsUsingIdentityInsert(expression))
             {
-                return string.Format("{0}; {1}; {2}",
-                            string.Format(IdentityInsert, Quoter.QuoteTableName(expression.TableName), "ON"),
-                            sql,
-                            string.Format(IdentityInsert, Quoter.QuoteTableName(expression.TableName), "OFF"));
+                return $"{string.Format(IdentityInsert, Quoter.QuoteTableName(expression.TableName), "ON")}; {sql}; {string.Format(IdentityInsert, Quoter.QuoteTableName(expression.TableName), "OFF")}";
             }
             return sql;
         }
diff --git a/src/FluentMigrator.Runner/Announcers/Announcer.cs b/src/FluentMigrator.Runner/Announcers/Announcer.cs
index 62fd18fe..cc89b1e5 100644
--- a/src/FluentMigrator.Runner/Announcers/Announcer.cs
+++ b/src/FluentMigrator.Runner/Announcers/Announcer.cs
@@ -68,7 +68,7 @@ namespace FluentMigrator.Runner.Announcers
         {
             if (!ShowElapsedTime) return;
 
-            Write(string.Format("=> {0}s", timeSpan.TotalSeconds));
+            Write($"=> {timeSpan.TotalSeconds}s");
         }
 
         public virtual void Error(Exception exception)
@@ -82,7 +82,7 @@ namespace FluentMigrator.Runner.Announcers
 
         public virtual void Error(string message)
         {
-            Write(string.Format("!!! {0}", message));
+            Write($"!!! {message}");
         }
 
         public abstract void Write(string message, bool isNotSql = true);
diff --git a/src/FluentMigrator.Runner/Announcers/ConsoleAnnouncer.cs b/src/FluentMigrator.Runner/Announcers/ConsoleAnnouncer.cs
index d9587048..10b4180d 100644
--- a/src/FluentMigrator.Runner/Announcers/ConsoleAnnouncer.cs
+++ b/src/FluentMigrator.Runner/Announcers/ConsoleAnnouncer.cs
@@ -65,14 +65,14 @@ namespace FluentMigrator.Runner.Announcers
         public override void Say(string message)
         {
             Console.ForegroundColor = ConsoleColor.White;
-            base.Say(string.Format("[+] {0}", message));
+            base.Say($"[+] {message}");
             Console.ResetColor();
         }
 
         public override void Emphasize(string message)
         {
             Console.ForegroundColor = ConsoleColor.Yellow;
-            base.Say(string.Format("[+] {0}", message));
+            base.Say($"[+] {message}");
             Console.ResetColor();
         }
 
diff --git a/src/FluentMigrator.Runner/Announcers/TextWriterAnnouncer.cs b/src/FluentMigrator.Runner/Announcers/TextWriterAnnouncer.cs
index 6c500a85..9184028e 100644
--- a/src/FluentMigrator.Runner/Announcers/TextWriterAnnouncer.cs
+++ b/src/FluentMigrator.Runner/Announcers/TextWriterAnnouncer.cs
@@ -46,7 +46,7 @@ namespace FluentMigrator.Runner.Announcers
 
         public override void Heading(string message)
         {
-            base.Heading(string.Format("{0} ", message).PadRight(75, '='));
+            base.Heading($"{message} ".PadRight(75, '='));
             _write(Environment.NewLine);
         }
 
@@ -58,7 +58,7 @@ namespace FluentMigrator.Runner.Announcers
 
         public override void Write(string message, bool isNotSql = true)
         {
-            _write(isNotSql ? string.Format("/* {0} */", message) : message);
+            _write(isNotSql ? $"/* {message} */" : message);
             _write(Environment.NewLine);
         }
     }
diff --git a/src/FluentMigrator.Runner/Exceptions/InvalidMigrationException.cs b/src/FluentMigrator.Runner/Exceptions/InvalidMigrationException.cs
index e8081ceb..5e0eea08 100644
--- a/src/FluentMigrator.Runner/Exceptions/InvalidMigrationException.cs
+++ b/src/FluentMigrator.Runner/Exceptions/InvalidMigrationException.cs
@@ -31,7 +31,7 @@ namespace FluentMigrator.Runner.Exceptions
         {
             get
             {
-                return string.Format("The migration {0} contained the following Validation Error(s): {1}", _migration.GetType().Name, _errors);
+                return $"The migration {_migration.GetType().Name} contained the following Validation Error(s): {_errors}";
             }
         }
     }
diff --git a/src/FluentMigrator.Runner/Exceptions/VersionOrderInvalidException.cs b/src/FluentMigrator.Runner/Exceptions/VersionOrderInvalidException.cs
index be11d17b..6a31b4c8 100644
--- a/src/FluentMigrator.Runner/Exceptions/VersionOrderInvalidException.cs
+++ b/src/FluentMigrator.Runner/Exceptions/VersionOrderInvalidException.cs
@@ -49,7 +49,7 @@ namespace FluentMigrator.Runner.Exceptions
 
                 foreach (var pair in InvalidMigrations)
                 {
-                    result = result + string.Format("{0}{1} - {2}", Environment.NewLine, pair.Key, pair.Value.Migration.GetType().Name);
+                    result = result + $"{Environment.NewLine}{pair.Key} - {pair.Value.Migration.GetType().Name}";
                 }
 
                 return result;
diff --git a/src/FluentMigrator.Runner/MigrationRunner.cs b/src/FluentMigrator.Runner/MigrationRunner.cs
index f93f044f..2cadf719 100644
--- a/src/FluentMigrator.Runner/MigrationRunner.cs
+++ b/src/FluentMigrator.Runner/MigrationRunner.cs
@@ -599,9 +599,7 @@ namespace FluentMigrator.Runner
                             !_processorOptions.PreviewOnly && !AllowBreakingChanges)
                         {
                             throw new InvalidOperationException(
-                                string.Format(
-                                    "The migration {0} is identified as a breaking change, and will not be executed unless the necessary flag (allow-breaking-changes|abc) is passed to the runner.",
-                                    migrationInfo.GetName()));
+                                $"The migration {migrationInfo.GetName()} is identified as a breaking change, and will not be executed unless the necessary flag (allow-breaking-changes|abc) is passed to the runner.");
                         }
 
                         ExecuteMigration(migrationInfo.Migration, (m, c) => m.GetUpExpressions(c));
@@ -885,7 +883,7 @@ namespace FluentMigrator.Runner
             if (insertCount > 0)
             {
                 var avg = new TimeSpan(insertTicks / insertCount);
-                var msg = string.Format("-> {0} Insert operations completed in {1} taking an average of {2}", insertCount, new TimeSpan(insertTicks), avg);
+                var msg = $"-> {insertCount} Insert operations completed in {new TimeSpan(insertTicks)} taking an average of {avg}";
                 _logger.LogSay(msg);
             }
         }
diff --git a/src/FluentMigrator/Infrastructure/NonAttributedMigrationToMigrationInfoAdapter.cs b/src/FluentMigrator/Infrastructure/NonAttributedMigrationToMigrationInfoAdapter.cs
index 9b687716..a4686e6e 100644
--- a/src/FluentMigrator/Infrastructure/NonAttributedMigrationToMigrationInfoAdapter.cs
+++ b/src/FluentMigrator/Infrastructure/NonAttributedMigrationToMigrationInfoAdapter.cs
@@ -72,7 +72,7 @@ namespace FluentMigrator.Infrastructure
         /// <inheritdoc />
         public string GetName()
         {
-            return string.Format("{0}", Migration.GetType().Name);
+            return $"{Migration.GetType().Name}";
         }
     }
 }
diff --git a/test/FluentMigrator.Tests/Helpers/Db2ISeriesTestTable.cs b/test/FluentMigrator.Tests/Helpers/Db2ISeriesTestTable.cs
index f63a61a5..57016e22 100644
--- a/test/FluentMigrator.Tests/Helpers/Db2ISeriesTestTable.cs
+++ b/test/FluentMigrator.Tests/Helpers/Db2ISeriesTestTable.cs
@@ -94,24 +94,20 @@ namespace FluentMigrator.Tests.Helpers
 
         public void Drop()
         {
-            var tableCommand = string.Format("DROP TABLE {0}", NameWithSchema);
+            var tableCommand = $"DROP TABLE {NameWithSchema}";
 
             Processor.Execute(tableCommand);
 
             if (!string.IsNullOrEmpty(_schema))
             {
-                var schemaCommand = string.Format("DROP SCHEMA {0} RESTRICT", _quoter.QuoteSchemaName(_schema));
+                var schemaCommand = $"DROP SCHEMA {_quoter.QuoteSchemaName(_schema)} RESTRICT";
                 Processor.Execute(schemaCommand);
             }
         }
 
         public void WithIndexOn(string column, string name)
         {
-            var query = string.Format("CREATE UNIQUE INDEX {0} ON {1} ({2})",
-                _quoter.QuoteIndexName(name),
-                NameWithSchema,
-                _quoter.QuoteColumnName(column)
-                );
+            var query = $"CREATE UNIQUE INDEX {_quoter.QuoteIndexName(name)} ON {NameWithSchema} ({_quoter.QuoteColumnName(column)})";
 
             Processor.Execute(query);
         }
@@ -120,11 +116,7 @@ namespace FluentMigrator.Tests.Helpers
         {
             var constraintName = _quoter.QuoteConstraintName(name, _schema);
 
-            var query = string.Format("ALTER TABLE {0} ADD CONSTRAINT {1} UNIQUE ({2})",
-                NameWithSchema,
-                constraintName,
-                _quoter.QuoteColumnName(column)
-            );
+            var query = $"ALTER TABLE {NameWithSchema} ADD CONSTRAINT {constraintName} UNIQUE ({_quoter.QuoteColumnName(column)})";
 
             Processor.Execute(query);
         }
diff --git a/test/FluentMigrator.Tests/Helpers/Db2TestTable.cs b/test/FluentMigrator.Tests/Helpers/Db2TestTable.cs
index 2c62ae26..98e9e61e 100644
--- a/test/FluentMigrator.Tests/Helpers/Db2TestTable.cs
+++ b/test/FluentMigrator.Tests/Helpers/Db2TestTable.cs
@@ -92,23 +92,19 @@ namespace FluentMigrator.Tests.Helpers
 
         public void Drop()
         {
-            var tableCommand = string.Format("DROP TABLE {0}", NameWithSchema);
+            var tableCommand = $"DROP TABLE {NameWithSchema}";
             Processor.Execute(tableCommand);
 
             if (!string.IsNullOrEmpty(_schema))
             {
-                var schemaCommand = string.Format("DROP SCHEMA {0} RESTRICT", _quoter.QuoteSchemaName(_schema));
+                var schemaCommand = $"DROP SCHEMA {_quoter.QuoteSchemaName(_schema)} RESTRICT";
                 Processor.Execute(schemaCommand);
             }
         }
 
         public void WithIndexOn(string column, string name)
         {
-            var query = string.Format("CREATE UNIQUE INDEX {0} ON {1} ({2})",
-                _quoter.QuoteIndexName(name, _schema),
-                NameWithSchema,
-                _quoter.QuoteColumnName(column)
-                );
+            var query = $"CREATE UNIQUE INDEX {_quoter.QuoteIndexName(name, _schema)} ON {NameWithSchema} ({_quoter.QuoteColumnName(column)})";
 
             Processor.Execute(query);
         }
@@ -117,11 +113,7 @@ namespace FluentMigrator.Tests.Helpers
         {
             var constraintName = _quoter.QuoteConstraintName(name, _schema);
 
-            var query = string.Format("ALTER TABLE {0} ADD CONSTRAINT {1} UNIQUE ({2})",
-                NameWithSchema,
-                constraintName,
-                _quoter.QuoteColumnName(column)
-            );
+            var query = $"ALTER TABLE {NameWithSchema} ADD CONSTRAINT {constraintName} UNIQUE ({_quoter.QuoteColumnName(column)})";
 
             Processor.Execute(query);
         }
diff --git a/test/FluentMigrator.Tests/Helpers/HanaTestTable.cs b/test/FluentMigrator.Tests/Helpers/HanaTestTable.cs
index be947a2f..ad25e7b4 100644
--- a/test/FluentMigrator.Tests/Helpers/HanaTestTable.cs
+++ b/test/FluentMigrator.Tests/Helpers/HanaTestTable.cs
@@ -95,19 +95,19 @@ namespace FluentMigrator.Tests.Helpers
         public void WithDefaultValueOn(string column)
         {
             const int defaultValue = 1;
-            using (var command = new HanaCommand(string.Format(" ALTER TABLE {0} ALTER {1} SET DEFAULT {2}", _quoter.QuoteTableName(Name, _schemaName), _quoter.QuoteColumnName(column), defaultValue), Connection, Transaction))
+            using (var command = new HanaCommand($" ALTER TABLE {_quoter.QuoteTableName(Name, _schemaName)} ALTER {_quoter.QuoteColumnName(column)} SET DEFAULT {defaultValue}", Connection, Transaction))
                 command.ExecuteNonQuery();
         }
 
         public string WithIndexOn(string column)
         {
-            var indexName = string.Format("idx_{0}", column);
+            var indexName = $"idx_{column}";
 
             var quotedObjectName = _quoter.QuoteTableName(Name);
 
             var quotedIndexName = _quoter.QuoteIndexName(indexName);
 
-            using (var command = new HanaCommand(string.Format("CREATE INDEX {0} ON {1} ({2})", quotedIndexName, quotedObjectName, _quoter.QuoteColumnName(column)), Connection, Transaction))
+            using (var command = new HanaCommand($"CREATE INDEX {quotedIndexName} ON {quotedObjectName} ({_quoter.QuoteColumnName(column)})", Connection, Transaction))
                 command.ExecuteNonQuery();
 
             return indexName;
@@ -120,7 +120,7 @@ namespace FluentMigrator.Tests.Helpers
         public void WithUniqueConstraintOn(string column, string name)
         {
             var sb = new StringBuilder();
-            sb.Append(string.Format("ALTER TABLE {0} ADD CONSTRAINT {1} UNIQUE ({2})", _quoter.QuoteTableName(Name), _quoter.QuoteConstraintName(name), _quoter.QuoteColumnName(column)));
+            sb.Append($"ALTER TABLE {_quoter.QuoteTableName(Name)} ADD CONSTRAINT {_quoter.QuoteConstraintName(name)} UNIQUE ({_quoter.QuoteColumnName(column)})");
             using (var command = new HanaCommand(sb.ToString(), Connection, Transaction))
                 command.ExecuteNonQuery();
         }
diff --git a/test/FluentMigrator.Tests/Helpers/OracleTestTable.cs b/test/FluentMigrator.Tests/Helpers/OracleTestTable.cs
index 57927773..42a9ab58 100644
--- a/test/FluentMigrator.Tests/Helpers/OracleTestTable.cs
+++ b/test/FluentMigrator.Tests/Helpers/OracleTestTable.cs
@@ -93,7 +93,7 @@ namespace FluentMigrator.Tests.Helpers
 
             if (!string.IsNullOrEmpty(_schema))
             {
-                sb.Append(string.Format("CREATE SCHEMA AUTHORIZATION {0} ", _schema));
+                sb.Append($"CREATE SCHEMA AUTHORIZATION {_schema} ");
             }
             return sb;
         }
@@ -106,7 +106,7 @@ namespace FluentMigrator.Tests.Helpers
         public void WithUniqueConstraintOn(string column, string name)
         {
             var sb = new StringBuilder();
-            sb.Append(string.Format("ALTER TABLE {0} ADD CONSTRAINT {1} UNIQUE ({2})", _quoter.QuoteTableName(Name), _quoter.QuoteConstraintName(name), _quoter.QuoteColumnName(column)));
+            sb.Append($"ALTER TABLE {_quoter.QuoteTableName(Name)} ADD CONSTRAINT {_quoter.QuoteConstraintName(name)} UNIQUE ({_quoter.QuoteColumnName(column)})");
             _processor.Execute(sb.ToString());
             _constraints.Add(name);
        }
@@ -119,7 +119,7 @@ namespace FluentMigrator.Tests.Helpers
         public void WithIndexOn(string column, string name)
         {
             var sb = new StringBuilder();
-            sb.Append(string.Format("CREATE UNIQUE INDEX {0} ON {1} ({2})", _quoter.QuoteIndexName(name), _quoter.QuoteTableName(Name), _quoter.QuoteColumnName(column)));
+            sb.Append($"CREATE UNIQUE INDEX {_quoter.QuoteIndexName(name)} ON {_quoter.QuoteTableName(Name)} ({_quoter.QuoteColumnName(column)})");
             _processor.Execute(sb.ToString());
             _indexies.Add(name);
         }
@@ -128,16 +128,13 @@ namespace FluentMigrator.Tests.Helpers
         {
             foreach(var constraint in _constraints)
             {
-                var cmd = string.Format(
-                    "ALTER TABLE {0} DROP CONSTRAINT {1}",
-                    _quoter.QuoteTableName(Name),
-                    _quoter.QuoteConstraintName(constraint));
+                var cmd = $"ALTER TABLE {_quoter.QuoteTableName(Name)} DROP CONSTRAINT {_quoter.QuoteConstraintName(constraint)}";
                 _processor.Execute(cmd);
             }
 
             foreach (var index in _indexies)
             {
-                var cmd = string.Format("DROP INDEX {0}", _quoter.QuoteIndexName(index));
+                var cmd = $"DROP INDEX {_quoter.QuoteIndexName(index)}";
                 _processor.Execute(cmd);
             }
 
diff --git a/test/FluentMigrator.Tests/Helpers/PostgresTestSequence.cs b/test/FluentMigrator.Tests/Helpers/PostgresTestSequence.cs
index 0b727b65..45eb23b4 100644
--- a/test/FluentMigrator.Tests/Helpers/PostgresTestSequence.cs
+++ b/test/FluentMigrator.Tests/Helpers/PostgresTestSequence.cs
@@ -50,11 +50,11 @@ namespace FluentMigrator.Tests.Helpers
         {
             if (!string.IsNullOrEmpty(_schemaName))
             {
-                using (var command = new NpgsqlCommand(string.Format("CREATE SCHEMA \"{0}\";", _schemaName), Connection, Transaction))
+                using (var command = new NpgsqlCommand($"CREATE SCHEMA \"{_schemaName}\";", Connection, Transaction))
                     command.ExecuteNonQuery();
             }
 
-            string createCommand = string.Format("CREATE SEQUENCE {0} INCREMENT 2 MINVALUE 0 MAXVALUE 100 START WITH 2 CACHE 10 CYCLE", NameWithSchema);
+            string createCommand = $"CREATE SEQUENCE {NameWithSchema} INCREMENT 2 MINVALUE 0 MAXVALUE 100 START WITH 2 CACHE 10 CYCLE";
             using (var command = new NpgsqlCommand(createCommand, Connection, Transaction))
                 command.ExecuteNonQuery();
         }
@@ -66,7 +66,7 @@ namespace FluentMigrator.Tests.Helpers
 
             if (!string.IsNullOrEmpty(_schemaName))
             {
-                using (var command = new NpgsqlCommand(string.Format("DROP SCHEMA \"{0}\"", _schemaName), Connection, Transaction))
+                using (var command = new NpgsqlCommand($"DROP SCHEMA \"{_schemaName}\"", Connection, Transaction))
                     command.ExecuteNonQuery();
             }
         }
diff --git a/test/FluentMigrator.Tests/Helpers/PostgresTestTable.cs b/test/FluentMigrator.Tests/Helpers/PostgresTestTable.cs
index 38d6b497..9fdba6b0 100644
--- a/test/FluentMigrator.Tests/Helpers/PostgresTestTable.cs
+++ b/test/FluentMigrator.Tests/Helpers/PostgresTestTable.cs
@@ -86,7 +86,7 @@ namespace FluentMigrator.Tests.Helpers
         public void WithDefaultValueOn(string column)
         {
             const int defaultValue = 1;
-            using (var command = new NpgsqlCommand(string.Format(" ALTER TABLE {0} ALTER {1} SET DEFAULT {2}", _quoter.QuoteTableName(Name, _schemaName), _quoter.QuoteColumnName(column), defaultValue), Connection, Transaction))
+            using (var command = new NpgsqlCommand($" ALTER TABLE {_quoter.QuoteTableName(Name, _schemaName)} ALTER {_quoter.QuoteColumnName(column)} SET DEFAULT {defaultValue}", Connection, Transaction))
                 command.ExecuteNonQuery();
         }
     }
diff --git a/test/FluentMigrator.Tests/Helpers/SQLiteTestTable.cs b/test/FluentMigrator.Tests/Helpers/SQLiteTestTable.cs
index 9bd8038d..a39479d1 100644
--- a/test/FluentMigrator.Tests/Helpers/SQLiteTestTable.cs
+++ b/test/FluentMigrator.Tests/Helpers/SQLiteTestTable.cs
@@ -47,7 +47,7 @@ namespace FluentMigrator.Tests.Helpers {
             if ( !string.IsNullOrEmpty( _schemaName ) ) {
                 using ( var command = Connection.CreateCommand() ) {
                     //new DbCommand(string.Format("CREATE SCHEMA [{0}]", _schemaName), Connection, Transaction)
-                    command.CommandText = string.Format( "CREATE SCHEMA [{0}]", _schemaName );
+                    command.CommandText = $"CREATE SCHEMA [{_schemaName}]";
                     command.Transaction = Transaction;
                     command.ExecuteNonQuery();
                 }
@@ -89,7 +89,7 @@ namespace FluentMigrator.Tests.Helpers {
             } else {
                 using ( var command = Connection.CreateCommand() ) {
                     //var command = new SqlCommand(sb.ToString(), Connection, Transaction)
-                    command.CommandText = string.Format( "DROP TABLE [{0}].{1}", _schemaName, Name );
+                    command.CommandText = $"DROP TABLE [{_schemaName}].{Name}";
                     command.Transaction = Transaction;
                     command.ExecuteNonQuery();
                 }
@@ -98,7 +98,7 @@ namespace FluentMigrator.Tests.Helpers {
 
                 using ( var command = Connection.CreateCommand() ) {
                     //var command = new SqlCommand(sb.ToString(), Connection, Transaction)
-                    command.CommandText = string.Format( "DROP SCHEMA [{0}]", _schemaName );
+                    command.CommandText = $"DROP SCHEMA [{_schemaName}]";
                     command.Transaction = Transaction;
                     command.ExecuteNonQuery();
                 }
diff --git a/test/FluentMigrator.Tests/Helpers/SqlServerCeTestTable.cs b/test/FluentMigrator.Tests/Helpers/SqlServerCeTestTable.cs
index b4495284..ad265289 100644
--- a/test/FluentMigrator.Tests/Helpers/SqlServerCeTestTable.cs
+++ b/test/FluentMigrator.Tests/Helpers/SqlServerCeTestTable.cs
@@ -70,7 +70,7 @@ namespace FluentMigrator.Tests.Helpers
             var sb = new StringBuilder();
             var constraintName = Quoter.Quote(name);
             constraints.Add(constraintName);
-            sb.Append(string.Format("ALTER TABLE {0} ADD CONSTRAINT {1} UNIQUE ({2})", Quoter.QuoteTableName(Name), constraintName, column));
+            sb.Append($"ALTER TABLE {Quoter.QuoteTableName(Name)} ADD CONSTRAINT {constraintName} UNIQUE ({column})");
             using (var command = new SqlCeCommand(sb.ToString(), Connection))
                 command.ExecuteNonQuery();
         }
@@ -85,7 +85,7 @@ namespace FluentMigrator.Tests.Helpers
             var sb = new StringBuilder();
             var indexName = Quoter.QuoteIndexName(name);
             indexies.Add(indexName);
-            sb.Append(string.Format("CREATE UNIQUE INDEX {0} ON {1} ({2})", indexName, Quoter.QuoteTableName(Name), column));
+            sb.Append($"CREATE UNIQUE INDEX {indexName} ON {Quoter.QuoteTableName(Name)} ({column})");
             using (var command = new SqlCeCommand(sb.ToString(), Connection))
                 command.ExecuteNonQuery();
         }
diff --git a/test/FluentMigrator.Tests/Helpers/SqlServerTestSequence.cs b/test/FluentMigrator.Tests/Helpers/SqlServerTestSequence.cs
index 9afad38f..ffabce38 100644
--- a/test/FluentMigrator.Tests/Helpers/SqlServerTestSequence.cs
+++ b/test/FluentMigrator.Tests/Helpers/SqlServerTestSequence.cs
@@ -49,13 +49,13 @@ namespace FluentMigrator.Tests.Helpers
         {
             if (!string.IsNullOrEmpty(_schemaName))
             {
-                using (var command = new SqlCommand(string.Format("CREATE SCHEMA [{0}]", _schemaName), Connection, Transaction))
+                using (var command = new SqlCommand($"CREATE SCHEMA [{_schemaName}]", Connection, Transaction))
                     command.ExecuteNonQuery();
             }
 
             var schema = string.IsNullOrEmpty(_schemaName) ? "dbo" : _schemaName;
 
-            string createCommand = string.Format("CREATE SEQUENCE [{0}].[{1}] INCREMENT BY 2 MINVALUE 0 MAXVALUE 100 START WITH 2 CACHE 10 CYCLE", schema, Name);
+            string createCommand = $"CREATE SEQUENCE [{schema}].[{Name}] INCREMENT BY 2 MINVALUE 0 MAXVALUE 100 START WITH 2 CACHE 10 CYCLE";
             using (var command = new SqlCommand(createCommand, Connection, Transaction))
                 command.ExecuteNonQuery();
         }
@@ -69,10 +69,10 @@ namespace FluentMigrator.Tests.Helpers
             }
             else
             {
-                using (var command = new SqlCommand(string.Format("DROP SEQUENCE [{0}].{1}", _schemaName, Name), Connection, Transaction))
+                using (var command = new SqlCommand($"DROP SEQUENCE [{_schemaName}].{Name}", Connection, Transaction))
                     command.ExecuteNonQuery();
 
-                using (var command = new SqlCommand(string.Format("DROP SCHEMA [{0}]", _schemaName), Connection, Transaction))
+                using (var command = new SqlCommand($"DROP SCHEMA [{_schemaName}]", Connection, Transaction))
                     command.ExecuteNonQuery();
             }
         }
diff --git a/test/FluentMigrator.Tests/Helpers/SqlServerTestTable.cs b/test/FluentMigrator.Tests/Helpers/SqlServerTestTable.cs
index c37cf1de..ff8ff046 100644
--- a/test/FluentMigrator.Tests/Helpers/SqlServerTestTable.cs
+++ b/test/FluentMigrator.Tests/Helpers/SqlServerTestTable.cs
@@ -66,7 +66,7 @@ namespace FluentMigrator.Tests.Helpers
         {
             if (!string.IsNullOrEmpty(_schemaName) && !processor.SchemaExists(_schemaName))
             {
-                using (var command = new SqlCommand(string.Format("CREATE SCHEMA {0}", _quoter.QuoteSchemaName(_schemaName)), Connection, Transaction))
+                using (var command = new SqlCommand($"CREATE SCHEMA {_quoter.QuoteSchemaName(_schemaName)}", Connection, Transaction))
                     command.ExecuteNonQuery();
             }
 
@@ -98,7 +98,7 @@ namespace FluentMigrator.Tests.Helpers
 
             foreach (var quoteIndexName in indexies)
             {
-                using (var command = new SqlCommand(string.Format("DROP INDEX {0} ON {1}", quoteIndexName, quotedObjectName), Connection, Transaction))
+                using (var command = new SqlCommand($"DROP INDEX {quoteIndexName} ON {quotedObjectName}", Connection, Transaction))
                     command.ExecuteNonQuery();
             }
 
@@ -107,14 +107,14 @@ namespace FluentMigrator.Tests.Helpers
 
             if (!string.IsNullOrEmpty(_schemaName))
             {
-                using (var command = new SqlCommand(string.Format("DROP SCHEMA {0}", quotedSchema), Connection, Transaction))
+                using (var command = new SqlCommand($"DROP SCHEMA {quotedSchema}", Connection, Transaction))
                     command.ExecuteNonQuery();
             }
         }
 
         public string WithIndexOn(string column)
         {
-            var indexName = string.Format("idx_{0}", column);
+            var indexName = $"idx_{column}";
 
             var quotedObjectName = _quoter.QuoteTableName(Name, _schemaName);
 
@@ -122,7 +122,7 @@ namespace FluentMigrator.Tests.Helpers
 
             indexies.Add(quotedIndexName);
 
-            using (var command = new SqlCommand(string.Format("CREATE INDEX {0} ON {1} ({2})", quotedIndexName, quotedObjectName, _quoter.QuoteColumnName(column)), Connection, Transaction))
+            using (var command = new SqlCommand($"CREATE INDEX {quotedIndexName} ON {quotedObjectName} ({_quoter.QuoteColumnName(column)})", Connection, Transaction))
                 command.ExecuteNonQuery();
 
             return indexName;
@@ -130,9 +130,9 @@ namespace FluentMigrator.Tests.Helpers
 
         public void WithDefaultValueOn(string column)
         {
-            var defaultConstraintName = string.Format("[DF_{0}_{1}]", Name, column);
+            var defaultConstraintName = $"[DF_{Name}_{column}]";
             const int defaultValue = 1;
-            using (var command = new SqlCommand(string.Format(" ALTER TABLE {0} ADD CONSTRAINT {1} DEFAULT ({2}) FOR {3}", _quoter.QuoteTableName(Name, _schemaName), defaultConstraintName, defaultValue, _quoter.QuoteColumnName(column)), Connection, Transaction))
+            using (var command = new SqlCommand($" ALTER TABLE {_quoter.QuoteTableName(Name, _schemaName)} ADD CONSTRAINT {defaultConstraintName} DEFAULT ({defaultValue}) FOR {_quoter.QuoteColumnName(column)}", Connection, Transaction))
                 command.ExecuteNonQuery();
         }
     }
diff --git a/test/FluentMigrator.Tests/Integration/ObsoleteMigrationRunnerTests.cs b/test/FluentMigrator.Tests/Integration/ObsoleteMigrationRunnerTests.cs
index a17ff195..11bf48fb 100644
--- a/test/FluentMigrator.Tests/Integration/ObsoleteMigrationRunnerTests.cs
+++ b/test/FluentMigrator.Tests/Integration/ObsoleteMigrationRunnerTests.cs
@@ -928,11 +928,11 @@ namespace FluentMigrator.Tests.Integration
                 processor.CommitTransaction();
 
                 string schemaName = versionTableMetaData.SchemaName;
-                var schemaAndTableName = string.Format("[{0}].[{1}]", schemaName, TestVersionTableMetaData.TABLE_NAME);
+                var schemaAndTableName = $"[{schemaName}].[{TestVersionTableMetaData.TABLE_NAME}]";
 
                 var outputSqlString = outputSql.ToString();
 
-                var createSchemaMatches = new Regex(Regex.Escape(string.Format("CREATE SCHEMA [{0}]", schemaName)))
+                var createSchemaMatches = new Regex(Regex.Escape($"CREATE SCHEMA [{schemaName}]"))
                     .Matches(outputSqlString).Count;
                 var createTableMatches = new Regex(Regex.Escape("CREATE TABLE " + schemaAndTableName))
                     .Matches(outputSqlString).Count;
diff --git a/test/FluentMigrator.Tests/Integration/Processors/Firebird/EndToEnd/TestInitialMigration.cs b/test/FluentMigrator.Tests/Integration/Processors/Firebird/EndToEnd/TestInitialMigration.cs
index 99a35e7c..8b46e4c2 100644
--- a/test/FluentMigrator.Tests/Integration/Processors/Firebird/EndToEnd/TestInitialMigration.cs
+++ b/test/FluentMigrator.Tests/Integration/Processors/Firebird/EndToEnd/TestInitialMigration.cs
@@ -54,7 +54,7 @@ namespace FluentMigrator.Tests.Integration.Processors.Firebird.EndToEnd
         {
             Migrate(typeof(VersionOneSimpleTableMigration).Namespace);
 
-            TableExists(tableName).ShouldBe(true, string.Format("Table {0} should have been created but it wasn't", tableName));
+            TableExists(tableName).ShouldBe(true, $"Table {tableName} should have been created but it wasn't");
         }
 
         [TestCase("ID")]
@@ -63,7 +63,7 @@ namespace FluentMigrator.Tests.Integration.Processors.Firebird.EndToEnd
         {
             Migrate(typeof(VersionOneSimpleTableMigration).Namespace);
 
-            ColumnExists("SIMPLE", columnName).ShouldBe(true, string.Format("Column {0} should have been created but it wasn't", columnName));
+            ColumnExists("SIMPLE", columnName).ShouldBe(true, $"Column {columnName} should have been created but it wasn't");
         }
 
         [TestCase("SIMPLE")]
@@ -75,7 +75,7 @@ namespace FluentMigrator.Tests.Integration.Processors.Firebird.EndToEnd
 
             Rollback(migrationsNamespace);
 
-            TableExists(table).ShouldBe(false, string.Format("Table {0} should have been dropped but it wasn't", table));
+            TableExists(table).ShouldBe(false, $"Table {table} should have been dropped but it wasn't");
         }
     }
 }
diff --git a/test/FluentMigrator.Tests/Integration/Processors/Firebird/FirebirdColumnTests.cs b/test/FluentMigrator.Tests/Integration/Processors/Firebird/FirebirdColumnTests.cs
index 522a74c3..175ad9b6 100644
--- a/test/FluentMigrator.Tests/Integration/Processors/Firebird/FirebirdColumnTests.cs
+++ b/test/FluentMigrator.Tests/Integration/Processors/Firebird/FirebirdColumnTests.cs
@@ -45,7 +45,7 @@ namespace FluentMigrator.Tests.Integration.Processors.Firebird
         public override void CallingColumnExistsCanAcceptColumnNameWithSingleQuote()
         {
             var columnNameWithSingleQuote = "\"i'd\"";
-            using (var table = new FirebirdTestTable(Processor, string.Format("{0} int", columnNameWithSingleQuote)))
+            using (var table = new FirebirdTestTable(Processor, $"{columnNameWithSingleQuote} int"))
                 Processor.ColumnExists(null, table.Name, "\"i'd\"").ShouldBeTrue();
         }
 
diff --git a/test/FluentMigrator.Tests/Integration/Processors/Firebird/FirebirdConstraintTests.cs b/test/FluentMigrator.Tests/Integration/Processors/Firebird/FirebirdConstraintTests.cs
index c9709eb8..85148d1e 100644
--- a/test/FluentMigrator.Tests/Integration/Processors/Firebird/FirebirdConstraintTests.cs
+++ b/test/FluentMigrator.Tests/Integration/Processors/Firebird/FirebirdConstraintTests.cs
@@ -26,7 +26,7 @@ namespace FluentMigrator.Tests.Integration.Processors.Firebird
         [Test]
         public override void CallingConstraintExistsCanAcceptConstraintNameWithSingleQuote()
         {
-            using (var table = new FirebirdTestTable(Processor, "id int", string.Format("wibble int CONSTRAINT {0} CHECK(wibble > 0)", "\"c'1\"")))
+            using (var table = new FirebirdTestTable(Processor, "id int", $"wibble int CONSTRAINT {"\"c'1\""} CHECK(wibble > 0)"))
                 Processor.ConstraintExists(null, table.Name, "\"c'1\"").ShouldBeTrue();
         }
 
diff --git a/test/FluentMigrator.Tests/Integration/Processors/Firebird/FirebirdProcessorTests.cs b/test/FluentMigrator.Tests/Integration/Processors/Firebird/FirebirdProcessorTests.cs
index ace8e198..e2c117dc 100644
--- a/test/FluentMigrator.Tests/Integration/Processors/Firebird/FirebirdProcessorTests.cs
+++ b/test/FluentMigrator.Tests/Integration/Processors/Firebird/FirebirdProcessorTests.cs
@@ -92,7 +92,7 @@ namespace FluentMigrator.Tests.Integration.Processors.Firebird
                 using (var cmd = table.Connection.CreateCommand())
                 {
                     cmd.Transaction = table.Transaction;
-                    cmd.CommandText = string.Format("INSERT INTO {0} (id) VALUES ({1})", Quoter.QuoteTableName(table.Name), i);
+                    cmd.CommandText = $"INSERT INTO {Quoter.QuoteTableName(table.Name)} (id) VALUES ({i})";
                     cmd.ExecuteNonQuery();
                 }
             }
@@ -221,8 +221,8 @@ namespace FluentMigrator.Tests.Integration.Processors.Firebird
                     Column = { Name = "id", IsIdentity = true, Type = DbType.Int64 }
                 });
                 Processor.ColumnExists(string.Empty, table.Name, "id").ShouldBeTrue();
-                Processor.SequenceExists(string.Empty, string.Format("gen_{0}_id", table.Name)).ShouldBeTrue();
-                Processor.TriggerExists(string.Empty, table.Name, string.Format("gen_id_{0}_id", table.Name)).ShouldBeTrue();
+                Processor.SequenceExists(string.Empty, $"gen_{table.Name}_id").ShouldBeTrue();
+                Processor.TriggerExists(string.Empty, table.Name, $"gen_id_{table.Name}_id").ShouldBeTrue();
             }
         }
 
@@ -237,8 +237,8 @@ namespace FluentMigrator.Tests.Integration.Processors.Firebird
                     Column = { Name = "id", IsIdentity = true, Type = DbType.Int64 }
                 });
                 Processor.ColumnExists(string.Empty, table.Name, "id").ShouldBeTrue();
-                Processor.SequenceExists(string.Empty, string.Format("gen_{0}_id", table.Name)).ShouldBeTrue();
-                Processor.TriggerExists(string.Empty, table.Name, string.Format("gen_id_{0}_id", table.Name)).ShouldBeTrue();
+                Processor.SequenceExists(string.Empty, $"gen_{table.Name}_id").ShouldBeTrue();
+                Processor.TriggerExists(string.Empty, table.Name, $"gen_id_{table.Name}_id").ShouldBeTrue();
 
                 Processor.Process(new DeleteColumnExpression
                 {
@@ -246,8 +246,8 @@ namespace FluentMigrator.Tests.Integration.Processors.Firebird
                     ColumnNames = { "id" }
                 });
                 Processor.ColumnExists(string.Empty, table.Name, "id").ShouldBeFalse();
-                Processor.SequenceExists(string.Empty, string.Format("gen_{0}_id", table.Name)).ShouldBeFalse();
-                Processor.TriggerExists(string.Empty, table.Name, string.Format("gen_id_{0}_id", table.Name)).ShouldBeFalse();
+                Processor.SequenceExists(string.Empty, $"gen_{table.Name}_id").ShouldBeFalse();
+                Processor.TriggerExists(string.Empty, table.Name, $"gen_id_{table.Name}_id").ShouldBeFalse();
             }
         }
 
@@ -262,8 +262,8 @@ namespace FluentMigrator.Tests.Integration.Processors.Firebird
                     Column = { Name = "id", IsIdentity = false, Type = DbType.Int64 }
                 });
                 Processor.ColumnExists(string.Empty, table.Name, "id").ShouldBeTrue();
-                Processor.SequenceExists(string.Empty, string.Format("gen_{0}_id", table.Name)).ShouldBeFalse();
-                Processor.TriggerExists(string.Empty, table.Name, string.Format("gen_id_{0}_id", table.Name)).ShouldBeFalse();
+                Processor.SequenceExists(string.Empty, $"gen_{table.Name}_id").ShouldBeFalse();
+                Processor.TriggerExists(string.Empty, table.Name, $"gen_id_{table.Name}_id").ShouldBeFalse();
 
                 Processor.Process(new AlterColumnExpression
                 {
@@ -271,8 +271,8 @@ namespace FluentMigrator.Tests.Integration.Processors.Firebird
                     Column = { Name = "id", IsIdentity = true, Type = DbType.Int64 }
                 });
                 Processor.ColumnExists(string.Empty, table.Name, "id").ShouldBeTrue();
-                Processor.SequenceExists(string.Empty, string.Format("gen_{0}_id", table.Name)).ShouldBeTrue();
-                Processor.TriggerExists(string.Empty, table.Name, string.Format("gen_id_{0}_id", table.Name)).ShouldBeTrue();
+                Processor.SequenceExists(string.Empty, $"gen_{table.Name}_id").ShouldBeTrue();
+                Processor.TriggerExists(string.Empty, table.Name, $"gen_id_{table.Name}_id").ShouldBeTrue();
             }
         }
 
@@ -287,8 +287,8 @@ namespace FluentMigrator.Tests.Integration.Processors.Firebird
                     Column = { Name = "id", IsIdentity = true, Type = DbType.Int64 }
                 });
                 Processor.ColumnExists(string.Empty, table.Name, "id").ShouldBeTrue();
-                Processor.SequenceExists(string.Empty, string.Format("gen_{0}_id", table.Name)).ShouldBeTrue();
-                Processor.TriggerExists(string.Empty, table.Name, string.Format("gen_id_{0}_id", table.Name)).ShouldBeTrue();
+                Processor.SequenceExists(string.Empty, $"gen_{table.Name}_id").ShouldBeTrue();
+                Processor.TriggerExists(string.Empty, table.Name, $"gen_id_{table.Name}_id").ShouldBeTrue();
 
                 Processor.Process(new AlterColumnExpression
                 {
@@ -296,8 +296,8 @@ namespace FluentMigrator.Tests.Integration.Processors.Firebird
                     Column = { Name = "id", IsIdentity = false, Type = DbType.Int64 }
                 });
                 Processor.ColumnExists(string.Empty, table.Name, "id").ShouldBeTrue();
-                Processor.SequenceExists(string.Empty, string.Format("gen_{0}_id", table.Name)).ShouldBeFalse();
-                Processor.TriggerExists(string.Empty, table.Name, string.Format("gen_id_{0}_id", table.Name)).ShouldBeFalse();
+                Processor.SequenceExists(string.Empty, $"gen_{table.Name}_id").ShouldBeFalse();
+                Processor.TriggerExists(string.Empty, table.Name, $"gen_id_{table.Name}_id").ShouldBeFalse();
             }
         }
 
diff --git a/test/FluentMigrator.Tests/Integration/Processors/SqlServer/SqlServer2016/SqlServerColumnTests.cs b/test/FluentMigrator.Tests/Integration/Processors/SqlServer/SqlServer2016/SqlServerColumnTests.cs
index 0798935b..5bdc7363 100644
--- a/test/FluentMigrator.Tests/Integration/Processors/SqlServer/SqlServer2016/SqlServerColumnTests.cs
+++ b/test/FluentMigrator.Tests/Integration/Processors/SqlServer/SqlServer2016/SqlServerColumnTests.cs
@@ -44,7 +44,7 @@ namespace FluentMigrator.Tests.Integration.Processors.SqlServer.SqlServer2016
         public override void CallingColumnExistsCanAcceptColumnNameWithSingleQuote()
         {
             var columnNameWithSingleQuote = Quoter.Quote("i'd");
-            using (var table = new SqlServerTestTable(Processor, null, string.Format("{0} int", columnNameWithSingleQuote)))
+            using (var table = new SqlServerTestTable(Processor, null, $"{columnNameWithSingleQuote} int"))
                 Processor.ColumnExists(null, table.Name, "i'd").ShouldBeTrue();
         }
 
diff --git a/test/FluentMigrator.Tests/Unit/Announcers/AnnouncerTests.cs b/test/FluentMigrator.Tests/Unit/Announcers/AnnouncerTests.cs
index 599f8110..909a22fd 100644
--- a/test/FluentMigrator.Tests/Unit/Announcers/AnnouncerTests.cs
+++ b/test/FluentMigrator.Tests/Unit/Announcers/AnnouncerTests.cs
@@ -62,7 +62,7 @@ namespace FluentMigrator.Tests.Unit.Announcers
         public void Error_Should_Write()
         {
             var message = "TheMessage";
-            Mock.Get(_announcer).Setup(a => a.Write(string.Format("!!! {0}", message), true)).Verifiable();
+            Mock.Get(_announcer).Setup(a => a.Write($"!!! {message}", true)).Verifiable();
 
             _announcer.Error(message);
 
diff --git a/test/FluentMigrator.Tests/Unit/Announcers/TextWriterWithGoAnnouncerTests.cs b/test/FluentMigrator.Tests/Unit/Announcers/TextWriterWithGoAnnouncerTests.cs
index 8216ada3..7430e723 100644
--- a/test/FluentMigrator.Tests/Unit/Announcers/TextWriterWithGoAnnouncerTests.cs
+++ b/test/FluentMigrator.Tests/Unit/Announcers/TextWriterWithGoAnnouncerTests.cs
@@ -59,7 +59,7 @@ namespace FluentMigrator.Tests.Unit.Announcers
             _announcer.ShowSql = false;
 
             _announcer.Sql("SQL");
-            Output.ShouldBe(string.Empty);
+string.IsNullOrEmpty(Output);
         }
 
         [Test]
diff --git a/test/FluentMigrator.Tests/Unit/Builders/Alter/AlterTableExpressionBuilderTests.cs b/test/FluentMigrator.Tests/Unit/Builders/Alter/AlterTableExpressionBuilderTests.cs
index 3fab8cd9..04863c56 100644
--- a/test/FluentMigrator.Tests/Unit/Builders/Alter/AlterTableExpressionBuilderTests.cs
+++ b/test/FluentMigrator.Tests/Unit/Builders/Alter/AlterTableExpressionBuilderTests.cs
@@ -280,7 +280,7 @@ namespace FluentMigrator.Tests.Unit.Builders.Alter
             builder.CurrentColumn = columnMock.Object;
             builder.WithDefaultValue(42);
 
-            Assert.That(expressions.Count(), Is.EqualTo(0));
+            Assert.That(expressions.Count, Is.EqualTo(0));
         }
 
         [Test]
@@ -298,7 +298,7 @@ namespace FluentMigrator.Tests.Unit.Builders.Alter
             builder.CurrentColumn = columnMock.Object;
             builder.WithDefaultValue(42);
 
-            Assert.That(expressions.Count(), Is.EqualTo(1));
+            Assert.That(expressions.Count, Is.EqualTo(1));
         }
 
         [Test]
@@ -333,7 +333,7 @@ namespace FluentMigrator.Tests.Unit.Builders.Alter
             builder.CurrentColumn = columnMock.Object;
             builder.WithDefault(SystemMethods.CurrentDateTime);
 
-            Assert.That(expressions.Count(), Is.EqualTo(0));
+            Assert.That(expressions.Count, Is.EqualTo(0));
         }
 
         [Test]
@@ -352,7 +352,7 @@ namespace FluentMigrator.Tests.Unit.Builders.Alter
             builder.CurrentColumn = columnMock.Object;
             builder.WithDefault(SystemMethods.CurrentDateTime);
 
-            Assert.That(expressions.Count(), Is.EqualTo(1));
+            Assert.That(expressions.Count, Is.EqualTo(1));
         }
 
         [Test]
diff --git a/test/FluentMigrator.Tests/Unit/DefaultMigrationInformationLoaderTests.cs b/test/FluentMigrator.Tests/Unit/DefaultMigrationInformationLoaderTests.cs
index 14e03dba..e065f0e8 100644
--- a/test/FluentMigrator.Tests/Unit/DefaultMigrationInformationLoaderTests.cs
+++ b/test/FluentMigrator.Tests/Unit/DefaultMigrationInformationLoaderTests.cs
@@ -69,7 +69,7 @@ namespace FluentMigrator.Tests.Unit
 
             var migrationList = loader.LoadMigrations();
             migrationList.Select(x => x.Value.Migration.GetType()).ShouldNotContain(typeof(VersionedMigration));
-            migrationList.Count().ShouldBeGreaterThan(0);
+            migrationList.Count.ShouldBeGreaterThan(0);
         }
 
         [Test]
@@ -220,7 +220,7 @@ namespace FluentMigrator.Tests.Unit
 
             var list = loader.LoadMigrations().ToList();
 
-            list.Count().ShouldBe(2);
+            list.Count.ShouldBe(2);
 
             list[0].Value.Migration.GetType().ShouldBe(typeof(DoesHandleTransactionLessMigrations.MigrationThatIsTransactionLess));
             list[0].Value.TransactionBehavior.ShouldBe(TransactionBehavior.None);
@@ -242,7 +242,7 @@ namespace FluentMigrator.Tests.Unit
             SortedList<long, IMigrationInfo> migrationList = loader.LoadMigrations();
 
             //if this works, there will be at least one migration class because i've included on in this code file
-            int count = migrationList.Count();
+            int count = migrationList.Count;
             count.ShouldBeGreaterThan(0);
         }
 
@@ -256,7 +256,7 @@ namespace FluentMigrator.Tests.Unit
 
             var migrationList = loader.LoadMigrations();
             migrationList.Select(x => x.Value.Migration.GetType()).ShouldNotContain(typeof(VersionedMigration));
-            migrationList.Count().ShouldBeGreaterThan(0);
+            migrationList.Count.ShouldBeGreaterThan(0);
         }
 
         [Test]
@@ -398,7 +398,7 @@ namespace FluentMigrator.Tests.Unit
 
             var list = loader.LoadMigrations().ToList();
 
-            list.Count().ShouldBe(2);
+            list.Count.ShouldBe(2);
 
             list[0].Value.Migration.GetType().ShouldBe(typeof(DoesHandleTransactionLessMigrations.MigrationThatIsTransactionLess));
             list[0].Value.TransactionBehavior.ShouldBe(TransactionBehavior.None);
diff --git a/test/FluentMigrator.Tests/Unit/Generators/BaseDescriptionGeneratorTests.cs b/test/FluentMigrator.Tests/Unit/Generators/BaseDescriptionGeneratorTests.cs
index 79d60221..fb4065f2 100644
--- a/test/FluentMigrator.Tests/Unit/Generators/BaseDescriptionGeneratorTests.cs
+++ b/test/FluentMigrator.Tests/Unit/Generators/BaseDescriptionGeneratorTests.cs
@@ -50,8 +50,7 @@ namespace FluentMigrator.Tests.Unit.Generators
         {
             var alterTableExpression = GeneratorTestHelper.GetAlterTableAutoIncrementColumnExpression();
             var result = DescriptionGenerator.GenerateDescriptionStatement(alterTableExpression);
-
-            result.ShouldBe(string.Empty);
+string.IsNullOrEmpty(result);
         }
 
         [Test]
@@ -59,8 +58,7 @@ namespace FluentMigrator.Tests.Unit.Generators
         {
             var createColumnExpression = GeneratorTestHelper.GetCreateColumnExpression();
             var result = DescriptionGenerator.GenerateDescriptionStatement(createColumnExpression);
-
-            result.ShouldBe(string.Empty);
+string.IsNullOrEmpty(result);
         }
 
         [Test]
@@ -68,8 +66,7 @@ namespace FluentMigrator.Tests.Unit.Generators
         {
             var alterColumnExpression = GeneratorTestHelper.GetAlterColumnExpression();
             var result = DescriptionGenerator.GenerateDescriptionStatement(alterColumnExpression);
-
-            result.ShouldBe(string.Empty);
+string.IsNullOrEmpty(result);
         }
 
         [Test]
diff --git a/test/FluentMigrator.Tests/Unit/Generators/Db2/Db2ColumnTests.cs b/test/FluentMigrator.Tests/Unit/Generators/Db2/Db2ColumnTests.cs
index 99b86c4c..176f3b97 100644
--- a/test/FluentMigrator.Tests/Unit/Generators/Db2/Db2ColumnTests.cs
+++ b/test/FluentMigrator.Tests/Unit/Generators/Db2/Db2ColumnTests.cs
@@ -86,7 +86,7 @@ namespace FluentMigrator.Tests.Unit.Generators.Db2
             expression.SchemaName = "TestSchema";
 
             var result = Generator.Generate(expression);
-            result.ShouldBe(string.Empty);
+string.IsNullOrEmpty(result);
         }
 
         [Test]
@@ -95,7 +95,7 @@ namespace FluentMigrator.Tests.Unit.Generators.Db2
             var expression = GeneratorTestHelper.GetAlterColumnAddAutoIncrementExpression();
 
             var result = Generator.Generate(expression);
-            result.ShouldBe(string.Empty);
+string.IsNullOrEmpty(result);
         }
 
         [Test]
@@ -200,7 +200,7 @@ namespace FluentMigrator.Tests.Unit.Generators.Db2
             var expression = GeneratorTestHelper.GetRenameColumnExpression();
 
             var result = Generator.Generate(expression);
-            result.ShouldBe(string.Empty);
+string.IsNullOrEmpty(result);
         }
 
         [Test]
@@ -209,7 +209,7 @@ namespace FluentMigrator.Tests.Unit.Generators.Db2
             var expression = GeneratorTestHelper.GetRenameColumnExpression();
 
             var result = Generator.Generate(expression);
-            result.ShouldBe(string.Empty);
+string.IsNullOrEmpty(result);
         }
 
         [SetUp]
diff --git a/test/FluentMigrator.Tests/Unit/Generators/Db2/Db2ConstraintTests.cs b/test/FluentMigrator.Tests/Unit/Generators/Db2/Db2ConstraintTests.cs
index 6f8b1d8e..2f4a0a69 100644
--- a/test/FluentMigrator.Tests/Unit/Generators/Db2/Db2ConstraintTests.cs
+++ b/test/FluentMigrator.Tests/Unit/Generators/Db2/Db2ConstraintTests.cs
@@ -188,7 +188,7 @@ namespace FluentMigrator.Tests.Unit.Generators.Db2
             expression.ForeignKey.OnDelete = rule;
 
             var result = Generator.Generate(expression);
-            result.ShouldBe(string.Format("ALTER TABLE TestTable1 ADD CONSTRAINT FK_Test FOREIGN KEY (TestColumn1) REFERENCES TestTable2 (TestColumn2) ON DELETE {0}", output));
+            result.ShouldBe($"ALTER TABLE TestTable1 ADD CONSTRAINT FK_Test FOREIGN KEY (TestColumn1) REFERENCES TestTable2 (TestColumn2) ON DELETE {output}");
         }
 
         [TestCase(Rule.None, "NO ACTION")]
diff --git a/test/FluentMigrator.Tests/Unit/Generators/Db2/Db2DataTests.cs b/test/FluentMigrator.Tests/Unit/Generators/Db2/Db2DataTests.cs
index b08388f3..d2b4a554 100644
--- a/test/FluentMigrator.Tests/Unit/Generators/Db2/Db2DataTests.cs
+++ b/test/FluentMigrator.Tests/Unit/Generators/Db2/Db2DataTests.cs
@@ -119,7 +119,7 @@ namespace FluentMigrator.Tests.Unit.Generators.Db2
             expression.SchemaName = "TestSchema";
 
             var result = Generator.Generate(expression);
-            result.ShouldBe(string.Format("INSERT INTO TestSchema.TestTable1 (guid) VALUES ('{0}')", GeneratorTestHelper.TestGuid));
+            result.ShouldBe($"INSERT INTO TestSchema.TestTable1 (guid) VALUES ('{GeneratorTestHelper.TestGuid}')");
         }
 
         [Test]
@@ -128,7 +128,7 @@ namespace FluentMigrator.Tests.Unit.Generators.Db2
             var expression = GeneratorTestHelper.GetInsertGUIDExpression();
 
             var result = Generator.Generate(expression);
-            result.ShouldBe(string.Format("INSERT INTO TestTable1 (guid) VALUES ('{0}')", GeneratorTestHelper.TestGuid));
+            result.ShouldBe($"INSERT INTO TestTable1 (guid) VALUES ('{GeneratorTestHelper.TestGuid}')");
         }
 
         [Test]
diff --git a/test/FluentMigrator.Tests/Unit/Generators/Db2/Db2SchemaTests.cs b/test/FluentMigrator.Tests/Unit/Generators/Db2/Db2SchemaTests.cs
index 1bfba2d5..2de7555f 100644
--- a/test/FluentMigrator.Tests/Unit/Generators/Db2/Db2SchemaTests.cs
+++ b/test/FluentMigrator.Tests/Unit/Generators/Db2/Db2SchemaTests.cs
@@ -24,7 +24,7 @@ namespace FluentMigrator.Tests.Unit.Generators.Db2
             var expression = GeneratorTestHelper.GetAlterSchemaExpression();
 
             var result = Generator.Generate(expression);
-            result.ShouldBe(string.Empty);
+string.IsNullOrEmpty(result);
         }
 
         [Test]
diff --git a/test/FluentMigrator.Tests/Unit/Generators/Firebird/FirebirdColumnTests.cs b/test/FluentMigrator.Tests/Unit/Generators/Firebird/FirebirdColumnTests.cs
index 044e1110..c6fa74a5 100644
--- a/test/FluentMigrator.Tests/Unit/Generators/Firebird/FirebirdColumnTests.cs
+++ b/test/FluentMigrator.Tests/Unit/Generators/Firebird/FirebirdColumnTests.cs
@@ -64,7 +64,7 @@ namespace FluentMigrator.Tests.Unit.Generators.Firebird
             expression.SchemaName = "TestSchema";
 
             var result = Generator.Generate(expression);
-            result.ShouldBe(string.Empty);
+string.IsNullOrEmpty(result);
         }
 
         [Test]
@@ -73,7 +73,7 @@ namespace FluentMigrator.Tests.Unit.Generators.Firebird
             var expression = GeneratorTestHelper.GetAlterColumnExpression();
 
             var result = Generator.Generate(expression);
-            result.ShouldBe(string.Empty);
+string.IsNullOrEmpty(result);
         }
 
         [Test]
@@ -83,7 +83,7 @@ namespace FluentMigrator.Tests.Unit.Generators.Firebird
             expression.SchemaName = "TestSchema";
 
             var result = Generator.Generate(expression);
-            result.ShouldBe(string.Empty);
+string.IsNullOrEmpty(result);
         }
 
         [Test]
@@ -92,7 +92,7 @@ namespace FluentMigrator.Tests.Unit.Generators.Firebird
             var expression = GeneratorTestHelper.GetAlterColumnAddAutoIncrementExpression();
 
             var result = Generator.Generate(expression);
-            result.ShouldBe(string.Empty);
+string.IsNullOrEmpty(result);
         }
 
         [Test]
diff --git a/test/FluentMigrator.Tests/Unit/Generators/Firebird/FirebirdConstraintsTests.cs b/test/FluentMigrator.Tests/Unit/Generators/Firebird/FirebirdConstraintsTests.cs
index 9b165178..94c038b6 100644
--- a/test/FluentMigrator.Tests/Unit/Generators/Firebird/FirebirdConstraintsTests.cs
+++ b/test/FluentMigrator.Tests/Unit/Generators/Firebird/FirebirdConstraintsTests.cs
@@ -152,7 +152,7 @@ namespace FluentMigrator.Tests.Unit.Generators.Firebird
             expression.ForeignKey.OnDelete = rule;
 
             var result = Generator.Generate(expression);
-            result.ShouldBe(string.Format("ALTER TABLE TestTable1 ADD CONSTRAINT FK_Test FOREIGN KEY (TestColumn1) REFERENCES TestTable2 (TestColumn2) ON DELETE {0}", output));
+            result.ShouldBe($"ALTER TABLE TestTable1 ADD CONSTRAINT FK_Test FOREIGN KEY (TestColumn1) REFERENCES TestTable2 (TestColumn2) ON DELETE {output}");
         }
 
         [TestCase(Rule.SetDefault, "SET DEFAULT"), TestCase(Rule.SetNull, "SET NULL"), TestCase(Rule.Cascade, "CASCADE")]
@@ -162,7 +162,7 @@ namespace FluentMigrator.Tests.Unit.Generators.Firebird
             expression.ForeignKey.OnUpdate = rule;
 
             var result = Generator.Generate(expression);
-            result.ShouldBe(string.Format("ALTER TABLE TestTable1 ADD CONSTRAINT FK_Test FOREIGN KEY (TestColumn1) REFERENCES TestTable2 (TestColumn2) ON UPDATE {0}", output));
+            result.ShouldBe($"ALTER TABLE TestTable1 ADD CONSTRAINT FK_Test FOREIGN KEY (TestColumn1) REFERENCES TestTable2 (TestColumn2) ON UPDATE {output}");
         }
 
         [Test]
diff --git a/test/FluentMigrator.Tests/Unit/Generators/Firebird/FirebirdDataTests.cs b/test/FluentMigrator.Tests/Unit/Generators/Firebird/FirebirdDataTests.cs
index db476e93..5999f8ae 100644
--- a/test/FluentMigrator.Tests/Unit/Generators/Firebird/FirebirdDataTests.cs
+++ b/test/FluentMigrator.Tests/Unit/Generators/Firebird/FirebirdDataTests.cs
@@ -115,7 +115,7 @@ namespace FluentMigrator.Tests.Unit.Generators.Firebird
             expression.SchemaName = "TestSchema";
 
             var result = Generator.Generate(expression);
-            result.ShouldBe(string.Format("INSERT INTO TestTable1 (guid) VALUES ('{0}')", GeneratorTestHelper.TestGuid));
+            result.ShouldBe($"INSERT INTO TestTable1 (guid) VALUES ('{GeneratorTestHelper.TestGuid}')");
         }
 
         [Test]
@@ -124,7 +124,7 @@ namespace FluentMigrator.Tests.Unit.Generators.Firebird
             var expression = GeneratorTestHelper.GetInsertGUIDExpression();
 
             var result = Generator.Generate(expression);
-            result.ShouldBe(string.Format("INSERT INTO TestTable1 (guid) VALUES ('{0}')", GeneratorTestHelper.TestGuid));
+            result.ShouldBe($"INSERT INTO TestTable1 (guid) VALUES ('{GeneratorTestHelper.TestGuid}')");
         }
 
         [Test]
diff --git a/test/FluentMigrator.Tests/Unit/Generators/Firebird/FirebirdQuoterTests.cs b/test/FluentMigrator.Tests/Unit/Generators/Firebird/FirebirdQuoterTests.cs
index 67beef1c..8fa71b76 100644
--- a/test/FluentMigrator.Tests/Unit/Generators/Firebird/FirebirdQuoterTests.cs
+++ b/test/FluentMigrator.Tests/Unit/Generators/Firebird/FirebirdQuoterTests.cs
@@ -64,7 +64,7 @@ namespace FluentMigrator.Tests.Unit.Generators.Firebird
         public void Quote_ArgIsFirebirdKeyword_ArgShouldBeQuoted(string quoteArg)
         {
             var actual = new FirebirdQuoter(false).Quote(quoteArg);
-            var expected = string.Format("\"{0}\"", quoteArg);
+            var expected = $"\"{quoteArg}\"";
             actual.ShouldBe(expected);
         }
 
@@ -89,7 +89,7 @@ namespace FluentMigrator.Tests.Unit.Generators.Firebird
         public void Quote_ArgBeginsWithUnderscore_ArgShouldBeQuoted(string quoteArg)
         {
             var actual = new FirebirdQuoter(false).Quote(quoteArg);
-            actual.ShouldBe(string.Format("\"{0}\"", quoteArg));
+            actual.ShouldBe($"\"{quoteArg}\"");
         }
 
         [Test, SetCulture("tr-TR")]
@@ -104,7 +104,7 @@ namespace FluentMigrator.Tests.Unit.Generators.Firebird
         {
             var argInLowerCase = quoteArg.ToLower();
             var actual = new FirebirdQuoter(false).Quote(argInLowerCase);
-            var expected = string.Format("\"{0}\"", argInLowerCase);
+            var expected = $"\"{argInLowerCase}\"";
             actual.ShouldBe(expected);
         }
     }
diff --git a/test/FluentMigrator.Tests/Unit/Generators/Firebird/FirebirdTableTests.cs b/test/FluentMigrator.Tests/Unit/Generators/Firebird/FirebirdTableTests.cs
index c40dd541..e093b544 100644
--- a/test/FluentMigrator.Tests/Unit/Generators/Firebird/FirebirdTableTests.cs
+++ b/test/FluentMigrator.Tests/Unit/Generators/Firebird/FirebirdTableTests.cs
@@ -244,7 +244,7 @@ namespace FluentMigrator.Tests.Unit.Generators.Firebird
             expression.SchemaName = "TestSchema";
 
             var result = Generator.Generate(expression);
-            result.ShouldBe(string.Empty);
+string.IsNullOrEmpty(result);
         }
 
         [Test]
@@ -253,7 +253,7 @@ namespace FluentMigrator.Tests.Unit.Generators.Firebird
             var expression = GeneratorTestHelper.GetRenameTableExpression();
 
             var result = Generator.Generate(expression);
-            result.ShouldBe(string.Empty);
+string.IsNullOrEmpty(result);
         }
     }
 }
diff --git a/test/FluentMigrator.Tests/Unit/Generators/Hana/HanaDataTests.cs b/test/FluentMigrator.Tests/Unit/Generators/Hana/HanaDataTests.cs
index b3e444cf..1bbfbea8 100644
--- a/test/FluentMigrator.Tests/Unit/Generators/Hana/HanaDataTests.cs
+++ b/test/FluentMigrator.Tests/Unit/Generators/Hana/HanaDataTests.cs
@@ -134,7 +134,7 @@ namespace FluentMigrator.Tests.Unit.Generators.Hana
             expression.SchemaName = "TestSchema";
 
             var result = Generator.Generate(expression);
-            result.ShouldBe(string.Format("INSERT INTO \"TestTable1\" (\"guid\") VALUES ('{0}');", GeneratorTestHelper.TestGuid));
+            result.ShouldBe($"INSERT INTO \"TestTable1\" (\"guid\") VALUES ('{GeneratorTestHelper.TestGuid}');");
         }
 
         [Test]
@@ -143,7 +143,7 @@ namespace FluentMigrator.Tests.Unit.Generators.Hana
             var expression = GeneratorTestHelper.GetInsertGUIDExpression();
 
             var result = Generator.Generate(expression);
-            result.ShouldBe(string.Format("INSERT INTO \"TestTable1\" (\"guid\") VALUES ('{0}');", GeneratorTestHelper.TestGuid));
+            result.ShouldBe($"INSERT INTO \"TestTable1\" (\"guid\") VALUES ('{GeneratorTestHelper.TestGuid}');");
         }
 
         [Test]
diff --git a/test/FluentMigrator.Tests/Unit/Generators/Jet/JetColumnTests.cs b/test/FluentMigrator.Tests/Unit/Generators/Jet/JetColumnTests.cs
index b5dce675..959460d3 100644
--- a/test/FluentMigrator.Tests/Unit/Generators/Jet/JetColumnTests.cs
+++ b/test/FluentMigrator.Tests/Unit/Generators/Jet/JetColumnTests.cs
@@ -191,7 +191,7 @@ namespace FluentMigrator.Tests.Unit.Generators.Jet
             expression.SchemaName = "TestSchema";
 
             var result = Generator.Generate(expression);
-            result.ShouldBe(string.Empty);
+string.IsNullOrEmpty(result);
         }
 
         [Test]
@@ -200,7 +200,7 @@ namespace FluentMigrator.Tests.Unit.Generators.Jet
             var expression = GeneratorTestHelper.GetRenameColumnExpression();
 
             var result = Generator.Generate(expression);
-            result.ShouldBe(string.Empty);
+string.IsNullOrEmpty(result);
         }
     }
 }
diff --git a/test/FluentMigrator.Tests/Unit/Generators/Jet/JetConstraintsTests.cs b/test/FluentMigrator.Tests/Unit/Generators/Jet/JetConstraintsTests.cs
index fe326233..b6fdb711 100644
--- a/test/FluentMigrator.Tests/Unit/Generators/Jet/JetConstraintsTests.cs
+++ b/test/FluentMigrator.Tests/Unit/Generators/Jet/JetConstraintsTests.cs
@@ -181,7 +181,7 @@ namespace FluentMigrator.Tests.Unit.Generators.Jet
             expression.ForeignKey.OnDelete = rule;
 
             var result = Generator.Generate(expression);
-            result.ShouldBe(string.Format("ALTER TABLE [TestTable1] ADD CONSTRAINT [FK_Test] FOREIGN KEY ([TestColumn1]) REFERENCES [TestTable2] ([TestColumn2]) ON DELETE {0}", output));
+            result.ShouldBe($"ALTER TABLE [TestTable1] ADD CONSTRAINT [FK_Test] FOREIGN KEY ([TestColumn1]) REFERENCES [TestTable2] ([TestColumn2]) ON DELETE {output}");
         }
 
         [TestCase(Rule.SetDefault, "SET DEFAULT"), TestCase(Rule.SetNull, "SET NULL"), TestCase(Rule.Cascade, "CASCADE")]
@@ -191,7 +191,7 @@ namespace FluentMigrator.Tests.Unit.Generators.Jet
             expression.ForeignKey.OnUpdate = rule;
 
             var result = Generator.Generate(expression);
-            result.ShouldBe(string.Format("ALTER TABLE [TestTable1] ADD CONSTRAINT [FK_Test] FOREIGN KEY ([TestColumn1]) REFERENCES [TestTable2] ([TestColumn2]) ON UPDATE {0}", output));
+            result.ShouldBe($"ALTER TABLE [TestTable1] ADD CONSTRAINT [FK_Test] FOREIGN KEY ([TestColumn1]) REFERENCES [TestTable2] ([TestColumn2]) ON UPDATE {output}");
         }
 
         [Test]
diff --git a/test/FluentMigrator.Tests/Unit/Generators/Jet/JetDataTests.cs b/test/FluentMigrator.Tests/Unit/Generators/Jet/JetDataTests.cs
index 0318213e..1ec314f7 100644
--- a/test/FluentMigrator.Tests/Unit/Generators/Jet/JetDataTests.cs
+++ b/test/FluentMigrator.Tests/Unit/Generators/Jet/JetDataTests.cs
@@ -113,7 +113,7 @@ namespace FluentMigrator.Tests.Unit.Generators.Jet
             expression.SchemaName = "TestSchema";
 
             var result = Generator.Generate(expression);
-            result.ShouldBe(string.Format("INSERT INTO [TestTable1] ([guid]) VALUES ('{0}')", GeneratorTestHelper.TestGuid.ToString()));
+            result.ShouldBe($"INSERT INTO [TestTable1] ([guid]) VALUES ('{GeneratorTestHelper.TestGuid.ToString()}')");
         }
 
         [Test]
@@ -122,7 +122,7 @@ namespace FluentMigrator.Tests.Unit.Generators.Jet
             var expression = GeneratorTestHelper.GetInsertGUIDExpression();
 
             var result = Generator.Generate(expression);
-            result.ShouldBe(string.Format("INSERT INTO [TestTable1] ([guid]) VALUES ('{0}')", GeneratorTestHelper.TestGuid.ToString()));
+            result.ShouldBe($"INSERT INTO [TestTable1] ([guid]) VALUES ('{GeneratorTestHelper.TestGuid.ToString()}')");
         }
 
         [Test]
diff --git a/test/FluentMigrator.Tests/Unit/Generators/Jet/JetSchemaTests.cs b/test/FluentMigrator.Tests/Unit/Generators/Jet/JetSchemaTests.cs
index 8a8d9f38..01987727 100644
--- a/test/FluentMigrator.Tests/Unit/Generators/Jet/JetSchemaTests.cs
+++ b/test/FluentMigrator.Tests/Unit/Generators/Jet/JetSchemaTests.cs
@@ -22,7 +22,7 @@ namespace FluentMigrator.Tests.Unit.Generators.Jet
             var expression = GeneratorTestHelper.GetAlterSchemaExpression();
 
             var result = Generator.Generate(expression);
-            result.ShouldBe(string.Empty);
+string.IsNullOrEmpty(result);
         }
 
         [Test]
@@ -31,7 +31,7 @@ namespace FluentMigrator.Tests.Unit.Generators.Jet
             var expression = GeneratorTestHelper.GetCreateSchemaExpression();
 
             var result = Generator.Generate(expression);
-            result.ShouldBe(string.Empty);
+string.IsNullOrEmpty(result);
         }
 
         [Test]
@@ -40,7 +40,7 @@ namespace FluentMigrator.Tests.Unit.Generators.Jet
             var expression = GeneratorTestHelper.GetDeleteSchemaExpression();
 
             var result = Generator.Generate(expression);
-            result.ShouldBe(string.Empty);
+string.IsNullOrEmpty(result);
         }
     }
 }
diff --git a/test/FluentMigrator.Tests/Unit/Generators/Jet/JetTableTests.cs b/test/FluentMigrator.Tests/Unit/Generators/Jet/JetTableTests.cs
index 2fa6e5a3..5cb3a1bc 100644
--- a/test/FluentMigrator.Tests/Unit/Generators/Jet/JetTableTests.cs
+++ b/test/FluentMigrator.Tests/Unit/Generators/Jet/JetTableTests.cs
@@ -240,7 +240,7 @@ namespace FluentMigrator.Tests.Unit.Generators.Jet
             expression.SchemaName = "TestSchema";
 
             var result = Generator.Generate(expression);
-            result.ShouldBe(string.Empty);
+string.IsNullOrEmpty(result);
         }
 
         [Test]
@@ -249,7 +249,7 @@ namespace FluentMigrator.Tests.Unit.Generators.Jet
             var expression = GeneratorTestHelper.GetRenameColumnExpression();
 
             var result = Generator.Generate(expression);
-            result.ShouldBe(string.Empty);
+string.IsNullOrEmpty(result);
         }
     }
 }
diff --git a/test/FluentMigrator.Tests/Unit/Generators/MySql4/MySql4ConstraintsTests.cs b/test/FluentMigrator.Tests/Unit/Generators/MySql4/MySql4ConstraintsTests.cs
index 3af3327e..e86cee28 100644
--- a/test/FluentMigrator.Tests/Unit/Generators/MySql4/MySql4ConstraintsTests.cs
+++ b/test/FluentMigrator.Tests/Unit/Generators/MySql4/MySql4ConstraintsTests.cs
@@ -181,7 +181,7 @@ namespace FluentMigrator.Tests.Unit.Generators.MySql4
             expression.ForeignKey.OnDelete = rule;
 
             var result = Generator.Generate(expression);
-            result.ShouldBe(string.Format("ALTER TABLE `TestTable1` ADD CONSTRAINT `FK_Test` FOREIGN KEY (`TestColumn1`) REFERENCES `TestTable2` (`TestColumn2`) ON DELETE {0}", output));
+            result.ShouldBe($"ALTER TABLE `TestTable1` ADD CONSTRAINT `FK_Test` FOREIGN KEY (`TestColumn1`) REFERENCES `TestTable2` (`TestColumn2`) ON DELETE {output}");
         }
 
         [TestCase(Rule.SetDefault, "SET DEFAULT"), TestCase(Rule.SetNull, "SET NULL"), TestCase(Rule.Cascade, "CASCADE")]
@@ -191,7 +191,7 @@ namespace FluentMigrator.Tests.Unit.Generators.MySql4
             expression.ForeignKey.OnUpdate = rule;
 
             var result = Generator.Generate(expression);
-            result.ShouldBe(string.Format("ALTER TABLE `TestTable1` ADD CONSTRAINT `FK_Test` FOREIGN KEY (`TestColumn1`) REFERENCES `TestTable2` (`TestColumn2`) ON UPDATE {0}", output));
+            result.ShouldBe($"ALTER TABLE `TestTable1` ADD CONSTRAINT `FK_Test` FOREIGN KEY (`TestColumn1`) REFERENCES `TestTable2` (`TestColumn2`) ON UPDATE {output}");
         }
 
         [Test]
diff --git a/test/FluentMigrator.Tests/Unit/Generators/MySql4/MySql4DataTests.cs b/test/FluentMigrator.Tests/Unit/Generators/MySql4/MySql4DataTests.cs
index 0d9966ad..14f8ef44 100644
--- a/test/FluentMigrator.Tests/Unit/Generators/MySql4/MySql4DataTests.cs
+++ b/test/FluentMigrator.Tests/Unit/Generators/MySql4/MySql4DataTests.cs
@@ -114,7 +114,7 @@ namespace FluentMigrator.Tests.Unit.Generators.MySql4
             expression.SchemaName = "TestSchema";
 
             var result = Generator.Generate(expression);
-            result.ShouldBe(string.Format("INSERT INTO `TestTable1` (`guid`) VALUES ('{0}')", GeneratorTestHelper.TestGuid.ToString()));
+            result.ShouldBe($"INSERT INTO `TestTable1` (`guid`) VALUES ('{GeneratorTestHelper.TestGuid.ToString()}')");
         }
 
         [Test]
@@ -123,7 +123,7 @@ namespace FluentMigrator.Tests.Unit.Generators.MySql4
             var expression = GeneratorTestHelper.GetInsertGUIDExpression();
 
             var result = Generator.Generate(expression);
-            result.ShouldBe(string.Format("INSERT INTO `TestTable1` (`guid`) VALUES ('{0}')", GeneratorTestHelper.TestGuid.ToString()));
+            result.ShouldBe($"INSERT INTO `TestTable1` (`guid`) VALUES ('{GeneratorTestHelper.TestGuid.ToString()}')");
         }
 
         [Test]
diff --git a/test/FluentMigrator.Tests/Unit/Generators/MySql4/MySql4SchemaTests.cs b/test/FluentMigrator.Tests/Unit/Generators/MySql4/MySql4SchemaTests.cs
index e2038e35..5a7178cc 100644
--- a/test/FluentMigrator.Tests/Unit/Generators/MySql4/MySql4SchemaTests.cs
+++ b/test/FluentMigrator.Tests/Unit/Generators/MySql4/MySql4SchemaTests.cs
@@ -23,7 +23,7 @@ namespace FluentMigrator.Tests.Unit.Generators.MySql4
             var expression = GeneratorTestHelper.GetAlterSchemaExpression();
 
             var result = Generator.Generate(expression);
-            result.ShouldBe(string.Empty);
+string.IsNullOrEmpty(result);
         }
 
         [Test]
@@ -32,7 +32,7 @@ namespace FluentMigrator.Tests.Unit.Generators.MySql4
             var expression = GeneratorTestHelper.GetCreateSchemaExpression();
 
             var result = Generator.Generate(expression);
-            result.ShouldBe(string.Empty);
+string.IsNullOrEmpty(result);
         }
 
         [Test]
@@ -41,7 +41,7 @@ namespace FluentMigrator.Tests.Unit.Generators.MySql4
             var expression = GeneratorTestHelper.GetDeleteSchemaExpression();
 
             var result = Generator.Generate(expression);
-            result.ShouldBe(string.Empty);
+string.IsNullOrEmpty(result);
         }
     }
 }
diff --git a/test/FluentMigrator.Tests/Unit/Generators/Oracle/OracleConstraintsTests.cs b/test/FluentMigrator.Tests/Unit/Generators/Oracle/OracleConstraintsTests.cs
index 00941cb8..a0a4139d 100644
--- a/test/FluentMigrator.Tests/Unit/Generators/Oracle/OracleConstraintsTests.cs
+++ b/test/FluentMigrator.Tests/Unit/Generators/Oracle/OracleConstraintsTests.cs
@@ -183,7 +183,7 @@ namespace FluentMigrator.Tests.Unit.Generators.Oracle
             expression.ForeignKey.OnDelete = rule;
 
             var result = Generator.Generate(expression);
-            result.ShouldBe(string.Format("ALTER TABLE TestTable1 ADD CONSTRAINT FK_Test FOREIGN KEY (TestColumn1) REFERENCES TestTable2 (TestColumn2) ON DELETE {0}", output));
+            result.ShouldBe($"ALTER TABLE TestTable1 ADD CONSTRAINT FK_Test FOREIGN KEY (TestColumn1) REFERENCES TestTable2 (TestColumn2) ON DELETE {output}");
         }
 
         [TestCase(Rule.SetDefault, "SET DEFAULT"), TestCase(Rule.SetNull, "SET NULL"), TestCase(Rule.Cascade, "CASCADE")]
@@ -193,7 +193,7 @@ namespace FluentMigrator.Tests.Unit.Generators.Oracle
             expression.ForeignKey.OnUpdate = rule;
 
             var result = Generator.Generate(expression);
-            result.ShouldBe(string.Format("ALTER TABLE TestTable1 ADD CONSTRAINT FK_Test FOREIGN KEY (TestColumn1) REFERENCES TestTable2 (TestColumn2) ON UPDATE {0}", output));
+            result.ShouldBe($"ALTER TABLE TestTable1 ADD CONSTRAINT FK_Test FOREIGN KEY (TestColumn1) REFERENCES TestTable2 (TestColumn2) ON UPDATE {output}");
         }
 
         [Test]
diff --git a/test/FluentMigrator.Tests/Unit/Generators/Oracle/OracleGeneratorTests.cs b/test/FluentMigrator.Tests/Unit/Generators/Oracle/OracleGeneratorTests.cs
index 5d1068d6..16259368 100644
--- a/test/FluentMigrator.Tests/Unit/Generators/Oracle/OracleGeneratorTests.cs
+++ b/test/FluentMigrator.Tests/Unit/Generators/Oracle/OracleGeneratorTests.cs
@@ -108,8 +108,7 @@ namespace FluentMigrator.Tests.Unit.Generators.Oracle
             var expression = GeneratorTestHelper.GetAlterTable();
 
             var result = Generator.Generate(expression);
-
-            result.ShouldBe(string.Empty);
+string.IsNullOrEmpty(result);
         }
 
         [Test]
diff --git a/test/FluentMigrator.Tests/Unit/Generators/Oracle/OracleSchemaTests.cs b/test/FluentMigrator.Tests/Unit/Generators/Oracle/OracleSchemaTests.cs
index 93874a39..f7299413 100644
--- a/test/FluentMigrator.Tests/Unit/Generators/Oracle/OracleSchemaTests.cs
+++ b/test/FluentMigrator.Tests/Unit/Generators/Oracle/OracleSchemaTests.cs
@@ -22,7 +22,7 @@ namespace FluentMigrator.Tests.Unit.Generators.Oracle
             var expression = GeneratorTestHelper.GetAlterSchemaExpression();
 
             var result = Generator.Generate(expression);
-            result.ShouldBe(string.Empty);
+string.IsNullOrEmpty(result);
         }
 
         [Test]
@@ -31,7 +31,7 @@ namespace FluentMigrator.Tests.Unit.Generators.Oracle
             var expression = GeneratorTestHelper.GetCreateSchemaExpression();
 
             var result = Generator.Generate(expression);
-            result.ShouldBe(string.Empty);
+string.IsNullOrEmpty(result);
         }
 
         [Test]
@@ -40,7 +40,7 @@ namespace FluentMigrator.Tests.Unit.Generators.Oracle
             var expression = GeneratorTestHelper.GetDeleteSchemaExpression();
 
             var result = Generator.Generate(expression);
-            result.ShouldBe(string.Empty);
+string.IsNullOrEmpty(result);
         }
     }
 }
\ No newline at end of file
diff --git a/test/FluentMigrator.Tests/Unit/Generators/OracleWithQuotedIdentifier/OracleConstraintsTests.cs b/test/FluentMigrator.Tests/Unit/Generators/OracleWithQuotedIdentifier/OracleConstraintsTests.cs
index acc0be11..4eef15b9 100644
--- a/test/FluentMigrator.Tests/Unit/Generators/OracleWithQuotedIdentifier/OracleConstraintsTests.cs
+++ b/test/FluentMigrator.Tests/Unit/Generators/OracleWithQuotedIdentifier/OracleConstraintsTests.cs
@@ -181,7 +181,7 @@ namespace FluentMigrator.Tests.Unit.Generators.OracleWithQuotedIdentifier
             expression.ForeignKey.OnDelete = rule;
 
             var result = Generator.Generate(expression);
-            result.ShouldBe(string.Format("ALTER TABLE \"TestTable1\" ADD CONSTRAINT \"FK_Test\" FOREIGN KEY (\"TestColumn1\") REFERENCES \"TestTable2\" (\"TestColumn2\") ON DELETE {0}", output));
+            result.ShouldBe($"ALTER TABLE \"TestTable1\" ADD CONSTRAINT \"FK_Test\" FOREIGN KEY (\"TestColumn1\") REFERENCES \"TestTable2\" (\"TestColumn2\") ON DELETE {output}");
         }
 
         [TestCase(Rule.SetDefault, "SET DEFAULT"), TestCase(Rule.SetNull, "SET NULL"), TestCase(Rule.Cascade, "CASCADE")]
@@ -191,7 +191,7 @@ namespace FluentMigrator.Tests.Unit.Generators.OracleWithQuotedIdentifier
             expression.ForeignKey.OnUpdate = rule;
 
             var result = Generator.Generate(expression);
-            result.ShouldBe(string.Format("ALTER TABLE \"TestTable1\" ADD CONSTRAINT \"FK_Test\" FOREIGN KEY (\"TestColumn1\") REFERENCES \"TestTable2\" (\"TestColumn2\") ON UPDATE {0}", output));
+            result.ShouldBe($"ALTER TABLE \"TestTable1\" ADD CONSTRAINT \"FK_Test\" FOREIGN KEY (\"TestColumn1\") REFERENCES \"TestTable2\" (\"TestColumn2\") ON UPDATE {output}");
         }
 
         [Test]
diff --git a/test/FluentMigrator.Tests/Unit/Generators/OracleWithQuotedIdentifier/OracleSchemaTests.cs b/test/FluentMigrator.Tests/Unit/Generators/OracleWithQuotedIdentifier/OracleSchemaTests.cs
index 5670b893..d84f83b7 100644
--- a/test/FluentMigrator.Tests/Unit/Generators/OracleWithQuotedIdentifier/OracleSchemaTests.cs
+++ b/test/FluentMigrator.Tests/Unit/Generators/OracleWithQuotedIdentifier/OracleSchemaTests.cs
@@ -22,7 +22,7 @@ namespace FluentMigrator.Tests.Unit.Generators.OracleWithQuotedIdentifier
             var expression = GeneratorTestHelper.GetAlterSchemaExpression();
 
             var result = Generator.Generate(expression);
-            result.ShouldBe(string.Empty);
+string.IsNullOrEmpty(result);
         }
 
         [Test]
@@ -31,7 +31,7 @@ namespace FluentMigrator.Tests.Unit.Generators.OracleWithQuotedIdentifier
             var expression = GeneratorTestHelper.GetCreateSchemaExpression();
 
             var result = Generator.Generate(expression);
-            result.ShouldBe(string.Empty);
+string.IsNullOrEmpty(result);
         }
 
         [Test]
@@ -40,7 +40,7 @@ namespace FluentMigrator.Tests.Unit.Generators.OracleWithQuotedIdentifier
             var expression = GeneratorTestHelper.GetDeleteSchemaExpression();
 
             var result = Generator.Generate(expression);
-            result.ShouldBe(string.Empty);
+string.IsNullOrEmpty(result);
         }
     }
 }
diff --git a/test/FluentMigrator.Tests/Unit/Generators/Postgres/PostgresConstraintsTests.cs b/test/FluentMigrator.Tests/Unit/Generators/Postgres/PostgresConstraintsTests.cs
index 3ecd44b0..672d0a76 100644
--- a/test/FluentMigrator.Tests/Unit/Generators/Postgres/PostgresConstraintsTests.cs
+++ b/test/FluentMigrator.Tests/Unit/Generators/Postgres/PostgresConstraintsTests.cs
@@ -184,7 +184,7 @@ namespace FluentMigrator.Tests.Unit.Generators.Postgres
             expression.ForeignKey.OnDelete = rule;
 
             var result = Generator.Generate(expression);
-            result.ShouldBe(string.Format("ALTER TABLE \"public\".\"TestTable1\" ADD CONSTRAINT \"FK_Test\" FOREIGN KEY (\"TestColumn1\") REFERENCES \"public\".\"TestTable2\" (\"TestColumn2\") ON DELETE {0};", output));
+            result.ShouldBe($"ALTER TABLE \"public\".\"TestTable1\" ADD CONSTRAINT \"FK_Test\" FOREIGN KEY (\"TestColumn1\") REFERENCES \"public\".\"TestTable2\" (\"TestColumn2\") ON DELETE {output};");
         }
 
         [TestCase(Rule.SetDefault, "SET DEFAULT"), TestCase(Rule.SetNull, "SET NULL"), TestCase(Rule.Cascade, "CASCADE")]
@@ -194,7 +194,7 @@ namespace FluentMigrator.Tests.Unit.Generators.Postgres
             expression.ForeignKey.OnUpdate = rule;
 
             var result = Generator.Generate(expression);
-            result.ShouldBe(string.Format("ALTER TABLE \"public\".\"TestTable1\" ADD CONSTRAINT \"FK_Test\" FOREIGN KEY (\"TestColumn1\") REFERENCES \"public\".\"TestTable2\" (\"TestColumn2\") ON UPDATE {0};", output));
+            result.ShouldBe($"ALTER TABLE \"public\".\"TestTable1\" ADD CONSTRAINT \"FK_Test\" FOREIGN KEY (\"TestColumn1\") REFERENCES \"public\".\"TestTable2\" (\"TestColumn2\") ON UPDATE {output};");
         }
 
         [Test]
diff --git a/test/FluentMigrator.Tests/Unit/Generators/Postgres/PostgresDataTests.cs b/test/FluentMigrator.Tests/Unit/Generators/Postgres/PostgresDataTests.cs
index 027c0e8b..062542ef 100644
--- a/test/FluentMigrator.Tests/Unit/Generators/Postgres/PostgresDataTests.cs
+++ b/test/FluentMigrator.Tests/Unit/Generators/Postgres/PostgresDataTests.cs
@@ -116,7 +116,7 @@ namespace FluentMigrator.Tests.Unit.Generators.Postgres
             expression.SchemaName = "TestSchema";
 
             var result = Generator.Generate(expression);
-            result.ShouldBe(string.Format("INSERT INTO \"TestSchema\".\"TestTable1\" (\"guid\") VALUES ('{0}');", GeneratorTestHelper.TestGuid));
+            result.ShouldBe($"INSERT INTO \"TestSchema\".\"TestTable1\" (\"guid\") VALUES ('{GeneratorTestHelper.TestGuid}');");
         }
 
         [Test]
@@ -125,7 +125,7 @@ namespace FluentMigrator.Tests.Unit.Generators.Postgres
             var expression = GeneratorTestHelper.GetInsertGUIDExpression();
 
             var result = Generator.Generate(expression);
-            result.ShouldBe(string.Format("INSERT INTO \"public\".\"TestTable1\" (\"guid\") VALUES ('{0}');", GeneratorTestHelper.TestGuid));
+            result.ShouldBe($"INSERT INTO \"public\".\"TestTable1\" (\"guid\") VALUES ('{GeneratorTestHelper.TestGuid}');");
         }
 
         [Test]
diff --git a/test/FluentMigrator.Tests/Unit/Generators/Postgres/PostgresGeneratorTests.cs b/test/FluentMigrator.Tests/Unit/Generators/Postgres/PostgresGeneratorTests.cs
index 71ff9fe5..e0e37b0e 100644
--- a/test/FluentMigrator.Tests/Unit/Generators/Postgres/PostgresGeneratorTests.cs
+++ b/test/FluentMigrator.Tests/Unit/Generators/Postgres/PostgresGeneratorTests.cs
@@ -53,7 +53,7 @@ namespace FluentMigrator.Tests.Unit.Generators.Postgres
             expression.Columns.Add(new ColumnDefinition { TableName = tableName, Name = "TestColumn4", Type = DbType.Time });
 
             var result = Generator.Generate(expression);
-            result.ShouldBe(string.Format("CREATE TABLE \"public\".\"{0}\" (\"TestColumn1\" timestamptz NOT NULL, \"TestColumn2\" timestamp NOT NULL, \"TestColumn3\" date NOT NULL, \"TestColumn4\" time NOT NULL);", tableName));
+            result.ShouldBe($"CREATE TABLE \"public\".\"{tableName}\" (\"TestColumn1\" timestamptz NOT NULL, \"TestColumn2\" timestamp NOT NULL, \"TestColumn3\" date NOT NULL, \"TestColumn4\" time NOT NULL);");
         }
 
         [Test]
diff --git a/test/FluentMigrator.Tests/Unit/Generators/Redshift/RedshiftConstraintsTests.cs b/test/FluentMigrator.Tests/Unit/Generators/Redshift/RedshiftConstraintsTests.cs
index 14bcaca5..d4b6a81f 100644
--- a/test/FluentMigrator.Tests/Unit/Generators/Redshift/RedshiftConstraintsTests.cs
+++ b/test/FluentMigrator.Tests/Unit/Generators/Redshift/RedshiftConstraintsTests.cs
@@ -196,9 +196,7 @@ namespace FluentMigrator.Tests.Unit.Generators.Redshift
             expression.ForeignKey.OnDelete = rule;
 
             var result = _generator.Generate(expression);
-            result.ShouldBe(string.Format(
-                                "ALTER TABLE \"public\".\"TestTable1\" ADD CONSTRAINT \"FK_Test\" FOREIGN KEY (\"TestColumn1\") REFERENCES \"public\".\"TestTable2\" (\"TestColumn2\") ON DELETE {0};",
-                                output));
+            result.ShouldBe($"ALTER TABLE \"public\".\"TestTable1\" ADD CONSTRAINT \"FK_Test\" FOREIGN KEY (\"TestColumn1\") REFERENCES \"public\".\"TestTable2\" (\"TestColumn2\") ON DELETE {output};");
         }
 
         [TestCase(Rule.SetDefault, "SET DEFAULT"), TestCase(Rule.SetNull, "SET NULL"),
@@ -209,9 +207,7 @@ namespace FluentMigrator.Tests.Unit.Generators.Redshift
             expression.ForeignKey.OnUpdate = rule;
 
             var result = _generator.Generate(expression);
-            result.ShouldBe(string.Format(
-                                "ALTER TABLE \"public\".\"TestTable1\" ADD CONSTRAINT \"FK_Test\" FOREIGN KEY (\"TestColumn1\") REFERENCES \"public\".\"TestTable2\" (\"TestColumn2\") ON UPDATE {0};",
-                                output));
+            result.ShouldBe($"ALTER TABLE \"public\".\"TestTable1\" ADD CONSTRAINT \"FK_Test\" FOREIGN KEY (\"TestColumn1\") REFERENCES \"public\".\"TestTable2\" (\"TestColumn2\") ON UPDATE {output};");
         }
 
         [Test]
diff --git a/test/FluentMigrator.Tests/Unit/Generators/Redshift/RedshiftDataTests.cs b/test/FluentMigrator.Tests/Unit/Generators/Redshift/RedshiftDataTests.cs
index 9adaf3fe..e7fc72d9 100644
--- a/test/FluentMigrator.Tests/Unit/Generators/Redshift/RedshiftDataTests.cs
+++ b/test/FluentMigrator.Tests/Unit/Generators/Redshift/RedshiftDataTests.cs
@@ -138,8 +138,7 @@ namespace FluentMigrator.Tests.Unit.Generators.Redshift
             expression.SchemaName = "TestSchema";
 
             var result = _generator.Generate(expression);
-            result.ShouldBe(string.Format("INSERT INTO \"TestSchema\".\"TestTable1\" (\"guid\") VALUES ('{0}');",
-                                                 GeneratorTestHelper.TestGuid));
+            result.ShouldBe($"INSERT INTO \"TestSchema\".\"TestTable1\" (\"guid\") VALUES ('{GeneratorTestHelper.TestGuid}');");
         }
 
         [Test]
@@ -148,8 +147,7 @@ namespace FluentMigrator.Tests.Unit.Generators.Redshift
             var expression = GeneratorTestHelper.GetInsertGUIDExpression();
 
             var result = _generator.Generate(expression);
-            result.ShouldBe(string.Format("INSERT INTO \"public\".\"TestTable1\" (\"guid\") VALUES ('{0}');",
-                                                 GeneratorTestHelper.TestGuid));
+            result.ShouldBe($"INSERT INTO \"public\".\"TestTable1\" (\"guid\") VALUES ('{GeneratorTestHelper.TestGuid}');");
         }
 
         [Test]
diff --git a/test/FluentMigrator.Tests/Unit/Generators/Redshift/RedshiftIndexTests.cs b/test/FluentMigrator.Tests/Unit/Generators/Redshift/RedshiftIndexTests.cs
index 5585360b..5dcfbf70 100644
--- a/test/FluentMigrator.Tests/Unit/Generators/Redshift/RedshiftIndexTests.cs
+++ b/test/FluentMigrator.Tests/Unit/Generators/Redshift/RedshiftIndexTests.cs
@@ -40,7 +40,7 @@ namespace FluentMigrator.Tests.Unit.Generators.Redshift
             expression.Index.SchemaName = "TestSchema";
 
             var result = _generator.Generate(expression);
-            result.ShouldBe(string.Empty);
+string.IsNullOrEmpty(result);
         }
 
         [Test]
@@ -49,7 +49,7 @@ namespace FluentMigrator.Tests.Unit.Generators.Redshift
             var expression = GeneratorTestHelper.GetCreateIndexExpression();
 
             var result = _generator.Generate(expression);
-            result.ShouldBe(string.Empty);
+string.IsNullOrEmpty(result);
         }
 
         [Test]
@@ -59,7 +59,7 @@ namespace FluentMigrator.Tests.Unit.Generators.Redshift
             expression.Index.SchemaName = "TestSchema";
 
             var result = _generator.Generate(expression);
-            result.ShouldBe(string.Empty);
+string.IsNullOrEmpty(result);
         }
 
         [Test]
@@ -68,7 +68,7 @@ namespace FluentMigrator.Tests.Unit.Generators.Redshift
             var expression = GeneratorTestHelper.GetCreateMultiColumnCreateIndexExpression();
 
             var result = _generator.Generate(expression);
-            result.ShouldBe(string.Empty);
+string.IsNullOrEmpty(result);
         }
 
         [Test]
@@ -78,7 +78,7 @@ namespace FluentMigrator.Tests.Unit.Generators.Redshift
             expression.Index.SchemaName = "TestSchema";
 
             var result = _generator.Generate(expression);
-            result.ShouldBe(string.Empty);
+string.IsNullOrEmpty(result);
         }
 
         [Test]
@@ -87,7 +87,7 @@ namespace FluentMigrator.Tests.Unit.Generators.Redshift
             var expression = GeneratorTestHelper.GetCreateUniqueMultiColumnIndexExpression();
 
             var result = _generator.Generate(expression);
-            result.ShouldBe(string.Empty);
+string.IsNullOrEmpty(result);
         }
 
         [Test]
@@ -97,7 +97,7 @@ namespace FluentMigrator.Tests.Unit.Generators.Redshift
             expression.Index.SchemaName = "TestSchema";
 
             var result = _generator.Generate(expression);
-            result.ShouldBe(string.Empty);
+string.IsNullOrEmpty(result);
         }
 
         [Test]
@@ -106,7 +106,7 @@ namespace FluentMigrator.Tests.Unit.Generators.Redshift
             var expression = GeneratorTestHelper.GetCreateUniqueIndexExpression();
 
             var result = _generator.Generate(expression);
-            result.ShouldBe(string.Empty);
+string.IsNullOrEmpty(result);
         }
 
         [Test]
@@ -116,7 +116,7 @@ namespace FluentMigrator.Tests.Unit.Generators.Redshift
             expression.Index.SchemaName = "TestSchema";
 
             var result = _generator.Generate(expression);
-            result.ShouldBe(string.Empty);
+string.IsNullOrEmpty(result);
         }
 
         [Test]
@@ -125,7 +125,7 @@ namespace FluentMigrator.Tests.Unit.Generators.Redshift
             var expression = GeneratorTestHelper.GetDeleteIndexExpression();
 
             var result = _generator.Generate(expression);
-            result.ShouldBe(string.Empty);
+string.IsNullOrEmpty(result);
         }
     }
 }
diff --git a/test/FluentMigrator.Tests/Unit/Generators/Redshift/RedshiftSequenceTests.cs b/test/FluentMigrator.Tests/Unit/Generators/Redshift/RedshiftSequenceTests.cs
index f743ba1b..99d1246f 100644
--- a/test/FluentMigrator.Tests/Unit/Generators/Redshift/RedshiftSequenceTests.cs
+++ b/test/FluentMigrator.Tests/Unit/Generators/Redshift/RedshiftSequenceTests.cs
@@ -40,7 +40,7 @@ namespace FluentMigrator.Tests.Unit.Generators.Redshift
             expression.Sequence.SchemaName = "TestSchema";
 
             var result = _generator.Generate(expression);
-            result.ShouldBe(string.Empty);
+string.IsNullOrEmpty(result);
         }
 
         [Test]
@@ -49,7 +49,7 @@ namespace FluentMigrator.Tests.Unit.Generators.Redshift
             var expression = GeneratorTestHelper.GetCreateSequenceExpression();
 
             var result = _generator.Generate(expression);
-            result.ShouldBe(string.Empty);
+string.IsNullOrEmpty(result);
         }
 
         [Test]
@@ -59,7 +59,7 @@ namespace FluentMigrator.Tests.Unit.Generators.Redshift
             expression.SchemaName = "TestSchema";
 
             var result = _generator.Generate(expression);
-            result.ShouldBe(string.Empty);
+string.IsNullOrEmpty(result);
         }
 
         [Test]
@@ -68,7 +68,7 @@ namespace FluentMigrator.Tests.Unit.Generators.Redshift
             var expression = GeneratorTestHelper.GetDeleteSequenceExpression();
 
             var result = _generator.Generate(expression);
-            result.ShouldBe(string.Empty);
+string.IsNullOrEmpty(result);
         }
     }
 }
diff --git a/test/FluentMigrator.Tests/Unit/Generators/SQLite/SQLiteColumnTests.cs b/test/FluentMigrator.Tests/Unit/Generators/SQLite/SQLiteColumnTests.cs
index 977ce392..03f021e6 100644
--- a/test/FluentMigrator.Tests/Unit/Generators/SQLite/SQLiteColumnTests.cs
+++ b/test/FluentMigrator.Tests/Unit/Generators/SQLite/SQLiteColumnTests.cs
@@ -65,7 +65,7 @@ namespace FluentMigrator.Tests.Unit.Generators.SQLite
             expression.SchemaName = "TestSchema";
 
             var result = Generator.Generate(expression);
-            result.ShouldBe(string.Empty);
+string.IsNullOrEmpty(result);
         }
 
         [Test]
@@ -74,7 +74,7 @@ namespace FluentMigrator.Tests.Unit.Generators.SQLite
             var expression = GeneratorTestHelper.GetAlterColumnExpression();
 
             var result = Generator.Generate(expression);
-            result.ShouldBe(string.Empty);
+string.IsNullOrEmpty(result);
         }
 
         [Test]
@@ -163,7 +163,7 @@ namespace FluentMigrator.Tests.Unit.Generators.SQLite
             expression.SchemaName = "TestSchema";
 
             var result = Generator.Generate(expression);
-            result.ShouldBe(string.Empty);
+string.IsNullOrEmpty(result);
         }
 
         [Test]
@@ -172,7 +172,7 @@ namespace FluentMigrator.Tests.Unit.Generators.SQLite
             var expression = GeneratorTestHelper.GetDeleteColumnExpression();
 
             var result = Generator.Generate(expression);
-            result.ShouldBe(string.Empty);
+string.IsNullOrEmpty(result);
         }
 
         [Test]
@@ -182,7 +182,7 @@ namespace FluentMigrator.Tests.Unit.Generators.SQLite
             expression.SchemaName = "TestSchema";
 
             var result = Generator.Generate(expression);
-            result.ShouldBe(string.Empty);
+string.IsNullOrEmpty(result);
         }
 
         [Test]
@@ -191,7 +191,7 @@ namespace FluentMigrator.Tests.Unit.Generators.SQLite
             var expression = GeneratorTestHelper.GetDeleteColumnExpression(new [] { "TestColumn1", "TestColumn2" });
 
             var result = Generator.Generate(expression);
-            result.ShouldBe(string.Empty);
+string.IsNullOrEmpty(result);
         }
 
         [Test]
diff --git a/test/FluentMigrator.Tests/Unit/Generators/SQLite/SQLiteConstraintsTests.cs b/test/FluentMigrator.Tests/Unit/Generators/SQLite/SQLiteConstraintsTests.cs
index c49abf6a..26eebf48 100644
--- a/test/FluentMigrator.Tests/Unit/Generators/SQLite/SQLiteConstraintsTests.cs
+++ b/test/FluentMigrator.Tests/Unit/Generators/SQLite/SQLiteConstraintsTests.cs
@@ -43,7 +43,7 @@ namespace FluentMigrator.Tests.Unit.Generators.SQLite
             expression.ForeignKey.ForeignTableSchema = "TestSchema";
 
             var result = Generator.Generate(expression);
-            result.ShouldBe(string.Empty);
+string.IsNullOrEmpty(result);
         }
 
         [Test]
@@ -52,7 +52,7 @@ namespace FluentMigrator.Tests.Unit.Generators.SQLite
             var expression = GeneratorTestHelper.GetCreateForeignKeyExpression();
 
             var result = Generator.Generate(expression);
-            result.ShouldBe(string.Empty);
+string.IsNullOrEmpty(result);
         }
 
         [Test]
@@ -62,7 +62,7 @@ namespace FluentMigrator.Tests.Unit.Generators.SQLite
             expression.ForeignKey.ForeignTableSchema = "TestSchema";
 
             var result = Generator.Generate(expression);
-            result.ShouldBe(string.Empty);
+string.IsNullOrEmpty(result);
         }
 
         [Test]
@@ -73,7 +73,7 @@ namespace FluentMigrator.Tests.Unit.Generators.SQLite
             expression.ForeignKey.PrimaryTableSchema = "TestSchema";
 
             var result = Generator.Generate(expression);
-            result.ShouldBe(string.Empty);
+string.IsNullOrEmpty(result);
         }
 
         [Test]
@@ -82,7 +82,7 @@ namespace FluentMigrator.Tests.Unit.Generators.SQLite
             var expression = GeneratorTestHelper.GetCreateMultiColumnForeignKeyExpression();
 
             var result = Generator.Generate(expression);
-            result.ShouldBe(string.Empty);
+string.IsNullOrEmpty(result);
         }
 
         [Test]
@@ -92,7 +92,7 @@ namespace FluentMigrator.Tests.Unit.Generators.SQLite
             expression.ForeignKey.ForeignTableSchema = "TestSchema";
 
             var result = Generator.Generate(expression);
-            result.ShouldBe(string.Empty);
+string.IsNullOrEmpty(result);
         }
 
         [Test]
@@ -102,7 +102,7 @@ namespace FluentMigrator.Tests.Unit.Generators.SQLite
             expression.Constraint.SchemaName = "TestSchema";
 
             var result = Generator.Generate(expression);
-            result.ShouldBe(string.Empty);
+string.IsNullOrEmpty(result);
         }
 
         [Test]
@@ -111,7 +111,7 @@ namespace FluentMigrator.Tests.Unit.Generators.SQLite
             var expression = GeneratorTestHelper.GetCreateMultiColumnPrimaryKeyExpression();
 
             var result = Generator.Generate(expression);
-            result.ShouldBe(string.Empty);
+string.IsNullOrEmpty(result);
         }
 
         [Test]
@@ -121,7 +121,7 @@ namespace FluentMigrator.Tests.Unit.Generators.SQLite
             expression.Constraint.SchemaName = "TestSchema";
 
             var result = Generator.Generate(expression);
-            result.ShouldBe(string.Empty);
+string.IsNullOrEmpty(result);
         }
 
         [Test]
@@ -130,7 +130,7 @@ namespace FluentMigrator.Tests.Unit.Generators.SQLite
             var expression = GeneratorTestHelper.GetCreateMultiColumnUniqueConstraintExpression();
 
             var result = Generator.Generate(expression);
-            result.ShouldBe(string.Empty);
+string.IsNullOrEmpty(result);
         }
 
         [Test]
@@ -141,7 +141,7 @@ namespace FluentMigrator.Tests.Unit.Generators.SQLite
             expression.ForeignKey.PrimaryTableSchema = "TestSchema";
 
             var result = Generator.Generate(expression);
-            result.ShouldBe(string.Empty);
+string.IsNullOrEmpty(result);
         }
 
         [Test]
@@ -150,7 +150,7 @@ namespace FluentMigrator.Tests.Unit.Generators.SQLite
             var expression = GeneratorTestHelper.GetCreateNamedForeignKeyExpression();
 
             var result = Generator.Generate(expression);
-            result.ShouldBe(string.Empty);
+string.IsNullOrEmpty(result);
         }
 
         [Test]
@@ -160,7 +160,7 @@ namespace FluentMigrator.Tests.Unit.Generators.SQLite
             expression.ForeignKey.ForeignTableSchema = "TestSchema";
 
             var result = Generator.Generate(expression);
-            result.ShouldBe(string.Empty);
+string.IsNullOrEmpty(result);
         }
 
         [Test]
@@ -171,7 +171,7 @@ namespace FluentMigrator.Tests.Unit.Generators.SQLite
             expression.ForeignKey.OnUpdate = Rule.SetDefault;
 
             var result = Generator.Generate(expression);
-            result.ShouldBe(string.Empty);
+string.IsNullOrEmpty(result);
         }
 
         [TestCase(Rule.SetDefault, "SET DEFAULT"), TestCase(Rule.SetNull, "SET NULL"), TestCase(Rule.Cascade, "CASCADE")]
@@ -181,7 +181,7 @@ namespace FluentMigrator.Tests.Unit.Generators.SQLite
             expression.ForeignKey.OnDelete = rule;
 
             var result = Generator.Generate(expression);
-            result.ShouldBe(string.Empty);
+string.IsNullOrEmpty(result);
         }
 
         [TestCase(Rule.SetDefault, "SET DEFAULT"), TestCase(Rule.SetNull, "SET NULL"), TestCase(Rule.Cascade, "CASCADE")]
@@ -191,7 +191,7 @@ namespace FluentMigrator.Tests.Unit.Generators.SQLite
             expression.ForeignKey.OnUpdate = rule;
 
             var result = Generator.Generate(expression);
-            result.ShouldBe(string.Empty);
+string.IsNullOrEmpty(result);
         }
 
         [Test]
@@ -202,7 +202,7 @@ namespace FluentMigrator.Tests.Unit.Generators.SQLite
             expression.ForeignKey.PrimaryTableSchema = "TestSchema";
 
             var result = Generator.Generate(expression);
-            result.ShouldBe(string.Empty);
+string.IsNullOrEmpty(result);
         }
 
         [Test]
@@ -211,7 +211,7 @@ namespace FluentMigrator.Tests.Unit.Generators.SQLite
             var expression = GeneratorTestHelper.GetCreateNamedMultiColumnForeignKeyExpression();
 
             var result = Generator.Generate(expression);
-            result.ShouldBe(string.Empty);
+string.IsNullOrEmpty(result);
         }
 
         [Test]
@@ -221,7 +221,7 @@ namespace FluentMigrator.Tests.Unit.Generators.SQLite
             expression.ForeignKey.ForeignTableSchema = "TestSchema";
 
             var result = Generator.Generate(expression);
-            result.ShouldBe(string.Empty);
+string.IsNullOrEmpty(result);
         }
 
         [Test]
@@ -231,7 +231,7 @@ namespace FluentMigrator.Tests.Unit.Generators.SQLite
             expression.Constraint.SchemaName = "TestSchema";
 
             var result = Generator.Generate(expression);
-            result.ShouldBe(string.Empty);
+string.IsNullOrEmpty(result);
         }
 
         [Test]
@@ -240,7 +240,7 @@ namespace FluentMigrator.Tests.Unit.Generators.SQLite
             var expression = GeneratorTestHelper.GetCreateNamedMultiColumnPrimaryKeyExpression();
 
             var result = Generator.Generate(expression);
-            result.ShouldBe(string.Empty);
+string.IsNullOrEmpty(result);
         }
 
         [Test]
@@ -250,7 +250,7 @@ namespace FluentMigrator.Tests.Unit.Generators.SQLite
             expression.Constraint.SchemaName = "TestSchema";
 
             var result = Generator.Generate(expression);
-            result.ShouldBe(string.Empty);
+string.IsNullOrEmpty(result);
         }
 
         [Test]
@@ -259,7 +259,7 @@ namespace FluentMigrator.Tests.Unit.Generators.SQLite
             var expression = GeneratorTestHelper.GetCreateNamedMultiColumnUniqueConstraintExpression();
 
             var result = Generator.Generate(expression);
-            result.ShouldBe(string.Empty);
+string.IsNullOrEmpty(result);
         }
 
         [Test]
@@ -269,7 +269,7 @@ namespace FluentMigrator.Tests.Unit.Generators.SQLite
             expression.Constraint.SchemaName = "TestSchema";
 
             var result = Generator.Generate(expression);
-            result.ShouldBe(string.Empty);
+string.IsNullOrEmpty(result);
         }
 
         [Test]
@@ -278,7 +278,7 @@ namespace FluentMigrator.Tests.Unit.Generators.SQLite
             var expression = GeneratorTestHelper.GetCreateNamedPrimaryKeyExpression();
 
             var result = Generator.Generate(expression);
-            result.ShouldBe(string.Empty);
+string.IsNullOrEmpty(result);
         }
 
         [Test]
@@ -288,7 +288,7 @@ namespace FluentMigrator.Tests.Unit.Generators.SQLite
             expression.Constraint.SchemaName = "TestSchema";
 
             var result = Generator.Generate(expression);
-            result.ShouldBe(string.Empty);
+string.IsNullOrEmpty(result);
         }
 
         [Test]
@@ -297,7 +297,7 @@ namespace FluentMigrator.Tests.Unit.Generators.SQLite
             var expression = GeneratorTestHelper.GetCreateNamedUniqueConstraintExpression();
 
             var result = Generator.Generate(expression);
-            result.ShouldBe(string.Empty);
+string.IsNullOrEmpty(result);
         }
 
         [Test]
@@ -307,7 +307,7 @@ namespace FluentMigrator.Tests.Unit.Generators.SQLite
             expression.Constraint.SchemaName = "TestSchema";
 
             var result = Generator.Generate(expression);
-            result.ShouldBe(string.Empty);
+string.IsNullOrEmpty(result);
         }
 
         [Test]
@@ -316,7 +316,7 @@ namespace FluentMigrator.Tests.Unit.Generators.SQLite
             var expression = GeneratorTestHelper.GetCreatePrimaryKeyExpression();
 
             var result = Generator.Generate(expression);
-            result.ShouldBe(string.Empty);
+string.IsNullOrEmpty(result);
         }
 
         [Test]
@@ -326,7 +326,7 @@ namespace FluentMigrator.Tests.Unit.Generators.SQLite
             expression.Constraint.SchemaName = "TestSchema";
 
             var result = Generator.Generate(expression);
-            result.ShouldBe(string.Empty);
+string.IsNullOrEmpty(result);
         }
 
         [Test]
@@ -335,7 +335,7 @@ namespace FluentMigrator.Tests.Unit.Generators.SQLite
             var expression = GeneratorTestHelper.GetCreateUniqueConstraintExpression();
 
             var result = Generator.Generate(expression);
-            result.ShouldBe(string.Empty);
+string.IsNullOrEmpty(result);
         }
 
         [Test]
@@ -345,7 +345,7 @@ namespace FluentMigrator.Tests.Unit.Generators.SQLite
             expression.ForeignKey.ForeignTableSchema = "TestSchema";
 
             var result = Generator.Generate(expression);
-            result.ShouldBe(string.Empty);
+string.IsNullOrEmpty(result);
         }
 
         [Test]
@@ -354,7 +354,7 @@ namespace FluentMigrator.Tests.Unit.Generators.SQLite
             var expression = GeneratorTestHelper.GetDeleteForeignKeyExpression();
 
             var result = Generator.Generate(expression);
-            result.ShouldBe(string.Empty);
+string.IsNullOrEmpty(result);
         }
 
         [Test]
@@ -364,7 +364,7 @@ namespace FluentMigrator.Tests.Unit.Generators.SQLite
             expression.Constraint.SchemaName = "TestSchema";
 
             var result = Generator.Generate(expression);
-            result.ShouldBe(string.Empty);
+string.IsNullOrEmpty(result);
         }
 
         [Test]
@@ -373,7 +373,7 @@ namespace FluentMigrator.Tests.Unit.Generators.SQLite
             var expression = GeneratorTestHelper.GetDeletePrimaryKeyExpression();
 
             var result = Generator.Generate(expression);
-            result.ShouldBe(string.Empty);
+string.IsNullOrEmpty(result);
         }
 
         [Test]
@@ -383,7 +383,7 @@ namespace FluentMigrator.Tests.Unit.Generators.SQLite
             expression.Constraint.SchemaName = "TestSchema";
 
             var result = Generator.Generate(expression);
-            result.ShouldBe(string.Empty);
+string.IsNullOrEmpty(result);
         }
 
         [Test]
@@ -392,7 +392,7 @@ namespace FluentMigrator.Tests.Unit.Generators.SQLite
             var expression = GeneratorTestHelper.GetDeleteUniqueConstraintExpression();
 
             var result = Generator.Generate(expression);
-            result.ShouldBe(string.Empty);
+string.IsNullOrEmpty(result);
         }
     }
 }
diff --git a/test/FluentMigrator.Tests/Unit/Generators/SQLite/SQLiteDataTests.cs b/test/FluentMigrator.Tests/Unit/Generators/SQLite/SQLiteDataTests.cs
index 6be44f4b..f50f2f63 100644
--- a/test/FluentMigrator.Tests/Unit/Generators/SQLite/SQLiteDataTests.cs
+++ b/test/FluentMigrator.Tests/Unit/Generators/SQLite/SQLiteDataTests.cs
@@ -133,7 +133,7 @@ namespace FluentMigrator.Tests.Unit.Generators.SQLite
             expression.SchemaName = "TestSchema";
 
             var result = Generator.Generate(expression);
-            result.ShouldBe(string.Format("INSERT INTO \"TestTable1\" (\"guid\") VALUES ('{0}')", GeneratorTestHelper.TestGuid.ToString()));
+            result.ShouldBe($"INSERT INTO \"TestTable1\" (\"guid\") VALUES ('{GeneratorTestHelper.TestGuid.ToString()}')");
         }
 
         [Test]
@@ -142,7 +142,7 @@ namespace FluentMigrator.Tests.Unit.Generators.SQLite
             var expression = GeneratorTestHelper.GetInsertGUIDExpression();
 
             var result = Generator.Generate(expression);
-            result.ShouldBe(string.Format("INSERT INTO \"TestTable1\" (\"guid\") VALUES ('{0}')", GeneratorTestHelper.TestGuid.ToString()));
+            result.ShouldBe($"INSERT INTO \"TestTable1\" (\"guid\") VALUES ('{GeneratorTestHelper.TestGuid.ToString()}')");
         }
 
         [Test]
diff --git a/test/FluentMigrator.Tests/Unit/Generators/SQLite/SQLiteSchemaTests.cs b/test/FluentMigrator.Tests/Unit/Generators/SQLite/SQLiteSchemaTests.cs
index 127e5db2..52f89a8b 100644
--- a/test/FluentMigrator.Tests/Unit/Generators/SQLite/SQLiteSchemaTests.cs
+++ b/test/FluentMigrator.Tests/Unit/Generators/SQLite/SQLiteSchemaTests.cs
@@ -41,7 +41,7 @@ namespace FluentMigrator.Tests.Unit.Generators.SQLite
             var expression = GeneratorTestHelper.GetAlterSchemaExpression();
 
             var result = Generator.Generate(expression);
-            result.ShouldBe(string.Empty);
+string.IsNullOrEmpty(result);
         }
 
         [Test]
@@ -50,7 +50,7 @@ namespace FluentMigrator.Tests.Unit.Generators.SQLite
             var expression = GeneratorTestHelper.GetCreateSchemaExpression();
 
             var result = Generator.Generate(expression);
-            result.ShouldBe(string.Empty);
+string.IsNullOrEmpty(result);
         }
 
         [Test]
@@ -59,7 +59,7 @@ namespace FluentMigrator.Tests.Unit.Generators.SQLite
             var expression = GeneratorTestHelper.GetDeleteSchemaExpression();
 
             var result = Generator.Generate(expression);
-            result.ShouldBe(string.Empty);
+string.IsNullOrEmpty(result);
         }
     }
 }
diff --git a/test/FluentMigrator.Tests/Unit/Generators/SqlAnywhere/SqlAnywhere16ConstraintsTests.cs b/test/FluentMigrator.Tests/Unit/Generators/SqlAnywhere/SqlAnywhere16ConstraintsTests.cs
index c9ec5492..0640a02e 100644
--- a/test/FluentMigrator.Tests/Unit/Generators/SqlAnywhere/SqlAnywhere16ConstraintsTests.cs
+++ b/test/FluentMigrator.Tests/Unit/Generators/SqlAnywhere/SqlAnywhere16ConstraintsTests.cs
@@ -256,7 +256,7 @@ namespace FluentMigrator.Tests.Unit.Generators.SqlAnywhere
             expression.ForeignKey.OnDelete = rule;
 
             var result = Generator.Generate(expression);
-            result.ShouldBe(string.Format("ALTER TABLE [dbo].[TestTable1] ADD CONSTRAINT [FK_Test] FOREIGN KEY ([TestColumn1]) REFERENCES [dbo].[TestTable2] ([TestColumn2]) ON DELETE {0}", output));
+            result.ShouldBe($"ALTER TABLE [dbo].[TestTable1] ADD CONSTRAINT [FK_Test] FOREIGN KEY ([TestColumn1]) REFERENCES [dbo].[TestTable2] ([TestColumn2]) ON DELETE {output}");
         }
 
         [TestCase(Rule.SetDefault, "SET DEFAULT"), TestCase(Rule.SetNull, "SET NULL"), TestCase(Rule.Cascade, "CASCADE")]
@@ -266,7 +266,7 @@ namespace FluentMigrator.Tests.Unit.Generators.SqlAnywhere
             expression.ForeignKey.OnUpdate = rule;
 
             var result = Generator.Generate(expression);
-            result.ShouldBe(string.Format("ALTER TABLE [dbo].[TestTable1] ADD CONSTRAINT [FK_Test] FOREIGN KEY ([TestColumn1]) REFERENCES [dbo].[TestTable2] ([TestColumn2]) ON UPDATE {0}", output));
+            result.ShouldBe($"ALTER TABLE [dbo].[TestTable1] ADD CONSTRAINT [FK_Test] FOREIGN KEY ([TestColumn1]) REFERENCES [dbo].[TestTable2] ([TestColumn2]) ON UPDATE {output}");
         }
 
         [Test]
diff --git a/test/FluentMigrator.Tests/Unit/Generators/SqlAnywhere/SqlAnywhere16DataTests.cs b/test/FluentMigrator.Tests/Unit/Generators/SqlAnywhere/SqlAnywhere16DataTests.cs
index 0ce21c53..edcf23a4 100644
--- a/test/FluentMigrator.Tests/Unit/Generators/SqlAnywhere/SqlAnywhere16DataTests.cs
+++ b/test/FluentMigrator.Tests/Unit/Generators/SqlAnywhere/SqlAnywhere16DataTests.cs
@@ -142,7 +142,7 @@ namespace FluentMigrator.Tests.Unit.Generators.SqlAnywhere
             expression.SchemaName = "TestSchema";
 
             var result = Generator.Generate(expression);
-            result.ShouldBe(string.Format("INSERT INTO [TestSchema].[TestTable1] ([guid]) VALUES ('{0}')", GeneratorTestHelper.TestGuid.ToString()));
+            result.ShouldBe($"INSERT INTO [TestSchema].[TestTable1] ([guid]) VALUES ('{GeneratorTestHelper.TestGuid.ToString()}')");
         }
 
         [Test]
@@ -152,7 +152,7 @@ namespace FluentMigrator.Tests.Unit.Generators.SqlAnywhere
             var expression = GeneratorTestHelper.GetInsertGUIDExpression();
 
             var result = Generator.Generate(expression);
-            result.ShouldBe(string.Format("INSERT INTO [dbo].[TestTable1] ([guid]) VALUES ('{0}')", GeneratorTestHelper.TestGuid.ToString()));
+            result.ShouldBe($"INSERT INTO [dbo].[TestTable1] ([guid]) VALUES ('{GeneratorTestHelper.TestGuid.ToString()}')");
         }
 
         [Test]
diff --git a/test/FluentMigrator.Tests/Unit/Generators/SqlServer2000/SqlServer2000ConstraintsTests.cs b/test/FluentMigrator.Tests/Unit/Generators/SqlServer2000/SqlServer2000ConstraintsTests.cs
index a8aa6cd8..81b5750c 100644
--- a/test/FluentMigrator.Tests/Unit/Generators/SqlServer2000/SqlServer2000ConstraintsTests.cs
+++ b/test/FluentMigrator.Tests/Unit/Generators/SqlServer2000/SqlServer2000ConstraintsTests.cs
@@ -181,7 +181,7 @@ namespace FluentMigrator.Tests.Unit.Generators.SqlServer2000
             expression.ForeignKey.OnDelete = rule;
 
             var result = Generator.Generate(expression);
-            result.ShouldBe(string.Format("ALTER TABLE [TestTable1] ADD CONSTRAINT [FK_Test] FOREIGN KEY ([TestColumn1]) REFERENCES [TestTable2] ([TestColumn2]) ON DELETE {0}", output));
+            result.ShouldBe($"ALTER TABLE [TestTable1] ADD CONSTRAINT [FK_Test] FOREIGN KEY ([TestColumn1]) REFERENCES [TestTable2] ([TestColumn2]) ON DELETE {output}");
         }
 
         [TestCase(Rule.SetDefault, "SET DEFAULT"), TestCase(Rule.SetNull, "SET NULL"), TestCase(Rule.Cascade, "CASCADE")]
@@ -191,7 +191,7 @@ namespace FluentMigrator.Tests.Unit.Generators.SqlServer2000
             expression.ForeignKey.OnUpdate = rule;
 
             var result = Generator.Generate(expression);
-            result.ShouldBe(string.Format("ALTER TABLE [TestTable1] ADD CONSTRAINT [FK_Test] FOREIGN KEY ([TestColumn1]) REFERENCES [TestTable2] ([TestColumn2]) ON UPDATE {0}", output));
+            result.ShouldBe($"ALTER TABLE [TestTable1] ADD CONSTRAINT [FK_Test] FOREIGN KEY ([TestColumn1]) REFERENCES [TestTable2] ([TestColumn2]) ON UPDATE {output}");
         }
 
         [Test]
diff --git a/test/FluentMigrator.Tests/Unit/Generators/SqlServer2000/SqlServer2000DataTests.cs b/test/FluentMigrator.Tests/Unit/Generators/SqlServer2000/SqlServer2000DataTests.cs
index ee989431..2d5271d2 100644
--- a/test/FluentMigrator.Tests/Unit/Generators/SqlServer2000/SqlServer2000DataTests.cs
+++ b/test/FluentMigrator.Tests/Unit/Generators/SqlServer2000/SqlServer2000DataTests.cs
@@ -133,7 +133,7 @@ namespace FluentMigrator.Tests.Unit.Generators.SqlServer2000
             expression.SchemaName = "TestSchema";
 
             var result = Generator.Generate(expression);
-            result.ShouldBe(string.Format("INSERT INTO [TestTable1] ([guid]) VALUES ('{0}')", GeneratorTestHelper.TestGuid.ToString()));
+            result.ShouldBe($"INSERT INTO [TestTable1] ([guid]) VALUES ('{GeneratorTestHelper.TestGuid.ToString()}')");
         }
 
         [Test]
@@ -142,7 +142,7 @@ namespace FluentMigrator.Tests.Unit.Generators.SqlServer2000
             var expression = GeneratorTestHelper.GetInsertGUIDExpression();
 
             var result = Generator.Generate(expression);
-            result.ShouldBe(string.Format("INSERT INTO [TestTable1] ([guid]) VALUES ('{0}')", GeneratorTestHelper.TestGuid.ToString()));
+            result.ShouldBe($"INSERT INTO [TestTable1] ([guid]) VALUES ('{GeneratorTestHelper.TestGuid.ToString()}')");
         }
 
         [Test]
diff --git a/test/FluentMigrator.Tests/Unit/Generators/SqlServer2000/SqlServer2000SchemaTests.cs b/test/FluentMigrator.Tests/Unit/Generators/SqlServer2000/SqlServer2000SchemaTests.cs
index bd6c3654..71e69cc3 100644
--- a/test/FluentMigrator.Tests/Unit/Generators/SqlServer2000/SqlServer2000SchemaTests.cs
+++ b/test/FluentMigrator.Tests/Unit/Generators/SqlServer2000/SqlServer2000SchemaTests.cs
@@ -22,7 +22,7 @@ namespace FluentMigrator.Tests.Unit.Generators.SqlServer2000
             var expression = GeneratorTestHelper.GetAlterSchemaExpression();
 
             var result = Generator.Generate(expression);
-            result.ShouldBe(string.Empty);
+string.IsNullOrEmpty(result);
         }
 
         [Test]
@@ -31,7 +31,7 @@ namespace FluentMigrator.Tests.Unit.Generators.SqlServer2000
             var expression = GeneratorTestHelper.GetCreateSchemaExpression();
 
             var result = Generator.Generate(expression);
-            result.ShouldBe(string.Empty);
+string.IsNullOrEmpty(result);
         }
 
         [Test]
@@ -40,7 +40,7 @@ namespace FluentMigrator.Tests.Unit.Generators.SqlServer2000
             var expression = GeneratorTestHelper.GetDeleteSchemaExpression();
 
             var result = Generator.Generate(expression);
-            result.ShouldBe(string.Empty);
+string.IsNullOrEmpty(result);
         }
     }
 }
diff --git a/test/FluentMigrator.Tests/Unit/Generators/SqlServer2005/SqlServer2005ConstraintsTests.cs b/test/FluentMigrator.Tests/Unit/Generators/SqlServer2005/SqlServer2005ConstraintsTests.cs
index 667225c5..e98f3ed4 100644
--- a/test/FluentMigrator.Tests/Unit/Generators/SqlServer2005/SqlServer2005ConstraintsTests.cs
+++ b/test/FluentMigrator.Tests/Unit/Generators/SqlServer2005/SqlServer2005ConstraintsTests.cs
@@ -382,7 +382,7 @@ namespace FluentMigrator.Tests.Unit.Generators.SqlServer2005
             expression.ForeignKey.OnDelete = rule;
 
             var result = Generator.Generate(expression);
-            result.ShouldBe(string.Format("ALTER TABLE [dbo].[TestTable1] ADD CONSTRAINT [FK_Test] FOREIGN KEY ([TestColumn1]) REFERENCES [dbo].[TestTable2] ([TestColumn2]) ON DELETE {0}", output));
+            result.ShouldBe($"ALTER TABLE [dbo].[TestTable1] ADD CONSTRAINT [FK_Test] FOREIGN KEY ([TestColumn1]) REFERENCES [dbo].[TestTable2] ([TestColumn2]) ON DELETE {output}");
         }
 
         [TestCase(Rule.SetDefault, "SET DEFAULT"), TestCase(Rule.SetNull, "SET NULL"), TestCase(Rule.Cascade, "CASCADE")]
@@ -392,7 +392,7 @@ namespace FluentMigrator.Tests.Unit.Generators.SqlServer2005
             expression.ForeignKey.OnUpdate = rule;
 
             var result = Generator.Generate(expression);
-            result.ShouldBe(string.Format("ALTER TABLE [dbo].[TestTable1] ADD CONSTRAINT [FK_Test] FOREIGN KEY ([TestColumn1]) REFERENCES [dbo].[TestTable2] ([TestColumn2]) ON UPDATE {0}", output));
+            result.ShouldBe($"ALTER TABLE [dbo].[TestTable1] ADD CONSTRAINT [FK_Test] FOREIGN KEY ([TestColumn1]) REFERENCES [dbo].[TestTable2] ([TestColumn2]) ON UPDATE {output}");
         }
 
         [Test]
diff --git a/test/FluentMigrator.Tests/Unit/Generators/SqlServer2005/SqlServer2005DataTests.cs b/test/FluentMigrator.Tests/Unit/Generators/SqlServer2005/SqlServer2005DataTests.cs
index c94be09a..ebdcfe0e 100644
--- a/test/FluentMigrator.Tests/Unit/Generators/SqlServer2005/SqlServer2005DataTests.cs
+++ b/test/FluentMigrator.Tests/Unit/Generators/SqlServer2005/SqlServer2005DataTests.cs
@@ -133,7 +133,7 @@ namespace FluentMigrator.Tests.Unit.Generators.SqlServer2005
             expression.SchemaName = "TestSchema";
 
             var result = Generator.Generate(expression);
-            result.ShouldBe(string.Format("INSERT INTO [TestSchema].[TestTable1] ([guid]) VALUES ('{0}')", GeneratorTestHelper.TestGuid.ToString()));
+            result.ShouldBe($"INSERT INTO [TestSchema].[TestTable1] ([guid]) VALUES ('{GeneratorTestHelper.TestGuid.ToString()}')");
         }
 
         [Test]
@@ -142,7 +142,7 @@ namespace FluentMigrator.Tests.Unit.Generators.SqlServer2005
             var expression = GeneratorTestHelper.GetInsertGUIDExpression();
 
             var result = Generator.Generate(expression);
-            result.ShouldBe(string.Format("INSERT INTO [dbo].[TestTable1] ([guid]) VALUES ('{0}')", GeneratorTestHelper.TestGuid.ToString()));
+            result.ShouldBe($"INSERT INTO [dbo].[TestTable1] ([guid]) VALUES ('{GeneratorTestHelper.TestGuid.ToString()}')");
         }
 
         [Test]
diff --git a/test/FluentMigrator.Tests/Unit/Generators/SqlServerCe/SqlServerCeConstraintsTests.cs b/test/FluentMigrator.Tests/Unit/Generators/SqlServerCe/SqlServerCeConstraintsTests.cs
index e947dea8..8b518348 100644
--- a/test/FluentMigrator.Tests/Unit/Generators/SqlServerCe/SqlServerCeConstraintsTests.cs
+++ b/test/FluentMigrator.Tests/Unit/Generators/SqlServerCe/SqlServerCeConstraintsTests.cs
@@ -181,7 +181,7 @@ namespace FluentMigrator.Tests.Unit.Generators.SqlServerCe
             expression.ForeignKey.OnDelete = rule;
 
             var result = Generator.Generate(expression);
-            result.ShouldBe(string.Format("ALTER TABLE [TestTable1] ADD CONSTRAINT [FK_Test] FOREIGN KEY ([TestColumn1]) REFERENCES [TestTable2] ([TestColumn2]) ON DELETE {0}", output));
+            result.ShouldBe($"ALTER TABLE [TestTable1] ADD CONSTRAINT [FK_Test] FOREIGN KEY ([TestColumn1]) REFERENCES [TestTable2] ([TestColumn2]) ON DELETE {output}");
         }
 
         [TestCase(Rule.SetDefault, "SET DEFAULT"), TestCase(Rule.SetNull, "SET NULL"), TestCase(Rule.Cascade, "CASCADE")]
@@ -191,7 +191,7 @@ namespace FluentMigrator.Tests.Unit.Generators.SqlServerCe
             expression.ForeignKey.OnUpdate = rule;
 
             var result = Generator.Generate(expression);
-            result.ShouldBe(string.Format("ALTER TABLE [TestTable1] ADD CONSTRAINT [FK_Test] FOREIGN KEY ([TestColumn1]) REFERENCES [TestTable2] ([TestColumn2]) ON UPDATE {0}", output));
+            result.ShouldBe($"ALTER TABLE [TestTable1] ADD CONSTRAINT [FK_Test] FOREIGN KEY ([TestColumn1]) REFERENCES [TestTable2] ([TestColumn2]) ON UPDATE {output}");
         }
 
         [Test]
diff --git a/test/FluentMigrator.Tests/Unit/Generators/SqlServerCe/SqlServerCeDataTests.cs b/test/FluentMigrator.Tests/Unit/Generators/SqlServerCe/SqlServerCeDataTests.cs
index 0dbc0f01..bb445f49 100644
--- a/test/FluentMigrator.Tests/Unit/Generators/SqlServerCe/SqlServerCeDataTests.cs
+++ b/test/FluentMigrator.Tests/Unit/Generators/SqlServerCe/SqlServerCeDataTests.cs
@@ -133,7 +133,7 @@ namespace FluentMigrator.Tests.Unit.Generators.SqlServerCe
             expression.SchemaName = "TestSchema";
 
             var result = Generator.Generate(expression);
-            result.ShouldBe(string.Format("INSERT INTO [TestTable1] ([guid]) SELECT '{0}'", GeneratorTestHelper.TestGuid.ToString()));
+            result.ShouldBe($"INSERT INTO [TestTable1] ([guid]) SELECT '{GeneratorTestHelper.TestGuid.ToString()}'");
         }
 
         [Test]
@@ -142,7 +142,7 @@ namespace FluentMigrator.Tests.Unit.Generators.SqlServerCe
             var expression = GeneratorTestHelper.GetInsertGUIDExpression();
 
             var result = Generator.Generate(expression);
-            result.ShouldBe(string.Format("INSERT INTO [TestTable1] ([guid]) SELECT '{0}'", GeneratorTestHelper.TestGuid.ToString()));
+            result.ShouldBe($"INSERT INTO [TestTable1] ([guid]) SELECT '{GeneratorTestHelper.TestGuid.ToString()}'");
         }
 
         [Test]
diff --git a/test/FluentMigrator.Tests/Unit/Loggers/TextWriterWithGoAnnouncerTests.cs b/test/FluentMigrator.Tests/Unit/Loggers/TextWriterWithGoAnnouncerTests.cs
index 7aba7782..1ece1b1c 100644
--- a/test/FluentMigrator.Tests/Unit/Loggers/TextWriterWithGoAnnouncerTests.cs
+++ b/test/FluentMigrator.Tests/Unit/Loggers/TextWriterWithGoAnnouncerTests.cs
@@ -67,7 +67,7 @@ namespace FluentMigrator.Tests.Unit.Loggers
             _options.ShowSql = false;
 
             _logger.LogSql("SQL");
-            Output.ShouldBe(string.Empty);
+string.IsNullOrEmpty(Output);
         }
 
         [Test]
