diff --git a/src/Jackett.Common/Indexers/Abnormal.cs b/src/Jackett.Common/Indexers/Abnormal.cs
index 13fdded6..589fb54d 100644
--- a/src/Jackett.Common/Indexers/Abnormal.cs
+++ b/src/Jackett.Common/Indexers/Abnormal.cs
@@ -218,7 +218,7 @@ namespace Jackett.Common.Indexers
                     CleanCache();
 
                     // Search in cache
-                    var cachedResult = cache.Where(i => i.Query == searchTerm).FirstOrDefault();
+                    var cachedResult = cache.FirstOrDefault(i => i.Query == searchTerm);
                     if (cachedResult != null)
                         return cachedResult.Results.Select(s => (ReleaseInfo)s.Clone()).ToArray();
                 }
diff --git a/src/Jackett.Common/Indexers/AnimeBytes.cs b/src/Jackett.Common/Indexers/AnimeBytes.cs
index 01d560b4..1b66014b 100644
--- a/src/Jackett.Common/Indexers/AnimeBytes.cs
+++ b/src/Jackett.Common/Indexers/AnimeBytes.cs
@@ -165,7 +165,7 @@ namespace Jackett.Common.Indexers
                 // Remove old cache items
                 CleanCache();
 
-                var cachedResult = cache.Where(i => i.Query == queryUrl).FirstOrDefault();
+                var cachedResult = cache.FirstOrDefault(i => i.Query == queryUrl);
                 if (cachedResult != null)
                     return cachedResult.Results.Select(s => (ReleaseInfo)s.Clone()).ToArray();
             }
diff --git a/src/Jackett.Common/Indexers/BB.cs b/src/Jackett.Common/Indexers/BB.cs
index 8d94890c..c4ffbe02 100644
--- a/src/Jackett.Common/Indexers/BB.cs
+++ b/src/Jackett.Common/Indexers/BB.cs
@@ -125,7 +125,7 @@ namespace Jackett.Common.Indexers
 
             if (string.IsNullOrEmpty(query.Episode) && (query.Season > 0))
                 // Tracker naming rules: If query is for a whole season, "Season #" instead of "S##".
-                searchStrings.Add((query.SanitizedSearchTerm + " " + string.Format("\"Season {0}\"", query.Season)).Trim());
+                searchStrings.Add((query.SanitizedSearchTerm + " " + $"\"Season {query.Season}\"").Trim());
 
             var categories = MapTorznabCapsToTrackers(query);
             var request_urls = new List<string>();
@@ -152,7 +152,7 @@ namespace Jackett.Common.Indexers
 
             var responses = await Task.WhenAll(downloadTasksQuery.ToArray());
 
-            for (var i = 0; i < searchStrings.Count(); i++)
+            for (var i = 0; i < searchStrings.Count; i++)
             {
                 var results = responses[i];
                 // Occasionally the cookies become invalid, login again if that happens
@@ -211,7 +211,7 @@ namespace Jackett.Common.Indexers
 
                         if (catStr == "10") //change "Season #" to "S##" for TV shows
                             release.Title = Regex.Replace(release.Title, @"Season (\d+)",
-                                                          m => string.Format("S{0:00}", int.Parse(m.Groups[1].Value)));
+                                                          m => $"S{int.Parse(m.Groups[1].Value):00}");
 
                         releases.Add(release);
                     }
diff --git a/src/Jackett.Common/Indexers/BaseIndexer.cs b/src/Jackett.Common/Indexers/BaseIndexer.cs
index 8ebeca0b..19f77eab 100644
--- a/src/Jackett.Common/Indexers/BaseIndexer.cs
+++ b/src/Jackett.Common/Indexers/BaseIndexer.cs
@@ -104,9 +104,8 @@ namespace Jackett.Common.Indexers
             {
                 // Legacy cookie key
                 var jcookies = jsonConfig["cookies"];
-                if (jcookies is JArray)
+                if (jcookies is JArray array)
                 {
-                    var array = (JArray)jcookies;
                     legacyCookieHeader = string.Empty;
                     for (var i = 0; i < array.Count; i++)
                     {
@@ -140,7 +139,7 @@ namespace Jackett.Common.Indexers
             // reset site link to default if it's a legacy (defunc link)
             if (LegacySiteLinks != null && LegacySiteLinks.Contains(configData.SiteLink.Value))
             {
-                logger.Debug(string.Format("changing legacy site link from {0} to {1}", configData.SiteLink.Value, DefaultSiteLink));
+                logger.Debug($"changing legacy site link from {configData.SiteLink.Value} to {DefaultSiteLink}");
                 configData.SiteLink.Value = DefaultSiteLink;
             }
 
@@ -460,7 +459,7 @@ namespace Jackett.Common.Indexers
                 catch (Exception e)
                 {
                     logger.Error(
-                        e, string.Format("On attempt {0} downloading from {1}: {2}", (i + 1), DisplayName, e.Message));
+                        e, $"On attempt {(i + 1)} downloading from {DisplayName}: {e.Message}");
                     lastException = e;
                 }
 
@@ -550,7 +549,7 @@ namespace Jackett.Common.Indexers
                 await DoFollowIfRedirect(response, referrer, overrideRedirectUrl, overrideCookies, accumulateCookies);
                 if (accumulateCookies)
                 {
-                    CookieHeader = ResolveCookies((CookieHeader != null && CookieHeader != "" ? CookieHeader + " " : "") + (overrideCookies != null && overrideCookies != "" ? overrideCookies + " " : "") + response.Cookies);
+                    CookieHeader = ResolveCookies((!string.IsNullOrEmpty(CookieHeader) ? CookieHeader + " " : "") + (!string.IsNullOrEmpty(overrideCookies) ? overrideCookies + " " : "") + response.Cookies);
                     overrideCookies = response.Cookies = CookieHeader;
                 }
                 if (overrideCookies != null && response.Cookies == null)
@@ -575,10 +574,10 @@ namespace Jackett.Common.Indexers
         // Update CookieHeader with new cookies and save the config if something changed (e.g. a new CloudFlare clearance cookie was issued)
         protected virtual void UpdateCookieHeader(string newCookies, string cookieOverride = null)
         {
-            var newCookieHeader = ResolveCookies((cookieOverride != null && cookieOverride != "" ? cookieOverride + " " : "") + newCookies);
+            var newCookieHeader = ResolveCookies((!string.IsNullOrEmpty(cookieOverride) ? cookieOverride + " " : "") + newCookies);
             if (CookieHeader != newCookieHeader)
             {
-                logger.Debug(string.Format("updating Cookies {0} => {1}", CookieHeader, newCookieHeader));
+                logger.Debug($"updating Cookies {CookieHeader} => {newCookieHeader}");
                 CookieHeader = newCookieHeader;
                 if (IsConfigured)
                     SaveConfig();
@@ -675,9 +674,9 @@ namespace Jackett.Common.Indexers
 
         protected void OnParseError(string results, Exception ex)
         {
-            var fileName = string.Format("Error on {0} for {1}.txt", DateTime.Now.ToString("yyyyMMddHHmmss"), DisplayName);
+            var fileName = $"Error on {DateTime.Now.ToString("yyyyMMddHHmmss")} for {DisplayName}.txt";
             var spacing = string.Join("", Enumerable.Repeat(Environment.NewLine, 5));
-            var fileContents = string.Format("{0}{1}{2}", ex, spacing, results);
+            var fileContents = $"{ex}{spacing}{results}";
             logger.Error(fileName + fileContents);
             throw new Exception("Parse error", ex);
         }
diff --git a/src/Jackett.Common/Indexers/BroadcasTheNet.cs b/src/Jackett.Common/Indexers/BroadcasTheNet.cs
index b5402487..3f6e5502 100644
--- a/src/Jackett.Common/Indexers/BroadcasTheNet.cs
+++ b/src/Jackett.Common/Indexers/BroadcasTheNet.cs
@@ -70,7 +70,7 @@ namespace Jackett.Common.Indexers
             try
             {
                 var results = await PerformQuery(new TorznabQuery());
-                if (results.Count() == 0)
+                if (!results.Any())
                     throw new Exception("Testing returned no results!");
                 IsConfigured = true;
                 SaveConfig();
diff --git a/src/Jackett.Common/Indexers/CardigannIndexer.cs b/src/Jackett.Common/Indexers/CardigannIndexer.cs
index 4e750633..432f267e 100644
--- a/src/Jackett.Common/Indexers/CardigannIndexer.cs
+++ b/src/Jackett.Common/Indexers/CardigannIndexer.cs
@@ -180,7 +180,7 @@ namespace Jackett.Common.Indexers
                     var cat = TorznabCatType.GetCatByName(Category.Value);
                     if (cat == null)
                     {
-                        logger.Error(string.Format("CardigannIndexer ({0}): invalid Torznab category for id {1}: {2}", Id, Category.Key, Category.Value));
+                        logger.Error($"CardigannIndexer ({Id}): invalid Torznab category for id {Category.Key}: {Category.Value}");
                         continue;
                     }
                     AddCategoryMapping(Category.Key, cat);
@@ -198,7 +198,7 @@ namespace Jackett.Common.Indexers
                         TorznabCat = TorznabCatType.GetCatByName(Categorymapping.cat);
                         if (TorznabCat == null)
                         {
-                            logger.Error(string.Format("CardigannIndexer ({0}): invalid Torznab category for id {1}: {2}", Id, Categorymapping.id, Categorymapping.cat));
+                            logger.Error($"CardigannIndexer ({Id}): invalid Torznab category for id {Categorymapping.id}: {Categorymapping.cat}");
                             continue;
                         }
                     }
@@ -379,12 +379,12 @@ namespace Jackett.Common.Indexers
 
                     if (value == null)
                         conditionResultState = false;
-                    else if (value is string)
-                        conditionResultState = !string.IsNullOrWhiteSpace((string)value);
-                    else if (value is ICollection)
-                        conditionResultState = ((ICollection)value).Count > 0;
+                    else if (value is string s)
+                        conditionResultState = !string.IsNullOrWhiteSpace(s);
+                    else if (value is ICollection iCollection)
+                        conditionResultState = iCollection.Count > 0;
                     else
-                        throw new Exception(string.Format("Unexpceted type for variable {0}: {1}", condition, value.GetType()));
+                        throw new Exception($"Unexpceted type for variable {condition}: {value.GetType()}");
 
                     if (conditionResultState)
                     {
@@ -468,7 +468,7 @@ namespace Jackett.Common.Indexers
                     {
                         errorMessage = handleSelector(error.Message, ResultDocument.FirstElementChild);
                     }
-                    throw new ExceptionWithConfigData(string.Format("Error: {0}", errorMessage.Trim()), configData);
+                    throw new ExceptionWithConfigData($"Error: {errorMessage.Trim()}", configData);
                 }
             }
             return true; // no error
@@ -521,13 +521,13 @@ namespace Jackett.Common.Indexers
                 var form = landingResultDocument.QuerySelector(FormSelector);
                 if (form == null)
                 {
-                    throw new ExceptionWithConfigData(string.Format("Login failed: No form found on {0} using form selector {1}", LoginUrl, FormSelector), configData);
+                    throw new ExceptionWithConfigData($"Login failed: No form found on {LoginUrl} using form selector {FormSelector}", configData);
                 }
 
                 var inputs = form.QuerySelectorAll("input");
                 if (inputs == null)
                 {
-                    throw new ExceptionWithConfigData(string.Format("Login failed: No inputs found on {0} using form selector {1}", LoginUrl, FormSelector), configData);
+                    throw new ExceptionWithConfigData($"Login failed: No inputs found on {LoginUrl} using form selector {FormSelector}", configData);
                 }
 
                 var submitUrlstr = form.GetAttribute("action");
@@ -555,7 +555,7 @@ namespace Jackett.Common.Indexers
                     {
                         var inputElement = landingResultDocument.QuerySelector(Input.Key);
                         if (inputElement == null)
-                            throw new ExceptionWithConfigData(string.Format("Login failed: No input found using selector {0}", Input.Key), configData);
+                            throw new ExceptionWithConfigData($"Login failed: No input found using selector {Input.Key}", configData);
                         input = inputElement.GetAttribute("name");
                     }
                     pairs[input] = value;
@@ -574,7 +574,7 @@ namespace Jackett.Common.Indexers
                         }
                         catch (Exception ex)
                         {
-                            throw new Exception(string.Format("Error while parsing selector input={0}, selector={1}, value={2}: {3}", Selectorinput.Key, Selectorinput.Value.Selector, value, ex.Message));
+                            throw new Exception($"Error while parsing selector input={Selectorinput.Key}, selector={Selectorinput.Value.Selector}, value={value}: {ex.Message}");
                         }
                     }
                 }
@@ -592,7 +592,7 @@ namespace Jackett.Common.Indexers
                         }
                         catch (Exception ex)
                         {
-                            throw new Exception(string.Format("Error while parsing get selector input={0}, selector={1}, value={2}: {3}", Selectorinput.Key, Selectorinput.Value.Selector, value, ex.Message));
+                            throw new Exception($"Error while parsing get selector input={Selectorinput.Key}, selector={Selectorinput.Value.Selector}, value={value}: {ex.Message}");
                         }
                     }
                 }
@@ -625,7 +625,7 @@ namespace Jackett.Common.Indexers
                             {
                                 var inputElement = landingResultDocument.QuerySelector(Captcha.Input);
                                 if (inputElement == null)
-                                    throw new ExceptionWithConfigData(string.Format("Login failed: No captcha input found using {0}", Captcha.Input), configData);
+                                    throw new ExceptionWithConfigData($"Login failed: No captcha input found using {Captcha.Input}", configData);
                                 input = inputElement.GetAttribute("name");
                             }
                             pairs[input] = CaptchaText.Value;
@@ -641,7 +641,7 @@ namespace Jackett.Common.Indexers
                             {
                                 var inputElement = landingResultDocument.QuerySelector(Captcha.Input);
                                 if (inputElement == null)
-                                    throw new ExceptionWithConfigData(string.Format("Login failed: No captcha input found using {0}", Captcha.Input), configData);
+                                    throw new ExceptionWithConfigData($"Login failed: No captcha input found using {Captcha.Input}", configData);
                                 input = inputElement.GetAttribute("name");
                             }
                             pairs[input] = CaptchaAnswer.Value;
@@ -721,7 +721,7 @@ namespace Jackett.Common.Indexers
             {
                 throw new NotImplementedException("Login method " + Definition.Login.Method + " not implemented");
             }
-            logger.Debug(string.Format("CardigannIndexer ({0}): Cookies after login: {1}", Id, CookieHeader));
+            logger.Debug($"CardigannIndexer ({Id}): Cookies after login: {CookieHeader}");
             return true;
         }
 
@@ -774,7 +774,7 @@ namespace Jackett.Common.Indexers
                 var selection = testResultDocument.QuerySelectorAll(Login.Test.Selector);
                 if (selection.Length == 0)
                 {
-                    throw new ExceptionWithConfigData(string.Format("Login failed: Selector \"{0}\" didn't match", Login.Test.Selector), configData);
+                    throw new ExceptionWithConfigData($"Login failed: Selector \"{Login.Test.Selector}\" didn't match", configData);
                 }
             }
             return true;
@@ -875,7 +875,7 @@ namespace Jackett.Common.Indexers
                     }
                     else
                     {
-                        logger.Debug(string.Format("CardigannIndexer ({0}): No captcha image found", Id));
+                        logger.Debug($"CardigannIndexer ({Id}): No captcha image found");
                     }
                 }
                 else if (Captcha.Type == "text")
@@ -893,19 +893,19 @@ namespace Jackett.Common.Indexers
                     }
                     else
                     {
-                        logger.Debug(string.Format("CardigannIndexer ({0}): No captcha image found", Id));
+                        logger.Debug($"CardigannIndexer ({Id}): No captcha image found");
                     }
                 }
                 else
                 {
-                    throw new NotImplementedException(string.Format("Captcha type \"{0}\" is not implemented", Captcha.Type));
+                    throw new NotImplementedException($"Captcha type \"{Captcha.Type}\" is not implemented");
                 }
             }
 
             if (hasCaptcha && automaticlogin)
             {
                 configData.LastError.Value = "Got captcha during automatic login, please reconfigure manually";
-                logger.Error(string.Format("CardigannIndexer ({0}): Found captcha during automatic login, aborting", Id));
+                logger.Error($"CardigannIndexer ({Id}): Found captcha during automatic login, aborting");
                 return null;
             }
 
@@ -1050,17 +1050,17 @@ namespace Jackett.Common.Indexers
                     case "hexdump":
                         // this is mainly for debugging invisible special char related issues
                         var HexData = string.Join("", Data.Select(c => c + "(" + ((int)c).ToString("X2") + ")"));
-                        logger.Debug(string.Format("CardigannIndexer ({0}): strdump: {1}", Id, HexData));
+                        logger.Debug($"CardigannIndexer ({Id}): strdump: {HexData}");
                         break;
                     case "strdump":
                         // for debugging
                         var DebugData = Data.Replace("\r", "\\r").Replace("\n", "\\n").Replace("\xA0", "\\xA0");
                         var strTag = (string)Filter.Args;
                         if (strTag != null)
-                            strTag = string.Format("({0}):", strTag);
+                            strTag = $"({strTag}):";
                         else
                             strTag = ":";
-                        logger.Debug(string.Format("CardigannIndexer ({0}): strdump{1} {2}", Id, strTag, DebugData));
+                        logger.Debug($"CardigannIndexer ({Id}): strdump{strTag} {DebugData}");
                         break;
                     default:
                         break;
@@ -1101,7 +1101,7 @@ namespace Jackett.Common.Indexers
                     selection = QuerySelector(Dom, Selector.Selector);
                 if (selection == null)
                 {
-                    throw new Exception(string.Format("Selector \"{0}\" didn't match {1}", Selector.Selector, Dom.ToHtmlPretty()));
+                    throw new Exception($"Selector \"{Selector.Selector}\" didn't match {Dom.ToHtmlPretty()}");
                 }
             }
 
@@ -1124,13 +1124,13 @@ namespace Jackett.Common.Indexers
                     }
                 }
                 if (value == null)
-                    throw new Exception(string.Format("None of the case selectors \"{0}\" matched {1}", string.Join(",", Selector.Case), selection.ToHtmlPretty()));
+                    throw new Exception($"None of the case selectors \"{string.Join(",", Selector.Case)}\" matched {selection.ToHtmlPretty()}");
             }
             else if (Selector.Attribute != null)
             {
                 value = selection.GetAttribute(Selector.Attribute);
                 if (value == null)
-                    throw new Exception(string.Format("Attribute \"{0}\" is not set for element {1}", Selector.Attribute, selection.ToHtmlPretty()));
+                    throw new Exception($"Attribute \"{Selector.Attribute}\" is not set for element {selection.ToHtmlPretty()}");
             }
             else
             {
@@ -1286,7 +1286,7 @@ namespace Jackett.Common.Indexers
                     var loginNeeded = CheckIfLoginIsNeeded(response, SearchResultDocument);
                     if (loginNeeded)
                     {
-                        logger.Info(string.Format("CardigannIndexer ({0}): Relogin required", Id));
+                        logger.Info($"CardigannIndexer ({Id}): Relogin required");
                         var LoginResult = await DoLogin();
                         if (!LoginResult)
                             throw new Exception(string.Format("Relogin failed"));
@@ -1305,7 +1305,7 @@ namespace Jackett.Common.Indexers
                     {
                         results = applyFilters(results, Search.Preprocessingfilters, variables);
                         SearchResultDocument = SearchResultParser.ParseDocument(results);
-                        logger.Debug(string.Format("CardigannIndexer ({0}): result after preprocessingfilters: {1}", Id, results));
+                        logger.Debug($"CardigannIndexer ({Id}): result after preprocessingfilters: {results}");
                     }
 
                     var rowsSelector = applyGoTemplateText(Search.Rows.Selector, variables);
@@ -1519,7 +1519,7 @@ namespace Jackett.Common.Indexers
                                         variables[variablesKey] = null;
                                         continue;
                                     }
-                                    throw new Exception(string.Format("Error while parsing field={0}, selector={1}, value={2}: {3}", Field.Key, Field.Value.Selector, (value == null ? "<null>" : value), ex.Message));
+                                    throw new Exception($"Error while parsing field={Field.Key}, selector={Field.Value.Selector}, value={(value == null ? "<null>" : value)}: {ex.Message}");
                                 }
                             }
 
@@ -1549,16 +1549,16 @@ namespace Jackett.Common.Indexers
 
                                             if (!query.MatchQueryStringAND(release.Title, CharacterLimit, queryKeywords))
                                             {
-                                                logger.Debug(string.Format("CardigannIndexer ({0}): skipping {1} (andmatch filter)", Id, release.Title));
+                                                logger.Debug($"CardigannIndexer ({Id}): skipping {release.Title} (andmatch filter)");
                                                 SkipRelease = true;
                                             }
                                             break;
                                         case "strdump":
                                             // for debugging
-                                            logger.Debug(string.Format("CardigannIndexer ({0}): row strdump: {1}", Id, Row.ToHtmlPretty()));
+                                            logger.Debug($"CardigannIndexer ({Id}): row strdump: {Row.ToHtmlPretty()}");
                                             break;
                                         default:
-                                            logger.Error(string.Format("CardigannIndexer ({0}): Unsupported rows filter: {1}", Id, Filter.Name));
+                                            logger.Error($"CardigannIndexer ({Id}): Unsupported rows filter: {Filter.Name}");
                                             break;
                                     }
                                 }
@@ -1602,7 +1602,7 @@ namespace Jackett.Common.Indexers
                                 }
 
                                 if (value == null && DateHeaders.Optional == false)
-                                    throw new Exception(string.Format("No date header row found for {0}", release.ToString()));
+                                    throw new Exception($"No date header row found for {release.ToString()}");
                                 if (value != null)
                                     release.PublishDate = DateTimeUtil.FromUnknown(value);
                             }
@@ -1611,7 +1611,7 @@ namespace Jackett.Common.Indexers
                         }
                         catch (Exception ex)
                         {
-                            logger.Error(string.Format("CardigannIndexer ({0}): Error while parsing row '{1}':\n\n{2}", Id, Row.ToHtmlPretty(), ex));
+                            logger.Error($"CardigannIndexer ({Id}): Error while parsing row '{Row.ToHtmlPretty()}':\n\n{ex}");
                         }
                     }
                 }
@@ -1707,13 +1707,13 @@ namespace Jackett.Common.Indexers
                     var downloadElement = searchResultDocument.QuerySelector(selector);
                     if (downloadElement != null)
                     {
-                        logger.Debug(string.Format("CardigannIndexer ({0}): Download selector {1} matched:{2}", Id, selector, downloadElement.ToHtmlPretty()));
+                        logger.Debug($"CardigannIndexer ({Id}): Download selector {selector} matched:{downloadElement.ToHtmlPretty()}");
                         var href = "";
                         if (Download.Attribute != null)
                         {
                             href = downloadElement.GetAttribute(Download.Attribute);
                             if (href == null)
-                                throw new Exception(string.Format("Attribute \"{0}\" is not set for element {1}", Download.Attribute, downloadElement.ToHtmlPretty()));
+                                throw new Exception($"Attribute \"{Download.Attribute}\" is not set for element {downloadElement.ToHtmlPretty()}");
                         }
                         else
                         {
@@ -1724,8 +1724,8 @@ namespace Jackett.Common.Indexers
                     }
                     else
                     {
-                        logger.Error(string.Format("CardigannIndexer ({0}): Download selector {1} didn't match:\n{2}", Id, Download.Selector, results));
-                        throw new Exception(string.Format("Download selector {0} didn't match", Download.Selector));
+                        logger.Error($"CardigannIndexer ({Id}): Download selector {Download.Selector} didn't match:\n{results}");
+                        throw new Exception($"Download selector {Download.Selector} didn't match");
                     }
                 }
             }
diff --git a/src/Jackett.Common/Indexers/DigitalCore.cs b/src/Jackett.Common/Indexers/DigitalCore.cs
index 6adb50ed..ad1622ce 100644
--- a/src/Jackett.Common/Indexers/DigitalCore.cs
+++ b/src/Jackett.Common/Indexers/DigitalCore.cs
@@ -116,7 +116,7 @@ namespace Jackett.Common.Indexers
             try
             {
                 var results = await PerformQuery(new TorznabQuery());
-                if (results.Count() == 0)
+                if (!results.Any())
                 {
                     throw new Exception("Found 0 results in the tracker");
                 }
diff --git a/src/Jackett.Common/Indexers/GazelleGames.cs b/src/Jackett.Common/Indexers/GazelleGames.cs
index a4193c7d..b2b36790 100644
--- a/src/Jackett.Common/Indexers/GazelleGames.cs
+++ b/src/Jackett.Common/Indexers/GazelleGames.cs
@@ -190,7 +190,7 @@ namespace Jackett.Common.Indexers
             try
             {
                 var results = await PerformQuery(new TorznabQuery());
-                if (results.Count() == 0)
+                if (!results.Any())
                 {
                     throw new Exception("Found 0 results in the tracker");
                 }
diff --git a/src/Jackett.Common/Indexers/Libble.cs b/src/Jackett.Common/Indexers/Libble.cs
index d686aa80..299f5d02 100644
--- a/src/Jackett.Common/Indexers/Libble.cs
+++ b/src/Jackett.Common/Indexers/Libble.cs
@@ -182,7 +182,7 @@ namespace Jackett.Common.Indexers
                     var thumbnailNode = row.QuerySelector(".thumbnail");
 
                     var releaseArtist = "Various Artists";
-                    if (artistsNameNodes.Count() > 0)
+                    if (artistsNameNodes.Any())
                     {
                         var aristNames = new List<string>();
                         foreach (var aristNode in artistsNameNodes)
@@ -212,7 +212,7 @@ namespace Jackett.Common.Indexers
                         }
                     }
 
-                    var releaseRows = dom.QuerySelectorAll(String.Format(".group_torrent.groupid_{0}", releaseGroupId));
+                    var releaseRows = dom.QuerySelectorAll($".group_torrent.groupid_{releaseGroupId}");
 
                     string lastEdition = null;
                     foreach (var releaseDetails in releaseRows)
@@ -284,7 +284,7 @@ namespace Jackett.Common.Indexers
 
                             // Set title (with volume factor tags stripped)
                             var releaseTagsString = string.Join(" / ", releaseTags);
-                            release.Title = String.Format("{0} - {1} [{2}] {3}", releaseArtist, releaseAlbumName, releaseAlbumYear, releaseTagsString);
+                            release.Title = $"{releaseArtist} - {releaseAlbumName} [{releaseAlbumYear}] {releaseTagsString}";
 
                             releases.Add(release);
                         }
diff --git a/src/Jackett.Common/Indexers/LostFilm.cs b/src/Jackett.Common/Indexers/LostFilm.cs
index b4c31d93..017f53c2 100644
--- a/src/Jackett.Common/Indexers/LostFilm.cs
+++ b/src/Jackett.Common/Indexers/LostFilm.cs
@@ -331,11 +331,11 @@ namespace Jackett.Common.Indexers
                         continue; // Search loop
 
                     var series = jsonSeries.ToList();
-                    logger.Debug("> Found " + series.Count().ToString() + " series: [" + string.Join(", ", series.Select(s => s["title_orig"].Value<string>())) + "]");
+                    logger.Debug("> Found " + series.Count.ToString() + " series: [" + string.Join(", ", series.Select(s => s["title_orig"].Value<string>())) + "]");
 
                     // Filter found series
 
-                    if (series.Count() > 1)
+                    if (series.Count > 1)
                     {
                         serieFilterKeywords = keywords.Count - searchKeywords;
 
@@ -345,7 +345,7 @@ namespace Jackett.Common.Indexers
                             logger.Debug("> Filtering: " + serieFilter);
                             var filteredSeries = series.Where(s => s["title_orig"].Value<string>().Contains(serieFilter)).ToList();
 
-                            if (filteredSeries.Count() > 0)
+                            if (filteredSeries.Any())
                             {
                                 logger.Debug("> Series filtered: [" + string.Join(", ", filteredSeries.Select(s => s["title_orig"].Value<string>())) + "]");
                                 series = filteredSeries;
@@ -381,9 +381,9 @@ namespace Jackett.Common.Indexers
                                 logger.Debug("> Searching episodes with filter [" + filter + "]");
                                 var taskReleases = await FetchSeriesReleases(url, query, filter);
 
-                                if (taskReleases.Count() > 0)
+                                if (taskReleases.Any())
                                 {
-                                    logger.Debug("> Found " + taskReleases.Count().ToString() + " episodes");
+                                    logger.Debug("> Found " + taskReleases.Count.ToString() + " episodes");
                                     releases.AddRange(taskReleases);
                                     break; // Episodes Filter loop
                                 }
@@ -551,7 +551,7 @@ namespace Jackett.Common.Indexers
                         }
 
                         // Skip parsing separate episodes if season pack was added
-                        if (seasonReleases.Count() > 0)
+                        if (seasonReleases.Any())
                         {
                             continue;
                         }
@@ -612,7 +612,7 @@ namespace Jackett.Common.Indexers
                         }
                         catch (Exception ex)
                         {
-                            logger.Error(string.Format("{0}: Error while parsing row '{1}':\n\n{2}", Id, row.OuterHtml, ex));
+                            logger.Error($"{Id}: Error while parsing row '{row.OuterHtml}':\n\n{ex}");
                         }
 
                         if (couldBreak)
@@ -770,7 +770,7 @@ namespace Jackett.Common.Indexers
                     }
                     catch (Exception ex)
                     {
-                        logger.Error(string.Format("{0}: Error while parsing row '{1}':\n\n{2}", Id, row.OuterHtml, ex));
+                        logger.Error($"{Id}: Error while parsing row '{row.OuterHtml}':\n\n{ex}");
                     }
                 }
             }
diff --git a/src/Jackett.Common/Indexers/MoreThanTV.cs b/src/Jackett.Common/Indexers/MoreThanTV.cs
index b5efa5b0..ca19eefa 100644
--- a/src/Jackett.Common/Indexers/MoreThanTV.cs
+++ b/src/Jackett.Common/Indexers/MoreThanTV.cs
@@ -193,7 +193,7 @@ namespace Jackett.Common.Indexers
                             qualityEdition = groupItem.QuerySelector(".edition_info strong").TextContent.Split('/')[1].Trim();
                         else if (groupItem.ClassList[2].StartsWith("edition_"))
                         {
-                            if (qualityEdition.Equals(string.Empty))
+                            if (string.IsNullOrEmpty(qualityEdition))
                                 break;
 
                             // Parse required data
diff --git a/src/Jackett.Common/Indexers/Partis.cs b/src/Jackett.Common/Indexers/Partis.cs
index 36269a7b..741b0009 100644
--- a/src/Jackett.Common/Indexers/Partis.cs
+++ b/src/Jackett.Common/Indexers/Partis.cs
@@ -152,7 +152,7 @@ namespace Jackett.Common.Indexers
             var searchUrl = SearchUrl + "?" + queryCollection.GetQueryString();
 
             // log search URL
-            logger.Info(string.Format("Searh URL Partis_: {0}", searchUrl));
+            logger.Info($"Searh URL Partis_: {searchUrl}");
 
             // add necessary headers
             var header = new Dictionary<string, string>
@@ -235,7 +235,7 @@ namespace Jackett.Common.Indexers
                     }
                     catch (Exception ex)
                     {
-                        logger.Error(string.Format("{0}: Error while parsing row '{1}':\n\n{2}", Id, Row.OuterHtml, ex));
+                        logger.Error($"{Id}: Error while parsing row '{Row.OuterHtml}':\n\n{ex}");
                     }
                 }
             }
diff --git a/src/Jackett.Common/Indexers/PornoLab.cs b/src/Jackett.Common/Indexers/PornoLab.cs
index 77118c32..cb4d2ec3 100644
--- a/src/Jackett.Common/Indexers/PornoLab.cs
+++ b/src/Jackett.Common/Indexers/PornoLab.cs
@@ -323,7 +323,7 @@ namespace Jackett.Common.Indexers
                     }
                     catch (Exception ex)
                     {
-                        logger.Error(string.Format("{0}: Error while parsing row '{1}':\n\n{2}", Id, Row.OuterHtml, ex));
+                        logger.Error($"{Id}: Error while parsing row '{Row.OuterHtml}':\n\n{ex}");
                     }
                 }
             }
@@ -347,15 +347,15 @@ namespace Jackett.Common.Indexers
             var DlUri = SearchResultDocument.QuerySelector(downloadSelector);
             if (DlUri != null)
             {
-                logger.Debug(string.Format("{0}: Download selector {1} matched:{2}", Id, downloadSelector, DlUri.OuterHtml));
+                logger.Debug($"{Id}: Download selector {downloadSelector} matched:{DlUri.OuterHtml}");
                 var href = DlUri.GetAttribute("href");
                 downloadlink = new Uri(SiteLink + "forum/" + href);
 
             }
             else
             {
-                logger.Error(string.Format("{0}: Download selector {1} didn't match:\n{2}", Id, downloadSelector, results));
-                throw new Exception(string.Format("Download selector {0} didn't match", downloadSelector));
+                logger.Error($"{Id}: Download selector {downloadSelector} didn't match:\n{results}");
+                throw new Exception($"Download selector {downloadSelector} didn't match");
             }
             return await base.Download(downloadlink, RequestType.POST, link.ToString());
         }
diff --git a/src/Jackett.Common/Indexers/SuperBits.cs b/src/Jackett.Common/Indexers/SuperBits.cs
index 8217c5eb..148e4fbc 100644
--- a/src/Jackett.Common/Indexers/SuperBits.cs
+++ b/src/Jackett.Common/Indexers/SuperBits.cs
@@ -102,7 +102,7 @@ namespace Jackett.Common.Indexers
             try
             {
                 var results = await PerformQuery(new TorznabQuery());
-                if (results.Count() == 0)
+                if (!results.Any())
                 {
                     throw new Exception("Found 0 results in the tracker");
                 }
diff --git a/src/Jackett.Common/Indexers/Toloka.cs b/src/Jackett.Common/Indexers/Toloka.cs
index 4477a16c..8d103f04 100644
--- a/src/Jackett.Common/Indexers/Toloka.cs
+++ b/src/Jackett.Common/Indexers/Toloka.cs
@@ -327,7 +327,7 @@ namespace Jackett.Common.Indexers
                     }
                     catch (Exception ex)
                     {
-                        logger.Error(string.Format("{0}: Error while parsing row '{1}':\n\n{2}", Id, Row.OuterHtml, ex));
+                        logger.Error($"{Id}: Error while parsing row '{Row.OuterHtml}':\n\n{ex}");
                     }
                 }
             }
diff --git a/src/Jackett.Common/Indexers/TorrenTech.cs b/src/Jackett.Common/Indexers/TorrenTech.cs
index 25f579bd..e11634d9 100644
--- a/src/Jackett.Common/Indexers/TorrenTech.cs
+++ b/src/Jackett.Common/Indexers/TorrenTech.cs
@@ -197,7 +197,7 @@ namespace Jackett.Common.Indexers
                     }
                     catch (Exception ex)
                     {
-                        logger.Error(string.Format("{0}: Error while parsing row '{1}':\n\n{2}", Id, Row.OuterHtml, ex));
+                        logger.Error($"{Id}: Error while parsing row '{Row.OuterHtml}':\n\n{ex}");
                     }
                 }
             }
@@ -219,14 +219,14 @@ namespace Jackett.Common.Indexers
             var DlUri = SearchResultDocument.QuerySelector(downloadSelector);
             if (DlUri != null)
             {
-                logger.Debug(string.Format("{0}: Download selector {1} matched:{2}", Id, downloadSelector, DlUri.OuterHtml));
+                logger.Debug($"{Id}: Download selector {downloadSelector} matched:{DlUri.OuterHtml}");
                 var href = DlUri.GetAttribute("href");
                 link = new Uri(href);
             }
             else
             {
-                logger.Error(string.Format("{0}: Download selector {1} didn't match:\n{2}", Id, downloadSelector, results));
-                throw new Exception(string.Format("Download selector {0} didn't match", downloadSelector));
+                logger.Error($"{Id}: Download selector {downloadSelector} didn't match:\n{results}");
+                throw new Exception($"Download selector {downloadSelector} didn't match");
             }
             return await base.Download(link);
         }
diff --git a/src/Jackett.Common/Indexers/Xthor.cs b/src/Jackett.Common/Indexers/Xthor.cs
index 1ab3ad45..4a2f5f0b 100644
--- a/src/Jackett.Common/Indexers/Xthor.cs
+++ b/src/Jackett.Common/Indexers/Xthor.cs
@@ -351,7 +351,7 @@ namespace Jackett.Common.Indexers
             public string download_link { get; set; }
             public int tmdb_id { get; set; }
 
-            public override string ToString() => string.Format("[XthorTorrent: id={0}, category={1}, seeders={2}, leechers={3}, name={4}, times_completed={5}, size={6}, added={7}, freeleech={8}, numfiles={9}, release_group={10}, download_link={11}, tmdb_id={12}]", id, category, seeders, leechers, name, times_completed, size, added, freeleech, numfiles, release_group, download_link, tmdb_id);
+            public override string ToString() => $"[XthorTorrent: id={id}, category={category}, seeders={seeders}, leechers={leechers}, name={name}, times_completed={times_completed}, size={size}, added={added}, freeleech={freeleech}, numfiles={numfiles}, release_group={release_group}, download_link={download_link}, tmdb_id={tmdb_id}]";
         }
 
         /// <summary>
diff --git a/src/Jackett.Common/Indexers/YTS.cs b/src/Jackett.Common/Indexers/YTS.cs
index a4513e21..b493b9cc 100644
--- a/src/Jackett.Common/Indexers/YTS.cs
+++ b/src/Jackett.Common/Indexers/YTS.cs
@@ -72,7 +72,7 @@ namespace Jackett.Common.Indexers
             LoadValuesFromJson(configJson);
             var releases = await PerformQuery(new TorznabQuery());
 
-            await ConfigureIfOK(string.Empty, releases.Count() > 0,
+            await ConfigureIfOK(string.Empty, releases.Any(),
                                 () => throw new Exception("Could not find releases from this URL"));
 
             return IndexerConfigurationStatus.Completed;
diff --git a/src/Jackett.Common/Models/TorznabQuery.cs b/src/Jackett.Common/Models/TorznabQuery.cs
index ee8997d0..139bea69 100644
--- a/src/Jackett.Common/Models/TorznabQuery.cs
+++ b/src/Jackett.Common/Models/TorznabQuery.cs
@@ -192,10 +192,10 @@ namespace Jackett.Common.Models
                 return string.Empty;
 
             string episodeString;
-            if (DateTime.TryParseExact(string.Format("{0} {1}", Season, Episode), "yyyy MM/dd", CultureInfo.InvariantCulture, DateTimeStyles.None, out var showDate))
+            if (DateTime.TryParseExact($"{Season} {Episode}", "yyyy MM/dd", CultureInfo.InvariantCulture, DateTimeStyles.None, out var showDate))
                 episodeString = showDate.ToString("yyyy.MM.dd");
             else if (string.IsNullOrEmpty(Episode))
-                episodeString = string.Format("S{0:00}", Season);
+                episodeString = $"S{Season:00}";
             else
             {
                 try
@@ -204,7 +204,7 @@ namespace Jackett.Common.Models
                 }
                 catch (FormatException) // e.g. seaching for S01E01A
                 {
-                    episodeString = string.Format("S{0:00}E{1}", Season, Episode);
+                    episodeString = $"S{Season:00}E{Episode}";
                 }
 
             }
diff --git a/src/Jackett.Common/Utils/Clients/WebClient.cs b/src/Jackett.Common/Utils/Clients/WebClient.cs
index 4b1e046d..d5387d1f 100644
--- a/src/Jackett.Common/Utils/Clients/WebClient.cs
+++ b/src/Jackett.Common/Utils/Clients/WebClient.cs
@@ -132,7 +132,7 @@ namespace Jackett.Common.Utils.Clients
                 if (timeElapsed < requestDelayTimeSpan)
                 {
                     var delay = requestDelayTimeSpan - timeElapsed;
-                    logger.Debug(string.Format("WebClient({0}): delaying request for {1} by {2} seconds", ClientType, request.Url, delay.TotalSeconds.ToString()));
+                    logger.Debug($"WebClient({ClientType}): delaying request for {request.Url} by {delay.TotalSeconds.ToString()} seconds");
                     await Task.Delay(delay);
                 }
             }
diff --git a/src/Jackett.Common/Utils/StringUtil.cs b/src/Jackett.Common/Utils/StringUtil.cs
index f48e0d25..d4e90092 100644
--- a/src/Jackett.Common/Utils/StringUtil.cs
+++ b/src/Jackett.Common/Utils/StringUtil.cs
@@ -90,11 +90,7 @@ namespace Jackett.Common.Utils
                                  Name = property.Name,
                                  Value = property.GetValue(exception, null)
                              })
-                             .Select(x => string.Format(
-                                 "{0} = {1}",
-                                 x.Name,
-                                 x.Value != null ? x.Value.ToString() : string.Empty
-                             ));
+                             .Select(x => $"{x.Name} = {(x.Value != null ? x.Value.ToString() : string.Empty)}");
             return string.Join("\n", fields);
         }
 
diff --git a/src/Jackett.Server/Middleware/CustomExceptionHandler.cs b/src/Jackett.Server/Middleware/CustomExceptionHandler.cs
index 37cdb21f..ff7c9b17 100644
--- a/src/Jackett.Server/Middleware/CustomExceptionHandler.cs
+++ b/src/Jackett.Server/Middleware/CustomExceptionHandler.cs
@@ -37,8 +37,8 @@ namespace Jackett.Server.Middleware
                     var msg = message;
 
                     var json = new JObject();
-                    if (e is ExceptionWithConfigData)
-                        json["config"] = ((ExceptionWithConfigData)e).ConfigData.ToJson(null, false);
+                    if (e is ExceptionWithConfigData exceptionWithConfigData)
+                        json["config"] = exceptionWithConfigData.ConfigData.ToJson(null, false);
 
                     json["result"] = "error";
                     json["error"] = msg;
diff --git a/src/Jackett.Server/Services/SecuityService.cs b/src/Jackett.Server/Services/SecuityService.cs
index 5a30ab4a..94997af3 100644
--- a/src/Jackett.Server/Services/SecuityService.cs
+++ b/src/Jackett.Server/Services/SecuityService.cs
@@ -31,7 +31,7 @@ namespace Jackett.Server.Services
             hashValue = hashString.ComputeHash(message);
             foreach (var x in hashValue)
             {
-                hex += string.Format("{0:x2}", x);
+                hex += $"{x:x2}";
             }
             return hex;
         }
