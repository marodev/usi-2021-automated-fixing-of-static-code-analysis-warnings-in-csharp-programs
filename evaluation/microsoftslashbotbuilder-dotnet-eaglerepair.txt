Found the following rules to apply: UseMethodAnyRewriterR6, MergeSequentialChecksRewriterR2, NullChecksShouldNotBeUsedWithIsRewriterR3, SimplifyLinqRewriterR4, TypeCheckAndCastRewriterR5, UseNullPropagationRewriterR7, UsePatternMatchingRewriterR8, UseStringInterpolationRewriterR9, UseStringIsNullOrEmptyRewriterR10



Project: Microsoft.Bot.Builder.Dialogs.Adaptive
    #1 Path: /home/vsts/work/1/s/libraries/Microsoft.Bot.Builder.Dialogs.Adaptive/Actions/ActionScope.cs, Line: 250, Message: https://www.jetbrains.com/help/resharper/MergeSequentialChecks.html
    #2 Path: /home/vsts/work/1/s/libraries/Microsoft.Bot.Builder.Dialogs.Adaptive/Actions/ForEachPage.cs, Line: 187, Message: SonarQube: Null checks should not be used with "is". See https://rules.sonarsource.com/csharp/RSPEC-4201 / ReSharper: Merge sequential checks in && or || expressions. See https://www.jetbrains.com/help/resharper/MergeSequentialChecks.html
    #3 Path: /home/vsts/work/1/s/libraries/Microsoft.Bot.Builder.Dialogs.Adaptive/Actions/ForEachPage.cs, Line: 187, Message: ReSharper: Type check and casts can be merged. See https://www.jetbrains.com/help/resharper/MergeCastWithTypeCheck.html / SonarQube: Duplicate casts should not be made. See https://rules.sonarsource.com/csharp/RSPEC-3247
    #4 Path: /home/vsts/work/1/s/libraries/Microsoft.Bot.Builder.Dialogs.Adaptive/AdaptiveDialog.cs, Line: 695, Message: https://www.jetbrains.com/help/resharper/MergeSequentialChecks.html
    #5 Path: /home/vsts/work/1/s/libraries/Microsoft.Bot.Builder.Dialogs.Adaptive/Converters/ITemplateActivityConverter.cs, Line: 66, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #6 Path: /home/vsts/work/1/s/libraries/Microsoft.Bot.Builder.Dialogs.Adaptive/SchemaHelper.cs, Line: 130, Message: SonarQube: Null checks should not be used with "is". See https://rules.sonarsource.com/csharp/RSPEC-4201 / ReSharper: Merge sequential checks in && or || expressions. See https://www.jetbrains.com/help/resharper/MergeSequentialChecks.html



Project: Microsoft.Bot.Builder.Dialogs.Adaptive.Tests(netcoreapp2.1)
    #7 Path: /home/vsts/work/1/s/tests/Microsoft.Bot.Builder.Dialogs.Adaptive.Tests/DebugComposer.cs, Line: 42, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #8 Path: /home/vsts/work/1/s/tests/Microsoft.Bot.Builder.Dialogs.Adaptive.Tests/EntityRecognizerTests.cs, Line: 123, Message: ReSharper: ReplaceWithSingleCallToCount. / SonarQube "IEnumerable" LINQs should be simplified. See https://rules.sonarsource.com/csharp/RSPEC-2971
    #9 Path: /home/vsts/work/1/s/tests/Microsoft.Bot.Builder.Dialogs.Adaptive.Tests/EntityRecognizerTests.cs, Line: 153, Message: ReSharper: ReplaceWithSingleCallToCount. / SonarQube "IEnumerable" LINQs should be simplified. See https://rules.sonarsource.com/csharp/RSPEC-2971
    #10 Path: /home/vsts/work/1/s/tests/Microsoft.Bot.Builder.Dialogs.Adaptive.Tests/EntityRecognizerTests.cs, Line: 173, Message: ReSharper: ReplaceWithSingleCallToCount. / SonarQube "IEnumerable" LINQs should be simplified. See https://rules.sonarsource.com/csharp/RSPEC-2971
    #11 Path: /home/vsts/work/1/s/tests/Microsoft.Bot.Builder.Dialogs.Adaptive.Tests/EntityRecognizerTests.cs, Line: 224, Message: ReSharper: ReplaceWithSingleCallToCount. / SonarQube "IEnumerable" LINQs should be simplified. See https://rules.sonarsource.com/csharp/RSPEC-2971



Project: Microsoft.Bot.Connector
    #12 Path: /home/vsts/work/1/s/libraries/Microsoft.Bot.Connector/Attachments.cs, Line: 172, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #13 Path: /home/vsts/work/1/s/libraries/Microsoft.Bot.Connector/Attachments.cs, Line: 196, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #14 Path: /home/vsts/work/1/s/libraries/Microsoft.Bot.Connector/Attachments.cs, Line: 346, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #15 Path: /home/vsts/work/1/s/libraries/Microsoft.Bot.Connector/Authentication/AdalAuthenticator.cs, Line: 143, Message: ReSharper: Type check and casts can be merged. See https://www.jetbrains.com/help/resharper/MergeCastWithTypeCheck.html / SonarQube: Duplicate casts should not be made. See https://rules.sonarsource.com/csharp/RSPEC-3247
    #16 Path: /home/vsts/work/1/s/libraries/Microsoft.Bot.Connector/Authentication/AdalAuthenticator.cs, Line: 199, Message: ReSharper: Type check and casts can be merged. See https://www.jetbrains.com/help/resharper/MergeCastWithTypeCheck.html / SonarQube: Duplicate casts should not be made. See https://rules.sonarsource.com/csharp/RSPEC-3247
    #17 Path: /home/vsts/work/1/s/libraries/Microsoft.Bot.Connector/BotSignIn.cs, Line: 179, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #18 Path: /home/vsts/work/1/s/libraries/Microsoft.Bot.Connector/BotSignIn.cs, Line: 204, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #19 Path: /home/vsts/work/1/s/libraries/Microsoft.Bot.Connector/Conversations.cs, Line: 1068, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #20 Path: /home/vsts/work/1/s/libraries/Microsoft.Bot.Connector/Conversations.cs, Line: 1092, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #21 Path: /home/vsts/work/1/s/libraries/Microsoft.Bot.Connector/Conversations.cs, Line: 1112, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #22 Path: /home/vsts/work/1/s/libraries/Microsoft.Bot.Connector/Conversations.cs, Line: 1132, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #23 Path: /home/vsts/work/1/s/libraries/Microsoft.Bot.Connector/Conversations.cs, Line: 1311, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #24 Path: /home/vsts/work/1/s/libraries/Microsoft.Bot.Connector/Conversations.cs, Line: 1335, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #25 Path: /home/vsts/work/1/s/libraries/Microsoft.Bot.Connector/Conversations.cs, Line: 1355, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #26 Path: /home/vsts/work/1/s/libraries/Microsoft.Bot.Connector/Conversations.cs, Line: 1375, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #27 Path: /home/vsts/work/1/s/libraries/Microsoft.Bot.Connector/Conversations.cs, Line: 1527, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #28 Path: /home/vsts/work/1/s/libraries/Microsoft.Bot.Connector/Conversations.cs, Line: 1675, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #29 Path: /home/vsts/work/1/s/libraries/Microsoft.Bot.Connector/Conversations.cs, Line: 1699, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #30 Path: /home/vsts/work/1/s/libraries/Microsoft.Bot.Connector/Conversations.cs, Line: 179, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #31 Path: /home/vsts/work/1/s/libraries/Microsoft.Bot.Connector/Conversations.cs, Line: 1854, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #32 Path: /home/vsts/work/1/s/libraries/Microsoft.Bot.Connector/Conversations.cs, Line: 1878, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #33 Path: /home/vsts/work/1/s/libraries/Microsoft.Bot.Connector/Conversations.cs, Line: 203, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #34 Path: /home/vsts/work/1/s/libraries/Microsoft.Bot.Connector/Conversations.cs, Line: 2054, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #35 Path: /home/vsts/work/1/s/libraries/Microsoft.Bot.Connector/Conversations.cs, Line: 2078, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #36 Path: /home/vsts/work/1/s/libraries/Microsoft.Bot.Connector/Conversations.cs, Line: 2232, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #37 Path: /home/vsts/work/1/s/libraries/Microsoft.Bot.Connector/Conversations.cs, Line: 2391, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #38 Path: /home/vsts/work/1/s/libraries/Microsoft.Bot.Connector/Conversations.cs, Line: 2415, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #39 Path: /home/vsts/work/1/s/libraries/Microsoft.Bot.Connector/Conversations.cs, Line: 2578, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #40 Path: /home/vsts/work/1/s/libraries/Microsoft.Bot.Connector/Conversations.cs, Line: 2602, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #41 Path: /home/vsts/work/1/s/libraries/Microsoft.Bot.Connector/Conversations.cs, Line: 2622, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #42 Path: /home/vsts/work/1/s/libraries/Microsoft.Bot.Connector/Conversations.cs, Line: 2642, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #43 Path: /home/vsts/work/1/s/libraries/Microsoft.Bot.Connector/Conversations.cs, Line: 371, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #44 Path: /home/vsts/work/1/s/libraries/Microsoft.Bot.Connector/Conversations.cs, Line: 395, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #45 Path: /home/vsts/work/1/s/libraries/Microsoft.Bot.Connector/Conversations.cs, Line: 415, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #46 Path: /home/vsts/work/1/s/libraries/Microsoft.Bot.Connector/Conversations.cs, Line: 435, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #47 Path: /home/vsts/work/1/s/libraries/Microsoft.Bot.Connector/Conversations.cs, Line: 604, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #48 Path: /home/vsts/work/1/s/libraries/Microsoft.Bot.Connector/Conversations.cs, Line: 628, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #49 Path: /home/vsts/work/1/s/libraries/Microsoft.Bot.Connector/Conversations.cs, Line: 648, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #50 Path: /home/vsts/work/1/s/libraries/Microsoft.Bot.Connector/Conversations.cs, Line: 668, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #51 Path: /home/vsts/work/1/s/libraries/Microsoft.Bot.Connector/Conversations.cs, Line: 831, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #52 Path: /home/vsts/work/1/s/libraries/Microsoft.Bot.Connector/Conversations.cs, Line: 855, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #53 Path: /home/vsts/work/1/s/libraries/Microsoft.Bot.Connector/Conversations.cs, Line: 875, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #54 Path: /home/vsts/work/1/s/libraries/Microsoft.Bot.Connector/Conversations.cs, Line: 895, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #55 Path: /home/vsts/work/1/s/libraries/Microsoft.Bot.Connector/OAuthClient.cs, Line: 443, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #56 Path: /home/vsts/work/1/s/libraries/Microsoft.Bot.Connector/OAuthClient.cs, Line: 467, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #57 Path: /home/vsts/work/1/s/libraries/Microsoft.Bot.Connector/OAuthClient.cs, Line: 487, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #58 Path: /home/vsts/work/1/s/libraries/Microsoft.Bot.Connector/OAuthClient.cs, Line: 507, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #59 Path: /home/vsts/work/1/s/libraries/Microsoft.Bot.Connector/OAuthClient.cs, Line: 653, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #60 Path: /home/vsts/work/1/s/libraries/Microsoft.Bot.Connector/OAuthClient.cs, Line: 684, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #61 Path: /home/vsts/work/1/s/libraries/Microsoft.Bot.Connector/OAuthClientOld.cs, Line: 153, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #62 Path: /home/vsts/work/1/s/libraries/Microsoft.Bot.Connector/OAuthClientOld.cs, Line: 399, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #63 Path: /home/vsts/work/1/s/libraries/Microsoft.Bot.Connector/OAuthClientOld.cs, Line: 557, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #64 Path: /home/vsts/work/1/s/libraries/Microsoft.Bot.Connector/Teams/TeamsOperations.cs, Line: 304, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #65 Path: /home/vsts/work/1/s/libraries/Microsoft.Bot.Connector/Teams/TeamsOperations.cs, Line: 328, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #66 Path: /home/vsts/work/1/s/libraries/Microsoft.Bot.Connector/UserToken.cs, Line: 175, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #67 Path: /home/vsts/work/1/s/libraries/Microsoft.Bot.Connector/UserToken.cs, Line: 199, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #68 Path: /home/vsts/work/1/s/libraries/Microsoft.Bot.Connector/UserToken.cs, Line: 219, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #69 Path: /home/vsts/work/1/s/libraries/Microsoft.Bot.Connector/UserToken.cs, Line: 381, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #70 Path: /home/vsts/work/1/s/libraries/Microsoft.Bot.Connector/UserToken.cs, Line: 405, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #71 Path: /home/vsts/work/1/s/libraries/Microsoft.Bot.Connector/UserToken.cs, Line: 549, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #72 Path: /home/vsts/work/1/s/libraries/Microsoft.Bot.Connector/UserToken.cs, Line: 573, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #73 Path: /home/vsts/work/1/s/libraries/Microsoft.Bot.Connector/UserToken.cs, Line: 717, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #74 Path: /home/vsts/work/1/s/libraries/Microsoft.Bot.Connector/UserToken.cs, Line: 741, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html



Project: Microsoft.Bot.Builder
    #75 Path: /home/vsts/work/1/s/libraries/Microsoft.Bot.Builder/Adapters/TestAdapter.cs, Line: 925, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #76 Path: /home/vsts/work/1/s/libraries/Microsoft.Bot.Builder/Adapters/TestAdapter.cs, Line: 950, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html



Project: Microsoft.Bot.Builder.TemplateManager
    #77 Path: /home/vsts/work/1/s/libraries/Microsoft.Bot.Builder.TemplateManager/TemplateManager.cs, Line: 161, Message: ReSharper: Type check and casts can be merged. See https://www.jetbrains.com/help/resharper/MergeCastWithTypeCheck.html / SonarQube: Duplicate casts should not be made. See https://rules.sonarsource.com/csharp/RSPEC-3247



Project: Microsoft.Bot.Builder.Dialogs
    #78 Path: /home/vsts/work/1/s/libraries/Microsoft.Bot.Builder.Dialogs/ObjectPath.cs, Line: 636, Message: ReSharper: ReplaceWithSingleCallToFirstOrDefault. / SonarQube "IEnumerable" LINQs should be simplified. See https://rules.sonarsource.com/csharp/RSPEC-2971
    #79 Path: /home/vsts/work/1/s/libraries/Microsoft.Bot.Builder.Dialogs/ObjectPath.cs, Line: 693, Message: ReSharper: ReplaceWithSingleCallToFirstOrDefault. / SonarQube "IEnumerable" LINQs should be simplified. See https://rules.sonarsource.com/csharp/RSPEC-2971
    #80 Path: /home/vsts/work/1/s/libraries/Microsoft.Bot.Builder.Dialogs/ObjectPath.cs, Line: 700, Message: ReSharper: ReplaceWithSingleCallToFirstOrDefault. / SonarQube "IEnumerable" LINQs should be simplified. See https://rules.sonarsource.com/csharp/RSPEC-2971
    #81 Path: /home/vsts/work/1/s/libraries/Microsoft.Bot.Builder.Dialogs/ObjectPath.cs, Line: 706, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html



Project: Microsoft.Bot.Builder.Tests(netcoreapp2.1)
    #82 Path: /home/vsts/work/1/s/tests/Microsoft.Bot.Builder.Tests/SimpleAdapter.cs, Line: 49, Message: ReSharper: Use '.Any()' to test whether this IEnumerable is empty or not. See ReSharper/UseMethodAny.0.html / SonarQube: "Any()" should be used to test for emptiness. See https://rules.sonarsource.com/csharp/RSPEC-1155
    #83 Path: /home/vsts/work/1/s/tests/Microsoft.Bot.Builder.Tests/TranscriptBaseTests.cs, Line: 199, Message: ReSharper: ReplaceWithSingleCallToCount. / SonarQube "IEnumerable" LINQs should be simplified. See https://rules.sonarsource.com/csharp/RSPEC-2971
    #84 Path: /home/vsts/work/1/s/tests/Microsoft.Bot.Builder.Tests/TranscriptBaseTests.cs, Line: 248, Message: ReSharper: ReplaceWithSingleCallToCount. / SonarQube "IEnumerable" LINQs should be simplified. See https://rules.sonarsource.com/csharp/RSPEC-2971
    #85 Path: /home/vsts/work/1/s/tests/Microsoft.Bot.Builder.Tests/TranscriptBaseTests.cs, Line: 313, Message: ReSharper: ReplaceWithSingleCallToCount. / SonarQube "IEnumerable" LINQs should be simplified. See https://rules.sonarsource.com/csharp/RSPEC-2971
    #86 Path: /home/vsts/work/1/s/tests/Microsoft.Bot.Builder.Tests/TurnContextTests.cs, Line: 233, Message: ReSharper: ReplaceWithSingleCallToCount. / SonarQube "IEnumerable" LINQs should be simplified. See https://rules.sonarsource.com/csharp/RSPEC-2971
    #87 Path: /home/vsts/work/1/s/tests/Microsoft.Bot.Builder.Tests/TurnContextTests.cs, Line: 259, Message: ReSharper: ReplaceWithSingleCallToCount. / SonarQube "IEnumerable" LINQs should be simplified. See https://rules.sonarsource.com/csharp/RSPEC-2971
    #88 Path: /home/vsts/work/1/s/tests/Microsoft.Bot.Builder.Tests/TurnContextTests.cs, Line: 289, Message: ReSharper: ReplaceWithSingleCallToCount. / SonarQube "IEnumerable" LINQs should be simplified. See https://rules.sonarsource.com/csharp/RSPEC-2971



Project: Microsoft.Bot.Configuration
    #89 Path: /home/vsts/work/1/s/libraries/Microsoft.Bot.Configuration/BotConfiguration.cs, Line: 291, Message: ReSharper: ReplaceWithSingleCallToAny. / SonarQube "IEnumerable" LINQs should be simplified. See https://rules.sonarsource.com/csharp/RSPEC-2971



Project: Microsoft.Bot.Builder.Integration.ApplicationInsights.Core(netcoreapp3.1)
    #90 Path: /home/vsts/work/1/s/libraries/integration/Microsoft.Bot.Builder.Integration.ApplicationInsights.Core/ServiceCollectionExtensions.cs, Line: 43, Message: ReSharper: ReplaceWithSingleCallToFirstOrDefault. / SonarQube "IEnumerable" LINQs should be simplified. See https://rules.sonarsource.com/csharp/RSPEC-2971



Project: Microsoft.Bot.Builder.FunctionalTests(netcoreapp2.1)
    #91 Path: /home/vsts/work/1/s/FunctionalTests/Microsoft.Bot.Builder.FunctionalTests/DirectLineClientTests.cs, Line: 1, Message: ReSharper: Use 'String.IsNullOrEmpty'. See https://www.jetbrains.com/help/resharper/ReplaceWithStringIsNullOrEmpty.html / SonarQube: "string.IsNullOrEmpty" should be used. See https://rules.sonarsource.com/csharp/RSPEC-3256
    #92 Path: /home/vsts/work/1/s/FunctionalTests/Microsoft.Bot.Builder.FunctionalTests/DirectLineClientTests.cs, Line: 1, Message: ReSharper: Use 'String.IsNullOrEmpty'. See https://www.jetbrains.com/help/resharper/ReplaceWithStringIsNullOrEmpty.html / SonarQube: "string.IsNullOrEmpty" should be used. See https://rules.sonarsource.com/csharp/RSPEC-3256
    #93 Path: /home/vsts/work/1/s/FunctionalTests/Microsoft.Bot.Builder.FunctionalTests/DirectLineSpeechTests.cs, Line: 81, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html



Project: Microsoft.Bot.Builder.Dialogs.Declarative
    #94 Path: /home/vsts/work/1/s/libraries/Microsoft.Bot.Builder.Dialogs.Declarative/Resources/FileResource.cs, Line: 49, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html



Project: AdaptiveExpressions.Tests(netcoreapp2.1)
    #95 Path: /home/vsts/work/1/s/tests/AdaptiveExpressions.Tests/ExpressionPropertyTests.cs, Line: 98, Message: ReSharper: Type check and casts can be merged. See https://www.jetbrains.com/help/resharper/MergeCastWithTypeCheck.html / SonarQube: Duplicate casts should not be made. See https://rules.sonarsource.com/csharp/RSPEC-3247
    #96 Path: /home/vsts/work/1/s/tests/AdaptiveExpressions.Tests/TriggerTrees/Tests.cs, Line: 118, Message: ReSharper: Use '.Any()' to test whether this IEnumerable is empty or not. See ReSharper/UseMethodAny.0.html / SonarQube: "Any()" should be used to test for emptiness. See https://rules.sonarsource.com/csharp/RSPEC-1155
    #97 Path: /home/vsts/work/1/s/tests/AdaptiveExpressions.Tests/TriggerTrees/Tests.cs, Line: 72, Message: ReSharper: ReplaceWithSingleCallToCount. / SonarQube "IEnumerable" LINQs should be simplified. See https://rules.sonarsource.com/csharp/RSPEC-2971



Project: AdaptiveExpressions
    #98 Path: /home/vsts/work/1/s/libraries/AdaptiveExpressions/BuiltinFunctions/IsDefinite.cs, Line: 37, Message: https://www.jetbrains.com/help/resharper/MergeSequentialChecks.html
    #99 Path: /home/vsts/work/1/s/libraries/AdaptiveExpressions/Expression.cs, Line: 232, Message: ReSharper: Type check and casts can be merged. See https://www.jetbrains.com/help/resharper/MergeCastWithTypeCheck.html / SonarQube: Duplicate casts should not be made. See https://rules.sonarsource.com/csharp/RSPEC-3247
    #100 Path: /home/vsts/work/1/s/libraries/AdaptiveExpressions/FunctionUtils.cs, Line: 813, Message: ReSharper: ReplaceWithSingleCallToSingleOrDefault. / SonarQube "IEnumerable" LINQs should be simplified. See https://rules.sonarsource.com/csharp/RSPEC-2971
    #101 Path: /home/vsts/work/1/s/libraries/AdaptiveExpressions/Generated/CommonRegexParser.cs, Line: 1011, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #102 Path: /home/vsts/work/1/s/libraries/AdaptiveExpressions/Generated/CommonRegexParser.cs, Line: 1015, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #103 Path: /home/vsts/work/1/s/libraries/AdaptiveExpressions/Generated/CommonRegexParser.cs, Line: 1019, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #104 Path: /home/vsts/work/1/s/libraries/AdaptiveExpressions/Generated/CommonRegexParser.cs, Line: 1117, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #105 Path: /home/vsts/work/1/s/libraries/AdaptiveExpressions/Generated/CommonRegexParser.cs, Line: 1121, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #106 Path: /home/vsts/work/1/s/libraries/AdaptiveExpressions/Generated/CommonRegexParser.cs, Line: 1125, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #107 Path: /home/vsts/work/1/s/libraries/AdaptiveExpressions/Generated/CommonRegexParser.cs, Line: 1188, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #108 Path: /home/vsts/work/1/s/libraries/AdaptiveExpressions/Generated/CommonRegexParser.cs, Line: 1192, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #109 Path: /home/vsts/work/1/s/libraries/AdaptiveExpressions/Generated/CommonRegexParser.cs, Line: 1196, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #110 Path: /home/vsts/work/1/s/libraries/AdaptiveExpressions/Generated/CommonRegexParser.cs, Line: 1243, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #111 Path: /home/vsts/work/1/s/libraries/AdaptiveExpressions/Generated/CommonRegexParser.cs, Line: 1247, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #112 Path: /home/vsts/work/1/s/libraries/AdaptiveExpressions/Generated/CommonRegexParser.cs, Line: 1251, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #113 Path: /home/vsts/work/1/s/libraries/AdaptiveExpressions/Generated/CommonRegexParser.cs, Line: 1397, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #114 Path: /home/vsts/work/1/s/libraries/AdaptiveExpressions/Generated/CommonRegexParser.cs, Line: 1401, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #115 Path: /home/vsts/work/1/s/libraries/AdaptiveExpressions/Generated/CommonRegexParser.cs, Line: 1405, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #116 Path: /home/vsts/work/1/s/libraries/AdaptiveExpressions/Generated/CommonRegexParser.cs, Line: 148, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #117 Path: /home/vsts/work/1/s/libraries/AdaptiveExpressions/Generated/CommonRegexParser.cs, Line: 152, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #118 Path: /home/vsts/work/1/s/libraries/AdaptiveExpressions/Generated/CommonRegexParser.cs, Line: 156, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #119 Path: /home/vsts/work/1/s/libraries/AdaptiveExpressions/Generated/CommonRegexParser.cs, Line: 1624, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #120 Path: /home/vsts/work/1/s/libraries/AdaptiveExpressions/Generated/CommonRegexParser.cs, Line: 1628, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #121 Path: /home/vsts/work/1/s/libraries/AdaptiveExpressions/Generated/CommonRegexParser.cs, Line: 1632, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #122 Path: /home/vsts/work/1/s/libraries/AdaptiveExpressions/Generated/CommonRegexParser.cs, Line: 1887, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #123 Path: /home/vsts/work/1/s/libraries/AdaptiveExpressions/Generated/CommonRegexParser.cs, Line: 1891, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #124 Path: /home/vsts/work/1/s/libraries/AdaptiveExpressions/Generated/CommonRegexParser.cs, Line: 1895, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #125 Path: /home/vsts/work/1/s/libraries/AdaptiveExpressions/Generated/CommonRegexParser.cs, Line: 1940, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #126 Path: /home/vsts/work/1/s/libraries/AdaptiveExpressions/Generated/CommonRegexParser.cs, Line: 1944, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #127 Path: /home/vsts/work/1/s/libraries/AdaptiveExpressions/Generated/CommonRegexParser.cs, Line: 1948, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #128 Path: /home/vsts/work/1/s/libraries/AdaptiveExpressions/Generated/CommonRegexParser.cs, Line: 201, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #129 Path: /home/vsts/work/1/s/libraries/AdaptiveExpressions/Generated/CommonRegexParser.cs, Line: 2017, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #130 Path: /home/vsts/work/1/s/libraries/AdaptiveExpressions/Generated/CommonRegexParser.cs, Line: 2021, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #131 Path: /home/vsts/work/1/s/libraries/AdaptiveExpressions/Generated/CommonRegexParser.cs, Line: 2025, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #132 Path: /home/vsts/work/1/s/libraries/AdaptiveExpressions/Generated/CommonRegexParser.cs, Line: 205, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #133 Path: /home/vsts/work/1/s/libraries/AdaptiveExpressions/Generated/CommonRegexParser.cs, Line: 2074, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #134 Path: /home/vsts/work/1/s/libraries/AdaptiveExpressions/Generated/CommonRegexParser.cs, Line: 2078, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #135 Path: /home/vsts/work/1/s/libraries/AdaptiveExpressions/Generated/CommonRegexParser.cs, Line: 2082, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #136 Path: /home/vsts/work/1/s/libraries/AdaptiveExpressions/Generated/CommonRegexParser.cs, Line: 209, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #137 Path: /home/vsts/work/1/s/libraries/AdaptiveExpressions/Generated/CommonRegexParser.cs, Line: 2139, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #138 Path: /home/vsts/work/1/s/libraries/AdaptiveExpressions/Generated/CommonRegexParser.cs, Line: 2143, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #139 Path: /home/vsts/work/1/s/libraries/AdaptiveExpressions/Generated/CommonRegexParser.cs, Line: 2147, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #140 Path: /home/vsts/work/1/s/libraries/AdaptiveExpressions/Generated/CommonRegexParser.cs, Line: 2193, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #141 Path: /home/vsts/work/1/s/libraries/AdaptiveExpressions/Generated/CommonRegexParser.cs, Line: 2197, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #142 Path: /home/vsts/work/1/s/libraries/AdaptiveExpressions/Generated/CommonRegexParser.cs, Line: 2201, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #143 Path: /home/vsts/work/1/s/libraries/AdaptiveExpressions/Generated/CommonRegexParser.cs, Line: 2251, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #144 Path: /home/vsts/work/1/s/libraries/AdaptiveExpressions/Generated/CommonRegexParser.cs, Line: 2255, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #145 Path: /home/vsts/work/1/s/libraries/AdaptiveExpressions/Generated/CommonRegexParser.cs, Line: 2259, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #146 Path: /home/vsts/work/1/s/libraries/AdaptiveExpressions/Generated/CommonRegexParser.cs, Line: 2457, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #147 Path: /home/vsts/work/1/s/libraries/AdaptiveExpressions/Generated/CommonRegexParser.cs, Line: 2461, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #148 Path: /home/vsts/work/1/s/libraries/AdaptiveExpressions/Generated/CommonRegexParser.cs, Line: 2465, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #149 Path: /home/vsts/work/1/s/libraries/AdaptiveExpressions/Generated/CommonRegexParser.cs, Line: 2513, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #150 Path: /home/vsts/work/1/s/libraries/AdaptiveExpressions/Generated/CommonRegexParser.cs, Line: 2517, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #151 Path: /home/vsts/work/1/s/libraries/AdaptiveExpressions/Generated/CommonRegexParser.cs, Line: 2521, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #152 Path: /home/vsts/work/1/s/libraries/AdaptiveExpressions/Generated/CommonRegexParser.cs, Line: 2616, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #153 Path: /home/vsts/work/1/s/libraries/AdaptiveExpressions/Generated/CommonRegexParser.cs, Line: 2620, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #154 Path: /home/vsts/work/1/s/libraries/AdaptiveExpressions/Generated/CommonRegexParser.cs, Line: 2624, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #155 Path: /home/vsts/work/1/s/libraries/AdaptiveExpressions/Generated/CommonRegexParser.cs, Line: 264, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #156 Path: /home/vsts/work/1/s/libraries/AdaptiveExpressions/Generated/CommonRegexParser.cs, Line: 268, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #157 Path: /home/vsts/work/1/s/libraries/AdaptiveExpressions/Generated/CommonRegexParser.cs, Line: 272, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #158 Path: /home/vsts/work/1/s/libraries/AdaptiveExpressions/Generated/CommonRegexParser.cs, Line: 325, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #159 Path: /home/vsts/work/1/s/libraries/AdaptiveExpressions/Generated/CommonRegexParser.cs, Line: 329, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #160 Path: /home/vsts/work/1/s/libraries/AdaptiveExpressions/Generated/CommonRegexParser.cs, Line: 333, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #161 Path: /home/vsts/work/1/s/libraries/AdaptiveExpressions/Generated/CommonRegexParser.cs, Line: 391, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #162 Path: /home/vsts/work/1/s/libraries/AdaptiveExpressions/Generated/CommonRegexParser.cs, Line: 395, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #163 Path: /home/vsts/work/1/s/libraries/AdaptiveExpressions/Generated/CommonRegexParser.cs, Line: 399, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #164 Path: /home/vsts/work/1/s/libraries/AdaptiveExpressions/Generated/CommonRegexParser.cs, Line: 486, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #165 Path: /home/vsts/work/1/s/libraries/AdaptiveExpressions/Generated/CommonRegexParser.cs, Line: 490, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #166 Path: /home/vsts/work/1/s/libraries/AdaptiveExpressions/Generated/CommonRegexParser.cs, Line: 494, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #167 Path: /home/vsts/work/1/s/libraries/AdaptiveExpressions/Generated/CommonRegexParser.cs, Line: 659, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #168 Path: /home/vsts/work/1/s/libraries/AdaptiveExpressions/Generated/CommonRegexParser.cs, Line: 663, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #169 Path: /home/vsts/work/1/s/libraries/AdaptiveExpressions/Generated/CommonRegexParser.cs, Line: 667, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #170 Path: /home/vsts/work/1/s/libraries/AdaptiveExpressions/Generated/CommonRegexParser.cs, Line: 754, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #171 Path: /home/vsts/work/1/s/libraries/AdaptiveExpressions/Generated/CommonRegexParser.cs, Line: 758, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #172 Path: /home/vsts/work/1/s/libraries/AdaptiveExpressions/Generated/CommonRegexParser.cs, Line: 762, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #173 Path: /home/vsts/work/1/s/libraries/AdaptiveExpressions/Generated/CommonRegexParser.cs, Line: 823, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #174 Path: /home/vsts/work/1/s/libraries/AdaptiveExpressions/Generated/CommonRegexParser.cs, Line: 827, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #175 Path: /home/vsts/work/1/s/libraries/AdaptiveExpressions/Generated/CommonRegexParser.cs, Line: 831, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #176 Path: /home/vsts/work/1/s/libraries/AdaptiveExpressions/Generated/CommonRegexParser.cs, Line: 878, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #177 Path: /home/vsts/work/1/s/libraries/AdaptiveExpressions/Generated/CommonRegexParser.cs, Line: 882, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #178 Path: /home/vsts/work/1/s/libraries/AdaptiveExpressions/Generated/CommonRegexParser.cs, Line: 886, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #179 Path: /home/vsts/work/1/s/libraries/AdaptiveExpressions/Generated/CommonRegexParser.cs, Line: 939, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #180 Path: /home/vsts/work/1/s/libraries/AdaptiveExpressions/Generated/CommonRegexParser.cs, Line: 943, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #181 Path: /home/vsts/work/1/s/libraries/AdaptiveExpressions/Generated/CommonRegexParser.cs, Line: 947, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #182 Path: /home/vsts/work/1/s/libraries/AdaptiveExpressions/Generated/ExpressionAntlrParser.cs, Line: 1002, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #183 Path: /home/vsts/work/1/s/libraries/AdaptiveExpressions/Generated/ExpressionAntlrParser.cs, Line: 1006, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #184 Path: /home/vsts/work/1/s/libraries/AdaptiveExpressions/Generated/ExpressionAntlrParser.cs, Line: 1075, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #185 Path: /home/vsts/work/1/s/libraries/AdaptiveExpressions/Generated/ExpressionAntlrParser.cs, Line: 1079, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #186 Path: /home/vsts/work/1/s/libraries/AdaptiveExpressions/Generated/ExpressionAntlrParser.cs, Line: 1083, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #187 Path: /home/vsts/work/1/s/libraries/AdaptiveExpressions/Generated/ExpressionAntlrParser.cs, Line: 116, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #188 Path: /home/vsts/work/1/s/libraries/AdaptiveExpressions/Generated/ExpressionAntlrParser.cs, Line: 1163, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #189 Path: /home/vsts/work/1/s/libraries/AdaptiveExpressions/Generated/ExpressionAntlrParser.cs, Line: 1167, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #190 Path: /home/vsts/work/1/s/libraries/AdaptiveExpressions/Generated/ExpressionAntlrParser.cs, Line: 1171, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #191 Path: /home/vsts/work/1/s/libraries/AdaptiveExpressions/Generated/ExpressionAntlrParser.cs, Line: 120, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #192 Path: /home/vsts/work/1/s/libraries/AdaptiveExpressions/Generated/ExpressionAntlrParser.cs, Line: 1217, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #193 Path: /home/vsts/work/1/s/libraries/AdaptiveExpressions/Generated/ExpressionAntlrParser.cs, Line: 1221, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #194 Path: /home/vsts/work/1/s/libraries/AdaptiveExpressions/Generated/ExpressionAntlrParser.cs, Line: 1225, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #195 Path: /home/vsts/work/1/s/libraries/AdaptiveExpressions/Generated/ExpressionAntlrParser.cs, Line: 124, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #196 Path: /home/vsts/work/1/s/libraries/AdaptiveExpressions/Generated/ExpressionAntlrParser.cs, Line: 1281, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #197 Path: /home/vsts/work/1/s/libraries/AdaptiveExpressions/Generated/ExpressionAntlrParser.cs, Line: 1285, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #198 Path: /home/vsts/work/1/s/libraries/AdaptiveExpressions/Generated/ExpressionAntlrParser.cs, Line: 1289, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #199 Path: /home/vsts/work/1/s/libraries/AdaptiveExpressions/Generated/ExpressionAntlrParser.cs, Line: 1327, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #200 Path: /home/vsts/work/1/s/libraries/AdaptiveExpressions/Generated/ExpressionAntlrParser.cs, Line: 1331, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #201 Path: /home/vsts/work/1/s/libraries/AdaptiveExpressions/Generated/ExpressionAntlrParser.cs, Line: 1335, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #202 Path: /home/vsts/work/1/s/libraries/AdaptiveExpressions/Generated/ExpressionAntlrParser.cs, Line: 173, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #203 Path: /home/vsts/work/1/s/libraries/AdaptiveExpressions/Generated/ExpressionAntlrParser.cs, Line: 177, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #204 Path: /home/vsts/work/1/s/libraries/AdaptiveExpressions/Generated/ExpressionAntlrParser.cs, Line: 181, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #205 Path: /home/vsts/work/1/s/libraries/AdaptiveExpressions/Generated/ExpressionAntlrParser.cs, Line: 211, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #206 Path: /home/vsts/work/1/s/libraries/AdaptiveExpressions/Generated/ExpressionAntlrParser.cs, Line: 215, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #207 Path: /home/vsts/work/1/s/libraries/AdaptiveExpressions/Generated/ExpressionAntlrParser.cs, Line: 219, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #208 Path: /home/vsts/work/1/s/libraries/AdaptiveExpressions/Generated/ExpressionAntlrParser.cs, Line: 230, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #209 Path: /home/vsts/work/1/s/libraries/AdaptiveExpressions/Generated/ExpressionAntlrParser.cs, Line: 234, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #210 Path: /home/vsts/work/1/s/libraries/AdaptiveExpressions/Generated/ExpressionAntlrParser.cs, Line: 238, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #211 Path: /home/vsts/work/1/s/libraries/AdaptiveExpressions/Generated/ExpressionAntlrParser.cs, Line: 254, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #212 Path: /home/vsts/work/1/s/libraries/AdaptiveExpressions/Generated/ExpressionAntlrParser.cs, Line: 258, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #213 Path: /home/vsts/work/1/s/libraries/AdaptiveExpressions/Generated/ExpressionAntlrParser.cs, Line: 262, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #214 Path: /home/vsts/work/1/s/libraries/AdaptiveExpressions/Generated/ExpressionAntlrParser.cs, Line: 518, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #215 Path: /home/vsts/work/1/s/libraries/AdaptiveExpressions/Generated/ExpressionAntlrParser.cs, Line: 522, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #216 Path: /home/vsts/work/1/s/libraries/AdaptiveExpressions/Generated/ExpressionAntlrParser.cs, Line: 526, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #217 Path: /home/vsts/work/1/s/libraries/AdaptiveExpressions/Generated/ExpressionAntlrParser.cs, Line: 535, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #218 Path: /home/vsts/work/1/s/libraries/AdaptiveExpressions/Generated/ExpressionAntlrParser.cs, Line: 539, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #219 Path: /home/vsts/work/1/s/libraries/AdaptiveExpressions/Generated/ExpressionAntlrParser.cs, Line: 543, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #220 Path: /home/vsts/work/1/s/libraries/AdaptiveExpressions/Generated/ExpressionAntlrParser.cs, Line: 556, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #221 Path: /home/vsts/work/1/s/libraries/AdaptiveExpressions/Generated/ExpressionAntlrParser.cs, Line: 560, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #222 Path: /home/vsts/work/1/s/libraries/AdaptiveExpressions/Generated/ExpressionAntlrParser.cs, Line: 564, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #223 Path: /home/vsts/work/1/s/libraries/AdaptiveExpressions/Generated/ExpressionAntlrParser.cs, Line: 573, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #224 Path: /home/vsts/work/1/s/libraries/AdaptiveExpressions/Generated/ExpressionAntlrParser.cs, Line: 577, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #225 Path: /home/vsts/work/1/s/libraries/AdaptiveExpressions/Generated/ExpressionAntlrParser.cs, Line: 581, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #226 Path: /home/vsts/work/1/s/libraries/AdaptiveExpressions/Generated/ExpressionAntlrParser.cs, Line: 597, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #227 Path: /home/vsts/work/1/s/libraries/AdaptiveExpressions/Generated/ExpressionAntlrParser.cs, Line: 601, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #228 Path: /home/vsts/work/1/s/libraries/AdaptiveExpressions/Generated/ExpressionAntlrParser.cs, Line: 605, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #229 Path: /home/vsts/work/1/s/libraries/AdaptiveExpressions/Generated/ExpressionAntlrParser.cs, Line: 616, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #230 Path: /home/vsts/work/1/s/libraries/AdaptiveExpressions/Generated/ExpressionAntlrParser.cs, Line: 620, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #231 Path: /home/vsts/work/1/s/libraries/AdaptiveExpressions/Generated/ExpressionAntlrParser.cs, Line: 624, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #232 Path: /home/vsts/work/1/s/libraries/AdaptiveExpressions/Generated/ExpressionAntlrParser.cs, Line: 637, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #233 Path: /home/vsts/work/1/s/libraries/AdaptiveExpressions/Generated/ExpressionAntlrParser.cs, Line: 641, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #234 Path: /home/vsts/work/1/s/libraries/AdaptiveExpressions/Generated/ExpressionAntlrParser.cs, Line: 645, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #235 Path: /home/vsts/work/1/s/libraries/AdaptiveExpressions/Generated/ExpressionAntlrParser.cs, Line: 658, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #236 Path: /home/vsts/work/1/s/libraries/AdaptiveExpressions/Generated/ExpressionAntlrParser.cs, Line: 662, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #237 Path: /home/vsts/work/1/s/libraries/AdaptiveExpressions/Generated/ExpressionAntlrParser.cs, Line: 666, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #238 Path: /home/vsts/work/1/s/libraries/AdaptiveExpressions/Generated/ExpressionAntlrParser.cs, Line: 675, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #239 Path: /home/vsts/work/1/s/libraries/AdaptiveExpressions/Generated/ExpressionAntlrParser.cs, Line: 679, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #240 Path: /home/vsts/work/1/s/libraries/AdaptiveExpressions/Generated/ExpressionAntlrParser.cs, Line: 683, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #241 Path: /home/vsts/work/1/s/libraries/AdaptiveExpressions/Generated/ExpressionAntlrParser.cs, Line: 696, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #242 Path: /home/vsts/work/1/s/libraries/AdaptiveExpressions/Generated/ExpressionAntlrParser.cs, Line: 700, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #243 Path: /home/vsts/work/1/s/libraries/AdaptiveExpressions/Generated/ExpressionAntlrParser.cs, Line: 704, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #244 Path: /home/vsts/work/1/s/libraries/AdaptiveExpressions/Generated/ExpressionAntlrParser.cs, Line: 919, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #245 Path: /home/vsts/work/1/s/libraries/AdaptiveExpressions/Generated/ExpressionAntlrParser.cs, Line: 923, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #246 Path: /home/vsts/work/1/s/libraries/AdaptiveExpressions/Generated/ExpressionAntlrParser.cs, Line: 927, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #247 Path: /home/vsts/work/1/s/libraries/AdaptiveExpressions/Generated/ExpressionAntlrParser.cs, Line: 998, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html



Project: Microsoft.Bot.Builder.LanguageGeneration
    #248 Path: /home/vsts/work/1/s/libraries/Microsoft.Bot.Builder.LanguageGeneration/Generated/LGFileParser.cs, Line: 108, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #249 Path: /home/vsts/work/1/s/libraries/Microsoft.Bot.Builder.LanguageGeneration/Generated/LGFileParser.cs, Line: 112, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #250 Path: /home/vsts/work/1/s/libraries/Microsoft.Bot.Builder.LanguageGeneration/Generated/LGFileParser.cs, Line: 116, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #251 Path: /home/vsts/work/1/s/libraries/Microsoft.Bot.Builder.LanguageGeneration/Generated/LGFileParser.cs, Line: 187, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #252 Path: /home/vsts/work/1/s/libraries/Microsoft.Bot.Builder.LanguageGeneration/Generated/LGFileParser.cs, Line: 191, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #253 Path: /home/vsts/work/1/s/libraries/Microsoft.Bot.Builder.LanguageGeneration/Generated/LGFileParser.cs, Line: 195, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #254 Path: /home/vsts/work/1/s/libraries/Microsoft.Bot.Builder.LanguageGeneration/Generated/LGFileParser.cs, Line: 275, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #255 Path: /home/vsts/work/1/s/libraries/Microsoft.Bot.Builder.LanguageGeneration/Generated/LGFileParser.cs, Line: 279, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #256 Path: /home/vsts/work/1/s/libraries/Microsoft.Bot.Builder.LanguageGeneration/Generated/LGFileParser.cs, Line: 283, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #257 Path: /home/vsts/work/1/s/libraries/Microsoft.Bot.Builder.LanguageGeneration/Generated/LGFileParser.cs, Line: 328, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #258 Path: /home/vsts/work/1/s/libraries/Microsoft.Bot.Builder.LanguageGeneration/Generated/LGFileParser.cs, Line: 332, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #259 Path: /home/vsts/work/1/s/libraries/Microsoft.Bot.Builder.LanguageGeneration/Generated/LGFileParser.cs, Line: 336, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #260 Path: /home/vsts/work/1/s/libraries/Microsoft.Bot.Builder.LanguageGeneration/Generated/LGFileParser.cs, Line: 381, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #261 Path: /home/vsts/work/1/s/libraries/Microsoft.Bot.Builder.LanguageGeneration/Generated/LGFileParser.cs, Line: 385, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #262 Path: /home/vsts/work/1/s/libraries/Microsoft.Bot.Builder.LanguageGeneration/Generated/LGFileParser.cs, Line: 389, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #263 Path: /home/vsts/work/1/s/libraries/Microsoft.Bot.Builder.LanguageGeneration/Generated/LGFileParser.cs, Line: 434, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #264 Path: /home/vsts/work/1/s/libraries/Microsoft.Bot.Builder.LanguageGeneration/Generated/LGFileParser.cs, Line: 438, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #265 Path: /home/vsts/work/1/s/libraries/Microsoft.Bot.Builder.LanguageGeneration/Generated/LGFileParser.cs, Line: 442, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #266 Path: /home/vsts/work/1/s/libraries/Microsoft.Bot.Builder.LanguageGeneration/Generated/LGFileParser.cs, Line: 491, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #267 Path: /home/vsts/work/1/s/libraries/Microsoft.Bot.Builder.LanguageGeneration/Generated/LGFileParser.cs, Line: 495, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #268 Path: /home/vsts/work/1/s/libraries/Microsoft.Bot.Builder.LanguageGeneration/Generated/LGFileParser.cs, Line: 499, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #269 Path: /home/vsts/work/1/s/libraries/Microsoft.Bot.Builder.LanguageGeneration/Generated/LGFileParser.cs, Line: 536, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #270 Path: /home/vsts/work/1/s/libraries/Microsoft.Bot.Builder.LanguageGeneration/Generated/LGFileParser.cs, Line: 540, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #271 Path: /home/vsts/work/1/s/libraries/Microsoft.Bot.Builder.LanguageGeneration/Generated/LGFileParser.cs, Line: 544, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #272 Path: /home/vsts/work/1/s/libraries/Microsoft.Bot.Builder.LanguageGeneration/Generated/LGFileParser.cs, Line: 593, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #273 Path: /home/vsts/work/1/s/libraries/Microsoft.Bot.Builder.LanguageGeneration/Generated/LGFileParser.cs, Line: 597, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #274 Path: /home/vsts/work/1/s/libraries/Microsoft.Bot.Builder.LanguageGeneration/Generated/LGFileParser.cs, Line: 601, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #275 Path: /home/vsts/work/1/s/libraries/Microsoft.Bot.Builder.LanguageGeneration/Generated/LGFileParser.cs, Line: 663, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #276 Path: /home/vsts/work/1/s/libraries/Microsoft.Bot.Builder.LanguageGeneration/Generated/LGFileParser.cs, Line: 667, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #277 Path: /home/vsts/work/1/s/libraries/Microsoft.Bot.Builder.LanguageGeneration/Generated/LGFileParser.cs, Line: 671, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #278 Path: /home/vsts/work/1/s/libraries/Microsoft.Bot.Builder.LanguageGeneration/Generated/LGTemplateParser.cs, Line: 1010, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #279 Path: /home/vsts/work/1/s/libraries/Microsoft.Bot.Builder.LanguageGeneration/Generated/LGTemplateParser.cs, Line: 1014, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #280 Path: /home/vsts/work/1/s/libraries/Microsoft.Bot.Builder.LanguageGeneration/Generated/LGTemplateParser.cs, Line: 1018, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #281 Path: /home/vsts/work/1/s/libraries/Microsoft.Bot.Builder.LanguageGeneration/Generated/LGTemplateParser.cs, Line: 1083, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #282 Path: /home/vsts/work/1/s/libraries/Microsoft.Bot.Builder.LanguageGeneration/Generated/LGTemplateParser.cs, Line: 1087, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #283 Path: /home/vsts/work/1/s/libraries/Microsoft.Bot.Builder.LanguageGeneration/Generated/LGTemplateParser.cs, Line: 1091, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #284 Path: /home/vsts/work/1/s/libraries/Microsoft.Bot.Builder.LanguageGeneration/Generated/LGTemplateParser.cs, Line: 1179, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #285 Path: /home/vsts/work/1/s/libraries/Microsoft.Bot.Builder.LanguageGeneration/Generated/LGTemplateParser.cs, Line: 1183, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #286 Path: /home/vsts/work/1/s/libraries/Microsoft.Bot.Builder.LanguageGeneration/Generated/LGTemplateParser.cs, Line: 1187, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #287 Path: /home/vsts/work/1/s/libraries/Microsoft.Bot.Builder.LanguageGeneration/Generated/LGTemplateParser.cs, Line: 124, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #288 Path: /home/vsts/work/1/s/libraries/Microsoft.Bot.Builder.LanguageGeneration/Generated/LGTemplateParser.cs, Line: 1246, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #289 Path: /home/vsts/work/1/s/libraries/Microsoft.Bot.Builder.LanguageGeneration/Generated/LGTemplateParser.cs, Line: 1250, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #290 Path: /home/vsts/work/1/s/libraries/Microsoft.Bot.Builder.LanguageGeneration/Generated/LGTemplateParser.cs, Line: 1254, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #291 Path: /home/vsts/work/1/s/libraries/Microsoft.Bot.Builder.LanguageGeneration/Generated/LGTemplateParser.cs, Line: 128, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #292 Path: /home/vsts/work/1/s/libraries/Microsoft.Bot.Builder.LanguageGeneration/Generated/LGTemplateParser.cs, Line: 1307, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #293 Path: /home/vsts/work/1/s/libraries/Microsoft.Bot.Builder.LanguageGeneration/Generated/LGTemplateParser.cs, Line: 1311, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #294 Path: /home/vsts/work/1/s/libraries/Microsoft.Bot.Builder.LanguageGeneration/Generated/LGTemplateParser.cs, Line: 1315, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #295 Path: /home/vsts/work/1/s/libraries/Microsoft.Bot.Builder.LanguageGeneration/Generated/LGTemplateParser.cs, Line: 132, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #296 Path: /home/vsts/work/1/s/libraries/Microsoft.Bot.Builder.LanguageGeneration/Generated/LGTemplateParser.cs, Line: 1376, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #297 Path: /home/vsts/work/1/s/libraries/Microsoft.Bot.Builder.LanguageGeneration/Generated/LGTemplateParser.cs, Line: 1380, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #298 Path: /home/vsts/work/1/s/libraries/Microsoft.Bot.Builder.LanguageGeneration/Generated/LGTemplateParser.cs, Line: 1384, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #299 Path: /home/vsts/work/1/s/libraries/Microsoft.Bot.Builder.LanguageGeneration/Generated/LGTemplateParser.cs, Line: 1465, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #300 Path: /home/vsts/work/1/s/libraries/Microsoft.Bot.Builder.LanguageGeneration/Generated/LGTemplateParser.cs, Line: 1469, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #301 Path: /home/vsts/work/1/s/libraries/Microsoft.Bot.Builder.LanguageGeneration/Generated/LGTemplateParser.cs, Line: 1473, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #302 Path: /home/vsts/work/1/s/libraries/Microsoft.Bot.Builder.LanguageGeneration/Generated/LGTemplateParser.cs, Line: 1526, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #303 Path: /home/vsts/work/1/s/libraries/Microsoft.Bot.Builder.LanguageGeneration/Generated/LGTemplateParser.cs, Line: 1530, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #304 Path: /home/vsts/work/1/s/libraries/Microsoft.Bot.Builder.LanguageGeneration/Generated/LGTemplateParser.cs, Line: 1534, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #305 Path: /home/vsts/work/1/s/libraries/Microsoft.Bot.Builder.LanguageGeneration/Generated/LGTemplateParser.cs, Line: 1595, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #306 Path: /home/vsts/work/1/s/libraries/Microsoft.Bot.Builder.LanguageGeneration/Generated/LGTemplateParser.cs, Line: 1599, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #307 Path: /home/vsts/work/1/s/libraries/Microsoft.Bot.Builder.LanguageGeneration/Generated/LGTemplateParser.cs, Line: 1603, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #308 Path: /home/vsts/work/1/s/libraries/Microsoft.Bot.Builder.LanguageGeneration/Generated/LGTemplateParser.cs, Line: 1679, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #309 Path: /home/vsts/work/1/s/libraries/Microsoft.Bot.Builder.LanguageGeneration/Generated/LGTemplateParser.cs, Line: 1683, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #310 Path: /home/vsts/work/1/s/libraries/Microsoft.Bot.Builder.LanguageGeneration/Generated/LGTemplateParser.cs, Line: 1687, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #311 Path: /home/vsts/work/1/s/libraries/Microsoft.Bot.Builder.LanguageGeneration/Generated/LGTemplateParser.cs, Line: 1722, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #312 Path: /home/vsts/work/1/s/libraries/Microsoft.Bot.Builder.LanguageGeneration/Generated/LGTemplateParser.cs, Line: 1726, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #313 Path: /home/vsts/work/1/s/libraries/Microsoft.Bot.Builder.LanguageGeneration/Generated/LGTemplateParser.cs, Line: 1730, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #314 Path: /home/vsts/work/1/s/libraries/Microsoft.Bot.Builder.LanguageGeneration/Generated/LGTemplateParser.cs, Line: 178, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #315 Path: /home/vsts/work/1/s/libraries/Microsoft.Bot.Builder.LanguageGeneration/Generated/LGTemplateParser.cs, Line: 182, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #316 Path: /home/vsts/work/1/s/libraries/Microsoft.Bot.Builder.LanguageGeneration/Generated/LGTemplateParser.cs, Line: 186, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #317 Path: /home/vsts/work/1/s/libraries/Microsoft.Bot.Builder.LanguageGeneration/Generated/LGTemplateParser.cs, Line: 197, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #318 Path: /home/vsts/work/1/s/libraries/Microsoft.Bot.Builder.LanguageGeneration/Generated/LGTemplateParser.cs, Line: 201, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #319 Path: /home/vsts/work/1/s/libraries/Microsoft.Bot.Builder.LanguageGeneration/Generated/LGTemplateParser.cs, Line: 205, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #320 Path: /home/vsts/work/1/s/libraries/Microsoft.Bot.Builder.LanguageGeneration/Generated/LGTemplateParser.cs, Line: 216, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #321 Path: /home/vsts/work/1/s/libraries/Microsoft.Bot.Builder.LanguageGeneration/Generated/LGTemplateParser.cs, Line: 220, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #322 Path: /home/vsts/work/1/s/libraries/Microsoft.Bot.Builder.LanguageGeneration/Generated/LGTemplateParser.cs, Line: 224, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #323 Path: /home/vsts/work/1/s/libraries/Microsoft.Bot.Builder.LanguageGeneration/Generated/LGTemplateParser.cs, Line: 235, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #324 Path: /home/vsts/work/1/s/libraries/Microsoft.Bot.Builder.LanguageGeneration/Generated/LGTemplateParser.cs, Line: 239, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #325 Path: /home/vsts/work/1/s/libraries/Microsoft.Bot.Builder.LanguageGeneration/Generated/LGTemplateParser.cs, Line: 243, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #326 Path: /home/vsts/work/1/s/libraries/Microsoft.Bot.Builder.LanguageGeneration/Generated/LGTemplateParser.cs, Line: 327, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #327 Path: /home/vsts/work/1/s/libraries/Microsoft.Bot.Builder.LanguageGeneration/Generated/LGTemplateParser.cs, Line: 331, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #328 Path: /home/vsts/work/1/s/libraries/Microsoft.Bot.Builder.LanguageGeneration/Generated/LGTemplateParser.cs, Line: 335, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #329 Path: /home/vsts/work/1/s/libraries/Microsoft.Bot.Builder.LanguageGeneration/Generated/LGTemplateParser.cs, Line: 427, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #330 Path: /home/vsts/work/1/s/libraries/Microsoft.Bot.Builder.LanguageGeneration/Generated/LGTemplateParser.cs, Line: 431, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #331 Path: /home/vsts/work/1/s/libraries/Microsoft.Bot.Builder.LanguageGeneration/Generated/LGTemplateParser.cs, Line: 435, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #332 Path: /home/vsts/work/1/s/libraries/Microsoft.Bot.Builder.LanguageGeneration/Generated/LGTemplateParser.cs, Line: 491, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #333 Path: /home/vsts/work/1/s/libraries/Microsoft.Bot.Builder.LanguageGeneration/Generated/LGTemplateParser.cs, Line: 495, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #334 Path: /home/vsts/work/1/s/libraries/Microsoft.Bot.Builder.LanguageGeneration/Generated/LGTemplateParser.cs, Line: 499, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #335 Path: /home/vsts/work/1/s/libraries/Microsoft.Bot.Builder.LanguageGeneration/Generated/LGTemplateParser.cs, Line: 560, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #336 Path: /home/vsts/work/1/s/libraries/Microsoft.Bot.Builder.LanguageGeneration/Generated/LGTemplateParser.cs, Line: 564, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #337 Path: /home/vsts/work/1/s/libraries/Microsoft.Bot.Builder.LanguageGeneration/Generated/LGTemplateParser.cs, Line: 568, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #338 Path: /home/vsts/work/1/s/libraries/Microsoft.Bot.Builder.LanguageGeneration/Generated/LGTemplateParser.cs, Line: 642, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #339 Path: /home/vsts/work/1/s/libraries/Microsoft.Bot.Builder.LanguageGeneration/Generated/LGTemplateParser.cs, Line: 646, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #340 Path: /home/vsts/work/1/s/libraries/Microsoft.Bot.Builder.LanguageGeneration/Generated/LGTemplateParser.cs, Line: 650, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #341 Path: /home/vsts/work/1/s/libraries/Microsoft.Bot.Builder.LanguageGeneration/Generated/LGTemplateParser.cs, Line: 748, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #342 Path: /home/vsts/work/1/s/libraries/Microsoft.Bot.Builder.LanguageGeneration/Generated/LGTemplateParser.cs, Line: 752, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #343 Path: /home/vsts/work/1/s/libraries/Microsoft.Bot.Builder.LanguageGeneration/Generated/LGTemplateParser.cs, Line: 756, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #344 Path: /home/vsts/work/1/s/libraries/Microsoft.Bot.Builder.LanguageGeneration/Generated/LGTemplateParser.cs, Line: 821, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #345 Path: /home/vsts/work/1/s/libraries/Microsoft.Bot.Builder.LanguageGeneration/Generated/LGTemplateParser.cs, Line: 825, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #346 Path: /home/vsts/work/1/s/libraries/Microsoft.Bot.Builder.LanguageGeneration/Generated/LGTemplateParser.cs, Line: 829, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #347 Path: /home/vsts/work/1/s/libraries/Microsoft.Bot.Builder.LanguageGeneration/Generated/LGTemplateParser.cs, Line: 895, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #348 Path: /home/vsts/work/1/s/libraries/Microsoft.Bot.Builder.LanguageGeneration/Generated/LGTemplateParser.cs, Line: 899, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #349 Path: /home/vsts/work/1/s/libraries/Microsoft.Bot.Builder.LanguageGeneration/Generated/LGTemplateParser.cs, Line: 903, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #350 Path: /home/vsts/work/1/s/libraries/Microsoft.Bot.Builder.LanguageGeneration/Generated/LGTemplateParser.cs, Line: 943, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #351 Path: /home/vsts/work/1/s/libraries/Microsoft.Bot.Builder.LanguageGeneration/Generated/LGTemplateParser.cs, Line: 947, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #352 Path: /home/vsts/work/1/s/libraries/Microsoft.Bot.Builder.LanguageGeneration/Generated/LGTemplateParser.cs, Line: 951, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html



Project: Microsoft.Bot.Streaming
    #353 Path: /home/vsts/work/1/s/libraries/Microsoft.Bot.Streaming/Transport/WebSocket/WebSocketServer.cs, Line: 143, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html



Project: Microsoft.Bot.Builder.Dialogs.Adaptive.Testing
    #354 Path: /home/vsts/work/1/s/libraries/Microsoft.Bot.Builder.Dialogs.Adaptive.Testing/Mocks/MockLuisRecognizer.cs, Line: 75, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html



Project: Microsoft.Bot.Builder.Parsers.LU
    #355 Path: /home/vsts/work/1/s/libraries/Parsers/Microsoft.Bot.Builder.Parsers.LU/Generated/LUFileParser.cs, Line: 1003, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #356 Path: /home/vsts/work/1/s/libraries/Parsers/Microsoft.Bot.Builder.Parsers.LU/Generated/LUFileParser.cs, Line: 1007, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #357 Path: /home/vsts/work/1/s/libraries/Parsers/Microsoft.Bot.Builder.Parsers.LU/Generated/LUFileParser.cs, Line: 1088, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #358 Path: /home/vsts/work/1/s/libraries/Parsers/Microsoft.Bot.Builder.Parsers.LU/Generated/LUFileParser.cs, Line: 1092, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #359 Path: /home/vsts/work/1/s/libraries/Parsers/Microsoft.Bot.Builder.Parsers.LU/Generated/LUFileParser.cs, Line: 1096, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #360 Path: /home/vsts/work/1/s/libraries/Parsers/Microsoft.Bot.Builder.Parsers.LU/Generated/LUFileParser.cs, Line: 1166, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #361 Path: /home/vsts/work/1/s/libraries/Parsers/Microsoft.Bot.Builder.Parsers.LU/Generated/LUFileParser.cs, Line: 1170, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #362 Path: /home/vsts/work/1/s/libraries/Parsers/Microsoft.Bot.Builder.Parsers.LU/Generated/LUFileParser.cs, Line: 1174, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #363 Path: /home/vsts/work/1/s/libraries/Parsers/Microsoft.Bot.Builder.Parsers.LU/Generated/LUFileParser.cs, Line: 1246, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #364 Path: /home/vsts/work/1/s/libraries/Parsers/Microsoft.Bot.Builder.Parsers.LU/Generated/LUFileParser.cs, Line: 1250, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #365 Path: /home/vsts/work/1/s/libraries/Parsers/Microsoft.Bot.Builder.Parsers.LU/Generated/LUFileParser.cs, Line: 1254, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #366 Path: /home/vsts/work/1/s/libraries/Parsers/Microsoft.Bot.Builder.Parsers.LU/Generated/LUFileParser.cs, Line: 1353, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #367 Path: /home/vsts/work/1/s/libraries/Parsers/Microsoft.Bot.Builder.Parsers.LU/Generated/LUFileParser.cs, Line: 1357, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #368 Path: /home/vsts/work/1/s/libraries/Parsers/Microsoft.Bot.Builder.Parsers.LU/Generated/LUFileParser.cs, Line: 1361, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #369 Path: /home/vsts/work/1/s/libraries/Parsers/Microsoft.Bot.Builder.Parsers.LU/Generated/LUFileParser.cs, Line: 1436, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #370 Path: /home/vsts/work/1/s/libraries/Parsers/Microsoft.Bot.Builder.Parsers.LU/Generated/LUFileParser.cs, Line: 1440, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #371 Path: /home/vsts/work/1/s/libraries/Parsers/Microsoft.Bot.Builder.Parsers.LU/Generated/LUFileParser.cs, Line: 1444, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #372 Path: /home/vsts/work/1/s/libraries/Parsers/Microsoft.Bot.Builder.Parsers.LU/Generated/LUFileParser.cs, Line: 148, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #373 Path: /home/vsts/work/1/s/libraries/Parsers/Microsoft.Bot.Builder.Parsers.LU/Generated/LUFileParser.cs, Line: 1484, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #374 Path: /home/vsts/work/1/s/libraries/Parsers/Microsoft.Bot.Builder.Parsers.LU/Generated/LUFileParser.cs, Line: 1488, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #375 Path: /home/vsts/work/1/s/libraries/Parsers/Microsoft.Bot.Builder.Parsers.LU/Generated/LUFileParser.cs, Line: 1492, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #376 Path: /home/vsts/work/1/s/libraries/Parsers/Microsoft.Bot.Builder.Parsers.LU/Generated/LUFileParser.cs, Line: 152, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #377 Path: /home/vsts/work/1/s/libraries/Parsers/Microsoft.Bot.Builder.Parsers.LU/Generated/LUFileParser.cs, Line: 1553, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #378 Path: /home/vsts/work/1/s/libraries/Parsers/Microsoft.Bot.Builder.Parsers.LU/Generated/LUFileParser.cs, Line: 1557, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #379 Path: /home/vsts/work/1/s/libraries/Parsers/Microsoft.Bot.Builder.Parsers.LU/Generated/LUFileParser.cs, Line: 156, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #380 Path: /home/vsts/work/1/s/libraries/Parsers/Microsoft.Bot.Builder.Parsers.LU/Generated/LUFileParser.cs, Line: 1561, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #381 Path: /home/vsts/work/1/s/libraries/Parsers/Microsoft.Bot.Builder.Parsers.LU/Generated/LUFileParser.cs, Line: 1658, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #382 Path: /home/vsts/work/1/s/libraries/Parsers/Microsoft.Bot.Builder.Parsers.LU/Generated/LUFileParser.cs, Line: 1662, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #383 Path: /home/vsts/work/1/s/libraries/Parsers/Microsoft.Bot.Builder.Parsers.LU/Generated/LUFileParser.cs, Line: 1666, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #384 Path: /home/vsts/work/1/s/libraries/Parsers/Microsoft.Bot.Builder.Parsers.LU/Generated/LUFileParser.cs, Line: 1877, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #385 Path: /home/vsts/work/1/s/libraries/Parsers/Microsoft.Bot.Builder.Parsers.LU/Generated/LUFileParser.cs, Line: 1881, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #386 Path: /home/vsts/work/1/s/libraries/Parsers/Microsoft.Bot.Builder.Parsers.LU/Generated/LUFileParser.cs, Line: 1885, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #387 Path: /home/vsts/work/1/s/libraries/Parsers/Microsoft.Bot.Builder.Parsers.LU/Generated/LUFileParser.cs, Line: 1920, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #388 Path: /home/vsts/work/1/s/libraries/Parsers/Microsoft.Bot.Builder.Parsers.LU/Generated/LUFileParser.cs, Line: 1924, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #389 Path: /home/vsts/work/1/s/libraries/Parsers/Microsoft.Bot.Builder.Parsers.LU/Generated/LUFileParser.cs, Line: 1928, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #390 Path: /home/vsts/work/1/s/libraries/Parsers/Microsoft.Bot.Builder.Parsers.LU/Generated/LUFileParser.cs, Line: 1963, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #391 Path: /home/vsts/work/1/s/libraries/Parsers/Microsoft.Bot.Builder.Parsers.LU/Generated/LUFileParser.cs, Line: 1967, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #392 Path: /home/vsts/work/1/s/libraries/Parsers/Microsoft.Bot.Builder.Parsers.LU/Generated/LUFileParser.cs, Line: 1971, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #393 Path: /home/vsts/work/1/s/libraries/Parsers/Microsoft.Bot.Builder.Parsers.LU/Generated/LUFileParser.cs, Line: 2013, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #394 Path: /home/vsts/work/1/s/libraries/Parsers/Microsoft.Bot.Builder.Parsers.LU/Generated/LUFileParser.cs, Line: 2017, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #395 Path: /home/vsts/work/1/s/libraries/Parsers/Microsoft.Bot.Builder.Parsers.LU/Generated/LUFileParser.cs, Line: 2021, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #396 Path: /home/vsts/work/1/s/libraries/Parsers/Microsoft.Bot.Builder.Parsers.LU/Generated/LUFileParser.cs, Line: 2086, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #397 Path: /home/vsts/work/1/s/libraries/Parsers/Microsoft.Bot.Builder.Parsers.LU/Generated/LUFileParser.cs, Line: 2090, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #398 Path: /home/vsts/work/1/s/libraries/Parsers/Microsoft.Bot.Builder.Parsers.LU/Generated/LUFileParser.cs, Line: 2094, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #399 Path: /home/vsts/work/1/s/libraries/Parsers/Microsoft.Bot.Builder.Parsers.LU/Generated/LUFileParser.cs, Line: 2159, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #400 Path: /home/vsts/work/1/s/libraries/Parsers/Microsoft.Bot.Builder.Parsers.LU/Generated/LUFileParser.cs, Line: 2163, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #401 Path: /home/vsts/work/1/s/libraries/Parsers/Microsoft.Bot.Builder.Parsers.LU/Generated/LUFileParser.cs, Line: 2167, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #402 Path: /home/vsts/work/1/s/libraries/Parsers/Microsoft.Bot.Builder.Parsers.LU/Generated/LUFileParser.cs, Line: 2267, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #403 Path: /home/vsts/work/1/s/libraries/Parsers/Microsoft.Bot.Builder.Parsers.LU/Generated/LUFileParser.cs, Line: 2271, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #404 Path: /home/vsts/work/1/s/libraries/Parsers/Microsoft.Bot.Builder.Parsers.LU/Generated/LUFileParser.cs, Line: 2275, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #405 Path: /home/vsts/work/1/s/libraries/Parsers/Microsoft.Bot.Builder.Parsers.LU/Generated/LUFileParser.cs, Line: 2338, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #406 Path: /home/vsts/work/1/s/libraries/Parsers/Microsoft.Bot.Builder.Parsers.LU/Generated/LUFileParser.cs, Line: 2342, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #407 Path: /home/vsts/work/1/s/libraries/Parsers/Microsoft.Bot.Builder.Parsers.LU/Generated/LUFileParser.cs, Line: 2346, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #408 Path: /home/vsts/work/1/s/libraries/Parsers/Microsoft.Bot.Builder.Parsers.LU/Generated/LUFileParser.cs, Line: 237, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #409 Path: /home/vsts/work/1/s/libraries/Parsers/Microsoft.Bot.Builder.Parsers.LU/Generated/LUFileParser.cs, Line: 2406, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #410 Path: /home/vsts/work/1/s/libraries/Parsers/Microsoft.Bot.Builder.Parsers.LU/Generated/LUFileParser.cs, Line: 241, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #411 Path: /home/vsts/work/1/s/libraries/Parsers/Microsoft.Bot.Builder.Parsers.LU/Generated/LUFileParser.cs, Line: 2410, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #412 Path: /home/vsts/work/1/s/libraries/Parsers/Microsoft.Bot.Builder.Parsers.LU/Generated/LUFileParser.cs, Line: 2414, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #413 Path: /home/vsts/work/1/s/libraries/Parsers/Microsoft.Bot.Builder.Parsers.LU/Generated/LUFileParser.cs, Line: 245, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #414 Path: /home/vsts/work/1/s/libraries/Parsers/Microsoft.Bot.Builder.Parsers.LU/Generated/LUFileParser.cs, Line: 2454, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #415 Path: /home/vsts/work/1/s/libraries/Parsers/Microsoft.Bot.Builder.Parsers.LU/Generated/LUFileParser.cs, Line: 2458, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #416 Path: /home/vsts/work/1/s/libraries/Parsers/Microsoft.Bot.Builder.Parsers.LU/Generated/LUFileParser.cs, Line: 2462, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #417 Path: /home/vsts/work/1/s/libraries/Parsers/Microsoft.Bot.Builder.Parsers.LU/Generated/LUFileParser.cs, Line: 2517, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #418 Path: /home/vsts/work/1/s/libraries/Parsers/Microsoft.Bot.Builder.Parsers.LU/Generated/LUFileParser.cs, Line: 2521, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #419 Path: /home/vsts/work/1/s/libraries/Parsers/Microsoft.Bot.Builder.Parsers.LU/Generated/LUFileParser.cs, Line: 2525, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #420 Path: /home/vsts/work/1/s/libraries/Parsers/Microsoft.Bot.Builder.Parsers.LU/Generated/LUFileParser.cs, Line: 2608, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #421 Path: /home/vsts/work/1/s/libraries/Parsers/Microsoft.Bot.Builder.Parsers.LU/Generated/LUFileParser.cs, Line: 2612, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #422 Path: /home/vsts/work/1/s/libraries/Parsers/Microsoft.Bot.Builder.Parsers.LU/Generated/LUFileParser.cs, Line: 2616, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #423 Path: /home/vsts/work/1/s/libraries/Parsers/Microsoft.Bot.Builder.Parsers.LU/Generated/LUFileParser.cs, Line: 2702, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #424 Path: /home/vsts/work/1/s/libraries/Parsers/Microsoft.Bot.Builder.Parsers.LU/Generated/LUFileParser.cs, Line: 2706, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #425 Path: /home/vsts/work/1/s/libraries/Parsers/Microsoft.Bot.Builder.Parsers.LU/Generated/LUFileParser.cs, Line: 2710, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #426 Path: /home/vsts/work/1/s/libraries/Parsers/Microsoft.Bot.Builder.Parsers.LU/Generated/LUFileParser.cs, Line: 2792, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #427 Path: /home/vsts/work/1/s/libraries/Parsers/Microsoft.Bot.Builder.Parsers.LU/Generated/LUFileParser.cs, Line: 2796, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #428 Path: /home/vsts/work/1/s/libraries/Parsers/Microsoft.Bot.Builder.Parsers.LU/Generated/LUFileParser.cs, Line: 2800, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #429 Path: /home/vsts/work/1/s/libraries/Parsers/Microsoft.Bot.Builder.Parsers.LU/Generated/LUFileParser.cs, Line: 2835, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #430 Path: /home/vsts/work/1/s/libraries/Parsers/Microsoft.Bot.Builder.Parsers.LU/Generated/LUFileParser.cs, Line: 2839, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #431 Path: /home/vsts/work/1/s/libraries/Parsers/Microsoft.Bot.Builder.Parsers.LU/Generated/LUFileParser.cs, Line: 2843, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #432 Path: /home/vsts/work/1/s/libraries/Parsers/Microsoft.Bot.Builder.Parsers.LU/Generated/LUFileParser.cs, Line: 2895, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #433 Path: /home/vsts/work/1/s/libraries/Parsers/Microsoft.Bot.Builder.Parsers.LU/Generated/LUFileParser.cs, Line: 2899, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #434 Path: /home/vsts/work/1/s/libraries/Parsers/Microsoft.Bot.Builder.Parsers.LU/Generated/LUFileParser.cs, Line: 2903, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #435 Path: /home/vsts/work/1/s/libraries/Parsers/Microsoft.Bot.Builder.Parsers.LU/Generated/LUFileParser.cs, Line: 2987, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #436 Path: /home/vsts/work/1/s/libraries/Parsers/Microsoft.Bot.Builder.Parsers.LU/Generated/LUFileParser.cs, Line: 2991, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #437 Path: /home/vsts/work/1/s/libraries/Parsers/Microsoft.Bot.Builder.Parsers.LU/Generated/LUFileParser.cs, Line: 2995, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #438 Path: /home/vsts/work/1/s/libraries/Parsers/Microsoft.Bot.Builder.Parsers.LU/Generated/LUFileParser.cs, Line: 3070, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #439 Path: /home/vsts/work/1/s/libraries/Parsers/Microsoft.Bot.Builder.Parsers.LU/Generated/LUFileParser.cs, Line: 3074, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #440 Path: /home/vsts/work/1/s/libraries/Parsers/Microsoft.Bot.Builder.Parsers.LU/Generated/LUFileParser.cs, Line: 3078, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #441 Path: /home/vsts/work/1/s/libraries/Parsers/Microsoft.Bot.Builder.Parsers.LU/Generated/LUFileParser.cs, Line: 3117, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #442 Path: /home/vsts/work/1/s/libraries/Parsers/Microsoft.Bot.Builder.Parsers.LU/Generated/LUFileParser.cs, Line: 3121, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #443 Path: /home/vsts/work/1/s/libraries/Parsers/Microsoft.Bot.Builder.Parsers.LU/Generated/LUFileParser.cs, Line: 3125, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #444 Path: /home/vsts/work/1/s/libraries/Parsers/Microsoft.Bot.Builder.Parsers.LU/Generated/LUFileParser.cs, Line: 3192, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #445 Path: /home/vsts/work/1/s/libraries/Parsers/Microsoft.Bot.Builder.Parsers.LU/Generated/LUFileParser.cs, Line: 3196, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #446 Path: /home/vsts/work/1/s/libraries/Parsers/Microsoft.Bot.Builder.Parsers.LU/Generated/LUFileParser.cs, Line: 3200, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #447 Path: /home/vsts/work/1/s/libraries/Parsers/Microsoft.Bot.Builder.Parsers.LU/Generated/LUFileParser.cs, Line: 3239, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #448 Path: /home/vsts/work/1/s/libraries/Parsers/Microsoft.Bot.Builder.Parsers.LU/Generated/LUFileParser.cs, Line: 3243, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #449 Path: /home/vsts/work/1/s/libraries/Parsers/Microsoft.Bot.Builder.Parsers.LU/Generated/LUFileParser.cs, Line: 3247, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #450 Path: /home/vsts/work/1/s/libraries/Parsers/Microsoft.Bot.Builder.Parsers.LU/Generated/LUFileParser.cs, Line: 3314, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #451 Path: /home/vsts/work/1/s/libraries/Parsers/Microsoft.Bot.Builder.Parsers.LU/Generated/LUFileParser.cs, Line: 3318, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #452 Path: /home/vsts/work/1/s/libraries/Parsers/Microsoft.Bot.Builder.Parsers.LU/Generated/LUFileParser.cs, Line: 3322, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #453 Path: /home/vsts/work/1/s/libraries/Parsers/Microsoft.Bot.Builder.Parsers.LU/Generated/LUFileParser.cs, Line: 3374, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #454 Path: /home/vsts/work/1/s/libraries/Parsers/Microsoft.Bot.Builder.Parsers.LU/Generated/LUFileParser.cs, Line: 3378, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #455 Path: /home/vsts/work/1/s/libraries/Parsers/Microsoft.Bot.Builder.Parsers.LU/Generated/LUFileParser.cs, Line: 3382, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #456 Path: /home/vsts/work/1/s/libraries/Parsers/Microsoft.Bot.Builder.Parsers.LU/Generated/LUFileParser.cs, Line: 339, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #457 Path: /home/vsts/work/1/s/libraries/Parsers/Microsoft.Bot.Builder.Parsers.LU/Generated/LUFileParser.cs, Line: 343, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #458 Path: /home/vsts/work/1/s/libraries/Parsers/Microsoft.Bot.Builder.Parsers.LU/Generated/LUFileParser.cs, Line: 3450, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #459 Path: /home/vsts/work/1/s/libraries/Parsers/Microsoft.Bot.Builder.Parsers.LU/Generated/LUFileParser.cs, Line: 3454, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #460 Path: /home/vsts/work/1/s/libraries/Parsers/Microsoft.Bot.Builder.Parsers.LU/Generated/LUFileParser.cs, Line: 3458, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #461 Path: /home/vsts/work/1/s/libraries/Parsers/Microsoft.Bot.Builder.Parsers.LU/Generated/LUFileParser.cs, Line: 347, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #462 Path: /home/vsts/work/1/s/libraries/Parsers/Microsoft.Bot.Builder.Parsers.LU/Generated/LUFileParser.cs, Line: 3511, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #463 Path: /home/vsts/work/1/s/libraries/Parsers/Microsoft.Bot.Builder.Parsers.LU/Generated/LUFileParser.cs, Line: 3515, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #464 Path: /home/vsts/work/1/s/libraries/Parsers/Microsoft.Bot.Builder.Parsers.LU/Generated/LUFileParser.cs, Line: 3519, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #465 Path: /home/vsts/work/1/s/libraries/Parsers/Microsoft.Bot.Builder.Parsers.LU/Generated/LUFileParser.cs, Line: 3575, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #466 Path: /home/vsts/work/1/s/libraries/Parsers/Microsoft.Bot.Builder.Parsers.LU/Generated/LUFileParser.cs, Line: 3579, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #467 Path: /home/vsts/work/1/s/libraries/Parsers/Microsoft.Bot.Builder.Parsers.LU/Generated/LUFileParser.cs, Line: 3583, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #468 Path: /home/vsts/work/1/s/libraries/Parsers/Microsoft.Bot.Builder.Parsers.LU/Generated/LUFileParser.cs, Line: 3636, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #469 Path: /home/vsts/work/1/s/libraries/Parsers/Microsoft.Bot.Builder.Parsers.LU/Generated/LUFileParser.cs, Line: 3640, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #470 Path: /home/vsts/work/1/s/libraries/Parsers/Microsoft.Bot.Builder.Parsers.LU/Generated/LUFileParser.cs, Line: 3644, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #471 Path: /home/vsts/work/1/s/libraries/Parsers/Microsoft.Bot.Builder.Parsers.LU/Generated/LUFileParser.cs, Line: 3713, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #472 Path: /home/vsts/work/1/s/libraries/Parsers/Microsoft.Bot.Builder.Parsers.LU/Generated/LUFileParser.cs, Line: 3717, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #473 Path: /home/vsts/work/1/s/libraries/Parsers/Microsoft.Bot.Builder.Parsers.LU/Generated/LUFileParser.cs, Line: 3721, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #474 Path: /home/vsts/work/1/s/libraries/Parsers/Microsoft.Bot.Builder.Parsers.LU/Generated/LUFileParser.cs, Line: 3811, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #475 Path: /home/vsts/work/1/s/libraries/Parsers/Microsoft.Bot.Builder.Parsers.LU/Generated/LUFileParser.cs, Line: 3815, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #476 Path: /home/vsts/work/1/s/libraries/Parsers/Microsoft.Bot.Builder.Parsers.LU/Generated/LUFileParser.cs, Line: 3819, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #477 Path: /home/vsts/work/1/s/libraries/Parsers/Microsoft.Bot.Builder.Parsers.LU/Generated/LUFileParser.cs, Line: 3886, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #478 Path: /home/vsts/work/1/s/libraries/Parsers/Microsoft.Bot.Builder.Parsers.LU/Generated/LUFileParser.cs, Line: 3890, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #479 Path: /home/vsts/work/1/s/libraries/Parsers/Microsoft.Bot.Builder.Parsers.LU/Generated/LUFileParser.cs, Line: 3894, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #480 Path: /home/vsts/work/1/s/libraries/Parsers/Microsoft.Bot.Builder.Parsers.LU/Generated/LUFileParser.cs, Line: 3962, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #481 Path: /home/vsts/work/1/s/libraries/Parsers/Microsoft.Bot.Builder.Parsers.LU/Generated/LUFileParser.cs, Line: 3966, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #482 Path: /home/vsts/work/1/s/libraries/Parsers/Microsoft.Bot.Builder.Parsers.LU/Generated/LUFileParser.cs, Line: 3970, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #483 Path: /home/vsts/work/1/s/libraries/Parsers/Microsoft.Bot.Builder.Parsers.LU/Generated/LUFileParser.cs, Line: 4056, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #484 Path: /home/vsts/work/1/s/libraries/Parsers/Microsoft.Bot.Builder.Parsers.LU/Generated/LUFileParser.cs, Line: 4060, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #485 Path: /home/vsts/work/1/s/libraries/Parsers/Microsoft.Bot.Builder.Parsers.LU/Generated/LUFileParser.cs, Line: 4064, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #486 Path: /home/vsts/work/1/s/libraries/Parsers/Microsoft.Bot.Builder.Parsers.LU/Generated/LUFileParser.cs, Line: 411, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #487 Path: /home/vsts/work/1/s/libraries/Parsers/Microsoft.Bot.Builder.Parsers.LU/Generated/LUFileParser.cs, Line: 415, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #488 Path: /home/vsts/work/1/s/libraries/Parsers/Microsoft.Bot.Builder.Parsers.LU/Generated/LUFileParser.cs, Line: 4160, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #489 Path: /home/vsts/work/1/s/libraries/Parsers/Microsoft.Bot.Builder.Parsers.LU/Generated/LUFileParser.cs, Line: 4164, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #490 Path: /home/vsts/work/1/s/libraries/Parsers/Microsoft.Bot.Builder.Parsers.LU/Generated/LUFileParser.cs, Line: 4168, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #491 Path: /home/vsts/work/1/s/libraries/Parsers/Microsoft.Bot.Builder.Parsers.LU/Generated/LUFileParser.cs, Line: 419, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #492 Path: /home/vsts/work/1/s/libraries/Parsers/Microsoft.Bot.Builder.Parsers.LU/Generated/LUFileParser.cs, Line: 4259, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #493 Path: /home/vsts/work/1/s/libraries/Parsers/Microsoft.Bot.Builder.Parsers.LU/Generated/LUFileParser.cs, Line: 4263, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #494 Path: /home/vsts/work/1/s/libraries/Parsers/Microsoft.Bot.Builder.Parsers.LU/Generated/LUFileParser.cs, Line: 4267, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #495 Path: /home/vsts/work/1/s/libraries/Parsers/Microsoft.Bot.Builder.Parsers.LU/Generated/LUFileParser.cs, Line: 4348, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #496 Path: /home/vsts/work/1/s/libraries/Parsers/Microsoft.Bot.Builder.Parsers.LU/Generated/LUFileParser.cs, Line: 4352, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #497 Path: /home/vsts/work/1/s/libraries/Parsers/Microsoft.Bot.Builder.Parsers.LU/Generated/LUFileParser.cs, Line: 4356, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #498 Path: /home/vsts/work/1/s/libraries/Parsers/Microsoft.Bot.Builder.Parsers.LU/Generated/LUFileParser.cs, Line: 4423, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #499 Path: /home/vsts/work/1/s/libraries/Parsers/Microsoft.Bot.Builder.Parsers.LU/Generated/LUFileParser.cs, Line: 4427, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #500 Path: /home/vsts/work/1/s/libraries/Parsers/Microsoft.Bot.Builder.Parsers.LU/Generated/LUFileParser.cs, Line: 4431, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #501 Path: /home/vsts/work/1/s/libraries/Parsers/Microsoft.Bot.Builder.Parsers.LU/Generated/LUFileParser.cs, Line: 4482, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #502 Path: /home/vsts/work/1/s/libraries/Parsers/Microsoft.Bot.Builder.Parsers.LU/Generated/LUFileParser.cs, Line: 4486, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #503 Path: /home/vsts/work/1/s/libraries/Parsers/Microsoft.Bot.Builder.Parsers.LU/Generated/LUFileParser.cs, Line: 4490, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #504 Path: /home/vsts/work/1/s/libraries/Parsers/Microsoft.Bot.Builder.Parsers.LU/Generated/LUFileParser.cs, Line: 4529, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #505 Path: /home/vsts/work/1/s/libraries/Parsers/Microsoft.Bot.Builder.Parsers.LU/Generated/LUFileParser.cs, Line: 4533, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #506 Path: /home/vsts/work/1/s/libraries/Parsers/Microsoft.Bot.Builder.Parsers.LU/Generated/LUFileParser.cs, Line: 4537, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #507 Path: /home/vsts/work/1/s/libraries/Parsers/Microsoft.Bot.Builder.Parsers.LU/Generated/LUFileParser.cs, Line: 487, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #508 Path: /home/vsts/work/1/s/libraries/Parsers/Microsoft.Bot.Builder.Parsers.LU/Generated/LUFileParser.cs, Line: 491, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #509 Path: /home/vsts/work/1/s/libraries/Parsers/Microsoft.Bot.Builder.Parsers.LU/Generated/LUFileParser.cs, Line: 495, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #510 Path: /home/vsts/work/1/s/libraries/Parsers/Microsoft.Bot.Builder.Parsers.LU/Generated/LUFileParser.cs, Line: 538, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #511 Path: /home/vsts/work/1/s/libraries/Parsers/Microsoft.Bot.Builder.Parsers.LU/Generated/LUFileParser.cs, Line: 542, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #512 Path: /home/vsts/work/1/s/libraries/Parsers/Microsoft.Bot.Builder.Parsers.LU/Generated/LUFileParser.cs, Line: 546, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #513 Path: /home/vsts/work/1/s/libraries/Parsers/Microsoft.Bot.Builder.Parsers.LU/Generated/LUFileParser.cs, Line: 618, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #514 Path: /home/vsts/work/1/s/libraries/Parsers/Microsoft.Bot.Builder.Parsers.LU/Generated/LUFileParser.cs, Line: 622, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #515 Path: /home/vsts/work/1/s/libraries/Parsers/Microsoft.Bot.Builder.Parsers.LU/Generated/LUFileParser.cs, Line: 626, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #516 Path: /home/vsts/work/1/s/libraries/Parsers/Microsoft.Bot.Builder.Parsers.LU/Generated/LUFileParser.cs, Line: 697, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #517 Path: /home/vsts/work/1/s/libraries/Parsers/Microsoft.Bot.Builder.Parsers.LU/Generated/LUFileParser.cs, Line: 701, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #518 Path: /home/vsts/work/1/s/libraries/Parsers/Microsoft.Bot.Builder.Parsers.LU/Generated/LUFileParser.cs, Line: 705, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #519 Path: /home/vsts/work/1/s/libraries/Parsers/Microsoft.Bot.Builder.Parsers.LU/Generated/LUFileParser.cs, Line: 760, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #520 Path: /home/vsts/work/1/s/libraries/Parsers/Microsoft.Bot.Builder.Parsers.LU/Generated/LUFileParser.cs, Line: 764, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #521 Path: /home/vsts/work/1/s/libraries/Parsers/Microsoft.Bot.Builder.Parsers.LU/Generated/LUFileParser.cs, Line: 768, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #522 Path: /home/vsts/work/1/s/libraries/Parsers/Microsoft.Bot.Builder.Parsers.LU/Generated/LUFileParser.cs, Line: 829, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #523 Path: /home/vsts/work/1/s/libraries/Parsers/Microsoft.Bot.Builder.Parsers.LU/Generated/LUFileParser.cs, Line: 833, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #524 Path: /home/vsts/work/1/s/libraries/Parsers/Microsoft.Bot.Builder.Parsers.LU/Generated/LUFileParser.cs, Line: 837, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #525 Path: /home/vsts/work/1/s/libraries/Parsers/Microsoft.Bot.Builder.Parsers.LU/Generated/LUFileParser.cs, Line: 889, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #526 Path: /home/vsts/work/1/s/libraries/Parsers/Microsoft.Bot.Builder.Parsers.LU/Generated/LUFileParser.cs, Line: 893, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #527 Path: /home/vsts/work/1/s/libraries/Parsers/Microsoft.Bot.Builder.Parsers.LU/Generated/LUFileParser.cs, Line: 897, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #528 Path: /home/vsts/work/1/s/libraries/Parsers/Microsoft.Bot.Builder.Parsers.LU/Generated/LUFileParser.cs, Line: 937, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #529 Path: /home/vsts/work/1/s/libraries/Parsers/Microsoft.Bot.Builder.Parsers.LU/Generated/LUFileParser.cs, Line: 941, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #530 Path: /home/vsts/work/1/s/libraries/Parsers/Microsoft.Bot.Builder.Parsers.LU/Generated/LUFileParser.cs, Line: 945, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #531 Path: /home/vsts/work/1/s/libraries/Parsers/Microsoft.Bot.Builder.Parsers.LU/Generated/LUFileParser.cs, Line: 999, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html



--- Rules Summary ---
R8: 433
R7: 65
R4: 17
R5: 6
R2: 3
R3: 2
R6: 2
R10: 2
R9: 1

--- Summary ---
Fixed ReSharper issues: 528
Fixed SonarQube issues: 29
Total fixed issues: 531

Finished in: 48 s

######################################################################
Nr: 1 - TypeCheckAndCastRewriterR5
Filepath: /home/vsts/work/1/s/libraries/Microsoft.Bot.Builder.Dialogs/ObjectPath.cs
Description: Error: The created Syntax Tree is semantically incorrect.
------------------------------------------------------------------------
---- Original Tree ----
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;
using Newtonsoft.Json.Serialization;

namespace Microsoft.Bot.Builder.Dialogs
{
    /// <summary>
    /// Helper methods for working with dynamic json objects.
    /// </summary>
    public static class ObjectPath
    {
        private static readonly JsonSerializerSettings _cloneSettings = new JsonSerializerSettings { TypeNameHandling = TypeNameHandling.All };

        private static readonly JsonSerializerSettings _expressionCaseSettings = new JsonSerializerSettings
        {
            ContractResolver = new DefaultContractResolver { NamingStrategy = new CamelCaseNamingStrategy() },
            NullValueHandling = NullValueHandling.Ignore,
        };

        /// <summary>
        /// Does an object have a subpath.
        /// </summary>
        /// <param name="obj">object.</param>
        /// <param name="path">path to evaluate.</param>
        /// <returns>true if the path is there.</returns>
        public static bool HasValue(object obj, string path)
        {
            return TryGetPathValue<object>(obj, path, out var value);
        }

        /// <summary>
        /// Get the value for a path relative to an object.
        /// </summary>
        /// <typeparam name="T">type to return.</typeparam>
        /// <param name="obj">object to start with.</param>
        /// <param name="path">path to evaluate.</param>
        /// <returns>value or default(T).</returns>
        public static T GetPathValue<T>(object obj, string path)
        {
            if (TryGetPathValue<T>(obj, path, out var value))
            {
                return value;
            }

            throw new KeyNotFoundException(path);
        }

        /// <summary>
        /// Get the value for a path relative to an object.
        /// </summary>
        /// <typeparam name="T">type to return.</typeparam>
        /// <param name="obj">object to start with.</param>
        /// <param name="path">path to evaluate.</param>
        /// <param name="defaultValue">default value to use if any part of the path is missing.</param>
        /// <returns>value or default(T).</returns>
        public static T GetPathValue<T>(object obj, string path, T defaultValue)
        {
            if (TryGetPathValue<T>(obj, path, out var value))
            {
                return value;
            }

            return defaultValue;
        }

        /// <summary>
        /// Get the value for a path relative to an object.
        /// </summary>
        /// <typeparam name="T">type to return.</typeparam>
        /// <param name="obj">object to start with.</param>
        /// <param name="path">path to evaluate.</param>
        /// <param name="value">value for the path.</param>
        /// <returns>true if successful.</returns>
        public static bool TryGetPathValue<T>(object obj, string path, out T value)
        {
            value = default;

            if (obj == null)
            {
                return false;
            }

            if (path == null)
            {
                return false;
            }

            if (path.Length == 0)
            {
                value = MapValueTo<T>(obj);
                return true;
            }

            if (!TryResolvePath(obj, path, out var segments))
            {
                return false;
            }

            if (!ResolveSegments(obj, segments, out var result))
            {
                return false;
            }

            // look to see if it's ExpressionProperty and bind it if it is
            // NOTE: this bit of duck typing keeps us from adding dependency between adaptiveExpressions and Dialogs.
            if (result.GetType().GetProperty("ExpressionText") != null)
            {
                var method = result.GetType().GetMethod("GetValue", new[] { typeof(object) });
                if (method != null)
                {
                    result = method.Invoke(result, new[] { obj });
                }
            }

            try
            {
                value = MapValueTo<T>(result);
            }
#pragma warning disable CA1031 // Do not catch general exception types
            catch (Exception)
#pragma warning restore CA1031 // Do not catch general exception types
            {
                return false;
            }

            return true;
        }

        /// <summary>
        /// Given an object evaluate a path to set the value.
        /// </summary>
        /// <param name="obj">object to start with.</param>
        /// <param name="path">path to evaluate.</param>
        /// <param name="value">value to store.</param>
        /// <param name="json">if true, sets the value as primitive JSON objects.</param>
        public static void SetPathValue(object obj, string path, object value, bool json = true)
        {
            if (!TryResolvePath(obj, path, out var segments))
            {
                return;
            }

            dynamic current = obj;
            for (var i = 0; i < segments.Count - 1; i++)
            {
                var segment = segments[i];
                dynamic next;
                if (segment is int index)
                {
                    next = current[index];
                    if (next == null)
                    {
                        if (((ICollection)current).Count <= index)
                        {
                            // Expand array to index
                            for (var idx = ((ICollection)current).Count; idx <= index; ++idx)
                            {
                                ((JArray)current)[idx] = null;
                            }

                            next = current[index];
                        }
                    }
                }
                else
                {
                    var ssegment = segment as string;
                    next = GetObjectProperty(current, ssegment);
                    if (next == null)
                    {
                        // Create object or array base on next segment
                        var nextSegment = segments[i + 1];
                        if (nextSegment is string snext)
                        {
                            SetObjectSegment(current, ssegment, new JObject());
                            next = GetObjectProperty(current, ssegment);
                        }
                        else
                        {
                            SetObjectSegment(current, ssegment, new JArray());
                            next = GetObjectProperty(current, ssegment);
                        }
                    }
                }

                current = next;
            }

            var lastSegment = segments.Last();
            SetObjectSegment(current, lastSegment, value, json);
        }

        /// <summary>
        /// Remove path from object.
        /// </summary>
        /// <param name="obj">Object to change.</param>
        /// <param name="path">Path to remove.</param>
        public static void RemovePathValue(object obj, string path)
        {
            if (!TryResolvePath(obj, path, out var segments))
            {
                return;
            }

            dynamic current = obj;
            for (var i = 0; i < segments.Count - 1; i++)
            {
                var segment = segments[i];
                if (!ResolveSegment(ref current, segment))
                {
                    return;
                }
            }

            if (current != null)
            {
                var lastSegment = segments.Last();
                if (lastSegment is string property)
                {
                    // ConcurrentDictionary doesn't implement Remove, but it does implement IDictionary
                    if (current is IDictionary<string, object> dict)
                    {
                        dict.Remove(property);
                    }
                    else
                    {
                        current.Remove(property);
                    }
                }
                else
                {
                    current[(int)lastSegment] = null;
                }
            }
        }

        /// <summary>
        /// Apply an action to all properties in an object.
        /// </summary>
        /// <param name="obj">Object to map against.</param>
        /// <param name="action">Action to take.</param>
        public static void ForEachProperty(object obj, Action<string, object> action)
        {
            if (obj is IDictionary<string, object> dict)
            {
                foreach (var entry in dict)
                {
                    action(entry.Key, entry.Value);
                }
            }
            else if (obj is JObject jobj)
            {
                foreach (var property in jobj.Properties())
                {
                    action(property.Name, property.Value);
                }
            }

            /* For tracking purposes, only use pure dictionary/jobject.
            else if (!(obj.GetType().IsPrimitive || obj.GetType().IsArray() || obj is string || obj is DateTime || obj is DateTimeOffset || obj is JValue || obj is JArray))
            {
                foreach (var property in obj.GetType().GetProperties())
                {
                    // Check for indexer
                    if (property.GetIndexParameters().Length == 0)
                    {
                        action(property.Name, property.GetValue(obj));
                    }
                }
            }
            */
        }

        /// <summary>
        /// Get all properties in an object.
        /// </summary>
        /// <param name="obj">Object to enumerate property names.</param>
        /// <returns>enumeration of property names on the object if it is not a value type.</returns>
        public static IEnumerable<string> GetProperties(object obj)
        {
            if (obj == null)
            {
            }
            else if (obj is IDictionary<string, object> dict)
            {
                foreach (var entry in dict)
                {
                    yield return entry.Key;
                }
            }
            else if (obj is JObject jobj)
            {
                foreach (var property in jobj.Properties())
                {
                    yield return property.Name;
                }
            }
            else
            {
                foreach (var property in obj.GetType().GetProperties(BindingFlags.Instance | BindingFlags.Public).Select(p => p.Name))
                {
                    yield return property;
                }
            }
        }

        /// <summary>
        /// Detects if property exists on object.
        /// </summary>
        /// <param name="obj">object.</param>
        /// <param name="name">name of the property.</param>
        /// <returns>true if found.</returns>
        public static bool ContainsProperty(object obj, string name)
        {
            if (obj == null)
            {
                return false;
            }

            if (obj is IDictionary<string, object> dict)
            {
                return dict.ContainsKey(name);
            }

            if (obj is JObject jobj)
            {
                return jobj.ContainsKey(name);
            }

            return obj.GetType().GetProperties(BindingFlags.Instance | BindingFlags.Public).Any(property => property.Name.Equals(name, StringComparison.OrdinalIgnoreCase));
        }

        /// <summary>
        /// Clone an object.
        /// </summary>
        /// <typeparam name="T">Type to clone.</typeparam>
        /// <param name="obj">The object.</param>
        /// <returns>The object as Json.</returns>
        public static T Clone<T>(T obj)
        {
            return JsonConvert.DeserializeObject<T>(JsonConvert.SerializeObject(obj, _cloneSettings), _cloneSettings);
        }

        /// <summary>
        /// Equivalent to javascripts ObjectPath.Assign, creates a new object from startObject overlaying any non-null values from the overlay object.
        /// </summary>
        /// <typeparam name="T">The object type.</typeparam>
        /// <param name="startObject">Intial object.</param>
        /// <param name="overlayObject">Overlay object.</param>
        /// <returns>merged object.</returns>
        public static T Merge<T>(T startObject, T overlayObject)
            where T : class
        {
            return Assign<T>(startObject, overlayObject);
        }

        /// <summary>
        /// Equivalent to javascripts ObjectPath.Assign, creates a new object from startObject overlaying any non-null values from the overlay object.
        /// </summary>
        /// <typeparam name="T">The target type.</typeparam>
        /// <param name="startObject">intial object of any type.</param>
        /// <param name="overlayObject">overlay object of any type.</param>
        /// <returns>merged object.</returns>
        public static T Assign<T>(object startObject, object overlayObject)
            where T : class
        {
            return (T)Assign(startObject, overlayObject, typeof(T));
        }

        /// <summary>
        /// Equivalent to javascripts ObjectPath.Assign, creates a new object from startObject overlaying any non-null values from the overlay object.
        /// </summary>
        /// <param name="startObject">intial object of any type.</param>
        /// <param name="overlayObject">overlay object of any type.</param>
        /// <param name="type">type to output.</param>
        /// <returns>merged object.</returns>
        public static object Assign(object startObject, object overlayObject, Type type)
        {
            if (startObject != null && overlayObject != null)
            {
                // make a deep clone JObject of the startObject
                var jsMerged = startObject is JObject ? (JObject)(startObject as JObject).DeepClone() : JObject.FromObject(startObject);

                // get a JObject of the overlay object
                var jsOverlay = overlayObject is JObject ? overlayObject as JObject : JObject.FromObject(overlayObject);

                jsMerged.Merge(jsOverlay, new JsonMergeSettings
                {
                    MergeArrayHandling = MergeArrayHandling.Replace,
                    MergeNullValueHandling = MergeNullValueHandling.Ignore,
                });

                return jsMerged.ToObject(type);
            }

            var singleObject = startObject ?? overlayObject;
            if (singleObject != null)
            {
                if (singleObject is JObject)
                {
                    return (singleObject as JObject).ToObject(type);
                }

                return singleObject;
            }

            return (Type)Activator.CreateInstance(type);
        }

        /// <summary>
        /// Convert a generic object to a typed object.
        /// </summary>
        /// <typeparam name="T">type to convert to.</typeparam>
        /// <param name="val">value to convert.</param>
        /// <returns>converted value.</returns>
        public static T MapValueTo<T>(object val)
        {
            if (val is JValue)
            {
                return ((JValue)val).ToObject<T>();
            }

            if (typeof(T) == typeof(object))
            {
                return (T)val;
            }

            if (val is JArray)
            {
                return ((JArray)val).ToObject<T>();
            }

            if (val is JObject)
            {
                return ((JObject)val).ToObject<T>();
            }

            if (typeof(T) == typeof(JObject))
            {
                return (T)(object)JObject.FromObject(val);
            }

            if (typeof(T) == typeof(JArray))
            {
                return (T)(object)JArray.FromObject(val);
            }

            if (typeof(T) == typeof(JValue))
            {
                return (T)(object)JValue.FromObject(val);
            }

            if (val is T)
            {
                return (T)val;
            }

            return JsonConvert.DeserializeObject<T>(JsonConvert.SerializeObject(val, _expressionCaseSettings));
        }

        /// <summary>
        /// Given an root object and property path, resolve to a constant if eval = true or a constant path otherwise.  
        /// conversation[user.name][user.age] => ['conversation', 'joe', 32].
        /// </summary>
        /// <param name="obj">root object.</param>
        /// <param name="propertyPath">property path to resolve.</param>
        /// <param name="segments">Path segments.</param>
        /// <param name="eval">True to evaluate resulting segments.</param>
        /// <returns>True if it was able to resolve all nested references.</returns>
        public static bool TryResolvePath(object obj, string propertyPath, out List<object> segments, bool eval = false)
        {
            var soFar = new List<object>();
            segments = soFar;
            var first = propertyPath.Length > 0 ? propertyPath[0] : ' ';
            if (first == '\'' || first == '"')
            {
                if (!propertyPath.EndsWith(first.ToString(), StringComparison.Ordinal))
                {
                    return false;
                }

                soFar.Add(propertyPath.Substring(1, propertyPath.Length - 2));
            }
            else if (int.TryParse(propertyPath, out var number))
            {
                soFar.Add(number);
            }
            else
            {
                var start = 0;
                int i;

                // Emit current fragment
                void Emit()
                {
                    var segment = propertyPath.Substring(start, i - start);
                    if (!string.IsNullOrEmpty(segment))
                    {
                        soFar.Add(segment);
                    }

                    start = i + 1;
                }

                // Scan path evaluating as we go
                for (i = 0; i < propertyPath.Length; ++i)
                {
                    var ch = propertyPath[i];
                    if (ch == '.' || ch == '[')
                    {
                        Emit();
                    }

                    if (ch == '[')
                    {
                        // Bracket expression
                        var nesting = 1;
                        while (++i < propertyPath.Length)
                        {
                            ch = propertyPath[i];
                            if (ch == '[')
                            {
                                ++nesting;
                            }
                            else if (ch == ']')
                            {
                                --nesting;
                                if (nesting == 0)
                                {
                                    break;
                                }
                            }
                        }

                        if (nesting > 0)
                        {
                            // Unbalanced brackets
                            return false;
                        }

                        var expr = propertyPath.Substring(start, i - start);
                        start = i + 1;
                        if (!TryResolvePath(obj, expr, out var indexer, true) || indexer.Count != 1)
                        {
                            // Could not resolve bracket expression
                            return false;
                        }

                        var result = MapValueTo<string>(indexer.First());
                        if (int.TryParse(result, out var index))
                        {
                            soFar.Add(index);
                        }
                        else
                        {
                            soFar.Add(result);
                        }
                    }
                }

                Emit();

                if (eval)
                {
                    if (!ResolveSegments(obj, soFar, out var result))
                    {
                        return false;
                    }

                    soFar.Clear();
                    soFar.Add(MapValueTo<string>(result));
                }
            }

            return true;
        }

        private static bool ResolveSegment(ref dynamic current, object segment)
        {
            if (current != null)
            {
                if (segment is int index)
                {
                    current = current[index];
                }
                else
                {
                    current = GetObjectProperty(current, segment as string);
                }

                // TODO: We should make it so that a value can be present, but be null.
                // This interprets any null value as not being present.
                return current != null;
            }

            return false;
        }

        private static bool ResolveSegments(dynamic current, List<object> segments, out dynamic result)
        {
            result = current;
            foreach (var segment in segments)
            {
                if (!ResolveSegment(ref result, segment))
                {
                    return false;
                }
            }

            return true;
        }

        /// <summary>
        /// Get a property or array element from an object.
        /// </summary>
        /// <param name="obj">object.</param>
        /// <param name="property">property or array segment to get relative to the object.</param>
        /// <returns>the value or null if not found.</returns>
        private static object GetObjectProperty(object obj, string property)
        {
            if (obj == null)
            {
                return null;
            }

            if (obj is IDictionary<string, object> dict)
            {
                var key = dict.Keys.FirstOrDefault(key => string.Equals(key, property, StringComparison.OrdinalIgnoreCase))?? property;
                if (dict.TryGetValue(key, out var value))
                {
                    return value;
                }

                return null;
            }

            if (obj is JObject jobj)
            {
                jobj.TryGetValue(property, StringComparison.InvariantCultureIgnoreCase, out var value);
                return value;
            }

            if (obj is JValue jval)
            {
                // in order to make things like "this.value.Length" work, when "this.value" is a string.
                return GetObjectProperty(jval.Value, property);
            }

            var prop = obj.GetType().GetProperties().Where(p => string.Equals(p.Name, property, StringComparison.OrdinalIgnoreCase)).FirstOrDefault();
            if (prop != null)
            {
                return prop.GetValue(obj);
            }

            return null;
        }

        /// <summary>
        /// Given an object, set a property or array element on it with a value.
        /// </summary>
        /// <param name="obj">object to modify.</param>
        /// <param name="segment">property or array segment to put the value in.</param>
        /// <param name="value">value to store.</param>
        /// <param name="json">if true, value will be normalized to JSON primitive objects.</param>
        private static void SetObjectSegment(object obj, object segment, object value, bool json = true)
        {
            object val;

            val = GetNormalizedValue(value, json);
            if (segment is int index)
            {
                var jar = obj as JArray;
                for (var i = jar.Count; i <= index; i++)
                {
                    jar.Add(null);
                }

                jar[index] = JToken.FromObject(val);
                return;
            }

            var property = segment as string;
            if (obj is IDictionary<string, object> dict)
            {
                var key = dict.Keys.FirstOrDefault(k => string.Equals(k, property, StringComparison.OrdinalIgnoreCase))?? property;
                dict[key] = val;
                return;
            }

            if (obj is JObject jobj)
            {
                var key = jobj.Properties().FirstOrDefault(p => string.Equals(p.Name, property, StringComparison.OrdinalIgnoreCase))?.Name ?? property;
                jobj[key] = val != null ? JToken.FromObject(val) : null;
                return;
            }

            var prop = obj.GetType().GetProperty(property);
            if (prop != null)
            {
                prop.SetValue(obj, val);
            }
        }

        /// <summary>
        /// Normalize value as json objects.
        /// </summary>
        /// <param name="value">value to normalize.</param>
        /// <param name="json">normalize as json objects.</param>
        /// <returns>normalized value.</returns>
        private static object GetNormalizedValue(object value, bool json)
        {
            object val;
            if (json)
            {
                if (value is JToken || value is JObject || value is JArray)
                {
                    val = Clone((JToken)value);
                }
                else if (value == null)
                {
                    val = null;
                }
                else if (value is string || value is byte || value is bool ||
                         value is DateTime || value is DateTimeOffset ||
                         value is short || value is int || value is long ||
                         value is ushort || value is uint || value is ulong ||
                         value is decimal || value is float || value is double)
                {
                    val = JValue.FromObject(value);
                }
                else
                {
                    val = JsonConvert.DeserializeObject(JsonConvert.SerializeObject(value, _expressionCaseSettings));
                }
            }
            else
            {
                val = value;
            }

            return val;
        }
    }
}

---- Transformed Tree ----
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;
using Newtonsoft.Json.Serialization;

namespace Microsoft.Bot.Builder.Dialogs
{
    /// <summary>
    /// Helper methods for working with dynamic json objects.
    /// </summary>
    public static class ObjectPath
    {
        private static readonly JsonSerializerSettings _cloneSettings = new JsonSerializerSettings { TypeNameHandling = TypeNameHandling.All };

        private static readonly JsonSerializerSettings _expressionCaseSettings = new JsonSerializerSettings
        {
            ContractResolver = new DefaultContractResolver { NamingStrategy = new CamelCaseNamingStrategy() },
            NullValueHandling = NullValueHandling.Ignore,
        };

        /// <summary>
        /// Does an object have a subpath.
        /// </summary>
        /// <param name="obj">object.</param>
        /// <param name="path">path to evaluate.</param>
        /// <returns>true if the path is there.</returns>
        public static bool HasValue(object obj, string path)
        {
            return TryGetPathValue<object>(obj, path, out var value);
        }

        /// <summary>
        /// Get the value for a path relative to an object.
        /// </summary>
        /// <typeparam name="T">type to return.</typeparam>
        /// <param name="obj">object to start with.</param>
        /// <param name="path">path to evaluate.</param>
        /// <returns>value or default(T).</returns>
        public static T GetPathValue<T>(object obj, string path)
        {
            if (TryGetPathValue<T>(obj, path, out var value))
            {
                return value;
            }

            throw new KeyNotFoundException(path);
        }

        /// <summary>
        /// Get the value for a path relative to an object.
        /// </summary>
        /// <typeparam name="T">type to return.</typeparam>
        /// <param name="obj">object to start with.</param>
        /// <param name="path">path to evaluate.</param>
        /// <param name="defaultValue">default value to use if any part of the path is missing.</param>
        /// <returns>value or default(T).</returns>
        public static T GetPathValue<T>(object obj, string path, T defaultValue)
        {
            if (TryGetPathValue<T>(obj, path, out var value))
            {
                return value;
            }

            return defaultValue;
        }

        /// <summary>
        /// Get the value for a path relative to an object.
        /// </summary>
        /// <typeparam name="T">type to return.</typeparam>
        /// <param name="obj">object to start with.</param>
        /// <param name="path">path to evaluate.</param>
        /// <param name="value">value for the path.</param>
        /// <returns>true if successful.</returns>
        public static bool TryGetPathValue<T>(object obj, string path, out T value)
        {
            value = default;

            if (obj == null)
            {
                return false;
            }

            if (path == null)
            {
                return false;
            }

            if (path.Length == 0)
            {
                value = MapValueTo<T>(obj);
                return true;
            }

            if (!TryResolvePath(obj, path, out var segments))
            {
                return false;
            }

            if (!ResolveSegments(obj, segments, out var result))
            {
                return false;
            }

            // look to see if it's ExpressionProperty and bind it if it is
            // NOTE: this bit of duck typing keeps us from adding dependency between adaptiveExpressions and Dialogs.
            if (result.GetType().GetProperty("ExpressionText") != null)
            {
                var method = result.GetType().GetMethod("GetValue", new[] { typeof(object) });
                if (method != null)
                {
                    result = method.Invoke(result, new[] { obj });
                }
            }

            try
            {
                value = MapValueTo<T>(result);
            }
#pragma warning disable CA1031 // Do not catch general exception types
            catch (Exception)
#pragma warning restore CA1031 // Do not catch general exception types
            {
                return false;
            }

            return true;
        }

        /// <summary>
        /// Given an object evaluate a path to set the value.
        /// </summary>
        /// <param name="obj">object to start with.</param>
        /// <param name="path">path to evaluate.</param>
        /// <param name="value">value to store.</param>
        /// <param name="json">if true, sets the value as primitive JSON objects.</param>
        public static void SetPathValue(object obj, string path, object value, bool json = true)
        {
            if (!TryResolvePath(obj, path, out var segments))
            {
                return;
            }

            dynamic current = obj;
            for (var i = 0; i < segments.Count - 1; i++)
            {
                var segment = segments[i];
                dynamic next;
                if (segment is int index)
                {
                    next = current[index];
                    if (next == null)
                    {
                        if (((ICollection)current).Count <= index)
                        {
                            // Expand array to index
                            for (var idx = ((ICollection)current).Count; idx <= index; ++idx)
                            {
                                ((JArray)current)[idx] = null;
                            }

                            next = current[index];
                        }
                    }
                }
                else
                {
                    var ssegment = segment as string;
                    next = GetObjectProperty(current, ssegment);
                    if (next == null)
                    {
                        // Create object or array base on next segment
                        var nextSegment = segments[i + 1];
                        if (nextSegment is string snext)
                        {
                            SetObjectSegment(current, ssegment, new JObject());
                            next = GetObjectProperty(current, ssegment);
                        }
                        else
                        {
                            SetObjectSegment(current, ssegment, new JArray());
                            next = GetObjectProperty(current, ssegment);
                        }
                    }
                }

                current = next;
            }

            var lastSegment = segments.Last();
            SetObjectSegment(current, lastSegment, value, json);
        }

        /// <summary>
        /// Remove path from object.
        /// </summary>
        /// <param name="obj">Object to change.</param>
        /// <param name="path">Path to remove.</param>
        public static void RemovePathValue(object obj, string path)
        {
            if (!TryResolvePath(obj, path, out var segments))
            {
                return;
            }

            dynamic current = obj;
            for (var i = 0; i < segments.Count - 1; i++)
            {
                var segment = segments[i];
                if (!ResolveSegment(ref current, segment))
                {
                    return;
                }
            }

            if (current != null)
            {
                var lastSegment = segments.Last();
                if (lastSegment is string property)
                {
                    // ConcurrentDictionary doesn't implement Remove, but it does implement IDictionary
                    if (current is IDictionary<string, object> dict)
                    {
                        dict.Remove(property);
                    }
                    else
                    {
                        current.Remove(property);
                    }
                }
                else
                {
                    current[(int)lastSegment] = null;
                }
            }
        }

        /// <summary>
        /// Apply an action to all properties in an object.
        /// </summary>
        /// <param name="obj">Object to map against.</param>
        /// <param name="action">Action to take.</param>
        public static void ForEachProperty(object obj, Action<string, object> action)
        {
            if (obj is IDictionary<string, object> dict)
            {
                foreach (var entry in dict)
                {
                    action(entry.Key, entry.Value);
                }
            }
            else if (obj is JObject jobj)
            {
                foreach (var property in jobj.Properties())
                {
                    action(property.Name, property.Value);
                }
            }

            /* For tracking purposes, only use pure dictionary/jobject.
            else if (!(obj.GetType().IsPrimitive || obj.GetType().IsArray() || obj is string || obj is DateTime || obj is DateTimeOffset || obj is JValue || obj is JArray))
            {
                foreach (var property in obj.GetType().GetProperties())
                {
                    // Check for indexer
                    if (property.GetIndexParameters().Length == 0)
                    {
                        action(property.Name, property.GetValue(obj));
                    }
                }
            }
            */
        }

        /// <summary>
        /// Get all properties in an object.
        /// </summary>
        /// <param name="obj">Object to enumerate property names.</param>
        /// <returns>enumeration of property names on the object if it is not a value type.</returns>
        public static IEnumerable<string> GetProperties(object obj)
        {
            if (obj == null)
            {
            }
            else if (obj is IDictionary<string, object> dict)
            {
                foreach (var entry in dict)
                {
                    yield return entry.Key;
                }
            }
            else if (obj is JObject jobj)
            {
                foreach (var property in jobj.Properties())
                {
                    yield return property.Name;
                }
            }
            else
            {
                foreach (var property in obj.GetType().GetProperties(BindingFlags.Instance | BindingFlags.Public).Select(p => p.Name))
                {
                    yield return property;
                }
            }
        }

        /// <summary>
        /// Detects if property exists on object.
        /// </summary>
        /// <param name="obj">object.</param>
        /// <param name="name">name of the property.</param>
        /// <returns>true if found.</returns>
        public static bool ContainsProperty(object obj, string name)
        {
            if (obj == null)
            {
                return false;
            }

            if (obj is IDictionary<string, object> dict)
            {
                return dict.ContainsKey(name);
            }

            if (obj is JObject jobj)
            {
                return jobj.ContainsKey(name);
            }

            return obj.GetType().GetProperties(BindingFlags.Instance | BindingFlags.Public).Any(property => property.Name.Equals(name, StringComparison.OrdinalIgnoreCase));
        }

        /// <summary>
        /// Clone an object.
        /// </summary>
        /// <typeparam name="T">Type to clone.</typeparam>
        /// <param name="obj">The object.</param>
        /// <returns>The object as Json.</returns>
        public static T Clone<T>(T obj)
        {
            return JsonConvert.DeserializeObject<T>(JsonConvert.SerializeObject(obj, _cloneSettings), _cloneSettings);
        }

        /// <summary>
        /// Equivalent to javascripts ObjectPath.Assign, creates a new object from startObject overlaying any non-null values from the overlay object.
        /// </summary>
        /// <typeparam name="T">The object type.</typeparam>
        /// <param name="startObject">Intial object.</param>
        /// <param name="overlayObject">Overlay object.</param>
        /// <returns>merged object.</returns>
        public static T Merge<T>(T startObject, T overlayObject)
            where T : class
        {
            return Assign<T>(startObject, overlayObject);
        }

        /// <summary>
        /// Equivalent to javascripts ObjectPath.Assign, creates a new object from startObject overlaying any non-null values from the overlay object.
        /// </summary>
        /// <typeparam name="T">The target type.</typeparam>
        /// <param name="startObject">intial object of any type.</param>
        /// <param name="overlayObject">overlay object of any type.</param>
        /// <returns>merged object.</returns>
        public static T Assign<T>(object startObject, object overlayObject)
            where T : class
        {
            return (T)Assign(startObject, overlayObject, typeof(T));
        }

        /// <summary>
        /// Equivalent to javascripts ObjectPath.Assign, creates a new object from startObject overlaying any non-null values from the overlay object.
        /// </summary>
        /// <param name="startObject">intial object of any type.</param>
        /// <param name="overlayObject">overlay object of any type.</param>
        /// <param name="type">type to output.</param>
        /// <returns>merged object.</returns>
        public static object Assign(object startObject, object overlayObject, Type type)
        {
            if (startObject != null && overlayObject != null)
            {
                // make a deep clone JObject of the startObject
                var jsMerged = startObject is JObject ? (JObject)(startObject as JObject).DeepClone() : JObject.FromObject(startObject);

                // get a JObject of the overlay object
                var jsOverlay = overlayObject is JObject ? overlayObject as JObject : JObject.FromObject(overlayObject);

                jsMerged.Merge(jsOverlay, new JsonMergeSettings
                {
                    MergeArrayHandling = MergeArrayHandling.Replace,
                    MergeNullValueHandling = MergeNullValueHandling.Ignore,
                });

                return jsMerged.ToObject(type);
            }

            var singleObject = startObject ?? overlayObject;
            if (singleObject != null)
            {
                if (singleObject is JObject)
                {
                    return (singleObject as JObject).ToObject(type);
                }

                return singleObject;
            }

            return (Type)Activator.CreateInstance(type);
        }

        /// <summary>
        /// Convert a generic object to a typed object.
        /// </summary>
        /// <typeparam name="T">type to convert to.</typeparam>
        /// <param name="val">value to convert.</param>
        /// <returns>converted value.</returns>
        public static T MapValueTo<T>(object val)
        {
            if (val is JValue jValue)
            {
                return jValue.ToObject();
            }

            if (typeof(T) == typeof(object))
            {
                return (T)val;
            }

            if (val is JArray jArray)
            {
                return jArray.ToObject();
            }

            if (val is JObject jObject)
            {
                return jObject.ToObject();
            }

            if (typeof(T) == typeof(JObject))
            {
                return (T)(object)JObject.FromObject(val);
            }

            if (typeof(T) == typeof(JArray))
            {
                return (T)(object)JArray.FromObject(val);
            }

            if (typeof(T) == typeof(JValue))
            {
                return (T)(object)JValue.FromObject(val);
            }

            if (val is T)
            {
                return (T)val;
            }

            return JsonConvert.DeserializeObject<T>(JsonConvert.SerializeObject(val, _expressionCaseSettings));
        }

        /// <summary>
        /// Given an root object and property path, resolve to a constant if eval = true or a constant path otherwise.  
        /// conversation[user.name][user.age] => ['conversation', 'joe', 32].
        /// </summary>
        /// <param name="obj">root object.</param>
        /// <param name="propertyPath">property path to resolve.</param>
        /// <param name="segments">Path segments.</param>
        /// <param name="eval">True to evaluate resulting segments.</param>
        /// <returns>True if it was able to resolve all nested references.</returns>
        public static bool TryResolvePath(object obj, string propertyPath, out List<object> segments, bool eval = false)
        {
            var soFar = new List<object>();
            segments = soFar;
            var first = propertyPath.Length > 0 ? propertyPath[0] : ' ';
            if (first == '\'' || first == '"')
            {
                if (!propertyPath.EndsWith(first.ToString(), StringComparison.Ordinal))
                {
                    return false;
                }

                soFar.Add(propertyPath.Substring(1, propertyPath.Length - 2));
            }
            else if (int.TryParse(propertyPath, out var number))
            {
                soFar.Add(number);
            }
            else
            {
                var start = 0;
                int i;

                // Emit current fragment
                void Emit()
                {
                    var segment = propertyPath.Substring(start, i - start);
                    if (!string.IsNullOrEmpty(segment))
                    {
                        soFar.Add(segment);
                    }

                    start = i + 1;
                }

                // Scan path evaluating as we go
                for (i = 0; i < propertyPath.Length; ++i)
                {
                    var ch = propertyPath[i];
                    if (ch == '.' || ch == '[')
                    {
                        Emit();
                    }

                    if (ch == '[')
                    {
                        // Bracket expression
                        var nesting = 1;
                        while (++i < propertyPath.Length)
                        {
                            ch = propertyPath[i];
                            if (ch == '[')
                            {
                                ++nesting;
                            }
                            else if (ch == ']')
                            {
                                --nesting;
                                if (nesting == 0)
                                {
                                    break;
                                }
                            }
                        }

                        if (nesting > 0)
                        {
                            // Unbalanced brackets
                            return false;
                        }

                        var expr = propertyPath.Substring(start, i - start);
                        start = i + 1;
                        if (!TryResolvePath(obj, expr, out var indexer, true) || indexer.Count != 1)
                        {
                            // Could not resolve bracket expression
                            return false;
                        }

                        var result = MapValueTo<string>(indexer.First());
                        if (int.TryParse(result, out var index))
                        {
                            soFar.Add(index);
                        }
                        else
                        {
                            soFar.Add(result);
                        }
                    }
                }

                Emit();

                if (eval)
                {
                    if (!ResolveSegments(obj, soFar, out var result))
                    {
                        return false;
                    }

                    soFar.Clear();
                    soFar.Add(MapValueTo<string>(result));
                }
            }

            return true;
        }

        private static bool ResolveSegment(ref dynamic current, object segment)
        {
            if (current != null)
            {
                if (segment is int index)
                {
                    current = current[index];
                }
                else
                {
                    current = GetObjectProperty(current, segment as string);
                }

                // TODO: We should make it so that a value can be present, but be null.
                // This interprets any null value as not being present.
                return current != null;
            }

            return false;
        }

        private static bool ResolveSegments(dynamic current, List<object> segments, out dynamic result)
        {
            result = current;
            foreach (var segment in segments)
            {
                if (!ResolveSegment(ref result, segment))
                {
                    return false;
                }
            }

            return true;
        }

        /// <summary>
        /// Get a property or array element from an object.
        /// </summary>
        /// <param name="obj">object.</param>
        /// <param name="property">property or array segment to get relative to the object.</param>
        /// <returns>the value or null if not found.</returns>
        private static object GetObjectProperty(object obj, string property)
        {
            if (obj == null)
            {
                return null;
            }

            if (obj is IDictionary<string, object> dict)
            {
                var key = dict.Keys.FirstOrDefault(key => string.Equals(key, property, StringComparison.OrdinalIgnoreCase))?? property;
                if (dict.TryGetValue(key, out var value))
                {
                    return value;
                }

                return null;
            }

            if (obj is JObject jobj)
            {
                jobj.TryGetValue(property, StringComparison.InvariantCultureIgnoreCase, out var value);
                return value;
            }

            if (obj is JValue jval)
            {
                // in order to make things like "this.value.Length" work, when "this.value" is a string.
                return GetObjectProperty(jval.Value, property);
            }

            var prop = obj.GetType().GetProperties().Where(p => string.Equals(p.Name, property, StringComparison.OrdinalIgnoreCase)).FirstOrDefault();
            if (prop != null)
            {
                return prop.GetValue(obj);
            }

            return null;
        }

        /// <summary>
        /// Given an object, set a property or array element on it with a value.
        /// </summary>
        /// <param name="obj">object to modify.</param>
        /// <param name="segment">property or array segment to put the value in.</param>
        /// <param name="value">value to store.</param>
        /// <param name="json">if true, value will be normalized to JSON primitive objects.</param>
        private static void SetObjectSegment(object obj, object segment, object value, bool json = true)
        {
            object val;

            val = GetNormalizedValue(value, json);
            if (segment is int index)
            {
                var jar = obj as JArray;
                for (var i = jar.Count; i <= index; i++)
                {
                    jar.Add(null);
                }

                jar[index] = JToken.FromObject(val);
                return;
            }

            var property = segment as string;
            if (obj is IDictionary<string, object> dict)
            {
                var key = dict.Keys.FirstOrDefault(k => string.Equals(k, property, StringComparison.OrdinalIgnoreCase))?? property;
                dict[key] = val;
                return;
            }

            if (obj is JObject jobj)
            {
                var key = jobj.Properties().FirstOrDefault(p => string.Equals(p.Name, property, StringComparison.OrdinalIgnoreCase))?.Name ?? property;
                jobj[key] = val != null ? JToken.FromObject(val) : null;
                return;
            }

            var prop = obj.GetType().GetProperty(property);
            if (prop != null)
            {
                prop.SetValue(obj, val);
            }
        }

        /// <summary>
        /// Normalize value as json objects.
        /// </summary>
        /// <param name="value">value to normalize.</param>
        /// <param name="json">normalize as json objects.</param>
        /// <returns>normalized value.</returns>
        private static object GetNormalizedValue(object value, bool json)
        {
            object val;
            if (json)
            {
                if (value is JToken || value is JObject || value is JArray)
                {
                    val = Clone((JToken)value);
                }
                else if (value == null)
                {
                    val = null;
                }
                else if (value is string || value is byte || value is bool ||
                         value is DateTime || value is DateTimeOffset ||
                         value is short || value is int || value is long ||
                         value is ushort || value is uint || value is ulong ||
                         value is decimal || value is float || value is double)
                {
                    val = JValue.FromObject(value);
                }
                else
                {
                    val = JsonConvert.DeserializeObject(JsonConvert.SerializeObject(value, _expressionCaseSettings));
                }
            }
            else
            {
                val = value;
            }

            return val;
        }
    }
}

---- Semantic diagnostics *before* transformation ----

---- Semantic diagnostics *after* transformation ----
/home/vsts/work/1/s/libraries/Microsoft.Bot.Builder.Dialogs/ObjectPath.cs(428,31): error CS0411: The type arguments for method 'JToken.ToObject<T>()' cannot be inferred from the usage. Try specifying the type arguments explicitly.,/home/vsts/work/1/s/libraries/Microsoft.Bot.Builder.Dialogs/ObjectPath.cs(438,31): error CS0411: The type arguments for method 'JToken.ToObject<T>()' cannot be inferred from the usage. Try specifying the type arguments explicitly.,/home/vsts/work/1/s/libraries/Microsoft.Bot.Builder.Dialogs/ObjectPath.cs(443,32): error CS0411: The type arguments for method 'JToken.ToObject<T>()' cannot be inferred from the usage. Try specifying the type arguments explicitly.
######################################################################


