diff --git a/Kooboo.Api/ApiManager.cs b/Kooboo.Api/ApiManager.cs
index 881b749e..eb7443fb 100644
--- a/Kooboo.Api/ApiManager.cs
+++ b/Kooboo.Api/ApiManager.cs
@@ -189,8 +189,7 @@ namespace Kooboo.Api
 
             if (apiobject is ISecureApi)
             {
-                var secureobj = apiobject as ISecureApi;
-                if (secureobj != null)
+                if (apiobject is ISecureApi secureobj)
                 {
                     return secureobj.AccessCheck(command, context);
                 }
@@ -236,7 +235,7 @@ namespace Kooboo.Api
                         values[item] = value;
                     }
 
-                    if (values.Count() == 0)
+                    if (!values.Any())
                     {
                         callback.Invoke(Hardcoded.GetValue("required model type not provided", call.Context) + ": " + method.RequireModelType.Name);
                         IsSuccess = false;
@@ -262,7 +261,7 @@ namespace Kooboo.Api
         public static bool ValideParameters(ApiMethod method, ApiCall call, Action<string> callback)
         {
             bool IsSuccess = true;
-            if (method.RequireParas != null && method.RequireParas.Count() > 0)
+            if (method.RequireParas != null && method.RequireParas.Any())
             {
                 foreach (var item in method.RequireParas)
                 {
diff --git a/Kooboo.Api/ApiProvider.cs b/Kooboo.Api/ApiProvider.cs
index 7bc45e97..07d3065d 100644
--- a/Kooboo.Api/ApiProvider.cs
+++ b/Kooboo.Api/ApiProvider.cs
@@ -31,8 +31,7 @@ namespace Kooboo.Api
 
         public void Set(Type apitype)
         {
-            var instance = Activator.CreateInstance(apitype) as IApi;
-            if (instance != null)
+            if (Activator.CreateInstance(apitype) is IApi instance)
             {   
                 List[instance.ModelName] = instance;
             }    
diff --git a/Kooboo.Api/ApiResponse/MetaResponse.cs b/Kooboo.Api/ApiResponse/MetaResponse.cs
index 2a7cf782..0423993a 100644
--- a/Kooboo.Api/ApiResponse/MetaResponse.cs
+++ b/Kooboo.Api/ApiResponse/MetaResponse.cs
@@ -94,7 +94,7 @@ namespace Kooboo.Api.ApiResponse
 
         public void AppendCookie(string CookieName, string CookieValue, int days =30)
         {
-            var oldcookie = AppendedCookies.Where(o => o.Name == CookieName).FirstOrDefault();
+            var oldcookie = AppendedCookies.FirstOrDefault(o => o.Name == CookieName);
 
             if (oldcookie != null)
             {
diff --git a/Kooboo.Api/Methods/ApiMethodManager.cs b/Kooboo.Api/Methods/ApiMethodManager.cs
index b7798744..cfdc8aa2 100644
--- a/Kooboo.Api/Methods/ApiMethodManager.cs
+++ b/Kooboo.Api/Methods/ApiMethodManager.cs
@@ -354,7 +354,7 @@ namespace Kooboo.Api.Methods
                     values[item] = value;
                 }
 
-                if (values.Count() >= 0)
+                if (values.Count >= 0)
                 {
                     string dictjson = Lib.Helper.JsonHelper.Serialize(values);
                     try
diff --git a/Kooboo.Api/MultilingualService.cs b/Kooboo.Api/MultilingualService.cs
index 5a38c257..193146df 100644
--- a/Kooboo.Api/MultilingualService.cs
+++ b/Kooboo.Api/MultilingualService.cs
@@ -18,7 +18,7 @@ namespace Kooboo.Api
             }
 
             string lang = null;
-            if (context != null && context.User != null && !string.IsNullOrWhiteSpace(context.User.Language))
+            if (context?.User != null && !string.IsNullOrWhiteSpace(context.User.Language))
             {
                 lang = context.User.Language;
             }
diff --git a/Kooboo.App.Standard/UpgradeHelper.cs b/Kooboo.App.Standard/UpgradeHelper.cs
index 684d2607..e6a4d9db 100644
--- a/Kooboo.App.Standard/UpgradeHelper.cs
+++ b/Kooboo.App.Standard/UpgradeHelper.cs
@@ -35,7 +35,7 @@ namespace Kooboo.App
         }
         public static void Log(string content)
         {
-            var log = string.Format("{0}-----{1}{2}", DateTime.Now.ToString(), content, Environment.NewLine);
+            var log = $"{DateTime.Now.ToString()}-----{content}{Environment.NewLine}";
             Lib.Helper.IOHelper.EnsureFileDirectoryExists(UpgradeLogPath);
             System.IO.File.AppendAllText(UpgradeLogPath, log);
         }
@@ -57,7 +57,7 @@ namespace Kooboo.App
             catch (Exception ex)
             {
             }
-            Log(string.Format("new version:{0},oldersion:{1}", version, AppSettings.Version));
+            Log($"new version:{version},oldersion:{AppSettings.Version}");
             return version > AppSettings.Version;
         }
         public static void Download()
diff --git a/Kooboo.App.Upgrade/CmdHelper.cs b/Kooboo.App.Upgrade/CmdHelper.cs
index 98b18e96..31729492 100644
--- a/Kooboo.App.Upgrade/CmdHelper.cs
+++ b/Kooboo.App.Upgrade/CmdHelper.cs
@@ -11,7 +11,7 @@ namespace Kooboo.App.Upgrade
     {
         public static void StartDotnetApp(string path)
         {
-            var cmd = string.Format("dotnet {0}", path);
+            var cmd = $"dotnet {path}";
             Excute(cmd);
         }
         public static string Excute(string cmd, bool waitForExit)
diff --git a/Kooboo.App.Upgrade/KoobooUpgrade.cs b/Kooboo.App.Upgrade/KoobooUpgrade.cs
index 0b447531..27cde1d6 100644
--- a/Kooboo.App.Upgrade/KoobooUpgrade.cs
+++ b/Kooboo.App.Upgrade/KoobooUpgrade.cs
@@ -81,7 +81,7 @@ namespace Kooboo.App.Upgrade
 
         public static void Log(string content)
         {
-            var log = string.Format("{0}-----{1}{2}", DateTime.Now.ToString(), content, Environment.NewLine);
+            var log = $"{DateTime.Now.ToString()}-----{content}{Environment.NewLine}";
             var fileInfo = new FileInfo(UpgradeLogPath);
             if (!Directory.Exists(fileInfo.DirectoryName))
             {
@@ -147,7 +147,7 @@ namespace Kooboo.App.Upgrade
             foreach (var process in dotnetProcesses)
             {
                 var processId = process.Id;
-                var cmd = string.Format("ps -ef|grep {0}", processId);
+                var cmd = $"ps -ef|grep {processId}";
                 Log(processId.ToString());
                 var str = CmdHelper.Excute(cmd, false);
                 if (str.IndexOf(KoobooAppName, StringComparison.OrdinalIgnoreCase)> -1)
@@ -177,7 +177,7 @@ namespace Kooboo.App.Upgrade
             foreach (var process in dotnetProcesses)
             {
                 var processId = process.Id;
-                var cmd = string.Format("ps -ef|grep {0}", processId);
+                var cmd = $"ps -ef|grep {processId}";
 
                 var str = CmdHelper.Excute(cmd, false);
                 if (str.IndexOf(KoobooAppName, StringComparison.OrdinalIgnoreCase) == -1) return true;
@@ -245,7 +245,7 @@ namespace Kooboo.App.Upgrade
                     }
                     catch (Exception ex)
                     {
-                        Log(string.Format("delete dir execption:{0}{1}", dir, ex.Message));
+                        Log($"delete dir execption:{dir}{ex.Message}");
                     }
                 }
             }
@@ -263,7 +263,7 @@ namespace Kooboo.App.Upgrade
                 }
                 catch (Exception ex)
                 {
-                    Log(string.Format("delete lang file execption:{0}{1}", path, ex.Message));
+                    Log($"delete lang file execption:{path}{ex.Message}");
                 }
             }
         }
@@ -287,7 +287,7 @@ namespace Kooboo.App.Upgrade
                     }
                     catch (Exception ex)
                     {
-                        Log(string.Format("delete file execption:{0}{1}", file, ex.Message));
+                        Log($"delete file execption:{file}{ex.Message}");
                     }
                 }
             }
@@ -361,7 +361,7 @@ namespace Kooboo.App.Upgrade
             }
             catch(Exception ex)
             {
-                Log(string.Format("copy dir execption:{0}", ex.Message));
+                Log($"copy dir execption:{ex.Message}");
             }
         }
 
@@ -381,7 +381,7 @@ namespace Kooboo.App.Upgrade
                 }
                 catch (Exception ex)
                 {
-                    Log(string.Format("copy lang file execption:{0}", ex.Message));
+                    Log($"copy lang file execption:{ex.Message}");
                 }
             }
         }
@@ -407,7 +407,7 @@ namespace Kooboo.App.Upgrade
                     }
                     catch (Exception ex)
                     {
-                        Log(string.Format("copy file execption:{0}{1}", file, ex.Message));
+                        Log($"copy file execption:{file}{ex.Message}");
                     }
                 }
             }
diff --git a/Kooboo.App/App.xaml.cs b/Kooboo.App/App.xaml.cs
index 74805feb..ab060d95 100644
--- a/Kooboo.App/App.xaml.cs
+++ b/Kooboo.App/App.xaml.cs
@@ -30,12 +30,11 @@ namespace Kooboo.App
 
         private void BtnClose_Click(object sender, RoutedEventArgs e)
         {
-            var btn = sender as Button;
-            if (btn != null && e.Source == btn)
+            if (sender is Button btn && e.Source == btn)
             {
                 var window = Window.GetWindow(btn);
-                var mainWindow = window as Kooboo.App.MainWindow;
-                if (mainWindow != null)
+
+                if (window is Kooboo.App.MainWindow mainWindow)
                 {
                     //kooboo will not close when click close btn.
                     //it will be put in system tray;
@@ -54,8 +53,8 @@ namespace Kooboo.App
                 ["host"] = new HostPage(),
                 ["upgrade"] = new UpgradePage()
             };
-            var btn = sender as RadioButton;
-            if (btn != null && e.Source == btn)
+
+            if (sender is RadioButton btn && e.Source == btn)
             {
                 Page page;
                 var wind = Window.GetWindow(btn);
diff --git a/Kooboo.App/Commands/TaskbarClickCommand.cs b/Kooboo.App/Commands/TaskbarClickCommand.cs
index 6c9b26d2..a5170848 100644
--- a/Kooboo.App/Commands/TaskbarClickCommand.cs
+++ b/Kooboo.App/Commands/TaskbarClickCommand.cs
@@ -16,7 +16,7 @@ namespace Kooboo.App.Commands
         public override void Execute(object parameter)
         {
             TaskbarIcon icon = parameter as TaskbarIcon;
-            if (icon != null && icon.Parent != null)
+            if (icon?.Parent != null)
             {
                 icon.Parent.Visibility = Visibility.Visible;
                 icon.Parent.Focus();
@@ -28,7 +28,7 @@ namespace Kooboo.App.Commands
         {
             TaskbarIcon icon = parameter as TaskbarIcon;
 
-            return icon != null && icon.Parent != null && (icon.Parent.Visibility == Visibility.Hidden || icon.Parent.Visibility == Visibility.Collapsed);
+            return icon?.Parent != null && (icon.Parent.Visibility == Visibility.Hidden || icon.Parent.Visibility == Visibility.Collapsed);
         }
     }
 }
diff --git a/Kooboo.App/SystemTray/RoutedEventHelper.cs b/Kooboo.App/SystemTray/RoutedEventHelper.cs
index 7c0aa372..4a6bdbdb 100644
--- a/Kooboo.App/SystemTray/RoutedEventHelper.cs
+++ b/Kooboo.App/SystemTray/RoutedEventHelper.cs
@@ -37,18 +37,14 @@ namespace Kooboo.App.SystemTray
         /// <param name="handler">Event handler to be added</param>
         internal static void AddHandler(DependencyObject element, RoutedEvent routedEvent, Delegate handler)
         {
-            UIElement uie = element as UIElement;
-            if (uie != null)
+            if (element is UIElement uie)
             {
                 uie.AddHandler(routedEvent, handler);
             }
             else
             {
                 ContentElement ce = element as ContentElement;
-                if (ce != null)
-                {
-                    ce.AddHandler(routedEvent, handler);
-                }
+                ce?.AddHandler(routedEvent, handler);
             }
         }
 
@@ -61,18 +57,14 @@ namespace Kooboo.App.SystemTray
         /// <param name="handler">Event handler to be removed</param>
         internal static void RemoveHandler(DependencyObject element, RoutedEvent routedEvent, Delegate handler)
         {
-            UIElement uie = element as UIElement;
-            if (uie != null)
+            if (element is UIElement uie)
             {
                 uie.RemoveHandler(routedEvent, handler);
             }
             else
             {
                 ContentElement ce = element as ContentElement;
-                if (ce != null)
-                {
-                    ce.RemoveHandler(routedEvent, handler);
-                }
+                ce?.RemoveHandler(routedEvent, handler);
             }
         }
 
diff --git a/Kooboo.App/SystemTray/Util.cs b/Kooboo.App/SystemTray/Util.cs
index 949ea0ce..6f0f5f56 100644
--- a/Kooboo.App/SystemTray/Util.cs
+++ b/Kooboo.App/SystemTray/Util.cs
@@ -235,8 +235,7 @@ namespace Kooboo.App.SystemTray
         {
             if (command == null) return;
 
-            RoutedCommand rc = command as RoutedCommand;
-            if (rc != null)
+            if (command is RoutedCommand rc)
             {
                 //routed commands work on a target
                 if (rc.CanExecute(commandParameter, target)) rc.Execute(commandParameter, target);
diff --git a/Kooboo.App/UpgradePage.xaml.cs b/Kooboo.App/UpgradePage.xaml.cs
index 6683a478..2709bd4d 100644
--- a/Kooboo.App/UpgradePage.xaml.cs
+++ b/Kooboo.App/UpgradePage.xaml.cs
@@ -101,12 +101,12 @@ namespace Kooboo.App
                 {
                     update.Visibility = Visibility.Visible;
                     update.Click += Upgrade_Click;
-                    update.Content = Data.Language.Hardcoded.GetValue("Upgrade") +string.Format("({0})",newversion.ToString());
+                    update.Content = Data.Language.Hardcoded.GetValue("Upgrade") +$"({newversion.ToString()})";
                 }
                 else
                 {
                     update.Visibility = Visibility.Hidden;
-                    currentVersion.Text = string.Format("{0}", version);
+                    currentVersion.Text = $"{version}";
                 }
             };
             await this.Dispatcher.BeginInvoke(action);
@@ -173,7 +173,7 @@ namespace Kooboo.App
         {
             int percentage = e.ProgressPercentage;
 
-            update.Content = Data.Language.Hardcoded.GetValue("Downloading") + string.Format("({0}%)",percentage);
+            update.Content = Data.Language.Hardcoded.GetValue("Downloading") + $"({percentage}%)";
         }
 
         private void HypeLink_OnClick(object sender, RoutedEventArgs e)
diff --git a/Kooboo.Data/Cache/MultilingualRender.cs b/Kooboo.Data/Cache/MultilingualRender.cs
index 0404b479..73feb560 100644
--- a/Kooboo.Data/Cache/MultilingualRender.cs
+++ b/Kooboo.Data/Cache/MultilingualRender.cs
@@ -127,7 +127,7 @@ namespace Kooboo.Data.Cache
                     var dic = JsonHelper.DeserializeJObject(json)["langs"][lang]
                         .ToObject<Dictionary<string, string>>()
                         .Where(w => !string.IsNullOrEmpty(w.Value));
-                    if (dic == null || dic.Count() == 0) continue;
+                    if (dic == null || !dic.Any()) continue;
                     var properties = string.Join(",", dic.Select(s => $"'{s.Key}':'{s.Value}'"));
 
                     sb.AppendLine($@"
diff --git a/Kooboo.Data/Context/RequestManager.cs b/Kooboo.Data/Context/RequestManager.cs
index 2458dc3e..fa5a7bf9 100644
--- a/Kooboo.Data/Context/RequestManager.cs
+++ b/Kooboo.Data/Context/RequestManager.cs
@@ -72,14 +72,12 @@ namespace Kooboo.Data.Context
                     {
                         var converted = Lib.Helper.JsonHelper.DeserializeObject(body);
 
-                        if (converted is JArray)
+                        if (converted is JArray array)
                         {
-                            var array = (JArray)converted;
                             foreach (var item in array)
                             {
-                                if (item is JObject)
+                                if (item is JObject itemobject)
                                 {
-                                    var itemobject = (JObject)item;
                                     if (itemobject != null)
                                     {
                                         foreach (var itemproperty in itemobject.Properties())
@@ -93,10 +91,8 @@ namespace Kooboo.Data.Context
                                 }
                             }
                         }
-                        else if (converted is JObject)
+                        else if (converted is JObject data)
                         {
-                            var data = (JObject)converted;
-
                             if (data != null)
                             {
                                 foreach (var item in data.Properties())
diff --git a/Kooboo.Data/Context/WebServerContext.cs b/Kooboo.Data/Context/WebServerContext.cs
index 8747ca2a..52775f84 100644
--- a/Kooboo.Data/Context/WebServerContext.cs
+++ b/Kooboo.Data/Context/WebServerContext.cs
@@ -481,7 +481,7 @@ namespace Kooboo.Data.Context
             if (request.Port > 0)
             {
                 var all = GlobalDb.Bindings.GetByDomain(default(Guid));
-                if (all != null && all.Count() > 0)
+                if (all != null && all.Any())
                 {
                     foreach (var item in all)
                     {
diff --git a/Kooboo.Data/Extensions/JobExtension.cs b/Kooboo.Data/Extensions/JobExtension.cs
index d1162787..d21f4dfe 100644
--- a/Kooboo.Data/Extensions/JobExtension.cs
+++ b/Kooboo.Data/Extensions/JobExtension.cs
@@ -44,7 +44,7 @@ namespace Kooboo.Data.Extensions
 
             foreach (var item in jobs.GetItems())
             {
-                if (item !=null && item.Item !=null && item.Item.WebSiteId == WebSiteId)
+                if (item?.Item != null && item.Item.WebSiteId == WebSiteId)
                 {
                     sitejobs.Add(item);
                 }
diff --git a/Kooboo.Data/GeoLocation/IPLocation.cs b/Kooboo.Data/GeoLocation/IPLocation.cs
index 711e0783..f3e75cf6 100644
--- a/Kooboo.Data/GeoLocation/IPLocation.cs
+++ b/Kooboo.Data/GeoLocation/IPLocation.cs
@@ -257,7 +257,7 @@ namespace Kooboo.Data.GeoLocation
             if (IPCountryStore != null)
             {
                 var last = IPCountryStore.Where(o => o.IpStart <= intip).OrderByDescending().Take(1);
-                if (last != null && last.Count() >= 1)
+                if (last != null && last.Any())
                 {
                     if (last[0].IpEnd >= intip)
                     {
@@ -275,7 +275,7 @@ namespace Kooboo.Data.GeoLocation
             if (IpCityStore != null)
             {
                 var last = IpCityStore.Where(o => o.IpStart <= intip).OrderByDescending().Take(1);
-                if (last != null && last.Count() >= 1)
+                if (last != null && last.Any())
                 {
                     if (last[0].IpEnd >= intip)
                     {
diff --git a/Kooboo.Data/Helper/ChromeScreenShotHelper.cs b/Kooboo.Data/Helper/ChromeScreenShotHelper.cs
index 832dd29b..ca5f3514 100644
--- a/Kooboo.Data/Helper/ChromeScreenShotHelper.cs
+++ b/Kooboo.Data/Helper/ChromeScreenShotHelper.cs
@@ -22,7 +22,7 @@ namespace Kooboo.Data.Helper
         public static string GetScreenShot(string url, int width = 600, int height =450)
         {
             url = System.Net.WebUtility.UrlEncode(url);
-            var nodeScreenShotUrl = string.Format("{0}?url={1}&width={2}&height={3}", Data.AppSettings.ScreenShotUrl, url, width, height);
+            var nodeScreenShotUrl = $"{Data.AppSettings.ScreenShotUrl}?url={url}&width={width}&height={height}";
             try
             {
                 var base64Image = HttpHelper.Get<string>(nodeScreenShotUrl);
diff --git a/Kooboo.Data/Helper/Domain/DomainParser.cs b/Kooboo.Data/Helper/Domain/DomainParser.cs
index 78064cf1..f739d06b 100644
--- a/Kooboo.Data/Helper/Domain/DomainParser.cs
+++ b/Kooboo.Data/Helper/Domain/DomainParser.cs
@@ -119,7 +119,7 @@ namespace Nager.PublicSuffix
                 .Reverse()
                 .ToList();
 
-            if (parts.Count == 0 || parts.Any(x => x.Equals(string.Empty)))
+            if (parts.Count == 0 || parts.Any(x => string.IsNullOrEmpty(x)))
             {
                 return null;
             }
diff --git a/Kooboo.Data/Language/LanguageProvider.cs b/Kooboo.Data/Language/LanguageProvider.cs
index c0104180..62db8e17 100644
--- a/Kooboo.Data/Language/LanguageProvider.cs
+++ b/Kooboo.Data/Language/LanguageProvider.cs
@@ -36,7 +36,7 @@ namespace Kooboo.Data.Language
         public static string GetValue(string key, RenderContext context)
         {
             string langcode = null;
-            if (context != null && context.User != null && !string.IsNullOrWhiteSpace(context.User.Language))
+            if (context?.User != null && !string.IsNullOrWhiteSpace(context.User.Language))
             {
                 langcode = context.User.Language;
             }
@@ -127,7 +127,7 @@ namespace Kooboo.Data.Language
             lock (_locker)
             {
                 var langcontent = GetLangValues(LangCode);
-                if (langcontent.Count() == 0)
+                if (!langcontent.Any())
                 {
                     langtext[LangCode] = Values;
                 }
diff --git a/Kooboo.Data/Language/LanguageSetting.cs b/Kooboo.Data/Language/LanguageSetting.cs
index 6e914cf4..c888efbb 100644
--- a/Kooboo.Data/Language/LanguageSetting.cs
+++ b/Kooboo.Data/Language/LanguageSetting.cs
@@ -237,7 +237,7 @@ namespace Kooboo.Data.Language
             {
                 var allfiles = System.IO.Directory.GetFiles(langpath, "*.xml");
 
-                if (allfiles != null && allfiles.Count() > 0)
+                if (allfiles != null && allfiles.Any())
                 {
                     foreach (var item in allfiles)
                     {
@@ -335,7 +335,7 @@ namespace Kooboo.Data.Language
         {
             var _cmslang = new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase);
 
-            if (LangFiles.Count() > 0)
+            if (LangFiles.Any())
             {
                 foreach (var item in LangFiles)
                 {
diff --git a/Kooboo.Data/Language/LanguageTaskHelper.cs b/Kooboo.Data/Language/LanguageTaskHelper.cs
index fa79deea..640bd30e 100644
--- a/Kooboo.Data/Language/LanguageTaskHelper.cs
+++ b/Kooboo.Data/Language/LanguageTaskHelper.cs
@@ -31,9 +31,7 @@ namespace Kooboo.Data.Language
             {  
                 if (nextnode.nodeType == enumNodeType.TEXT)
                 {
-                    var textndoe = nextnode as Kooboo.Dom.Text;
-
-                    if (textndoe != null && MultiLingualHelper.IsMultilingualKey(textndoe.data))
+                    if (nextnode is Kooboo.Dom.Text textndoe && MultiLingualHelper.IsMultilingualKey(textndoe.data))
                     {
                         string key = textndoe.data;
 
@@ -188,7 +186,7 @@ namespace Kooboo.Data.Language
 
         private static void OptimizeTask(List<LanguageTask> task)
         {
-            int count = task.Count();
+            int count = task.Count;
             bool IsPreviousContent = false;
             int lastContentI = -1;
             List<int> ToRemoved = new List<int>();
diff --git a/Kooboo.Data/Models/WebSite.cs b/Kooboo.Data/Models/WebSite.cs
index 340192d7..7a2e863e 100644
--- a/Kooboo.Data/Models/WebSite.cs
+++ b/Kooboo.Data/Models/WebSite.cs
@@ -111,7 +111,7 @@ namespace Kooboo.Data.Models
                     }
                 }
 
-                if (_culture.Count() == 0)
+                if (!_culture.Any())
                 {
                     string defaultlang = Kooboo.Data.Language.LanguageSetting.SystemLangCode;
 
diff --git a/Kooboo.Data/Repository/BindingRepository.cs b/Kooboo.Data/Repository/BindingRepository.cs
index 3efd3469..9645cd16 100644
--- a/Kooboo.Data/Repository/BindingRepository.cs
+++ b/Kooboo.Data/Repository/BindingRepository.cs
@@ -207,7 +207,7 @@ namespace Kooboo.Data.Repository
                 }
             }
 
-            if (result.Count() == 0 && allresults.Count() > 0 && string.IsNullOrEmpty(domainresult.SubDomain))
+            if (!result.Any() && allresults.Any()&& string.IsNullOrEmpty(domainresult.SubDomain))
             {
                 foreach (var item in allresults)
                 {
diff --git a/Kooboo.Data/Repository/WebSiteRepository.cs b/Kooboo.Data/Repository/WebSiteRepository.cs
index 46eb6fd3..81bba7dd 100644
--- a/Kooboo.Data/Repository/WebSiteRepository.cs
+++ b/Kooboo.Data/Repository/WebSiteRepository.cs
@@ -151,7 +151,7 @@ namespace Kooboo.Data.Repository
         {
             string LowerCaseSiteName = WebSiteName.ToLower();
              
-            return !this.AllSites.Values.ToList().Where(o => o.OrganizationId == OrganizationId &&  o.Name.ToLower() == LowerCaseSiteName).Any();
+            return !this.AllSites.Values.ToList().Any(o => o.OrganizationId == OrganizationId &&  o.Name.ToLower() == LowerCaseSiteName);
         }
          
         public List<WebSite> ListByOrg(Guid orgId)
diff --git a/Kooboo.Data/Server/ServerHandler.cs b/Kooboo.Data/Server/ServerHandler.cs
index 98020246..375eafc3 100644
--- a/Kooboo.Data/Server/ServerHandler.cs
+++ b/Kooboo.Data/Server/ServerHandler.cs
@@ -399,7 +399,7 @@ namespace Kooboo.Data.Server
 
                     var host = renderContext.Request.Port == 80 || renderContext.Request.Port == 443
                         ? renderContext.Request.Host
-                        : string.Format("{0}:{1}", renderContext.Request.Host, renderContext.Request.Port);
+                        : $"{renderContext.Request.Host}:{renderContext.Request.Port}";
                     string BaseUrl = renderContext.Request.Scheme + "://" + host + renderContext.Request.Path;
                     var newUrl = UrlHelper.Combine(BaseUrl, location);
                     if (response.StatusCode != 200)
diff --git a/Kooboo.Data/Service/DefaultPasswordHash.cs b/Kooboo.Data/Service/DefaultPasswordHash.cs
index 1b936883..bfa52d31 100644
--- a/Kooboo.Data/Service/DefaultPasswordHash.cs
+++ b/Kooboo.Data/Service/DefaultPasswordHash.cs
@@ -42,7 +42,7 @@ namespace Kooboo.Data.Service
             var base64Hash = Convert.ToBase64String(hashBytes);
 
             // Format hash with extra information
-            return string.Format("$KHASH$V1${0}${1}", iterations, base64Hash);
+            return $"$KHASH$V1${iterations}${base64Hash}";
         }
 
         /// <summary>
diff --git a/Kooboo.Data/Service/StartService.cs b/Kooboo.Data/Service/StartService.cs
index 9cbfb0aa..7a1d6483 100644
--- a/Kooboo.Data/Service/StartService.cs
+++ b/Kooboo.Data/Service/StartService.cs
@@ -15,7 +15,7 @@ namespace Kooboo.Data.Service
 
         public static string AfterLoginPage(RenderContext Context)
         {
-            if (Context != null && Context.User != null)
+            if (Context?.User != null)
             {
                 if (Data.AppSettings.IsOnlineServer)
                 {
diff --git a/Kooboo.Data/Service/UserLoginProtection.cs b/Kooboo.Data/Service/UserLoginProtection.cs
index 83068c71..ec67806e 100644
--- a/Kooboo.Data/Service/UserLoginProtection.cs
+++ b/Kooboo.Data/Service/UserLoginProtection.cs
@@ -42,10 +42,7 @@ namespace Kooboo.Data.Service
 
         public static void AddLoginOK(string UserName, string IP)
         {
-            if (BlockingService != null)
-            {
-                BlockingService.AddLoginOK(UserName, IP);  
-            }
+            BlockingService?.AddLoginOK(UserName, IP);
         } 
     }
 }
diff --git a/Kooboo.Dom/CSS/CSSDeclarationBlock.cs b/Kooboo.Dom/CSS/CSSDeclarationBlock.cs
index f8cb8712..97e78a5d 100644
--- a/Kooboo.Dom/CSS/CSSDeclarationBlock.cs
+++ b/Kooboo.Dom/CSS/CSSDeclarationBlock.cs
@@ -53,7 +53,7 @@ namespace Kooboo.Dom.CSS
         {
             if (string.IsNullOrEmpty(_cssText))
             {
-                if (item.Count() > 0)
+                if (item.Any())
                 {
                     foreach (var onedeclaration in item)
                     {
@@ -78,7 +78,7 @@ namespace Kooboo.Dom.CSS
         {
             string result = string.Empty;
 
-            if (item.Count() > 0)
+            if (item.Any())
             {
                 foreach (var onedeclaration in item)
                 {
diff --git a/Kooboo.Dom/CSS/CSSRuleList.cs b/Kooboo.Dom/CSS/CSSRuleList.cs
index 387d7e00..76a93d3d 100644
--- a/Kooboo.Dom/CSS/CSSRuleList.cs
+++ b/Kooboo.Dom/CSS/CSSRuleList.cs
@@ -25,7 +25,7 @@ namespace Kooboo.Dom.CSS
 
      public int length
      {
-         get { return item.Count(); }
+         get { return item.Count; }
      }
 
        public CSSRule this[int index]
@@ -52,7 +52,7 @@ namespace Kooboo.Dom.CSS
          if (insertIndex > length || insertIndex <0)
          {
              item.Add(rule);
-             return item.Count() - 1;
+             return item.Count - 1;
          }
          else
          {
@@ -67,7 +67,7 @@ namespace Kooboo.Dom.CSS
      /// <param name="deleteIndex">zero based index</param>
      public void deleteRule(int deleteIndex)
      {
-         if (deleteIndex < item.Count())
+         if (deleteIndex < item.Count)
          {
              item.RemoveAt(deleteIndex);
          }
diff --git a/Kooboo.Dom/CSS/StyleSheetList.cs b/Kooboo.Dom/CSS/StyleSheetList.cs
index 8fdbe758..425566e5 100644
--- a/Kooboo.Dom/CSS/StyleSheetList.cs
+++ b/Kooboo.Dom/CSS/StyleSheetList.cs
@@ -24,7 +24,7 @@ namespace Kooboo.Dom.CSS
      {
          get
          {
-             return item.Count();
+             return item.Count;
          }
      }
 
diff --git a/Kooboo.Dom/CSSParser/CSSParser.cs b/Kooboo.Dom/CSSParser/CSSParser.cs
index 06619486..7ea66d7d 100644
--- a/Kooboo.Dom/CSSParser/CSSParser.cs
+++ b/Kooboo.Dom/CSSParser/CSSParser.cs
@@ -66,7 +66,7 @@ namespace Kooboo.Dom
         public static CSSRule ParseOneCssRule(string CssText)
         {
             var stylesheet = ParseCSSStyleSheet(CssText);
-            if (stylesheet != null && stylesheet.cssRules != null && stylesheet.cssRules.length > 0)
+            if (stylesheet?.cssRules != null && stylesheet.cssRules.length > 0)
             {
                 return stylesheet.cssRules.item[0];
             }
diff --git a/Kooboo.Dom/Dom/DOMTokenList.cs b/Kooboo.Dom/Dom/DOMTokenList.cs
index a292393f..f1652f4a 100644
--- a/Kooboo.Dom/Dom/DOMTokenList.cs
+++ b/Kooboo.Dom/Dom/DOMTokenList.cs
@@ -18,7 +18,7 @@ namespace Kooboo.Dom
        {
            get
            {
-               return item.Count();
+               return item.Count;
            }
        }
 
diff --git a/Kooboo.Dom/Dom/Document.cs b/Kooboo.Dom/Dom/Document.cs
index 27b51ba2..9e84ac3b 100644
--- a/Kooboo.Dom/Dom/Document.cs
+++ b/Kooboo.Dom/Dom/Document.cs
@@ -467,15 +467,14 @@ namespace Kooboo.Dom
         /// </summary>
         public void ApplyStyleSheet(string mediadeviceinfo)
         {
-            if (!hasParseCSS && StyleSheets.item.Count() == 0)
+            if (!hasParseCSS && !StyleSheets.item.Any())
             {
                 ParseStyleSheet();
             }
 
             foreach (var item in this.StyleSheets.item)
             {
-                CSSStyleSheet stylesheet = item as CSSStyleSheet;
-                if (stylesheet != null)
+                if (item is CSSStyleSheet stylesheet)
                 {
                     this.ApplyCssRules(stylesheet.cssRules, mediadeviceinfo);
                 }
diff --git a/Kooboo.Dom/Dom/Element.cs b/Kooboo.Dom/Dom/Element.cs
index 8f02ca70..b107f532 100644
--- a/Kooboo.Dom/Dom/Element.cs
+++ b/Kooboo.Dom/Dom/Element.cs
@@ -403,8 +403,7 @@ namespace Kooboo.Dom
             {
                 if (item != null && item.nodeType == enumNodeType.ELEMENT)
                 {
-                    Element element = item as Element;
-                    if (element != null)
+                    if (item is Element element)
                     {
                         var result = _getElementByIndex(element, TokenIndex, IsStartIndex);
                         if (result != null)
diff --git a/Kooboo.Dom/Dom/HTMLCollection.cs b/Kooboo.Dom/Dom/HTMLCollection.cs
index 4c52a130..d170fdf2 100644
--- a/Kooboo.Dom/Dom/HTMLCollection.cs
+++ b/Kooboo.Dom/Dom/HTMLCollection.cs
@@ -33,7 +33,7 @@ namespace Kooboo.Dom
        {
            get
            {
-               return item.Count();
+               return item.Count;
            }
        }
 
diff --git a/Kooboo.Dom/Dom/Node.cs b/Kooboo.Dom/Dom/Node.cs
index 5a331b82..98d5c738 100644
--- a/Kooboo.Dom/Dom/Node.cs
+++ b/Kooboo.Dom/Dom/Node.cs
@@ -354,8 +354,8 @@ namespace Kooboo.Dom
 
             var currentPath = this.getNodePath(false);
             var otherPath = other.getNodePath(false);
-            int currentCount = currentPath.Count();
-            int otherCount = otherPath.Count();
+            int currentCount = currentPath.Count;
+            int otherCount = otherPath.Count;
 
             if (currentCount == otherCount)
             {
diff --git a/Kooboo.Dom/Dom/NodeList.cs b/Kooboo.Dom/Dom/NodeList.cs
index dca1659f..b04d8e41 100644
--- a/Kooboo.Dom/Dom/NodeList.cs
+++ b/Kooboo.Dom/Dom/NodeList.cs
@@ -17,7 +17,7 @@ namespace Kooboo.Dom
       public int length
       {
           get {  
-              return item.Count(); 
+              return item.Count; 
           }
       }
 
diff --git a/Kooboo.Dom/DomParser/ActiveFormattingElementList.cs b/Kooboo.Dom/DomParser/ActiveFormattingElementList.cs
index caa8b2b1..83917c7a 100644
--- a/Kooboo.Dom/DomParser/ActiveFormattingElementList.cs
+++ b/Kooboo.Dom/DomParser/ActiveFormattingElementList.cs
@@ -30,7 +30,7 @@ namespace Kooboo.Dom
         {
             get
             {
-                return item.Count();
+                return item.Count;
             }
         }
 
diff --git a/Kooboo.Dom/DomParser/HtmlToken.cs b/Kooboo.Dom/DomParser/HtmlToken.cs
index 6b95e493..186ddaba 100644
--- a/Kooboo.Dom/DomParser/HtmlToken.cs
+++ b/Kooboo.Dom/DomParser/HtmlToken.cs
@@ -147,10 +147,7 @@ namespace Kooboo.Dom
        /// </summary>
        internal void CleanAttributeValue()
        {
-           if (sb != null)
-           {
-               sb.Clear();
-           }
+           sb?.Clear();
        }
 
     }
diff --git a/Kooboo.Dom/DomParser/StackOpenElements.cs b/Kooboo.Dom/DomParser/StackOpenElements.cs
index 62fec7e3..f11c5eb3 100644
--- a/Kooboo.Dom/DomParser/StackOpenElements.cs
+++ b/Kooboo.Dom/DomParser/StackOpenElements.cs
@@ -27,7 +27,7 @@ namespace Kooboo.Dom
         {
             get
             {
-                return item.Count();
+                return item.Count;
             }
         }
 
diff --git a/Kooboo.Dom/DomParser/StackTemplateMode.cs b/Kooboo.Dom/DomParser/StackTemplateMode.cs
index 32f48569..b84a7f48 100644
--- a/Kooboo.Dom/DomParser/StackTemplateMode.cs
+++ b/Kooboo.Dom/DomParser/StackTemplateMode.cs
@@ -16,7 +16,7 @@ namespace Kooboo.Dom
         {
             get
             {
-                return item.Count();
+                return item.Count;
             }
         }
 
diff --git a/Kooboo.Dom/Helper/Loader.cs b/Kooboo.Dom/Helper/Loader.cs
index dfafade7..b03a7eae 100644
--- a/Kooboo.Dom/Helper/Loader.cs
+++ b/Kooboo.Dom/Helper/Loader.cs
@@ -239,9 +239,9 @@ namespace Kooboo.Dom
 
                 var webResponse = httpWebRequest.GetResponse();
 
-                if (webResponse is HttpWebResponse)
+                if (webResponse is HttpWebResponse httpWebResponse)
                 {
-                    down = ProcessResponse((HttpWebResponse)webResponse);
+                    down = ProcessResponse(httpWebResponse);
                     if (down != null)
                     {
 
diff --git a/Kooboo.Engines/Core/Pipeline/ContentTransformState.cs b/Kooboo.Engines/Core/Pipeline/ContentTransformState.cs
index 39af2012..c2bdf46c 100644
--- a/Kooboo.Engines/Core/Pipeline/ContentTransformState.cs
+++ b/Kooboo.Engines/Core/Pipeline/ContentTransformState.cs
@@ -41,10 +41,7 @@
                 && append.MimeType != null
                 && MimeType != null
                 && MimeType != append.MimeType) {
-                throw new InvalidOperationException(string.Format(
-                    "Invalid attempt to combine content with different MimeType {0} and {1}",
-                    MimeType,
-                    append.MimeType));
+                throw new InvalidOperationException($"Invalid attempt to combine content with different MimeType {MimeType} and {append.MimeType}");
             }
 
             _content.AppendLine(append.Content);
diff --git a/Kooboo.Engines/Core/Utility.cs b/Kooboo.Engines/Core/Utility.cs
index b3859bef..909d95d0 100644
--- a/Kooboo.Engines/Core/Utility.cs
+++ b/Kooboo.Engines/Core/Utility.cs
@@ -13,7 +13,7 @@
         public static Stream GetManifestResourceStream(Assembly assembly, Type type, string resource)
         {
             var nameSpace = type.Namespace.Replace("SassAndCoffee", "Kooboo.Engines");
-            var resourceName = string.Format("{0}.{1}", nameSpace, resource);
+            var resourceName = $"{nameSpace}.{resource}";
             return assembly.GetManifestResourceStream(resourceName);
         }
     }
diff --git a/Kooboo.Engines/JavaScript/ActiveScript/ActiveScriptException.cs b/Kooboo.Engines/JavaScript/ActiveScript/ActiveScriptException.cs
index bbb680bd..3a36bdce 100644
--- a/Kooboo.Engines/JavaScript/ActiveScript/ActiveScriptException.cs
+++ b/Kooboo.Engines/JavaScript/ActiveScript/ActiveScriptException.cs
@@ -73,15 +73,14 @@
 
             try {
                 error.GetExceptionInfo(out excepInfo);
-                message = string.Format(
-                    "Error in [{1}]:\n{0}\nat line {4}({5})\nError Code: {2} (0x{2:X8})\nError WCode: {3}",
-                    /* 0 */ excepInfo.bstrDescription,
-                    /* 1 */ excepInfo.bstrSource,
-                    /* 2 */ excepInfo.scode,
-                    /* 3 */ excepInfo.wCode,
-                    /* 4 */ lineNumber,
-                    /* 5 */ characterPosition,
-                    /* 6 */ source);
+                message = $"Error in [{/* 0 */
+excepInfo.bstrDescription}]:\n{/* 1 */
+excepInfo.bstrSource}\nat line {/* 2 */
+excepInfo.scode}({/* 3 */
+excepInfo.wCode})\nError Code: {/* 4 */
+lineNumber} (0x{/* 5 */
+characterPosition:X8})\nError WCode: {/* 6 */
+source}";
             } catch { }
 
             return new ActiveScriptException(message) {
diff --git a/Kooboo.Engines/JavaScript/ActiveScript/BaseActiveScriptSite.cs b/Kooboo.Engines/JavaScript/ActiveScript/BaseActiveScriptSite.cs
index 973260ce..d0216f8d 100644
--- a/Kooboo.Engines/JavaScript/ActiveScript/BaseActiveScriptSite.cs
+++ b/Kooboo.Engines/JavaScript/ActiveScript/BaseActiveScriptSite.cs
@@ -69,14 +69,14 @@
         public void GetItemInfo(string name, ScriptInfoFlags returnMask, out object item, out IntPtr typeInfo) {
             if ((returnMask & ScriptInfoFlags.IUnknown) > 0) {
                 item = GetItem(name);
-                if (item == null) throw new COMException(string.Format("{0} not found.", name), TYPE_E_ELEMENTNOTFOUND);
+                if (item == null) throw new COMException($"{name} not found.", TYPE_E_ELEMENTNOTFOUND);
             } else {
                 item = null;
             }
 
             if ((returnMask & ScriptInfoFlags.ITypeInfo) > 0) {
                 typeInfo = GetTypeInfo(name);
-                if (typeInfo == null) throw new COMException(string.Format("{0} not found.", name), TYPE_E_ELEMENTNOTFOUND);
+                if (typeInfo == null) throw new COMException($"{name} not found.", TYPE_E_ELEMENTNOTFOUND);
             } else {
                 typeInfo = IntPtr.Zero;
             }
diff --git a/Kooboo.HttpServer/src/Kooboo.HttpServer/Http/Http1/HttpHeaders.cs b/Kooboo.HttpServer/src/Kooboo.HttpServer/Http/Http1/HttpHeaders.cs
index 8457e588..e1d1d7da 100644
--- a/Kooboo.HttpServer/src/Kooboo.HttpServer/Http/Http1/HttpHeaders.cs
+++ b/Kooboo.HttpServer/src/Kooboo.HttpServer/Http/Http1/HttpHeaders.cs
@@ -431,7 +431,7 @@ namespace Kooboo.HttpServer.Http
 
         private static void ThrowInvalidHeaderCharacter(char ch)
         {
-            throw new InvalidOperationException(CoreStrings.FormatInvalidAsciiOrControlChar(string.Format("0x{0:X4}", (ushort)ch)));
+            throw new InvalidOperationException(CoreStrings.FormatInvalidAsciiOrControlChar($"0x{(ushort)ch:X4}"));
         }
     }
 }
diff --git a/Kooboo.HttpServer/src/Kooboo.HttpServer/Micosoft/Extensions/Primitives/StringValues.cs b/Kooboo.HttpServer/src/Kooboo.HttpServer/Micosoft/Extensions/Primitives/StringValues.cs
index 28ac00b0..e513c2df 100644
--- a/Kooboo.HttpServer/src/Kooboo.HttpServer/Micosoft/Extensions/Primitives/StringValues.cs
+++ b/Kooboo.HttpServer/src/Kooboo.HttpServer/Micosoft/Extensions/Primitives/StringValues.cs
@@ -385,19 +385,19 @@ namespace Microsoft.Extensions.Primitives
                 return Equals(this, StringValues.Empty);
             }
 
-            if (obj is string)
+            if (obj is string s)
             {
-                return Equals(this, (string)obj);
+                return Equals(this, s);
             }
             
-            if (obj is string[])
+            if (obj is string[] strings)
             {
-                return Equals(this, (string[])obj);
+                return Equals(this, strings);
             }
 
-            if (obj is StringValues)
+            if (obj is StringValues stringValues)
             {
-                return Equals(this, (StringValues)obj);
+                return Equals(this, stringValues);
             }
 
             return false;
diff --git a/Kooboo.HttpServer/src/Kooboo.HttpServer/Sockets/SocketConnection.cs b/Kooboo.HttpServer/src/Kooboo.HttpServer/Sockets/SocketConnection.cs
index 92f1c8de..95763fc8 100644
--- a/Kooboo.HttpServer/src/Kooboo.HttpServer/Sockets/SocketConnection.cs
+++ b/Kooboo.HttpServer/src/Kooboo.HttpServer/Sockets/SocketConnection.cs
@@ -132,10 +132,7 @@ namespace Kooboo.HttpServer.Sockets
             }
             finally
             {
-                if (_sslAdapter != null)
-                {
-                    _sslAdapter.Dispose();
-                }
+                _sslAdapter?.Dispose();
 
                 _trace.ConnectionStop(ConnectionFeature.ConnectionId);
             }
diff --git a/Kooboo.HttpServer/src/Kooboo.HttpServer/Sockets/Ssl/SslAdapter.cs b/Kooboo.HttpServer/src/Kooboo.HttpServer/Sockets/Ssl/SslAdapter.cs
index 6363006b..2659df88 100644
--- a/Kooboo.HttpServer/src/Kooboo.HttpServer/Sockets/Ssl/SslAdapter.cs
+++ b/Kooboo.HttpServer/src/Kooboo.HttpServer/Sockets/Ssl/SslAdapter.cs
@@ -214,10 +214,7 @@ namespace Kooboo.HttpServer.Http
 
         public void Dispose()
         {
-            if (_sslStream !=null)
-            {
-                _sslStream.Dispose();
-            }
+            _sslStream?.Dispose();
             
         }
     }
diff --git a/Kooboo.HttpServer/src/Kooboo.HttpServer/System/Memory.cs b/Kooboo.HttpServer/src/Kooboo.HttpServer/System/Memory.cs
index 2e47f157..535395fb 100644
--- a/Kooboo.HttpServer/src/Kooboo.HttpServer/System/Memory.cs
+++ b/Kooboo.HttpServer/src/Kooboo.HttpServer/System/Memory.cs
@@ -325,9 +325,9 @@ namespace System
         [EditorBrowsable(EditorBrowsableState.Never)]
         public override bool Equals(object obj)
         {
-            if (obj is ReadOnlyMemory<T>)
+            if (obj is ReadOnlyMemory<T> Ts)
             {
-                return ((ReadOnlyMemory<T>)obj).Equals(this);
+                return Ts.Equals(this);
             }
             else if (obj is Memory<T> memory)
             {
diff --git a/Kooboo.HttpServer/src/Kooboo.HttpServer/System/ValueTuple/ValueTuple.cs b/Kooboo.HttpServer/src/Kooboo.HttpServer/System/ValueTuple/ValueTuple.cs
index e05248fa..2fcfacb3 100644
--- a/Kooboo.HttpServer/src/Kooboo.HttpServer/System/ValueTuple/ValueTuple.cs
+++ b/Kooboo.HttpServer/src/Kooboo.HttpServer/System/ValueTuple/ValueTuple.cs
@@ -336,7 +336,7 @@ namespace System
 
         bool IStructuralEquatable.Equals(object other, IEqualityComparer comparer)
         {
-            if (other == null || !(other is ValueTuple<T1>)) return false;
+            if (!(other is ValueTuple<T1>)) return false;
 
             var objTuple = (ValueTuple<T1>)other;
 
@@ -512,7 +512,7 @@ namespace System
         /// </remarks>
         bool IStructuralEquatable.Equals(object other, IEqualityComparer comparer)
         {
-            if (other == null || !(other is ValueTuple<T1, T2>)) return false;
+            if (!(other is ValueTuple<T1, T2>)) return false;
 
             var objTuple = (ValueTuple<T1, T2>)other;
 
@@ -691,7 +691,7 @@ namespace System
 
         bool IStructuralEquatable.Equals(object other, IEqualityComparer comparer)
         {
-            if (other == null || !(other is ValueTuple<T1, T2, T3>)) return false;
+            if (!(other is ValueTuple<T1, T2, T3>)) return false;
 
             var objTuple = (ValueTuple<T1, T2, T3>)other;
 
@@ -886,7 +886,7 @@ namespace System
 
         bool IStructuralEquatable.Equals(object other, IEqualityComparer comparer)
         {
-            if (other == null || !(other is ValueTuple<T1, T2, T3, T4>)) return false;
+            if (!(other is ValueTuple<T1, T2, T3, T4>)) return false;
 
             var objTuple = (ValueTuple<T1, T2, T3, T4>)other;
 
@@ -1099,7 +1099,7 @@ namespace System
 
         bool IStructuralEquatable.Equals(object other, IEqualityComparer comparer)
         {
-            if (other == null || !(other is ValueTuple<T1, T2, T3, T4, T5>)) return false;
+            if (!(other is ValueTuple<T1, T2, T3, T4, T5>)) return false;
 
             var objTuple = (ValueTuple<T1, T2, T3, T4, T5>)other;
 
@@ -1330,7 +1330,7 @@ namespace System
 
         bool IStructuralEquatable.Equals(object other, IEqualityComparer comparer)
         {
-            if (other == null || !(other is ValueTuple<T1, T2, T3, T4, T5, T6>)) return false;
+            if (!(other is ValueTuple<T1, T2, T3, T4, T5, T6>)) return false;
 
             var objTuple = (ValueTuple<T1, T2, T3, T4, T5, T6>)other;
 
@@ -1579,7 +1579,7 @@ namespace System
 
         bool IStructuralEquatable.Equals(object other, IEqualityComparer comparer)
         {
-            if (other == null || !(other is ValueTuple<T1, T2, T3, T4, T5, T6, T7>)) return false;
+            if (!(other is ValueTuple<T1, T2, T3, T4, T5, T6, T7>)) return false;
 
             var objTuple = (ValueTuple<T1, T2, T3, T4, T5, T6, T7>)other;
 
@@ -1852,7 +1852,7 @@ namespace System
 
         bool IStructuralEquatable.Equals(object other, IEqualityComparer comparer)
         {
-            if (other == null || !(other is ValueTuple<T1, T2, T3, T4, T5, T6, T7, TRest>)) return false;
+            if (!(other is ValueTuple<T1, T2, T3, T4, T5, T6, T7, TRest>)) return false;
 
             var objTuple = (ValueTuple<T1, T2, T3, T4, T5, T6, T7, TRest>)other;
 
diff --git a/Kooboo.IndexedDB/Btree/BtreeIndexDuplicate.cs b/Kooboo.IndexedDB/Btree/BtreeIndexDuplicate.cs
index fd3fc696..71b2132e 100644
--- a/Kooboo.IndexedDB/Btree/BtreeIndexDuplicate.cs
+++ b/Kooboo.IndexedDB/Btree/BtreeIndexDuplicate.cs
@@ -870,10 +870,7 @@ namespace Kooboo.IndexedDB.Btree
             {
                 lock (_object)
                 {
-                    if (_indexstream != null)
-                    {
-                        _indexstream.Flush();
-                    }
+                    _indexstream?.Flush();
                 }
             }
         }
diff --git a/Kooboo.IndexedDB/Btree/KeyBytesCollection.cs b/Kooboo.IndexedDB/Btree/KeyBytesCollection.cs
index 38e5ad76..48efc75b 100644
--- a/Kooboo.IndexedDB/Btree/KeyBytesCollection.cs
+++ b/Kooboo.IndexedDB/Btree/KeyBytesCollection.cs
@@ -194,7 +194,7 @@ namespace Kooboo.IndexedDB.Btree
                 }
 
                 recordlistcount = recordlist.Count;
-                recordlistcount = newRecordList.Count(); 
+                recordlistcount = newRecordList.Count; 
             }
 
             /// <summary>
@@ -264,7 +264,7 @@ namespace Kooboo.IndexedDB.Btree
                 }
 
                 recordlistcount = recordlist.Count;
-                recordlistcount = newRecordList.Count(); 
+                recordlistcount = newRecordList.Count; 
             }
              
             private void getnextnode()
diff --git a/Kooboo.IndexedDB/Btree/TreeFile.cs b/Kooboo.IndexedDB/Btree/TreeFile.cs
index 972cc186..3ccd5b49 100644
--- a/Kooboo.IndexedDB/Btree/TreeFile.cs
+++ b/Kooboo.IndexedDB/Btree/TreeFile.cs
@@ -1464,8 +1464,7 @@ namespace Kooboo.IndexedDB.Btree
             {
                 lock (_object)
                 {
-                    if (_duplicate != null)
-                    { _duplicate.Close(); }
+                    _duplicate?.Close();
                 }
             }
         }
@@ -1490,10 +1489,7 @@ namespace Kooboo.IndexedDB.Btree
             {
                 lock (_object)
                 {
-                    if (_indexstream != null)
-                    {
-                        _indexstream.Flush();
-                    }
+                    _indexstream?.Flush();
                 }
             }
 
@@ -1501,8 +1497,7 @@ namespace Kooboo.IndexedDB.Btree
             {
                 lock (_object)
                 {
-                    if (_duplicate != null)
-                    { _duplicate.Close(); }
+                    _duplicate?.Close();
                 }
             }
         }
diff --git a/Kooboo.IndexedDB/Database.cs b/Kooboo.IndexedDB/Database.cs
index da92e66c..3f3dfe33 100644
--- a/Kooboo.IndexedDB/Database.cs
+++ b/Kooboo.IndexedDB/Database.cs
@@ -857,7 +857,7 @@ namespace Kooboo.IndexedDB
 
             var subfolders = System.IO.Directory.GetDirectories(tablefolder);
 
-            if (subfolders == null || subfolders.Count() == 0)
+            if (subfolders == null || !subfolders.Any())
             {
                 return new List<string>();
             }
diff --git a/Kooboo.IndexedDB/Dynamic/Query.cs b/Kooboo.IndexedDB/Dynamic/Query.cs
index a6402b18..13e55705 100644
--- a/Kooboo.IndexedDB/Dynamic/Query.cs
+++ b/Kooboo.IndexedDB/Dynamic/Query.cs
@@ -283,7 +283,7 @@ namespace Kooboo.IndexedDB.Dynamic
         {
             List<IDictionary<string, object>> x = Take(1);
 
-            if (x != null && x.Count() > 0)
+            if (x != null && x.Any())
             {
                 return x[0];
             }
@@ -297,7 +297,7 @@ namespace Kooboo.IndexedDB.Dynamic
         {
             var x = Take<T>(1);
 
-            if (x != null && x.Count() > 0)
+            if (x != null && x.Any())
             {
                 return x[0];
             }
@@ -357,7 +357,7 @@ namespace Kooboo.IndexedDB.Dynamic
         {
             var conditions = QueryPraser.ParseConditoin(conditiontext);
 
-            if (conditions == null || conditions.Count() == 0)
+            if (conditions == null || !conditions.Any())
             {
                 return null;
             };
diff --git a/Kooboo.IndexedDB/Dynamic/SettingHelper.cs b/Kooboo.IndexedDB/Dynamic/SettingHelper.cs
index 31616b52..6fa72417 100644
--- a/Kooboo.IndexedDB/Dynamic/SettingHelper.cs
+++ b/Kooboo.IndexedDB/Dynamic/SettingHelper.cs
@@ -107,7 +107,7 @@ namespace Kooboo.IndexedDB.Dynamic
         {
             // on the condition that column can not be append to the old setting. a rebuild is required.
 
-            if (newsetting.Columns.Count() == 0)
+            if (!newsetting.Columns.Any())
             {
                 return false;
             }
@@ -442,7 +442,7 @@ namespace Kooboo.IndexedDB.Dynamic
 
         private static bool QuickCheckChange(List<TableColumn> newcols, Setting setting)
         {
-            if (newcols.Count() != setting.Columns.Count())
+            if (newcols.Count != setting.Columns.Count())
             {
                 return true;
             }
diff --git a/Kooboo.IndexedDB/Dynamic/Sync.cs b/Kooboo.IndexedDB/Dynamic/Sync.cs
index 91c7dfce..0849c8ba 100644
--- a/Kooboo.IndexedDB/Dynamic/Sync.cs
+++ b/Kooboo.IndexedDB/Dynamic/Sync.cs
@@ -29,7 +29,7 @@ namespace Kooboo.IndexedDB.Dynamic
 
         public static void SetTableSetting(Database db, TableSetting setting)
         {
-            if (setting != null && setting.tables != null && setting.tables.Count > 0)
+            if (setting?.tables != null && setting.tables.Count > 0)
             { 
                 foreach (var item in setting.tables)
                 {
diff --git a/Kooboo.IndexedDB/Dynamic/Table.cs b/Kooboo.IndexedDB/Dynamic/Table.cs
index 5fc9cab2..3c5283cd 100644
--- a/Kooboo.IndexedDB/Dynamic/Table.cs
+++ b/Kooboo.IndexedDB/Dynamic/Table.cs
@@ -298,7 +298,7 @@ namespace Kooboo.IndexedDB.Dynamic
 
         private void ensureincremental(Setting newsetting)
         {
-            if (newsetting != null && newsetting.Columns != null)
+            if (newsetting?.Columns != null)
             {
                 foreach (var item in newsetting.Columns)
                 {
diff --git a/Kooboo.IndexedDB/Helper/SettingHelper.cs b/Kooboo.IndexedDB/Helper/SettingHelper.cs
index 696182be..f2f94c3f 100644
--- a/Kooboo.IndexedDB/Helper/SettingHelper.cs
+++ b/Kooboo.IndexedDB/Helper/SettingHelper.cs
@@ -107,7 +107,7 @@ namespace Kooboo.IndexedDB.Helper
         // keep...
         public static Dictionary<string, int> GetColumns<TValue>(Dictionary<string, int> columns, string primarykey, int primarykeylen)
         {
-            if (columns == null || columns.Count() == 0)
+            if (columns == null || !columns.Any())
             {
                 return new Dictionary<string, int>();
             }
diff --git a/Kooboo.IndexedDB/Indexs/IndexInstanceList.cs b/Kooboo.IndexedDB/Indexs/IndexInstanceList.cs
index 97969e6a..f2af0315 100644
--- a/Kooboo.IndexedDB/Indexs/IndexInstanceList.cs
+++ b/Kooboo.IndexedDB/Indexs/IndexInstanceList.cs
@@ -18,7 +18,7 @@ namespace Kooboo.IndexedDB.Indexs
 
         public void ParseSetting(Dictionary<string, int> indexs, string objectFolder, int MaxCacheLevel)
         { 
-            if (indexs != null && indexs.Count()>0)
+            if (indexs != null && indexs.Any())
             {
                 foreach (var item in indexs)
                 {
diff --git a/Kooboo.IndexedDB/ObjectStore.cs b/Kooboo.IndexedDB/ObjectStore.cs
index ec184e58..36f7fdbf 100644
--- a/Kooboo.IndexedDB/ObjectStore.cs
+++ b/Kooboo.IndexedDB/ObjectStore.cs
@@ -201,8 +201,7 @@ namespace Kooboo.IndexedDB
 
         public IColumn<TValue> GetColumn(string ColumnName)
         {
-            var koobooconverter = this.ValueConverter as KoobooSimpleConverter<TValue>;
-            if (koobooconverter != null)
+            if (this.ValueConverter is KoobooSimpleConverter<TValue> koobooconverter)
             {
                 return koobooconverter.GetColumn(ColumnName);
             }
@@ -1013,9 +1012,7 @@ namespace Kooboo.IndexedDB
         {
             lock (_Locker)
             {
-                var converter = this.ValueConverter as KoobooSimpleConverter<TValue>;
-
-                if (converter != null)
+                if (this.ValueConverter is KoobooSimpleConverter<TValue> converter)
                 {
                     byte[] allcolumns = this.GetColumnBytes(blockposition);
 
diff --git a/Kooboo.IndexedDB/Query/Filter.cs b/Kooboo.IndexedDB/Query/Filter.cs
index 109f0e6c..c63e0d1a 100644
--- a/Kooboo.IndexedDB/Query/Filter.cs
+++ b/Kooboo.IndexedDB/Query/Filter.cs
@@ -470,7 +470,7 @@ namespace Kooboo.IndexedDB.Query
         {
             List<TValue> x = Take(1);
 
-            if (x != null && x.Count() > 0)
+            if (x != null && x.Any())
             {
                 return x[0];
             }
diff --git a/Kooboo.IndexedDB/Queue/QueueContent.cs b/Kooboo.IndexedDB/Queue/QueueContent.cs
index 2bc48e15..f16a2246 100644
--- a/Kooboo.IndexedDB/Queue/QueueContent.cs
+++ b/Kooboo.IndexedDB/Queue/QueueContent.cs
@@ -108,10 +108,7 @@ namespace Kooboo.IndexedDB.Queue
 
         public void close()
         {
-            if (_stream != null)
-            {
-                _stream.Close();
-            }
+            _stream?.Close();
         }
 
         public FileStream Stream
diff --git a/Kooboo.IndexedDB/Queue/QueueList.cs b/Kooboo.IndexedDB/Queue/QueueList.cs
index 9aea2078..9a1a60d7 100644
--- a/Kooboo.IndexedDB/Queue/QueueList.cs
+++ b/Kooboo.IndexedDB/Queue/QueueList.cs
@@ -162,10 +162,7 @@ namespace Kooboo.IndexedDB.Queue
 
         public void close()
         {
-            if (_stream != null)
-            {
-                _stream.Close();
-            }
+            _stream?.Close();
         }
 
         public FileStream Stream
diff --git a/Kooboo.IndexedDB/Sequence/Sequence.cs b/Kooboo.IndexedDB/Sequence/Sequence.cs
index c6ccc1c0..f283dc32 100644
--- a/Kooboo.IndexedDB/Sequence/Sequence.cs
+++ b/Kooboo.IndexedDB/Sequence/Sequence.cs
@@ -311,10 +311,7 @@ namespace Kooboo.IndexedDB
         {
             lock(_object)
             {
-                if (_stream !=null)
-                {
-                    _stream.Flush(); 
-                }
+                _stream?.Flush();
             }
         }
 
diff --git a/Kooboo.IndexedDB/Serializer/Simple/ValueConverter.cs b/Kooboo.IndexedDB/Serializer/Simple/ValueConverter.cs
index 3d967a2d..6cdf0e1a 100644
--- a/Kooboo.IndexedDB/Serializer/Simple/ValueConverter.cs
+++ b/Kooboo.IndexedDB/Serializer/Simple/ValueConverter.cs
@@ -116,9 +116,7 @@ namespace Kooboo.IndexedDB.Serializer.Simple
 
         public static byte[] IpAddressToBytes(object value)
         {
-            var Ipaddress = value as System.Net.IPAddress; 
-            
-            if (Ipaddress != null)
+            if (value is System.Net.IPAddress Ipaddress)
             {
                 return Ipaddress.GetAddressBytes(); 
             }
diff --git a/Kooboo.Lib/Helper/CurrencyHelper.cs b/Kooboo.Lib/Helper/CurrencyHelper.cs
index ea23b8a8..d0878735 100644
--- a/Kooboo.Lib/Helper/CurrencyHelper.cs
+++ b/Kooboo.Lib/Helper/CurrencyHelper.cs
@@ -30,7 +30,7 @@ namespace Kooboo.Lib.Helper
             {
                 return CurrencyDic[currency];
             }
-            throw new Exception(string.Format("currency:{0} is not supported.",currency));
+            throw new Exception($"currency:{currency} is not supported.");
 
 // 1
 
diff --git a/Kooboo.Lib/Helper/Encoding/EmailEncoding.cs b/Kooboo.Lib/Helper/Encoding/EmailEncoding.cs
index 08f6c77f..e39746d9 100644
--- a/Kooboo.Lib/Helper/Encoding/EmailEncoding.cs
+++ b/Kooboo.Lib/Helper/Encoding/EmailEncoding.cs
@@ -125,7 +125,7 @@ namespace Kooboo.Lib.Helper.EncodingHelper
                         currentbyte = GetByte(Index);
                     }
                       
-                    if (bytes.Count()>0)
+                    if (bytes.Any())
                     {
                         end = Index; 
                         return System.Text.Encoding.ASCII.GetString(bytes.ToArray()).Trim(); 
@@ -156,7 +156,7 @@ namespace Kooboo.Lib.Helper.EncodingHelper
                         } 
                     }
                       
-                    if (bytes.Count() > 0)
+                    if (bytes.Any())
                     {
                         end = Index-1; 
                         return System.Text.Encoding.ASCII.GetString(bytes.ToArray()).Trim();
diff --git a/Kooboo.Lib/Helper/HttpHelper.cs b/Kooboo.Lib/Helper/HttpHelper.cs
index ffd945fb..0eb39bf8 100644
--- a/Kooboo.Lib/Helper/HttpHelper.cs
+++ b/Kooboo.Lib/Helper/HttpHelper.cs
@@ -90,7 +90,7 @@ namespace Kooboo.Lib.Helper
 
                     if (!string.IsNullOrEmpty(UserName) && !string.IsNullOrEmpty(Password))
                     {
-                        var bytes = Encoding.UTF8.GetBytes(String.Format("{0}:{1}", UserName, Password));
+                        var bytes = Encoding.UTF8.GetBytes($"{UserName}:{Password}");
                         client.Headers.Add("Authorization", "Basic " + Convert.ToBase64String(bytes));
                     }
 
@@ -114,7 +114,7 @@ namespace Kooboo.Lib.Helper
                 {
                     Headers = new Dictionary<string, string>();
                 }
-                var bytes = Encoding.UTF8.GetBytes(String.Format("{0}:{1}", UserName, Password));
+                var bytes = Encoding.UTF8.GetBytes($"{UserName}:{Password}");
                 Headers.Add("Authorization", "Basic " + Convert.ToBase64String(bytes));
             }
             using (var client = new WebClient())
@@ -157,7 +157,7 @@ namespace Kooboo.Lib.Helper
                     }
                     if (!string.IsNullOrEmpty(UserName))
                     {
-                        var bytes = Encoding.UTF8.GetBytes(String.Format("{0}:{1}", UserName, Password));
+                        var bytes = Encoding.UTF8.GetBytes($"{UserName}:{Password}");
                         client.Headers.Add("Authorization", "Basic " + Convert.ToBase64String(bytes));
                     }
 
@@ -208,7 +208,7 @@ namespace Kooboo.Lib.Helper
 
                 if (!string.IsNullOrEmpty(UserName) && !string.IsNullOrEmpty(Password))
                 {
-                    var bytes = Encoding.UTF8.GetBytes(String.Format("{0}:{1}", UserName, Password));
+                    var bytes = Encoding.UTF8.GetBytes($"{UserName}:{Password}");
                     client.Headers.Add("Authorization", "Basic " + Convert.ToBase64String(bytes));
                 }
                 client.Proxy = null;
@@ -357,7 +357,7 @@ namespace Kooboo.Lib.Helper
                 {
                     Headers = new Dictionary<string, string>();
                 }
-                var bytes = Encoding.UTF8.GetBytes(String.Format("{0}:{1}", UserName, Password));
+                var bytes = Encoding.UTF8.GetBytes($"{UserName}:{Password}");
                 Headers.Add("Authorization", "Basic " + Convert.ToBase64String(bytes));
             }
             using (var client = new WebClient())
diff --git a/Kooboo.Lib/Helper/IOHelper.cs b/Kooboo.Lib/Helper/IOHelper.cs
index aea5ad6b..6e180ded 100644
--- a/Kooboo.Lib/Helper/IOHelper.cs
+++ b/Kooboo.Lib/Helper/IOHelper.cs
@@ -897,7 +897,7 @@ namespace Kooboo.Lib.Helper
                 List<string> indexitem = new List<string>();
                 foreach (var item in AllSegments)
                 {
-                    if (i > item.Count() - 1)
+                    if (i > item.Count - 1)
                     {
                         break;
                     }
@@ -906,7 +906,7 @@ namespace Kooboo.Lib.Helper
                         indexitem.Add(item[i]);
                     }
                 }
-                if (indexitem.Count() > 0 && HasSameValue(indexitem))
+                if (indexitem.Any()&& HasSameValue(indexitem))
                 {
                     common.Add(indexitem[0]);
                     i += 1;
@@ -917,7 +917,7 @@ namespace Kooboo.Lib.Helper
                 }
             }
 
-            if (common.Count() == 0)
+            if (!common.Any())
             {
                 return null;
             }
diff --git a/Kooboo.Lib/Helper/JintHelper.cs b/Kooboo.Lib/Helper/JintHelper.cs
index b43e78a2..df86c117 100644
--- a/Kooboo.Lib/Helper/JintHelper.cs
+++ b/Kooboo.Lib/Helper/JintHelper.cs
@@ -191,7 +191,7 @@ namespace Kooboo.Lib.Helper
 
             var prog = parser.Parse(requireJsBlock);
 
-            if (prog != null && prog.Body.Count() > 0)
+            if (prog != null && prog.Body.Any())
             {
 
                 var item = prog.Body.First();
@@ -207,7 +207,7 @@ namespace Kooboo.Lib.Helper
                         {
                             var requireargu = call.Arguments[1];
 
-                            if (requireargu != null && requireargu is Jint.Parser.Ast.FunctionExpression)
+                            if (requireargu is Jint.Parser.Ast.FunctionExpression)
                             {
                                 var requireFunc = requireargu as Jint.Parser.Ast.FunctionExpression;
 
@@ -266,7 +266,7 @@ namespace Kooboo.Lib.Helper
                 list = ListRequireJsFuncs(Js);
             }
 
-            if (list.Count() == 0)
+            if (!list.Any())
             {
                 return Js;
             }
diff --git a/Kooboo.Lib/Helper/JsonHelper.cs b/Kooboo.Lib/Helper/JsonHelper.cs
index 82148d9d..31bc5825 100644
--- a/Kooboo.Lib/Helper/JsonHelper.cs
+++ b/Kooboo.Lib/Helper/JsonHelper.cs
@@ -546,7 +546,7 @@ namespace JsonValidatorTool
 
         private void OnError()
         {
-            throw new JsonNotValidException(string.Format("Invalid JSON text at character offset {0}.", _offset.ToString("N0")));
+            throw new JsonNotValidException($"Invalid JSON text at character offset {_offset.ToString("N0")}.");
         }
     }
 
diff --git a/Kooboo.Lib/Helper/NetworkHelper.cs b/Kooboo.Lib/Helper/NetworkHelper.cs
index a2c2e065..dbf12aed 100644
--- a/Kooboo.Lib/Helper/NetworkHelper.cs
+++ b/Kooboo.Lib/Helper/NetworkHelper.cs
@@ -34,7 +34,7 @@ namespace Kooboo.Lib.Helper
                 }
             }
 
-            if (IpAdds.Count() == 0)
+            if (!IpAdds.Any())
             {
                 return null;
             }
diff --git a/Kooboo.Lib/IOC/Service.cs b/Kooboo.Lib/IOC/Service.cs
index fc4b450d..34811996 100644
--- a/Kooboo.Lib/IOC/Service.cs
+++ b/Kooboo.Lib/IOC/Service.cs
@@ -84,8 +84,7 @@ namespace Kooboo.Lib.IOC
                                 List<IPriority> list = new List<IPriority>();
                                 foreach (var item in types)
                                 {
-                                    var obj = Activator.CreateInstance(item) as IPriority;
-                                    if (obj != null)
+                                    if (Activator.CreateInstance(item) is IPriority obj)
                                     {
                                         list.Add(obj);
                                     }
diff --git a/Kooboo.Lib/Jint/Engine.cs b/Kooboo.Lib/Jint/Engine.cs
index 60950424..e5a783fc 100644
--- a/Kooboo.Lib/Jint/Engine.cs
+++ b/Kooboo.Lib/Jint/Engine.cs
@@ -316,8 +316,7 @@ namespace Jint
 
                 if (ex is ParserException)
                 {
-                    var pex = ex as ParserException;
-                    if (pex != null)
+                    if (ex is ParserException pex)
                     {
                         var error = "JavaScript error on line" + pex.LineNumber.ToString() + ", cloumn: " + pex.Column.ToString() + " " + ex.Message;
                         throw new Exception(error, ex.InnerException);
@@ -557,9 +556,7 @@ namespace Jint
 
             if (reference == null)
             {
-                var completion = value as Completion;
-
-                if (completion != null)
+                if (value is Completion completion)
                 {
                     return GetValue(completion.Value);
                 }
diff --git a/Kooboo.Lib/Jint/Native/Array/ArrayConstructor.cs b/Kooboo.Lib/Jint/Native/Array/ArrayConstructor.cs
index c1678aeb..f58c92af 100644
--- a/Kooboo.Lib/Jint/Native/Array/ArrayConstructor.cs
+++ b/Kooboo.Lib/Jint/Native/Array/ArrayConstructor.cs
@@ -71,9 +71,7 @@ namespace Jint.Native.Array
             }
             else if (arguments.Length == 1 && arguments.At(0).IsObject() && arguments.At(0).As<ObjectWrapper>() != null )
             {
-                var enumerable = arguments.At(0).As<ObjectWrapper>().Target as IEnumerable;
-
-                if (enumerable != null)
+                if (arguments.At(0).As<ObjectWrapper>().Target is IEnumerable enumerable)
                 {
                     var jsArray = Engine.Array.Construct(Arguments.Empty);
                     foreach (var item in enumerable)
diff --git a/Kooboo.Lib/Jint/Native/Function/FunctionInstance.cs b/Kooboo.Lib/Jint/Native/Function/FunctionInstance.cs
index cbd2695d..eac390c5 100644
--- a/Kooboo.Lib/Jint/Native/Function/FunctionInstance.cs
+++ b/Kooboo.Lib/Jint/Native/Function/FunctionInstance.cs
@@ -40,7 +40,7 @@ namespace Jint.Native.Function
             var po = Get("prototype");
             if (!po.IsObject())
             {
-                throw new JavaScriptException(_engine.TypeError, string.Format("Function has non-object prototype '{0}' in instanceof check", TypeConverter.ToString(po)));
+                throw new JavaScriptException(_engine.TypeError, $"Function has non-object prototype '{TypeConverter.ToString(po)}' in instanceof check");
             }
 
             var o = po.AsObject();
diff --git a/Kooboo.Lib/Jint/Native/Function/FunctionPrototype.cs b/Kooboo.Lib/Jint/Native/Function/FunctionPrototype.cs
index e4390426..f72951e7 100644
--- a/Kooboo.Lib/Jint/Native/Function/FunctionPrototype.cs
+++ b/Kooboo.Lib/Jint/Native/Function/FunctionPrototype.cs
@@ -52,8 +52,7 @@ namespace Jint.Native.Function
             f.BoundArgs = arguments.Skip(1).ToArray();
             f.Prototype = Engine.Function.PrototypeObject;
 
-            var o = target as FunctionInstance;
-            if (o != null)
+            if (target is FunctionInstance o)
             {
                 var l = TypeConverter.ToNumber(o.Get("length")) - (arguments.Length - 1);
                 f.FastAddProperty("length", System.Math.Max(l, 0), false, false, false); 
diff --git a/Kooboo.Lib/Jint/Native/JsValue.cs b/Kooboo.Lib/Jint/Native/JsValue.cs
index 3ea140dc..4a1428be 100644
--- a/Kooboo.Lib/Jint/Native/JsValue.cs
+++ b/Kooboo.Lib/Jint/Native/JsValue.cs
@@ -178,8 +178,8 @@ namespace Jint.Native
             if (IsObject())
             {
                 var o = AsObject();
-                var t = o as T;
-                if (t != null)
+
+                if (o is T t)
                 {
                     return t;
                 }
@@ -315,8 +315,7 @@ namespace Jint.Native
             }
 
             // if an ObjectInstance is passed directly, use it as is
-            var instance = value as ObjectInstance;
-            if (instance != null)
+            if (value is ObjectInstance instance)
             {
                 // Learn conversion.
                 // Learn conversion, racy, worst case we'll try again later
@@ -327,8 +326,7 @@ namespace Jint.Native
                 return new JsValue(instance);
             }
 
-            var a = value as System.Array;
-            if (a != null)
+            if (value is System.Array a)
             {
                 Func<Engine, object, JsValue> convert = (Engine e, object v) =>
                 {
@@ -351,8 +349,7 @@ namespace Jint.Native
                 return convert(engine, a);
             }
 
-            var d = value as Delegate;
-            if (d != null)
+            if (value is Delegate d)
             {
                 return new DelegateWrapper(engine, d);
             }
@@ -385,8 +382,8 @@ namespace Jint.Native
                 case Types.Number:
                     return _double;
                 case Types.Object:
-                    var wrapper = _object as IObjectWrapper;
-                    if (wrapper != null)
+
+                    if (_object is IObjectWrapper wrapper)
                     {
                         return wrapper.Target;
                     }
@@ -394,8 +391,8 @@ namespace Jint.Native
                     switch ((_object as ObjectInstance).Class)
                     {
                         case "Array":
-                            var arrayInstance = _object as ArrayInstance;
-                            if (arrayInstance != null)
+
+                            if (_object is ArrayInstance arrayInstance)
                             {
                                 var len = TypeConverter.ToInt32(arrayInstance.Get("length"));
                                 var result = new object[len];
@@ -418,8 +415,8 @@ namespace Jint.Native
                             break;
 
                         case "String":
-                            var stringInstance = _object as StringInstance;
-                            if (stringInstance != null)
+
+                            if (_object is StringInstance stringInstance)
                             {
                                 return stringInstance.PrimitiveValue.AsString();
                             }
@@ -427,8 +424,8 @@ namespace Jint.Native
                             break;
 
                         case "Date":
-                            var dateInstance = _object as DateInstance;
-                            if (dateInstance != null)
+
+                            if (_object is DateInstance dateInstance)
                             {
                                 return dateInstance.ToDateTime();
                             }
@@ -436,8 +433,8 @@ namespace Jint.Native
                             break;
 
                         case "Boolean":
-                            var booleanInstance = _object as BooleanInstance;
-                            if (booleanInstance != null)
+
+                            if (_object is BooleanInstance booleanInstance)
                             {
                                 return booleanInstance.PrimitiveValue.AsBoolean();
                             }
@@ -445,8 +442,8 @@ namespace Jint.Native
                             break;
 
                         case "Function":
-                            var function = _object as FunctionInstance;
-                            if (function != null)
+
+                            if (_object is FunctionInstance function)
                             {
                                 return (Func<JsValue, JsValue[], JsValue>)function.Call;
                             }
@@ -454,8 +451,8 @@ namespace Jint.Native
                             break;
 
                         case "Number":
-                            var numberInstance = _object as NumberInstance;
-                            if (numberInstance != null)
+
+                            if (_object is NumberInstance numberInstance)
                             {
                                 return numberInstance.PrimitiveValue.AsNumber();
                             }
@@ -463,8 +460,8 @@ namespace Jint.Native
                             break;
 
                         case "RegExp":
-                            var regeExpInstance = _object as RegExpInstance;
-                            if (regeExpInstance != null)
+
+                            if (_object is RegExpInstance regeExpInstance)
                             {
                                 return regeExpInstance.Value;
                             }
diff --git a/Kooboo.Lib/Jint/Native/Json/JsonParser.cs b/Kooboo.Lib/Jint/Native/Json/JsonParser.cs
index 902ebd9e..1a7be5d0 100644
--- a/Kooboo.Lib/Jint/Native/Json/JsonParser.cs
+++ b/Kooboo.Lib/Jint/Native/Json/JsonParser.cs
@@ -98,7 +98,7 @@ namespace Jint.Native.Json
                 }
                 else
                 {
-                    throw new JavaScriptException(_engine.SyntaxError, string.Format("Expected hexadecimal digit:{0}", _source));
+                    throw new JavaScriptException(_engine.SyntaxError, $"Expected hexadecimal digit:{_source}");
                 }
             }
             return (char)code;
@@ -309,7 +309,7 @@ namespace Jint.Native.Json
 
                 if (ch <= 31)
                 {
-                    throw new JavaScriptException(_engine.SyntaxError, string.Format("Invalid character '{0}', position:{1}, string:{2}", ch, _index, _source));
+                    throw new JavaScriptException(_engine.SyntaxError, $"Invalid character '{ch}', position:{_index}, string:{_source}");
                 }
                 
                 if (ch == '\\')
@@ -736,7 +736,7 @@ namespace Jint.Native.Json
                 var name = Lex().Value.ToString();
                 if (PropertyNameContainsInvalidChar0To31(name))
                 {
-                    throw new JavaScriptException(_engine.SyntaxError, string.Format("Invalid character in property name '{0}'", name));
+                    throw new JavaScriptException(_engine.SyntaxError, $"Invalid character in property name '{name}'");
                 }
 
                 Expect(":");
@@ -865,7 +865,7 @@ namespace Jint.Native.Json
                 object value = _lookahead.Value;                
                 if(_lookahead.Type != Tokens.EOF)
                 {
-                    throw new JavaScriptException(_engine.SyntaxError, string.Format("Unexpected {0} {1}", _lookahead.Type, _lookahead.Value));
+                    throw new JavaScriptException(_engine.SyntaxError, $"Unexpected {_lookahead.Type} {_lookahead.Value}");
                 }
                 return jsv;
             }
diff --git a/Kooboo.Lib/Jint/Native/Json/JsonSerializer.cs b/Kooboo.Lib/Jint/Native/Json/JsonSerializer.cs
index 75a86712..146e966e 100644
--- a/Kooboo.Lib/Jint/Native/Json/JsonSerializer.cs
+++ b/Kooboo.Lib/Jint/Native/Json/JsonSerializer.cs
@@ -127,8 +127,7 @@ namespace Jint.Native.Json
                 var toJson = value.AsObject().Get("toJSON");
                 if (toJson.IsObject())
                 {
-                    var callableToJson = toJson.AsObject() as ICallable;
-                    if (callableToJson != null)
+                    if (toJson.AsObject() is ICallable callableToJson)
                     {
                         value = callableToJson.Call(value, Arguments.From(key));
                     }
diff --git a/Kooboo.Lib/Jint/Native/Object/ObjectConstructor.cs b/Kooboo.Lib/Jint/Native/Object/ObjectConstructor.cs
index a7190efe..2e530a82 100644
--- a/Kooboo.Lib/Jint/Native/Object/ObjectConstructor.cs
+++ b/Kooboo.Lib/Jint/Native/Object/ObjectConstructor.cs
@@ -143,8 +143,7 @@ namespace Jint.Native.Object
             var array = Engine.Array.Construct(Arguments.Empty);
             var n = 0;
 
-            var s = o as StringInstance;
-            if (s != null)
+            if (o is StringInstance s)
             {
                 for (var i = 0; i < s.PrimitiveValue.AsString().Length; i++)
                 {
diff --git a/Kooboo.Lib/Jint/Runtime/Debugger/DebugHandler.cs b/Kooboo.Lib/Jint/Runtime/Debugger/DebugHandler.cs
index 0a23ed13..8fc2b635 100644
--- a/Kooboo.Lib/Jint/Runtime/Debugger/DebugHandler.cs
+++ b/Kooboo.Lib/Jint/Runtime/Debugger/DebugHandler.cs
@@ -51,8 +51,7 @@ namespace Jint.Runtime.Debugger
 
         internal void AddToDebugCallStack(CallExpression callExpression)
         {
-            var identifier = callExpression.Callee as Identifier;
-            if (identifier != null)
+            if (callExpression.Callee is Identifier identifier)
             {
                 var stack = identifier.Name + "(";
                 var paramStrings = new List<string>();
@@ -61,8 +60,7 @@ namespace Jint.Runtime.Debugger
                 {
                     if (argument != null)
                     {
-                        var argIdentifier = argument as Identifier;
-                        paramStrings.Add(argIdentifier != null ? argIdentifier.Name : "null");
+                        paramStrings.Add(argument is Identifier argIdentifier ? argIdentifier.Name : "null");
                     }
                     else
                     {
@@ -115,8 +113,7 @@ namespace Jint.Runtime.Debugger
             }
             else if ((old == StepMode.Into || old == StepMode.None) && _stepMode == StepMode.Over)
             {
-                var expressionStatement = statement as ExpressionStatement;
-                if (expressionStatement != null && expressionStatement.Expression is CallExpression)
+                if (statement is ExpressionStatement expressionStatement && expressionStatement.Expression is CallExpression)
                 {
                     _callBackStepOverDepth = _debugCallStack.Count;
                 }
diff --git a/Kooboo.Lib/Jint/Runtime/ExpressionIntepreter.cs b/Kooboo.Lib/Jint/Runtime/ExpressionIntepreter.cs
index 15946c04..9120b130 100644
--- a/Kooboo.Lib/Jint/Runtime/ExpressionIntepreter.cs
+++ b/Kooboo.Lib/Jint/Runtime/ExpressionIntepreter.cs
@@ -846,12 +846,12 @@ namespace Jint.Runtime
 
             if (func == Undefined.Instance)
             {
-                throw new JavaScriptException(_engine.TypeError, r == null ? "" : string.Format("Object has no method '{0}'", (callee as Reference).GetReferencedName()));
+                throw new JavaScriptException(_engine.TypeError, r == null ? "" : $"Object has no method '{(callee as Reference).GetReferencedName()}'");
             }
 
             if (!func.IsObject())
             {
-                throw new JavaScriptException(_engine.TypeError, r == null ? "" : string.Format("Property '{0}' of object is not a function", (callee as Reference).GetReferencedName()));
+                throw new JavaScriptException(_engine.TypeError, r == null ? "" : $"Property '{(callee as Reference).GetReferencedName()}' of object is not a function");
             }
 
             var callable = func.TryCast<ICallable>();
diff --git a/Kooboo.Lib/Jint/Runtime/Interop/DefaultTypeConverter.cs b/Kooboo.Lib/Jint/Runtime/Interop/DefaultTypeConverter.cs
index 37f06fa0..61e994c1 100644
--- a/Kooboo.Lib/Jint/Runtime/Interop/DefaultTypeConverter.cs
+++ b/Kooboo.Lib/Jint/Runtime/Interop/DefaultTypeConverter.cs
@@ -32,7 +32,7 @@ namespace Jint.Runtime.Interop
                     return null;
                 }
 
-                throw new NotSupportedException(string.Format("Unable to convert null to '{0}'", type.FullName));
+                throw new NotSupportedException($"Unable to convert null to '{type.FullName}'");
             }
 
             // don't try to convert if value is derived from type
@@ -176,7 +176,7 @@ namespace Jint.Runtime.Interop
             {
                 var source = value as object[];
                 if (source == null)
-                    throw new ArgumentException(String.Format("Value of object[] type is expected, but actual type is {0}.", value.GetType()));
+                    throw new ArgumentException($"Value of object[] type is expected, but actual type is {value.GetType()}.");
 
                 var targetElementType = type.GetElementType();
                 var itemsConverted = source.Select(o => Convert(o, targetElementType, formatProvider)).ToArray();
@@ -196,7 +196,7 @@ namespace Jint.Runtime.Interop
         public virtual bool TryConvert(object value, Type type, IFormatProvider formatProvider, out object converted)
         {
             bool canConvert;
-            var key = value == null ? String.Format("Null->{0}", type) : String.Format("{0}->{1}", value.GetType(), type);
+            var key = value == null ? $"Null->{type}" : $"{value.GetType()}->{type}";
 
             if (!_knownConversions.TryGetValue(key, out canConvert))
             {
diff --git a/Kooboo.Lib/Jint/Runtime/Interop/MethodInfoFunctionInstance.cs b/Kooboo.Lib/Jint/Runtime/Interop/MethodInfoFunctionInstance.cs
index 1061a69a..e5f4fc8f 100644
--- a/Kooboo.Lib/Jint/Runtime/Interop/MethodInfoFunctionInstance.cs
+++ b/Kooboo.Lib/Jint/Runtime/Interop/MethodInfoFunctionInstance.cs
@@ -70,8 +70,7 @@ namespace Jint.Runtime.Interop
                             break;
                         }
 
-                        var lambdaExpression = parameters[i] as LambdaExpression;
-                        if (lambdaExpression != null)
+                        if (parameters[i] is LambdaExpression lambdaExpression)
                         {
                             parameters[i] = lambdaExpression.Compile();
                         }
diff --git a/Kooboo.Lib/Jint/Runtime/TypeConverter.cs b/Kooboo.Lib/Jint/Runtime/TypeConverter.cs
index dcd7e0f4..769b02f6 100644
--- a/Kooboo.Lib/Jint/Runtime/TypeConverter.cs
+++ b/Kooboo.Lib/Jint/Runtime/TypeConverter.cs
@@ -111,8 +111,7 @@ namespace Jint.Runtime
             
             if (o.IsObject())
             {
-                var p = o.AsObject() as IPrimitiveInstance;
-                if (p != null)
+                if (o.AsObject() is IPrimitiveInstance p)
                 {
                     o = p.PrimitiveValue;
                 }
@@ -253,8 +252,7 @@ namespace Jint.Runtime
         {
             if (o.IsObject())
             {
-                var p = o.AsObject() as IPrimitiveInstance;
-                if (p != null)
+                if (o.AsObject() is IPrimitiveInstance p)
                 {
                     o = p.PrimitiveValue;
                 }
diff --git a/Kooboo.Lib/Less/Engine/CacheDecorator.cs b/Kooboo.Lib/Less/Engine/CacheDecorator.cs
index 4fadb7ac..13c3d2ec 100644
--- a/Kooboo.Lib/Less/Engine/CacheDecorator.cs
+++ b/Kooboo.Lib/Less/Engine/CacheDecorator.cs
@@ -31,7 +31,7 @@ namespace dotless.Core
             var cacheKey = fileName + hash;
             if (!Cache.Exists(cacheKey))
             {
-                Logger.Debug(String.Format("Inserting cache entry for {0}", cacheKey));
+                Logger.Debug($"Inserting cache entry for {cacheKey}");
 
                 var css = Underlying.TransformToCss(source, fileName);
                 var dependancies = new[] { fileName }.Concat(GetImports());
@@ -40,7 +40,7 @@ namespace dotless.Core
                 
                 return css;
             }
-            Logger.Debug(String.Format("Retrieving cache entry {0}", cacheKey));
+            Logger.Debug($"Retrieving cache entry {cacheKey}");
             return Cache.Retrieve(cacheKey);
         }
 
diff --git a/Kooboo.Lib/Less/Engine/ParameterDecorator.cs b/Kooboo.Lib/Less/Engine/ParameterDecorator.cs
index 01e7af15..c56724b6 100644
--- a/Kooboo.Lib/Less/Engine/ParameterDecorator.cs
+++ b/Kooboo.Lib/Less/Engine/ParameterDecorator.cs
@@ -29,7 +29,7 @@ namespace dotless.Core
             var parser = new Parser.Parser();
             foreach (var parameter in parameters)
             {
-                var variableDeclaration = string.Format("@{0}: {1};", parameter.Key, parameter.Value);
+                var variableDeclaration = $"@{parameter.Key}: {parameter.Value};";
 
                 try
                 {
diff --git a/Kooboo.Lib/Less/Parser/Functions/ColorFunction.cs b/Kooboo.Lib/Less/Parser/Functions/ColorFunction.cs
index 5dd43fc5..949cb022 100644
--- a/Kooboo.Lib/Less/Parser/Functions/ColorFunction.cs
+++ b/Kooboo.Lib/Less/Parser/Functions/ColorFunction.cs
@@ -21,7 +21,7 @@
             }
             catch (FormatException ex)
             {
-                throw new ParsingException(string.Format("Invalid RGB color string '{0}'", rgb), ex, Location, null);
+                throw new ParsingException($"Invalid RGB color string '{rgb}'", ex, Location, null);
             }
         }
     }
diff --git a/Kooboo.Lib/Less/Parser/Functions/ColorFunctionBase.cs b/Kooboo.Lib/Less/Parser/Functions/ColorFunctionBase.cs
index 3aa368dc..e662fe86 100644
--- a/Kooboo.Lib/Less/Parser/Functions/ColorFunctionBase.cs
+++ b/Kooboo.Lib/Less/Parser/Functions/ColorFunctionBase.cs
@@ -10,7 +10,7 @@ namespace dotless.Core.Parser.Functions
     {
         protected override Node Evaluate(Env env)
         {
-            Guard.ExpectMinArguments(1, Arguments.Count(), this, Location);
+            Guard.ExpectMinArguments(1, Arguments.Count, this, Location);
             Guard.ExpectNode<Color>(Arguments[0], this, Arguments[0].Location);
 
             var color = Arguments[0] as Color;
diff --git a/Kooboo.Lib/Less/Parser/Functions/DataUriFunction.cs b/Kooboo.Lib/Less/Parser/Functions/DataUriFunction.cs
index 650aa048..7c04a275 100644
--- a/Kooboo.Lib/Less/Parser/Functions/DataUriFunction.cs
+++ b/Kooboo.Lib/Less/Parser/Functions/DataUriFunction.cs
@@ -16,7 +16,7 @@
             string base64 = ConvertFileToBase64(filename);
             string mimeType = GetMimeType(filename);
 
-            return new TextNode(string.Format("url(\"data:{0};base64,{1}\")", mimeType, base64));
+            return new TextNode($"url(\"data:{mimeType};base64,{base64}\")");
         }
 
         private string GetDataUriFilename()
@@ -32,7 +32,7 @@
             var filename = ((Quoted)filenameNode).Value;
 
             Guard.Expect(() => !(filename.StartsWith("http://") || filename.StartsWith("https://")),
-                string.Format("Invalid filename passed to data-uri '{0}'. Filename must be a local file", filename), Location);
+                $"Invalid filename passed to data-uri '{filename}'. Filename must be a local file", Location);
 
             return filename;
         }
@@ -48,7 +48,7 @@
             {
                 // this is more general than just a check to see whether the file exists
                 // it could fail for other reasons like security permissions
-                throw new ParsingException(String.Format("Data-uri function could not read file '{0}'", filename), e, Location);
+                throw new ParsingException($"Data-uri function could not read file '{filename}'", e, Location);
             }
             return base64;
         }
diff --git a/Kooboo.Lib/Less/Parser/Functions/FormatStringFunction.cs b/Kooboo.Lib/Less/Parser/Functions/FormatStringFunction.cs
index d2b20b31..d95edc60 100644
--- a/Kooboo.Lib/Less/Parser/Functions/FormatStringFunction.cs
+++ b/Kooboo.Lib/Less/Parser/Functions/FormatStringFunction.cs
@@ -30,7 +30,7 @@ namespace dotless.Core.Parser.Functions
             }
             catch (FormatException e)
             {
-                throw new ParserException(string.Format("Error in formatString :{0}", e.Message), e);
+                throw new ParserException($"Error in formatString :{e.Message}", e);
             }
 
             return new Quoted(result, false);
diff --git a/Kooboo.Lib/Less/Parser/Functions/Function.cs b/Kooboo.Lib/Less/Parser/Functions/Function.cs
index 9837b547..704792ca 100644
--- a/Kooboo.Lib/Less/Parser/Functions/Function.cs
+++ b/Kooboo.Lib/Less/Parser/Functions/Function.cs
@@ -26,7 +26,7 @@ namespace dotless.Core.Parser.Functions
 
         public override string ToString()
         {
-            return string.Format("function '{0}'", Name.ToLowerInvariant());
+            return $"function '{Name.ToLowerInvariant()}'";
         }
 
         /// <summary>
diff --git a/Kooboo.Lib/Less/Parser/Functions/HexFunction.cs b/Kooboo.Lib/Less/Parser/Functions/HexFunction.cs
index 1035d9b0..9c855048 100644
--- a/Kooboo.Lib/Less/Parser/Functions/HexFunction.cs
+++ b/Kooboo.Lib/Less/Parser/Functions/HexFunction.cs
@@ -12,7 +12,7 @@ namespace dotless.Core.Parser.Functions
             WarnNotSupportedByLessJS("hex(number)");
 
             if (!string.IsNullOrEmpty(number.Unit))
-                throw new ParsingException(string.Format("Expected unitless number in function 'hex', found {0}", number.ToCSS(env)), number.Location);
+                throw new ParsingException($"Expected unitless number in function 'hex', found {number.ToCSS(env)}", number.Location);
 
             number.Value = Clamp(number.Value, 255, 0);
 
diff --git a/Kooboo.Lib/Less/Parser/Functions/ListFunctionBase.cs b/Kooboo.Lib/Less/Parser/Functions/ListFunctionBase.cs
index ef67f46c..2d019997 100644
--- a/Kooboo.Lib/Less/Parser/Functions/ListFunctionBase.cs
+++ b/Kooboo.Lib/Less/Parser/Functions/ListFunctionBase.cs
@@ -30,7 +30,7 @@
             }
 
             // We should never get here due to the type guard...
-            throw new ParsingException(string.Format("First argument to the list function was a {0}", Arguments[0].GetType().Name.ToLowerInvariant()), Location);
+            throw new ParsingException($"First argument to the list function was a {Arguments[0].GetType().Name.ToLowerInvariant()}", Location);
         }
 
         protected abstract Node Eval(Env env, Node[] list, Node[] args);
diff --git a/Kooboo.Lib/Less/Parser/Infrastructure/Env.cs b/Kooboo.Lib/Less/Parser/Infrastructure/Env.cs
index 28995346..121188cc 100644
--- a/Kooboo.Lib/Less/Parser/Infrastructure/Env.cs
+++ b/Kooboo.Lib/Less/Parser/Infrastructure/Env.cs
@@ -1,4 +1,5 @@
 ﻿using dotless.Core.Utils;
+using System.Linq;
 
 namespace dotless.Core.Parser.Infrastructure
 {
@@ -121,8 +122,7 @@ namespace dotless.Core.Parser.Infrastructure
 
             _plugins.Add(plugin);
 
-            IFunctionPlugin functionPlugin = plugin as IFunctionPlugin;
-            if (functionPlugin != null)
+            if (plugin is IFunctionPlugin functionPlugin)
             {
                 foreach(KeyValuePair<string, Type> function in functionPlugin.GetFunctions())
                 {
@@ -130,8 +130,7 @@ namespace dotless.Core.Parser.Infrastructure
 
                     if (_functionTypes.ContainsKey(functionName))
                     {
-                        string message = string.Format("Function '{0}' already exists in environment but is added by plugin {1}",
-                            functionName, plugin.GetName());
+                        string message = $"Function '{functionName}' already exists in environment but is added by plugin {plugin.GetName()}";
                         throw new InvalidOperationException(message);
                     }
 
@@ -234,15 +233,14 @@ namespace dotless.Core.Parser.Infrastructure
                                 if (!Frames.Any(frame => frame.IsEqualOrClonedFrom(matchedClosure.Ruleset)))
                                     return true;
 
-                                var mixinDef = matchedClosure.Ruleset as MixinDefinition;
-                                if (mixinDef != null)
+                                if (matchedClosure.Ruleset is MixinDefinition mixinDef)
                                     return mixinDef.Condition != null;
 
                                 return false;
                         }
                     )
                 )
-                .FirstOrDefault(matchedClosuresList => matchedClosuresList.Count() != 0);
+                .FirstOrDefault(matchedClosuresList => matchedClosuresList.Any());
 
             if (matchingRuleSets != null) {
                 return matchingRuleSets;
@@ -359,9 +357,7 @@ namespace dotless.Core.Parser.Infrastructure
                 match.AddExtension(selector,env);
             }
 
-            if (Parent != null) {
-                Parent.AddExtension(selector, extends, env);
-            }
+            Parent?.AddExtension(selector, extends, env);
         }
 
         public void RegisterExtensionsFrom(Env child) {
diff --git a/Kooboo.Lib/Less/Parser/Parsers.cs b/Kooboo.Lib/Less/Parser/Parsers.cs
index 2d0936dd..2334259a 100644
--- a/Kooboo.Lib/Less/Parser/Parsers.cs
+++ b/Kooboo.Lib/Less/Parser/Parsers.cs
@@ -1032,7 +1032,7 @@ namespace dotless.Core.Parser
                     (val = Quoted(parser) || parser.Tokenizer.Match(@"[\w-]+")))
                     // Would be nice if this wasn't one block - we could make Attribute node
                     // see CommentsInSelectorAttributes in CommentsFixture.cs
-                    attr = string.Format("{0}{1}{2}", key, op, val.ToCSS(new Env())); 
+                    attr = $"{key}{op}{val.ToCSS(new Env())}"; 
                 else
                     attr = key.ToString();
             }
diff --git a/Kooboo.Lib/Less/Parser/Tokenizer.cs b/Kooboo.Lib/Less/Parser/Tokenizer.cs
index a54c71cb..63c84e7e 100644
--- a/Kooboo.Lib/Less/Parser/Tokenizer.cs
+++ b/Kooboo.Lib/Less/Parser/Tokenizer.cs
@@ -98,7 +98,7 @@ namespace dotless.Core.Parser
                             continue;
                         } else
                         {
-                            throw new ParsingException(string.Format("Missing closing quote ({0})", c), GetNodeLocation(i));
+                            throw new ParsingException($"Missing closing quote ({c})", GetNodeLocation(i));
                         }
                     }
                     
diff --git a/Kooboo.Lib/Less/Parser/Tree/Color.cs b/Kooboo.Lib/Less/Parser/Tree/Color.cs
index 21200bca..349003eb 100644
--- a/Kooboo.Lib/Less/Parser/Tree/Color.cs
+++ b/Kooboo.Lib/Less/Parser/Tree/Color.cs
@@ -341,7 +341,7 @@ namespace dotless.Core.Parser.Tree
             {
                 var operable = other as IOperable;
                 if(operable == null)
-                    throw new ParsingException(string.Format("Unable to convert right hand side of {0} to a color", op.Operator), op.Location);
+                    throw new ParsingException($"Unable to convert right hand side of {op.Operator} to a color", op.Location);
 
                 otherColor = operable.ToColor();
             }
diff --git a/Kooboo.Lib/Less/Parser/Tree/Condition.cs b/Kooboo.Lib/Less/Parser/Tree/Condition.cs
index ef8f0bcc..3aa0a4cd 100644
--- a/Kooboo.Lib/Less/Parser/Tree/Condition.cs
+++ b/Kooboo.Lib/Less/Parser/Tree/Condition.cs
@@ -50,15 +50,14 @@
                     return ToBool(lValue) && ToBool(rValue);
                 default:
                     int result;
-                    IComparable lValueComparable = lValue as IComparable;
-                    if (lValueComparable != null)
+
+                    if (lValue is IComparable lValueComparable)
                     {
                         result = lValueComparable.CompareTo(rValue);
                     }
                     else
                     {
-                        IComparable rValueComparable = rValue as IComparable;
-                        if (rValueComparable != null)
+                        if (rValue is IComparable rValueComparable)
                         {
                             result = rValueComparable.CompareTo(lValue);
 
diff --git a/Kooboo.Lib/Less/Parser/Tree/CssFunction.cs b/Kooboo.Lib/Less/Parser/Tree/CssFunction.cs
index 2a295c90..18340cf3 100644
--- a/Kooboo.Lib/Less/Parser/Tree/CssFunction.cs
+++ b/Kooboo.Lib/Less/Parser/Tree/CssFunction.cs
@@ -11,7 +11,7 @@ namespace dotless.Core.Parser.Tree
 
         public override void AppendCSS(Env env)
         {
-            env.Output.Append(string.Format("{0}({1})", Name, Value.ToCSS(env)));
+            env.Output.Append($"{Name}({Value.ToCSS(env)})");
         }
     }
 
diff --git a/Kooboo.Lib/Less/Parser/Tree/Media.cs b/Kooboo.Lib/Less/Parser/Tree/Media.cs
index 5fa518df..03b7921a 100644
--- a/Kooboo.Lib/Less/Parser/Tree/Media.cs
+++ b/Kooboo.Lib/Less/Parser/Tree/Media.cs
@@ -104,8 +104,8 @@ namespace dotless.Core.Parser.Tree
             for (int i = 0; i < path.Count; i++)
             {
                 Node pathComponent;
-                Value value = path[i].Features as Value;
-                if (value != null)
+
+                if (path[i].Features is Value value)
                 {
                     pathComponent = value.Values;
                 }
diff --git a/Kooboo.Lib/Less/Parser/Tree/MixinCall.cs b/Kooboo.Lib/Less/Parser/Tree/MixinCall.cs
index d4080010..0afbb7ba 100644
--- a/Kooboo.Lib/Less/Parser/Tree/MixinCall.cs
+++ b/Kooboo.Lib/Less/Parser/Tree/MixinCall.cs
@@ -100,9 +100,7 @@ namespace dotless.Core.Parser.Tree
 
             if (!found)
             {
-                var message = String.Format("No matching definition was found for `{0}({1})`",
-                                            Selector.ToCSS(env).Trim(),
-                                            Arguments.Select(a => a.Value.ToCSS(env)).JoinStrings(env.Compress ? "," : ", "));
+                var message = $"No matching definition was found for `{Selector.ToCSS(env).Trim()}({Arguments.Select(a => a.Value.ToCSS(env)).JoinStrings(env.Compress ? "," : ", ")})`";
                 throw new ParsingException(message, Location);
             }
 
diff --git a/Kooboo.Lib/Less/Parser/Tree/MixinDefinition.cs b/Kooboo.Lib/Less/Parser/Tree/MixinDefinition.cs
index ccbacf08..1beab38a 100644
--- a/Kooboo.Lib/Less/Parser/Tree/MixinDefinition.cs
+++ b/Kooboo.Lib/Less/Parser/Tree/MixinDefinition.cs
@@ -91,8 +91,7 @@ namespace dotless.Core.Parser.Tree
                 }
                 else
                     throw new ParsingException(
-                        String.Format("wrong number of arguments for {0} ({1} for {2})", Name,
-                                      args != null ? args.Count : 0, _arity), Location);
+                        $"wrong number of arguments for {Name} ({(args != null ? args.Count : 0)} for {_arity})", Location);
             }
 
             var argumentNodes = new List<Node>();
@@ -142,8 +141,8 @@ namespace dotless.Core.Parser.Tree
                 else if (rule is Import)
                 {
                     var potentiolNodeList = rule.Evaluate(context);
-                    var nodeList = potentiolNodeList as NodeList;
-                    if (nodeList != null)
+
+                    if (potentiolNodeList is NodeList nodeList)
                     {
                         newRules.AddRange(nodeList);
                     }
diff --git a/Kooboo.Lib/Less/Parser/Tree/Operation.cs b/Kooboo.Lib/Less/Parser/Tree/Operation.cs
index 91ea61c2..5b0f5fc5 100644
--- a/Kooboo.Lib/Less/Parser/Tree/Operation.cs
+++ b/Kooboo.Lib/Less/Parser/Tree/Operation.cs
@@ -38,11 +38,10 @@
 
             try
             {
-                var operable = a as IOperable;
-                if (operable != null)
+                if (a is IOperable operable)
                     return operable.Operate(this, b).ReducedFrom<Node>(this);
 
-                throw new ParsingException(string.Format("Cannot apply operator {0} to the left hand side: {1}", Operator, a.ToCSS(env)), Location);
+                throw new ParsingException($"Cannot apply operator {Operator} to the left hand side: {a.ToCSS(env)}", Location);
             }
             catch (DivideByZeroException e)
             {
diff --git a/Kooboo.Lib/Less/Parser/Tree/Root.cs b/Kooboo.Lib/Less/Parser/Tree/Root.cs
index 88dcbd5d..96e07b46 100644
--- a/Kooboo.Lib/Less/Parser/Tree/Root.cs
+++ b/Kooboo.Lib/Less/Parser/Tree/Root.cs
@@ -51,7 +51,7 @@ namespace dotless.Core.Parser.Tree
                     }
                     catch (Exception ex)
                     {
-                        string message = string.Format("Plugin '{0}' failed during visiting with error '{1}'", plugin.GetName(), ex.Message);
+                        string message = $"Plugin '{plugin.GetName()}' failed during visiting with error '{ex.Message}'";
                         throw new ParserException(message, ex);
                     }
                 });
diff --git a/Kooboo.Lib/Less/Parser/Tree/Ruleset.cs b/Kooboo.Lib/Less/Parser/Tree/Ruleset.cs
index e2780cad..af730e16 100644
--- a/Kooboo.Lib/Less/Parser/Tree/Ruleset.cs
+++ b/Kooboo.Lib/Less/Parser/Tree/Ruleset.cs
@@ -255,7 +255,7 @@ namespace dotless.Core.Parser.Tree
             {
                 if (!env.Compress && env.Debug && Location != null)
                 {
-                    env.Output.Append(string.Format("/* {0}:L{1} */\n", Location.FileName, Zone.GetLineNumber(Location)));
+                    env.Output.Append($"/* {Location.FileName}:L{Zone.GetLineNumber(Location)} */\n");
                 }
                 paths.AppendSelectors(context, Selectors);
             }
diff --git a/Kooboo.Lib/Less/Parser/Tree/Url.cs b/Kooboo.Lib/Less/Parser/Tree/Url.cs
index c96258f0..c3cb1174 100644
--- a/Kooboo.Lib/Less/Parser/Tree/Url.cs
+++ b/Kooboo.Lib/Less/Parser/Tree/Url.cs
@@ -36,8 +36,7 @@
         /// <returns></returns>
         public string GetUnadjustedUrl()
         {
-            var textValue = Value as TextNode;
-            if (textValue != null)
+            if (Value is TextNode textValue)
             {
                 return textValue.Value;
             }
@@ -47,8 +46,7 @@
 
         private Node AdjustUrlPath(Node value)
         {
-            var textValue = value as TextNode;
-            if (textValue != null)
+            if (value is TextNode textValue)
                 return AdjustUrlPath(textValue);
             return value;
         }
diff --git a/Kooboo.Lib/Less/Plugins/GenericPluginConfigurator.cs b/Kooboo.Lib/Less/Plugins/GenericPluginConfigurator.cs
index fe497bd1..83c762f3 100644
--- a/Kooboo.Lib/Less/Plugins/GenericPluginConfigurator.cs
+++ b/Kooboo.Lib/Less/Plugins/GenericPluginConfigurator.cs
@@ -1,4 +1,5 @@
-﻿namespace dotless.Core.Plugins
+﻿using System.Linq;
+namespace dotless.Core.Plugins
 {
     using System;
     using System.Collections.Generic;
@@ -40,7 +41,7 @@
             ConstructorInfo parameterConstructor;
             GetConstructorInfos(out parameterConstructor, out defaultConstructor);
 
-            if (pluginParameters == null || pluginParameters.Count() == 0 || pluginParameters.All(parameter => parameter.Value == null))
+            if (pluginParameters == null || !pluginParameters.Any()|| pluginParameters.All(parameter => parameter.Value == null))
             {
                 if (defaultConstructor == null)
                 {
diff --git a/Kooboo.Lib/Less/Plugins/PluginFinder.cs b/Kooboo.Lib/Less/Plugins/PluginFinder.cs
index 45e76b8d..876d1259 100644
--- a/Kooboo.Lib/Less/Plugins/PluginFinder.cs
+++ b/Kooboo.Lib/Less/Plugins/PluginFinder.cs
@@ -31,11 +31,9 @@
         /// </summary>
         public static string GetDescription(Type pluginType)
         {
-            DescriptionAttribute description = pluginType
+            if (pluginType
                 .GetCustomAttributes(typeof(DescriptionAttribute), true)
-                .FirstOrDefault() as DescriptionAttribute;
-
-            if (description != null)
+                .FirstOrDefault() is DescriptionAttribute description)
                 return description.Description;
             else
                 return "No Description";
@@ -46,11 +44,9 @@
         /// </summary>
         public static string GetName(Type pluginType)
         {
-            DisplayNameAttribute name = pluginType
+            if (pluginType
                 .GetCustomAttributes(typeof(DisplayNameAttribute), true)
-                .FirstOrDefault() as DisplayNameAttribute;
-
-            if (name != null)
+                .FirstOrDefault() is DisplayNameAttribute name)
                 return name.DisplayName;
             else
                 return pluginType.Name;
diff --git a/Kooboo.Lib/Less/Plugins/RtlPlugin.cs b/Kooboo.Lib/Less/Plugins/RtlPlugin.cs
index 8ceb3a01..16419534 100644
--- a/Kooboo.Lib/Less/Plugins/RtlPlugin.cs
+++ b/Kooboo.Lib/Less/Plugins/RtlPlugin.cs
@@ -128,8 +128,7 @@
 
         public override Node Execute(Node node, out bool visitDeeper)
         {
-            Rule rule = node as Rule;
-            if (rule != null)
+            if (node is Rule rule)
             {
                 visitDeeper = false;
 
@@ -265,26 +264,20 @@
 
             public Node Visit(Node node)
             {
-                TextNode tn = node as TextNode;
-
-                if (tn != null)
+                if (node is TextNode tn)
                 {
                     _textContent.Append(tn.Value);
                     _nodeContent.Add(tn);
                     return node;
                 }
 
-                Number number = node as Number;
-
-                if (number != null)
+                if (node is Number number)
                 {
                     _nodeContent.Add(number);
                     return node;
                 }
 
-                Keyword keyword = node as Keyword;
-
-                if (keyword != null)
+                if (node is Keyword keyword)
                 {
                     _nodeContent.Add(keyword);
                     _textContent.Append(keyword.Value);
diff --git a/Kooboo.Lib/Less/Stylizers/HtmlStylizer.cs b/Kooboo.Lib/Less/Stylizers/HtmlStylizer.cs
index f5b17dde..1f539d2f 100644
--- a/Kooboo.Lib/Less/Stylizers/HtmlStylizer.cs
+++ b/Kooboo.Lib/Less/Stylizers/HtmlStylizer.cs
@@ -6,7 +6,7 @@ namespace dotless.Core.Stylizers
     {
         public string Stylize(Zone zone)
         {
-            var fileStr = string.IsNullOrEmpty(zone.FileName) ? "" : string.Format(" in '{0}'", zone.FileName);
+            var fileStr = string.IsNullOrEmpty(zone.FileName) ? "" : $" in '{zone.FileName}'";
 
             return string.Format(@"
 <div id=""less-error-message"">
diff --git a/Kooboo.Lib/Less/Stylizers/PlainStylizer.cs b/Kooboo.Lib/Less/Stylizers/PlainStylizer.cs
index d0fcf202..4f9ae26a 100644
--- a/Kooboo.Lib/Less/Stylizers/PlainStylizer.cs
+++ b/Kooboo.Lib/Less/Stylizers/PlainStylizer.cs
@@ -6,7 +6,7 @@
     {
         public string Stylize(Zone zone)
         {
-            var fileStr = string.IsNullOrEmpty(zone.FileName) ? "" : string.Format(" in file '{0}'", zone.FileName);
+            var fileStr = string.IsNullOrEmpty(zone.FileName) ? "" : $" in file '{zone.FileName}'";
 
             var callStr = "";
 
diff --git a/Kooboo.Lib/Less/Utils/Guard.cs b/Kooboo.Lib/Less/Utils/Guard.cs
index 49a4562f..154b84a8 100644
--- a/Kooboo.Lib/Less/Utils/Guard.cs
+++ b/Kooboo.Lib/Less/Utils/Guard.cs
@@ -15,7 +15,7 @@ namespace dotless.Core.Utils
             if (actual == expected)
                 return;
 
-            var message = string.Format("Expected '{0}' in {1}, found '{2}'", expected, @in, actual);
+            var message = $"Expected '{expected}' in {@in}, found '{actual}'";
 
             throw new ParsingException(message, location);
         }
@@ -35,7 +35,7 @@ namespace dotless.Core.Utils
 
             var expected = typeof (TExpected).Name.ToLowerInvariant();
 
-            var message = string.Format("Expected {0} in {1}, found {2}", expected, @in, actual.ToCSS(new Env()));
+            var message = $"Expected {expected} in {@in}, found {actual.ToCSS(new Env())}";
 
             throw new ParsingException(message, location);
         }
@@ -48,7 +48,7 @@ namespace dotless.Core.Utils
             var expected1 = typeof(TExpected1).Name.ToLowerInvariant();
             var expected2 = typeof(TExpected2).Name.ToLowerInvariant();
 
-            var message = string.Format("Expected {0} or {1} in {2}, found {3}", expected1, expected2, @in, actual.ToCSS(new Env()));
+            var message = $"Expected {expected1} or {expected2} in {@in}, found {actual.ToCSS(new Env())}";
 
             throw new ParsingException(message, location);
         }
@@ -67,7 +67,7 @@ namespace dotless.Core.Utils
             if (actual == expected)
                 return;
 
-            var message = string.Format("Expected {0} arguments in {1}, found {2}", expected, @in, actual);
+            var message = $"Expected {expected} arguments in {@in}, found {actual}";
 
             throw new ParsingException(message, location);
         }
@@ -77,7 +77,7 @@ namespace dotless.Core.Utils
             if (actual >= expected)
                 return;
 
-            var message = string.Format("Expected at least {0} arguments in {1}, found {2}", expected, @in, actual);
+            var message = $"Expected at least {expected} arguments in {@in}, found {actual}";
 
             throw new ParsingException(message, location);
         }
@@ -87,7 +87,7 @@ namespace dotless.Core.Utils
             if (actual <= expected)
                 return;
 
-            var message = string.Format("Expected at most {0} arguments in {1}, found {2}", expected, @in, actual);
+            var message = $"Expected at most {expected} arguments in {@in}, found {actual}";
 
             throw new ParsingException(message, location);
         }
diff --git a/Kooboo.Lib/Less/Utils/NodeHelper.cs b/Kooboo.Lib/Less/Utils/NodeHelper.cs
index 522ad403..cb5aa8ad 100644
--- a/Kooboo.Lib/Less/Utils/NodeHelper.cs
+++ b/Kooboo.Lib/Less/Utils/NodeHelper.cs
@@ -16,8 +16,8 @@ namespace dotless.Core.Utils
                 if (node is TNode)
                 {
                     var evaluated = node.Evaluate(env);
-                    var nodes = evaluated as IEnumerable<Node>;
-                    if (nodes != null)
+
+                    if (evaluated is IEnumerable<Node> nodes)
                     {
                         rules.InsertRange(i + 1, nodes);
                         rules.RemoveAt(i);
diff --git a/Kooboo.Lib/Less/configuration/XmlConfigurationInterpreter.cs b/Kooboo.Lib/Less/configuration/XmlConfigurationInterpreter.cs
index 7230dbdd..fc93e03d 100644
--- a/Kooboo.Lib/Less/configuration/XmlConfigurationInterpreter.cs
+++ b/Kooboo.Lib/Less/configuration/XmlConfigurationInterpreter.cs
@@ -151,13 +151,13 @@ namespace dotless.Core.configuration
                 }
 
                 string name = GetStringValue(node, "name");
-                var plugin = dotlessPlugins.Where(p => p.Name.Equals(name, StringComparison.InvariantCultureIgnoreCase))
-                    .FirstOrDefault();
+                var plugin = dotlessPlugins.FirstOrDefault(p => p.Name.Equals(name, StringComparison.InvariantCultureIgnoreCase))
+;
 
                 if (plugin == null)
                 {
                     throw new Exception(
-                        string.Format("Cannot find plugin called {0}. If it is an external plugin, make sure the assembly is referenced.", name));
+                        $"Cannot find plugin called {name}. If it is an external plugin, make sure the assembly is referenced.");
                 }
                 var pluginParameters = plugin.GetParameters();
 
@@ -167,13 +167,13 @@ namespace dotless.Core.configuration
                     var pluginParameterValue = GetStringValue(pluginParameter, "value");
 
                     var actualParameter = pluginParameters
-                        .Where(p => p.Name.Equals(pluginParameterName, StringComparison.InvariantCultureIgnoreCase))
-                        .FirstOrDefault();
+                        .FirstOrDefault(p => p.Name.Equals(pluginParameterName, StringComparison.InvariantCultureIgnoreCase))
+;
 
                     if (actualParameter == null)
                     {
                         throw new Exception(
-                            string.Format("Cannot find plugin argument {0} in plugin {1}", pluginParameterName, name));
+                            $"Cannot find plugin argument {pluginParameterName} in plugin {name}");
                     }
 
                     actualParameter.SetValue(pluginParameterValue);
diff --git a/Kooboo.Lib/Multipart/AttributeReader.cs b/Kooboo.Lib/Multipart/AttributeReader.cs
index 8c7418d2..7d584974 100644
--- a/Kooboo.Lib/Multipart/AttributeReader.cs
+++ b/Kooboo.Lib/Multipart/AttributeReader.cs
@@ -20,7 +20,7 @@ namespace Kooboo.Lib.NETMultiplePart
             foreach (var item in segs)
             {
                 var attributes = GetAttribute(item);
-                if (attributes != null && attributes.Count()>0)
+                if (attributes != null && attributes.Any())
                 {
                     foreach (var dict in attributes)
                     {
diff --git a/Kooboo.Lib/NUglify/Css/CssParser.cs b/Kooboo.Lib/NUglify/Css/CssParser.cs
index 8080040b..719bcfd1 100644
--- a/Kooboo.Lib/NUglify/Css/CssParser.cs
+++ b/Kooboo.Lib/NUglify/Css/CssParser.cs
@@ -3763,10 +3763,7 @@ namespace NUglify.Css
         private TokenType NextToken()
         {
             m_currentToken = m_scanner.NextToken();
-            if (EchoWriter != null)
-            {
-                EchoWriter.Write(CurrentTokenText);
-            }
+            EchoWriter?.Write(CurrentTokenText);
 
             m_encounteredNewLine = m_scanner.GotEndOfLine;
             while (CurrentTokenType == TokenType.Comment)
@@ -3778,10 +3775,7 @@ namespace NUglify.Css
                     NewLine();
                 }
                 m_currentToken = m_scanner.NextToken();
-                if (EchoWriter != null)
-                {
-                    EchoWriter.Write(CurrentTokenText);
-                }
+                EchoWriter?.Write(CurrentTokenText);
 
                 m_encounteredNewLine = m_encounteredNewLine || m_scanner.GotEndOfLine;
             }
@@ -3792,10 +3786,7 @@ namespace NUglify.Css
         private TokenType NextRawToken()
         {
             m_currentToken = m_scanner.NextToken();
-            if (EchoWriter != null)
-            {
-                EchoWriter.Write(CurrentTokenText);
-            }
+            EchoWriter?.Write(CurrentTokenText);
 
             m_encounteredNewLine = m_scanner.GotEndOfLine;
             return CurrentTokenType;
@@ -3811,10 +3802,7 @@ namespace NUglify.Css
             {
                 // get the next token
                 m_currentToken = m_scanner.NextToken();
-                if (EchoWriter != null)
-                {
-                    EchoWriter.Write(CurrentTokenText);
-                }
+                EchoWriter?.Write(CurrentTokenText);
 
                 m_encounteredNewLine = m_scanner.GotEndOfLine;
                 while (CurrentTokenType == TokenType.Space || CurrentTokenType == TokenType.Comment)
@@ -3900,10 +3888,7 @@ namespace NUglify.Css
 
                     // next token
                     m_currentToken = m_scanner.NextToken();
-                    if (EchoWriter != null)
-                    {
-                        EchoWriter.Write(CurrentTokenText);
-                    }
+                    EchoWriter?.Write(CurrentTokenText);
 
                     m_encounteredNewLine = m_encounteredNewLine || m_scanner.GotEndOfLine;
                 }
diff --git a/Kooboo.Lib/NUglify/Helpers/ReflectionHelper.cs b/Kooboo.Lib/NUglify/Helpers/ReflectionHelper.cs
index b3c8ac62..5ac4c38e 100644
--- a/Kooboo.Lib/NUglify/Helpers/ReflectionHelper.cs
+++ b/Kooboo.Lib/NUglify/Helpers/ReflectionHelper.cs
@@ -61,8 +61,7 @@ namespace NUglify
         {
             foreach (var attribute in memberInfo.GetCustomAttributes(true))
             {
-                var attributeT = attribute as T;
-                if (attributeT != null)
+                if (attribute is T attributeT)
                 {
                     return attributeT;
                 }
diff --git a/Kooboo.Lib/NUglify/Html/HtmlMinifier.cs b/Kooboo.Lib/NUglify/Html/HtmlMinifier.cs
index f7641bfa..f07d958a 100644
--- a/Kooboo.Lib/NUglify/Html/HtmlMinifier.cs
+++ b/Kooboo.Lib/NUglify/Html/HtmlMinifier.cs
@@ -171,9 +171,9 @@ namespace NUglify.Html
 
         private void TrimNodeOnEnd(HtmlNode node)
         {
-            if (node is HtmlElement)
+            if (node is HtmlElement htmlElement)
             {
-                TrimNodeOnEnd((HtmlElement)node);
+                TrimNodeOnEnd(htmlElement);
             }
         }
 
diff --git a/Kooboo.Lib/NUglify/Html/HtmlNode.cs b/Kooboo.Lib/NUglify/Html/HtmlNode.cs
index 5d30062a..39c86cb2 100644
--- a/Kooboo.Lib/NUglify/Html/HtmlNode.cs
+++ b/Kooboo.Lib/NUglify/Html/HtmlNode.cs
@@ -63,8 +63,7 @@ namespace NUglify.Html
             var next = NextSibling;
             while (next != null)
             {
-                var nextElement = next as T;
-                if (nextElement != null)
+                if (next is T nextElement)
                 {
                     return nextElement;
                 }
diff --git a/Kooboo.Lib/NUglify/Html/HtmlTagDescriptor.cs b/Kooboo.Lib/NUglify/Html/HtmlTagDescriptor.cs
index 951d0959..69f1ae5d 100644
--- a/Kooboo.Lib/NUglify/Html/HtmlTagDescriptor.cs
+++ b/Kooboo.Lib/NUglify/Html/HtmlTagDescriptor.cs
@@ -361,10 +361,9 @@ namespace NUglify.Html
             // - the element is empty, 
             // - or if the first thing inside the body element is not a space character or a comment, except if the first thing inside the body element is a meta, link, script, style, or template element. 
             var content = parent.FirstChild;
-            var text = content as HtmlText;
             var element = content as HtmlElement;
             return (!whileParsing || nextSibling == null) && (content == null ||
-                   (!(text != null && text.Slice.IsEmptyOrWhiteSpace()) && !(content is HtmlComment) &&
+                   (!(content is HtmlText text && text.Slice.IsEmptyOrWhiteSpace()) && !(content is HtmlComment) &&
                     (element == null || (
                         element.Name != "meta"
                         && element.Name != "link"
diff --git a/Kooboo.Lib/NUglify/Html/HtmlWriterBase.cs b/Kooboo.Lib/NUglify/Html/HtmlWriterBase.cs
index e7ddd1de..34ee44bc 100644
--- a/Kooboo.Lib/NUglify/Html/HtmlWriterBase.cs
+++ b/Kooboo.Lib/NUglify/Html/HtmlWriterBase.cs
@@ -17,11 +17,11 @@ namespace NUglify.Html
 
         public void Write(HtmlNode node)
         {
-            if (node is HtmlText)
+            if (node is HtmlText htmlText)
             {
-                Write((HtmlText)node);
+                Write(htmlText);
             }
-            else if (node is HtmlElement)
+            else if (node is HtmlElement htmlElement)
             {
                 if (node is HtmlDocument)
                 {
@@ -29,24 +29,24 @@ namespace NUglify.Html
                 }
                 else
                 {
-                    Write((HtmlElement) node);
+                    Write(htmlElement);
                 }
             }
-            else if (node is HtmlRaw)
+            else if (node is HtmlRaw htmlRaw)
             {
-                Write((HtmlRaw)node);
+                Write(htmlRaw);
             }
-            else if (node is HtmlCDATA)
+            else if (node is HtmlCDATA htmlCDATA)
             {
-                Write((HtmlCDATA)node);
+                Write(htmlCDATA);
             }
-            else if (node is HtmlComment)
+            else if (node is HtmlComment htmlComment)
             {
-                Write((HtmlComment)node);
+                Write(htmlComment);
             }
-            else if (node is HtmlDOCTYPE)
+            else if (node is HtmlDOCTYPE htmlDOCTYPE)
             {
-                Write((HtmlDOCTYPE)node);
+                Write(htmlDOCTYPE);
             }
             else
             {
diff --git a/Kooboo.Lib/NUglify/JavaScript/ScriptSharpSourceMap.cs b/Kooboo.Lib/NUglify/JavaScript/ScriptSharpSourceMap.cs
index 9c2aaf39..19cc54f7 100644
--- a/Kooboo.Lib/NUglify/JavaScript/ScriptSharpSourceMap.cs
+++ b/Kooboo.Lib/NUglify/JavaScript/ScriptSharpSourceMap.cs
@@ -166,8 +166,7 @@ namespace NUglify.JavaScript
             // AND this context isn't the same as the entire function context.
             // this should only be true for the function NAME segment.
             var functionObject = node as FunctionObject;
-            if (functionObject != null 
-                && functionObject.Binding != null
+            if (functionObject?.Binding != null
                 && string.CompareOrdinal(name, functionObject.Binding.Name) == 0
                 && context != functionObject.Context)
             {
diff --git a/Kooboo.Lib/NUglify/JavaScript/Syntax/ArrayLiteral.cs b/Kooboo.Lib/NUglify/JavaScript/Syntax/ArrayLiteral.cs
index f39b0809..f24e3813 100644
--- a/Kooboo.Lib/NUglify/JavaScript/Syntax/ArrayLiteral.cs
+++ b/Kooboo.Lib/NUglify/JavaScript/Syntax/ArrayLiteral.cs
@@ -88,10 +88,7 @@ namespace NUglify.JavaScript.Syntax
 
         public override void Accept(IVisitor visitor)
         {
-            if (visitor != null)
-            {
-                visitor.Visit(this);
-            }
+            visitor?.Visit(this);
         }
 
         public override bool ReplaceChild(AstNode oldNode, AstNode newNode)
@@ -108,8 +105,7 @@ namespace NUglify.JavaScript.Syntax
                 else
                 {
                     // if the new node isn't an AstNodeList, then ignore the call
-                    AstNodeList newList = newNode as AstNodeList;
-                    if (newList != null)
+                    if (newNode is AstNodeList newList)
                     {
                         // replace it
                         Elements = newList;
diff --git a/Kooboo.Lib/NUglify/JavaScript/Syntax/AspNetBlockNode.cs b/Kooboo.Lib/NUglify/JavaScript/Syntax/AspNetBlockNode.cs
index 876cce4e..17459cdf 100644
--- a/Kooboo.Lib/NUglify/JavaScript/Syntax/AspNetBlockNode.cs
+++ b/Kooboo.Lib/NUglify/JavaScript/Syntax/AspNetBlockNode.cs
@@ -31,10 +31,7 @@ namespace NUglify.JavaScript.Syntax
 
         public override void Accept(IVisitor visitor)
         {
-            if (visitor != null)
-            {
-                visitor.Visit(this);
-            }
+            visitor?.Visit(this);
         }
     }
 }
diff --git a/Kooboo.Lib/NUglify/JavaScript/Syntax/AstNode.cs b/Kooboo.Lib/NUglify/JavaScript/Syntax/AstNode.cs
index b02e94bd..78943ed9 100644
--- a/Kooboo.Lib/NUglify/JavaScript/Syntax/AstNode.cs
+++ b/Kooboo.Lib/NUglify/JavaScript/Syntax/AstNode.cs
@@ -230,8 +230,7 @@ namespace NUglify.JavaScript.Syntax
             if (name != null)
             {
                 var lookup = this as LookupExpression;
-                if (lookup != null
-                    && lookup.VariableField != null
+                if (lookup?.VariableField != null
                     && (lookup.VariableField.FieldType == FieldType.Global || lookup.VariableField.FieldType == FieldType.Predefined || lookup.VariableField.FieldType == FieldType.UndefinedGlobal)
                     && name.Equals(lookup.Name, StringComparison.Ordinal))
                 {
@@ -240,8 +239,7 @@ namespace NUglify.JavaScript.Syntax
                 }
 
                 var member = this as MemberExpression;
-                if (member != null
-                    && member.Root != null
+                if (member?.Root != null
                     && member.Root.IsWindowLookup
                     && name.Equals(member.Name, StringComparison.Ordinal))
                 {
diff --git a/Kooboo.Lib/NUglify/JavaScript/Syntax/AstNodeList.cs b/Kooboo.Lib/NUglify/JavaScript/Syntax/AstNodeList.cs
index 113a4af7..709252fa 100644
--- a/Kooboo.Lib/NUglify/JavaScript/Syntax/AstNodeList.cs
+++ b/Kooboo.Lib/NUglify/JavaScript/Syntax/AstNodeList.cs
@@ -44,10 +44,7 @@ namespace NUglify.JavaScript.Syntax
 
         public override void Accept(IVisitor visitor)
         {
-            if (visitor != null)
-            {
-                visitor.Visit(this);
-            }
+            visitor?.Visit(this);
         }
 
         public override OperatorPrecedence Precedence
@@ -82,8 +79,7 @@ namespace NUglify.JavaScript.Syntax
 
             foreach (var item in m_list)
             {
-                var itemAsType = item as TItem;
-                if (itemAsType != null)
+                if (item is TItem itemAsType)
                 {
                     action(itemAsType);
                 }
@@ -130,8 +126,7 @@ namespace NUglify.JavaScript.Syntax
         {
             bool isEquivalent = false;
 
-            AstNodeList otherList = otherNode as AstNodeList;
-            if (otherList != null && m_list.Count == otherList.Count)
+            if (otherNode is AstNodeList otherList && m_list.Count == otherList.Count)
             {
                 // now assume it's true unless we come across an item that ISN'T
                 // equivalent, at which case we'll bail the test.
@@ -151,8 +146,7 @@ namespace NUglify.JavaScript.Syntax
 
         internal AstNodeList Append(AstNode node)
         {
-            var list = node as AstNodeList;
-            if (list != null)
+            if (node is AstNodeList list)
             {
                 // another list -- append each item, not the whole list
                 for (var ndx = 0; ndx < list.Count; ++ndx)
@@ -173,8 +167,7 @@ namespace NUglify.JavaScript.Syntax
 
         public AstNodeList Insert(int position, AstNode node)
         {
-            var list = node as AstNodeList;
-            if (list != null)
+            if (node is AstNodeList list)
             {
                 // another list. 
                 for (var ndx = 0; ndx < list.Count; ++ndx)
@@ -230,8 +223,7 @@ namespace NUglify.JavaScript.Syntax
         {
             if (m_list.Count == 1)
             {
-                ConstantWrapper constantWrapper = m_list[0] as ConstantWrapper;
-                if (constantWrapper != null 
+                if (m_list[0] is ConstantWrapper constantWrapper 
                     && string.CompareOrdinal(argumentValue, constantWrapper.Value.ToString()) == 0)
                 {
                     return true;
diff --git a/Kooboo.Lib/NUglify/JavaScript/Syntax/BinaryExpression.cs b/Kooboo.Lib/NUglify/JavaScript/Syntax/BinaryExpression.cs
index 16bcb72a..6ba1dc30 100644
--- a/Kooboo.Lib/NUglify/JavaScript/Syntax/BinaryExpression.cs
+++ b/Kooboo.Lib/NUglify/JavaScript/Syntax/BinaryExpression.cs
@@ -283,10 +283,8 @@ namespace NUglify.JavaScript.Syntax
 
         public override bool IsEquivalentTo(AstNode otherNode)
         {
-            // a binary operator is equivalent to another binary operator if the operator is the same and
-            // both operands are also equivalent
-            var otherBinary = otherNode as BinaryExpression;
-            return otherBinary != null
+            // a binary operator is equivalent to another binary operator if the operator is the same and            // both operands are also equivalent
+            return otherNode is BinaryExpression otherBinary
                 && OperatorToken == otherBinary.OperatorToken
                 && Operand1.IsEquivalentTo(otherBinary.Operand1)
                 && Operand2.IsEquivalentTo(otherBinary.Operand2);
diff --git a/Kooboo.Lib/NUglify/JavaScript/Syntax/BindingIdentifier.cs b/Kooboo.Lib/NUglify/JavaScript/Syntax/BindingIdentifier.cs
index e13e916f..77ec26c2 100644
--- a/Kooboo.Lib/NUglify/JavaScript/Syntax/BindingIdentifier.cs
+++ b/Kooboo.Lib/NUglify/JavaScript/Syntax/BindingIdentifier.cs
@@ -84,24 +84,19 @@ namespace NUglify.JavaScript.Syntax
 
         public override void Accept(IVisitor visitor)
         {
-            if (visitor != null)
-            {
-                visitor.Visit(this);
-            }
+            visitor?.Visit(this);
         }
 
         public override bool IsEquivalentTo(AstNode otherNode)
         {
-            var bindingIdentifier = otherNode as BindingIdentifier;
-            if (bindingIdentifier != null)
+            if (otherNode is BindingIdentifier bindingIdentifier)
             {
                 return bindingIdentifier.VariableField.IfNotNull(v => v == this.VariableField);
             }
             else
             {
                 // also check lookups
-                var lookup = otherNode as LookupExpression;
-                if (lookup != null)
+                if (otherNode is LookupExpression lookup)
                 {
                     return lookup.VariableField.IfNotNull(v => v == this.VariableField);
                 }
diff --git a/Kooboo.Lib/NUglify/JavaScript/Syntax/BindingTransform.cs b/Kooboo.Lib/NUglify/JavaScript/Syntax/BindingTransform.cs
index 3b2d8b59..b457fbdc 100644
--- a/Kooboo.Lib/NUglify/JavaScript/Syntax/BindingTransform.cs
+++ b/Kooboo.Lib/NUglify/JavaScript/Syntax/BindingTransform.cs
@@ -37,12 +37,10 @@ namespace NUglify.JavaScript.Syntax
             if (node != null)
             {
                 parameterList = new AstNodeList(node.Context);
-
                 // ignore any parentheses around the parameter(s)
-                var groupingOperator = node as GroupingOperator;
                 RecurseParameters(
                     parameterList,
-                    groupingOperator != null ? groupingOperator.Operand : node);
+                    node is GroupingOperator groupingOperator ? groupingOperator.Operand : node);
             }
 
             return parameterList;
@@ -55,8 +53,8 @@ namespace NUglify.JavaScript.Syntax
             ArrayLiteral arrayLiteral;
             ObjectLiteral objectLiteral;
             ObjectLiteralProperty objectProperty;
-            var bindingIdentifier = node as BindingIdentifier;
-            if (bindingIdentifier != null)
+
+            if (node is BindingIdentifier bindingIdentifier)
             {
                 // convert binding identifier to a lookup (reference identifier)
                 return ConvertFromBindingIdentifier(bindingIdentifier);
@@ -186,8 +184,7 @@ namespace NUglify.JavaScript.Syntax
             ConstantWrapper constantWrapper;
             ImportExportSpecifier importExportSpecifier;
 
-            var lookup = node as LookupExpression;
-            if (lookup != null)
+            if (node is LookupExpression lookup)
             {
                 // convert binding identifier to a lookup (reference identifier)
                 return ConvertToBindingIdentifier(lookup);
@@ -323,7 +320,7 @@ namespace NUglify.JavaScript.Syntax
         private static ImportExportSpecifier ConvertToBindingSpecifier(ImportExportSpecifier specifier)
         {
             // if there's a local identifier, we need to convert it to a binding.
-            if (specifier != null && specifier.LocalIdentifier != null)
+            if (specifier?.LocalIdentifier != null)
             {
                 specifier.LocalIdentifier = ConvertToBinding(specifier.LocalIdentifier);
             }
@@ -340,17 +337,14 @@ namespace NUglify.JavaScript.Syntax
             if (node != null)
             {
                 // if this is a comma operator, then we need to 
-                var binOp = node as BinaryExpression;
-                if (binOp != null && binOp.OperatorToken == JSToken.Comma)
+                if (node is BinaryExpression binOp && binOp.OperatorToken == JSToken.Comma)
                 {
                     // there are two or more parameters - recurse the list so we get them added left to right,
                     // converting each one to a binding object
                     RecurseParameters(parameterList, binOp.Operand1);
 
-                    // comma operators can flatten lots of commas to an element on the left, and subsequent
-                    // elements in a list on the right.
-                    var rightList = binOp.Operand2 as AstNodeList;
-                    if (rightList != null)
+                    // comma operators can flatten lots of commas to an element on the left, and subsequent                    // elements in a list on the right.
+                    if (binOp.Operand2 is AstNodeList rightList)
                     {
                         foreach (var listItem in rightList.Children)
                         {
@@ -379,8 +373,7 @@ namespace NUglify.JavaScript.Syntax
                 };
 
             // check to see if there's a unary spread operator
-            var unaryOp = node as UnaryExpression;
-            if (unaryOp != null && unaryOp.OperatorToken == JSToken.RestSpread)
+            if (node is UnaryExpression unaryOp && unaryOp.OperatorToken == JSToken.RestSpread)
             {
                 // there is. convert the operand and set the has-rest property
                 paramDecl.HasRest = true;
@@ -389,10 +382,8 @@ namespace NUglify.JavaScript.Syntax
             }
             else
             {
-                // check to see if there's an assignment operator. If so, then the right hand side is the initializer.
-                // or if there's a unary rest, in which case this is a rest operation.
-                var binOp = node as BinaryExpression;
-                if (binOp != null && binOp.OperatorToken == JSToken.Assign)
+                // check to see if there's an assignment operator. If so, then the right hand side is the initializer.                // or if there's a unary rest, in which case this is a rest operation.
+                if (node is BinaryExpression binOp && binOp.OperatorToken == JSToken.Assign)
                 {
                     // initializer
                     paramDecl.AssignContext = binOp.OperatorContext;
diff --git a/Kooboo.Lib/NUglify/JavaScript/Syntax/BlockStatement.cs b/Kooboo.Lib/NUglify/JavaScript/Syntax/BlockStatement.cs
index 3811768e..6779fec4 100644
--- a/Kooboo.Lib/NUglify/JavaScript/Syntax/BlockStatement.cs
+++ b/Kooboo.Lib/NUglify/JavaScript/Syntax/BlockStatement.cs
@@ -126,10 +126,7 @@ namespace NUglify.JavaScript.Syntax
 
         public override void Accept(IVisitor visitor)
         {
-            if (visitor != null)
-            {
-                visitor.Visit(this);
-            }
+            visitor?.Visit(this);
         }
 
         /// <summary>
@@ -185,8 +182,7 @@ namespace NUglify.JavaScript.Syntax
                     }
                     else
                     {
-                        BlockStatement newBlock = newNode as BlockStatement;
-                        if (newBlock != null)
+                        if (newNode is BlockStatement newBlock)
                         {
                             // the new "statement" is a block. That means we need to insert all
                             // the statements from the new block at the location of the old item.
@@ -265,8 +261,7 @@ namespace NUglify.JavaScript.Syntax
                         Unconcise();
                     }
 
-                    var block = item as BlockStatement;
-                    if (block != null)
+                    if (item is BlockStatement block)
                     {
                         // don't insert a block into a block -- insert the new block's
                         // children instead (don't want nested blocks)
@@ -297,8 +292,7 @@ namespace NUglify.JavaScript.Syntax
                     Unconcise();
                 }
 
-                var block = item as BlockStatement;
-                if (block != null)
+                if (item is BlockStatement block)
                 {
                     InsertRange(index, block.Children);
                 }
diff --git a/Kooboo.Lib/NUglify/JavaScript/Syntax/BreakStatement.cs b/Kooboo.Lib/NUglify/JavaScript/Syntax/BreakStatement.cs
index 5e0871f5..9f368ff5 100644
--- a/Kooboo.Lib/NUglify/JavaScript/Syntax/BreakStatement.cs
+++ b/Kooboo.Lib/NUglify/JavaScript/Syntax/BreakStatement.cs
@@ -33,10 +33,7 @@ namespace NUglify.JavaScript.Syntax
 
         public override void Accept(IVisitor visitor)
         {
-            if (visitor != null)
-            {
-                visitor.Visit(this);
-            }
+            visitor?.Visit(this);
         }
     }
 }
\ No newline at end of file
diff --git a/Kooboo.Lib/NUglify/JavaScript/Syntax/CallExpression.cs b/Kooboo.Lib/NUglify/JavaScript/Syntax/CallExpression.cs
index 878771d3..d1759aa4 100644
--- a/Kooboo.Lib/NUglify/JavaScript/Syntax/CallExpression.cs
+++ b/Kooboo.Lib/NUglify/JavaScript/Syntax/CallExpression.cs
@@ -98,10 +98,7 @@ namespace NUglify.JavaScript.Syntax
 
         public override void Accept(IVisitor visitor)
         {
-            if (visitor != null)
-            {
-                visitor.Visit(this);
-            }
+            visitor?.Visit(this);
         }
 
         public override IEnumerable<AstNode> Children
@@ -130,8 +127,7 @@ namespace NUglify.JavaScript.Syntax
                 else
                 {
                     // if the new node isn't an AstNodeList, ignore it
-                    var newList = newNode as AstNodeList;
-                    if (newList != null)
+                    if (newNode is AstNodeList newList)
                     {
                         Arguments = newList;
                         return true;
@@ -152,10 +148,8 @@ namespace NUglify.JavaScript.Syntax
 
         public override bool IsEquivalentTo(AstNode otherNode)
         {
-            // a call node is equivalent to another call node if the function and the arguments
-            // are all equivalent (and be sure to check for brackets and constructor)
-            var otherCall = otherNode as CallExpression;
-            return otherCall != null
+            // a call node is equivalent to another call node if the function and the arguments            // are all equivalent (and be sure to check for brackets and constructor)
+            return otherNode is CallExpression otherCall
                 && this.InBrackets == otherCall.InBrackets
                 && this.IsConstructor == otherCall.IsConstructor
                 && this.Function.IsEquivalentTo(otherCall.Function)
diff --git a/Kooboo.Lib/NUglify/JavaScript/Syntax/ClassNode.cs b/Kooboo.Lib/NUglify/JavaScript/Syntax/ClassNode.cs
index 54b2d057..5e4c25fd 100644
--- a/Kooboo.Lib/NUglify/JavaScript/Syntax/ClassNode.cs
+++ b/Kooboo.Lib/NUglify/JavaScript/Syntax/ClassNode.cs
@@ -99,10 +99,7 @@ namespace NUglify.JavaScript.Syntax
 
         public override void Accept(IVisitor visitor)
         {
-            if (visitor != null)
-            {
-                visitor.Visit(this);
-            }
+            visitor?.Visit(this);
         }
 
         public override IEnumerable<AstNode> Children
diff --git a/Kooboo.Lib/NUglify/JavaScript/Syntax/CommaExpression.cs b/Kooboo.Lib/NUglify/JavaScript/Syntax/CommaExpression.cs
index c538ccbe..4163c025 100644
--- a/Kooboo.Lib/NUglify/JavaScript/Syntax/CommaExpression.cs
+++ b/Kooboo.Lib/NUglify/JavaScript/Syntax/CommaExpression.cs
@@ -30,9 +30,7 @@ namespace NUglify.JavaScript.Syntax
             var comma = new CommaExpression(context);
 
             // if the left is a comma-operator already....
-            var leftBinary = operand1 as BinaryExpression;
-            var rightBinary = operand2 as BinaryExpression;
-            if (leftBinary != null && leftBinary.OperatorToken == JSToken.Comma)
+            if (operand1 is BinaryExpression leftBinary && leftBinary.OperatorToken == JSToken.Comma)
             {
                 // the left-hand side is already a comma operator. Instead of nesting these, we're
                 // going to combine them
@@ -40,7 +38,7 @@ namespace NUglify.JavaScript.Syntax
                 comma.Operand1 = leftBinary.Operand1;
 
                 AstNodeList list;
-                if (rightBinary != null && rightBinary.OperatorToken == JSToken.Comma)
+                if (operand2 is BinaryExpression rightBinary && rightBinary.OperatorToken == JSToken.Comma)
                 {
                     // the right is ALSO a comma operator. Create a new list, append all the rest of the operands
                     // and set our right-hand side to be the list
@@ -67,15 +65,12 @@ namespace NUglify.JavaScript.Syntax
                 // set the list on the right
                 comma.Operand2 = list;
             }
-            else if (rightBinary != null && rightBinary.OperatorToken == JSToken.Comma)
+            else if (operand2 is BinaryExpression rightBinary && rightBinary.OperatorToken == JSToken.Comma)
             {
                 // the left hand side is NOT a comma operator.
                 comma.Operand1 = operand1;
-
-                // the right-hand side is already a comma-operator, but the left is not.
-                // see if it already has a list we can reuse
-                var rightList = rightBinary.Operand2 as AstNodeList;
-                if (rightList != null)
+                // the right-hand side is already a comma-operator, but the left is not.                // see if it already has a list we can reuse
+                if (rightBinary.Operand2 is AstNodeList rightList)
                 {
                     // it does. Prepend its right-hand operand and use the list
                     rightList.Insert(0, rightBinary.Operand1);
diff --git a/Kooboo.Lib/NUglify/JavaScript/Syntax/ComprehensionForClause.cs b/Kooboo.Lib/NUglify/JavaScript/Syntax/ComprehensionForClause.cs
index 28906ce3..350cb339 100644
--- a/Kooboo.Lib/NUglify/JavaScript/Syntax/ComprehensionForClause.cs
+++ b/Kooboo.Lib/NUglify/JavaScript/Syntax/ComprehensionForClause.cs
@@ -53,10 +53,7 @@ namespace NUglify.JavaScript.Syntax
 
         public override void Accept(IVisitor visitor)
         {
-            if (visitor != null)
-            {
-                visitor.Visit(this);
-            }
+            visitor?.Visit(this);
         }
 
         public override IEnumerable<AstNode> Children
diff --git a/Kooboo.Lib/NUglify/JavaScript/Syntax/ComprehensionIfClause.cs b/Kooboo.Lib/NUglify/JavaScript/Syntax/ComprehensionIfClause.cs
index 53abaf45..b757973e 100644
--- a/Kooboo.Lib/NUglify/JavaScript/Syntax/ComprehensionIfClause.cs
+++ b/Kooboo.Lib/NUglify/JavaScript/Syntax/ComprehensionIfClause.cs
@@ -39,10 +39,7 @@ namespace NUglify.JavaScript.Syntax
 
         public override void Accept(IVisitor visitor)
         {
-            if (visitor != null)
-            {
-                visitor.Visit(this);
-            }
+            visitor?.Visit(this);
         }
 
         public override IEnumerable<AstNode> Children
diff --git a/Kooboo.Lib/NUglify/JavaScript/Syntax/ComprehensionNode.cs b/Kooboo.Lib/NUglify/JavaScript/Syntax/ComprehensionNode.cs
index 918a9209..caecb79f 100644
--- a/Kooboo.Lib/NUglify/JavaScript/Syntax/ComprehensionNode.cs
+++ b/Kooboo.Lib/NUglify/JavaScript/Syntax/ComprehensionNode.cs
@@ -66,10 +66,7 @@ namespace NUglify.JavaScript.Syntax
 
         public override void Accept(IVisitor visitor)
         {
-            if (visitor != null)
-            {
-                visitor.Visit(this);
-            }
+            visitor?.Visit(this);
         }
 
         public override IEnumerable<AstNode> Children
diff --git a/Kooboo.Lib/NUglify/JavaScript/Syntax/ComputedPropertyField.cs b/Kooboo.Lib/NUglify/JavaScript/Syntax/ComputedPropertyField.cs
index 907cd341..9a0e8179 100644
--- a/Kooboo.Lib/NUglify/JavaScript/Syntax/ComputedPropertyField.cs
+++ b/Kooboo.Lib/NUglify/JavaScript/Syntax/ComputedPropertyField.cs
@@ -29,10 +29,7 @@ namespace NUglify.JavaScript.Syntax
 
         public override void Accept(IVisitor visitor)
         {
-            if( visitor != null)
-            {
-                visitor.Visit(this);
-            }
+            visitor?.Visit(this);
         }
     }
 }
diff --git a/Kooboo.Lib/NUglify/JavaScript/Syntax/Conditional.cs b/Kooboo.Lib/NUglify/JavaScript/Syntax/Conditional.cs
index d5ca2350..84bd32e2 100644
--- a/Kooboo.Lib/NUglify/JavaScript/Syntax/Conditional.cs
+++ b/Kooboo.Lib/NUglify/JavaScript/Syntax/Conditional.cs
@@ -95,8 +95,7 @@ namespace NUglify.JavaScript.Syntax
 
         public override bool IsEquivalentTo(AstNode otherNode)
         {
-            var otherConditional = otherNode as Conditional;
-            return otherConditional != null
+            return otherNode is Conditional otherConditional
                 && Condition.IsEquivalentTo(otherConditional.Condition)
                 && TrueExpression.IsEquivalentTo(otherConditional.TrueExpression)
                 && FalseExpression.IsEquivalentTo(otherConditional.FalseExpression);
@@ -112,10 +111,7 @@ namespace NUglify.JavaScript.Syntax
 
         public override void Accept(IVisitor visitor)
         {
-            if (visitor != null)
-            {
-                visitor.Visit(this);
-            }
+            visitor?.Visit(this);
         }
 
         public override bool ReplaceChild(AstNode oldNode, AstNode newNode)
diff --git a/Kooboo.Lib/NUglify/JavaScript/Syntax/ConditionalCompilationComment.cs b/Kooboo.Lib/NUglify/JavaScript/Syntax/ConditionalCompilationComment.cs
index 9420d4ff..83a2f872 100644
--- a/Kooboo.Lib/NUglify/JavaScript/Syntax/ConditionalCompilationComment.cs
+++ b/Kooboo.Lib/NUglify/JavaScript/Syntax/ConditionalCompilationComment.cs
@@ -40,10 +40,7 @@ namespace NUglify.JavaScript.Syntax
 
         public override void Accept(IVisitor visitor)
         {
-            if (visitor != null)
-            {
-                visitor.Visit(this);
-            }
+            visitor?.Visit(this);
         }
 
         public void Append(AstNode statement)
diff --git a/Kooboo.Lib/NUglify/JavaScript/Syntax/ConditionalCompilationElse.cs b/Kooboo.Lib/NUglify/JavaScript/Syntax/ConditionalCompilationElse.cs
index 7c4860a5..733f1909 100644
--- a/Kooboo.Lib/NUglify/JavaScript/Syntax/ConditionalCompilationElse.cs
+++ b/Kooboo.Lib/NUglify/JavaScript/Syntax/ConditionalCompilationElse.cs
@@ -27,10 +27,7 @@ namespace NUglify.JavaScript.Syntax
 
         public override void Accept(IVisitor visitor)
         {
-            if (visitor != null)
-            {
-                visitor.Visit(this);
-            }
+            visitor?.Visit(this);
         }
     }
 }
diff --git a/Kooboo.Lib/NUglify/JavaScript/Syntax/ConditionalCompilationElseIf.cs b/Kooboo.Lib/NUglify/JavaScript/Syntax/ConditionalCompilationElseIf.cs
index 4831efa2..8afc79bf 100644
--- a/Kooboo.Lib/NUglify/JavaScript/Syntax/ConditionalCompilationElseIf.cs
+++ b/Kooboo.Lib/NUglify/JavaScript/Syntax/ConditionalCompilationElseIf.cs
@@ -47,10 +47,7 @@ namespace NUglify.JavaScript.Syntax
 
         public override void Accept(IVisitor visitor)
         {
-            if (visitor != null)
-            {
-                visitor.Visit(this);
-            }
+            visitor?.Visit(this);
         }
 
         public override bool ReplaceChild(AstNode oldNode, AstNode newNode)
diff --git a/Kooboo.Lib/NUglify/JavaScript/Syntax/ConditionalCompilationEnd.cs b/Kooboo.Lib/NUglify/JavaScript/Syntax/ConditionalCompilationEnd.cs
index dec7b0e9..f551bd67 100644
--- a/Kooboo.Lib/NUglify/JavaScript/Syntax/ConditionalCompilationEnd.cs
+++ b/Kooboo.Lib/NUglify/JavaScript/Syntax/ConditionalCompilationEnd.cs
@@ -27,10 +27,7 @@ namespace NUglify.JavaScript.Syntax
 
         public override void Accept(IVisitor visitor)
         {
-            if (visitor != null)
-            {
-                visitor.Visit(this);
-            }
+            visitor?.Visit(this);
         }
     }
 }
diff --git a/Kooboo.Lib/NUglify/JavaScript/Syntax/ConditionalCompilationIf.cs b/Kooboo.Lib/NUglify/JavaScript/Syntax/ConditionalCompilationIf.cs
index 3592f272..765dbcdf 100644
--- a/Kooboo.Lib/NUglify/JavaScript/Syntax/ConditionalCompilationIf.cs
+++ b/Kooboo.Lib/NUglify/JavaScript/Syntax/ConditionalCompilationIf.cs
@@ -47,10 +47,7 @@ namespace NUglify.JavaScript.Syntax
 
         public override void Accept(IVisitor visitor)
         {
-            if (visitor != null)
-            {
-                visitor.Visit(this);
-            }
+            visitor?.Visit(this);
         }
 
         public override bool ReplaceChild(AstNode oldNode, AstNode newNode)
diff --git a/Kooboo.Lib/NUglify/JavaScript/Syntax/ConditionalCompilationOn.cs b/Kooboo.Lib/NUglify/JavaScript/Syntax/ConditionalCompilationOn.cs
index c3b0437e..1a90a08a 100644
--- a/Kooboo.Lib/NUglify/JavaScript/Syntax/ConditionalCompilationOn.cs
+++ b/Kooboo.Lib/NUglify/JavaScript/Syntax/ConditionalCompilationOn.cs
@@ -27,10 +27,7 @@ namespace NUglify.JavaScript.Syntax
 
         public override void Accept(IVisitor visitor)
         {
-            if (visitor != null)
-            {
-                visitor.Visit(this);
-            }
+            visitor?.Visit(this);
         }
     }
 }
diff --git a/Kooboo.Lib/NUglify/JavaScript/Syntax/ConditionalCompilationSet.cs b/Kooboo.Lib/NUglify/JavaScript/Syntax/ConditionalCompilationSet.cs
index 6a0f70ec..a8576bd1 100644
--- a/Kooboo.Lib/NUglify/JavaScript/Syntax/ConditionalCompilationSet.cs
+++ b/Kooboo.Lib/NUglify/JavaScript/Syntax/ConditionalCompilationSet.cs
@@ -49,10 +49,7 @@ namespace NUglify.JavaScript.Syntax
 
         public override void Accept(IVisitor visitor)
         {
-            if (visitor != null)
-            {
-                visitor.Visit(this);
-            }
+            visitor?.Visit(this);
         }
 
         public override bool ReplaceChild(AstNode oldNode, AstNode newNode)
diff --git a/Kooboo.Lib/NUglify/JavaScript/Syntax/ConstStatement.cs b/Kooboo.Lib/NUglify/JavaScript/Syntax/ConstStatement.cs
index 354c769b..87000d90 100644
--- a/Kooboo.Lib/NUglify/JavaScript/Syntax/ConstStatement.cs
+++ b/Kooboo.Lib/NUglify/JavaScript/Syntax/ConstStatement.cs
@@ -34,10 +34,7 @@ namespace NUglify.JavaScript.Syntax
 
         public override void Accept(IVisitor visitor)
         {
-            if (visitor != null)
-            {
-                visitor.Visit(this);
-            }
+            visitor?.Visit(this);
         }
     }
 }
diff --git a/Kooboo.Lib/NUglify/JavaScript/Syntax/ConstantWrapper.cs b/Kooboo.Lib/NUglify/JavaScript/Syntax/ConstantWrapper.cs
index 075f6a1a..5ef927ca 100644
--- a/Kooboo.Lib/NUglify/JavaScript/Syntax/ConstantWrapper.cs
+++ b/Kooboo.Lib/NUglify/JavaScript/Syntax/ConstantWrapper.cs
@@ -195,8 +195,7 @@ namespace NUglify.JavaScript.Syntax
 
         public override bool IsEquivalentTo(AstNode otherNode)
         {
-            var otherConstant = otherNode as ConstantWrapper;
-            if (otherConstant != null && PrimitiveType == otherConstant.PrimitiveType)
+            if (otherNode is ConstantWrapper otherConstant && PrimitiveType == otherConstant.PrimitiveType)
             {
                 switch (PrimitiveType)
                 {
@@ -234,10 +233,7 @@ namespace NUglify.JavaScript.Syntax
 
         public override void Accept(IVisitor visitor)
         {
-            if (visitor != null)
-            {
-                visitor.Visit(this);
-            }
+            visitor?.Visit(this);
         }
 
         private static void AddEscape(string unescapedRun, string escapedText, ref StringBuilder sb)
diff --git a/Kooboo.Lib/NUglify/JavaScript/Syntax/ConstantWrapperPP.cs b/Kooboo.Lib/NUglify/JavaScript/Syntax/ConstantWrapperPP.cs
index 8b0c75ea..7e068602 100644
--- a/Kooboo.Lib/NUglify/JavaScript/Syntax/ConstantWrapperPP.cs
+++ b/Kooboo.Lib/NUglify/JavaScript/Syntax/ConstantWrapperPP.cs
@@ -31,10 +31,7 @@ namespace NUglify.JavaScript.Syntax
 
         public override void Accept(IVisitor visitor)
         {
-            if (visitor != null)
-            {
-                visitor.Visit(this);
-            }
+            visitor?.Visit(this);
         }
     }
 }
diff --git a/Kooboo.Lib/NUglify/JavaScript/Syntax/ContinueStatement.cs b/Kooboo.Lib/NUglify/JavaScript/Syntax/ContinueStatement.cs
index f2f47a4c..dcf24f16 100644
--- a/Kooboo.Lib/NUglify/JavaScript/Syntax/ContinueStatement.cs
+++ b/Kooboo.Lib/NUglify/JavaScript/Syntax/ContinueStatement.cs
@@ -33,10 +33,7 @@ namespace NUglify.JavaScript.Syntax
 
         public override void Accept(IVisitor visitor)
         {
-            if (visitor != null)
-            {
-                visitor.Visit(this);
-            }
+            visitor?.Visit(this);
         }
     }
 }
\ No newline at end of file
diff --git a/Kooboo.Lib/NUglify/JavaScript/Syntax/CustomNode.cs b/Kooboo.Lib/NUglify/JavaScript/Syntax/CustomNode.cs
index a2b235d7..4911c130 100644
--- a/Kooboo.Lib/NUglify/JavaScript/Syntax/CustomNode.cs
+++ b/Kooboo.Lib/NUglify/JavaScript/Syntax/CustomNode.cs
@@ -32,10 +32,7 @@ namespace NUglify.JavaScript.Syntax
 
         public override void Accept(IVisitor visitor)
         {
-            if (visitor != null)
-            {
-                visitor.Visit(this);
-            }
+            visitor?.Visit(this);
         }
 
         /// <summary>
diff --git a/Kooboo.Lib/NUglify/JavaScript/Syntax/DebuggerNode.cs b/Kooboo.Lib/NUglify/JavaScript/Syntax/DebuggerNode.cs
index 5b8d780a..1fe9ed20 100644
--- a/Kooboo.Lib/NUglify/JavaScript/Syntax/DebuggerNode.cs
+++ b/Kooboo.Lib/NUglify/JavaScript/Syntax/DebuggerNode.cs
@@ -28,10 +28,7 @@ namespace NUglify.JavaScript.Syntax
 
         public override void Accept(IVisitor visitor)
         {
-            if (visitor != null)
-            {
-                visitor.Visit(this);
-            }
+            visitor?.Visit(this);
         }
     }
 }
\ No newline at end of file
diff --git a/Kooboo.Lib/NUglify/JavaScript/Syntax/DirectivePrologue.cs b/Kooboo.Lib/NUglify/JavaScript/Syntax/DirectivePrologue.cs
index c2d76b19..08b62884 100644
--- a/Kooboo.Lib/NUglify/JavaScript/Syntax/DirectivePrologue.cs
+++ b/Kooboo.Lib/NUglify/JavaScript/Syntax/DirectivePrologue.cs
@@ -52,10 +52,7 @@ namespace NUglify.JavaScript.Syntax
 
         public override void Accept(IVisitor visitor)
         {
-            if (visitor != null)
-            {
-                visitor.Visit(this);
-            }
+            visitor?.Visit(this);
         }
     }
 }
diff --git a/Kooboo.Lib/NUglify/JavaScript/Syntax/DoWhileStatement.cs b/Kooboo.Lib/NUglify/JavaScript/Syntax/DoWhileStatement.cs
index d8484dc7..78a2e363 100644
--- a/Kooboo.Lib/NUglify/JavaScript/Syntax/DoWhileStatement.cs
+++ b/Kooboo.Lib/NUglify/JavaScript/Syntax/DoWhileStatement.cs
@@ -42,10 +42,7 @@ namespace NUglify.JavaScript.Syntax
 
         public override void Accept(IVisitor visitor)
         {
-            if (visitor != null)
-            {
-                visitor.Visit(this);
-            }
+            visitor?.Visit(this);
         }
 
         public override IEnumerable<AstNode> Children
diff --git a/Kooboo.Lib/NUglify/JavaScript/Syntax/EmptyStatement.cs b/Kooboo.Lib/NUglify/JavaScript/Syntax/EmptyStatement.cs
index 735daf1a..857a54cf 100644
--- a/Kooboo.Lib/NUglify/JavaScript/Syntax/EmptyStatement.cs
+++ b/Kooboo.Lib/NUglify/JavaScript/Syntax/EmptyStatement.cs
@@ -27,10 +27,7 @@ namespace NUglify.JavaScript.Syntax
 
         public override void Accept(IVisitor visitor)
         {
-            if (visitor != null)
-            {
-                visitor.Visit(this);
-            }
+            visitor?.Visit(this);
         }
     }
 }
diff --git a/Kooboo.Lib/NUglify/JavaScript/Syntax/ExportStatement.cs b/Kooboo.Lib/NUglify/JavaScript/Syntax/ExportStatement.cs
index 2dbafdc3..6d89bad8 100644
--- a/Kooboo.Lib/NUglify/JavaScript/Syntax/ExportStatement.cs
+++ b/Kooboo.Lib/NUglify/JavaScript/Syntax/ExportStatement.cs
@@ -32,10 +32,7 @@ namespace NUglify.JavaScript.Syntax
 
         public override void Accept(IVisitor visitor)
         {
-            if (visitor != null)
-            {
-                visitor.Visit(this);
-            }
+            visitor?.Visit(this);
         }
     }
 }
diff --git a/Kooboo.Lib/NUglify/JavaScript/Syntax/ForInStatement.cs b/Kooboo.Lib/NUglify/JavaScript/Syntax/ForInStatement.cs
index 5645cb0d..f83fe726 100644
--- a/Kooboo.Lib/NUglify/JavaScript/Syntax/ForInStatement.cs
+++ b/Kooboo.Lib/NUglify/JavaScript/Syntax/ForInStatement.cs
@@ -63,10 +63,7 @@ namespace NUglify.JavaScript.Syntax
 
         public override void Accept(IVisitor visitor)
         {
-            if (visitor != null)
-            {
-                visitor.Visit(this);
-            }
+            visitor?.Visit(this);
         }
 
         public override IEnumerable<AstNode> Children
diff --git a/Kooboo.Lib/NUglify/JavaScript/Syntax/ForStatement.cs b/Kooboo.Lib/NUglify/JavaScript/Syntax/ForStatement.cs
index 8650838b..12b781e4 100644
--- a/Kooboo.Lib/NUglify/JavaScript/Syntax/ForStatement.cs
+++ b/Kooboo.Lib/NUglify/JavaScript/Syntax/ForStatement.cs
@@ -78,10 +78,7 @@ namespace NUglify.JavaScript.Syntax
 
         public override void Accept(IVisitor visitor)
         {
-            if (visitor != null)
-            {
-                visitor.Visit(this);
-            }
+            visitor?.Visit(this);
         }
 
         internal override bool EncloseBlock(EncloseBlockType type)
diff --git a/Kooboo.Lib/NUglify/JavaScript/Syntax/FunctionObject.cs b/Kooboo.Lib/NUglify/JavaScript/Syntax/FunctionObject.cs
index b54a254e..dfcd722b 100644
--- a/Kooboo.Lib/NUglify/JavaScript/Syntax/FunctionObject.cs
+++ b/Kooboo.Lib/NUglify/JavaScript/Syntax/FunctionObject.cs
@@ -113,10 +113,7 @@ namespace NUglify.JavaScript.Syntax
 
         public override void Accept(IVisitor visitor)
         {
-            if (visitor != null)
-            {
-                visitor.Visit(this);
-            }
+            visitor?.Visit(this);
         }
 
         /// <summary>
@@ -163,8 +160,7 @@ namespace NUglify.JavaScript.Syntax
                         }
                         else
                         {
-                            var functionObject = referencingScope.Owner as FunctionObject;
-                            if (functionObject != null && functionObject.SafeIsReferenced(visited))
+                            if (referencingScope.Owner is FunctionObject functionObject && functionObject.SafeIsReferenced(visited))
                             {
                                 // as soon as we find one that's referenced, we stop
                                 return true;
diff --git a/Kooboo.Lib/NUglify/JavaScript/Syntax/FunctionScope.cs b/Kooboo.Lib/NUglify/JavaScript/Syntax/FunctionScope.cs
index b08e04ce..0d631adf 100644
--- a/Kooboo.Lib/NUglify/JavaScript/Syntax/FunctionScope.cs
+++ b/Kooboo.Lib/NUglify/JavaScript/Syntax/FunctionScope.cs
@@ -140,7 +140,7 @@ namespace NUglify.JavaScript.Syntax
         {
             // we don't want to include block scopes or with scopes -- they are really
             // contained within their parents
-            while (scope != null && scope is BlockScope)
+            while (scope is BlockScope)
             {
                 scope = scope.Parent;
             }
diff --git a/Kooboo.Lib/NUglify/JavaScript/Syntax/GetterSetter.cs b/Kooboo.Lib/NUglify/JavaScript/Syntax/GetterSetter.cs
index 4164ab32..4ddf9d0e 100644
--- a/Kooboo.Lib/NUglify/JavaScript/Syntax/GetterSetter.cs
+++ b/Kooboo.Lib/NUglify/JavaScript/Syntax/GetterSetter.cs
@@ -31,10 +31,7 @@ namespace NUglify.JavaScript.Syntax
 
         public override void Accept(IVisitor visitor)
         {
-            if (visitor != null)
-            {
-                visitor.Visit(this);
-            }
+            visitor?.Visit(this);
         }
 
         public override String ToString()
diff --git a/Kooboo.Lib/NUglify/JavaScript/Syntax/GroupingOperator.cs b/Kooboo.Lib/NUglify/JavaScript/Syntax/GroupingOperator.cs
index 4c1ca113..9ccc5d2a 100644
--- a/Kooboo.Lib/NUglify/JavaScript/Syntax/GroupingOperator.cs
+++ b/Kooboo.Lib/NUglify/JavaScript/Syntax/GroupingOperator.cs
@@ -43,10 +43,7 @@ namespace NUglify.JavaScript.Syntax
 
         public override void Accept(IVisitor visitor)
         {
-            if (visitor != null)
-            {
-                visitor.Visit(this);
-            }
+            visitor?.Visit(this);
         }
 
         public override PrimitiveType FindPrimitiveType()
@@ -85,11 +82,8 @@ namespace NUglify.JavaScript.Syntax
 
         public override bool IsEquivalentTo(AstNode otherNode)
         {
-            // we be equivalent if the other node is the
-            // equivalent of the operand, right? The only difference would be the
-            // parentheses, so maybe it'd still be the equivalent, no?
-            var otherGroup = otherNode as GroupingOperator;
-            return (otherGroup != null && Operand.IsEquivalentTo(otherGroup.Operand))
+            // we be equivalent if the other node is the            // equivalent of the operand, right? The only difference would be the            // parentheses, so maybe it'd still be the equivalent, no?
+            return (otherNode is GroupingOperator otherGroup && Operand.IsEquivalentTo(otherGroup.Operand))
                 || Operand.IsEquivalentTo(otherNode);
         }
 
diff --git a/Kooboo.Lib/NUglify/JavaScript/Syntax/IfStatement.cs b/Kooboo.Lib/NUglify/JavaScript/Syntax/IfStatement.cs
index d8df3fa3..510d347a 100644
--- a/Kooboo.Lib/NUglify/JavaScript/Syntax/IfStatement.cs
+++ b/Kooboo.Lib/NUglify/JavaScript/Syntax/IfStatement.cs
@@ -88,10 +88,7 @@ namespace NUglify.JavaScript.Syntax
 
         public override void Accept(IVisitor visitor)
         {
-            if (visitor != null)
-            {
-                visitor.Visit(this);
-            }
+            visitor?.Visit(this);
         }
 
         public void SwapBranches()
diff --git a/Kooboo.Lib/NUglify/JavaScript/Syntax/ImportExportSpecifier.cs b/Kooboo.Lib/NUglify/JavaScript/Syntax/ImportExportSpecifier.cs
index 06b89437..cd077825 100644
--- a/Kooboo.Lib/NUglify/JavaScript/Syntax/ImportExportSpecifier.cs
+++ b/Kooboo.Lib/NUglify/JavaScript/Syntax/ImportExportSpecifier.cs
@@ -87,10 +87,7 @@ namespace NUglify.JavaScript.Syntax
 
         public override void Accept(IVisitor visitor)
         {
-            if (visitor != null)
-            {
-                visitor.Visit(this);
-            }
+            visitor?.Visit(this);
         }
 
         public override IEnumerable<AstNode> Children
diff --git a/Kooboo.Lib/NUglify/JavaScript/Syntax/ImportExportStatement.cs b/Kooboo.Lib/NUglify/JavaScript/Syntax/ImportExportStatement.cs
index 73567f18..b6b1ccb1 100644
--- a/Kooboo.Lib/NUglify/JavaScript/Syntax/ImportExportStatement.cs
+++ b/Kooboo.Lib/NUglify/JavaScript/Syntax/ImportExportStatement.cs
@@ -95,8 +95,7 @@ namespace NUglify.JavaScript.Syntax
 
         public ImportExportStatement Append(AstNode node)
         {
-            var specifierList = node as ImportExportStatement;
-            if (specifierList != null)
+            if (node is ImportExportStatement specifierList)
             {
                 // another secifier list -- move each specifier from the other list to ours
                 for (var ndx = 0; ndx < specifierList.Count; ++ndx)
@@ -117,8 +116,7 @@ namespace NUglify.JavaScript.Syntax
 
         public ImportExportStatement Insert(int position, AstNode node)
         {
-            var specifierList = node as ImportExportStatement;
-            if (specifierList != null)
+            if (node is ImportExportStatement specifierList)
             {
                 // another secifier list -- move each specifier from the other list to ours
                 for (var ndx = 0; ndx < specifierList.Count; ++ndx)
diff --git a/Kooboo.Lib/NUglify/JavaScript/Syntax/ImportStatement.cs b/Kooboo.Lib/NUglify/JavaScript/Syntax/ImportStatement.cs
index 2ae91b74..232fb160 100644
--- a/Kooboo.Lib/NUglify/JavaScript/Syntax/ImportStatement.cs
+++ b/Kooboo.Lib/NUglify/JavaScript/Syntax/ImportStatement.cs
@@ -28,10 +28,7 @@ namespace NUglify.JavaScript.Syntax
 
         public override void Accept(IVisitor visitor)
         {
-            if (visitor != null)
-            {
-                visitor.Visit(this);
-            }
+            visitor?.Visit(this);
         }
     }
 }
diff --git a/Kooboo.Lib/NUglify/JavaScript/Syntax/ImportantComment.cs b/Kooboo.Lib/NUglify/JavaScript/Syntax/ImportantComment.cs
index b556894b..8d68a465 100644
--- a/Kooboo.Lib/NUglify/JavaScript/Syntax/ImportantComment.cs
+++ b/Kooboo.Lib/NUglify/JavaScript/Syntax/ImportantComment.cs
@@ -41,10 +41,7 @@ namespace NUglify.JavaScript.Syntax
 
         public override void Accept(IVisitor visitor)
         {
-            if (visitor != null)
-            {
-                visitor.Visit(this);
-            }
+            visitor?.Visit(this);
         }
     }
 }
diff --git a/Kooboo.Lib/NUglify/JavaScript/Syntax/InitializerNode.cs b/Kooboo.Lib/NUglify/JavaScript/Syntax/InitializerNode.cs
index eed06968..f4297463 100644
--- a/Kooboo.Lib/NUglify/JavaScript/Syntax/InitializerNode.cs
+++ b/Kooboo.Lib/NUglify/JavaScript/Syntax/InitializerNode.cs
@@ -65,10 +65,7 @@ namespace NUglify.JavaScript.Syntax
 
         public override void Accept(IVisitor visitor)
         {
-            if (visitor != null)
-            {
-                visitor.Visit(this);
-            }
+            visitor?.Visit(this);
         }
 
         public override IEnumerable<AstNode> Children
diff --git a/Kooboo.Lib/NUglify/JavaScript/Syntax/LabeledStatement.cs b/Kooboo.Lib/NUglify/JavaScript/Syntax/LabeledStatement.cs
index 03909375..6a8d255a 100644
--- a/Kooboo.Lib/NUglify/JavaScript/Syntax/LabeledStatement.cs
+++ b/Kooboo.Lib/NUglify/JavaScript/Syntax/LabeledStatement.cs
@@ -55,10 +55,7 @@ namespace NUglify.JavaScript.Syntax
 
         public override void Accept(IVisitor visitor)
         {
-            if (visitor != null)
-            {
-                visitor.Visit(this);
-            }
+            visitor?.Visit(this);
         }
 
         public override AstNode LeftHandSide
diff --git a/Kooboo.Lib/NUglify/JavaScript/Syntax/LexicalDeclaration.cs b/Kooboo.Lib/NUglify/JavaScript/Syntax/LexicalDeclaration.cs
index 8ae81f2e..4c4967c9 100644
--- a/Kooboo.Lib/NUglify/JavaScript/Syntax/LexicalDeclaration.cs
+++ b/Kooboo.Lib/NUglify/JavaScript/Syntax/LexicalDeclaration.cs
@@ -28,10 +28,7 @@ namespace NUglify.JavaScript.Syntax
 
         public override void Accept(IVisitor visitor)
         {
-            if (visitor != null)
-            {
-                visitor.Visit(this);
-            }
+            visitor?.Visit(this);
         }
     }
 }
diff --git a/Kooboo.Lib/NUglify/JavaScript/Syntax/LookupExpression.cs b/Kooboo.Lib/NUglify/JavaScript/Syntax/LookupExpression.cs
index 7b81c3cd..02730f8a 100644
--- a/Kooboo.Lib/NUglify/JavaScript/Syntax/LookupExpression.cs
+++ b/Kooboo.Lib/NUglify/JavaScript/Syntax/LookupExpression.cs
@@ -124,10 +124,8 @@ namespace NUglify.JavaScript.Syntax
 
         public override bool IsEquivalentTo(AstNode otherNode)
         {
-            // this one is tricky. If we have a field assigned, then we are equivalent if the
-            // field is the same as the other one. If there is no field, then just check the name
-            var otherLookup = otherNode as LookupExpression;
-            if (otherLookup != null)
+            // this one is tricky. If we have a field assigned, then we are equivalent if the            // field is the same as the other one. If there is no field, then just check the name
+            if (otherNode is LookupExpression otherLookup)
             {
                 if (VariableField != null)
                 {
diff --git a/Kooboo.Lib/NUglify/JavaScript/Syntax/MemberExpression.cs b/Kooboo.Lib/NUglify/JavaScript/Syntax/MemberExpression.cs
index 405b408d..0f0bc17f 100644
--- a/Kooboo.Lib/NUglify/JavaScript/Syntax/MemberExpression.cs
+++ b/Kooboo.Lib/NUglify/JavaScript/Syntax/MemberExpression.cs
@@ -51,16 +51,12 @@ namespace NUglify.JavaScript.Syntax
 
         public override void Accept(IVisitor visitor)
         {
-            if (visitor != null)
-            {
-                visitor.Visit(this);
-            }
+            visitor?.Visit(this);
         }
 
         public override bool IsEquivalentTo(AstNode otherNode)
         {
-            var otherMember = otherNode as MemberExpression;
-            return otherMember != null
+            return otherNode is MemberExpression otherMember
                 && string.CompareOrdinal(this.Name, otherMember.Name) == 0
                 && this.Root.IsEquivalentTo(otherMember.Root);
         }
diff --git a/Kooboo.Lib/NUglify/JavaScript/Syntax/ModuleDeclaration.cs b/Kooboo.Lib/NUglify/JavaScript/Syntax/ModuleDeclaration.cs
index 29559d37..755ed5a2 100644
--- a/Kooboo.Lib/NUglify/JavaScript/Syntax/ModuleDeclaration.cs
+++ b/Kooboo.Lib/NUglify/JavaScript/Syntax/ModuleDeclaration.cs
@@ -79,10 +79,7 @@ namespace NUglify.JavaScript.Syntax
 
         public override void Accept(IVisitor visitor)
         {
-            if (visitor != null)
-            {
-                visitor.Visit(this);
-            }
+            visitor?.Visit(this);
         }
 
         public override IEnumerable<AstNode> Children
diff --git a/Kooboo.Lib/NUglify/JavaScript/Syntax/ObjectLiteral.cs b/Kooboo.Lib/NUglify/JavaScript/Syntax/ObjectLiteral.cs
index f32df997..c5b2470c 100644
--- a/Kooboo.Lib/NUglify/JavaScript/Syntax/ObjectLiteral.cs
+++ b/Kooboo.Lib/NUglify/JavaScript/Syntax/ObjectLiteral.cs
@@ -61,10 +61,7 @@ namespace NUglify.JavaScript.Syntax
 
         public override void Accept(IVisitor visitor)
         {
-            if (visitor != null)
-            {
-                visitor.Visit(this);
-            }
+            visitor?.Visit(this);
         }
 
         public override IEnumerable<AstNode> Children
diff --git a/Kooboo.Lib/NUglify/JavaScript/Syntax/ObjectLiteralField.cs b/Kooboo.Lib/NUglify/JavaScript/Syntax/ObjectLiteralField.cs
index e2a4c35c..75d3b45f 100644
--- a/Kooboo.Lib/NUglify/JavaScript/Syntax/ObjectLiteralField.cs
+++ b/Kooboo.Lib/NUglify/JavaScript/Syntax/ObjectLiteralField.cs
@@ -32,10 +32,7 @@ namespace NUglify.JavaScript.Syntax
 
         public override void Accept(IVisitor visitor)
         {
-            if (visitor != null)
-            {
-                visitor.Visit(this);
-            }
+            visitor?.Visit(this);
         }
 
         public string Name
diff --git a/Kooboo.Lib/NUglify/JavaScript/Syntax/ObjectLiteralProperty.cs b/Kooboo.Lib/NUglify/JavaScript/Syntax/ObjectLiteralProperty.cs
index 30a4570c..462e4a3d 100644
--- a/Kooboo.Lib/NUglify/JavaScript/Syntax/ObjectLiteralProperty.cs
+++ b/Kooboo.Lib/NUglify/JavaScript/Syntax/ObjectLiteralProperty.cs
@@ -60,10 +60,7 @@ namespace NUglify.JavaScript.Syntax
 
         public override void Accept(IVisitor visitor)
         {
-            if (visitor != null)
-            {
-                visitor.Visit(this);
-            }
+            visitor?.Visit(this);
         }
 
         public override IEnumerable<AstNode> Children
diff --git a/Kooboo.Lib/NUglify/JavaScript/Syntax/ParameterDeclaration.cs b/Kooboo.Lib/NUglify/JavaScript/Syntax/ParameterDeclaration.cs
index aecbdbb6..1d913690 100644
--- a/Kooboo.Lib/NUglify/JavaScript/Syntax/ParameterDeclaration.cs
+++ b/Kooboo.Lib/NUglify/JavaScript/Syntax/ParameterDeclaration.cs
@@ -97,10 +97,7 @@ namespace NUglify.JavaScript.Syntax
 
         public override void Accept(IVisitor visitor)
         {
-            if (visitor != null)
-            {
-                visitor.Visit(this);
-            }
+            visitor?.Visit(this);
         }
 
         internal override string GetFunctionGuess(AstNode target)
diff --git a/Kooboo.Lib/NUglify/JavaScript/Syntax/RegExpLiteral.cs b/Kooboo.Lib/NUglify/JavaScript/Syntax/RegExpLiteral.cs
index f2287582..054dcc78 100644
--- a/Kooboo.Lib/NUglify/JavaScript/Syntax/RegExpLiteral.cs
+++ b/Kooboo.Lib/NUglify/JavaScript/Syntax/RegExpLiteral.cs
@@ -38,16 +38,12 @@ namespace NUglify.JavaScript.Syntax
 
         public override void Accept(IVisitor visitor)
         {
-            if (visitor != null)
-            {
-                visitor.Visit(this);
-            }
+            visitor?.Visit(this);
         }
 
         public override bool IsEquivalentTo(AstNode otherNode)
         {
-            var otherRegExp = otherNode as RegExpLiteral;
-            return otherRegExp != null
+            return otherNode is RegExpLiteral otherRegExp
                 && string.CompareOrdinal(Pattern, otherRegExp.Pattern) == 0
                 && string.CompareOrdinal(PatternSwitches, otherRegExp.PatternSwitches) == 0;
         }
diff --git a/Kooboo.Lib/NUglify/JavaScript/Syntax/ReturnStatement.cs b/Kooboo.Lib/NUglify/JavaScript/Syntax/ReturnStatement.cs
index 86e82c23..f150f01b 100644
--- a/Kooboo.Lib/NUglify/JavaScript/Syntax/ReturnStatement.cs
+++ b/Kooboo.Lib/NUglify/JavaScript/Syntax/ReturnStatement.cs
@@ -38,10 +38,7 @@ namespace NUglify.JavaScript.Syntax
 
         public override void Accept(IVisitor visitor)
         {
-            if (visitor != null)
-            {
-                visitor.Visit(this);
-            }
+            visitor?.Visit(this);
         }
 
         public override IEnumerable<AstNode> Children
diff --git a/Kooboo.Lib/NUglify/JavaScript/Syntax/SwitchCase.cs b/Kooboo.Lib/NUglify/JavaScript/Syntax/SwitchCase.cs
index a35b70f0..02ffd162 100644
--- a/Kooboo.Lib/NUglify/JavaScript/Syntax/SwitchCase.cs
+++ b/Kooboo.Lib/NUglify/JavaScript/Syntax/SwitchCase.cs
@@ -56,10 +56,7 @@ namespace NUglify.JavaScript.Syntax
 
         public override void Accept(IVisitor visitor)
         {
-            if (visitor != null)
-            {
-                visitor.Visit(this);
-            }
+            visitor?.Visit(this);
         }
 
         public override IEnumerable<AstNode> Children
diff --git a/Kooboo.Lib/NUglify/JavaScript/Syntax/SwitchStatement.cs b/Kooboo.Lib/NUglify/JavaScript/Syntax/SwitchStatement.cs
index 32665604..22817768 100644
--- a/Kooboo.Lib/NUglify/JavaScript/Syntax/SwitchStatement.cs
+++ b/Kooboo.Lib/NUglify/JavaScript/Syntax/SwitchStatement.cs
@@ -54,10 +54,7 @@ namespace NUglify.JavaScript.Syntax
 
         public override void Accept(IVisitor visitor)
         {
-            if (visitor != null)
-            {
-                visitor.Visit(this);
-            }
+            visitor?.Visit(this);
         }
 
         public override IEnumerable<AstNode> Children
diff --git a/Kooboo.Lib/NUglify/JavaScript/Syntax/TemplateLiteral.cs b/Kooboo.Lib/NUglify/JavaScript/Syntax/TemplateLiteral.cs
index 93f3edc2..a144cdbd 100644
--- a/Kooboo.Lib/NUglify/JavaScript/Syntax/TemplateLiteral.cs
+++ b/Kooboo.Lib/NUglify/JavaScript/Syntax/TemplateLiteral.cs
@@ -54,10 +54,7 @@ namespace NUglify.JavaScript.Syntax
 
         public override void Accept(IVisitor visitor)
         {
-            if (visitor != null)
-            {
-                visitor.Visit(this);
-            }
+            visitor?.Visit(this);
         }
 
         public override IEnumerable<AstNode> Children
diff --git a/Kooboo.Lib/NUglify/JavaScript/Syntax/TemplateLiteralExpression.cs b/Kooboo.Lib/NUglify/JavaScript/Syntax/TemplateLiteralExpression.cs
index 1e355e12..eb3c184c 100644
--- a/Kooboo.Lib/NUglify/JavaScript/Syntax/TemplateLiteralExpression.cs
+++ b/Kooboo.Lib/NUglify/JavaScript/Syntax/TemplateLiteralExpression.cs
@@ -43,10 +43,7 @@ namespace NUglify.JavaScript.Syntax
 
         public override void Accept(IVisitor visitor)
         {
-            if (visitor != null)
-            {
-                visitor.Visit(this);
-            }
+            visitor?.Visit(this);
         }
 
         public override IEnumerable<AstNode> Children
diff --git a/Kooboo.Lib/NUglify/JavaScript/Syntax/ThisLiteral.cs b/Kooboo.Lib/NUglify/JavaScript/Syntax/ThisLiteral.cs
index e49cb0bd..d3931eec 100644
--- a/Kooboo.Lib/NUglify/JavaScript/Syntax/ThisLiteral.cs
+++ b/Kooboo.Lib/NUglify/JavaScript/Syntax/ThisLiteral.cs
@@ -28,20 +28,16 @@ namespace NUglify.JavaScript.Syntax
 
         public override void Accept(IVisitor visitor)
         {
-            if (visitor != null)
-            {
-                visitor.Visit(this);
-            }
+            visitor?.Visit(this);
         }
 
         public override bool IsEquivalentTo(AstNode otherNode)
         {
-            var otherThis = otherNode as ThisLiteral;
             
             // this really assume we are comparing this operators from the same object scope.
             // if you compare a this-literal from one function to a this-literal from another,
             // it will pop positive -- but it won't actually be equivalent!
-            return otherThis != null;
+            return otherNode is ThisLiteral otherThis;
         }
     }
 }
\ No newline at end of file
diff --git a/Kooboo.Lib/NUglify/JavaScript/Syntax/ThrowStatement.cs b/Kooboo.Lib/NUglify/JavaScript/Syntax/ThrowStatement.cs
index 61aab57d..9f6d9972 100644
--- a/Kooboo.Lib/NUglify/JavaScript/Syntax/ThrowStatement.cs
+++ b/Kooboo.Lib/NUglify/JavaScript/Syntax/ThrowStatement.cs
@@ -39,10 +39,7 @@ namespace NUglify.JavaScript.Syntax
 
         public override void Accept(IVisitor visitor)
         {
-            if (visitor != null)
-            {
-                visitor.Visit(this);
-            }
+            visitor?.Visit(this);
         }
 
         public override IEnumerable<AstNode> Children
diff --git a/Kooboo.Lib/NUglify/JavaScript/Syntax/TryStatement.cs b/Kooboo.Lib/NUglify/JavaScript/Syntax/TryStatement.cs
index ebc0787c..2b67653b 100644
--- a/Kooboo.Lib/NUglify/JavaScript/Syntax/TryStatement.cs
+++ b/Kooboo.Lib/NUglify/JavaScript/Syntax/TryStatement.cs
@@ -74,10 +74,7 @@ namespace NUglify.JavaScript.Syntax
 
         public override void Accept(IVisitor visitor)
         {
-            if (visitor != null)
-            {
-                visitor.Visit(this);
-            }
+            visitor?.Visit(this);
         }
 
         public override IEnumerable<AstNode> Children
diff --git a/Kooboo.Lib/NUglify/JavaScript/Syntax/UnaryExpression.cs b/Kooboo.Lib/NUglify/JavaScript/Syntax/UnaryExpression.cs
index 5157f1d9..2215d45d 100644
--- a/Kooboo.Lib/NUglify/JavaScript/Syntax/UnaryExpression.cs
+++ b/Kooboo.Lib/NUglify/JavaScript/Syntax/UnaryExpression.cs
@@ -50,10 +50,7 @@ namespace NUglify.JavaScript.Syntax
 
         public override void Accept(IVisitor visitor)
         {
-            if (visitor != null)
-            {
-                visitor.Visit(this);
-            }
+            visitor?.Visit(this);
         }
 
         public override PrimitiveType FindPrimitiveType()
@@ -110,8 +107,7 @@ namespace NUglify.JavaScript.Syntax
 
         public override bool IsEquivalentTo(AstNode otherNode)
         {
-            var otherUnary = otherNode as UnaryExpression;
-            return otherUnary != null
+            return otherNode is UnaryExpression otherUnary
                 && OperatorToken == otherUnary.OperatorToken
                 && Operand.IsEquivalentTo(otherUnary.Operand);
         }
diff --git a/Kooboo.Lib/NUglify/JavaScript/Syntax/VarDeclaration.cs b/Kooboo.Lib/NUglify/JavaScript/Syntax/VarDeclaration.cs
index 2bb83d6e..3f974ea4 100644
--- a/Kooboo.Lib/NUglify/JavaScript/Syntax/VarDeclaration.cs
+++ b/Kooboo.Lib/NUglify/JavaScript/Syntax/VarDeclaration.cs
@@ -31,10 +31,7 @@ namespace NUglify.JavaScript.Syntax
 
         public override void Accept(IVisitor visitor)
         {
-            if (visitor != null)
-            {
-                visitor.Visit(this);
-            }
+            visitor?.Visit(this);
         }
     }
 }
diff --git a/Kooboo.Lib/NUglify/JavaScript/Syntax/VariableDeclaration.cs b/Kooboo.Lib/NUglify/JavaScript/Syntax/VariableDeclaration.cs
index 1015552f..019d9fa4 100644
--- a/Kooboo.Lib/NUglify/JavaScript/Syntax/VariableDeclaration.cs
+++ b/Kooboo.Lib/NUglify/JavaScript/Syntax/VariableDeclaration.cs
@@ -30,10 +30,7 @@ namespace NUglify.JavaScript.Syntax
 
         public override void Accept(IVisitor visitor)
         {
-            if (visitor != null)
-            {
-                visitor.Visit(this);
-            }
+            visitor?.Visit(this);
         }
 
         public override bool IsExpression
diff --git a/Kooboo.Lib/NUglify/JavaScript/Syntax/WhileStatement.cs b/Kooboo.Lib/NUglify/JavaScript/Syntax/WhileStatement.cs
index 4a3edfb9..053d9119 100644
--- a/Kooboo.Lib/NUglify/JavaScript/Syntax/WhileStatement.cs
+++ b/Kooboo.Lib/NUglify/JavaScript/Syntax/WhileStatement.cs
@@ -49,10 +49,7 @@ namespace NUglify.JavaScript.Syntax
 
         public override void Accept(IVisitor visitor)
         {
-            if (visitor != null)
-            {
-                visitor.Visit(this);
-            }
+            visitor?.Visit(this);
         }
 
         public override IEnumerable<AstNode> Children
diff --git a/Kooboo.Lib/NUglify/JavaScript/Syntax/WithStatement.cs b/Kooboo.Lib/NUglify/JavaScript/Syntax/WithStatement.cs
index 4b0a4365..d02064ee 100644
--- a/Kooboo.Lib/NUglify/JavaScript/Syntax/WithStatement.cs
+++ b/Kooboo.Lib/NUglify/JavaScript/Syntax/WithStatement.cs
@@ -59,10 +59,7 @@ namespace NUglify.JavaScript.Syntax
 
         public override void Accept(IVisitor visitor)
         {
-            if (visitor != null)
-            {
-                visitor.Visit(this);
-            }
+            visitor?.Visit(this);
         }
 
         public override IEnumerable<AstNode> Children
diff --git a/Kooboo.Lib/NUglify/JavaScript/V3SourceMap.cs b/Kooboo.Lib/NUglify/JavaScript/V3SourceMap.cs
index 190b7057..b528294a 100644
--- a/Kooboo.Lib/NUglify/JavaScript/V3SourceMap.cs
+++ b/Kooboo.Lib/NUglify/JavaScript/V3SourceMap.cs
@@ -206,7 +206,7 @@ namespace NUglify.JavaScript
             m_maxMinifiedLine = Math.Max(m_maxMinifiedLine, startLine);
 
             // save the file context in our list of files
-            if (context != null && context.Document != null && context.Document.FileContext != null)
+            if (context?.Document != null && context.Document.FileContext != null)
             {
                 // if this is the first instance of this file...
                 if (m_sourceFiles.Add(context.Document.FileContext))
diff --git a/Kooboo.Lib/NUglify/JavaScript/Visitors/AnalyzeNodeVisitor.cs b/Kooboo.Lib/NUglify/JavaScript/Visitors/AnalyzeNodeVisitor.cs
index 7205a167..08ddf20c 100644
--- a/Kooboo.Lib/NUglify/JavaScript/Visitors/AnalyzeNodeVisitor.cs
+++ b/Kooboo.Lib/NUglify/JavaScript/Visitors/AnalyzeNodeVisitor.cs
@@ -709,8 +709,7 @@ namespace NUglify.JavaScript.Visitors
                     {
                         // see if it's an if-statement with both a true and a false block
                         var ifNode = node[ndx] as IfStatement;
-                        if (ifNode != null
-                            && ifNode.TrueBlock != null
+                        if (ifNode?.TrueBlock != null
                             && ifNode.TrueBlock.Count > 0
                             && ifNode.FalseBlock != null)
                         {
@@ -1924,8 +1923,7 @@ namespace NUglify.JavaScript.Visitors
                     // but if it is, check to see if it's actually referenced, and if not, get rid of it
                     // because we don't need it.
                     var bindingIdentifier = node.Binding as BindingIdentifier;
-                    if (bindingIdentifier != null
-                        && bindingIdentifier.VariableField != null
+                    if (bindingIdentifier?.VariableField != null
                         && bindingIdentifier.VariableField.RefCount == 0
                         && m_parser.Settings.RemoveFunctionExpressionNames
                         && m_parser.Settings.IsModificationAllowed(TreeModifications.RemoveFunctionExpressionNames))
@@ -1945,8 +1943,7 @@ namespace NUglify.JavaScript.Visitors
                     {
                         string functionName;
                         var functionObject = element as FunctionObject;
-                        if (functionObject != null 
-                            && functionObject.Binding != null 
+                        if (functionObject?.Binding != null 
                             && !(functionName = functionObject.Binding.Name).IsNullOrWhiteSpace())
                         {
                             var errorContext = functionObject.Binding.Context ?? functionObject.Context;
@@ -2799,11 +2796,11 @@ namespace NUglify.JavaScript.Visitors
                         {
                             // they do -- see if the true-branch's statement is a return-statement
                             var trueReturn = node.TrueBlock[0] as ReturnStatement;
-                            if (trueReturn != null && trueReturn.Operand != null)
+                            if (trueReturn?.Operand != null)
                             {
                                 // it is -- see if the false-branch is also a return statement
                                 var falseReturn = node.FalseBlock[0] as ReturnStatement;
-                                if (falseReturn != null && falseReturn.Operand != null)
+                                if (falseReturn?.Operand != null)
                                 {
                                     // transform: if(cond)return expr1;else return expr2 to return cond?expr1:expr2
                                     var conditional = new Conditional(node.Condition.Context.FlattenToStart())
@@ -3507,8 +3504,7 @@ namespace NUglify.JavaScript.Visitors
                         // if it is, we can get rid of the assignment because we're leaving the scope.
                         var lookup = node.Operand.LeftHandSide as LookupExpression;
                         BinaryExpression binaryOp;
-                        if (lookup != null
-                            && lookup.VariableField != null
+                        if (lookup?.VariableField != null
                             && lookup.VariableField.OuterField == null
                             && (binaryOp = lookup.Parent as BinaryExpression) != null
                             && binaryOp.IsAssign
@@ -3960,8 +3956,7 @@ namespace NUglify.JavaScript.Visitors
                             if (member != null)
                             {
                                 var lookup = member.Root as LookupExpression;
-                                if (lookup != null
-                                    && lookup.VariableField != null
+                                if (lookup?.VariableField != null
                                     && lookup.VariableField.FieldType == FieldType.Predefined
                                     && lookup.Name == "window")
                                 {
@@ -4541,9 +4536,9 @@ namespace NUglify.JavaScript.Visitors
                 return new ConstantWrapper(Convert.ToDouble(item, CultureInfo.InvariantCulture), PrimitiveType.Number, context);
             }
 
-            if (item is DateTime)
+            if (item is DateTime dateTime)
             {
-                return new ConstantWrapper(((DateTime)item).ToString("s", CultureInfo.InvariantCulture), PrimitiveType.String, context);
+                return new ConstantWrapper(dateTime.ToString("s", CultureInfo.InvariantCulture), PrimitiveType.String, context);
             }
 
             if (item.GetType().GetTypeInfo().IsValueType)
diff --git a/Kooboo.Lib/NUglify/JavaScript/Visitors/BindingsVisitor.cs b/Kooboo.Lib/NUglify/JavaScript/Visitors/BindingsVisitor.cs
index 227ac171..c0aeb36d 100644
--- a/Kooboo.Lib/NUglify/JavaScript/Visitors/BindingsVisitor.cs
+++ b/Kooboo.Lib/NUglify/JavaScript/Visitors/BindingsVisitor.cs
@@ -40,10 +40,7 @@ namespace NUglify.JavaScript.Visitors
         public static IList<BindingIdentifier> Bindings(AstNode node)
         {
             var visitor = new BindingsVisitor();
-            if (node != null)
-            {
-                node.Accept(visitor);
-            }
+            node?.Accept(visitor);
 
             return visitor.m_bindings;
         }
@@ -57,10 +54,7 @@ namespace NUglify.JavaScript.Visitors
         public static IList<LookupExpression> References(AstNode node)
         {
             var visitor = new BindingsVisitor();
-            if (node != null)
-            {
-                node.Accept(visitor);
-            }
+            node?.Accept(visitor);
 
             return visitor.m_lookups;
         }
@@ -84,10 +78,7 @@ namespace NUglify.JavaScript.Visitors
                 for (var i = 0; i < count; i++)
                 {
                     var itemNode = node[i];
-                    if (itemNode != null)
-                    {
-                        itemNode.Accept(this);
-                    }
+                    itemNode?.Accept(this);
                 }
             }
         }
@@ -101,7 +92,7 @@ namespace NUglify.JavaScript.Visitors
         public void Visit(ClassNode node)
         {
             // recurse the class binding
-            if (node != null && node.Binding != null)
+            if (node?.Binding != null)
             {
                 node.Binding.Accept(this);
             }
@@ -142,7 +133,7 @@ namespace NUglify.JavaScript.Visitors
         public void Visit(FunctionObject node)
         {
             // recurse the function binding
-            if (node != null && node.Binding != null)
+            if (node?.Binding != null)
             {
                 node.Binding.Accept(this);
             }
@@ -158,10 +149,8 @@ namespace NUglify.JavaScript.Visitors
         {
             if (node != null)
             {
-                // this nodes local identifier might be a binding identifier and it might be a lookup.
-                // we only care about binding identifiers
-                var bindingIdentifier = node.LocalIdentifier as BindingIdentifier;
-                if (bindingIdentifier != null)
+                // this nodes local identifier might be a binding identifier and it might be a lookup.                // we only care about binding identifiers
+                if (node.LocalIdentifier is BindingIdentifier bindingIdentifier)
                 {
                     m_bindings.Add(bindingIdentifier);
                 }
@@ -193,7 +182,7 @@ namespace NUglify.JavaScript.Visitors
 
         public void Visit(ModuleDeclaration node)
         {
-            if (node != null && node.Binding != null)
+            if (node?.Binding != null)
             {
                 m_bindings.Add(node.Binding);
             }
@@ -217,10 +206,7 @@ namespace NUglify.JavaScript.Visitors
             if (node != null)
             {
                 var binding = node.Binding;
-                if (binding != null)
-                {
-                    binding.Accept(this);
-                }
+                binding?.Accept(this);
             }
         }
 
diff --git a/Kooboo.Lib/NUglify/JavaScript/Visitors/DetachReferencesVisitor.cs b/Kooboo.Lib/NUglify/JavaScript/Visitors/DetachReferencesVisitor.cs
index 7dacf78d..78791d9b 100644
--- a/Kooboo.Lib/NUglify/JavaScript/Visitors/DetachReferencesVisitor.cs
+++ b/Kooboo.Lib/NUglify/JavaScript/Visitors/DetachReferencesVisitor.cs
@@ -29,10 +29,7 @@ namespace NUglify.JavaScript.Visitors
 
         public static void Apply(AstNode node)
         {
-            if (node != null)
-            {
-                node.Accept(s_instance); 
-            }
+            node?.Accept(s_instance);
         }
 
         public static void Apply(params AstNode[] nodes)
diff --git a/Kooboo.Lib/NUglify/JavaScript/Visitors/FinalPassVisitor.cs b/Kooboo.Lib/NUglify/JavaScript/Visitors/FinalPassVisitor.cs
index ed870db0..135224cc 100644
--- a/Kooboo.Lib/NUglify/JavaScript/Visitors/FinalPassVisitor.cs
+++ b/Kooboo.Lib/NUglify/JavaScript/Visitors/FinalPassVisitor.cs
@@ -70,8 +70,7 @@ namespace NUglify.JavaScript.Visitors
 
         private void PossiblyBreakExpressionStatement(BinaryExpression node, BlockStatement parentBlock)
         {
-            var nodeList = node.Operand2 as AstNodeList;
-            if (nodeList != null)
+            if (node.Operand2 is AstNodeList nodeList)
             {
                 PossiblyBreakExpressionList(node, parentBlock, nodeList);
             }
diff --git a/Kooboo.Lib/NUglify/JavaScript/Visitors/JsonOutputVisitor.cs b/Kooboo.Lib/NUglify/JavaScript/Visitors/JsonOutputVisitor.cs
index 4c7da8c8..64d1a0fb 100644
--- a/Kooboo.Lib/NUglify/JavaScript/Visitors/JsonOutputVisitor.cs
+++ b/Kooboo.Lib/NUglify/JavaScript/Visitors/JsonOutputVisitor.cs
@@ -116,7 +116,7 @@ namespace NUglify.JavaScript.Visitors
 
         public void Visit(ComputedPropertyField node)
         {
-            if (node != null && node.ArrayNode != null)
+            if (node?.ArrayNode != null)
             {
                 // if this is multi-line output, we're going to want to run some checks first
                 // to see if we want to put the array all on one line or put elements on separate lines.
@@ -541,7 +541,7 @@ namespace NUglify.JavaScript.Visitors
             // not TECHNICALLY valid! set the invalid flag, but
             // still recurse the operand, just in case
             IsValid = false;
-            if (node != null && node.Operand != null)
+            if (node?.Operand != null)
             {
                 node.Operand.Accept(this);
             }
diff --git a/Kooboo.Lib/NUglify/JavaScript/Visitors/LogicalNotVisitor.cs b/Kooboo.Lib/NUglify/JavaScript/Visitors/LogicalNotVisitor.cs
index 88c959ff..b2b79c19 100644
--- a/Kooboo.Lib/NUglify/JavaScript/Visitors/LogicalNotVisitor.cs
+++ b/Kooboo.Lib/NUglify/JavaScript/Visitors/LogicalNotVisitor.cs
@@ -511,12 +511,8 @@ namespace NUglify.JavaScript.Visitors
                     }
                     else
                     {
-                        // convert
-                        // just replace the not with its own operand, unless the child
-                        // itself is a grouping operator, in which case we will replace it
-                        // with the grouping operand to get rid of the parens
-                        var grouping = node.Operand as GroupingOperator;
-                        if (grouping != null)
+                        // convert                        // just replace the not with its own operand, unless the child                        // itself is a grouping operator, in which case we will replace it                        // with the grouping operand to get rid of the parens
+                        if (node.Operand is GroupingOperator grouping)
                         {
                             node.Parent.ReplaceChild(node, grouping.Operand);
                         }
diff --git a/Kooboo.Lib/NUglify/JavaScript/Visitors/MatchPropertiesVisitor.cs b/Kooboo.Lib/NUglify/JavaScript/Visitors/MatchPropertiesVisitor.cs
index a0530f02..fc89b5ac 100644
--- a/Kooboo.Lib/NUglify/JavaScript/Visitors/MatchPropertiesVisitor.cs
+++ b/Kooboo.Lib/NUglify/JavaScript/Visitors/MatchPropertiesVisitor.cs
@@ -81,8 +81,7 @@ namespace NUglify.JavaScript.Visitors
                 && node.Arguments.Count == 1)
             {
                 // better be a constant wrapper, too
-                var constantWrapper = node.Arguments[0] as ConstantWrapper;
-                if (constantWrapper != null && constantWrapper.PrimitiveType == PrimitiveType.String)
+                if (node.Arguments[0] is ConstantWrapper constantWrapper && constantWrapper.PrimitiveType == PrimitiveType.String)
                 {
                     // check the value of the constant wrapper against the current part
                     if (string.CompareOrdinal(constantWrapper.Value.ToString(), m_parts[m_index--]) == 0)
@@ -127,7 +126,7 @@ namespace NUglify.JavaScript.Visitors
 
         public virtual void Visit(GroupingOperator node)
         {
-            if (node != null && node.Operand != null)
+            if (node?.Operand != null)
             {
                 // just totally ignore any parentheses
                 node.Operand.Accept(this);
diff --git a/Kooboo.Lib/NUglify/JavaScript/Visitors/OutputVisitor.cs b/Kooboo.Lib/NUglify/JavaScript/Visitors/OutputVisitor.cs
index 8b2722ae..ebc8fafc 100644
--- a/Kooboo.Lib/NUglify/JavaScript/Visitors/OutputVisitor.cs
+++ b/Kooboo.Lib/NUglify/JavaScript/Visitors/OutputVisitor.cs
@@ -439,8 +439,7 @@ namespace NUglify.JavaScript.Visitors
                         var rightPrecedence = node.Operand2.Precedence;
                         var rightNeedsParens = rightPrecedence < ourPrecedence;
 
-                        var rightHandBinary = node.Operand2 as BinaryExpression;
-                        if (rightHandBinary != null)
+                        if (node.Operand2 is BinaryExpression rightHandBinary)
                         {
                             // they are BOTH binary expressions. This is where it gets complicated.
                             // because most binary tokens (except assignment) are evaluated from left to right,
@@ -721,8 +720,7 @@ namespace NUglify.JavaScript.Visitors
                         }
                         else
                         {
-                            var newExpression = node.Function as CallExpression;
-                            if (newExpression != null && newExpression.IsConstructor
+                            if (node.Function is CallExpression newExpression && newExpression.IsConstructor
                                 && (newExpression.Arguments == null || newExpression.Arguments.Count == 0))
                             {
                                 needsParens = true;
@@ -793,8 +791,7 @@ namespace NUglify.JavaScript.Visitors
                 // be a simple binding identifier if it's present
                 if (node.Binding != null)
                 {
-                    var bindingIdentifier = node.Binding as BindingIdentifier;
-                    if (bindingIdentifier != null)
+                    if (node.Binding is BindingIdentifier bindingIdentifier)
                     {
                         // if this isn't an expression, or if the class name is actually referenced,
                         // or if we don't want to remove expression names, output the name. Otherwise
@@ -1900,8 +1897,7 @@ namespace NUglify.JavaScript.Visitors
 
                     if (m_settings.SymbolsMap != null && isAnonymous)
                     {
-                        BinaryExpression binaryExpression = node.Parent as BinaryExpression;
-                        if (binaryExpression != null && binaryExpression.Operand1 is LookupExpression)
+                        if (node.Parent is BinaryExpression binaryExpression && binaryExpression.Operand1 is LookupExpression)
                         {
                             m_functionStack.Push("(anonymous) [{0}]".FormatInvariant(binaryExpression.Operand1));
                         }
@@ -2392,8 +2388,7 @@ namespace NUglify.JavaScript.Visitors
 
                 if (node.Root != null)
                 {
-                    var constantWrapper = node.Root as ConstantWrapper;
-                    if (constantWrapper != null 
+                    if (node.Root is ConstantWrapper constantWrapper 
                         && (constantWrapper.IsFiniteNumericLiteral || constantWrapper.IsOtherDecimal))
                     {
                         // numeric constant wrapper that isn't NaN or Infinity - get the formatted text version.
@@ -2470,8 +2465,7 @@ namespace NUglify.JavaScript.Visitors
                         if (!needsParens)
                         {
                             // if the root is a new operator with no arguments, then we need to wrap
-                            var callNode = node.Root as CallExpression;
-                            if (callNode != null
+                            if (node.Root is CallExpression callNode
                                 && callNode.IsConstructor
                                 && (callNode.Arguments == null || callNode.Arguments.Count == 0))
                             {
@@ -3908,10 +3902,7 @@ namespace NUglify.JavaScript.Visitors
                         }
 
                         paramDecl = node.ParameterDeclarations[ndx];
-                        if (paramDecl != null)
-                        {
-                            paramDecl.Accept(this);
-                        }
+                        paramDecl?.Accept(this);
                     }
 
                     Unindent();
diff --git a/Kooboo.Lib/NUglify/JavaScript/Visitors/RequiresSeparatorVisitor.cs b/Kooboo.Lib/NUglify/JavaScript/Visitors/RequiresSeparatorVisitor.cs
index f532ce37..e29c93e3 100644
--- a/Kooboo.Lib/NUglify/JavaScript/Visitors/RequiresSeparatorVisitor.cs
+++ b/Kooboo.Lib/NUglify/JavaScript/Visitors/RequiresSeparatorVisitor.cs
@@ -39,10 +39,7 @@ namespace NUglify.JavaScript.Visitors
             // requires by default unless a node explicitly says it doesn't need one
             DoesRequire = node != null;
 
-            if (node != null)
-            {
-                node.Accept(this);
-            }
+            node?.Accept(this);
 
             return DoesRequire;
         }
diff --git a/Kooboo.Lib/NUglify/JavaScript/Visitors/ResolutionVisitor.cs b/Kooboo.Lib/NUglify/JavaScript/Visitors/ResolutionVisitor.cs
index 36453bfa..f44956df 100644
--- a/Kooboo.Lib/NUglify/JavaScript/Visitors/ResolutionVisitor.cs
+++ b/Kooboo.Lib/NUglify/JavaScript/Visitors/ResolutionVisitor.cs
@@ -237,10 +237,8 @@ namespace NUglify.JavaScript.Visitors
         {
             if (lookup.Name.Length == 6 && string.CompareOrdinal(lookup.Name, "window") == 0)
             {
-                // it's the global window object
-                // see if it's the child of a member or call-brackets node
-                var member = lookup.Parent as MemberExpression;
-                if (member != null)
+                // it's the global window object                // see if it's the child of a member or call-brackets node
+                if (lookup.Parent is MemberExpression member)
                 {
                     // we have window.XXXX. Add XXXX to the known globals if it
                     // isn't already a known item.
@@ -248,8 +246,7 @@ namespace NUglify.JavaScript.Visitors
                 }
                 else
                 {
-                    var callNode = lookup.Parent as CallExpression;
-                    if (callNode != null && callNode.InBrackets
+                    if (lookup.Parent is CallExpression callNode && callNode.InBrackets
                         && callNode.Arguments.Count == 1
                         && callNode.Arguments[0] is ConstantWrapper
                         && callNode.Arguments[0].FindPrimitiveType() == PrimitiveType.String)
@@ -269,11 +266,8 @@ namespace NUglify.JavaScript.Visitors
             else if (settings.EvalTreatment != EvalTreatment.Ignore
                 && lookup.Name.Length == 4 && string.CompareOrdinal(lookup.Name, "eval") == 0)
             {
-                // it's an eval -- but are we calling it?
-                // TODO: what if we are assigning it to a variable? Should we track that variable and see if we call it?
-                // What about passing it as a parameter to a function? track that as well in case the function calls it?
-                var parentCall = lookup.Parent as CallExpression;
-                if (parentCall != null && parentCall.Function == lookup)
+                // it's an eval -- but are we calling it?                // TODO: what if we are assigning it to a variable? Should we track that variable and see if we call it?                // What about passing it as a parameter to a function? track that as well in case the function calls it?
+                if (lookup.Parent is CallExpression parentCall && parentCall.Function == lookup)
                 {
                     scope.IsKnownAtCompileTime = false;
                 }
@@ -286,8 +280,7 @@ namespace NUglify.JavaScript.Visitors
             // then we want to throw an error.
             if (!lookup.IsGenerated)
             {
-                var parentUnaryOp = lookup.Parent as UnaryExpression;
-                if (parentUnaryOp != null && parentUnaryOp.OperatorToken == JSToken.TypeOf)
+                if (lookup.Parent is UnaryExpression parentUnaryOp && parentUnaryOp.OperatorToken == JSToken.TypeOf)
                 {
                     // this undefined lookup is the target of a typeof operator.
                     // I think it's safe to assume we're going to use it. Don't throw an error
@@ -322,11 +315,8 @@ namespace NUglify.JavaScript.Visitors
                 {
                     // report this undefined reference
                     lookup.Context.ReportUndefined(lookup);
-
-                    // possibly undefined global (but definitely not local).
-                    // see if this is a function or a variable.
-                    var callNode = lookup.Parent as CallExpression;
-                    var isFunction = callNode != null && callNode.Function == lookup;
+                    // possibly undefined global (but definitely not local).                    // see if this is a function or a variable.
+                    var isFunction = lookup.Parent is CallExpression callNode && callNode.Function == lookup;
                     lookup.Context.HandleError((isFunction ? JSError.UndeclaredFunction : JSError.UndeclaredVariable), false);
                 }
             }
@@ -510,8 +500,7 @@ namespace NUglify.JavaScript.Visitors
 
         private static void AddDeclaredNames(AstNode node, ICollection<INameDeclaration> collection)
         {
-            var nameDeclaration = node as INameDeclaration;
-            if (nameDeclaration != null)
+            if (node is INameDeclaration nameDeclaration)
             {
                 collection.Add(nameDeclaration);
             }
@@ -577,10 +566,7 @@ namespace NUglify.JavaScript.Visitors
                 for (var ndx = 0; ndx < node.Count; ++ndx)
                 {
                     var item = node[ndx];
-                    if (item != null)
-                    {
-                        item.Accept(this);
-                    }
+                    item?.Accept(this);
                 }
             }
         }
@@ -647,10 +633,7 @@ namespace NUglify.JavaScript.Visitors
                     for (var ndx = 0; ndx < node.Count; ++ndx)
                     {
                         var statement = node[ndx];
-                        if (statement != null)
-                        {
-                            statement.Accept(this);
-                        }
+                        statement?.Accept(this);
                     }
                 }
                 finally
@@ -908,10 +891,7 @@ namespace NUglify.JavaScript.Visitors
                 for (var ndx = 0; ndx < node.Count; ++ndx)
                 {
                     var item = node[ndx];
-                    if (item != null)
-                    {
-                        item.Accept(this);
-                    }
+                    item?.Accept(this);
                 }
             }
         }
@@ -1066,12 +1046,8 @@ namespace NUglify.JavaScript.Visitors
 
                 if (node.Variable != null)
                 {
-                    // if the variable portion of the for-in statement is a lexical
-                    // declaration, then we will create the block node for its body right now
-                    // and add the declaration. This will prevent the body from deleting
-                    // an empty lexical scope.
-                    var lexDeclaration = node.Variable as LexicalDeclaration;
-                    if (lexDeclaration != null)
+                    // if the variable portion of the for-in statement is a lexical                    // declaration, then we will create the block node for its body right now                    // and add the declaration. This will prevent the body from deleting                    // an empty lexical scope.
+                    if (node.Variable is LexicalDeclaration lexDeclaration)
                     {
                         // create the scope on the block
                         node.BlockScope = new BlockScope(CurrentLexicalScope, m_settings, ScopeType.Lexical)
@@ -1114,12 +1090,8 @@ namespace NUglify.JavaScript.Visitors
 
                 if (node.Initializer != null)
                 {
-                    // if the variable portion of the for-in statement is a lexical
-                    // declaration, then we will create the block node for its body right now
-                    // and add the declaration. This will prevent the body from both creating
-                    // a new lexical scope and from deleting an empty one.
-                    var lexDeclaration = node.Initializer as LexicalDeclaration;
-                    if (lexDeclaration != null)
+                    // if the variable portion of the for-in statement is a lexical                    // declaration, then we will create the block node for its body right now                    // and add the declaration. This will prevent the body from both creating                    // a new lexical scope and from deleting an empty one.
+                    if (node.Initializer is LexicalDeclaration lexDeclaration)
                     {
                         // create the scope on the block
                         node.BlockScope = new BlockScope(CurrentLexicalScope, m_settings, ScopeType.Lexical)
@@ -1378,10 +1350,7 @@ namespace NUglify.JavaScript.Visitors
                 for (var ndx = 0; ndx < node.Count; ++ndx)
                 {
                     var decl = node[ndx];
-                    if (decl != null)
-                    {
-                        decl.Accept(this);
-                    }
+                    decl?.Accept(this);
                 }
             }
         }
@@ -1660,10 +1629,8 @@ namespace NUglify.JavaScript.Visitors
 
                 if (node.CatchParameter != null)
                 {
-                    // add this catch parameter to the list of catch parameters the variable
-                    // scope will need to ghost later if it's a simple binding identifier.
-                    var bindingIdentifier = node.CatchParameter.Binding as BindingIdentifier;
-                    if (bindingIdentifier != null)
+                    // add this catch parameter to the list of catch parameters the variable                    // scope will need to ghost later if it's a simple binding identifier.
+                    if (node.CatchParameter.Binding is BindingIdentifier bindingIdentifier)
                     {
                         CurrentVariableScope.GhostedCatchParameters.Add(bindingIdentifier);
                     }
@@ -1713,10 +1680,7 @@ namespace NUglify.JavaScript.Visitors
                 for (var ndx = 0; ndx < node.Count; ++ndx)
                 {
                     var decl = node[ndx];
-                    if (decl != null)
-                    {
-                        decl.Accept(this);
-                    }
+                    decl?.Accept(this);
                 }
             }
         }
diff --git a/Kooboo.Lib/NUglify/JavaScript/Visitors/StatementStartVisitor.cs b/Kooboo.Lib/NUglify/JavaScript/Visitors/StatementStartVisitor.cs
index 7a45a087..88c14e59 100644
--- a/Kooboo.Lib/NUglify/JavaScript/Visitors/StatementStartVisitor.cs
+++ b/Kooboo.Lib/NUglify/JavaScript/Visitors/StatementStartVisitor.cs
@@ -45,10 +45,7 @@ namespace NUglify.JavaScript.Visitors
             // assume it is unless preven otherwise
             m_isSafe = true;
 
-            if (node != null)
-            {
-                node.Accept(this);
-            }
+            node?.Accept(this);
             
             return m_isSafe;
         }
@@ -58,7 +55,7 @@ namespace NUglify.JavaScript.Visitors
         public void Visit(BinaryExpression node)
         {
             // if there's a left-hand operand, recurse into it
-            if (node != null && node.Operand1 != null)
+            if (node?.Operand1 != null)
             {
                 node.Operand1.Accept(this);
             }
@@ -67,7 +64,7 @@ namespace NUglify.JavaScript.Visitors
         public void Visit(CallExpression node)
         {
             // if there's a function node, recurse into it
-            if (node != null && node.Function != null)
+            if (node?.Function != null)
             {
                 node.Function.Accept(this);
             }
@@ -76,7 +73,7 @@ namespace NUglify.JavaScript.Visitors
         public void Visit(Conditional node)
         {
             // if there's a condition node, recurse into it
-            if (node != null && node.Condition != null)
+            if (node?.Condition != null)
             {
                 node.Condition.Accept(this);
             }
@@ -85,7 +82,7 @@ namespace NUglify.JavaScript.Visitors
         public void Visit(MemberExpression node)
         {
             // if there's a root node, recurse into it
-            if (node != null && node.Root != null)
+            if (node?.Root != null)
             {
                 node.Root.Accept(this);
             }
diff --git a/Kooboo.Lib/NUglify/JavaScript/Visitors/TreeVisitor.cs b/Kooboo.Lib/NUglify/JavaScript/Visitors/TreeVisitor.cs
index 767d208a..6f7ed27c 100644
--- a/Kooboo.Lib/NUglify/JavaScript/Visitors/TreeVisitor.cs
+++ b/Kooboo.Lib/NUglify/JavaScript/Visitors/TreeVisitor.cs
@@ -50,10 +50,7 @@ namespace NUglify.JavaScript.Visitors
                 { 
                     var element = node[i];
                     
-                    if (element != null)
-                    {
-                        element.Accept(this);
-                    }
+                    element?.Accept(this);
                 }
             }
         }
@@ -85,10 +82,7 @@ namespace NUglify.JavaScript.Visitors
             {
                 foreach (var statement in node.Children)
                 {
-                    if (statement != null)
-                    {
-                        statement.Accept(this);
-                    }
+                    statement?.Accept(this);
                 }
             }
         }
@@ -274,10 +268,7 @@ namespace NUglify.JavaScript.Visitors
             {
                 foreach (var declaration in node.Children)
                 {
-                    if (declaration != null)
-                    {
-                        declaration.Accept(this);
-                    }
+                    declaration?.Accept(this);
                 }
             }
         }
@@ -293,10 +284,7 @@ namespace NUglify.JavaScript.Visitors
             {
                 foreach (var childNode in node.Children)
                 {
-                    if (childNode != null)
-                    {
-                        childNode.Accept(this);
-                    }
+                    childNode?.Accept(this);
                 }
             }
         }
@@ -498,10 +486,7 @@ namespace NUglify.JavaScript.Visitors
             {
                 foreach (var declaration in node.Children)
                 {
-                    if (declaration != null)
-                    {
-                        declaration.Accept(this);
-                    }
+                    declaration?.Accept(this);
                 }
             }
         }
@@ -718,10 +703,7 @@ namespace NUglify.JavaScript.Visitors
                 { 
                     var declaration = node[i];
                     
-                    if (declaration != null)
-                    {
-                        declaration.Accept(this);
-                    }
+                    declaration?.Accept(this);
                 }
             }
         }
diff --git a/Kooboo.Lib/NUglify/JavaScript/documentcontext.cs b/Kooboo.Lib/NUglify/JavaScript/documentcontext.cs
index 571bf706..f018fbec 100644
--- a/Kooboo.Lib/NUglify/JavaScript/documentcontext.cs
+++ b/Kooboo.Lib/NUglify/JavaScript/documentcontext.cs
@@ -60,18 +60,12 @@ namespace NUglify.JavaScript
 
         internal void HandleError(UglifyError error)
         {
-            if (Parser != null)
-            {
-                Parser.OnCompilerError(error);
-            }
+            Parser?.OnCompilerError(error);
         }
 
         internal void ReportUndefined(UndefinedReference referernce)
         {
-            if (Parser != null)
-            {
-                Parser.OnUndefinedReference(referernce);
-            }
+            Parser?.OnUndefinedReference(referernce);
         }
 
         internal bool HasAlreadySeenErrorFor(String varName)
diff --git a/Kooboo.Lib/Reflection/CollectionWrapper.cs b/Kooboo.Lib/Reflection/CollectionWrapper.cs
index 0ce42718..f25f3e65 100644
--- a/Kooboo.Lib/Reflection/CollectionWrapper.cs
+++ b/Kooboo.Lib/Reflection/CollectionWrapper.cs
@@ -40,10 +40,7 @@ namespace Kooboo.Reflection
 
         public virtual void Add(T item)
         {
-            if (_genericCollection != null)
-            {
-                _genericCollection.Add(item);
-            } 
+            _genericCollection?.Add(item); 
         }
 
         public virtual void Clear()
diff --git a/Kooboo.Lib/Reflection/ExtensionAssemblyLoader.cs b/Kooboo.Lib/Reflection/ExtensionAssemblyLoader.cs
index c85c6280..d8caaecc 100644
--- a/Kooboo.Lib/Reflection/ExtensionAssemblyLoader.cs
+++ b/Kooboo.Lib/Reflection/ExtensionAssemblyLoader.cs
@@ -129,7 +129,7 @@ namespace Kooboo.Lib.Reflection
                     {
                         var filename = dll.EndsWith(".dll", StringComparison.OrdinalIgnoreCase)
                             ? dll
-                            : string.Format("{0}.dll", dll);
+                            : $"{dll}.dll";
 
                         var filepath = Path.Combine(path, filename);
                         if (File.Exists(filepath))
@@ -167,7 +167,7 @@ namespace Kooboo.Lib.Reflection
             var baseDirectory = AppDomain.CurrentDomain.BaseDirectory;
             var path = extensionFolders.Union(new[] { baseDirectory }).Select(folder =>
              {
-                 var dllpath = Path.Combine(folder, string.Format("{0}.dll", name));
+                 var dllpath = Path.Combine(folder, $"{name}.dll");
                  if (VirtualResources.FileExists(dllpath)) return dllpath;
 
                  return string.Empty;
diff --git a/Kooboo.Lib/Reflection/TypeHelper.cs b/Kooboo.Lib/Reflection/TypeHelper.cs
index 40e0dbd1..0c88a09f 100644
--- a/Kooboo.Lib/Reflection/TypeHelper.cs
+++ b/Kooboo.Lib/Reflection/TypeHelper.cs
@@ -149,7 +149,7 @@ namespace Kooboo.Lib.Reflection
         public static MethodInfo GetRightMethodInfo(List<MethodInfo> MethodList, string MethodName, Guid MethodHash)
         {
             var methods = MethodList.FindAll(o => o.Name == MethodName);
-            int count = methods.Count();
+            int count = methods.Count;
             if (count == 1)
             {
                 return methods[0];
@@ -228,8 +228,7 @@ namespace Kooboo.Lib.Reflection
         public static Guid GetMethodSignatureHash(MethodInfo method)
         {
             var parameterTypes = method.GetParameters().Select(p => p.ParameterType).ToArray();
-            string value = String.Format("{0}|{1}",
-                method.Name, String.Join("|", parameterTypes.Select(p => p.Name)));
+            string value = $"{method.Name}|{String.Join("|", parameterTypes.Select(p => p.Name))}";
 
             value += method.DeclaringType.FullName;
 
diff --git a/Kooboo.Mail/Dns/Client/ResponseException.cs b/Kooboo.Mail/Dns/Client/ResponseException.cs
index 3633973a..30244807 100644
--- a/Kooboo.Mail/Dns/Client/ResponseException.cs
+++ b/Kooboo.Mail/Dns/Client/ResponseException.cs
@@ -4,7 +4,7 @@ using DNS.Protocol;
 namespace DNS.Client {
     public class ResponseException : Exception {
         private static string Format(IResponse response) {
-            return string.Format("Invalid response received with code {0}", response.ResponseCode);
+            return $"Invalid response received with code {response.ResponseCode}";
         }
 
         public ResponseException() { }
diff --git a/Kooboo.Mail/Dns/Protocol/Utils/ObjectStringifier.cs b/Kooboo.Mail/Dns/Protocol/Utils/ObjectStringifier.cs
index bc7be73e..95bb59cd 100644
--- a/Kooboo.Mail/Dns/Protocol/Utils/ObjectStringifier.cs
+++ b/Kooboo.Mail/Dns/Protocol/Utils/ObjectStringifier.cs
@@ -18,10 +18,10 @@ namespace DNS.Protocol.Utils {
         private static string StringifyObject(object obj) {
             if (obj is string) {
                 return (string) obj;
-            } else if (obj is IDictionary) {
-                return StringifyDictionary((IDictionary) obj);
-            } else if (obj is IEnumerable) {
-                return StringifyList((IEnumerable) obj);
+            } else if (obj is IDictionary iDictionary) {
+                return StringifyDictionary(iDictionary);
+            } else if (obj is IEnumerable iEnumerable) {
+                return StringifyList(iEnumerable);
             } else {
                 return obj == null ? "null" : obj.ToString();
             }
diff --git a/Kooboo.Mail/Imap/CommandManager.cs b/Kooboo.Mail/Imap/CommandManager.cs
index 8470b11d..a949e453 100644
--- a/Kooboo.Mail/Imap/CommandManager.cs
+++ b/Kooboo.Mail/Imap/CommandManager.cs
@@ -153,7 +153,7 @@ namespace Kooboo.Mail.Imap.Commands
 
         public static async Task SendResponse(ImapSession session, List<ImapResponse> response)
         {
-            if (response != null && response.Count() > 0)
+            if (response != null && response.Any())
             {
                 foreach (var item in response)
                 {
diff --git a/Kooboo.Mail/Imap/Commands/FetchCommand/CommandReader.cs b/Kooboo.Mail/Imap/Commands/FetchCommand/CommandReader.cs
index 8866bef9..5e7e163d 100644
--- a/Kooboo.Mail/Imap/Commands/FetchCommand/CommandReader.cs
+++ b/Kooboo.Mail/Imap/Commands/FetchCommand/CommandReader.cs
@@ -211,7 +211,7 @@ namespace Kooboo.Mail.Imap.Commands.FetchCommand
                             var seprators = ",;.".ToCharArray();
                             var partialParts = parts.Split(seprators, StringSplitOptions.RemoveEmptyEntries);
 
-                            if (partialParts.Count() > 0)
+                            if (partialParts.Any())
                             {
                                 int offset = 0;
                                 if (int.TryParse(partialParts[0], out offset))
diff --git a/Kooboo.Mail/Imap/Commands/SearchCommand/CommandReader.cs b/Kooboo.Mail/Imap/Commands/SearchCommand/CommandReader.cs
index c661973b..5b6ca2f1 100644
--- a/Kooboo.Mail/Imap/Commands/SearchCommand/CommandReader.cs
+++ b/Kooboo.Mail/Imap/Commands/SearchCommand/CommandReader.cs
@@ -46,10 +46,7 @@ namespace Kooboo.Mail.Imap.Commands.SearchCommand
         {
             string value = this.WholeText.Substring(this.CurrentIndex);
             this.CurrentIndex = this.TotalLen;
-            if (value != null)
-            {
-                value.Trim();
-            }
+            value?.Trim();
             return null;
         }
 
@@ -162,7 +159,7 @@ namespace Kooboo.Mail.Imap.Commands.SearchCommand
                 }
                 else
                 {
-                    if (keyword.Arguments == null || keyword.Arguments.Count() == 0)
+                    if (keyword.Arguments == null || !keyword.Arguments.Any())
                     {
                         return result;
                     }
@@ -241,7 +238,7 @@ namespace Kooboo.Mail.Imap.Commands.SearchCommand
             List<SearchItem> items = new List<SearchItem>();
             var next = this.ReadItem();
 
-            while (next != null && next.Name !=null)
+            while (next?.Name != null)
             {  
                 items.Add(next);
 
diff --git a/Kooboo.Mail/Imap/Commands/SearchCommand/Search.cs b/Kooboo.Mail/Imap/Commands/SearchCommand/Search.cs
index 6d129188..a7523273 100644
--- a/Kooboo.Mail/Imap/Commands/SearchCommand/Search.cs
+++ b/Kooboo.Mail/Imap/Commands/SearchCommand/Search.cs
@@ -147,7 +147,7 @@ namespace Kooboo.Mail.Imap.Commands.SearchCommand
                     
                    var allmessages = maildb.Messages.FolderQuery(Folder.Folder).Where(o => o.CreationTimeTick > before.Ticks && o.CreationTimeTick < after.Ticks).SelectAll();
 
-                    if (allmessages !=null && allmessages.Count() > 0)
+                    if (allmessages != null && allmessages.Any())
                     {
                         return allmessages.Where(o => o.CreationTime.DayOfYear == date.DayOfYear && o.CreationTime.Year == date.Year).ToList(); 
                     }
diff --git a/Kooboo.Mail/Imap/ImapHelper.cs b/Kooboo.Mail/Imap/ImapHelper.cs
index 737a76e0..287295ff 100644
--- a/Kooboo.Mail/Imap/ImapHelper.cs
+++ b/Kooboo.Mail/Imap/ImapHelper.cs
@@ -71,7 +71,7 @@ namespace Kooboo.Mail.Imap
                 if (item.Contains(":"))
                 {
                     var parts = item.Split(':').ToList();
-                    if (parts.Count() == 1)
+                    if (parts.Count == 1)
                     {
                         int one = GetNumber(parts[0]);
                         if (one != 0)
@@ -259,7 +259,7 @@ namespace Kooboo.Mail.Imap
                     });
 
                     // Add address sub folders to Inbox
-                    if (Address != null && Address.Count() > 1)
+                    if (Address != null && Address.Count > 1)
                     {
                         foreach (var add in Address)
                         {
diff --git a/Kooboo.Mail/Imap/ResultLine.cs b/Kooboo.Mail/Imap/ResultLine.cs
index 8f840c6f..15860c27 100644
--- a/Kooboo.Mail/Imap/ResultLine.cs
+++ b/Kooboo.Mail/Imap/ResultLine.cs
@@ -48,7 +48,7 @@ namespace Kooboo.Mail.Imap
         {
             // Example:   S: * FLAGS (\Answered \Flagged \Deleted \Seen \Draft) 
             string result = "* FLAGS ("; 
-            if (flags != null && flags.Count() > 0)
+            if (flags != null && flags.Any())
             {
                 for (int i = 0; i < flags.Count; i++)
                 {
@@ -68,7 +68,7 @@ namespace Kooboo.Mail.Imap
         {
             // Example:   S: * FLAGS (\Answered \Flagged \Deleted \Seen \Draft) 
             string result = "* PERMANENTFLAGS (";
-            if (flags != null && flags.Count() > 0)
+            if (flags != null && flags.Any())
             {
                 for (int i = 0; i < flags.Count; i++)
                 {
@@ -107,7 +107,7 @@ namespace Kooboo.Mail.Imap
             else
             {
                 string result = "* LIST (";
-                if (attributes != null && attributes.Count() > 0)
+                if (attributes != null && attributes.Any())
                 {
                     result += string.Join(" ", attributes);
                 }
@@ -122,7 +122,7 @@ namespace Kooboo.Mail.Imap
             // Example:    S: * LSUB (\Noselect) "/" ~/Mail/foo
             string result = "* LSUB (";
 
-            if (attributes != null && attributes.Count() > 0)
+            if (attributes != null && attributes.Any())
             {
                 result += string.Join(" ", attributes);
             }
@@ -143,7 +143,7 @@ namespace Kooboo.Mail.Imap
             //     Example:    S: *SEARCH 2 3 6
 
             string result = "* SEARCH ";
-            if (searchResults != null && searchResults.Count() > 0)
+            if (searchResults != null && searchResults.Any())
             {
                 result += string.Join(" ", searchResults.ToArray());
             }
diff --git a/Kooboo.Mail/Imap/Server/ImapServer.cs b/Kooboo.Mail/Imap/Server/ImapServer.cs
index a792da3e..cc753827 100644
--- a/Kooboo.Mail/Imap/Server/ImapServer.cs
+++ b/Kooboo.Mail/Imap/Server/ImapServer.cs
@@ -108,15 +108,9 @@ namespace Kooboo.Mail.Imap
             if (_listener == null)
                 return;
 
-            if (_cancellationTokenSource != null)
-            {
-                _cancellationTokenSource.Cancel();
-            }
+            _cancellationTokenSource?.Cancel();
 
-            if (_listener != null)
-            {
-                _listener.Stop();
-            }
+            _listener?.Stop();
         }
     }
 
diff --git a/Kooboo.Mail/LumiSoft.Net/AUTH/AUTH_Gmail_OAuth1_3leg.cs b/Kooboo.Mail/LumiSoft.Net/AUTH/AUTH_Gmail_OAuth1_3leg.cs
index 750e2759..6f0dd1ad 100644
--- a/Kooboo.Mail/LumiSoft.Net/AUTH/AUTH_Gmail_OAuth1_3leg.cs
+++ b/Kooboo.Mail/LumiSoft.Net/AUTH/AUTH_Gmail_OAuth1_3leg.cs
@@ -441,7 +441,7 @@ namespace LumiSoft.Net.AUTH
                     retVal.Append(symbol);
                 } 
                 else{
-                    retVal.Append('%' + String.Format("{0:X2}", (int)symbol));
+                    retVal.Append('%' + $"{(int)symbol:X2}");
                 }
             }
 
@@ -462,7 +462,7 @@ namespace LumiSoft.Net.AUTH
             }
 
             HMACSHA1 hmacsha1 = new HMACSHA1();
-            hmacsha1.Key = Encoding.ASCII.GetBytes(string.Format("{0}&{1}", UrlEncode(consumerSecret), string.IsNullOrEmpty(tokenSecret) ? "" : UrlEncode(tokenSecret)));
+            hmacsha1.Key = Encoding.ASCII.GetBytes($"{UrlEncode(consumerSecret)}&{(string.IsNullOrEmpty(tokenSecret) ? "" : UrlEncode(tokenSecret))}");
 
             return Convert.ToBase64String(hmacsha1.ComputeHash(System.Text.Encoding.ASCII.GetBytes(signatureBase)));
         }
diff --git a/Kooboo.Mail/LumiSoft.Net/IO/MemoryStreamEx.cs b/Kooboo.Mail/LumiSoft.Net/IO/MemoryStreamEx.cs
index a2041a2a..a6110165 100644
--- a/Kooboo.Mail/LumiSoft.Net/IO/MemoryStreamEx.cs
+++ b/Kooboo.Mail/LumiSoft.Net/IO/MemoryStreamEx.cs
@@ -54,9 +54,7 @@ namespace LumiSoft.Net.IO
             }
 
             m_IsDisposed = true;
-            if(m_pStream != null){
-                m_pStream.Close();
-            }
+            m_pStream?.Close();
             m_pStream = null;
 
             base.Dispose();
diff --git a/Kooboo.Mail/LumiSoft.Net/IO/SmartStream.cs b/Kooboo.Mail/LumiSoft.Net/IO/SmartStream.cs
index 0e16bd31..e97840db 100644
--- a/Kooboo.Mail/LumiSoft.Net/IO/SmartStream.cs
+++ b/Kooboo.Mail/LumiSoft.Net/IO/SmartStream.cs
@@ -1440,9 +1440,7 @@ namespace LumiSoft.Net.IO
             }
             m_IsDisposed = true;
             
-            if(m_pReadBufferOP != null){
-                m_pReadBufferOP.Dispose();
-            }
+            m_pReadBufferOP?.Dispose();
             m_pReadBufferOP = null;
 
             if(m_IsOwner){
diff --git a/Kooboo.Mail/LumiSoft.Net/Mail/Mail_t_AddressList.cs b/Kooboo.Mail/LumiSoft.Net/Mail/Mail_t_AddressList.cs
index 0cbbe59d..d5110b16 100644
--- a/Kooboo.Mail/LumiSoft.Net/Mail/Mail_t_AddressList.cs
+++ b/Kooboo.Mail/LumiSoft.Net/Mail/Mail_t_AddressList.cs
@@ -305,8 +305,8 @@ namespace LumiSoft.Net.Mail
             get{
                 List<Mail_t_Mailbox> retVal = new List<Mail_t_Mailbox>();
                 foreach(Mail_t_Address address in this){
-                    if(address is Mail_t_Mailbox){
-                        retVal.Add((Mail_t_Mailbox)address);
+                    if(address is Mail_t_Mailbox mail_t_Mailbox){
+                        retVal.Add(mail_t_Mailbox);
                     }
                     else{
                         retVal.AddRange(((Mail_t_Group)address).Members);
diff --git a/Kooboo.Mail/Models/Message.cs b/Kooboo.Mail/Models/Message.cs
index a1295650..908cec46 100644
--- a/Kooboo.Mail/Models/Message.cs
+++ b/Kooboo.Mail/Models/Message.cs
@@ -143,7 +143,7 @@ namespace Kooboo.Mail
         {
             get
             {
-                if(_attachments !=null && _attachments.Count()>0)
+                if(_attachments != null && _attachments.Any())
                 {
                     return true; 
                 }
diff --git a/Kooboo.Mail/Multipart/BodyComposer.cs b/Kooboo.Mail/Multipart/BodyComposer.cs
index 27c47c64..f24e03cd 100644
--- a/Kooboo.Mail/Multipart/BodyComposer.cs
+++ b/Kooboo.Mail/Multipart/BodyComposer.cs
@@ -152,7 +152,7 @@ namespace Kooboo.Mail.Multipart
         public string Body()
         {
 
-            if (this.Attachments != null && this.Attachments.Count() > 0)
+            if (this.Attachments != null && this.Attachments.Any())
             {
                 // has attachmented with mixed.   
                 string body = "MIME-Version: 1.0\r\nContent-Type: multipart/Mixed; boundary=" + this.MixedBondary;
diff --git a/Kooboo.Mail/Queue/Executor/GroupMailExecutor.cs b/Kooboo.Mail/Queue/Executor/GroupMailExecutor.cs
index 565b03a1..56a439e7 100644
--- a/Kooboo.Mail/Queue/Executor/GroupMailExecutor.cs
+++ b/Kooboo.Mail/Queue/Executor/GroupMailExecutor.cs
@@ -32,7 +32,7 @@ namespace Kooboo.Mail.Queue.Executor
                     } 
                 }
                  
-                if (local.Count()>0)
+                if (local.Any())
                 {
                     await Transport.Incoming.Receive(model.MailFrom, local, model.MessageContent); 
                 }
diff --git a/Kooboo.Mail/Repositories/MessageRepository.cs b/Kooboo.Mail/Repositories/MessageRepository.cs
index e53ace32..e0bff210 100644
--- a/Kooboo.Mail/Repositories/MessageRepository.cs
+++ b/Kooboo.Mail/Repositories/MessageRepository.cs
@@ -259,8 +259,8 @@ namespace Kooboo.Mail.Repositories
             }
 
             result.Exists = query.Count();
-            result.UnSeen = lastestRecord.Where(o => !o.Read).Count();
-            result.Recent = lastestRecord.Where(o => o.Recent).Count();
+            result.UnSeen = lastestRecord.Count(o => !o.Read);
+            result.Recent = lastestRecord.Count(o => o.Recent);
 
             if (result.UnSeen > 0)
             {
diff --git a/Kooboo.Mail/Settings.cs b/Kooboo.Mail/Settings.cs
index 4b577c1e..778b36e9 100644
--- a/Kooboo.Mail/Settings.cs
+++ b/Kooboo.Mail/Settings.cs
@@ -76,7 +76,7 @@ namespace Kooboo.Mail
             else
             {
                 var mxs = await Kooboo.Mail.Utility.SmtpUtility.GetMxRecords(RcptTo);
-                if (mxs == null || mxs.Count() == 0)
+                if (mxs == null || !mxs.Any())
                 {
                     setting.OkToSend = false;
                     setting.ErrorMessage = "Mx records not found";
@@ -86,7 +86,7 @@ namespace Kooboo.Mail
                     setting.OkToSend = true;
                     setting.Mxs = mxs;
 
-                    if (serverSetting.ReverseDns != null && serverSetting.ReverseDns.Count() > 0)
+                    if (serverSetting.ReverseDns != null && serverSetting.ReverseDns.Any())
                     {
                         var dns = serverSetting.ReverseDns[0];  //TODO: random it.  
                         setting.LocalIp = System.Net.IPAddress.Parse(dns.IP);
diff --git a/Kooboo.Mail/Smtp/ConnectionInfo.cs b/Kooboo.Mail/Smtp/ConnectionInfo.cs
index 3b212661..78fe74cf 100644
--- a/Kooboo.Mail/Smtp/ConnectionInfo.cs
+++ b/Kooboo.Mail/Smtp/ConnectionInfo.cs
@@ -73,7 +73,7 @@ namespace Kooboo.Mail
 
         public override string ToString()
         {
-            return String.Join(";", this.Select(o => String.Format("{0}={1}", o.Key, o.Value)));
+            return String.Join(";", this.Select(o => $"{o.Key}={o.Value}"));
         }
 
         public void ParseSelf(string str)
diff --git a/Kooboo.Mail/Smtp/SmtpConnector.cs b/Kooboo.Mail/Smtp/SmtpConnector.cs
index 621256f6..8987efdb 100644
--- a/Kooboo.Mail/Smtp/SmtpConnector.cs
+++ b/Kooboo.Mail/Smtp/SmtpConnector.cs
@@ -99,7 +99,7 @@ namespace Kooboo.Mail.Smtp
                     if (session.State == SmtpSession.CommandState.Data)
                     {
                         var externalto = AddressUtility.GetExternalRcpts(session);
-                        var counter = externalto.Count();
+                        var counter = externalto.Count;
 
                         Kooboo.Data.Log.Instance.Email.Write("--recipants");
                         Kooboo.Data.Log.Instance.Email.WriteObj(externalto);
diff --git a/Kooboo.Mail/Smtp/SmtpServer.cs b/Kooboo.Mail/Smtp/SmtpServer.cs
index 0e6354e3..04859b24 100644
--- a/Kooboo.Mail/Smtp/SmtpServer.cs
+++ b/Kooboo.Mail/Smtp/SmtpServer.cs
@@ -103,14 +103,8 @@ namespace Kooboo.Mail.Smtp
             if (_listener == null)
                 return;
 
-            if (_cancellationTokenSource != null)
-            {
-                _cancellationTokenSource.Cancel();
-            }
-            if (_listener != null)
-            {
-                _listener.Stop();
-            }
+            _cancellationTokenSource?.Cancel();
+            _listener?.Stop();
         }
 
         private async Task Loop()
diff --git a/Kooboo.Mail/Transport/Incoming.cs b/Kooboo.Mail/Transport/Incoming.cs
index 035d89ba..ade3e2d2 100644
--- a/Kooboo.Mail/Transport/Incoming.cs
+++ b/Kooboo.Mail/Transport/Incoming.cs
@@ -50,7 +50,7 @@ namespace Kooboo.Mail.Transport
 
             HashSet<string> RcptTo = correctRcptTo(Rcptos); 
 
-            if (string.IsNullOrEmpty(MailFrom) || RcptTo.Count() == 0)
+            if (string.IsNullOrEmpty(MailFrom) || !RcptTo.Any())
             {
                 return;
             }
@@ -196,7 +196,7 @@ namespace Kooboo.Mail.Transport
 
                 var tos = GetRcptTos(session);
 
-                if (!string.IsNullOrEmpty(msgbody) && !string.IsNullOrEmpty(from) && tos != null && tos.Count() > 0)
+                if (!string.IsNullOrEmpty(msgbody) && !string.IsNullOrEmpty(from) && tos != null && tos.Any())
                 {      
                     msgbody = "Received: from " + clienthost + " (" + session.ClientIP + ") by Kooboo Smtp Server; " + DateTime.UtcNow.ToString("r") + "\r\n" + msgbody; 
                 }
@@ -204,7 +204,7 @@ namespace Kooboo.Mail.Transport
                 string log = "SMTP received: " + session.ClientIP + " " + session.UserName + " " + session.Password;
                 _logger.LogInformation(log);
 
-                if (!string.IsNullOrEmpty(from) && !string.IsNullOrEmpty(msgbody) && tos.Count()>0)
+                if (!string.IsNullOrEmpty(from) && !string.IsNullOrEmpty(msgbody) && tos.Any())
                 {
                     await Receive(from, tos.ToList(), msgbody);
                 } 
diff --git a/Kooboo.Mail/Utility/MessageUtility.cs b/Kooboo.Mail/Utility/MessageUtility.cs
index 66c8cfa4..22378d62 100644
--- a/Kooboo.Mail/Utility/MessageUtility.cs
+++ b/Kooboo.Mail/Utility/MessageUtility.cs
@@ -71,8 +71,7 @@ namespace Kooboo.Mail.Utility
                 {
                     if (Lib.Helper.StringHelper.IsSameValue(item.ContentType.Type, "text") && Lib.Helper.StringHelper.IsSameValue(item.ContentType.SubType, "html"))
                     {
-                        var btext = item.Body as MIME_b_Text;
-                        if (btext != null)
+                        if (item.Body is MIME_b_Text btext)
                         {
                             return btext.Text;
                         }
@@ -90,8 +89,7 @@ namespace Kooboo.Mail.Utility
                 {
                     if (Lib.Helper.StringHelper.IsSameValue(item.ContentType.Type, "text") && Lib.Helper.StringHelper.IsSameValue(item.ContentType.SubType, "plain"))
                     {
-                        var btext = item.Body as MIME_b_Text;
-                        if (btext != null)
+                        if (item.Body is MIME_b_Text btext)
                         {
                             return btext.Text;
                         }
@@ -109,8 +107,7 @@ namespace Kooboo.Mail.Utility
                 {
                     if (Lib.Helper.StringHelper.IsSameValue(item.ContentType.Type, "text"))
                     {
-                        var btext = item.Body as MIME_b_Text;
-                        if (btext != null)
+                        if (item.Body is MIME_b_Text btext)
                         {
                             return btext.Text;
                         }
@@ -147,9 +144,7 @@ namespace Kooboo.Mail.Utility
         {
             foreach (var item in msg.Header)
             {
-                var header = item as MIME_h_Unstructured;
-
-                if (header != null && Lib.Helper.StringHelper.IsSameValue(header.Name, headername))
+                if (item is MIME_h_Unstructured header && Lib.Helper.StringHelper.IsSameValue(header.Name, headername))
                 {
                     return header.Value;
                 }
@@ -165,9 +160,7 @@ namespace Kooboo.Mail.Utility
             {
                 if (item.ContentDisposition != null && item.ContentDisposition.DispositionType != null && item.ContentDisposition.DispositionType.ToLower() == "attachment")
                 {
-                    var attachmentbody = item.Body as LumiSoft.Net.MIME.MIME_b_SinglepartBase;
-
-                    if (attachmentbody != null)
+                    if (item.Body is LumiSoft.Net.MIME.MIME_b_SinglepartBase attachmentbody)
                     {
                         Models.Attachment attach = new Models.Attachment();
                         attach.FileName = item.ContentDisposition.Param_FileName;
@@ -244,9 +237,7 @@ namespace Kooboo.Mail.Utility
                 if ((item.ContentDisposition != null && item.ContentDisposition.DispositionType != null && item.ContentDisposition.Param_FileName == FileName)
                     || (item.ContentType != null && item.ContentType.Param_Name == FileName))
                 {
-                    var attachmentbody = item.Body as LumiSoft.Net.MIME.MIME_b_SinglepartBase;
-
-                    if (attachmentbody != null)
+                    if (item.Body is LumiSoft.Net.MIME.MIME_b_SinglepartBase attachmentbody)
                     {
 
                         if (attachmentbody.Data != null)
@@ -301,7 +292,7 @@ namespace Kooboo.Mail.Utility
             var memorystream = new MemoryStream();
             var allattachments = ParseAttachment(mime);
 
-            if (allattachments == null || allattachments.Count() == 0)
+            if (allattachments == null || !allattachments.Any())
             {
                 return null;
             }
@@ -423,8 +414,7 @@ namespace Kooboo.Mail.Utility
                 entity.ContentType.Param_Boundary = Guid.NewGuid().ToString().ToLower();
             }
 
-            var multipart = entity.Body as MIME_b_Multipart;
-            if (multipart != null)
+            if (entity.Body is MIME_b_Multipart multipart)
             {
                 foreach (MIME_Entity each in multipart.BodyParts)
                 {
diff --git a/Kooboo.Render/Controller/Response/ResponseBase.cs b/Kooboo.Render/Controller/Response/ResponseBase.cs
index 57be8ee0..d731adb2 100644
--- a/Kooboo.Render/Controller/Response/ResponseBase.cs
+++ b/Kooboo.Render/Controller/Response/ResponseBase.cs
@@ -70,7 +70,7 @@ namespace Kooboo.Render.Response
 
         public void AppendCookie(string CookieName, string CookieValue, int days = 30)
         {
-            var oldcookie = AppendedCookies.Where(o => o.Name == CookieName).FirstOrDefault();
+            var oldcookie = AppendedCookies.FirstOrDefault(o => o.Name == CookieName);
 
             if (oldcookie != null)
             {
diff --git a/Kooboo.Render/Customized/AdminVersionEvaluator.cs b/Kooboo.Render/Customized/AdminVersionEvaluator.cs
index 651c410e..7154369a 100644
--- a/Kooboo.Render/Customized/AdminVersionEvaluator.cs
+++ b/Kooboo.Render/Customized/AdminVersionEvaluator.cs
@@ -109,7 +109,7 @@ namespace Kooboo.Render.Customized
                 response.AttributeTask.AddRange(tasks);
             }
 
-            if (response.AttributeTask == null || response.AttributeTask.Count() == 0)
+            if (response.AttributeTask == null || !response.AttributeTask.Any())
             {
                 return null;
             }
diff --git a/Kooboo.Render/ServerSide/LoadJs.cs b/Kooboo.Render/ServerSide/LoadJs.cs
index 3facf65a..8eeda3f9 100644
--- a/Kooboo.Render/ServerSide/LoadJs.cs
+++ b/Kooboo.Render/ServerSide/LoadJs.cs
@@ -15,7 +15,7 @@ namespace Kooboo.Render.ServerSide
 
         public string Render(CommandDiskSourceProvider sourceProvider, RenderOption option,  RenderContext context, string baseRelativeUrl)
         {
-          if (paras.Count() >0)
+          if (paras.Any())
             {
                 // load js, only accept one para, the relative url. 
                 var relativeurl = paras.First();
diff --git a/Kooboo.Render/ServerSide/LoadJsFolder.cs b/Kooboo.Render/ServerSide/LoadJsFolder.cs
index ef53bb21..8d84985d 100644
--- a/Kooboo.Render/ServerSide/LoadJsFolder.cs
+++ b/Kooboo.Render/ServerSide/LoadJsFolder.cs
@@ -16,7 +16,7 @@ namespace Kooboo.Render.ServerSide
         {
             string fulltext = null;
 
-            if (paras.Count() > 0)
+            if (paras.Any())
             {
                 // load js, only accept one para, the relative url. 
                 var relativeurl = paras.First();
diff --git a/Kooboo.Render/ServerSide/ServerEngine.cs b/Kooboo.Render/ServerSide/ServerEngine.cs
index 11ff91b6..39385a15 100644
--- a/Kooboo.Render/ServerSide/ServerEngine.cs
+++ b/Kooboo.Render/ServerSide/ServerEngine.cs
@@ -62,7 +62,7 @@ namespace Kooboo.Render.ServerSide
              
             System.IO.FileInfo info = new System.IO.FileInfo(fullname);
 
-            if (info != null && info.LastWriteTime != null)
+            if (info?.LastWriteTime != null)
             {
                 JsRenderPlan renderplan = null;
 
@@ -156,7 +156,7 @@ namespace Kooboo.Render.ServerSide
                 }
             }
 
-            if (pretask.Count() > 0)
+            if (pretask.Any())
             {
                 int currentIndex = 0;
                 foreach (var item in pretask.OrderBy(o => o.start))
@@ -206,7 +206,7 @@ namespace Kooboo.Render.ServerSide
                 }
             }
 
-            if (pretask.Count() > 0)
+            if (pretask.Any())
             {
                 int currentIndex = 0;
                 foreach (var item in pretask.OrderBy(o => o.start))
diff --git a/Kooboo.Render/ServerSide/SetHtml.cs b/Kooboo.Render/ServerSide/SetHtml.cs
index 7801eb5c..eaedbe52 100644
--- a/Kooboo.Render/ServerSide/SetHtml.cs
+++ b/Kooboo.Render/ServerSide/SetHtml.cs
@@ -16,7 +16,7 @@ namespace Kooboo.Render.ServerSide
         {
             string result= null; 
 
-            if (paras.Count() >1 )
+            if (paras.Count >1 )
             {
                 // set html require two paras, one for the variable name, one for the relative url. 
                 string name = paras[0]; 
diff --git a/Kooboo.Render/ServerSide/SetMethods.cs b/Kooboo.Render/ServerSide/SetMethods.cs
index c077bbdb..02f225e6 100644
--- a/Kooboo.Render/ServerSide/SetMethods.cs
+++ b/Kooboo.Render/ServerSide/SetMethods.cs
@@ -15,7 +15,7 @@ namespace Kooboo.Render.ServerSide
         public string Render(CommandDiskSourceProvider sourceProvider, RenderOption option, RenderContext context, string baseRelativeUrl)
         {
    
-            if (paras.Count() > 1)
+            if (paras.Count > 1)
             { 
                 string varname = paras[0];
                 var relativeurl = paras[1];
diff --git a/Kooboo.Render/ServerSide/StringTask.cs b/Kooboo.Render/ServerSide/StringTask.cs
index e03601dc..561aeb4e 100644
--- a/Kooboo.Render/ServerSide/StringTask.cs
+++ b/Kooboo.Render/ServerSide/StringTask.cs
@@ -23,7 +23,7 @@ namespace Kooboo.Render.ServerSide
             {
                 return content; 
             }
-            if (paras.Count()>0)
+            if (paras.Any())
             {
                 return paras[0]; 
             }
diff --git a/Kooboo.Sites/Constraints/ConstraintChecker.cs b/Kooboo.Sites/Constraints/ConstraintChecker.cs
index 6186d5fd..8c45f8d3 100644
--- a/Kooboo.Sites/Constraints/ConstraintChecker.cs
+++ b/Kooboo.Sites/Constraints/ConstraintChecker.cs
@@ -154,8 +154,7 @@ namespace Kooboo.Sites.Constraints
 
                     if (oneresult != null)
                     {
-                        var listresult = oneresult as List<ConstraintResponse>;
-                        if (listresult != null && listresult.Count() > 0)
+                        if (oneresult is List<ConstraintResponse> listresult && listresult.Any())
                         {
                             result.AddRange(listresult);
                         }
@@ -190,8 +189,7 @@ namespace Kooboo.Sites.Constraints
 
                         if (oneresult != null)
                         {
-                            var listresult = oneresult as List<ConstraintResponse>;
-                            if (listresult != null && listresult.Count() > 0)
+                            if (oneresult is List<ConstraintResponse> listresult && listresult.Any())
                             {
                                 result.AddRange(listresult);
                             }
diff --git a/Kooboo.Sites/Contents/Models/TextContent.cs b/Kooboo.Sites/Contents/Models/TextContent.cs
index f8714cb6..6e58b965 100644
--- a/Kooboo.Sites/Contents/Models/TextContent.cs
+++ b/Kooboo.Sites/Contents/Models/TextContent.cs
@@ -129,7 +129,7 @@ namespace Kooboo.Sites.Contents.Models
             {
                 var content = this.GetContentStore(null);
 
-                if (content != null && content.FieldValues.Count() > 0)
+                if (content != null && content.FieldValues.Any())
                 {
                     return content.FieldValues.First().Value;
                 }
@@ -235,12 +235,12 @@ namespace Kooboo.Sites.Contents.Models
             {
                 content = this.Contents.Find(o => o.Lang == Lang);
             }
-            if (content == null && this.Contents.Count() > 0)
+            if (content == null && this.Contents.Any())
             {
                 content = this.Contents.Find(o => string.IsNullOrEmpty(o.Lang));
             }
 
-            if (content == null && this.Contents.Count() > 0 && !string.IsNullOrEmpty(Lang))
+            if (content == null && this.Contents.Any()&& !string.IsNullOrEmpty(Lang))
             {
                 string lower = Lang.ToLower();
                 if (lower.Length > 2)
@@ -264,7 +264,7 @@ namespace Kooboo.Sites.Contents.Models
                     content.Lang = Lang;
                     this.Contents.Add(content);
                 }
-                else if (this.Contents.Count() > 0)
+                else if (this.Contents.Any())
                 {
                     return this.Contents.First();
                 }
diff --git a/Kooboo.Sites/Converter/Implementation/ContentListConverter.cs b/Kooboo.Sites/Converter/Implementation/ContentListConverter.cs
index 8e146acf..2951777b 100644
--- a/Kooboo.Sites/Converter/Implementation/ContentListConverter.cs
+++ b/Kooboo.Sites/Converter/Implementation/ContentListConverter.cs
@@ -104,7 +104,7 @@ namespace Kooboo.Sites.Converter
                 }
 
 
-                if (updates.Count()>0)
+                if (updates.Any())
                 {
                     foreach (var item in updates)
                     {
diff --git a/Kooboo.Sites/Converter/Implementation/MenuConverter.cs b/Kooboo.Sites/Converter/Implementation/MenuConverter.cs
index 1eaa999d..5a96ce0d 100644
--- a/Kooboo.Sites/Converter/Implementation/MenuConverter.cs
+++ b/Kooboo.Sites/Converter/Implementation/MenuConverter.cs
@@ -68,8 +68,8 @@ namespace Kooboo.Sites.Converter
             if (sitedb.WebSite.ContinueConvert)
             {
                 var DomNode = DomService.GetElementByKoobooId(page.Dom, koobooid);
-                var DomElement = DomNode as Kooboo.Dom.Element;
-                if (DomElement != null)
+
+                if (DomNode is Kooboo.Dom.Element DomElement)
                 {
                     var elementpaths = Kooboo.Sites.Service.DomService.GetElementPath(DomElement as Kooboo.Dom.Element);
 
@@ -180,8 +180,7 @@ namespace Kooboo.Sites.Converter
 
             if (domelement != null)
             {
-                var element = domelement as Element;
-                if (element != null)
+                if (domelement is Element element)
                 {
                     var rawmenu = Service.MenuService.FindRawMenu(element);
 
@@ -266,7 +265,7 @@ namespace Kooboo.Sites.Converter
 
         public string DetectKoobooId(Document dom, Menu menu)
         {
-            if (menu.children.Count() == 0)
+            if (!menu.children.Any())
             {
                 return null;
             }
diff --git a/Kooboo.Sites/DataSources/ContentList.cs b/Kooboo.Sites/DataSources/ContentList.cs
index c5906d96..1bd023cd 100644
--- a/Kooboo.Sites/DataSources/ContentList.cs
+++ b/Kooboo.Sites/DataSources/ContentList.cs
@@ -56,7 +56,7 @@ namespace Kooboo.Sites.DataSources
             {
                 int skip = (PageNumber - 1) * PageSize;
                 PagedResult pagedresult = new PagedResult();
-                pagedresult.TotalCount = contents.Count();
+                pagedresult.TotalCount = contents.Count;
                 pagedresult.TotalPages = Lib.Helper.CalculationHelper.GetPageCount(pagedresult.TotalCount, PageSize);
                 pagedresult.DataList = contents.Skip(skip).Take(PageSize).ToList().ToList<object>();
                 return pagedresult;
diff --git a/Kooboo.Sites/DataSources/DataMethodExecutor.cs b/Kooboo.Sites/DataSources/DataMethodExecutor.cs
index cdcaf057..3516b479 100644
--- a/Kooboo.Sites/DataSources/DataMethodExecutor.cs
+++ b/Kooboo.Sites/DataSources/DataMethodExecutor.cs
@@ -153,8 +153,7 @@ namespace Kooboo.Sites.DataSources
             { return null; }
             else
             {
-                var resultAsTask = result as Task;
-                if (resultAsTask != null)
+                if (result is Task resultAsTask)
                 {
                     if (method.ReturnType == typeof(Task))
                     {
@@ -177,10 +176,7 @@ namespace Kooboo.Sites.DataSources
                     // 1. Types which have derived from Task and Task<T>,
                     // 2. Action methods which use dynamic keyword but return a Task or Task<T>.
                     throw new InvalidOperationException(
-                        String.Format("The method '{0}' on type '{1}' returned a Task instance even though it is not an asynchronous method.",
-                            "Not getted",
-                            method.DeclareType
-                        )
+                        $"The method '{"Not getted"}' on type '{method.DeclareType}' returned a Task instance even though it is not an asynchronous method."
                     );
                 }
                 else
@@ -235,7 +231,7 @@ namespace Kooboo.Sites.DataSources
 
         internal static void CheckAndAssignDefaultValue(List<object> values, DataMethodCompiled CompiledMethod, Render.FrontContext context, Guid CurrentMethodId)
         {
-            if (!values.Where(o => o == null).Any())
+            if (!values.Any(o => o == null))
             {
                 return;
             }
@@ -430,7 +426,7 @@ namespace Kooboo.Sites.DataSources
                         {
                             var itemcollection = ((IEnumerable)result).Cast<object>().ToList();
 
-                            if (itemcollection != null && itemcollection.Count() > 0)
+                            if (itemcollection != null && itemcollection.Any())
                             {
                                 var contentitem = itemcollection[0];
 
@@ -459,7 +455,7 @@ namespace Kooboo.Sites.DataSources
                             {
                                 var itemcollection = ((IEnumerable)result).Cast<object>().ToList();
 
-                                if (itemcollection != null && itemcollection.Count() > 0)
+                                if (itemcollection != null && itemcollection.Any())
                                 {
                                     var contentitem = itemcollection[0];
 
@@ -487,7 +483,7 @@ namespace Kooboo.Sites.DataSources
                             var paged = result as PagedResult;
                             itemcollection = ((IEnumerable)paged.DataList).Cast<object>().ToList();
 
-                            if (itemcollection != null && itemcollection.Count() > 0)
+                            if (itemcollection != null && itemcollection.Any())
                             {
                                 var contentitem = itemcollection[0];
 
@@ -502,7 +498,7 @@ namespace Kooboo.Sites.DataSources
                         {
                             itemcollection = ((IEnumerable)result).Cast<object>().ToList();
 
-                            if (itemcollection != null && itemcollection.Count() > 0)
+                            if (itemcollection != null && itemcollection.Any())
                             {
                                 var contentitem = itemcollection[0];
 
@@ -568,11 +564,7 @@ namespace Kooboo.Sites.DataSources
                 if (innerTaskType != null && typeof(Task).IsAssignableFrom(innerTaskType))
                 {
                     throw new InvalidOperationException(
-                        String.Format("The method '{0}' on type '{1}' returned an instance of '{2}'.Make sure to call Unwrap on the returned value to avoid unobserved faulted Task.",
-                            methodName,
-                            declaringType,
-                            actualTypeReturned.FullName
-                        )
+                        $"The method '{methodName}' on type '{declaringType}' returned an instance of '{actualTypeReturned.FullName}'.Make sure to call Unwrap on the returned value to avoid unobserved faulted Task."
                     );
                 }
             }
diff --git a/Kooboo.Sites/DataSources/DataSourceHelper.cs b/Kooboo.Sites/DataSources/DataSourceHelper.cs
index 6c696827..ba07adc6 100644
--- a/Kooboo.Sites/DataSources/DataSourceHelper.cs
+++ b/Kooboo.Sites/DataSources/DataSourceHelper.cs
@@ -605,7 +605,7 @@ namespace Kooboo.Sites.DataSources
         internal static List<TypeFieldModel> GetXmlTypeFields(string xml)
         {
             var xdoc = Lib.Helper.XmlHelper.DeSerialize(xml);
-            if (xdoc != null && xdoc.Root != null)
+            if (xdoc?.Root != null)
             {
                 return _GetXmlTypeInfo(xdoc.Root);
             }
@@ -637,7 +637,7 @@ namespace Kooboo.Sites.DataSources
         private static bool IsXmlCollection(XElement el)
         {
             var subs = el.Nodes();
-            if (subs == null || subs.Count() == 0 || subs.Count() == 1)
+            if (subs == null || !subs.Any() || subs.Count() == 1)
             {
                 return false;
             }
@@ -671,7 +671,7 @@ namespace Kooboo.Sites.DataSources
                 return false;
             }
             var subnodes = el.Nodes();
-            if (subnodes.Count() == 0)
+            if (!subnodes.Any())
             {
                 return false;
             }
@@ -709,8 +709,7 @@ namespace Kooboo.Sites.DataSources
             string name = el.Name.ToString();
             foreach (var item in el.Nodes())
             {
-                var itemel = item as XElement;
-                if (itemel != null)
+                if (item is XElement itemel)
                 {
                     name += itemel.Name.ToString();
                 }
@@ -839,7 +838,7 @@ namespace Kooboo.Sites.DataSources
             if (defineType != null)
             {
                 var definereturn = defineType as Attributes.ReturnType;
-                if (definereturn != null && definereturn.Type != null)
+                if (definereturn?.Type != null)
                 {
                     return definereturn.Type;
                 }
diff --git a/Kooboo.Sites/DataSources/FilterHelper.cs b/Kooboo.Sites/DataSources/FilterHelper.cs
index caa2fb50..a69ff55d 100644
--- a/Kooboo.Sites/DataSources/FilterHelper.cs
+++ b/Kooboo.Sites/DataSources/FilterHelper.cs
@@ -153,7 +153,7 @@ namespace Kooboo.Sites.DataSources
 
                     if (Comparer == Comparer.GreaterThan)
                     {
-                        if (value != null && value is IComparable && tovale is IComparable)
+                        if (value is IComparable && tovale is IComparable)
                         {
                             return ((IComparable)value).CompareTo((IComparable)tovale) > 0;
                         }
@@ -161,21 +161,21 @@ namespace Kooboo.Sites.DataSources
 
                     else if (Comparer == Comparer.GreaterThanOrEqual)
                     {
-                        if (value != null && value is IComparable && tovale is IComparable)
+                        if (value is IComparable && tovale is IComparable)
                         {
                             return ((IComparable)value).CompareTo((IComparable)tovale) >= 0;
                         }
                     }
                     else if (Comparer == Comparer.LessThan)
                     {
-                        if (value != null && value is IComparable && tovale is IComparable)
+                        if (value is IComparable && tovale is IComparable)
                         {
                             return ((IComparable)value).CompareTo((IComparable)tovale) < 0;
                         }
                     }
                     else if (Comparer == Comparer.LessThanOrEqual)
                     {
-                        if (value != null && value is IComparable && tovale is IComparable)
+                        if (value is IComparable && tovale is IComparable)
                         {
                             return ((IComparable)value).CompareTo((IComparable)tovale) <= 0;
                         }
diff --git a/Kooboo.Sites/DataTraceAndModify/Modifiers/DomModifier.cs b/Kooboo.Sites/DataTraceAndModify/Modifiers/DomModifier.cs
index 35b90fb8..00ae32ec 100644
--- a/Kooboo.Sites/DataTraceAndModify/Modifiers/DomModifier.cs
+++ b/Kooboo.Sites/DataTraceAndModify/Modifiers/DomModifier.cs
@@ -224,7 +224,7 @@ namespace Kooboo.Sites.DataTraceAndModify.Modifiers
                     DeclarationText = declarations.GenerateCssText()
                 };
 
-                if (declarations.item.Count() == 0)
+                if (!declarations.item.Any())
                 {
                     onechange.ChangeType = ChangeType.Delete;
                 }
diff --git a/Kooboo.Sites/Diagnosis/Advanced/DomParser.cs b/Kooboo.Sites/Diagnosis/Advanced/DomParser.cs
index 3d3838da..b0242f4a 100644
--- a/Kooboo.Sites/Diagnosis/Advanced/DomParser.cs
+++ b/Kooboo.Sites/Diagnosis/Advanced/DomParser.cs
@@ -47,8 +47,7 @@ namespace Kooboo.Sites.Diagnosis.Advanced
 
                     foreach (var item in allitems)
                     {
-                        var domobj = item as DomObject;
-                        if (domobj != null)
+                        if (item is DomObject domobj)
                         {
                             List<string> errors = new List<string>();
 
diff --git a/Kooboo.Sites/Diagnosis/DiagnosisHelper.cs b/Kooboo.Sites/Diagnosis/DiagnosisHelper.cs
index 8d1681f3..f6cd29d2 100644
--- a/Kooboo.Sites/Diagnosis/DiagnosisHelper.cs
+++ b/Kooboo.Sites/Diagnosis/DiagnosisHelper.cs
@@ -84,7 +84,7 @@ namespace Kooboo.Sites.Diagnosis
                 if (obj != null)
                 {
                     //ToDo rewrite
-                    var url = string.Format("/_Admin/Development/{2}?SiteId={0}&Id={1}", sitedb.Id, obj.Id, typeName);
+                    var url = $"/_Admin/Development/{sitedb.Id}?SiteId={obj.Id}&Id={typeName}";
                     responseMessage.AppendFormat("<a href='{0}' target='_blank'>{1}</a> ", url, obj.Name);
                 }
             }
diff --git a/Kooboo.Sites/Diagnosis/Implementation/HtmlTag.cs b/Kooboo.Sites/Diagnosis/Implementation/HtmlTag.cs
index b88e257b..b1eb42ff 100644
--- a/Kooboo.Sites/Diagnosis/Implementation/HtmlTag.cs
+++ b/Kooboo.Sites/Diagnosis/Implementation/HtmlTag.cs
@@ -55,8 +55,7 @@ namespace Kooboo.Sites.Diagnosis.Implementation
 
                     foreach (var item in allitems)
                     {
-                        var domobj = item as IDomObject;
-                        if (domobj != null)
+                        if (item is IDomObject domobj)
                         {
                             var dom = domobj.Dom;
 
@@ -122,8 +121,7 @@ namespace Kooboo.Sites.Diagnosis.Implementation
                 }
                 else if (item.nodeType == enumNodeType.TEXT)
                 {
-                    var textnode = item as Text;
-                    if (textnode != null && !string.IsNullOrWhiteSpace(textnode.data))
+                    if (item is Text textnode && !string.IsNullOrWhiteSpace(textnode.data))
                     {
                         return false;
                     }
diff --git a/Kooboo.Sites/Diagnosis/Implementation/ImageSize.cs b/Kooboo.Sites/Diagnosis/Implementation/ImageSize.cs
index 366f6fdb..e8d30e95 100644
--- a/Kooboo.Sites/Diagnosis/Implementation/ImageSize.cs
+++ b/Kooboo.Sites/Diagnosis/Implementation/ImageSize.cs
@@ -41,7 +41,7 @@ namespace Kooboo.Sites.Diagnosis.Implementation
 
                 int size = item.Size;
 
-                string message = string.Format("<b>{0}: {1}, {2}: {3}<b><br/>", imageNameText, item.Name, imageSizeText, Kooboo.Lib.Utilities.CalculateUtility.GetSizeString(size));
+                string message = $"<b>{imageNameText}: {item.Name}, {imageSizeText}: {Kooboo.Lib.Utilities.CalculateUtility.GetSizeString(size)}<b><br/>";
 
                 if (size > terriblesize)
                 {
diff --git a/Kooboo.Sites/Ecommerce/Models/Product.cs b/Kooboo.Sites/Ecommerce/Models/Product.cs
index c255e763..8cc707ff 100644
--- a/Kooboo.Sites/Ecommerce/Models/Product.cs
+++ b/Kooboo.Sites/Ecommerce/Models/Product.cs
@@ -50,7 +50,7 @@ namespace Kooboo.Sites.Ecommerce.Models
             {
                 var content = this.GetContentStore(null);
 
-                if (content != null && content.FieldValues.Count() > 0)
+                if (content != null && content.FieldValues.Any())
                 {
                     return content.FieldValues.First().Value;
                 }
@@ -139,12 +139,12 @@ namespace Kooboo.Sites.Ecommerce.Models
             {
                 content = this.Contents.Find(o => o.Lang == Lang);
             }
-            if (content == null && this.Contents.Count() > 0)
+            if (content == null && this.Contents.Any())
             {
                 content = this.Contents.Find(o => string.IsNullOrEmpty(o.Lang));
             }
 
-            if (content == null && this.Contents.Count() > 0 && !string.IsNullOrEmpty(Lang))
+            if (content == null && this.Contents.Any()&& !string.IsNullOrEmpty(Lang))
             {
                 string lower = Lang.ToLower();
                 if (lower.Length > 2)
@@ -168,7 +168,7 @@ namespace Kooboo.Sites.Ecommerce.Models
                     content.Lang = Lang;
                     this.Contents.Add(content);
                 }
-                else if (this.Contents.Count() > 0)
+                else if (this.Contents.Any())
                 {
                     return this.Contents.First();
                 }
diff --git a/Kooboo.Sites/Events/Cms/Handler.cs b/Kooboo.Sites/Events/Cms/Handler.cs
index ee99b8ac..29f74886 100644
--- a/Kooboo.Sites/Events/Cms/Handler.cs
+++ b/Kooboo.Sites/Events/Cms/Handler.cs
@@ -70,8 +70,7 @@ namespace Kooboo.Sites.Events
 
             foreach (var item in handler)
             {
-               var HandleItem = item as Action<SiteObjectEvent<T>>; 
-               if (HandleItem !=null)
+               if (item is Action<SiteObjectEvent<T>> HandleItem)
                 {
                     HandleItem(e); 
                 }
@@ -291,7 +290,7 @@ namespace Kooboo.Sites.Events
                 foreach (var folder in allfolder)
                 {
                     var catteds = folder.Category.FindAll(o => o.FolderId == TheEvent.Value.Id).ToList();
-                    if (catteds != null && catteds.Count() > 0)
+                    if (catteds != null && catteds.Any())
                     {
                         foreach (var item in catteds)
                         {
@@ -307,7 +306,7 @@ namespace Kooboo.Sites.Events
                 {
                     var embedfolders = folder.Embedded.FindAll(o => o.FolderId == TheEvent.Value.Id).ToList();
 
-                    if (embedfolders != null && embedfolders.Count() > 0)
+                    if (embedfolders != null && embedfolders.Any())
                     {
                         foreach (var embedfolder in embedfolders)
                         {
diff --git a/Kooboo.Sites/FrontEvent/EventConditionSetting.cs b/Kooboo.Sites/FrontEvent/EventConditionSetting.cs
index d895bcbe..bdb00953 100644
--- a/Kooboo.Sites/FrontEvent/EventConditionSetting.cs
+++ b/Kooboo.Sites/FrontEvent/EventConditionSetting.cs
@@ -14,7 +14,7 @@ public  class EventConditionSetting :Kooboo.Data.Models.SimpleSetting
         {
             get
             {
-                if ((_Operator == null || _Operator.Count()==0) && this.DataType != null)
+                if ((_Operator == null || !_Operator.Any()) && this.DataType != null)
                 {
                     _Operator = FrontEvent.ConditionManager.GetOperators(this.DataType);
                 }
diff --git a/Kooboo.Sites/FrontEvent/Manager.cs b/Kooboo.Sites/FrontEvent/Manager.cs
index 791e0976..7a3ef49d 100644
--- a/Kooboo.Sites/FrontEvent/Manager.cs
+++ b/Kooboo.Sites/FrontEvent/Manager.cs
@@ -113,7 +113,7 @@ namespace Kooboo.Sites.FrontEvent
             var sitedb = context.WebSite.SiteDb(); 
             var list = sitedb.Rules.ListByEventType(theevent.EventType);
 
-            if (list == null || list.Count() == 0)
+            if (list == null || !list.Any())
             {
                 return;
             } 
@@ -142,7 +142,7 @@ namespace Kooboo.Sites.FrontEvent
 
         public static void ExecuteRule(SiteDb sitedb,   KScript.k kcontext, IFrontEvent theevent, Kooboo.Sites.Models.IFElseRule rule)
         {
-            if (rule.Do != null && rule.Do.Count() > 0)
+            if (rule.Do != null && rule.Do.Any())
             {
                 foreach (var item in rule.Do)
                 {
@@ -162,13 +162,13 @@ namespace Kooboo.Sites.FrontEvent
                 }
             }
 
-            if (rule.IF != null && rule.IF.Count() > 0)
+            if (rule.IF != null && rule.IF.Any())
             {
                 var check = EvaluteCondition(theevent, rule.IF);
 
                 if (check)
                 {
-                    if (rule.Then != null && rule.Then.Count() > 0)
+                    if (rule.Then != null && rule.Then.Any())
                     {
                         foreach (var item in rule.Then)
                         {
@@ -178,7 +178,7 @@ namespace Kooboo.Sites.FrontEvent
                 }
                 else
                 {
-                    if (rule.Else != null && rule.Else.Count() > 0)
+                    if (rule.Else != null && rule.Else.Any())
                     {
                         foreach (var item in rule.Else)
                         {
diff --git a/Kooboo.Sites/Helper/ChangeHelper.cs b/Kooboo.Sites/Helper/ChangeHelper.cs
index 70782c84..8277d9e4 100644
--- a/Kooboo.Sites/Helper/ChangeHelper.cs
+++ b/Kooboo.Sites/Helper/ChangeHelper.cs
@@ -41,7 +41,7 @@ namespace Kooboo.Sites.Helper
                         if (rulerepo != null)
                         {
                             var ownerobject = rulerepo.Get(rule.OwnerObjectId);
-                            if (ownerobject != null && ownerobject is IDomObject)
+                            if (ownerobject is IDomObject)
                             {
                                 var domobject = ownerobject as IDomObject;
                                 var node = Service.DomService.GetElementByKoobooId(domobject.Dom, rule.KoobooId);
@@ -172,7 +172,7 @@ namespace Kooboo.Sites.Helper
                         if (rulerepo != null)
                         {
                             var ownerobject = rulerepo.Get(rule.OwnerObjectId);
-                            if (ownerobject != null && ownerobject is IDomObject)
+                            if (ownerobject is IDomObject)
                             {
                                 var domobject = ownerobject as IDomObject;
                                 var node = Service.DomService.GetElementByKoobooId(domobject.Dom, rule.KoobooId);
diff --git a/Kooboo.Sites/Helper/ContentHelper.cs b/Kooboo.Sites/Helper/ContentHelper.cs
index 7cb98da4..2a7ee99c 100644
--- a/Kooboo.Sites/Helper/ContentHelper.cs
+++ b/Kooboo.Sites/Helper/ContentHelper.cs
@@ -70,12 +70,12 @@ namespace Kooboo.Sites.Helper
             Dictionary<string, string> displayFields = new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase);
 
             var fields = ContentType.Properties.FindAll(o => o.IsSummaryField && !o.IsSystemField);
-            if (fields == null || fields.Count() == 0)
+            if (fields == null || !fields.Any())
             {
                 fields = ContentType.Properties.FindAll(o => !o.IsSystemField && o.DataType == Data.Definition.DataTypes.String);
             }
 
-            if (fields == null || fields.Count() == 0)
+            if (fields == null || !fields.Any())
             {
                 fields = ContentType.Properties.FindAll(o => !o.IsSystemField);
             }
@@ -131,7 +131,7 @@ namespace Kooboo.Sites.Helper
 
         public static List<TextContentViewModel> ToViews(List<TextContent> Contents, string lang, List<ContentProperty> Properties)
         {
-            if (Contents == null || Contents.Count() == 0)
+            if (Contents == null || !Contents.Any())
             {
                 return new List<TextContentViewModel>();
             }
@@ -166,7 +166,7 @@ namespace Kooboo.Sites.Helper
         {
             List<EmbeddedContentViewModel> embedded = new List<EmbeddedContentViewModel>();
             var folder = sitedb.ContentFolders.Get(folderId);
-            if (folder == null || (folder.Embedded == null || folder.Embedded.Count() == 0))
+            if (folder == null || (folder.Embedded == null || !folder.Embedded.Any()))
             {
                 return embedded;
             }
@@ -317,7 +317,7 @@ namespace Kooboo.Sites.Helper
                             {
                                 List<string> files = Lib.Helper.JsonHelper.Deserialize<List<string>>(link);
 
-                                if (files != null && files.Count() > 0)
+                                if (files != null && files.Any())
                                 {
                                     foreach (var item in files)
                                     {
diff --git a/Kooboo.Sites/Helper/ElementHelper.cs b/Kooboo.Sites/Helper/ElementHelper.cs
index 4a6b1868..84092d68 100644
--- a/Kooboo.Sites/Helper/ElementHelper.cs
+++ b/Kooboo.Sites/Helper/ElementHelper.cs
@@ -148,7 +148,7 @@ namespace Kooboo.Sites.Helper
 
             var targets = FindElementsByDepth(TargetDom, sourceElement.depth);
 
-            if (targets.Count() == 0)
+            if (!targets.Any())
             {
                 return null;
             }
@@ -158,7 +158,7 @@ namespace Kooboo.Sites.Helper
 
             var sameparent = targets.Where(o => GetParentPath(o) == parentpath).ToList();
 
-            if (sameparent == null || sameparent.Count() == 0)
+            if (sameparent == null || !sameparent.Any())
             {
                 return null;
             }
@@ -225,7 +225,7 @@ namespace Kooboo.Sites.Helper
             //should remove all space between elements.  
             var exactmatch = targets.Where(o => o.InnerHtml == el.InnerHtml).ToList(); 
              
-            if (exactmatch != null &&exactmatch.Count()>0)
+            if (exactmatch != null && exactmatch.Any())
             {
                 return exactmatch; 
             } 
@@ -233,7 +233,7 @@ namespace Kooboo.Sites.Helper
             var elsub = GetSubElementPath(el); 
             var left = targets.Where(o => GetSubElementPath(o) == elsub).ToList(); 
             
-            if (left !=null &&left.Count()>0)
+            if (left != null && left.Any())
             {
                 //try to check without space.. 
                 string nonspace = RemoveSpace(el.InnerHtml);
diff --git a/Kooboo.Sites/Helper/MenuHelper.cs b/Kooboo.Sites/Helper/MenuHelper.cs
index c4261860..1bcef262 100644
--- a/Kooboo.Sites/Helper/MenuHelper.cs
+++ b/Kooboo.Sites/Helper/MenuHelper.cs
@@ -275,7 +275,7 @@ namespace Kooboo.Sites.Helper
                 }
                 else
                 {
-                    if (Menu.Values != null && Menu.Values.Count() > 0)
+                    if (Menu.Values != null && Menu.Values.Any())
                     {
                         menuname = Menu.Values.First().Value;
                     }
diff --git a/Kooboo.Sites/Helper/PackageHelper.cs b/Kooboo.Sites/Helper/PackageHelper.cs
index 6b8ed7c5..46d667c0 100644
--- a/Kooboo.Sites/Helper/PackageHelper.cs
+++ b/Kooboo.Sites/Helper/PackageHelper.cs
@@ -46,7 +46,7 @@ namespace Kooboo.Sites.Helper
         {
             string imgbase = UrlHelper.Combine(AppSettings.ThemeUrl, "/_api/download/themeimg/");
 
-            int count = images.Count();
+            int count = images.Count;
             var newImages = new List<string>();
             for (int i = 0; i < count; i++)
             {
diff --git a/Kooboo.Sites/HtmlForm/ValueSubmitter.cs b/Kooboo.Sites/HtmlForm/ValueSubmitter.cs
index 72d405df..c0db60f7 100644
--- a/Kooboo.Sites/HtmlForm/ValueSubmitter.cs
+++ b/Kooboo.Sites/HtmlForm/ValueSubmitter.cs
@@ -58,7 +58,7 @@ namespace Kooboo.Sites.HtmlForm
                 }
             }
             
-            if (SubmittedValue.Count() == 0)
+            if (!SubmittedValue.Any())
             {
                 return true;
             }
diff --git a/Kooboo.Sites/Models/ViewDataMethod.cs b/Kooboo.Sites/Models/ViewDataMethod.cs
index f01e4949..901208ef 100644
--- a/Kooboo.Sites/Models/ViewDataMethod.cs
+++ b/Kooboo.Sites/Models/ViewDataMethod.cs
@@ -61,7 +61,7 @@ namespace Kooboo.Sites.Models
         {
             get
             {
-                return (_children != null &&  _children.Count() > 0); 
+                return (_children != null && _children.Any()); 
             }
         }
          
@@ -69,7 +69,7 @@ namespace Kooboo.Sites.Models
         {
             string unique = this.ViewId.ToString()+ this.MethodId.ToString() +this.AliasName;
 
-            if (_children !=null && _children.Count()>0)
+            if (_children != null && _children.Any())
             {
                 foreach (var item in _children)
                 {
diff --git a/Kooboo.Sites/Payment/Methods/Alipay/lib/AopDictionary.cs b/Kooboo.Sites/Payment/Methods/Alipay/lib/AopDictionary.cs
index 450fe400..549f9f26 100644
--- a/Kooboo.Sites/Payment/Methods/Alipay/lib/AopDictionary.cs
+++ b/Kooboo.Sites/Payment/Methods/Alipay/lib/AopDictionary.cs
@@ -27,9 +27,9 @@ namespace Kooboo.Sites.Payment.Methods.Alipay.lib
             {
                 strValue = null;
             }
-            else if (value is string)
+            else if (value is string s)
             {
-                strValue = (string)value;
+                strValue = s;
             }
             else if (value is Nullable<DateTime>)
             {
diff --git a/Kooboo.Sites/Payment/Methods/Braintree/lib/BraintreeAPI.cs b/Kooboo.Sites/Payment/Methods/Braintree/lib/BraintreeAPI.cs
index 65dc95f0..ba02ee6a 100644
--- a/Kooboo.Sites/Payment/Methods/Braintree/lib/BraintreeAPI.cs
+++ b/Kooboo.Sites/Payment/Methods/Braintree/lib/BraintreeAPI.cs
@@ -27,7 +27,7 @@ namespace Kooboo.Sites.Payment.Methods.Braintree.lib
             try
             {
                 request.Transaction.Type = SALE;
-                string response = Post(string.Format("{0}/merchants/{1}/transactions", setting.ServerUrl, setting.MerchantId),
+                string response = Post($"{setting.ServerUrl}/merchants/{setting.MerchantId}/transactions",
                     JsonConvert.SerializeObject(request));
                 if (!string.IsNullOrEmpty(response))
                 {
@@ -50,7 +50,7 @@ namespace Kooboo.Sites.Payment.Methods.Braintree.lib
             {
                 if (id != null || !id.Trim().Equals(""))
                 {
-                    string response = Get(string.Format("{0}/merchants/{1}/transactions/{2}", setting.ServerUrl, setting.MerchantId, id));
+                    string response = Get($"{setting.ServerUrl}/merchants/{setting.MerchantId}/transactions/{id}");
 
                     if (!string.IsNullOrEmpty(response))
                     {
@@ -80,7 +80,7 @@ namespace Kooboo.Sites.Payment.Methods.Braintree.lib
                 };
             try
             {
-                string response = Post(string.Format("{0}/merchants/{1}/client_token", setting.ServerUrl, setting.MerchantId),
+                string response = Post($"{setting.ServerUrl}/merchants/{setting.MerchantId}/client_token",
                             JsonConvert.SerializeObject(request));
 
                 var result = JsonConvert.DeserializeObject<ClientTokenResponse>(response);
diff --git a/Kooboo.Sites/Payment/Methods/Ogone/OgoneForm.cs b/Kooboo.Sites/Payment/Methods/Ogone/OgoneForm.cs
index 3b26272e..fc85e85d 100644
--- a/Kooboo.Sites/Payment/Methods/Ogone/OgoneForm.cs
+++ b/Kooboo.Sites/Payment/Methods/Ogone/OgoneForm.cs
@@ -96,7 +96,7 @@ k.response.redirect(url);
             var result = ogoneApi.Hostedcheckouts(checkoutRequest);
             if (result != null)
             {
-                res = new RedirectResponse(string.Format("{0}.{1}", Setting.BaseUrl(), result.PartialRedirectUrl), request.Id);
+                res = new RedirectResponse($"{Setting.BaseUrl()}.{result.PartialRedirectUrl}", request.Id);
                 request.ReferenceId = result.HostedCheckoutId;
             }
 
diff --git a/Kooboo.Sites/Payment/Methods/Ogone/lib/OgoneApi.cs b/Kooboo.Sites/Payment/Methods/Ogone/lib/OgoneApi.cs
index 8547b52e..fd91dd35 100644
--- a/Kooboo.Sites/Payment/Methods/Ogone/lib/OgoneApi.cs
+++ b/Kooboo.Sites/Payment/Methods/Ogone/lib/OgoneApi.cs
@@ -27,7 +27,7 @@ namespace Kooboo.Sites.Payment.Methods.Ogone.lib
         {
             try
             {
-                string response = Post(string.Format("/v1/{0}/hostedcheckouts", setting.MerchantId),
+                string response = Post($"/v1/{setting.MerchantId}/hostedcheckouts",
                       JsonConvert.SerializeObject(request, new JsonSerializerSettings
                       {
                           ContractResolver = new DefaultContractResolver
@@ -59,7 +59,7 @@ namespace Kooboo.Sites.Payment.Methods.Ogone.lib
         {
             try
             {
-                string response = Get(string.Format("/v1/{0}/hostedcheckouts/{1}", setting.MerchantId, hostedCheckoutId));
+                string response = Get($"/v1/{setting.MerchantId}/hostedcheckouts/{hostedCheckoutId}");
 
                 return JsonConvert.DeserializeObject<GetHostedCheckoutResponse>(response);
 
@@ -75,7 +75,7 @@ namespace Kooboo.Sites.Payment.Methods.Ogone.lib
         {
             var numberOfSignatureHeaders = requestHeaders.GetValues("X-GCS-Signature");
 
-            if (numberOfSignatureHeaders.Count() == 0)
+            if (!numberOfSignatureHeaders.Any())
             {
                 throw new Exception("Missing X-GCS-Signature header");
             }
@@ -86,7 +86,7 @@ namespace Kooboo.Sites.Payment.Methods.Ogone.lib
 
             var numberOfKeyIdHeaders = requestHeaders.GetValues("X-GCS-KeyId");
 
-            if (numberOfKeyIdHeaders.Count() == 0)
+            if (!numberOfKeyIdHeaders.Any())
             {
                 throw new Exception("Missing X-GCS-KeyId header");
             }
diff --git a/Kooboo.Sites/Payment/Methods/Stripe/StripeForm.cs b/Kooboo.Sites/Payment/Methods/Stripe/StripeForm.cs
index 26c44857..b2a4646d 100644
--- a/Kooboo.Sites/Payment/Methods/Stripe/StripeForm.cs
+++ b/Kooboo.Sites/Payment/Methods/Stripe/StripeForm.cs
@@ -69,9 +69,9 @@ namespace Kooboo.Sites.Payment.Methods.Stripe
 
             var paymentMethodTypesList = new List<string>();
 
-            if (paymentMethodType is object[])
+            if (paymentMethodType is object[] objects)
             {
-                var paymentMethodTypeArray = Array.ConvertAll((object[])paymentMethodType, x => x.ToString());
+                var paymentMethodTypeArray = Array.ConvertAll(objects, x => x.ToString());
                 paymentMethodTypesList.AddRange(paymentMethodTypeArray);
             }
             else if (paymentMethodType is object)
diff --git a/Kooboo.Sites/Payment/Methods/wechat/lib/Data.cs b/Kooboo.Sites/Payment/Methods/wechat/lib/Data.cs
index 4512ab1a..a4666788 100644
--- a/Kooboo.Sites/Payment/Methods/wechat/lib/Data.cs
+++ b/Kooboo.Sites/Payment/Methods/wechat/lib/Data.cs
@@ -205,7 +205,7 @@ namespace WxPayAPI
                 }
 
 
-                str += string.Format("{0}={1}\n", pair.Key, pair.Value.ToString());
+                str += $"{pair.Key}={pair.Value.ToString()}\n";
             }
             str = System.Web.HttpUtility.HtmlEncode(str);
             Log.Debug(this.GetType().ToString(), "Print in Web Page : " + str);
diff --git a/Kooboo.Sites/Payment/Methods/wechat/lib/HttpService.cs b/Kooboo.Sites/Payment/Methods/wechat/lib/HttpService.cs
index 8a203812..f8c72e8e 100644
--- a/Kooboo.Sites/Payment/Methods/wechat/lib/HttpService.cs
+++ b/Kooboo.Sites/Payment/Methods/wechat/lib/HttpService.cs
@@ -15,7 +15,7 @@ namespace WxPayAPI
     /// </summary>
     public class HttpService
     {
-        private static string USER_AGENT(string mchId) => string.Format("WXPaySDK/{3} ({0}) .net/{1} {2}", Environment.OSVersion, Environment.Version, mchId, typeof(HttpService).Assembly.GetName().Version);
+        private static string USER_AGENT(string mchId) => $"WXPaySDK/{Environment.OSVersion} ({Environment.Version}) .net/{mchId} {typeof(HttpService).Assembly.GetName().Version}";
 
         public static bool CheckValidationResult(object sender, X509Certificate certificate, X509Chain chain, SslPolicyErrors errors)
         {
@@ -111,14 +111,8 @@ namespace WxPayAPI
             finally
             {
                 //关闭连接和流
-                if (response != null)
-                {
-                    response.Close();
-                }
-                if (request != null)
-                {
-                    request.Abort();
-                }
+                response?.Close();
+                request?.Abort();
             }
             return result;
         }
@@ -187,14 +181,8 @@ namespace WxPayAPI
             finally
             {
                 //关闭连接和流
-                if (response != null)
-                {
-                    response.Close();
-                }
-                if (request != null)
-                {
-                    request.Abort();
-                }
+                response?.Close();
+                request?.Abort();
             }
             return result;
         }
diff --git a/Kooboo.Sites/Payment/Methods/wechat/lib/WxPayApi.cs b/Kooboo.Sites/Payment/Methods/wechat/lib/WxPayApi.cs
index 738a0b73..d08e60f1 100644
--- a/Kooboo.Sites/Payment/Methods/wechat/lib/WxPayApi.cs
+++ b/Kooboo.Sites/Payment/Methods/wechat/lib/WxPayApi.cs
@@ -598,7 +598,7 @@ namespace WxPayAPI
         public static string GenerateOutTradeNo(WeChatSetting setting)
         {
             var ran = new Random();
-            return string.Format("{0}{1}{2}", setting.MerchantId, DateTime.Now.ToString("yyyyMMddHHmmss"), ran.Next(999));
+            return $"{setting.MerchantId}{DateTime.Now.ToString("yyyyMMddHHmmss")}{ran.Next(999)}";
         }
 
         /**
diff --git a/Kooboo.Sites/Payment/PaymentHelper.cs b/Kooboo.Sites/Payment/PaymentHelper.cs
index f92f9188..3f892b17 100644
--- a/Kooboo.Sites/Payment/PaymentHelper.cs
+++ b/Kooboo.Sites/Payment/PaymentHelper.cs
@@ -32,7 +32,7 @@ namespace Kooboo.Sites.Payment
             {
                 baseurl = context.Request.Port == 80 || context.Request.Port == 443
                         ? context.Request.Host
-                        : string.Format("{0}:{1}", context.Request.Host, context.Request.Port);
+                        : $"{context.Request.Host}:{context.Request.Port}";
                 baseurl = context.Request.Scheme + "://" + baseurl;
             }
             return baseurl;
diff --git a/Kooboo.Sites/Relation/CmsCssRuleRelation.cs b/Kooboo.Sites/Relation/CmsCssRuleRelation.cs
index b3afbfb0..1ce9cfc2 100644
--- a/Kooboo.Sites/Relation/CmsCssRuleRelation.cs
+++ b/Kooboo.Sites/Relation/CmsCssRuleRelation.cs
@@ -35,7 +35,7 @@ namespace Kooboo.Sites.Relation
             if (StyleRuleOnly)
             {
                 List<int> removeindex = new List<int>();
-                int count = InRules.Count();
+                int count = InRules.Count;
                 for (int i = 0; i < count; i++)
                 {
                     if (InRules[i].ruleType != RuleType.StyleRule)
diff --git a/Kooboo.Sites/Relation/DomRelation.cs b/Kooboo.Sites/Relation/DomRelation.cs
index ebdc5c45..952130a4 100644
--- a/Kooboo.Sites/Relation/DomRelation.cs
+++ b/Kooboo.Sites/Relation/DomRelation.cs
@@ -468,7 +468,7 @@ namespace Kooboo.Sites.Relation
 
             foreach (var item in oldscript)
             {
-                if (!newScriptList.Where(o => o.Id == item.Id).Any())
+                if (!newScriptList.Any(o => o.Id == item.Id))
                 {
                     sitedb.Scripts.Delete(item.Id, false);
                 }
@@ -488,7 +488,7 @@ namespace Kooboo.Sites.Relation
 
             foreach (var item in oldscript)
             {
-                if (!newScriptList.Where(o => o.Id == item.Id).Any())
+                if (!newScriptList.Any(o => o.Id == item.Id))
                 {
                     sitedb.Code.Delete(item.Id, false);
                 }
@@ -580,7 +580,7 @@ namespace Kooboo.Sites.Relation
 
             foreach (var item in oldrules)
             {
-                if (!cmsrules.Where(o => o.Id == item.Id).Any())
+                if (!cmsrules.Any(o => o.Id == item.Id))
                 {
                     sitedb.CssRules.Delete(item.Id, false);
                 }
diff --git a/Kooboo.Sites/Relation/RelationManager.cs b/Kooboo.Sites/Relation/RelationManager.cs
index 4f14c5a4..1099281a 100644
--- a/Kooboo.Sites/Relation/RelationManager.cs
+++ b/Kooboo.Sites/Relation/RelationManager.cs
@@ -82,8 +82,7 @@ namespace Kooboo.Sites.Relation
 
                 if (SiteEvent.ChangeType == ChangeType.Delete)
                 {
-                    var siteobject = SiteEvent.Value as SiteObject;
-                    if (siteobject != null)
+                    if (SiteEvent.Value is SiteObject siteobject)
                     {
                         RelationManager.Clean(SiteEvent.SiteDb, siteobject);
                     }
@@ -109,8 +108,7 @@ namespace Kooboo.Sites.Relation
                 }
                 else
                 {
-                    var newvalue = SiteEvent.Value as IDomObject;
-                    if (newvalue != null)
+                    if (SiteEvent.Value is IDomObject newvalue)
                     {
                         domhtml = newvalue.Body;
                     }
@@ -189,10 +187,8 @@ namespace Kooboo.Sites.Relation
             if (SiteEvent.ChangeType == ChangeType.Update)
             { 
                 // this can only be idomobject now because of early check.
-                var old = SiteEvent.OldValue as IDomObject;
-                var newvalue = SiteEvent.Value as IDomObject;
 
-                if (old != null && newvalue != null)
+                if (SiteEvent.OldValue is IDomObject old && SiteEvent.Value is IDomObject newvalue)
                 {
                     if (Lib.Helper.StringHelper.IsSameValue(old.Body, newvalue.Body))
                     {
diff --git a/Kooboo.Sites/Relation/StyleRelation.cs b/Kooboo.Sites/Relation/StyleRelation.cs
index 3e78da0e..4b002fd3 100644
--- a/Kooboo.Sites/Relation/StyleRelation.cs
+++ b/Kooboo.Sites/Relation/StyleRelation.cs
@@ -52,8 +52,7 @@ namespace Kooboo.Sites.Relation
                 ///compute import relation or the style image/font definition... 
                 if (item.CmsRule.ruleType == RuleType.ImportRule)
                 {
-                    var importrule = item.CssRule as Kooboo.Dom.CSS.CSSImportRule;
-                    if (importrule != null)
+                    if (item.CssRule is Kooboo.Dom.CSS.CSSImportRule importrule)
                     {
                         string url = importrule.href;
 
diff --git a/Kooboo.Sites/Render/Commands/IncludeCommand.cs b/Kooboo.Sites/Render/Commands/IncludeCommand.cs
index d94dd1e0..319691b9 100644
--- a/Kooboo.Sites/Render/Commands/IncludeCommand.cs
+++ b/Kooboo.Sites/Render/Commands/IncludeCommand.cs
@@ -24,7 +24,7 @@ namespace Kooboo.Sites.Render.Commands
           
         public string Execute(RenderContext context, Dictionary<string, string> Paras, EvaluatorOption options)
         { 
-            if (Paras != null && Paras.Count() > 0)
+            if (Paras != null && Paras.Any())
             {
                 Dictionary<string, string> datavalue = new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase);
                 foreach (var item in Paras)
@@ -34,7 +34,7 @@ namespace Kooboo.Sites.Render.Commands
                         datavalue.Add(item.Key, item.Value); 
                     }
                 }
-                if (datavalue.Count() > 0)
+                if (datavalue.Any())
                 {
                    context.DataContext.Push(datavalue);
                 }
diff --git a/Kooboo.Sites/Render/Commands/LayoutCommand.cs b/Kooboo.Sites/Render/Commands/LayoutCommand.cs
index 8da22ccb..8c3e5b68 100644
--- a/Kooboo.Sites/Render/Commands/LayoutCommand.cs
+++ b/Kooboo.Sites/Render/Commands/LayoutCommand.cs
@@ -23,7 +23,7 @@ namespace Kooboo.Sites.Render.Commands
 
         public string Execute(RenderContext context, Dictionary<string, string> Paras, EvaluatorOption options)
         {
-            if (Paras != null && Paras.Count() > 0)
+            if (Paras != null && Paras.Any())
             {
                 Dictionary<string, string> datavalue = new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase);
                 foreach (var item in Paras)
@@ -33,7 +33,7 @@ namespace Kooboo.Sites.Render.Commands
                         datavalue.Add(item.Key, item.Value);
                     }
                 }
-                if (datavalue.Count() > 0)
+                if (datavalue.Any())
                 {
                     context.DataContext.Push(datavalue);
                 }
diff --git a/Kooboo.Sites/Render/Components/Manager.cs b/Kooboo.Sites/Render/Components/Manager.cs
index 54d1fff7..2d1105bf 100644
--- a/Kooboo.Sites/Render/Components/Manager.cs
+++ b/Kooboo.Sites/Render/Components/Manager.cs
@@ -73,16 +73,14 @@ namespace Kooboo.Sites.Render.Components
             {
                 if (item.nodeType == enumNodeType.TEXT)
                 {
-                    var textnode = item as Text;
-                    if (textnode != null && !string.IsNullOrWhiteSpace(textnode.data))
+                    if (item is Text textnode && !string.IsNullOrWhiteSpace(textnode.data))
                     {
                         return false;
                     }
                 }
                 else if (item.nodeType == enumNodeType.ELEMENT)
                 {
-                    var el = item as Element;
-                    if (el != null)
+                    if (item is Element el)
                     {
                         var tag = el.tagName.ToLower();
                         if (tag != "id" && !tag.StartsWith("kooboo") && !tag.StartsWith("kb") && !tag.StartsWith("setting"))
diff --git a/Kooboo.Sites/Render/Components/ViewComponent.cs b/Kooboo.Sites/Render/Components/ViewComponent.cs
index 5b192783..93febc5e 100644
--- a/Kooboo.Sites/Render/Components/ViewComponent.cs
+++ b/Kooboo.Sites/Render/Components/ViewComponent.cs
@@ -119,7 +119,7 @@ namespace Kooboo.Sites.Render.Components
             string viewBody = null;
             frontcontext.Views.Add(view);
 
-            if (setting.Settings != null && setting.Settings.Count() > 0)
+            if (setting.Settings != null && setting.Settings.Any())
             {
                 context.DataContext.Push(setting.Settings);
             }
@@ -206,7 +206,7 @@ namespace Kooboo.Sites.Render.Components
             }
 
 
-            if (setting.Settings != null && setting.Settings.Count() > 0)
+            if (setting.Settings != null && setting.Settings.Any())
             {
                 context.DataContext.Pop();
             }
@@ -271,7 +271,7 @@ namespace Kooboo.Sites.Render.Components
             string viewBody = null;
             frontcontext.Views.Add(view);
 
-            if (setting.Settings != null && setting.Settings.Count() > 0)
+            if (setting.Settings != null && setting.Settings.Any())
             {
                 context.DataContext.Push(setting.Settings);
             }
@@ -291,7 +291,7 @@ namespace Kooboo.Sites.Render.Components
 
             returnstring += RenderHelper.Render(renderplan, frontcontext.RenderContext);
 
-            if (setting.Settings != null && setting.Settings.Count() > 0)
+            if (setting.Settings != null && setting.Settings.Any())
             {
                 context.DataContext.Pop();
             }
diff --git a/Kooboo.Sites/Render/Evaluators/Attribute.cs b/Kooboo.Sites/Render/Evaluators/Attribute.cs
index 6bc41758..e5c3a6d6 100644
--- a/Kooboo.Sites/Render/Evaluators/Attribute.cs
+++ b/Kooboo.Sites/Render/Evaluators/Attribute.cs
@@ -132,7 +132,7 @@ namespace Kooboo.Sites.Render
                 }
             }
 
-            if (response.AttributeTask == null || response.AttributeTask.Count() == 0)
+            if (response.AttributeTask == null || !response.AttributeTask.Any())
             {
                 return null;
             }
diff --git a/Kooboo.Sites/Render/Evaluators/LocalCacheEvaluator.cs b/Kooboo.Sites/Render/Evaluators/LocalCacheEvaluator.cs
index b5e1130f..6e35a111 100644
--- a/Kooboo.Sites/Render/Evaluators/LocalCacheEvaluator.cs
+++ b/Kooboo.Sites/Render/Evaluators/LocalCacheEvaluator.cs
@@ -68,7 +68,7 @@ namespace Kooboo.Sites.Render.Evaluators
                 response.AttributeTask.AddRange(tasks);
             } 
 
-            if (response.AttributeTask == null || response.AttributeTask.Count() == 0)
+            if (response.AttributeTask == null || !response.AttributeTask.Any())
             {
                 return null;
             }
diff --git a/Kooboo.Sites/Render/Evaluators/Version.cs b/Kooboo.Sites/Render/Evaluators/Version.cs
index 5df5b821..71db704c 100644
--- a/Kooboo.Sites/Render/Evaluators/Version.cs
+++ b/Kooboo.Sites/Render/Evaluators/Version.cs
@@ -122,7 +122,7 @@ namespace Kooboo.Sites.Render.Evaluators
                 response.AttributeTask.AddRange(tasks);
             }
 
-            if (response.AttributeTask == null || response.AttributeTask.Count() == 0)
+            if (response.AttributeTask == null || !response.AttributeTask.Any())
             {
                 return null;
             }
diff --git a/Kooboo.Sites/Render/Functions/AppendUrlFunction.cs b/Kooboo.Sites/Render/Functions/AppendUrlFunction.cs
index 0db77c6e..3bc512c9 100644
--- a/Kooboo.Sites/Render/Functions/AppendUrlFunction.cs
+++ b/Kooboo.Sites/Render/Functions/AppendUrlFunction.cs
@@ -50,7 +50,7 @@ namespace Kooboo.Sites.Render.Functions
             {
                 paras[item.Key] = item.Value;
             }
-            if (paras.Count()>0)
+            if (paras.Any())
             {
                 return Lib.Helper.UrlHelper.AppendQueryString(relative, paras); 
             }
diff --git a/Kooboo.Sites/Render/Functions/CountFunction.cs b/Kooboo.Sites/Render/Functions/CountFunction.cs
index b343bc54..44ca650a 100644
--- a/Kooboo.Sites/Render/Functions/CountFunction.cs
+++ b/Kooboo.Sites/Render/Functions/CountFunction.cs
@@ -28,14 +28,13 @@ namespace Kooboo.Sites.Render.Functions
         {
             var paras = FunctionHelper.RenderParameter(context, this.Parameters);
 
-            if (paras != null && paras.Count() > 0)
+            if (paras != null && paras.Any())
             { 
                 var value = paras[0];
                 if (value != null)
                 {
-                    if (value is ICollection)
+                    if (value is ICollection col)
                     {
-                        var col = (ICollection)value;
                         if (col != null)
                         {
                             return col.Count;
@@ -47,10 +46,9 @@ namespace Kooboo.Sites.Render.Functions
                         try
                         {
                             var jarray = Lib.Helper.JsonHelper.DeserialzeBaseObject(value.ToString()); 
-                            if (jarray !=null && jarray is JArray)
+                            if (jarray is JArray)
                             {
-                                var jr = jarray as JArray; 
-                                if (jr !=null)
+                                if (jarray is JArray jr)
                                 {
                                     return jr.Count; 
                                 }
diff --git a/Kooboo.Sites/Render/Functions/PagerFunction.cs b/Kooboo.Sites/Render/Functions/PagerFunction.cs
index e33daf56..8c3deb65 100644
--- a/Kooboo.Sites/Render/Functions/PagerFunction.cs
+++ b/Kooboo.Sites/Render/Functions/PagerFunction.cs
@@ -44,12 +44,12 @@ namespace Kooboo.Sites.Render.Functions
              
             var providedParas = FunctionHelper.RenderParameter(context, this.Parameters);
 
-           if (providedParas !=null && providedParas.Count()>0)
+           if (providedParas != null && providedParas.Any())
             {
                 paras["PageNumber"] = providedParas[0].ToString();
             }
             
-            if (paras.Count()>0)
+            if (paras.Any())
             {
                 return Lib.Helper.UrlHelper.AppendQueryString(relative, paras); 
             }
diff --git a/Kooboo.Sites/Render/Functions/SetUrlFunction.cs b/Kooboo.Sites/Render/Functions/SetUrlFunction.cs
index da823df0..109db943 100644
--- a/Kooboo.Sites/Render/Functions/SetUrlFunction.cs
+++ b/Kooboo.Sites/Render/Functions/SetUrlFunction.cs
@@ -44,7 +44,7 @@ namespace Kooboo.Sites.Render.Functions
             {
                 paras[item.Key] = item.Value;
             }
-            if (paras.Count() > 0)
+            if (paras.Any())
             {
                 return Lib.Helper.UrlHelper.AppendQueryString(relative, paras);
             }
diff --git a/Kooboo.Sites/Render/Functions/ValueFunction.cs b/Kooboo.Sites/Render/Functions/ValueFunction.cs
index ad8d7031..e04306fa 100644
--- a/Kooboo.Sites/Render/Functions/ValueFunction.cs
+++ b/Kooboo.Sites/Render/Functions/ValueFunction.cs
@@ -57,7 +57,7 @@ namespace Kooboo.Sites.Render.Functions
            
         public object Render(RenderContext context)
         {
-            if (this.Parameters!=null && this.Parameters.Count()>0)
+            if (this.Parameters != null && this.Parameters.Any())
             {
 
             }
diff --git a/Kooboo.Sites/Render/RenderEvaluator.cs b/Kooboo.Sites/Render/RenderEvaluator.cs
index ebb434a3..4e0f9479 100644
--- a/Kooboo.Sites/Render/RenderEvaluator.cs
+++ b/Kooboo.Sites/Render/RenderEvaluator.cs
@@ -48,8 +48,7 @@ namespace Kooboo.Sites.Render
                         }
                     }
 
-                    var comment = item as Comment;
-                    if (comment != null)
+                    if (item is Comment comment)
                     {
                         if (comment.location.endTokenEndIndex <= doc.documentElement.location.openTokenStartIndex)
                         {
@@ -122,7 +121,7 @@ namespace Kooboo.Sites.Render
                     int len = nextnode.location.openTokenStartIndex - currentindex;
                     //document parse error,may cause nextnode openTokenStartIndex less than currentindex.
                     //then get repeated content
-                    if (responseList.Count() > 0 && len >= 0)
+                    if (responseList.Any() && len >= 0)
                     {
                         var element = nextnode as Element;
                         bool IsSelfClosed = element == null ? false : Service.DomService.IsSelfCloseTag(element.tagName);
@@ -236,7 +235,7 @@ namespace Kooboo.Sites.Render
                 tasklist.Add(new ContentRenderTask(doc.HtmlSource.Substring(currentindex, totallen - currentindex)));
             }
 
-            if (appendtask.Count() > 0)
+            if (appendtask.Any())
             {
                 tasklist.AddRange(appendtask);
             }
diff --git a/Kooboo.Sites/Render/RenderHelper.cs b/Kooboo.Sites/Render/RenderHelper.cs
index ccb2d67c..54319b50 100644
--- a/Kooboo.Sites/Render/RenderHelper.cs
+++ b/Kooboo.Sites/Render/RenderHelper.cs
@@ -62,7 +62,7 @@ namespace Kooboo.Sites.Render
 
         public static void OptimizeTask(List<IRenderTask> task)
         {
-            int count = task.Count();
+            int count = task.Count;
             bool IsPreviousContent = false;
             int lastContentI = -1;
             List<int> ToRemoved = new List<int>();
diff --git a/Kooboo.Sites/Render/RenderTask/ForRenderTask.cs b/Kooboo.Sites/Render/RenderTask/ForRenderTask.cs
index 1d91ea57..210ec357 100644
--- a/Kooboo.Sites/Render/RenderTask/ForRenderTask.cs
+++ b/Kooboo.Sites/Render/RenderTask/ForRenderTask.cs
@@ -104,7 +104,7 @@ namespace Kooboo.Sites.Render
 
                 var attributeEvaluator = new AttributeEvaluator();
                 var response = attributeEvaluator.Evaluate(element, options);
-                if (response != null && response.AttributeTask != null && response.AttributeTask.Count() > 0)
+                if (response?.AttributeTask != null && response.AttributeTask.Any())
                 {
                     opentag = RenderHelper.GetHalfOpenTag(element);
                     this.ContainerTask.Add(new ContentRenderTask(opentag));
diff --git a/Kooboo.Sites/Render/RenderTask/HeaderRenderTask.cs b/Kooboo.Sites/Render/RenderTask/HeaderRenderTask.cs
index 687d2307..80b8345b 100644
--- a/Kooboo.Sites/Render/RenderTask/HeaderRenderTask.cs
+++ b/Kooboo.Sites/Render/RenderTask/HeaderRenderTask.cs
@@ -203,7 +203,7 @@ namespace Kooboo.Sites.Render
                 return item.renderTasks.Render(context);
             }
 
-            if (bindings == null || bindings.Count() == 0)
+            if (bindings == null || !bindings.Any())
             {
                 return item.OriginalHtml;
             }
diff --git a/Kooboo.Sites/Render/RenderTask/RepeaterRenderTask.cs b/Kooboo.Sites/Render/RenderTask/RepeaterRenderTask.cs
index ea5c7055..8b32d314 100644
--- a/Kooboo.Sites/Render/RenderTask/RepeaterRenderTask.cs
+++ b/Kooboo.Sites/Render/RenderTask/RepeaterRenderTask.cs
@@ -100,7 +100,7 @@ namespace Kooboo.Sites.Render
 
                 var attributeEvaluator = new AttributeEvaluator();
                 var response = attributeEvaluator.Evaluate(element, options);
-                if (response != null && response.AttributeTask != null && response.AttributeTask.Count() > 0)
+                if (response?.AttributeTask != null && response.AttributeTask.Any())
                 {
                     opentag = RenderHelper.GetHalfOpenTag(element);
                     this.ContainerTask.Add(new ContentRenderTask(opentag));
@@ -138,9 +138,9 @@ namespace Kooboo.Sites.Render
                 sb.Append(container);
             }
 
-            if (repeatcontainer is DataMethodResult)
+            if (repeatcontainer is DataMethodResult dataMethodResult)
             {
-                repeatcontainer = ((DataMethodResult)repeatcontainer).Value;
+                repeatcontainer = dataMethodResult.Value;
             }
             else if (repeatcontainer.GetType() == typeof(string))
             {
@@ -273,9 +273,9 @@ namespace Kooboo.Sites.Render
                 return;
             }
 
-            if (repeatcontainer is DataMethodResult)
+            if (repeatcontainer is DataMethodResult dataMethodResult)
             {
-                repeatcontainer = ((DataMethodResult)repeatcontainer).Value;
+                repeatcontainer = dataMethodResult.Value;
             }
 
             foreach (var item in this.ContainerTask)
@@ -284,7 +284,7 @@ namespace Kooboo.Sites.Render
             }
 
             var itemcollection = ((IEnumerable)repeatcontainer).Cast<object>().ToList();
-            context.DataContext.RepeatCounter.Push(itemcollection.Count());
+            context.DataContext.RepeatCounter.Push(itemcollection.Count);
             int counter = 0;
 
             foreach (var item in itemcollection)
diff --git a/Kooboo.Sites/Render/RenderTask/VersionRenderTask.cs b/Kooboo.Sites/Render/RenderTask/VersionRenderTask.cs
index 9b98c9ec..72fad375 100644
--- a/Kooboo.Sites/Render/RenderTask/VersionRenderTask.cs
+++ b/Kooboo.Sites/Render/RenderTask/VersionRenderTask.cs
@@ -109,9 +109,7 @@ namespace Kooboo.Sites.Render.RenderTask
 
                 if (siteobject != null)
                 {
-                    var core = siteobject as ICoreObject;
-
-                    if (core != null)
+                    if (siteobject is ICoreObject core)
                     {
                         return GetVersion(sitedb, core).ToString();
                     }
@@ -120,8 +118,7 @@ namespace Kooboo.Sites.Render.RenderTask
 
             if (siteobject != null)
             {
-                var core = siteobject as ICoreObject;
-                if (core != null)
+                if (siteobject is ICoreObject core)
                 {
                     return GetVersion(sitedb, core).ToString();
                 }
@@ -164,8 +161,7 @@ namespace Kooboo.Sites.Render.RenderTask
                         var siteobject = repo.Get(route.objectId);
                         if (siteobject != null)
                         {
-                            var core = siteobject as ICoreObject;
-                            if (core != null)
+                            if (siteobject is ICoreObject core)
                             {
                                 version += core.Version;
                             }
diff --git a/Kooboo.Sites/Render/Renderers/ImageRenderer.cs b/Kooboo.Sites/Render/Renderers/ImageRenderer.cs
index b7b0fc07..99bd5ecf 100644
--- a/Kooboo.Sites/Render/Renderers/ImageRenderer.cs
+++ b/Kooboo.Sites/Render/Renderers/ImageRenderer.cs
@@ -207,7 +207,7 @@ namespace Kooboo.Sites.Render
         public static byte[] GetImageThumbnail(RenderContext context, byte[] OrgBytes, int width, int height, long version)
         {
             Guid siteid = default(Guid);
-            if (context != null && context.WebSite != null)
+            if (context?.WebSite != null)
             {
                 siteid = context.WebSite.Id;
             }
diff --git a/Kooboo.Sites/Render/Renderers/ScriptRenderer.cs b/Kooboo.Sites/Render/Renderers/ScriptRenderer.cs
index b44a65ef..7fe665d6 100644
--- a/Kooboo.Sites/Render/Renderers/ScriptRenderer.cs
+++ b/Kooboo.Sites/Render/Renderers/ScriptRenderer.cs
@@ -37,7 +37,7 @@ namespace Kooboo.Sites.Render
         private static string Getbody(FrontContext context, Models.Script script)
         {
             string result = null;
-            if (script != null && script.Body != null)
+            if (script?.Body != null)
             {
                 if (script.Extension == null || script.Extension == "js" || script.Extension == ".js")
                 {
diff --git a/Kooboo.Sites/Render/Renderers/StyleRenderer.cs b/Kooboo.Sites/Render/Renderers/StyleRenderer.cs
index 77cd180f..285aa12b 100644
--- a/Kooboo.Sites/Render/Renderers/StyleRenderer.cs
+++ b/Kooboo.Sites/Render/Renderers/StyleRenderer.cs
@@ -11,7 +11,7 @@ namespace Kooboo.Sites.Render
             var css = context.SiteDb.Styles.Get(context.Route.objectId);
             context.RenderContext.Response.ContentType = "text/css;charset=utf-8";
 
-            if (css != null && css.Body != null)
+            if (css?.Body != null)
             {
                 var body = GetBody(css);
 
diff --git a/Kooboo.Sites/Repository/CmsCssRuleRepository.cs b/Kooboo.Sites/Repository/CmsCssRuleRepository.cs
index 6eb3179d..0a2ac091 100644
--- a/Kooboo.Sites/Repository/CmsCssRuleRepository.cs
+++ b/Kooboo.Sites/Repository/CmsCssRuleRepository.cs
@@ -165,7 +165,7 @@ namespace Kooboo.Sites.Repository
                 }
                 var siteobject = repo.Get(cssrule.OwnerObjectId);
 
-                if (siteobject != null && siteobject is IDomObject)
+                if (siteobject is IDomObject)
                 {
                     var domobject = siteobject as IDomObject;
                     string newhtml = string.Empty;
@@ -198,7 +198,7 @@ namespace Kooboo.Sites.Repository
             }
             var siteobject = repo.Get(ObjectId);
 
-            if (siteobject != null && siteobject is IDomObject)
+            if (siteobject is IDomObject)
             {
                 var domobject = siteobject as IDomObject;
                 string newhtml = string.Empty;
@@ -244,7 +244,7 @@ namespace Kooboo.Sites.Repository
                 }
                 var siteobject = repo.Get(cssrule.OwnerObjectId);
 
-                if (siteobject != null && siteobject is IDomObject)
+                if (siteobject is IDomObject)
                 {
                     var domobject = siteobject as IDomObject;
                     string newhtml = string.Empty;
@@ -466,7 +466,7 @@ namespace Kooboo.Sites.Repository
             }
             var siteobject = repo.Get(OwnerObjectId);
 
-            if (siteobject != null && siteobject is DomObject)
+            if (siteobject is DomObject)
             {
                 var domobject = siteobject as DomObject;
 
@@ -491,7 +491,7 @@ namespace Kooboo.Sites.Repository
                     }
                 }
 
-                if (sourceupdates.Count() > 0)
+                if (sourceupdates.Any())
                 {
                     domobject.Body = Sites.Service.DomService.UpdateSource(domobject.Dom.HtmlSource, sourceupdates);
 
diff --git a/Kooboo.Sites/Repository/ContentFolderRepository.cs b/Kooboo.Sites/Repository/ContentFolderRepository.cs
index 1b831566..6ef432b8 100644
--- a/Kooboo.Sites/Repository/ContentFolderRepository.cs
+++ b/Kooboo.Sites/Repository/ContentFolderRepository.cs
@@ -93,7 +93,7 @@ namespace Kooboo.Sites.Repository
             {
                 var viewmethod = GetViewDataMethods(item.ObjectId);
 
-                if (viewmethod != null && viewmethod.Count() > 0)
+                if (viewmethod != null && viewmethod.Any())
                 {
                     foreach (var viewm in viewmethod)
                     {
diff --git a/Kooboo.Sites/Repository/CoreSettingRepository.cs b/Kooboo.Sites/Repository/CoreSettingRepository.cs
index 9cdc178a..142eae55 100644
--- a/Kooboo.Sites/Repository/CoreSettingRepository.cs
+++ b/Kooboo.Sites/Repository/CoreSettingRepository.cs
@@ -59,8 +59,7 @@ namespace Kooboo.Sites.Repository
         {
             var type = typeof(T);
 
-            var result = GetSiteSetting(type) as ISiteSetting; 
-            if (result !=null)
+            if (GetSiteSetting(type) is ISiteSetting result)
             {
                 return (T)result; 
             } 
diff --git a/Kooboo.Sites/Repository/DatabaseTableRepository.cs b/Kooboo.Sites/Repository/DatabaseTableRepository.cs
index 874b01c7..3205944e 100644
--- a/Kooboo.Sites/Repository/DatabaseTableRepository.cs
+++ b/Kooboo.Sites/Repository/DatabaseTableRepository.cs
@@ -141,7 +141,7 @@ namespace Kooboo.Sites.Repository
 
         public void DeleteTable(List<string> nameorids, Guid userid)
         {
-            if (nameorids != null && nameorids.Count() > 0)
+            if (nameorids != null && nameorids.Any())
             {
                 foreach (var item in nameorids)
                 {
diff --git a/Kooboo.Sites/Repository/DomElementRepository.cs b/Kooboo.Sites/Repository/DomElementRepository.cs
index 4f11cf73..e456b20a 100644
--- a/Kooboo.Sites/Repository/DomElementRepository.cs
+++ b/Kooboo.Sites/Repository/DomElementRepository.cs
@@ -84,7 +84,7 @@ namespace Kooboo.Sites.Repository
 
             var subs = AllOwnerElements.Where(o => o.ParentId == PageElementId); 
 
-            if (subs !=null && subs.Count()>0)
+            if (subs != null && subs.Any())
             {
                 foreach (var item in subs)
                 {
@@ -144,7 +144,7 @@ namespace Kooboo.Sites.Repository
                 return false;
             }
 
-            int count = listx.Count();
+            int count = listx.Count;
 
             for (int i = 0; i < count; i++)
             {
diff --git a/Kooboo.Sites/Repository/FolderRepository.cs b/Kooboo.Sites/Repository/FolderRepository.cs
index e25f6642..162bfaa6 100644
--- a/Kooboo.Sites/Repository/FolderRepository.cs
+++ b/Kooboo.Sites/Repository/FolderRepository.cs
@@ -217,7 +217,7 @@ namespace Kooboo.Sites.Repository
                 if (route != null && route.objectId != default(Guid) && route.DestinationConstType == ConstObjectType)
                 {
                     var siteobject = Service.ObjectService.GetSiteObject(this.SiteDb, route.objectId, ConstObjectType, UseColumnDataOnly);
-                    if (siteobject != null  &&　siteobject is SiteObject)
+                    if (siteobject is SiteObject)
                     {
                         Result.Add(siteobject as SiteObject);
                     }
diff --git a/Kooboo.Sites/Repository/IEmbeddableRepositoryBase.cs b/Kooboo.Sites/Repository/IEmbeddableRepositoryBase.cs
index 69121fa3..85cda4ff 100644
--- a/Kooboo.Sites/Repository/IEmbeddableRepositoryBase.cs
+++ b/Kooboo.Sites/Repository/IEmbeddableRepositoryBase.cs
@@ -150,7 +150,7 @@ namespace Kooboo.Sites.Repository
 
                 var parentobject = repo?.Get(value.OwnerObjectId);
 
-                if (parentobject != null && parentobject is IDomObject)
+                if (parentobject is IDomObject)
                 {
                     var domobject = parentobject as IDomObject;
 
@@ -191,7 +191,7 @@ namespace Kooboo.Sites.Repository
 
                     var parentobject = repo?.Get(item.objectXId);
 
-                    if (parentobject != null && parentobject is IDomObject)
+                    if (parentobject is IDomObject)
                     {
                         var domobject = parentobject as IDomObject;
 
@@ -279,7 +279,7 @@ namespace Kooboo.Sites.Repository
 
                 var parentobject = repo?.Get(Value.OwnerObjectId);
 
-                if (parentobject != null && parentobject is IDomObject)
+                if (parentobject is IDomObject)
                 {
                     var domobject = parentobject as IDomObject;
 
@@ -416,7 +416,7 @@ namespace Kooboo.Sites.Repository
         List<object> IEmbeddableRepository.GetSameEmbedded(int BodyHash)
         {
             var result = this.GetSameEmbedded(BodyHash);
-            if (result != null && result.Count() > 0)
+            if (result != null && result.Any())
             {
                 return result.ToList<object>();
             }
diff --git a/Kooboo.Sites/Repository/MenuRepository.cs b/Kooboo.Sites/Repository/MenuRepository.cs
index 7e3295ef..4a3fa69c 100644
--- a/Kooboo.Sites/Repository/MenuRepository.cs
+++ b/Kooboo.Sites/Repository/MenuRepository.cs
@@ -124,7 +124,7 @@ namespace Kooboo.Sites.Repository
         
         private bool _swap(Menu ParentMenu, Guid IdA, Guid IdB)
         {
-            if (ParentMenu.children == null || ParentMenu.children.Count() ==0)
+            if (ParentMenu.children == null || !ParentMenu.children.Any())
             {
                 return false;
             }
diff --git a/Kooboo.Sites/Repository/PageRepository.cs b/Kooboo.Sites/Repository/PageRepository.cs
index 21cb43d5..a7022cbf 100644
--- a/Kooboo.Sites/Repository/PageRepository.cs
+++ b/Kooboo.Sites/Repository/PageRepository.cs
@@ -71,7 +71,7 @@ namespace Kooboo.Sites.Repository
             /// embedded styles
             var embedded = SiteDb.Styles.Query.WhereIn<Guid>(o => o.OwnerObjectId, allobjectids).UseColumnData().SelectAll();
 
-            if (embedded.Count() > 0)
+            if (embedded.Any())
             {
                 var list = embedded.Select(o => o.Id).ToList();
                 foreach (var item in list)
@@ -100,7 +100,7 @@ namespace Kooboo.Sites.Repository
             foreach (var item in externalstyleids)
             {
                 var importes = SiteDb.Styles.GetImports(item);
-                if (importes != null && importes.Count() > 0)
+                if (importes != null && importes.Any())
                 {
                     importedids.AddRange(importes);
                 }
diff --git a/Kooboo.Sites/Repository/RouteRepository.cs b/Kooboo.Sites/Repository/RouteRepository.cs
index 69bdc783..9868f90e 100644
--- a/Kooboo.Sites/Repository/RouteRepository.cs
+++ b/Kooboo.Sites/Repository/RouteRepository.cs
@@ -184,7 +184,7 @@ namespace Kooboo.Sites.Repository
                 foreach (var item in relations)
                 {
                     var group = this.SiteDb.ResourceGroups.Get(item.objectXId);
-                    if (group != null && group.Children != null && group.Children.ContainsKey(routeid))
+                    if (group?.Children != null && group.Children.ContainsKey(routeid))
                     {
                         group.Children.Remove(routeid);
                         SiteDb.ResourceGroups.AddOrUpdate(group);
diff --git a/Kooboo.Sites/Repository/SearchIndexRepository.cs b/Kooboo.Sites/Repository/SearchIndexRepository.cs
index 31d98d30..56eeb60a 100644
--- a/Kooboo.Sites/Repository/SearchIndexRepository.cs
+++ b/Kooboo.Sites/Repository/SearchIndexRepository.cs
@@ -318,7 +318,7 @@ namespace Kooboo.Sites.Repository
 
             SetData(result, keywords, context.Culture, HighLightAttr);
 
-            this.Log.Add(new SearchLog() { IP = context.Request.IP, Keywords = keywords, Time = DateTime.Now, DocFound = ids.Count, ResultCount = result.Count(), Skip = 0 });
+            this.Log.Add(new SearchLog() { IP = context.Request.IP, Keywords = keywords, Time = DateTime.Now, DocFound = ids.Count, ResultCount = result.Count, Skip = 0 });
 
             return result;
         }
@@ -449,7 +449,7 @@ namespace Kooboo.Sites.Repository
 
             pageresult.PageNumber = pagenumber;
             pageresult.PageSize = pagesize;
-            pageresult.TotalCount = ids.Count();
+            pageresult.TotalCount = ids.Count;
             pageresult.TotalPages = Lib.Helper.CalculationHelper.GetPageCount(pageresult.TotalCount, pagesize);
 
             List<SearchResult> result = new List<SearchResult>();
@@ -490,7 +490,7 @@ namespace Kooboo.Sites.Repository
             SetData(resultset, keywords, context.Culture, HighLightAttr);
 
 
-            this.Log.Add(new SearchLog() { IP = context.Request.IP, Keywords = keywords, Time = DateTime.Now, DocFound = ids.Count, ResultCount = resultset.Count(), Skip = skip });
+            this.Log.Add(new SearchLog() { IP = context.Request.IP, Keywords = keywords, Time = DateTime.Now, DocFound = ids.Count, ResultCount = resultset.Count, Skip = skip });
 
             pageresult.DataList = resultset.ToList<object>();
             return pageresult;
@@ -519,7 +519,7 @@ namespace Kooboo.Sites.Repository
 
             pageresult.PageNumber = pagenumber;
             pageresult.PageSize = pagesize;
-            pageresult.TotalCount = ids.Count();
+            pageresult.TotalCount = ids.Count;
             pageresult.TotalPages = Lib.Helper.CalculationHelper.GetPageCount(pageresult.TotalCount, pagesize);
 
             List<SearchResult> result = new List<SearchResult>();
@@ -582,7 +582,7 @@ namespace Kooboo.Sites.Repository
 
             var resultset = result.Skip(skip).Take(pagesize).ToList();
 
-            this.Log.Add(new SearchLog() { IP = context.Request.IP, Keywords = keywords, Time = DateTime.Now, DocFound = ids.Count, ResultCount = resultset.Count(), Skip = skip });
+            this.Log.Add(new SearchLog() { IP = context.Request.IP, Keywords = keywords, Time = DateTime.Now, DocFound = ids.Count, ResultCount = resultset.Count, Skip = skip });
 
             pageresult.DataList = resultset.ToList<object>();
             return pageresult;
@@ -741,7 +741,7 @@ namespace Kooboo.Sites.Repository
                 return text;
             }
 
-            if (Keywords == null || Keywords.Count() == 0)
+            if (Keywords == null || !Keywords.Any())
             {
                 return text;
             }
@@ -927,7 +927,7 @@ namespace Kooboo.Sites.Repository
                 return text;
             }
 
-            if (Keywords == null || Keywords.Count() == 0)
+            if (Keywords == null || !Keywords.Any())
             {
                 return text;
             }
@@ -1217,7 +1217,7 @@ namespace Kooboo.Sites.Repository
             }
             var relations = sitedb.Views.GetUsedBy(ObjectId);
 
-            if (relations == null || relations.Count() == 0)
+            if (relations == null || !relations.Any())
             {
                 return null;
             }
@@ -1262,7 +1262,7 @@ namespace Kooboo.Sites.Repository
             }
             var relations = sitedb.Layouts.GetUsedBy(LayoutId);
 
-            if (relations == null || relations.Count() == 0)
+            if (relations == null || !relations.Any())
             {
                 return null;
             }
@@ -1295,7 +1295,7 @@ namespace Kooboo.Sites.Repository
 
             var relations = sitedb.HtmlBlocks.GetUsedBy(ObjectId);
 
-            if (relations == null || relations.Count() == 0)
+            if (relations == null || !relations.Any())
             {
                 return null;
             }
diff --git a/Kooboo.Sites/Repository/SiteDb.cs b/Kooboo.Sites/Repository/SiteDb.cs
index 126b1f82..ce41e190 100644
--- a/Kooboo.Sites/Repository/SiteDb.cs
+++ b/Kooboo.Sites/Repository/SiteDb.cs
@@ -1016,7 +1016,7 @@ namespace Kooboo.Sites.Repository
                 }
 
                 var repo = this.GetRepository(item);
-                if (repo != null && repo is ISiteRepositoryBase)
+                if (repo is ISiteRepositoryBase)
                 {
                     var siterepo = repo as ISiteRepositoryBase;
 
diff --git a/Kooboo.Sites/Repository/SiteRepositoryBase.cs b/Kooboo.Sites/Repository/SiteRepositoryBase.cs
index 19d3c30e..39af1cd1 100644
--- a/Kooboo.Sites/Repository/SiteRepositoryBase.cs
+++ b/Kooboo.Sites/Repository/SiteRepositoryBase.cs
@@ -662,7 +662,7 @@ namespace Kooboo.Sites.Repository
 
                 else
                 {
-                    if (objectvalue != null && objectvalue is Kooboo.Sites.Models.Code)
+                    if (objectvalue is Kooboo.Sites.Models.Code)
                     {
                         var code = objectvalue as Code; 
                         if (code.CodeType == CodeType.Api)
diff --git a/Kooboo.Sites/Repository/StyleRepository.cs b/Kooboo.Sites/Repository/StyleRepository.cs
index e83fc1cf..f510d139 100644
--- a/Kooboo.Sites/Repository/StyleRepository.cs
+++ b/Kooboo.Sites/Repository/StyleRepository.cs
@@ -78,7 +78,7 @@ namespace Kooboo.Sites.Repository
                         if (ParentStyle != null)
                         {
                             var parentresults = this.GetUsedBy(ParentStyle);
-                            if (parentresults != null && parentresults.Count() > 0)
+                            if (parentresults != null && parentresults.Any())
                             {
                                 result.AddRange(parentresults);
                             }
@@ -129,7 +129,7 @@ namespace Kooboo.Sites.Repository
                         {
                             result.Add(route.objectId);
                             var subimports = GetImports(route.objectId);
-                            if (subimports != null && subimports.Count() > 0)
+                            if (subimports != null && subimports.Any())
                             {
                                 result.AddRange(subimports);
                             }
diff --git a/Kooboo.Sites/Repository/TextContentRepository.cs b/Kooboo.Sites/Repository/TextContentRepository.cs
index 7ae795ee..06da8dbd 100644
--- a/Kooboo.Sites/Repository/TextContentRepository.cs
+++ b/Kooboo.Sites/Repository/TextContentRepository.cs
@@ -82,7 +82,7 @@ namespace Kooboo.Sites.Repository
             foreach (var item in list.Where(o => o.Online))
             {
                 var view = GetView(item, CurrentCulture);
-                if (view != null && view.TextValues.Count() > 0)
+                if (view != null && view.TextValues.Any())
                 {
                     return view;
                 }
@@ -91,7 +91,7 @@ namespace Kooboo.Sites.Repository
             foreach (var item in list.Where(o => !o.Online))
             {
                 var view = GetView(item, CurrentCulture);
-                if (view != null && view.TextValues.Count() > 0)
+                if (view != null && view.TextValues.Any())
                 {
                     return view;
                 }
diff --git a/Kooboo.Sites/Repository/TransferTaskRepository.cs b/Kooboo.Sites/Repository/TransferTaskRepository.cs
index 8fe96409..e1826f1a 100644
--- a/Kooboo.Sites/Repository/TransferTaskRepository.cs
+++ b/Kooboo.Sites/Repository/TransferTaskRepository.cs
@@ -56,7 +56,7 @@ namespace Kooboo.Sites.Repository
 
         public override bool AddOrUpdate(TransferTask value, Guid UserId = default(Guid))
         {
-            if (value.Domains.Count() == 0)
+            if (!value.Domains.Any())
             {
                 if (!string.IsNullOrEmpty(value.FullStartUrl))
                 {
@@ -132,7 +132,7 @@ namespace Kooboo.Sites.Repository
             {
                 foreach (var item in all.OrderBy(o => o.CreationDate))
                 {
-                    if (item.Domains.Count() > 0)
+                    if (item.Domains.Any())
                     {
                         foreach (var domain in item.Domains)
                         {
diff --git a/Kooboo.Sites/Routing/ObjectRoute.cs b/Kooboo.Sites/Routing/ObjectRoute.cs
index 6c5a657b..647bab0c 100644
--- a/Kooboo.Sites/Routing/ObjectRoute.cs
+++ b/Kooboo.Sites/Routing/ObjectRoute.cs
@@ -237,11 +237,11 @@ namespace Kooboo.Sites.Routing
                 {
                     sysRoute.Name = "/__kb/{objecttype}/{nameorid}";
                 }
-                else if (segments.Count() == 4)
+                else if (segments.Count == 4)
                 {
                     sysRoute.Name = "/__kb/{objecttype}/{nameorid}/{action}";
                 }
-                else if (segments.Count() > 4)
+                else if (segments.Count > 4)
                 {
                     sysRoute.Name = "/__kb/{objecttype}/{path}";
                 }
@@ -267,7 +267,7 @@ namespace Kooboo.Sites.Routing
                             sysRoute.Name = "/{objecttype}/{nameorid}";
                             nameorid = segments[1];
                         }
-                        else if (segments.Count() == 3)
+                        else if (segments.Count == 3)
                         {
                             sysRoute.Name = "/{objecttype}/{nameorid}/{action}";
                             nameorid = segments[1];
@@ -288,7 +288,7 @@ namespace Kooboo.Sites.Routing
                             sysRoute.Name = "/{objecttype}/{nameorid}";
                             nameorid = segments[1];
                         }
-                        else if (segments.Count() == 3)
+                        else if (segments.Count == 3)
                         {
                             sysRoute.Name = "/{objecttype}/{nameorid}/{action}";
                             nameorid = segments[1];
diff --git a/Kooboo.Sites/Routing/PageRoute.cs b/Kooboo.Sites/Routing/PageRoute.cs
index b85798e6..0d9e0bec 100644
--- a/Kooboo.Sites/Routing/PageRoute.cs
+++ b/Kooboo.Sites/Routing/PageRoute.cs
@@ -43,7 +43,7 @@ namespace Kooboo.Sites.Routing
             }
 
             var page = SiteDb.Pages.Get(PageId);
-            if (page !=null && page.RequestParas !=null)
+            if (page?.RequestParas != null)
             {
                 foreach (var item in page.RequestParas)
                 {
@@ -146,7 +146,7 @@ namespace Kooboo.Sites.Routing
 
             // add the kscript part into the parameters. 
             var view = sitedb.Views.Get(ViewId);
-            if (view != null && view.RequestParas != null)
+            if (view?.RequestParas != null)
             {
                 foreach (var item in view.RequestParas)
                 {
@@ -257,7 +257,7 @@ namespace Kooboo.Sites.Routing
             }
              
 
-            if (view !=null && view.RequestParas !=null)
+            if (view?.RequestParas != null)
             {
                 foreach (var p in view.RequestParas)
                 {
diff --git a/Kooboo.Sites/SMS/Aliyun/Core/Auth/CredentialsBackupCompatibilityAdaptor.cs b/Kooboo.Sites/SMS/Aliyun/Core/Auth/CredentialsBackupCompatibilityAdaptor.cs
index 2260d648..90db49dc 100644
--- a/Kooboo.Sites/SMS/Aliyun/Core/Auth/CredentialsBackupCompatibilityAdaptor.cs
+++ b/Kooboo.Sites/SMS/Aliyun/Core/Auth/CredentialsBackupCompatibilityAdaptor.cs
@@ -52,9 +52,8 @@ namespace Aliyun.Acs.Core.Auth
         public string GetSecurityToken()
         {
             var credentials = GetCredentials();
-            var sessionCredentials = credentials as BasicSessionCredentials;
 
-            return sessionCredentials != null ? sessionCredentials.GetSessionToken() : null;
+            return credentials is BasicSessionCredentials sessionCredentials ? sessionCredentials.GetSessionToken() : null;
         }
     }
 }
diff --git a/Kooboo.Sites/SMS/Aliyun/Core/DefaultAcsClient.cs b/Kooboo.Sites/SMS/Aliyun/Core/DefaultAcsClient.cs
index df1677d1..76ecb184 100644
--- a/Kooboo.Sites/SMS/Aliyun/Core/DefaultAcsClient.cs
+++ b/Kooboo.Sites/SMS/Aliyun/Core/DefaultAcsClient.cs
@@ -270,8 +270,7 @@ namespace Aliyun.Acs.Core
                     if (500 <= httpResponse.Status)
                     {
                         throw new ServerException(error.ErrorCode,
-                            string.Format("{0}, the request url is {1}, the RequestId is {2}.", error.ErrorMessage,
-                                httpResponse.Url ?? "empty", error.RequestId));
+                            $"{error.ErrorMessage}, the request url is {httpResponse.Url ?? "empty"}, the RequestId is {error.RequestId}.");
                     }
 
                     if (400 == httpResponse.Status && (error.ErrorCode.Equals("SignatureDoesNotMatch") ||
diff --git a/Kooboo.Sites/SMS/Aliyun/Core/Exceptions/ClientException.cs b/Kooboo.Sites/SMS/Aliyun/Core/Exceptions/ClientException.cs
index d310ce42..a0ee6780 100644
--- a/Kooboo.Sites/SMS/Aliyun/Core/Exceptions/ClientException.cs
+++ b/Kooboo.Sites/SMS/Aliyun/Core/Exceptions/ClientException.cs
@@ -24,7 +24,7 @@ namespace Aliyun.Acs.Core.Exceptions
     public class ClientException : Exception
     {
         public ClientException(string errCode, string errMsg, string requestId) : base(
-            string.Format("{0} : {1} + [ RequestId : {2} ]", errCode, errMsg, requestId))
+            $"{errCode} : {errMsg} + [ RequestId : {requestId} ]")
         {
             ErrorType = ErrorType.Client;
             ErrorMessage = errMsg;
diff --git a/Kooboo.Sites/SMS/Aliyun/Core/Http/HttpResponse.cs b/Kooboo.Sites/SMS/Aliyun/Core/Http/HttpResponse.cs
index d6fbb108..af78df7c 100644
--- a/Kooboo.Sites/SMS/Aliyun/Core/Http/HttpResponse.cs
+++ b/Kooboo.Sites/SMS/Aliyun/Core/Http/HttpResponse.cs
@@ -142,21 +142,17 @@ namespace Aliyun.Acs.Core.Http
                 }
 
                 throw new ClientException("SDK.WebException",
-                    string.Format("HttpWebRequest WebException occured, the request url is {0} {1}",
-                        httpWebRequest.RequestUri == null ? "empty" : httpWebRequest.RequestUri.Host, ex));
+                    $"HttpWebRequest WebException occured, the request url is {(httpWebRequest.RequestUri == null ? "empty" : httpWebRequest.RequestUri.Host)} {ex}");
             }
             catch (IOException ex)
             {
                 throw new ClientException("SDK.ServerUnreachable:",
-                    string.Format("Server unreachable: connection to url: {0} failed. {1}",
-                        httpWebRequest.RequestUri == null ? "empty" : httpWebRequest.RequestUri.Host,
-                        ex));
+                    $"Server unreachable: connection to url: {(httpWebRequest.RequestUri == null ? "empty" : httpWebRequest.RequestUri.Host)} failed. {ex}");
             }
             catch (Exception ex)
             {
                 throw new ClientException("SDK.Exception",
-                    string.Format("The request url is {0} {1}",
-                        httpWebRequest.RequestUri == null ? "empty" : httpWebRequest.RequestUri.Host, ex));
+                    $"The request url is {(httpWebRequest.RequestUri == null ? "empty" : httpWebRequest.RequestUri.Host)} {ex}");
             }
         }
 
diff --git a/Kooboo.Sites/SMS/Aliyun/Core/Regions/InternalEndpointsParser.cs b/Kooboo.Sites/SMS/Aliyun/Core/Regions/InternalEndpointsParser.cs
index dc60866f..a835c222 100644
--- a/Kooboo.Sites/SMS/Aliyun/Core/Regions/InternalEndpointsParser.cs
+++ b/Kooboo.Sites/SMS/Aliyun/Core/Regions/InternalEndpointsParser.cs
@@ -44,7 +44,7 @@ namespace Aliyun.Acs.Core.Regions
         {
             string domain;
 
-            regionIdEndpointCollection.TryGetValue(string.Format("{0}_{1}", productName.ToLower(), regionId), out domain);
+            regionIdEndpointCollection.TryGetValue($"{productName.ToLower()}_{regionId}", out domain);
 
             if (string.IsNullOrEmpty(domain))
             {
diff --git a/Kooboo.Sites/SMS/Aliyun/Core/Retry/Condition/RetryOnExceptionCondition.cs b/Kooboo.Sites/SMS/Aliyun/Core/Retry/Condition/RetryOnExceptionCondition.cs
index 4396128d..af45d7be 100644
--- a/Kooboo.Sites/SMS/Aliyun/Core/Retry/Condition/RetryOnExceptionCondition.cs
+++ b/Kooboo.Sites/SMS/Aliyun/Core/Retry/Condition/RetryOnExceptionCondition.cs
@@ -43,9 +43,8 @@ namespace Aliyun.Acs.Core.Retry.Condition
                 return RetryCondition.ShouldRetry;
             }
 
-            if (exception is ServerException)
+            if (exception is ServerException serverException)
             {
-                var serverException = (ServerException) exception;
                 var errorCode = serverException.ErrorCode;
 
                 var product = retryPolicyContext.Product;
diff --git a/Kooboo.Sites/SMS/TencentCloud/Common/AbstractModel.cs b/Kooboo.Sites/SMS/TencentCloud/Common/AbstractModel.cs
index 85d925c5..ea77cfa6 100644
--- a/Kooboo.Sites/SMS/TencentCloud/Common/AbstractModel.cs
+++ b/Kooboo.Sites/SMS/TencentCloud/Common/AbstractModel.cs
@@ -47,10 +47,7 @@ namespace TencentCloud.Common
 
         protected void SetParamObj<V>(Dictionary<string, string> map, String prefix, V obj)  where V: AbstractModel
         {
-            if (obj != null)
-            {
-                obj.ToMap(map, prefix);
-            }
+            obj?.ToMap(map, prefix);
         }
 
         protected  void SetParamArrayObj<V>(Dictionary<String, String> map, String prefix, V[] array) where V : AbstractModel
diff --git a/Kooboo.Sites/SMS/TencentCloud/Common/Sign.cs b/Kooboo.Sites/SMS/TencentCloud/Common/Sign.cs
index 73b226e8..7c06cc9b 100644
--- a/Kooboo.Sites/SMS/TencentCloud/Common/Sign.cs
+++ b/Kooboo.Sites/SMS/TencentCloud/Common/Sign.cs
@@ -82,7 +82,7 @@ namespace TencentCloud.Common
             string retStr = "";
             foreach (string key in requestParams.Keys)
             {
-                retStr += string.Format("{0}={1}&", key, requestParams[key]);
+                retStr += $"{key}={requestParams[key]}&";
             }
             return retStr.TrimEnd('&');
         }
diff --git a/Kooboo.Sites/Scripting/Extension/WebService.cs b/Kooboo.Sites/Scripting/Extension/WebService.cs
index 90718c0a..e47edb01 100644
--- a/Kooboo.Sites/Scripting/Extension/WebService.cs
+++ b/Kooboo.Sites/Scripting/Extension/WebService.cs
@@ -40,8 +40,7 @@ namespace Kooboo.Sites.Scripting.Extension
 
             if (data is System.Dynamic.ExpandoObject)
             {
-                IDictionary<String, Object> value = data as IDictionary<String, Object>;
-                if (value != null)
+                if (data is IDictionary<String, Object> value)
                 {
                     foreach (var item in value)
                     {
@@ -92,7 +91,7 @@ namespace Kooboo.Sites.Scripting.Extension
         private HttpWebRequest CreateWebRequest(string url, string ns,string methodName)
         {
             HttpWebRequest webRequest = (HttpWebRequest)WebRequest.Create(url);
-            var action = string.Format("{0}{1}", ns, methodName);
+            var action = $"{ns}{methodName}";
             webRequest.Headers.Add("SOAPAction", action);
             webRequest.ContentType = "text/xml;charset=\"utf-8\"";
             webRequest.Accept = "text/xml";
diff --git a/Kooboo.Sites/Scripting/ExtensionContainer.cs b/Kooboo.Sites/Scripting/ExtensionContainer.cs
index 5a12d19e..a6d0b8b8 100644
--- a/Kooboo.Sites/Scripting/ExtensionContainer.cs
+++ b/Kooboo.Sites/Scripting/ExtensionContainer.cs
@@ -66,8 +66,7 @@ namespace Kooboo.Sites.Scripting
 
                 if (instance !=null)
                 {
-                    var kscriptInstance = instance as IkScript;
-                    if (kscriptInstance!=null)
+                    if (instance is IkScript kscriptInstance)
                     {
                         kscriptInstance.context = context;
                         return instance;
diff --git a/Kooboo.Sites/Scripting/Global/Curl.cs b/Kooboo.Sites/Scripting/Global/Curl.cs
index 30080167..a1f8e6d9 100644
--- a/Kooboo.Sites/Scripting/Global/Curl.cs
+++ b/Kooboo.Sites/Scripting/Global/Curl.cs
@@ -462,7 +462,7 @@ k.url.postData(""http://www.kooboo.com/fakereceiver"", data,{'Authentication','B
 
             if (!string.IsNullOrEmpty(username) && !string.IsNullOrEmpty(password))
             {
-                var bytes = Encoding.UTF8.GetBytes(String.Format("{0}:{1}", username, password));
+                var bytes = Encoding.UTF8.GetBytes($"{username}:{password}");
                 header.Add(HttpRequestHeader.Authorization.ToString(), "Basic " + Convert.ToBase64String(bytes));
             }
 
diff --git a/Kooboo.Sites/Scripting/Global/Database/DynamicTableObjectBase.cs b/Kooboo.Sites/Scripting/Global/Database/DynamicTableObjectBase.cs
index dbc4c833..672369b6 100644
--- a/Kooboo.Sites/Scripting/Global/Database/DynamicTableObjectBase.cs
+++ b/Kooboo.Sites/Scripting/Global/Database/DynamicTableObjectBase.cs
@@ -33,9 +33,8 @@ namespace Kooboo.Sites.Scripting.Global.Database
 
                 //[Kooboo.Lib\Jint\Native\Date\DateConstructor.cs FromDateTime] method will convent unspecified datetime to utc time,
                 //but the data is saved using utc and then query out is unspecified 
-                if (value is DateTime)
+                if (value is DateTime date)
                 {
-                    var date = (DateTime)value;
                     if (date.Kind == DateTimeKind.Unspecified) value = date.ToLocalTime();
                 }
 
diff --git a/Kooboo.Sites/Scripting/Global/KTemplate.cs b/Kooboo.Sites/Scripting/Global/KTemplate.cs
index 40960ece..37b015b3 100644
--- a/Kooboo.Sites/Scripting/Global/KTemplate.cs
+++ b/Kooboo.Sites/Scripting/Global/KTemplate.cs
@@ -71,7 +71,7 @@ namespace Kooboo.Sites.Scripting.Global
                 // update to preview sites.
                 var siteDb= ImportBinary(domain,model.Bytes, oldTemplate);
 
-                if (model.NewImages.Count == 0 && existImages.Count()==0)
+                if (model.NewImages.Count == 0 && !existImages.Any())
                 {
                     images = GetScreenshotImages(siteDb,domain);
                     if (images.Count > 0)
@@ -150,7 +150,7 @@ namespace Kooboo.Sites.Scripting.Global
 
             var images = new List<ScreenshotImage>();
             var thumbnail = "";
-            if (model.Images.Count() == 0)
+            if (!model.Images.Any())
             {
                 images = GetScreenshotImages(siteDb,domain);
                 if (images.Count > 0)
@@ -221,7 +221,7 @@ namespace Kooboo.Sites.Scripting.Global
             dic["score"] = 0;
             dic["id"] = Guid.NewGuid().ToString();
 
-            if (formResult.Files.Count() > 0)
+            if (formResult.Files.Any())
             {
                 var zipfile = formResult.Files.Find(f => System.IO.Path.GetExtension(f.FileName).Equals(".zip", StringComparison.OrdinalIgnoreCase));
                 if (zipfile == null)
@@ -279,7 +279,7 @@ namespace Kooboo.Sites.Scripting.Global
                 {
                     if (int.TryParse(newDefault, out var index))
                     {
-                        if (index < images.Count())
+                        if (index < images.Count)
                         {
                             return images[index];
                             
@@ -422,7 +422,7 @@ namespace Kooboo.Sites.Scripting.Global
             var screenshoturl = "http://sslgenerator.com/_api/screenshot/get";
 
             url = System.Net.WebUtility.UrlEncode(url);
-            var nodeScreenShotUrl = string.Format("{0}?url={1}&width={2}&height={3}", screenshoturl, url, width, height);
+            var nodeScreenShotUrl = $"{screenshoturl}?url={url}&width={width}&height={height}";
             try
             {
                 var base64Image = HttpHelper.Get<string>(nodeScreenShotUrl);
@@ -441,7 +441,7 @@ namespace Kooboo.Sites.Scripting.Global
             var site = GlobalDb.WebSites.Get(Guid.Parse(siteid));
             //string baseurl = site.BaseUrl();
 
-            var hostname =string.Format("{0}.{1}",site.Name,domain);
+            var hostname =$"{site.Name}.{domain}";
             var baseurl = GetBaseUrl(site, domain);
             return Lib.Helper.UrlHelper.Combine(baseurl, GetStartRelativeUrl(site));
         }
@@ -449,7 +449,7 @@ namespace Kooboo.Sites.Scripting.Global
         private string GetBaseUrl(WebSite site,string domain)
         {
             //string baseurl = website.BaseUrl();
-            var hostname = string.Format("{0}.{1}", site.Name, domain);
+            var hostname = $"{site.Name}.{domain}";
             var baseurl = string.Empty;
             if (site.ForceSSL)
             {
@@ -608,7 +608,7 @@ namespace Kooboo.Sites.Scripting.Global
         private string GetStartRelativeUrl(Data.Models.WebSite site)
         {
             var startpages = site.StartPages();
-            if (startpages != null && startpages.Count() > 0)
+            if (startpages != null && startpages.Any())
             {
                 foreach (var item in startpages)
                 {
@@ -623,7 +623,7 @@ namespace Kooboo.Sites.Scripting.Global
 
             var allpages = site.SiteDb().Pages.All();
 
-            if (allpages != null && allpages.Count() > 0)
+            if (allpages != null && allpages.Any())
             {
                 foreach (var item in allpages)
                 {
@@ -636,7 +636,7 @@ namespace Kooboo.Sites.Scripting.Global
                 }
             }
 
-            if (allpages != null && allpages.Count() > 0)
+            if (allpages != null && allpages.Any())
             {
                 foreach (var item in allpages)
                 {
@@ -672,7 +672,7 @@ namespace Kooboo.Sites.Scripting.Global
             foreach (var item in sitedb.Pages.All(true))
             {
                 Pageids.Add(item.Id);
-                if (Pageids.Count() >= 10)
+                if (Pageids.Count >= 10)
                 {
                     return Pageids;
                 }
diff --git a/Kooboo.Sites/Scripting/Global/Mail.cs b/Kooboo.Sites/Scripting/Global/Mail.cs
index e06e1387..52ad9faf 100644
--- a/Kooboo.Sites/Scripting/Global/Mail.cs
+++ b/Kooboo.Sites/Scripting/Global/Mail.cs
@@ -59,7 +59,7 @@ k.mail.send(msg);")]
                 }
 
                 // check if org allowed to send.
-                if (!Kooboo.Data.Infrastructure.InfraManager.Test(orgid, Kooboo.Data.Infrastructure.InfraType.Email, allrcptos.Count()))
+                if (!Kooboo.Data.Infrastructure.InfraManager.Test(orgid, Kooboo.Data.Infrastructure.InfraType.Email, allrcptos.Count))
                 {
                     throw new Exception("No enough email sending credits");
                 }
@@ -67,7 +67,7 @@ k.mail.send(msg);")]
                 {
                     Kooboo.Mail.Transport.Incoming.Receive(maildata.From, allrcptos, messagebody);
 
-                    Kooboo.Data.Infrastructure.InfraManager.Add(orgid, Kooboo.Data.Infrastructure.InfraType.Email, allrcptos.Count(), string.Join(",", allrcptos));
+                    Kooboo.Data.Infrastructure.InfraManager.Add(orgid, Kooboo.Data.Infrastructure.InfraType.Email, allrcptos.Count, string.Join(",", allrcptos));
                 }
 
             }
@@ -87,9 +87,7 @@ k.mail.send(msg);")]
         {
             Dictionary<string, object> data = new Dictionary<string, object>(StringComparer.OrdinalIgnoreCase);
 
-            System.Collections.IDictionary idict = dataobj as System.Collections.IDictionary;
-
-            if (idict != null)
+            if (dataobj is System.Collections.IDictionary idict)
             {
                 foreach (var item in idict.Keys)
                 {
@@ -102,8 +100,7 @@ k.mail.send(msg);")]
             }
             else
             {
-                var dynamicobj = dataobj as IDictionary<string, object>;
-                if (dynamicobj != null)
+                if (dataobj is IDictionary<string, object> dynamicobj)
                 {
                     foreach (var item in dynamicobj.Keys)
                     {
@@ -199,7 +196,7 @@ k.mail.send(msg);")]
             }
 
 
-            if (result.To == null || result.To.Count() == 0 || result.From == null)
+            if (result.To == null || !result.To.Any() || result.From == null)
             {
                 return null;
             }
@@ -313,9 +310,7 @@ k.mail.smtpSend(smtpserver, msg);")]
         {
             Dictionary<string, object> data = new Dictionary<string, object>(StringComparer.OrdinalIgnoreCase);
 
-            System.Collections.IDictionary idict = dataobj as System.Collections.IDictionary;
-
-            if (idict != null)
+            if (dataobj is System.Collections.IDictionary idict)
             {
                 foreach (var item in idict.Keys)
                 {
@@ -328,8 +323,7 @@ k.mail.smtpSend(smtpserver, msg);")]
             }
             else
             {
-                var dynamicobj = dataobj as IDictionary<string, object>;
-                if (dynamicobj != null)
+                if (dataobj is IDictionary<string, object> dynamicobj)
                 {
                     foreach (var item in dynamicobj.Keys)
                     {
diff --git a/Kooboo.Sites/Scripting/Global/RelationalDatabase/RelationalDynamicTableObject.cs b/Kooboo.Sites/Scripting/Global/RelationalDatabase/RelationalDynamicTableObject.cs
index 9f8c6a69..d7957a73 100644
--- a/Kooboo.Sites/Scripting/Global/RelationalDatabase/RelationalDynamicTableObject.cs
+++ b/Kooboo.Sites/Scripting/Global/RelationalDatabase/RelationalDynamicTableObject.cs
@@ -64,7 +64,7 @@ namespace Kooboo.Sites.Scripting.Global.RelationalDatabase
             }
 
 
-            if (relation != null && relation.To != null && _table.Name != null && obj.ContainsKey(relation.To))
+            if (relation?.To != null && _table.Name != null && obj.ContainsKey(relation.To))
             {
                 var data = _table.Database.SqlExecuter.QueryData(relation.TableA, $"{relation.From} == {obj[relation.To]}").Take(999);
                 return CreateList(data.Select(s => s as IDictionary<string, object>).ToArray(), _table.Database.GetTable(relation.TableA) as RelationalTable<TExecuter, TSchema, TConnection>);
diff --git a/Kooboo.Sites/Scripting/Global/RelationalDatabase/RelationalSchema.cs b/Kooboo.Sites/Scripting/Global/RelationalDatabase/RelationalSchema.cs
index e34f8fee..b3362979 100644
--- a/Kooboo.Sites/Scripting/Global/RelationalDatabase/RelationalSchema.cs
+++ b/Kooboo.Sites/Scripting/Global/RelationalDatabase/RelationalSchema.cs
@@ -24,7 +24,7 @@ namespace Kooboo.Sites.Scripting.Global.RelationalDatabase
 
         public string PrimaryKey => Items.FirstOrDefault(f => f.IsPrimaryKey)?.Name;
 
-        public bool Created => _items.Count() > 0;
+        public bool Created => _items.Any();
 
         public RelationalSchema(IDictionary<string, object> keyValuePairs)
         {
diff --git a/Kooboo.Sites/Scripting/Global/RelationalDatabase/RelationalTable.cs b/Kooboo.Sites/Scripting/Global/RelationalDatabase/RelationalTable.cs
index 8922057a..cc95c5ed 100644
--- a/Kooboo.Sites/Scripting/Global/RelationalDatabase/RelationalTable.cs
+++ b/Kooboo.Sites/Scripting/Global/RelationalDatabase/RelationalTable.cs
@@ -29,7 +29,7 @@ namespace Kooboo.Sites.Scripting.Global.RelationalDatabase
             {
                 var newItems = GetNewSchemaItems(value);
 
-                if (newItems.Count() > 0)
+                if (newItems.Any())
                 {
                     _schema.AddItems(newItems);
                     Database.SqlExecuter.UpgradeSchema(Name, newItems);
diff --git a/Kooboo.Sites/Scripting/Global/SiteItem/MultilingualRepository.cs b/Kooboo.Sites/Scripting/Global/SiteItem/MultilingualRepository.cs
index 592418e2..2b3085ff 100644
--- a/Kooboo.Sites/Scripting/Global/SiteItem/MultilingualRepository.cs
+++ b/Kooboo.Sites/Scripting/Global/SiteItem/MultilingualRepository.cs
@@ -31,8 +31,7 @@ namespace KScript.Sites
             List<MultilingualObject> result = new List<MultilingualObject>();
             foreach (var item in this.repo.All())
             {
-                var siteobjct = item as Kooboo.Sites.Contents.Models.MultipleLanguageObject;
-                if (siteobjct != null)
+                if (item is Kooboo.Sites.Contents.Models.MultipleLanguageObject siteobjct)
                 {
                     var model = new MultilingualObject(siteobjct, this.context);
                     result.Add(model);
@@ -44,7 +43,7 @@ namespace KScript.Sites
         public virtual MultilingualObject Get(object nameOrId)
         {
             var item = this.repo.GetByNameOrId(nameOrId.ToString());
-            if (item != null && item is Kooboo.Sites.Contents.Models.MultipleLanguageObject)
+            if (item is Kooboo.Sites.Contents.Models.MultipleLanguageObject)
             {
                 return new MultilingualObject(item as Kooboo.Sites.Contents.Models.MultipleLanguageObject, this.context);
             }
@@ -105,8 +104,7 @@ namespace KScript.Sites
             }
             else
             {
-                var oldmul = old as Kooboo.Sites.Contents.Models.MultipleLanguageObject; 
-                if (oldmul!=null)
+                if (old is Kooboo.Sites.Contents.Models.MultipleLanguageObject oldmul)
                 {
                     oldmul.SetValue(this.context.Culture, value);
                     this.repo.AddOrUpdate(oldmul);
@@ -130,8 +128,7 @@ namespace KScript.Sites
             }
             else
             {
-                var oldmul = old as Kooboo.Sites.Contents.Models.MultipleLanguageObject;
-                if (oldmul != null)
+                if (old is Kooboo.Sites.Contents.Models.MultipleLanguageObject oldmul)
                 {
                     oldmul.SetValue(culture, value);
                     this.repo.AddOrUpdate(oldmul);
@@ -198,9 +195,7 @@ namespace KScript.Sites
         {
             Dictionary<string, object> data = new Dictionary<string, object>(StringComparer.OrdinalIgnoreCase);
 
-            System.Collections.IDictionary idict = dataobj as System.Collections.IDictionary;
-
-            if (idict != null)
+            if (dataobj is System.Collections.IDictionary idict)
             {
                 foreach (var item in idict.Keys)
                 {
@@ -213,8 +208,7 @@ namespace KScript.Sites
             }
             else
             {
-                var dynamicobj = dataobj as IDictionary<string, object>;
-                if (dynamicobj != null)
+                if (dataobj is IDictionary<string, object> dynamicobj)
                 {
                     foreach (var item in dynamicobj.Keys)
                     {
diff --git a/Kooboo.Sites/Scripting/Global/SiteItem/RepositoryBase.cs b/Kooboo.Sites/Scripting/Global/SiteItem/RepositoryBase.cs
index 53f91886..8021873b 100644
--- a/Kooboo.Sites/Scripting/Global/SiteItem/RepositoryBase.cs
+++ b/Kooboo.Sites/Scripting/Global/SiteItem/RepositoryBase.cs
@@ -38,8 +38,7 @@ var allStyles = k.site.styles.all(); ")]
             List<SiteObject> result = new List<SiteObject>();
             foreach (var item in this.repo.All())
             {
-                var siteobjct = item as SiteObject;
-                if (siteobjct != null)
+                if (item is SiteObject siteobjct)
                 {
                     result.Add(siteobjct);
                 }
diff --git a/Kooboo.Sites/Scripting/Global/SiteItem/RoutableTextRepository.cs b/Kooboo.Sites/Scripting/Global/SiteItem/RoutableTextRepository.cs
index 1bc6ddc9..ab0c2f3f 100644
--- a/Kooboo.Sites/Scripting/Global/SiteItem/RoutableTextRepository.cs
+++ b/Kooboo.Sites/Scripting/Global/SiteItem/RoutableTextRepository.cs
@@ -50,9 +50,7 @@ namespace KScript.Sites
             var siteobject = Kooboo.Lib.Reflection.TypeHelper.ToObject(data, this.repo.ModelType);
             if (siteobject != null)
             {
-                var routeobject = siteobject as Kooboo.Sites.Models.SiteObject;
-
-                if (routeobject != null)
+                if (siteobject is Kooboo.Sites.Models.SiteObject routeobject)
                 {
                     if (string.IsNullOrEmpty(url))
                     {
@@ -86,9 +84,7 @@ namespace KScript.Sites
         [KIgnore]
         public string getObjectUrl(object siteobj)
         {
-            var siteobject = siteobj as SiteObject;
-
-            if (siteobject != null)
+            if (siteobj is SiteObject siteobject)
             {
                 return getUrl(siteobject.Id.ToString());
             }
diff --git a/Kooboo.Sites/Scripting/Global/SiteItem/TextContentRepository.cs b/Kooboo.Sites/Scripting/Global/SiteItem/TextContentRepository.cs
index 808229ce..51ad80b7 100644
--- a/Kooboo.Sites/Scripting/Global/SiteItem/TextContentRepository.cs
+++ b/Kooboo.Sites/Scripting/Global/SiteItem/TextContentRepository.cs
@@ -477,7 +477,7 @@ var item = k.site.textContents.get(""titletwo"");")]
         {
             // todo: improve the performance.
             var all = FindAll(query);
-            if (all != null && all.Count() > 0)
+            if (all != null && all.Any())
             {
                 return all.First();
             }
diff --git a/Kooboo.Sites/Scripting/Global/kHelper.cs b/Kooboo.Sites/Scripting/Global/kHelper.cs
index 3275f813..64f5829a 100644
--- a/Kooboo.Sites/Scripting/Global/kHelper.cs
+++ b/Kooboo.Sites/Scripting/Global/kHelper.cs
@@ -44,9 +44,7 @@ namespace Kooboo.Sites.Scripting.Global
         {
             Dictionary<string, object> data = new Dictionary<string, object>(StringComparer.OrdinalIgnoreCase);
 
-            System.Collections.IDictionary idict = dataobj as System.Collections.IDictionary;
-
-            if (idict != null)
+            if (dataobj is System.Collections.IDictionary idict)
             {
                 foreach (var item in idict.Keys)
                 {
@@ -59,8 +57,7 @@ namespace Kooboo.Sites.Scripting.Global
             }
             else
             {
-                var dynamicobj = dataobj as IDictionary<string, object>;
-                if (dynamicobj != null)
+                if (dataobj is IDictionary<string, object> dynamicobj)
                 {
                     foreach (var item in dynamicobj.Keys)
                     {
diff --git a/Kooboo.Sites/Scripting/Helper/DocumentHelper.cs b/Kooboo.Sites/Scripting/Helper/DocumentHelper.cs
index 5dddefdc..313b1d19 100644
--- a/Kooboo.Sites/Scripting/Helper/DocumentHelper.cs
+++ b/Kooboo.Sites/Scripting/Helper/DocumentHelper.cs
@@ -25,12 +25,12 @@ namespace Kooboo.Sites.Scripting.Helper
         }
         public static string GetMethodUrl(string name, string method, string param)
         {
-            return string.Format("?name={0}&method={1}&param={2}", name, method, param);
+            return $"?name={name}&method={method}&param={param}";
         }
 
         public static string GetViewUrl(string name)
         {
-            return string.Format("?kview={0}", name);
+            return $"?kview={name}";
         }
     }
 }
diff --git a/Kooboo.Sites/Scripting/Helper/ScriptHelper/ScriptHelperRender.cs b/Kooboo.Sites/Scripting/Helper/ScriptHelper/ScriptHelperRender.cs
index 6e309261..bc087fdf 100644
--- a/Kooboo.Sites/Scripting/Helper/ScriptHelper/ScriptHelperRender.cs
+++ b/Kooboo.Sites/Scripting/Helper/ScriptHelper/ScriptHelperRender.cs
@@ -67,7 +67,7 @@ namespace Kooboo.Sites.Scripting.Helper.ScriptHelper
                     var type = para.Type;
                     if (para.Type!=null && ScriptHelperReader.Settings.ContainsKey(para.Type.ToLower()))
                     {
-                        type = string.Format("<a href='{1}'>{0}</a>", para.Type,DocumentHelper.GetTypeUrl(para.Type));
+                        type = $"<a href='{para.Type}'>{DocumentHelper.GetTypeUrl(para.Type)}</a>";
                     }
                     builder.AppendFormat("<tr><td>{0}</td><td>{1}</td><td>{2}</td></tr>", DocumentHelper.LowerCaseFirstChar(para.Name), type, para.Description);
                 }
@@ -112,12 +112,12 @@ namespace Kooboo.Sites.Scripting.Helper.ScriptHelper
                     {
                         var url = DocumentHelper.GetTypeUrl(prop.Type);
 
-                        var type = string.Format("<a href='{0}'>{1}</a>", url, GetTypeName(prop.Type));
-                        propStr = string.Format("<tr><td>{0}</td><td>{1}</td><td>{2}</td></tr>", DocumentHelper.LowerCaseFirstChar(prop.Name), type, prop.Description);
+                        var type = $"<a href='{url}'>{GetTypeName(prop.Type)}</a>";
+                        propStr = $"<tr><td>{DocumentHelper.LowerCaseFirstChar(prop.Name)}</td><td>{type}</td><td>{prop.Description}</td></tr>";
                     }
                     else
                     {
-                        propStr = string.Format("<tr><td>{0}</td><td>{1}</td><td>{2}</td></tr>", DocumentHelper.LowerCaseFirstChar(prop.Name),prop.Type, prop.Description);
+                        propStr = $"<tr><td>{DocumentHelper.LowerCaseFirstChar(prop.Name)}</td><td>{prop.Type}</td><td>{prop.Description}</td></tr>";
                     }
                    
                     builder.Append(propStr);
@@ -141,17 +141,17 @@ namespace Kooboo.Sites.Scripting.Helper.ScriptHelper
                     }
                     //method rul
                     var url = baseUrl+ DocumentHelper.GetMethodUrl(name, method.Name, paramBuilder.ToString());
-                    var methodWithParam = string.Format("<a href='{0}'>{1}</a>", url, GetMethodWithParams(method));
+                    var methodWithParam = $"<a href='{url}'>{GetMethodWithParams(method)}</a>";
 
                     //return type url
                     var type = method.ReturnType;
                     if (method.ReturnType!=null && ScriptHelperReader.Settings.ContainsKey(method.ReturnType.ToLower()))
                     {
                         var returnTypeUrl = baseUrl + DocumentHelper.GetTypeUrl(method.ReturnType);
-                        type=string.Format("<a href='{0}'>{1}</a>", returnTypeUrl, GetTypeName(method.ReturnType));
+                        type=$"<a href='{returnTypeUrl}'>{GetTypeName(method.ReturnType)}</a>";
                     }
 
-                    var str = string.Format("<tr><td>{0}</td><td>{1}</td><td>{2}</td><td></tr>", methodWithParam, type, method.Description);
+                    var str = $"<tr><td>{methodWithParam}</td><td>{type}</td><td>{method.Description}</td><td></tr>";
                     builder.Append(str);
                 }
                 builder.Append("</tbody></table>");
@@ -172,10 +172,10 @@ namespace Kooboo.Sites.Scripting.Helper.ScriptHelper
                     {
                         builder.Append(",");
                     }
-                    builder.Append(string.Format("{0} {1}", para.Type, para.Name));
+                    builder.Append($"{para.Type} {para.Name}");
                 }
             }
-            return string.Format("{0}({1})", DocumentHelper.LowerCaseFirstChar(method.Name), builder.ToString());
+            return $"{DocumentHelper.LowerCaseFirstChar(method.Name)}({builder.ToString()})";
         }
 
         private string GetTypeName(string type)
diff --git a/Kooboo.Sites/Scripting/Helper/ViewHelp/ViewHelpRender.cs b/Kooboo.Sites/Scripting/Helper/ViewHelp/ViewHelpRender.cs
index b34abfdf..54a07405 100644
--- a/Kooboo.Sites/Scripting/Helper/ViewHelp/ViewHelpRender.cs
+++ b/Kooboo.Sites/Scripting/Helper/ViewHelp/ViewHelpRender.cs
@@ -52,7 +52,7 @@ namespace Kooboo.Sites.Scripting
             {
                 var node = tree.Nodes[0];
                 var model = node.setting ;
-                return string.Format("{0}?kview={1}", GetBaseurl(context), model.Name);
+                return $"{GetBaseurl(context)}?kview={model.Name}";
             }
             return string.Empty;
         }
diff --git a/Kooboo.Sites/Scripting/KscriptConfig/KscriptConfigContainer.cs b/Kooboo.Sites/Scripting/KscriptConfig/KscriptConfigContainer.cs
index bf8f8df9..78e0ca82 100644
--- a/Kooboo.Sites/Scripting/KscriptConfig/KscriptConfigContainer.cs
+++ b/Kooboo.Sites/Scripting/KscriptConfig/KscriptConfigContainer.cs
@@ -101,7 +101,7 @@ namespace KScript.KscriptConfig
                                     foreach (var type in kscriptTypes)
                                     {
                                         var name = string.IsNullOrEmpty(item.Name) ? type.Name : item.Name;
-                                        var fullname = string.Format("{0}.{1}", item.NameSpace, name);
+                                        var fullname = $"{item.NameSpace}.{name}";
                                         NamespaceTypeDic[fullname] = type;
                                     }
                                 }
@@ -305,17 +305,14 @@ namespace KScript.KscriptConfig
                     //set kscript context
                     var properties = type.GetProperties().ToList();
                     var datacontextProperty = properties.Find(p => p.PropertyType == KscriptConfigContainer.KscriptContextType || p.PropertyType.FullName == KscriptConfigContainer.KscriptContextType.FullName);
-                    if (datacontextProperty != null)
-                    {
-                        datacontextProperty.SetValue(instance, GetOrCreateContext(rendercontext, datacontextProperty.PropertyType));
-                    }
+                    datacontextProperty?.SetValue(instance, GetOrCreateContext(rendercontext, datacontextProperty.PropertyType));
                 }
 
                 Types[parts[0]] = instance;
             }
             else
             {
-                startNS = string.Format("{0}.{1}", startNS, parts[0]);
+                startNS = $"{startNS}.{parts[0]}";
                 var kScriptConfigType = new KScriptConfigType(startNS, rendercontext, kscriptContext);
                 Types[parts[0]] = kScriptConfigType;
             }
diff --git a/Kooboo.Sites/Scripting/Manager.cs b/Kooboo.Sites/Scripting/Manager.cs
index 184cda7b..3eadf5dd 100644
--- a/Kooboo.Sites/Scripting/Manager.cs
+++ b/Kooboo.Sites/Scripting/Manager.cs
@@ -119,7 +119,7 @@ namespace Kooboo.Sites.Scripting
                 Kooboo.Data.Log.Instance.Exception.WriteException(ex);
             }
 
-            if (kcontext.ReturnValues.Count() > 0)
+            if (kcontext.ReturnValues.Any())
             {
                 return kcontext.ReturnValues.Last();
             }
@@ -135,8 +135,7 @@ namespace Kooboo.Sites.Scripting
             var returnitem = engine.GetCompletionValue();
             if (returnitem != null && !returnitem.IsNull())
             {
-                var jsvalue = returnitem as JsValue;
-                if (jsvalue != null)
+                if (returnitem is JsValue jsvalue)
                 {
                     if (jsvalue.Type == Types.Object)
                     {
@@ -159,7 +158,7 @@ namespace Kooboo.Sites.Scripting
             {
                 var items = ((IEnumerable)config).Cast<object>().ToList();
 
-                if (items != null && items.Count() > 0)
+                if (items != null && items.Any())
                 {
                     foreach (var item in items)
                     {
@@ -197,10 +196,7 @@ namespace Kooboo.Sites.Scripting
 
                         if (setting.ControlType == Data.ControlType.Selection && SelectionValues != null)
                         {
-
-                            var selections = SelectionValues as IDictionary<string, object>;
-
-                            if (selections != null)
+                            if (SelectionValues is IDictionary<string, object> selections)
                             {
                                 if (setting.SelectionValues == null)
                                 {
@@ -423,7 +419,7 @@ namespace Kooboo.Sites.Scripting
         private static Dictionary<string, object> GetLocalVariables(LexicalEnvironment lex)
         {
             Dictionary<string, object> locals = new Dictionary<string, object>();
-            if (lex != null && lex.Record != null)
+            if (lex?.Record != null)
             {
                 AddRecordsFromEnvironment(lex, locals);
             }
@@ -435,7 +431,7 @@ namespace Kooboo.Sites.Scripting
             Dictionary<string, object> globals = new Dictionary<string, object>();
             LexicalEnvironment tempLex = lex;
 
-            while (tempLex != null && tempLex.Record != null)
+            while (tempLex?.Record != null)
             {
                 AddRecordsFromEnvironment(tempLex, globals);
                 tempLex = tempLex.Outer;
@@ -494,8 +490,7 @@ namespace Kooboo.Sites.Scripting
             {
                 if (value is JsValue)
                 {
-                    var jsvalue = value as JsValue;
-                    if (jsvalue != null)
+                    if (value is JsValue jsvalue)
                     {
                         var jsobject = jsvalue.ToObject();
                         if (jsobject != null && (jsobject.GetType().IsValueType || jsobject.GetType() == typeof(string)))
@@ -520,7 +515,7 @@ namespace Kooboo.Sites.Scripting
                         {
                             builder.Append(",");
                         }
-                        builder.Append(string.Format("\"{0}\"", GetPropValue(item.GetType(), item)));
+                        builder.Append($"\"{GetPropValue(item.GetType(), item)}\"");
                     }
                     builder.Insert(0, "[");
                     builder.Append("]");
@@ -579,9 +574,7 @@ namespace Kooboo.Sites.Scripting
             }
             else if (obj is Jint.Native.JsValue)
             {
-                var value = obj as Jint.Native.JsValue;
-
-                if (value != null)
+                if (obj is Jint.Native.JsValue value)
                 {
                     var jsObject = value.ToObject();
                     return GetDynamicMembers(jsObject);
@@ -649,7 +642,7 @@ namespace Kooboo.Sites.Scripting
                 if (IsArray(returnType))
                 {
                     int arrayCount = GetArrayCount(returnType, propValue);
-                    value = string.Format("Array({0})", arrayCount);
+                    value = $"Array({arrayCount})";
                 }
                 else if ((returnType.IsClass && returnType != typeof(string)) ||
                     TypeHelper.IsDictionary(returnType))
@@ -708,9 +701,7 @@ namespace Kooboo.Sites.Scripting
 
             else if (obj is Jint.Native.JsValue)
             {
-                var value = obj as Jint.Native.JsValue;
-
-                if (value != null)
+                if (obj is Jint.Native.JsValue value)
                 {
                     var jsObject = value.ToObject();
                     if (jsObject != null)
diff --git a/Kooboo.Sites/Scripting/ScriptHelper.cs b/Kooboo.Sites/Scripting/ScriptHelper.cs
index 1f7f32c0..3f011cef 100644
--- a/Kooboo.Sites/Scripting/ScriptHelper.cs
+++ b/Kooboo.Sites/Scripting/ScriptHelper.cs
@@ -27,7 +27,7 @@ namespace Kooboo.Sites.Scripting
                     if (!string.IsNullOrEmpty(item.id))
                     {
                         var code = sitedb.Code.Get(item.id);
-                        if (code != null && code.Parameters !=null)
+                        if (code?.Parameters != null)
                         {
                             foreach (var p in code.Parameters)
                             {
diff --git a/Kooboo.Sites/Scripting/k.cs b/Kooboo.Sites/Scripting/k.cs
index a371a666..dc1dcd56 100644
--- a/Kooboo.Sites/Scripting/k.cs
+++ b/Kooboo.Sites/Scripting/k.cs
@@ -836,7 +836,7 @@ var value = k.session.key; ")]
 
         private string print(List<PropertyViewModel> input, string baseurl)
         {
-            if (input == null || input.Count() == 0)
+            if (input == null || !input.Any())
             {
                 return string.Empty;
             }
@@ -876,7 +876,7 @@ var value = k.session.key; ")]
 
         private string print(List<MethodViewModel> input)
         {
-            if (input == null || input.Count() == 0)
+            if (input == null || !input.Any())
             {
                 return string.Empty;
             }
@@ -1012,7 +1012,7 @@ var value = k.session.key; ")]
             foreach (var methodname in takeMethods)
             {
                 var finds = allmethods.FindAll(o => o.Name == methodname);
-                if (finds == null || finds.Count() == 0)
+                if (finds == null || !finds.Any())
                 {
                     continue;
                 }
diff --git a/Kooboo.Sites/Service/CoreSettingService.cs b/Kooboo.Sites/Service/CoreSettingService.cs
index b4753e44..4127eba7 100644
--- a/Kooboo.Sites/Service/CoreSettingService.cs
+++ b/Kooboo.Sites/Service/CoreSettingService.cs
@@ -124,7 +124,7 @@ namespace Kooboo.Sites.Service
 
             var result = Activator.CreateInstance<T>();
 
-            if (coresetting != null && coresetting.Values != null && coresetting.Values.Any())
+            if (coresetting?.Values != null && coresetting.Values.Any())
             {
                 var properties = type.GetProperties().ToList();
                 var fields = type.GetFields().ToList();
@@ -169,7 +169,7 @@ namespace Kooboo.Sites.Service
 
             var result = Activator.CreateInstance(SettingType);
 
-            if (coresetting != null && coresetting.Values != null && coresetting.Values.Any())
+            if (coresetting?.Values != null && coresetting.Values.Any())
             {
                 var properties = SettingType.GetProperties().ToList();
                 var fields = SettingType.GetFields().ToList();
diff --git a/Kooboo.Sites/Service/CssService.cs b/Kooboo.Sites/Service/CssService.cs
index 1671fe95..4027e41d 100644
--- a/Kooboo.Sites/Service/CssService.cs
+++ b/Kooboo.Sites/Service/CssService.cs
@@ -188,8 +188,7 @@ namespace Kooboo.Sites.Service
             var cssrule = Dom.CSSParser.ParseOneCssRule(rule.CssText); 
             if (cssrule !=null)
             {
-                var stylerule = cssrule as CSSStyleRule; 
-                if (stylerule !=null)
+                if (cssrule is CSSStyleRule stylerule)
                 {
                     return stylerule.style; 
                 }
@@ -339,7 +338,7 @@ namespace Kooboo.Sites.Service
                 {
                     var mediarule = item as Kooboo.Dom.CSS.CSSMediaRule;
                     var sub = ConvertCss(mediarule.cssRules, ParentStyleId, cmsrule.Id); 
-                    if (sub !=null && sub.Count() >0)
+                    if (sub != null && sub.Any())
                     {
                         Result.AddRange(sub); 
                     }
diff --git a/Kooboo.Sites/Service/DomService.cs b/Kooboo.Sites/Service/DomService.cs
index 498c2082..e929f7ea 100644
--- a/Kooboo.Sites/Service/DomService.cs
+++ b/Kooboo.Sites/Service/DomService.cs
@@ -33,8 +33,7 @@ namespace Kooboo.Sites.Service
             {
                 string koobooid = GetKoobooId(nextNode);
 
-                var element = nextNode as Element;
-                if (element != null && element.location.openTokenEndIndex > 0)
+                if (nextNode is Element element && element.location.openTokenEndIndex > 0)
                 {
                     int openTokenEndIndex = nextNode.location.openTokenEndIndex;
                     if (IsSelfCloseTag(element.tagName) && element.ownerDocument.HtmlSource[openTokenEndIndex - 1] == '/')
@@ -266,7 +265,7 @@ namespace Kooboo.Sites.Service
                         Dictionary<string, string> attr = new Dictionary<string, string>();
                         foreach (var item in element.attributes)
                         {
-                            if (item != null && item.name != null)
+                            if (item?.name != null)
                             {
                                 attr.Add(item.name, item.value);
                             } 
@@ -841,8 +840,8 @@ namespace Kooboo.Sites.Service
 
             ychain.Reverse();
 
-            int xcount = xchain.Count();
-            int ycount = ychain.Count();
+            int xcount = xchain.Count;
+            int ycount = ychain.Count;
             int count = xcount;
             if (count < ycount)
             {
@@ -1171,7 +1170,7 @@ namespace Kooboo.Sites.Service
                 updates.Add(new SourceUpdate() { StartIndex = item.location.openTokenEndIndex + 1, EndIndex = item.location.endTokenStartIndex - 1, NewValue = newvalue });
             }
 
-            if (updates.Count() > 0)
+            if (updates.Any())
             {
                 return UpdateSource(Source, updates);
             }
@@ -1230,10 +1229,10 @@ namespace Kooboo.Sites.Service
                         {
                             List<string> files = Lib.Helper.JsonHelper.Deserialize<List<string>>(value);
 
-                            if (files != null && files.Count() > 0)
+                            if (files != null && files.Any())
                             {
                                 List<int> removeindex = new List<int>();
-                                int count = files.Count();
+                                int count = files.Count;
                                 for (int i = 0; i < count; i++)
                                 {
                                     var file = files[i];
@@ -1244,7 +1243,7 @@ namespace Kooboo.Sites.Service
                                     }
                                 }
 
-                                if (removeindex.Count() > 0)
+                                if (removeindex.Any())
                                 {
                                     foreach (var remove in removeindex.OrderByDescending(o => o))
                                     {
@@ -1265,7 +1264,7 @@ namespace Kooboo.Sites.Service
                 }
             }
 
-            if (updates.Count() > 0)
+            if (updates.Any())
             {
                 return UpdateSource(Source, updates);
             }
@@ -1339,8 +1338,7 @@ namespace Kooboo.Sites.Service
                 int count = 0;
                 foreach (var item in parent.childNodes.item)
                 {
-                    var itemel = item as Element;
-                    if (itemel != null)
+                    if (item is Element itemel)
                     {
                         if (itemel.isEqualNode(el))
                         {
@@ -1364,7 +1362,7 @@ namespace Kooboo.Sites.Service
         {
             var el = doc.body;
             int index = 0;
-            int pathcount = Paths.Count();
+            int pathcount = Paths.Count;
 
             if (pathcount == 0)
             {
@@ -1389,8 +1387,7 @@ namespace Kooboo.Sites.Service
                     var deeperkey = Paths[index + 1]; 
                     foreach (var item in el.childNodes.item)
                     {
-                        var itemel = item as Element; 
-                        if (itemel !=null)
+                        if (item is Element itemel)
                         {
                             var itemkey = _GetElementKey(itemel); 
                             if (itemkey == deeperkey)
diff --git a/Kooboo.Sites/Service/DomUrlService.cs b/Kooboo.Sites/Service/DomUrlService.cs
index 2ee29fc6..91bfa7e8 100644
--- a/Kooboo.Sites/Service/DomUrlService.cs
+++ b/Kooboo.Sites/Service/DomUrlService.cs
@@ -306,7 +306,7 @@ namespace Kooboo.Sites.Service
 
             foreach (var item in imagetag.attributes)
             {
-                if (item != null && item.name != null)
+                if (item?.name != null)
                 {
                     string name = item.name.Trim().ToLower();
                     if (name != "src" && name.Contains("src"))
diff --git a/Kooboo.Sites/Service/FontService.cs b/Kooboo.Sites/Service/FontService.cs
index 3514f61c..4bc2a820 100644
--- a/Kooboo.Sites/Service/FontService.cs
+++ b/Kooboo.Sites/Service/FontService.cs
@@ -102,7 +102,7 @@ namespace Kooboo.Sites.Service
             string token = tokenizer.ConsumeNextTrim();
 
             var trylist = TryList;
-            int count = trylist.Count();
+            int count = trylist.Count;
 
             for (int i = 0; i < count; i++)
             {
@@ -354,7 +354,7 @@ namespace Kooboo.Sites.Service.Font
         {
             get
             {
-                if (string.IsNullOrEmpty(_fontfamily) && this.FontFamilyList != null && this.FontFamilyList.Count() > 0)
+                if (string.IsNullOrEmpty(_fontfamily) && this.FontFamilyList != null && this.FontFamilyList.Any())
                 {
                     _fontfamily = string.Join(",", this.FontFamilyList.ToArray());
                 }
@@ -443,7 +443,7 @@ namespace Kooboo.Sites.Service.Font
 
                 if (currentchar == '\'' || currentchar == '"')
                 {
-                    if (_buffer.Count() > 0)
+                    if (_buffer.Any())
                     {
                         string value = new string(_buffer.ToArray());
                         _buffer.Clear();
@@ -477,7 +477,7 @@ namespace Kooboo.Sites.Service.Font
                 else if (CharHelper.isSpaceCharacters(currentchar) || currentchar == ',')
                 {
                     this.index = i + 1;
-                    if (_buffer.Count() > 0)
+                    if (_buffer.Any())
                     {
                         string output = new string(_buffer.ToArray());
                         _buffer.Clear();
@@ -494,7 +494,7 @@ namespace Kooboo.Sites.Service.Font
                 }
             }
             this.IsEof = true;
-            if (_buffer.Count() > 0)
+            if (_buffer.Any())
             {
                 return new string(_buffer.ToArray());
             }
diff --git a/Kooboo.Sites/Service/HtmlHeadService.cs b/Kooboo.Sites/Service/HtmlHeadService.cs
index c920442c..b8526e6a 100644
--- a/Kooboo.Sites/Service/HtmlHeadService.cs
+++ b/Kooboo.Sites/Service/HtmlHeadService.cs
@@ -48,7 +48,7 @@ namespace Kooboo.Sites.Service
             if (DomService.HasHeadTag(dom))
             {
                 var TagBase = dom.head.getElementsByTagName("base");
-                if(TagBase != null && TagBase.item.Count()>0)
+                if(TagBase != null && TagBase.item.Any())
                 {
                     var tagElement = TagBase.item[0];
                     string currentbase = tagElement.getAttribute("href"); 
@@ -93,7 +93,7 @@ namespace Kooboo.Sites.Service
                     updates.Add(update); 
                 }
             }
-            if (updates.Count() > 0)
+            if (updates.Any())
             {
                 return Service.DomService.UpdateSource(htmlsource, updates);
             }
@@ -241,7 +241,7 @@ namespace Kooboo.Sites.Service
 
                 string metatag = GenerateMetaTag(item, checkresult.ContentValue);
 
-                if (sametags != null && sametags.Count() > 0)
+                if (sametags != null && sametags.Any())
                 {
                     var tag = sametags[0];
                     if (!IsSameMeta(tag, item, checkresult.ContentValue))
@@ -249,9 +249,9 @@ namespace Kooboo.Sites.Service
                         updates.Add(new SourceUpdate() { StartIndex = tag.location.openTokenStartIndex, EndIndex = tag.location.endTokenEndIndex, NewValue = metatag });
                     }
 
-                    if (sametags.Count() > 1)
+                    if (sametags.Count > 1)
                     {
-                        int len = sametags.Count();
+                        int len = sametags.Count;
                         for (int i = 1; i < len; i++)
                         {
                             updates.Add(new SourceUpdate() { StartIndex = sametags[i].location.openTokenStartIndex, EndIndex = sametags[i].location.endTokenEndIndex, NewValue = null });
@@ -368,7 +368,7 @@ namespace Kooboo.Sites.Service
         {
             MetaContentkResult result = new MetaContentkResult();
             result.ShouldAppendToDom = true;
-            if (meta.content.Count() == 0)
+            if (!meta.content.Any())
             {    
                 return result;
             }
diff --git a/Kooboo.Sites/Service/LogService.cs b/Kooboo.Sites/Service/LogService.cs
index dcd0b7c6..31f3b6a7 100644
--- a/Kooboo.Sites/Service/LogService.cs
+++ b/Kooboo.Sites/Service/LogService.cs
@@ -34,10 +34,7 @@ namespace Kooboo.Sites.Service
             else
             {
                 var repo = SiteDb.GetRepository(logentry.StoreName);
-                if (repo != null)
-                {
-                    repo.RollBack(logentry);
-                }
+                repo?.RollBack(logentry);
             }
         }
 
@@ -136,10 +133,7 @@ namespace Kooboo.Sites.Service
 
                 var repo = SiteDb.GetRepository(item.Key);
 
-                if (repo != null)
-                {
-                    repo.RollBack(SingleStoreList);
-                }
+                repo?.RollBack(SingleStoreList);
             }
 
             var tables = loglist.Where(o => o.IsTable).ToList();
diff --git a/Kooboo.Sites/Service/MenuService.cs b/Kooboo.Sites/Service/MenuService.cs
index ab7cbb48..e627d0fa 100644
--- a/Kooboo.Sites/Service/MenuService.cs
+++ b/Kooboo.Sites/Service/MenuService.cs
@@ -18,7 +18,7 @@ namespace Kooboo.Sites.Service
         public static RawMenu FindRawMenu(Element element)
         {
             var alllinks = element.getElementsByTagName("a").item;
-            if (alllinks != null && alllinks.Count() > 0)
+            if (alllinks != null && alllinks.Any())
             {
                 var groupby = SimpleGroupBy(alllinks);
 
@@ -73,7 +73,7 @@ namespace Kooboo.Sites.Service
             foreach (var item in ParentMenu.Children)
             {
                 var sublinks = FindSubLinks(item);
-                if (sublinks != null && sublinks.Count() > 0)
+                if (sublinks != null && sublinks.Any())
                 {
                     var itemcontainer = DomService.FindParent(sublinks);
                     AssignSubMenu(sublinks, item);
@@ -85,7 +85,7 @@ namespace Kooboo.Sites.Service
         public static List<Element> FindSubLinks(RawMenu menu)
         {
             var Sublinks = GetDirectSubLinks(menu.LinkElement, menu.ContainerElement);
-            if (Sublinks != null && Sublinks.Count() > 0)
+            if (Sublinks != null && Sublinks.Any())
             {
                 return Sublinks;
             }
@@ -99,7 +99,7 @@ namespace Kooboo.Sites.Service
 
             alllinks.Remove(LinkElement);
 
-            if (alllinks.Count() > 0)
+            if (alllinks.Any())
             {
                 var groupby = GroupBy(alllinks);
                 return groupby[0];
@@ -131,7 +131,7 @@ namespace Kooboo.Sites.Service
                 var NodesInBetween = parent.childNodes.item.Where(o => o.siblingIndex > current.siblingIndex && o.siblingIndex < next.siblingIndex).ToList();
 
                 var alllinks = DomService.GetElementsByTagName(NodesInBetween, "a").item;
-                if (alllinks.Count() > 0)
+                if (alllinks.Any())
                 {
                     var group = GroupBy(alllinks);
                     return group[0];
@@ -146,7 +146,7 @@ namespace Kooboo.Sites.Service
                 var NodesInBetween = parent.childNodes.item.Where(o => o.siblingIndex > CurrentContainer.siblingIndex).ToList();
 
                 var alllinks = DomService.GetElementsByTagName(NodesInBetween, "a").item;
-                if (alllinks.Count() > 0)
+                if (alllinks.Any())
                 {
                     var group = GroupBy(alllinks);
                     return group[0];
@@ -651,7 +651,7 @@ namespace Kooboo.Sites.Service
                     }
                 }
 
-                if (sublinks.Count() > 0)
+                if (sublinks.Any())
                 {
                     int SubGroupStartIndex;
                     int SubGroupEndIndex;
@@ -1122,10 +1122,10 @@ namespace Kooboo.Sites.Service
             } 
             int currentindex = this.ContainerElement.location.openTokenStartIndex;
 
-            if (currentindex >= 0 && this.Parent.Children.Count() > 0)
+            if (currentindex >= 0 && this.Parent.Children.Any())
             {
                 var others = this.Parent.Children.Where(o => o.ContainerElement.location.openTokenStartIndex > currentindex);
-                if (others != null && others.Count() > 0)
+                if (others != null && others.Any())
                 {
                     return others.OrderBy(o => o.ContainerElement.location.openTokenStartIndex).First().ContainerElement;
                 }
diff --git a/Kooboo.Sites/Service/ObjectService.cs b/Kooboo.Sites/Service/ObjectService.cs
index 33b60762..938e6098 100644
--- a/Kooboo.Sites/Service/ObjectService.cs
+++ b/Kooboo.Sites/Service/ObjectService.cs
@@ -43,9 +43,9 @@ namespace Kooboo.Sites.Service
 
         public static long GetSize(ISiteObject siteobject)
         {
-            if (siteobject is IBinaryFile)
+            if (siteobject is IBinaryFile iBinaryFile)
             {
-                return ((IBinaryFile)siteobject).Size;
+                return iBinaryFile.Size;
             }
             else
             {
@@ -74,13 +74,13 @@ namespace Kooboo.Sites.Service
                 info.ModelType = siteobject.GetType();
             }
 
-            if (siteobject is IBinaryFile)
+            if (siteobject is IBinaryFile iBinaryFile)
             {
-                info.Size = ((IBinaryFile)siteobject).Size;
+                info.Size = iBinaryFile.Size;
             }
-            else if (siteobject is ITextObject)
+            else if (siteobject is ITextObject iTextObject)
             {
-                info.Size = (((ITextObject)siteobject).Body ?? "").Length;
+                info.Size = (iTextObject.Body ?? "").Length;
             }
 
 
@@ -133,8 +133,7 @@ namespace Kooboo.Sites.Service
 
                 if (info.ModelType == typeof(DataMethodSetting))
                 {
-                    var datamethod = siteobject as DataMethodSetting;
-                    if (datamethod != null)
+                    if (siteobject is DataMethodSetting datamethod)
                     {
                         info.Name = datamethod.OriginalMethodName;
                         info.DisplayName = datamethod.OriginalMethodName;
diff --git a/Kooboo.Sites/Service/PageService.cs b/Kooboo.Sites/Service/PageService.cs
index 8ff8af16..c0d1e070 100644
--- a/Kooboo.Sites/Service/PageService.cs
+++ b/Kooboo.Sites/Service/PageService.cs
@@ -135,8 +135,7 @@ namespace Kooboo.Sites.Service
 
             foreach (var item in dom.StyleSheets.item)
             {
-                CSSStyleSheet stylesheet = item as CSSStyleSheet;
-                if (stylesheet != null)
+                if (item is CSSStyleSheet stylesheet)
                 {
                     dom.ApplyCssRules(stylesheet.cssRules, "");
                 }
@@ -571,7 +570,7 @@ namespace Kooboo.Sites.Service
             var dom =  DomParser.CreateDom(page.Body);
             var layoutTags = dom.getElementsByTagName("layout");
              
-            if (layoutTags != null && layoutTags.item.Count()>0)
+            if (layoutTags != null && layoutTags.item.Any())
             {
                 var tag = layoutTags.item[0];
                 return tag.id; 
diff --git a/Kooboo.Sites/Service/PathService.cs b/Kooboo.Sites/Service/PathService.cs
index b8f394b2..3b9776d4 100644
--- a/Kooboo.Sites/Service/PathService.cs
+++ b/Kooboo.Sites/Service/PathService.cs
@@ -174,7 +174,7 @@ namespace Kooboo.Sites.Service
                 List<string> indexitem = new List<string>();
                 foreach (var item in AllSegments)
                 {
-                    if (i > item.Count() - 1)
+                    if (i > item.Count - 1)
                     {
                         break;
                     }
@@ -183,7 +183,7 @@ namespace Kooboo.Sites.Service
                         indexitem.Add(item[i]);
                     }
                 }
-                if (indexitem.Count() > 0 && HasSameValue(indexitem))
+                if (indexitem.Any()&& HasSameValue(indexitem))
                 {
                     common.Add(indexitem[0]);
                     i += 1;
diff --git a/Kooboo.Sites/Service/VisitorLogService.cs b/Kooboo.Sites/Service/VisitorLogService.cs
index 1b862d03..947f21b9 100644
--- a/Kooboo.Sites/Service/VisitorLogService.cs
+++ b/Kooboo.Sites/Service/VisitorLogService.cs
@@ -15,7 +15,7 @@ namespace Kooboo.Sites.Service
         {
             var logs = GetLogs(sitedb, weekname);
             SiteVisitorOverview model = new SiteVisitorOverview();
-            model.Total = logs.Count();
+            model.Total = logs.Count;
             model.Ips = logs.GroupBy(o => o.ClientIP).Count();
             model.Pages = logs.GroupBy(o => o.ObjectId).Count();
             model.AvgSize = (int)logs.Average(o => o.Size);
diff --git a/Kooboo.Sites/Service/WebSiteService.cs b/Kooboo.Sites/Service/WebSiteService.cs
index cf2e11eb..1bea3065 100644
--- a/Kooboo.Sites/Service/WebSiteService.cs
+++ b/Kooboo.Sites/Service/WebSiteService.cs
@@ -93,7 +93,7 @@ namespace Kooboo.Sites.Service
             {
                 foreach (var langcontent in item.Contents)
                 {
-                    if (langcontent != null && langcontent.Lang != null)
+                    if (langcontent?.Lang != null)
                     {
                         cultures.Add(langcontent.Lang);
                     }
@@ -134,7 +134,7 @@ namespace Kooboo.Sites.Service
                 }
             }
 
-            if (contentcounter.Count() > 0)
+            if (contentcounter.Any())
             {
                 var keyvalue = contentcounter.OrderByDescending(o => o.Value).First();
                 return keyvalue.Key;
diff --git a/Kooboo.Sites/SiteTransfer/Analyzer/AnalyzerManager.cs b/Kooboo.Sites/SiteTransfer/Analyzer/AnalyzerManager.cs
index 608866bf..a6aefbb1 100644
--- a/Kooboo.Sites/SiteTransfer/Analyzer/AnalyzerManager.cs
+++ b/Kooboo.Sites/SiteTransfer/Analyzer/AnalyzerManager.cs
@@ -104,7 +104,7 @@ namespace Kooboo.Sites.SiteTransfer
             }
             string returnresult =  sb.ToString() + result;
 
-            if(replace.Count()>0)
+            if(replace.Any())
             {
                 foreach (var item in replace.GroupBy(o=>o.WholeString))
                 {
diff --git a/Kooboo.Sites/SiteTransfer/Analyzer/InlineAnalyzer.cs b/Kooboo.Sites/SiteTransfer/Analyzer/InlineAnalyzer.cs
index 38752d97..9b7adc27 100644
--- a/Kooboo.Sites/SiteTransfer/Analyzer/InlineAnalyzer.cs
+++ b/Kooboo.Sites/SiteTransfer/Analyzer/InlineAnalyzer.cs
@@ -21,7 +21,7 @@ namespace Kooboo.Sites.SiteTransfer
                 var linkreplace = ReplaceLinks(item, Context); 
                 var cssreplace = ReplaceInlineCssUrl(item, Context); 
 
-                if (linkreplace !=null && linkreplace.Count()>0)
+                if (linkreplace != null && linkreplace.Any())
                 {
                     foreach (var linkrep in linkreplace)
                     {
@@ -29,7 +29,7 @@ namespace Kooboo.Sites.SiteTransfer
                     }
                 }
 
-                if (cssreplace != null && cssreplace.Count()>0)
+                if (cssreplace != null && cssreplace.Any())
                 {
                     foreach (var cssrep in cssreplace)
                     {
@@ -37,7 +37,7 @@ namespace Kooboo.Sites.SiteTransfer
                     }
                 }
 
-                if (replace.Count()>0)
+                if (replace.Any())
                 {
                     string oldstring = Kooboo.Sites.Service.DomService.GetOpenTag(item); 
                     string newstring = oldstring;
@@ -60,14 +60,14 @@ namespace Kooboo.Sites.SiteTransfer
 
             foreach (var item in inlinestyle.item)
             {
-                if (doneitems.Where(o=>o.isEqualNode(item)).Any())
+                if (doneitems.Any(o=>o.isEqualNode(item)))
                 {
                     continue; 
                 }
 
                 var updates = ReplaceInlineCssUrl(item, Context);
 
-                if (updates != null && updates.Count() > 0)
+                if (updates != null && updates.Any())
                 {
                     string oldstring = Kooboo.Sites.Service.DomService.GetOpenTag(item);
                     string newstring = oldstring;
diff --git a/Kooboo.Sites/SiteTransfer/Continue/ContinueTask.cs b/Kooboo.Sites/SiteTransfer/Continue/ContinueTask.cs
index 88fb3b8a..f4458dc1 100644
--- a/Kooboo.Sites/SiteTransfer/Continue/ContinueTask.cs
+++ b/Kooboo.Sites/SiteTransfer/Continue/ContinueTask.cs
@@ -23,7 +23,7 @@ namespace Kooboo.Sites.SiteTransfer.Continue
                     foreach (var item in continueconverters)
                     {
                         var converter = converters.Find(o => o.Type == item.ConvertType);
-                        if (converter != null && converter is IContinueConverter)
+                        if (converter is IContinueConverter)
                         {
                             IContinueConverter continueconverter = converter as IContinueConverter;
                             continueconverter.ContinueConvert(SiteDb, item.OriginalPageId,  item.ConvertedTag, item.ObjectNameOrId, item.KoobooId, page, item.ElementPaths); 
diff --git a/Kooboo.Sites/SiteTransfer/Executor/TransferByLevelExecutor.cs b/Kooboo.Sites/SiteTransfer/Executor/TransferByLevelExecutor.cs
index fcc1b5d3..b6b10911 100644
--- a/Kooboo.Sites/SiteTransfer/Executor/TransferByLevelExecutor.cs
+++ b/Kooboo.Sites/SiteTransfer/Executor/TransferByLevelExecutor.cs
@@ -75,7 +75,7 @@ namespace Kooboo.Sites.SiteTransfer.Executor
                 pagelist.RemoveAll(o => DoneUrlHash.Contains(o.Id)); 
                 if (pagelist == null || pagelist.Count == 0)
                 {
-                    if (progress.counter < progress.TotalPages && lowerPriorityPages.Count()>0)
+                    if (progress.counter < progress.TotalPages && lowerPriorityPages.Any())
                     {
                         var needed = progress.TotalPages - progress.counter;
                         var neededpages = lowerPriorityPages.Take(needed);
@@ -133,7 +133,7 @@ namespace Kooboo.Sites.SiteTransfer.Executor
 
                     SiteObject downloadobject = TransferHelper.AddDownload(manager, down, item.absoluteUrl, item.DefaultStartPage, true, progress.BaseUrl);
 
-                    if (downloadobject != null && downloadobject is Page)
+                    if (downloadobject is Page)
                     {
                         page = downloadobject as Page;
                     }
@@ -201,7 +201,7 @@ namespace Kooboo.Sites.SiteTransfer.Executor
                 }
             }
 
-            while(transferingPages.Count()>0)
+            while(transferingPages.Any())
             {
                 System.Threading.Thread.Sleep(1000);
                 UpdateTransferPage(transferingPages, manager); 
diff --git a/Kooboo.Sites/SiteTransfer/Executor/TransferBySelectedPagesExecutor.cs b/Kooboo.Sites/SiteTransfer/Executor/TransferBySelectedPagesExecutor.cs
index db654596..ae76d181 100644
--- a/Kooboo.Sites/SiteTransfer/Executor/TransferBySelectedPagesExecutor.cs
+++ b/Kooboo.Sites/SiteTransfer/Executor/TransferBySelectedPagesExecutor.cs
@@ -70,7 +70,7 @@ namespace Kooboo.Sites.SiteTransfer.Executor
 
                 SiteObject downloadobject = TransferHelper.AddDownload(manager, down, item.absoluteUrl, defaultstart, true, baseurl);
 
-                if (downloadobject != null && downloadobject is Page)
+                if (downloadobject is Page)
                 {
                     page = downloadobject as Page;
                 }
diff --git a/Kooboo.Sites/SiteTransfer/TransferManager.cs b/Kooboo.Sites/SiteTransfer/TransferManager.cs
index cfd95ff3..7e9f314e 100644
--- a/Kooboo.Sites/SiteTransfer/TransferManager.cs
+++ b/Kooboo.Sites/SiteTransfer/TransferManager.cs
@@ -113,7 +113,7 @@ namespace Kooboo.Sites.SiteTransfer
             string orgimport = null;
 
             var history = siteDb.TransferTasks.History().ToList();
-            if (history.Count() == 0)
+            if (!history.Any())
             {
                 return null;
             }
@@ -129,7 +129,7 @@ namespace Kooboo.Sites.SiteTransfer
 
             if (failtrack != null)
             {
-                if (failtrack.HistoryTime.Where(o => o > DateTime.Now.AddMinutes(-30)).Any())
+                if (failtrack.HistoryTime.Any(o => o > DateTime.Now.AddMinutes(-30)))
                 {
                     return null;
                 }
diff --git a/Kooboo.Sites/Sync/Cluster/ClusterService.cs b/Kooboo.Sites/Sync/Cluster/ClusterService.cs
index d198e4a2..7a680070 100644
--- a/Kooboo.Sites/Sync/Cluster/ClusterService.cs
+++ b/Kooboo.Sites/Sync/Cluster/ClusterService.cs
@@ -42,7 +42,7 @@ namespace Kooboo.Sites.Sync.Cluster
 
             var allitems = store.Filter.SelectAll().OrderBy(o => o.ServerUrl).ToList();
 
-            var count = allitems.Count();
+            var count = allitems.Count;
             if (count == 0)
             {
                 return new List<Guid>();
@@ -320,8 +320,6 @@ namespace Kooboo.Sites.Sync.Cluster
 
             var repo = SiteDb.GetRepository(log.StoreName);
 
-            var siteobject = repo.GetByLog(log) as ISiteObject;
-
             if (log.EditType == EditType.Delete)
             {
                 item.IsDelete = true;
@@ -330,7 +328,7 @@ namespace Kooboo.Sites.Sync.Cluster
             }
             else
             {
-                if (siteobject != null)
+                if (repo.GetByLog(log) is ISiteObject siteobject)
                 {
                     item = Sync.SyncObjectConvertor.ToSyncObject(siteobject);
                 }
diff --git a/Kooboo.Sites/Sync/Cluster/Integrity.cs b/Kooboo.Sites/Sync/Cluster/Integrity.cs
index 97ccd9a4..173ffc86 100644
--- a/Kooboo.Sites/Sync/Cluster/Integrity.cs
+++ b/Kooboo.Sites/Sync/Cluster/Integrity.cs
@@ -31,9 +31,9 @@ namespace Kooboo.Sites.Sync.Cluster
                 var store = Stores.ClusterUpdateHistory(SiteDb);
                 var items = store.Where(o => o.LocalVersion == LocalVersion).SelectAll();
 
-                if (items != null && items.Count() > 0)
+                if (items != null && items.Any())
                 {
-                    if (items.Count() > 1)
+                    if (items.Count > 1)
                     {
                         throw new Exception(Data.Language.Hardcoded.GetValue("cluster should not have two source for the same item"));
                     }
diff --git a/Kooboo.Sites/Sync/ImportExport.cs b/Kooboo.Sites/Sync/ImportExport.cs
index 27899599..c4289272 100644
--- a/Kooboo.Sites/Sync/ImportExport.cs
+++ b/Kooboo.Sites/Sync/ImportExport.cs
@@ -167,7 +167,7 @@ namespace Kooboo.Sites.Sync
             Func<string, List<string>> ToSegments = Kooboo.Lib.Compatible.CompatibleManager.Instance.System.GetSegments; ; ;
 
 
-            if (paths == null || paths.Count() == 1)
+            if (paths == null || paths.Count == 1)
             {
                 return new List<string>();
             }
@@ -188,7 +188,7 @@ namespace Kooboo.Sites.Sync
                 List<string> indexitem = new List<string>();
                 foreach (var item in AllSegments)
                 {
-                    if (i > item.Count() - 1)
+                    if (i > item.Count - 1)
                     {
                         break;
                     }
@@ -197,7 +197,7 @@ namespace Kooboo.Sites.Sync
                         indexitem.Add(item[i]);
                     }
                 }
-                if (indexitem.Count() > 0 && HasSameValue(indexitem))
+                if (indexitem.Any()&& HasSameValue(indexitem))
                 {
                     common.Add(indexitem[0]);
                     i += 1;
@@ -683,7 +683,7 @@ namespace Kooboo.Sites.Sync
                                 var view = dbitem as View;
                                 var allmethods = SiteDb.ViewDataMethods.Query.Where(o => o.ViewId == view.Id).SelectAll();
 
-                                if (allmethods != null && allmethods.Count() > 0)
+                                if (allmethods != null && allmethods.Any())
                                 {
                                     var MethodSerializer = new Kooboo.IndexedDB.Serializer.Simple.SimpleConverter(SiteDb.ViewDataMethods.SiteObjectType);
 
@@ -959,8 +959,7 @@ namespace Kooboo.Sites.Sync
                     }
                     else
                     {
-                        var back = Kooboo.Data.Helper.SimpleSerializerHelper.Deserialize(item.Binary, repo.ModelType) as ISiteObject;
-                        if (back != null)
+                        if (Kooboo.Data.Helper.SimpleSerializerHelper.Deserialize(item.Binary, repo.ModelType) is ISiteObject back)
                         {
                             back.Id = item.ObjectId;
                             repo.AddOrUpdate(back, UserId);
@@ -977,7 +976,7 @@ namespace Kooboo.Sites.Sync
 
                 var version = Kooboo.Sites.Upgrade.UpgradeManager.ParseVersion(setting.KoobooVersion);
                 var siteupgrader = Kooboo.Sites.Upgrade.UpgradeManager.GetSiteUpgraderList(version);
-                if (siteupgrader != null && siteupgrader.Count() > 0)
+                if (siteupgrader != null && siteupgrader.Any())
                 {
                     foreach (var item in siteupgrader)
                     {
@@ -1218,7 +1217,7 @@ namespace Kooboo.Sites.Sync
             foreach (var id in Ids)
             {
                 var item = sitedb.Log.Get(id);
-                if (item != null && item.KeyBytes != null)
+                if (item?.KeyBytes != null)
                 {
                     result.Add(item);
                 }
@@ -1230,7 +1229,7 @@ namespace Kooboo.Sites.Sync
         public static string ExportBatch(SiteDb sitedb, long byfromId)
         {
             var logs = BatchGetFromIdLogs(sitedb, byfromId);
-            if (logs == null || logs.Count() == 0)
+            if (logs == null || !logs.Any())
             {
                 return null;
             }
@@ -1241,7 +1240,7 @@ namespace Kooboo.Sites.Sync
         public static string ExportBatch(SiteDb sitedb, List<long> Ids)
         {
             var logs = BatchGetLogs(sitedb, Ids);
-            if (logs == null || logs.Count() == 0)
+            if (logs == null || !logs.Any())
             {
                 return null;
             }
diff --git a/Kooboo.Sites/Sync/SiteClusterSync/SiteClusterManager.cs b/Kooboo.Sites/Sync/SiteClusterSync/SiteClusterManager.cs
index e49b3b1e..a7991a11 100644
--- a/Kooboo.Sites/Sync/SiteClusterSync/SiteClusterManager.cs
+++ b/Kooboo.Sites/Sync/SiteClusterSync/SiteClusterManager.cs
@@ -104,7 +104,7 @@ namespace Kooboo.Sites.Sync.SiteClusterSync
         {
             lock (_queuelocker)
             {
-                if (this.PushQueue.Count() > 0)
+                if (this.PushQueue.Any())
                 {
                     var item = this.PushQueue.First();
                     this.PushQueue.Remove(item);
@@ -326,7 +326,7 @@ namespace Kooboo.Sites.Sync.SiteClusterSync
         {
             byte[] key = Service.ObjectService.KeyConverter.ToByte(ObjectId);
             var oldlogs = SiteDb.Log.GetByStoreNameAndKey(repo.StoreName, key, 1);
-            if (oldlogs == null || oldlogs.Count() == 0)
+            if (oldlogs == null || !oldlogs.Any())
             { return -1; }
             var log = oldlogs.First();
             if (log.EditType == IndexedDB.EditType.Delete)
diff --git a/Kooboo.Sites/Sync/SyncService.cs b/Kooboo.Sites/Sync/SyncService.cs
index 3bc63593..c30e9a8a 100644
--- a/Kooboo.Sites/Sync/SyncService.cs
+++ b/Kooboo.Sites/Sync/SyncService.cs
@@ -292,8 +292,7 @@ namespace Kooboo.Sites.Sync
                             var localversion = core.Version;
                             if (localversion == -1)
                             {
-                                var currentsiteobject = core as SiteObject;
-                                if (currentsiteobject != null)
+                                if (core is SiteObject currentsiteobject)
                                 {
                                     var dbobject = repo.Get(currentsiteobject.Id);
                                     if (dbobject != null)
@@ -388,7 +387,7 @@ namespace Kooboo.Sites.Sync
         {
             byte[] key = Service.ObjectService.KeyConverter.ToByte(ObjectId);
             var oldlogs = SiteDb.Log.GetByStoreNameAndKey(repo.StoreName, key, 1);
-            if (oldlogs == null || oldlogs.Count() == 0)
+            if (oldlogs == null || !oldlogs.Any())
             { return -1; }
             var log = oldlogs.First();
             if (log.EditType == IndexedDB.EditType.Delete)
@@ -411,7 +410,7 @@ namespace Kooboo.Sites.Sync
         {
             byte[] key = Service.ObjectService.KeyConverter.ToByte(ObjectId);
             var oldlogs = SiteDb.Log.GetByTableNameAndKey(TableName, key, 1);
-            if (oldlogs == null || oldlogs.Count() == 0)
+            if (oldlogs == null || !oldlogs.Any())
             { return -1; }
             var log = oldlogs.First();
             if (log.EditType == IndexedDB.EditType.Delete)
diff --git a/Kooboo.Sites/TaskQueue/JobBackGroundWorker.cs b/Kooboo.Sites/TaskQueue/JobBackGroundWorker.cs
index 83275cb9..7e3e18dc 100644
--- a/Kooboo.Sites/TaskQueue/JobBackGroundWorker.cs
+++ b/Kooboo.Sites/TaskQueue/JobBackGroundWorker.cs
@@ -50,7 +50,7 @@ namespace Kooboo.Sites.TaskQueue
 
         public void ExecuteRepeatingJob(RepeatItem<Job> repeatingJob)
         {
-            if (repeatingJob != null && repeatingJob.Item != null)
+            if (repeatingJob?.Item != null)
             {
                 try
                 {
diff --git a/Kooboo.Sites/Upgrade/HardCodeUpgrade.cs b/Kooboo.Sites/Upgrade/HardCodeUpgrade.cs
index c6930b09..bc9e95ee 100644
--- a/Kooboo.Sites/Upgrade/HardCodeUpgrade.cs
+++ b/Kooboo.Sites/Upgrade/HardCodeUpgrade.cs
@@ -44,7 +44,7 @@ namespace Kooboo.Web.Upgrade
                 var allmenus = sitedb.Menus.All();
                 foreach (var menu in allmenus)
                 {
-                    if (menu.Values.Count()==0)
+                    if (!menu.Values.Any())
                     {
                          if (!string.IsNullOrEmpty(menu.Name))
                         {
diff --git a/Kooboo.Sites/Upgrade/SiteContentDataSourceUpgrade.cs b/Kooboo.Sites/Upgrade/SiteContentDataSourceUpgrade.cs
index 66f20baa..418bb277 100644
--- a/Kooboo.Sites/Upgrade/SiteContentDataSourceUpgrade.cs
+++ b/Kooboo.Sites/Upgrade/SiteContentDataSourceUpgrade.cs
@@ -48,7 +48,7 @@ namespace Kooboo.Sites.Upgrade
                         sitedb.DataMethodSettings.AddOrUpdate(newMethod);
                         var viewmethods = sitedb.ViewDataMethods.Query.Where(o => o.MethodId == method.Id).SelectAll();
 
-                        if (viewmethods == null || viewmethods.Count() == 0)
+                        if (viewmethods == null || !viewmethods.Any())
                         {
                             sitedb.DataMethodSettings.Delete(method.Id);
                         }
diff --git a/Kooboo.Sites/ViewModel/TextContent.cs b/Kooboo.Sites/ViewModel/TextContent.cs
index f3d625d6..1f0fb684 100644
--- a/Kooboo.Sites/ViewModel/TextContent.cs
+++ b/Kooboo.Sites/ViewModel/TextContent.cs
@@ -137,7 +137,7 @@ namespace Kooboo.Sites.ViewModel
                             }
                         }
 
-                        if (mulresult.Count() > 0)
+                        if (mulresult.Any())
                         {
                             return mulresult.ToArray();
                         }
@@ -155,7 +155,7 @@ namespace Kooboo.Sites.ViewModel
                         {
                             var ids = this.Embedded[embed.FolderId];
 
-                            if (ids != null && ids.Count() > 0)
+                            if (ids != null && ids.Any())
                             {
                                 foreach (var item in ids)
                                 {
@@ -171,7 +171,7 @@ namespace Kooboo.Sites.ViewModel
 
                         var byParentIds = sitedb.TextContent.Query.Where(o => o.FolderId == embed.FolderId && o.ParentId == this.Id).SelectAll();
 
-                        if (byParentIds != null && byParentIds.Count() > 0)
+                        if (byParentIds != null && byParentIds.Any())
                         {
                             foreach (var subitem in byParentIds)
                             {
diff --git a/Kooboo.Web/Api/ApiContainer.cs b/Kooboo.Web/Api/ApiContainer.cs
index 0c51e2e5..dc03eed4 100644
--- a/Kooboo.Web/Api/ApiContainer.cs
+++ b/Kooboo.Web/Api/ApiContainer.cs
@@ -108,8 +108,7 @@ namespace Kooboo.Web.Api
         {
             lock (_locker)
             {
-                var instance = Activator.CreateInstance(apitype) as IApi;
-                if (instance != null)
+                if (Activator.CreateInstance(apitype) is IApi instance)
                 {
                     var currentlist = List;
                     AddApi(currentlist, instance);
diff --git a/Kooboo.Web/Api/Implementation/Binding.cs b/Kooboo.Web/Api/Implementation/Binding.cs
index a6a05d55..5d3fa606 100644
--- a/Kooboo.Web/Api/Implementation/Binding.cs
+++ b/Kooboo.Web/Api/Implementation/Binding.cs
@@ -62,7 +62,7 @@ namespace Kooboo.Web.Api.Implementation
                 //throw;
             }
 
-            if (ids != null && ids.Count() > 0)
+            if (ids != null && ids.Any())
             {
                 foreach (var item in ids)
                 {
@@ -265,7 +265,7 @@ namespace Kooboo.Web.Api.Implementation
                 int count = 0;
                 if (bindings != null)
                 {
-                    count = bindings.Count();
+                    count = bindings.Count;
                 }
 
                 result.Add(new SiteBindingViewModel() { Name = item.Name, Id = item.Id, BindingCount = count });
diff --git a/Kooboo.Web/Api/Implementation/Cluster.cs b/Kooboo.Web/Api/Implementation/Cluster.cs
index fc5c50d6..43d26ff7 100644
--- a/Kooboo.Web/Api/Implementation/Cluster.cs
+++ b/Kooboo.Web/Api/Implementation/Cluster.cs
@@ -130,9 +130,9 @@ namespace Kooboo.Web.Api.Implementation
 
             viewmodel.DataCenter = datacenterlist;
 
-            viewmodel.EnableCluster = datacenterlist.Where(o => o.IsSelected).Count() >= 2;
+            viewmodel.EnableCluster = datacenterlist.Count(o => o.IsSelected)>= 2;
 
-            viewmodel.EnableLocationRedirect = datacenterlist.Where(o => !string.IsNullOrWhiteSpace(o.PrimaryDomain)).Any();
+            viewmodel.EnableLocationRedirect = datacenterlist.Any(o => !string.IsNullOrWhiteSpace(o.PrimaryDomain));
 
             if (viewmodel.EnableLocationRedirect)
             {
diff --git a/Kooboo.Web/Api/Implementation/Commerce/PaymentCallBack.cs b/Kooboo.Web/Api/Implementation/Commerce/PaymentCallBack.cs
index ae6cdf14..192c380d 100644
--- a/Kooboo.Web/Api/Implementation/Commerce/PaymentCallBack.cs
+++ b/Kooboo.Web/Api/Implementation/Commerce/PaymentCallBack.cs
@@ -62,9 +62,8 @@ namespace Kooboo.Web.Api.Implementation.Commerce
                 {
                     object[] para = new object[1];
                     para[0] = call.Context;
-                    var result = method.Invoke(paymentmethod, para) as PaymentCallback;
 
-                    if (result != null)
+                    if (method.Invoke(paymentmethod, para) is PaymentCallback result)
                     {
                         PaymentManager.CallBack(result, call.Context);
 
diff --git a/Kooboo.Web/Api/Implementation/CoreSetting.cs b/Kooboo.Web/Api/Implementation/CoreSetting.cs
index 99ced6a2..9a91d8dd 100644
--- a/Kooboo.Web/Api/Implementation/CoreSetting.cs
+++ b/Kooboo.Web/Api/Implementation/CoreSetting.cs
@@ -150,10 +150,10 @@ namespace Kooboo.Web.Api.Implementation
         private string GetName(object instance)
         {
             var type = instance.GetType();
-            var sitesettingInstance = instance as ISiteSetting;
 
             var name = string.Empty;
-            if (sitesettingInstance != null)
+
+            if (instance is ISiteSetting sitesettingInstance)
             {
                 name = sitesettingInstance.Name;
             }
diff --git a/Kooboo.Web/Api/Implementation/DataBase.cs b/Kooboo.Web/Api/Implementation/DataBase.cs
index d8e37675..064b783d 100644
--- a/Kooboo.Web/Api/Implementation/DataBase.cs
+++ b/Kooboo.Web/Api/Implementation/DataBase.cs
@@ -94,7 +94,7 @@ namespace Kooboo.Web.Api.Implementation
 
             var items = query.Skip(totalskip).Take(pager.PageSize).ToList();
 
-            if (items != null && items.Count() > 0)
+            if (items != null && items.Any())
             {
                 result.List = ConvertDataValue(items);
             }
diff --git a/Kooboo.Web/Api/Implementation/DataMethodSetting.cs b/Kooboo.Web/Api/Implementation/DataMethodSetting.cs
index 9d745eef..a8b17761 100644
--- a/Kooboo.Web/Api/Implementation/DataMethodSetting.cs
+++ b/Kooboo.Web/Api/Implementation/DataMethodSetting.cs
@@ -100,7 +100,7 @@ namespace Kooboo.Web.Api.Implementation
                     item.Methods.Remove(method);
                 }
 
-                if (item.Methods.Count() == 0)
+                if (!item.Methods.Any())
                 {
                     SourceRemove.Add(item);
                 }
@@ -210,7 +210,7 @@ namespace Kooboo.Web.Api.Implementation
 
         private void CheckCorrectSampleJson(DataMethodViewModel model, ApiCall call)
         {
-            if (model != null && model.ParameterBinding != null)
+            if (model?.ParameterBinding != null)
             {
                 foreach (var item in model.ParameterBinding)
                 {
@@ -408,9 +408,9 @@ namespace Kooboo.Web.Api.Implementation
                 {
                     var viewdatamethod = siteDb.ViewDataMethods.Query.Where(o => o.MethodId == method.Id).SelectAll();
 
-                    if (viewdatamethod != null && viewdatamethod.Count() > 0)
+                    if (viewdatamethod != null && viewdatamethod.Any())
                     {
-                        method.Relations.Add("View", viewdatamethod.Count());
+                        method.Relations.Add("View", viewdatamethod.Count);
                     }
                 }
             }
diff --git a/Kooboo.Web/Api/Implementation/Domain.cs b/Kooboo.Web/Api/Implementation/Domain.cs
index 2e6f9938..c6c1765a 100644
--- a/Kooboo.Web/Api/Implementation/Domain.cs
+++ b/Kooboo.Web/Api/Implementation/Domain.cs
@@ -202,7 +202,7 @@ namespace Kooboo.Web.Api.Implementation
                 //throw;
             }
 
-            if (ids != null && ids.Count() > 0)
+            if (ids != null && ids.Any())
             {
                 foreach (var item in ids)
                 {
diff --git a/Kooboo.Web/Api/Implementation/Extension.cs b/Kooboo.Web/Api/Implementation/Extension.cs
index 0b7befaf..3fe4bb92 100644
--- a/Kooboo.Web/Api/Implementation/Extension.cs
+++ b/Kooboo.Web/Api/Implementation/Extension.cs
@@ -147,7 +147,7 @@ namespace Kooboo.Web.Api.Implementation
                 //throw;
             }
 
-            if (ids != null && ids.Count() > 0)
+            if (ids != null && ids.Any())
             {
                 foreach (var item in ids)
                 {
diff --git a/Kooboo.Web/Api/Implementation/Form.cs b/Kooboo.Web/Api/Implementation/Form.cs
index 0b599225..6a3e1d9f 100644
--- a/Kooboo.Web/Api/Implementation/Form.cs
+++ b/Kooboo.Web/Api/Implementation/Form.cs
@@ -231,7 +231,7 @@ namespace Kooboo.Web.Api.Implementation
             if (!string.IsNullOrEmpty(result.FormSubmitter))
             {
                 // set default value. 
-                if (result.Setting != null && result.Setting.Count() > 0)
+                if (result.Setting != null && result.Setting.Any())
                 {
                     var available = result.AvailableSubmitters.Find(o => o.Name == result.FormSubmitter);
                     if (available != null)
@@ -354,7 +354,7 @@ namespace Kooboo.Web.Api.Implementation
                     if (!string.IsNullOrEmpty(edit.FormSubmitter))
                     {
                         // set default value. 
-                        if (edit.Setting !=null && edit.Setting.Count()>0)
+                        if (edit.Setting != null && edit.Setting.Any())
                         {
                             var available = edit.AvailableSubmitters.Find(o => o.Name == edit.FormSubmitter); 
                             if (available !=null)
@@ -423,7 +423,7 @@ namespace Kooboo.Web.Api.Implementation
 
             List<Guid> ids = Kooboo.Lib.Helper.JsonHelper.Deserialize<List<Guid>>(json);
 
-            if (ids != null && ids.Count() > 0)
+            if (ids != null && ids.Any())
             {
                 foreach (var item in ids)
                 {
@@ -444,7 +444,7 @@ namespace Kooboo.Web.Api.Implementation
             }
             List<Guid> ids = Lib.Helper.JsonHelper.Deserialize<List<Guid>>(json);
 
-            if (ids != null && ids.Count() > 0)
+            if (ids != null && ids.Any())
             {
                 foreach (var item in ids)
                 {
diff --git a/Kooboo.Web/Api/Implementation/Layout.cs b/Kooboo.Web/Api/Implementation/Layout.cs
index 2dea8099..7e0861a1 100644
--- a/Kooboo.Web/Api/Implementation/Layout.cs
+++ b/Kooboo.Web/Api/Implementation/Layout.cs
@@ -125,7 +125,7 @@ namespace Kooboo.Web.Api.Implementation
             }
             List<Guid> ids = Lib.Helper.JsonHelper.Deserialize<List<Guid>>(json);
 
-            if (ids != null && ids.Count() > 0)
+            if (ids != null && ids.Any())
             {
                 foreach (var item in ids)
                 {
diff --git a/Kooboo.Web/Api/Implementation/Mails/EmailAttachment.cs b/Kooboo.Web/Api/Implementation/Mails/EmailAttachment.cs
index cd2f1197..a765dde4 100644
--- a/Kooboo.Web/Api/Implementation/Mails/EmailAttachment.cs
+++ b/Kooboo.Web/Api/Implementation/Mails/EmailAttachment.cs
@@ -81,7 +81,7 @@ namespace Kooboo.Web.Api.Implementation.Mails
 
             var para = call.Command.Parameters;
 
-            if (para.Count() == 2)
+            if (para.Count == 2)
             {
                 messageid = Convert.ToInt32(para[0]);
                 filename = System.Web.HttpUtility.UrlDecode(para[1]);
diff --git a/Kooboo.Web/Api/Implementation/Media.cs b/Kooboo.Web/Api/Implementation/Media.cs
index 07cdddc1..6a77504e 100644
--- a/Kooboo.Web/Api/Implementation/Media.cs
+++ b/Kooboo.Web/Api/Implementation/Media.cs
@@ -234,7 +234,7 @@ namespace Kooboo.Web.Api.Implementation
 
             PagedListViewModel<MediaFileViewModel> Result = new PagedListViewModel<MediaFileViewModel>();
 
-            Result.TotalCount = images.Count();
+            Result.TotalCount = images.Count;
             Result.TotalPages = ApiHelper.GetPageCount(Result.TotalCount, PageSize);
             Result.PageSize = PageSize;
             Result.PageNr = PageNumber; 
@@ -331,7 +331,7 @@ namespace Kooboo.Web.Api.Implementation
 
             PagedListViewModel<MediaFileViewModel> Result = new PagedListViewModel<MediaFileViewModel>();
 
-            Result.TotalCount = images.Count();
+            Result.TotalCount = images.Count;
             Result.TotalPages = ApiHelper.GetPageCount(Result.TotalCount, PageSize);
             Result.PageSize = PageSize;
             Result.PageNr = PageNumber;
@@ -458,7 +458,7 @@ namespace Kooboo.Web.Api.Implementation
         {
             var files = Kooboo.Lib.NETMultiplePart.FormReader.ReadFile(call.Context.Request.PostData);
 
-            if (files == null || files.Count() ==0)
+            if (files == null || !files.Any())
             {
                 return null; 
             }
diff --git a/Kooboo.Web/Api/Implementation/Page.cs b/Kooboo.Web/Api/Implementation/Page.cs
index 9b22c660..ea5b16c6 100644
--- a/Kooboo.Web/Api/Implementation/Page.cs
+++ b/Kooboo.Web/Api/Implementation/Page.cs
@@ -52,7 +52,7 @@ namespace Kooboo.Web.Api.Implementation
 
             var relations = sitedb.Relations.GetRelations(item.Id);
 
-            if (relations != null && relations.Count() > 0)
+            if (relations != null && relations.Any())
             {
                 var relationresult = pagemodel.Relations;
                 foreach (var onerelation in relations.Where(o => o.ConstTypeY == ConstObjectType.Layout || o.ConstTypeY == ConstObjectType.View || o.ConstTypeY == ConstObjectType.Form || o.ConstTypeY == ConstObjectType.HtmlBlock || o.ConstTypeY == ConstObjectType.Menu))
@@ -371,7 +371,7 @@ namespace Kooboo.Web.Api.Implementation
         {
             var files = Kooboo.Lib.NETMultiplePart.FormReader.ReadFile(call.Context.Request.PostData);
 
-            if (files != null && files.Count() > 0)
+            if (files != null && files.Any())
             {
                 foreach (var f in files)
                 {
@@ -461,7 +461,7 @@ namespace Kooboo.Web.Api.Implementation
             PageDefaultRouteViewModel model = new PageDefaultRouteViewModel();
 
             var startpages = call.WebSite.StartPages();
-            if (startpages != null && startpages.Count() > 0)
+            if (startpages != null && startpages.Any())
             {
                 model.StartPage = startpages.First().Id;
             }
diff --git a/Kooboo.Web/Api/Implementation/Publish.cs b/Kooboo.Web/Api/Implementation/Publish.cs
index c0ef64ca..de1a96d8 100644
--- a/Kooboo.Web/Api/Implementation/Publish.cs
+++ b/Kooboo.Web/Api/Implementation/Publish.cs
@@ -192,7 +192,7 @@ namespace Kooboo.Web.Api.Implementation
                 //throw;
             }
 
-            if (ids != null && ids.Count() > 0)
+            if (ids != null && ids.Any())
             {
                 foreach (var item in ids)
                 {
@@ -308,7 +308,7 @@ namespace Kooboo.Web.Api.Implementation
             try
             {
                 ids = Lib.Helper.JsonHelper.Deserialize<List<long>>(json);
-                if (ids.Count() < 5)
+                if (ids.Count < 5)
                 {
                     DirectSubmit = true;
                 }
diff --git a/Kooboo.Web/Api/Implementation/ResourceGroup.cs b/Kooboo.Web/Api/Implementation/ResourceGroup.cs
index 11cec9cc..55058107 100644
--- a/Kooboo.Web/Api/Implementation/ResourceGroup.cs
+++ b/Kooboo.Web/Api/Implementation/ResourceGroup.cs
@@ -225,7 +225,7 @@ namespace Kooboo.Web.Api.Implementation
                 //throw;
             }
 
-            if (ids != null && ids.Count() > 0)
+            if (ids != null && ids.Any())
             {
                 foreach (var item in ids)
                 {
diff --git a/Kooboo.Web/Api/Implementation/Role.cs b/Kooboo.Web/Api/Implementation/Role.cs
index 90707670..ee4acaec 100644
--- a/Kooboo.Web/Api/Implementation/Role.cs
+++ b/Kooboo.Web/Api/Implementation/Role.cs
@@ -103,7 +103,7 @@ namespace Kooboo.Web.Api.Implementation
             }
             List<Guid> ids = Lib.Helper.JsonHelper.Deserialize<List<Guid>>(json);
 
-            if (ids != null && ids.Count() > 0)
+            if (ids != null && ids.Any())
             {
                 foreach (var item in ids)
                 {
diff --git a/Kooboo.Web/Api/Implementation/Site.cs b/Kooboo.Web/Api/Implementation/Site.cs
index c052e63c..384a3f81 100644
--- a/Kooboo.Web/Api/Implementation/Site.cs
+++ b/Kooboo.Web/Api/Implementation/Site.cs
@@ -84,7 +84,7 @@ namespace Kooboo.Web.Api.Implementation
 
                     if (site.EnableMultilingual)
                     {
-                        if (site.Culture != null && site.Culture.Count() > 0)
+                        if (site.Culture != null && site.Culture.Any())
                         {
                             foreach (var item in site.Culture)
                             {
@@ -151,7 +151,7 @@ namespace Kooboo.Web.Api.Implementation
 
                 var alltask = sitedb.TransferTasks.All();
 
-                if (alltask != null && alltask.Count() > 0)
+                if (alltask != null && alltask.Any())
                 {
                     foreach (var ttask in alltask.Where(o => o.done == false))
                     {
@@ -395,7 +395,7 @@ namespace Kooboo.Web.Api.Implementation
 
             List<Guid> ids = Lib.Helper.JsonHelper.Deserialize<List<Guid>>(json);
 
-            if (ids != null && ids.Count() > 0)
+            if (ids != null && ids.Any())
             {
                 foreach (var item in ids)
                 {
@@ -508,7 +508,7 @@ namespace Kooboo.Web.Api.Implementation
         {
             var files = call.Context.Request.Files;
 
-            if (files == null || files.Count() == 0)
+            if (files == null || !files.Any())
             {
                 return default(Guid);
             }
diff --git a/Kooboo.Web/Api/Implementation/SiteLog.cs b/Kooboo.Web/Api/Implementation/SiteLog.cs
index 339f81e6..8f44773b 100644
--- a/Kooboo.Web/Api/Implementation/SiteLog.cs
+++ b/Kooboo.Web/Api/Implementation/SiteLog.cs
@@ -303,7 +303,7 @@ namespace Kooboo.Web.Api.Implementation
             }
             List<long> changes = Lib.Helper.JsonHelper.Deserialize<List<long>>(call.Context.Request.Body);
 
-            if (changes != null && changes.Count() > 0)
+            if (changes != null && changes.Any())
             {
                 Kooboo.Sites.Service.LogService.RollBack(call.WebSite.SiteDb(), changes);
                 return true;
diff --git a/Kooboo.Web/Api/Implementation/SiteObjectApi.cs b/Kooboo.Web/Api/Implementation/SiteObjectApi.cs
index b4e76273..92ce3c3d 100644
--- a/Kooboo.Web/Api/Implementation/SiteObjectApi.cs
+++ b/Kooboo.Web/Api/Implementation/SiteObjectApi.cs
@@ -137,7 +137,7 @@ namespace Kooboo.Web.Api
             } 
             List<Guid> ids  = Lib.Helper.JsonHelper.Deserialize<List<Guid>>(json); 
 
-            if (ids != null && ids.Count() > 0)
+            if (ids != null && ids.Any())
             {
                 foreach (var item in ids)
                 {
diff --git a/Kooboo.Web/Api/Implementation/Template.cs b/Kooboo.Web/Api/Implementation/Template.cs
index 247d38cc..cca8e776 100644
--- a/Kooboo.Web/Api/Implementation/Template.cs
+++ b/Kooboo.Web/Api/Implementation/Template.cs
@@ -168,7 +168,7 @@ namespace Kooboo.Web.Api.Implementation
         protected string GetStartRelativeUrl(Data.Models.WebSite site)
         {
             var startpages = site.StartPages();
-            if (startpages != null && startpages.Count() > 0)
+            if (startpages != null && startpages.Any())
             {
                 foreach (var item in startpages)
                 {
@@ -183,7 +183,7 @@ namespace Kooboo.Web.Api.Implementation
 
             var allpages = site.SiteDb().Pages.All();
 
-            if (allpages != null && allpages.Count() > 0)
+            if (allpages != null && allpages.Any())
             {
                 foreach (var item in allpages)
                 {
@@ -196,7 +196,7 @@ namespace Kooboo.Web.Api.Implementation
                 }
             }
 
-            if (allpages != null && allpages.Count() > 0)
+            if (allpages != null && allpages.Any())
             {
                 foreach (var item in allpages)
                 {
@@ -328,7 +328,7 @@ namespace Kooboo.Web.Api.Implementation
                 data.Images.Add(image);
             }
 
-            if (data.Images.Count() > 0)
+            if (data.Images.Any())
             {
                 if (formResult.FormData.ContainsKey("defaultimg"))
                 {
@@ -538,7 +538,7 @@ namespace Kooboo.Web.Api.Implementation
                 update.NewDefault = defaultimage;
             }
 
-            if (update.NewImages.Count() > 0)
+            if (update.NewImages.Any())
             {
                 if (formResult.FormData.ContainsKey("defaultfile"))
                 {
diff --git a/Kooboo.Web/Api/Implementation/TextContent.cs b/Kooboo.Web/Api/Implementation/TextContent.cs
index 6667175f..1c243870 100644
--- a/Kooboo.Web/Api/Implementation/TextContent.cs
+++ b/Kooboo.Web/Api/Implementation/TextContent.cs
@@ -150,7 +150,7 @@ namespace Kooboo.Web.Api.Implementation
 
             var textContents = call.WebSite.SiteDb().TextContent.Query.Where(it => it.FolderId == FolderId).SelectAll();
 
-            model.TotalCount = textContents.Count();
+            model.TotalCount = textContents.Count;
             model.TotalPages = ApiHelper.GetPageCount(model.TotalCount, model.PageSize);
 
             var list = textContents.OrderByDescending(o => o.LastModified).Skip(model.PageNr * model.PageSize - model.PageSize).Take(model.PageSize).ToList();
@@ -171,7 +171,7 @@ namespace Kooboo.Web.Api.Implementation
             var sitedb = call.WebSite.SiteDb();
             List<CategoryContentViewModel> categories = new List<CategoryContentViewModel>();
             var folder = sitedb.ContentFolders.Get(folderId);
-            if (folder == null || (folder.Category == null || folder.Category.Count() == 0))
+            if (folder == null || (folder.Category == null || !folder.Category.Any()))
             {
                 return categories;
             }
diff --git a/Kooboo.Web/Api/Implementation/Transfer.cs b/Kooboo.Web/Api/Implementation/Transfer.cs
index 241b6d2b..9b40ba01 100644
--- a/Kooboo.Web/Api/Implementation/Transfer.cs
+++ b/Kooboo.Web/Api/Implementation/Transfer.cs
@@ -81,7 +81,7 @@ namespace Kooboo.Web.Api.Implementation
                 response.Finish = true;
 
                 var transferpages = sitedb.TransferPages.Query.Where(o => o.taskid == task.Id).SelectAll();
-                if (transferpages == null || transferpages.Count() == 0)
+                if (transferpages == null || !transferpages.Any())
                 {
                     response.Success = false;
                     response.Messages.Add("no page downloaded");
@@ -130,7 +130,7 @@ namespace Kooboo.Web.Api.Implementation
             string urlstring = call.GetValue("Urls");
             List<string> urls = Lib.Helper.JsonHelper.Deserialize<List<string>>(urlstring);
 
-            if (urls != null && urls.Count() > 0)
+            if (urls != null && urls.Any())
             {
                 var first = urls.First();
 
@@ -322,7 +322,7 @@ namespace Kooboo.Web.Api.Implementation
 
             var tasks = siteDb.TransferTasks.Store.FullScan(o => o.done == false && o.CreationDate > DateTime.UtcNow.AddMinutes(-2)).SelectAll();
 
-            if (tasks != null && tasks.Count() > 0)
+            if (tasks != null && tasks.Any())
             {
                 response.Done = false;
             }
diff --git a/Kooboo.Web/Api/Implementation/VisitorLog.cs b/Kooboo.Web/Api/Implementation/VisitorLog.cs
index 014028c5..9d8dcace 100644
--- a/Kooboo.Web/Api/Implementation/VisitorLog.cs
+++ b/Kooboo.Web/Api/Implementation/VisitorLog.cs
@@ -53,7 +53,7 @@ namespace Kooboo.Web.Api.Implementation
 
             var alllog = log.Take(false, 0, Kooboo.Data.AppSettings.MaxVisitorLogRead);  
 
-            var total = alllog.Count();
+            var total = alllog.Count;
             result.TotalCount = total;
             result.TotalPages = ApiHelper.GetPageCount(total, pager.PageSize);
             result.PageNr = pager.PageNr;
diff --git a/Kooboo.Web/Backend/ApiPermission.cs b/Kooboo.Web/Backend/ApiPermission.cs
index 65a0300a..1e7fc0f1 100644
--- a/Kooboo.Web/Backend/ApiPermission.cs
+++ b/Kooboo.Web/Backend/ApiPermission.cs
@@ -55,8 +55,7 @@ namespace Kooboo.Web.Backend
 
                         if (method.ClassInstance is IApiPermissionString)
                         {
-                            var permissionclass = method.ClassInstance as IApiPermissionString;
-                            if (permissionclass != null)
+                            if (method.ClassInstance is IApiPermissionString permissionclass)
                             {
                                 PermissionString = permissionclass.Permission;
                             }
@@ -69,8 +68,7 @@ namespace Kooboo.Web.Backend
 
                             if (type != null)
                             {
-                                var menuinstance = Activator.CreateInstance(type) as ICmsMenu;
-                                if (menuinstance != null)
+                                if (Activator.CreateInstance(type) is ICmsMenu menuinstance)
                                 {
                                     PermissionString = MenuManager.GetPermissionString(menuinstance);
                                 }
diff --git a/Kooboo.Web/DashBoard/DashBoardManager.cs b/Kooboo.Web/DashBoard/DashBoardManager.cs
index a72e0ee7..59ecd3c7 100644
--- a/Kooboo.Web/DashBoard/DashBoardManager.cs
+++ b/Kooboo.Web/DashBoard/DashBoardManager.cs
@@ -109,7 +109,7 @@ namespace Kooboo.Web.DashBoard
 
                 var files = System.IO.Directory.GetFiles(basedir, name, SearchOption.AllDirectories);
 
-                if (files != null && files.Count() > 0)
+                if (files != null && files.Any())
                 {
                     foreach (var item in files)
                     {
diff --git a/Kooboo.Web/DashBoard/MyVisitor/FrontVisitors.cs b/Kooboo.Web/DashBoard/MyVisitor/FrontVisitors.cs
index a69321c0..ea491429 100644
--- a/Kooboo.Web/DashBoard/MyVisitor/FrontVisitors.cs
+++ b/Kooboo.Web/DashBoard/MyVisitor/FrontVisitors.cs
@@ -35,9 +35,9 @@ namespace Kooboo.Web.DashBoard.MyVisitor
             var logs = DashBoardHelper.GetLogs(Context); 
               
             SiteVisitorModel model = new SiteVisitorModel();
-            if (logs.Count() > 0)
+            if (logs.Any())
             {
-                model.Total = logs.Count();
+                model.Total = logs.Count;
                 model.Ips = logs.GroupBy(o => o.ClientIP).Count();
                 model.Pages = logs.GroupBy(o => o.ObjectId).Count();
                 model.AvgSize = (int)(logs.Average(o => o.Size) / 1024);
diff --git a/Kooboo.Web/JsTest/JsTestHelper.cs b/Kooboo.Web/JsTest/JsTestHelper.cs
index ced6b9a1..99824196 100644
--- a/Kooboo.Web/JsTest/JsTestHelper.cs
+++ b/Kooboo.Web/JsTest/JsTestHelper.cs
@@ -175,7 +175,7 @@ namespace Kooboo.Web.JsTest
             foreach (var file in allfiles)
             {
                 var funcs = ListFileFunctions(context, option, file.Folder, file.file);
-                count += funcs.Count();
+                count += funcs.Count;
             }
             return count;
         }
@@ -417,7 +417,7 @@ namespace Kooboo.Web.JsTest
 
             var prog = parser.Parse(requireJsBlock);
 
-            if (prog != null && prog.Body.Count() > 0)
+            if (prog != null && prog.Body.Any())
             {
 
                 var item = prog.Body.First();
@@ -428,16 +428,13 @@ namespace Kooboo.Web.JsTest
 
                     if (expres.Expression is Jint.Parser.Ast.CallExpression)
                     {
-                        var call = expres.Expression as Jint.Parser.Ast.CallExpression;
-                        if (call !=null && call.Arguments.Count() ==2)
+                        if (expres.Expression is Jint.Parser.Ast.CallExpression call && call.Arguments.Count() == 2)
                         {
                             var requireargu = call.Arguments[1];
 
-                            if (requireargu !=null && requireargu is Jint.Parser.Ast.FunctionExpression)
+                            if (requireargu is Jint.Parser.Ast.FunctionExpression)
                             {
-                                var requireFunc = requireargu as Jint.Parser.Ast.FunctionExpression; 
-                                 
-                                if (requireFunc !=null)
+                                if (requireargu is Jint.Parser.Ast.FunctionExpression requireFunc)
                                 {
                                     return requireFunc.FunctionDeclarations.ToList(); 
                                 }
diff --git a/Kooboo.Web/JsTest/JsTestOption.cs b/Kooboo.Web/JsTest/JsTestOption.cs
index f159e863..509d9bb4 100644
--- a/Kooboo.Web/JsTest/JsTestOption.cs
+++ b/Kooboo.Web/JsTest/JsTestOption.cs
@@ -13,7 +13,7 @@ namespace Kooboo.Web.JsTest
        
         public string GetDiskRoot(RenderContext request)
         {
-            if (request != null && request.WebSite != null && !string.IsNullOrEmpty(request.WebSite.LocalRootPath))
+            if (request?.WebSite != null && !string.IsNullOrEmpty(request.WebSite.LocalRootPath))
             {
                 return request.WebSite.LocalRootPath;
             } 
diff --git a/Kooboo.Web/Module/ModuleApiHelper.cs b/Kooboo.Web/Module/ModuleApiHelper.cs
index 1ce27d9c..6eae733d 100644
--- a/Kooboo.Web/Module/ModuleApiHelper.cs
+++ b/Kooboo.Web/Module/ModuleApiHelper.cs
@@ -37,8 +37,7 @@ namespace Kooboo.Module
 
             if (type != null)
             {
-                var instance = CreateInstance(type, call.Context) as ISiteModuleApi; 
-                if (instance !=null)
+                if (CreateInstance(type, call.Context) is ISiteModuleApi instance)
                 {
                     method = GetMethod(instance, call.Command.Method, call); 
                     if (method !=null)
@@ -54,8 +53,7 @@ namespace Kooboo.Module
 
                 if (commandtype !=null)
                 {
-                    var instance = CreateInstance(commandtype, call.Context) as ISiteModuleApi;
-                    if (instance != null)
+                    if (CreateInstance(type, call.Context) is ISiteModuleApi instance)
                     {
                         method = GetMethod(instance, call.Command.Value, call);
                         if (method != null)
@@ -159,17 +157,11 @@ namespace Kooboo.Module
             {
                 //assign the site DB and init method...
                 PropertyInfo propertyInfo = objtype.GetProperty("WebSite");
-                if (propertyInfo != null)
-                {
-                    propertyInfo.SetValue(obj, context.WebSite);
-                }
+                propertyInfo?.SetValue(obj, context.WebSite);
                 // invoke init...  
                 MethodInfo methodInfo = objtype.GetMethod("init");
 
-                if (methodInfo != null)
-                {
-                    methodInfo.Invoke(obj, null);
-                }
+                methodInfo?.Invoke(obj, null);
             }
         }
 
diff --git a/Kooboo.Web/Service/AdminLogService.cs b/Kooboo.Web/Service/AdminLogService.cs
index ad84062f..2b236763 100644
--- a/Kooboo.Web/Service/AdminLogService.cs
+++ b/Kooboo.Web/Service/AdminLogService.cs
@@ -105,7 +105,7 @@ namespace Kooboo.Web.Service
 
         public static void AddAdminLog(Kooboo.Data.Context.RenderContext context, RenderRespnose response)
         {
-            if (response != null && response.ContentType != null && response.ContentType.ToLower().Contains("html"))
+            if (response?.ContentType != null && response.ContentType.ToLower().Contains("html"))
             {
                 BackendLog model = new BackendLog();
                 model.IP = context.Request.IP;
