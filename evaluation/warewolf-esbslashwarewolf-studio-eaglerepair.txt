Found the following rules to apply: UseMethodAnyRewriterR6, MergeSequentialChecksRewriterR2, NullChecksShouldNotBeUsedWithIsRewriterR3, SimplifyLinqRewriterR4, TypeCheckAndCastRewriterR5, UseNullPropagationRewriterR7, UsePatternMatchingRewriterR8, UseStringInterpolationRewriterR9, UseStringIsNullOrEmptyRewriterR10



Project: Dev2.CustomControls
    #1 Path: D:\a\1\s\Dev\Dev2.CustomControls\Converters\RowToIndexConverter.cs, Line: 28, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html



--- Rules Summary ---
R8: 1

--- Summary ---
Fixed ReSharper issues: 1
Fixed SonarQube issues: 0
Total fixed issues: 1

Finished in: 1 min 10 s

######################################################################
Nr: 1 - UsePatternMatchingRewriterR8
Filepath: D:\a\1\s\Dev\Dev2.Studio\AppResources\Behaviors\TabGroupPaneBindingBehavior.cs
Description: Error: The created Syntax Tree is semantically incorrect.
------------------------------------------------------------------------
---- Original Tree ----
using System.Collections.Generic;
using System.Linq;
using System.Windows;
using System.Windows.Input;
using System.Windows.Interactivity;
using Dev2.Studio.Core.AppResources.ExtensionMethods;
using Dev2.Studio.ViewModels;
using Dev2.Studio.ViewModels.WorkSurface;
using Infragistics.Windows.DockManager;


namespace Dev2.Studio.AppResources.Behaviors
{
    public class TabGroupPaneBindingBehavior : Behavior<TabGroupPane>
    {
        #region Private Methods
        
        List<TabGroupPane> GetAllTabGroupPanes()
        {
            _tabGroupPanes = new List<TabGroupPane>();
            _tabGroupPanes.AddRange(DocumentHost.GetDescendents().OfType<TabGroupPane>());
            return _tabGroupPanes;
        }

        #endregion Private Methods


        #region DocumentHost

        // Using a DependencyProperty as the backing store for ItemTemplate.  This enables animation, styling, binding, etc...
        public static readonly DependencyProperty DocumentHostProperty =
            DependencyProperty.Register("DocumentHost", typeof(DocumentContentHost), typeof(TabGroupPaneBindingBehavior), new PropertyMetadata(null, DocumentHostChangedCallback));

        public DocumentContentHost DocumentHost
        {
            get => (DocumentContentHost)GetValue(DocumentHostProperty);
            set => SetValue(DocumentHostProperty, value);
        }

        static void DocumentHostChangedCallback(DependencyObject dependencyObject, DependencyPropertyChangedEventArgs e)
        {
            if (!(dependencyObject is TabGroupPaneBindingBehavior itemsControlBindingBehavior))
            {
                return;
            }

            if (e.NewValue is DocumentContentHost newValue)
            {
                newValue.ActiveDocumentChanged -= itemsControlBindingBehavior.DocumentHostOnActiveDocumentChanged;
                newValue.ActiveDocumentChanged += itemsControlBindingBehavior.DocumentHostOnActiveDocumentChanged;
                newValue.PreviewMouseLeftButtonDown -= itemsControlBindingBehavior.NewValueOnPreviewMouseLeftButtonDown;
                newValue.PreviewMouseLeftButtonDown += itemsControlBindingBehavior.NewValueOnPreviewMouseLeftButtonDown;
            }
        }

        void NewValueOnPreviewMouseLeftButtonDown(object sender, MouseButtonEventArgs mouseButtonEventArgs)
        {
            var host = sender as DocumentContentHost;
            var workSurfaceContextViewModel = host?.ActiveDocument?.DataContext as WorkSurfaceContextViewModel;

            if (_shellViewModel != null && _shellViewModel.ActiveItem != workSurfaceContextViewModel)
            {
                _shellViewModel.ActiveItem = workSurfaceContextViewModel;
            }
        }

        #endregion DocumentHost

        static List<TabGroupPane> _tabGroupPanes;
        ShellViewModel _shellViewModel;

        void ActiveItemChanged(IWorkSurfaceContextViewModel workSurfaceContextViewModel)
        {
            if (_tabGroupPanes == null || _tabGroupPanes.Count <= 0)
            {
                _tabGroupPanes = GetAllTabGroupPanes();
            }

            SetActivePane(workSurfaceContextViewModel);
        }


        static void GotFocusHandler(object sender, RoutedEventArgs routedEventArgs)
        {
            RefreshActiveEnvironment(sender);
            routedEventArgs.Handled = true;
        }

        static void RefreshActiveEnvironment(object sender)
        {
            var frameworkElement = sender as FrameworkElement;
            var vm = frameworkElement?.DataContext as ShellViewModel;
            vm?.RefreshActiveServer();
        }

        #region Event Handlers

        void DocumentHostOnActiveDocumentChanged(object sender, RoutedPropertyChangedEventArgs<ContentPane> routedPropertyChangedEventArgs)
        {
            if (DocumentHost?.DataContext is ShellViewModel mainViewModel)
            {
                if (_shellViewModel == null)
                {
                    _shellViewModel = mainViewModel;
                    _shellViewModel.ActiveItemChanged = ActiveItemChanged;
                }

                var workSurfaceContextViewModel = routedPropertyChangedEventArgs.NewValue?.DataContext as WorkSurfaceContextViewModel;
                _shellViewModel.ActiveItemChanged = null;
                _shellViewModel.ActiveItem = workSurfaceContextViewModel;
                if (workSurfaceContextViewModel != null)
                {
                    _shellViewModel.PersistTabs();
                }
                _shellViewModel.ActiveItemChanged = ActiveItemChanged;
            }
        }

        static void SetActivePane(IWorkSurfaceContextViewModel newValue)
        {
            if (_tabGroupPanes != null && _tabGroupPanes.Count > 0)
            {
                var tabGroupPane = _tabGroupPanes[0];

                foreach (var item in from object item in tabGroupPane.Items
                                     let frameworkElement = item as FrameworkElement
                                     where frameworkElement != null && frameworkElement.DataContext == newValue
                                     select item)
                {
                    if (tabGroupPane.SelectedItem != item)
                    {
                        tabGroupPane.SelectedItem = item;
                        break;
                    }
                }
                FocusManager.AddGotFocusHandler(tabGroupPane, GotFocusHandler);
            }
        }

        #endregion Event Handlers
    }
}

---- Transformed Tree ----
using System.Collections.Generic;
using System.Linq;
using System.Windows;
using System.Windows.Input;
using System.Windows.Interactivity;
using Dev2.Studio.Core.AppResources.ExtensionMethods;
using Dev2.Studio.ViewModels;
using Dev2.Studio.ViewModels.WorkSurface;
using Infragistics.Windows.DockManager;


namespace Dev2.Studio.AppResources.Behaviors
{
    public class TabGroupPaneBindingBehavior : Behavior<TabGroupPane>
    {
        #region Private Methods
        
        List<TabGroupPane> GetAllTabGroupPanes()
        {
            _tabGroupPanes = new List<TabGroupPane>();
            _tabGroupPanes.AddRange(DocumentHost.GetDescendents().OfType<TabGroupPane>());
            return _tabGroupPanes;
        }

        #endregion Private Methods


        #region DocumentHost

        // Using a DependencyProperty as the backing store for ItemTemplate.  This enables animation, styling, binding, etc...
        public static readonly DependencyProperty DocumentHostProperty =
            DependencyProperty.Register("DocumentHost", typeof(DocumentContentHost), typeof(TabGroupPaneBindingBehavior), new PropertyMetadata(null, DocumentHostChangedCallback));

        public DocumentContentHost DocumentHost
        {
            get => (DocumentContentHost)GetValue(DocumentHostProperty);
            set => SetValue(DocumentHostProperty, value);
        }

        static void DocumentHostChangedCallback(DependencyObject dependencyObject, DependencyPropertyChangedEventArgs e)
        {
            if (!(dependencyObject is TabGroupPaneBindingBehavior itemsControlBindingBehavior))
            {
                return;
            }

            if (e.NewValue is DocumentContentHost newValue)
            {
                newValue.ActiveDocumentChanged -= itemsControlBindingBehavior.DocumentHostOnActiveDocumentChanged;
                newValue.ActiveDocumentChanged += itemsControlBindingBehavior.DocumentHostOnActiveDocumentChanged;
                newValue.PreviewMouseLeftButtonDown -= itemsControlBindingBehavior.NewValueOnPreviewMouseLeftButtonDown;
                newValue.PreviewMouseLeftButtonDown += itemsControlBindingBehavior.NewValueOnPreviewMouseLeftButtonDown;
            }
        }

        void NewValueOnPreviewMouseLeftButtonDown(object sender, MouseButtonEventArgs mouseButtonEventArgs)
        {
            var host = sender as DocumentContentHost;
            var workSurfaceContextViewModel = host?.ActiveDocument?.DataContext as WorkSurfaceContextViewModel;

            if (_shellViewModel != null && _shellViewModel.ActiveItem != workSurfaceContextViewModel)
            {
                _shellViewModel.ActiveItem = workSurfaceContextViewModel;
            }
        }

        #endregion DocumentHost

        static List<TabGroupPane> _tabGroupPanes;
        ShellViewModel _shellViewModel;

        void ActiveItemChanged(IWorkSurfaceContextViewModel workSurfaceContextViewModel)
        {
            if (_tabGroupPanes == null || _tabGroupPanes.Count <= 0)
            {
                _tabGroupPanes = GetAllTabGroupPanes();
            }

            SetActivePane(workSurfaceContextViewModel);
        }


        static void GotFocusHandler(object sender, RoutedEventArgs routedEventArgs)
        {
            RefreshActiveEnvironment(sender);
            routedEventArgs.Handled = true;
        }

        static void RefreshActiveEnvironment(object sender)
        {
            var frameworkElement = sender as FrameworkElement;
            var vm = frameworkElement?.DataContext as ShellViewModel;
            vm?.RefreshActiveServer();
        }

        #region Event Handlers

        void DocumentHostOnActiveDocumentChanged(object sender, RoutedPropertyChangedEventArgs<ContentPane> routedPropertyChangedEventArgs)
        {
            if (DocumentHost?.DataContext is ShellViewModel mainViewModel)
            {
                if (_shellViewModel == null)
                {
                    _shellViewModel = mainViewModel;
                    _shellViewModel.ActiveItemChanged = ActiveItemChanged;
                }
                _shellViewModel.ActiveItemChanged = null;
                _shellViewModel.ActiveItem = workSurfaceContextViewModel;

                if (routedPropertyChangedEventArgs.NewValue?.DataContext is WorkSurfaceContextViewModel workSurfaceContextViewModel)
                {
                    _shellViewModel.PersistTabs();
                }
                _shellViewModel.ActiveItemChanged = ActiveItemChanged;
            }
        }

        static void SetActivePane(IWorkSurfaceContextViewModel newValue)
        {
            if (_tabGroupPanes != null && _tabGroupPanes.Count > 0)
            {
                var tabGroupPane = _tabGroupPanes[0];

                foreach (var item in from object item in tabGroupPane.Items
                                     let frameworkElement = item as FrameworkElement
                                     where frameworkElement != null && frameworkElement.DataContext == newValue
                                     select item)
                {
                    if (tabGroupPane.SelectedItem != item)
                    {
                        tabGroupPane.SelectedItem = item;
                        break;
                    }
                }
                FocusManager.AddGotFocusHandler(tabGroupPane, GotFocusHandler);
            }
        }

        #endregion Event Handlers
    }
}

---- Semantic diagnostics *before* transformation ----

---- Semantic diagnostics *after* transformation ----
D:\a\1\s\Dev\Dev2.Studio\AppResources\Behaviors\TabGroupPaneBindingBehavior.cs(119,46): error CS0841: Cannot use local variable 'workSurfaceContextViewModel' before it is declared
######################################################################


######################################################################
Nr: 2 - UsePatternMatchingRewriterR8
Filepath: D:\a\1\s\Dev\Dev2.Studio\Dock\ContentPaneFactory.cs
Description: Error: The created Syntax Tree is semantically incorrect.
------------------------------------------------------------------------
---- Original Tree ----
using System;
using System.Collections;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Input;
using Caliburn.Micro;
using Dev2.Studio.Interfaces;
using Dev2.Studio.ViewModels;
using Dev2.Studio.ViewModels.Workflow;
using Dev2.Studio.ViewModels.WorkSurface;
using Dev2.Workspaces;
using Infragistics;
using Infragistics.Windows.DockManager;
using Infragistics.Windows.DockManager.Events;


namespace Dev2.Studio.Dock
{
    public class ContentPaneFactory : ContainerFactory
    {
        DependencyObject _target;

        static ContentPaneFactory()
        {
            ContainerTypeProperty.OverrideMetadata(typeof(ContentPaneFactory), new FrameworkPropertyMetadata(typeof(ContentPane)));
        }
        
        protected override void ClearContainerForItem(DependencyObject container, object item)
        {
            if (container is ContentPane pane)
            {
                pane.Closed -= OnPaneClosed;
                pane.Closing -= OnPaneClosing;
            }

            base.ClearContainerForItem(container, item);
        }
        
        protected sealed override void OnItemInserted(DependencyObject container, object item, int index)
        {
            AddPane((ContentPane)container);
        }
        
        protected sealed override void OnItemMoved(DependencyObject container, object item, int oldIndex, int newIndex)
        {
        }
        
        protected sealed override void OnItemRemoved(DependencyObject container, object oldItem)
        {
            RemovePane((ContentPane)container);
        }
        
        protected override void PrepareContainerForItem(DependencyObject container, object item)
        {
             BindingHelper.BindPath(container, item, HeaderPath, HeaderedContentControl.HeaderProperty);
            BindingHelper.BindPath(container, item, ContentPath, ContentControl.ContentProperty);
            BindingHelper.BindPath(container, item, TabHeaderPath, ContentPane.TabHeaderProperty);

            base.PrepareContainerForItem(container, item);

            var pane = container as ContentPane;

            SetTabName(pane, item);
            
            if(pane != null)
            {
                pane.PreviewLostKeyboardFocus += pane_PreviewLostKeyboardFocus;
                pane.PreviewGotKeyboardFocus += pane_PreviewLostKeyboardFocus;
                pane.PreviewMouseDown+=PaneOnPreviewMouseDown;
                pane.Closed += OnPaneClosed;
                pane.Closing += OnPaneClosing;
                
                if (item is WorkSurfaceContextViewModel model)
                {
                    var vm = model;
                    vm.Deactivated += ViewModelDeactivated;
                }


                if (RemoveItemOnClose)
                {
                    var cv = CollectionViewSource.GetDefaultView(ItemsSource) as IEditableCollectionView;

                    pane.CloseAction = PaneCloseAction.RemovePane;

                    if(null == cv || !cv.CanRemove)
                    {
                        pane.AllowClose = false;
                    }
                }
            }
        }

        void PaneOnPreviewMouseDown(object sender, MouseButtonEventArgs mouseButtonEventArgs)
        {
            var mvm = Application.Current.MainWindow.DataContext as ShellViewModel;
            if (mvm?.ActiveItem != null)
            {
                var item = sender as ContentPane;
                var workSurfaceContextViewModel = item?.DataContext as WorkSurfaceContextViewModel;
                if (mvm.ActiveItem != workSurfaceContextViewModel)
                {
                    mvm.ActiveItem = workSurfaceContextViewModel;
                }
            }
        }

        void pane_PreviewLostKeyboardFocus(object sender, KeyboardFocusChangedEventArgs e)
        {

            if (sender is ContentPane contentPane)
            {
                var tabGroupPane = contentPane.Parent as TabGroupPane;
                var splitPane = tabGroupPane?.Parent as SplitPane;
                if (splitPane?.Parent is PaneToolWindow paneToolWindow && string.IsNullOrWhiteSpace(paneToolWindow.Title))
                {
                    var hasMainWindow = Application.Current != null && Application.Current.MainWindow != null;
                    if (hasMainWindow && Application.Current.MainWindow.DataContext != null && Application.Current.MainWindow.DataContext is ShellViewModel mainViewModel)
                    {
                        paneToolWindow.Title = mainViewModel.DisplayName;
                    }
                }
            }
        }

        void ViewModelDeactivated(object sender, DeactivationEventArgs e)
        {
            if (e.WasClosed && _target is TabGroupPane container && sender is WorkSurfaceContextViewModel model)
            {
                var toRemove = container.Items.Cast<ContentPane>().ToList()
                    .FirstOrDefault(p => p.Content != null && p.Content == model.WorkSurfaceViewModel);

                if (toRemove != null)
                {
                    RemovePane(toRemove);
                }
                if (toRemove != null &&
                    Application.Current != null &&
                    !Application.Current.Dispatcher.HasShutdownStarted)
                {
                    container.Items.Remove(toRemove);
                }
            }


        }

        void SetTabName(ContentPane pane, object item)
        {
            if (item is WorkSurfaceContextViewModel model)
            {
                var vm = model;
                pane.Name = vm.WorkSurfaceKey.ToString();
            }
            else
            {
                pane.Name = item.ToString();
            }
        }

        protected sealed override void ValidateContainerType(Type elementType)
        {
            if(!typeof(ContentPane).IsAssignableFrom(elementType))
            {
                throw new ArgumentException("ContainerType must be a ContentPane or a derived class.");
            }
            base.ValidateContainerType(elementType);
        }
        public static readonly DependencyProperty ContentPathProperty = DependencyProperty.Register("ContentPath",
            typeof(string), typeof(ContentPaneFactory), new FrameworkPropertyMetadata(null));
        
        [Description("Returns or sets the path to the property on the underlying item that should be used to provide the Content for the ContentPane.")]
        [Category("Behavior")]
        [Bindable(true)]
        public string ContentPath
        {
            get
            {
                return (string)GetValue(ContentPathProperty);
            }
            set
            {
                SetValue(ContentPathProperty, value);
            }
        }
        
        public static readonly DependencyProperty HeaderPathProperty = DependencyProperty.Register("HeaderPath",
            typeof(string), typeof(ContentPaneFactory), new FrameworkPropertyMetadata(null));
        
        [Description("Returns or sets the path to the property on the underlying item that should be used to provide the Header for the ContentPane.")]
        [Category("Behavior")]
        [Bindable(true)]
        public string HeaderPath
        {
            get
            {
                return (string)GetValue(HeaderPathProperty);
            }
            set
            {
                SetValue(HeaderPathProperty, value);
            }
        }
        
        public static readonly DependencyProperty PaneFactoryProperty =
            DependencyProperty.RegisterAttached("PaneFactory", typeof(ContentPaneFactory), typeof(ContentPaneFactory),
                new FrameworkPropertyMetadata(null,
                    OnPaneFactoryChanged));

        [AttachedPropertyBrowsableForType(typeof(DocumentContentHost))]
        [AttachedPropertyBrowsableForType(typeof(TabGroupPane))]
        [AttachedPropertyBrowsableForType(typeof(SplitPane))]
        public static ContentPaneFactory GetPaneFactory(DependencyObject d) => (ContentPaneFactory)d.GetValue(PaneFactoryProperty);

        public static void SetPaneFactory(DependencyObject d, ContentPaneFactory value)
        {
            d.SetValue(PaneFactoryProperty, value);
        }

        static void OnPaneFactoryChanged(DependencyObject d, DependencyPropertyChangedEventArgs e)
        {
            if (d is DocumentContentHost || d is TabGroupPane || d is SplitPane)
            {
                var oldFactory = (ContentPaneFactory)e.OldValue;
                var newFactory = (ContentPaneFactory)e.NewValue;

                if (oldFactory != null && oldFactory.Equals(newFactory))
                {
                    return;
                }

                if (oldFactory != null)
                {
                    oldFactory._target = null;

                    foreach (var o in oldFactory.GetElements())
                    {
                        var cp = (ContentPane)o;
                        oldFactory.RemovePane(cp);
                    }
                }

                if (newFactory != null)
                {
                    newFactory._target = d;

                    foreach (var o in newFactory.GetElements())
                    {
                        var cp = (ContentPane)o;
                        newFactory.AddPane(cp);
                    }
                }
            }
        }

        public static readonly DependencyProperty RemoveItemOnCloseProperty = DependencyProperty.Register("RemoveItemOnClose",
            typeof(bool), typeof(ContentPaneFactory), new FrameworkPropertyMetadata(KnownBoxes.TrueBox));
        
        [Description("Returns or sets a boolean indicating whether to remove the item when the pane was closed.")]
        [Category("Behavior")]
        [Bindable(true)]
        public bool RemoveItemOnClose
        {
            get
            {
                return (bool)GetValue(RemoveItemOnCloseProperty);
            }
            set
            {
                SetValue(RemoveItemOnCloseProperty, value);
            }
        }
        
        public static readonly DependencyProperty TabHeaderPathProperty = DependencyProperty.Register("TabHeaderPath",
            typeof(string), typeof(ContentPaneFactory), new FrameworkPropertyMetadata(null));
        
        [Description("Returns or sets the path to the property on the underlying item that should be used to provide the TabHeader for the ContentPane.")]
        [Category("Behavior")]
        [Bindable(true)]
        public string TabHeaderPath
        {
            get
            {
                return (string)GetValue(TabHeaderPathProperty);
            }
            set
            {
                SetValue(TabHeaderPathProperty, value);
            }
        }
        
        protected virtual void AddPane(ContentPane pane)
        {
            if (_target is DocumentContentHost host)
            {
                var sibling = GetSiblingDocument();
                TabGroupPane tgp = null;

                if (sibling != null)
                {
                    tgp = LogicalTreeHelper.GetParent(sibling) as TabGroupPane;
                    Debug.Assert(null != tgp, "Expected all documents to be within a tab group pane.");
                }

                if (null == tgp)
                {
                    var sp = new SplitPane();
                    tgp = new TabGroupPane { Name = "Z" + Guid.NewGuid().ToString("N") };
                    sp.Panes.Add(tgp);
                    var dch = host;
                    dch.Panes.Add(sp);
                }

                tgp.Items.Add(pane);
                RaiseInitializeContentPane(pane);
            }
            else
            {
                IList targetCollection = null;

                Debug.Assert(_target == null || !string.IsNullOrEmpty((string)_target.GetValue(FrameworkElement.NameProperty)),
                    "The Name should be set so the container will not be removed when all the panes have been moved elsewhere. Otherwise new panes may not be displayed.");

                if (_target is SplitPane splitPane)
                {
                    targetCollection = splitPane.Panes;
                }
                else
                {
                    if (_target is TabGroupPane target)
                    {
                        targetCollection = target.Items;
                    }
                }

                if (null != targetCollection)
                {
                    targetCollection.Add(pane);

                    RaiseInitializeContentPane(pane);
                }
            }
        }

        ContentPane GetSiblingDocument()
        {
            var dch = _target as DocumentContentHost;

            if (dch == null)
            {
                return null;
            }

            if (null != dch.ActiveDocument)
            {
                return dch.ActiveDocument;
            }

            var dm = XamDockManager.GetDockManager(dch);

            if (dm == null)
            {
                return null;
            }

            ContentPane firstDocument = null;

            foreach (ContentPane cp in dm.GetPanes(PaneNavigationOrder.VisibleOrder))
            {
                if (cp.PaneLocation != PaneLocation.Document)
                {
                    continue;
                }

                if (firstDocument == null)
                {
                    firstDocument = cp;
                }

                if (cp.Visibility != Visibility.Visible)
                {
                    continue;
                }

                return cp;
            }

            return firstDocument;
        }

        public void OnPaneClosing(object sender, PaneClosingEventArgs e)
        {
            if (sender is ContentPane contentPane)
            {
                var pane = contentPane;

                if (pane.DataContext is WorkSurfaceContextViewModel model)
                {
                    CloseCurrentWorkSurfaceWorkflowDesignerViewModel(e, model);
                }
            }
        }

        static void CloseCurrentWorkSurfaceWorkflowDesignerViewModel(PaneClosingEventArgs e, WorkSurfaceContextViewModel model)
        {
            var workflowVm = model.WorkSurfaceViewModel as IWorkflowDesignerViewModel;
            var resource = workflowVm?.ResourceModel;

            if (resource != null && !resource.IsWorkflowSaved)
            {
                CloseCurrent(e, model);
            }
            else
            {
                if (model.WorkSurfaceViewModel is IStudioTab sourceView)
                {
                    CloseCurrent(e, model);
                }
            }
        }

        static void CloseCurrent(PaneClosingEventArgs e, WorkSurfaceContextViewModel model)
        {
            var vm = model;
            vm.TryClose();
            if (vm.Parent is ShellViewModel mainVm && !mainVm.CloseCurrent)
            {
                e.Cancel = true;
            }

        }


        void OnPaneClosed(object sender, PaneClosedEventArgs e)
        {
            if (sender is ContentPane pane && IsContainerInUse(pane) && pane.CloseAction == PaneCloseAction.RemovePane)
            {
                var cv = CollectionViewSource.GetDefaultView(ItemsSource) as IEditableCollectionView;

                Debug.Assert(cv != null && cv.CanRemove, "The ContentPane is being removed from the XamDockManager but it is still referenced by the source collection and it is not possible to remove it from the source collection.");

                if (cv != null && cv.CanRemove)
                {
                    var dataItem = GetItemForContainer(pane);
                    cv.Remove(dataItem);
                    var item = pane.Content as WorkflowDesignerViewModel;
                    if (item?.ResourceModel != null)
                    {
                        WorkspaceItemRepository.Instance.Remove(item.ResourceModel);
                    }

                    item?.RemoveUnsavedWorkflowName(item.DisplayName);
                }
            }
        }

        void RaiseInitializeContentPane(ContentPane pane)
        {
            if (null == _target)
            {
                return;
            }

            var args = new InitializeContentPaneEventArgs(pane) { RoutedEvent = InitializeContentPaneEvent };
            UiElementHelper.RaiseEvent(_target, args);
        }

        protected virtual void RemovePane(ContentPane cp)
        {
            var closeProp = ContentPane.CloseActionProperty;
            if (cp == null)
            {
                return;
            }

            var oldValue = cp.ReadLocalValue(closeProp);
            BindingExpressionBase oldExpression = cp.GetBindingExpression(closeProp);

            cp.CloseAction = PaneCloseAction.RemovePane;
            
            if(oldExpression != null)
            {
                cp.SetBinding(closeProp, oldExpression.ParentBindingBase);
            }
            else if(oldValue == DependencyProperty.UnsetValue)
            {
                cp.ClearValue(closeProp);
            }
            else
            {
                cp.SetValue(closeProp, oldValue);
            }
            cp.PreviewMouseDown -= PaneOnPreviewMouseDown;
        }
        
        public static readonly RoutedEvent InitializeContentPaneEvent = EventManager.RegisterRoutedEvent("InitializeContentPane",
            RoutingStrategy.Direct, typeof(EventHandler<InitializeContentPaneEventArgs>), typeof(ContentPaneFactory));


    }
    
    public class InitializeContentPaneEventArgs : RoutedEventArgs
    {
        readonly ContentPane _pane;
        
        public InitializeContentPaneEventArgs(ContentPane pane)
        {
            _pane = pane ?? throw new ArgumentNullException(nameof(pane));
        }
                
        public ContentPane Pane => _pane;
    }
}

---- Transformed Tree ----
using System;
using System.Collections;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Input;
using Caliburn.Micro;
using Dev2.Studio.Interfaces;
using Dev2.Studio.ViewModels;
using Dev2.Studio.ViewModels.Workflow;
using Dev2.Studio.ViewModels.WorkSurface;
using Dev2.Workspaces;
using Infragistics;
using Infragistics.Windows.DockManager;
using Infragistics.Windows.DockManager.Events;


namespace Dev2.Studio.Dock
{
    public class ContentPaneFactory : ContainerFactory
    {
        DependencyObject _target;

        static ContentPaneFactory()
        {
            ContainerTypeProperty.OverrideMetadata(typeof(ContentPaneFactory), new FrameworkPropertyMetadata(typeof(ContentPane)));
        }
        
        protected override void ClearContainerForItem(DependencyObject container, object item)
        {
            if (container is ContentPane pane)
            {
                pane.Closed -= OnPaneClosed;
                pane.Closing -= OnPaneClosing;
            }

            base.ClearContainerForItem(container, item);
        }
        
        protected sealed override void OnItemInserted(DependencyObject container, object item, int index)
        {
            AddPane((ContentPane)container);
        }
        
        protected sealed override void OnItemMoved(DependencyObject container, object item, int oldIndex, int newIndex)
        {
        }
        
        protected sealed override void OnItemRemoved(DependencyObject container, object oldItem)
        {
            RemovePane((ContentPane)container);
        }
        
        protected override void PrepareContainerForItem(DependencyObject container, object item)
        {
             BindingHelper.BindPath(container, item, HeaderPath, HeaderedContentControl.HeaderProperty);
            BindingHelper.BindPath(container, item, ContentPath, ContentControl.ContentProperty);
            BindingHelper.BindPath(container, item, TabHeaderPath, ContentPane.TabHeaderProperty);

            base.PrepareContainerForItem(container, item);

            var pane = container as ContentPane;

            SetTabName(pane, item);
            
            if(pane != null)
            {
                pane.PreviewLostKeyboardFocus += pane_PreviewLostKeyboardFocus;
                pane.PreviewGotKeyboardFocus += pane_PreviewLostKeyboardFocus;
                pane.PreviewMouseDown+=PaneOnPreviewMouseDown;
                pane.Closed += OnPaneClosed;
                pane.Closing += OnPaneClosing;
                
                if (item is WorkSurfaceContextViewModel model)
                {
                    var vm = model;
                    vm.Deactivated += ViewModelDeactivated;
                }


                if (RemoveItemOnClose)
                {
                    var cv = CollectionViewSource.GetDefaultView(ItemsSource) as IEditableCollectionView;

                    pane.CloseAction = PaneCloseAction.RemovePane;

                    if(null == cv || !cv.CanRemove)
                    {
                        pane.AllowClose = false;
                    }
                }
            }
        }

        void PaneOnPreviewMouseDown(object sender, MouseButtonEventArgs mouseButtonEventArgs)
        {
            var mvm = Application.Current.MainWindow.DataContext as ShellViewModel;
            if (mvm?.ActiveItem != null)
            {
                var item = sender as ContentPane;
                var workSurfaceContextViewModel = item?.DataContext as WorkSurfaceContextViewModel;
                if (mvm.ActiveItem != workSurfaceContextViewModel)
                {
                    mvm.ActiveItem = workSurfaceContextViewModel;
                }
            }
        }

        void pane_PreviewLostKeyboardFocus(object sender, KeyboardFocusChangedEventArgs e)
        {

            if (sender is ContentPane contentPane)
            {
                var tabGroupPane = contentPane.Parent as TabGroupPane;
                var splitPane = tabGroupPane?.Parent as SplitPane;
                if (splitPane?.Parent is PaneToolWindow paneToolWindow && string.IsNullOrWhiteSpace(paneToolWindow.Title))
                {
                    var hasMainWindow = Application.Current != null && Application.Current.MainWindow != null;
                    if (hasMainWindow && Application.Current.MainWindow.DataContext != null && Application.Current.MainWindow.DataContext is ShellViewModel mainViewModel)
                    {
                        paneToolWindow.Title = mainViewModel.DisplayName;
                    }
                }
            }
        }

        void ViewModelDeactivated(object sender, DeactivationEventArgs e)
        {
            if (e.WasClosed && _target is TabGroupPane container && sender is WorkSurfaceContextViewModel model)
            {
                var toRemove = container.Items.Cast<ContentPane>().ToList()
                    .FirstOrDefault(p => p.Content != null && p.Content == model.WorkSurfaceViewModel);

                if (toRemove != null)
                {
                    RemovePane(toRemove);
                }
                if (toRemove != null &&
                    Application.Current != null &&
                    !Application.Current.Dispatcher.HasShutdownStarted)
                {
                    container.Items.Remove(toRemove);
                }
            }


        }

        void SetTabName(ContentPane pane, object item)
        {
            if (item is WorkSurfaceContextViewModel model)
            {
                var vm = model;
                pane.Name = vm.WorkSurfaceKey.ToString();
            }
            else
            {
                pane.Name = item.ToString();
            }
        }

        protected sealed override void ValidateContainerType(Type elementType)
        {
            if(!typeof(ContentPane).IsAssignableFrom(elementType))
            {
                throw new ArgumentException("ContainerType must be a ContentPane or a derived class.");
            }
            base.ValidateContainerType(elementType);
        }
        public static readonly DependencyProperty ContentPathProperty = DependencyProperty.Register("ContentPath",
            typeof(string), typeof(ContentPaneFactory), new FrameworkPropertyMetadata(null));
        
        [Description("Returns or sets the path to the property on the underlying item that should be used to provide the Content for the ContentPane.")]
        [Category("Behavior")]
        [Bindable(true)]
        public string ContentPath
        {
            get
            {
                return (string)GetValue(ContentPathProperty);
            }
            set
            {
                SetValue(ContentPathProperty, value);
            }
        }
        
        public static readonly DependencyProperty HeaderPathProperty = DependencyProperty.Register("HeaderPath",
            typeof(string), typeof(ContentPaneFactory), new FrameworkPropertyMetadata(null));
        
        [Description("Returns or sets the path to the property on the underlying item that should be used to provide the Header for the ContentPane.")]
        [Category("Behavior")]
        [Bindable(true)]
        public string HeaderPath
        {
            get
            {
                return (string)GetValue(HeaderPathProperty);
            }
            set
            {
                SetValue(HeaderPathProperty, value);
            }
        }
        
        public static readonly DependencyProperty PaneFactoryProperty =
            DependencyProperty.RegisterAttached("PaneFactory", typeof(ContentPaneFactory), typeof(ContentPaneFactory),
                new FrameworkPropertyMetadata(null,
                    OnPaneFactoryChanged));

        [AttachedPropertyBrowsableForType(typeof(DocumentContentHost))]
        [AttachedPropertyBrowsableForType(typeof(TabGroupPane))]
        [AttachedPropertyBrowsableForType(typeof(SplitPane))]
        public static ContentPaneFactory GetPaneFactory(DependencyObject d) => (ContentPaneFactory)d.GetValue(PaneFactoryProperty);

        public static void SetPaneFactory(DependencyObject d, ContentPaneFactory value)
        {
            d.SetValue(PaneFactoryProperty, value);
        }

        static void OnPaneFactoryChanged(DependencyObject d, DependencyPropertyChangedEventArgs e)
        {
            if (d is DocumentContentHost || d is TabGroupPane || d is SplitPane)
            {
                var oldFactory = (ContentPaneFactory)e.OldValue;
                var newFactory = (ContentPaneFactory)e.NewValue;

                if (oldFactory != null && oldFactory.Equals(newFactory))
                {
                    return;
                }

                if (oldFactory != null)
                {
                    oldFactory._target = null;

                    foreach (var o in oldFactory.GetElements())
                    {
                        var cp = (ContentPane)o;
                        oldFactory.RemovePane(cp);
                    }
                }

                if (newFactory != null)
                {
                    newFactory._target = d;

                    foreach (var o in newFactory.GetElements())
                    {
                        var cp = (ContentPane)o;
                        newFactory.AddPane(cp);
                    }
                }
            }
        }

        public static readonly DependencyProperty RemoveItemOnCloseProperty = DependencyProperty.Register("RemoveItemOnClose",
            typeof(bool), typeof(ContentPaneFactory), new FrameworkPropertyMetadata(KnownBoxes.TrueBox));
        
        [Description("Returns or sets a boolean indicating whether to remove the item when the pane was closed.")]
        [Category("Behavior")]
        [Bindable(true)]
        public bool RemoveItemOnClose
        {
            get
            {
                return (bool)GetValue(RemoveItemOnCloseProperty);
            }
            set
            {
                SetValue(RemoveItemOnCloseProperty, value);
            }
        }
        
        public static readonly DependencyProperty TabHeaderPathProperty = DependencyProperty.Register("TabHeaderPath",
            typeof(string), typeof(ContentPaneFactory), new FrameworkPropertyMetadata(null));
        
        [Description("Returns or sets the path to the property on the underlying item that should be used to provide the TabHeader for the ContentPane.")]
        [Category("Behavior")]
        [Bindable(true)]
        public string TabHeaderPath
        {
            get
            {
                return (string)GetValue(TabHeaderPathProperty);
            }
            set
            {
                SetValue(TabHeaderPathProperty, value);
            }
        }
        
        protected virtual void AddPane(ContentPane pane)
        {
            if (_target is DocumentContentHost host)
            {
                var sibling = GetSiblingDocument();
                TabGroupPane tgp = null;

                if (sibling != null)
                {
                    tgp = LogicalTreeHelper.GetParent(sibling) as TabGroupPane;
                    Debug.Assert(null != tgp, "Expected all documents to be within a tab group pane.");
                }

                if (null == tgp)
                {
                    var sp = new SplitPane();
                    tgp = new TabGroupPane { Name = "Z" + Guid.NewGuid().ToString("N") };
                    sp.Panes.Add(tgp);
                    var dch = host;
                    dch.Panes.Add(sp);
                }

                tgp.Items.Add(pane);
                RaiseInitializeContentPane(pane);
            }
            else
            {
                IList targetCollection = null;

                Debug.Assert(_target == null || !string.IsNullOrEmpty((string)_target.GetValue(FrameworkElement.NameProperty)),
                    "The Name should be set so the container will not be removed when all the panes have been moved elsewhere. Otherwise new panes may not be displayed.");

                if (_target is SplitPane splitPane)
                {
                    targetCollection = splitPane.Panes;
                }
                else
                {
                    if (_target is TabGroupPane target)
                    {
                        targetCollection = target.Items;
                    }
                }

                if (null != targetCollection)
                {
                    targetCollection.Add(pane);

                    RaiseInitializeContentPane(pane);
                }
            }
        }

        ContentPane GetSiblingDocument()
        {
            var dch = _target as DocumentContentHost;

            if (dch == null)
            {
                return null;
            }

            if (null != dch.ActiveDocument)
            {
                return dch.ActiveDocument;
            }

            var dm = XamDockManager.GetDockManager(dch);

            if (dm == null)
            {
                return null;
            }

            ContentPane firstDocument = null;

            foreach (ContentPane cp in dm.GetPanes(PaneNavigationOrder.VisibleOrder))
            {
                if (cp.PaneLocation != PaneLocation.Document)
                {
                    continue;
                }

                if (firstDocument == null)
                {
                    firstDocument = cp;
                }

                if (cp.Visibility != Visibility.Visible)
                {
                    continue;
                }

                return cp;
            }

            return firstDocument;
        }

        public void OnPaneClosing(object sender, PaneClosingEventArgs e)
        {
            if (sender is ContentPane contentPane)
            {
                var pane = contentPane;

                if (pane.DataContext is WorkSurfaceContextViewModel model)
                {
                    CloseCurrentWorkSurfaceWorkflowDesignerViewModel(e, model);
                }
            }
        }

        static void CloseCurrentWorkSurfaceWorkflowDesignerViewModel(PaneClosingEventArgs e, WorkSurfaceContextViewModel model)
        {
            var workflowVm = model.WorkSurfaceViewModel as IWorkflowDesignerViewModel;
            var resource = workflowVm?.ResourceModel;

            if (resource != null && !resource.IsWorkflowSaved)
            {
                CloseCurrent(e, model);
            }
            else
            {
                if (model.WorkSurfaceViewModel is IStudioTab sourceView)
                {
                    CloseCurrent(e, model);
                }
            }
        }

        static void CloseCurrent(PaneClosingEventArgs e, WorkSurfaceContextViewModel model)
        {
            var vm = model;
            vm.TryClose();
            if (vm.Parent is ShellViewModel mainVm && !mainVm.CloseCurrent)
            {
                e.Cancel = true;
            }

        }


        void OnPaneClosed(object sender, PaneClosedEventArgs e)
        {
            if (sender is ContentPane pane && IsContainerInUse(pane) && pane.CloseAction == PaneCloseAction.RemovePane)
            {

                Debug.Assert(CollectionViewSource.GetDefaultView(ItemsSource) is IEditableCollectionView cv && cv.CanRemove, "The ContentPane is being removed from the XamDockManager but it is still referenced by the source collection and it is not possible to remove it from the source collection.");

                if (CollectionViewSource.GetDefaultView(ItemsSource) is IEditableCollectionView cv && cv.CanRemove)
                {
                    var dataItem = GetItemForContainer(pane);
                    cv.Remove(dataItem);
                    var item = pane.Content as WorkflowDesignerViewModel;
                    if (item?.ResourceModel != null)
                    {
                        WorkspaceItemRepository.Instance.Remove(item.ResourceModel);
                    }

                    item?.RemoveUnsavedWorkflowName(item.DisplayName);
                }
            }
        }

        void RaiseInitializeContentPane(ContentPane pane)
        {
            if (null == _target)
            {
                return;
            }

            var args = new InitializeContentPaneEventArgs(pane) { RoutedEvent = InitializeContentPaneEvent };
            UiElementHelper.RaiseEvent(_target, args);
        }

        protected virtual void RemovePane(ContentPane cp)
        {
            var closeProp = ContentPane.CloseActionProperty;
            if (cp == null)
            {
                return;
            }

            var oldValue = cp.ReadLocalValue(closeProp);
            BindingExpressionBase oldExpression = cp.GetBindingExpression(closeProp);

            cp.CloseAction = PaneCloseAction.RemovePane;
            
            if(oldExpression != null)
            {
                cp.SetBinding(closeProp, oldExpression.ParentBindingBase);
            }
            else if(oldValue == DependencyProperty.UnsetValue)
            {
                cp.ClearValue(closeProp);
            }
            else
            {
                cp.SetValue(closeProp, oldValue);
            }
            cp.PreviewMouseDown -= PaneOnPreviewMouseDown;
        }
        
        public static readonly RoutedEvent InitializeContentPaneEvent = EventManager.RegisterRoutedEvent("InitializeContentPane",
            RoutingStrategy.Direct, typeof(EventHandler<InitializeContentPaneEventArgs>), typeof(ContentPaneFactory));


    }
    
    public class InitializeContentPaneEventArgs : RoutedEventArgs
    {
        readonly ContentPane _pane;
        
        public InitializeContentPaneEventArgs(ContentPane pane)
        {
            _pane = pane ?? throw new ArgumentNullException(nameof(pane));
        }
                
        public ContentPane Pane => _pane;
    }
}

---- Semantic diagnostics *before* transformation ----

---- Semantic diagnostics *after* transformation ----
D:\a\1\s\Dev\Dev2.Studio\Dock\ContentPaneFactory.cs(456,97): error CS0128: A local variable or function named 'cv' is already defined in this scope,D:\a\1\s\Dev\Dev2.Studio\Dock\ContentPaneFactory.cs(456,103): error CS0165: Use of unassigned local variable 'cv'
######################################################################


######################################################################
Nr: 3 - UsePatternMatchingRewriterR8
Filepath: D:\a\1\s\Dev\Dev2.Studio\Factory\WorkSurfaceContextFactory.cs
Description: Error: The created Syntax Tree is semantically incorrect.
------------------------------------------------------------------------
---- Original Tree ----
using System;
using Dev2.Common.ExtMethods;
using Dev2.Common.Interfaces.Studio.Controller;
using Dev2.Common.Interfaces.Threading;
using Dev2.Factory;
using Dev2.Services.Events;
using Dev2.Settings;
using Dev2.Studio.AppResources.Comparers;
using Dev2.Studio.Interfaces;
using Dev2.Studio.Interfaces.Enums;
using Dev2.Studio.ViewModels.Help;
using Dev2.Studio.ViewModels.Workflow;
using Dev2.Studio.ViewModels.WorkSurface;
using Dev2.Threading;
using Dev2.Triggers;
using Dev2.Utilities;

namespace Dev2.Studio.Factory
{
    public static class WorkSurfaceContextFactory
    {
        public static WorkSurfaceContextViewModel CreateResourceViewModel(IContextualResourceModel resourceModel) => CreateResourceViewModel(resourceModel, true, CustomContainer.Get<IPopupController>(), new AsyncWorker());
        public static WorkSurfaceContextViewModel CreateResourceViewModel(IContextualResourceModel resourceModel, bool createDesigner, IPopupController popupController, IAsyncWorker asyncWorker)
        {
            var key = WorkSurfaceKeyFactory.CreateKey(resourceModel);

            var workSurfaceVm = new WorkflowDesignerViewModel(EventPublishers.Aggregator, resourceModel, new WorkflowHelper(), popupController, asyncWorker, createDesigner);

            var contextVm = new WorkSurfaceContextViewModel(key, workSurfaceVm)
                {
                    DataListViewModel = DataListViewModelFactory.CreateDataListViewModel(resourceModel)
                };

            return contextVm;
        }


        /// <summary>
        /// Creates the work surface context view model, only use for surfaces that are unique per context.
        /// </summary>
        /// <typeparam name="T"></typeparam>
        /// <param name="vm">The vm.</param>
        /// <param name="workSurfaceContext">The work surface context.</param>
        /// <returns></returns>
        /// <author>Jurie.smit</author>
        /// <date>3/6/2013</date>
        static WorkSurfaceContextViewModel CreateUniqueWorkSurfaceContextViewModel<T>
            (T vm, WorkSurfaceContext workSurfaceContext)
            where T : IWorkSurfaceViewModel
        {

            var key = WorkSurfaceKeyFactory.CreateKey(workSurfaceContext) as WorkSurfaceKey;
            if (vm is HelpViewModel && key != null)
            {
                key.ResourceID = Guid.Empty;
            }
            if (vm is TriggersViewModel || vm is SettingsViewModel)
            {
                key = WorkSurfaceKeyFactory.CreateEnvKey(workSurfaceContext, CustomContainer.Get<IShellViewModel>().ActiveServer.EnvironmentID) as WorkSurfaceKey;
            }

            return CreateWorkSurfaceContextViewModel(vm, workSurfaceContext, key);
        }

        static WorkSurfaceContextViewModel CreateWorkSurfaceContextViewModel<T>(T vm,
                                                                                        WorkSurfaceContext workSurfaceContext,
                                                                                        WorkSurfaceKey key)
            where T : IWorkSurfaceViewModel
        {
            var context = new WorkSurfaceContextViewModel(key, vm);

            if (!(vm is TriggersViewModel) && !(vm is SettingsViewModel))
            {
                vm.DisplayName = workSurfaceContext.GetDescription();
            }

            vm.WorkSurfaceContext = workSurfaceContext;
            return context;
        }

        public static WorkSurfaceContextViewModel Create<T>(WorkSurfaceContext workSurfaceContext, out T vmr)
            where T : IWorkSurfaceViewModel
        {
            var vm = Activator.CreateInstance<T>();
            var context = CreateUniqueWorkSurfaceContextViewModel(vm, workSurfaceContext);

            vmr = vm;
            return context;
        }
    }
}

---- Transformed Tree ----
using System;
using Dev2.Common.ExtMethods;
using Dev2.Common.Interfaces.Studio.Controller;
using Dev2.Common.Interfaces.Threading;
using Dev2.Factory;
using Dev2.Services.Events;
using Dev2.Settings;
using Dev2.Studio.AppResources.Comparers;
using Dev2.Studio.Interfaces;
using Dev2.Studio.Interfaces.Enums;
using Dev2.Studio.ViewModels.Help;
using Dev2.Studio.ViewModels.Workflow;
using Dev2.Studio.ViewModels.WorkSurface;
using Dev2.Threading;
using Dev2.Triggers;
using Dev2.Utilities;

namespace Dev2.Studio.Factory
{
    public static class WorkSurfaceContextFactory
    {
        public static WorkSurfaceContextViewModel CreateResourceViewModel(IContextualResourceModel resourceModel) => CreateResourceViewModel(resourceModel, true, CustomContainer.Get<IPopupController>(), new AsyncWorker());
        public static WorkSurfaceContextViewModel CreateResourceViewModel(IContextualResourceModel resourceModel, bool createDesigner, IPopupController popupController, IAsyncWorker asyncWorker)
        {
            var key = WorkSurfaceKeyFactory.CreateKey(resourceModel);

            var workSurfaceVm = new WorkflowDesignerViewModel(EventPublishers.Aggregator, resourceModel, new WorkflowHelper(), popupController, asyncWorker, createDesigner);

            var contextVm = new WorkSurfaceContextViewModel(key, workSurfaceVm)
                {
                    DataListViewModel = DataListViewModelFactory.CreateDataListViewModel(resourceModel)
                };

            return contextVm;
        }


        /// <summary>
        /// Creates the work surface context view model, only use for surfaces that are unique per context.
        /// </summary>
        /// <typeparam name="T"></typeparam>
        /// <param name="vm">The vm.</param>
        /// <param name="workSurfaceContext">The work surface context.</param>
        /// <returns></returns>
        /// <author>Jurie.smit</author>
        /// <date>3/6/2013</date>
        static WorkSurfaceContextViewModel CreateUniqueWorkSurfaceContextViewModel<T>
            (T vm, WorkSurfaceContext workSurfaceContext)
            where T : IWorkSurfaceViewModel
        {
            if (vm is HelpViewModel && WorkSurfaceKeyFactory.CreateKey(workSurfaceContext) is WorkSurfaceKey key)
            {
                key.ResourceID = Guid.Empty;
            }
            if (vm is TriggersViewModel || vm is SettingsViewModel)
            {
                key = WorkSurfaceKeyFactory.CreateEnvKey(workSurfaceContext, CustomContainer.Get<IShellViewModel>().ActiveServer.EnvironmentID) as WorkSurfaceKey;
            }

            return CreateWorkSurfaceContextViewModel(vm, workSurfaceContext, key);
        }

        static WorkSurfaceContextViewModel CreateWorkSurfaceContextViewModel<T>(T vm,
                                                                                        WorkSurfaceContext workSurfaceContext,
                                                                                        WorkSurfaceKey key)
            where T : IWorkSurfaceViewModel
        {
            var context = new WorkSurfaceContextViewModel(key, vm);

            if (!(vm is TriggersViewModel) && !(vm is SettingsViewModel))
            {
                vm.DisplayName = workSurfaceContext.GetDescription();
            }

            vm.WorkSurfaceContext = workSurfaceContext;
            return context;
        }

        public static WorkSurfaceContextViewModel Create<T>(WorkSurfaceContext workSurfaceContext, out T vmr)
            where T : IWorkSurfaceViewModel
        {
            var vm = Activator.CreateInstance<T>();
            var context = CreateUniqueWorkSurfaceContextViewModel(vm, workSurfaceContext);

            vmr = vm;
            return context;
        }
    }
}

---- Semantic diagnostics *before* transformation ----

---- Semantic diagnostics *after* transformation ----
D:\a\1\s\Dev\Dev2.Studio\Factory\WorkSurfaceContextFactory.cs(70,78): error CS0165: Use of unassigned local variable 'key'
######################################################################


######################################################################
Nr: 4 - UsePatternMatchingRewriterR8
Filepath: D:\a\1\s\Dev\Dev2.Studio\Views\Workflow\WorkflowInputDataView.xaml.cs
Description: Error: The created Syntax Tree is semantically incorrect.
------------------------------------------------------------------------
---- Original Tree ----
using System;
using System.Collections.Generic;
using System.Windows;
using System.Windows.Automation;
using System.Windows.Controls;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Threading;
using System.Xml;
using Dev2.Data.Interfaces;
using Dev2.Studio.Interfaces;
using Dev2.Studio.ViewModels.Workflow;
using Dev2.UI;
using ICSharpCode.AvalonEdit;
using ICSharpCode.AvalonEdit.Folding;
using ICSharpCode.AvalonEdit.Highlighting;
using ICSharpCode.AvalonEdit.Indentation;
using Infragistics.Controls.Grids;
using Infragistics.Controls.Grids.Primitives;
using Newtonsoft.Json;
using Warewolf.Studio.Core;


namespace Dev2.Studio.Views.Workflow
{
    /// <summary>
    /// Interaction logic for WorkflowInputDataWindow.xaml
    /// </summary>
    public partial class WorkflowInputDataView
    {
        public WorkflowInputDataView()
        {
            InitializeComponent();
            SetUpTextEditor();
            PopupViewManageEffects.AddBlackOutEffect(_blackoutGrid);
            _currentTab = InputTab.Grid;
        }

        TextEditor _editor;
        TextEditor _jsonEditor;
        AbstractFoldingStrategy _foldingStrategy;
        FoldingManager _foldingManager;
        DispatcherTimer _foldingUpdateTimer;
        readonly Grid _blackoutGrid = new Grid();
        InputTab _currentTab;

        void SetUpTextEditor()
        {
            _editor = new TextEditor { SyntaxHighlighting = HighlightingManager.Instance.GetDefinition("XML"), ShowLineNumbers = true, VerticalScrollBarVisibility = ScrollBarVisibility.Auto, HorizontalScrollBarVisibility = ScrollBarVisibility.Auto };
            _editor.SetValue(AutomationProperties.AutomationIdProperty, "UI_XMLEditor_AutoID");

            _jsonEditor = new TextEditor { SyntaxHighlighting = HighlightingManager.Instance.GetDefinition("JavaScript"), ShowLineNumbers = true, VerticalScrollBarVisibility = ScrollBarVisibility.Auto, HorizontalScrollBarVisibility = ScrollBarVisibility.Auto };
            _jsonEditor.SetValue(AutomationProperties.AutomationIdProperty, "UI_JsonEditor_AutoID");

            _foldingStrategy = new XmlFoldingStrategy();
            _foldingManager = FoldingManager.Install(_editor.TextArea);
            _editor.TextArea.IndentationStrategy = new DefaultIndentationStrategy();
            _jsonEditor.TextArea.IndentationStrategy = new DefaultIndentationStrategy();
            _editor.Document.UpdateFinished += XmlOutputDocument_UpdateFinished;
            _jsonEditor.Document.UpdateFinished += JsonOutputDocument_UpdateFinished;
            _foldingUpdateTimer = new DispatcherTimer { Interval = TimeSpan.FromSeconds(2) };
            _foldingUpdateTimer.Tick += OnFoldingUpdateTimerOnTick;
            _foldingUpdateTimer.Start();
        }

        void OnFoldingUpdateTimerOnTick(object sender, EventArgs e)
        {
            if (_foldingStrategy != null && _foldingManager != null && !string.IsNullOrEmpty(_editor.Document.Text))
            {
                _foldingStrategy.UpdateFoldings(_foldingManager, _editor.Document);
            }

        }

        void ShowDataInOutputWindow(string input)
        {
            _editor.Text = input;
            XmlOutput.Content = _editor;
        }

        void ShowDataInJsonOutputWindow(WorkflowInputDataViewModel vm, string input)
        {
            if (!string.IsNullOrEmpty(input))
            {
                var xml = new XmlDocument();

                try
                {
                    xml.LoadXml(input);
                }
                catch (Exception ex)
                {
                    vm.ShowInvalidDataPopupMessage();
                }

                if (xml.FirstChild != null)
                {
                    var json = JsonConvert.SerializeXmlNode(xml.FirstChild, Newtonsoft.Json.Formatting.Indented, true);
                    _jsonEditor.Text = json;
                }
                else
                {
                    _jsonEditor.Text = vm.JsonData;
                }

                JsonOutput.Content = _jsonEditor;
            }
        }

        void TryShowDataInOutputWindow(WorkflowInputDataViewModel vm)
        {
            if (_currentTab == InputTab.Grid)
            {
                try
                {
                    vm.SetXmlData();
                    ShowDataInOutputWindow(vm.XmlData);
                }
                catch
                {
                    vm.ShowInvalidDataPopupMessage();
                }
            }
            if (_currentTab == InputTab.Json)
            {
                try
                {
                    vm.XmlData = GetXmlDataFromJson();
                    vm.SetWorkflowInputData();
                    vm.SetXmlData();
                    ShowDataInOutputWindow(vm.XmlData);
                }
                catch
                {
                    vm.ShowInvalidDataPopupMessage();
                }
            }
        }

        void TextBoxTextChanged(object sender, RoutedEventArgs routedEventArgs)
        {
            if (routedEventArgs.OriginalSource is IntellisenseTextBox tb)
            {
                var dli = tb.DataContext as IDataListItem;
                var vm = DataContext as WorkflowInputDataViewModel;
                vm?.AddRow(dli);
            }
        }

        void TryChangeTab(object sender, SelectionChangedEventArgs e)
        {
            if (e.Source is TabControl ctrl)
            {
                var tabCtrl = ctrl;
                var tabItem = tabCtrl.SelectedItem as TabItem;
                if (DataContext is WorkflowInputDataViewModel vm)
                {
                    vm.IsInError = false;
                    if (tabItem != null && tabItem.Header.ToString() == "XML")
                    {
                        TryShowDataInOutputWindow(vm);
                        _currentTab = InputTab.Xml;
                    }
                    else if (tabItem != null && tabItem.Header.ToString() == "JSON")
                    {
                        SetCurrentTabToJson(vm);
                    }
                    else
                    {
                        TryChangeTab(vm);
                    }
                }
            }
        }

        void TryChangeTab(WorkflowInputDataViewModel vm)
        {
            try
            {
                var xmlData = _editor.Text;
                if (_currentTab == InputTab.Json)
                {
                    xmlData = GetXmlDataFromJson();
                }
                vm.XmlData = xmlData;
                vm.SetWorkflowInputData();
                _currentTab = InputTab.Grid;
            }
            catch (Exception ex)
            {
                vm.IsInError = true;
            }
        }

        private void SetCurrentTabToJson(WorkflowInputDataViewModel vm)
        {
            string input = string.Empty;

            if (_currentTab == InputTab.Grid)
            {
                vm.SetXmlData();
                if (vm.XmlData != null)
                {
                    input = vm.XmlData;
                }
            }
            if (_currentTab == InputTab.Xml && !string.IsNullOrEmpty(_editor.Text))
            {
                input = _editor.Text;
            }

            ShowDataInJsonOutputWindow(vm, input);
            _currentTab = InputTab.Json;
        }

        string GetXmlDataFromJson()
        {
            try
            {
                var xmlDocument = JsonConvert.DeserializeXmlNode(_jsonEditor.Text == "\"\"" ? "" : _jsonEditor.Text, "DataList",true);
                return xmlDocument == null ? String.Empty : xmlDocument.InnerXml;
            }
            catch (Exception)
            {
                var vm = DataContext as WorkflowInputDataViewModel;
                vm?.ShowInvalidDataPopupMessage();
            }
            return _editor.Text;
        }

        void MenuItemAddRow(object sender, RoutedEventArgs e)
        {

            if (DataContext is WorkflowInputDataViewModel vm && vm.AddBlankRow(DataListInputs.ActiveItem as IDataListItem, out int indexToSelect))
            {
                DataListInputs.ActiveItem = indexToSelect;
                Dispatcher.BeginInvoke(new Action(FocusOnAddition), DispatcherPriority.ApplicationIdle);
            }
        }

        void FocusOnAddition()
        {
            try
            {
                var row = GetSelectedRow(DataListInputs);
                if (row != null)
                {
                    var intelbox = FindByName("txtValue", row) as IntellisenseTextBox;
                    intelbox?.Focus();
                }
            }
            catch (Exception)
            {
                //
            }
        }

        void MenuItemDeleteRow(object sender, RoutedEventArgs e)
        {
            if (DataContext is WorkflowInputDataViewModel vm && vm.RemoveRow(DataListInputs.ActiveItem as IDataListItem, out int indexToSelect))
            {
                DataListInputs.ActiveItem = indexToSelect;
            }
        }

        void IntellisenseTextBoxPreviewKeyDown(object sender, KeyEventArgs e)
        {
            var vm = DataContext as WorkflowInputDataViewModel;

            if (e.KeyboardDevice.Modifiers == ModifierKeys.Shift && e.KeyboardDevice.IsKeyDown(Key.Insert))
            {
                InsertEmptyRow();
                e.Handled = true;
            }
            else
            {
                if (e.KeyboardDevice.Modifiers == ModifierKeys.Shift && e.Key == Key.Delete)
                {
                    DeleteLastRow();
                    e.Handled = true;
                }
            }
            if ((e.KeyboardDevice.Modifiers == ModifierKeys.Shift && (e.KeyboardDevice.IsKeyDown(Key.Tab) || e.Key == Key.Tab)) || e.KeyboardDevice.IsKeyDown(Key.Up))
            {
                MoveToPreviousRow(vm);
                e.Handled = true;
            }
            else
            {
                if (e.KeyboardDevice.IsKeyDown(Key.Tab) || e.KeyboardDevice.IsKeyDown(Key.Down))
                {
                    MoveToNextRow(vm);
                    e.Handled = true;
                }
            }
        }

        void MoveToNextRow(WorkflowInputDataViewModel vm)
        {
            var itemToSelect = vm?.GetNextRow(DataListInputs.ActiveItem as IDataListItem);
            if(itemToSelect != null)
            {
                DataListInputs.ActiveItem = itemToSelect;
                FocusOnAddition();
            }
        }

        void MoveToPreviousRow(WorkflowInputDataViewModel vm)
        {
            var itemToSelect = vm?.GetPreviousRow(DataListInputs.ActiveItem as IDataListItem);
            if(itemToSelect != null)
            {
                DataListInputs.ActiveItem = itemToSelect;
                FocusOnAddition();
            }
        }

        void GridPreviewKeyDown(object sender, KeyEventArgs e)
        {
            UIElement keyboardFocus = Keyboard.FocusedElement as TextBox;
            if (e.KeyboardDevice.IsKeyDown(Key.LeftShift) && e.KeyboardDevice.IsKeyDown(Key.Tab))
            {
                keyboardFocus?.MoveFocus(new TraversalRequest(FocusNavigationDirection.Previous));
            }
            if (e.KeyboardDevice.IsKeyDown(Key.Tab))
            {
                var vm = DataContext as WorkflowInputDataViewModel;
                var itemToSelect = vm?.GetNextRow(DataListInputs.ActiveItem as IDataListItem);
                if (itemToSelect != null)
                {
                    DataListInputs.ActiveItem = itemToSelect;
                    FocusOnAddition();
                }
            }
        }

        static FrameworkElement FindByName(string name, FrameworkElement root)
        {
            if (root != null)
            {
                var tree = new Stack<FrameworkElement>();
                tree.Push(root);
                while (tree.Count > 0)
                {
                    var current = tree.Pop();
                    if (current.Name == name)
                    {
                        return current;
                    }

                    var count = VisualTreeHelper.GetChildrenCount(current);
                    for (var supplierCounter = 0; supplierCounter < count; ++supplierCounter)
                    {
                        tree = TreePushChild(tree, current, supplierCounter);
                    }
                }
            }
            return null;
        }

        static Stack<FrameworkElement> TreePushChild(Stack<FrameworkElement> tree, FrameworkElement current, int supplierCounter)
        {
            var child = VisualTreeHelper.GetChild(current, supplierCounter);
            if (child is FrameworkElement item)
            {
                tree.Push(item);
            }
            return tree;
        }

        static CellsPanel GetSelectedRow(XamGrid grid)
        {
            var row = grid.ActiveCell?.Row;
            return row?.Control;
        }

        void ExecuteClicked(object sender, RoutedEventArgs e)
        {
            var tabItem = TabItems.SelectedItem as TabItem;
            if (DataContext is WorkflowInputDataViewModel vm)
            {
                vm.IsInError = false;
                if (tabItem != null)
                {
                    TrySetWorkflowInputData(tabItem, vm);
                }
            }
            DestroyTimer();
        }

        void TrySetWorkflowInputData(TabItem tabItem, WorkflowInputDataViewModel vm)
        {
            if (tabItem.Header.ToString() == "XML")
            {
                try
                {
                    vm.XmlData = _editor.Text;
                    vm.SetWorkflowInputData();
                }
                catch (Exception ex)
                {
                    vm.IsInError = true;
                }
            }
            else if (tabItem.Header.ToString() == "JSON")
            {
                vm.XmlData = GetXmlDataFromJson();
                vm.SetWorkflowInputData();
            }
            else
            {
                vm.SetXmlData();
            }
        }

        void DestroyTimer()
        {
            if (_foldingUpdateTimer != null)
            {
                _foldingUpdateTimer.Tick -= OnFoldingUpdateTimerOnTick;
                _foldingUpdateTimer.Stop();
                _foldingUpdateTimer = null;
            }
        }

        void CancelClicked(object sender, RoutedEventArgs e)
        {
            DestroyTimer();
        }

        void WorkflowInputDataView_OnMouseDown(object sender, MouseButtonEventArgs e)
        {
            if (Mouse.LeftButton == MouseButtonState.Pressed)
            {
                DragMove();
            }
        }

        void WorkflowInputDataView_OnClosed(object sender, EventArgs e)
        {
            PopupViewManageEffects.RemoveBlackOutEffect(_blackoutGrid);
        }

        void WorkflowInputDataView_OnPreviewKeyDown(object sender, KeyEventArgs e)
        {
        }

        void InsertEmptyRow()
        {
            if (DataContext is WorkflowInputDataViewModel vm && vm.AddBlankRow(DataListInputs.ActiveItem as IDataListItem, out int indexToSelect))
            {
                DataListInputs.ActiveItem = indexToSelect;
                Dispatcher.BeginInvoke(new Action(FocusOnAddition), DispatcherPriority.ApplicationIdle);
            }
        }

        void DeleteLastRow()
        {
            if (DataContext is WorkflowInputDataViewModel vm && vm.RemoveRow(DataListInputs.ActiveItem as IDataListItem, out int indexToSelect))
            {
                DataListInputs.ActiveItem = indexToSelect;
            }
        }

        void DataListInputs_OnLoaded(object sender, RoutedEventArgs e)
        {
            if(DataListInputs?.Rows != null && DataListInputs.Rows.Count > 0)
            {
                var cellBaseCollection = DataListInputs.Rows[0].Cells;
                if(cellBaseCollection != null)
                {
                    var selectedCell = (Cell)cellBaseCollection[1];
                    DataListInputs.ActiveCell = selectedCell;
                }
            }
            FocusOnAddition();
        }

        void WorkflowInputDataView_OnKeyUp(object sender, KeyEventArgs e)
        {
            if ((Keyboard.Modifiers == (ModifierKeys.Alt | ModifierKeys.Control)) && (e.Key == Key.F4))
            {
                var mainViewModel = CustomContainer.Get<IShellViewModel>();
                mainViewModel?.ResetMainView();
            }
        }

        private void XmlOutputDocument_UpdateFinished(object sender, EventArgs e)
        {
            var vm = DataContext as WorkflowInputDataViewModel;

            try
            {
                if (vm.CheckHasUnicodeInWorkflowInputData(_editor.Text))
                {
                    ShowDataInOutputWindow(vm.XmlData);
                    return;
                }

                vm.IsInError = false;
                vm.XmlData = _editor.Text;
                vm.SetWorkflowInputData();
            }
            catch (Exception ex)
            {
                vm.IsInError = true;
            }
        }

        private void JsonOutputDocument_UpdateFinished(object sender, EventArgs e)
        {
            var vm = DataContext as WorkflowInputDataViewModel;

            vm.XmlData = GetXmlDataFromJson();
            if (vm.CheckHasUnicodeInWorkflowInputData(vm.XmlData))
            {
                ShowDataInJsonOutputWindow(vm, vm.XmlData);
                return;
            }

            vm.IsInError = false;
            vm.SetWorkflowInputData();
        }
    }

    public enum InputTab
    {
        Grid,
        Xml,
        Json
    }
}

---- Transformed Tree ----
using System;
using System.Collections.Generic;
using System.Windows;
using System.Windows.Automation;
using System.Windows.Controls;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Threading;
using System.Xml;
using Dev2.Data.Interfaces;
using Dev2.Studio.Interfaces;
using Dev2.Studio.ViewModels.Workflow;
using Dev2.UI;
using ICSharpCode.AvalonEdit;
using ICSharpCode.AvalonEdit.Folding;
using ICSharpCode.AvalonEdit.Highlighting;
using ICSharpCode.AvalonEdit.Indentation;
using Infragistics.Controls.Grids;
using Infragistics.Controls.Grids.Primitives;
using Newtonsoft.Json;
using Warewolf.Studio.Core;


namespace Dev2.Studio.Views.Workflow
{
    /// <summary>
    /// Interaction logic for WorkflowInputDataWindow.xaml
    /// </summary>
    public partial class WorkflowInputDataView
    {
        public WorkflowInputDataView()
        {
            InitializeComponent();
            SetUpTextEditor();
            PopupViewManageEffects.AddBlackOutEffect(_blackoutGrid);
            _currentTab = InputTab.Grid;
        }

        TextEditor _editor;
        TextEditor _jsonEditor;
        AbstractFoldingStrategy _foldingStrategy;
        FoldingManager _foldingManager;
        DispatcherTimer _foldingUpdateTimer;
        readonly Grid _blackoutGrid = new Grid();
        InputTab _currentTab;

        void SetUpTextEditor()
        {
            _editor = new TextEditor { SyntaxHighlighting = HighlightingManager.Instance.GetDefinition("XML"), ShowLineNumbers = true, VerticalScrollBarVisibility = ScrollBarVisibility.Auto, HorizontalScrollBarVisibility = ScrollBarVisibility.Auto };
            _editor.SetValue(AutomationProperties.AutomationIdProperty, "UI_XMLEditor_AutoID");

            _jsonEditor = new TextEditor { SyntaxHighlighting = HighlightingManager.Instance.GetDefinition("JavaScript"), ShowLineNumbers = true, VerticalScrollBarVisibility = ScrollBarVisibility.Auto, HorizontalScrollBarVisibility = ScrollBarVisibility.Auto };
            _jsonEditor.SetValue(AutomationProperties.AutomationIdProperty, "UI_JsonEditor_AutoID");

            _foldingStrategy = new XmlFoldingStrategy();
            _foldingManager = FoldingManager.Install(_editor.TextArea);
            _editor.TextArea.IndentationStrategy = new DefaultIndentationStrategy();
            _jsonEditor.TextArea.IndentationStrategy = new DefaultIndentationStrategy();
            _editor.Document.UpdateFinished += XmlOutputDocument_UpdateFinished;
            _jsonEditor.Document.UpdateFinished += JsonOutputDocument_UpdateFinished;
            _foldingUpdateTimer = new DispatcherTimer { Interval = TimeSpan.FromSeconds(2) };
            _foldingUpdateTimer.Tick += OnFoldingUpdateTimerOnTick;
            _foldingUpdateTimer.Start();
        }

        void OnFoldingUpdateTimerOnTick(object sender, EventArgs e)
        {
            if (_foldingStrategy != null && _foldingManager != null && !string.IsNullOrEmpty(_editor.Document.Text))
            {
                _foldingStrategy.UpdateFoldings(_foldingManager, _editor.Document);
            }

        }

        void ShowDataInOutputWindow(string input)
        {
            _editor.Text = input;
            XmlOutput.Content = _editor;
        }

        void ShowDataInJsonOutputWindow(WorkflowInputDataViewModel vm, string input)
        {
            if (!string.IsNullOrEmpty(input))
            {
                var xml = new XmlDocument();

                try
                {
                    xml.LoadXml(input);
                }
                catch (Exception ex)
                {
                    vm.ShowInvalidDataPopupMessage();
                }

                if (xml.FirstChild != null)
                {
                    var json = JsonConvert.SerializeXmlNode(xml.FirstChild, Newtonsoft.Json.Formatting.Indented, true);
                    _jsonEditor.Text = json;
                }
                else
                {
                    _jsonEditor.Text = vm.JsonData;
                }

                JsonOutput.Content = _jsonEditor;
            }
        }

        void TryShowDataInOutputWindow(WorkflowInputDataViewModel vm)
        {
            if (_currentTab == InputTab.Grid)
            {
                try
                {
                    vm.SetXmlData();
                    ShowDataInOutputWindow(vm.XmlData);
                }
                catch
                {
                    vm.ShowInvalidDataPopupMessage();
                }
            }
            if (_currentTab == InputTab.Json)
            {
                try
                {
                    vm.XmlData = GetXmlDataFromJson();
                    vm.SetWorkflowInputData();
                    vm.SetXmlData();
                    ShowDataInOutputWindow(vm.XmlData);
                }
                catch
                {
                    vm.ShowInvalidDataPopupMessage();
                }
            }
        }

        void TextBoxTextChanged(object sender, RoutedEventArgs routedEventArgs)
        {
            if (routedEventArgs.OriginalSource is IntellisenseTextBox tb)
            {
                var dli = tb.DataContext as IDataListItem;
                var vm = DataContext as WorkflowInputDataViewModel;
                vm?.AddRow(dli);
            }
        }

        void TryChangeTab(object sender, SelectionChangedEventArgs e)
        {
            if (e.Source is TabControl ctrl)
            {
                var tabCtrl = ctrl;
                if (DataContext is WorkflowInputDataViewModel vm)
                {
                    vm.IsInError = false;

                    if (tabCtrl.SelectedItem is TabItem tabItem && tabItem.Header.ToString() == "XML")
                    {
                        TryShowDataInOutputWindow(vm);
                        _currentTab = InputTab.Xml;
                    }
                    else if (tabCtrl.SelectedItem is TabItem tabItem && tabItem.Header.ToString() == "JSON")
                    {
                        SetCurrentTabToJson(vm);
                    }
                    else
                    {
                        TryChangeTab(vm);
                    }
                }
            }
        }

        void TryChangeTab(WorkflowInputDataViewModel vm)
        {
            try
            {
                var xmlData = _editor.Text;
                if (_currentTab == InputTab.Json)
                {
                    xmlData = GetXmlDataFromJson();
                }
                vm.XmlData = xmlData;
                vm.SetWorkflowInputData();
                _currentTab = InputTab.Grid;
            }
            catch (Exception ex)
            {
                vm.IsInError = true;
            }
        }

        private void SetCurrentTabToJson(WorkflowInputDataViewModel vm)
        {
            string input = string.Empty;

            if (_currentTab == InputTab.Grid)
            {
                vm.SetXmlData();
                if (vm.XmlData != null)
                {
                    input = vm.XmlData;
                }
            }
            if (_currentTab == InputTab.Xml && !string.IsNullOrEmpty(_editor.Text))
            {
                input = _editor.Text;
            }

            ShowDataInJsonOutputWindow(vm, input);
            _currentTab = InputTab.Json;
        }

        string GetXmlDataFromJson()
        {
            try
            {
                var xmlDocument = JsonConvert.DeserializeXmlNode(_jsonEditor.Text == "\"\"" ? "" : _jsonEditor.Text, "DataList",true);
                return xmlDocument == null ? String.Empty : xmlDocument.InnerXml;
            }
            catch (Exception)
            {
                var vm = DataContext as WorkflowInputDataViewModel;
                vm?.ShowInvalidDataPopupMessage();
            }
            return _editor.Text;
        }

        void MenuItemAddRow(object sender, RoutedEventArgs e)
        {

            if (DataContext is WorkflowInputDataViewModel vm && vm.AddBlankRow(DataListInputs.ActiveItem as IDataListItem, out int indexToSelect))
            {
                DataListInputs.ActiveItem = indexToSelect;
                Dispatcher.BeginInvoke(new Action(FocusOnAddition), DispatcherPriority.ApplicationIdle);
            }
        }

        void FocusOnAddition()
        {
            try
            {
                var row = GetSelectedRow(DataListInputs);
                if (row != null)
                {
                    var intelbox = FindByName("txtValue", row) as IntellisenseTextBox;
                    intelbox?.Focus();
                }
            }
            catch (Exception)
            {
                //
            }
        }

        void MenuItemDeleteRow(object sender, RoutedEventArgs e)
        {
            if (DataContext is WorkflowInputDataViewModel vm && vm.RemoveRow(DataListInputs.ActiveItem as IDataListItem, out int indexToSelect))
            {
                DataListInputs.ActiveItem = indexToSelect;
            }
        }

        void IntellisenseTextBoxPreviewKeyDown(object sender, KeyEventArgs e)
        {
            var vm = DataContext as WorkflowInputDataViewModel;

            if (e.KeyboardDevice.Modifiers == ModifierKeys.Shift && e.KeyboardDevice.IsKeyDown(Key.Insert))
            {
                InsertEmptyRow();
                e.Handled = true;
            }
            else
            {
                if (e.KeyboardDevice.Modifiers == ModifierKeys.Shift && e.Key == Key.Delete)
                {
                    DeleteLastRow();
                    e.Handled = true;
                }
            }
            if ((e.KeyboardDevice.Modifiers == ModifierKeys.Shift && (e.KeyboardDevice.IsKeyDown(Key.Tab) || e.Key == Key.Tab)) || e.KeyboardDevice.IsKeyDown(Key.Up))
            {
                MoveToPreviousRow(vm);
                e.Handled = true;
            }
            else
            {
                if (e.KeyboardDevice.IsKeyDown(Key.Tab) || e.KeyboardDevice.IsKeyDown(Key.Down))
                {
                    MoveToNextRow(vm);
                    e.Handled = true;
                }
            }
        }

        void MoveToNextRow(WorkflowInputDataViewModel vm)
        {
            var itemToSelect = vm?.GetNextRow(DataListInputs.ActiveItem as IDataListItem);
            if(itemToSelect != null)
            {
                DataListInputs.ActiveItem = itemToSelect;
                FocusOnAddition();
            }
        }

        void MoveToPreviousRow(WorkflowInputDataViewModel vm)
        {
            var itemToSelect = vm?.GetPreviousRow(DataListInputs.ActiveItem as IDataListItem);
            if(itemToSelect != null)
            {
                DataListInputs.ActiveItem = itemToSelect;
                FocusOnAddition();
            }
        }

        void GridPreviewKeyDown(object sender, KeyEventArgs e)
        {
            UIElement keyboardFocus = Keyboard.FocusedElement as TextBox;
            if (e.KeyboardDevice.IsKeyDown(Key.LeftShift) && e.KeyboardDevice.IsKeyDown(Key.Tab))
            {
                keyboardFocus?.MoveFocus(new TraversalRequest(FocusNavigationDirection.Previous));
            }
            if (e.KeyboardDevice.IsKeyDown(Key.Tab))
            {
                var vm = DataContext as WorkflowInputDataViewModel;
                var itemToSelect = vm?.GetNextRow(DataListInputs.ActiveItem as IDataListItem);
                if (itemToSelect != null)
                {
                    DataListInputs.ActiveItem = itemToSelect;
                    FocusOnAddition();
                }
            }
        }

        static FrameworkElement FindByName(string name, FrameworkElement root)
        {
            if (root != null)
            {
                var tree = new Stack<FrameworkElement>();
                tree.Push(root);
                while (tree.Count > 0)
                {
                    var current = tree.Pop();
                    if (current.Name == name)
                    {
                        return current;
                    }

                    var count = VisualTreeHelper.GetChildrenCount(current);
                    for (var supplierCounter = 0; supplierCounter < count; ++supplierCounter)
                    {
                        tree = TreePushChild(tree, current, supplierCounter);
                    }
                }
            }
            return null;
        }

        static Stack<FrameworkElement> TreePushChild(Stack<FrameworkElement> tree, FrameworkElement current, int supplierCounter)
        {
            var child = VisualTreeHelper.GetChild(current, supplierCounter);
            if (child is FrameworkElement item)
            {
                tree.Push(item);
            }
            return tree;
        }

        static CellsPanel GetSelectedRow(XamGrid grid)
        {
            var row = grid.ActiveCell?.Row;
            return row?.Control;
        }

        void ExecuteClicked(object sender, RoutedEventArgs e)
        {
            if (DataContext is WorkflowInputDataViewModel vm)
            {
                vm.IsInError = false;

                if (TabItems.SelectedItem is TabItem tabItem)
                {
                    TrySetWorkflowInputData(tabItem, vm);
                }
            }
            DestroyTimer();
        }

        void TrySetWorkflowInputData(TabItem tabItem, WorkflowInputDataViewModel vm)
        {
            if (tabItem.Header.ToString() == "XML")
            {
                try
                {
                    vm.XmlData = _editor.Text;
                    vm.SetWorkflowInputData();
                }
                catch (Exception ex)
                {
                    vm.IsInError = true;
                }
            }
            else if (tabItem.Header.ToString() == "JSON")
            {
                vm.XmlData = GetXmlDataFromJson();
                vm.SetWorkflowInputData();
            }
            else
            {
                vm.SetXmlData();
            }
        }

        void DestroyTimer()
        {
            if (_foldingUpdateTimer != null)
            {
                _foldingUpdateTimer.Tick -= OnFoldingUpdateTimerOnTick;
                _foldingUpdateTimer.Stop();
                _foldingUpdateTimer = null;
            }
        }

        void CancelClicked(object sender, RoutedEventArgs e)
        {
            DestroyTimer();
        }

        void WorkflowInputDataView_OnMouseDown(object sender, MouseButtonEventArgs e)
        {
            if (Mouse.LeftButton == MouseButtonState.Pressed)
            {
                DragMove();
            }
        }

        void WorkflowInputDataView_OnClosed(object sender, EventArgs e)
        {
            PopupViewManageEffects.RemoveBlackOutEffect(_blackoutGrid);
        }

        void WorkflowInputDataView_OnPreviewKeyDown(object sender, KeyEventArgs e)
        {
        }

        void InsertEmptyRow()
        {
            if (DataContext is WorkflowInputDataViewModel vm && vm.AddBlankRow(DataListInputs.ActiveItem as IDataListItem, out int indexToSelect))
            {
                DataListInputs.ActiveItem = indexToSelect;
                Dispatcher.BeginInvoke(new Action(FocusOnAddition), DispatcherPriority.ApplicationIdle);
            }
        }

        void DeleteLastRow()
        {
            if (DataContext is WorkflowInputDataViewModel vm && vm.RemoveRow(DataListInputs.ActiveItem as IDataListItem, out int indexToSelect))
            {
                DataListInputs.ActiveItem = indexToSelect;
            }
        }

        void DataListInputs_OnLoaded(object sender, RoutedEventArgs e)
        {
            if(DataListInputs?.Rows != null && DataListInputs.Rows.Count > 0)
            {
                var cellBaseCollection = DataListInputs.Rows[0].Cells;
                if(cellBaseCollection != null)
                {
                    var selectedCell = (Cell)cellBaseCollection[1];
                    DataListInputs.ActiveCell = selectedCell;
                }
            }
            FocusOnAddition();
        }

        void WorkflowInputDataView_OnKeyUp(object sender, KeyEventArgs e)
        {
            if ((Keyboard.Modifiers == (ModifierKeys.Alt | ModifierKeys.Control)) && (e.Key == Key.F4))
            {
                var mainViewModel = CustomContainer.Get<IShellViewModel>();
                mainViewModel?.ResetMainView();
            }
        }

        private void XmlOutputDocument_UpdateFinished(object sender, EventArgs e)
        {
            var vm = DataContext as WorkflowInputDataViewModel;

            try
            {
                if (vm.CheckHasUnicodeInWorkflowInputData(_editor.Text))
                {
                    ShowDataInOutputWindow(vm.XmlData);
                    return;
                }

                vm.IsInError = false;
                vm.XmlData = _editor.Text;
                vm.SetWorkflowInputData();
            }
            catch (Exception ex)
            {
                vm.IsInError = true;
            }
        }

        private void JsonOutputDocument_UpdateFinished(object sender, EventArgs e)
        {
            var vm = DataContext as WorkflowInputDataViewModel;

            vm.XmlData = GetXmlDataFromJson();
            if (vm.CheckHasUnicodeInWorkflowInputData(vm.XmlData))
            {
                ShowDataInJsonOutputWindow(vm, vm.XmlData);
                return;
            }

            vm.IsInError = false;
            vm.SetWorkflowInputData();
        }
    }

    public enum InputTab
    {
        Grid,
        Xml,
        Json
    }
}

---- Semantic diagnostics *before* transformation ----
D:\a\1\s\Dev\Dev2.Studio\Views\Workflow\WorkflowInputDataView.xaml.cs(44,13): error CS0103: The name 'InitializeComponent' does not exist in the current context,D:\a\1\s\Dev\Dev2.Studio\Views\Workflow\WorkflowInputDataView.xaml.cs(89,13): error CS0103: The name 'XmlOutput' does not exist in the current context,D:\a\1\s\Dev\Dev2.Studio\Views\Workflow\WorkflowInputDataView.xaml.cs(117,17): error CS0103: The name 'JsonOutput' does not exist in the current context,D:\a\1\s\Dev\Dev2.Studio\Views\Workflow\WorkflowInputDataView.xaml.cs(156,26): error CS0103: The name 'DataContext' does not exist in the current context,D:\a\1\s\Dev\Dev2.Studio\Views\Workflow\WorkflowInputDataView.xaml.cs(167,21): error CS0103: The name 'DataContext' does not exist in the current context,D:\a\1\s\Dev\Dev2.Studio\Views\Workflow\WorkflowInputDataView.xaml.cs(236,26): error CS0103: The name 'DataContext' does not exist in the current context,D:\a\1\s\Dev\Dev2.Studio\Views\Workflow\WorkflowInputDataView.xaml.cs(245,17): error CS0103: The name 'DataContext' does not exist in the current context,D:\a\1\s\Dev\Dev2.Studio\Views\Workflow\WorkflowInputDataView.xaml.cs(245,80): error CS0103: The name 'DataListInputs' does not exist in the current context,D:\a\1\s\Dev\Dev2.Studio\Views\Workflow\WorkflowInputDataView.xaml.cs(247,17): error CS0103: The name 'DataListInputs' does not exist in the current context,D:\a\1\s\Dev\Dev2.Studio\Views\Workflow\WorkflowInputDataView.xaml.cs(248,17): error CS0120: An object reference is required for the non-static field, method, or property 'Dispatcher.BeginInvoke(Delegate, params object[])',D:\a\1\s\Dev\Dev2.Studio\Views\Workflow\WorkflowInputDataView.xaml.cs(256,42): error CS0103: The name 'DataListInputs' does not exist in the current context,D:\a\1\s\Dev\Dev2.Studio\Views\Workflow\WorkflowInputDataView.xaml.cs(271,17): error CS0103: The name 'DataContext' does not exist in the current context,D:\a\1\s\Dev\Dev2.Studio\Views\Workflow\WorkflowInputDataView.xaml.cs(271,78): error CS0103: The name 'DataListInputs' does not exist in the current context,D:\a\1\s\Dev\Dev2.Studio\Views\Workflow\WorkflowInputDataView.xaml.cs(273,17): error CS0103: The name 'DataListInputs' does not exist in the current context,D:\a\1\s\Dev\Dev2.Studio\Views\Workflow\WorkflowInputDataView.xaml.cs(279,22): error CS0103: The name 'DataContext' does not exist in the current context,D:\a\1\s\Dev\Dev2.Studio\Views\Workflow\WorkflowInputDataView.xaml.cs(311,47): error CS0103: The name 'DataListInputs' does not exist in the current context,D:\a\1\s\Dev\Dev2.Studio\Views\Workflow\WorkflowInputDataView.xaml.cs(314,17): error CS0103: The name 'DataListInputs' does not exist in the current context,D:\a\1\s\Dev\Dev2.Studio\Views\Workflow\WorkflowInputDataView.xaml.cs(321,51): error CS0103: The name 'DataListInputs' does not exist in the current context,D:\a\1\s\Dev\Dev2.Studio\Views\Workflow\WorkflowInputDataView.xaml.cs(324,17): error CS0103: The name 'DataListInputs' does not exist in the current context,D:\a\1\s\Dev\Dev2.Studio\Views\Workflow\WorkflowInputDataView.xaml.cs(338,26): error CS0103: The name 'DataContext' does not exist in the current context,D:\a\1\s\Dev\Dev2.Studio\Views\Workflow\WorkflowInputDataView.xaml.cs(339,51): error CS0103: The name 'DataListInputs' does not exist in the current context,D:\a\1\s\Dev\Dev2.Studio\Views\Workflow\WorkflowInputDataView.xaml.cs(342,21): error CS0103: The name 'DataListInputs' does not exist in the current context,D:\a\1\s\Dev\Dev2.Studio\Views\Workflow\WorkflowInputDataView.xaml.cs(390,27): error CS0103: The name 'TabItems' does not exist in the current context,D:\a\1\s\Dev\Dev2.Studio\Views\Workflow\WorkflowInputDataView.xaml.cs(391,17): error CS0103: The name 'DataContext' does not exist in the current context,D:\a\1\s\Dev\Dev2.Studio\Views\Workflow\WorkflowInputDataView.xaml.cs(446,17): error CS0103: The name 'DragMove' does not exist in the current context,D:\a\1\s\Dev\Dev2.Studio\Views\Workflow\WorkflowInputDataView.xaml.cs(461,17): error CS0103: The name 'DataContext' does not exist in the current context,D:\a\1\s\Dev\Dev2.Studio\Views\Workflow\WorkflowInputDataView.xaml.cs(461,80): error CS0103: The name 'DataListInputs' does not exist in the current context,D:\a\1\s\Dev\Dev2.Studio\Views\Workflow\WorkflowInputDataView.xaml.cs(463,17): error CS0103: The name 'DataListInputs' does not exist in the current context,D:\a\1\s\Dev\Dev2.Studio\Views\Workflow\WorkflowInputDataView.xaml.cs(464,17): error CS0120: An object reference is required for the non-static field, method, or property 'Dispatcher.BeginInvoke(Delegate, params object[])',D:\a\1\s\Dev\Dev2.Studio\Views\Workflow\WorkflowInputDataView.xaml.cs(470,17): error CS0103: The name 'DataContext' does not exist in the current context,D:\a\1\s\Dev\Dev2.Studio\Views\Workflow\WorkflowInputDataView.xaml.cs(470,78): error CS0103: The name 'DataListInputs' does not exist in the current context,D:\a\1\s\Dev\Dev2.Studio\Views\Workflow\WorkflowInputDataView.xaml.cs(472,17): error CS0103: The name 'DataListInputs' does not exist in the current context,D:\a\1\s\Dev\Dev2.Studio\Views\Workflow\WorkflowInputDataView.xaml.cs(478,16): error CS0103: The name 'DataListInputs' does not exist in the current context,D:\a\1\s\Dev\Dev2.Studio\Views\Workflow\WorkflowInputDataView.xaml.cs(478,48): error CS0103: The name 'DataListInputs' does not exist in the current context,D:\a\1\s\Dev\Dev2.Studio\Views\Workflow\WorkflowInputDataView.xaml.cs(480,42): error CS0103: The name 'DataListInputs' does not exist in the current context,D:\a\1\s\Dev\Dev2.Studio\Views\Workflow\WorkflowInputDataView.xaml.cs(484,21): error CS0103: The name 'DataListInputs' does not exist in the current context,D:\a\1\s\Dev\Dev2.Studio\Views\Workflow\WorkflowInputDataView.xaml.cs(501,22): error CS0103: The name 'DataContext' does not exist in the current context,D:\a\1\s\Dev\Dev2.Studio\Views\Workflow\WorkflowInputDataView.xaml.cs(523,22): error CS0103: The name 'DataContext' does not exist in the current context
---- Semantic diagnostics *after* transformation ----
D:\a\1\s\Dev\Dev2.Studio\Views\Workflow\WorkflowInputDataView.xaml.cs(44,13): error CS0103: The name 'InitializeComponent' does not exist in the current context,D:\a\1\s\Dev\Dev2.Studio\Views\Workflow\WorkflowInputDataView.xaml.cs(89,13): error CS0103: The name 'XmlOutput' does not exist in the current context,D:\a\1\s\Dev\Dev2.Studio\Views\Workflow\WorkflowInputDataView.xaml.cs(117,17): error CS0103: The name 'JsonOutput' does not exist in the current context,D:\a\1\s\Dev\Dev2.Studio\Views\Workflow\WorkflowInputDataView.xaml.cs(156,26): error CS0103: The name 'DataContext' does not exist in the current context,D:\a\1\s\Dev\Dev2.Studio\Views\Workflow\WorkflowInputDataView.xaml.cs(166,21): error CS0103: The name 'DataContext' does not exist in the current context,D:\a\1\s\Dev\Dev2.Studio\Views\Workflow\WorkflowInputDataView.xaml.cs(175,62): error CS0136: A local or parameter named 'tabItem' cannot be declared in this scope because that name is used in an enclosing local scope to define a local or parameter,D:\a\1\s\Dev\Dev2.Studio\Views\Workflow\WorkflowInputDataView.xaml.cs(236,26): error CS0103: The name 'DataContext' does not exist in the current context,D:\a\1\s\Dev\Dev2.Studio\Views\Workflow\WorkflowInputDataView.xaml.cs(245,17): error CS0103: The name 'DataContext' does not exist in the current context,D:\a\1\s\Dev\Dev2.Studio\Views\Workflow\WorkflowInputDataView.xaml.cs(245,80): error CS0103: The name 'DataListInputs' does not exist in the current context,D:\a\1\s\Dev\Dev2.Studio\Views\Workflow\WorkflowInputDataView.xaml.cs(247,17): error CS0103: The name 'DataListInputs' does not exist in the current context,D:\a\1\s\Dev\Dev2.Studio\Views\Workflow\WorkflowInputDataView.xaml.cs(248,17): error CS0120: An object reference is required for the non-static field, method, or property 'Dispatcher.BeginInvoke(Delegate, params object[])',D:\a\1\s\Dev\Dev2.Studio\Views\Workflow\WorkflowInputDataView.xaml.cs(256,42): error CS0103: The name 'DataListInputs' does not exist in the current context,D:\a\1\s\Dev\Dev2.Studio\Views\Workflow\WorkflowInputDataView.xaml.cs(271,17): error CS0103: The name 'DataContext' does not exist in the current context,D:\a\1\s\Dev\Dev2.Studio\Views\Workflow\WorkflowInputDataView.xaml.cs(271,78): error CS0103: The name 'DataListInputs' does not exist in the current context,D:\a\1\s\Dev\Dev2.Studio\Views\Workflow\WorkflowInputDataView.xaml.cs(273,17): error CS0103: The name 'DataListInputs' does not exist in the current context,D:\a\1\s\Dev\Dev2.Studio\Views\Workflow\WorkflowInputDataView.xaml.cs(279,22): error CS0103: The name 'DataContext' does not exist in the current context,D:\a\1\s\Dev\Dev2.Studio\Views\Workflow\WorkflowInputDataView.xaml.cs(311,47): error CS0103: The name 'DataListInputs' does not exist in the current context,D:\a\1\s\Dev\Dev2.Studio\Views\Workflow\WorkflowInputDataView.xaml.cs(314,17): error CS0103: The name 'DataListInputs' does not exist in the current context,D:\a\1\s\Dev\Dev2.Studio\Views\Workflow\WorkflowInputDataView.xaml.cs(321,51): error CS0103: The name 'DataListInputs' does not exist in the current context,D:\a\1\s\Dev\Dev2.Studio\Views\Workflow\WorkflowInputDataView.xaml.cs(324,17): error CS0103: The name 'DataListInputs' does not exist in the current context,D:\a\1\s\Dev\Dev2.Studio\Views\Workflow\WorkflowInputDataView.xaml.cs(338,26): error CS0103: The name 'DataContext' does not exist in the current context,D:\a\1\s\Dev\Dev2.Studio\Views\Workflow\WorkflowInputDataView.xaml.cs(339,51): error CS0103: The name 'DataListInputs' does not exist in the current context,D:\a\1\s\Dev\Dev2.Studio\Views\Workflow\WorkflowInputDataView.xaml.cs(342,21): error CS0103: The name 'DataListInputs' does not exist in the current context,D:\a\1\s\Dev\Dev2.Studio\Views\Workflow\WorkflowInputDataView.xaml.cs(390,17): error CS0103: The name 'DataContext' does not exist in the current context,D:\a\1\s\Dev\Dev2.Studio\Views\Workflow\WorkflowInputDataView.xaml.cs(394,21): error CS0103: The name 'TabItems' does not exist in the current context,D:\a\1\s\Dev\Dev2.Studio\Views\Workflow\WorkflowInputDataView.xaml.cs(446,17): error CS0103: The name 'DragMove' does not exist in the current context,D:\a\1\s\Dev\Dev2.Studio\Views\Workflow\WorkflowInputDataView.xaml.cs(461,17): error CS0103: The name 'DataContext' does not exist in the current context,D:\a\1\s\Dev\Dev2.Studio\Views\Workflow\WorkflowInputDataView.xaml.cs(461,80): error CS0103: The name 'DataListInputs' does not exist in the current context,D:\a\1\s\Dev\Dev2.Studio\Views\Workflow\WorkflowInputDataView.xaml.cs(463,17): error CS0103: The name 'DataListInputs' does not exist in the current context,D:\a\1\s\Dev\Dev2.Studio\Views\Workflow\WorkflowInputDataView.xaml.cs(464,17): error CS0120: An object reference is required for the non-static field, method, or property 'Dispatcher.BeginInvoke(Delegate, params object[])',D:\a\1\s\Dev\Dev2.Studio\Views\Workflow\WorkflowInputDataView.xaml.cs(470,17): error CS0103: The name 'DataContext' does not exist in the current context,D:\a\1\s\Dev\Dev2.Studio\Views\Workflow\WorkflowInputDataView.xaml.cs(470,78): error CS0103: The name 'DataListInputs' does not exist in the current context,D:\a\1\s\Dev\Dev2.Studio\Views\Workflow\WorkflowInputDataView.xaml.cs(472,17): error CS0103: The name 'DataListInputs' does not exist in the current context,D:\a\1\s\Dev\Dev2.Studio\Views\Workflow\WorkflowInputDataView.xaml.cs(478,16): error CS0103: The name 'DataListInputs' does not exist in the current context,D:\a\1\s\Dev\Dev2.Studio\Views\Workflow\WorkflowInputDataView.xaml.cs(478,48): error CS0103: The name 'DataListInputs' does not exist in the current context,D:\a\1\s\Dev\Dev2.Studio\Views\Workflow\WorkflowInputDataView.xaml.cs(480,42): error CS0103: The name 'DataListInputs' does not exist in the current context,D:\a\1\s\Dev\Dev2.Studio\Views\Workflow\WorkflowInputDataView.xaml.cs(484,21): error CS0103: The name 'DataListInputs' does not exist in the current context,D:\a\1\s\Dev\Dev2.Studio\Views\Workflow\WorkflowInputDataView.xaml.cs(501,22): error CS0103: The name 'DataContext' does not exist in the current context,D:\a\1\s\Dev\Dev2.Studio\Views\Workflow\WorkflowInputDataView.xaml.cs(523,22): error CS0103: The name 'DataContext' does not exist in the current context
######################################################################


######################################################################
Nr: 5 - UsePatternMatchingRewriterR8
Filepath: D:\a\1\s\Dev\Dev2.Studio\ViewModels\Workflow\WorkflowDesignerViewModel.cs
Description: Error: The created Syntax Tree is semantically incorrect.
------------------------------------------------------------------------
---- Original Tree ----
using Caliburn.Micro;
using Dev2.Activities.Designers2.Core;
using Dev2.Common;
using Dev2.Common.Common;
using Dev2.Common.Interfaces.Core.Collections;
using Dev2.Common.Interfaces.Enums;
using Dev2.Common.Interfaces.Infrastructure;
using Dev2.Common.Interfaces.Infrastructure.Providers.Errors;
using Dev2.Common.Interfaces.Security;
using Dev2.Common.Interfaces.Studio.Controller;
using Dev2.Common.Interfaces.Threading;
using Dev2.CustomControls.Utils;
using Dev2.Data.Interfaces;
using Dev2.Data.SystemTemplates.Models;
using Dev2.Data.Util;
using Dev2.DataList.Contract;
using Dev2.Diagnostics;
using Dev2.Dialogs;
using Dev2.Factories;
using Dev2.Factory;
using Dev2.Instrumentation;
using Dev2.Messages;
using Dev2.Runtime.Configuration.ViewModels.Base;
using Dev2.Services.Events;
using Dev2.Studio.ActivityDesigners;
using Dev2.Studio.AppResources.AttachedProperties;
using Dev2.Studio.AppResources.ExtensionMethods;
using Dev2.Studio.Controller;
using Dev2.Studio.Core;
using Dev2.Studio.Core.Activities.Services;
using Dev2.Studio.Core.Activities.Utils;
using Dev2.Studio.Core.AppResources.DependencyInjection.EqualityComparers;
using Dev2.Studio.Core.AppResources.ExtensionMethods;
using Dev2.Studio.Core.Factories;
using Dev2.Studio.Core.Messages;
using Dev2.Studio.Core.Network;
using Dev2.Studio.Core.Utils;
using Dev2.Studio.Enums;
using Dev2.Studio.Factory;
using Dev2.Studio.Interfaces;
using Dev2.Studio.Interfaces.DataList;
using Dev2.Studio.Interfaces.Enums;
using Dev2.Studio.ViewModels.Diagnostics;
using Dev2.Studio.ViewModels.WorkSurface;
using Dev2.Threading;
using Dev2.Utilities;
using Dev2.Utils;
using Dev2.ViewModels.Workflow;
using Dev2.Workspaces;
using Newtonsoft.Json;
using System;
using System.Activities;
using System.Activities.Core.Presentation;
using System.Activities.Presentation;
using System.Activities.Presentation.Metadata;
using System.Activities.Presentation.Model;
using System.Activities.Presentation.Services;
using System.Activities.Presentation.View;
using System.Activities.Statements;
using System.Collections.Generic;
using System.ComponentModel;
using System.Linq;
using System.Reflection;
using System.Runtime.Versioning;
using System.Text;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Threading;
using System.Xaml;
using System.Xml.Linq;
using Unlimited.Applications.BusinessDesignStudio.Activities;
using Warewolf.Studio.ViewModels;
using Dev2.ViewModels.Merge;
using Dev2.Communication;
using System.IO;
using Dev2.Common.Interfaces;
using Dev2.Activities.Designers2.Gate;
using Dev2.Activities;
using Warewolf.Data;
using Warewolf.Data.Options;
using StringExtension = Dev2.Common.ExtMethods.StringExtension;

namespace Dev2.Studio.ViewModels.Workflow
{
    public class FromToolBox
    {
    }

    public class WorkflowDesignerViewModel : BaseWorkSurfaceViewModel,
                                             IHandle<AddStringListToDataListMessage>,
                                             IHandle<EditActivityMessage>,
                                             IHandle<SaveUnsavedWorkflowMessage>,
                                             IWorkflowDesignerViewModel
    {
        static readonly Type[] DecisionSwitchTypes = { typeof(FlowSwitch<string>), typeof(FlowDecision) };

        protected readonly IDesignerManagementService _designerManagementService;
        readonly IWorkflowHelper _workflowHelper;
        DelegateCommand _collapseAllCommand;

        protected dynamic DataObject { get; set; }
        List<ModelItem> _selectedDebugItems = new List<ModelItem>();
        DelegateCommand _expandAllCommand;

        protected ModelService _modelService;
        IContextualResourceModel _resourceModel;

        protected Dictionary<IDataListVerifyPart, string> _uniqueWorkflowParts;

        protected WorkflowDesigner _wd;
        DesignerMetadata _wdMeta;

        VirtualizedContainerService _virtualizedContainerService;
        MethodInfo _virtualizedContainerServicePopulateAllMethod;

        readonly StudioSubscriptionService<DebugSelectionChangedEventArgs> _debugSelectionChangedService = new StudioSubscriptionService<DebugSelectionChangedEventArgs>();

        readonly IApplicationTracker _applicationTracker;
        public bool IsStartNodeErrorMessageSet { get; set; }

        protected IWorkflowDesignerWrapper _workflowDesignerHelper;

        public WorkflowDesignerViewModel(IContextualResourceModel resource)
            : this(resource, true)
        {
        }

        public WorkflowDesignerViewModel(IContextualResourceModel resource, bool createDesigner)
            : this(resource, new WorkflowHelper(), createDesigner)
        {
        }

        public WorkflowDesignerViewModel(IContextualResourceModel resource, IWorkflowHelper workflowHelper, bool createDesigner)
            : this(EventPublishers.Aggregator, resource, workflowHelper, createDesigner)
        {
        }

        WorkflowDesignerViewModel(IEventAggregator eventPublisher, IContextualResourceModel resource, IWorkflowHelper workflowHelper, bool createDesigner)
            : this(eventPublisher, resource, workflowHelper,
                CustomContainer.Get<IPopupController>(), new AsyncWorker(), createDesigner)
        {
        }

        public WorkflowDesignerViewModel(IWorkflowDesignerWrapper workflowDesignerHelper, IEventAggregator eventPublisher, IContextualResourceModel resource, IWorkflowHelper workflowHelper, IPopupController popupController, IAsyncWorker asyncWorker, bool createDesigner, bool liteInit)
            : this(eventPublisher, resource, workflowHelper, popupController, asyncWorker, createDesigner, liteInit)
        {
            _workflowDesignerHelper = workflowDesignerHelper;
        }

        public WorkflowDesignerViewModel(IEventAggregator eventPublisher, IContextualResourceModel resource, IWorkflowHelper workflowHelper, IPopupController popupController, IAsyncWorker asyncWorker, bool createDesigner)
            : this(eventPublisher, resource, workflowHelper, popupController, asyncWorker, createDesigner, false)
        {
        }

        public WorkflowDesignerViewModel(IEventAggregator eventPublisher, IContextualResourceModel resource, IWorkflowHelper workflowHelper, IPopupController popupController, IAsyncWorker asyncWorker, bool createDesigner, bool liteInit)
            : base(eventPublisher)
        {
            VerifyArgument.IsNotNull("workflowHelper", workflowHelper);
            VerifyArgument.IsNotNull("popupController", popupController);
            VerifyArgument.IsNotNull("asyncWorker", asyncWorker);
            _workflowHelper = workflowHelper;
            _resourceModel = resource;
            _resourceModel.OnDataListChanged += FireWdChanged;
            _resourceModel.OnResourceSaved += UpdateOriginalDataList;
            _asyncWorker = asyncWorker;
            CanViewWorkflowLink = true;

            PopUp = popupController;

            if (_resourceModel.DataList != null)
            {
                SetOriginalDataList(_resourceModel);
            }
            _designerManagementService = new DesignerManagementService(resource, _resourceModel.Environment.ResourceRepository);
            if (createDesigner)
            {
                ActivityDesignerHelper.AddDesignerAttributes(this, liteInit);
            }
            UpdateWorkflowInputDataViewModel(_resourceModel);
            UpdateWorkflowLink();
            DataListViewModel = DataListViewModelFactory.CreateDataListViewModel(_resourceModel);
            DebugOutputViewModel = new DebugOutputViewModel(_resourceModel.Environment.Connection.ServerEvents, CustomContainer.Get<IServerRepository>(), new DebugOutputFilterStrategy(), ResourceModel);
            _firstWorkflowChange = true;
            _workflowDesignerHelper = new WorkflowDesignerWrapper();
            _applicationTracker = CustomContainer.Get<IApplicationTracker>();
            _shellViewModel = GetShellViewModel();
        }

        private static IShellViewModel GetShellViewModel()
        {
            IShellViewModel shellViewModel;
            try
            {
                if (Application.Current?.MainWindow?.DataContext is IShellViewModel tmpShellViewModel)
                {
                    return tmpShellViewModel;
                }
            }
            catch
            {
            }
            return CustomContainer.Get<IShellViewModel>();
        }

        public void SetPermission(Permissions permission)
        {
            SetNonePermissions();

            if (permission.HasFlag(Permissions.View))
            {
                SetViewPermissions();
            }
            if (permission.HasFlag(Permissions.Execute))
            {
                SetExecutePermissions();
            }
            if (permission.HasFlag(Permissions.Contribute))
            {
                SetContributePermissions();
            }
            if (permission.HasFlag(Permissions.Administrator))
            {
                SetAdministratorPermissions();
            }
        }

        void SetExecutePermissions()
        {
            CanDebugInputs = true;
            CanDebugStudio = true;
            CanDebugBrowser = true;
            CanRunAllTests = !ResourceModel.IsNewWorkflow;
            CanViewOpenAPI = !ResourceModel.IsNewWorkflow;
            CanCopyUrl = !ResourceModel.IsNewWorkflow;
        }

        void SetViewPermissions()
        {
            CanViewOpenAPI = !ResourceModel.IsVersionResource;
            CanCopyUrl = !ResourceModel.IsVersionResource;
        }

        void SetNonePermissions()
        {
            CanDebugInputs = false;
            CanDebugStudio = false;
            CanDebugBrowser = false;
            CanCreateSchedule = false;
            CanCreateQueueEvent = false;
            CanCreateTest = false;
            CanRunAllTests = false;
            CanDuplicate = false;
            CanDeploy = false;
            CanMerge = false;
            CanShowDependencies = false;
            CanViewOpenAPI = false;
            CanCopyUrl = false;
        }

        void SetAdministratorPermissions()
        {
            CanDebugInputs = true;
            CanDebugStudio = true;
            CanDebugBrowser = true;
            CanCreateSchedule = !ResourceModel.IsNewWorkflow;
            CanCreateQueueEvent = !ResourceModel.IsNewWorkflow;
            CanCreateTest = !ResourceModel.IsNewWorkflow;
            CanRunAllTests = !ResourceModel.IsNewWorkflow;
            CanDuplicate = !ResourceModel.IsNewWorkflow;
            CanDeploy = !ResourceModel.IsNewWorkflow;
            CanMerge = !ResourceModel.IsNewWorkflow;
            CanShowDependencies = !ResourceModel.IsNewWorkflow;
            CanViewOpenAPI = !ResourceModel.IsNewWorkflow;
            CanCopyUrl = !ResourceModel.IsNewWorkflow;
        }

        void SetContributePermissions()
        {
            CanDebugInputs = true;
            CanDebugStudio = true;
            CanDebugBrowser = true;
            CanCreateSchedule = !ResourceModel.IsNewWorkflow;
            CanCreateQueueEvent = !ResourceModel.IsNewWorkflow;
            CanCreateTest = !ResourceModel.IsNewWorkflow;
            CanRunAllTests = !ResourceModel.IsNewWorkflow;
            CanDuplicate = !ResourceModel.IsNewWorkflow;
            CanDeploy = !ResourceModel.IsNewWorkflow;
            CanMerge = !ResourceModel.IsNewWorkflow;
            CanShowDependencies = !ResourceModel.IsNewWorkflow;
            CanViewOpenAPI = !ResourceModel.IsNewWorkflow;
            CanCopyUrl = !ResourceModel.IsNewWorkflow;
        }

        public bool CanCopyUrl
        {
            get => _canCopyUrl;
            set
            {
                _canCopyUrl = value;
                CopyUrlTooltip = ResourceModel.IsNewWorkflow ? Warewolf.Studio.Resources.Languages.Tooltips.DisabledToolTip : _canCopyUrl ? Warewolf.Studio.Resources.Languages.Tooltips.CopyUrlToolTip : Warewolf.Studio.Resources.Languages.Tooltips.NoPermissionsToolTip;
                OnPropertyChanged("CanCopyUrl");
            }
        }

        public string CopyUrlTooltip
        {
            get => _copyUrlTooltip;
            set
            {
                _copyUrlTooltip = value;
                OnPropertyChanged("CopyUrlTooltip");
            }
        }

        public bool CanViewOpenAPI
        {
            get => _canViewOpenAPI;
            set
            {
                _canViewOpenAPI = value;
                ViewOpenAPITooltip = ResourceModel.IsNewWorkflow ? Warewolf.Studio.Resources.Languages.Tooltips.DisabledToolTip : _canViewOpenAPI ? Warewolf.Studio.Resources.Languages.Tooltips.ViewOpenAPIToolTip : Warewolf.Studio.Resources.Languages.Tooltips.NoPermissionsToolTip;
                OnPropertyChanged("CanViewOpenAPI");
            }
        }

        public string ViewOpenAPITooltip
        {
            get => _viewOpenAPITooltip;
            set
            {
                _viewOpenAPITooltip = value;
                OnPropertyChanged("ViewOpenAPITooltip");
            }
        }

        public bool CanShowDependencies
        {
            get => _canShowDependencies;
            set
            {
                _canShowDependencies = value;
                ShowDependenciesTooltip = ResourceModel.IsNewWorkflow ? Warewolf.Studio.Resources.Languages.Tooltips.DisabledToolTip : _canShowDependencies ? Warewolf.Studio.Resources.Languages.Tooltips.DependenciesToolTip : Warewolf.Studio.Resources.Languages.Tooltips.NoPermissionsToolTip;
                OnPropertyChanged("CanShowDependencies");
            }
        }

        public string ShowDependenciesTooltip
        {
            get => _showDependenciesTooltip;
            set
            {
                _showDependenciesTooltip = value;
                OnPropertyChanged("ShowDependenciesTooltip");
            }
        }

        public bool CanDeploy
        {
            get => _canDeploy;
            set
            {
                _canDeploy = value;
                DeployTooltip = ResourceModel.IsNewWorkflow ? Warewolf.Studio.Resources.Languages.Tooltips.DisabledToolTip : _canDeploy ? Warewolf.Studio.Resources.Languages.Tooltips.DeployToolTip : Warewolf.Studio.Resources.Languages.Tooltips.NoPermissionsToolTip;
                OnPropertyChanged("CanDeploy");
            }
        }

        public bool CanMerge
        {
            get
            {
                if (ResourceModel.IsVersionResource || (GetVersionHistory() != null && _canMerge))
                {
                    return true;
                }

                return false;
            }
            set
            {
                _canMerge = value;
                MergeTooltip = Warewolf.Studio.Resources.Languages.Tooltips.ViewMergeTooltip;
                OnPropertyChanged("CanMerge");
            }
        }

        ICollection<IVersionInfo> GetVersionHistory()
        {
            var versionInfos = Server?.ExplorerRepository?.GetVersions(ResourceModel.ID);
            if (versionInfos?.Count <= 0)
            {
                return null;
            }

            return versionInfos;
        }

        public string DeployTooltip
        {
            get => _deployTooltip;
            set
            {
                _deployTooltip = value;
                OnPropertyChanged("DeployTooltip");
            }
        }

        public string MergeTooltip
        {
            get => _mergeTooltip;
            set
            {
                _mergeTooltip = value;
                OnPropertyChanged("MergeTooltip");
            }
        }

        public bool CanDuplicate
        {
            get => _canDuplicate;
            set
            {
                _canDuplicate = value;
                DuplicateTooltip = ResourceModel.IsNewWorkflow ? Warewolf.Studio.Resources.Languages.Tooltips.DisabledToolTip : _canDuplicate ? Warewolf.Studio.Resources.Languages.Tooltips.DuplicateToolTip : Warewolf.Studio.Resources.Languages.Tooltips.NoPermissionsToolTip;
                OnPropertyChanged("CanDuplicate");
            }
        }

        public string DuplicateTooltip
        {
            get => _duplicateTooltip;
            set
            {
                _duplicateTooltip = value;
                OnPropertyChanged("DuplicateTooltip");
            }
        }

        public bool CanRunAllTests
        {
            get => _canRunAllTests;
            set
            {
                _canRunAllTests = value;
                RunAllTestsTooltip = ResourceModel.IsNewWorkflow ? Warewolf.Studio.Resources.Languages.Tooltips.DisabledToolTip : _canRunAllTests ? Warewolf.Studio.Resources.Languages.Tooltips.RunAllTestsToolTip : Warewolf.Studio.Resources.Languages.Tooltips.NoPermissionsToolTip;
                RunCoverageTooltip = ResourceModel.IsNewWorkflow ? Warewolf.Studio.Resources.Languages.Tooltips.DisabledToolTip : _canRunAllTests ? Warewolf.Studio.Resources.Languages.Tooltips.RunCoverageToolTip : Warewolf.Studio.Resources.Languages.Tooltips.NoPermissionsToolTip;
                OnPropertyChanged("CanRunAllTests");
            }
        }

        public string RunAllTestsTooltip
        {
            get => _runAllTestsTooltip;
            set
            {
                _runAllTestsTooltip = value;
                OnPropertyChanged("RunAllTestsTooltip");
            }
        }
        
        public string RunCoverageTooltip
        {
            get => _runCoverageTooltip;
            set
            {
                _runCoverageTooltip = value;
                OnPropertyChanged(nameof(RunCoverageTooltip));
            }
        }

        public bool CanCreateTest
        {
            get => _canCreateTest;
            set
            {
                _canCreateTest = value;
                CreateTestTooltip = ResourceModel.IsNewWorkflow ? Warewolf.Studio.Resources.Languages.Tooltips.DisabledToolTip : _canCreateTest ? Warewolf.Studio.Resources.Languages.Tooltips.TestEditorToolTip : Warewolf.Studio.Resources.Languages.Tooltips.NoPermissionsToolTip;
                OnPropertyChanged("CanCreateTest");
            }
        }

        public string CreateTestTooltip
        {
            get => _createTestTooltip;
            set
            {
                _createTestTooltip = value;
                OnPropertyChanged("CreateTestTooltip");
            }
        }

        public bool CanCreateSchedule
        {
            get => _canCreateSchedule;
            set
            {
                _canCreateSchedule = value;
                ScheduleTooltip = ResourceModel.IsNewWorkflow ? Warewolf.Studio.Resources.Languages.Tooltips.DisabledToolTip : _canCreateSchedule ? Warewolf.Studio.Resources.Languages.Tooltips.ScheduleToolTip : Warewolf.Studio.Resources.Languages.Tooltips.NoPermissionsToolTip;
                OnPropertyChanged("CanCreateSchedule");
            }
        }

        public string ScheduleTooltip
        {
            get => _scheduleTooltip;
            set
            {
                _scheduleTooltip = value;
                OnPropertyChanged("ScheduleTooltip");
            }
        }

        public bool CanCreateQueueEvent
        {
            get => _canCreateQueueEvent;
            set
            {
                _canCreateQueueEvent = value;
                QueueEventTooltip = ResourceModel.IsNewWorkflow ? Warewolf.Studio.Resources.Languages.Tooltips.DisabledToolTip : _canCreateSchedule ? Warewolf.Studio.Resources.Languages.Tooltips.QueueEventToolTip : Warewolf.Studio.Resources.Languages.Tooltips.NoPermissionsToolTip;
                OnPropertyChanged("CanCreateQueueEvent");
            }
        }

        public string QueueEventTooltip
        {
            get => _queueEventTooltip;
            set
            {
                _queueEventTooltip = value;
                OnPropertyChanged("QueueEventTooltip");
            }
        }

        public bool CanDebugBrowser
        {
            get => _debugBrowser;
            set
            {
                _debugBrowser = value;
                DebugBrowserTooltip = ResourceModel.IsNewWorkflow ? Warewolf.Studio.Resources.Languages.Tooltips.DisabledToolTip : _debugBrowser ? Warewolf.Studio.Resources.Languages.Tooltips.StartNodeDebugBrowserToolTip : Warewolf.Studio.Resources.Languages.Tooltips.NoPermissionsToolTip;
                OnPropertyChanged("CanDebugBrowser");
            }
        }

        public string DebugBrowserTooltip
        {
            get => _debugBrowserTooltip;
            set
            {
                _debugBrowserTooltip = value;
                OnPropertyChanged("DebugBrowserTooltip");
            }
        }

        public bool CanDebugStudio
        {
            get => _canDebugStudio;
            set
            {
                _canDebugStudio = value;
                DebugStudioTooltip = ResourceModel.IsNewWorkflow ? Warewolf.Studio.Resources.Languages.Tooltips.DisabledToolTip : _canDebugStudio ? Warewolf.Studio.Resources.Languages.Tooltips.StartNodeDebugStudioToolTip : Warewolf.Studio.Resources.Languages.Tooltips.NoPermissionsToolTip;
                OnPropertyChanged("CanDebugStudio");
            }
        }

        public string DebugStudioTooltip
        {
            get => _debugStudioTooltip;
            set
            {
                _debugStudioTooltip = value;
                OnPropertyChanged("DebugStudioTooltip");
            }
        }

        public bool CanDebugInputs
        {
            get => _canDebugInputs;
            set
            {
                _canDebugInputs = value;
                DebugInputsTooltip = ResourceModel.IsNewWorkflow ? Warewolf.Studio.Resources.Languages.Tooltips.DisabledToolTip : _canDebugInputs ? Warewolf.Studio.Resources.Languages.Tooltips.StartNodeDebugInputsToolTip : Warewolf.Studio.Resources.Languages.Tooltips.NoPermissionsToolTip;
                OnPropertyChanged("CanDebugInputs");
            }
        }

        public string DebugInputsTooltip
        {
            get => _debugInputsTooltip;
            set
            {
                _debugInputsTooltip = value;
                OnPropertyChanged("DebugInputsTooltip");
            }
        }

        void SetOriginalDataList(IContextualResourceModel contextualResourceModel)
        {
            if (!string.IsNullOrEmpty(contextualResourceModel.DataList))
            {
                _originalDataList = contextualResourceModel.DataList.Replace("<DataList>", "").Replace("</DataList>", "").Replace(Environment.NewLine, "").Trim();
            }
        }

        void UpdateOriginalDataList(IContextualResourceModel obj)
        {
            if (obj.IsWorkflowSaved)
            {
                SetOriginalDataList(obj);
            }
        }

        public DebugOutputViewModel DebugOutputViewModel
        {
            get => _debugOutputViewModel;
            set => _debugOutputViewModel = value;
        }

        public IDataListViewModel DataListViewModel
        {
            get => _dataListViewModel;
            set
            {
                _dataListViewModel = value;
                NotifyOfPropertyChange(() => DataListViewModel);
            }
        }

        public override bool HasVariables => true;
        public override bool HasDebugOutput => true;

        public override bool CanSave => ResourceModel.IsAuthorized(AuthorizationContext.Contribute);

        protected virtual bool IsDesignerViewVisible => DesignerView != null && DesignerView.IsVisible;

#pragma warning disable 108,114

        public string DisplayName
#pragma warning restore 108,114
        {
            get
            {
                var displayName = ResourceModel.UserPermissions == Permissions.View ?
                    $"{ResourceHelper.GetDisplayName(ResourceModel)} [READONLY]"
                    : ResourceHelper.GetDisplayName(ResourceModel);
                return displayName;
            }
        }
        
        public string GetAndUpdateWorkflowLinkWithWorkspaceID()
        {
            UpdateWorkflowLink();
            return _workflowLinkWithWid;
        }

        public void UpdateWorkflowLink()
        {
            if (_workflowInputDataViewModel != null)
            {
                if (!string.IsNullOrEmpty(_resourceModel.DataList))
                {
                    _workflowInputDataViewModel.DebugTo.DataList = _resourceModel.DataList;
                }
                _workflowLink = "";
                _workflowInputDataViewModel.LoadWorkflowInputs();
                _workflowInputDataViewModel.SetXmlData(true);
                var buildWebPayLoad = _workflowInputDataViewModel.BuildInputDataList();

                var uri = _resourceModel.GetWorkflowUri(buildWebPayLoad, UrlType.Json, true);
                if (uri != null) {
                    _workflowLinkWithWid = uri.ToString();
                    var startIndex = _workflowLinkWithWid.IndexOf("&wid", StringComparison.InvariantCultureIgnoreCase);
                    if (startIndex != -1)
                    {
                        _workflowLink = _workflowLinkWithWid.Remove(startIndex);
                    }
                }
            }
            NotifyOfPropertyChange(() => DisplayWorkflowLink);
        }

        public string GetWorkflowInputs(string field)
        {
            var workflowInputDataViewModel = _workflowInputDataViewModel as WorkflowInputDataViewModel;
            var inputsValue = workflowInputDataViewModel?.WorkflowInputs?.FirstOrDefault(o => o.Field == field);
            return inputsValue?.Value;
        }

        public string DisplayWorkflowLink
        {
            get
            {
                return _workflowLink;
            }
            private set
            {
                _workflowLink = value;
            }
        }

        public Visibility WorkflowLinkVisible => _resourceModel.IsVersionResource ? Visibility.Hidden : Visibility.Visible;
        public bool CanViewWorkflowLink { get; set; }

        public IPopupController PopUp { get; set; }
        
        public virtual object SelectedModelItem => _wd?.Context?.Items.GetValue<Selection>().SelectedObjects.FirstOrDefault();

        public IContextualResourceModel ResourceModel
        {
            get => _resourceModel;
            set => _resourceModel = value;
        }

        public string WorkflowName => _resourceModel.ResourceName;

        public WorkflowDesigner Designer => _wd;

        public UIElement DesignerView => _wd?.View;

        public StringBuilder DesignerText => ServiceDefinition;

        public StringBuilder ServiceDefinition => _workflowHelper.SerializeWorkflow(_modelService);

        public ICommand CollapseAllCommand => _collapseAllCommand ?? (_collapseAllCommand = new DelegateCommand(param =>
        {
            var val = Convert.ToBoolean(param);
            if (val)
            {
                _designerManagementService.RequestCollapseAll();
            }
            else
            {
                _designerManagementService.RequestRestoreAll();
            }
        }));

        public ICommand ExpandAllCommand => _expandAllCommand ?? (_expandAllCommand = new DelegateCommand(param =>
        {
            var val = Convert.ToBoolean(param);
            if (val)
            {
                _designerManagementService.RequestExpandAll();
            }
            else
            {
                _designerManagementService.RequestRestoreAll();
            }
        }));

        public ICommand OpenWorkflowLinkCommand
        {
            get
            {
                return _openWorkflowLinkCommand ?? (_openWorkflowLinkCommand = new DelegateCommand(param =>
                {
                    if (!string.IsNullOrEmpty(_workflowLink))
                    {
                        if (_applicationTracker != null)
                        {
                            _applicationTracker.TrackEvent(Warewolf.Studio.Resources.Languages.TrackEventMenu.EventCategory,
                                                                Warewolf.Studio.Resources.Languages.TrackEventMenu.LinkUrl);
                        }
                        SaveToWorkspace();
                        if (_workflowInputDataViewModel.WorkflowInputCount == 0)
                        {
                            PopUp.ShowNoInputsSelectedWhenClickLink();
                        }
                        try
                        {
                            OpenLinkInBrowser();
                        }
                        catch (Exception e)
                        {
                            Dev2Logger.Error("OpenWorkflowLinkCommand", e, GlobalConstants.WarewolfError);
                        }
                    }
                }));
            }
        }

        public ICommand NewServiceCommand => _newServiceCommand ?? (_newServiceCommand = new DelegateCommand(param =>
        {
            if (Application.Current != null && Application.Current.Dispatcher != null && Application.Current.Dispatcher.CheckAccess() && Application.Current.MainWindow != null)
            {
                var mvm = Application.Current.MainWindow.DataContext as ShellViewModel;
                if (mvm?.ActiveItem != null)
                {
                    mvm.NewService("");
                }
            }
        }));

        public ICommand DebugInputsCommand => _debugInputsCommand ?? (_debugInputsCommand = new DelegateCommand(param =>
        {
            if (Application.Current != null && Application.Current.Dispatcher != null && Application.Current.Dispatcher.CheckAccess() && Application.Current.MainWindow != null)
            {
                var mvm = Application.Current.MainWindow.DataContext as ShellViewModel;
                if (mvm?.ActiveItem != null)
                {
                    mvm.DebugCommand.Execute(mvm.ActiveItem);
                }
            }
        }));

        public ICommand DebugStudioCommand => _debugStudioCommand ?? (_debugStudioCommand = new DelegateCommand(param =>
        {
            if (Application.Current != null && Application.Current.Dispatcher != null && Application.Current.Dispatcher.CheckAccess() && Application.Current.MainWindow != null)
            {
                var mvm = Application.Current.MainWindow.DataContext as ShellViewModel;
                if (mvm?.ActiveItem != null)
                {
                    mvm.QuickDebugCommand.Execute(mvm.ActiveItem);
                }
            }
        }));

        public ICommand DebugBrowserCommand => _debugBrowserCommand ?? (_debugBrowserCommand = new DelegateCommand(param =>
        {
            OpenLinkInBrowser();
        }));

        static void OpenLinkInBrowser()
        {
            if (Application.Current != null && Application.Current.Dispatcher != null && Application.Current.Dispatcher.CheckAccess() && Application.Current.MainWindow != null)
            {
                var mvm = Application.Current.MainWindow.DataContext as ShellViewModel;
                if (mvm?.ActiveItem != null)
                {
                    mvm.QuickViewInBrowserCommand.Execute(mvm.ActiveItem);
                }
            }
        }

        public ICommand ScheduleCommand => _scheduleCommand ?? (_scheduleCommand = new DelegateCommand(param =>
        {
            if (Application.Current != null && Application.Current.Dispatcher != null && Application.Current.Dispatcher.CheckAccess() && Application.Current.MainWindow != null)
            {
                var mvm = Application.Current.MainWindow.DataContext as ShellViewModel;
                if (mvm?.ActiveItem != null)
                {
                    mvm.CreateNewSchedule(mvm.ActiveItem.ContextualResourceModel.ID);
                }
            }
        }));

        public ICommand QueueEventCommand => _queueEventCommand ?? (_queueEventCommand = new DelegateCommand(param =>
        {
            if (Application.Current != null && Application.Current.Dispatcher != null && Application.Current.Dispatcher.CheckAccess() && Application.Current.MainWindow != null)
            {
                var mvm = Application.Current.MainWindow.DataContext as ShellViewModel;
                if (mvm?.ActiveItem != null)
                {
                    mvm.CreateNewQueueEvent(mvm.ActiveItem.ContextualResourceModel.ID);
                }
            }
        }));

        public ICommand TestEditorCommand => _testEditorCommand ?? (_testEditorCommand = new DelegateCommand(param =>
        {
            if (Application.Current != null && Application.Current.Dispatcher != null && Application.Current.Dispatcher.CheckAccess() && Application.Current.MainWindow != null)
            {
                var mvm = Application.Current.MainWindow.DataContext as ShellViewModel;
                if (mvm?.ActiveItem != null)
                {
                    mvm.CreateTest(mvm.ActiveItem.ContextualResourceModel.ID);
                }
            }
        }));

        public ICommand DuplicateCommand => _duplicateCommand ?? (_duplicateCommand = new DelegateCommand(param =>
        {
            if (Application.Current != null && Application.Current.Dispatcher != null && Application.Current.Dispatcher.CheckAccess() && Application.Current.MainWindow != null)
            {
                var mvm = Application.Current.MainWindow.DataContext as ShellViewModel;
                if (mvm?.ActiveItem != null)
                {
                    IExplorerItemViewModel explorerItem = null;
                    var environmentViewModels = mvm.ExplorerViewModel.Environments.Where(a => a.ResourceId == mvm.ActiveServer.EnvironmentID);
                    foreach (var environmentViewModel in environmentViewModels)
                    {
                        explorerItem = environmentViewModel.Children.Flatten(model => model.Children).FirstOrDefault(c => c.ResourceId == mvm.ActiveItem.ContextualResourceModel.ID);
                    }

                    if (explorerItem != null)
                    {
                        mvm.DuplicateResource(explorerItem);
                    }
                }
            }
        }));

        public ICommand DeployCommand => _deployCommand ?? (_deployCommand = new DelegateCommand(param =>
        {
            if (Application.Current != null && Application.Current.Dispatcher != null && Application.Current.Dispatcher.CheckAccess() && Application.Current.MainWindow != null)
            {
                var mvm = Application.Current.MainWindow.DataContext as ShellViewModel;
                if (mvm?.ActiveItem != null)
                {
                    var explorerItem = GetSelected(mvm);
                    if (explorerItem != null)
                    {
                        mvm.AddDeploySurface(explorerItem.AsList().Union(new[] { explorerItem }));
                    }
                }
            }
        }));

        public ICommand MergeCommand => _mergeCommand ?? (_mergeCommand = new DelegateCommand(param =>
        {
            if (Application.Current?.Dispatcher == null || !Application.Current.Dispatcher.CheckAccess() || Application.Current?.MainWindow == null)
            {
                return;
            }
            MergeWorkflow();
        }));

        public IShellViewModel ShellViewModel => _shellViewModel ?? CustomContainer.Get<IShellViewModel>();
        
        private static void MergeWorkflow()
        {
            var shellViewModel = Application.Current.MainWindow.DataContext as ShellViewModel;
            if (shellViewModel?.ActiveItem == null)
            {
                return;
            }

            var explorerItem = shellViewModel.ActiveItem.ContextualResourceModel.IsVersionResource
                             ? GetMergeResourceVersion(shellViewModel)
                             : GetMergeCurrentResource(shellViewModel);

            if (explorerItem == null)
            {
                return;
            }
            shellViewModel.OpenMergeDialogView(explorerItem);
        }

        private static IExplorerItemViewModel GetMergeResourceVersion(ShellViewModel shellViewModel)
        {
            var resourceId = shellViewModel.ActiveItem.ContextualResourceModel.OriginalId;
            var environmentViewModel = shellViewModel.ExplorerViewModel.Environments.FirstOrDefault(a => a.ResourceId == shellViewModel.ActiveServer.EnvironmentID);
            return environmentViewModel?.UnfilteredChildren?.Flatten(model => model.UnfilteredChildren).FirstOrDefault(c => c.ResourceId == resourceId);
        }

        private static IExplorerItemViewModel GetMergeCurrentResource(ShellViewModel shellViewModel)
        {
            var resourceId = shellViewModel.ActiveItem.ContextualResourceModel.ID;
            var environmentViewModel = shellViewModel.ExplorerViewModel.Environments.FirstOrDefault(a => a.ResourceId == shellViewModel.ActiveServer.EnvironmentID);
            return environmentViewModel?.UnfilteredChildren?.Flatten(model => model.UnfilteredChildren).Where(a => !a.IsVersion).FirstOrDefault(c => c.ResourceId == resourceId);
        }

        static IExplorerItemViewModel GetSelected(ShellViewModel mvm)
        {
            IExplorerItemViewModel explorerItem = null;
            if (mvm?.ActiveServer != null)
            {
                var environmentViewModels = mvm.ExplorerViewModel.Environments.Where(a => a.ResourceId == mvm.ActiveServer.EnvironmentID);
                foreach (var environmentViewModel in environmentViewModels)
                {
                    explorerItem =
                        environmentViewModel.UnfilteredChildren.Flatten(model => model.UnfilteredChildren)
                            .FirstOrDefault(c => c.ResourceId == mvm.ActiveItem.ContextualResourceModel.ID);
                }
            }
            return explorerItem;
        }

        public ICommand ShowDependenciesCommand => _showDependenciesCommand ?? (_showDependenciesCommand = new DelegateCommand(param =>
        {
            if (Application.Current != null && Application.Current.Dispatcher != null && Application.Current.Dispatcher.CheckAccess() && Application.Current.MainWindow != null)
            {
                var mvm = Application.Current.MainWindow.DataContext as ShellViewModel;
                var explorerItem = GetSelected(mvm);
                if (explorerItem != null)
                {
                    mvm.ShowDependencies(mvm.ActiveItem.ContextualResourceModel.ID, mvm.ActiveServer, explorerItem.IsSource || explorerItem.IsServer);
                }
            }
        }));

        public ICommand ViewOpenAPICommand => _viewOpenAPICommand ?? (_viewOpenAPICommand = new DelegateCommand(param =>
        {
            if (Application.Current != null && Application.Current.Dispatcher != null && Application.Current.Dispatcher.CheckAccess() && Application.Current.MainWindow != null)
            {
                var mvm = Application.Current.MainWindow.DataContext as ShellViewModel;
                if (mvm?.ActiveItem != null)
                {
                    mvm.ViewOpenAPI(mvm.ActiveItem.ContextualResourceModel.ResourceName, mvm.ActiveItem.ContextualResourceModel.ResourceName, mvm.ActiveServer.Connection.WebServerUri);
                }
            }
        }));

        public ICommand CopyUrlCommand => _copyUrlCommand ?? (_copyUrlCommand = new DelegateCommand(param =>
        {
            Clipboard.SetText(_workflowLink);
        }));
        
        protected ModelItem PerformAddItems(ModelItem addedItem)


        {
            var mi = addedItem;
            var computedValue = mi.Content?.ComputedValue;

            //Track added items when dragged on design surface
            if (computedValue != null && computedValue.GetType() != typeof(DsfActivity))
            {
                _applicationTracker?.TrackCustomEvent(Warewolf.Studio.Resources.Languages.TrackEventWorkflowTabs.EventCategory, Warewolf.Studio.Resources.Languages.TrackEventWorkflowTabs.ItemDragged, computedValue.ToString());
            }
            if (computedValue == null && (mi.ItemType == typeof(DsfFlowDecisionActivity) ||
                                          mi.ItemType == typeof(DsfFlowSwitchActivity)))
            {
                computedValue = mi.Source?.Value?.Source?.ComputedValue;
            }
            if (computedValue is IDev2Activity act)
            {
                if (_isPaste || string.IsNullOrEmpty(act.UniqueID))
                {
                    act.UniqueID = Guid.NewGuid().ToString();
                }
                _modelItems = _modelService.Find(_modelService.Root, typeof(IDev2Activity));
            }
            if (computedValue is Activity)
            {
                _activityCollection = _modelService.Find(_modelService.Root, typeof(Activity));
            }

            if (mi.ItemType == typeof(FlowSwitch<string>))
            {
                InitializeFlowSwitch(mi);
            }
            else if (mi.ItemType == typeof(FlowDecision))
            {
                InitializeFlowDecision(mi);
                _applicationTracker?.TrackCustomEvent(Warewolf.Studio.Resources.Languages.TrackEventWorkflowTabs.EventCategory, Warewolf.Studio.Resources.Languages.TrackEventWorkflowTabs.ItemDragged, mi.ItemType.Name);
            }
            else if (mi.ItemType == typeof(FlowStep))
            {
                InitializeFlowStep(mi);
            }
            else
            {
                AddSwitch(mi);
            }
            _isPaste = false;
            return addedItem;
        }

        void AddSwitch(ModelItem mi)
        {
            if (mi.Parent?.Parent?.Parent != null && mi.Parent.Parent.Parent.ItemType == typeof(FlowSwitch<string>))
            {
                var activityExpression = mi.Parent.Parent.Parent.Properties["Expression"];
                if (activityExpression != null)
                {
                    var switchExpressionValue = SwitchExpressionValue(activityExpression);
                    var modelProperty = mi.Properties["Key"];
                    if (modelProperty?.Value != null && (FlowController.OldSwitchValue == null || string.IsNullOrWhiteSpace(FlowController.OldSwitchValue)))
                    {
                        FlowController.ConfigureSwitchCaseExpression(new ConfigureCaseExpressionMessage { ModelItem = mi, ExpressionText = switchExpressionValue, Server = _resourceModel.Environment, IsPaste = _isPaste });
                    }
                }
            }
        }
        
        static string SwitchExpressionValue(ModelProperty activityExpression)
        {
            var tmpModelItem = activityExpression.Value;
            var switchExpressionValue = string.Empty;
            var tmpProperty = tmpModelItem?.Properties["ExpressionText"];
            var tmp = tmpProperty?.Value?.ToString();

            if (!string.IsNullOrEmpty(tmp))
            {
                var start = tmp.IndexOf("(", StringComparison.Ordinal);
                var end = tmp.IndexOf(",", StringComparison.Ordinal);

                if (start < end && start >= 0)
                {
                    start += 2;
                    end -= 1;
                    switchExpressionValue = tmp.Substring(start, (end - start));
                }
            }
            return switchExpressionValue;
        }

        void InitializeFlowStep(ModelItem mi)
        {
            // PBI 9135 - 2013.07.15 - TWR - Changed to "as" check so that database activity also flows through this
            var modelProperty1 = mi.Properties["Action"];
            InitialiseWithAction(modelProperty1);
        }

        void InitialiseWithAction(ModelProperty modelProperty1)
        {
            if (modelProperty1?.ComputedValue is DsfActivity droppedActivity)
            {
                if (!string.IsNullOrEmpty(droppedActivity.ServiceName))
                {
                    InitialiseWithoutServiceName(modelProperty1, droppedActivity);
                }
                else
                {
                    InitialiseWithDataObject(droppedActivity);
                }
            }
        }

        void InitialiseWithDataObject(DsfActivity droppedActivity)
        {
            if (DataObject != null)
            {
                if (DataObject is ExplorerItemViewModel viewModel)
                {
                    var serverRepository = CustomContainer.Get<IServerRepository>();
                    var server = serverRepository.FindSingle(c => c.EnvironmentID == viewModel.Server.EnvironmentID);
                    serverRepository.ActiveServer = server;
                    var theResource = server?.ResourceRepository.LoadContextualResourceModel(viewModel.ResourceId);

                    if (theResource != null)
                    {
                        DsfActivity d = DsfActivityFactory.CreateDsfActivity(theResource, droppedActivity, true, serverRepository, _resourceModel.Environment.IsLocalHostCheck());
                        TrackAction(theResource);

                        UpdateForRemote(d, theResource);
                    }
                }
                DataObject = null;
            }
        }

        void TrackAction(IContextualResourceModel theResource)
        {
            if (_applicationTracker != null)
            {
                if (theResource.DisplayName == "Hello World")
                {
                    //track hello world dragged
                    _applicationTracker.TrackCustomEvent(Warewolf.Studio.Resources.Languages.TrackEventWorkflowTabs.EventCategory,
                                       Warewolf.Studio.Resources.Languages.TrackEventWorkflowTabs.HelloWorld, theResource.DisplayName);
                }
                else if (theResource.Category != null && theResource.Category.StartsWith("Examples"))
                {
                    //track examples actitvity dragged
                    _applicationTracker.TrackCustomEvent(Warewolf.Studio.Resources.Languages.TrackEventWorkflowTabs.EventCategory,
                                        Warewolf.Studio.Resources.Languages.TrackEventWorkflowTabs.Examples, theResource.DisplayName);
                }
                else
                {
                    // other than above
                    _applicationTracker.TrackCustomEvent(Warewolf.Studio.Resources.Languages.TrackEventWorkflowTabs.EventCategory,
                                        Warewolf.Studio.Resources.Languages.TrackEventWorkflowTabs.ItemDragged, theResource.DisplayName);
                }
            }
        }

        public ResourceType ResourceType
        {
            get
            {
                if (ResourceModel != null)
                {
                    return ResourceModel.ResourceType;
                }
                return ResourceType.Unknown;
            }
        }

        void InitialiseWithoutServiceName(ModelProperty modelProperty1, DsfActivity droppedActivity)
        {
            var activity = droppedActivity;
            var serverRepository = CustomContainer.Get<IServerRepository>();
            var server = CustomContainer.Get<IServerRepository>().ActiveServer;
            var resourceId = Guid.Parse(activity.ResourceID.Expression.ToString());
            var resource = server.ResourceRepository.LoadContextualResourceModel(resourceId);
            var displayName = resource != null ? resource.DisplayName : activity.DisplayName;

            droppedActivity = DsfActivityFactory.CreateDsfActivity(resource, droppedActivity, false, serverRepository, _resourceModel.Environment.IsLocalHostCheck());
            WorkflowDesignerUtils.CheckIfRemoteWorkflowAndSetProperties(droppedActivity, resource, serverRepository.ActiveServer);
            modelProperty1.SetValue(droppedActivity);
            _applicationTracker?.TrackCustomEvent(Warewolf.Studio.Resources.Languages.TrackEventWorkflowTabs.EventCategory, Warewolf.Studio.Resources.Languages.TrackEventWorkflowTabs.ItemDragged, displayName);
        }

        void InitializeFlowSwitch(ModelItem mi)
        {
            // Travis.Frisinger : 28.01.2013 - Switch Amendments
            Dev2Logger.Info("Publish message of type - " + typeof(ConfigureSwitchExpressionMessage), "Warewolf Info");
            _expressionString = FlowController.ConfigureSwitchExpression(new ConfigureSwitchExpressionMessage { ModelItem = mi, Server = _resourceModel.Environment, IsNew = true, IsPaste = _isPaste });
            AddMissingWithNoPopUpAndFindUnusedDataListItemsImpl(false);
        }

        void InitializeFlowDecision(ModelItem mi)
        {
            Dev2Logger.Info("Publish message of type - " + typeof(ConfigureDecisionExpressionMessage), "Warewolf Info");
            var modelProperty = mi.Properties["Action"];

            InitialiseWithAction(modelProperty);
            _expressionString = FlowController.ConfigureDecisionExpression(new ConfigureDecisionExpressionMessage { ModelItem = mi, Server = _resourceModel.Environment, IsNew = true, IsPaste = _isPaste });
            AddMissingWithNoPopUpAndFindUnusedDataListItemsImpl(false);
        }

        void EditActivity(ModelItem modelItem, Guid parentEnvironmentID)
        {
            if (Designer == null)
            {
                return;
            }
            var modelService = Designer.Context.Services.GetService<ModelService>();
            if (modelService.Root == modelItem.Root && (modelItem.ItemType == typeof(DsfActivity) || modelItem.ItemType.BaseType == typeof(DsfActivity)))
            {
                var resourceID = ModelItemUtils.TryGetResourceID(modelItem);
                var shellViewModel = CustomContainer.Get<IShellViewModel>();
                shellViewModel.OpenResource(resourceID, parentEnvironmentID, shellViewModel.ActiveServer);
            }
        }

        static ModelItem RecursiveForEachCheck(dynamic activity)
        {
            var innerAct = activity.DataFunc.Handler as ModelItem;
            if (innerAct != null)
            {
                if (innerAct.ItemType == typeof(DsfForEachActivity))
                {
                    innerAct = RecursiveForEachCheck(innerAct);
                }
            }
            return innerAct;
        }
        
        void PreventCommandFromBeingExecuted(CanExecuteRoutedEventArgs e)
        {
            if (Designer?.Context != null)
            {
                var selection = Designer.Context.Items.GetValue<Selection>();

                if (selection?.PrimarySelection == null)
                {
                    return;
                }

                if (selection.PrimarySelection.ItemType != typeof(Flowchart) &&
                   selection.SelectedObjects.All(modelItem => modelItem.ItemType != typeof(Flowchart)))
                {
                    return;
                }
            }

            e.CanExecute = false;
            e.Handled = true;
        }
        
        void SetLastDroppedPoint(DragEventArgs e)
        {
            var senderAsFrameworkElement = _modelService.Root.View as FrameworkElement;
            UIElement freePormPanel = senderAsFrameworkElement?.FindNameAcrossNamescopes("flowchartPanel");
            if (freePormPanel != null)
            {
                e.GetPosition(freePormPanel);
            }
        }

        IList<IDataListVerifyPart> BuildWorkflowFields()
        {
            var dataPartVerifyDuplicates = new DataListVerifyPartDuplicationParser();
            _uniqueWorkflowParts = new Dictionary<IDataListVerifyPart, string>(dataPartVerifyDuplicates);
            var modelService = Designer?.Context.Services.GetService<ModelService>();
            if (modelService != null)
            {
                var flowNodes = modelService.Find(modelService.Root, typeof(FlowNode));

                GetWorkflowFieldsFromFlowNodes(flowNodes);
            }
            var flattenedList = _uniqueWorkflowParts.Keys.ToList();
            return flattenedList;
        }

        protected void GetWorkflowFieldsFromFlowNodes(IEnumerable<ModelItem> flowNodes)
        {
            foreach (var flowNode in flowNodes)
            {
                var workflowFields = GetWorkflowFieldsFromModelItem(flowNode);
                foreach (var field in workflowFields)
                {
                    var isJsonObjectSource = field.StartsWith("@");
                    WorkflowDesignerDataPartUtils.BuildDataPart(field, _uniqueWorkflowParts, isJsonObjectSource);
                }
            }
        }

        IEnumerable<string> GetWorkflowFieldsFromModelItem(ModelItem flowNode)
        {
            var workflowFields = new List<string>();
            try
            {
                var modelProperty = flowNode.Properties["Action"];
                if (modelProperty != null)
                {
                    var activity = modelProperty.ComputedValue;
                    workflowFields = GetActivityElements(activity);
                }
                else
                {
                    var propertyName = string.Empty;
                    if (flowNode.ItemType.Name == "FlowDecision")
                    {
                        propertyName = "Condition";
                    }
                    else
                    {
                        if (flowNode.ItemType.Name == "FlowSwitch`1")
                        {
                            propertyName = "Expression";
                        }
                    }

                    var property = flowNode.Properties[propertyName];
                    if (property != null)
                    {
                        workflowFields = GetWorkflowFieldsFromProperty(workflowFields, property);
                    }
                }
            }
            catch (Exception ex)
            {
                Dev2Logger.Error(ex.Message, GlobalConstants.WarewolfError);
            }
            return workflowFields;
        }

        List<string> GetWorkflowFieldsFromProperty(List<string> workflowFields, ModelProperty property)
        {
            if (!string.IsNullOrEmpty(_expressionString))
            {
                workflowFields = TryGetDecisionElements(_expressionString, DataListSingleton.ActiveDataList);
                var activity = property.ComputedValue;
                if (activity != null)
                {
                    workflowFields.AddRange(TryGetDecisionElements(((dynamic)activity).ExpressionText, DataListSingleton.ActiveDataList));
                }
            }
            else
            {
                var activity = property.ComputedValue;
                if (activity != null)
                {
                    workflowFields.AddRange(TryGetDecisionElements(((dynamic)activity).ExpressionText, DataListSingleton.ActiveDataList));
                }
            }

            return workflowFields;
        }

        public static List<String> TryGetDecisionElements(string expression, IDataListViewModel datalistModel)
        {
            var decisionFields = new List<string>();
            if (!string.IsNullOrEmpty(expression))
            {
                var startIndex = expression.IndexOf('"');
                startIndex = startIndex + 1;
                var endindex = expression.IndexOf('"', startIndex);
                var decisionValue = expression.Substring(startIndex, endindex - startIndex);
                try
                {
                    decisionFields = GetDecisionElements(datalistModel, decisionFields, decisionValue);
                }
                catch (Exception)
                {
                    if (!DataListUtil.IsValueRecordset(decisionValue))
                    {
                        var parts = DataListFactory.CreateLanguageParser().ParseExpressionIntoParts(decisionValue, new List<IDev2DataLanguageIntellisensePart>());
                        decisionFields.AddRange(parts.Select(part => DataListUtil.StripBracketsFromValue(part.Option.DisplayValue)));
                        return decisionFields;
                    }
                    if (DataListSingleton.ActiveDataList != null)
                    {
                        var parts = DataListFactory.CreateLanguageParser().ParseDataLanguageForIntellisense(decisionValue, DataListSingleton.ActiveDataList.WriteToResourceModel(), true);
                        decisionFields.AddRange(parts.Select(part => DataListUtil.StripBracketsFromValue(part.Option.DisplayValue)));
                    }
                }
            }
            return decisionFields;
        }

        private static List<string> GetDecisionElements(IDataListViewModel datalistModel, List<string> decisionFields, string decisionValue)
        {
            var dds = JsonConvert.DeserializeObject<Dev2DecisionStack>(decisionValue.Replace('!', '\"'));
            foreach (var decision in dds.TheStack)
            {
                var getCols = new[] { decision.Col1, decision.Col2, decision.Col3 };
                for (var i = 0; i < 3; i++)
                {
                    decisionFields = GetDecisionFields(datalistModel, decisionFields, decisionValue, getCols, i);
                }
            }
            return decisionFields;
        }

        private static List<string> GetDecisionFields(IDataListViewModel datalistModel, List<string> decisionFields, string decisionValue, string[] getCols, int i)
        {
            var getCol = getCols[i];
            if (datalistModel != null)
            {
                var parsed = GetParsedRegions(getCol, datalistModel);
                if (!DataListUtil.IsValueRecordset(getCol) && parsed.Any(DataListUtil.IsValueRecordset))
                {
                    var parts = DataListFactory.CreateLanguageParser().ParseExpressionIntoParts(decisionValue, new List<IDev2DataLanguageIntellisensePart>());
                    decisionFields.AddRange(parts.Select(part => DataListUtil.StripBracketsFromValue(part.Option.DisplayValue)));
                }
                else
                {
                    decisionFields = decisionFields.Union(GetParsedRegions(getCol, datalistModel)).ToList();
                }
            }

            return decisionFields;
        }

        static IEnumerable<string> GetParsedRegions(string getCol, IDataListViewModel datalistModel)
        {
            // Travis.Frisinger - 25.01.2013
            // We now need to parse this data for regions ;)

            var parser = DataListFactory.CreateLanguageParser();
            // NEED - DataList for active workflow
            var parts = parser.ParseDataLanguageForIntellisense(getCol, datalistModel.WriteToResourceModel(), true);

            return (from intellisenseResult in parts
                    select DataListUtil.StripBracketsFromValue(intellisenseResult.Option.DisplayValue)
                    into varWithNoBrackets
                    where !string.IsNullOrEmpty(getCol) && !varWithNoBrackets.Equals(getCol)
                    select getCol
                   ).ToList();
        }

        static List<String> GetActivityElements(object activity)
        {
            var assign = activity as DsfActivityAbstract<string>;
            var other = activity as DsfActivityAbstract<bool>;
            enFindMissingType findMissingType;

            if (assign != null)
            {
                findMissingType = assign.GetFindMissingType();
            }
            else if (other != null)
            {
                findMissingType = other.GetFindMissingType();
            }
            else
            {
                return new List<String>();
            }

            var activityFields = new List<string>();
            var stratFac = new Dev2FindMissingStrategyFactory();
            var strategy = stratFac.CreateFindMissingStrategy(findMissingType);

            foreach (var activityField in strategy.GetActivityFields(activity))
            {
                if (!string.IsNullOrEmpty(activityField))
                {
                    var wdu = new WorkflowDesignerUtils();
                    activityFields.AddRange(wdu.FormatDsfActivityField(activityField).Where(item => !item.Contains("xpath(")));
                }
            }
            return activityFields;
        }

        void OnItemSelected(Selection item)
        {
            var primarySelection = item.PrimarySelection;
            NotifyItemSelected(primarySelection);
            primarySelection.SetProperty("IsSelected", true);
            SelectedItem = primarySelection;
        }

        public Action<ModelItem> ItemSelectedAction { get; set; }

        public void Handle(AddStringListToDataListMessage message)
        {
            Dev2Logger.Info(message.GetType().Name, "Warewolf Info");
            var dlvm = DataListSingleton.ActiveDataList;
            if (dlvm != null)
            {
                var dataPartVerifyDuplicates = new DataListVerifyPartDuplicationParser();
                _uniqueWorkflowParts = new Dictionary<IDataListVerifyPart, string>(dataPartVerifyDuplicates);
                foreach (var s in message.ListToAdd)
                {
                    WorkflowDesignerDataPartUtils.BuildDataPart(s, _uniqueWorkflowParts);
                }
                var partsToAdd = _uniqueWorkflowParts.Keys.ToList();
                var uniqueDataListPartsToAdd = dlvm.MissingDataListParts(partsToAdd);
                dlvm.AddMissingDataListItems(uniqueDataListPartsToAdd);
            }
        }

        public bool NotifyItemSelected(object primarySelection) => false;

        public void BindToModel() => _resourceModel.WorkflowXaml = ServiceDefinition;

        public void InitializeDesigner(IDictionary<Type, Type> designerAttributes) => InitializeDesigner(designerAttributes, false);

        public void InitializeDesigner(IDictionary<Type, Type> designerAttributes, bool liteInit)
        {
            _wd = new WorkflowDesigner();
            if (!liteInit)
            {
                SetHashTable();
                SetDesignerConfigService();

                _wdMeta = new DesignerMetadata();
                _wdMeta.Register();
                var builder = new AttributeTableBuilder();
                foreach (var designerAttribute in designerAttributes)
                {
                    builder.AddCustomAttributes(designerAttribute.Key, new DesignerAttribute(designerAttribute.Value));
                }

                MetadataStore.AddAttributeTable(builder.CreateTable());

                _wd.Context.Items.Subscribe<Selection>(OnItemSelected);
                _wd.Context.Services.Subscribe<ModelService>(ModelServiceSubscribe);
                _wd.Context.Services.Subscribe<DesignerView>(DesigenrViewSubscribe);
                _wd.Context.Services.Publish(_designerManagementService);

                _wd.View.Measure(new Size(2000, 2000));
                _wd.View.PreviewDrop += ViewPreviewDrop;
                _wd.View.PreviewMouseDown += ViewPreviewMouseDown;
                _wd.View.PreviewKeyDown += ViewOnKeyDown;
                _wd.View.LostFocus += OnViewOnLostFocus;

                //Jurie.Smit 2013/01/03 - Added to disable the deleting of the root flowchart
                CommandManager.AddPreviewCanExecuteHandler(_wd.View, CanExecuteRoutedEventHandler);
                _wd.ModelChanged += WdOnModelChanged;
                _wd.View.Focus();

                var indexOfOpenItem = -1;
                if (_wd.ContextMenu?.Items != null)
                {
                    foreach (var menuItem in _wd.ContextMenu.Items.Cast<object>().OfType<MenuItem>().Where(menuItem => (string)menuItem.Header == "_Open"))
                    {
                        indexOfOpenItem = _wd.ContextMenu.Items.IndexOf(menuItem);
                        break;
                    }
                    if (indexOfOpenItem != -1)
                    {
                        _wd.ContextMenu.Items.RemoveAt(indexOfOpenItem);
                    }
                }

                CommandManager.AddPreviewExecutedHandler(_wd.View, PreviewExecutedRoutedEventHandler);

                Selection.Subscribe(_wd.Context, SelectedItemChanged);

                LoadDesignerXaml();
                _workflowHelper.EnsureImplementation(_modelService);

                WorkflowDesignerIcons.Activities.Flowchart = Application.Current.TryFindResource("Explorer-WorkflowService-Icon") as DrawingBrush;
                WorkflowDesignerIcons.Activities.StartNode = Application.Current.TryFindResource("System-StartNode-Icon") as DrawingBrush;
                SubscribeToDebugSelectionChanged();
                SetPermission(ResourceModel.UserPermissions);
                ViewModelUtils.RaiseCanExecuteChanged(_debugOutputViewModel?.AddNewTestCommand);
                UpdateErrorIconWithCorrectMessage();
            }
        }

        public void CreateDesigner() => CreateDesigner(false);

        public void CreateDesigner(bool liteInit)
        {
            _wd = new WorkflowDesigner();

            if (!liteInit)
            {
                SetHashTable();
                SetDesignerConfigService();

                _wdMeta = new DesignerMetadata();
                _wdMeta.Register();
                var builder = new AttributeTableBuilder();
                foreach (var designerAttribute in ActivityDesignerHelper.DesignerAttributes)
                {
                    builder.AddCustomAttributes(designerAttribute.Key, new DesignerAttribute(designerAttribute.Value));
                }

                MetadataStore.AddAttributeTable(builder.CreateTable());

                _wd.Context.Items.Subscribe<Selection>(OnItemSelected);
                _wd.Context.Services.Subscribe<ModelService>(ModelServiceSubscribe);
                _wd.Context.Services.Subscribe<DesignerView>(DesigenrViewSubscribe);
                _wd.Context.Services.Publish(_designerManagementService);

                _wd.View.Measure(new Size(2000, 2000));
                _wd.View.PreviewDrop += ViewPreviewDrop;
                _wd.View.PreviewMouseDown += ViewPreviewMouseDown;
                _wd.View.PreviewKeyDown += ViewOnKeyDown;
                _wd.View.LostFocus += OnViewOnLostFocus;

                //Jurie.Smit 2013/01/03 - Added to disable the deleting of the root flowchart
                CommandManager.AddPreviewCanExecuteHandler(_wd.View, CanExecuteRoutedEventHandler);
                _wd.ModelChanged += WdOnModelChanged;
                _wd.View.Focus();

                var indexOfOpenItem = -1;
                if (_wd.ContextMenu?.Items != null)
                {
                    foreach (var menuItem in _wd.ContextMenu.Items.Cast<object>().OfType<MenuItem>().Where(menuItem => (string)menuItem.Header == "_Open"))
                    {
                        indexOfOpenItem = _wd.ContextMenu.Items.IndexOf(menuItem);
                        break;
                    }
                    if (indexOfOpenItem != -1)
                    {
                        _wd.ContextMenu.Items.RemoveAt(indexOfOpenItem);
                    }
                }

                CommandManager.AddPreviewExecutedHandler(_wd.View, PreviewExecutedRoutedEventHandler);

                Selection.Subscribe(_wd.Context, SelectedItemChanged);
                WorkflowDesignerIcons.Activities.Flowchart = Application.Current.TryFindResource("Explorer-WorkflowService-Icon") as DrawingBrush;
                WorkflowDesignerIcons.Activities.StartNode = Application.Current.TryFindResource("System-StartNode-Icon") as DrawingBrush;
                SubscribeToDebugSelectionChanged();
                SetPermission(ResourceModel.UserPermissions);
                ViewModelUtils.RaiseCanExecuteChanged(_debugOutputViewModel?.AddNewTestCommand);
                UpdateErrorIconWithCorrectMessage();
            }
        }

        void SetHashTable() => _wd.PropertyInspectorFontAndColorData = XamlServices.Save(ActivityDesignerHelper.GetDesignerHashTable());

        void SetDesignerConfigService()
        {
            var designerConfigService = _wd.Context.Services.GetService<DesignerConfigurationService>();
            if (designerConfigService != null)
            {
                // set the runtime Framework version to 4.5 as new features are in .NET 4.5 and do not exist in .NET 4
                designerConfigService.TargetFrameworkName = new FrameworkName(".NETFramework", new Version(4, 5));
                designerConfigService.AutoConnectEnabled = true;
                designerConfigService.AutoSplitEnabled = true;
                designerConfigService.PanModeEnabled = true;
                designerConfigService.RubberBandSelectionEnabled = true;
                designerConfigService.BackgroundValidationEnabled = true;

                // prevent design-time background validation from blocking UI thread
                // Disabled for now
                designerConfigService.AnnotationEnabled = false;
                designerConfigService.AutoSurroundWithSequenceEnabled = false;
            }
        }
        
        static void ViewOnKeyDown(object sender, KeyEventArgs e)
        {
            var grid = sender as Grid;
            if (e.OriginalSource != null)
            {
                var origSource = e.OriginalSource.GetType();
                if (origSource.BaseType == typeof(ActivityDesigner) && e.Key == Key.Return)
                {
                    e.Handled = true;
                }

                var type = grid?.DataContext.GetType();
                if (type == typeof(ServiceTestViewModel) && e.Key == Key.Delete)
                {
                    e.Handled = true;
                }

                if (type == typeof(MergeWorkflowViewModel))
                {
                    if (origSource == typeof(TextBox))
                    {
                        return;
                    }
                    if (e.Key == Key.Delete)
                    {
                        e.Handled = true;
                        return;
                    }
                    var isControlPressed = (Keyboard.Modifiers & ModifierKeys.Control) == ModifierKeys.Control;
                    var isExpectedKey = e.Key == Key.C || e.Key == Key.V;
                    isExpectedKey |= e.Key == Key.X || e.Key == Key.Y || e.Key == Key.Z;
                    if (isControlPressed && isExpectedKey)
                    {
                        e.Handled = true;
                    }
                }
            }
        }

        static void DesigenrViewSubscribe(DesignerView instance)
        {
            // PBI 9221 : TWR : 2013.04.22 - .NET 4.5 upgrade
            instance.WorkflowShellHeaderItemsVisibility = ShellHeaderItemsVisibility.ExpandAll;
            instance.WorkflowShellBarItemVisibility = ShellBarItemVisibility.None;
            instance.WorkflowShellBarItemVisibility = ShellBarItemVisibility.Zoom | ShellBarItemVisibility.PanMode | ShellBarItemVisibility.MiniMap;
        }
        
        void OnViewOnLostFocus(object sender, RoutedEventArgs args)
        {
            var workSurfaceKey = WorkSurfaceKeyFactory.CreateKey(ResourceModel);

            // If we are opening from server skip this check, it cannot have "real" changes!
            if (!OpeningWorkflowsHelper.IsWorkflowWaitingforDesignerLoad(workSurfaceKey))
            {
                // an additional case we need to account for - Designer has resized and is only visible once focus is lost?! ;)
                if (OpeningWorkflowsHelper.IsWaitingForFistFocusLoss(workSurfaceKey) || WatermarkSential.IsWatermarkBeingApplied)
                {
                    ResourceModel.WorkflowXaml = ServiceDefinition;
                    OpeningWorkflowsHelper.RemoveWorkflowWaitingForFirstFocusLoss(workSurfaceKey);
                }
            }
        }

        protected void ModelServiceSubscribe(ModelService instance)
        {
            _modelService = instance;
            _modelService.ModelChanged += ModelServiceModelChanged;
            if (_activityCollection == null)
            {
                _activityCollection = _modelService.Find(_modelService.Root, typeof(Activity));
            }
            if (_modelItems == null)
            {
                _modelItems = _modelService.Find(_modelService.Root, typeof(IDev2Activity));
            }
        }

        void SubscribeToDebugSelectionChanged()
        {
            _virtualizedContainerService = _wd.Context.Services.GetService<VirtualizedContainerService>();
            if (_virtualizedContainerService != null)
            {
                _virtualizedContainerServicePopulateAllMethod = _virtualizedContainerService.GetType().GetMethod("BeginPopulateAll", BindingFlags.Instance | BindingFlags.NonPublic);
            }
            _debugSelectionChangedService.Unsubscribe();
            _debugSelectionChangedService.Subscribe(args =>
            {
                // we only care when the designer is visible
                if (!IsDesignerViewVisible)
                {
                    return;
                }

                if (args.SelectionType == ActivitySelectionType.None)
                {
                    ClearSelection();
                    return;
                }

                var debugState = args.DebugState;
                if (debugState != null)
                {
                    var workSurfaceMappingId = debugState.WorkSurfaceMappingId;
                    var selectedModelItem = GetSelectedModelItem(workSurfaceMappingId, debugState.ParentID.GetValueOrDefault());
                    if (selectedModelItem != null)
                    {
                        switch (args.SelectionType)
                        {
                            case ActivitySelectionType.Single:
                                ClearSelection();
                                SelectSingleModelItem(selectedModelItem);

                                BringIntoView(selectedModelItem);
                                break;

                            case ActivitySelectionType.Add:
                                AddModelItemToSelection(selectedModelItem);

                                BringIntoView(selectedModelItem);
                                break;

                            case ActivitySelectionType.Remove:
                                RemoveModelItemFromSelection(selectedModelItem);
                                break;

                            case ActivitySelectionType.None:
                                break;

                            default:
                                break;
                        }
                    }
                }
            });
        }

        public bool IsTestView { get; set; }

        protected virtual ModelItem GetSelectedModelItem(Guid itemId, Guid parentId)
        {
            if (_modelService != null)
            {
                var selectedModelItem = (from mi in _modelItems
                                         let instanceID = ModelItemUtils.GetUniqueID(mi)
                                         where instanceID == itemId || instanceID == parentId
                                         select mi).FirstOrDefault();

                if (selectedModelItem == null)
                {
                    // Find the root flow chart
                    selectedModelItem = _modelService.Find(_modelService.Root, typeof(Flowchart)).FirstOrDefault();
                }
                else
                {
                    if (DecisionSwitchTypes.Contains(selectedModelItem.Parent.ItemType))
                    {
                        // Decision/switches activities are represented by their parents in the designer!
                        selectedModelItem = selectedModelItem.Parent;
                    }
                }
                return selectedModelItem;
            }
            return null;
        }

        void SelectSingleModelItem(ModelItem selectedModelItem)
        {
            if (SelectedDebugItems.Contains(selectedModelItem))
            {
                return;
            }
            Selection.SelectOnly(_wd.Context, selectedModelItem);
            SelectedDebugItems.Add(selectedModelItem);
        }

        void RemoveModelItemFromSelection(ModelItem selectedModelItem)
        {
            if (SelectedDebugItems.Contains(selectedModelItem))
            {
                SelectedDebugItems.Remove(selectedModelItem);
            }
            Selection.Unsubscribe(_wd.Context, SelectedItemChanged);
        }

        public List<ModelItem> DebugModels => SelectedDebugItems;

        void AddModelItemToSelection(ModelItem selectedModelItem)
        {
            if (SelectedDebugItems.Contains(selectedModelItem))
            {
                return;
            }
            Selection.Union(_wd.Context, selectedModelItem);

            var modelItems = _activityCollection as ModelItem[] ?? _activityCollection.ToArray();
            var index = modelItems.ToList().IndexOf(selectedModelItem);
            if (index != -1)
            {
                Selection.Select(_wd.Context, modelItems.ElementAt(index));
            }
            else
            {
                if (DecisionSwitchTypes.Contains(selectedModelItem.Parent.ItemType))
                {
                    // Decision/switches activities are represented by their parents in the designer!
                    selectedModelItem = selectedModelItem.Parent;
                    index = modelItems.ToList().IndexOf(selectedModelItem);
                    if (index != -1)
                    {
                        Selection.Select(_wd.Context, modelItems.ElementAt(index));
                    }
                }
            }
            SelectedDebugItems.Add(selectedModelItem);
        }

        void ClearSelection()
        {
            _wd.Context.Items.SetValue(new Selection());
            if (_selectedDebugItems != null)
            {
                foreach (var selectedDebugItem in _selectedDebugItems)
                {
                    selectedDebugItem.SetProperty("IsSelected", false);
                }
            }
            _selectedDebugItems = new List<ModelItem>();
        }

        protected virtual void BringIntoView(ModelItem selectedModelItem)
        {
            if (selectedModelItem.View is FrameworkElement view && view.IsVisible)
            {
                BringIntoView(view);
                return;
            }

            var onAfterPopulateAll = new System.Action(() => BringIntoView(selectedModelItem.View as FrameworkElement));
            _virtualizedContainerServicePopulateAllMethod?.Invoke(_virtualizedContainerService, new object[] { onAfterPopulateAll });
        }

        public void BringMergeToView(DataTemplate selectedDataTemplate)
        {
            var dependencyObject = selectedDataTemplate.LoadContent();
            var frameworkElement = dependencyObject as FrameworkElement;
            BringIntoView(frameworkElement);
        }

        static void BringIntoView(FrameworkElement view) => Application.Current?.Dispatcher?.InvokeAsync(() => view?.BringIntoView(), DispatcherPriority.Background);

        protected void LoadDesignerXaml()
        {
            var xaml = _resourceModel.WorkflowXaml;

            // if null, try fetching. It appears there is more than the two routes identified to populating xaml ;(
            if (xaml == null || xaml.Length == 0)
            {
                // we always want server at this point ;)
                var workspace = GlobalConstants.ServerWorkspaceID;

                // log the trace for fetch ;)
                Dev2Logger.Info($"Null Definition For {_resourceModel.ID} :: {_resourceModel.ResourceName}. Fetching...", "Warewolf Info");

                // In the case of null of empty try fetching again ;)
                var msg = Server.ResourceRepository.FetchResourceDefinition(_resourceModel.Environment, workspace, _resourceModel.ID, false);
                if (msg != null)
                {
                    xaml = msg.Message;
                }
            }

            // if we still cannot find it, create a new one ;)
            if (xaml == null || xaml.Length == 0)
            {
                if (_resourceModel.ResourceType == ResourceType.WorkflowService)
                {
                    // log the trace for fetch ;)
                    CreateBlankWorkflow();
                }
                else
                {
                    // we have big issues ;(
                    throw new Exception($"Could not find resource definition for {_resourceModel.ResourceName}");
                }
            }
            else
            {
                SetDesignerText(xaml);
                _wd.Load();
            }
        }

        public void CreateBlankWorkflow()
        {
            CreateDesigner();
            var activityBuilder = _workflowHelper.CreateWorkflow(_resourceModel.ResourceName);
            _wd.Load(activityBuilder);
            BindToModel();
            _workflowHelper.EnsureImplementation(_modelService);
        }

        void SetDesignerText(StringBuilder xaml)
        {
            var designerText = _workflowHelper.SanitizeXaml(xaml);
            if (designerText != null)
            {
                _wd.Text = designerText.ToString();
            }
        }

        void SelectedItemChanged(Selection item)
        {
            if (_wd?.Context != null)
            {
                var contextItemManager = _wd.Context.Items;
                var selection = contextItemManager.GetValue<Selection>();
                if (selection.SelectedObjects.Count() > 1)
                {
                    DeselectFlowchart();
                }
            }
        }

        void DeselectFlowchart()
        {
            if (_wd?.Context != null)
            {
                var editingContext = _wd.Context;
                var selection = editingContext.Items.GetValue<Selection>();
                foreach (var item in selection.SelectedObjects.Where(item => item.ItemType == typeof(Flowchart)))
                {
                    Selection.Toggle(editingContext, item);
                    break;
                }
            }
        }

        public List<NameValue> GetSelectableGates(string uniqueId)
        {
            var serviceDifferenceParser = CustomContainer.Get<IServiceDifferenceParser>();
            var treeNodes = serviceDifferenceParser.BuildWorkflow(ServiceDefinition);

            var list = new List<NameValue> { new NameValue { Name = "End", Value = Guid.Empty.ToString() } };
            try
            {
                IEnumerable<IDev2Activity> connectedList(IDev2Activity activity)
                {
                    var ret = new List<IDev2Activity>();
                    ret.Add(activity);
                    if (activity.NextNodes is null)
                    {
                        return ret;
                    }

                    foreach (var nextActivity in activity.NextNodes)
                    {
                        ret.AddRange(connectedList(nextActivity));
                    }
                    return ret.Where(o => (o is GateActivity));
                }

                bool found = false;
                var allGates = connectedList(treeNodes[0].Activity)
                    .Cast<GateActivity>()
                    .Where(gate => gate?.GateOptions != null && gate.GateOptions.GateOpts is Continue);

                var selectableGates = allGates
                    .TakeWhile(gate => !(found = (gate.UniqueID == uniqueId)));

                foreach (var gate in selectableGates)
                {
                    var id = gate.UniqueID;
                    var activityName = gate.GetDisplayName();
                    var nameValue = new NameValue { Name = activityName, Value = id };
                    list.Add(nameValue);
                }
            }
            catch (Exception ex)
            {
                Dev2Logger.Error("Error loading selectable gates. Exception: " + ex.Message, GlobalConstants.ServerWorkspaceID.ToString());
            }
            return list;
        }

        protected void WdOnModelChanged(object sender, EventArgs eventArgs)
        {
            if ((Designer != null && Designer.View.IsKeyboardFocusWithin) || sender != null)
            {
                var workSurfaceKey = WorkSurfaceKeyFactory.CreateKey(ResourceModel);
                UpdateErrorIconWithCorrectMessage();

                // If we are opening from server skip this check, it cannot have "real" changes!
                if (!OpeningWorkflowsHelper.IsWorkflowWaitingforDesignerLoad(workSurfaceKey))
                {
                    // an additional case we need to account for - Designer has resized and is only visible once focus is lost?! ;)
                    if (OpeningWorkflowsHelper.IsWaitingForFistFocusLoss(workSurfaceKey))
                    {
                        ResourceModel.WorkflowXaml = ServiceDefinition;
                        OpeningWorkflowsHelper.RemoveWorkflowWaitingForFirstFocusLoss(workSurfaceKey);
                    }
                    if (ResourceModel.WorkflowXaml is null)
                    {
                        ResourceModel.WorkflowXaml = ServiceDefinition;
                    }

                    var checkServiceDefinition = CheckServiceDefinition();
                    var checkDataList = CheckDataList();

                    ResourceModel.IsWorkflowSaved = checkServiceDefinition && checkDataList;
                    _workspaceSave = false;
                    WorkflowChanged?.Invoke();
                    NotifyOfPropertyChange(() => DisplayName);
                    ViewModelUtils.RaiseCanExecuteChanged(_debugOutputViewModel?.AddNewTestCommand);
                }
                else
                {
                    // When opening from server, save the hydrated changes for future comparison ;)
                    if (!CheckServiceDefinition())
                    {
                        // process any latent datalist changes ;)
                        ProcessDataListOnLoad();
                        ResourceModel.WorkflowXaml = ServiceDefinition;
                    }
                }

                // THIS MUST NEVER BE DELETED ;)
                WatermarkSential.IsWatermarkBeingApplied = false;
            }
            if (_firstWorkflowChange)
            {
                AddMissingWithNoPopUpAndFindUnusedDataListItemsImpl(false);
                _firstWorkflowChange = false;
            }
        }

        void UpdateErrorIconWithCorrectMessage()
        {
            var validationIcon = DesignerView?.FindChild<Border>(border => border.Name.Equals("validationVisuals", StringComparison.CurrentCultureIgnoreCase));
            if (validationIcon != null && validationIcon.Name.Equals("validationVisuals", StringComparison.CurrentCultureIgnoreCase))
            {
                validationIcon.ToolTip = Warewolf.Studio.Resources.Languages.Tooltips.StartNodeNotConnectedToolTip;

                //It should be called once when there is first tool dragged or start node link get deleted
                if (!IsStartNodeErrorMessageSet)
                {
                    IsStartNodeErrorMessageSet = true;
                    _applicationTracker?.TrackEvent(Warewolf.Studio.Resources.Languages.TrackEventWorkflowTabs.EventCategory, Warewolf.Studio.Resources.Languages.TrackEventWorkflowTabs.StartNodeNotConnected);
                }
            }
        }

        bool CheckDataList()
        {
            if (_originalDataList == null)
            {
                return true;
            }

            if (ResourceModel.DataList != null)
            {
                var currentDataList = ResourceModel.DataList.Replace("<DataList>", "").Replace("</DataList>", "");
                return StringExtension.SpaceCaseInsenstiveComparision(currentDataList, _originalDataList);
            }
            return true;
        }
        string _serviceDefinitionXamlCache = "";
        string _resourceDefinitionXamlCache = "";
        bool _serviceAndResourceDefinitionXamlSameCache;
        bool CheckServiceDefinition()
        {
            if (ServiceDefinition is null || ResourceModel.WorkflowXaml is null)
            {
                return ServiceDefinition == ResourceModel.WorkflowXaml;
            }
            var serviceDefinitionXaml = ServiceDefinition.ToString();
            var resourceDefinitionXaml = ResourceModel.WorkflowXaml.ToString();
            if (serviceDefinitionXaml == _serviceDefinitionXamlCache && resourceDefinitionXaml == _resourceDefinitionXamlCache)
            {
                return _serviceAndResourceDefinitionXamlSameCache;
            }

            _serviceDefinitionXamlCache = serviceDefinitionXaml;
            _resourceDefinitionXamlCache = resourceDefinitionXaml;

            var eq = WorkflowHelper.AreWorkflowsEqual(ServiceDefinition.ToString(), ResourceModel.WorkflowXaml.ToString());
            _serviceAndResourceDefinitionXamlSameCache = eq;
            return eq;
        }
        
        void ProcessDataListOnLoad()
        {
            AddMissingWithNoPopUpAndFindUnusedDataListItemsImpl(true);
        }

        public void DoWorkspaceSave()
        {
            if (ResourceModel != null && ResourceModel.IsNewWorkflow && !_workspaceSave && ResourceModel.Environment.IsConnected)
            {
                _asyncWorker.Start(SaveToWorkspace);
            }
            AddMissingWithNoPopUpAndFindUnusedDataListItemsImpl(false);
        }

        void SaveToWorkspace()
        {
            BindToModel();
            ResourceModel.Environment.ResourceRepository.Save(ResourceModel);
            _workspaceSave = true;
        }
        
        public void UpdateDataList()
        {
            AddMissingWithNoPopUpAndFindUnusedDataListItemsImpl(false);
        }

        public static bool ValidatResourceModel(string dataList)
        {
            try
            {
                if (!string.IsNullOrEmpty(dataList))
                {
                    XElement.Parse(dataList);
                }
            }
            catch (Exception)
            {
                return false;
            }
            return true;
        }

        public void AddMissingWithNoPopUpAndFindUnusedDataListItems()
        {
            UpdateDataList();
        }

        public ModelItem GetModelItem(Guid workSurfaceMappingId, Guid parentID)
        {
            var modelItems = _modelService.Find(_modelService.Root, typeof(IDev2Activity));
            ModelItem selectedModelItem = null;
            foreach (var mi in modelItems)
            {
                var instanceID = ModelItemUtils.GetUniqueID(mi);
                if (instanceID == workSurfaceMappingId || instanceID == parentID)
                {
                    selectedModelItem = mi;
                    break;
                }
            }
            return selectedModelItem;
        }

        void AddMissingWithNoPopUpAndFindUnusedDataListItemsImpl(bool isLoadEvent)
        {
            if (DataListViewModel != null)
            {
                if (Application.Current != null && Application.Current.Dispatcher != null)
                {
                    Application.Current.Dispatcher.BeginInvoke(new System.Action(() =>
                    {
                        UpdateDataListWithMissingParts(isLoadEvent);
                    }), DispatcherPriority.Background);
                }
                else
                {
                    UpdateDataListWithMissingParts(isLoadEvent);
                }
            }
        }

        void UpdateDataListWithMissingParts(bool isLoadEvent)
        {
            var workSurfaceKey = WorkSurfaceKeyFactory.CreateKey(ResourceModel);
            if (OpeningWorkflowsHelper.IsWorkflowWaitingforDesignerLoad(workSurfaceKey) && !isLoadEvent)
            {
                OpeningWorkflowsHelper.RemoveWorkflowWaitingForDesignerLoad(workSurfaceKey);
            }

            var workflowFields = BuildWorkflowFields();
            DataListViewModel?.UpdateDataListItems(ResourceModel, workflowFields);
        }

        void ViewPreviewMouseDown(object sender, MouseButtonEventArgs e) => e.Handled = HandleMouseClick(e.LeftButton, e.ClickCount, e.OriginalSource as DependencyObject, e.Source as DesignerView);
        
        bool HandleMouseClick(MouseButtonState leftButtonState, int clickCount, DependencyObject dp, DesignerView designerView)
        {
            if (HandleDoubleClick(leftButtonState, clickCount, dp, designerView))
            {
                return true;
            }

            if (Application.Current != null && Application.Current.Dispatcher != null && Application.Current.Dispatcher.CheckAccess() && Application.Current.MainWindow != null)
            {
                var mvm = Application.Current.MainWindow.DataContext as ShellViewModel;
                if (mvm?.ActiveItem != null)
                {
                    mvm.RefreshActiveServer();
                }
            }

            if (dp is Border border && border.DataContext is GateDesignerViewModel gateDesignerViewModel)
            {
                gateDesignerViewModel.ClearGates();
                string uniqueId = gateDesignerViewModel.ModelItem.Properties["UniqueID"].ComputedValue.ToString();
                var gates = GetSelectableGates(uniqueId);
                gateDesignerViewModel.Gates = gates;
            }

            var dp1 = dp as Run;
            if (dp1?.Parent is TextBlock && dp1.DataContext.GetType().Name.Contains("FlowchartDesigner"))
            {
                var selectedModelItem = _modelService.Find(_modelService.Root, typeof(Flowchart)).FirstOrDefault();
                if (selectedModelItem != null)
                {
                    SelectSingleModelItem(selectedModelItem);
                }
                return true;
            }

            if (dp is TextBlock dp2 && dp2.DataContext.GetType().Name.Contains("FlowchartDesigner"))
            {
                var selectedModelItem = _modelService.Find(_modelService.Root, typeof(Flowchart)).FirstOrDefault();
                if (selectedModelItem != null)
                {
                    SelectSingleModelItem(selectedModelItem);
                }
                return true;
            }

            return false;
        }
        
        bool HandleDoubleClick(MouseButtonState leftButtonState, int clickCount, DependencyObject dp, DesignerView designerView)
        {
            if (leftButtonState == MouseButtonState.Pressed && clickCount == 2)
            {
                if (designerView != null && designerView.FocusedViewElement == null)
                {
                    return true;
                }

                var item = SelectedModelItem as ModelItem;

                if (item != null && item.ItemType == typeof(Flowchart))
                {
                    return true;
                }

                HandleDependencyObject(dp, item);
            }
            return false;
        }
        
        void HandleDependencyObject(DependencyObject dp, ModelItem item)
        {
            if (item != null)
            {
                var itemFn = item.ItemType.FullName;

                if (dp != null && string.Equals(dp.ToString(), "Microsoft.Windows.Themes.ScrollChrome", StringComparison.InvariantCulture))
                {
                    WizardEngineAttachedProperties.SetDontOpenWizard(dp, true);
                }

                // Handle Case Edits
                if (itemFn.StartsWith("System.Activities.Core.Presentation.FlowSwitchCaseLink", StringComparison.Ordinal) &&
                    !itemFn.StartsWith("System.Activities.Core.Presentation.FlowSwitchDefaultLink", StringComparison.Ordinal))
                {
                    if (dp != null && !WizardEngineAttachedProperties.GetDontOpenWizard(dp))
                    {
                        FlowController.TryEditSwitchCaseExpression(new EditCaseExpressionMessage
                        {
                            ModelItem = item,
                            Server = _resourceModel.Environment
                        });
                    }
                }

                // Handle Switch Edits
                if (dp != null && !WizardEngineAttachedProperties.GetDontOpenWizard(dp) &&
                    item.ItemType == typeof(FlowSwitch<string>))
                {
                    _expressionString =
                        FlowController.ConfigureSwitchExpression(new ConfigureSwitchExpressionMessage
                        {
                            ModelItem = item,
                            Server = _resourceModel.Environment
                        });
                    AddMissingWithNoPopUpAndFindUnusedDataListItemsImpl(false);
                }

                //// Handle Decision Edits
                if (dp != null && !WizardEngineAttachedProperties.GetDontOpenWizard(dp) &&
                    item.ItemType == typeof(FlowDecision))
                {
                    _expressionString =
                        FlowController.ConfigureDecisionExpression(new ConfigureDecisionExpressionMessage
                        {
                            ModelItem = item,
                            Server = _resourceModel.Environment
                        });
                    AddMissingWithNoPopUpAndFindUnusedDataListItemsImpl(false);
                }
            }
        }
        
        static IResourcePickerDialog CreateResourcePickerDialog(enDsfActivityType activityType)
        {
            var server = CustomContainer.Get<IServerRepository>().ActiveServer;

            if (server.Permissions == null)
            {
                server.Permissions = new List<IWindowsGroupPermission>();
                server.Permissions.AddRange(server.AuthorizationService.SecurityService.Permissions);
            }
            var env = new EnvironmentViewModel(server, CustomContainer.Get<IShellViewModel>(), true);
            var res = new ResourcePickerDialog(activityType, env);
            ResourcePickerDialog.CreateAsync(activityType, env);
            return res;
        }
        
        void ViewPreviewDrop(object sender, DragEventArgs e)
        {
            SetLastDroppedPoint(e);
            var dataObject = e.Data;
            e.Handled = ApplyForDrop(dataObject);
        }

        protected bool ApplyForDrop(IDataObject dataObject)
        {
            var handled = false;
            if (dataObject != null)
            {
                DataObject = dataObject.GetData(typeof(ExplorerItemViewModel));
                if (DataObject != null)
                {
                    IsItemDragged.Instance.IsDragged = true;
                }

                if (dataObject.GetData("WorkflowItemTypeNameFormat") is string isWorkflow)
                {
                    handled = WorkflowDropFromResourceToolboxItem(dataObject, isWorkflow, true, false);
                    ApplyIsDraggedInstance(isWorkflow);
                }
                else
                {
                    IsItemDragged.Instance.IsDragged = false;
                }
            }
            return handled;
        }

        static void ApplyIsDraggedInstance(string isWorkflow)
        {
            IsItemDragged.Instance.IsDragged |= isWorkflow.Contains("DsfSqlServerDatabaseActivity") || isWorkflow.Contains("DsfMySqlDatabaseActivity");
            IsItemDragged.Instance.IsDragged |= isWorkflow.Contains("DsfODBCDatabaseActivity") || isWorkflow.Contains("DsfOracleDatabaseActivity");
            IsItemDragged.Instance.IsDragged |= isWorkflow.Contains("DsfPostgreSqlActivity") || isWorkflow.Contains("DsfWebDeleteActivity");
            IsItemDragged.Instance.IsDragged |= isWorkflow.Contains("DsfWebGetActivity") || isWorkflow.Contains("WebPostActivity");
            IsItemDragged.Instance.IsDragged |= isWorkflow.Contains("DsfWebPutActivity") || isWorkflow.Contains("DsfComDllActivity");
            IsItemDragged.Instance.IsDragged |= isWorkflow.Contains("DsfEnhancedDotNetDllActivity") || isWorkflow.Contains("DsfWcfEndPointActivity");
            IsItemDragged.Instance.IsDragged |= isWorkflow.Contains("AdvancedRecordsetActivity");
            IsItemDragged.Instance.IsDragged |= isWorkflow.Contains("GateActivity");
        }
        
        bool WorkflowDropFromResourceToolboxItem(IDataObject dataObject, string isWorkflow, bool dropOccured, bool handled)
        {
            var activityType = ResourcePickerDialog.DetermineDropActivityType(isWorkflow);
            if (IsTestView)
            {
                return true;
            }
            if (activityType != enDsfActivityType.All)
            {
                var dialog = CreateResourcePickerDialog(activityType);
                if (dialog.ShowDialog())
                {
                    var res = dialog.SelectedResource;
                    if (res != null)
                    {
                        dataObject.SetData(res);
                        dataObject.SetData(new FromToolBox());
                        DataObject = res;
                    }
                    if (res == null)
                    {
                        dropOccured = false;
                        handled = true;
                    }
                }
                else
                {
                    handled = true;
                    dropOccured = false;
                }
            }
            if (dropOccured)
            {
                _workspaceSave = false;
                ResourceModel.IsWorkflowSaved = false;
                NotifyOfPropertyChange(() => DisplayName);
            }
            return handled;
        }

        // Activity : Next
        // Decision : True, False
        // Switch   : Default, Key
        public static readonly string[] SelfConnectProperties =
        {
            "Next",
            "True",
            "False",
            "Default",
            "Key"
        };

        string _originalDataList;
        bool _workspaceSave;
        WorkflowInputDataViewModel _workflowInputDataViewModel;
        string _workflowLink;
        string _workflowLinkWithWid;
        ICommand _openWorkflowLinkCommand;
        bool _firstWorkflowChange;
        readonly IAsyncWorker _asyncWorker;
        string _expressionString;
        ICommand _debugInputsCommand;
        ICommand _debugStudioCommand;
        ICommand _debugBrowserCommand;
        ICommand _scheduleCommand;
        ICommand _queueEventCommand;
        ICommand _testEditorCommand;
        ICommand _runAllTestsCommand;
        ICommand _duplicateCommand;
        ICommand _deployCommand;
        ICommand _showDependenciesCommand;
        ICommand _viewOpenAPICommand;
        ICommand _copyUrlCommand;
        DebugOutputViewModel _debugOutputViewModel;
        IDataListViewModel _dataListViewModel;
        bool _canDebugInputs;
        bool _canDebugStudio;
        bool _debugBrowser;
        bool _canCreateSchedule;
        bool _canCreateQueueEvent;
        bool _canCreateTest;
        bool _canRunAllTests;
        bool _canDuplicate;
        bool _canDeploy;
        bool _canShowDependencies;
        bool _canViewOpenAPI;
        bool _canCopyUrl;
        string _copyUrlTooltip;
        string _viewOpenAPITooltip;
        string _debugInputsTooltip;
        string _debugStudioTooltip;
        string _debugBrowserTooltip;
        string _scheduleTooltip;
        string _queueEventTooltip;
        string _createTestTooltip;
        string _runAllTestsTooltip;
        string _runCoverageTooltip;
        string _duplicateTooltip;
        string _deployTooltip;
        string _showDependenciesTooltip;
        ICommand _newServiceCommand;
        ModelItem _selectedItem;
        IEnumerable<ModelItem> _modelItems;
        IEnumerable<ModelItem> _activityCollection;
        ICommand _mergeCommand;
        bool _canMerge;
        string _mergeTooltip;
       
        protected void ModelServiceModelChanged(object sender, ModelChangedEventArgs e)
        {
            if (e.ModelChangeInfo != null &&
                e.ModelChangeInfo.ModelChangeType == ModelChangeType.PropertyChanged)
            {
                if (SelfConnectProperties.Contains(e.ModelChangeInfo.PropertyName))
                {
                    if (e.ModelChangeInfo.Subject == e.ModelChangeInfo.Value)
                    {
                        var modelProperty = e.ModelChangeInfo.Value.Properties[e.ModelChangeInfo.PropertyName];
                        modelProperty?.ClearValue();
                    }
                    return;
                }
                if (e.ModelChangeInfo.PropertyName == "StartNode")
                {
                    if (e.ModelChangeInfo.OldValue != null)
                    {
                        // incase of delete it will have old value then log
                        IsStartNodeErrorMessageSet = false;
                    }
                    return;
                }

                if (e.ModelChangeInfo.PropertyName == "Handler")
                {
                    if (DataObject != null)
                    {
                        ModelItemPropertyChanged(e);
                    }
                }
            }

            if (e.ModelChangeInfo != null && e.ModelChangeInfo.ModelChangeType == ModelChangeType.CollectionItemAdded)
            {
                PerformAddItems(e.ModelChangeInfo.Value);
            }

            if (e.ModelChangeInfo != null && e.ModelChangeInfo.ModelChangeType == ModelChangeType.PropertyChanged
                && (e.ModelChangeInfo.Value?.Source?.ComputedValue?.GetType() == typeof(DsfFlowDecisionActivity)
                || e.ModelChangeInfo.Value?.Source?.ComputedValue?.GetType() == typeof(DsfFlowSwitchActivity)))
            {
                PerformAddItems(e.ModelChangeInfo.Value);
            }
            WorkflowChanged?.Invoke();
        }

        void ModelItemPropertyChanged(ModelChangedEventArgs e)
        {
            Guid? envID = null;
            Guid? resourceID = null;
            if (DataObject is IExplorerItemViewModel explorerItem)
            {
                if (explorerItem.Server != null)
                {
                    envID = explorerItem.Server.EnvironmentID;
                }

                resourceID = explorerItem.ResourceId;
            }

            var modelProperty = e.ModelChangeInfo.Subject.Content;

            if (envID != null && modelProperty != null)
            {
                var server = CustomContainer.Get<IServerRepository>().FindSingle(c => c.EnvironmentID == envID);
                var resource = server?.ResourceRepository.LoadContextualResourceModel(resourceID.Value);
                if (resource != null)
                {
                    var d = DsfActivityFactory.CreateDsfActivity(resource, null, true, CustomContainer.Get<IServerRepository>(), _resourceModel.Environment.IsLocalHostCheck());
                    d.ServiceName = d.DisplayName = d.ToolboxFriendlyName = resource.Category;
                    UpdateForRemote(d, resource);
                    modelProperty.SetValue(d);
                }
            }
            DataObject = null;
            WorkflowChanged?.Invoke();
        }

        void UpdateForRemote(DsfActivity d, IContextualResourceModel resource)
        {
            if (Application.Current != null && Application.Current.Dispatcher.CheckAccess() && Application.Current.MainWindow != null)
            {
                dynamic mvm = Application.Current.MainWindow.DataContext;
                if (mvm?.ActiveItem != null)
                {
                    WorkflowDesignerUtils.CheckIfRemoteWorkflowAndSetProperties(d, resource, mvm.ActiveItem.Environment);
                }
            }
            else
            {
                if (ActiveEnvironment != null)
                {
                    WorkflowDesignerUtils.CheckIfRemoteWorkflowAndSetProperties(d, resource, ActiveEnvironment);
                }
            }
        }

        protected IServer ActiveEnvironment { get; set; }

        void CanExecuteRoutedEventHandler(object sender, CanExecuteRoutedEventArgs e)
        {
            if (e.Command.Equals(ApplicationCommands.Delete) ||      //triggered from deleting an activity
                e.Command.Equals(EditingCommands.Delete) ||          //triggered from editing displayname, expressions, etc
                e.Command.Equals(System.Activities.Presentation.View.DesignerView.CopyCommand) ||
                e.Command.Equals(System.Activities.Presentation.View.DesignerView.CutCommand))
            {
                PreventCommandFromBeingExecuted(e);
            }
        }

        void PreviewExecutedRoutedEventHandler(object sender, ExecutedRoutedEventArgs e)
        {
            if (e.Command.Equals(ApplicationCommands.Delete))
            {
                _wd?.View?.MoveFocus(new TraversalRequest(FocusNavigationDirection.First));
            }
            
            if (!Handle(e))
            {
                BuildWorkflowFields();
            }
        }

        bool Handle(ExecutedRoutedEventArgs e)
        {
            var Handled = false;
            if (e.Command.Equals(System.Activities.Presentation.View.DesignerView.PasteCommand))
            {
                _isPaste = true;
                var dataObject = Clipboard.GetDataObject();
                if (dataObject != null)
                {
                    var dataPresent = dataObject.GetDataPresent("WorkflowXamlFormat");
                    if (dataPresent)
                    {
                        Handled = Handle(e, dataObject);
                    }
                }
            }
            return Handled;
        }

        bool Handle(ExecutedRoutedEventArgs e, IDataObject dataObject)
        {
            var data = dataObject.GetData("WorkflowXamlFormat") as string;
            if (!string.IsNullOrEmpty(data))
            {
                var indexOf = data.IndexOf("ResourceID=", StringComparison.InvariantCultureIgnoreCase);
                var guid = data.Substring(indexOf + 12, 36);
                if (guid.Equals(ResourceModel.ID.ToString(), StringComparison.InvariantCultureIgnoreCase))
                {
                    e.Handled = true;
                }
            }
            return e.Handled;
        }

        protected override void OnDispose()
        {
            if (_wd != null)
            {
                _wd.ModelChanged -= WdOnModelChanged;
                _wd.Context.Services.Unsubscribe<ModelService>(ModelServiceSubscribe);

                _wd.View.PreviewDrop -= ViewPreviewDrop;

                _wd.View.PreviewMouseDown -= ViewPreviewMouseDown;

                _wd.Context.Services.Unsubscribe<DesignerView>(DesigenrViewSubscribe);
                _virtualizedContainerService = null;
                _virtualizedContainerServicePopulateAllMethod = null;
            }

            _designerManagementService?.Dispose();
            _debugSelectionChangedService?.Unsubscribe();

            if (_resourceModel != null)
            {
                _resourceModel.OnDataListChanged -= FireWdChanged;
                _resourceModel.OnResourceSaved -= UpdateOriginalDataList;
            }

            if (_modelService != null)
            {
                _modelService.ModelChanged -= ModelServiceModelChanged;
            }

            if (_uniqueWorkflowParts != null)
            {
                _uniqueWorkflowParts.Clear();
                _uniqueWorkflowParts = null;
            }
            
            if (ResourceModel != null)
            {
                var workSurfaceKey = WorkSurfaceKeyFactory.CreateKey(ResourceModel);
                OpeningWorkflowsHelper.PruneWorkflowFromCaches(workSurfaceKey);
            }
            if (_workflowInputDataViewModel != null)
            {
                _workflowInputDataViewModel.Dispose();
                _workflowInputDataViewModel = null;
            }
            try
            {
                CEventHelper.RemoveAllEventHandlers(_wd);
            }
            catch (Exception e)
            {
                Dev2Logger.Warn("Error disposing Workflow Designer View Model: " + e.Message, GlobalConstants.WarewolfWarn);
            }

            _debugSelectionChangedService?.Unsubscribe();
            base.OnDispose();
        }

        public override WorkSurfaceContext WorkSurfaceContext => ResourceModel?.ResourceType.ToWorkSurfaceContext() ?? WorkSurfaceContext.Unknown;

        public IServer Server => ResourceModel.Environment;

        protected List<ModelItem> SelectedDebugItems => _selectedDebugItems;

        public ModelItem SelectedItem
        {
            get => _selectedItem;
            set => _selectedItem = value;
        }

        public bool WorkspaceSave => _workspaceSave;

        public void Handle(EditActivityMessage message)
        {
            Dev2Logger.Info(message.GetType().Name, "Warewolf Info");
            EditActivity(message.ModelItem, message.ParentEnvironmentID);
        }

        void FireWdChanged()
        {
            WdOnModelChanged(new object(), new EventArgs());
            UpdateWorkflowLink();
        }

        public void Handle(SaveUnsavedWorkflowMessage message)
        {
            if (message?.ResourceModel == null || string.IsNullOrEmpty(message.ResourceName) || message.ResourceModel.ID != ResourceModel.ID)
            {
                return;
            }

            var resourceModel = message.ResourceModel;
            WorkspaceItemRepository.Instance.Remove(resourceModel);
            var unsavedName = resourceModel.ResourceName;
            UpdateResourceModel(message, resourceModel, unsavedName);
            PublishMessages(resourceModel);
            DisposeDesigner();

            if (message.KeepTabOpen)
            {
                ActivityDesignerHelper.AddDesignerAttributes(this);
                UpdateWorkflowInputDataViewModel(_resourceModel);

                DisplayWorkflowLink = GetAndUpdateWorkflowLinkWithWorkspaceID();
                NotifyOfPropertyChange(nameof(DisplayWorkflowLink));
                NotifyOfPropertyChange(nameof(DesignerView));
            }
            RemoveUnsavedWorkflowName(unsavedName);
        }

        public void UpdateWorkflowInputDataViewModel(IContextualResourceModel resourceModel)
        {
            _workflowInputDataViewModel = WorkflowInputDataViewModel.Create(_resourceModel);
            _workflowInputDataViewModel.LoadWorkflowInputs();
        }

        internal void RemoveUnsavedWorkflowName(string unsavedName) => NewWorkflowNames.Instance.Remove(unsavedName);
        internal void RemoveAllWorkflowName(string unsavedName) => NewWorkflowNames.Instance.RemoveAll(unsavedName);

        void DisposeDesigner()
        {
            if (_wd != null)
            {
                _wd.ModelChanged -= WdOnModelChanged;
                _wd.Context.Services.Unsubscribe<ModelService>(ModelServiceSubscribe);

                _wd.View.PreviewDrop -= ViewPreviewDrop;
                _wd.View.PreviewMouseDown -= ViewPreviewMouseDown;

                _wd.Context.Services.Unsubscribe<DesignerView>(DesigenrViewSubscribe);
                _virtualizedContainerService = null;
                _virtualizedContainerServicePopulateAllMethod = null;
            }

            _designerManagementService?.Dispose();
            if (_modelService != null)
            {
                _modelService.ModelChanged -= ModelServiceModelChanged;
            }
            _debugSelectionChangedService?.Unsubscribe();
        }

        void PublishMessages(IContextualResourceModel resourceModel)
        {
            UpdateResource(resourceModel);
            Dev2Logger.Info("Publish message of type - " + typeof(UpdateResourceMessage), "Warewolf Info");
            EventPublisher.Publish(new UpdateResourceMessage(resourceModel));
        }

        void UpdateResource(IContextualResourceModel resourceModel)
        {
            if (ContexttualResourceModelEqualityComparer.Current.Equals(resourceModel, _resourceModel))
            {
                IObservableReadOnlyList<IErrorInfo> currentErrors = null;
                if (resourceModel.Errors != null && resourceModel.Errors.Count > 0)
                {
                    currentErrors = resourceModel.Errors;
                }
                _resourceModel.Update(resourceModel);
                if (currentErrors != null && currentErrors.Count > 0)
                {
                    foreach (var currentError in currentErrors)
                    {
                        _resourceModel.AddError(currentError);
                    }
                }
            }
        }

        void UpdateResourceModel(SaveUnsavedWorkflowMessage message, IContextualResourceModel resourceModel, string unsavedName)
        {
            resourceModel.ResourceName = message.ResourceName;
            resourceModel.DisplayName = message.ResourceName;
            resourceModel.Category = message.ResourceCategory;
            resourceModel.WorkflowXaml = ServiceDefinition?.Replace(unsavedName, message.ResourceName);
            resourceModel.IsNewWorkflow = false;
            var saveResult = resourceModel.Environment.ResourceRepository.SaveToServer(resourceModel);
            var mainViewModel = CustomContainer.Get<IShellViewModel>();
            var environmentViewModel = mainViewModel?.ExplorerViewModel?.Environments.FirstOrDefault(model => model.Server.EnvironmentID == resourceModel.Environment.EnvironmentID);
            if (environmentViewModel != null)
            {
                var item = environmentViewModel.FindByPath(resourceModel.GetSavePath());
                var savedItem = environmentViewModel?.CreateExplorerItemFromResource(environmentViewModel.Server, item, false, false, resourceModel);
                item.AddChild(savedItem);
            }
            resourceModel.IsWorkflowSaved = true;
            DeleteOldResourceAfterSucessfulSave(message, saveResult);
        }

        public void DeleteOldResourceAfterSucessfulSave(SaveUnsavedWorkflowMessage message, ExecuteMessage saveResult)
        {
            if (!saveResult.HasError
                && saveResult.Message.Contains("Added")
                && !message.ResourceLoadingFromServer
                && !string.IsNullOrEmpty(message.OriginalPath))
            {
                try
                {
                    File.Delete(message.OriginalPath);
                }
                catch (Exception)
                {
                    Dev2Logger.Error("Resource from " + message.OriginalPath + " could not be Deleted", "Warewolf Error");
                }
            }
        }

        protected bool _isPaste;
        private IShellViewModel _shellViewModel;

        public System.Action WorkflowChanged { get; set; }
    }
}
---- Transformed Tree ----
using Caliburn.Micro;
using Dev2.Activities.Designers2.Core;
using Dev2.Common;
using Dev2.Common.Common;
using Dev2.Common.Interfaces.Core.Collections;
using Dev2.Common.Interfaces.Enums;
using Dev2.Common.Interfaces.Infrastructure;
using Dev2.Common.Interfaces.Infrastructure.Providers.Errors;
using Dev2.Common.Interfaces.Security;
using Dev2.Common.Interfaces.Studio.Controller;
using Dev2.Common.Interfaces.Threading;
using Dev2.CustomControls.Utils;
using Dev2.Data.Interfaces;
using Dev2.Data.SystemTemplates.Models;
using Dev2.Data.Util;
using Dev2.DataList.Contract;
using Dev2.Diagnostics;
using Dev2.Dialogs;
using Dev2.Factories;
using Dev2.Factory;
using Dev2.Instrumentation;
using Dev2.Messages;
using Dev2.Runtime.Configuration.ViewModels.Base;
using Dev2.Services.Events;
using Dev2.Studio.ActivityDesigners;
using Dev2.Studio.AppResources.AttachedProperties;
using Dev2.Studio.AppResources.ExtensionMethods;
using Dev2.Studio.Controller;
using Dev2.Studio.Core;
using Dev2.Studio.Core.Activities.Services;
using Dev2.Studio.Core.Activities.Utils;
using Dev2.Studio.Core.AppResources.DependencyInjection.EqualityComparers;
using Dev2.Studio.Core.AppResources.ExtensionMethods;
using Dev2.Studio.Core.Factories;
using Dev2.Studio.Core.Messages;
using Dev2.Studio.Core.Network;
using Dev2.Studio.Core.Utils;
using Dev2.Studio.Enums;
using Dev2.Studio.Factory;
using Dev2.Studio.Interfaces;
using Dev2.Studio.Interfaces.DataList;
using Dev2.Studio.Interfaces.Enums;
using Dev2.Studio.ViewModels.Diagnostics;
using Dev2.Studio.ViewModels.WorkSurface;
using Dev2.Threading;
using Dev2.Utilities;
using Dev2.Utils;
using Dev2.ViewModels.Workflow;
using Dev2.Workspaces;
using Newtonsoft.Json;
using System;
using System.Activities;
using System.Activities.Core.Presentation;
using System.Activities.Presentation;
using System.Activities.Presentation.Metadata;
using System.Activities.Presentation.Model;
using System.Activities.Presentation.Services;
using System.Activities.Presentation.View;
using System.Activities.Statements;
using System.Collections.Generic;
using System.ComponentModel;
using System.Linq;
using System.Reflection;
using System.Runtime.Versioning;
using System.Text;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Threading;
using System.Xaml;
using System.Xml.Linq;
using Unlimited.Applications.BusinessDesignStudio.Activities;
using Warewolf.Studio.ViewModels;
using Dev2.ViewModels.Merge;
using Dev2.Communication;
using System.IO;
using Dev2.Common.Interfaces;
using Dev2.Activities.Designers2.Gate;
using Dev2.Activities;
using Warewolf.Data;
using Warewolf.Data.Options;
using StringExtension = Dev2.Common.ExtMethods.StringExtension;

namespace Dev2.Studio.ViewModels.Workflow
{
    public class FromToolBox
    {
    }

    public class WorkflowDesignerViewModel : BaseWorkSurfaceViewModel,
                                             IHandle<AddStringListToDataListMessage>,
                                             IHandle<EditActivityMessage>,
                                             IHandle<SaveUnsavedWorkflowMessage>,
                                             IWorkflowDesignerViewModel
    {
        static readonly Type[] DecisionSwitchTypes = { typeof(FlowSwitch<string>), typeof(FlowDecision) };

        protected readonly IDesignerManagementService _designerManagementService;
        readonly IWorkflowHelper _workflowHelper;
        DelegateCommand _collapseAllCommand;

        protected dynamic DataObject { get; set; }
        List<ModelItem> _selectedDebugItems = new List<ModelItem>();
        DelegateCommand _expandAllCommand;

        protected ModelService _modelService;
        IContextualResourceModel _resourceModel;

        protected Dictionary<IDataListVerifyPart, string> _uniqueWorkflowParts;

        protected WorkflowDesigner _wd;
        DesignerMetadata _wdMeta;

        VirtualizedContainerService _virtualizedContainerService;
        MethodInfo _virtualizedContainerServicePopulateAllMethod;

        readonly StudioSubscriptionService<DebugSelectionChangedEventArgs> _debugSelectionChangedService = new StudioSubscriptionService<DebugSelectionChangedEventArgs>();

        readonly IApplicationTracker _applicationTracker;
        public bool IsStartNodeErrorMessageSet { get; set; }

        protected IWorkflowDesignerWrapper _workflowDesignerHelper;

        public WorkflowDesignerViewModel(IContextualResourceModel resource)
            : this(resource, true)
        {
        }

        public WorkflowDesignerViewModel(IContextualResourceModel resource, bool createDesigner)
            : this(resource, new WorkflowHelper(), createDesigner)
        {
        }

        public WorkflowDesignerViewModel(IContextualResourceModel resource, IWorkflowHelper workflowHelper, bool createDesigner)
            : this(EventPublishers.Aggregator, resource, workflowHelper, createDesigner)
        {
        }

        WorkflowDesignerViewModel(IEventAggregator eventPublisher, IContextualResourceModel resource, IWorkflowHelper workflowHelper, bool createDesigner)
            : this(eventPublisher, resource, workflowHelper,
                CustomContainer.Get<IPopupController>(), new AsyncWorker(), createDesigner)
        {
        }

        public WorkflowDesignerViewModel(IWorkflowDesignerWrapper workflowDesignerHelper, IEventAggregator eventPublisher, IContextualResourceModel resource, IWorkflowHelper workflowHelper, IPopupController popupController, IAsyncWorker asyncWorker, bool createDesigner, bool liteInit)
            : this(eventPublisher, resource, workflowHelper, popupController, asyncWorker, createDesigner, liteInit)
        {
            _workflowDesignerHelper = workflowDesignerHelper;
        }

        public WorkflowDesignerViewModel(IEventAggregator eventPublisher, IContextualResourceModel resource, IWorkflowHelper workflowHelper, IPopupController popupController, IAsyncWorker asyncWorker, bool createDesigner)
            : this(eventPublisher, resource, workflowHelper, popupController, asyncWorker, createDesigner, false)
        {
        }

        public WorkflowDesignerViewModel(IEventAggregator eventPublisher, IContextualResourceModel resource, IWorkflowHelper workflowHelper, IPopupController popupController, IAsyncWorker asyncWorker, bool createDesigner, bool liteInit)
            : base(eventPublisher)
        {
            VerifyArgument.IsNotNull("workflowHelper", workflowHelper);
            VerifyArgument.IsNotNull("popupController", popupController);
            VerifyArgument.IsNotNull("asyncWorker", asyncWorker);
            _workflowHelper = workflowHelper;
            _resourceModel = resource;
            _resourceModel.OnDataListChanged += FireWdChanged;
            _resourceModel.OnResourceSaved += UpdateOriginalDataList;
            _asyncWorker = asyncWorker;
            CanViewWorkflowLink = true;

            PopUp = popupController;

            if (_resourceModel.DataList != null)
            {
                SetOriginalDataList(_resourceModel);
            }
            _designerManagementService = new DesignerManagementService(resource, _resourceModel.Environment.ResourceRepository);
            if (createDesigner)
            {
                ActivityDesignerHelper.AddDesignerAttributes(this, liteInit);
            }
            UpdateWorkflowInputDataViewModel(_resourceModel);
            UpdateWorkflowLink();
            DataListViewModel = DataListViewModelFactory.CreateDataListViewModel(_resourceModel);
            DebugOutputViewModel = new DebugOutputViewModel(_resourceModel.Environment.Connection.ServerEvents, CustomContainer.Get<IServerRepository>(), new DebugOutputFilterStrategy(), ResourceModel);
            _firstWorkflowChange = true;
            _workflowDesignerHelper = new WorkflowDesignerWrapper();
            _applicationTracker = CustomContainer.Get<IApplicationTracker>();
            _shellViewModel = GetShellViewModel();
        }

        private static IShellViewModel GetShellViewModel()
        {
            IShellViewModel shellViewModel;
            try
            {
                if (Application.Current?.MainWindow?.DataContext is IShellViewModel tmpShellViewModel)
                {
                    return tmpShellViewModel;
                }
            }
            catch
            {
            }
            return CustomContainer.Get<IShellViewModel>();
        }

        public void SetPermission(Permissions permission)
        {
            SetNonePermissions();

            if (permission.HasFlag(Permissions.View))
            {
                SetViewPermissions();
            }
            if (permission.HasFlag(Permissions.Execute))
            {
                SetExecutePermissions();
            }
            if (permission.HasFlag(Permissions.Contribute))
            {
                SetContributePermissions();
            }
            if (permission.HasFlag(Permissions.Administrator))
            {
                SetAdministratorPermissions();
            }
        }

        void SetExecutePermissions()
        {
            CanDebugInputs = true;
            CanDebugStudio = true;
            CanDebugBrowser = true;
            CanRunAllTests = !ResourceModel.IsNewWorkflow;
            CanViewOpenAPI = !ResourceModel.IsNewWorkflow;
            CanCopyUrl = !ResourceModel.IsNewWorkflow;
        }

        void SetViewPermissions()
        {
            CanViewOpenAPI = !ResourceModel.IsVersionResource;
            CanCopyUrl = !ResourceModel.IsVersionResource;
        }

        void SetNonePermissions()
        {
            CanDebugInputs = false;
            CanDebugStudio = false;
            CanDebugBrowser = false;
            CanCreateSchedule = false;
            CanCreateQueueEvent = false;
            CanCreateTest = false;
            CanRunAllTests = false;
            CanDuplicate = false;
            CanDeploy = false;
            CanMerge = false;
            CanShowDependencies = false;
            CanViewOpenAPI = false;
            CanCopyUrl = false;
        }

        void SetAdministratorPermissions()
        {
            CanDebugInputs = true;
            CanDebugStudio = true;
            CanDebugBrowser = true;
            CanCreateSchedule = !ResourceModel.IsNewWorkflow;
            CanCreateQueueEvent = !ResourceModel.IsNewWorkflow;
            CanCreateTest = !ResourceModel.IsNewWorkflow;
            CanRunAllTests = !ResourceModel.IsNewWorkflow;
            CanDuplicate = !ResourceModel.IsNewWorkflow;
            CanDeploy = !ResourceModel.IsNewWorkflow;
            CanMerge = !ResourceModel.IsNewWorkflow;
            CanShowDependencies = !ResourceModel.IsNewWorkflow;
            CanViewOpenAPI = !ResourceModel.IsNewWorkflow;
            CanCopyUrl = !ResourceModel.IsNewWorkflow;
        }

        void SetContributePermissions()
        {
            CanDebugInputs = true;
            CanDebugStudio = true;
            CanDebugBrowser = true;
            CanCreateSchedule = !ResourceModel.IsNewWorkflow;
            CanCreateQueueEvent = !ResourceModel.IsNewWorkflow;
            CanCreateTest = !ResourceModel.IsNewWorkflow;
            CanRunAllTests = !ResourceModel.IsNewWorkflow;
            CanDuplicate = !ResourceModel.IsNewWorkflow;
            CanDeploy = !ResourceModel.IsNewWorkflow;
            CanMerge = !ResourceModel.IsNewWorkflow;
            CanShowDependencies = !ResourceModel.IsNewWorkflow;
            CanViewOpenAPI = !ResourceModel.IsNewWorkflow;
            CanCopyUrl = !ResourceModel.IsNewWorkflow;
        }

        public bool CanCopyUrl
        {
            get => _canCopyUrl;
            set
            {
                _canCopyUrl = value;
                CopyUrlTooltip = ResourceModel.IsNewWorkflow ? Warewolf.Studio.Resources.Languages.Tooltips.DisabledToolTip : _canCopyUrl ? Warewolf.Studio.Resources.Languages.Tooltips.CopyUrlToolTip : Warewolf.Studio.Resources.Languages.Tooltips.NoPermissionsToolTip;
                OnPropertyChanged("CanCopyUrl");
            }
        }

        public string CopyUrlTooltip
        {
            get => _copyUrlTooltip;
            set
            {
                _copyUrlTooltip = value;
                OnPropertyChanged("CopyUrlTooltip");
            }
        }

        public bool CanViewOpenAPI
        {
            get => _canViewOpenAPI;
            set
            {
                _canViewOpenAPI = value;
                ViewOpenAPITooltip = ResourceModel.IsNewWorkflow ? Warewolf.Studio.Resources.Languages.Tooltips.DisabledToolTip : _canViewOpenAPI ? Warewolf.Studio.Resources.Languages.Tooltips.ViewOpenAPIToolTip : Warewolf.Studio.Resources.Languages.Tooltips.NoPermissionsToolTip;
                OnPropertyChanged("CanViewOpenAPI");
            }
        }

        public string ViewOpenAPITooltip
        {
            get => _viewOpenAPITooltip;
            set
            {
                _viewOpenAPITooltip = value;
                OnPropertyChanged("ViewOpenAPITooltip");
            }
        }

        public bool CanShowDependencies
        {
            get => _canShowDependencies;
            set
            {
                _canShowDependencies = value;
                ShowDependenciesTooltip = ResourceModel.IsNewWorkflow ? Warewolf.Studio.Resources.Languages.Tooltips.DisabledToolTip : _canShowDependencies ? Warewolf.Studio.Resources.Languages.Tooltips.DependenciesToolTip : Warewolf.Studio.Resources.Languages.Tooltips.NoPermissionsToolTip;
                OnPropertyChanged("CanShowDependencies");
            }
        }

        public string ShowDependenciesTooltip
        {
            get => _showDependenciesTooltip;
            set
            {
                _showDependenciesTooltip = value;
                OnPropertyChanged("ShowDependenciesTooltip");
            }
        }

        public bool CanDeploy
        {
            get => _canDeploy;
            set
            {
                _canDeploy = value;
                DeployTooltip = ResourceModel.IsNewWorkflow ? Warewolf.Studio.Resources.Languages.Tooltips.DisabledToolTip : _canDeploy ? Warewolf.Studio.Resources.Languages.Tooltips.DeployToolTip : Warewolf.Studio.Resources.Languages.Tooltips.NoPermissionsToolTip;
                OnPropertyChanged("CanDeploy");
            }
        }

        public bool CanMerge
        {
            get
            {
                if (ResourceModel.IsVersionResource || (GetVersionHistory() != null && _canMerge))
                {
                    return true;
                }

                return false;
            }
            set
            {
                _canMerge = value;
                MergeTooltip = Warewolf.Studio.Resources.Languages.Tooltips.ViewMergeTooltip;
                OnPropertyChanged("CanMerge");
            }
        }

        ICollection<IVersionInfo> GetVersionHistory()
        {
            var versionInfos = Server?.ExplorerRepository?.GetVersions(ResourceModel.ID);
            if (versionInfos?.Count <= 0)
            {
                return null;
            }

            return versionInfos;
        }

        public string DeployTooltip
        {
            get => _deployTooltip;
            set
            {
                _deployTooltip = value;
                OnPropertyChanged("DeployTooltip");
            }
        }

        public string MergeTooltip
        {
            get => _mergeTooltip;
            set
            {
                _mergeTooltip = value;
                OnPropertyChanged("MergeTooltip");
            }
        }

        public bool CanDuplicate
        {
            get => _canDuplicate;
            set
            {
                _canDuplicate = value;
                DuplicateTooltip = ResourceModel.IsNewWorkflow ? Warewolf.Studio.Resources.Languages.Tooltips.DisabledToolTip : _canDuplicate ? Warewolf.Studio.Resources.Languages.Tooltips.DuplicateToolTip : Warewolf.Studio.Resources.Languages.Tooltips.NoPermissionsToolTip;
                OnPropertyChanged("CanDuplicate");
            }
        }

        public string DuplicateTooltip
        {
            get => _duplicateTooltip;
            set
            {
                _duplicateTooltip = value;
                OnPropertyChanged("DuplicateTooltip");
            }
        }

        public bool CanRunAllTests
        {
            get => _canRunAllTests;
            set
            {
                _canRunAllTests = value;
                RunAllTestsTooltip = ResourceModel.IsNewWorkflow ? Warewolf.Studio.Resources.Languages.Tooltips.DisabledToolTip : _canRunAllTests ? Warewolf.Studio.Resources.Languages.Tooltips.RunAllTestsToolTip : Warewolf.Studio.Resources.Languages.Tooltips.NoPermissionsToolTip;
                RunCoverageTooltip = ResourceModel.IsNewWorkflow ? Warewolf.Studio.Resources.Languages.Tooltips.DisabledToolTip : _canRunAllTests ? Warewolf.Studio.Resources.Languages.Tooltips.RunCoverageToolTip : Warewolf.Studio.Resources.Languages.Tooltips.NoPermissionsToolTip;
                OnPropertyChanged("CanRunAllTests");
            }
        }

        public string RunAllTestsTooltip
        {
            get => _runAllTestsTooltip;
            set
            {
                _runAllTestsTooltip = value;
                OnPropertyChanged("RunAllTestsTooltip");
            }
        }
        
        public string RunCoverageTooltip
        {
            get => _runCoverageTooltip;
            set
            {
                _runCoverageTooltip = value;
                OnPropertyChanged(nameof(RunCoverageTooltip));
            }
        }

        public bool CanCreateTest
        {
            get => _canCreateTest;
            set
            {
                _canCreateTest = value;
                CreateTestTooltip = ResourceModel.IsNewWorkflow ? Warewolf.Studio.Resources.Languages.Tooltips.DisabledToolTip : _canCreateTest ? Warewolf.Studio.Resources.Languages.Tooltips.TestEditorToolTip : Warewolf.Studio.Resources.Languages.Tooltips.NoPermissionsToolTip;
                OnPropertyChanged("CanCreateTest");
            }
        }

        public string CreateTestTooltip
        {
            get => _createTestTooltip;
            set
            {
                _createTestTooltip = value;
                OnPropertyChanged("CreateTestTooltip");
            }
        }

        public bool CanCreateSchedule
        {
            get => _canCreateSchedule;
            set
            {
                _canCreateSchedule = value;
                ScheduleTooltip = ResourceModel.IsNewWorkflow ? Warewolf.Studio.Resources.Languages.Tooltips.DisabledToolTip : _canCreateSchedule ? Warewolf.Studio.Resources.Languages.Tooltips.ScheduleToolTip : Warewolf.Studio.Resources.Languages.Tooltips.NoPermissionsToolTip;
                OnPropertyChanged("CanCreateSchedule");
            }
        }

        public string ScheduleTooltip
        {
            get => _scheduleTooltip;
            set
            {
                _scheduleTooltip = value;
                OnPropertyChanged("ScheduleTooltip");
            }
        }

        public bool CanCreateQueueEvent
        {
            get => _canCreateQueueEvent;
            set
            {
                _canCreateQueueEvent = value;
                QueueEventTooltip = ResourceModel.IsNewWorkflow ? Warewolf.Studio.Resources.Languages.Tooltips.DisabledToolTip : _canCreateSchedule ? Warewolf.Studio.Resources.Languages.Tooltips.QueueEventToolTip : Warewolf.Studio.Resources.Languages.Tooltips.NoPermissionsToolTip;
                OnPropertyChanged("CanCreateQueueEvent");
            }
        }

        public string QueueEventTooltip
        {
            get => _queueEventTooltip;
            set
            {
                _queueEventTooltip = value;
                OnPropertyChanged("QueueEventTooltip");
            }
        }

        public bool CanDebugBrowser
        {
            get => _debugBrowser;
            set
            {
                _debugBrowser = value;
                DebugBrowserTooltip = ResourceModel.IsNewWorkflow ? Warewolf.Studio.Resources.Languages.Tooltips.DisabledToolTip : _debugBrowser ? Warewolf.Studio.Resources.Languages.Tooltips.StartNodeDebugBrowserToolTip : Warewolf.Studio.Resources.Languages.Tooltips.NoPermissionsToolTip;
                OnPropertyChanged("CanDebugBrowser");
            }
        }

        public string DebugBrowserTooltip
        {
            get => _debugBrowserTooltip;
            set
            {
                _debugBrowserTooltip = value;
                OnPropertyChanged("DebugBrowserTooltip");
            }
        }

        public bool CanDebugStudio
        {
            get => _canDebugStudio;
            set
            {
                _canDebugStudio = value;
                DebugStudioTooltip = ResourceModel.IsNewWorkflow ? Warewolf.Studio.Resources.Languages.Tooltips.DisabledToolTip : _canDebugStudio ? Warewolf.Studio.Resources.Languages.Tooltips.StartNodeDebugStudioToolTip : Warewolf.Studio.Resources.Languages.Tooltips.NoPermissionsToolTip;
                OnPropertyChanged("CanDebugStudio");
            }
        }

        public string DebugStudioTooltip
        {
            get => _debugStudioTooltip;
            set
            {
                _debugStudioTooltip = value;
                OnPropertyChanged("DebugStudioTooltip");
            }
        }

        public bool CanDebugInputs
        {
            get => _canDebugInputs;
            set
            {
                _canDebugInputs = value;
                DebugInputsTooltip = ResourceModel.IsNewWorkflow ? Warewolf.Studio.Resources.Languages.Tooltips.DisabledToolTip : _canDebugInputs ? Warewolf.Studio.Resources.Languages.Tooltips.StartNodeDebugInputsToolTip : Warewolf.Studio.Resources.Languages.Tooltips.NoPermissionsToolTip;
                OnPropertyChanged("CanDebugInputs");
            }
        }

        public string DebugInputsTooltip
        {
            get => _debugInputsTooltip;
            set
            {
                _debugInputsTooltip = value;
                OnPropertyChanged("DebugInputsTooltip");
            }
        }

        void SetOriginalDataList(IContextualResourceModel contextualResourceModel)
        {
            if (!string.IsNullOrEmpty(contextualResourceModel.DataList))
            {
                _originalDataList = contextualResourceModel.DataList.Replace("<DataList>", "").Replace("</DataList>", "").Replace(Environment.NewLine, "").Trim();
            }
        }

        void UpdateOriginalDataList(IContextualResourceModel obj)
        {
            if (obj.IsWorkflowSaved)
            {
                SetOriginalDataList(obj);
            }
        }

        public DebugOutputViewModel DebugOutputViewModel
        {
            get => _debugOutputViewModel;
            set => _debugOutputViewModel = value;
        }

        public IDataListViewModel DataListViewModel
        {
            get => _dataListViewModel;
            set
            {
                _dataListViewModel = value;
                NotifyOfPropertyChange(() => DataListViewModel);
            }
        }

        public override bool HasVariables => true;
        public override bool HasDebugOutput => true;

        public override bool CanSave => ResourceModel.IsAuthorized(AuthorizationContext.Contribute);

        protected virtual bool IsDesignerViewVisible => DesignerView != null && DesignerView.IsVisible;

#pragma warning disable 108,114

        public string DisplayName
#pragma warning restore 108,114
        {
            get
            {
                var displayName = ResourceModel.UserPermissions == Permissions.View ?
                    $"{ResourceHelper.GetDisplayName(ResourceModel)} [READONLY]"
                    : ResourceHelper.GetDisplayName(ResourceModel);
                return displayName;
            }
        }
        
        public string GetAndUpdateWorkflowLinkWithWorkspaceID()
        {
            UpdateWorkflowLink();
            return _workflowLinkWithWid;
        }

        public void UpdateWorkflowLink()
        {
            if (_workflowInputDataViewModel != null)
            {
                if (!string.IsNullOrEmpty(_resourceModel.DataList))
                {
                    _workflowInputDataViewModel.DebugTo.DataList = _resourceModel.DataList;
                }
                _workflowLink = "";
                _workflowInputDataViewModel.LoadWorkflowInputs();
                _workflowInputDataViewModel.SetXmlData(true);
                var buildWebPayLoad = _workflowInputDataViewModel.BuildInputDataList();

                var uri = _resourceModel.GetWorkflowUri(buildWebPayLoad, UrlType.Json, true);
                if (uri != null) {
                    _workflowLinkWithWid = uri.ToString();
                    var startIndex = _workflowLinkWithWid.IndexOf("&wid", StringComparison.InvariantCultureIgnoreCase);
                    if (startIndex != -1)
                    {
                        _workflowLink = _workflowLinkWithWid.Remove(startIndex);
                    }
                }
            }
            NotifyOfPropertyChange(() => DisplayWorkflowLink);
        }

        public string GetWorkflowInputs(string field)
        {
            var workflowInputDataViewModel = _workflowInputDataViewModel as WorkflowInputDataViewModel;
            var inputsValue = workflowInputDataViewModel?.WorkflowInputs?.FirstOrDefault(o => o.Field == field);
            return inputsValue?.Value;
        }

        public string DisplayWorkflowLink
        {
            get
            {
                return _workflowLink;
            }
            private set
            {
                _workflowLink = value;
            }
        }

        public Visibility WorkflowLinkVisible => _resourceModel.IsVersionResource ? Visibility.Hidden : Visibility.Visible;
        public bool CanViewWorkflowLink { get; set; }

        public IPopupController PopUp { get; set; }
        
        public virtual object SelectedModelItem => _wd?.Context?.Items.GetValue<Selection>().SelectedObjects.FirstOrDefault();

        public IContextualResourceModel ResourceModel
        {
            get => _resourceModel;
            set => _resourceModel = value;
        }

        public string WorkflowName => _resourceModel.ResourceName;

        public WorkflowDesigner Designer => _wd;

        public UIElement DesignerView => _wd?.View;

        public StringBuilder DesignerText => ServiceDefinition;

        public StringBuilder ServiceDefinition => _workflowHelper.SerializeWorkflow(_modelService);

        public ICommand CollapseAllCommand => _collapseAllCommand ?? (_collapseAllCommand = new DelegateCommand(param =>
        {
            var val = Convert.ToBoolean(param);
            if (val)
            {
                _designerManagementService.RequestCollapseAll();
            }
            else
            {
                _designerManagementService.RequestRestoreAll();
            }
        }));

        public ICommand ExpandAllCommand => _expandAllCommand ?? (_expandAllCommand = new DelegateCommand(param =>
        {
            var val = Convert.ToBoolean(param);
            if (val)
            {
                _designerManagementService.RequestExpandAll();
            }
            else
            {
                _designerManagementService.RequestRestoreAll();
            }
        }));

        public ICommand OpenWorkflowLinkCommand
        {
            get
            {
                return _openWorkflowLinkCommand ?? (_openWorkflowLinkCommand = new DelegateCommand(param =>
                {
                    if (!string.IsNullOrEmpty(_workflowLink))
                    {
                        if (_applicationTracker != null)
                        {
                            _applicationTracker.TrackEvent(Warewolf.Studio.Resources.Languages.TrackEventMenu.EventCategory,
                                                                Warewolf.Studio.Resources.Languages.TrackEventMenu.LinkUrl);
                        }
                        SaveToWorkspace();
                        if (_workflowInputDataViewModel.WorkflowInputCount == 0)
                        {
                            PopUp.ShowNoInputsSelectedWhenClickLink();
                        }
                        try
                        {
                            OpenLinkInBrowser();
                        }
                        catch (Exception e)
                        {
                            Dev2Logger.Error("OpenWorkflowLinkCommand", e, GlobalConstants.WarewolfError);
                        }
                    }
                }));
            }
        }

        public ICommand NewServiceCommand => _newServiceCommand ?? (_newServiceCommand = new DelegateCommand(param =>
        {
            if (Application.Current != null && Application.Current.Dispatcher != null && Application.Current.Dispatcher.CheckAccess() && Application.Current.MainWindow != null)
            {
                var mvm = Application.Current.MainWindow.DataContext as ShellViewModel;
                if (mvm?.ActiveItem != null)
                {
                    mvm.NewService("");
                }
            }
        }));

        public ICommand DebugInputsCommand => _debugInputsCommand ?? (_debugInputsCommand = new DelegateCommand(param =>
        {
            if (Application.Current != null && Application.Current.Dispatcher != null && Application.Current.Dispatcher.CheckAccess() && Application.Current.MainWindow != null)
            {
                var mvm = Application.Current.MainWindow.DataContext as ShellViewModel;
                if (mvm?.ActiveItem != null)
                {
                    mvm.DebugCommand.Execute(mvm.ActiveItem);
                }
            }
        }));

        public ICommand DebugStudioCommand => _debugStudioCommand ?? (_debugStudioCommand = new DelegateCommand(param =>
        {
            if (Application.Current != null && Application.Current.Dispatcher != null && Application.Current.Dispatcher.CheckAccess() && Application.Current.MainWindow != null)
            {
                var mvm = Application.Current.MainWindow.DataContext as ShellViewModel;
                if (mvm?.ActiveItem != null)
                {
                    mvm.QuickDebugCommand.Execute(mvm.ActiveItem);
                }
            }
        }));

        public ICommand DebugBrowserCommand => _debugBrowserCommand ?? (_debugBrowserCommand = new DelegateCommand(param =>
        {
            OpenLinkInBrowser();
        }));

        static void OpenLinkInBrowser()
        {
            if (Application.Current != null && Application.Current.Dispatcher != null && Application.Current.Dispatcher.CheckAccess() && Application.Current.MainWindow != null)
            {
                var mvm = Application.Current.MainWindow.DataContext as ShellViewModel;
                if (mvm?.ActiveItem != null)
                {
                    mvm.QuickViewInBrowserCommand.Execute(mvm.ActiveItem);
                }
            }
        }

        public ICommand ScheduleCommand => _scheduleCommand ?? (_scheduleCommand = new DelegateCommand(param =>
        {
            if (Application.Current != null && Application.Current.Dispatcher != null && Application.Current.Dispatcher.CheckAccess() && Application.Current.MainWindow != null)
            {
                var mvm = Application.Current.MainWindow.DataContext as ShellViewModel;
                if (mvm?.ActiveItem != null)
                {
                    mvm.CreateNewSchedule(mvm.ActiveItem.ContextualResourceModel.ID);
                }
            }
        }));

        public ICommand QueueEventCommand => _queueEventCommand ?? (_queueEventCommand = new DelegateCommand(param =>
        {
            if (Application.Current != null && Application.Current.Dispatcher != null && Application.Current.Dispatcher.CheckAccess() && Application.Current.MainWindow != null)
            {
                var mvm = Application.Current.MainWindow.DataContext as ShellViewModel;
                if (mvm?.ActiveItem != null)
                {
                    mvm.CreateNewQueueEvent(mvm.ActiveItem.ContextualResourceModel.ID);
                }
            }
        }));

        public ICommand TestEditorCommand => _testEditorCommand ?? (_testEditorCommand = new DelegateCommand(param =>
        {
            if (Application.Current != null && Application.Current.Dispatcher != null && Application.Current.Dispatcher.CheckAccess() && Application.Current.MainWindow != null)
            {
                var mvm = Application.Current.MainWindow.DataContext as ShellViewModel;
                if (mvm?.ActiveItem != null)
                {
                    mvm.CreateTest(mvm.ActiveItem.ContextualResourceModel.ID);
                }
            }
        }));

        public ICommand DuplicateCommand => _duplicateCommand ?? (_duplicateCommand = new DelegateCommand(param =>
        {
            if (Application.Current != null && Application.Current.Dispatcher != null && Application.Current.Dispatcher.CheckAccess() && Application.Current.MainWindow != null)
            {
                var mvm = Application.Current.MainWindow.DataContext as ShellViewModel;
                if (mvm?.ActiveItem != null)
                {
                    IExplorerItemViewModel explorerItem = null;
                    var environmentViewModels = mvm.ExplorerViewModel.Environments.Where(a => a.ResourceId == mvm.ActiveServer.EnvironmentID);
                    foreach (var environmentViewModel in environmentViewModels)
                    {
                        explorerItem = environmentViewModel.Children.Flatten(model => model.Children).FirstOrDefault(c => c.ResourceId == mvm.ActiveItem.ContextualResourceModel.ID);
                    }

                    if (explorerItem != null)
                    {
                        mvm.DuplicateResource(explorerItem);
                    }
                }
            }
        }));

        public ICommand DeployCommand => _deployCommand ?? (_deployCommand = new DelegateCommand(param =>
        {
            if (Application.Current != null && Application.Current.Dispatcher != null && Application.Current.Dispatcher.CheckAccess() && Application.Current.MainWindow != null)
            {
                var mvm = Application.Current.MainWindow.DataContext as ShellViewModel;
                if (mvm?.ActiveItem != null)
                {
                    var explorerItem = GetSelected(mvm);
                    if (explorerItem != null)
                    {
                        mvm.AddDeploySurface(explorerItem.AsList().Union(new[] { explorerItem }));
                    }
                }
            }
        }));

        public ICommand MergeCommand => _mergeCommand ?? (_mergeCommand = new DelegateCommand(param =>
        {
            if (Application.Current?.Dispatcher == null || !Application.Current.Dispatcher.CheckAccess() || Application.Current?.MainWindow == null)
            {
                return;
            }
            MergeWorkflow();
        }));

        public IShellViewModel ShellViewModel => _shellViewModel ?? CustomContainer.Get<IShellViewModel>();
        
        private static void MergeWorkflow()
        {
            var shellViewModel = Application.Current.MainWindow.DataContext as ShellViewModel;
            if (shellViewModel?.ActiveItem == null)
            {
                return;
            }

            var explorerItem = shellViewModel.ActiveItem.ContextualResourceModel.IsVersionResource
                             ? GetMergeResourceVersion(shellViewModel)
                             : GetMergeCurrentResource(shellViewModel);

            if (explorerItem == null)
            {
                return;
            }
            shellViewModel.OpenMergeDialogView(explorerItem);
        }

        private static IExplorerItemViewModel GetMergeResourceVersion(ShellViewModel shellViewModel)
        {
            var resourceId = shellViewModel.ActiveItem.ContextualResourceModel.OriginalId;
            var environmentViewModel = shellViewModel.ExplorerViewModel.Environments.FirstOrDefault(a => a.ResourceId == shellViewModel.ActiveServer.EnvironmentID);
            return environmentViewModel?.UnfilteredChildren?.Flatten(model => model.UnfilteredChildren).FirstOrDefault(c => c.ResourceId == resourceId);
        }

        private static IExplorerItemViewModel GetMergeCurrentResource(ShellViewModel shellViewModel)
        {
            var resourceId = shellViewModel.ActiveItem.ContextualResourceModel.ID;
            var environmentViewModel = shellViewModel.ExplorerViewModel.Environments.FirstOrDefault(a => a.ResourceId == shellViewModel.ActiveServer.EnvironmentID);
            return environmentViewModel?.UnfilteredChildren?.Flatten(model => model.UnfilteredChildren).Where(a => !a.IsVersion).FirstOrDefault(c => c.ResourceId == resourceId);
        }

        static IExplorerItemViewModel GetSelected(ShellViewModel mvm)
        {
            IExplorerItemViewModel explorerItem = null;
            if (mvm?.ActiveServer != null)
            {
                var environmentViewModels = mvm.ExplorerViewModel.Environments.Where(a => a.ResourceId == mvm.ActiveServer.EnvironmentID);
                foreach (var environmentViewModel in environmentViewModels)
                {
                    explorerItem =
                        environmentViewModel.UnfilteredChildren.Flatten(model => model.UnfilteredChildren)
                            .FirstOrDefault(c => c.ResourceId == mvm.ActiveItem.ContextualResourceModel.ID);
                }
            }
            return explorerItem;
        }

        public ICommand ShowDependenciesCommand => _showDependenciesCommand ?? (_showDependenciesCommand = new DelegateCommand(param =>
        {
            if (Application.Current != null && Application.Current.Dispatcher != null && Application.Current.Dispatcher.CheckAccess() && Application.Current.MainWindow != null)
            {
                var mvm = Application.Current.MainWindow.DataContext as ShellViewModel;
                var explorerItem = GetSelected(mvm);
                if (explorerItem != null)
                {
                    mvm.ShowDependencies(mvm.ActiveItem.ContextualResourceModel.ID, mvm.ActiveServer, explorerItem.IsSource || explorerItem.IsServer);
                }
            }
        }));

        public ICommand ViewOpenAPICommand => _viewOpenAPICommand ?? (_viewOpenAPICommand = new DelegateCommand(param =>
        {
            if (Application.Current != null && Application.Current.Dispatcher != null && Application.Current.Dispatcher.CheckAccess() && Application.Current.MainWindow != null)
            {
                var mvm = Application.Current.MainWindow.DataContext as ShellViewModel;
                if (mvm?.ActiveItem != null)
                {
                    mvm.ViewOpenAPI(mvm.ActiveItem.ContextualResourceModel.ResourceName, mvm.ActiveItem.ContextualResourceModel.ResourceName, mvm.ActiveServer.Connection.WebServerUri);
                }
            }
        }));

        public ICommand CopyUrlCommand => _copyUrlCommand ?? (_copyUrlCommand = new DelegateCommand(param =>
        {
            Clipboard.SetText(_workflowLink);
        }));
        
        protected ModelItem PerformAddItems(ModelItem addedItem)


        {
            var mi = addedItem;
            var computedValue = mi.Content?.ComputedValue;

            //Track added items when dragged on design surface
            if (computedValue != null && computedValue.GetType() != typeof(DsfActivity))
            {
                _applicationTracker?.TrackCustomEvent(Warewolf.Studio.Resources.Languages.TrackEventWorkflowTabs.EventCategory, Warewolf.Studio.Resources.Languages.TrackEventWorkflowTabs.ItemDragged, computedValue.ToString());
            }
            if (computedValue == null && (mi.ItemType == typeof(DsfFlowDecisionActivity) ||
                                          mi.ItemType == typeof(DsfFlowSwitchActivity)))
            {
                computedValue = mi.Source?.Value?.Source?.ComputedValue;
            }
            if (computedValue is IDev2Activity act)
            {
                if (_isPaste || string.IsNullOrEmpty(act.UniqueID))
                {
                    act.UniqueID = Guid.NewGuid().ToString();
                }
                _modelItems = _modelService.Find(_modelService.Root, typeof(IDev2Activity));
            }
            if (computedValue is Activity)
            {
                _activityCollection = _modelService.Find(_modelService.Root, typeof(Activity));
            }

            if (mi.ItemType == typeof(FlowSwitch<string>))
            {
                InitializeFlowSwitch(mi);
            }
            else if (mi.ItemType == typeof(FlowDecision))
            {
                InitializeFlowDecision(mi);
                _applicationTracker?.TrackCustomEvent(Warewolf.Studio.Resources.Languages.TrackEventWorkflowTabs.EventCategory, Warewolf.Studio.Resources.Languages.TrackEventWorkflowTabs.ItemDragged, mi.ItemType.Name);
            }
            else if (mi.ItemType == typeof(FlowStep))
            {
                InitializeFlowStep(mi);
            }
            else
            {
                AddSwitch(mi);
            }
            _isPaste = false;
            return addedItem;
        }

        void AddSwitch(ModelItem mi)
        {
            if (mi.Parent?.Parent?.Parent != null && mi.Parent.Parent.Parent.ItemType == typeof(FlowSwitch<string>))
            {
                var activityExpression = mi.Parent.Parent.Parent.Properties["Expression"];
                if (activityExpression != null)
                {
                    var switchExpressionValue = SwitchExpressionValue(activityExpression);
                    var modelProperty = mi.Properties["Key"];
                    if (modelProperty?.Value != null && (FlowController.OldSwitchValue == null || string.IsNullOrWhiteSpace(FlowController.OldSwitchValue)))
                    {
                        FlowController.ConfigureSwitchCaseExpression(new ConfigureCaseExpressionMessage { ModelItem = mi, ExpressionText = switchExpressionValue, Server = _resourceModel.Environment, IsPaste = _isPaste });
                    }
                }
            }
        }
        
        static string SwitchExpressionValue(ModelProperty activityExpression)
        {
            var tmpModelItem = activityExpression.Value;
            var switchExpressionValue = string.Empty;
            var tmpProperty = tmpModelItem?.Properties["ExpressionText"];
            var tmp = tmpProperty?.Value?.ToString();

            if (!string.IsNullOrEmpty(tmp))
            {
                var start = tmp.IndexOf("(", StringComparison.Ordinal);
                var end = tmp.IndexOf(",", StringComparison.Ordinal);

                if (start < end && start >= 0)
                {
                    start += 2;
                    end -= 1;
                    switchExpressionValue = tmp.Substring(start, (end - start));
                }
            }
            return switchExpressionValue;
        }

        void InitializeFlowStep(ModelItem mi)
        {
            // PBI 9135 - 2013.07.15 - TWR - Changed to "as" check so that database activity also flows through this
            var modelProperty1 = mi.Properties["Action"];
            InitialiseWithAction(modelProperty1);
        }

        void InitialiseWithAction(ModelProperty modelProperty1)
        {
            if (modelProperty1?.ComputedValue is DsfActivity droppedActivity)
            {
                if (!string.IsNullOrEmpty(droppedActivity.ServiceName))
                {
                    InitialiseWithoutServiceName(modelProperty1, droppedActivity);
                }
                else
                {
                    InitialiseWithDataObject(droppedActivity);
                }
            }
        }

        void InitialiseWithDataObject(DsfActivity droppedActivity)
        {
            if (DataObject != null)
            {
                if (DataObject is ExplorerItemViewModel viewModel)
                {
                    var serverRepository = CustomContainer.Get<IServerRepository>();
                    var server = serverRepository.FindSingle(c => c.EnvironmentID == viewModel.Server.EnvironmentID);
                    serverRepository.ActiveServer = server;
                    var theResource = server?.ResourceRepository.LoadContextualResourceModel(viewModel.ResourceId);

                    if (theResource != null)
                    {
                        DsfActivity d = DsfActivityFactory.CreateDsfActivity(theResource, droppedActivity, true, serverRepository, _resourceModel.Environment.IsLocalHostCheck());
                        TrackAction(theResource);

                        UpdateForRemote(d, theResource);
                    }
                }
                DataObject = null;
            }
        }

        void TrackAction(IContextualResourceModel theResource)
        {
            if (_applicationTracker != null)
            {
                if (theResource.DisplayName == "Hello World")
                {
                    //track hello world dragged
                    _applicationTracker.TrackCustomEvent(Warewolf.Studio.Resources.Languages.TrackEventWorkflowTabs.EventCategory,
                                       Warewolf.Studio.Resources.Languages.TrackEventWorkflowTabs.HelloWorld, theResource.DisplayName);
                }
                else if (theResource.Category != null && theResource.Category.StartsWith("Examples"))
                {
                    //track examples actitvity dragged
                    _applicationTracker.TrackCustomEvent(Warewolf.Studio.Resources.Languages.TrackEventWorkflowTabs.EventCategory,
                                        Warewolf.Studio.Resources.Languages.TrackEventWorkflowTabs.Examples, theResource.DisplayName);
                }
                else
                {
                    // other than above
                    _applicationTracker.TrackCustomEvent(Warewolf.Studio.Resources.Languages.TrackEventWorkflowTabs.EventCategory,
                                        Warewolf.Studio.Resources.Languages.TrackEventWorkflowTabs.ItemDragged, theResource.DisplayName);
                }
            }
        }

        public ResourceType ResourceType
        {
            get
            {
                if (ResourceModel != null)
                {
                    return ResourceModel.ResourceType;
                }
                return ResourceType.Unknown;
            }
        }

        void InitialiseWithoutServiceName(ModelProperty modelProperty1, DsfActivity droppedActivity)
        {
            var activity = droppedActivity;
            var serverRepository = CustomContainer.Get<IServerRepository>();
            var server = CustomContainer.Get<IServerRepository>().ActiveServer;
            var resourceId = Guid.Parse(activity.ResourceID.Expression.ToString());
            var resource = server.ResourceRepository.LoadContextualResourceModel(resourceId);
            var displayName = resource != null ? resource.DisplayName : activity.DisplayName;

            droppedActivity = DsfActivityFactory.CreateDsfActivity(resource, droppedActivity, false, serverRepository, _resourceModel.Environment.IsLocalHostCheck());
            WorkflowDesignerUtils.CheckIfRemoteWorkflowAndSetProperties(droppedActivity, resource, serverRepository.ActiveServer);
            modelProperty1.SetValue(droppedActivity);
            _applicationTracker?.TrackCustomEvent(Warewolf.Studio.Resources.Languages.TrackEventWorkflowTabs.EventCategory, Warewolf.Studio.Resources.Languages.TrackEventWorkflowTabs.ItemDragged, displayName);
        }

        void InitializeFlowSwitch(ModelItem mi)
        {
            // Travis.Frisinger : 28.01.2013 - Switch Amendments
            Dev2Logger.Info("Publish message of type - " + typeof(ConfigureSwitchExpressionMessage), "Warewolf Info");
            _expressionString = FlowController.ConfigureSwitchExpression(new ConfigureSwitchExpressionMessage { ModelItem = mi, Server = _resourceModel.Environment, IsNew = true, IsPaste = _isPaste });
            AddMissingWithNoPopUpAndFindUnusedDataListItemsImpl(false);
        }

        void InitializeFlowDecision(ModelItem mi)
        {
            Dev2Logger.Info("Publish message of type - " + typeof(ConfigureDecisionExpressionMessage), "Warewolf Info");
            var modelProperty = mi.Properties["Action"];

            InitialiseWithAction(modelProperty);
            _expressionString = FlowController.ConfigureDecisionExpression(new ConfigureDecisionExpressionMessage { ModelItem = mi, Server = _resourceModel.Environment, IsNew = true, IsPaste = _isPaste });
            AddMissingWithNoPopUpAndFindUnusedDataListItemsImpl(false);
        }

        void EditActivity(ModelItem modelItem, Guid parentEnvironmentID)
        {
            if (Designer == null)
            {
                return;
            }
            var modelService = Designer.Context.Services.GetService<ModelService>();
            if (modelService.Root == modelItem.Root && (modelItem.ItemType == typeof(DsfActivity) || modelItem.ItemType.BaseType == typeof(DsfActivity)))
            {
                var resourceID = ModelItemUtils.TryGetResourceID(modelItem);
                var shellViewModel = CustomContainer.Get<IShellViewModel>();
                shellViewModel.OpenResource(resourceID, parentEnvironmentID, shellViewModel.ActiveServer);
            }
        }

        static ModelItem RecursiveForEachCheck(dynamic activity)
        {
            if (activity.DataFunc.Handler is ModelItem innerAct)
            {
                if (innerAct.ItemType == typeof(DsfForEachActivity))
                {
                    innerAct = RecursiveForEachCheck(innerAct);
                }
            }
            return innerAct;
        }
        
        void PreventCommandFromBeingExecuted(CanExecuteRoutedEventArgs e)
        {
            if (Designer?.Context != null)
            {
                var selection = Designer.Context.Items.GetValue<Selection>();

                if (selection?.PrimarySelection == null)
                {
                    return;
                }

                if (selection.PrimarySelection.ItemType != typeof(Flowchart) &&
                   selection.SelectedObjects.All(modelItem => modelItem.ItemType != typeof(Flowchart)))
                {
                    return;
                }
            }

            e.CanExecute = false;
            e.Handled = true;
        }
        
        void SetLastDroppedPoint(DragEventArgs e)
        {
            var senderAsFrameworkElement = _modelService.Root.View as FrameworkElement;
            UIElement freePormPanel = senderAsFrameworkElement?.FindNameAcrossNamescopes("flowchartPanel");
            if (freePormPanel != null)
            {
                e.GetPosition(freePormPanel);
            }
        }

        IList<IDataListVerifyPart> BuildWorkflowFields()
        {
            var dataPartVerifyDuplicates = new DataListVerifyPartDuplicationParser();
            _uniqueWorkflowParts = new Dictionary<IDataListVerifyPart, string>(dataPartVerifyDuplicates);
            var modelService = Designer?.Context.Services.GetService<ModelService>();
            if (modelService != null)
            {
                var flowNodes = modelService.Find(modelService.Root, typeof(FlowNode));

                GetWorkflowFieldsFromFlowNodes(flowNodes);
            }
            var flattenedList = _uniqueWorkflowParts.Keys.ToList();
            return flattenedList;
        }

        protected void GetWorkflowFieldsFromFlowNodes(IEnumerable<ModelItem> flowNodes)
        {
            foreach (var flowNode in flowNodes)
            {
                var workflowFields = GetWorkflowFieldsFromModelItem(flowNode);
                foreach (var field in workflowFields)
                {
                    var isJsonObjectSource = field.StartsWith("@");
                    WorkflowDesignerDataPartUtils.BuildDataPart(field, _uniqueWorkflowParts, isJsonObjectSource);
                }
            }
        }

        IEnumerable<string> GetWorkflowFieldsFromModelItem(ModelItem flowNode)
        {
            var workflowFields = new List<string>();
            try
            {
                var modelProperty = flowNode.Properties["Action"];
                if (modelProperty != null)
                {
                    var activity = modelProperty.ComputedValue;
                    workflowFields = GetActivityElements(activity);
                }
                else
                {
                    var propertyName = string.Empty;
                    if (flowNode.ItemType.Name == "FlowDecision")
                    {
                        propertyName = "Condition";
                    }
                    else
                    {
                        if (flowNode.ItemType.Name == "FlowSwitch`1")
                        {
                            propertyName = "Expression";
                        }
                    }

                    var property = flowNode.Properties[propertyName];
                    if (property != null)
                    {
                        workflowFields = GetWorkflowFieldsFromProperty(workflowFields, property);
                    }
                }
            }
            catch (Exception ex)
            {
                Dev2Logger.Error(ex.Message, GlobalConstants.WarewolfError);
            }
            return workflowFields;
        }

        List<string> GetWorkflowFieldsFromProperty(List<string> workflowFields, ModelProperty property)
        {
            if (!string.IsNullOrEmpty(_expressionString))
            {
                workflowFields = TryGetDecisionElements(_expressionString, DataListSingleton.ActiveDataList);
                var activity = property.ComputedValue;
                if (activity != null)
                {
                    workflowFields.AddRange(TryGetDecisionElements(((dynamic)activity).ExpressionText, DataListSingleton.ActiveDataList));
                }
            }
            else
            {
                var activity = property.ComputedValue;
                if (activity != null)
                {
                    workflowFields.AddRange(TryGetDecisionElements(((dynamic)activity).ExpressionText, DataListSingleton.ActiveDataList));
                }
            }

            return workflowFields;
        }

        public static List<String> TryGetDecisionElements(string expression, IDataListViewModel datalistModel)
        {
            var decisionFields = new List<string>();
            if (!string.IsNullOrEmpty(expression))
            {
                var startIndex = expression.IndexOf('"');
                startIndex = startIndex + 1;
                var endindex = expression.IndexOf('"', startIndex);
                var decisionValue = expression.Substring(startIndex, endindex - startIndex);
                try
                {
                    decisionFields = GetDecisionElements(datalistModel, decisionFields, decisionValue);
                }
                catch (Exception)
                {
                    if (!DataListUtil.IsValueRecordset(decisionValue))
                    {
                        var parts = DataListFactory.CreateLanguageParser().ParseExpressionIntoParts(decisionValue, new List<IDev2DataLanguageIntellisensePart>());
                        decisionFields.AddRange(parts.Select(part => DataListUtil.StripBracketsFromValue(part.Option.DisplayValue)));
                        return decisionFields;
                    }
                    if (DataListSingleton.ActiveDataList != null)
                    {
                        var parts = DataListFactory.CreateLanguageParser().ParseDataLanguageForIntellisense(decisionValue, DataListSingleton.ActiveDataList.WriteToResourceModel(), true);
                        decisionFields.AddRange(parts.Select(part => DataListUtil.StripBracketsFromValue(part.Option.DisplayValue)));
                    }
                }
            }
            return decisionFields;
        }

        private static List<string> GetDecisionElements(IDataListViewModel datalistModel, List<string> decisionFields, string decisionValue)
        {
            var dds = JsonConvert.DeserializeObject<Dev2DecisionStack>(decisionValue.Replace('!', '\"'));
            foreach (var decision in dds.TheStack)
            {
                var getCols = new[] { decision.Col1, decision.Col2, decision.Col3 };
                for (var i = 0; i < 3; i++)
                {
                    decisionFields = GetDecisionFields(datalistModel, decisionFields, decisionValue, getCols, i);
                }
            }
            return decisionFields;
        }

        private static List<string> GetDecisionFields(IDataListViewModel datalistModel, List<string> decisionFields, string decisionValue, string[] getCols, int i)
        {
            var getCol = getCols[i];
            if (datalistModel != null)
            {
                var parsed = GetParsedRegions(getCol, datalistModel);
                if (!DataListUtil.IsValueRecordset(getCol) && parsed.Any(DataListUtil.IsValueRecordset))
                {
                    var parts = DataListFactory.CreateLanguageParser().ParseExpressionIntoParts(decisionValue, new List<IDev2DataLanguageIntellisensePart>());
                    decisionFields.AddRange(parts.Select(part => DataListUtil.StripBracketsFromValue(part.Option.DisplayValue)));
                }
                else
                {
                    decisionFields = decisionFields.Union(GetParsedRegions(getCol, datalistModel)).ToList();
                }
            }

            return decisionFields;
        }

        static IEnumerable<string> GetParsedRegions(string getCol, IDataListViewModel datalistModel)
        {
            // Travis.Frisinger - 25.01.2013
            // We now need to parse this data for regions ;)

            var parser = DataListFactory.CreateLanguageParser();
            // NEED - DataList for active workflow
            var parts = parser.ParseDataLanguageForIntellisense(getCol, datalistModel.WriteToResourceModel(), true);

            return (from intellisenseResult in parts
                    select DataListUtil.StripBracketsFromValue(intellisenseResult.Option.DisplayValue)
                    into varWithNoBrackets
                    where !string.IsNullOrEmpty(getCol) && !varWithNoBrackets.Equals(getCol)
                    select getCol
                   ).ToList();
        }

        static List<String> GetActivityElements(object activity)
        {
            enFindMissingType findMissingType;

            if (activity is DsfActivityAbstract<string> assign)
            {
                findMissingType = assign.GetFindMissingType();
            }
            else if (activity is DsfActivityAbstract<bool> other)
            {
                findMissingType = other.GetFindMissingType();
            }
            else
            {
                return new List<String>();
            }

            var activityFields = new List<string>();
            var stratFac = new Dev2FindMissingStrategyFactory();
            var strategy = stratFac.CreateFindMissingStrategy(findMissingType);

            foreach (var activityField in strategy.GetActivityFields(activity))
            {
                if (!string.IsNullOrEmpty(activityField))
                {
                    var wdu = new WorkflowDesignerUtils();
                    activityFields.AddRange(wdu.FormatDsfActivityField(activityField).Where(item => !item.Contains("xpath(")));
                }
            }
            return activityFields;
        }

        void OnItemSelected(Selection item)
        {
            var primarySelection = item.PrimarySelection;
            NotifyItemSelected(primarySelection);
            primarySelection.SetProperty("IsSelected", true);
            SelectedItem = primarySelection;
        }

        public Action<ModelItem> ItemSelectedAction { get; set; }

        public void Handle(AddStringListToDataListMessage message)
        {
            Dev2Logger.Info(message.GetType().Name, "Warewolf Info");
            var dlvm = DataListSingleton.ActiveDataList;
            if (dlvm != null)
            {
                var dataPartVerifyDuplicates = new DataListVerifyPartDuplicationParser();
                _uniqueWorkflowParts = new Dictionary<IDataListVerifyPart, string>(dataPartVerifyDuplicates);
                foreach (var s in message.ListToAdd)
                {
                    WorkflowDesignerDataPartUtils.BuildDataPart(s, _uniqueWorkflowParts);
                }
                var partsToAdd = _uniqueWorkflowParts.Keys.ToList();
                var uniqueDataListPartsToAdd = dlvm.MissingDataListParts(partsToAdd);
                dlvm.AddMissingDataListItems(uniqueDataListPartsToAdd);
            }
        }

        public bool NotifyItemSelected(object primarySelection) => false;

        public void BindToModel() => _resourceModel.WorkflowXaml = ServiceDefinition;

        public void InitializeDesigner(IDictionary<Type, Type> designerAttributes) => InitializeDesigner(designerAttributes, false);

        public void InitializeDesigner(IDictionary<Type, Type> designerAttributes, bool liteInit)
        {
            _wd = new WorkflowDesigner();
            if (!liteInit)
            {
                SetHashTable();
                SetDesignerConfigService();

                _wdMeta = new DesignerMetadata();
                _wdMeta.Register();
                var builder = new AttributeTableBuilder();
                foreach (var designerAttribute in designerAttributes)
                {
                    builder.AddCustomAttributes(designerAttribute.Key, new DesignerAttribute(designerAttribute.Value));
                }

                MetadataStore.AddAttributeTable(builder.CreateTable());

                _wd.Context.Items.Subscribe<Selection>(OnItemSelected);
                _wd.Context.Services.Subscribe<ModelService>(ModelServiceSubscribe);
                _wd.Context.Services.Subscribe<DesignerView>(DesigenrViewSubscribe);
                _wd.Context.Services.Publish(_designerManagementService);

                _wd.View.Measure(new Size(2000, 2000));
                _wd.View.PreviewDrop += ViewPreviewDrop;
                _wd.View.PreviewMouseDown += ViewPreviewMouseDown;
                _wd.View.PreviewKeyDown += ViewOnKeyDown;
                _wd.View.LostFocus += OnViewOnLostFocus;

                //Jurie.Smit 2013/01/03 - Added to disable the deleting of the root flowchart
                CommandManager.AddPreviewCanExecuteHandler(_wd.View, CanExecuteRoutedEventHandler);
                _wd.ModelChanged += WdOnModelChanged;
                _wd.View.Focus();

                var indexOfOpenItem = -1;
                if (_wd.ContextMenu?.Items != null)
                {
                    foreach (var menuItem in _wd.ContextMenu.Items.Cast<object>().OfType<MenuItem>().Where(menuItem => (string)menuItem.Header == "_Open"))
                    {
                        indexOfOpenItem = _wd.ContextMenu.Items.IndexOf(menuItem);
                        break;
                    }
                    if (indexOfOpenItem != -1)
                    {
                        _wd.ContextMenu.Items.RemoveAt(indexOfOpenItem);
                    }
                }

                CommandManager.AddPreviewExecutedHandler(_wd.View, PreviewExecutedRoutedEventHandler);

                Selection.Subscribe(_wd.Context, SelectedItemChanged);

                LoadDesignerXaml();
                _workflowHelper.EnsureImplementation(_modelService);

                WorkflowDesignerIcons.Activities.Flowchart = Application.Current.TryFindResource("Explorer-WorkflowService-Icon") as DrawingBrush;
                WorkflowDesignerIcons.Activities.StartNode = Application.Current.TryFindResource("System-StartNode-Icon") as DrawingBrush;
                SubscribeToDebugSelectionChanged();
                SetPermission(ResourceModel.UserPermissions);
                ViewModelUtils.RaiseCanExecuteChanged(_debugOutputViewModel?.AddNewTestCommand);
                UpdateErrorIconWithCorrectMessage();
            }
        }

        public void CreateDesigner() => CreateDesigner(false);

        public void CreateDesigner(bool liteInit)
        {
            _wd = new WorkflowDesigner();

            if (!liteInit)
            {
                SetHashTable();
                SetDesignerConfigService();

                _wdMeta = new DesignerMetadata();
                _wdMeta.Register();
                var builder = new AttributeTableBuilder();
                foreach (var designerAttribute in ActivityDesignerHelper.DesignerAttributes)
                {
                    builder.AddCustomAttributes(designerAttribute.Key, new DesignerAttribute(designerAttribute.Value));
                }

                MetadataStore.AddAttributeTable(builder.CreateTable());

                _wd.Context.Items.Subscribe<Selection>(OnItemSelected);
                _wd.Context.Services.Subscribe<ModelService>(ModelServiceSubscribe);
                _wd.Context.Services.Subscribe<DesignerView>(DesigenrViewSubscribe);
                _wd.Context.Services.Publish(_designerManagementService);

                _wd.View.Measure(new Size(2000, 2000));
                _wd.View.PreviewDrop += ViewPreviewDrop;
                _wd.View.PreviewMouseDown += ViewPreviewMouseDown;
                _wd.View.PreviewKeyDown += ViewOnKeyDown;
                _wd.View.LostFocus += OnViewOnLostFocus;

                //Jurie.Smit 2013/01/03 - Added to disable the deleting of the root flowchart
                CommandManager.AddPreviewCanExecuteHandler(_wd.View, CanExecuteRoutedEventHandler);
                _wd.ModelChanged += WdOnModelChanged;
                _wd.View.Focus();

                var indexOfOpenItem = -1;
                if (_wd.ContextMenu?.Items != null)
                {
                    foreach (var menuItem in _wd.ContextMenu.Items.Cast<object>().OfType<MenuItem>().Where(menuItem => (string)menuItem.Header == "_Open"))
                    {
                        indexOfOpenItem = _wd.ContextMenu.Items.IndexOf(menuItem);
                        break;
                    }
                    if (indexOfOpenItem != -1)
                    {
                        _wd.ContextMenu.Items.RemoveAt(indexOfOpenItem);
                    }
                }

                CommandManager.AddPreviewExecutedHandler(_wd.View, PreviewExecutedRoutedEventHandler);

                Selection.Subscribe(_wd.Context, SelectedItemChanged);
                WorkflowDesignerIcons.Activities.Flowchart = Application.Current.TryFindResource("Explorer-WorkflowService-Icon") as DrawingBrush;
                WorkflowDesignerIcons.Activities.StartNode = Application.Current.TryFindResource("System-StartNode-Icon") as DrawingBrush;
                SubscribeToDebugSelectionChanged();
                SetPermission(ResourceModel.UserPermissions);
                ViewModelUtils.RaiseCanExecuteChanged(_debugOutputViewModel?.AddNewTestCommand);
                UpdateErrorIconWithCorrectMessage();
            }
        }

        void SetHashTable() => _wd.PropertyInspectorFontAndColorData = XamlServices.Save(ActivityDesignerHelper.GetDesignerHashTable());

        void SetDesignerConfigService()
        {
            var designerConfigService = _wd.Context.Services.GetService<DesignerConfigurationService>();
            if (designerConfigService != null)
            {
                // set the runtime Framework version to 4.5 as new features are in .NET 4.5 and do not exist in .NET 4
                designerConfigService.TargetFrameworkName = new FrameworkName(".NETFramework", new Version(4, 5));
                designerConfigService.AutoConnectEnabled = true;
                designerConfigService.AutoSplitEnabled = true;
                designerConfigService.PanModeEnabled = true;
                designerConfigService.RubberBandSelectionEnabled = true;
                designerConfigService.BackgroundValidationEnabled = true;

                // prevent design-time background validation from blocking UI thread
                // Disabled for now
                designerConfigService.AnnotationEnabled = false;
                designerConfigService.AutoSurroundWithSequenceEnabled = false;
            }
        }
        
        static void ViewOnKeyDown(object sender, KeyEventArgs e)
        {
            var grid = sender as Grid;
            if (e.OriginalSource != null)
            {
                var origSource = e.OriginalSource.GetType();
                if (origSource.BaseType == typeof(ActivityDesigner) && e.Key == Key.Return)
                {
                    e.Handled = true;
                }

                var type = grid?.DataContext.GetType();
                if (type == typeof(ServiceTestViewModel) && e.Key == Key.Delete)
                {
                    e.Handled = true;
                }

                if (type == typeof(MergeWorkflowViewModel))
                {
                    if (origSource == typeof(TextBox))
                    {
                        return;
                    }
                    if (e.Key == Key.Delete)
                    {
                        e.Handled = true;
                        return;
                    }
                    var isControlPressed = (Keyboard.Modifiers & ModifierKeys.Control) == ModifierKeys.Control;
                    var isExpectedKey = e.Key == Key.C || e.Key == Key.V;
                    isExpectedKey |= e.Key == Key.X || e.Key == Key.Y || e.Key == Key.Z;
                    if (isControlPressed && isExpectedKey)
                    {
                        e.Handled = true;
                    }
                }
            }
        }

        static void DesigenrViewSubscribe(DesignerView instance)
        {
            // PBI 9221 : TWR : 2013.04.22 - .NET 4.5 upgrade
            instance.WorkflowShellHeaderItemsVisibility = ShellHeaderItemsVisibility.ExpandAll;
            instance.WorkflowShellBarItemVisibility = ShellBarItemVisibility.None;
            instance.WorkflowShellBarItemVisibility = ShellBarItemVisibility.Zoom | ShellBarItemVisibility.PanMode | ShellBarItemVisibility.MiniMap;
        }
        
        void OnViewOnLostFocus(object sender, RoutedEventArgs args)
        {
            var workSurfaceKey = WorkSurfaceKeyFactory.CreateKey(ResourceModel);

            // If we are opening from server skip this check, it cannot have "real" changes!
            if (!OpeningWorkflowsHelper.IsWorkflowWaitingforDesignerLoad(workSurfaceKey))
            {
                // an additional case we need to account for - Designer has resized and is only visible once focus is lost?! ;)
                if (OpeningWorkflowsHelper.IsWaitingForFistFocusLoss(workSurfaceKey) || WatermarkSential.IsWatermarkBeingApplied)
                {
                    ResourceModel.WorkflowXaml = ServiceDefinition;
                    OpeningWorkflowsHelper.RemoveWorkflowWaitingForFirstFocusLoss(workSurfaceKey);
                }
            }
        }

        protected void ModelServiceSubscribe(ModelService instance)
        {
            _modelService = instance;
            _modelService.ModelChanged += ModelServiceModelChanged;
            if (_activityCollection == null)
            {
                _activityCollection = _modelService.Find(_modelService.Root, typeof(Activity));
            }
            if (_modelItems == null)
            {
                _modelItems = _modelService.Find(_modelService.Root, typeof(IDev2Activity));
            }
        }

        void SubscribeToDebugSelectionChanged()
        {
            _virtualizedContainerService = _wd.Context.Services.GetService<VirtualizedContainerService>();
            if (_virtualizedContainerService != null)
            {
                _virtualizedContainerServicePopulateAllMethod = _virtualizedContainerService.GetType().GetMethod("BeginPopulateAll", BindingFlags.Instance | BindingFlags.NonPublic);
            }
            _debugSelectionChangedService.Unsubscribe();
            _debugSelectionChangedService.Subscribe(args =>
            {
                // we only care when the designer is visible
                if (!IsDesignerViewVisible)
                {
                    return;
                }

                if (args.SelectionType == ActivitySelectionType.None)
                {
                    ClearSelection();
                    return;
                }

                var debugState = args.DebugState;
                if (debugState != null)
                {
                    var workSurfaceMappingId = debugState.WorkSurfaceMappingId;
                    var selectedModelItem = GetSelectedModelItem(workSurfaceMappingId, debugState.ParentID.GetValueOrDefault());
                    if (selectedModelItem != null)
                    {
                        switch (args.SelectionType)
                        {
                            case ActivitySelectionType.Single:
                                ClearSelection();
                                SelectSingleModelItem(selectedModelItem);

                                BringIntoView(selectedModelItem);
                                break;

                            case ActivitySelectionType.Add:
                                AddModelItemToSelection(selectedModelItem);

                                BringIntoView(selectedModelItem);
                                break;

                            case ActivitySelectionType.Remove:
                                RemoveModelItemFromSelection(selectedModelItem);
                                break;

                            case ActivitySelectionType.None:
                                break;

                            default:
                                break;
                        }
                    }
                }
            });
        }

        public bool IsTestView { get; set; }

        protected virtual ModelItem GetSelectedModelItem(Guid itemId, Guid parentId)
        {
            if (_modelService != null)
            {
                var selectedModelItem = (from mi in _modelItems
                                         let instanceID = ModelItemUtils.GetUniqueID(mi)
                                         where instanceID == itemId || instanceID == parentId
                                         select mi).FirstOrDefault();

                if (selectedModelItem == null)
                {
                    // Find the root flow chart
                    selectedModelItem = _modelService.Find(_modelService.Root, typeof(Flowchart)).FirstOrDefault();
                }
                else
                {
                    if (DecisionSwitchTypes.Contains(selectedModelItem.Parent.ItemType))
                    {
                        // Decision/switches activities are represented by their parents in the designer!
                        selectedModelItem = selectedModelItem.Parent;
                    }
                }
                return selectedModelItem;
            }
            return null;
        }

        void SelectSingleModelItem(ModelItem selectedModelItem)
        {
            if (SelectedDebugItems.Contains(selectedModelItem))
            {
                return;
            }
            Selection.SelectOnly(_wd.Context, selectedModelItem);
            SelectedDebugItems.Add(selectedModelItem);
        }

        void RemoveModelItemFromSelection(ModelItem selectedModelItem)
        {
            if (SelectedDebugItems.Contains(selectedModelItem))
            {
                SelectedDebugItems.Remove(selectedModelItem);
            }
            Selection.Unsubscribe(_wd.Context, SelectedItemChanged);
        }

        public List<ModelItem> DebugModels => SelectedDebugItems;

        void AddModelItemToSelection(ModelItem selectedModelItem)
        {
            if (SelectedDebugItems.Contains(selectedModelItem))
            {
                return;
            }
            Selection.Union(_wd.Context, selectedModelItem);

            var modelItems = _activityCollection as ModelItem[] ?? _activityCollection.ToArray();
            var index = modelItems.ToList().IndexOf(selectedModelItem);
            if (index != -1)
            {
                Selection.Select(_wd.Context, modelItems.ElementAt(index));
            }
            else
            {
                if (DecisionSwitchTypes.Contains(selectedModelItem.Parent.ItemType))
                {
                    // Decision/switches activities are represented by their parents in the designer!
                    selectedModelItem = selectedModelItem.Parent;
                    index = modelItems.ToList().IndexOf(selectedModelItem);
                    if (index != -1)
                    {
                        Selection.Select(_wd.Context, modelItems.ElementAt(index));
                    }
                }
            }
            SelectedDebugItems.Add(selectedModelItem);
        }

        void ClearSelection()
        {
            _wd.Context.Items.SetValue(new Selection());
            if (_selectedDebugItems != null)
            {
                foreach (var selectedDebugItem in _selectedDebugItems)
                {
                    selectedDebugItem.SetProperty("IsSelected", false);
                }
            }
            _selectedDebugItems = new List<ModelItem>();
        }

        protected virtual void BringIntoView(ModelItem selectedModelItem)
        {
            if (selectedModelItem.View is FrameworkElement view && view.IsVisible)
            {
                BringIntoView(view);
                return;
            }

            var onAfterPopulateAll = new System.Action(() => BringIntoView(selectedModelItem.View as FrameworkElement));
            _virtualizedContainerServicePopulateAllMethod?.Invoke(_virtualizedContainerService, new object[] { onAfterPopulateAll });
        }

        public void BringMergeToView(DataTemplate selectedDataTemplate)
        {
            var dependencyObject = selectedDataTemplate.LoadContent();
            var frameworkElement = dependencyObject as FrameworkElement;
            BringIntoView(frameworkElement);
        }

        static void BringIntoView(FrameworkElement view) => Application.Current?.Dispatcher?.InvokeAsync(() => view?.BringIntoView(), DispatcherPriority.Background);

        protected void LoadDesignerXaml()
        {
            var xaml = _resourceModel.WorkflowXaml;

            // if null, try fetching. It appears there is more than the two routes identified to populating xaml ;(
            if (xaml == null || xaml.Length == 0)
            {
                // we always want server at this point ;)
                var workspace = GlobalConstants.ServerWorkspaceID;

                // log the trace for fetch ;)
                Dev2Logger.Info($"Null Definition For {_resourceModel.ID} :: {_resourceModel.ResourceName}. Fetching...", "Warewolf Info");

                // In the case of null of empty try fetching again ;)
                var msg = Server.ResourceRepository.FetchResourceDefinition(_resourceModel.Environment, workspace, _resourceModel.ID, false);
                if (msg != null)
                {
                    xaml = msg.Message;
                }
            }

            // if we still cannot find it, create a new one ;)
            if (xaml == null || xaml.Length == 0)
            {
                if (_resourceModel.ResourceType == ResourceType.WorkflowService)
                {
                    // log the trace for fetch ;)
                    CreateBlankWorkflow();
                }
                else
                {
                    // we have big issues ;(
                    throw new Exception($"Could not find resource definition for {_resourceModel.ResourceName}");
                }
            }
            else
            {
                SetDesignerText(xaml);
                _wd.Load();
            }
        }

        public void CreateBlankWorkflow()
        {
            CreateDesigner();
            var activityBuilder = _workflowHelper.CreateWorkflow(_resourceModel.ResourceName);
            _wd.Load(activityBuilder);
            BindToModel();
            _workflowHelper.EnsureImplementation(_modelService);
        }

        void SetDesignerText(StringBuilder xaml)
        {
            var designerText = _workflowHelper.SanitizeXaml(xaml);
            if (designerText != null)
            {
                _wd.Text = designerText.ToString();
            }
        }

        void SelectedItemChanged(Selection item)
        {
            if (_wd?.Context != null)
            {
                var contextItemManager = _wd.Context.Items;
                var selection = contextItemManager.GetValue<Selection>();
                if (selection.SelectedObjects.Count() > 1)
                {
                    DeselectFlowchart();
                }
            }
        }

        void DeselectFlowchart()
        {
            if (_wd?.Context != null)
            {
                var editingContext = _wd.Context;
                var selection = editingContext.Items.GetValue<Selection>();
                foreach (var item in selection.SelectedObjects.Where(item => item.ItemType == typeof(Flowchart)))
                {
                    Selection.Toggle(editingContext, item);
                    break;
                }
            }
        }

        public List<NameValue> GetSelectableGates(string uniqueId)
        {
            var serviceDifferenceParser = CustomContainer.Get<IServiceDifferenceParser>();
            var treeNodes = serviceDifferenceParser.BuildWorkflow(ServiceDefinition);

            var list = new List<NameValue> { new NameValue { Name = "End", Value = Guid.Empty.ToString() } };
            try
            {
                IEnumerable<IDev2Activity> connectedList(IDev2Activity activity)
                {
                    var ret = new List<IDev2Activity>();
                    ret.Add(activity);
                    if (activity.NextNodes is null)
                    {
                        return ret;
                    }

                    foreach (var nextActivity in activity.NextNodes)
                    {
                        ret.AddRange(connectedList(nextActivity));
                    }
                    return ret.Where(o => (o is GateActivity));
                }

                bool found = false;
                var allGates = connectedList(treeNodes[0].Activity)
                    .Cast<GateActivity>()
                    .Where(gate => gate?.GateOptions != null && gate.GateOptions.GateOpts is Continue);

                var selectableGates = allGates
                    .TakeWhile(gate => !(found = (gate.UniqueID == uniqueId)));

                foreach (var gate in selectableGates)
                {
                    var id = gate.UniqueID;
                    var activityName = gate.GetDisplayName();
                    var nameValue = new NameValue { Name = activityName, Value = id };
                    list.Add(nameValue);
                }
            }
            catch (Exception ex)
            {
                Dev2Logger.Error("Error loading selectable gates. Exception: " + ex.Message, GlobalConstants.ServerWorkspaceID.ToString());
            }
            return list;
        }

        protected void WdOnModelChanged(object sender, EventArgs eventArgs)
        {
            if ((Designer != null && Designer.View.IsKeyboardFocusWithin) || sender != null)
            {
                var workSurfaceKey = WorkSurfaceKeyFactory.CreateKey(ResourceModel);
                UpdateErrorIconWithCorrectMessage();

                // If we are opening from server skip this check, it cannot have "real" changes!
                if (!OpeningWorkflowsHelper.IsWorkflowWaitingforDesignerLoad(workSurfaceKey))
                {
                    // an additional case we need to account for - Designer has resized and is only visible once focus is lost?! ;)
                    if (OpeningWorkflowsHelper.IsWaitingForFistFocusLoss(workSurfaceKey))
                    {
                        ResourceModel.WorkflowXaml = ServiceDefinition;
                        OpeningWorkflowsHelper.RemoveWorkflowWaitingForFirstFocusLoss(workSurfaceKey);
                    }
                    if (ResourceModel.WorkflowXaml is null)
                    {
                        ResourceModel.WorkflowXaml = ServiceDefinition;
                    }

                    var checkServiceDefinition = CheckServiceDefinition();
                    var checkDataList = CheckDataList();

                    ResourceModel.IsWorkflowSaved = checkServiceDefinition && checkDataList;
                    _workspaceSave = false;
                    WorkflowChanged?.Invoke();
                    NotifyOfPropertyChange(() => DisplayName);
                    ViewModelUtils.RaiseCanExecuteChanged(_debugOutputViewModel?.AddNewTestCommand);
                }
                else
                {
                    // When opening from server, save the hydrated changes for future comparison ;)
                    if (!CheckServiceDefinition())
                    {
                        // process any latent datalist changes ;)
                        ProcessDataListOnLoad();
                        ResourceModel.WorkflowXaml = ServiceDefinition;
                    }
                }

                // THIS MUST NEVER BE DELETED ;)
                WatermarkSential.IsWatermarkBeingApplied = false;
            }
            if (_firstWorkflowChange)
            {
                AddMissingWithNoPopUpAndFindUnusedDataListItemsImpl(false);
                _firstWorkflowChange = false;
            }
        }

        void UpdateErrorIconWithCorrectMessage()
        {
            var validationIcon = DesignerView?.FindChild<Border>(border => border.Name.Equals("validationVisuals", StringComparison.CurrentCultureIgnoreCase));
            if (validationIcon != null && validationIcon.Name.Equals("validationVisuals", StringComparison.CurrentCultureIgnoreCase))
            {
                validationIcon.ToolTip = Warewolf.Studio.Resources.Languages.Tooltips.StartNodeNotConnectedToolTip;

                //It should be called once when there is first tool dragged or start node link get deleted
                if (!IsStartNodeErrorMessageSet)
                {
                    IsStartNodeErrorMessageSet = true;
                    _applicationTracker?.TrackEvent(Warewolf.Studio.Resources.Languages.TrackEventWorkflowTabs.EventCategory, Warewolf.Studio.Resources.Languages.TrackEventWorkflowTabs.StartNodeNotConnected);
                }
            }
        }

        bool CheckDataList()
        {
            if (_originalDataList == null)
            {
                return true;
            }

            if (ResourceModel.DataList != null)
            {
                var currentDataList = ResourceModel.DataList.Replace("<DataList>", "").Replace("</DataList>", "");
                return StringExtension.SpaceCaseInsenstiveComparision(currentDataList, _originalDataList);
            }
            return true;
        }
        string _serviceDefinitionXamlCache = "";
        string _resourceDefinitionXamlCache = "";
        bool _serviceAndResourceDefinitionXamlSameCache;
        bool CheckServiceDefinition()
        {
            if (ServiceDefinition is null || ResourceModel.WorkflowXaml is null)
            {
                return ServiceDefinition == ResourceModel.WorkflowXaml;
            }
            var serviceDefinitionXaml = ServiceDefinition.ToString();
            var resourceDefinitionXaml = ResourceModel.WorkflowXaml.ToString();
            if (serviceDefinitionXaml == _serviceDefinitionXamlCache && resourceDefinitionXaml == _resourceDefinitionXamlCache)
            {
                return _serviceAndResourceDefinitionXamlSameCache;
            }

            _serviceDefinitionXamlCache = serviceDefinitionXaml;
            _resourceDefinitionXamlCache = resourceDefinitionXaml;

            var eq = WorkflowHelper.AreWorkflowsEqual(ServiceDefinition.ToString(), ResourceModel.WorkflowXaml.ToString());
            _serviceAndResourceDefinitionXamlSameCache = eq;
            return eq;
        }
        
        void ProcessDataListOnLoad()
        {
            AddMissingWithNoPopUpAndFindUnusedDataListItemsImpl(true);
        }

        public void DoWorkspaceSave()
        {
            if (ResourceModel != null && ResourceModel.IsNewWorkflow && !_workspaceSave && ResourceModel.Environment.IsConnected)
            {
                _asyncWorker.Start(SaveToWorkspace);
            }
            AddMissingWithNoPopUpAndFindUnusedDataListItemsImpl(false);
        }

        void SaveToWorkspace()
        {
            BindToModel();
            ResourceModel.Environment.ResourceRepository.Save(ResourceModel);
            _workspaceSave = true;
        }
        
        public void UpdateDataList()
        {
            AddMissingWithNoPopUpAndFindUnusedDataListItemsImpl(false);
        }

        public static bool ValidatResourceModel(string dataList)
        {
            try
            {
                if (!string.IsNullOrEmpty(dataList))
                {
                    XElement.Parse(dataList);
                }
            }
            catch (Exception)
            {
                return false;
            }
            return true;
        }

        public void AddMissingWithNoPopUpAndFindUnusedDataListItems()
        {
            UpdateDataList();
        }

        public ModelItem GetModelItem(Guid workSurfaceMappingId, Guid parentID)
        {
            var modelItems = _modelService.Find(_modelService.Root, typeof(IDev2Activity));
            ModelItem selectedModelItem = null;
            foreach (var mi in modelItems)
            {
                var instanceID = ModelItemUtils.GetUniqueID(mi);
                if (instanceID == workSurfaceMappingId || instanceID == parentID)
                {
                    selectedModelItem = mi;
                    break;
                }
            }
            return selectedModelItem;
        }

        void AddMissingWithNoPopUpAndFindUnusedDataListItemsImpl(bool isLoadEvent)
        {
            if (DataListViewModel != null)
            {
                if (Application.Current != null && Application.Current.Dispatcher != null)
                {
                    Application.Current.Dispatcher.BeginInvoke(new System.Action(() =>
                    {
                        UpdateDataListWithMissingParts(isLoadEvent);
                    }), DispatcherPriority.Background);
                }
                else
                {
                    UpdateDataListWithMissingParts(isLoadEvent);
                }
            }
        }

        void UpdateDataListWithMissingParts(bool isLoadEvent)
        {
            var workSurfaceKey = WorkSurfaceKeyFactory.CreateKey(ResourceModel);
            if (OpeningWorkflowsHelper.IsWorkflowWaitingforDesignerLoad(workSurfaceKey) && !isLoadEvent)
            {
                OpeningWorkflowsHelper.RemoveWorkflowWaitingForDesignerLoad(workSurfaceKey);
            }

            var workflowFields = BuildWorkflowFields();
            DataListViewModel?.UpdateDataListItems(ResourceModel, workflowFields);
        }

        void ViewPreviewMouseDown(object sender, MouseButtonEventArgs e) => e.Handled = HandleMouseClick(e.LeftButton, e.ClickCount, e.OriginalSource as DependencyObject, e.Source as DesignerView);
        
        bool HandleMouseClick(MouseButtonState leftButtonState, int clickCount, DependencyObject dp, DesignerView designerView)
        {
            if (HandleDoubleClick(leftButtonState, clickCount, dp, designerView))
            {
                return true;
            }

            if (Application.Current != null && Application.Current.Dispatcher != null && Application.Current.Dispatcher.CheckAccess() && Application.Current.MainWindow != null)
            {
                var mvm = Application.Current.MainWindow.DataContext as ShellViewModel;
                if (mvm?.ActiveItem != null)
                {
                    mvm.RefreshActiveServer();
                }
            }

            if (dp is Border border && border.DataContext is GateDesignerViewModel gateDesignerViewModel)
            {
                gateDesignerViewModel.ClearGates();
                string uniqueId = gateDesignerViewModel.ModelItem.Properties["UniqueID"].ComputedValue.ToString();
                var gates = GetSelectableGates(uniqueId);
                gateDesignerViewModel.Gates = gates;
            }

            var dp1 = dp as Run;
            if (dp1?.Parent is TextBlock && dp1.DataContext.GetType().Name.Contains("FlowchartDesigner"))
            {
                var selectedModelItem = _modelService.Find(_modelService.Root, typeof(Flowchart)).FirstOrDefault();
                if (selectedModelItem != null)
                {
                    SelectSingleModelItem(selectedModelItem);
                }
                return true;
            }

            if (dp is TextBlock dp2 && dp2.DataContext.GetType().Name.Contains("FlowchartDesigner"))
            {
                var selectedModelItem = _modelService.Find(_modelService.Root, typeof(Flowchart)).FirstOrDefault();
                if (selectedModelItem != null)
                {
                    SelectSingleModelItem(selectedModelItem);
                }
                return true;
            }

            return false;
        }
        
        bool HandleDoubleClick(MouseButtonState leftButtonState, int clickCount, DependencyObject dp, DesignerView designerView)
        {
            if (leftButtonState == MouseButtonState.Pressed && clickCount == 2)
            {
                if (designerView != null && designerView.FocusedViewElement == null)
                {
                    return true;
                }

                if (SelectedModelItem is ModelItem item && item.ItemType == typeof(Flowchart))
                {
                    return true;
                }

                HandleDependencyObject(dp, item);
            }
            return false;
        }
        
        void HandleDependencyObject(DependencyObject dp, ModelItem item)
        {
            if (item != null)
            {
                var itemFn = item.ItemType.FullName;

                if (dp != null && string.Equals(dp.ToString(), "Microsoft.Windows.Themes.ScrollChrome", StringComparison.InvariantCulture))
                {
                    WizardEngineAttachedProperties.SetDontOpenWizard(dp, true);
                }

                // Handle Case Edits
                if (itemFn.StartsWith("System.Activities.Core.Presentation.FlowSwitchCaseLink", StringComparison.Ordinal) &&
                    !itemFn.StartsWith("System.Activities.Core.Presentation.FlowSwitchDefaultLink", StringComparison.Ordinal))
                {
                    if (dp != null && !WizardEngineAttachedProperties.GetDontOpenWizard(dp))
                    {
                        FlowController.TryEditSwitchCaseExpression(new EditCaseExpressionMessage
                        {
                            ModelItem = item,
                            Server = _resourceModel.Environment
                        });
                    }
                }

                // Handle Switch Edits
                if (dp != null && !WizardEngineAttachedProperties.GetDontOpenWizard(dp) &&
                    item.ItemType == typeof(FlowSwitch<string>))
                {
                    _expressionString =
                        FlowController.ConfigureSwitchExpression(new ConfigureSwitchExpressionMessage
                        {
                            ModelItem = item,
                            Server = _resourceModel.Environment
                        });
                    AddMissingWithNoPopUpAndFindUnusedDataListItemsImpl(false);
                }

                //// Handle Decision Edits
                if (dp != null && !WizardEngineAttachedProperties.GetDontOpenWizard(dp) &&
                    item.ItemType == typeof(FlowDecision))
                {
                    _expressionString =
                        FlowController.ConfigureDecisionExpression(new ConfigureDecisionExpressionMessage
                        {
                            ModelItem = item,
                            Server = _resourceModel.Environment
                        });
                    AddMissingWithNoPopUpAndFindUnusedDataListItemsImpl(false);
                }
            }
        }
        
        static IResourcePickerDialog CreateResourcePickerDialog(enDsfActivityType activityType)
        {
            var server = CustomContainer.Get<IServerRepository>().ActiveServer;

            if (server.Permissions == null)
            {
                server.Permissions = new List<IWindowsGroupPermission>();
                server.Permissions.AddRange(server.AuthorizationService.SecurityService.Permissions);
            }
            var env = new EnvironmentViewModel(server, CustomContainer.Get<IShellViewModel>(), true);
            var res = new ResourcePickerDialog(activityType, env);
            ResourcePickerDialog.CreateAsync(activityType, env);
            return res;
        }
        
        void ViewPreviewDrop(object sender, DragEventArgs e)
        {
            SetLastDroppedPoint(e);
            var dataObject = e.Data;
            e.Handled = ApplyForDrop(dataObject);
        }

        protected bool ApplyForDrop(IDataObject dataObject)
        {
            var handled = false;
            if (dataObject != null)
            {
                DataObject = dataObject.GetData(typeof(ExplorerItemViewModel));
                if (DataObject != null)
                {
                    IsItemDragged.Instance.IsDragged = true;
                }

                if (dataObject.GetData("WorkflowItemTypeNameFormat") is string isWorkflow)
                {
                    handled = WorkflowDropFromResourceToolboxItem(dataObject, isWorkflow, true, false);
                    ApplyIsDraggedInstance(isWorkflow);
                }
                else
                {
                    IsItemDragged.Instance.IsDragged = false;
                }
            }
            return handled;
        }

        static void ApplyIsDraggedInstance(string isWorkflow)
        {
            IsItemDragged.Instance.IsDragged |= isWorkflow.Contains("DsfSqlServerDatabaseActivity") || isWorkflow.Contains("DsfMySqlDatabaseActivity");
            IsItemDragged.Instance.IsDragged |= isWorkflow.Contains("DsfODBCDatabaseActivity") || isWorkflow.Contains("DsfOracleDatabaseActivity");
            IsItemDragged.Instance.IsDragged |= isWorkflow.Contains("DsfPostgreSqlActivity") || isWorkflow.Contains("DsfWebDeleteActivity");
            IsItemDragged.Instance.IsDragged |= isWorkflow.Contains("DsfWebGetActivity") || isWorkflow.Contains("WebPostActivity");
            IsItemDragged.Instance.IsDragged |= isWorkflow.Contains("DsfWebPutActivity") || isWorkflow.Contains("DsfComDllActivity");
            IsItemDragged.Instance.IsDragged |= isWorkflow.Contains("DsfEnhancedDotNetDllActivity") || isWorkflow.Contains("DsfWcfEndPointActivity");
            IsItemDragged.Instance.IsDragged |= isWorkflow.Contains("AdvancedRecordsetActivity");
            IsItemDragged.Instance.IsDragged |= isWorkflow.Contains("GateActivity");
        }
        
        bool WorkflowDropFromResourceToolboxItem(IDataObject dataObject, string isWorkflow, bool dropOccured, bool handled)
        {
            var activityType = ResourcePickerDialog.DetermineDropActivityType(isWorkflow);
            if (IsTestView)
            {
                return true;
            }
            if (activityType != enDsfActivityType.All)
            {
                var dialog = CreateResourcePickerDialog(activityType);
                if (dialog.ShowDialog())
                {
                    var res = dialog.SelectedResource;
                    if (res != null)
                    {
                        dataObject.SetData(res);
                        dataObject.SetData(new FromToolBox());
                        DataObject = res;
                    }
                    if (res == null)
                    {
                        dropOccured = false;
                        handled = true;
                    }
                }
                else
                {
                    handled = true;
                    dropOccured = false;
                }
            }
            if (dropOccured)
            {
                _workspaceSave = false;
                ResourceModel.IsWorkflowSaved = false;
                NotifyOfPropertyChange(() => DisplayName);
            }
            return handled;
        }

        // Activity : Next
        // Decision : True, False
        // Switch   : Default, Key
        public static readonly string[] SelfConnectProperties =
        {
            "Next",
            "True",
            "False",
            "Default",
            "Key"
        };

        string _originalDataList;
        bool _workspaceSave;
        WorkflowInputDataViewModel _workflowInputDataViewModel;
        string _workflowLink;
        string _workflowLinkWithWid;
        ICommand _openWorkflowLinkCommand;
        bool _firstWorkflowChange;
        readonly IAsyncWorker _asyncWorker;
        string _expressionString;
        ICommand _debugInputsCommand;
        ICommand _debugStudioCommand;
        ICommand _debugBrowserCommand;
        ICommand _scheduleCommand;
        ICommand _queueEventCommand;
        ICommand _testEditorCommand;
        ICommand _runAllTestsCommand;
        ICommand _duplicateCommand;
        ICommand _deployCommand;
        ICommand _showDependenciesCommand;
        ICommand _viewOpenAPICommand;
        ICommand _copyUrlCommand;
        DebugOutputViewModel _debugOutputViewModel;
        IDataListViewModel _dataListViewModel;
        bool _canDebugInputs;
        bool _canDebugStudio;
        bool _debugBrowser;
        bool _canCreateSchedule;
        bool _canCreateQueueEvent;
        bool _canCreateTest;
        bool _canRunAllTests;
        bool _canDuplicate;
        bool _canDeploy;
        bool _canShowDependencies;
        bool _canViewOpenAPI;
        bool _canCopyUrl;
        string _copyUrlTooltip;
        string _viewOpenAPITooltip;
        string _debugInputsTooltip;
        string _debugStudioTooltip;
        string _debugBrowserTooltip;
        string _scheduleTooltip;
        string _queueEventTooltip;
        string _createTestTooltip;
        string _runAllTestsTooltip;
        string _runCoverageTooltip;
        string _duplicateTooltip;
        string _deployTooltip;
        string _showDependenciesTooltip;
        ICommand _newServiceCommand;
        ModelItem _selectedItem;
        IEnumerable<ModelItem> _modelItems;
        IEnumerable<ModelItem> _activityCollection;
        ICommand _mergeCommand;
        bool _canMerge;
        string _mergeTooltip;
       
        protected void ModelServiceModelChanged(object sender, ModelChangedEventArgs e)
        {
            if (e.ModelChangeInfo != null &&
                e.ModelChangeInfo.ModelChangeType == ModelChangeType.PropertyChanged)
            {
                if (SelfConnectProperties.Contains(e.ModelChangeInfo.PropertyName))
                {
                    if (e.ModelChangeInfo.Subject == e.ModelChangeInfo.Value)
                    {
                        var modelProperty = e.ModelChangeInfo.Value.Properties[e.ModelChangeInfo.PropertyName];
                        modelProperty?.ClearValue();
                    }
                    return;
                }
                if (e.ModelChangeInfo.PropertyName == "StartNode")
                {
                    if (e.ModelChangeInfo.OldValue != null)
                    {
                        // incase of delete it will have old value then log
                        IsStartNodeErrorMessageSet = false;
                    }
                    return;
                }

                if (e.ModelChangeInfo.PropertyName == "Handler")
                {
                    if (DataObject != null)
                    {
                        ModelItemPropertyChanged(e);
                    }
                }
            }

            if (e.ModelChangeInfo != null && e.ModelChangeInfo.ModelChangeType == ModelChangeType.CollectionItemAdded)
            {
                PerformAddItems(e.ModelChangeInfo.Value);
            }

            if (e.ModelChangeInfo != null && e.ModelChangeInfo.ModelChangeType == ModelChangeType.PropertyChanged
                && (e.ModelChangeInfo.Value?.Source?.ComputedValue?.GetType() == typeof(DsfFlowDecisionActivity)
                || e.ModelChangeInfo.Value?.Source?.ComputedValue?.GetType() == typeof(DsfFlowSwitchActivity)))
            {
                PerformAddItems(e.ModelChangeInfo.Value);
            }
            WorkflowChanged?.Invoke();
        }

        void ModelItemPropertyChanged(ModelChangedEventArgs e)
        {
            Guid? envID = null;
            Guid? resourceID = null;
            if (DataObject is IExplorerItemViewModel explorerItem)
            {
                if (explorerItem.Server != null)
                {
                    envID = explorerItem.Server.EnvironmentID;
                }

                resourceID = explorerItem.ResourceId;
            }

            var modelProperty = e.ModelChangeInfo.Subject.Content;

            if (envID != null && modelProperty != null)
            {
                var server = CustomContainer.Get<IServerRepository>().FindSingle(c => c.EnvironmentID == envID);
                var resource = server?.ResourceRepository.LoadContextualResourceModel(resourceID.Value);
                if (resource != null)
                {
                    var d = DsfActivityFactory.CreateDsfActivity(resource, null, true, CustomContainer.Get<IServerRepository>(), _resourceModel.Environment.IsLocalHostCheck());
                    d.ServiceName = d.DisplayName = d.ToolboxFriendlyName = resource.Category;
                    UpdateForRemote(d, resource);
                    modelProperty.SetValue(d);
                }
            }
            DataObject = null;
            WorkflowChanged?.Invoke();
        }

        void UpdateForRemote(DsfActivity d, IContextualResourceModel resource)
        {
            if (Application.Current != null && Application.Current.Dispatcher.CheckAccess() && Application.Current.MainWindow != null)
            {
                dynamic mvm = Application.Current.MainWindow.DataContext;
                if (mvm?.ActiveItem != null)
                {
                    WorkflowDesignerUtils.CheckIfRemoteWorkflowAndSetProperties(d, resource, mvm.ActiveItem.Environment);
                }
            }
            else
            {
                if (ActiveEnvironment != null)
                {
                    WorkflowDesignerUtils.CheckIfRemoteWorkflowAndSetProperties(d, resource, ActiveEnvironment);
                }
            }
        }

        protected IServer ActiveEnvironment { get; set; }

        void CanExecuteRoutedEventHandler(object sender, CanExecuteRoutedEventArgs e)
        {
            if (e.Command.Equals(ApplicationCommands.Delete) ||      //triggered from deleting an activity
                e.Command.Equals(EditingCommands.Delete) ||          //triggered from editing displayname, expressions, etc
                e.Command.Equals(System.Activities.Presentation.View.DesignerView.CopyCommand) ||
                e.Command.Equals(System.Activities.Presentation.View.DesignerView.CutCommand))
            {
                PreventCommandFromBeingExecuted(e);
            }
        }

        void PreviewExecutedRoutedEventHandler(object sender, ExecutedRoutedEventArgs e)
        {
            if (e.Command.Equals(ApplicationCommands.Delete))
            {
                _wd?.View?.MoveFocus(new TraversalRequest(FocusNavigationDirection.First));
            }
            
            if (!Handle(e))
            {
                BuildWorkflowFields();
            }
        }

        bool Handle(ExecutedRoutedEventArgs e)
        {
            var Handled = false;
            if (e.Command.Equals(System.Activities.Presentation.View.DesignerView.PasteCommand))
            {
                _isPaste = true;
                var dataObject = Clipboard.GetDataObject();
                if (dataObject != null)
                {
                    var dataPresent = dataObject.GetDataPresent("WorkflowXamlFormat");
                    if (dataPresent)
                    {
                        Handled = Handle(e, dataObject);
                    }
                }
            }
            return Handled;
        }

        bool Handle(ExecutedRoutedEventArgs e, IDataObject dataObject)
        {
            var data = dataObject.GetData("WorkflowXamlFormat") as string;
            if (!string.IsNullOrEmpty(data))
            {
                var indexOf = data.IndexOf("ResourceID=", StringComparison.InvariantCultureIgnoreCase);
                var guid = data.Substring(indexOf + 12, 36);
                if (guid.Equals(ResourceModel.ID.ToString(), StringComparison.InvariantCultureIgnoreCase))
                {
                    e.Handled = true;
                }
            }
            return e.Handled;
        }

        protected override void OnDispose()
        {
            if (_wd != null)
            {
                _wd.ModelChanged -= WdOnModelChanged;
                _wd.Context.Services.Unsubscribe<ModelService>(ModelServiceSubscribe);

                _wd.View.PreviewDrop -= ViewPreviewDrop;

                _wd.View.PreviewMouseDown -= ViewPreviewMouseDown;

                _wd.Context.Services.Unsubscribe<DesignerView>(DesigenrViewSubscribe);
                _virtualizedContainerService = null;
                _virtualizedContainerServicePopulateAllMethod = null;
            }

            _designerManagementService?.Dispose();
            _debugSelectionChangedService?.Unsubscribe();

            if (_resourceModel != null)
            {
                _resourceModel.OnDataListChanged -= FireWdChanged;
                _resourceModel.OnResourceSaved -= UpdateOriginalDataList;
            }

            if (_modelService != null)
            {
                _modelService.ModelChanged -= ModelServiceModelChanged;
            }

            if (_uniqueWorkflowParts != null)
            {
                _uniqueWorkflowParts.Clear();
                _uniqueWorkflowParts = null;
            }
            
            if (ResourceModel != null)
            {
                var workSurfaceKey = WorkSurfaceKeyFactory.CreateKey(ResourceModel);
                OpeningWorkflowsHelper.PruneWorkflowFromCaches(workSurfaceKey);
            }
            if (_workflowInputDataViewModel != null)
            {
                _workflowInputDataViewModel.Dispose();
                _workflowInputDataViewModel = null;
            }
            try
            {
                CEventHelper.RemoveAllEventHandlers(_wd);
            }
            catch (Exception e)
            {
                Dev2Logger.Warn("Error disposing Workflow Designer View Model: " + e.Message, GlobalConstants.WarewolfWarn);
            }

            _debugSelectionChangedService?.Unsubscribe();
            base.OnDispose();
        }

        public override WorkSurfaceContext WorkSurfaceContext => ResourceModel?.ResourceType.ToWorkSurfaceContext() ?? WorkSurfaceContext.Unknown;

        public IServer Server => ResourceModel.Environment;

        protected List<ModelItem> SelectedDebugItems => _selectedDebugItems;

        public ModelItem SelectedItem
        {
            get => _selectedItem;
            set => _selectedItem = value;
        }

        public bool WorkspaceSave => _workspaceSave;

        public void Handle(EditActivityMessage message)
        {
            Dev2Logger.Info(message.GetType().Name, "Warewolf Info");
            EditActivity(message.ModelItem, message.ParentEnvironmentID);
        }

        void FireWdChanged()
        {
            WdOnModelChanged(new object(), new EventArgs());
            UpdateWorkflowLink();
        }

        public void Handle(SaveUnsavedWorkflowMessage message)
        {
            if (message?.ResourceModel == null || string.IsNullOrEmpty(message.ResourceName) || message.ResourceModel.ID != ResourceModel.ID)
            {
                return;
            }

            var resourceModel = message.ResourceModel;
            WorkspaceItemRepository.Instance.Remove(resourceModel);
            var unsavedName = resourceModel.ResourceName;
            UpdateResourceModel(message, resourceModel, unsavedName);
            PublishMessages(resourceModel);
            DisposeDesigner();

            if (message.KeepTabOpen)
            {
                ActivityDesignerHelper.AddDesignerAttributes(this);
                UpdateWorkflowInputDataViewModel(_resourceModel);

                DisplayWorkflowLink = GetAndUpdateWorkflowLinkWithWorkspaceID();
                NotifyOfPropertyChange(nameof(DisplayWorkflowLink));
                NotifyOfPropertyChange(nameof(DesignerView));
            }
            RemoveUnsavedWorkflowName(unsavedName);
        }

        public void UpdateWorkflowInputDataViewModel(IContextualResourceModel resourceModel)
        {
            _workflowInputDataViewModel = WorkflowInputDataViewModel.Create(_resourceModel);
            _workflowInputDataViewModel.LoadWorkflowInputs();
        }

        internal void RemoveUnsavedWorkflowName(string unsavedName) => NewWorkflowNames.Instance.Remove(unsavedName);
        internal void RemoveAllWorkflowName(string unsavedName) => NewWorkflowNames.Instance.RemoveAll(unsavedName);

        void DisposeDesigner()
        {
            if (_wd != null)
            {
                _wd.ModelChanged -= WdOnModelChanged;
                _wd.Context.Services.Unsubscribe<ModelService>(ModelServiceSubscribe);

                _wd.View.PreviewDrop -= ViewPreviewDrop;
                _wd.View.PreviewMouseDown -= ViewPreviewMouseDown;

                _wd.Context.Services.Unsubscribe<DesignerView>(DesigenrViewSubscribe);
                _virtualizedContainerService = null;
                _virtualizedContainerServicePopulateAllMethod = null;
            }

            _designerManagementService?.Dispose();
            if (_modelService != null)
            {
                _modelService.ModelChanged -= ModelServiceModelChanged;
            }
            _debugSelectionChangedService?.Unsubscribe();
        }

        void PublishMessages(IContextualResourceModel resourceModel)
        {
            UpdateResource(resourceModel);
            Dev2Logger.Info("Publish message of type - " + typeof(UpdateResourceMessage), "Warewolf Info");
            EventPublisher.Publish(new UpdateResourceMessage(resourceModel));
        }

        void UpdateResource(IContextualResourceModel resourceModel)
        {
            if (ContexttualResourceModelEqualityComparer.Current.Equals(resourceModel, _resourceModel))
            {
                IObservableReadOnlyList<IErrorInfo> currentErrors = null;
                if (resourceModel.Errors != null && resourceModel.Errors.Count > 0)
                {
                    currentErrors = resourceModel.Errors;
                }
                _resourceModel.Update(resourceModel);
                if (currentErrors != null && currentErrors.Count > 0)
                {
                    foreach (var currentError in currentErrors)
                    {
                        _resourceModel.AddError(currentError);
                    }
                }
            }
        }

        void UpdateResourceModel(SaveUnsavedWorkflowMessage message, IContextualResourceModel resourceModel, string unsavedName)
        {
            resourceModel.ResourceName = message.ResourceName;
            resourceModel.DisplayName = message.ResourceName;
            resourceModel.Category = message.ResourceCategory;
            resourceModel.WorkflowXaml = ServiceDefinition?.Replace(unsavedName, message.ResourceName);
            resourceModel.IsNewWorkflow = false;
            var saveResult = resourceModel.Environment.ResourceRepository.SaveToServer(resourceModel);
            var mainViewModel = CustomContainer.Get<IShellViewModel>();
            var environmentViewModel = mainViewModel?.ExplorerViewModel?.Environments.FirstOrDefault(model => model.Server.EnvironmentID == resourceModel.Environment.EnvironmentID);
            if (environmentViewModel != null)
            {
                var item = environmentViewModel.FindByPath(resourceModel.GetSavePath());
                var savedItem = environmentViewModel?.CreateExplorerItemFromResource(environmentViewModel.Server, item, false, false, resourceModel);
                item.AddChild(savedItem);
            }
            resourceModel.IsWorkflowSaved = true;
            DeleteOldResourceAfterSucessfulSave(message, saveResult);
        }

        public void DeleteOldResourceAfterSucessfulSave(SaveUnsavedWorkflowMessage message, ExecuteMessage saveResult)
        {
            if (!saveResult.HasError
                && saveResult.Message.Contains("Added")
                && !message.ResourceLoadingFromServer
                && !string.IsNullOrEmpty(message.OriginalPath))
            {
                try
                {
                    File.Delete(message.OriginalPath);
                }
                catch (Exception)
                {
                    Dev2Logger.Error("Resource from " + message.OriginalPath + " could not be Deleted", "Warewolf Error");
                }
            }
        }

        protected bool _isPaste;
        private IShellViewModel _shellViewModel;

        public System.Action WorkflowChanged { get; set; }
    }
}
---- Semantic diagnostics *before* transformation ----

---- Semantic diagnostics *after* transformation ----
D:\a\1\s\Dev\Dev2.Studio\ViewModels\Workflow\WorkflowDesignerViewModel.cs(1241,20): error CS0165: Use of unassigned local variable 'innerAct',D:\a\1\s\Dev\Dev2.Studio\ViewModels\Workflow\WorkflowDesignerViewModel.cs(2310,44): error CS0165: Use of unassigned local variable 'item'
######################################################################


######################################################################
Nr: 6 - UsePatternMatchingRewriterR8
Filepath: D:\a\1\s\Dev\Dev2.Studio\Views\ShellView.xaml.cs
Description: Error: The created Syntax Tree is semantically incorrect.
------------------------------------------------------------------------
---- Original Tree ----
using System;
using System.ComponentModel;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Runtime.InteropServices;
using System.Windows;
using System.Windows.Data;
using System.Windows.Forms;
using System.Windows.Input;
using System.Windows.Media.Animation;
using System.Xml;
using Dev2.Common;
using Dev2.Triggers.Scheduler;
using Dev2.Studio.ViewModels;
using FontAwesome.WPF;
using Infragistics.Windows.DockManager.Events;
using WinInterop = System.Windows.Interop;
using Dev2.Studio.Core;
using Dev2.Studio.ViewModels.Workflow;
using Dev2.Studio.ViewModels.WorkSurface;
using Dev2.ViewModels;
using Dev2.Workspaces;
using Infragistics.Windows.DockManager;
using Dev2.Triggers.Scheduler;

namespace Dev2.Studio.Views
{
    public partial class ShellView : IWin32Window
    {
        static bool _isSuperMaximising;
        bool _isLocked;
        readonly string _savedLayout;
        static ShellView _this;

        #region Constructor

        public static ShellView GetInstance() => _this;

        public ShellView()
        {
            InitializeComponent();
            _isLocked = true;
            HideFullScreenPanel.IsHitTestVisible = false;
            ShowFullScreenPanel.IsHitTestVisible = false;
            Loaded += OnLoaded;
            KeyDown += Shell_KeyDown;
            SourceInitialized += WinSourceInitialized;

            if (File.Exists(FilePath))
            {
                GetFilePath();
                using (FileStream fs = new FileStream(FilePath, FileMode.Open, FileAccess.Read))
                {
                    var streamReader = new StreamReader(fs);
                    _savedLayout = streamReader.ReadToEnd();
                }
                if (!string.IsNullOrEmpty(_savedLayout))
                {
                    try
                    {
                        DockManager.LoadLayout(_savedLayout);
                    }
                    catch (Exception err)
                    {
                        _savedLayout = null;
                        File.Delete(FilePath);
                        Dev2Logger.Error("Unable to load layout", GlobalConstants.WarewolfError);
                        Dev2Logger.Error(err, GlobalConstants.WarewolfError);
                    }
                }
            }

#pragma warning disable S3010 // For testing (Studio reset shortcut)
            _this = this;
#pragma warning restore S3010
        }

        string FilePath => Path.Combine(new[]
        {
            Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData),
            StringResources.App_Data_Directory,
            StringResources.User_Interface_Layouts_Directory,
            "WorkspaceLayout.xml"
        });

        void GetFilePath()
        {
            if (!File.Exists(FilePath))
            {
                var fileInfo = new FileInfo(FilePath);
                if (fileInfo.Directory != null)
                {
                    var finalDirectoryPath = fileInfo.Directory.FullName;

                    if (!Directory.Exists(finalDirectoryPath))
                    {
                        Directory.CreateDirectory(finalDirectoryPath);
                    }
                }
            }
        }

        #endregion Constructor

        void WinSourceInitialized(object sender, EventArgs e)
        {
            Maximise();
        }

        void Maximise()
        {
            var handle = new WinInterop.WindowInteropHelper(this).Handle;
            var handleSource = WinInterop.HwndSource.FromHwnd(handle);
            handleSource?.AddHook(WindowProc);
        }

        static IntPtr WindowProc(IntPtr hwnd, int msg, IntPtr wParam, IntPtr lParam, ref bool handled)
        {
            if (msg == 0x0024 && !_isSuperMaximising)
            {
                WmGetMinMaxInfo(hwnd, lParam);
                handled = true;
            }
            return (IntPtr)0;
        }

        static void WmGetMinMaxInfo(IntPtr hwnd, IntPtr lParam)
        {
            var mmi = (Minmaxinfo)Marshal.PtrToStructure(lParam, typeof(Minmaxinfo));

            // Adjust the maximized size and position to fit the work area of the correct monitor
            var currentScreen = Screen.FromHandle(hwnd);
            var workArea = currentScreen.WorkingArea;
            var monitorArea = currentScreen.Bounds;
            mmi.ptMaxPosition.x = Math.Abs(workArea.Left - monitorArea.Left);
            mmi.ptMaxPosition.y = Math.Abs(workArea.Top - monitorArea.Top);
            mmi.ptMaxSize.x = Math.Abs(workArea.Right - workArea.Left);
            mmi.ptMaxSize.y = Math.Abs(workArea.Bottom - workArea.Top);

            Marshal.StructureToPtr(mmi, lParam, true);
        }

        [StructLayout(LayoutKind.Sequential)]

        public struct Minmaxinfo
        {
            public Point ptReserved;
            public Point ptMaxSize;
            public Point ptMaxPosition;
            public Point ptMinTrackSize;
            public Point ptMaxTrackSize;
        };

        [StructLayout(LayoutKind.Sequential)]
        public struct Point
        {
            /// <summary>
            /// x coordinate of point.
            /// </summary>
            public int x;

            /// <summary>
            /// y coordinate of point.
            /// </summary>
            public int y;

            /// <summary>
            /// Construct a point of coordinates (x,y).
            /// </summary>
            public Point(int x, int y)
            {
                this.x = x;
                this.y = y;
            }
        }

        void Shell_KeyDown(object sender, System.Windows.Input.KeyEventArgs e)
        {
            if ((Keyboard.Modifiers == (ModifierKeys.Alt | ModifierKeys.Control)) && (e.Key == Key.F4))
            {
                ResetToStartupView();
            }
            if (e.Key == Key.Home && (Keyboard.Modifiers & ModifierKeys.Control) == ModifierKeys.Control)
            {
                var shellViewModel = DataContext as ShellViewModel;
                shellViewModel?.MergeCommand.Execute(null);
            }
            if (e.Key == Key.F1)
            {
                Process.Start(Warewolf.Studio.Resources.Languages.HelpText.WarewolfHelpURL);
            }
            if (e.Key == Key.F11 && _isLocked)
            {
                if (_isSuperMaximising)
                {
                    HideFullScreenPanel.IsHitTestVisible = false;
                    ShowFullScreenPanel.IsHitTestVisible = false;
                    ExitSuperMaximisedMode();
                }
                else
                {
                    HideFullScreenPanel.IsHitTestVisible = true;
                    ShowFullScreenPanel.IsHitTestVisible = true;
                    EnterSuperMaximisedMode();
                }
            }
        }

        public void ResetToStartupView()
        {
            if (DataContext is ShellViewModel mainViewModel)
            {
                ClearWindowCollection(mainViewModel);
                ClearTabItems(mainViewModel);

                var localhostServer = mainViewModel.LocalhostServer;
                if (localhostServer.IsConnected && !Equals(mainViewModel.ActiveServer, localhostServer))
                {
                    mainViewModel.SetActiveServer(localhostServer.EnvironmentID);
                    mainViewModel.SetActiveServer(localhostServer);
                }

                var explorerViewModel = mainViewModel.ExplorerViewModel;
                if (explorerViewModel != null)
                {
                    DisconnectAllServers(localhostServer, explorerViewModel);
                }

                if (mainViewModel.ToolboxViewModel != null)
                {
                    mainViewModel.ToolboxViewModel.SearchTerm = string.Empty;
                    Toolbox.Activate();
                    Toolboxcontrol.Focus();
                }
            }
        }

        static void DisconnectAllServers(Interfaces.IServer localhostServer, Interfaces.IExplorerViewModel explorerViewModel)
        {
            explorerViewModel.SearchText = string.Empty;

            DisconnectServers(localhostServer, explorerViewModel);

            var environmentViewModels = explorerViewModel.Environments;
            if (environmentViewModels?.Count > 1)
            {
                for (var i = 0; i < environmentViewModels.Count - 1; i++)
                {
                    var remoteEnvironment = environmentViewModels.FirstOrDefault(model => model.ResourceId != Guid.Empty);
                    environmentViewModels.Remove(remoteEnvironment);
                }
            }
        }

        static void DisconnectServers(Interfaces.IServer localhostServer, Interfaces.IExplorerViewModel explorerViewModel)
        {
            if (explorerViewModel.ConnectControlViewModel != null)
            {
                foreach (var server in explorerViewModel.ConnectControlViewModel.Servers)
                {
                    if (server != null && server.DisplayName != localhostServer.DisplayName && server.IsConnected)
                    {
                        server.Disconnect();
                    }
                }
            }
        }

        void ClearTabItems(ShellViewModel mainViewModel)
        {
            for (int i = TabManager.Items.Count - 1; i >= 0; i--)
            {
                var item = TabManager.Items[i];
                var contentPane = item as ContentPane;
                RemoveWorkspaceItems(contentPane, mainViewModel);
            }
            TabManager.Items.Clear();
        }

        static void ClearWindowCollection(ShellViewModel mainViewModel)
        {
            var windowCollection = System.Windows.Application.Current.Windows;
            foreach (var window in windowCollection)
            {
                if (window is Window window1 && window1.Name != "MainViewWindow")
                {
                    if (window1.GetType().Name == "ToolWindowHostWindow")
                    {
                        ClearWindowCollection(mainViewModel, window1);
                    }
                    window1.Close();
                }
            }
        }

        static void ClearWindowCollection(ShellViewModel mainViewModel, Window window1)
        {
            var contentPane = window1.Content as PaneToolWindow;
            foreach (var item in contentPane?.Pane?.Panes)
            {
                var pane = item as ContentPane;
                RemoveWorkspaceItems(pane, mainViewModel);
            }
        }

        static void RemoveWorkspaceItems(ContentPane pane, ShellViewModel shellViewModel)
        {
            var item1 = pane?.Content as WorkflowDesignerViewModel;
            if (item1?.ResourceModel != null)
            {
                WorkspaceItemRepository.Instance.ClearWorkspaceItems(item1.ResourceModel);
            }
            item1?.RemoveAllWorkflowName(item1.DisplayName);

            var workSurfaceContextViewModel = pane?.DataContext as WorkSurfaceContextViewModel;
            shellViewModel?.Items.Remove(workSurfaceContextViewModel);
        }

        void OnLoaded(object sender, RoutedEventArgs e)
        {
            var xmlDocument = new XmlDocument();
            if (_savedLayout != null)
            {
                try
                {
                    xmlDocument.LoadXml(_savedLayout);
                }
                catch (Exception err)
                {
                    File.Delete(FilePath);
                    Dev2Logger.Error("Unable to load layout", GlobalConstants.WarewolfError);
                    Dev2Logger.Error(err, GlobalConstants.WarewolfError);
                }
            }
            if (DataContext is ShellViewModel shellViewModel)
            {
                SetMenuExpanded(xmlDocument, shellViewModel);
                SetMenuPanelOpen(xmlDocument, shellViewModel);
                SetMenuPanelLockedOpen(xmlDocument, shellViewModel);
            }
            Toolbox.Activate();
            Toolboxcontrol.Focus();
        }

        static void SetMenuExpanded(XmlDocument xmlDocument, ShellViewModel shellViewModel)
        {
            var elementsByTagNameMenuExpanded = xmlDocument.GetElementsByTagName("MenuExpanded");
            if (elementsByTagNameMenuExpanded.Count > 0)
            {
                var menuExpandedString = elementsByTagNameMenuExpanded[0].InnerXml;

                if (bool.TryParse(menuExpandedString, out bool menuExpanded))
                {
                    shellViewModel.MenuExpanded = menuExpanded;
                }
            }
            else
            {
                shellViewModel.MenuExpanded = true;
            }
        }

        static void SetMenuPanelOpen(XmlDocument xmlDocument, ShellViewModel shellViewModel)
        {
            var elementsByTagNameMenuPanelOpen = xmlDocument.GetElementsByTagName("MenuPanelOpen");
            if (elementsByTagNameMenuPanelOpen.Count > 0)
            {
                var menuPanelOpenString = elementsByTagNameMenuPanelOpen[0].InnerXml;

                if (bool.TryParse(menuPanelOpenString, out bool panelOpen))
                {
                    shellViewModel.MenuViewModel.IsPanelOpen = panelOpen;
                }
            }
        }

        static void SetMenuPanelLockedOpen(XmlDocument xmlDocument, ShellViewModel shellViewModel)
        {
            var elementsByTagNameMenuPanelLockedOpen = xmlDocument.GetElementsByTagName("MenuPanelLockedOpen");
            if (elementsByTagNameMenuPanelLockedOpen.Count > 0)
            {
                var menuPanelLockedOpenString = elementsByTagNameMenuPanelLockedOpen[0].InnerXml;

                if (bool.TryParse(menuPanelLockedOpenString, out bool panelLockedOpen))
                {
                    shellViewModel.MenuViewModel.IsPanelLockedOpen = panelLockedOpen;
                }
            }
            else
            {
                shellViewModel.MenuViewModel.IsPanelLockedOpen = false;
            }
        }

        #region Implementation of IWin32Window

        public IntPtr Handle
        {
            get
            {
                var interopHelper = new WinInterop.WindowInteropHelper(this);
                return interopHelper.Handle;
            }
        }

        #endregion

        void MainView_OnClosing(object sender, CancelEventArgs e)
        {
            var shellViewModel = DataContext as ShellViewModel;
            if (shellViewModel != null)
            {
                if (!shellViewModel.OnStudioClosing())
                {
                    e.Cancel = true;
                }

                if (ShellViewModel.IsDownloading())
                {
                    e.Cancel = true;
                }
            }
            GetFilePath();
            SaveLayout(shellViewModel);
        }

        void SaveLayout(ShellViewModel shellViewModel)
        {
            var dockManagerLayout = DockManager.SaveLayout();
            var document = new XmlDocument();
            document.LoadXml(dockManagerLayout);
            var menuExpandedNode = document.CreateNode(XmlNodeType.Element, "MenuExpanded", document.NamespaceURI);
            menuExpandedNode.InnerXml = (shellViewModel != null && shellViewModel.MenuExpanded).ToString();

            var menuPanelOpenNode = document.CreateNode(XmlNodeType.Element, "MenuPanelOpen", document.NamespaceURI);
            menuPanelOpenNode.InnerXml = (shellViewModel != null && shellViewModel.MenuViewModel.IsPanelOpen).ToString();

            var menuPanelLockedOpenNode = document.CreateNode(XmlNodeType.Element, "MenuPanelLockedOpen", document.NamespaceURI);
            menuPanelLockedOpenNode.InnerXml =
                (shellViewModel != null && shellViewModel.MenuViewModel.IsPanelLockedOpen).ToString();

            if (document.DocumentElement != null)
            {
                document.DocumentElement.AppendChild(menuExpandedNode);
                document.DocumentElement.AppendChild(menuPanelOpenNode);
                document.DocumentElement.AppendChild(menuPanelLockedOpenNode);
            }
            using (FileStream fs = new FileStream(FilePath, FileMode.Create, FileAccess.Write))
            {
                document.Save(fs);
            }
        }

        void SlidingMenuPane_OnSizeChanged(object sender, SizeChangedEventArgs e)
        {
            if (DataContext is ShellViewModel vm)
            {
                vm.MenuPanelWidth = e.NewSize.Width;
            }
        }

        void TryDockManager_OnToolWindowLoaded(object sender, PaneToolWindowEventArgs e)
        {
            try
            {
                DockManager_OnToolWindowLoaded(sender, e);
            }
            catch (Exception ex)
            {
                Dev2Logger.Error(ex, GlobalConstants.WarewolfError);
            }
        }

        void DockManager_OnToolWindowLoaded(object sender, PaneToolWindowEventArgs e)
        {
            var window = e.Window;
            var resourceDictionary = System.Windows.Application.Current.Resources;
            if (resourceDictionary["WarewolfToolWindow"] is Style style)
            {
                window.UseOSNonClientArea = false;
                window.Style = style;
                window.PreviewMouseLeftButtonUp += WindowOnPreviewMouseDown;
            }

            if (e.Source.GetType() == typeof(XamDockManager))
            {
                var binding = Infragistics.Windows.Utilities.CreateBindingObject(DataContextProperty, BindingMode.OneWay, sender as XamDockManager);
                e.Window.SetBinding(DataContextProperty, binding);

                var shellViewModel = DataContext as ShellViewModel;
                PaneToolWindow = window;

                if (PaneToolWindow.Pane.Panes != null && PaneToolWindow.Pane.Panes.Count > 0)
                {
                    var workSurfaceContextViewModel = PaneToolWindow.Pane.Panes[0].DataContext as WorkSurfaceContextViewModel;
                    shellViewModel?.ActivateItem(workSurfaceContextViewModel);
                    PaneToolWindow.Name = "FloatingWindow";
                    if (string.IsNullOrWhiteSpace(e.Window.Title))
                    {
                        PaneToolWindow.Title = Title;
                    }
                    else
                    {
                        UpdatePaneToolWindow(sender);
                    }
                    if (workSurfaceContextViewModel?.ContextualResourceModel != null)
                    {
                        PaneToolWindow.ToolTip = "Floating window for - " + workSurfaceContextViewModel.ContextualResourceModel.DisplayName;
                    }
                }
            }
        }

        void UpdatePaneToolWindow(object sender)
        {
            var dockManager = sender as XamDockManager;
            var displayName = string.Empty;
            if (dockManager?.DataContext.GetType() == typeof(WorkflowDesignerViewModel))
            {
                var workflowDesignerViewModel = dockManager.DataContext as WorkflowDesignerViewModel;
                displayName = workflowDesignerViewModel?.DisplayName;
            }
            else if (dockManager?.DataContext.GetType() == typeof(StudioTestViewModel))
            {
                var studioTestViewModel = dockManager.DataContext as StudioTestViewModel;
                displayName = studioTestViewModel?.DisplayName;
            }
            else
            {
                if (dockManager?.DataContext.GetType() == typeof(SchedulerViewModel))
                {
                    var schedulerViewModel = dockManager.DataContext as SchedulerViewModel;
                    displayName = schedulerViewModel?.DisplayName;
                }
            }
            SetPaneToolWindowTitle(displayName);
        }

        void SetPaneToolWindowTitle(string displayName)
        {
            var title = PaneToolWindow.Title;
            var newTitle = " - " + displayName?.Replace("*", "").TrimEnd();
            if (!title.Contains(newTitle) && !string.IsNullOrWhiteSpace(displayName))
            {
                PaneToolWindow.Title = PaneToolWindow.Title + " - " + displayName;
            }
        }

        public PaneToolWindow PaneToolWindow { get; set; }

        void WindowOnPreviewMouseDown(object sender, MouseButtonEventArgs e)
        {
            try
            {
                if (DataContext is ShellViewModel shellViewModel)
                {
                    WindowOnPreviewMouseDown(sender, shellViewModel);
                }
            }
            catch (Exception ex)
            {
                Dev2Logger.Error(ex, GlobalConstants.WarewolfError);
            }
        }

        static void WindowOnPreviewMouseDown(object sender, ShellViewModel shellViewModel)
        {
            var paneToolWindow = sender as PaneToolWindow;
            if (paneToolWindow?.Pane?.Panes.Count > 0)
            {
                if (paneToolWindow.Pane.Panes[0] is ContentPane contentPane)
                {
                    var workSurfaceContextViewModel = contentPane.DataContext as WorkSurfaceContextViewModel;
                    shellViewModel.ActivateItem(workSurfaceContextViewModel);
                }
                else
                {
                    var tabGroupPane = paneToolWindow.Pane.Panes[0] as TabGroupPane;
                    if (tabGroupPane?.Items.Count >= 1)
                    {
                        var selectedContent = tabGroupPane.SelectedContent as ContentPane;
                        var workSurfaceContextViewModel = selectedContent?.DataContext as WorkSurfaceContextViewModel;
                        shellViewModel.ActivateItem(workSurfaceContextViewModel);
                    }
                }
            }
        }

        void EnterSuperMaximisedMode()
        {
            _isSuperMaximising = true;
            var dependencyObject = GetTemplateChild("PART_TITLEBAR");
            if (dependencyObject != null)
            {
                dependencyObject.SetValue(VisibilityProperty, Visibility.Collapsed);
                WindowState = WindowState.Normal;
                WindowState = WindowState.Maximized;
            }
        }

        void CloseSuperMaximised(object sender, RoutedEventArgs e)
        {
            ExitSuperMaximisedMode();
        }

        void ExitSuperMaximisedMode()
        {
            DoCloseExitFullScreenPanelAnimation();
            _isSuperMaximising = false;
            var dependencyObject = GetTemplateChild("PART_TITLEBAR");
            if (dependencyObject != null)
            {
                dependencyObject.SetValue(VisibilityProperty, Visibility.Visible);
                WindowState = WindowState.Normal;
                WindowState = WindowState.Maximized;
            }
        }

        void DoCloseExitFullScreenPanelAnimation()
        {
            var storyboard = Resources["AnimateExitFullScreenPanelClose"] as Storyboard;
            storyboard?.Begin();
        }

        void ShowFullScreenPanel_OnMouseEnter(object sender, System.Windows.Input.MouseEventArgs e)
        {
            if (_isSuperMaximising)
            {
                var storyboard = Resources["AnimateExitFullScreenPanelOpen"] as Storyboard;
                storyboard?.Begin();
            }
            if (!_isLocked)
            {
                DoAnimateOpenTitleBar();
            }
        }

        void DoAnimateOpenTitleBar()
        {
            if (Resources["AnimateOpenTitleBorder"] is Storyboard storyboard)
            {
                var titleBar = GetTemplateChild("PART_TITLEBAR");
                storyboard.SetValue(Storyboard.TargetProperty, titleBar);
                storyboard.Begin();
            }
        }

        void HideFullScreenPanel_OnMouseEnter(object sender, System.Windows.Input.MouseEventArgs e)
        {
            if (_isSuperMaximising)
            {
                DoCloseExitFullScreenPanelAnimation();
            }
            if (!_isLocked)
            {
                DoAnimateCloseTitle();
            }
        }

        void DoAnimateCloseTitle()
        {
            if (Resources["AnimateCloseTitleBorder"] is Storyboard storyboard)
            {
                var titleBar = GetTemplateChild("PART_TITLEBAR");
                storyboard.SetValue(Storyboard.TargetProperty, titleBar);
                storyboard.Begin();
            }
        }

        bool restoreIfMove;
        bool allowMaximizeState;

        void PART_TITLEBAR_MouseLeftButtonDown(object sender, MouseButtonEventArgs e)
        {
            if (e.ClickCount == 2)
            {
                SwitchState();
                ResizeMode = WindowState == WindowState.Normal ? ResizeMode.CanResize : ResizeMode.CanMinimize;
            }
            else
            {
                if (WindowState == WindowState.Maximized)
                {
                    restoreIfMove = true;
                }
                DragMove();
            }
        }

        void SwitchState()
        {
            switch (WindowState)
            {
                case WindowState.Normal:
                    {
                        WindowState = WindowState.Maximized;
                        break;
                    }
                case WindowState.Maximized:
                    {
                        WindowState = WindowState.Normal;
                        break;
                    }

                case WindowState.Minimized:
                    break;
                default:
                    WindowState = WindowState.Normal;
                    break;
            }
        }

        void PART_CLOSE_Click(object sender, RoutedEventArgs e)
        {
            Close();
        }

        void PART_MAXIMIZE_RESTORE_Click(object sender, RoutedEventArgs e)
        {
            ToggleWindowState();
        }

        void ToggleWindowState()
        {
            WindowState = WindowState == WindowState.Normal ? WindowState.Maximized : WindowState.Normal;
            ResizeMode = WindowState == WindowState.Normal ? ResizeMode.CanResize : ResizeMode.CanMinimize;
        }

        void PART_MINIMIZE_Click(object sender, RoutedEventArgs e)
        {
            WindowState = WindowState.Minimized;
        }

        void PART_SUPER_MAXIMIZE_RESTORE_Click(object sender, RoutedEventArgs e)
        {
            EnterSuperMaximisedMode();
        }

        void PART_LOCK_Click(object sender, RoutedEventArgs e)
        {
            var dependencyObject = GetTemplateChild("PART_LOCK");
            if (dependencyObject != null)
            {
                var fontAwesome = new FontAwesome.WPF.FontAwesome();
                if (_isLocked)
                {
                    HideFullScreenPanel.IsHitTestVisible = true;
                    ShowFullScreenPanel.IsHitTestVisible = true;
                    fontAwesome.Icon = FontAwesomeIcon.Unlock;
                    DoAnimateCloseTitle();
                }
                else
                {
                    fontAwesome.Icon = FontAwesomeIcon.Lock;
                }
                dependencyObject.SetValue(ContentProperty, fontAwesome);
                _isLocked = !_isLocked;
            }
        }

        void PART_TITLEBAR_OnMouseLeftButtonUp(object sender, MouseButtonEventArgs e)
        {
            restoreIfMove = false;
            allowMaximizeState = true;
        }

        [DllImport("user32.dll")]
        [return: MarshalAs(UnmanagedType.Bool)]
        static extern bool GetCursorPos(out Point lpPoint);
        void PART_TITLEBAR_OnMouseMove(object sender, System.Windows.Input.MouseEventArgs e)
        {
            try
            {
                if (restoreIfMove)
                {
                    restoreIfMove = false;

                    var percentHorizontal = e.GetPosition(this).X / ActualWidth;
                    var targetHorizontal = RestoreBounds.Width * percentHorizontal;

                    var percentVertical = e.GetPosition(this).Y / ActualHeight;
                    var targetVertical = RestoreBounds.Height * percentVertical;

                    WindowState = WindowState.Normal;
                    ResizeMode = WindowState == WindowState.Normal ? ResizeMode.CanResize : ResizeMode.CanMinimize;

                    GetCursorPos(out Point lMousePosition);

                    Left = lMousePosition.x - targetHorizontal;
                    Top = lMousePosition.y - targetVertical;

                    DragMove();
                    allowMaximizeState = true;
                }
                if (allowMaximizeState)
                {
                    GetCursorPos(out Point lMousePosition);

                    if (lMousePosition.y <= 0)
                    {
                        WindowState = WindowState.Maximized;
                    }
                }
            }
            catch (Exception)
            {
                // ignored
            }
        }

        void ContentDockManager_OnPaneDragEnded(object sender, PaneDragEndedEventArgs e)
        {
            if (e.Panes != null)
            {
                var tabGroupPane = e.Panes[0].Parent as TabGroupPane;
                var splitPane = tabGroupPane?.Parent as SplitPane;
                if (splitPane?.Parent is PaneToolWindow paneToolWindow && string.IsNullOrWhiteSpace(paneToolWindow.Title))
                {
                    paneToolWindow.Title = Title;
                }

            }
        }

        void MainViewWindow_Closed(object sender, EventArgs e)
        {
            foreach (Process proc in Process.GetProcessesByName("Warewolf Studio"))
            {
                Dev2Logger.Warn(proc.ProcessName + " still running in the background.", "Warewolf Warn");
            }
        }
    }
}
---- Transformed Tree ----
using System;
using System.ComponentModel;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Runtime.InteropServices;
using System.Windows;
using System.Windows.Data;
using System.Windows.Forms;
using System.Windows.Input;
using System.Windows.Media.Animation;
using System.Xml;
using Dev2.Common;
using Dev2.Triggers.Scheduler;
using Dev2.Studio.ViewModels;
using FontAwesome.WPF;
using Infragistics.Windows.DockManager.Events;
using WinInterop = System.Windows.Interop;
using Dev2.Studio.Core;
using Dev2.Studio.ViewModels.Workflow;
using Dev2.Studio.ViewModels.WorkSurface;
using Dev2.ViewModels;
using Dev2.Workspaces;
using Infragistics.Windows.DockManager;
using Dev2.Triggers.Scheduler;

namespace Dev2.Studio.Views
{
    public partial class ShellView : IWin32Window
    {
        static bool _isSuperMaximising;
        bool _isLocked;
        readonly string _savedLayout;
        static ShellView _this;

        #region Constructor

        public static ShellView GetInstance() => _this;

        public ShellView()
        {
            InitializeComponent();
            _isLocked = true;
            HideFullScreenPanel.IsHitTestVisible = false;
            ShowFullScreenPanel.IsHitTestVisible = false;
            Loaded += OnLoaded;
            KeyDown += Shell_KeyDown;
            SourceInitialized += WinSourceInitialized;

            if (File.Exists(FilePath))
            {
                GetFilePath();
                using (FileStream fs = new FileStream(FilePath, FileMode.Open, FileAccess.Read))
                {
                    var streamReader = new StreamReader(fs);
                    _savedLayout = streamReader.ReadToEnd();
                }
                if (!string.IsNullOrEmpty(_savedLayout))
                {
                    try
                    {
                        DockManager.LoadLayout(_savedLayout);
                    }
                    catch (Exception err)
                    {
                        _savedLayout = null;
                        File.Delete(FilePath);
                        Dev2Logger.Error("Unable to load layout", GlobalConstants.WarewolfError);
                        Dev2Logger.Error(err, GlobalConstants.WarewolfError);
                    }
                }
            }

#pragma warning disable S3010 // For testing (Studio reset shortcut)
            _this = this;
#pragma warning restore S3010
        }

        string FilePath => Path.Combine(new[]
        {
            Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData),
            StringResources.App_Data_Directory,
            StringResources.User_Interface_Layouts_Directory,
            "WorkspaceLayout.xml"
        });

        void GetFilePath()
        {
            if (!File.Exists(FilePath))
            {
                var fileInfo = new FileInfo(FilePath);
                if (fileInfo.Directory != null)
                {
                    var finalDirectoryPath = fileInfo.Directory.FullName;

                    if (!Directory.Exists(finalDirectoryPath))
                    {
                        Directory.CreateDirectory(finalDirectoryPath);
                    }
                }
            }
        }

        #endregion Constructor

        void WinSourceInitialized(object sender, EventArgs e)
        {
            Maximise();
        }

        void Maximise()
        {
            var handle = new WinInterop.WindowInteropHelper(this).Handle;
            var handleSource = WinInterop.HwndSource.FromHwnd(handle);
            handleSource?.AddHook(WindowProc);
        }

        static IntPtr WindowProc(IntPtr hwnd, int msg, IntPtr wParam, IntPtr lParam, ref bool handled)
        {
            if (msg == 0x0024 && !_isSuperMaximising)
            {
                WmGetMinMaxInfo(hwnd, lParam);
                handled = true;
            }
            return (IntPtr)0;
        }

        static void WmGetMinMaxInfo(IntPtr hwnd, IntPtr lParam)
        {
            var mmi = (Minmaxinfo)Marshal.PtrToStructure(lParam, typeof(Minmaxinfo));

            // Adjust the maximized size and position to fit the work area of the correct monitor
            var currentScreen = Screen.FromHandle(hwnd);
            var workArea = currentScreen.WorkingArea;
            var monitorArea = currentScreen.Bounds;
            mmi.ptMaxPosition.x = Math.Abs(workArea.Left - monitorArea.Left);
            mmi.ptMaxPosition.y = Math.Abs(workArea.Top - monitorArea.Top);
            mmi.ptMaxSize.x = Math.Abs(workArea.Right - workArea.Left);
            mmi.ptMaxSize.y = Math.Abs(workArea.Bottom - workArea.Top);

            Marshal.StructureToPtr(mmi, lParam, true);
        }

        [StructLayout(LayoutKind.Sequential)]

        public struct Minmaxinfo
        {
            public Point ptReserved;
            public Point ptMaxSize;
            public Point ptMaxPosition;
            public Point ptMinTrackSize;
            public Point ptMaxTrackSize;
        };

        [StructLayout(LayoutKind.Sequential)]
        public struct Point
        {
            /// <summary>
            /// x coordinate of point.
            /// </summary>
            public int x;

            /// <summary>
            /// y coordinate of point.
            /// </summary>
            public int y;

            /// <summary>
            /// Construct a point of coordinates (x,y).
            /// </summary>
            public Point(int x, int y)
            {
                this.x = x;
                this.y = y;
            }
        }

        void Shell_KeyDown(object sender, System.Windows.Input.KeyEventArgs e)
        {
            if ((Keyboard.Modifiers == (ModifierKeys.Alt | ModifierKeys.Control)) && (e.Key == Key.F4))
            {
                ResetToStartupView();
            }
            if (e.Key == Key.Home && (Keyboard.Modifiers & ModifierKeys.Control) == ModifierKeys.Control)
            {
                var shellViewModel = DataContext as ShellViewModel;
                shellViewModel?.MergeCommand.Execute(null);
            }
            if (e.Key == Key.F1)
            {
                Process.Start(Warewolf.Studio.Resources.Languages.HelpText.WarewolfHelpURL);
            }
            if (e.Key == Key.F11 && _isLocked)
            {
                if (_isSuperMaximising)
                {
                    HideFullScreenPanel.IsHitTestVisible = false;
                    ShowFullScreenPanel.IsHitTestVisible = false;
                    ExitSuperMaximisedMode();
                }
                else
                {
                    HideFullScreenPanel.IsHitTestVisible = true;
                    ShowFullScreenPanel.IsHitTestVisible = true;
                    EnterSuperMaximisedMode();
                }
            }
        }

        public void ResetToStartupView()
        {
            if (DataContext is ShellViewModel mainViewModel)
            {
                ClearWindowCollection(mainViewModel);
                ClearTabItems(mainViewModel);

                var localhostServer = mainViewModel.LocalhostServer;
                if (localhostServer.IsConnected && !Equals(mainViewModel.ActiveServer, localhostServer))
                {
                    mainViewModel.SetActiveServer(localhostServer.EnvironmentID);
                    mainViewModel.SetActiveServer(localhostServer);
                }

                var explorerViewModel = mainViewModel.ExplorerViewModel;
                if (explorerViewModel != null)
                {
                    DisconnectAllServers(localhostServer, explorerViewModel);
                }

                if (mainViewModel.ToolboxViewModel != null)
                {
                    mainViewModel.ToolboxViewModel.SearchTerm = string.Empty;
                    Toolbox.Activate();
                    Toolboxcontrol.Focus();
                }
            }
        }

        static void DisconnectAllServers(Interfaces.IServer localhostServer, Interfaces.IExplorerViewModel explorerViewModel)
        {
            explorerViewModel.SearchText = string.Empty;

            DisconnectServers(localhostServer, explorerViewModel);

            var environmentViewModels = explorerViewModel.Environments;
            if (environmentViewModels?.Count > 1)
            {
                for (var i = 0; i < environmentViewModels.Count - 1; i++)
                {
                    var remoteEnvironment = environmentViewModels.FirstOrDefault(model => model.ResourceId != Guid.Empty);
                    environmentViewModels.Remove(remoteEnvironment);
                }
            }
        }

        static void DisconnectServers(Interfaces.IServer localhostServer, Interfaces.IExplorerViewModel explorerViewModel)
        {
            if (explorerViewModel.ConnectControlViewModel != null)
            {
                foreach (var server in explorerViewModel.ConnectControlViewModel.Servers)
                {
                    if (server != null && server.DisplayName != localhostServer.DisplayName && server.IsConnected)
                    {
                        server.Disconnect();
                    }
                }
            }
        }

        void ClearTabItems(ShellViewModel mainViewModel)
        {
            for (int i = TabManager.Items.Count - 1; i >= 0; i--)
            {
                var item = TabManager.Items[i];
                var contentPane = item as ContentPane;
                RemoveWorkspaceItems(contentPane, mainViewModel);
            }
            TabManager.Items.Clear();
        }

        static void ClearWindowCollection(ShellViewModel mainViewModel)
        {
            var windowCollection = System.Windows.Application.Current.Windows;
            foreach (var window in windowCollection)
            {
                if (window is Window window1 && window1.Name != "MainViewWindow")
                {
                    if (window1.GetType().Name == "ToolWindowHostWindow")
                    {
                        ClearWindowCollection(mainViewModel, window1);
                    }
                    window1.Close();
                }
            }
        }

        static void ClearWindowCollection(ShellViewModel mainViewModel, Window window1)
        {
            var contentPane = window1.Content as PaneToolWindow;
            foreach (var item in contentPane?.Pane?.Panes)
            {
                var pane = item as ContentPane;
                RemoveWorkspaceItems(pane, mainViewModel);
            }
        }

        static void RemoveWorkspaceItems(ContentPane pane, ShellViewModel shellViewModel)
        {
            var item1 = pane?.Content as WorkflowDesignerViewModel;
            if (item1?.ResourceModel != null)
            {
                WorkspaceItemRepository.Instance.ClearWorkspaceItems(item1.ResourceModel);
            }
            item1?.RemoveAllWorkflowName(item1.DisplayName);

            var workSurfaceContextViewModel = pane?.DataContext as WorkSurfaceContextViewModel;
            shellViewModel?.Items.Remove(workSurfaceContextViewModel);
        }

        void OnLoaded(object sender, RoutedEventArgs e)
        {
            var xmlDocument = new XmlDocument();
            if (_savedLayout != null)
            {
                try
                {
                    xmlDocument.LoadXml(_savedLayout);
                }
                catch (Exception err)
                {
                    File.Delete(FilePath);
                    Dev2Logger.Error("Unable to load layout", GlobalConstants.WarewolfError);
                    Dev2Logger.Error(err, GlobalConstants.WarewolfError);
                }
            }
            if (DataContext is ShellViewModel shellViewModel)
            {
                SetMenuExpanded(xmlDocument, shellViewModel);
                SetMenuPanelOpen(xmlDocument, shellViewModel);
                SetMenuPanelLockedOpen(xmlDocument, shellViewModel);
            }
            Toolbox.Activate();
            Toolboxcontrol.Focus();
        }

        static void SetMenuExpanded(XmlDocument xmlDocument, ShellViewModel shellViewModel)
        {
            var elementsByTagNameMenuExpanded = xmlDocument.GetElementsByTagName("MenuExpanded");
            if (elementsByTagNameMenuExpanded.Count > 0)
            {
                var menuExpandedString = elementsByTagNameMenuExpanded[0].InnerXml;

                if (bool.TryParse(menuExpandedString, out bool menuExpanded))
                {
                    shellViewModel.MenuExpanded = menuExpanded;
                }
            }
            else
            {
                shellViewModel.MenuExpanded = true;
            }
        }

        static void SetMenuPanelOpen(XmlDocument xmlDocument, ShellViewModel shellViewModel)
        {
            var elementsByTagNameMenuPanelOpen = xmlDocument.GetElementsByTagName("MenuPanelOpen");
            if (elementsByTagNameMenuPanelOpen.Count > 0)
            {
                var menuPanelOpenString = elementsByTagNameMenuPanelOpen[0].InnerXml;

                if (bool.TryParse(menuPanelOpenString, out bool panelOpen))
                {
                    shellViewModel.MenuViewModel.IsPanelOpen = panelOpen;
                }
            }
        }

        static void SetMenuPanelLockedOpen(XmlDocument xmlDocument, ShellViewModel shellViewModel)
        {
            var elementsByTagNameMenuPanelLockedOpen = xmlDocument.GetElementsByTagName("MenuPanelLockedOpen");
            if (elementsByTagNameMenuPanelLockedOpen.Count > 0)
            {
                var menuPanelLockedOpenString = elementsByTagNameMenuPanelLockedOpen[0].InnerXml;

                if (bool.TryParse(menuPanelLockedOpenString, out bool panelLockedOpen))
                {
                    shellViewModel.MenuViewModel.IsPanelLockedOpen = panelLockedOpen;
                }
            }
            else
            {
                shellViewModel.MenuViewModel.IsPanelLockedOpen = false;
            }
        }

        #region Implementation of IWin32Window

        public IntPtr Handle
        {
            get
            {
                var interopHelper = new WinInterop.WindowInteropHelper(this);
                return interopHelper.Handle;
            }
        }

        #endregion

        void MainView_OnClosing(object sender, CancelEventArgs e)
        {
            if (DataContext is ShellViewModel shellViewModel)
            {
                if (!shellViewModel.OnStudioClosing())
                {
                    e.Cancel = true;
                }

                if (ShellViewModel.IsDownloading())
                {
                    e.Cancel = true;
                }
            }
            GetFilePath();
            SaveLayout(shellViewModel);
        }

        void SaveLayout(ShellViewModel shellViewModel)
        {
            var dockManagerLayout = DockManager.SaveLayout();
            var document = new XmlDocument();
            document.LoadXml(dockManagerLayout);
            var menuExpandedNode = document.CreateNode(XmlNodeType.Element, "MenuExpanded", document.NamespaceURI);
            menuExpandedNode.InnerXml = (shellViewModel != null && shellViewModel.MenuExpanded).ToString();

            var menuPanelOpenNode = document.CreateNode(XmlNodeType.Element, "MenuPanelOpen", document.NamespaceURI);
            menuPanelOpenNode.InnerXml = (shellViewModel != null && shellViewModel.MenuViewModel.IsPanelOpen).ToString();

            var menuPanelLockedOpenNode = document.CreateNode(XmlNodeType.Element, "MenuPanelLockedOpen", document.NamespaceURI);
            menuPanelLockedOpenNode.InnerXml =
                (shellViewModel != null && shellViewModel.MenuViewModel.IsPanelLockedOpen).ToString();

            if (document.DocumentElement != null)
            {
                document.DocumentElement.AppendChild(menuExpandedNode);
                document.DocumentElement.AppendChild(menuPanelOpenNode);
                document.DocumentElement.AppendChild(menuPanelLockedOpenNode);
            }
            using (FileStream fs = new FileStream(FilePath, FileMode.Create, FileAccess.Write))
            {
                document.Save(fs);
            }
        }

        void SlidingMenuPane_OnSizeChanged(object sender, SizeChangedEventArgs e)
        {
            if (DataContext is ShellViewModel vm)
            {
                vm.MenuPanelWidth = e.NewSize.Width;
            }
        }

        void TryDockManager_OnToolWindowLoaded(object sender, PaneToolWindowEventArgs e)
        {
            try
            {
                DockManager_OnToolWindowLoaded(sender, e);
            }
            catch (Exception ex)
            {
                Dev2Logger.Error(ex, GlobalConstants.WarewolfError);
            }
        }

        void DockManager_OnToolWindowLoaded(object sender, PaneToolWindowEventArgs e)
        {
            var window = e.Window;
            var resourceDictionary = System.Windows.Application.Current.Resources;
            if (resourceDictionary["WarewolfToolWindow"] is Style style)
            {
                window.UseOSNonClientArea = false;
                window.Style = style;
                window.PreviewMouseLeftButtonUp += WindowOnPreviewMouseDown;
            }

            if (e.Source.GetType() == typeof(XamDockManager))
            {
                var binding = Infragistics.Windows.Utilities.CreateBindingObject(DataContextProperty, BindingMode.OneWay, sender as XamDockManager);
                e.Window.SetBinding(DataContextProperty, binding);

                var shellViewModel = DataContext as ShellViewModel;
                PaneToolWindow = window;

                if (PaneToolWindow.Pane.Panes != null && PaneToolWindow.Pane.Panes.Count > 0)
                {
                    var workSurfaceContextViewModel = PaneToolWindow.Pane.Panes[0].DataContext as WorkSurfaceContextViewModel;
                    shellViewModel?.ActivateItem(workSurfaceContextViewModel);
                    PaneToolWindow.Name = "FloatingWindow";
                    if (string.IsNullOrWhiteSpace(e.Window.Title))
                    {
                        PaneToolWindow.Title = Title;
                    }
                    else
                    {
                        UpdatePaneToolWindow(sender);
                    }
                    if (workSurfaceContextViewModel?.ContextualResourceModel != null)
                    {
                        PaneToolWindow.ToolTip = "Floating window for - " + workSurfaceContextViewModel.ContextualResourceModel.DisplayName;
                    }
                }
            }
        }

        void UpdatePaneToolWindow(object sender)
        {
            var dockManager = sender as XamDockManager;
            var displayName = string.Empty;
            if (dockManager?.DataContext.GetType() == typeof(WorkflowDesignerViewModel))
            {
                var workflowDesignerViewModel = dockManager.DataContext as WorkflowDesignerViewModel;
                displayName = workflowDesignerViewModel?.DisplayName;
            }
            else if (dockManager?.DataContext.GetType() == typeof(StudioTestViewModel))
            {
                var studioTestViewModel = dockManager.DataContext as StudioTestViewModel;
                displayName = studioTestViewModel?.DisplayName;
            }
            else
            {
                if (dockManager?.DataContext.GetType() == typeof(SchedulerViewModel))
                {
                    var schedulerViewModel = dockManager.DataContext as SchedulerViewModel;
                    displayName = schedulerViewModel?.DisplayName;
                }
            }
            SetPaneToolWindowTitle(displayName);
        }

        void SetPaneToolWindowTitle(string displayName)
        {
            var title = PaneToolWindow.Title;
            var newTitle = " - " + displayName?.Replace("*", "").TrimEnd();
            if (!title.Contains(newTitle) && !string.IsNullOrWhiteSpace(displayName))
            {
                PaneToolWindow.Title = PaneToolWindow.Title + " - " + displayName;
            }
        }

        public PaneToolWindow PaneToolWindow { get; set; }

        void WindowOnPreviewMouseDown(object sender, MouseButtonEventArgs e)
        {
            try
            {
                if (DataContext is ShellViewModel shellViewModel)
                {
                    WindowOnPreviewMouseDown(sender, shellViewModel);
                }
            }
            catch (Exception ex)
            {
                Dev2Logger.Error(ex, GlobalConstants.WarewolfError);
            }
        }

        static void WindowOnPreviewMouseDown(object sender, ShellViewModel shellViewModel)
        {
            var paneToolWindow = sender as PaneToolWindow;
            if (paneToolWindow?.Pane?.Panes.Count > 0)
            {
                if (paneToolWindow.Pane.Panes[0] is ContentPane contentPane)
                {
                    var workSurfaceContextViewModel = contentPane.DataContext as WorkSurfaceContextViewModel;
                    shellViewModel.ActivateItem(workSurfaceContextViewModel);
                }
                else
                {
                    var tabGroupPane = paneToolWindow.Pane.Panes[0] as TabGroupPane;
                    if (tabGroupPane?.Items.Count >= 1)
                    {
                        var selectedContent = tabGroupPane.SelectedContent as ContentPane;
                        var workSurfaceContextViewModel = selectedContent?.DataContext as WorkSurfaceContextViewModel;
                        shellViewModel.ActivateItem(workSurfaceContextViewModel);
                    }
                }
            }
        }

        void EnterSuperMaximisedMode()
        {
            _isSuperMaximising = true;
            var dependencyObject = GetTemplateChild("PART_TITLEBAR");
            if (dependencyObject != null)
            {
                dependencyObject.SetValue(VisibilityProperty, Visibility.Collapsed);
                WindowState = WindowState.Normal;
                WindowState = WindowState.Maximized;
            }
        }

        void CloseSuperMaximised(object sender, RoutedEventArgs e)
        {
            ExitSuperMaximisedMode();
        }

        void ExitSuperMaximisedMode()
        {
            DoCloseExitFullScreenPanelAnimation();
            _isSuperMaximising = false;
            var dependencyObject = GetTemplateChild("PART_TITLEBAR");
            if (dependencyObject != null)
            {
                dependencyObject.SetValue(VisibilityProperty, Visibility.Visible);
                WindowState = WindowState.Normal;
                WindowState = WindowState.Maximized;
            }
        }

        void DoCloseExitFullScreenPanelAnimation()
        {
            var storyboard = Resources["AnimateExitFullScreenPanelClose"] as Storyboard;
            storyboard?.Begin();
        }

        void ShowFullScreenPanel_OnMouseEnter(object sender, System.Windows.Input.MouseEventArgs e)
        {
            if (_isSuperMaximising)
            {
                var storyboard = Resources["AnimateExitFullScreenPanelOpen"] as Storyboard;
                storyboard?.Begin();
            }
            if (!_isLocked)
            {
                DoAnimateOpenTitleBar();
            }
        }

        void DoAnimateOpenTitleBar()
        {
            if (Resources["AnimateOpenTitleBorder"] is Storyboard storyboard)
            {
                var titleBar = GetTemplateChild("PART_TITLEBAR");
                storyboard.SetValue(Storyboard.TargetProperty, titleBar);
                storyboard.Begin();
            }
        }

        void HideFullScreenPanel_OnMouseEnter(object sender, System.Windows.Input.MouseEventArgs e)
        {
            if (_isSuperMaximising)
            {
                DoCloseExitFullScreenPanelAnimation();
            }
            if (!_isLocked)
            {
                DoAnimateCloseTitle();
            }
        }

        void DoAnimateCloseTitle()
        {
            if (Resources["AnimateCloseTitleBorder"] is Storyboard storyboard)
            {
                var titleBar = GetTemplateChild("PART_TITLEBAR");
                storyboard.SetValue(Storyboard.TargetProperty, titleBar);
                storyboard.Begin();
            }
        }

        bool restoreIfMove;
        bool allowMaximizeState;

        void PART_TITLEBAR_MouseLeftButtonDown(object sender, MouseButtonEventArgs e)
        {
            if (e.ClickCount == 2)
            {
                SwitchState();
                ResizeMode = WindowState == WindowState.Normal ? ResizeMode.CanResize : ResizeMode.CanMinimize;
            }
            else
            {
                if (WindowState == WindowState.Maximized)
                {
                    restoreIfMove = true;
                }
                DragMove();
            }
        }

        void SwitchState()
        {
            switch (WindowState)
            {
                case WindowState.Normal:
                    {
                        WindowState = WindowState.Maximized;
                        break;
                    }
                case WindowState.Maximized:
                    {
                        WindowState = WindowState.Normal;
                        break;
                    }

                case WindowState.Minimized:
                    break;
                default:
                    WindowState = WindowState.Normal;
                    break;
            }
        }

        void PART_CLOSE_Click(object sender, RoutedEventArgs e)
        {
            Close();
        }

        void PART_MAXIMIZE_RESTORE_Click(object sender, RoutedEventArgs e)
        {
            ToggleWindowState();
        }

        void ToggleWindowState()
        {
            WindowState = WindowState == WindowState.Normal ? WindowState.Maximized : WindowState.Normal;
            ResizeMode = WindowState == WindowState.Normal ? ResizeMode.CanResize : ResizeMode.CanMinimize;
        }

        void PART_MINIMIZE_Click(object sender, RoutedEventArgs e)
        {
            WindowState = WindowState.Minimized;
        }

        void PART_SUPER_MAXIMIZE_RESTORE_Click(object sender, RoutedEventArgs e)
        {
            EnterSuperMaximisedMode();
        }

        void PART_LOCK_Click(object sender, RoutedEventArgs e)
        {
            var dependencyObject = GetTemplateChild("PART_LOCK");
            if (dependencyObject != null)
            {
                var fontAwesome = new FontAwesome.WPF.FontAwesome();
                if (_isLocked)
                {
                    HideFullScreenPanel.IsHitTestVisible = true;
                    ShowFullScreenPanel.IsHitTestVisible = true;
                    fontAwesome.Icon = FontAwesomeIcon.Unlock;
                    DoAnimateCloseTitle();
                }
                else
                {
                    fontAwesome.Icon = FontAwesomeIcon.Lock;
                }
                dependencyObject.SetValue(ContentProperty, fontAwesome);
                _isLocked = !_isLocked;
            }
        }

        void PART_TITLEBAR_OnMouseLeftButtonUp(object sender, MouseButtonEventArgs e)
        {
            restoreIfMove = false;
            allowMaximizeState = true;
        }

        [DllImport("user32.dll")]
        [return: MarshalAs(UnmanagedType.Bool)]
        static extern bool GetCursorPos(out Point lpPoint);
        void PART_TITLEBAR_OnMouseMove(object sender, System.Windows.Input.MouseEventArgs e)
        {
            try
            {
                if (restoreIfMove)
                {
                    restoreIfMove = false;

                    var percentHorizontal = e.GetPosition(this).X / ActualWidth;
                    var targetHorizontal = RestoreBounds.Width * percentHorizontal;

                    var percentVertical = e.GetPosition(this).Y / ActualHeight;
                    var targetVertical = RestoreBounds.Height * percentVertical;

                    WindowState = WindowState.Normal;
                    ResizeMode = WindowState == WindowState.Normal ? ResizeMode.CanResize : ResizeMode.CanMinimize;

                    GetCursorPos(out Point lMousePosition);

                    Left = lMousePosition.x - targetHorizontal;
                    Top = lMousePosition.y - targetVertical;

                    DragMove();
                    allowMaximizeState = true;
                }
                if (allowMaximizeState)
                {
                    GetCursorPos(out Point lMousePosition);

                    if (lMousePosition.y <= 0)
                    {
                        WindowState = WindowState.Maximized;
                    }
                }
            }
            catch (Exception)
            {
                // ignored
            }
        }

        void ContentDockManager_OnPaneDragEnded(object sender, PaneDragEndedEventArgs e)
        {
            if (e.Panes != null)
            {
                var tabGroupPane = e.Panes[0].Parent as TabGroupPane;
                var splitPane = tabGroupPane?.Parent as SplitPane;
                if (splitPane?.Parent is PaneToolWindow paneToolWindow && string.IsNullOrWhiteSpace(paneToolWindow.Title))
                {
                    paneToolWindow.Title = Title;
                }

            }
        }

        void MainViewWindow_Closed(object sender, EventArgs e)
        {
            foreach (Process proc in Process.GetProcessesByName("Warewolf Studio"))
            {
                Dev2Logger.Warn(proc.ProcessName + " still running in the background.", "Warewolf Warn");
            }
        }
    }
}
---- Semantic diagnostics *before* transformation ----
D:\a\1\s\Dev\Dev2.Studio\Views\ShellView.xaml.cs(53,13): error CS0103: The name 'InitializeComponent' does not exist in the current context,D:\a\1\s\Dev\Dev2.Studio\Views\ShellView.xaml.cs(55,13): error CS0103: The name 'HideFullScreenPanel' does not exist in the current context,D:\a\1\s\Dev\Dev2.Studio\Views\ShellView.xaml.cs(56,13): error CS0103: The name 'ShowFullScreenPanel' does not exist in the current context,D:\a\1\s\Dev\Dev2.Studio\Views\ShellView.xaml.cs(57,13): error CS0103: The name 'Loaded' does not exist in the current context,D:\a\1\s\Dev\Dev2.Studio\Views\ShellView.xaml.cs(58,13): error CS0103: The name 'KeyDown' does not exist in the current context,D:\a\1\s\Dev\Dev2.Studio\Views\ShellView.xaml.cs(59,13): error CS0103: The name 'SourceInitialized' does not exist in the current context,D:\a\1\s\Dev\Dev2.Studio\Views\ShellView.xaml.cs(73,25): error CS0103: The name 'DockManager' does not exist in the current context,D:\a\1\s\Dev\Dev2.Studio\Views\ShellView.xaml.cs(124,61): error CS1503: Argument 1: cannot convert from 'Dev2.Studio.Views.ShellView' to 'System.Windows.Window',D:\a\1\s\Dev\Dev2.Studio\Views\ShellView.xaml.cs(197,38): error CS0103: The name 'DataContext' does not exist in the current context,D:\a\1\s\Dev\Dev2.Studio\Views\ShellView.xaml.cs(208,21): error CS0103: The name 'HideFullScreenPanel' does not exist in the current context,D:\a\1\s\Dev\Dev2.Studio\Views\ShellView.xaml.cs(209,21): error CS0103: The name 'ShowFullScreenPanel' does not exist in the current context,D:\a\1\s\Dev\Dev2.Studio\Views\ShellView.xaml.cs(214,21): error CS0103: The name 'HideFullScreenPanel' does not exist in the current context,D:\a\1\s\Dev\Dev2.Studio\Views\ShellView.xaml.cs(215,21): error CS0103: The name 'ShowFullScreenPanel' does not exist in the current context,D:\a\1\s\Dev\Dev2.Studio\Views\ShellView.xaml.cs(223,17): error CS0103: The name 'DataContext' does not exist in the current context,D:\a\1\s\Dev\Dev2.Studio\Views\ShellView.xaml.cs(244,21): error CS0103: The name 'Toolbox' does not exist in the current context,D:\a\1\s\Dev\Dev2.Studio\Views\ShellView.xaml.cs(245,21): error CS0103: The name 'Toolboxcontrol' does not exist in the current context,D:\a\1\s\Dev\Dev2.Studio\Views\ShellView.xaml.cs(283,26): error CS0103: The name 'TabManager' does not exist in the current context,D:\a\1\s\Dev\Dev2.Studio\Views\ShellView.xaml.cs(285,28): error CS0103: The name 'TabManager' does not exist in the current context,D:\a\1\s\Dev\Dev2.Studio\Views\ShellView.xaml.cs(289,13): error CS0103: The name 'TabManager' does not exist in the current context,D:\a\1\s\Dev\Dev2.Studio\Views\ShellView.xaml.cs(347,17): error CS0103: The name 'DataContext' does not exist in the current context,D:\a\1\s\Dev\Dev2.Studio\Views\ShellView.xaml.cs(353,13): error CS0103: The name 'Toolbox' does not exist in the current context,D:\a\1\s\Dev\Dev2.Studio\Views\ShellView.xaml.cs(354,13): error CS0103: The name 'Toolboxcontrol' does not exist in the current context,D:\a\1\s\Dev\Dev2.Studio\Views\ShellView.xaml.cs(413,72): error CS1503: Argument 1: cannot convert from 'Dev2.Studio.Views.ShellView' to 'System.Windows.Window',D:\a\1\s\Dev\Dev2.Studio\Views\ShellView.xaml.cs(422,34): error CS0103: The name 'DataContext' does not exist in the current context,D:\a\1\s\Dev\Dev2.Studio\Views\ShellView.xaml.cs(441,37): error CS0103: The name 'DockManager' does not exist in the current context,D:\a\1\s\Dev\Dev2.Studio\Views\ShellView.xaml.cs(468,17): error CS0103: The name 'DataContext' does not exist in the current context,D:\a\1\s\Dev\Dev2.Studio\Views\ShellView.xaml.cs(499,82): error CS0103: The name 'DataContextProperty' does not exist in the current context,D:\a\1\s\Dev\Dev2.Studio\Views\ShellView.xaml.cs(500,37): error CS0103: The name 'DataContextProperty' does not exist in the current context,D:\a\1\s\Dev\Dev2.Studio\Views\ShellView.xaml.cs(502,38): error CS0103: The name 'DataContext' does not exist in the current context,D:\a\1\s\Dev\Dev2.Studio\Views\ShellView.xaml.cs(512,48): error CS0103: The name 'Title' does not exist in the current context,D:\a\1\s\Dev\Dev2.Studio\Views\ShellView.xaml.cs(567,21): error CS0103: The name 'DataContext' does not exist in the current context,D:\a\1\s\Dev\Dev2.Studio\Views\ShellView.xaml.cs(604,36): error CS0103: The name 'GetTemplateChild' does not exist in the current context,D:\a\1\s\Dev\Dev2.Studio\Views\ShellView.xaml.cs(607,43): error CS0103: The name 'VisibilityProperty' does not exist in the current context,D:\a\1\s\Dev\Dev2.Studio\Views\ShellView.xaml.cs(608,17): error CS0118: 'WindowState' is a type but is used like a variable,D:\a\1\s\Dev\Dev2.Studio\Views\ShellView.xaml.cs(609,17): error CS0118: 'WindowState' is a type but is used like a variable,D:\a\1\s\Dev\Dev2.Studio\Views\ShellView.xaml.cs(622,36): error CS0103: The name 'GetTemplateChild' does not exist in the current context,D:\a\1\s\Dev\Dev2.Studio\Views\ShellView.xaml.cs(625,43): error CS0103: The name 'VisibilityProperty' does not exist in the current context,D:\a\1\s\Dev\Dev2.Studio\Views\ShellView.xaml.cs(626,17): error CS0118: 'WindowState' is a type but is used like a variable,D:\a\1\s\Dev\Dev2.Studio\Views\ShellView.xaml.cs(627,17): error CS0118: 'WindowState' is a type but is used like a variable,D:\a\1\s\Dev\Dev2.Studio\Views\ShellView.xaml.cs(633,30): error CS0119: 'Resources' is a type, which is not valid in the given context,D:\a\1\s\Dev\Dev2.Studio\Views\ShellView.xaml.cs(641,34): error CS0119: 'Resources' is a type, which is not valid in the given context,D:\a\1\s\Dev\Dev2.Studio\Views\ShellView.xaml.cs(652,17): error CS0119: 'Resources' is a type, which is not valid in the given context,D:\a\1\s\Dev\Dev2.Studio\Views\ShellView.xaml.cs(654,32): error CS0103: The name 'GetTemplateChild' does not exist in the current context,D:\a\1\s\Dev\Dev2.Studio\Views\ShellView.xaml.cs(674,17): error CS0119: 'Resources' is a type, which is not valid in the given context,D:\a\1\s\Dev\Dev2.Studio\Views\ShellView.xaml.cs(676,32): error CS0103: The name 'GetTemplateChild' does not exist in the current context,D:\a\1\s\Dev\Dev2.Studio\Views\ShellView.xaml.cs(690,17): error CS0118: 'ResizeMode' is a type but is used like a variable,D:\a\1\s\Dev\Dev2.Studio\Views\ShellView.xaml.cs(690,30): error CS0119: 'WindowState' is a type, which is not valid in the given context,D:\a\1\s\Dev\Dev2.Studio\Views\ShellView.xaml.cs(694,21): error CS0119: 'WindowState' is a type, which is not valid in the given context,D:\a\1\s\Dev\Dev2.Studio\Views\ShellView.xaml.cs(698,17): error CS0103: The name 'DragMove' does not exist in the current context,D:\a\1\s\Dev\Dev2.Studio\Views\ShellView.xaml.cs(704,21): error CS0119: 'WindowState' is a type, which is not valid in the given context,D:\a\1\s\Dev\Dev2.Studio\Views\ShellView.xaml.cs(708,25): error CS0118: 'WindowState' is a type but is used like a variable,D:\a\1\s\Dev\Dev2.Studio\Views\ShellView.xaml.cs(713,25): error CS0118: 'WindowState' is a type but is used like a variable,D:\a\1\s\Dev\Dev2.Studio\Views\ShellView.xaml.cs(720,21): error CS0118: 'WindowState' is a type but is used like a variable,D:\a\1\s\Dev\Dev2.Studio\Views\ShellView.xaml.cs(727,13): error CS0103: The name 'Close' does not exist in the current context,D:\a\1\s\Dev\Dev2.Studio\Views\ShellView.xaml.cs(737,13): error CS0118: 'WindowState' is a type but is used like a variable,D:\a\1\s\Dev\Dev2.Studio\Views\ShellView.xaml.cs(737,27): error CS0119: 'WindowState' is a type, which is not valid in the given context,D:\a\1\s\Dev\Dev2.Studio\Views\ShellView.xaml.cs(738,13): error CS0118: 'ResizeMode' is a type but is used like a variable,D:\a\1\s\Dev\Dev2.Studio\Views\ShellView.xaml.cs(738,26): error CS0119: 'WindowState' is a type, which is not valid in the given context,D:\a\1\s\Dev\Dev2.Studio\Views\ShellView.xaml.cs(743,13): error CS0118: 'WindowState' is a type but is used like a variable,D:\a\1\s\Dev\Dev2.Studio\Views\ShellView.xaml.cs(753,36): error CS0103: The name 'GetTemplateChild' does not exist in the current context,D:\a\1\s\Dev\Dev2.Studio\Views\ShellView.xaml.cs(759,21): error CS0103: The name 'HideFullScreenPanel' does not exist in the current context,D:\a\1\s\Dev\Dev2.Studio\Views\ShellView.xaml.cs(760,21): error CS0103: The name 'ShowFullScreenPanel' does not exist in the current context,D:\a\1\s\Dev\Dev2.Studio\Views\ShellView.xaml.cs(768,43): error CS0103: The name 'ContentProperty' does not exist in the current context,D:\a\1\s\Dev\Dev2.Studio\Views\ShellView.xaml.cs(790,59): error CS1503: Argument 1: cannot convert from 'Dev2.Studio.Views.ShellView' to 'System.Windows.IInputElement',D:\a\1\s\Dev\Dev2.Studio\Views\ShellView.xaml.cs(790,69): error CS0103: The name 'ActualWidth' does not exist in the current context,D:\a\1\s\Dev\Dev2.Studio\Views\ShellView.xaml.cs(791,44): error CS0103: The name 'RestoreBounds' does not exist in the current context,D:\a\1\s\Dev\Dev2.Studio\Views\ShellView.xaml.cs(793,57): error CS1503: Argument 1: cannot convert from 'Dev2.Studio.Views.ShellView' to 'System.Windows.IInputElement',D:\a\1\s\Dev\Dev2.Studio\Views\ShellView.xaml.cs(793,67): error CS0103: The name 'ActualHeight' does not exist in the current context,D:\a\1\s\Dev\Dev2.Studio\Views\ShellView.xaml.cs(794,42): error CS0103: The name 'RestoreBounds' does not exist in the current context,D:\a\1\s\Dev\Dev2.Studio\Views\ShellView.xaml.cs(796,21): error CS0118: 'WindowState' is a type but is used like a variable,D:\a\1\s\Dev\Dev2.Studio\Views\ShellView.xaml.cs(797,21): error CS0118: 'ResizeMode' is a type but is used like a variable,D:\a\1\s\Dev\Dev2.Studio\Views\ShellView.xaml.cs(797,34): error CS0119: 'WindowState' is a type, which is not valid in the given context,D:\a\1\s\Dev\Dev2.Studio\Views\ShellView.xaml.cs(801,21): error CS0103: The name 'Left' does not exist in the current context,D:\a\1\s\Dev\Dev2.Studio\Views\ShellView.xaml.cs(802,21): error CS0103: The name 'Top' does not exist in the current context,D:\a\1\s\Dev\Dev2.Studio\Views\ShellView.xaml.cs(804,21): error CS0103: The name 'DragMove' does not exist in the current context,D:\a\1\s\Dev\Dev2.Studio\Views\ShellView.xaml.cs(813,25): error CS0118: 'WindowState' is a type but is used like a variable,D:\a\1\s\Dev\Dev2.Studio\Views\ShellView.xaml.cs(831,44): error CS0103: The name 'Title' does not exist in the current context
---- Semantic diagnostics *after* transformation ----
D:\a\1\s\Dev\Dev2.Studio\Views\ShellView.xaml.cs(53,13): error CS0103: The name 'InitializeComponent' does not exist in the current context,D:\a\1\s\Dev\Dev2.Studio\Views\ShellView.xaml.cs(55,13): error CS0103: The name 'HideFullScreenPanel' does not exist in the current context,D:\a\1\s\Dev\Dev2.Studio\Views\ShellView.xaml.cs(56,13): error CS0103: The name 'ShowFullScreenPanel' does not exist in the current context,D:\a\1\s\Dev\Dev2.Studio\Views\ShellView.xaml.cs(57,13): error CS0103: The name 'Loaded' does not exist in the current context,D:\a\1\s\Dev\Dev2.Studio\Views\ShellView.xaml.cs(58,13): error CS0103: The name 'KeyDown' does not exist in the current context,D:\a\1\s\Dev\Dev2.Studio\Views\ShellView.xaml.cs(59,13): error CS0103: The name 'SourceInitialized' does not exist in the current context,D:\a\1\s\Dev\Dev2.Studio\Views\ShellView.xaml.cs(73,25): error CS0103: The name 'DockManager' does not exist in the current context,D:\a\1\s\Dev\Dev2.Studio\Views\ShellView.xaml.cs(124,61): error CS1503: Argument 1: cannot convert from 'Dev2.Studio.Views.ShellView' to 'System.Windows.Window',D:\a\1\s\Dev\Dev2.Studio\Views\ShellView.xaml.cs(197,38): error CS0103: The name 'DataContext' does not exist in the current context,D:\a\1\s\Dev\Dev2.Studio\Views\ShellView.xaml.cs(208,21): error CS0103: The name 'HideFullScreenPanel' does not exist in the current context,D:\a\1\s\Dev\Dev2.Studio\Views\ShellView.xaml.cs(209,21): error CS0103: The name 'ShowFullScreenPanel' does not exist in the current context,D:\a\1\s\Dev\Dev2.Studio\Views\ShellView.xaml.cs(214,21): error CS0103: The name 'HideFullScreenPanel' does not exist in the current context,D:\a\1\s\Dev\Dev2.Studio\Views\ShellView.xaml.cs(215,21): error CS0103: The name 'ShowFullScreenPanel' does not exist in the current context,D:\a\1\s\Dev\Dev2.Studio\Views\ShellView.xaml.cs(223,17): error CS0103: The name 'DataContext' does not exist in the current context,D:\a\1\s\Dev\Dev2.Studio\Views\ShellView.xaml.cs(244,21): error CS0103: The name 'Toolbox' does not exist in the current context,D:\a\1\s\Dev\Dev2.Studio\Views\ShellView.xaml.cs(245,21): error CS0103: The name 'Toolboxcontrol' does not exist in the current context,D:\a\1\s\Dev\Dev2.Studio\Views\ShellView.xaml.cs(283,26): error CS0103: The name 'TabManager' does not exist in the current context,D:\a\1\s\Dev\Dev2.Studio\Views\ShellView.xaml.cs(285,28): error CS0103: The name 'TabManager' does not exist in the current context,D:\a\1\s\Dev\Dev2.Studio\Views\ShellView.xaml.cs(289,13): error CS0103: The name 'TabManager' does not exist in the current context,D:\a\1\s\Dev\Dev2.Studio\Views\ShellView.xaml.cs(347,17): error CS0103: The name 'DataContext' does not exist in the current context,D:\a\1\s\Dev\Dev2.Studio\Views\ShellView.xaml.cs(353,13): error CS0103: The name 'Toolbox' does not exist in the current context,D:\a\1\s\Dev\Dev2.Studio\Views\ShellView.xaml.cs(354,13): error CS0103: The name 'Toolboxcontrol' does not exist in the current context,D:\a\1\s\Dev\Dev2.Studio\Views\ShellView.xaml.cs(413,72): error CS1503: Argument 1: cannot convert from 'Dev2.Studio.Views.ShellView' to 'System.Windows.Window',D:\a\1\s\Dev\Dev2.Studio\Views\ShellView.xaml.cs(422,17): error CS0103: The name 'DataContext' does not exist in the current context,D:\a\1\s\Dev\Dev2.Studio\Views\ShellView.xaml.cs(435,24): error CS0165: Use of unassigned local variable 'shellViewModel',D:\a\1\s\Dev\Dev2.Studio\Views\ShellView.xaml.cs(440,37): error CS0103: The name 'DockManager' does not exist in the current context,D:\a\1\s\Dev\Dev2.Studio\Views\ShellView.xaml.cs(467,17): error CS0103: The name 'DataContext' does not exist in the current context,D:\a\1\s\Dev\Dev2.Studio\Views\ShellView.xaml.cs(498,82): error CS0103: The name 'DataContextProperty' does not exist in the current context,D:\a\1\s\Dev\Dev2.Studio\Views\ShellView.xaml.cs(499,37): error CS0103: The name 'DataContextProperty' does not exist in the current context,D:\a\1\s\Dev\Dev2.Studio\Views\ShellView.xaml.cs(501,38): error CS0103: The name 'DataContext' does not exist in the current context,D:\a\1\s\Dev\Dev2.Studio\Views\ShellView.xaml.cs(511,48): error CS0103: The name 'Title' does not exist in the current context,D:\a\1\s\Dev\Dev2.Studio\Views\ShellView.xaml.cs(566,21): error CS0103: The name 'DataContext' does not exist in the current context,D:\a\1\s\Dev\Dev2.Studio\Views\ShellView.xaml.cs(603,36): error CS0103: The name 'GetTemplateChild' does not exist in the current context,D:\a\1\s\Dev\Dev2.Studio\Views\ShellView.xaml.cs(606,43): error CS0103: The name 'VisibilityProperty' does not exist in the current context,D:\a\1\s\Dev\Dev2.Studio\Views\ShellView.xaml.cs(607,17): error CS0118: 'WindowState' is a type but is used like a variable,D:\a\1\s\Dev\Dev2.Studio\Views\ShellView.xaml.cs(608,17): error CS0118: 'WindowState' is a type but is used like a variable,D:\a\1\s\Dev\Dev2.Studio\Views\ShellView.xaml.cs(621,36): error CS0103: The name 'GetTemplateChild' does not exist in the current context,D:\a\1\s\Dev\Dev2.Studio\Views\ShellView.xaml.cs(624,43): error CS0103: The name 'VisibilityProperty' does not exist in the current context,D:\a\1\s\Dev\Dev2.Studio\Views\ShellView.xaml.cs(625,17): error CS0118: 'WindowState' is a type but is used like a variable,D:\a\1\s\Dev\Dev2.Studio\Views\ShellView.xaml.cs(626,17): error CS0118: 'WindowState' is a type but is used like a variable,D:\a\1\s\Dev\Dev2.Studio\Views\ShellView.xaml.cs(632,30): error CS0119: 'Resources' is a type, which is not valid in the given context,D:\a\1\s\Dev\Dev2.Studio\Views\ShellView.xaml.cs(640,34): error CS0119: 'Resources' is a type, which is not valid in the given context,D:\a\1\s\Dev\Dev2.Studio\Views\ShellView.xaml.cs(651,17): error CS0119: 'Resources' is a type, which is not valid in the given context,D:\a\1\s\Dev\Dev2.Studio\Views\ShellView.xaml.cs(653,32): error CS0103: The name 'GetTemplateChild' does not exist in the current context,D:\a\1\s\Dev\Dev2.Studio\Views\ShellView.xaml.cs(673,17): error CS0119: 'Resources' is a type, which is not valid in the given context,D:\a\1\s\Dev\Dev2.Studio\Views\ShellView.xaml.cs(675,32): error CS0103: The name 'GetTemplateChild' does not exist in the current context,D:\a\1\s\Dev\Dev2.Studio\Views\ShellView.xaml.cs(689,17): error CS0118: 'ResizeMode' is a type but is used like a variable,D:\a\1\s\Dev\Dev2.Studio\Views\ShellView.xaml.cs(689,30): error CS0119: 'WindowState' is a type, which is not valid in the given context,D:\a\1\s\Dev\Dev2.Studio\Views\ShellView.xaml.cs(693,21): error CS0119: 'WindowState' is a type, which is not valid in the given context,D:\a\1\s\Dev\Dev2.Studio\Views\ShellView.xaml.cs(697,17): error CS0103: The name 'DragMove' does not exist in the current context,D:\a\1\s\Dev\Dev2.Studio\Views\ShellView.xaml.cs(703,21): error CS0119: 'WindowState' is a type, which is not valid in the given context,D:\a\1\s\Dev\Dev2.Studio\Views\ShellView.xaml.cs(707,25): error CS0118: 'WindowState' is a type but is used like a variable,D:\a\1\s\Dev\Dev2.Studio\Views\ShellView.xaml.cs(712,25): error CS0118: 'WindowState' is a type but is used like a variable,D:\a\1\s\Dev\Dev2.Studio\Views\ShellView.xaml.cs(719,21): error CS0118: 'WindowState' is a type but is used like a variable,D:\a\1\s\Dev\Dev2.Studio\Views\ShellView.xaml.cs(726,13): error CS0103: The name 'Close' does not exist in the current context,D:\a\1\s\Dev\Dev2.Studio\Views\ShellView.xaml.cs(736,13): error CS0118: 'WindowState' is a type but is used like a variable,D:\a\1\s\Dev\Dev2.Studio\Views\ShellView.xaml.cs(736,27): error CS0119: 'WindowState' is a type, which is not valid in the given context,D:\a\1\s\Dev\Dev2.Studio\Views\ShellView.xaml.cs(737,13): error CS0118: 'ResizeMode' is a type but is used like a variable,D:\a\1\s\Dev\Dev2.Studio\Views\ShellView.xaml.cs(737,26): error CS0119: 'WindowState' is a type, which is not valid in the given context,D:\a\1\s\Dev\Dev2.Studio\Views\ShellView.xaml.cs(742,13): error CS0118: 'WindowState' is a type but is used like a variable,D:\a\1\s\Dev\Dev2.Studio\Views\ShellView.xaml.cs(752,36): error CS0103: The name 'GetTemplateChild' does not exist in the current context,D:\a\1\s\Dev\Dev2.Studio\Views\ShellView.xaml.cs(758,21): error CS0103: The name 'HideFullScreenPanel' does not exist in the current context,D:\a\1\s\Dev\Dev2.Studio\Views\ShellView.xaml.cs(759,21): error CS0103: The name 'ShowFullScreenPanel' does not exist in the current context,D:\a\1\s\Dev\Dev2.Studio\Views\ShellView.xaml.cs(767,43): error CS0103: The name 'ContentProperty' does not exist in the current context,D:\a\1\s\Dev\Dev2.Studio\Views\ShellView.xaml.cs(789,59): error CS1503: Argument 1: cannot convert from 'Dev2.Studio.Views.ShellView' to 'System.Windows.IInputElement',D:\a\1\s\Dev\Dev2.Studio\Views\ShellView.xaml.cs(789,69): error CS0103: The name 'ActualWidth' does not exist in the current context,D:\a\1\s\Dev\Dev2.Studio\Views\ShellView.xaml.cs(790,44): error CS0103: The name 'RestoreBounds' does not exist in the current context,D:\a\1\s\Dev\Dev2.Studio\Views\ShellView.xaml.cs(792,57): error CS1503: Argument 1: cannot convert from 'Dev2.Studio.Views.ShellView' to 'System.Windows.IInputElement',D:\a\1\s\Dev\Dev2.Studio\Views\ShellView.xaml.cs(792,67): error CS0103: The name 'ActualHeight' does not exist in the current context,D:\a\1\s\Dev\Dev2.Studio\Views\ShellView.xaml.cs(793,42): error CS0103: The name 'RestoreBounds' does not exist in the current context,D:\a\1\s\Dev\Dev2.Studio\Views\ShellView.xaml.cs(795,21): error CS0118: 'WindowState' is a type but is used like a variable,D:\a\1\s\Dev\Dev2.Studio\Views\ShellView.xaml.cs(796,21): error CS0118: 'ResizeMode' is a type but is used like a variable,D:\a\1\s\Dev\Dev2.Studio\Views\ShellView.xaml.cs(796,34): error CS0119: 'WindowState' is a type, which is not valid in the given context,D:\a\1\s\Dev\Dev2.Studio\Views\ShellView.xaml.cs(800,21): error CS0103: The name 'Left' does not exist in the current context,D:\a\1\s\Dev\Dev2.Studio\Views\ShellView.xaml.cs(801,21): error CS0103: The name 'Top' does not exist in the current context,D:\a\1\s\Dev\Dev2.Studio\Views\ShellView.xaml.cs(803,21): error CS0103: The name 'DragMove' does not exist in the current context,D:\a\1\s\Dev\Dev2.Studio\Views\ShellView.xaml.cs(812,25): error CS0118: 'WindowState' is a type but is used like a variable,D:\a\1\s\Dev\Dev2.Studio\Views\ShellView.xaml.cs(830,44): error CS0103: The name 'Title' does not exist in the current context
######################################################################


######################################################################
Nr: 7 - UsePatternMatchingRewriterR8
Filepath: D:\a\1\s\Dev\Dev2.Activities\Activities\DsfDotNetGatherSystemInformationActivity.cs
Description: Error: The created Syntax Tree is semantically incorrect.
------------------------------------------------------------------------
---- Original Tree ----
using System;
using System.Activities;
using System.Activities.Presentation.Model;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Security.Principal;
using Dev2.Activities.Debug;
using Dev2.Common;
using Dev2.Common.ExtMethods;
using Dev2.Common.Interfaces.Diagnostics.Debug;
using Dev2.Common.Interfaces.Toolbox;
using Dev2.Common.State;
using Dev2.Data.Interfaces.Enums;
using Dev2.Data.TO;
using Dev2.DataList.Contract;
using Dev2.Diagnostics;
using Dev2.Interfaces;
using Dev2.Utilities;
using Unlimited.Applications.BusinessDesignStudio.Activities;
using Warewolf.Core;
using Warewolf.Resource.Errors;
using Warewolf.Storage.Interfaces;
using WarewolfParserInterop;

namespace Dev2.Activities
{
    [ToolDescriptorInfo("Utility-SystemInformation", "Sys Info", ToolType.Native, "8999E59A-38A3-43BB-A98F-6090C5C9EA1E", "Dev2.Activities", "1.0.0.0", "Legacy", "Utility", "/Warewolf.Studio.Themes.Luna;component/Images.xaml", "Tool_Utility_Sys_Info")]
    public class DsfDotNetGatherSystemInformationActivity : DsfActivityAbstract<string>, ICollectionActivity
    {
        IGetSystemInformation _getSystemInformation;
        IIdentity _currentIdentity;

        public IList<GatherSystemInformationTO> SystemInformationCollection { get; set; }

        public IGetSystemInformation GetSystemInformation
        {
            get => _getSystemInformation ?? (_getSystemInformation = new GetSystemInformationStandardHelper());
            set
            {
                _getSystemInformation = value;
            }
        }

        public override List<string> GetOutputs() => SystemInformationCollection.Select(to => to.Result).ToList();

        public DsfDotNetGatherSystemInformationActivity()
            : base("Gather System Information")
        {
            SystemInformationCollection = new List<GatherSystemInformationTO>();
        }

        public override IEnumerable<StateVariable> GetState()
        {
            return new[]
            {
                new StateVariable
                {
                    Name="SystemInformationCollection",
                    Type=StateVariable.StateType.InputOutput,
                    Value= ActivityHelper.GetSerializedStateValueFromCollection(SystemInformationCollection)
                }
            };
        }

        void CleanArgs()
        {
            var count = 0;
            while (count < SystemInformationCollection.Count)
            {
                if (string.IsNullOrWhiteSpace(SystemInformationCollection[count].Result))
                {
                    SystemInformationCollection.RemoveAt(count);
                }
                else
                {
                    count++;
                }
            }
        }

        protected override void OnExecute(NativeActivityContext context)
        {
            var dataObject = context.GetExtension<IDSFDataObject>();
            ExecuteTool(dataObject, 0);
        }

        protected override void ExecuteTool(IDSFDataObject dataObject, int update)
        {
            var allErrors = new ErrorResultTO();

            if (dataObject.ExecutingUser != null)
            {
                _currentIdentity = dataObject.ExecutingUser.Identity;
            }
            InitializeDebug(dataObject);
            try
            {
                TryExecute(dataObject, update, allErrors);
            }
            catch (Exception e)
            {
                Dev2Logger.Error("DSFGatherSystemInformationTool", e, GlobalConstants.WarewolfError);
                allErrors.AddError(e.Message);
            }
            finally
            {
                HandleErrors(dataObject, update, allErrors);
            }
        }

        private void TryExecute(IDSFDataObject dataObject, int update, ErrorResultTO allErrors)
        {
            CleanArgs();

            var indexCounter = 0;
            foreach (GatherSystemInformationTO item in SystemInformationCollection)
            {
                try
                {
                    indexCounter++;

                    if (dataObject.IsDebugMode())
                    {
                        var inputToAdd = new DebugItem();
                        AddDebugItem(new DebugItemStaticDataParams("", indexCounter.ToString(CultureInfo.InvariantCulture)), inputToAdd);
                        AddDebugItem(new DebugItemStaticDataParams("", dataObject.Environment.EvalToExpression(item.Result, update), "", "="), inputToAdd);
                        AddDebugItem(new DebugItemStaticDataParams(item.EnTypeOfSystemInformation.GetDescription(), ""), inputToAdd);
                        _debugInputs.Add(inputToAdd);
                    }

                    if (!allErrors.HasErrors())
                    {
                        HandleNoErrorsFound(dataObject, update, allErrors, item);
                    }
                }
                catch (Exception err)
                {
                    dataObject.Environment.Assign(item.Result, null, update);
                    allErrors.AddError(err.Message);
                }
            }
            dataObject.Environment.CommitAssign();
            if (dataObject.IsDebugMode() && !allErrors.HasErrors())
            {
                var innerCount = 1;
                foreach (GatherSystemInformationTO item in SystemInformationCollection)
                {
                    var itemToAdd = new DebugItem();
                    AddDebugItem(new DebugItemStaticDataParams("", "", innerCount.ToString(CultureInfo.InvariantCulture)), itemToAdd);
                    AddDebugItem(new DebugEvalResult(item.Result, "", dataObject.Environment, update), itemToAdd);
                    _debugOutputs.Add(itemToAdd);
                    innerCount++;
                }
            }
        }

        void HandleNoErrorsFound(IDSFDataObject dataObject, int update, ErrorResultTO allErrors, GatherSystemInformationTO item)
        {
            var val = GetCorrectSystemInformation(item.EnTypeOfSystemInformation);
            var expression = item.Result;

            var regions = DataListCleaningUtils.SplitIntoRegions(expression);
            if (regions.Count > 1)
            {
                allErrors.AddError(ErrorResource.MultipleVariablesInResultField);
            }
            else
            {
                foreach (var region in regions)
                {
                    dataObject.Environment.AssignWithFrame(new AssignValue(region, val), update);
                }
            }
        }

        void HandleErrors(IDSFDataObject dataObject, int update, ErrorResultTO allErrors)
        {
            var hasErrors = allErrors.HasErrors();
            if (hasErrors)
            {
                DisplayAndWriteError(nameof(DsfDotNetGatherSystemInformationActivity), allErrors);
                foreach (var error in allErrors.FetchErrors())
                {
                    dataObject.Environment.AddError(error);
                }
            }
            if (dataObject.IsDebugMode())
            {
                if (hasErrors)
                {
                    var innerCount = 1;
                    foreach (GatherSystemInformationTO item in SystemInformationCollection)
                    {
                        var itemToAdd = new DebugItem();
                        AddDebugItem(new DebugItemStaticDataParams("", innerCount.ToString(CultureInfo.InvariantCulture)), itemToAdd);
                        AddDebugItem(new DebugEvalResult(item.Result, "", dataObject.Environment, update), itemToAdd);
                        _debugOutputs.Add(itemToAdd);
                        innerCount++;
                    }
                }

                DispatchDebugState(dataObject, StateType.Before, update);
                DispatchDebugState(dataObject, StateType.After, update);
            }
        }

#pragma warning disable S1541 // Methods and properties should not be too complex
        public string GetCorrectSystemInformation(enTypeOfSystemInformationToGather enTypeOfSystemInformation)
#pragma warning restore S1541 // Methods and properties should not be too complex
        {
            switch (enTypeOfSystemInformation)
            {
                case enTypeOfSystemInformationToGather.ComputerName:
                    return GetSystemInformation.GetComputerName();
                case enTypeOfSystemInformationToGather.OperatingSystem:
                    return GetSystemInformation.GetOperatingSystemInformation();
                case enTypeOfSystemInformationToGather.OperatingSystemVersion:
                    return GetSystemInformation.GetOperatingSystemVersionInformation();
                case enTypeOfSystemInformationToGather.ServicePack:
                    return GetSystemInformation.GetServicePackInformation();
                case enTypeOfSystemInformationToGather.OSBitValue:
                    return GetSystemInformation.GetOSBitValueInformation();
                case enTypeOfSystemInformationToGather.FullDateTime:
                    return GetSystemInformation.GetFullDateTimeInformation();
                case enTypeOfSystemInformationToGather.DateTimeFormat:
                    return GetSystemInformation.GetDateTimeFormatInformation();
                case enTypeOfSystemInformationToGather.DiskAvailable:
                    return GetSystemInformation.GetDiskSpaceAvailableInformation();
                case enTypeOfSystemInformationToGather.DiskTotal:
                    return GetSystemInformation.GetDiskSpaceTotalInformation();
                case enTypeOfSystemInformationToGather.VirtualMemoryAvailable:
                    return GetSystemInformation.GetVirtualMemoryAvailableInformation();
                case enTypeOfSystemInformationToGather.VirtualMemoryTotal:
                    return GetSystemInformation.GetVirtualMemoryTotalInformation();
                case enTypeOfSystemInformationToGather.PhysicalMemoryAvailable:
                    return GetSystemInformation.GetPhysicalMemoryAvailableInformation();
                case enTypeOfSystemInformationToGather.PhysicalMemoryTotal:
                    return GetSystemInformation.GetPhysicalMemoryTotalInformation();
                case enTypeOfSystemInformationToGather.CPUAvailable:
                    return GetSystemInformation.GetCPUAvailableInformation();
                case enTypeOfSystemInformationToGather.CPUTotal:
                    return GetSystemInformation.GetCPUTotalInformation();
                case enTypeOfSystemInformationToGather.Language:
                    return GetSystemInformation.GetLanguageInformation();
                case enTypeOfSystemInformationToGather.Region:
                    return GetSystemInformation.GetRegionInformation();
                case enTypeOfSystemInformationToGather.UserRoles:
                    return GetSystemInformation.GetUserRolesInformation(_currentIdentity);
                case enTypeOfSystemInformationToGather.UserName:
                    return GetSystemInformation.GetUserNameInformation();
                case enTypeOfSystemInformationToGather.Domain:
                    return GetSystemInformation.GetDomainInformation();
                case enTypeOfSystemInformationToGather.NumberOfServerNICS:
                    return GetSystemInformation.GetNumberOfNICS();
                case enTypeOfSystemInformationToGather.MacAddress:
                    return GetSystemInformation.GetMACAdresses();
                case enTypeOfSystemInformationToGather.GateWayAddress:
                    return GetSystemInformation.GetDefaultGateway();
                case enTypeOfSystemInformationToGather.DNSAddress:
                    return GetSystemInformation.GetDNSServer();
                case enTypeOfSystemInformationToGather.IPv4Address:
                    return GetSystemInformation.GetIPv4Adresses();
                case enTypeOfSystemInformationToGather.IPv6Address:
                    return GetSystemInformation.GetIPv6Adresses();
                case enTypeOfSystemInformationToGather.WarewolfMemory:
                    return GetSystemInformation.GetWarewolfServerMemory();
                case enTypeOfSystemInformationToGather.WarewolfCPU:
                    return GetSystemInformation.GetWarewolfCPU();
                case enTypeOfSystemInformationToGather.WarewolfServerVersion:
                    return GetSystemInformation.GetWareWolfVersion();
                default:
                    throw new ArgumentOutOfRangeException("enTypeOfSystemInformation");
            }
        }

        public override IList<DsfForEachItem> GetForEachInputs()
        {
            var enumerable = SystemInformationCollection.Select(to => to.Result);
            return GetForEachItems(enumerable.ToArray());
        }

        public override IList<DsfForEachItem> GetForEachOutputs()
        {
            var enumerable = SystemInformationCollection.Select(to => to.Result);
            return GetForEachItems(enumerable.ToArray());
        }

        public override enFindMissingType GetFindMissingType() => enFindMissingType.DataGridActivity;

        public override void UpdateForEachInputs(IList<Tuple<string, string>> updates)
        {
            if (updates != null)
            {
                foreach (Tuple<string, string> t in updates)
                {
                    var t1 = t;
                    var items = SystemInformationCollection.Where(c => !string.IsNullOrEmpty(c.Result) && c.Result.Equals(t1.Item1));

                    foreach (var a in items)
                    {
                        a.Result = t.Item2;
                    }
                }
            }
        }

        public override void UpdateForEachOutputs(IList<Tuple<string, string>> updates)
        {
            if (updates != null)
            {
                foreach (Tuple<string, string> t in updates)
                {
                    var t1 = t;
                    var items = SystemInformationCollection.Where(c => !string.IsNullOrEmpty(c.Result) && c.Result.Equals(t1.Item1));

                    foreach (var a in items)
                    {
                        a.Result = t.Item2;
                    }
                }
            }
        }

        public override List<DebugItem> GetDebugInputs(IExecutionEnvironment env, int update) => _debugInputs;

        public override List<DebugItem> GetDebugOutputs(IExecutionEnvironment env, int update)
        {
            foreach (IDebugItem debugOutput in _debugOutputs)
            {
                debugOutput.FlushStringBuilder();
            }
            return _debugOutputs;
        }

        void InsertToCollection(IEnumerable<string> listToAdd, ModelItem modelItem)
        {
            var modelProperty = modelItem.Properties["SystemInformationCollection"];
            var mic = modelProperty?.Collection;
            if (mic == null)
            {
                return;
            }
            var listOfValidRows = SystemInformationCollection.Where(c => !c.CanRemove()).ToList();
            if (listOfValidRows.Count > 0)
            {
                var gatherSystemInformationTo = SystemInformationCollection.Last(c => !c.CanRemove());
                var startIndex = SystemInformationCollection.IndexOf(gatherSystemInformationTo) + 1;
                foreach (string s in listToAdd)
                {
                    mic.Insert(startIndex, new GatherSystemInformationTO(SystemInformationCollection[startIndex - 1].EnTypeOfSystemInformation, s, startIndex + 1));
                    startIndex++;
                }
                CleanUpCollection(mic, modelItem, startIndex);
            }
            else
            {
                AddToCollection(listToAdd, modelItem);
            }
        }

        void AddToCollection(IEnumerable<string> listToAdd, ModelItem modelItem)
        {
            var modelProperty = modelItem.Properties["SystemInformationCollection"];
            var mic = modelProperty?.Collection;
            if (mic == null)
            {
                return;
            }
            var startIndex = 0;
            const enTypeOfSystemInformationToGather EnTypeOfSystemInformation = enTypeOfSystemInformationToGather.FullDateTime;
            mic.Clear();
            foreach (string s in listToAdd)
            {
                mic.Add(new GatherSystemInformationTO(EnTypeOfSystemInformation, s, startIndex + 1));
                startIndex++;
            }
            CleanUpCollection(mic, modelItem, startIndex);
        }

        void CleanUpCollection(ModelItemCollection mic, ModelItem modelItem, int startIndex)
        {
            if (startIndex < mic.Count)
            {
                mic.RemoveAt(startIndex);
            }
            mic.Add(new GatherSystemInformationTO(enTypeOfSystemInformationToGather.FullDateTime, string.Empty, startIndex + 1));
            var modelProperty = modelItem.Properties["DisplayName"];
            modelProperty?.SetValue(CreateDisplayName(modelItem, startIndex + 1));
        }

        string CreateDisplayName(ModelItem modelItem, int count)
        {
            var modelProperty = modelItem.Properties["DisplayName"];
            if (modelProperty != null)
            {
                var currentName = modelProperty.ComputedValue as string;
                if (currentName != null && currentName.Contains("(") && currentName.Contains(")"))
                {
                    currentName = currentName.Remove(currentName.Contains(" (") ? currentName.IndexOf(" (", StringComparison.Ordinal) : currentName.IndexOf("(", StringComparison.Ordinal));
                }
                currentName = currentName + " (" + (count - 1) + ")";
                return currentName;
            }

            return string.Empty;
        }

        public int GetCollectionCount() => SystemInformationCollection.Count(caseConvertTo => !caseConvertTo.CanRemove());

        public void AddListToCollection(IList<string> listToAdd, bool overwrite, ModelItem modelItem)
        {
            if (!overwrite)
            {
                InsertToCollection(listToAdd, modelItem);
            }
            else
            {
                AddToCollection(listToAdd, modelItem);
            }
        }

        public bool Equals(DsfDotNetGatherSystemInformationActivity other)
        {
            var eq = base.Equals(other);
            eq &= DisplayName.Equals(other.DisplayName);
            if (!(_getSystemInformation is null))
            {
                eq &= _getSystemInformation.Equals(other._getSystemInformation);
            }
            if (!(_currentIdentity is null)) {
                eq &= _currentIdentity.Equals(other._currentIdentity);
            }

            return eq;
        }

        public override bool Equals(object obj)
        {
            if (obj is DsfDotNetGatherSystemInformationActivity instance)
            {
                return Equals(instance);
            }
            return false;
        }
    }
}

---- Transformed Tree ----
using System;
using System.Activities;
using System.Activities.Presentation.Model;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Security.Principal;
using Dev2.Activities.Debug;
using Dev2.Common;
using Dev2.Common.ExtMethods;
using Dev2.Common.Interfaces.Diagnostics.Debug;
using Dev2.Common.Interfaces.Toolbox;
using Dev2.Common.State;
using Dev2.Data.Interfaces.Enums;
using Dev2.Data.TO;
using Dev2.DataList.Contract;
using Dev2.Diagnostics;
using Dev2.Interfaces;
using Dev2.Utilities;
using Unlimited.Applications.BusinessDesignStudio.Activities;
using Warewolf.Core;
using Warewolf.Resource.Errors;
using Warewolf.Storage.Interfaces;
using WarewolfParserInterop;

namespace Dev2.Activities
{
    [ToolDescriptorInfo("Utility-SystemInformation", "Sys Info", ToolType.Native, "8999E59A-38A3-43BB-A98F-6090C5C9EA1E", "Dev2.Activities", "1.0.0.0", "Legacy", "Utility", "/Warewolf.Studio.Themes.Luna;component/Images.xaml", "Tool_Utility_Sys_Info")]
    public class DsfDotNetGatherSystemInformationActivity : DsfActivityAbstract<string>, ICollectionActivity
    {
        IGetSystemInformation _getSystemInformation;
        IIdentity _currentIdentity;

        public IList<GatherSystemInformationTO> SystemInformationCollection { get; set; }

        public IGetSystemInformation GetSystemInformation
        {
            get => _getSystemInformation ?? (_getSystemInformation = new GetSystemInformationStandardHelper());
            set
            {
                _getSystemInformation = value;
            }
        }

        public override List<string> GetOutputs() => SystemInformationCollection.Select(to => to.Result).ToList();

        public DsfDotNetGatherSystemInformationActivity()
            : base("Gather System Information")
        {
            SystemInformationCollection = new List<GatherSystemInformationTO>();
        }

        public override IEnumerable<StateVariable> GetState()
        {
            return new[]
            {
                new StateVariable
                {
                    Name="SystemInformationCollection",
                    Type=StateVariable.StateType.InputOutput,
                    Value= ActivityHelper.GetSerializedStateValueFromCollection(SystemInformationCollection)
                }
            };
        }

        void CleanArgs()
        {
            var count = 0;
            while (count < SystemInformationCollection.Count)
            {
                if (string.IsNullOrWhiteSpace(SystemInformationCollection[count].Result))
                {
                    SystemInformationCollection.RemoveAt(count);
                }
                else
                {
                    count++;
                }
            }
        }

        protected override void OnExecute(NativeActivityContext context)
        {
            var dataObject = context.GetExtension<IDSFDataObject>();
            ExecuteTool(dataObject, 0);
        }

        protected override void ExecuteTool(IDSFDataObject dataObject, int update)
        {
            var allErrors = new ErrorResultTO();

            if (dataObject.ExecutingUser != null)
            {
                _currentIdentity = dataObject.ExecutingUser.Identity;
            }
            InitializeDebug(dataObject);
            try
            {
                TryExecute(dataObject, update, allErrors);
            }
            catch (Exception e)
            {
                Dev2Logger.Error("DSFGatherSystemInformationTool", e, GlobalConstants.WarewolfError);
                allErrors.AddError(e.Message);
            }
            finally
            {
                HandleErrors(dataObject, update, allErrors);
            }
        }

        private void TryExecute(IDSFDataObject dataObject, int update, ErrorResultTO allErrors)
        {
            CleanArgs();

            var indexCounter = 0;
            foreach (GatherSystemInformationTO item in SystemInformationCollection)
            {
                try
                {
                    indexCounter++;

                    if (dataObject.IsDebugMode())
                    {
                        var inputToAdd = new DebugItem();
                        AddDebugItem(new DebugItemStaticDataParams("", indexCounter.ToString(CultureInfo.InvariantCulture)), inputToAdd);
                        AddDebugItem(new DebugItemStaticDataParams("", dataObject.Environment.EvalToExpression(item.Result, update), "", "="), inputToAdd);
                        AddDebugItem(new DebugItemStaticDataParams(item.EnTypeOfSystemInformation.GetDescription(), ""), inputToAdd);
                        _debugInputs.Add(inputToAdd);
                    }

                    if (!allErrors.HasErrors())
                    {
                        HandleNoErrorsFound(dataObject, update, allErrors, item);
                    }
                }
                catch (Exception err)
                {
                    dataObject.Environment.Assign(item.Result, null, update);
                    allErrors.AddError(err.Message);
                }
            }
            dataObject.Environment.CommitAssign();
            if (dataObject.IsDebugMode() && !allErrors.HasErrors())
            {
                var innerCount = 1;
                foreach (GatherSystemInformationTO item in SystemInformationCollection)
                {
                    var itemToAdd = new DebugItem();
                    AddDebugItem(new DebugItemStaticDataParams("", "", innerCount.ToString(CultureInfo.InvariantCulture)), itemToAdd);
                    AddDebugItem(new DebugEvalResult(item.Result, "", dataObject.Environment, update), itemToAdd);
                    _debugOutputs.Add(itemToAdd);
                    innerCount++;
                }
            }
        }

        void HandleNoErrorsFound(IDSFDataObject dataObject, int update, ErrorResultTO allErrors, GatherSystemInformationTO item)
        {
            var val = GetCorrectSystemInformation(item.EnTypeOfSystemInformation);
            var expression = item.Result;

            var regions = DataListCleaningUtils.SplitIntoRegions(expression);
            if (regions.Count > 1)
            {
                allErrors.AddError(ErrorResource.MultipleVariablesInResultField);
            }
            else
            {
                foreach (var region in regions)
                {
                    dataObject.Environment.AssignWithFrame(new AssignValue(region, val), update);
                }
            }
        }

        void HandleErrors(IDSFDataObject dataObject, int update, ErrorResultTO allErrors)
        {
            var hasErrors = allErrors.HasErrors();
            if (hasErrors)
            {
                DisplayAndWriteError(nameof(DsfDotNetGatherSystemInformationActivity), allErrors);
                foreach (var error in allErrors.FetchErrors())
                {
                    dataObject.Environment.AddError(error);
                }
            }
            if (dataObject.IsDebugMode())
            {
                if (hasErrors)
                {
                    var innerCount = 1;
                    foreach (GatherSystemInformationTO item in SystemInformationCollection)
                    {
                        var itemToAdd = new DebugItem();
                        AddDebugItem(new DebugItemStaticDataParams("", innerCount.ToString(CultureInfo.InvariantCulture)), itemToAdd);
                        AddDebugItem(new DebugEvalResult(item.Result, "", dataObject.Environment, update), itemToAdd);
                        _debugOutputs.Add(itemToAdd);
                        innerCount++;
                    }
                }

                DispatchDebugState(dataObject, StateType.Before, update);
                DispatchDebugState(dataObject, StateType.After, update);
            }
        }

#pragma warning disable S1541 // Methods and properties should not be too complex
        public string GetCorrectSystemInformation(enTypeOfSystemInformationToGather enTypeOfSystemInformation)
#pragma warning restore S1541 // Methods and properties should not be too complex
        {
            switch (enTypeOfSystemInformation)
            {
                case enTypeOfSystemInformationToGather.ComputerName:
                    return GetSystemInformation.GetComputerName();
                case enTypeOfSystemInformationToGather.OperatingSystem:
                    return GetSystemInformation.GetOperatingSystemInformation();
                case enTypeOfSystemInformationToGather.OperatingSystemVersion:
                    return GetSystemInformation.GetOperatingSystemVersionInformation();
                case enTypeOfSystemInformationToGather.ServicePack:
                    return GetSystemInformation.GetServicePackInformation();
                case enTypeOfSystemInformationToGather.OSBitValue:
                    return GetSystemInformation.GetOSBitValueInformation();
                case enTypeOfSystemInformationToGather.FullDateTime:
                    return GetSystemInformation.GetFullDateTimeInformation();
                case enTypeOfSystemInformationToGather.DateTimeFormat:
                    return GetSystemInformation.GetDateTimeFormatInformation();
                case enTypeOfSystemInformationToGather.DiskAvailable:
                    return GetSystemInformation.GetDiskSpaceAvailableInformation();
                case enTypeOfSystemInformationToGather.DiskTotal:
                    return GetSystemInformation.GetDiskSpaceTotalInformation();
                case enTypeOfSystemInformationToGather.VirtualMemoryAvailable:
                    return GetSystemInformation.GetVirtualMemoryAvailableInformation();
                case enTypeOfSystemInformationToGather.VirtualMemoryTotal:
                    return GetSystemInformation.GetVirtualMemoryTotalInformation();
                case enTypeOfSystemInformationToGather.PhysicalMemoryAvailable:
                    return GetSystemInformation.GetPhysicalMemoryAvailableInformation();
                case enTypeOfSystemInformationToGather.PhysicalMemoryTotal:
                    return GetSystemInformation.GetPhysicalMemoryTotalInformation();
                case enTypeOfSystemInformationToGather.CPUAvailable:
                    return GetSystemInformation.GetCPUAvailableInformation();
                case enTypeOfSystemInformationToGather.CPUTotal:
                    return GetSystemInformation.GetCPUTotalInformation();
                case enTypeOfSystemInformationToGather.Language:
                    return GetSystemInformation.GetLanguageInformation();
                case enTypeOfSystemInformationToGather.Region:
                    return GetSystemInformation.GetRegionInformation();
                case enTypeOfSystemInformationToGather.UserRoles:
                    return GetSystemInformation.GetUserRolesInformation(_currentIdentity);
                case enTypeOfSystemInformationToGather.UserName:
                    return GetSystemInformation.GetUserNameInformation();
                case enTypeOfSystemInformationToGather.Domain:
                    return GetSystemInformation.GetDomainInformation();
                case enTypeOfSystemInformationToGather.NumberOfServerNICS:
                    return GetSystemInformation.GetNumberOfNICS();
                case enTypeOfSystemInformationToGather.MacAddress:
                    return GetSystemInformation.GetMACAdresses();
                case enTypeOfSystemInformationToGather.GateWayAddress:
                    return GetSystemInformation.GetDefaultGateway();
                case enTypeOfSystemInformationToGather.DNSAddress:
                    return GetSystemInformation.GetDNSServer();
                case enTypeOfSystemInformationToGather.IPv4Address:
                    return GetSystemInformation.GetIPv4Adresses();
                case enTypeOfSystemInformationToGather.IPv6Address:
                    return GetSystemInformation.GetIPv6Adresses();
                case enTypeOfSystemInformationToGather.WarewolfMemory:
                    return GetSystemInformation.GetWarewolfServerMemory();
                case enTypeOfSystemInformationToGather.WarewolfCPU:
                    return GetSystemInformation.GetWarewolfCPU();
                case enTypeOfSystemInformationToGather.WarewolfServerVersion:
                    return GetSystemInformation.GetWareWolfVersion();
                default:
                    throw new ArgumentOutOfRangeException("enTypeOfSystemInformation");
            }
        }

        public override IList<DsfForEachItem> GetForEachInputs()
        {
            var enumerable = SystemInformationCollection.Select(to => to.Result);
            return GetForEachItems(enumerable.ToArray());
        }

        public override IList<DsfForEachItem> GetForEachOutputs()
        {
            var enumerable = SystemInformationCollection.Select(to => to.Result);
            return GetForEachItems(enumerable.ToArray());
        }

        public override enFindMissingType GetFindMissingType() => enFindMissingType.DataGridActivity;

        public override void UpdateForEachInputs(IList<Tuple<string, string>> updates)
        {
            if (updates != null)
            {
                foreach (Tuple<string, string> t in updates)
                {
                    var t1 = t;
                    var items = SystemInformationCollection.Where(c => !string.IsNullOrEmpty(c.Result) && c.Result.Equals(t1.Item1));

                    foreach (var a in items)
                    {
                        a.Result = t.Item2;
                    }
                }
            }
        }

        public override void UpdateForEachOutputs(IList<Tuple<string, string>> updates)
        {
            if (updates != null)
            {
                foreach (Tuple<string, string> t in updates)
                {
                    var t1 = t;
                    var items = SystemInformationCollection.Where(c => !string.IsNullOrEmpty(c.Result) && c.Result.Equals(t1.Item1));

                    foreach (var a in items)
                    {
                        a.Result = t.Item2;
                    }
                }
            }
        }

        public override List<DebugItem> GetDebugInputs(IExecutionEnvironment env, int update) => _debugInputs;

        public override List<DebugItem> GetDebugOutputs(IExecutionEnvironment env, int update)
        {
            foreach (IDebugItem debugOutput in _debugOutputs)
            {
                debugOutput.FlushStringBuilder();
            }
            return _debugOutputs;
        }

        void InsertToCollection(IEnumerable<string> listToAdd, ModelItem modelItem)
        {
            var modelProperty = modelItem.Properties["SystemInformationCollection"];
            var mic = modelProperty?.Collection;
            if (mic == null)
            {
                return;
            }
            var listOfValidRows = SystemInformationCollection.Where(c => !c.CanRemove()).ToList();
            if (listOfValidRows.Count > 0)
            {
                var gatherSystemInformationTo = SystemInformationCollection.Last(c => !c.CanRemove());
                var startIndex = SystemInformationCollection.IndexOf(gatherSystemInformationTo) + 1;
                foreach (string s in listToAdd)
                {
                    mic.Insert(startIndex, new GatherSystemInformationTO(SystemInformationCollection[startIndex - 1].EnTypeOfSystemInformation, s, startIndex + 1));
                    startIndex++;
                }
                CleanUpCollection(mic, modelItem, startIndex);
            }
            else
            {
                AddToCollection(listToAdd, modelItem);
            }
        }

        void AddToCollection(IEnumerable<string> listToAdd, ModelItem modelItem)
        {
            var modelProperty = modelItem.Properties["SystemInformationCollection"];
            var mic = modelProperty?.Collection;
            if (mic == null)
            {
                return;
            }
            var startIndex = 0;
            const enTypeOfSystemInformationToGather EnTypeOfSystemInformation = enTypeOfSystemInformationToGather.FullDateTime;
            mic.Clear();
            foreach (string s in listToAdd)
            {
                mic.Add(new GatherSystemInformationTO(EnTypeOfSystemInformation, s, startIndex + 1));
                startIndex++;
            }
            CleanUpCollection(mic, modelItem, startIndex);
        }

        void CleanUpCollection(ModelItemCollection mic, ModelItem modelItem, int startIndex)
        {
            if (startIndex < mic.Count)
            {
                mic.RemoveAt(startIndex);
            }
            mic.Add(new GatherSystemInformationTO(enTypeOfSystemInformationToGather.FullDateTime, string.Empty, startIndex + 1));
            var modelProperty = modelItem.Properties["DisplayName"];
            modelProperty?.SetValue(CreateDisplayName(modelItem, startIndex + 1));
        }

        string CreateDisplayName(ModelItem modelItem, int count)
        {
            var modelProperty = modelItem.Properties["DisplayName"];
            if (modelProperty != null)
            {
                if (modelProperty.ComputedValue is string currentName && currentName.Contains("(") && currentName.Contains(")"))
                {
                    currentName = currentName.Remove(currentName.Contains(" (") ? currentName.IndexOf(" (", StringComparison.Ordinal) : currentName.IndexOf("(", StringComparison.Ordinal));
                }
                currentName = currentName + " (" + (count - 1) + ")";
                return currentName;
            }

            return string.Empty;
        }

        public int GetCollectionCount() => SystemInformationCollection.Count(caseConvertTo => !caseConvertTo.CanRemove());

        public void AddListToCollection(IList<string> listToAdd, bool overwrite, ModelItem modelItem)
        {
            if (!overwrite)
            {
                InsertToCollection(listToAdd, modelItem);
            }
            else
            {
                AddToCollection(listToAdd, modelItem);
            }
        }

        public bool Equals(DsfDotNetGatherSystemInformationActivity other)
        {
            var eq = base.Equals(other);
            eq &= DisplayName.Equals(other.DisplayName);
            if (!(_getSystemInformation is null))
            {
                eq &= _getSystemInformation.Equals(other._getSystemInformation);
            }
            if (!(_currentIdentity is null)) {
                eq &= _currentIdentity.Equals(other._currentIdentity);
            }

            return eq;
        }

        public override bool Equals(object obj)
        {
            if (obj is DsfDotNetGatherSystemInformationActivity instance)
            {
                return Equals(instance);
            }
            return false;
        }
    }
}

---- Semantic diagnostics *before* transformation ----

---- Semantic diagnostics *after* transformation ----
D:\a\1\s\Dev\Dev2.Activities\Activities\DsfDotNetGatherSystemInformationActivity.cs(412,31): error CS0165: Use of unassigned local variable 'currentName'
######################################################################


######################################################################
Nr: 8 - UsePatternMatchingRewriterR8
Filepath: D:\a\1\s\Dev\Dev2.Activities\Activities\DsfFindRecordsMultipleCriteriaActivity.cs
Description: Error: The created Syntax Tree is semantically incorrect.
------------------------------------------------------------------------
---- Original Tree ----
using System;
using System.Activities;
using System.Activities.Presentation.Model;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using Dev2;
using Dev2.Activities;
using Dev2.Activities.Debug;
using Dev2.Common;
using Dev2.Common.Interfaces.Diagnostics.Debug;
using Dev2.Common.Interfaces.Toolbox;
using Dev2.Data.TO;
using Dev2.Data.Util;
using Dev2.DataList;
using Dev2.DataList.Contract;
using Dev2.Diagnostics;
using Dev2.Interfaces;
using Dev2.Util;
using Unlimited.Applications.BusinessDesignStudio.Activities.Utilities;
using Warewolf.Core;
using Warewolf.Resource.Errors;
using Warewolf.Storage.Interfaces;
using Dev2.Comparer;
using Dev2.Common.Interfaces.Data.TO;
using Dev2.Common.State;
using Dev2.Utilities;

namespace Unlimited.Applications.BusinessDesignStudio.Activities

{
    /// <New>
    /// Activity for finding records accoring to a search criteria that the user specifies
    /// </New>
    [ToolDescriptorInfo("RecordSet-FindRecords", "Find Records", ToolType.Native, "8999E59A-38A3-43BB-A98F-6090C5C9EA1E", "Dev2.Activities", "1.0.0.0", "Legacy", "Recordset", "/Warewolf.Studio.Themes.Luna;component/Images.xaml", "Tool_Recordset_Find_Records")]
    public class DsfFindRecordsMultipleCriteriaActivity : DsfActivityAbstract<string>, ICollectionActivity, IEquatable<DsfFindRecordsMultipleCriteriaActivity>
    {
        #region Properties

        /// <summary>
        /// Property for holding a string the user enters into the "In Fields" box
        /// </summary>
        [Inputs("FieldsToSearch")]
        [FindMissing]
        public string FieldsToSearch { get; set; }


        /// <summary>
        /// Property for holding a string the user enters into the "Result" box
        /// </summary>
        [Outputs("Result")]
        [FindMissing]
        public new string Result { get; set; }

        /// <summary>
        /// Property for holding a string the user enters into the "Start Index" box
        /// </summary>
        [Inputs("StartIndex")]
        [FindMissing]
        public string StartIndex { get; set; }

        /// <summary>
        /// Property for holding a bool the user chooses with the "MatchCase" Checkbox
        /// </summary>
        [Inputs("MatchCase")]
        public bool MatchCase { get; set; }

        public bool RequireAllTrue { get; set; }

        public bool RequireAllFieldsToMatch { get; set; }
        #endregion Properties

        #region Ctor

        public DsfFindRecordsMultipleCriteriaActivity()
            : base("Find Record Index")
        {
            // Initialise all the properties here
            ResultsCollection = new List<FindRecordsTO>();
            FieldsToSearch = string.Empty;
            Result = string.Empty;
            StartIndex = string.Empty;
            RequireAllTrue = true;
            RequireAllFieldsToMatch = false;
        }

        #endregion Ctor

        public override IEnumerable<StateVariable> GetState()
        {
            return new[] {
                new StateVariable
                {
                    Name = "ResultsCollection",
                    Value = ActivityHelper.GetSerializedStateValueFromCollection(ResultsCollection),
                    Type = StateVariable.StateType.Input
                },
                new StateVariable
                {
                    Name = "FieldsToSearch",
                    Value = FieldsToSearch,
                    Type = StateVariable.StateType.Input
                },
                new StateVariable
                {
                    Name = "RequireAllTrue",
                    Value = RequireAllTrue.ToString(),
                    Type = StateVariable.StateType.Input
                },
                new StateVariable
                {
                    Name = "RequireAllFieldsToMatch",
                    Value = RequireAllFieldsToMatch.ToString(),
                    Type = StateVariable.StateType.Input
                },
                new StateVariable
                {
                    Name="Result",
                    Value = Result,
                    Type = StateVariable.StateType.Output
                }
            };
        }

        public override List<string> GetOutputs() => new List<string> { Result };

        protected override void OnExecute(NativeActivityContext context)
        {
            var dataObject = context.GetExtension<IDSFDataObject>();
            ExecuteTool(dataObject, 0);
        }

        protected override void ExecuteTool(IDSFDataObject dataObject, int update)
        {
            var searchQuery = new SearchQuery(this, Result, RequireAllFieldsToMatch, RequireAllTrue);

            var allErrors = new ErrorResultTO();
            try
            {
                InitializeDebug(dataObject);
                var searchContext = new SearchContext(this);
                if (dataObject.IsDebugMode())
                {
                    TryAddDebugInputValues(dataObject, searchContext.ToSearch, ref allErrors, update);
                }

                searchQuery.Execute(searchContext, allErrors, dataObject, update);

                if (dataObject.IsDebugMode())
                {
                    if (DataListUtil.IsValueRecordset(Result))
                    {
                        var recVar = DataListUtil.ReplaceRecordsetBlankWithStar(Result);
                        AddDebugOutputItem(new DebugEvalResult(recVar, "", dataObject.Environment, update));
                    }
                    else
                    {
                        AddDebugOutputItem(new DebugEvalResult(Result, "", dataObject.Environment, update));
                    }
                }
            }
            catch (Exception exception)
            {
                Dev2Logger.Error("DSFRecordsMultipleCriteria", exception, GlobalConstants.WarewolfError);
                allErrors.AddError(exception.Message);
            }
            finally
            {
                var hasErrors = allErrors.HasErrors();
                if (hasErrors)
                {
                    DisplayAndWriteError("DsfFindRecordsMultipleCriteriaActivity", allErrors);
                    var errorString = allErrors.MakeDisplayReady();
                    dataObject.Environment.AddError(errorString);
                    dataObject.Environment.Assign(Result, "-1", update);
                    if (dataObject.IsDebugMode())
                    {
                        AddDebugOutputItem(new DebugEvalResult(Result, "", dataObject.Environment, update));
                    }
                }

                if (dataObject.IsDebugMode())
                {
                    DispatchDebugState(dataObject, StateType.Before, update);
                    DispatchDebugState(dataObject, StateType.After, update);
                }
            }
        }

        internal void SetErrorsTO(ErrorResultTO errorTo)
        {
            _errorsTo = errorTo;
        }

        public override enFindMissingType GetFindMissingType() => enFindMissingType.MixedActivity;

        void TryAddDebugInputValues(IDSFDataObject dataObject, IEnumerable<string> toSearch, ref ErrorResultTO errorTos, int update)
        {
            if (dataObject.IsDebugMode())
            {
                try
                {
                    AddDebugInputValues(dataObject, toSearch, update);
                }
                catch (Exception e)
                {
                    errorTos.AddError(e.Message);
                }
            }
        }

        private void AddDebugInputValues(IDSFDataObject dataObject, IEnumerable<string> toSearch, int update)
        {
            var debugItem = new DebugItem();
            AddDebugItem(new DebugItemStaticDataParams("", "In Field(s)"), debugItem);
            foreach (var s in toSearch)
            {
                var searchFields = s;
                if (DataListUtil.IsValueRecordset(s))
                {
                    searchFields = searchFields.Replace("()", "(*)");
                }
                AddDebugItem(new DebugEvalResult(searchFields, "", dataObject.Environment, update), debugItem);
            }
            _debugInputs.Add(debugItem);
            AddResultDebugInputs(ResultsCollection, dataObject.Environment, update);
            AddDebugInputItem(new DebugItemStaticDataParams(RequireAllFieldsToMatch ? "YES" : "NO", "Require All Fields To Match"));
            AddDebugInputItem(new DebugItemStaticDataParams(RequireAllTrue ? "YES" : "NO", "Require All Matches To Be True"));
        }

        #region Overrides of DsfNativeActivity<string>

        public override List<DebugItem> GetDebugOutputs(IExecutionEnvironment env, int update)
        {
            return _debugOutputs;
        }

        #endregion

        #region Private Methods

        void AddResultDebugInputs(IEnumerable<FindRecordsTO> resultsCollection, IExecutionEnvironment environment, int update)
        {
            var indexCount = 1;
            foreach (var findRecordsTo in resultsCollection)
            {
                var debugItem = new DebugItem();
                if (!String.IsNullOrEmpty(findRecordsTo.SearchType))
                {
                    AddDebugItem(new DebugItemStaticDataParams("", indexCount.ToString(CultureInfo.InvariantCulture)), debugItem);
                    AddDebugItem(new DebugItemStaticDataParams(findRecordsTo.SearchType, ""), debugItem);

                    if (!string.IsNullOrEmpty(findRecordsTo.SearchCriteria))
                    {
                        AddDebugItem(new DebugEvalResult(findRecordsTo.SearchCriteria, "", environment, update, ""), debugItem);
                    }

                    if (findRecordsTo.SearchType == "Is Between" || findRecordsTo.SearchType == "Not Between")
                    {
                        AddDebugItem(new DebugEvalResult(findRecordsTo.From, "", environment, update), debugItem);

                        AddDebugItem(new DebugEvalResult(findRecordsTo.To, " And", environment, update), debugItem);
                    }

                    _debugInputs.Add(debugItem);
                    indexCount++;
                }
            }
        }

        void InsertToCollection(IEnumerable<string> listToAdd, ModelItem modelItem)
        {
            var modelProperty = modelItem.Properties["ResultsCollection"];
            if (modelProperty == null)
            {
                return;
            }
            var mic = modelProperty.Collection;

            if (mic == null)
            {
                return;
            }
            var listOfValidRows = ResultsCollection.Where(c => !c.CanRemove()).ToList();
            if (listOfValidRows.Count > 0)
            {
                var findRecordsTo = ResultsCollection.Last(c => !c.CanRemove());
                var startIndex = ResultsCollection.IndexOf(findRecordsTo) + 1;
                foreach (var s in listToAdd)
                {
                    mic.Insert(startIndex, new FindRecordsTO(s, ResultsCollection[startIndex - 1].SearchType, startIndex + 1));
                    startIndex++;
                }
                CleanUpCollection(mic, modelItem, startIndex);
            }
            else
            {
                AddToCollection(listToAdd, modelItem);
            }
        }

        void AddToCollection(IEnumerable<string> listToAdd, ModelItem modelItem)
        {
            var modelProperty = modelItem.Properties["ResultsCollection"];
            if (modelProperty == null)
            {
                return;
            }
            var mic = modelProperty.Collection;

            if (mic == null)
            {
                return;
            }
            var startIndex = 0;
            var searchType = ResultsCollection[0].SearchType;
            mic.Clear();
            foreach (var s in listToAdd)
            {
                mic.Add(new FindRecordsTO(s, searchType, startIndex + 1));
                startIndex++;
            }
            CleanUpCollection(mic, modelItem, startIndex);
        }

        static void CleanUpCollection(ModelItemCollection mic, ModelItem modelItem, int startIndex)
        {
            if (startIndex < mic.Count)
            {
                mic.RemoveAt(startIndex);
            }
            mic.Add(new XPathDTO(string.Empty, "", startIndex + 1));
            var modelProperty = modelItem.Properties["DisplayName"];
            modelProperty?.SetValue(CreateDisplayName(modelItem, startIndex + 1));
        }

        static string CreateDisplayName(ModelItem modelItem, int count)
        {
            var modelProperty = modelItem.Properties["DisplayName"];
            if (modelProperty == null)
            {
                return "";
            }
            var currentName = modelProperty.ComputedValue as string;
            if (currentName != null && currentName.Contains("(") && currentName.Contains(")"))
            {
                currentName = currentName.Remove(currentName.Contains(" (") ? currentName.IndexOf(" (", StringComparison.Ordinal) : currentName.IndexOf("(", StringComparison.Ordinal));
            }
            currentName = currentName + " (" + (count - 1) + ")";
            return currentName;
        }

        #endregion Private Methods

        #region Get Debug Inputs/Outputs

        public override List<DebugItem> GetDebugInputs(IExecutionEnvironment env, int update)
        {
            foreach (IDebugItem debugInput in _debugInputs)
            {
                debugInput.FlushStringBuilder();
            }
            return _debugInputs;
        }


        #endregion Get Inputs/Outputs

        #region Get ForEach Inputs/Ouputs

        public override void UpdateForEachInputs(IList<Tuple<string, string>> updates)
        {
            if (updates != null)
            {
                foreach (Tuple<string, string> t in updates)
                {
                    // locate all updates for this tuple
                    var t1 = t;
                    var items = ResultsCollection.Where(c => !string.IsNullOrEmpty(c.SearchCriteria) && c.SearchCriteria.Equals(t1.Item1));

                    // issues updates
                    foreach (var a in items)
                    {
                        a.SearchCriteria = t.Item2;
                    }

                    if (FieldsToSearch == t.Item1)
                    {
                        FieldsToSearch = t.Item2;
                    }
                }
            }
        }

        public override void UpdateForEachOutputs(IList<Tuple<string, string>> updates)
        {
            if (updates != null)
            {
                foreach (var t in updates)
                {
                    if (Result == t.Item1)
                    {
                        Result = t.Item2;
                    }
                }
            }
        }

        #endregion

        #region GetForEachInputs/Outputs

        public override IList<DsfForEachItem> GetForEachInputs()
        {
            var items = new[] { FieldsToSearch }.Union(ResultsCollection.Where(c => !string.IsNullOrEmpty(c.SearchCriteria)).Select(c => c.SearchCriteria)).ToArray();
            return GetForEachItems(items);
        }

        public override IList<DsfForEachItem> GetForEachOutputs()
        {
            var items = Result;
            return GetForEachItems(items);
        }

        #endregion

        #region Implementation of ICollectionActivity

        public int GetCollectionCount()
        {
            return ResultsCollection.Count(findRecordsTo => !findRecordsTo.CanRemove());
        }

        public IList<FindRecordsTO> ResultsCollection { get; set; }

        public void AddListToCollection(IList<string> listToAdd, bool overwrite, ModelItem modelItem)
        {
            if (!overwrite)
            {
                InsertToCollection(listToAdd, modelItem);
            }
            else
            {
                AddToCollection(listToAdd, modelItem);
            }
        }

        #endregion

        public bool Equals(DsfFindRecordsMultipleCriteriaActivity other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            var resultsCollectionsAreEqual = CommonEqualityOps.CollectionEquals(ResultsCollection, other.ResultsCollection, new FindRecordsTOComparer());
            return base.Equals(other)
                && string.Equals(FieldsToSearch, other.FieldsToSearch)
                && string.Equals(Result, other.Result)
                && string.Equals(StartIndex, other.StartIndex)
                && MatchCase == other.MatchCase
                && RequireAllTrue == other.RequireAllTrue
                && RequireAllFieldsToMatch == other.RequireAllFieldsToMatch
                && resultsCollectionsAreEqual;
        }

        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != this.GetType())
            {
                return false;
            }

            return Equals((DsfFindRecordsMultipleCriteriaActivity)obj);
        }

        public override int GetHashCode()
        {
            unchecked
            {
                var hashCode = base.GetHashCode();
                hashCode = (hashCode * 397) ^ (FieldsToSearch != null ? FieldsToSearch.GetHashCode() : 0);
                hashCode = (hashCode * 397) ^ (Result != null ? Result.GetHashCode() : 0);
                hashCode = (hashCode * 397) ^ (StartIndex != null ? StartIndex.GetHashCode() : 0);
                hashCode = (hashCode * 397) ^ MatchCase.GetHashCode();
                hashCode = (hashCode * 397) ^ RequireAllTrue.GetHashCode();
                hashCode = (hashCode * 397) ^ RequireAllFieldsToMatch.GetHashCode();
                hashCode = (hashCode * 397) ^ (ResultsCollection != null ? ResultsCollection.GetHashCode() : 0);
                return hashCode;
            }
        }
    }


    class SearchQuery
    {
        public readonly bool RequireAllFieldsToMatch;
        public readonly bool RequireAllTrue;
        protected DsfFindRecordsMultipleCriteriaActivity activity;
        protected readonly string Result;


        public SearchQuery(DsfFindRecordsMultipleCriteriaActivity activity, string Result, bool RequireAllFieldsToMatch, bool RequireAllTrue)
        {
            this.activity = activity;
            this.Result = Result;
            this.RequireAllFieldsToMatch = RequireAllFieldsToMatch;
            this.RequireAllTrue = RequireAllTrue;
        }


#pragma warning disable S1541 // Methods and properties should not be too complex
        public void Execute(SearchContext searchContext, ErrorResultTO errorResult, IDSFDataObject dataObject, int update)
#pragma warning restore S1541 // Methods and properties should not be too complex
        {
            var env = dataObject.Environment;

            // Local Functions
            //-------------------------------------------------------------------------------------
            #region local-functions
            void ApplyResultsToEnvironment(IList<int> results)
            {
                var distinctResults = results.Distinct();
                if (DataListUtil.IsValueScalar(Result))
                {
                    var res = string.Join(",", distinctResults);
                    env.Assign(Result, res, update);
                }
                else
                {
                    foreach (var distinctResult in distinctResults)
                    {
                        env.Assign(Result, distinctResult.ToString(), update);
                    }
                }
            }
            IEnumerable<int> GetResultsForField(string searchvar)
            {
                Func<DataStorage.WarewolfAtom, bool> func = null;
                foreach (FindRecordsTO criteria in activity.ResultsCollection.Where(a => !String.IsNullOrEmpty(a.SearchType)))
                {
                    var right = env.EvalAsList(criteria.SearchCriteria, update);
                    IEnumerable<DataStorage.WarewolfAtom> from = new List<DataStorage.WarewolfAtom>();
                    IEnumerable<DataStorage.WarewolfAtom> tovalue = new List<DataStorage.WarewolfAtom>();

                    if (!String.IsNullOrEmpty(criteria.From))
                    {
                        @from = env.EvalAsList(criteria.From, update);
                    }
                    if (!String.IsNullOrEmpty(criteria.To))
                    {
                        tovalue = env.EvalAsList(criteria.To, update);
                    }
                    func = BuildQueryExpression(func, criteria, right, from, tovalue);
                }
                return env.EvalWhere(env.ToStar(searchvar), func, update);
            }
            List<int> GetResults()
            {
                var hasEvaled = false;
                var results = new List<int>();

                foreach (var searchvar in searchContext.ToSearch)
                {
                    var output = GetResultsForField(searchvar);

                    results = RequireAllFieldsToMatch && hasEvaled ? results.Intersect(output).ToList() : results.Union(output).ToList();
                    hasEvaled = true;
                }

                if (!results.Any())
                {
                    results.Add(-1);
                }

                return results;
            }

            Func<DataStorage.WarewolfAtom, bool> BuildQueryExpression(Func<DataStorage.WarewolfAtom, bool> func, FindRecordsTO criteria, IEnumerable<DataStorage.WarewolfAtom> right, IEnumerable<DataStorage.WarewolfAtom> from, IEnumerable<DataStorage.WarewolfAtom> tovalue)
            {
                return func == null ?
                    CreateFuncFromOperator(criteria.SearchType, right, @from, tovalue) :
                    RequireAllTrue ?
                        CombineFuncAnd(func, criteria.SearchType, right, @from, tovalue) :
                        CombineFuncOr(func, criteria.SearchType, right, @from, tovalue);
            }

            
            #endregion
            
            searchContext.Validate(errorResult);


            var queryResults = GetResults();
            ApplyResultsToEnvironment(queryResults);
        }


        Func<DataStorage.WarewolfAtom, bool> CombineFuncAnd(Func<DataStorage.WarewolfAtom, bool> func, string searchType, IEnumerable<DataStorage.WarewolfAtom> values, IEnumerable<DataStorage.WarewolfAtom> from, IEnumerable<DataStorage.WarewolfAtom> to)
        {
            var func2 = CreateFuncFromOperator(searchType, values, from, to);

            return a =>
            {
                try
                {
                    return func.Invoke(a) && func2.Invoke(a);
                }
                catch (DataStorage.WarewolfInvalidComparisonException ex)
                {
                    return false;
                }
            };
        }

        Func<DataStorage.WarewolfAtom, bool> CombineFuncOr(Func<DataStorage.WarewolfAtom, bool> func, string searchType, IEnumerable<DataStorage.WarewolfAtom> values, IEnumerable<DataStorage.WarewolfAtom> from, IEnumerable<DataStorage.WarewolfAtom> to)
        {
            var func2 = CreateFuncFromOperator(searchType, values, from, to);
            return a =>
            {
                bool CatchInvalidComparisons(Func<DataStorage.WarewolfAtom, bool> f)
                {
                    var ret = false;
                    try
                    {
                        ret = f.Invoke(a);
                        if (ret)
                        {
                            return ret;
                        }
                    }
                    catch (DataStorage.WarewolfInvalidComparisonException ex)
                    {
                        ret = false;
                    }
                    return ret;
                }
                return CatchInvalidComparisons(func) || CatchInvalidComparisons(func2);
            };
        }


        Func<DataStorage.WarewolfAtom, bool> CreateFuncFromOperator(string searchType, IEnumerable<DataStorage.WarewolfAtom> values, IEnumerable<DataStorage.WarewolfAtom> from, IEnumerable<DataStorage.WarewolfAtom> to)
        {

            var opt = FindRecsetOptions.FindMatch(searchType);
            return (a) =>
            {
                try
                {
                    return opt.GenerateFunc(values, from, to, RequireAllFieldsToMatch).Invoke(a);
                }
                catch (DataStorage.WarewolfInvalidComparisonException ex)
                {
                    return false;
                }
            };
        }

    }

    class SearchContext
    {
        protected DsfFindRecordsMultipleCriteriaActivity activity;

        public readonly IList<string> ToSearch;

        public SearchContext(DsfFindRecordsMultipleCriteriaActivity activity)
        {
            this.activity = activity;
            ToSearch = activity.FieldsToSearch.Split(',')
                            .Select(a => a.Trim())
                            .ToList();
        }

        public void Validate(ErrorResultTO errorsTo)
        {
            ValidateSearchFields();
            ValidateMatchesAgainstFields(errorsTo);
        }

        void ValidateSearchFields()
        {
            var scalarValues = ToSearch.Where(DataListUtil.IsValueScalar).ToList();
            if (scalarValues.Any())
            {
                throw new Exception(ErrorResource.ScalarsNotAllowed + Environment.NewLine + string.Join(Environment.NewLine, scalarValues));
            }
        }

        void ValidateMatchesAgainstFields(ErrorResultTO errorsTo)
        {
            foreach (FindRecordsTO criteria in activity.ResultsCollection.Where(a => !String.IsNullOrEmpty(a.SearchType)))
            {
                if (criteria.From.Length > 0 && String.IsNullOrEmpty(criteria.To)
                   || criteria.To.Length > 0 && String.IsNullOrEmpty(criteria.From))
                {
                    throw new Exception(ErrorResource.FROMAndTORequired);
                }
                ValidateRequiredFields(criteria, errorsTo);
            }
        }

        static void ValidateRequiredFields(FindRecordsTO searchTo, ErrorResultTO errors)
        {
            if (string.IsNullOrEmpty(searchTo.SearchType))
            {
                errors.AddError(string.Format(ErrorResource.IsRequired, "Search Type"));
            }

            if (searchTo.SearchType.Equals("Is Between"))
            {
                if (string.IsNullOrEmpty(searchTo.From))
                {
                    errors.AddError(string.Format(ErrorResource.IsRequired, "FROM"));
                }

                if (string.IsNullOrEmpty(searchTo.To))
                {
                    errors.AddError(string.Format(ErrorResource.IsRequired, "TO"));
                }
            }
        }
    }
}

---- Transformed Tree ----
using System;
using System.Activities;
using System.Activities.Presentation.Model;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using Dev2;
using Dev2.Activities;
using Dev2.Activities.Debug;
using Dev2.Common;
using Dev2.Common.Interfaces.Diagnostics.Debug;
using Dev2.Common.Interfaces.Toolbox;
using Dev2.Data.TO;
using Dev2.Data.Util;
using Dev2.DataList;
using Dev2.DataList.Contract;
using Dev2.Diagnostics;
using Dev2.Interfaces;
using Dev2.Util;
using Unlimited.Applications.BusinessDesignStudio.Activities.Utilities;
using Warewolf.Core;
using Warewolf.Resource.Errors;
using Warewolf.Storage.Interfaces;
using Dev2.Comparer;
using Dev2.Common.Interfaces.Data.TO;
using Dev2.Common.State;
using Dev2.Utilities;

namespace Unlimited.Applications.BusinessDesignStudio.Activities

{
    /// <New>
    /// Activity for finding records accoring to a search criteria that the user specifies
    /// </New>
    [ToolDescriptorInfo("RecordSet-FindRecords", "Find Records", ToolType.Native, "8999E59A-38A3-43BB-A98F-6090C5C9EA1E", "Dev2.Activities", "1.0.0.0", "Legacy", "Recordset", "/Warewolf.Studio.Themes.Luna;component/Images.xaml", "Tool_Recordset_Find_Records")]
    public class DsfFindRecordsMultipleCriteriaActivity : DsfActivityAbstract<string>, ICollectionActivity, IEquatable<DsfFindRecordsMultipleCriteriaActivity>
    {
        #region Properties

        /// <summary>
        /// Property for holding a string the user enters into the "In Fields" box
        /// </summary>
        [Inputs("FieldsToSearch")]
        [FindMissing]
        public string FieldsToSearch { get; set; }


        /// <summary>
        /// Property for holding a string the user enters into the "Result" box
        /// </summary>
        [Outputs("Result")]
        [FindMissing]
        public new string Result { get; set; }

        /// <summary>
        /// Property for holding a string the user enters into the "Start Index" box
        /// </summary>
        [Inputs("StartIndex")]
        [FindMissing]
        public string StartIndex { get; set; }

        /// <summary>
        /// Property for holding a bool the user chooses with the "MatchCase" Checkbox
        /// </summary>
        [Inputs("MatchCase")]
        public bool MatchCase { get; set; }

        public bool RequireAllTrue { get; set; }

        public bool RequireAllFieldsToMatch { get; set; }
        #endregion Properties

        #region Ctor

        public DsfFindRecordsMultipleCriteriaActivity()
            : base("Find Record Index")
        {
            // Initialise all the properties here
            ResultsCollection = new List<FindRecordsTO>();
            FieldsToSearch = string.Empty;
            Result = string.Empty;
            StartIndex = string.Empty;
            RequireAllTrue = true;
            RequireAllFieldsToMatch = false;
        }

        #endregion Ctor

        public override IEnumerable<StateVariable> GetState()
        {
            return new[] {
                new StateVariable
                {
                    Name = "ResultsCollection",
                    Value = ActivityHelper.GetSerializedStateValueFromCollection(ResultsCollection),
                    Type = StateVariable.StateType.Input
                },
                new StateVariable
                {
                    Name = "FieldsToSearch",
                    Value = FieldsToSearch,
                    Type = StateVariable.StateType.Input
                },
                new StateVariable
                {
                    Name = "RequireAllTrue",
                    Value = RequireAllTrue.ToString(),
                    Type = StateVariable.StateType.Input
                },
                new StateVariable
                {
                    Name = "RequireAllFieldsToMatch",
                    Value = RequireAllFieldsToMatch.ToString(),
                    Type = StateVariable.StateType.Input
                },
                new StateVariable
                {
                    Name="Result",
                    Value = Result,
                    Type = StateVariable.StateType.Output
                }
            };
        }

        public override List<string> GetOutputs() => new List<string> { Result };

        protected override void OnExecute(NativeActivityContext context)
        {
            var dataObject = context.GetExtension<IDSFDataObject>();
            ExecuteTool(dataObject, 0);
        }

        protected override void ExecuteTool(IDSFDataObject dataObject, int update)
        {
            var searchQuery = new SearchQuery(this, Result, RequireAllFieldsToMatch, RequireAllTrue);

            var allErrors = new ErrorResultTO();
            try
            {
                InitializeDebug(dataObject);
                var searchContext = new SearchContext(this);
                if (dataObject.IsDebugMode())
                {
                    TryAddDebugInputValues(dataObject, searchContext.ToSearch, ref allErrors, update);
                }

                searchQuery.Execute(searchContext, allErrors, dataObject, update);

                if (dataObject.IsDebugMode())
                {
                    if (DataListUtil.IsValueRecordset(Result))
                    {
                        var recVar = DataListUtil.ReplaceRecordsetBlankWithStar(Result);
                        AddDebugOutputItem(new DebugEvalResult(recVar, "", dataObject.Environment, update));
                    }
                    else
                    {
                        AddDebugOutputItem(new DebugEvalResult(Result, "", dataObject.Environment, update));
                    }
                }
            }
            catch (Exception exception)
            {
                Dev2Logger.Error("DSFRecordsMultipleCriteria", exception, GlobalConstants.WarewolfError);
                allErrors.AddError(exception.Message);
            }
            finally
            {
                var hasErrors = allErrors.HasErrors();
                if (hasErrors)
                {
                    DisplayAndWriteError("DsfFindRecordsMultipleCriteriaActivity", allErrors);
                    var errorString = allErrors.MakeDisplayReady();
                    dataObject.Environment.AddError(errorString);
                    dataObject.Environment.Assign(Result, "-1", update);
                    if (dataObject.IsDebugMode())
                    {
                        AddDebugOutputItem(new DebugEvalResult(Result, "", dataObject.Environment, update));
                    }
                }

                if (dataObject.IsDebugMode())
                {
                    DispatchDebugState(dataObject, StateType.Before, update);
                    DispatchDebugState(dataObject, StateType.After, update);
                }
            }
        }

        internal void SetErrorsTO(ErrorResultTO errorTo)
        {
            _errorsTo = errorTo;
        }

        public override enFindMissingType GetFindMissingType() => enFindMissingType.MixedActivity;

        void TryAddDebugInputValues(IDSFDataObject dataObject, IEnumerable<string> toSearch, ref ErrorResultTO errorTos, int update)
        {
            if (dataObject.IsDebugMode())
            {
                try
                {
                    AddDebugInputValues(dataObject, toSearch, update);
                }
                catch (Exception e)
                {
                    errorTos.AddError(e.Message);
                }
            }
        }

        private void AddDebugInputValues(IDSFDataObject dataObject, IEnumerable<string> toSearch, int update)
        {
            var debugItem = new DebugItem();
            AddDebugItem(new DebugItemStaticDataParams("", "In Field(s)"), debugItem);
            foreach (var s in toSearch)
            {
                var searchFields = s;
                if (DataListUtil.IsValueRecordset(s))
                {
                    searchFields = searchFields.Replace("()", "(*)");
                }
                AddDebugItem(new DebugEvalResult(searchFields, "", dataObject.Environment, update), debugItem);
            }
            _debugInputs.Add(debugItem);
            AddResultDebugInputs(ResultsCollection, dataObject.Environment, update);
            AddDebugInputItem(new DebugItemStaticDataParams(RequireAllFieldsToMatch ? "YES" : "NO", "Require All Fields To Match"));
            AddDebugInputItem(new DebugItemStaticDataParams(RequireAllTrue ? "YES" : "NO", "Require All Matches To Be True"));
        }

        #region Overrides of DsfNativeActivity<string>

        public override List<DebugItem> GetDebugOutputs(IExecutionEnvironment env, int update)
        {
            return _debugOutputs;
        }

        #endregion

        #region Private Methods

        void AddResultDebugInputs(IEnumerable<FindRecordsTO> resultsCollection, IExecutionEnvironment environment, int update)
        {
            var indexCount = 1;
            foreach (var findRecordsTo in resultsCollection)
            {
                var debugItem = new DebugItem();
                if (!String.IsNullOrEmpty(findRecordsTo.SearchType))
                {
                    AddDebugItem(new DebugItemStaticDataParams("", indexCount.ToString(CultureInfo.InvariantCulture)), debugItem);
                    AddDebugItem(new DebugItemStaticDataParams(findRecordsTo.SearchType, ""), debugItem);

                    if (!string.IsNullOrEmpty(findRecordsTo.SearchCriteria))
                    {
                        AddDebugItem(new DebugEvalResult(findRecordsTo.SearchCriteria, "", environment, update, ""), debugItem);
                    }

                    if (findRecordsTo.SearchType == "Is Between" || findRecordsTo.SearchType == "Not Between")
                    {
                        AddDebugItem(new DebugEvalResult(findRecordsTo.From, "", environment, update), debugItem);

                        AddDebugItem(new DebugEvalResult(findRecordsTo.To, " And", environment, update), debugItem);
                    }

                    _debugInputs.Add(debugItem);
                    indexCount++;
                }
            }
        }

        void InsertToCollection(IEnumerable<string> listToAdd, ModelItem modelItem)
        {
            var modelProperty = modelItem.Properties["ResultsCollection"];
            if (modelProperty == null)
            {
                return;
            }
            var mic = modelProperty.Collection;

            if (mic == null)
            {
                return;
            }
            var listOfValidRows = ResultsCollection.Where(c => !c.CanRemove()).ToList();
            if (listOfValidRows.Count > 0)
            {
                var findRecordsTo = ResultsCollection.Last(c => !c.CanRemove());
                var startIndex = ResultsCollection.IndexOf(findRecordsTo) + 1;
                foreach (var s in listToAdd)
                {
                    mic.Insert(startIndex, new FindRecordsTO(s, ResultsCollection[startIndex - 1].SearchType, startIndex + 1));
                    startIndex++;
                }
                CleanUpCollection(mic, modelItem, startIndex);
            }
            else
            {
                AddToCollection(listToAdd, modelItem);
            }
        }

        void AddToCollection(IEnumerable<string> listToAdd, ModelItem modelItem)
        {
            var modelProperty = modelItem.Properties["ResultsCollection"];
            if (modelProperty == null)
            {
                return;
            }
            var mic = modelProperty.Collection;

            if (mic == null)
            {
                return;
            }
            var startIndex = 0;
            var searchType = ResultsCollection[0].SearchType;
            mic.Clear();
            foreach (var s in listToAdd)
            {
                mic.Add(new FindRecordsTO(s, searchType, startIndex + 1));
                startIndex++;
            }
            CleanUpCollection(mic, modelItem, startIndex);
        }

        static void CleanUpCollection(ModelItemCollection mic, ModelItem modelItem, int startIndex)
        {
            if (startIndex < mic.Count)
            {
                mic.RemoveAt(startIndex);
            }
            mic.Add(new XPathDTO(string.Empty, "", startIndex + 1));
            var modelProperty = modelItem.Properties["DisplayName"];
            modelProperty?.SetValue(CreateDisplayName(modelItem, startIndex + 1));
        }

        static string CreateDisplayName(ModelItem modelItem, int count)
        {
            var modelProperty = modelItem.Properties["DisplayName"];
            if (modelProperty == null)
            {
                return "";
            }
            if (modelProperty.ComputedValue is string currentName && currentName.Contains("(") && currentName.Contains(")"))
            {
                currentName = currentName.Remove(currentName.Contains(" (") ? currentName.IndexOf(" (", StringComparison.Ordinal) : currentName.IndexOf("(", StringComparison.Ordinal));
            }
            currentName = currentName + " (" + (count - 1) + ")";
            return currentName;
        }

        #endregion Private Methods

        #region Get Debug Inputs/Outputs

        public override List<DebugItem> GetDebugInputs(IExecutionEnvironment env, int update)
        {
            foreach (IDebugItem debugInput in _debugInputs)
            {
                debugInput.FlushStringBuilder();
            }
            return _debugInputs;
        }


        #endregion Get Inputs/Outputs

        #region Get ForEach Inputs/Ouputs

        public override void UpdateForEachInputs(IList<Tuple<string, string>> updates)
        {
            if (updates != null)
            {
                foreach (Tuple<string, string> t in updates)
                {
                    // locate all updates for this tuple
                    var t1 = t;
                    var items = ResultsCollection.Where(c => !string.IsNullOrEmpty(c.SearchCriteria) && c.SearchCriteria.Equals(t1.Item1));

                    // issues updates
                    foreach (var a in items)
                    {
                        a.SearchCriteria = t.Item2;
                    }

                    if (FieldsToSearch == t.Item1)
                    {
                        FieldsToSearch = t.Item2;
                    }
                }
            }
        }

        public override void UpdateForEachOutputs(IList<Tuple<string, string>> updates)
        {
            if (updates != null)
            {
                foreach (var t in updates)
                {
                    if (Result == t.Item1)
                    {
                        Result = t.Item2;
                    }
                }
            }
        }

        #endregion

        #region GetForEachInputs/Outputs

        public override IList<DsfForEachItem> GetForEachInputs()
        {
            var items = new[] { FieldsToSearch }.Union(ResultsCollection.Where(c => !string.IsNullOrEmpty(c.SearchCriteria)).Select(c => c.SearchCriteria)).ToArray();
            return GetForEachItems(items);
        }

        public override IList<DsfForEachItem> GetForEachOutputs()
        {
            var items = Result;
            return GetForEachItems(items);
        }

        #endregion

        #region Implementation of ICollectionActivity

        public int GetCollectionCount()
        {
            return ResultsCollection.Count(findRecordsTo => !findRecordsTo.CanRemove());
        }

        public IList<FindRecordsTO> ResultsCollection { get; set; }

        public void AddListToCollection(IList<string> listToAdd, bool overwrite, ModelItem modelItem)
        {
            if (!overwrite)
            {
                InsertToCollection(listToAdd, modelItem);
            }
            else
            {
                AddToCollection(listToAdd, modelItem);
            }
        }

        #endregion

        public bool Equals(DsfFindRecordsMultipleCriteriaActivity other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            var resultsCollectionsAreEqual = CommonEqualityOps.CollectionEquals(ResultsCollection, other.ResultsCollection, new FindRecordsTOComparer());
            return base.Equals(other)
                && string.Equals(FieldsToSearch, other.FieldsToSearch)
                && string.Equals(Result, other.Result)
                && string.Equals(StartIndex, other.StartIndex)
                && MatchCase == other.MatchCase
                && RequireAllTrue == other.RequireAllTrue
                && RequireAllFieldsToMatch == other.RequireAllFieldsToMatch
                && resultsCollectionsAreEqual;
        }

        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != this.GetType())
            {
                return false;
            }

            return Equals((DsfFindRecordsMultipleCriteriaActivity)obj);
        }

        public override int GetHashCode()
        {
            unchecked
            {
                var hashCode = base.GetHashCode();
                hashCode = (hashCode * 397) ^ (FieldsToSearch != null ? FieldsToSearch.GetHashCode() : 0);
                hashCode = (hashCode * 397) ^ (Result != null ? Result.GetHashCode() : 0);
                hashCode = (hashCode * 397) ^ (StartIndex != null ? StartIndex.GetHashCode() : 0);
                hashCode = (hashCode * 397) ^ MatchCase.GetHashCode();
                hashCode = (hashCode * 397) ^ RequireAllTrue.GetHashCode();
                hashCode = (hashCode * 397) ^ RequireAllFieldsToMatch.GetHashCode();
                hashCode = (hashCode * 397) ^ (ResultsCollection != null ? ResultsCollection.GetHashCode() : 0);
                return hashCode;
            }
        }
    }


    class SearchQuery
    {
        public readonly bool RequireAllFieldsToMatch;
        public readonly bool RequireAllTrue;
        protected DsfFindRecordsMultipleCriteriaActivity activity;
        protected readonly string Result;


        public SearchQuery(DsfFindRecordsMultipleCriteriaActivity activity, string Result, bool RequireAllFieldsToMatch, bool RequireAllTrue)
        {
            this.activity = activity;
            this.Result = Result;
            this.RequireAllFieldsToMatch = RequireAllFieldsToMatch;
            this.RequireAllTrue = RequireAllTrue;
        }


#pragma warning disable S1541 // Methods and properties should not be too complex
        public void Execute(SearchContext searchContext, ErrorResultTO errorResult, IDSFDataObject dataObject, int update)
#pragma warning restore S1541 // Methods and properties should not be too complex
        {
            var env = dataObject.Environment;

            // Local Functions
            //-------------------------------------------------------------------------------------
            #region local-functions
            void ApplyResultsToEnvironment(IList<int> results)
            {
                var distinctResults = results.Distinct();
                if (DataListUtil.IsValueScalar(Result))
                {
                    var res = string.Join(",", distinctResults);
                    env.Assign(Result, res, update);
                }
                else
                {
                    foreach (var distinctResult in distinctResults)
                    {
                        env.Assign(Result, distinctResult.ToString(), update);
                    }
                }
            }
            IEnumerable<int> GetResultsForField(string searchvar)
            {
                Func<DataStorage.WarewolfAtom, bool> func = null;
                foreach (FindRecordsTO criteria in activity.ResultsCollection.Where(a => !String.IsNullOrEmpty(a.SearchType)))
                {
                    var right = env.EvalAsList(criteria.SearchCriteria, update);
                    IEnumerable<DataStorage.WarewolfAtom> from = new List<DataStorage.WarewolfAtom>();
                    IEnumerable<DataStorage.WarewolfAtom> tovalue = new List<DataStorage.WarewolfAtom>();

                    if (!String.IsNullOrEmpty(criteria.From))
                    {
                        @from = env.EvalAsList(criteria.From, update);
                    }
                    if (!String.IsNullOrEmpty(criteria.To))
                    {
                        tovalue = env.EvalAsList(criteria.To, update);
                    }
                    func = BuildQueryExpression(func, criteria, right, from, tovalue);
                }
                return env.EvalWhere(env.ToStar(searchvar), func, update);
            }
            List<int> GetResults()
            {
                var hasEvaled = false;
                var results = new List<int>();

                foreach (var searchvar in searchContext.ToSearch)
                {
                    var output = GetResultsForField(searchvar);

                    results = RequireAllFieldsToMatch && hasEvaled ? results.Intersect(output).ToList() : results.Union(output).ToList();
                    hasEvaled = true;
                }

                if (!results.Any())
                {
                    results.Add(-1);
                }

                return results;
            }

            Func<DataStorage.WarewolfAtom, bool> BuildQueryExpression(Func<DataStorage.WarewolfAtom, bool> func, FindRecordsTO criteria, IEnumerable<DataStorage.WarewolfAtom> right, IEnumerable<DataStorage.WarewolfAtom> from, IEnumerable<DataStorage.WarewolfAtom> tovalue)
            {
                return func == null ?
                    CreateFuncFromOperator(criteria.SearchType, right, @from, tovalue) :
                    RequireAllTrue ?
                        CombineFuncAnd(func, criteria.SearchType, right, @from, tovalue) :
                        CombineFuncOr(func, criteria.SearchType, right, @from, tovalue);
            }

            
            #endregion
            
            searchContext.Validate(errorResult);


            var queryResults = GetResults();
            ApplyResultsToEnvironment(queryResults);
        }


        Func<DataStorage.WarewolfAtom, bool> CombineFuncAnd(Func<DataStorage.WarewolfAtom, bool> func, string searchType, IEnumerable<DataStorage.WarewolfAtom> values, IEnumerable<DataStorage.WarewolfAtom> from, IEnumerable<DataStorage.WarewolfAtom> to)
        {
            var func2 = CreateFuncFromOperator(searchType, values, from, to);

            return a =>
            {
                try
                {
                    return func.Invoke(a) && func2.Invoke(a);
                }
                catch (DataStorage.WarewolfInvalidComparisonException ex)
                {
                    return false;
                }
            };
        }

        Func<DataStorage.WarewolfAtom, bool> CombineFuncOr(Func<DataStorage.WarewolfAtom, bool> func, string searchType, IEnumerable<DataStorage.WarewolfAtom> values, IEnumerable<DataStorage.WarewolfAtom> from, IEnumerable<DataStorage.WarewolfAtom> to)
        {
            var func2 = CreateFuncFromOperator(searchType, values, from, to);
            return a =>
            {
                bool CatchInvalidComparisons(Func<DataStorage.WarewolfAtom, bool> f)
                {
                    var ret = false;
                    try
                    {
                        ret = f.Invoke(a);
                        if (ret)
                        {
                            return ret;
                        }
                    }
                    catch (DataStorage.WarewolfInvalidComparisonException ex)
                    {
                        ret = false;
                    }
                    return ret;
                }
                return CatchInvalidComparisons(func) || CatchInvalidComparisons(func2);
            };
        }


        Func<DataStorage.WarewolfAtom, bool> CreateFuncFromOperator(string searchType, IEnumerable<DataStorage.WarewolfAtom> values, IEnumerable<DataStorage.WarewolfAtom> from, IEnumerable<DataStorage.WarewolfAtom> to)
        {

            var opt = FindRecsetOptions.FindMatch(searchType);
            return (a) =>
            {
                try
                {
                    return opt.GenerateFunc(values, from, to, RequireAllFieldsToMatch).Invoke(a);
                }
                catch (DataStorage.WarewolfInvalidComparisonException ex)
                {
                    return false;
                }
            };
        }

    }

    class SearchContext
    {
        protected DsfFindRecordsMultipleCriteriaActivity activity;

        public readonly IList<string> ToSearch;

        public SearchContext(DsfFindRecordsMultipleCriteriaActivity activity)
        {
            this.activity = activity;
            ToSearch = activity.FieldsToSearch.Split(',')
                            .Select(a => a.Trim())
                            .ToList();
        }

        public void Validate(ErrorResultTO errorsTo)
        {
            ValidateSearchFields();
            ValidateMatchesAgainstFields(errorsTo);
        }

        void ValidateSearchFields()
        {
            var scalarValues = ToSearch.Where(DataListUtil.IsValueScalar).ToList();
            if (scalarValues.Any())
            {
                throw new Exception(ErrorResource.ScalarsNotAllowed + Environment.NewLine + string.Join(Environment.NewLine, scalarValues));
            }
        }

        void ValidateMatchesAgainstFields(ErrorResultTO errorsTo)
        {
            foreach (FindRecordsTO criteria in activity.ResultsCollection.Where(a => !String.IsNullOrEmpty(a.SearchType)))
            {
                if (criteria.From.Length > 0 && String.IsNullOrEmpty(criteria.To)
                   || criteria.To.Length > 0 && String.IsNullOrEmpty(criteria.From))
                {
                    throw new Exception(ErrorResource.FROMAndTORequired);
                }
                ValidateRequiredFields(criteria, errorsTo);
            }
        }

        static void ValidateRequiredFields(FindRecordsTO searchTo, ErrorResultTO errors)
        {
            if (string.IsNullOrEmpty(searchTo.SearchType))
            {
                errors.AddError(string.Format(ErrorResource.IsRequired, "Search Type"));
            }

            if (searchTo.SearchType.Equals("Is Between"))
            {
                if (string.IsNullOrEmpty(searchTo.From))
                {
                    errors.AddError(string.Format(ErrorResource.IsRequired, "FROM"));
                }

                if (string.IsNullOrEmpty(searchTo.To))
                {
                    errors.AddError(string.Format(ErrorResource.IsRequired, "TO"));
                }
            }
        }
    }
}

---- Semantic diagnostics *before* transformation ----
D:\a\1\s\Dev\Dev2.Activities\Activities\DsfFindRecordsMultipleCriteriaActivity.cs(626,66): error CS0246: The type or namespace name 'DataStorage' could not be found (are you missing a using directive or an assembly reference?),D:\a\1\s\Dev\Dev2.Activities\Activities\DsfFindRecordsMultipleCriteriaActivity.cs(626,135): error CS0246: The type or namespace name 'DataStorage' could not be found (are you missing a using directive or an assembly reference?),D:\a\1\s\Dev\Dev2.Activities\Activities\DsfFindRecordsMultipleCriteriaActivity.cs(626,181): error CS0246: The type or namespace name 'DataStorage' could not be found (are you missing a using directive or an assembly reference?),D:\a\1\s\Dev\Dev2.Activities\Activities\DsfFindRecordsMultipleCriteriaActivity.cs(626,225): error CS0246: The type or namespace name 'DataStorage' could not be found (are you missing a using directive or an assembly reference?),D:\a\1\s\Dev\Dev2.Activities\Activities\DsfFindRecordsMultipleCriteriaActivity.cs(626,14): error CS0246: The type or namespace name 'DataStorage' could not be found (are you missing a using directive or an assembly reference?),D:\a\1\s\Dev\Dev2.Activities\Activities\DsfFindRecordsMultipleCriteriaActivity.cs(643,65): error CS0246: The type or namespace name 'DataStorage' could not be found (are you missing a using directive or an assembly reference?),D:\a\1\s\Dev\Dev2.Activities\Activities\DsfFindRecordsMultipleCriteriaActivity.cs(643,134): error CS0246: The type or namespace name 'DataStorage' could not be found (are you missing a using directive or an assembly reference?),D:\a\1\s\Dev\Dev2.Activities\Activities\DsfFindRecordsMultipleCriteriaActivity.cs(643,180): error CS0246: The type or namespace name 'DataStorage' could not be found (are you missing a using directive or an assembly reference?),D:\a\1\s\Dev\Dev2.Activities\Activities\DsfFindRecordsMultipleCriteriaActivity.cs(643,224): error CS0246: The type or namespace name 'DataStorage' could not be found (are you missing a using directive or an assembly reference?),D:\a\1\s\Dev\Dev2.Activities\Activities\DsfFindRecordsMultipleCriteriaActivity.cs(643,14): error CS0246: The type or namespace name 'DataStorage' could not be found (are you missing a using directive or an assembly reference?),D:\a\1\s\Dev\Dev2.Activities\Activities\DsfFindRecordsMultipleCriteriaActivity.cs(670,100): error CS0246: The type or namespace name 'DataStorage' could not be found (are you missing a using directive or an assembly reference?),D:\a\1\s\Dev\Dev2.Activities\Activities\DsfFindRecordsMultipleCriteriaActivity.cs(670,146): error CS0246: The type or namespace name 'DataStorage' could not be found (are you missing a using directive or an assembly reference?),D:\a\1\s\Dev\Dev2.Activities\Activities\DsfFindRecordsMultipleCriteriaActivity.cs(670,190): error CS0246: The type or namespace name 'DataStorage' could not be found (are you missing a using directive or an assembly reference?),D:\a\1\s\Dev\Dev2.Activities\Activities\DsfFindRecordsMultipleCriteriaActivity.cs(670,14): error CS0246: The type or namespace name 'DataStorage' could not be found (are you missing a using directive or an assembly reference?),D:\a\1\s\Dev\Dev2.Activities\Activities\DsfFindRecordsMultipleCriteriaActivity.cs(566,22): error CS0246: The type or namespace name 'DataStorage' could not be found (are you missing a using directive or an assembly reference?),D:\a\1\s\Dev\Dev2.Activities\Activities\DsfFindRecordsMultipleCriteriaActivity.cs(569,33): error CS0246: The type or namespace name 'DataStorage' could not be found (are you missing a using directive or an assembly reference?),D:\a\1\s\Dev\Dev2.Activities\Activities\DsfFindRecordsMultipleCriteriaActivity.cs(570,33): error CS0246: The type or namespace name 'DataStorage' could not be found (are you missing a using directive or an assembly reference?),D:\a\1\s\Dev\Dev2.Activities\Activities\DsfFindRecordsMultipleCriteriaActivity.cs(570,75): error CS0246: The type or namespace name 'DataStorage' could not be found (are you missing a using directive or an assembly reference?),D:\a\1\s\Dev\Dev2.Activities\Activities\DsfFindRecordsMultipleCriteriaActivity.cs(571,33): error CS0246: The type or namespace name 'DataStorage' could not be found (are you missing a using directive or an assembly reference?),D:\a\1\s\Dev\Dev2.Activities\Activities\DsfFindRecordsMultipleCriteriaActivity.cs(571,78): error CS0246: The type or namespace name 'DataStorage' could not be found (are you missing a using directive or an assembly reference?),D:\a\1\s\Dev\Dev2.Activities\Activities\DsfFindRecordsMultipleCriteriaActivity.cs(575,33): error CS0246: The type or namespace name 'DataStorage' could not be found (are you missing a using directive or an assembly reference?),D:\a\1\s\Dev\Dev2.Activities\Activities\DsfFindRecordsMultipleCriteriaActivity.cs(579,35): error CS0246: The type or namespace name 'DataStorage' could not be found (are you missing a using directive or an assembly reference?),D:\a\1\s\Dev\Dev2.Activities\Activities\DsfFindRecordsMultipleCriteriaActivity.cs(583,24): error CS0246: The type or namespace name 'DataStorage' could not be found (are you missing a using directive or an assembly reference?),D:\a\1\s\Dev\Dev2.Activities\Activities\DsfFindRecordsMultipleCriteriaActivity.cs(606,76): error CS0246: The type or namespace name 'DataStorage' could not be found (are you missing a using directive or an assembly reference?),D:\a\1\s\Dev\Dev2.Activities\Activities\DsfFindRecordsMultipleCriteriaActivity.cs(606,150): error CS0246: The type or namespace name 'DataStorage' could not be found (are you missing a using directive or an assembly reference?),D:\a\1\s\Dev\Dev2.Activities\Activities\DsfFindRecordsMultipleCriteriaActivity.cs(606,195): error CS0246: The type or namespace name 'DataStorage' could not be found (are you missing a using directive or an assembly reference?),D:\a\1\s\Dev\Dev2.Activities\Activities\DsfFindRecordsMultipleCriteriaActivity.cs(606,239): error CS0246: The type or namespace name 'DataStorage' could not be found (are you missing a using directive or an assembly reference?),D:\a\1\s\Dev\Dev2.Activities\Activities\DsfFindRecordsMultipleCriteriaActivity.cs(606,18): error CS0246: The type or namespace name 'DataStorage' could not be found (are you missing a using directive or an assembly reference?),D:\a\1\s\Dev\Dev2.Activities\Activities\DsfFindRecordsMultipleCriteriaActivity.cs(636,24): error CS0246: The type or namespace name 'DataStorage' could not be found (are you missing a using directive or an assembly reference?),D:\a\1\s\Dev\Dev2.Activities\Activities\DsfFindRecordsMultipleCriteriaActivity.cs(659,28): error CS0246: The type or namespace name 'DataStorage' could not be found (are you missing a using directive or an assembly reference?),D:\a\1\s\Dev\Dev2.Activities\Activities\DsfFindRecordsMultipleCriteriaActivity.cs(648,51): error CS0246: The type or namespace name 'DataStorage' could not be found (are you missing a using directive or an assembly reference?),D:\a\1\s\Dev\Dev2.Activities\Activities\DsfFindRecordsMultipleCriteriaActivity.cs(680,24): error CS0246: The type or namespace name 'DataStorage' could not be found (are you missing a using directive or an assembly reference?)
---- Semantic diagnostics *after* transformation ----
D:\a\1\s\Dev\Dev2.Activities\Activities\DsfFindRecordsMultipleCriteriaActivity.cs(625,66): error CS0246: The type or namespace name 'DataStorage' could not be found (are you missing a using directive or an assembly reference?),D:\a\1\s\Dev\Dev2.Activities\Activities\DsfFindRecordsMultipleCriteriaActivity.cs(625,135): error CS0246: The type or namespace name 'DataStorage' could not be found (are you missing a using directive or an assembly reference?),D:\a\1\s\Dev\Dev2.Activities\Activities\DsfFindRecordsMultipleCriteriaActivity.cs(625,181): error CS0246: The type or namespace name 'DataStorage' could not be found (are you missing a using directive or an assembly reference?),D:\a\1\s\Dev\Dev2.Activities\Activities\DsfFindRecordsMultipleCriteriaActivity.cs(625,225): error CS0246: The type or namespace name 'DataStorage' could not be found (are you missing a using directive or an assembly reference?),D:\a\1\s\Dev\Dev2.Activities\Activities\DsfFindRecordsMultipleCriteriaActivity.cs(625,14): error CS0246: The type or namespace name 'DataStorage' could not be found (are you missing a using directive or an assembly reference?),D:\a\1\s\Dev\Dev2.Activities\Activities\DsfFindRecordsMultipleCriteriaActivity.cs(642,65): error CS0246: The type or namespace name 'DataStorage' could not be found (are you missing a using directive or an assembly reference?),D:\a\1\s\Dev\Dev2.Activities\Activities\DsfFindRecordsMultipleCriteriaActivity.cs(642,134): error CS0246: The type or namespace name 'DataStorage' could not be found (are you missing a using directive or an assembly reference?),D:\a\1\s\Dev\Dev2.Activities\Activities\DsfFindRecordsMultipleCriteriaActivity.cs(642,180): error CS0246: The type or namespace name 'DataStorage' could not be found (are you missing a using directive or an assembly reference?),D:\a\1\s\Dev\Dev2.Activities\Activities\DsfFindRecordsMultipleCriteriaActivity.cs(642,224): error CS0246: The type or namespace name 'DataStorage' could not be found (are you missing a using directive or an assembly reference?),D:\a\1\s\Dev\Dev2.Activities\Activities\DsfFindRecordsMultipleCriteriaActivity.cs(642,14): error CS0246: The type or namespace name 'DataStorage' could not be found (are you missing a using directive or an assembly reference?),D:\a\1\s\Dev\Dev2.Activities\Activities\DsfFindRecordsMultipleCriteriaActivity.cs(669,100): error CS0246: The type or namespace name 'DataStorage' could not be found (are you missing a using directive or an assembly reference?),D:\a\1\s\Dev\Dev2.Activities\Activities\DsfFindRecordsMultipleCriteriaActivity.cs(669,146): error CS0246: The type or namespace name 'DataStorage' could not be found (are you missing a using directive or an assembly reference?),D:\a\1\s\Dev\Dev2.Activities\Activities\DsfFindRecordsMultipleCriteriaActivity.cs(669,190): error CS0246: The type or namespace name 'DataStorage' could not be found (are you missing a using directive or an assembly reference?),D:\a\1\s\Dev\Dev2.Activities\Activities\DsfFindRecordsMultipleCriteriaActivity.cs(669,14): error CS0246: The type or namespace name 'DataStorage' could not be found (are you missing a using directive or an assembly reference?),D:\a\1\s\Dev\Dev2.Activities\Activities\DsfFindRecordsMultipleCriteriaActivity.cs(565,22): error CS0246: The type or namespace name 'DataStorage' could not be found (are you missing a using directive or an assembly reference?),D:\a\1\s\Dev\Dev2.Activities\Activities\DsfFindRecordsMultipleCriteriaActivity.cs(568,33): error CS0246: The type or namespace name 'DataStorage' could not be found (are you missing a using directive or an assembly reference?),D:\a\1\s\Dev\Dev2.Activities\Activities\DsfFindRecordsMultipleCriteriaActivity.cs(569,33): error CS0246: The type or namespace name 'DataStorage' could not be found (are you missing a using directive or an assembly reference?),D:\a\1\s\Dev\Dev2.Activities\Activities\DsfFindRecordsMultipleCriteriaActivity.cs(569,75): error CS0246: The type or namespace name 'DataStorage' could not be found (are you missing a using directive or an assembly reference?),D:\a\1\s\Dev\Dev2.Activities\Activities\DsfFindRecordsMultipleCriteriaActivity.cs(570,33): error CS0246: The type or namespace name 'DataStorage' could not be found (are you missing a using directive or an assembly reference?),D:\a\1\s\Dev\Dev2.Activities\Activities\DsfFindRecordsMultipleCriteriaActivity.cs(570,78): error CS0246: The type or namespace name 'DataStorage' could not be found (are you missing a using directive or an assembly reference?),D:\a\1\s\Dev\Dev2.Activities\Activities\DsfFindRecordsMultipleCriteriaActivity.cs(574,33): error CS0246: The type or namespace name 'DataStorage' could not be found (are you missing a using directive or an assembly reference?),D:\a\1\s\Dev\Dev2.Activities\Activities\DsfFindRecordsMultipleCriteriaActivity.cs(578,35): error CS0246: The type or namespace name 'DataStorage' could not be found (are you missing a using directive or an assembly reference?),D:\a\1\s\Dev\Dev2.Activities\Activities\DsfFindRecordsMultipleCriteriaActivity.cs(582,24): error CS0246: The type or namespace name 'DataStorage' could not be found (are you missing a using directive or an assembly reference?),D:\a\1\s\Dev\Dev2.Activities\Activities\DsfFindRecordsMultipleCriteriaActivity.cs(605,76): error CS0246: The type or namespace name 'DataStorage' could not be found (are you missing a using directive or an assembly reference?),D:\a\1\s\Dev\Dev2.Activities\Activities\DsfFindRecordsMultipleCriteriaActivity.cs(605,150): error CS0246: The type or namespace name 'DataStorage' could not be found (are you missing a using directive or an assembly reference?),D:\a\1\s\Dev\Dev2.Activities\Activities\DsfFindRecordsMultipleCriteriaActivity.cs(605,195): error CS0246: The type or namespace name 'DataStorage' could not be found (are you missing a using directive or an assembly reference?),D:\a\1\s\Dev\Dev2.Activities\Activities\DsfFindRecordsMultipleCriteriaActivity.cs(605,239): error CS0246: The type or namespace name 'DataStorage' could not be found (are you missing a using directive or an assembly reference?),D:\a\1\s\Dev\Dev2.Activities\Activities\DsfFindRecordsMultipleCriteriaActivity.cs(605,18): error CS0246: The type or namespace name 'DataStorage' could not be found (are you missing a using directive or an assembly reference?),D:\a\1\s\Dev\Dev2.Activities\Activities\DsfFindRecordsMultipleCriteriaActivity.cs(635,24): error CS0246: The type or namespace name 'DataStorage' could not be found (are you missing a using directive or an assembly reference?),D:\a\1\s\Dev\Dev2.Activities\Activities\DsfFindRecordsMultipleCriteriaActivity.cs(359,27): error CS0165: Use of unassigned local variable 'currentName',D:\a\1\s\Dev\Dev2.Activities\Activities\DsfFindRecordsMultipleCriteriaActivity.cs(658,28): error CS0246: The type or namespace name 'DataStorage' could not be found (are you missing a using directive or an assembly reference?),D:\a\1\s\Dev\Dev2.Activities\Activities\DsfFindRecordsMultipleCriteriaActivity.cs(647,51): error CS0246: The type or namespace name 'DataStorage' could not be found (are you missing a using directive or an assembly reference?),D:\a\1\s\Dev\Dev2.Activities\Activities\DsfFindRecordsMultipleCriteriaActivity.cs(679,24): error CS0246: The type or namespace name 'DataStorage' could not be found (are you missing a using directive or an assembly reference?)
######################################################################


######################################################################
Nr: 9 - UsePatternMatchingRewriterR8
Filepath: D:\a\1\s\Dev\Dev2.Activities\Activities\DsfDataMergeActivity.cs
Description: Error: The created Syntax Tree is semantically incorrect.
------------------------------------------------------------------------
---- Original Tree ----
using System;
using System.Activities;
using System.Activities.Presentation.Model;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using Dev2;
using Dev2.Activities;
using Dev2.Activities.Debug;
using Dev2.Common;
using Dev2.Common.Interfaces;
using Dev2.Common.Interfaces.Diagnostics.Debug;
using Dev2.Common.Interfaces.Toolbox;
using Dev2.Data;
using Dev2.Data.Interfaces;
using Dev2.Data.Operations;
using Dev2.Data.TO;
using Dev2.Data.Util;
using Dev2.Diagnostics;
using Dev2.Interfaces;
using Warewolf.Core;
using Warewolf.Resource.Errors;
using Warewolf.Storage;
using Warewolf.Storage.Interfaces;
using WarewolfParserInterop;
using Dev2.Comparer;
using Dev2.Common.State;
using Dev2.Utilities;

namespace Unlimited.Applications.BusinessDesignStudio.Activities

{
    [ToolDescriptorInfo("Data-DataMerge", "Data Merge", ToolType.Native, "8999E59A-38A3-43BB-A98F-6090C5C9EA1E", "Dev2.Activities", "1.0.0.0", "Legacy", "Data", "/Warewolf.Studio.Themes.Luna;component/Images.xaml", "Tool_Data_Data_Merge")]
    public class DsfDataMergeActivity : DsfActivityAbstract<string>, ICollectionActivity, IEquatable<DsfDataMergeActivity>
    {
        #region Class Members

        string _result;

        #endregion Class Members

        #region Properties

        IList<DataMergeDTO> _mergeCollection;
        public IList<DataMergeDTO> MergeCollection
        {
            get
            {
                return _mergeCollection;
            }
            set
            {
                _mergeCollection = value;
                OnPropertyChanged("MergeCollection");
            }
        }

        public new string Result
        {
            get
            {
                return _result;
            }
            set
            {
                _result = value;
                OnPropertyChanged("Result");
            }
        }

        protected override bool CanInduceIdle => true;

        #endregion

        #region Ctor

        public DsfDataMergeActivity()
            : base("Data Merge")
        {
            MergeCollection = new List<DataMergeDTO>();
        }

        #endregion

        #region Overridden NativeActivity Methods

        protected override void CacheMetadata(NativeActivityMetadata metadata) => base.CacheMetadata(metadata);


        protected override void OnExecute(NativeActivityContext context)
        {
            var dataObject = context.GetExtension<IDSFDataObject>();
            ExecuteTool(dataObject, 0);
        }

        protected override void ExecuteTool(IDSFDataObject dataObject, int update)
        {


            IDev2MergeOperations mergeOperations = new Dev2MergeOperations();
            var allErrors = new ErrorResultTO();
            var errorResultTo = new ErrorResultTO();

            InitializeDebug(dataObject);
            try
            {
                CleanArguments(MergeCollection);

                if (MergeCollection.Count <= 0)
                {
                    return;
                }
                TryExecuteTool(dataObject, update, mergeOperations, allErrors, errorResultTo);
            }
            catch (Exception e)
            {
                Dev2Logger.Error("DSFDataMerge", e, GlobalConstants.WarewolfError);
                allErrors.AddError(e.Message);
            }
            finally
            {
                #region Handle Errors

                if (allErrors.HasErrors())
                {
                    if (dataObject.IsDebugMode())
                    {
                        AddDebugOutputItem(new DebugItemStaticDataParams("", Result, ""));
                    }
                    DisplayAndWriteError("DsfDataMergeActivity", allErrors);
                    var errorString = allErrors.MakeDisplayReady();
                    dataObject.Environment.AddError(errorString);
                }

                if (dataObject.IsDebugMode())
                {
                    DispatchDebugState(dataObject, StateType.Before, update);
                    DispatchDebugState(dataObject, StateType.After, update);
                }

                #endregion
            }
        }

#pragma warning disable S1541 // Methods and properties should not be too complex
#pragma warning disable S3776 // Cognitive Complexity of methods should not be too high
        private void TryExecuteTool(IDSFDataObject dataObject, int update, IDev2MergeOperations mergeOperations, ErrorResultTO allErrors, ErrorResultTO errorResultTo)
#pragma warning restore S3776 // Cognitive Complexity of methods should not be too high
#pragma warning restore S1541 // Methods and properties should not be too complex
        {
            IWarewolfListIterator warewolfListIterator = new WarewolfListIterator();
            allErrors.MergeErrors(errorResultTo);
            var listOfIterators = new Dictionary<int, List<IWarewolfIterator>>();

            #region Create a iterator for each row in the data grid in the designer so that the right iteration happen on the data

            var dictionaryKey = 0;
            foreach (DataMergeDTO row in MergeCollection)
            {
                allErrors.MergeErrors(errorResultTo);

                if (dataObject.IsDebugMode())
                {
                    var debugItem = new DebugItem();
                    AddDebugItem(new DebugItemStaticDataParams("", (MergeCollection.IndexOf(row) + 1).ToString(CultureInfo.InvariantCulture)), debugItem);
                    AddDebugItem(new DebugEvalResult(row.InputVariable, "", dataObject.Environment, update, true), debugItem);
                    AddDebugItem(new DebugItemStaticDataParams(row.MergeType, "With"), debugItem);
                    AddDebugItem(new DebugEvalResult(row.At, "Using", dataObject.Environment, update), debugItem);
                    AddDebugItem(new DebugEvalResult(row.Padding, "Pad", dataObject.Environment, update), debugItem);

                    //Old workflows don't have this set. 
                    if (row.Alignment == null)
                    {
                        row.Alignment = string.Empty;
                    }

                    AddDebugItem(DataListUtil.IsEvaluated(row.Alignment) ? new DebugItemStaticDataParams("", row.Alignment, "Align") : new DebugItemStaticDataParams(row.Alignment, "Align"), debugItem);

                    _debugInputs.Add(debugItem);
                }
                var listOfEvalResultsForInput = dataObject.Environment.EvalForDataMerge(row.InputVariable, update);
                var innerIterator = new WarewolfListIterator();
                var innerListOfIters = new List<WarewolfIterator>();

                foreach (var listOfIterator in listOfEvalResultsForInput)
                {
                    var inIterator = new WarewolfIterator(listOfIterator);
                    innerIterator.AddVariableToIterateOn(inIterator);
                    innerListOfIters.Add(inIterator);
                }
                var atomList = new List<DataStorage.WarewolfAtom>();
                while (innerIterator.HasMoreData())
                {
                    var stringToUse = "";
                    foreach (var warewolfIterator in innerListOfIters)
                    {
                        stringToUse += warewolfIterator.GetNextValue();
                    }
                    atomList.Add(DataStorage.WarewolfAtom.NewDataString(stringToUse));
                }
                var finalString = string.Join("", atomList);
                var inputListResult = CommonFunctions.WarewolfEvalResult.NewWarewolfAtomListresult(new WarewolfAtomList<DataStorage.WarewolfAtom>(DataStorage.WarewolfAtom.Nothing, atomList));
                if (DataListUtil.IsFullyEvaluated(finalString))
                {
                    inputListResult = dataObject.Environment.Eval(finalString, update);
                }

                var inputIterator = new WarewolfIterator(inputListResult);
                var atIterator = new WarewolfIterator(dataObject.Environment.Eval(row.At, update));
                var paddingIterator = new WarewolfIterator(dataObject.Environment.Eval(row.Padding, update));
                warewolfListIterator.AddVariableToIterateOn(inputIterator);
                warewolfListIterator.AddVariableToIterateOn(atIterator);
                warewolfListIterator.AddVariableToIterateOn(paddingIterator);

                listOfIterators.Add(dictionaryKey, new List<IWarewolfIterator> { inputIterator, atIterator, paddingIterator });
                dictionaryKey++;
            }

            #endregion

            #region Iterate and Merge Data

            if (!allErrors.HasErrors())
            {
                while (warewolfListIterator.HasMoreData())
                {
                    var pos = 0;
                    foreach (var iterator in listOfIterators)
                    {
                        var val = warewolfListIterator.FetchNextValue(iterator.Value[0]);
                        var at = warewolfListIterator.FetchNextValue(iterator.Value[1]);
                        var pad = warewolfListIterator.FetchNextValue(iterator.Value[2]);
                        pos = AddErrorAndMerge(mergeOperations, allErrors, pos, val, at, pad);
                    }
                }
                if (!allErrors.HasErrors())
                {
                    if (string.IsNullOrEmpty(Result))
                    {
                        AddDebugOutputItem(new DebugItemStaticDataParams("", ""));
                    }
                    else
                    {
                        AddToErrorsToDebugOutput(dataObject, update, mergeOperations, allErrors, errorResultTo);
                    }
                }
            }

            #endregion Iterate and Merge Data
        }

        private void AddToErrorsToDebugOutput(IDSFDataObject dataObject, int update, IDev2MergeOperations mergeOperations, ErrorResultTO allErrors, ErrorResultTO errorResultTo)
        {
            dataObject.Environment.Assign(Result, mergeOperations.MergeData.ToString(), update);
            allErrors.MergeErrors(errorResultTo);

            if (dataObject.IsDebugMode() && !allErrors.HasErrors())
            {
                AddDebugOutputItem(new DebugEvalResult(Result, "", dataObject.Environment, update));
            }
        }

#pragma warning disable S1541 // Methods and properties should not be too complex
        private int AddErrorAndMerge(IDev2MergeOperations mergeOperations, ErrorResultTO allErrors, int pos, string val, string at, string pad)
#pragma warning restore S1541 // Methods and properties should not be too complex
        {
            if (val != null && at != null && pad != null)
            {
                if (MergeCollection[pos].MergeType == "Index")
                {
                    if (string.IsNullOrEmpty(at))
                    {
                        allErrors.AddError(ErrorResource.BlankUSINGValue);
                    }

                    if (!Int32.TryParse(at, out int atValue) || atValue < 0)
                    {
                        allErrors.AddError(ErrorResource.USINGMustBeARealNumber);
                    }
                    if (pad.Length > 1)
                    {
                        allErrors.AddError(ErrorResource.PADDINGMustBeSingleCharecter);
                    }
                }
                else
                {
                    if (MergeCollection[pos].MergeType == "Chars" && string.IsNullOrEmpty(at))
                    {
                        allErrors.AddError(ErrorResource.BlankUSINGValue);
                    }
                }
                mergeOperations.Merge(val, MergeCollection[pos].MergeType, at, pad, MergeCollection[pos].Alignment);
                pos++;
            }

            return pos;
        }

        public override enFindMissingType GetFindMissingType() => enFindMissingType.MixedActivity;

        #endregion

        #region Private Methods

        void CleanArguments(IList<DataMergeDTO> args)
        {
            var count = 0;
            while (count < args.Count)
            {
                if (args[count].IsEmpty())
                {
                    args.RemoveAt(count);
                }
                else
                {
                    count++;
                }
            }
        }

        void InsertToCollection(IEnumerable<string> listToAdd, ModelItem modelItem)
        {
            var modelProperty = modelItem.Properties["MergeCollection"];
            if (modelProperty == null)
            {
                return;
            }
            var mic = modelProperty.Collection;

            if (mic == null)
            {
                return;
            }
            var listOfValidRows = MergeCollection.Where(c => !c.CanRemove()).ToList();
            if (listOfValidRows.Count > 0)
            {
                var dataMergeDto = MergeCollection.Last(c => !c.CanRemove());
                var startIndex = MergeCollection.IndexOf(dataMergeDto) + 1;
                foreach (string s in listToAdd)
                {
                    mic.Insert(startIndex, new DataMergeDTO(s, MergeCollection[startIndex - 1].MergeType, MergeCollection[startIndex - 1].At, startIndex + 1, MergeCollection[startIndex - 1].Padding, MergeCollection[startIndex - 1].Alignment));
                    startIndex++;
                }
                CleanUpCollection(mic, modelItem, startIndex);
            }
            else
            {
                AddToCollection(listToAdd, modelItem);
            }
        }

        void AddToCollection(IEnumerable<string> listToAdd, ModelItem modelItem)
        {
            var modelProperty = modelItem.Properties["MergeCollection"];
            if (modelProperty != null)
            {
                var mic = modelProperty.Collection;

                if (mic != null)
                {
                    var startIndex = 0;
                    var firstRowMergeType = MergeCollection[0].MergeType;
                    var firstRowPadding = MergeCollection[0].Padding;
                    var firstRowAlignment = MergeCollection[0].Alignment;
                    mic.Clear();
                    foreach (string s in listToAdd)
                    {
                        mic.Add(new DataMergeDTO(s, firstRowMergeType, string.Empty, startIndex + 1, firstRowPadding, firstRowAlignment));
                        startIndex++;
                    }
                    CleanUpCollection(mic, modelItem, startIndex);
                }
            }
        }

        void CleanUpCollection(ModelItemCollection mic, ModelItem modelItem, int startIndex)
        {
            if (startIndex < mic.Count)
            {
                mic.RemoveAt(startIndex);
            }
            mic.Add(new DataMergeDTO(string.Empty, "None", string.Empty, startIndex + 1, " ", "Left To Right"));
            var modelProperty = modelItem.Properties["DisplayName"];
            modelProperty?.SetValue(CreateDisplayName(modelItem, startIndex + 1));
        }

        string CreateDisplayName(ModelItem modelItem, int count)
        {
            var modelProperty = modelItem.Properties["DisplayName"];
            if (modelProperty != null)
            {
                var currentName = modelProperty.ComputedValue as string;
                if (currentName != null && currentName.Contains("(") && currentName.Contains(")"))
                {
                    currentName = currentName.Remove(currentName.Contains(" (") ? currentName.IndexOf(" (", StringComparison.Ordinal) : currentName.IndexOf("(", StringComparison.Ordinal));
                }
                currentName = currentName + " (" + (count - 1) + ")";
                return currentName;
            }
            return null;
        }

        #endregion Private Methods

        #region Get Debug Inputs/Outputs





        public override List<DebugItem> GetDebugInputs(IExecutionEnvironment env, int update) => _debugInputs;

        public override List<DebugItem> GetDebugOutputs(IExecutionEnvironment env, int update)
        {
            foreach (IDebugItem debugOutput in _debugOutputs)
            {
                debugOutput.FlushStringBuilder();
            }
            return _debugOutputs;
        }


        #endregion

        #region Get ForEach Inputs/Outputs

        public override void UpdateForEachInputs(IList<Tuple<string, string>> updates)
        {
            if (updates != null)
            {
                foreach (Tuple<string, string> t in updates)
                {
                    // locate all updates for this tuple
                    var t1 = t;
                    var items = MergeCollection.Where(c => !string.IsNullOrEmpty(c.InputVariable) && c.InputVariable.Equals(t1.Item1));

                    // issues updates
                    foreach (var a in items)
                    {
                        a.InputVariable = t.Item2;
                    }
                }
            }
        }

        public override void UpdateForEachOutputs(IList<Tuple<string, string>> updates)
        {
            var itemUpdate = updates?.FirstOrDefault(tuple => tuple.Item1 == Result);
            if (itemUpdate != null)
            {
                Result = itemUpdate.Item2;
            }
        }

        #endregion

        #region GetForEachInputs/Outputs

        public override IList<DsfForEachItem> GetForEachInputs()
        {
            var items = MergeCollection.Where(c => !string.IsNullOrEmpty(c.InputVariable)).Select(c => c.InputVariable).Union(MergeCollection.Where(c => !string.IsNullOrEmpty(c.At)).Select(c => c.At)).ToArray();
            return GetForEachItems(items);
        }

        public override IList<DsfForEachItem> GetForEachOutputs()
        {
            var items = new string[1];
            if (!string.IsNullOrEmpty(Result))
            {
                items[0] = Result;
            }
            return GetForEachItems(items);
        }

        #endregion

        #region Implementation of ICollectionActivity

        public int GetCollectionCount() => MergeCollection.Count(caseConvertTo => !caseConvertTo.CanRemove());

        public void AddListToCollection(IList<string> listToAdd, bool overwrite, ModelItem modelItem)
        {
            if (!overwrite)
            {
                InsertToCollection(listToAdd, modelItem);
            }
            else
            {
                AddToCollection(listToAdd, modelItem);
            }
        }

        #endregion

        public override List<string> GetOutputs() => new List<string> { Result };

        public override IEnumerable<StateVariable> GetState()
        {
            return new[]
            {
                new StateVariable
                {
                    Name="Merge Collection",
                    Type=StateVariable.StateType.Input,
                    Value= ActivityHelper.GetSerializedStateValueFromCollection(MergeCollection)
                },
                new StateVariable
                {
                    Name="Result",
                    Type=StateVariable.StateType.Output,
                    Value=Result
                }
            };
        }

        public bool Equals(DsfDataMergeActivity other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            var mergeCollsAreEqual = CommonEqualityOps.CollectionEquals(MergeCollection, other.MergeCollection, new DataMergeDtoComparer());
            return base.Equals(other) && string.Equals(Result, other.Result)
                && mergeCollsAreEqual;
        }

        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != this.GetType())
            {
                return false;
            }

            return Equals((DsfDataMergeActivity)obj);
        }

        public override int GetHashCode()
        {
            unchecked
            {
                var hashCode = base.GetHashCode();
                hashCode = (hashCode * 397) ^ (Result != null ? Result.GetHashCode() : 0);
                hashCode = (hashCode * 397) ^ (MergeCollection != null ? MergeCollection.GetHashCode() : 0);
                return hashCode;
            }
        }
    }
}

---- Transformed Tree ----
using System;
using System.Activities;
using System.Activities.Presentation.Model;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using Dev2;
using Dev2.Activities;
using Dev2.Activities.Debug;
using Dev2.Common;
using Dev2.Common.Interfaces;
using Dev2.Common.Interfaces.Diagnostics.Debug;
using Dev2.Common.Interfaces.Toolbox;
using Dev2.Data;
using Dev2.Data.Interfaces;
using Dev2.Data.Operations;
using Dev2.Data.TO;
using Dev2.Data.Util;
using Dev2.Diagnostics;
using Dev2.Interfaces;
using Warewolf.Core;
using Warewolf.Resource.Errors;
using Warewolf.Storage;
using Warewolf.Storage.Interfaces;
using WarewolfParserInterop;
using Dev2.Comparer;
using Dev2.Common.State;
using Dev2.Utilities;

namespace Unlimited.Applications.BusinessDesignStudio.Activities

{
    [ToolDescriptorInfo("Data-DataMerge", "Data Merge", ToolType.Native, "8999E59A-38A3-43BB-A98F-6090C5C9EA1E", "Dev2.Activities", "1.0.0.0", "Legacy", "Data", "/Warewolf.Studio.Themes.Luna;component/Images.xaml", "Tool_Data_Data_Merge")]
    public class DsfDataMergeActivity : DsfActivityAbstract<string>, ICollectionActivity, IEquatable<DsfDataMergeActivity>
    {
        #region Class Members

        string _result;

        #endregion Class Members

        #region Properties

        IList<DataMergeDTO> _mergeCollection;
        public IList<DataMergeDTO> MergeCollection
        {
            get
            {
                return _mergeCollection;
            }
            set
            {
                _mergeCollection = value;
                OnPropertyChanged("MergeCollection");
            }
        }

        public new string Result
        {
            get
            {
                return _result;
            }
            set
            {
                _result = value;
                OnPropertyChanged("Result");
            }
        }

        protected override bool CanInduceIdle => true;

        #endregion

        #region Ctor

        public DsfDataMergeActivity()
            : base("Data Merge")
        {
            MergeCollection = new List<DataMergeDTO>();
        }

        #endregion

        #region Overridden NativeActivity Methods

        protected override void CacheMetadata(NativeActivityMetadata metadata) => base.CacheMetadata(metadata);


        protected override void OnExecute(NativeActivityContext context)
        {
            var dataObject = context.GetExtension<IDSFDataObject>();
            ExecuteTool(dataObject, 0);
        }

        protected override void ExecuteTool(IDSFDataObject dataObject, int update)
        {


            IDev2MergeOperations mergeOperations = new Dev2MergeOperations();
            var allErrors = new ErrorResultTO();
            var errorResultTo = new ErrorResultTO();

            InitializeDebug(dataObject);
            try
            {
                CleanArguments(MergeCollection);

                if (MergeCollection.Count <= 0)
                {
                    return;
                }
                TryExecuteTool(dataObject, update, mergeOperations, allErrors, errorResultTo);
            }
            catch (Exception e)
            {
                Dev2Logger.Error("DSFDataMerge", e, GlobalConstants.WarewolfError);
                allErrors.AddError(e.Message);
            }
            finally
            {
                #region Handle Errors

                if (allErrors.HasErrors())
                {
                    if (dataObject.IsDebugMode())
                    {
                        AddDebugOutputItem(new DebugItemStaticDataParams("", Result, ""));
                    }
                    DisplayAndWriteError("DsfDataMergeActivity", allErrors);
                    var errorString = allErrors.MakeDisplayReady();
                    dataObject.Environment.AddError(errorString);
                }

                if (dataObject.IsDebugMode())
                {
                    DispatchDebugState(dataObject, StateType.Before, update);
                    DispatchDebugState(dataObject, StateType.After, update);
                }

                #endregion
            }
        }

#pragma warning disable S1541 // Methods and properties should not be too complex
#pragma warning disable S3776 // Cognitive Complexity of methods should not be too high
        private void TryExecuteTool(IDSFDataObject dataObject, int update, IDev2MergeOperations mergeOperations, ErrorResultTO allErrors, ErrorResultTO errorResultTo)
#pragma warning restore S3776 // Cognitive Complexity of methods should not be too high
#pragma warning restore S1541 // Methods and properties should not be too complex
        {
            IWarewolfListIterator warewolfListIterator = new WarewolfListIterator();
            allErrors.MergeErrors(errorResultTo);
            var listOfIterators = new Dictionary<int, List<IWarewolfIterator>>();

            #region Create a iterator for each row in the data grid in the designer so that the right iteration happen on the data

            var dictionaryKey = 0;
            foreach (DataMergeDTO row in MergeCollection)
            {
                allErrors.MergeErrors(errorResultTo);

                if (dataObject.IsDebugMode())
                {
                    var debugItem = new DebugItem();
                    AddDebugItem(new DebugItemStaticDataParams("", (MergeCollection.IndexOf(row) + 1).ToString(CultureInfo.InvariantCulture)), debugItem);
                    AddDebugItem(new DebugEvalResult(row.InputVariable, "", dataObject.Environment, update, true), debugItem);
                    AddDebugItem(new DebugItemStaticDataParams(row.MergeType, "With"), debugItem);
                    AddDebugItem(new DebugEvalResult(row.At, "Using", dataObject.Environment, update), debugItem);
                    AddDebugItem(new DebugEvalResult(row.Padding, "Pad", dataObject.Environment, update), debugItem);

                    //Old workflows don't have this set. 
                    if (row.Alignment == null)
                    {
                        row.Alignment = string.Empty;
                    }

                    AddDebugItem(DataListUtil.IsEvaluated(row.Alignment) ? new DebugItemStaticDataParams("", row.Alignment, "Align") : new DebugItemStaticDataParams(row.Alignment, "Align"), debugItem);

                    _debugInputs.Add(debugItem);
                }
                var listOfEvalResultsForInput = dataObject.Environment.EvalForDataMerge(row.InputVariable, update);
                var innerIterator = new WarewolfListIterator();
                var innerListOfIters = new List<WarewolfIterator>();

                foreach (var listOfIterator in listOfEvalResultsForInput)
                {
                    var inIterator = new WarewolfIterator(listOfIterator);
                    innerIterator.AddVariableToIterateOn(inIterator);
                    innerListOfIters.Add(inIterator);
                }
                var atomList = new List<DataStorage.WarewolfAtom>();
                while (innerIterator.HasMoreData())
                {
                    var stringToUse = "";
                    foreach (var warewolfIterator in innerListOfIters)
                    {
                        stringToUse += warewolfIterator.GetNextValue();
                    }
                    atomList.Add(DataStorage.WarewolfAtom.NewDataString(stringToUse));
                }
                var finalString = string.Join("", atomList);
                var inputListResult = CommonFunctions.WarewolfEvalResult.NewWarewolfAtomListresult(new WarewolfAtomList<DataStorage.WarewolfAtom>(DataStorage.WarewolfAtom.Nothing, atomList));
                if (DataListUtil.IsFullyEvaluated(finalString))
                {
                    inputListResult = dataObject.Environment.Eval(finalString, update);
                }

                var inputIterator = new WarewolfIterator(inputListResult);
                var atIterator = new WarewolfIterator(dataObject.Environment.Eval(row.At, update));
                var paddingIterator = new WarewolfIterator(dataObject.Environment.Eval(row.Padding, update));
                warewolfListIterator.AddVariableToIterateOn(inputIterator);
                warewolfListIterator.AddVariableToIterateOn(atIterator);
                warewolfListIterator.AddVariableToIterateOn(paddingIterator);

                listOfIterators.Add(dictionaryKey, new List<IWarewolfIterator> { inputIterator, atIterator, paddingIterator });
                dictionaryKey++;
            }

            #endregion

            #region Iterate and Merge Data

            if (!allErrors.HasErrors())
            {
                while (warewolfListIterator.HasMoreData())
                {
                    var pos = 0;
                    foreach (var iterator in listOfIterators)
                    {
                        var val = warewolfListIterator.FetchNextValue(iterator.Value[0]);
                        var at = warewolfListIterator.FetchNextValue(iterator.Value[1]);
                        var pad = warewolfListIterator.FetchNextValue(iterator.Value[2]);
                        pos = AddErrorAndMerge(mergeOperations, allErrors, pos, val, at, pad);
                    }
                }
                if (!allErrors.HasErrors())
                {
                    if (string.IsNullOrEmpty(Result))
                    {
                        AddDebugOutputItem(new DebugItemStaticDataParams("", ""));
                    }
                    else
                    {
                        AddToErrorsToDebugOutput(dataObject, update, mergeOperations, allErrors, errorResultTo);
                    }
                }
            }

            #endregion Iterate and Merge Data
        }

        private void AddToErrorsToDebugOutput(IDSFDataObject dataObject, int update, IDev2MergeOperations mergeOperations, ErrorResultTO allErrors, ErrorResultTO errorResultTo)
        {
            dataObject.Environment.Assign(Result, mergeOperations.MergeData.ToString(), update);
            allErrors.MergeErrors(errorResultTo);

            if (dataObject.IsDebugMode() && !allErrors.HasErrors())
            {
                AddDebugOutputItem(new DebugEvalResult(Result, "", dataObject.Environment, update));
            }
        }

#pragma warning disable S1541 // Methods and properties should not be too complex
        private int AddErrorAndMerge(IDev2MergeOperations mergeOperations, ErrorResultTO allErrors, int pos, string val, string at, string pad)
#pragma warning restore S1541 // Methods and properties should not be too complex
        {
            if (val != null && at != null && pad != null)
            {
                if (MergeCollection[pos].MergeType == "Index")
                {
                    if (string.IsNullOrEmpty(at))
                    {
                        allErrors.AddError(ErrorResource.BlankUSINGValue);
                    }

                    if (!Int32.TryParse(at, out int atValue) || atValue < 0)
                    {
                        allErrors.AddError(ErrorResource.USINGMustBeARealNumber);
                    }
                    if (pad.Length > 1)
                    {
                        allErrors.AddError(ErrorResource.PADDINGMustBeSingleCharecter);
                    }
                }
                else
                {
                    if (MergeCollection[pos].MergeType == "Chars" && string.IsNullOrEmpty(at))
                    {
                        allErrors.AddError(ErrorResource.BlankUSINGValue);
                    }
                }
                mergeOperations.Merge(val, MergeCollection[pos].MergeType, at, pad, MergeCollection[pos].Alignment);
                pos++;
            }

            return pos;
        }

        public override enFindMissingType GetFindMissingType() => enFindMissingType.MixedActivity;

        #endregion

        #region Private Methods

        void CleanArguments(IList<DataMergeDTO> args)
        {
            var count = 0;
            while (count < args.Count)
            {
                if (args[count].IsEmpty())
                {
                    args.RemoveAt(count);
                }
                else
                {
                    count++;
                }
            }
        }

        void InsertToCollection(IEnumerable<string> listToAdd, ModelItem modelItem)
        {
            var modelProperty = modelItem.Properties["MergeCollection"];
            if (modelProperty == null)
            {
                return;
            }
            var mic = modelProperty.Collection;

            if (mic == null)
            {
                return;
            }
            var listOfValidRows = MergeCollection.Where(c => !c.CanRemove()).ToList();
            if (listOfValidRows.Count > 0)
            {
                var dataMergeDto = MergeCollection.Last(c => !c.CanRemove());
                var startIndex = MergeCollection.IndexOf(dataMergeDto) + 1;
                foreach (string s in listToAdd)
                {
                    mic.Insert(startIndex, new DataMergeDTO(s, MergeCollection[startIndex - 1].MergeType, MergeCollection[startIndex - 1].At, startIndex + 1, MergeCollection[startIndex - 1].Padding, MergeCollection[startIndex - 1].Alignment));
                    startIndex++;
                }
                CleanUpCollection(mic, modelItem, startIndex);
            }
            else
            {
                AddToCollection(listToAdd, modelItem);
            }
        }

        void AddToCollection(IEnumerable<string> listToAdd, ModelItem modelItem)
        {
            var modelProperty = modelItem.Properties["MergeCollection"];
            if (modelProperty != null)
            {
                var mic = modelProperty.Collection;

                if (mic != null)
                {
                    var startIndex = 0;
                    var firstRowMergeType = MergeCollection[0].MergeType;
                    var firstRowPadding = MergeCollection[0].Padding;
                    var firstRowAlignment = MergeCollection[0].Alignment;
                    mic.Clear();
                    foreach (string s in listToAdd)
                    {
                        mic.Add(new DataMergeDTO(s, firstRowMergeType, string.Empty, startIndex + 1, firstRowPadding, firstRowAlignment));
                        startIndex++;
                    }
                    CleanUpCollection(mic, modelItem, startIndex);
                }
            }
        }

        void CleanUpCollection(ModelItemCollection mic, ModelItem modelItem, int startIndex)
        {
            if (startIndex < mic.Count)
            {
                mic.RemoveAt(startIndex);
            }
            mic.Add(new DataMergeDTO(string.Empty, "None", string.Empty, startIndex + 1, " ", "Left To Right"));
            var modelProperty = modelItem.Properties["DisplayName"];
            modelProperty?.SetValue(CreateDisplayName(modelItem, startIndex + 1));
        }

        string CreateDisplayName(ModelItem modelItem, int count)
        {
            var modelProperty = modelItem.Properties["DisplayName"];
            if (modelProperty != null)
            {
                if (modelProperty.ComputedValue is string currentName && currentName.Contains("(") && currentName.Contains(")"))
                {
                    currentName = currentName.Remove(currentName.Contains(" (") ? currentName.IndexOf(" (", StringComparison.Ordinal) : currentName.IndexOf("(", StringComparison.Ordinal));
                }
                currentName = currentName + " (" + (count - 1) + ")";
                return currentName;
            }
            return null;
        }

        #endregion Private Methods

        #region Get Debug Inputs/Outputs





        public override List<DebugItem> GetDebugInputs(IExecutionEnvironment env, int update) => _debugInputs;

        public override List<DebugItem> GetDebugOutputs(IExecutionEnvironment env, int update)
        {
            foreach (IDebugItem debugOutput in _debugOutputs)
            {
                debugOutput.FlushStringBuilder();
            }
            return _debugOutputs;
        }


        #endregion

        #region Get ForEach Inputs/Outputs

        public override void UpdateForEachInputs(IList<Tuple<string, string>> updates)
        {
            if (updates != null)
            {
                foreach (Tuple<string, string> t in updates)
                {
                    // locate all updates for this tuple
                    var t1 = t;
                    var items = MergeCollection.Where(c => !string.IsNullOrEmpty(c.InputVariable) && c.InputVariable.Equals(t1.Item1));

                    // issues updates
                    foreach (var a in items)
                    {
                        a.InputVariable = t.Item2;
                    }
                }
            }
        }

        public override void UpdateForEachOutputs(IList<Tuple<string, string>> updates)
        {
            var itemUpdate = updates?.FirstOrDefault(tuple => tuple.Item1 == Result);
            if (itemUpdate != null)
            {
                Result = itemUpdate.Item2;
            }
        }

        #endregion

        #region GetForEachInputs/Outputs

        public override IList<DsfForEachItem> GetForEachInputs()
        {
            var items = MergeCollection.Where(c => !string.IsNullOrEmpty(c.InputVariable)).Select(c => c.InputVariable).Union(MergeCollection.Where(c => !string.IsNullOrEmpty(c.At)).Select(c => c.At)).ToArray();
            return GetForEachItems(items);
        }

        public override IList<DsfForEachItem> GetForEachOutputs()
        {
            var items = new string[1];
            if (!string.IsNullOrEmpty(Result))
            {
                items[0] = Result;
            }
            return GetForEachItems(items);
        }

        #endregion

        #region Implementation of ICollectionActivity

        public int GetCollectionCount() => MergeCollection.Count(caseConvertTo => !caseConvertTo.CanRemove());

        public void AddListToCollection(IList<string> listToAdd, bool overwrite, ModelItem modelItem)
        {
            if (!overwrite)
            {
                InsertToCollection(listToAdd, modelItem);
            }
            else
            {
                AddToCollection(listToAdd, modelItem);
            }
        }

        #endregion

        public override List<string> GetOutputs() => new List<string> { Result };

        public override IEnumerable<StateVariable> GetState()
        {
            return new[]
            {
                new StateVariable
                {
                    Name="Merge Collection",
                    Type=StateVariable.StateType.Input,
                    Value= ActivityHelper.GetSerializedStateValueFromCollection(MergeCollection)
                },
                new StateVariable
                {
                    Name="Result",
                    Type=StateVariable.StateType.Output,
                    Value=Result
                }
            };
        }

        public bool Equals(DsfDataMergeActivity other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            var mergeCollsAreEqual = CommonEqualityOps.CollectionEquals(MergeCollection, other.MergeCollection, new DataMergeDtoComparer());
            return base.Equals(other) && string.Equals(Result, other.Result)
                && mergeCollsAreEqual;
        }

        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != this.GetType())
            {
                return false;
            }

            return Equals((DsfDataMergeActivity)obj);
        }

        public override int GetHashCode()
        {
            unchecked
            {
                var hashCode = base.GetHashCode();
                hashCode = (hashCode * 397) ^ (Result != null ? Result.GetHashCode() : 0);
                hashCode = (hashCode * 397) ^ (MergeCollection != null ? MergeCollection.GetHashCode() : 0);
                return hashCode;
            }
        }
    }
}

---- Semantic diagnostics *before* transformation ----
D:\a\1\s\Dev\Dev2.Activities\Activities\DsfDataMergeActivity.cs(192,49): error CS0246: The type or namespace name 'CommonFunctions' could not be found (are you missing a using directive or an assembly reference?),D:\a\1\s\Dev\Dev2.Activities\Activities\DsfDataMergeActivity.cs(196,48): error CS0246: The type or namespace name 'CommonFunctions' could not be found (are you missing a using directive or an assembly reference?),D:\a\1\s\Dev\Dev2.Activities\Activities\DsfDataMergeActivity.cs(196,48): error CS0246: The type or namespace name 'CommonFunctions' could not be found (are you missing a using directive or an assembly reference?),D:\a\1\s\Dev\Dev2.Activities\Activities\DsfDataMergeActivity.cs(196,48): error CS0246: The type or namespace name 'CommonFunctions' could not be found (are you missing a using directive or an assembly reference?),D:\a\1\s\Dev\Dev2.Activities\Activities\DsfDataMergeActivity.cs(198,42): error CS0246: The type or namespace name 'CommonFunctions' could not be found (are you missing a using directive or an assembly reference?),D:\a\1\s\Dev\Dev2.Activities\Activities\DsfDataMergeActivity.cs(202,41): error CS0246: The type or namespace name 'DataStorage' could not be found (are you missing a using directive or an assembly reference?),D:\a\1\s\Dev\Dev2.Activities\Activities\DsfDataMergeActivity.cs(210,34): error CS0103: The name 'DataStorage' does not exist in the current context,D:\a\1\s\Dev\Dev2.Activities\Activities\DsfDataMergeActivity.cs(213,39): error CS0103: The name 'CommonFunctions' does not exist in the current context,D:\a\1\s\Dev\Dev2.Activities\Activities\DsfDataMergeActivity.cs(213,121): error CS0246: The type or namespace name 'DataStorage' could not be found (are you missing a using directive or an assembly reference?),D:\a\1\s\Dev\Dev2.Activities\Activities\DsfDataMergeActivity.cs(213,147): error CS0103: The name 'DataStorage' does not exist in the current context,D:\a\1\s\Dev\Dev2.Activities\Activities\DsfDataMergeActivity.cs(216,39): error CS0246: The type or namespace name 'CommonFunctions' could not be found (are you missing a using directive or an assembly reference?),D:\a\1\s\Dev\Dev2.Activities\Activities\DsfDataMergeActivity.cs(219,41): error CS0246: The type or namespace name 'CommonFunctions' could not be found (are you missing a using directive or an assembly reference?),D:\a\1\s\Dev\Dev2.Activities\Activities\DsfDataMergeActivity.cs(220,55): error CS0246: The type or namespace name 'CommonFunctions' could not be found (are you missing a using directive or an assembly reference?),D:\a\1\s\Dev\Dev2.Activities\Activities\DsfDataMergeActivity.cs(220,38): error CS0246: The type or namespace name 'CommonFunctions' could not be found (are you missing a using directive or an assembly reference?),D:\a\1\s\Dev\Dev2.Activities\Activities\DsfDataMergeActivity.cs(221,60): error CS0246: The type or namespace name 'CommonFunctions' could not be found (are you missing a using directive or an assembly reference?),D:\a\1\s\Dev\Dev2.Activities\Activities\DsfDataMergeActivity.cs(221,43): error CS0246: The type or namespace name 'CommonFunctions' could not be found (are you missing a using directive or an assembly reference?)
---- Semantic diagnostics *after* transformation ----
D:\a\1\s\Dev\Dev2.Activities\Activities\DsfDataMergeActivity.cs(192,49): error CS0246: The type or namespace name 'CommonFunctions' could not be found (are you missing a using directive or an assembly reference?),D:\a\1\s\Dev\Dev2.Activities\Activities\DsfDataMergeActivity.cs(196,48): error CS0246: The type or namespace name 'CommonFunctions' could not be found (are you missing a using directive or an assembly reference?),D:\a\1\s\Dev\Dev2.Activities\Activities\DsfDataMergeActivity.cs(196,48): error CS0246: The type or namespace name 'CommonFunctions' could not be found (are you missing a using directive or an assembly reference?),D:\a\1\s\Dev\Dev2.Activities\Activities\DsfDataMergeActivity.cs(196,48): error CS0246: The type or namespace name 'CommonFunctions' could not be found (are you missing a using directive or an assembly reference?),D:\a\1\s\Dev\Dev2.Activities\Activities\DsfDataMergeActivity.cs(198,42): error CS0246: The type or namespace name 'CommonFunctions' could not be found (are you missing a using directive or an assembly reference?),D:\a\1\s\Dev\Dev2.Activities\Activities\DsfDataMergeActivity.cs(202,41): error CS0246: The type or namespace name 'DataStorage' could not be found (are you missing a using directive or an assembly reference?),D:\a\1\s\Dev\Dev2.Activities\Activities\DsfDataMergeActivity.cs(210,34): error CS0103: The name 'DataStorage' does not exist in the current context,D:\a\1\s\Dev\Dev2.Activities\Activities\DsfDataMergeActivity.cs(213,39): error CS0103: The name 'CommonFunctions' does not exist in the current context,D:\a\1\s\Dev\Dev2.Activities\Activities\DsfDataMergeActivity.cs(213,121): error CS0246: The type or namespace name 'DataStorage' could not be found (are you missing a using directive or an assembly reference?),D:\a\1\s\Dev\Dev2.Activities\Activities\DsfDataMergeActivity.cs(213,147): error CS0103: The name 'DataStorage' does not exist in the current context,D:\a\1\s\Dev\Dev2.Activities\Activities\DsfDataMergeActivity.cs(216,39): error CS0246: The type or namespace name 'CommonFunctions' could not be found (are you missing a using directive or an assembly reference?),D:\a\1\s\Dev\Dev2.Activities\Activities\DsfDataMergeActivity.cs(219,41): error CS0246: The type or namespace name 'CommonFunctions' could not be found (are you missing a using directive or an assembly reference?),D:\a\1\s\Dev\Dev2.Activities\Activities\DsfDataMergeActivity.cs(220,55): error CS0246: The type or namespace name 'CommonFunctions' could not be found (are you missing a using directive or an assembly reference?),D:\a\1\s\Dev\Dev2.Activities\Activities\DsfDataMergeActivity.cs(220,38): error CS0246: The type or namespace name 'CommonFunctions' could not be found (are you missing a using directive or an assembly reference?),D:\a\1\s\Dev\Dev2.Activities\Activities\DsfDataMergeActivity.cs(221,60): error CS0246: The type or namespace name 'CommonFunctions' could not be found (are you missing a using directive or an assembly reference?),D:\a\1\s\Dev\Dev2.Activities\Activities\DsfDataMergeActivity.cs(221,43): error CS0246: The type or namespace name 'CommonFunctions' could not be found (are you missing a using directive or an assembly reference?),D:\a\1\s\Dev\Dev2.Activities\Activities\DsfDataMergeActivity.cs(407,31): error CS0165: Use of unassigned local variable 'currentName'
######################################################################


######################################################################
Nr: 10 - UsePatternMatchingRewriterR8
Filepath: D:\a\1\s\Dev\Dev2.Activities\Activities\DsfBaseConvertActivity.cs
Description: Error: The created Syntax Tree is semantically incorrect.
------------------------------------------------------------------------
---- Original Tree ----
using System;
using System.Activities;
using System.Activities.Presentation.Model;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using Dev2;
using Dev2.Activities;
using Dev2.Activities.Debug;
using Dev2.Common;
using Dev2.Common.Interfaces.Diagnostics.Debug;
using Dev2.Common.Interfaces.Enums.Enums;
using Dev2.Common.Interfaces.Toolbox;
using Dev2.Common.State;
using Dev2.Comparer;
using Dev2.Converters;
using Dev2.Data.TO;
using Dev2.Diagnostics;
using Dev2.Interfaces;
using Dev2.Utilities;
using Dev2.Validation;
using Warewolf.Core;
using Warewolf.Resource.Errors;
using Warewolf.Storage.Interfaces;

namespace Unlimited.Applications.BusinessDesignStudio.Activities
{
    [ToolDescriptorInfo("Data-BaseConversion", "Base Convert", ToolType.Native, "8999E59A-38A3-43BB-A98F-6090C5C9EA1E", "Dev2.Activities", "1.0.0.0", "", "Data", "/Warewolf.Studio.Themes.Luna;component/Images.xaml", "Tool_Data_Base_Convert")]
    public class DsfBaseConvertActivity : DsfActivityAbstract<string>, ICollectionActivity, IEquatable<DsfBaseConvertActivity>
    {
        readonly Dev2BaseConversionFactory _fac = new Dev2BaseConversionFactory();


        /// <summary>
        /// The property that holds all the convertions
        /// </summary>
        public IList<BaseConvertTO> ConvertCollection { get; set; }

        public DsfBaseConvertActivity()
            : base("Base Conversion")
        {
            ConvertCollection = new List<BaseConvertTO>();
        }

        public override List<string> GetOutputs() => ConvertCollection.Select(to => to.ToExpression).ToList();

        protected override void CacheMetadata(NativeActivityMetadata metadata) => base.CacheMetadata(metadata);

        protected override void OnExecute(NativeActivityContext context)
        {
            var dataObject = context.GetExtension<IDSFDataObject>();

            ExecuteTool(dataObject, 0);
        }

        protected override void ExecuteTool(IDSFDataObject dataObject, int update)
        {
            var allErrors = new ErrorResultTO();
            InitializeDebug(dataObject);
            var env = dataObject.Environment;
            try
            {
                TryExecute(dataObject, update, allErrors, env);
            }
            catch (Exception e)
            {
                Dev2Logger.Error("DSFBaseConvert", e, GlobalConstants.WarewolfError);
                allErrors.AddError(e.Message);
            }
            finally
            {
                HandleErrors(dataObject, update, allErrors);
            }
        }

        private void TryExecute(IDSFDataObject dataObject, int update, ErrorResultTO allErrors, IExecutionEnvironment env)
        {
            CleanArgs();

            var inputIndex = 1;
            var outputIndex = 1;

            foreach (var item in ConvertCollection.Where(a => !String.IsNullOrEmpty(a.FromExpression)))
            {
                if (dataObject.IsDebugMode())
                {
                    var debugItem = new DebugItem();
                    AddDebugItem(new DebugItemStaticDataParams("", inputIndex.ToString(CultureInfo.InvariantCulture)), debugItem);
                    AddDebugItem(new DebugEvalResult(item.FromExpression, "Convert", env, update), debugItem);
                    AddDebugItem(new DebugItemStaticDataParams(item.FromType, "From"), debugItem);
                    AddDebugItem(new DebugItemStaticDataParams(item.ToType, "To"), debugItem);
                    _debugInputs.Add(debugItem);
                    inputIndex++;
                }

                try
                {
                    env.ApplyUpdate(item.FromExpression, TryConvertFunc(item, env, update), update);
                    IsSingleValueRule.ApplyIsSingleValueRule(item.FromExpression, allErrors);
                    if (dataObject.IsDebugMode())
                    {
                        var debugItem = new DebugItem();
                        AddDebugItem(new DebugItemStaticDataParams("", outputIndex.ToString(CultureInfo.InvariantCulture)), debugItem);
                        AddDebugItem(new DebugEvalResult(item.FromExpression, "", env, update), debugItem);
                        _debugOutputs.Add(debugItem);
                        outputIndex++;
                    }
                }
                catch (Exception e)
                {
                    Dev2Logger.Error("DSFBaseConvert", e, GlobalConstants.WarewolfError);
                    allErrors.AddError(e.Message);
                    if (dataObject.IsDebugMode())
                    {
                        outputIndex++;
                    }
                }
            }
        }

        private void HandleErrors(IDSFDataObject dataObject, int update, ErrorResultTO allErrors)
        {
            var hasErrors = allErrors.HasErrors();
            if (hasErrors)
            {
                DisplayAndWriteError(nameof(DsfBaseConvertActivity), allErrors);
                var errorString = allErrors.MakeDisplayReady();
                dataObject.Environment.AddError(errorString);
            }
            if (dataObject.IsDebugMode())
            {
                DispatchDebugState(dataObject, StateType.Before, update);
                DispatchDebugState(dataObject, StateType.After, update);
            }
        }

        public override enFindMissingType GetFindMissingType() => enFindMissingType.DataGridActivity;

        Func<DataStorage.WarewolfAtom, DataStorage.WarewolfAtom> TryConvertFunc(BaseConvertTO item, IExecutionEnvironment env, int update) => a =>
        {
            var from = _fac.CreateConverter((enDev2BaseConvertType)Dev2EnumConverter.GetEnumFromStringDiscription(item.FromType, typeof(enDev2BaseConvertType)));
            var to = _fac.CreateConverter((enDev2BaseConvertType)Dev2EnumConverter.GetEnumFromStringDiscription(item.ToType, typeof(enDev2BaseConvertType)));
            var broker = _fac.CreateBroker(@from, to);
            var value = a.ToString();
            if (a.IsNothing)
            {
                throw new Exception(string.Format(ErrorResource.NullScalarValue, item.FromExpression));
            }
            if (String.IsNullOrEmpty(value))
            {
                return DataStorage.WarewolfAtom.NewDataString("");
            }
            var upper = broker.Convert(value);
            var evalled = env.Eval(upper, update);
            if (evalled.IsWarewolfAtomResult)
            {
                if (evalled is CommonFunctions.WarewolfEvalResult.WarewolfAtomResult warewolfAtomResult)
                {
                    return warewolfAtomResult.Item;
                }
                return DataStorage.WarewolfAtom.Nothing;
            }
            return DataStorage.WarewolfAtom.NewDataString(CommonFunctions.evalResultToString(evalled));
        };

        void CleanArgs()
        {
            var count = 0;
            while (count < ConvertCollection.Count)
            {
                if (string.IsNullOrWhiteSpace(ConvertCollection[count].FromExpression))
                {
                    ConvertCollection.RemoveAt(count);
                }
                else
                {
                    count++;
                }
            }
        }

        public override List<DebugItem> GetDebugInputs(IExecutionEnvironment env, int update)
        {
            foreach (IDebugItem debugInput in _debugInputs)
            {
                debugInput.FlushStringBuilder();
            }
            return _debugInputs;
        }

        public override List<DebugItem> GetDebugOutputs(IExecutionEnvironment env, int update)
        {
            foreach (IDebugItem debugOutput in _debugOutputs)
            {
                debugOutput.FlushStringBuilder();
            }
            return _debugOutputs;
        }

        void InsertToCollection(IEnumerable<string> listToAdd, ModelItem modelItem)
        {
            var modelProperty = modelItem.Properties["ConvertCollection"];
            var mic = modelProperty?.Collection;

            if (mic != null)
            {
                var listOfValidRows = ConvertCollection.Where(c => !c.CanRemove()).ToList();
                if (listOfValidRows.Count > 0)
                {
                    var baseConvertTo = ConvertCollection.Last(c => !c.CanRemove());
                    var startIndex = ConvertCollection.IndexOf(baseConvertTo) + 1;
                    foreach (string s in listToAdd)
                    {
                        mic.Insert(startIndex, new BaseConvertTO(s, ConvertCollection[startIndex - 1].FromType, ConvertCollection[startIndex - 1].ToType, string.Empty, startIndex + 1));
                        startIndex++;
                    }
                    CleanUpCollection(mic, modelItem, startIndex);
                }
                else
                {
                    AddToCollection(listToAdd, modelItem);
                }
            }
        }

        void AddToCollection(IEnumerable<string> listToAdd, ModelItem modelItem)
        {
            var modelProperty = modelItem.Properties["ConvertCollection"];
            var mic = modelProperty?.Collection;

            if (mic != null)
            {
                var startIndex = 0;
                var firstRowConvertFromType = ConvertCollection[0].FromType;
                var firstRowConvertToType = ConvertCollection[0].ToType;
                mic.Clear();
                foreach (string s in listToAdd)
                {
                    mic.Add(new BaseConvertTO(s, firstRowConvertFromType, firstRowConvertToType, string.Empty, startIndex + 1));
                    startIndex++;
                }
                CleanUpCollection(mic, modelItem, startIndex);
            }
        }

        void CleanUpCollection(ModelItemCollection mic, ModelItem modelItem, int startIndex)
        {
            if (startIndex < mic.Count)
            {
                mic.RemoveAt(startIndex);
            }
            mic.Add(new BaseConvertTO(string.Empty, "Text", "Base 64", string.Empty, startIndex + 1));
            var modelProperty = modelItem.Properties["DisplayName"];
            modelProperty?.SetValue(CreateDisplayName(modelItem, startIndex + 1));
        }

        string CreateDisplayName(ModelItem modelItem, int count)
        {
            var modelProperty = modelItem.Properties["DisplayName"];
            if (modelProperty != null)
            {
                var currentName = modelProperty.ComputedValue as string;
                if (currentName != null && currentName.Contains("(") && currentName.Contains(")"))
                {
                    currentName = currentName.Remove(currentName.Contains(" (") ? currentName.IndexOf(" (", StringComparison.Ordinal) : currentName.IndexOf("(", StringComparison.Ordinal));
                }
                currentName = currentName + " (" + (count - 1) + ")";
                return currentName;
            }

            return string.Empty;
        }

        public override void UpdateForEachInputs(IList<Tuple<string, string>> updates)
        {
            foreach (Tuple<string, string> t in updates)
            {
                // locate all updates for this tuple
                var t1 = t;
                var items = ConvertCollection.Where(c => !string.IsNullOrEmpty(c.FromExpression) && c.FromExpression.Contains(t1.Item1));

                // issues updates
                foreach (var a in items)
                {
                    a.FromExpression = a.FromExpression.Replace(t.Item1, t.Item2);
                }
            }
        }

        public override void UpdateForEachOutputs(IList<Tuple<string, string>> updates)
        {
            foreach (Tuple<string, string> t in updates)
            {
                var t1 = t;
                var items = ConvertCollection.Where(c => !string.IsNullOrEmpty(c.FromExpression) && c.FromExpression.Contains(t1.Item1));

                // issues updates
                foreach (var a in items)
                {
                    a.ToExpression = a.FromExpression.Replace(t.Item1, t.Item2);
                }
            }
        }

        public override IList<DsfForEachItem> GetForEachInputs()
        {
            var result = new List<DsfForEachItem>();

            foreach (var item in ConvertCollection)
            {
                if (!string.IsNullOrEmpty(item.FromExpression) && item.FromExpression.Contains("[["))
                {
                    result.Add(new DsfForEachItem { Name = item.FromExpression, Value = item.FromExpression });
                }
            }

            return result;
        }

        public override IList<DsfForEachItem> GetForEachOutputs()
        {
            var result = new List<DsfForEachItem>();

            foreach (var item in ConvertCollection)
            {
                if (!string.IsNullOrEmpty(item.FromExpression) && item.FromExpression.Contains("[["))
                {
                    result.Add(new DsfForEachItem { Name = item.FromExpression, Value = item.FromExpression });
                }
            }

            return result;
        }

        public int GetCollectionCount() => throw new NotImplementedException();

        public void AddListToCollection(IList<string> listToAdd, bool overwrite, ModelItem modelItem)
        {
            if (!overwrite)
            {
                InsertToCollection(listToAdd, modelItem);
            }
            else
            {
                AddToCollection(listToAdd, modelItem);
            }
        }

        public bool Equals(DsfBaseConvertActivity other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            var collectionEquals = CommonEqualityOps.CollectionEquals(ConvertCollection, other.ConvertCollection, new BaseConvertToComparer());
            return base.Equals(other)
                && collectionEquals;
        }

        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != this.GetType())
            {
                return false;
            }

            return Equals((DsfBaseConvertActivity)obj);
        }

        public override int GetHashCode()
        {
            unchecked
            {
                var hashCode = base.GetHashCode();
                hashCode = (hashCode * 397) ^ (_fac != null ? _fac.GetHashCode() : 0);
                hashCode = (hashCode * 397) ^ (ConvertCollection != null ? ConvertCollection.GetHashCode() : 0);
                return hashCode;
            }
        }

        public override IEnumerable<StateVariable> GetState()
        {
            return new[]
            {
                new StateVariable
                {
                    Name = "Convert Collection",
                    Value = ActivityHelper.GetSerializedStateValueFromCollection(ConvertCollection),
                    Type = StateVariable.StateType.InputOutput
                }
            };
        }
    }
}

---- Transformed Tree ----
using System;
using System.Activities;
using System.Activities.Presentation.Model;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using Dev2;
using Dev2.Activities;
using Dev2.Activities.Debug;
using Dev2.Common;
using Dev2.Common.Interfaces.Diagnostics.Debug;
using Dev2.Common.Interfaces.Enums.Enums;
using Dev2.Common.Interfaces.Toolbox;
using Dev2.Common.State;
using Dev2.Comparer;
using Dev2.Converters;
using Dev2.Data.TO;
using Dev2.Diagnostics;
using Dev2.Interfaces;
using Dev2.Utilities;
using Dev2.Validation;
using Warewolf.Core;
using Warewolf.Resource.Errors;
using Warewolf.Storage.Interfaces;

namespace Unlimited.Applications.BusinessDesignStudio.Activities
{
    [ToolDescriptorInfo("Data-BaseConversion", "Base Convert", ToolType.Native, "8999E59A-38A3-43BB-A98F-6090C5C9EA1E", "Dev2.Activities", "1.0.0.0", "", "Data", "/Warewolf.Studio.Themes.Luna;component/Images.xaml", "Tool_Data_Base_Convert")]
    public class DsfBaseConvertActivity : DsfActivityAbstract<string>, ICollectionActivity, IEquatable<DsfBaseConvertActivity>
    {
        readonly Dev2BaseConversionFactory _fac = new Dev2BaseConversionFactory();


        /// <summary>
        /// The property that holds all the convertions
        /// </summary>
        public IList<BaseConvertTO> ConvertCollection { get; set; }

        public DsfBaseConvertActivity()
            : base("Base Conversion")
        {
            ConvertCollection = new List<BaseConvertTO>();
        }

        public override List<string> GetOutputs() => ConvertCollection.Select(to => to.ToExpression).ToList();

        protected override void CacheMetadata(NativeActivityMetadata metadata) => base.CacheMetadata(metadata);

        protected override void OnExecute(NativeActivityContext context)
        {
            var dataObject = context.GetExtension<IDSFDataObject>();

            ExecuteTool(dataObject, 0);
        }

        protected override void ExecuteTool(IDSFDataObject dataObject, int update)
        {
            var allErrors = new ErrorResultTO();
            InitializeDebug(dataObject);
            var env = dataObject.Environment;
            try
            {
                TryExecute(dataObject, update, allErrors, env);
            }
            catch (Exception e)
            {
                Dev2Logger.Error("DSFBaseConvert", e, GlobalConstants.WarewolfError);
                allErrors.AddError(e.Message);
            }
            finally
            {
                HandleErrors(dataObject, update, allErrors);
            }
        }

        private void TryExecute(IDSFDataObject dataObject, int update, ErrorResultTO allErrors, IExecutionEnvironment env)
        {
            CleanArgs();

            var inputIndex = 1;
            var outputIndex = 1;

            foreach (var item in ConvertCollection.Where(a => !String.IsNullOrEmpty(a.FromExpression)))
            {
                if (dataObject.IsDebugMode())
                {
                    var debugItem = new DebugItem();
                    AddDebugItem(new DebugItemStaticDataParams("", inputIndex.ToString(CultureInfo.InvariantCulture)), debugItem);
                    AddDebugItem(new DebugEvalResult(item.FromExpression, "Convert", env, update), debugItem);
                    AddDebugItem(new DebugItemStaticDataParams(item.FromType, "From"), debugItem);
                    AddDebugItem(new DebugItemStaticDataParams(item.ToType, "To"), debugItem);
                    _debugInputs.Add(debugItem);
                    inputIndex++;
                }

                try
                {
                    env.ApplyUpdate(item.FromExpression, TryConvertFunc(item, env, update), update);
                    IsSingleValueRule.ApplyIsSingleValueRule(item.FromExpression, allErrors);
                    if (dataObject.IsDebugMode())
                    {
                        var debugItem = new DebugItem();
                        AddDebugItem(new DebugItemStaticDataParams("", outputIndex.ToString(CultureInfo.InvariantCulture)), debugItem);
                        AddDebugItem(new DebugEvalResult(item.FromExpression, "", env, update), debugItem);
                        _debugOutputs.Add(debugItem);
                        outputIndex++;
                    }
                }
                catch (Exception e)
                {
                    Dev2Logger.Error("DSFBaseConvert", e, GlobalConstants.WarewolfError);
                    allErrors.AddError(e.Message);
                    if (dataObject.IsDebugMode())
                    {
                        outputIndex++;
                    }
                }
            }
        }

        private void HandleErrors(IDSFDataObject dataObject, int update, ErrorResultTO allErrors)
        {
            var hasErrors = allErrors.HasErrors();
            if (hasErrors)
            {
                DisplayAndWriteError(nameof(DsfBaseConvertActivity), allErrors);
                var errorString = allErrors.MakeDisplayReady();
                dataObject.Environment.AddError(errorString);
            }
            if (dataObject.IsDebugMode())
            {
                DispatchDebugState(dataObject, StateType.Before, update);
                DispatchDebugState(dataObject, StateType.After, update);
            }
        }

        public override enFindMissingType GetFindMissingType() => enFindMissingType.DataGridActivity;

        Func<DataStorage.WarewolfAtom, DataStorage.WarewolfAtom> TryConvertFunc(BaseConvertTO item, IExecutionEnvironment env, int update) => a =>
        {
            var from = _fac.CreateConverter((enDev2BaseConvertType)Dev2EnumConverter.GetEnumFromStringDiscription(item.FromType, typeof(enDev2BaseConvertType)));
            var to = _fac.CreateConverter((enDev2BaseConvertType)Dev2EnumConverter.GetEnumFromStringDiscription(item.ToType, typeof(enDev2BaseConvertType)));
            var broker = _fac.CreateBroker(@from, to);
            var value = a.ToString();
            if (a.IsNothing)
            {
                throw new Exception(string.Format(ErrorResource.NullScalarValue, item.FromExpression));
            }
            if (String.IsNullOrEmpty(value))
            {
                return DataStorage.WarewolfAtom.NewDataString("");
            }
            var upper = broker.Convert(value);
            var evalled = env.Eval(upper, update);
            if (evalled.IsWarewolfAtomResult)
            {
                if (evalled is CommonFunctions.WarewolfEvalResult.WarewolfAtomResult warewolfAtomResult)
                {
                    return warewolfAtomResult.Item;
                }
                return DataStorage.WarewolfAtom.Nothing;
            }
            return DataStorage.WarewolfAtom.NewDataString(CommonFunctions.evalResultToString(evalled));
        };

        void CleanArgs()
        {
            var count = 0;
            while (count < ConvertCollection.Count)
            {
                if (string.IsNullOrWhiteSpace(ConvertCollection[count].FromExpression))
                {
                    ConvertCollection.RemoveAt(count);
                }
                else
                {
                    count++;
                }
            }
        }

        public override List<DebugItem> GetDebugInputs(IExecutionEnvironment env, int update)
        {
            foreach (IDebugItem debugInput in _debugInputs)
            {
                debugInput.FlushStringBuilder();
            }
            return _debugInputs;
        }

        public override List<DebugItem> GetDebugOutputs(IExecutionEnvironment env, int update)
        {
            foreach (IDebugItem debugOutput in _debugOutputs)
            {
                debugOutput.FlushStringBuilder();
            }
            return _debugOutputs;
        }

        void InsertToCollection(IEnumerable<string> listToAdd, ModelItem modelItem)
        {
            var modelProperty = modelItem.Properties["ConvertCollection"];
            var mic = modelProperty?.Collection;

            if (mic != null)
            {
                var listOfValidRows = ConvertCollection.Where(c => !c.CanRemove()).ToList();
                if (listOfValidRows.Count > 0)
                {
                    var baseConvertTo = ConvertCollection.Last(c => !c.CanRemove());
                    var startIndex = ConvertCollection.IndexOf(baseConvertTo) + 1;
                    foreach (string s in listToAdd)
                    {
                        mic.Insert(startIndex, new BaseConvertTO(s, ConvertCollection[startIndex - 1].FromType, ConvertCollection[startIndex - 1].ToType, string.Empty, startIndex + 1));
                        startIndex++;
                    }
                    CleanUpCollection(mic, modelItem, startIndex);
                }
                else
                {
                    AddToCollection(listToAdd, modelItem);
                }
            }
        }

        void AddToCollection(IEnumerable<string> listToAdd, ModelItem modelItem)
        {
            var modelProperty = modelItem.Properties["ConvertCollection"];
            var mic = modelProperty?.Collection;

            if (mic != null)
            {
                var startIndex = 0;
                var firstRowConvertFromType = ConvertCollection[0].FromType;
                var firstRowConvertToType = ConvertCollection[0].ToType;
                mic.Clear();
                foreach (string s in listToAdd)
                {
                    mic.Add(new BaseConvertTO(s, firstRowConvertFromType, firstRowConvertToType, string.Empty, startIndex + 1));
                    startIndex++;
                }
                CleanUpCollection(mic, modelItem, startIndex);
            }
        }

        void CleanUpCollection(ModelItemCollection mic, ModelItem modelItem, int startIndex)
        {
            if (startIndex < mic.Count)
            {
                mic.RemoveAt(startIndex);
            }
            mic.Add(new BaseConvertTO(string.Empty, "Text", "Base 64", string.Empty, startIndex + 1));
            var modelProperty = modelItem.Properties["DisplayName"];
            modelProperty?.SetValue(CreateDisplayName(modelItem, startIndex + 1));
        }

        string CreateDisplayName(ModelItem modelItem, int count)
        {
            var modelProperty = modelItem.Properties["DisplayName"];
            if (modelProperty != null)
            {
                if (modelProperty.ComputedValue is string currentName && currentName.Contains("(") && currentName.Contains(")"))
                {
                    currentName = currentName.Remove(currentName.Contains(" (") ? currentName.IndexOf(" (", StringComparison.Ordinal) : currentName.IndexOf("(", StringComparison.Ordinal));
                }
                currentName = currentName + " (" + (count - 1) + ")";
                return currentName;
            }

            return string.Empty;
        }

        public override void UpdateForEachInputs(IList<Tuple<string, string>> updates)
        {
            foreach (Tuple<string, string> t in updates)
            {
                // locate all updates for this tuple
                var t1 = t;
                var items = ConvertCollection.Where(c => !string.IsNullOrEmpty(c.FromExpression) && c.FromExpression.Contains(t1.Item1));

                // issues updates
                foreach (var a in items)
                {
                    a.FromExpression = a.FromExpression.Replace(t.Item1, t.Item2);
                }
            }
        }

        public override void UpdateForEachOutputs(IList<Tuple<string, string>> updates)
        {
            foreach (Tuple<string, string> t in updates)
            {
                var t1 = t;
                var items = ConvertCollection.Where(c => !string.IsNullOrEmpty(c.FromExpression) && c.FromExpression.Contains(t1.Item1));

                // issues updates
                foreach (var a in items)
                {
                    a.ToExpression = a.FromExpression.Replace(t.Item1, t.Item2);
                }
            }
        }

        public override IList<DsfForEachItem> GetForEachInputs()
        {
            var result = new List<DsfForEachItem>();

            foreach (var item in ConvertCollection)
            {
                if (!string.IsNullOrEmpty(item.FromExpression) && item.FromExpression.Contains("[["))
                {
                    result.Add(new DsfForEachItem { Name = item.FromExpression, Value = item.FromExpression });
                }
            }

            return result;
        }

        public override IList<DsfForEachItem> GetForEachOutputs()
        {
            var result = new List<DsfForEachItem>();

            foreach (var item in ConvertCollection)
            {
                if (!string.IsNullOrEmpty(item.FromExpression) && item.FromExpression.Contains("[["))
                {
                    result.Add(new DsfForEachItem { Name = item.FromExpression, Value = item.FromExpression });
                }
            }

            return result;
        }

        public int GetCollectionCount() => throw new NotImplementedException();

        public void AddListToCollection(IList<string> listToAdd, bool overwrite, ModelItem modelItem)
        {
            if (!overwrite)
            {
                InsertToCollection(listToAdd, modelItem);
            }
            else
            {
                AddToCollection(listToAdd, modelItem);
            }
        }

        public bool Equals(DsfBaseConvertActivity other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            var collectionEquals = CommonEqualityOps.CollectionEquals(ConvertCollection, other.ConvertCollection, new BaseConvertToComparer());
            return base.Equals(other)
                && collectionEquals;
        }

        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != this.GetType())
            {
                return false;
            }

            return Equals((DsfBaseConvertActivity)obj);
        }

        public override int GetHashCode()
        {
            unchecked
            {
                var hashCode = base.GetHashCode();
                hashCode = (hashCode * 397) ^ (_fac != null ? _fac.GetHashCode() : 0);
                hashCode = (hashCode * 397) ^ (ConvertCollection != null ? ConvertCollection.GetHashCode() : 0);
                return hashCode;
            }
        }

        public override IEnumerable<StateVariable> GetState()
        {
            return new[]
            {
                new StateVariable
                {
                    Name = "Convert Collection",
                    Value = ActivityHelper.GetSerializedStateValueFromCollection(ConvertCollection),
                    Type = StateVariable.StateType.InputOutput
                }
            };
        }
    }
}

---- Semantic diagnostics *before* transformation ----
D:\a\1\s\Dev\Dev2.Activities\Activities\DsfBaseConvertActivity.cs(150,14): error CS0246: The type or namespace name 'DataStorage' could not be found (are you missing a using directive or an assembly reference?),D:\a\1\s\Dev\Dev2.Activities\Activities\DsfBaseConvertActivity.cs(150,40): error CS0246: The type or namespace name 'DataStorage' could not be found (are you missing a using directive or an assembly reference?),D:\a\1\s\Dev\Dev2.Activities\Activities\DsfBaseConvertActivity.cs(109,21): error CS0246: The type or namespace name 'DataStorage' could not be found (are you missing a using directive or an assembly reference?),D:\a\1\s\Dev\Dev2.Activities\Activities\DsfBaseConvertActivity.cs(162,24): error CS0103: The name 'DataStorage' does not exist in the current context,D:\a\1\s\Dev\Dev2.Activities\Activities\DsfBaseConvertActivity.cs(165,27): error CS0246: The type or namespace name 'CommonFunctions' could not be found (are you missing a using directive or an assembly reference?),D:\a\1\s\Dev\Dev2.Activities\Activities\DsfBaseConvertActivity.cs(168,32): error CS0246: The type or namespace name 'CommonFunctions' could not be found (are you missing a using directive or an assembly reference?),D:\a\1\s\Dev\Dev2.Activities\Activities\DsfBaseConvertActivity.cs(172,24): error CS0103: The name 'DataStorage' does not exist in the current context,D:\a\1\s\Dev\Dev2.Activities\Activities\DsfBaseConvertActivity.cs(174,20): error CS0103: The name 'DataStorage' does not exist in the current context,D:\a\1\s\Dev\Dev2.Activities\Activities\DsfBaseConvertActivity.cs(174,59): error CS0103: The name 'CommonFunctions' does not exist in the current context
---- Semantic diagnostics *after* transformation ----
D:\a\1\s\Dev\Dev2.Activities\Activities\DsfBaseConvertActivity.cs(150,14): error CS0246: The type or namespace name 'DataStorage' could not be found (are you missing a using directive or an assembly reference?),D:\a\1\s\Dev\Dev2.Activities\Activities\DsfBaseConvertActivity.cs(150,40): error CS0246: The type or namespace name 'DataStorage' could not be found (are you missing a using directive or an assembly reference?),D:\a\1\s\Dev\Dev2.Activities\Activities\DsfBaseConvertActivity.cs(109,21): error CS0246: The type or namespace name 'DataStorage' could not be found (are you missing a using directive or an assembly reference?),D:\a\1\s\Dev\Dev2.Activities\Activities\DsfBaseConvertActivity.cs(162,24): error CS0103: The name 'DataStorage' does not exist in the current context,D:\a\1\s\Dev\Dev2.Activities\Activities\DsfBaseConvertActivity.cs(165,27): error CS0246: The type or namespace name 'CommonFunctions' could not be found (are you missing a using directive or an assembly reference?),D:\a\1\s\Dev\Dev2.Activities\Activities\DsfBaseConvertActivity.cs(168,32): error CS0246: The type or namespace name 'CommonFunctions' could not be found (are you missing a using directive or an assembly reference?),D:\a\1\s\Dev\Dev2.Activities\Activities\DsfBaseConvertActivity.cs(172,24): error CS0103: The name 'DataStorage' does not exist in the current context,D:\a\1\s\Dev\Dev2.Activities\Activities\DsfBaseConvertActivity.cs(174,20): error CS0103: The name 'DataStorage' does not exist in the current context,D:\a\1\s\Dev\Dev2.Activities\Activities\DsfBaseConvertActivity.cs(174,59): error CS0103: The name 'CommonFunctions' does not exist in the current context,D:\a\1\s\Dev\Dev2.Activities\Activities\DsfBaseConvertActivity.cs(277,31): error CS0165: Use of unassigned local variable 'currentName'
######################################################################


######################################################################
Nr: 11 - UsePatternMatchingRewriterR8
Filepath: D:\a\1\s\Dev\Dev2.Activities\Activities\DsfCaseConvertActivity.cs
Description: Error: The created Syntax Tree is semantically incorrect.
------------------------------------------------------------------------
---- Original Tree ----
using System;
using System.Activities;
using System.Activities.Presentation.Model;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using Dev2;
using Dev2.Activities;
using Dev2.Activities.Debug;
using Dev2.Common;
using Dev2.Common.Interfaces.Core.Convertors.Case;
using Dev2.Common.Interfaces.Diagnostics.Debug;
using Dev2.Common.Interfaces.Toolbox;
using Dev2.Comparer;
using Dev2.Data.TO;
using Dev2.Diagnostics;
using Dev2.Interfaces;
using Dev2.Validation;
using Warewolf.Core;
using Warewolf.Resource.Errors;
using Warewolf.Storage.Interfaces;
using Dev2.Activities.Factories.Case;
using Dev2.Common.State;
using Dev2.Utilities;

namespace Unlimited.Applications.BusinessDesignStudio.Activities
{
    [ToolDescriptorInfo("Data-CaseConversion", "Case Convert", ToolType.Native, "8999E59A-38A3-43BB-A98F-6090C5C9EA1E", "Dev2.Activities", "1.0.0.0", "Legacy", "Data", "/Warewolf.Studio.Themes.Luna;component/Images.xaml", "Tool_Data_Case_Convert")]
    public class DsfCaseConvertActivity : DsfActivityAbstract<string>, ICollectionActivity, IEquatable<DsfCaseConvertActivity>
    {
        public IList<ICaseConvertTO> ConvertCollection { get; set; }

        public DsfCaseConvertActivity()
            : base("Case Conversion")
        {
            ConvertCollection = new List<ICaseConvertTO>();
        }

        protected override void CacheMetadata(NativeActivityMetadata metadata) => base.CacheMetadata(metadata);

        protected override void OnExecute(NativeActivityContext context)
        {
            var dataObject = context.GetExtension<IDSFDataObject>();
            ExecuteTool(dataObject, 0);
        }

        protected override void ExecuteTool(IDSFDataObject dataObject, int update)
        {
            var allErrors = new ErrorResultTO();
            var errors = new ErrorResultTO();
            var env = dataObject.Environment;
            InitializeDebug(dataObject);
            try
            {
                TryExecute(dataObject, update, allErrors, errors, env);
            }
            catch (Exception e)
            {
                allErrors.AddError(e.Message);
            }
            finally
            {
                HandleErrors(dataObject, update, allErrors);
            }
        }

        private void TryExecute(IDSFDataObject dataObject, int update, ErrorResultTO allErrors, ErrorResultTO errors, IExecutionEnvironment env)
        {
            CleanArgs();

            allErrors.MergeErrors(errors);

            var inputIndex = 1;
            var outputIndex = 1;

            foreach (ICaseConvertTO item in ConvertCollection.Where(a => !String.IsNullOrEmpty(a.StringToConvert)))
            {
                IsSingleValueRule.ApplyIsSingleValueRule(item.ExpressionToConvert, allErrors);
                if (dataObject.IsDebugMode())
                {
                    var debugItem = new DebugItem();
                    AddDebugItem(new DebugItemStaticDataParams("", inputIndex.ToString(CultureInfo.InvariantCulture)), debugItem);
                    AddDebugItem(new DebugEvalResult(item.StringToConvert, "Convert", env, update), debugItem);
                    AddDebugItem(new DebugItemStaticDataParams(item.ConvertType, "To"), debugItem);
                    _debugInputs.Add(debugItem);
                    inputIndex++;
                }
                if (!allErrors.HasErrors())
                {
                    try
                    {
                        env.ApplyUpdate(item.StringToConvert, TryConvertFunc(item, env, update), update);
                    }
                    catch (Exception e)
                    {
                        allErrors.AddError(e.Message);
                    }

                    if (!allErrors.HasErrors() && dataObject.IsDebugMode())
                    {
                        var debugItem = new DebugItem();
                        AddDebugItem(new DebugItemStaticDataParams("", outputIndex.ToString(CultureInfo.InvariantCulture)), debugItem);
                        AddDebugItem(new DebugEvalResult(item.StringToConvert, "", env, update), debugItem);
                        _debugOutputs.Add(debugItem);
                        outputIndex++;
                    }
                }
            }
        }

        void HandleErrors(IDSFDataObject dataObject, int update, ErrorResultTO allErrors)
        {
            var hasErrors = allErrors.HasErrors();
            if (hasErrors)
            {
                DisplayAndWriteError(nameof(DsfCaseConvertActivity), allErrors);
                var errorString = allErrors.MakeDisplayReady();
                dataObject.Environment.AddError(errorString);
            }
            if (dataObject.IsDebugMode())
            {
                DispatchDebugState(dataObject, StateType.Before, update);
                DispatchDebugState(dataObject, StateType.After, update);
            }
        }

        static Func<DataStorage.WarewolfAtom, DataStorage.WarewolfAtom> TryConvertFunc(ICaseConvertTO conversionType, IExecutionEnvironment env, int update)
        {
            var convertFunct = CaseConverter.GetFuncs();

            if (convertFunct.TryGetValue(conversionType.ConvertType, out Func<string, string> returnedFunc) && returnedFunc != null)
            {
                return a =>
                {
                    var upper = returnedFunc.Invoke(a.ToString());
                    var evalled = env.Eval(upper, update);

                    if (evalled.IsWarewolfAtomResult)
                    {
                        if (evalled is CommonFunctions.WarewolfEvalResult.WarewolfAtomResult warewolfAtomResult)
                        {
                            return warewolfAtomResult.Item;
                        }
                        return DataStorage.WarewolfAtom.Nothing;
                    }

                    return DataStorage.WarewolfAtom.NewDataString(CommonFunctions.evalResultToString(evalled));
                };
            }
            throw new Exception(ErrorResource.ConvertOptionDoesNotExist);
        }


        public override enFindMissingType GetFindMissingType() => enFindMissingType.DataGridActivity;

        void BuildStringToConvert(int i, List<string> targetList, List<string> resultList)
        {
            ConvertCollection[i].StringToConvert = targetList[0];
            ConvertCollection[i].Result = resultList[0];
            var canidateResult = resultList[0];
            for (var q = 1; q < targetList.Count; q++)
            {
                var pos = ConvertCollection.Count + 1;

                // now process all new results ;)
                // we always keep the last value in-case we run out of indexes
                // as they do not have to balance ;)
                if (q < resultList.Count)
                {
                    canidateResult = resultList[q];
                }

                ConvertCollection.Add(new CaseConvertTO(targetList[q], ConvertCollection[i].ConvertType, canidateResult, pos));
            }
        }

        List<string> BreakIntoTokens(string value)
        {
            var parts = value.Split(',');
            var result = parts.Select(r => r.Trim()).ToList();
            return result;
        }

        void CleanArgs()
        {
            var workItems = new ICaseConvertTO[ConvertCollection.Count];
            ConvertCollection.CopyTo(workItems, 0);


            for (var i = 0; i < workItems.Length; i++)

            {
                var convertResult = workItems[i].Result;
                var convertTarget = workItems[i].StringToConvert;

                if (!string.IsNullOrEmpty(convertTarget) && !string.IsNullOrEmpty(convertResult))
                {
                    var targetList = BreakIntoTokens(convertTarget);
                    var resultList = BreakIntoTokens(convertResult);

                    // now add them back together
                    if (targetList.Count > 0 && resultList.Count > 0)
                    {
                        // build up the StringToConvert section ;)
                        // existing record
                        BuildStringToConvert(i, targetList, resultList);
                    }
                }
                else
                {
                    ConvertCollection.RemoveAt(i);
                }
            }
        }

        void InsertToCollection(IEnumerable<string> listToAdd, ModelItem modelItem)
        {
            var modelProperty = modelItem.Properties["ConvertCollection"];
            if (modelProperty != null)
            {
                var mic = modelProperty.Collection;

                if (mic != null)
                {
                    AddToConvertCollection(listToAdd, modelItem, mic);
                }
            }
        }

        private void AddToConvertCollection(IEnumerable<string> listToAdd, ModelItem modelItem, ModelItemCollection mic)
        {
            var listOfValidRows = ConvertCollection.Where(c => !c.CanRemove()).ToList();
            if (listOfValidRows.Count > 0)
            {
                var startIndex = ConvertCollection.IndexOf(listOfValidRows.Last()) + 1;
                foreach (string s in listToAdd)
                {
                    mic.Insert(startIndex, new CaseConvertTO(s, ConvertCollection[startIndex - 1].ConvertType, s, startIndex + 1));
                    startIndex++;
                }
                CleanUpCollection(mic, modelItem, startIndex);
            }
            else
            {
                AddToCollection(listToAdd, modelItem);
            }
        }

        void AddToCollection(IEnumerable<string> listToAdd, ModelItem modelItem)
        {
            var modelProperty = modelItem.Properties["ConvertCollection"];
            if (modelProperty != null)
            {
                var mic = modelProperty.Collection;

                if (mic != null)
                {
                    var startIndex = 0;
                    var firstRowConvertType = ConvertCollection[0].ConvertType;
                    mic.Clear();
                    foreach (string s in listToAdd)
                    {
                        mic.Insert(startIndex, new CaseConvertTO(s, firstRowConvertType, s, startIndex + 1));
                        startIndex++;
                    }
                    CleanUpCollection(mic, modelItem, startIndex);
                }
                else
                {
                    AddToCollection(listToAdd, modelItem);
                }
            }
        }


        void CleanUpCollection(ModelItemCollection mic, ModelItem modelItem, int startIndex)
        {
            if (startIndex < mic.Count)
            {
                mic.RemoveAt(startIndex);
            }
            mic.Add(new CaseConvertTO(string.Empty, "UPPER", string.Empty, startIndex + 1));
            var modelProperty = modelItem.Properties["DisplayName"];
            modelProperty?.SetValue(CreateDisplayName(modelItem, startIndex + 1));
        }

        string CreateDisplayName(ModelItem modelItem, int count)
        {
            var modelProperty = modelItem.Properties["DisplayName"];
            if (modelProperty != null)
            {
                var currentName = modelProperty.ComputedValue as string;
                if (currentName != null && currentName.Contains("(") && currentName.Contains(")"))
                {
                    currentName = currentName.Remove(currentName.Contains(" (") ? currentName.IndexOf(" (", StringComparison.Ordinal) : currentName.IndexOf("(", StringComparison.Ordinal));
                }
                currentName = currentName + " (" + (count - 1) + ")";
                return currentName;
            }

            return string.Empty;
        }

        public override List<DebugItem> GetDebugInputs(IExecutionEnvironment env, int update)
        {
            foreach (IDebugItem debugInput in _debugInputs)
            {
                debugInput.FlushStringBuilder();
            }
            return _debugInputs;
        }

        public override List<DebugItem> GetDebugOutputs(IExecutionEnvironment env, int update)
        {
            foreach (IDebugItem debugOutput in _debugOutputs)
            {
                debugOutput.FlushStringBuilder();
            }
            return _debugOutputs;
        }

        public override void UpdateForEachInputs(IList<Tuple<string, string>> updates)
        {
            foreach (Tuple<string, string> t in updates)
            {
                // locate all updates for this tuple
                var t1 = t;
                var items = ConvertCollection.Where(c => !string.IsNullOrEmpty(c.StringToConvert) && c.StringToConvert.Contains(t1.Item1));

                // issues updates
                foreach (var a in items)
                {
                    a.StringToConvert = a.StringToConvert.Replace(t.Item1, t.Item2);
                }
            }
        }

        public override void UpdateForEachOutputs(IList<Tuple<string, string>> updates)
        {
            foreach (Tuple<string, string> t in updates)
            {
                // locate all updates for this tuple
                var t1 = t;
                var items = ConvertCollection.Where(c => !string.IsNullOrEmpty(c.Result) && c.Result.Contains(t1.Item1));

                // issues updates
                foreach (var a in items)
                {
                    a.Result = a.Result.Replace(t.Item1, t.Item2);
                }
            }
        }

        public override IList<DsfForEachItem> GetForEachInputs()
        {
            var result = new List<DsfForEachItem>();

            foreach (var item in ConvertCollection)
            {
                if (!string.IsNullOrEmpty(item.StringToConvert) && item.StringToConvert.Contains("[["))
                {
                    result.Add(new DsfForEachItem { Name = item.StringToConvert, Value = item.Result });
                }
            }

            return result;
        }

        public override IList<DsfForEachItem> GetForEachOutputs()
        {
            var result = new List<DsfForEachItem>();
            foreach (var item in ConvertCollection)
            {
                if (!string.IsNullOrEmpty(item.StringToConvert) && item.StringToConvert.Contains("[["))
                {
                    result.Add(new DsfForEachItem { Name = item.Result, Value = item.StringToConvert });
                }
            }
            return result;
        }

        public int GetCollectionCount() => ConvertCollection.Count(caseConvertTo => !caseConvertTo.CanRemove());

        public void AddListToCollection(IList<string> listToAdd, bool overwrite, ModelItem modelItem)
        {
            if (!overwrite)
            {
                InsertToCollection(listToAdd, modelItem);
            }
            else
            {
                AddToCollection(listToAdd, modelItem);
            }
        }

        public override List<string> GetOutputs() => ConvertCollection.Select(to => to.Result).ToList();

        public override IEnumerable<StateVariable> GetState()
        {
            return new[]
            {
                new StateVariable
                {
                    Name="Convert Collection",
                    Type= StateVariable.StateType.InputOutput,
                    Value = ActivityHelper.GetSerializedStateValueFromCollection(ConvertCollection)
                }
            };
        }

        public bool Equals(DsfCaseConvertActivity other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            var collectionEquals = CommonEqualityOps.CollectionEquals(ConvertCollection, other.ConvertCollection, new CaseConvertToComparer());
            
            return base.Equals(other) && collectionEquals;
        }

        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != this.GetType())
            {
                return false;
            }

            return Equals((DsfCaseConvertActivity) obj);
        }

        public override int GetHashCode()
        {
            unchecked
            {
                return (base.GetHashCode() * 397) ^ (ConvertCollection != null ? ConvertCollection.GetHashCode() : 0);
            }
        }
    }
}

---- Transformed Tree ----
using System;
using System.Activities;
using System.Activities.Presentation.Model;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using Dev2;
using Dev2.Activities;
using Dev2.Activities.Debug;
using Dev2.Common;
using Dev2.Common.Interfaces.Core.Convertors.Case;
using Dev2.Common.Interfaces.Diagnostics.Debug;
using Dev2.Common.Interfaces.Toolbox;
using Dev2.Comparer;
using Dev2.Data.TO;
using Dev2.Diagnostics;
using Dev2.Interfaces;
using Dev2.Validation;
using Warewolf.Core;
using Warewolf.Resource.Errors;
using Warewolf.Storage.Interfaces;
using Dev2.Activities.Factories.Case;
using Dev2.Common.State;
using Dev2.Utilities;

namespace Unlimited.Applications.BusinessDesignStudio.Activities
{
    [ToolDescriptorInfo("Data-CaseConversion", "Case Convert", ToolType.Native, "8999E59A-38A3-43BB-A98F-6090C5C9EA1E", "Dev2.Activities", "1.0.0.0", "Legacy", "Data", "/Warewolf.Studio.Themes.Luna;component/Images.xaml", "Tool_Data_Case_Convert")]
    public class DsfCaseConvertActivity : DsfActivityAbstract<string>, ICollectionActivity, IEquatable<DsfCaseConvertActivity>
    {
        public IList<ICaseConvertTO> ConvertCollection { get; set; }

        public DsfCaseConvertActivity()
            : base("Case Conversion")
        {
            ConvertCollection = new List<ICaseConvertTO>();
        }

        protected override void CacheMetadata(NativeActivityMetadata metadata) => base.CacheMetadata(metadata);

        protected override void OnExecute(NativeActivityContext context)
        {
            var dataObject = context.GetExtension<IDSFDataObject>();
            ExecuteTool(dataObject, 0);
        }

        protected override void ExecuteTool(IDSFDataObject dataObject, int update)
        {
            var allErrors = new ErrorResultTO();
            var errors = new ErrorResultTO();
            var env = dataObject.Environment;
            InitializeDebug(dataObject);
            try
            {
                TryExecute(dataObject, update, allErrors, errors, env);
            }
            catch (Exception e)
            {
                allErrors.AddError(e.Message);
            }
            finally
            {
                HandleErrors(dataObject, update, allErrors);
            }
        }

        private void TryExecute(IDSFDataObject dataObject, int update, ErrorResultTO allErrors, ErrorResultTO errors, IExecutionEnvironment env)
        {
            CleanArgs();

            allErrors.MergeErrors(errors);

            var inputIndex = 1;
            var outputIndex = 1;

            foreach (ICaseConvertTO item in ConvertCollection.Where(a => !String.IsNullOrEmpty(a.StringToConvert)))
            {
                IsSingleValueRule.ApplyIsSingleValueRule(item.ExpressionToConvert, allErrors);
                if (dataObject.IsDebugMode())
                {
                    var debugItem = new DebugItem();
                    AddDebugItem(new DebugItemStaticDataParams("", inputIndex.ToString(CultureInfo.InvariantCulture)), debugItem);
                    AddDebugItem(new DebugEvalResult(item.StringToConvert, "Convert", env, update), debugItem);
                    AddDebugItem(new DebugItemStaticDataParams(item.ConvertType, "To"), debugItem);
                    _debugInputs.Add(debugItem);
                    inputIndex++;
                }
                if (!allErrors.HasErrors())
                {
                    try
                    {
                        env.ApplyUpdate(item.StringToConvert, TryConvertFunc(item, env, update), update);
                    }
                    catch (Exception e)
                    {
                        allErrors.AddError(e.Message);
                    }

                    if (!allErrors.HasErrors() && dataObject.IsDebugMode())
                    {
                        var debugItem = new DebugItem();
                        AddDebugItem(new DebugItemStaticDataParams("", outputIndex.ToString(CultureInfo.InvariantCulture)), debugItem);
                        AddDebugItem(new DebugEvalResult(item.StringToConvert, "", env, update), debugItem);
                        _debugOutputs.Add(debugItem);
                        outputIndex++;
                    }
                }
            }
        }

        void HandleErrors(IDSFDataObject dataObject, int update, ErrorResultTO allErrors)
        {
            var hasErrors = allErrors.HasErrors();
            if (hasErrors)
            {
                DisplayAndWriteError(nameof(DsfCaseConvertActivity), allErrors);
                var errorString = allErrors.MakeDisplayReady();
                dataObject.Environment.AddError(errorString);
            }
            if (dataObject.IsDebugMode())
            {
                DispatchDebugState(dataObject, StateType.Before, update);
                DispatchDebugState(dataObject, StateType.After, update);
            }
        }

        static Func<DataStorage.WarewolfAtom, DataStorage.WarewolfAtom> TryConvertFunc(ICaseConvertTO conversionType, IExecutionEnvironment env, int update)
        {
            var convertFunct = CaseConverter.GetFuncs();

            if (convertFunct.TryGetValue(conversionType.ConvertType, out Func<string, string> returnedFunc) && returnedFunc != null)
            {
                return a =>
                {
                    var upper = returnedFunc.Invoke(a.ToString());
                    var evalled = env.Eval(upper, update);

                    if (evalled.IsWarewolfAtomResult)
                    {
                        if (evalled is CommonFunctions.WarewolfEvalResult.WarewolfAtomResult warewolfAtomResult)
                        {
                            return warewolfAtomResult.Item;
                        }
                        return DataStorage.WarewolfAtom.Nothing;
                    }

                    return DataStorage.WarewolfAtom.NewDataString(CommonFunctions.evalResultToString(evalled));
                };
            }
            throw new Exception(ErrorResource.ConvertOptionDoesNotExist);
        }


        public override enFindMissingType GetFindMissingType() => enFindMissingType.DataGridActivity;

        void BuildStringToConvert(int i, List<string> targetList, List<string> resultList)
        {
            ConvertCollection[i].StringToConvert = targetList[0];
            ConvertCollection[i].Result = resultList[0];
            var canidateResult = resultList[0];
            for (var q = 1; q < targetList.Count; q++)
            {
                var pos = ConvertCollection.Count + 1;

                // now process all new results ;)
                // we always keep the last value in-case we run out of indexes
                // as they do not have to balance ;)
                if (q < resultList.Count)
                {
                    canidateResult = resultList[q];
                }

                ConvertCollection.Add(new CaseConvertTO(targetList[q], ConvertCollection[i].ConvertType, canidateResult, pos));
            }
        }

        List<string> BreakIntoTokens(string value)
        {
            var parts = value.Split(',');
            var result = parts.Select(r => r.Trim()).ToList();
            return result;
        }

        void CleanArgs()
        {
            var workItems = new ICaseConvertTO[ConvertCollection.Count];
            ConvertCollection.CopyTo(workItems, 0);


            for (var i = 0; i < workItems.Length; i++)

            {
                var convertResult = workItems[i].Result;
                var convertTarget = workItems[i].StringToConvert;

                if (!string.IsNullOrEmpty(convertTarget) && !string.IsNullOrEmpty(convertResult))
                {
                    var targetList = BreakIntoTokens(convertTarget);
                    var resultList = BreakIntoTokens(convertResult);

                    // now add them back together
                    if (targetList.Count > 0 && resultList.Count > 0)
                    {
                        // build up the StringToConvert section ;)
                        // existing record
                        BuildStringToConvert(i, targetList, resultList);
                    }
                }
                else
                {
                    ConvertCollection.RemoveAt(i);
                }
            }
        }

        void InsertToCollection(IEnumerable<string> listToAdd, ModelItem modelItem)
        {
            var modelProperty = modelItem.Properties["ConvertCollection"];
            if (modelProperty != null)
            {
                var mic = modelProperty.Collection;

                if (mic != null)
                {
                    AddToConvertCollection(listToAdd, modelItem, mic);
                }
            }
        }

        private void AddToConvertCollection(IEnumerable<string> listToAdd, ModelItem modelItem, ModelItemCollection mic)
        {
            var listOfValidRows = ConvertCollection.Where(c => !c.CanRemove()).ToList();
            if (listOfValidRows.Count > 0)
            {
                var startIndex = ConvertCollection.IndexOf(listOfValidRows.Last()) + 1;
                foreach (string s in listToAdd)
                {
                    mic.Insert(startIndex, new CaseConvertTO(s, ConvertCollection[startIndex - 1].ConvertType, s, startIndex + 1));
                    startIndex++;
                }
                CleanUpCollection(mic, modelItem, startIndex);
            }
            else
            {
                AddToCollection(listToAdd, modelItem);
            }
        }

        void AddToCollection(IEnumerable<string> listToAdd, ModelItem modelItem)
        {
            var modelProperty = modelItem.Properties["ConvertCollection"];
            if (modelProperty != null)
            {
                var mic = modelProperty.Collection;

                if (mic != null)
                {
                    var startIndex = 0;
                    var firstRowConvertType = ConvertCollection[0].ConvertType;
                    mic.Clear();
                    foreach (string s in listToAdd)
                    {
                        mic.Insert(startIndex, new CaseConvertTO(s, firstRowConvertType, s, startIndex + 1));
                        startIndex++;
                    }
                    CleanUpCollection(mic, modelItem, startIndex);
                }
                else
                {
                    AddToCollection(listToAdd, modelItem);
                }
            }
        }


        void CleanUpCollection(ModelItemCollection mic, ModelItem modelItem, int startIndex)
        {
            if (startIndex < mic.Count)
            {
                mic.RemoveAt(startIndex);
            }
            mic.Add(new CaseConvertTO(string.Empty, "UPPER", string.Empty, startIndex + 1));
            var modelProperty = modelItem.Properties["DisplayName"];
            modelProperty?.SetValue(CreateDisplayName(modelItem, startIndex + 1));
        }

        string CreateDisplayName(ModelItem modelItem, int count)
        {
            var modelProperty = modelItem.Properties["DisplayName"];
            if (modelProperty != null)
            {
                if (modelProperty.ComputedValue is string currentName && currentName.Contains("(") && currentName.Contains(")"))
                {
                    currentName = currentName.Remove(currentName.Contains(" (") ? currentName.IndexOf(" (", StringComparison.Ordinal) : currentName.IndexOf("(", StringComparison.Ordinal));
                }
                currentName = currentName + " (" + (count - 1) + ")";
                return currentName;
            }

            return string.Empty;
        }

        public override List<DebugItem> GetDebugInputs(IExecutionEnvironment env, int update)
        {
            foreach (IDebugItem debugInput in _debugInputs)
            {
                debugInput.FlushStringBuilder();
            }
            return _debugInputs;
        }

        public override List<DebugItem> GetDebugOutputs(IExecutionEnvironment env, int update)
        {
            foreach (IDebugItem debugOutput in _debugOutputs)
            {
                debugOutput.FlushStringBuilder();
            }
            return _debugOutputs;
        }

        public override void UpdateForEachInputs(IList<Tuple<string, string>> updates)
        {
            foreach (Tuple<string, string> t in updates)
            {
                // locate all updates for this tuple
                var t1 = t;
                var items = ConvertCollection.Where(c => !string.IsNullOrEmpty(c.StringToConvert) && c.StringToConvert.Contains(t1.Item1));

                // issues updates
                foreach (var a in items)
                {
                    a.StringToConvert = a.StringToConvert.Replace(t.Item1, t.Item2);
                }
            }
        }

        public override void UpdateForEachOutputs(IList<Tuple<string, string>> updates)
        {
            foreach (Tuple<string, string> t in updates)
            {
                // locate all updates for this tuple
                var t1 = t;
                var items = ConvertCollection.Where(c => !string.IsNullOrEmpty(c.Result) && c.Result.Contains(t1.Item1));

                // issues updates
                foreach (var a in items)
                {
                    a.Result = a.Result.Replace(t.Item1, t.Item2);
                }
            }
        }

        public override IList<DsfForEachItem> GetForEachInputs()
        {
            var result = new List<DsfForEachItem>();

            foreach (var item in ConvertCollection)
            {
                if (!string.IsNullOrEmpty(item.StringToConvert) && item.StringToConvert.Contains("[["))
                {
                    result.Add(new DsfForEachItem { Name = item.StringToConvert, Value = item.Result });
                }
            }

            return result;
        }

        public override IList<DsfForEachItem> GetForEachOutputs()
        {
            var result = new List<DsfForEachItem>();
            foreach (var item in ConvertCollection)
            {
                if (!string.IsNullOrEmpty(item.StringToConvert) && item.StringToConvert.Contains("[["))
                {
                    result.Add(new DsfForEachItem { Name = item.Result, Value = item.StringToConvert });
                }
            }
            return result;
        }

        public int GetCollectionCount() => ConvertCollection.Count(caseConvertTo => !caseConvertTo.CanRemove());

        public void AddListToCollection(IList<string> listToAdd, bool overwrite, ModelItem modelItem)
        {
            if (!overwrite)
            {
                InsertToCollection(listToAdd, modelItem);
            }
            else
            {
                AddToCollection(listToAdd, modelItem);
            }
        }

        public override List<string> GetOutputs() => ConvertCollection.Select(to => to.Result).ToList();

        public override IEnumerable<StateVariable> GetState()
        {
            return new[]
            {
                new StateVariable
                {
                    Name="Convert Collection",
                    Type= StateVariable.StateType.InputOutput,
                    Value = ActivityHelper.GetSerializedStateValueFromCollection(ConvertCollection)
                }
            };
        }

        public bool Equals(DsfCaseConvertActivity other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            var collectionEquals = CommonEqualityOps.CollectionEquals(ConvertCollection, other.ConvertCollection, new CaseConvertToComparer());
            
            return base.Equals(other) && collectionEquals;
        }

        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != this.GetType())
            {
                return false;
            }

            return Equals((DsfCaseConvertActivity) obj);
        }

        public override int GetHashCode()
        {
            unchecked
            {
                return (base.GetHashCode() * 397) ^ (ConvertCollection != null ? ConvertCollection.GetHashCode() : 0);
            }
        }
    }
}

---- Semantic diagnostics *before* transformation ----
D:\a\1\s\Dev\Dev2.Activities\Activities\DsfCaseConvertActivity.cs(138,21): error CS0246: The type or namespace name 'DataStorage' could not be found (are you missing a using directive or an assembly reference?),D:\a\1\s\Dev\Dev2.Activities\Activities\DsfCaseConvertActivity.cs(138,47): error CS0246: The type or namespace name 'DataStorage' could not be found (are you missing a using directive or an assembly reference?),D:\a\1\s\Dev\Dev2.Activities\Activities\DsfCaseConvertActivity.cs(103,25): error CS0246: The type or namespace name 'DataStorage' could not be found (are you missing a using directive or an assembly reference?),D:\a\1\s\Dev\Dev2.Activities\Activities\DsfCaseConvertActivity.cs(147,35): error CS0246: The type or namespace name 'CommonFunctions' could not be found (are you missing a using directive or an assembly reference?),D:\a\1\s\Dev\Dev2.Activities\Activities\DsfCaseConvertActivity.cs(151,40): error CS0246: The type or namespace name 'CommonFunctions' could not be found (are you missing a using directive or an assembly reference?),D:\a\1\s\Dev\Dev2.Activities\Activities\DsfCaseConvertActivity.cs(155,32): error CS0103: The name 'DataStorage' does not exist in the current context,D:\a\1\s\Dev\Dev2.Activities\Activities\DsfCaseConvertActivity.cs(158,28): error CS0103: The name 'DataStorage' does not exist in the current context,D:\a\1\s\Dev\Dev2.Activities\Activities\DsfCaseConvertActivity.cs(158,67): error CS0103: The name 'CommonFunctions' does not exist in the current context
---- Semantic diagnostics *after* transformation ----
D:\a\1\s\Dev\Dev2.Activities\Activities\DsfCaseConvertActivity.cs(138,21): error CS0246: The type or namespace name 'DataStorage' could not be found (are you missing a using directive or an assembly reference?),D:\a\1\s\Dev\Dev2.Activities\Activities\DsfCaseConvertActivity.cs(138,47): error CS0246: The type or namespace name 'DataStorage' could not be found (are you missing a using directive or an assembly reference?),D:\a\1\s\Dev\Dev2.Activities\Activities\DsfCaseConvertActivity.cs(103,25): error CS0246: The type or namespace name 'DataStorage' could not be found (are you missing a using directive or an assembly reference?),D:\a\1\s\Dev\Dev2.Activities\Activities\DsfCaseConvertActivity.cs(147,35): error CS0246: The type or namespace name 'CommonFunctions' could not be found (are you missing a using directive or an assembly reference?),D:\a\1\s\Dev\Dev2.Activities\Activities\DsfCaseConvertActivity.cs(151,40): error CS0246: The type or namespace name 'CommonFunctions' could not be found (are you missing a using directive or an assembly reference?),D:\a\1\s\Dev\Dev2.Activities\Activities\DsfCaseConvertActivity.cs(155,32): error CS0103: The name 'DataStorage' does not exist in the current context,D:\a\1\s\Dev\Dev2.Activities\Activities\DsfCaseConvertActivity.cs(158,28): error CS0103: The name 'DataStorage' does not exist in the current context,D:\a\1\s\Dev\Dev2.Activities\Activities\DsfCaseConvertActivity.cs(158,67): error CS0103: The name 'CommonFunctions' does not exist in the current context,D:\a\1\s\Dev\Dev2.Activities\Activities\DsfCaseConvertActivity.cs(307,31): error CS0165: Use of unassigned local variable 'currentName'
######################################################################


######################################################################
Nr: 12 - UsePatternMatchingRewriterR8
Filepath: D:\a\1\s\Dev\Dev2.Activities\Activities\DsfDataSplitActivity.cs
Description: Error: The created Syntax Tree is semantically incorrect.
------------------------------------------------------------------------
---- Original Tree ----
using System;
using System.Activities;
using System.Activities.Presentation.Model;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Text.RegularExpressions;
using Dev2;
using Dev2.Activities;
using Dev2.Activities.Debug;
using Dev2.Common;
using Dev2.Common.Interfaces.Diagnostics.Debug;
using Dev2.Common.Interfaces.StringTokenizer.Interfaces;
using Dev2.Common.Interfaces.Toolbox;
using Dev2.Data;
using Dev2.Data.TO;
using Dev2.Data.Util;
using Dev2.Diagnostics;
using Dev2.Interfaces;
using Dev2.Validation;
using Warewolf.Core;
using Warewolf.Storage;
using Warewolf.Storage.Interfaces;
using WarewolfParserInterop;
using Dev2.Comparer;
using System.IO;
using System.Text;
using Dev2.Common.Common;
using Dev2.Common.State;
using Dev2.Utilities;

namespace Unlimited.Applications.BusinessDesignStudio.Activities
{
    [ToolDescriptorInfo("Data-DataSplit", "Data Split", ToolType.Native, "8999E59A-38A3-43BB-A98F-6090C5C9EA1E", "Dev2.Activities", "1.0.0.0", "Legacy", "Data", "/Warewolf.Studio.Themes.Luna;component/Images.xaml", "Tool_Data_Data_Split")]
    public class DsfDataSplitActivity : DsfActivityAbstract<string>, ICollectionActivity, IEquatable<DsfDataSplitActivity>
    {
        string _sourceString;
        int _indexCounter = 1;
        IList<DataSplitDTO> _resultsCollection;
        bool _reverseOrder;
        bool _skipBlankRows;

        public IList<DataSplitDTO> ResultsCollection
        {
            get => _resultsCollection;
            set
            {
                _resultsCollection = value;
                OnPropertyChanged("ResultsCollection");
            }
        }

        public bool ReverseOrder
        {
            get => _reverseOrder;
            set
            {
                _reverseOrder = value;
                OnPropertyChanged("ReverseOrder");
            }
        }

        public string SourceString
        {
            get => _sourceString;
            set
            {
                _sourceString = value;
                OnPropertyChanged("SourceString");
            }
        }

        public bool SkipBlankRows
        {
            get => _skipBlankRows;
            set
            {
                _skipBlankRows = value;
                OnPropertyChanged("SkipBlankRows");
            }
        }
        private string NewLineFormat { get; set; } = "\r\n";


        protected override bool CanInduceIdle => true;

        public DsfDataSplitActivity()
            : base("Data Split")
        {
            ResultsCollection = new List<DataSplitDTO>();
        }

        public override IEnumerable<StateVariable> GetState()
        {
            return new[] {
                new StateVariable
                {
                    Name = "SourceString",
                    Value = SourceString,
                    Type = StateVariable.StateType.Input
                },
                new StateVariable
                {
                    Name = "ReverseOrder",
                    Value = ReverseOrder.ToString(),
                    Type = StateVariable.StateType.Input
                },
                new StateVariable
                {
                    Name = "SkipBlankRows",
                    Value = SkipBlankRows.ToString(),
                    Type = StateVariable.StateType.Input
                },
                new StateVariable
                {
                    Name="ResultsCollection",
                    Value = ActivityHelper.GetSerializedStateValueFromCollection(ResultsCollection),
                    Type = StateVariable.StateType.Output
                }
            };
        }


        protected override void CacheMetadata(NativeActivityMetadata metadata)
        {
            base.CacheMetadata(metadata);
        }


        protected override void OnExecute(NativeActivityContext context)
        {
            var dataObject = context.GetExtension<IDSFDataObject>();
            ExecuteTool(dataObject, 0);
        }

#pragma warning disable S1541 // Methods and properties should not be too complex
        protected override void ExecuteTool(IDSFDataObject dataObject, int update)
#pragma warning restore S1541 // Methods and properties should not be too complex
        {
            _indexCounter = 1;

            var allErrors = new ErrorResultTO();
            var env = dataObject.Environment;
            var iter = new WarewolfListIterator();

            InitializeDebug(dataObject);
            try
            {
                var sourceString = SourceString ?? "";
                if (dataObject.IsDebugMode())
                {
                    AddDebugInputItem(new DebugEvalResult(sourceString, "String to Split", env, update));
                    AddDebugInputItem(new DebugItemStaticDataParams(ReverseOrder ? "Backward" : "Forward", "Process Direction"));
                    AddDebugInputItem(new DebugItemStaticDataParams(SkipBlankRows ? "Yes" : "No", "Skip blank rows"));
                    AddDebug(ResultsCollection, dataObject.Environment, update);
                }
                var sourceStringValue = env.Eval(sourceString, update);
                var res = new WarewolfIterator(sourceStringValue);
                NewLineFormat = res.NewLineFormat;


                iter.AddVariableToIterateOn(res);
                IDictionary<string, int> positions = new Dictionary<string, int>();
                CleanArguments(ResultsCollection);
                ResultsCollection.ToList().ForEach(a =>
                {
                    if (!positions.ContainsKey(a.OutputVariable))
                    {
                        positions.Add(a.OutputVariable, update == 0 ? 1 : update);
                    }
                    IsSingleValueRule.ApplyIsSingleValueRule(a.OutputVariable, allErrors);
                });
                var singleInnerIteration = ArePureScalarTargets(ResultsCollection);
                var resultsEnumerator = ResultsCollection.GetEnumerator();
                var debugDictionary = new List<string>();
                while (res.HasMoreData())
                {
                    CommitItem(dataObject, update, allErrors, env, res, positions, singleInnerIteration, resultsEnumerator, debugDictionary);
                    if (singleInnerIteration)
                    {
                        break;
                    }
                }

                if (dataObject.IsDebugMode())
                {
                    var outputIndex = 1;
                    foreach (var varDebug in debugDictionary)
                    {
                        var debugItem = new DebugItem();
                        AddDebugItem(new DebugItemStaticDataParams("", outputIndex.ToString(CultureInfo.InvariantCulture)), debugItem);
                        var dataSplitUsesStarForOutput = varDebug.Replace("().", "(*).");
                        AddDebugItem(new DebugEvalResult(dataSplitUsesStarForOutput, "", env, update), debugItem);
                        _debugOutputs.Add(debugItem);
                        outputIndex++;
                    }
                }
            }
            catch (Exception e)
            {
                Dev2Logger.Error("DSFDataSplit", e, GlobalConstants.WarewolfError);
                allErrors.AddError(e.Message);
            }
            finally
            {
                HandleErrors(dataObject, update, allErrors);
            }
        }

        private void CommitItem(IDSFDataObject dataObject, int update, ErrorResultTO allErrors, IExecutionEnvironment env, WarewolfIterator res, IDictionary<string, int> positions, bool singleInnerIteration, IEnumerator<DataSplitDTO> resultsEnumerator, List<string> debugDictionary)
        {
            var item = new StringBuilder(res.GetNextValue());
            if (item.Length > 0)
            {
                var tokenizer = CreateSplitPattern(ref item, ResultsCollection, env, out ErrorResultTO errors, update);
                allErrors.MergeErrors(errors);

                if (!allErrors.HasErrors() && tokenizer != null)
                {
                    ProcessTokenizerItems(dataObject, update, env, positions, singleInnerIteration, resultsEnumerator, debugDictionary, tokenizer);
                }
            }
            env.CommitAssign();
        }

        void ProcessTokenizerItems(IDSFDataObject dataObject, int update, IExecutionEnvironment env, IDictionary<string, int> positions, bool singleInnerIteration, IEnumerator<DataSplitDTO> resultsEnumerator, List<string> debugDictionary, IDev2Tokenizer tokenizer)
        {
            var lastItemEndedInNewLine = false;
            while (tokenizer.HasMoreOps())
            {
                var currentval = resultsEnumerator.MoveNext();
                if (!currentval)
                {
                    if (singleInnerIteration)
                    {
                        break;
                    }
                    resultsEnumerator.Reset();
                    resultsEnumerator.MoveNext();
                }
                var tmp = tokenizer.NextToken();
                if (tmp.StartsWith(NewLineFormat) && !SkipBlankRows)
                {
                    resultsEnumerator.Reset();
                    while (resultsEnumerator.MoveNext())
                    {
                        AssignOutputVariable(update, env, resultsEnumerator, positions);
                    }
                    resultsEnumerator.Reset();
                    resultsEnumerator.MoveNext();
                }
                var outputVar = resultsEnumerator.Current.OutputVariable;
                if (!NewLine(tmp))
                {
                    lastItemEndedInNewLine = tmp.EndsWith(NewLineFormat);
                    AssignItem(update, env, positions, ref tmp, outputVar);
                    if (dataObject.IsDebugMode())
                    {
                        AddOutputToDebugOutput(update, env, resultsEnumerator, debugDictionary);
                    }
                }
            }

            if (lastItemEndedInNewLine)
            {
                var tovar = resultsEnumerator.Current.OutputVariable;
                var assignToVar = ExecutionEnvironment.ConvertToIndex(tovar, positions[tovar]);
                env.AssignWithFrame(new AssignValue(assignToVar, ""), update);
                positions[tovar] = positions[tovar] + 1;
            }
        }

        private void AssignItem(int update, IExecutionEnvironment env, IDictionary<string, int> positions, ref string tmp, string outputVar)
        {
            if (!String.IsNullOrEmpty(outputVar))
            {
                var assignVar = ExecutionEnvironment.ConvertToIndex(outputVar, positions[outputVar]);
                if (!SkipBlankRows)
                {
                    tmp = tmp.Replace(NewLineFormat, "");
                }
                env.AssignWithFrame(new AssignValue(assignVar, tmp), update);
                positions[outputVar] = positions[outputVar] + 1;
            }
        }

        void AddOutputToDebugOutput(int update, IExecutionEnvironment env, IEnumerator<DataSplitDTO> resultsEnumerator, List<string> debugDictionary)
        {
            var debugItem = new DebugItem();
            var outputVarTo = resultsEnumerator.Current.OutputVariable;
            AddDebugItem(new DebugEvalResult(outputVarTo, "", env, update), debugItem);
            if (!debugDictionary.Contains(outputVarTo))
            {
                debugDictionary.Add(outputVarTo);
            }
        }

        static void AssignOutputVariable(int update, IExecutionEnvironment env, IEnumerator<DataSplitDTO> resultsEnumerator, IDictionary<string, int> positions)
        {
            var tovar = resultsEnumerator.Current.OutputVariable;
            if (!String.IsNullOrEmpty(tovar))
            {
                var assignToVar = ExecutionEnvironment.ConvertToIndex(tovar, positions[tovar]);
                env.AssignWithFrame(new AssignValue(assignToVar, ""), update);
                positions[tovar] = positions[tovar] + 1;
            }
        }

        private static bool NewLine(string tmp) => tmp == "\r" || tmp == "\n" || tmp == Environment.NewLine;

        void HandleErrors(IDSFDataObject dataObject, int update, ErrorResultTO allErrors)
        {
            var hasErrors = allErrors.HasErrors();
            if (hasErrors)
            {
                DisplayAndWriteError("DsfDataSplitActivity", allErrors);
                var errorString = allErrors.MakeDisplayReady();
                dataObject.Environment.AddError(errorString);
            }

            if (dataObject.IsDebugMode())
            {
                DispatchDebugState(dataObject, StateType.Before, update);
                DispatchDebugState(dataObject, StateType.After, update);
            }
        }

        public override enFindMissingType GetFindMissingType() => enFindMissingType.MixedActivity;

        static bool ArePureScalarTargets(IEnumerable<DataSplitDTO> args) => args.All(arg => !DataListUtil.IsValueRecordset(arg.OutputVariable));

        void InsertToCollection(IEnumerable<string> listToAdd, ModelItem modelItem)
        {
            var modelProperty = modelItem.Properties["ResultsCollection"];
            var mic = modelProperty?.Collection;

            if (mic != null)
            {
                var listOfValidRows = ResultsCollection.Where(c => !c.CanRemove()).ToList();
                if (listOfValidRows.Count > 0)
                {
                    ConcatenateCollections(listToAdd, modelItem, mic);
                }
                else
                {
                    AddToCollection(listToAdd, modelItem);
                }
            }
        }

        void ConcatenateCollections(IEnumerable<string> listToAdd, ModelItem modelItem, ModelItemCollection mic)
        {
            var dataSplitDto = ResultsCollection.Last(c => !c.CanRemove());
            var startIndex = ResultsCollection.IndexOf(dataSplitDto) + 1;
            foreach (string s in listToAdd)
            {
                mic.Insert(startIndex, new DataSplitDTO(s, ResultsCollection[startIndex - 1].SplitType, ResultsCollection[startIndex - 1].At, startIndex + 1));
                startIndex++;
            }
            CleanUpCollection(mic, modelItem, startIndex);
        }

        void AddToCollection(IEnumerable<string> listToAdd, ModelItem modelItem)
        {
            var modelProperty = modelItem.Properties["ResultsCollection"];
            var mic = modelProperty?.Collection;

            if (mic != null)
            {
                var startIndex = 0;
                var firstRowSplitType = ResultsCollection[0].SplitType;
                var firstRowAt = ResultsCollection[0].At;
                mic.Clear();
                foreach (string s in listToAdd)
                {
                    mic.Add(new DataSplitDTO(s, firstRowSplitType, firstRowAt, startIndex + 1));
                    startIndex++;
                }
                CleanUpCollection(mic, modelItem, startIndex);
            }
        }

        void CleanUpCollection(ModelItemCollection mic, ModelItem modelItem, int startIndex)
        {
            if (startIndex < mic.Count)
            {
                mic.RemoveAt(startIndex);
            }
            mic.Add(new DataSplitDTO(string.Empty, "Chars", string.Empty, startIndex + 1));
            var modelProperty = modelItem.Properties["DisplayName"];
            modelProperty?.SetValue(CreateDisplayName(modelItem, startIndex + 1));
        }

        string CreateDisplayName(ModelItem modelItem, int count)
        {
            var modelProperty = modelItem.Properties["DisplayName"];
            if (modelProperty != null)
            {
                var currentName = modelProperty.ComputedValue as string;
                if (currentName != null && currentName.Contains("(") && currentName.Contains(")"))
                {
                    currentName = currentName.Remove(currentName.Contains(" (") ? currentName.IndexOf(" (", StringComparison.Ordinal) : currentName.IndexOf("(", StringComparison.Ordinal));
                }
                currentName = currentName + " (" + (count - 1) + ")";
                return currentName;
            }

            return string.Empty;
        }

        IDev2Tokenizer CreateSplitPattern(ref StringBuilder stringToSplit, IEnumerable<DataSplitDTO> args, IExecutionEnvironment compiler, out ErrorResultTO errors, int update)
        {


            var dtb = new Dev2TokenizerBuilder { ToTokenize = stringToSplit, ReverseOrder = ReverseOrder };
            errors = new ErrorResultTO();

            foreach (DataSplitDTO t in args)
            {
                stringToSplit = AddTokenOp(stringToSplit, compiler, errors, update, dtb, t);
                _indexCounter++;
            }
            return stringToSplit.Length <= 0 || errors.HasErrors() ? null : dtb.Generate();
        }

        StringBuilder AddTokenOp(StringBuilder stringToSplit, IExecutionEnvironment compiler, ErrorResultTO errors, int update, Dev2TokenizerBuilder dtb, DataSplitDTO t)
        {
            var parsedAt = t.At ?? string.Empty;
            var entry = "";

            switch (t.SplitType)
            {
                case "Index":
                    AddIndexOperation(dtb, compiler, errors, update, parsedAt);
                    break;
                case "End":
                    dtb.AddEoFOp();
                    break;
                case "Space":
                    dtb.AddTokenOp(" ", t.Include);
                    break;
                case "Tab":
                    dtb.AddTokenOp("\t", t.Include);
                    break;
                case "New Line":
                    t.Include |= !SkipBlankRows;
                    AddLineBreakTokenOp(stringToSplit, dtb, t);
                    break;
                case "Chars":
                    AddCharacterTokenOp(ref stringToSplit, compiler, update, dtb, t, parsedAt, ref entry);
                    break;
                default:
                    Dev2Logger.Info("No Split type for the Data Split Property Name: " + t.SplitType, GlobalConstants.WarewolfInfo);
                    break;
            }

            return stringToSplit;
        }

        void AddCharacterTokenOp(ref StringBuilder stringToSplit, IExecutionEnvironment compiler, int update, Dev2TokenizerBuilder dtb, DataSplitDTO t, string parsedAt, ref string entry)
        {
            if (!string.IsNullOrEmpty(parsedAt))
            {
                entry = EvalLineBreakCharacter(ref stringToSplit, compiler, update, dtb, parsedAt);
                var escape = EvalEscapeCharacter(compiler, update, t);
                dtb.AddTokenOp(entry, t.Include, escape);
            }
        }

        static void AddLineBreakTokenOp(StringBuilder stringToSplit, Dev2TokenizerBuilder dtb, DataSplitDTO t)
        {
            if (stringToSplit.Contains("\r\n"))
            {
                dtb.AddTokenOp("\r\n", t.Include);
            }
            else if (stringToSplit.Contains("\n"))
            {
                dtb.AddTokenOp("\n", t.Include);
            }
            else
            {
                if (stringToSplit.Contains("\r"))
                {
                    dtb.AddTokenOp("\r", t.Include);
                }
            }
        }

        string EvalLineBreakCharacter(ref StringBuilder stringToSplit, IExecutionEnvironment compiler, int update, Dev2TokenizerBuilder dtb, string parsedAt)
        {
            var entry = compiler.EvalAsListOfStrings(parsedAt, update).FirstOrDefault();
            if (entry != null && (entry.Contains(@"\r\n") || entry.Contains(@"\n")))
            {
                var match = Regex.Match(stringToSplit.ToString(), @"[\r\n]+");
                if (match.Success && !SkipBlankRows)
                {
                    stringToSplit = new StringBuilder(Regex.Escape(stringToSplit.ToString()));
                    dtb.ToTokenize = stringToSplit;
                }
            }

            return entry;
        }

        static string EvalEscapeCharacter(IExecutionEnvironment compiler, int update, DataSplitDTO t)
        {
            var escape = t.EscapeChar;
            if (!String.IsNullOrEmpty(escape))
            {
                escape = compiler.EvalAsListOfStrings(t.EscapeChar, update).FirstOrDefault();
            }

            return escape;
        }

        static void AddIndexOperation(Dev2TokenizerBuilder dtb, IExecutionEnvironment compiler, ErrorResultTO errors, int update, string parsedAt)
        {
            try
            {
                var entry = compiler.EvalAsListOfStrings(parsedAt, update).FirstOrDefault();
                if (entry == null)
                {
                    throw new Exception("null iterator expression");
                }

                var index = entry;
                var indexNum = Convert.ToInt32(index);
                if (indexNum > 0)
                {
                    dtb.AddIndexOp(indexNum);
                }
            }
            catch (Exception ex)
            {
                errors.AddError(ex.Message);
            }
        }

        void AddDebug(IEnumerable<DataSplitDTO> resultCollection, IExecutionEnvironment env, int update)
        {
            foreach (DataSplitDTO t in resultCollection)
            {
                var debugItem = AddParamsToDebug(env, update, t);
                AddResultsToDebug(env, update, t, debugItem);
                _indexCounter++;
                _debugInputs.Add(debugItem);
            }
        }

        void AddResultsToDebug(IExecutionEnvironment env, int update, DataSplitDTO t, DebugItem debugItem)
        {
            switch (t.SplitType)
            {
                case "Index":
                    AddDebugItem(new DebugEvalResult(t.At, "Using", env, update), debugItem);
                    AddDebugItem(new DebugItemStaticDataParams(t.Include ? "Yes" : "No", "Include"), debugItem);
                    break;
                case "End":
                case "Space":
                case "Tab":
                case "New Line":
                    AddDebugItem(new DebugItemStaticDataParams(t.Include ? "Yes" : "No", "Include"), debugItem);
                    break;
                case "Chars":
                    AddDebugItem(new DebugEvalResult(t.At, "Using", env, update), debugItem);
                    AddDebugItem(new DebugItemStaticDataParams(t.Include ? "Yes" : "No", "Include"), debugItem);
                    AddDebugItem(new DebugItemStaticDataParams(t.EscapeChar, "Escape"), debugItem);
                    break;
                default:
                    return;
            }
        }

        DebugItem AddParamsToDebug(IExecutionEnvironment env, int update, DataSplitDTO t)
        {
            var debugItem = new DebugItem();
            AddDebugItem(new DebugItemStaticDataParams("", _indexCounter.ToString(CultureInfo.InvariantCulture)), debugItem);
            if (!string.IsNullOrEmpty(t.OutputVariable))
            {
                AddDebugItem(new DebugEvalResult(t.OutputVariable, "", env, update), debugItem);
            }
            AddDebugItem(new DebugItemStaticDataParams(t.SplitType, "With"), debugItem);
            return debugItem;
        }

        static void CleanArguments(IList<DataSplitDTO> args)
        {
            var count = 0;
            while (count < args.Count)
            {
                if (string.IsNullOrEmpty(args[count].OutputVariable))
                {
                    if (args[count].SplitType == "Index" && string.IsNullOrEmpty(args[count].At) ||
                       args[count].SplitType == "Chars" && string.IsNullOrEmpty(args[count].At))
                    {
                        args.RemoveAt(count);
                    }
                    else
                    {
                        count++;
                    }
                }
                else
                {
                    count++;
                }
            }
        }

        public override List<DebugItem> GetDebugInputs(IExecutionEnvironment env, int update)
        {
            foreach (IDebugItem debugInput in _debugInputs)
            {
                debugInput.FlushStringBuilder();
            }
            return _debugInputs;
        }

        public override List<DebugItem> GetDebugOutputs(IExecutionEnvironment env, int update)
        {
            foreach (IDebugItem debugOutput in _debugOutputs)
            {
                debugOutput.FlushStringBuilder();
            }
            return _debugOutputs;
        }

        public override void UpdateForEachInputs(IList<Tuple<string, string>> updates)
        {
            if (updates == null)
            {
                return;
            }
            foreach (Tuple<string, string> t in updates)
            {
                // locate all updates for this tuple
                var t1 = t;
                var items = ResultsCollection.Where(c => !string.IsNullOrEmpty(c.At) && c.At.Equals(t1.Item1));

                // issues updates
                foreach (var a in items)
                {
                    a.At = t.Item2;
                }

                if (SourceString == t.Item1)
                {
                    SourceString = t.Item2;
                }
            }
        }

        public override void UpdateForEachOutputs(IList<Tuple<string, string>> updates)
        {
            if (updates == null)
            {
                return;
            }
            foreach (Tuple<string, string> t in updates)
            {
                // locate all updates for this tuple
                var t1 = t;
                var items = ResultsCollection.Where(c => !string.IsNullOrEmpty(c.OutputVariable) && c.OutputVariable.Equals(t1.Item1));

                // issues updates
                foreach (var a in items)
                {
                    a.OutputVariable = t.Item2;
                }
            }
        }

        public override IList<DsfForEachItem> GetForEachInputs()
        {
            var items = new[] { SourceString }.Union(ResultsCollection.Where(c => !string.IsNullOrEmpty(c.At)).Select(c => c.At)).ToArray();
            return GetForEachItems(items);
        }

        public override IList<DsfForEachItem> GetForEachOutputs()
        {
            var items = ResultsCollection.Where(c => !string.IsNullOrEmpty(c.OutputVariable)).Select(c => c.OutputVariable).ToArray();
            return GetForEachItems(items);
        }

        public int GetCollectionCount() => ResultsCollection.Count(caseConvertTo => !caseConvertTo.CanRemove());

        public void AddListToCollection(IList<string> listToAdd, bool overwrite, ModelItem modelItem)
        {
            if (!overwrite)
            {
                InsertToCollection(listToAdd, modelItem);
            }
            else
            {
                AddToCollection(listToAdd, modelItem);
            }
        }

        public override List<string> GetOutputs() => ResultsCollection.Select(dto => dto.OutputVariable).ToList();

        public bool Equals(DsfDataSplitActivity other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            var resultsCollectionsAreEqual = CommonEqualityOps.CollectionEquals(ResultsCollection.OrderBy(dto => dto.IndexNumber), other.ResultsCollection.OrderBy(dto => dto.IndexNumber), new DataSplitDTOComparer());
            return base.Equals(other)
                && string.Equals(SourceString, other.SourceString)
                && _indexCounter == other._indexCounter
                && resultsCollectionsAreEqual
                && ReverseOrder == other.ReverseOrder
                && SkipBlankRows == other.SkipBlankRows;
        }

        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != this.GetType())
            {
                return false;
            }

            return Equals((DsfDataSplitActivity)obj);
        }

        public override int GetHashCode()
        {
            unchecked
            {
                var hashCode = base.GetHashCode();
                hashCode = (hashCode * 397) ^ (SourceString != null ? SourceString.GetHashCode() : 0);
                hashCode = (hashCode * 397) ^ _indexCounter;
                hashCode = (hashCode * 397) ^ (_resultsCollection != null ? _resultsCollection.GetHashCode() : 0);
                hashCode = (hashCode * 397) ^ ReverseOrder.GetHashCode();
                hashCode = (hashCode * 397) ^ SkipBlankRows.GetHashCode();
                return hashCode;
            }
        }
    }
}
---- Transformed Tree ----
using System;
using System.Activities;
using System.Activities.Presentation.Model;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Text.RegularExpressions;
using Dev2;
using Dev2.Activities;
using Dev2.Activities.Debug;
using Dev2.Common;
using Dev2.Common.Interfaces.Diagnostics.Debug;
using Dev2.Common.Interfaces.StringTokenizer.Interfaces;
using Dev2.Common.Interfaces.Toolbox;
using Dev2.Data;
using Dev2.Data.TO;
using Dev2.Data.Util;
using Dev2.Diagnostics;
using Dev2.Interfaces;
using Dev2.Validation;
using Warewolf.Core;
using Warewolf.Storage;
using Warewolf.Storage.Interfaces;
using WarewolfParserInterop;
using Dev2.Comparer;
using System.IO;
using System.Text;
using Dev2.Common.Common;
using Dev2.Common.State;
using Dev2.Utilities;

namespace Unlimited.Applications.BusinessDesignStudio.Activities
{
    [ToolDescriptorInfo("Data-DataSplit", "Data Split", ToolType.Native, "8999E59A-38A3-43BB-A98F-6090C5C9EA1E", "Dev2.Activities", "1.0.0.0", "Legacy", "Data", "/Warewolf.Studio.Themes.Luna;component/Images.xaml", "Tool_Data_Data_Split")]
    public class DsfDataSplitActivity : DsfActivityAbstract<string>, ICollectionActivity, IEquatable<DsfDataSplitActivity>
    {
        string _sourceString;
        int _indexCounter = 1;
        IList<DataSplitDTO> _resultsCollection;
        bool _reverseOrder;
        bool _skipBlankRows;

        public IList<DataSplitDTO> ResultsCollection
        {
            get => _resultsCollection;
            set
            {
                _resultsCollection = value;
                OnPropertyChanged("ResultsCollection");
            }
        }

        public bool ReverseOrder
        {
            get => _reverseOrder;
            set
            {
                _reverseOrder = value;
                OnPropertyChanged("ReverseOrder");
            }
        }

        public string SourceString
        {
            get => _sourceString;
            set
            {
                _sourceString = value;
                OnPropertyChanged("SourceString");
            }
        }

        public bool SkipBlankRows
        {
            get => _skipBlankRows;
            set
            {
                _skipBlankRows = value;
                OnPropertyChanged("SkipBlankRows");
            }
        }
        private string NewLineFormat { get; set; } = "\r\n";


        protected override bool CanInduceIdle => true;

        public DsfDataSplitActivity()
            : base("Data Split")
        {
            ResultsCollection = new List<DataSplitDTO>();
        }

        public override IEnumerable<StateVariable> GetState()
        {
            return new[] {
                new StateVariable
                {
                    Name = "SourceString",
                    Value = SourceString,
                    Type = StateVariable.StateType.Input
                },
                new StateVariable
                {
                    Name = "ReverseOrder",
                    Value = ReverseOrder.ToString(),
                    Type = StateVariable.StateType.Input
                },
                new StateVariable
                {
                    Name = "SkipBlankRows",
                    Value = SkipBlankRows.ToString(),
                    Type = StateVariable.StateType.Input
                },
                new StateVariable
                {
                    Name="ResultsCollection",
                    Value = ActivityHelper.GetSerializedStateValueFromCollection(ResultsCollection),
                    Type = StateVariable.StateType.Output
                }
            };
        }


        protected override void CacheMetadata(NativeActivityMetadata metadata)
        {
            base.CacheMetadata(metadata);
        }


        protected override void OnExecute(NativeActivityContext context)
        {
            var dataObject = context.GetExtension<IDSFDataObject>();
            ExecuteTool(dataObject, 0);
        }

#pragma warning disable S1541 // Methods and properties should not be too complex
        protected override void ExecuteTool(IDSFDataObject dataObject, int update)
#pragma warning restore S1541 // Methods and properties should not be too complex
        {
            _indexCounter = 1;

            var allErrors = new ErrorResultTO();
            var env = dataObject.Environment;
            var iter = new WarewolfListIterator();

            InitializeDebug(dataObject);
            try
            {
                var sourceString = SourceString ?? "";
                if (dataObject.IsDebugMode())
                {
                    AddDebugInputItem(new DebugEvalResult(sourceString, "String to Split", env, update));
                    AddDebugInputItem(new DebugItemStaticDataParams(ReverseOrder ? "Backward" : "Forward", "Process Direction"));
                    AddDebugInputItem(new DebugItemStaticDataParams(SkipBlankRows ? "Yes" : "No", "Skip blank rows"));
                    AddDebug(ResultsCollection, dataObject.Environment, update);
                }
                var sourceStringValue = env.Eval(sourceString, update);
                var res = new WarewolfIterator(sourceStringValue);
                NewLineFormat = res.NewLineFormat;


                iter.AddVariableToIterateOn(res);
                IDictionary<string, int> positions = new Dictionary<string, int>();
                CleanArguments(ResultsCollection);
                ResultsCollection.ToList().ForEach(a =>
                {
                    if (!positions.ContainsKey(a.OutputVariable))
                    {
                        positions.Add(a.OutputVariable, update == 0 ? 1 : update);
                    }
                    IsSingleValueRule.ApplyIsSingleValueRule(a.OutputVariable, allErrors);
                });
                var singleInnerIteration = ArePureScalarTargets(ResultsCollection);
                var resultsEnumerator = ResultsCollection.GetEnumerator();
                var debugDictionary = new List<string>();
                while (res.HasMoreData())
                {
                    CommitItem(dataObject, update, allErrors, env, res, positions, singleInnerIteration, resultsEnumerator, debugDictionary);
                    if (singleInnerIteration)
                    {
                        break;
                    }
                }

                if (dataObject.IsDebugMode())
                {
                    var outputIndex = 1;
                    foreach (var varDebug in debugDictionary)
                    {
                        var debugItem = new DebugItem();
                        AddDebugItem(new DebugItemStaticDataParams("", outputIndex.ToString(CultureInfo.InvariantCulture)), debugItem);
                        var dataSplitUsesStarForOutput = varDebug.Replace("().", "(*).");
                        AddDebugItem(new DebugEvalResult(dataSplitUsesStarForOutput, "", env, update), debugItem);
                        _debugOutputs.Add(debugItem);
                        outputIndex++;
                    }
                }
            }
            catch (Exception e)
            {
                Dev2Logger.Error("DSFDataSplit", e, GlobalConstants.WarewolfError);
                allErrors.AddError(e.Message);
            }
            finally
            {
                HandleErrors(dataObject, update, allErrors);
            }
        }

        private void CommitItem(IDSFDataObject dataObject, int update, ErrorResultTO allErrors, IExecutionEnvironment env, WarewolfIterator res, IDictionary<string, int> positions, bool singleInnerIteration, IEnumerator<DataSplitDTO> resultsEnumerator, List<string> debugDictionary)
        {
            var item = new StringBuilder(res.GetNextValue());
            if (item.Length > 0)
            {
                var tokenizer = CreateSplitPattern(ref item, ResultsCollection, env, out ErrorResultTO errors, update);
                allErrors.MergeErrors(errors);

                if (!allErrors.HasErrors() && tokenizer != null)
                {
                    ProcessTokenizerItems(dataObject, update, env, positions, singleInnerIteration, resultsEnumerator, debugDictionary, tokenizer);
                }
            }
            env.CommitAssign();
        }

        void ProcessTokenizerItems(IDSFDataObject dataObject, int update, IExecutionEnvironment env, IDictionary<string, int> positions, bool singleInnerIteration, IEnumerator<DataSplitDTO> resultsEnumerator, List<string> debugDictionary, IDev2Tokenizer tokenizer)
        {
            var lastItemEndedInNewLine = false;
            while (tokenizer.HasMoreOps())
            {
                var currentval = resultsEnumerator.MoveNext();
                if (!currentval)
                {
                    if (singleInnerIteration)
                    {
                        break;
                    }
                    resultsEnumerator.Reset();
                    resultsEnumerator.MoveNext();
                }
                var tmp = tokenizer.NextToken();
                if (tmp.StartsWith(NewLineFormat) && !SkipBlankRows)
                {
                    resultsEnumerator.Reset();
                    while (resultsEnumerator.MoveNext())
                    {
                        AssignOutputVariable(update, env, resultsEnumerator, positions);
                    }
                    resultsEnumerator.Reset();
                    resultsEnumerator.MoveNext();
                }
                var outputVar = resultsEnumerator.Current.OutputVariable;
                if (!NewLine(tmp))
                {
                    lastItemEndedInNewLine = tmp.EndsWith(NewLineFormat);
                    AssignItem(update, env, positions, ref tmp, outputVar);
                    if (dataObject.IsDebugMode())
                    {
                        AddOutputToDebugOutput(update, env, resultsEnumerator, debugDictionary);
                    }
                }
            }

            if (lastItemEndedInNewLine)
            {
                var tovar = resultsEnumerator.Current.OutputVariable;
                var assignToVar = ExecutionEnvironment.ConvertToIndex(tovar, positions[tovar]);
                env.AssignWithFrame(new AssignValue(assignToVar, ""), update);
                positions[tovar] = positions[tovar] + 1;
            }
        }

        private void AssignItem(int update, IExecutionEnvironment env, IDictionary<string, int> positions, ref string tmp, string outputVar)
        {
            if (!String.IsNullOrEmpty(outputVar))
            {
                var assignVar = ExecutionEnvironment.ConvertToIndex(outputVar, positions[outputVar]);
                if (!SkipBlankRows)
                {
                    tmp = tmp.Replace(NewLineFormat, "");
                }
                env.AssignWithFrame(new AssignValue(assignVar, tmp), update);
                positions[outputVar] = positions[outputVar] + 1;
            }
        }

        void AddOutputToDebugOutput(int update, IExecutionEnvironment env, IEnumerator<DataSplitDTO> resultsEnumerator, List<string> debugDictionary)
        {
            var debugItem = new DebugItem();
            var outputVarTo = resultsEnumerator.Current.OutputVariable;
            AddDebugItem(new DebugEvalResult(outputVarTo, "", env, update), debugItem);
            if (!debugDictionary.Contains(outputVarTo))
            {
                debugDictionary.Add(outputVarTo);
            }
        }

        static void AssignOutputVariable(int update, IExecutionEnvironment env, IEnumerator<DataSplitDTO> resultsEnumerator, IDictionary<string, int> positions)
        {
            var tovar = resultsEnumerator.Current.OutputVariable;
            if (!String.IsNullOrEmpty(tovar))
            {
                var assignToVar = ExecutionEnvironment.ConvertToIndex(tovar, positions[tovar]);
                env.AssignWithFrame(new AssignValue(assignToVar, ""), update);
                positions[tovar] = positions[tovar] + 1;
            }
        }

        private static bool NewLine(string tmp) => tmp == "\r" || tmp == "\n" || tmp == Environment.NewLine;

        void HandleErrors(IDSFDataObject dataObject, int update, ErrorResultTO allErrors)
        {
            var hasErrors = allErrors.HasErrors();
            if (hasErrors)
            {
                DisplayAndWriteError("DsfDataSplitActivity", allErrors);
                var errorString = allErrors.MakeDisplayReady();
                dataObject.Environment.AddError(errorString);
            }

            if (dataObject.IsDebugMode())
            {
                DispatchDebugState(dataObject, StateType.Before, update);
                DispatchDebugState(dataObject, StateType.After, update);
            }
        }

        public override enFindMissingType GetFindMissingType() => enFindMissingType.MixedActivity;

        static bool ArePureScalarTargets(IEnumerable<DataSplitDTO> args) => args.All(arg => !DataListUtil.IsValueRecordset(arg.OutputVariable));

        void InsertToCollection(IEnumerable<string> listToAdd, ModelItem modelItem)
        {
            var modelProperty = modelItem.Properties["ResultsCollection"];
            var mic = modelProperty?.Collection;

            if (mic != null)
            {
                var listOfValidRows = ResultsCollection.Where(c => !c.CanRemove()).ToList();
                if (listOfValidRows.Count > 0)
                {
                    ConcatenateCollections(listToAdd, modelItem, mic);
                }
                else
                {
                    AddToCollection(listToAdd, modelItem);
                }
            }
        }

        void ConcatenateCollections(IEnumerable<string> listToAdd, ModelItem modelItem, ModelItemCollection mic)
        {
            var dataSplitDto = ResultsCollection.Last(c => !c.CanRemove());
            var startIndex = ResultsCollection.IndexOf(dataSplitDto) + 1;
            foreach (string s in listToAdd)
            {
                mic.Insert(startIndex, new DataSplitDTO(s, ResultsCollection[startIndex - 1].SplitType, ResultsCollection[startIndex - 1].At, startIndex + 1));
                startIndex++;
            }
            CleanUpCollection(mic, modelItem, startIndex);
        }

        void AddToCollection(IEnumerable<string> listToAdd, ModelItem modelItem)
        {
            var modelProperty = modelItem.Properties["ResultsCollection"];
            var mic = modelProperty?.Collection;

            if (mic != null)
            {
                var startIndex = 0;
                var firstRowSplitType = ResultsCollection[0].SplitType;
                var firstRowAt = ResultsCollection[0].At;
                mic.Clear();
                foreach (string s in listToAdd)
                {
                    mic.Add(new DataSplitDTO(s, firstRowSplitType, firstRowAt, startIndex + 1));
                    startIndex++;
                }
                CleanUpCollection(mic, modelItem, startIndex);
            }
        }

        void CleanUpCollection(ModelItemCollection mic, ModelItem modelItem, int startIndex)
        {
            if (startIndex < mic.Count)
            {
                mic.RemoveAt(startIndex);
            }
            mic.Add(new DataSplitDTO(string.Empty, "Chars", string.Empty, startIndex + 1));
            var modelProperty = modelItem.Properties["DisplayName"];
            modelProperty?.SetValue(CreateDisplayName(modelItem, startIndex + 1));
        }

        string CreateDisplayName(ModelItem modelItem, int count)
        {
            var modelProperty = modelItem.Properties["DisplayName"];
            if (modelProperty != null)
            {
                if (modelProperty.ComputedValue is string currentName && currentName.Contains("(") && currentName.Contains(")"))
                {
                    currentName = currentName.Remove(currentName.Contains(" (") ? currentName.IndexOf(" (", StringComparison.Ordinal) : currentName.IndexOf("(", StringComparison.Ordinal));
                }
                currentName = currentName + " (" + (count - 1) + ")";
                return currentName;
            }

            return string.Empty;
        }

        IDev2Tokenizer CreateSplitPattern(ref StringBuilder stringToSplit, IEnumerable<DataSplitDTO> args, IExecutionEnvironment compiler, out ErrorResultTO errors, int update)
        {


            var dtb = new Dev2TokenizerBuilder { ToTokenize = stringToSplit, ReverseOrder = ReverseOrder };
            errors = new ErrorResultTO();

            foreach (DataSplitDTO t in args)
            {
                stringToSplit = AddTokenOp(stringToSplit, compiler, errors, update, dtb, t);
                _indexCounter++;
            }
            return stringToSplit.Length <= 0 || errors.HasErrors() ? null : dtb.Generate();
        }

        StringBuilder AddTokenOp(StringBuilder stringToSplit, IExecutionEnvironment compiler, ErrorResultTO errors, int update, Dev2TokenizerBuilder dtb, DataSplitDTO t)
        {
            var parsedAt = t.At ?? string.Empty;
            var entry = "";

            switch (t.SplitType)
            {
                case "Index":
                    AddIndexOperation(dtb, compiler, errors, update, parsedAt);
                    break;
                case "End":
                    dtb.AddEoFOp();
                    break;
                case "Space":
                    dtb.AddTokenOp(" ", t.Include);
                    break;
                case "Tab":
                    dtb.AddTokenOp("\t", t.Include);
                    break;
                case "New Line":
                    t.Include |= !SkipBlankRows;
                    AddLineBreakTokenOp(stringToSplit, dtb, t);
                    break;
                case "Chars":
                    AddCharacterTokenOp(ref stringToSplit, compiler, update, dtb, t, parsedAt, ref entry);
                    break;
                default:
                    Dev2Logger.Info("No Split type for the Data Split Property Name: " + t.SplitType, GlobalConstants.WarewolfInfo);
                    break;
            }

            return stringToSplit;
        }

        void AddCharacterTokenOp(ref StringBuilder stringToSplit, IExecutionEnvironment compiler, int update, Dev2TokenizerBuilder dtb, DataSplitDTO t, string parsedAt, ref string entry)
        {
            if (!string.IsNullOrEmpty(parsedAt))
            {
                entry = EvalLineBreakCharacter(ref stringToSplit, compiler, update, dtb, parsedAt);
                var escape = EvalEscapeCharacter(compiler, update, t);
                dtb.AddTokenOp(entry, t.Include, escape);
            }
        }

        static void AddLineBreakTokenOp(StringBuilder stringToSplit, Dev2TokenizerBuilder dtb, DataSplitDTO t)
        {
            if (stringToSplit.Contains("\r\n"))
            {
                dtb.AddTokenOp("\r\n", t.Include);
            }
            else if (stringToSplit.Contains("\n"))
            {
                dtb.AddTokenOp("\n", t.Include);
            }
            else
            {
                if (stringToSplit.Contains("\r"))
                {
                    dtb.AddTokenOp("\r", t.Include);
                }
            }
        }

        string EvalLineBreakCharacter(ref StringBuilder stringToSplit, IExecutionEnvironment compiler, int update, Dev2TokenizerBuilder dtb, string parsedAt)
        {
            var entry = compiler.EvalAsListOfStrings(parsedAt, update).FirstOrDefault();
            if (entry != null && (entry.Contains(@"\r\n") || entry.Contains(@"\n")))
            {
                var match = Regex.Match(stringToSplit.ToString(), @"[\r\n]+");
                if (match.Success && !SkipBlankRows)
                {
                    stringToSplit = new StringBuilder(Regex.Escape(stringToSplit.ToString()));
                    dtb.ToTokenize = stringToSplit;
                }
            }

            return entry;
        }

        static string EvalEscapeCharacter(IExecutionEnvironment compiler, int update, DataSplitDTO t)
        {
            var escape = t.EscapeChar;
            if (!String.IsNullOrEmpty(escape))
            {
                escape = compiler.EvalAsListOfStrings(t.EscapeChar, update).FirstOrDefault();
            }

            return escape;
        }

        static void AddIndexOperation(Dev2TokenizerBuilder dtb, IExecutionEnvironment compiler, ErrorResultTO errors, int update, string parsedAt)
        {
            try
            {
                var entry = compiler.EvalAsListOfStrings(parsedAt, update).FirstOrDefault();
                if (entry == null)
                {
                    throw new Exception("null iterator expression");
                }

                var index = entry;
                var indexNum = Convert.ToInt32(index);
                if (indexNum > 0)
                {
                    dtb.AddIndexOp(indexNum);
                }
            }
            catch (Exception ex)
            {
                errors.AddError(ex.Message);
            }
        }

        void AddDebug(IEnumerable<DataSplitDTO> resultCollection, IExecutionEnvironment env, int update)
        {
            foreach (DataSplitDTO t in resultCollection)
            {
                var debugItem = AddParamsToDebug(env, update, t);
                AddResultsToDebug(env, update, t, debugItem);
                _indexCounter++;
                _debugInputs.Add(debugItem);
            }
        }

        void AddResultsToDebug(IExecutionEnvironment env, int update, DataSplitDTO t, DebugItem debugItem)
        {
            switch (t.SplitType)
            {
                case "Index":
                    AddDebugItem(new DebugEvalResult(t.At, "Using", env, update), debugItem);
                    AddDebugItem(new DebugItemStaticDataParams(t.Include ? "Yes" : "No", "Include"), debugItem);
                    break;
                case "End":
                case "Space":
                case "Tab":
                case "New Line":
                    AddDebugItem(new DebugItemStaticDataParams(t.Include ? "Yes" : "No", "Include"), debugItem);
                    break;
                case "Chars":
                    AddDebugItem(new DebugEvalResult(t.At, "Using", env, update), debugItem);
                    AddDebugItem(new DebugItemStaticDataParams(t.Include ? "Yes" : "No", "Include"), debugItem);
                    AddDebugItem(new DebugItemStaticDataParams(t.EscapeChar, "Escape"), debugItem);
                    break;
                default:
                    return;
            }
        }

        DebugItem AddParamsToDebug(IExecutionEnvironment env, int update, DataSplitDTO t)
        {
            var debugItem = new DebugItem();
            AddDebugItem(new DebugItemStaticDataParams("", _indexCounter.ToString(CultureInfo.InvariantCulture)), debugItem);
            if (!string.IsNullOrEmpty(t.OutputVariable))
            {
                AddDebugItem(new DebugEvalResult(t.OutputVariable, "", env, update), debugItem);
            }
            AddDebugItem(new DebugItemStaticDataParams(t.SplitType, "With"), debugItem);
            return debugItem;
        }

        static void CleanArguments(IList<DataSplitDTO> args)
        {
            var count = 0;
            while (count < args.Count)
            {
                if (string.IsNullOrEmpty(args[count].OutputVariable))
                {
                    if (args[count].SplitType == "Index" && string.IsNullOrEmpty(args[count].At) ||
                       args[count].SplitType == "Chars" && string.IsNullOrEmpty(args[count].At))
                    {
                        args.RemoveAt(count);
                    }
                    else
                    {
                        count++;
                    }
                }
                else
                {
                    count++;
                }
            }
        }

        public override List<DebugItem> GetDebugInputs(IExecutionEnvironment env, int update)
        {
            foreach (IDebugItem debugInput in _debugInputs)
            {
                debugInput.FlushStringBuilder();
            }
            return _debugInputs;
        }

        public override List<DebugItem> GetDebugOutputs(IExecutionEnvironment env, int update)
        {
            foreach (IDebugItem debugOutput in _debugOutputs)
            {
                debugOutput.FlushStringBuilder();
            }
            return _debugOutputs;
        }

        public override void UpdateForEachInputs(IList<Tuple<string, string>> updates)
        {
            if (updates == null)
            {
                return;
            }
            foreach (Tuple<string, string> t in updates)
            {
                // locate all updates for this tuple
                var t1 = t;
                var items = ResultsCollection.Where(c => !string.IsNullOrEmpty(c.At) && c.At.Equals(t1.Item1));

                // issues updates
                foreach (var a in items)
                {
                    a.At = t.Item2;
                }

                if (SourceString == t.Item1)
                {
                    SourceString = t.Item2;
                }
            }
        }

        public override void UpdateForEachOutputs(IList<Tuple<string, string>> updates)
        {
            if (updates == null)
            {
                return;
            }
            foreach (Tuple<string, string> t in updates)
            {
                // locate all updates for this tuple
                var t1 = t;
                var items = ResultsCollection.Where(c => !string.IsNullOrEmpty(c.OutputVariable) && c.OutputVariable.Equals(t1.Item1));

                // issues updates
                foreach (var a in items)
                {
                    a.OutputVariable = t.Item2;
                }
            }
        }

        public override IList<DsfForEachItem> GetForEachInputs()
        {
            var items = new[] { SourceString }.Union(ResultsCollection.Where(c => !string.IsNullOrEmpty(c.At)).Select(c => c.At)).ToArray();
            return GetForEachItems(items);
        }

        public override IList<DsfForEachItem> GetForEachOutputs()
        {
            var items = ResultsCollection.Where(c => !string.IsNullOrEmpty(c.OutputVariable)).Select(c => c.OutputVariable).ToArray();
            return GetForEachItems(items);
        }

        public int GetCollectionCount() => ResultsCollection.Count(caseConvertTo => !caseConvertTo.CanRemove());

        public void AddListToCollection(IList<string> listToAdd, bool overwrite, ModelItem modelItem)
        {
            if (!overwrite)
            {
                InsertToCollection(listToAdd, modelItem);
            }
            else
            {
                AddToCollection(listToAdd, modelItem);
            }
        }

        public override List<string> GetOutputs() => ResultsCollection.Select(dto => dto.OutputVariable).ToList();

        public bool Equals(DsfDataSplitActivity other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            var resultsCollectionsAreEqual = CommonEqualityOps.CollectionEquals(ResultsCollection.OrderBy(dto => dto.IndexNumber), other.ResultsCollection.OrderBy(dto => dto.IndexNumber), new DataSplitDTOComparer());
            return base.Equals(other)
                && string.Equals(SourceString, other.SourceString)
                && _indexCounter == other._indexCounter
                && resultsCollectionsAreEqual
                && ReverseOrder == other.ReverseOrder
                && SkipBlankRows == other.SkipBlankRows;
        }

        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != this.GetType())
            {
                return false;
            }

            return Equals((DsfDataSplitActivity)obj);
        }

        public override int GetHashCode()
        {
            unchecked
            {
                var hashCode = base.GetHashCode();
                hashCode = (hashCode * 397) ^ (SourceString != null ? SourceString.GetHashCode() : 0);
                hashCode = (hashCode * 397) ^ _indexCounter;
                hashCode = (hashCode * 397) ^ (_resultsCollection != null ? _resultsCollection.GetHashCode() : 0);
                hashCode = (hashCode * 397) ^ ReverseOrder.GetHashCode();
                hashCode = (hashCode * 397) ^ SkipBlankRows.GetHashCode();
                return hashCode;
            }
        }
    }
}
---- Semantic diagnostics *before* transformation ----
D:\a\1\s\Dev\Dev2.Activities\Activities\DsfDataSplitActivity.cs(168,41): error CS0246: The type or namespace name 'CommonFunctions' could not be found (are you missing a using directive or an assembly reference?),D:\a\1\s\Dev\Dev2.Activities\Activities\DsfDataSplitActivity.cs(169,31): error CS0246: The type or namespace name 'CommonFunctions' could not be found (are you missing a using directive or an assembly reference?)
---- Semantic diagnostics *after* transformation ----
D:\a\1\s\Dev\Dev2.Activities\Activities\DsfDataSplitActivity.cs(168,41): error CS0246: The type or namespace name 'CommonFunctions' could not be found (are you missing a using directive or an assembly reference?),D:\a\1\s\Dev\Dev2.Activities\Activities\DsfDataSplitActivity.cs(169,31): error CS0246: The type or namespace name 'CommonFunctions' could not be found (are you missing a using directive or an assembly reference?),D:\a\1\s\Dev\Dev2.Activities\Activities\DsfDataSplitActivity.cs(414,31): error CS0165: Use of unassigned local variable 'currentName'
######################################################################


######################################################################
Nr: 13 - UsePatternMatchingRewriterR8
Filepath: D:\a\1\s\Dev\Dev2.Activities\Activities\DsfGatherSystemInformationActivity.cs
Description: Error: The created Syntax Tree is semantically incorrect.
------------------------------------------------------------------------
---- Original Tree ----
using System;
using System.Activities;
using System.Activities.Presentation.Model;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Security.Principal;
using Dev2.Activities.Debug;
using Dev2.Common;
using Dev2.Common.ExtMethods;
using Dev2.Common.Interfaces.Diagnostics.Debug;
using Dev2.Common.Interfaces.Toolbox;
using Dev2.Data.Interfaces.Enums;
using Dev2.Data.TO;
using Dev2.DataList.Contract;
using Dev2.Diagnostics;
using Dev2.Interfaces;
using Unlimited.Applications.BusinessDesignStudio.Activities;
using Warewolf.Core;
using Warewolf.Resource.Errors;
using Warewolf.Storage.Interfaces;
using WarewolfParserInterop;
using Dev2.Comparer;
using Dev2.Common.State;
using Dev2.Utilities;

namespace Dev2.Activities
{
    public class DsfGatherSystemInformationActivity : DsfActivityAbstract<string>, ICollectionActivity
    {
        #region Fields

        IGetSystemInformation _getSystemInformation;
        IIdentity _currentIdentity;

        #endregion

        /// <summary>
        /// The property that holds all the conversions
        /// </summary>
        public IList<GatherSystemInformationTO> SystemInformationCollection { get; set; }

        public IGetSystemInformation GetSystemInformation
        {
            get
            {
                return _getSystemInformation ?? (_getSystemInformation = new GetSystemInformationHelper());
            }
            set
            {
                _getSystemInformation = value;
            }
        }


        public override List<string> GetOutputs() => SystemInformationCollection.Select(to => to.Result).ToList();

        #region Overrides of DsfNativeActivity<string>

        public DsfGatherSystemInformationActivity()
            : base("Gather System Information")
        {
            SystemInformationCollection = new List<GatherSystemInformationTO>();
        }

        public override IEnumerable<StateVariable> GetState()
        {
            return new[]
            {
                new StateVariable
                {
                    Name="SystemInformationCollection",
                    Type=StateVariable.StateType.InputOutput,
                    Value= ActivityHelper.GetSerializedStateValueFromCollection(SystemInformationCollection)
                }
            };
        }

        void CleanArgs()
        {
            var count = 0;
            while (count < SystemInformationCollection.Count)
            {
                if (string.IsNullOrWhiteSpace(SystemInformationCollection[count].Result))
                {
                    SystemInformationCollection.RemoveAt(count);
                }
                else
                {
                    count++;
                }
            }
        }
        /// <summary>
        /// When overridden runs the activity's execution logic
        /// </summary>
        /// <param name="context">The context to be used.</param>

        protected override void OnExecute(NativeActivityContext context)
            
        {
            var dataObject = context.GetExtension<IDSFDataObject>();
            ExecuteTool(dataObject, 0);
        }

        protected override void ExecuteTool(IDSFDataObject dataObject, int update)
        {
            var allErrors = new ErrorResultTO();

            if (dataObject.ExecutingUser != null)
            {
                _currentIdentity = dataObject.ExecutingUser.Identity;
            }
            InitializeDebug(dataObject);
            try
            {
                TryExecute(dataObject, update, allErrors);
            }
            catch (Exception e)
            {
                Dev2Logger.Error("DSFGatherSystemInformationTool", e, GlobalConstants.WarewolfError);
                allErrors.AddError(e.Message);
            }
            finally
            {
                HandleErrors(dataObject, update, allErrors);
            }
        }

        void HandleErrors(IDSFDataObject dataObject, int update, ErrorResultTO allErrors)
        {
            var hasErrors = allErrors.HasErrors();
            if (hasErrors)
            {
                DisplayAndWriteError("DsfExecuteCommandLineActivity", allErrors);
                foreach (var error in allErrors.FetchErrors())
                {
                    dataObject.Environment.AddError(error);
                }
            }
            if (dataObject.IsDebugMode())
            {
                if (hasErrors)
                {
                    var innerCount = 1;
                    foreach (GatherSystemInformationTO item in SystemInformationCollection)
                    {
                        var itemToAdd = new DebugItem();
                        AddDebugItem(new DebugItemStaticDataParams("", innerCount.ToString(CultureInfo.InvariantCulture)), itemToAdd);
                        AddDebugItem(new DebugEvalResult(item.Result, "", dataObject.Environment, update), itemToAdd);
                        _debugOutputs.Add(itemToAdd);
                        innerCount++;
                    }
                }

                DispatchDebugState(dataObject, StateType.Before, update);
                DispatchDebugState(dataObject, StateType.After, update);
            }
        }

        void TryExecute(IDSFDataObject dataObject, int update, ErrorResultTO allErrors)
        {
            var indexCounter = 0;
            CleanArgs();

            foreach (GatherSystemInformationTO item in SystemInformationCollection)
            {
                try
                {
                    if (dataObject.IsDebugMode())
                    {
                        var inputToAdd = new DebugItem();
                        AddDebugItem(new DebugItemStaticDataParams("", (++indexCounter).ToString(CultureInfo.InvariantCulture)), inputToAdd);
                        AddDebugItem(new DebugItemStaticDataParams("", dataObject.Environment.EvalToExpression(item.Result, update), "", "="), inputToAdd);
                        AddDebugItem(new DebugItemStaticDataParams(item.EnTypeOfSystemInformation.GetDescription(), ""), inputToAdd);
                        _debugInputs.Add(inputToAdd);
                    }

                    var hasErrors = allErrors.HasErrors();
                    if (!hasErrors)
                    {
                        ExecuteForTO(dataObject, update, allErrors, item);
                    }
                }
                catch (Exception err)
                {
                    dataObject.Environment.Assign(item.Result, null, update);
                    allErrors.AddError(err.Message);
                }
            }
            dataObject.Environment.CommitAssign();
            if (dataObject.IsDebugMode() && !allErrors.HasErrors())
            {
                var innerCount = 1;
                foreach (GatherSystemInformationTO item in SystemInformationCollection)
                {
                    var itemToAdd = new DebugItem();
                    AddDebugItem(new DebugItemStaticDataParams("", "", innerCount.ToString(CultureInfo.InvariantCulture)), itemToAdd);
                    AddDebugItem(new DebugEvalResult(item.Result, "", dataObject.Environment, update), itemToAdd);
                    _debugOutputs.Add(itemToAdd);
                    innerCount++;
                }
            }
        }

        void ExecuteForTO(IDSFDataObject dataObject, int update, ErrorResultTO allErrors, GatherSystemInformationTO item)
        {
            var val = GetCorrectSystemInformation(item.EnTypeOfSystemInformation);
            var expression = item.Result;

            var regions = DataListCleaningUtils.SplitIntoRegions(expression);
            if (regions.Count > 1)
            {
                allErrors.AddError(ErrorResource.MultipleVariablesInResultField);
            }
            else
            {
                foreach (var region in regions)
                {
                    dataObject.Environment.AssignWithFrame(new AssignValue(region, val), update);
                }
            }
        }

#pragma warning disable S1541 // Methods and properties should not be too complex
        public string GetCorrectSystemInformation(enTypeOfSystemInformationToGather enTypeOfSystemInformation)
#pragma warning restore S1541 // Methods and properties should not be too complex
        {
            switch(enTypeOfSystemInformation)
            {
                case enTypeOfSystemInformationToGather.ComputerName:
                    return GetSystemInformation.GetComputerName();
                case enTypeOfSystemInformationToGather.OperatingSystem:
                    return GetSystemInformation.GetOperatingSystemInformation();
                case enTypeOfSystemInformationToGather.OperatingSystemVersion:
                    return GetSystemInformation.GetOperatingSystemVersionInformation();
                case enTypeOfSystemInformationToGather.ServicePack:
                    return GetSystemInformation.GetServicePackInformation();
                case enTypeOfSystemInformationToGather.OSBitValue:
                    return GetSystemInformation.GetOSBitValueInformation();
                case enTypeOfSystemInformationToGather.FullDateTime:
                    return GetSystemInformation.GetFullDateTimeInformation();
                case enTypeOfSystemInformationToGather.DateTimeFormat:
                    return GetSystemInformation.GetDateTimeFormatInformation();
                case enTypeOfSystemInformationToGather.DiskAvailable:
                    return GetSystemInformation.GetDiskSpaceAvailableInformation();
                case enTypeOfSystemInformationToGather.DiskTotal:
                    return GetSystemInformation.GetDiskSpaceTotalInformation();
                case enTypeOfSystemInformationToGather.VirtualMemoryAvailable:
                    return GetSystemInformation.GetVirtualMemoryAvailableInformation();
                case enTypeOfSystemInformationToGather.VirtualMemoryTotal:
                    return GetSystemInformation.GetVirtualMemoryTotalInformation();
                case enTypeOfSystemInformationToGather.PhysicalMemoryAvailable:
                    return GetSystemInformation.GetPhysicalMemoryAvailableInformation();
                case enTypeOfSystemInformationToGather.PhysicalMemoryTotal:
                    return GetSystemInformation.GetPhysicalMemoryTotalInformation();
                case enTypeOfSystemInformationToGather.CPUAvailable:
                    return GetSystemInformation.GetCPUAvailableInformation();
                case enTypeOfSystemInformationToGather.CPUTotal:
                    return GetSystemInformation.GetCPUTotalInformation();
                case enTypeOfSystemInformationToGather.Language:
                    return GetSystemInformation.GetLanguageInformation();
                case enTypeOfSystemInformationToGather.Region:
                    return GetSystemInformation.GetRegionInformation();
                case enTypeOfSystemInformationToGather.UserRoles:
                    return GetSystemInformation.GetUserRolesInformation(_currentIdentity);
                case enTypeOfSystemInformationToGather.UserName:
                    return GetSystemInformation.GetUserNameInformation();
                case enTypeOfSystemInformationToGather.Domain:
                    return GetSystemInformation.GetDomainInformation();
                case enTypeOfSystemInformationToGather.NumberOfServerNICS:
                    return GetSystemInformation.GetNumberOfNICS();
                case enTypeOfSystemInformationToGather.MacAddress:
                    return GetSystemInformation.GetMACAdresses();
                case enTypeOfSystemInformationToGather.GateWayAddress:
                    return GetSystemInformation.GetDefaultGateway();
                case enTypeOfSystemInformationToGather.DNSAddress:
                    return GetSystemInformation.GetDNSServer();
                case enTypeOfSystemInformationToGather.IPv4Address:
                    return GetSystemInformation.GetIPv4Adresses();
                case enTypeOfSystemInformationToGather.IPv6Address:
                    return GetSystemInformation.GetIPv6Adresses();
                case enTypeOfSystemInformationToGather.WarewolfMemory:
                    return GetSystemInformation.GetWarewolfServerMemory();
                case enTypeOfSystemInformationToGather.WarewolfCPU:
                    return GetSystemInformation.GetWarewolfCPU();
                case enTypeOfSystemInformationToGather.WarewolfServerVersion:
                    return GetSystemInformation.GetWareWolfVersion();
                default:
                    throw new ArgumentOutOfRangeException("enTypeOfSystemInformation");
            }
        }

        public override IList<DsfForEachItem> GetForEachInputs()
        {
            var enumerable = SystemInformationCollection.Select(to => to.Result);
            return GetForEachItems(enumerable.ToArray());
        }

        public override IList<DsfForEachItem> GetForEachOutputs()
        {
            var enumerable = SystemInformationCollection.Select(to => to.Result);
            return GetForEachItems(enumerable.ToArray());
        }

        public override enFindMissingType GetFindMissingType() => enFindMissingType.DataGridActivity;

        public override void UpdateForEachInputs(IList<Tuple<string, string>> updates)
        {
            if(updates != null)
            {
                foreach(Tuple<string, string> t in updates)
                {
                    // locate all updates for this tuple
                    var t1 = t;
                    var items = SystemInformationCollection.Where(c => !string.IsNullOrEmpty(c.Result) && c.Result.Equals(t1.Item1));

                    // issues updates
                    foreach(var a in items)
                    {
                        a.Result = t.Item2;
                    }
                }
            }
        }

        public override void UpdateForEachOutputs(IList<Tuple<string, string>> updates)
        {
            if(updates != null)
            {
                foreach(Tuple<string, string> t in updates)
                {
                    // locate all updates for this tuple
                    var t1 = t;
                    var items = SystemInformationCollection.Where(c => !string.IsNullOrEmpty(c.Result) && c.Result.Equals(t1.Item1));

                    // issues updates
                    foreach(var a in items)
                    {
                        a.Result = t.Item2;
                    }
                }
            }
        }

        #region Overrides of DsfNativeActivity<string>

        public override List<DebugItem> GetDebugInputs(IExecutionEnvironment env, int update) => _debugInputs;

        public override List<DebugItem> GetDebugOutputs(IExecutionEnvironment env, int update)
        {
            foreach(IDebugItem debugOutput in _debugOutputs)
            {
                debugOutput.FlushStringBuilder();
            }
            return _debugOutputs;
        }

        #endregion

        #region Private Methods

        void InsertToCollection(IEnumerable<string> listToAdd, ModelItem modelItem)
        {
            var modelProperty = modelItem.Properties["SystemInformationCollection"];
            if (modelProperty != null)
            {
                var mic = modelProperty.Collection;

                if (mic != null)
                {
                    var listOfValidRows = SystemInformationCollection.Where(c => !c.CanRemove()).ToList();
                    if (listOfValidRows.Count > 0)
                    {
                        var gatherSystemInformationTo = SystemInformationCollection.Last(c => !c.CanRemove());
                        var startIndex = SystemInformationCollection.IndexOf(gatherSystemInformationTo) + 1;
                        startIndex = InsertAllItems(listToAdd, mic, startIndex);
                        CleanUpCollection(mic, modelItem, startIndex);
                    }
                    else
                    {
                        AddToCollection(listToAdd, modelItem);
                    }
                }
            }
        }

        private int InsertAllItems(IEnumerable<string> listToAdd, ModelItemCollection mic, int startIndex)
        {
            foreach (string s in listToAdd)
            {
                mic.Insert(startIndex, new GatherSystemInformationTO(SystemInformationCollection[startIndex - 1].EnTypeOfSystemInformation, s, startIndex + 1));
                startIndex++;
            }

            return startIndex;
        }

        void AddToCollection(IEnumerable<string> listToAdd, ModelItem modelItem)
        {
            var modelProperty = modelItem.Properties["SystemInformationCollection"];
            if (modelProperty != null)
            {
                var mic = modelProperty.Collection;

                if (mic != null)
                {
                    var startIndex = 0;
                    const enTypeOfSystemInformationToGather EnTypeOfSystemInformation = enTypeOfSystemInformationToGather.FullDateTime;
                    mic.Clear();
                    foreach (string s in listToAdd)
                    {
                        mic.Add(new GatherSystemInformationTO(EnTypeOfSystemInformation, s, startIndex + 1));
                        startIndex++;
                    }
                    CleanUpCollection(mic, modelItem, startIndex);
                }
            }
        }

        void CleanUpCollection(ModelItemCollection mic, ModelItem modelItem, int startIndex)
        {
            if (startIndex < mic.Count)
            {
                mic.RemoveAt(startIndex);
            }
            mic.Add(new GatherSystemInformationTO(enTypeOfSystemInformationToGather.FullDateTime, string.Empty, startIndex + 1));
            var modelProperty = modelItem.Properties["DisplayName"];
            modelProperty?.SetValue(CreateDisplayName(modelItem, startIndex + 1));
        }

        string CreateDisplayName(ModelItem modelItem, int count)
        {
            var modelProperty = modelItem.Properties["DisplayName"];
            if (modelProperty != null)
            {
                var currentName = modelProperty.ComputedValue as string;
                if (currentName != null && currentName.Contains("(") && currentName.Contains(")"))
                {
                    currentName = currentName.Remove(currentName.Contains(" (") ? currentName.IndexOf(" (", StringComparison.Ordinal) : currentName.IndexOf("(", StringComparison.Ordinal));
                }
                currentName = currentName + " (" + (count - 1) + ")";
                return currentName;
            }

            return string.Empty;
        }

        #endregion

        #endregion

        #region Implementation of ICollectionActivity

        public int GetCollectionCount() => SystemInformationCollection.Count(caseConvertTo => !caseConvertTo.CanRemove());

        public void AddListToCollection(IList<string> listToAdd, bool overwrite, ModelItem modelItem)
        {
            if(!overwrite)
            {
                InsertToCollection(listToAdd, modelItem);
            }
            else
            {
                AddToCollection(listToAdd, modelItem);
            }
        }

        #endregion

        public bool Equals(DsfGatherSystemInformationActivity other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            return base.Equals(other)
                && CommonEqualityOps.CollectionEquals(SystemInformationCollection, other.SystemInformationCollection, new GatherSystemInformationTOComparer());
        }

        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != this.GetType())
            {
                return false;
            }

            return Equals((DsfGatherSystemInformationActivity) obj);
        }

        public override int GetHashCode()
        {
            unchecked
            {
                var hashCode = base.GetHashCode();
                hashCode = (hashCode * 397) ^ (SystemInformationCollection != null ? SystemInformationCollection.GetHashCode() : 0);
                return hashCode;
            }
        }
    }


}

---- Transformed Tree ----
using System;
using System.Activities;
using System.Activities.Presentation.Model;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Security.Principal;
using Dev2.Activities.Debug;
using Dev2.Common;
using Dev2.Common.ExtMethods;
using Dev2.Common.Interfaces.Diagnostics.Debug;
using Dev2.Common.Interfaces.Toolbox;
using Dev2.Data.Interfaces.Enums;
using Dev2.Data.TO;
using Dev2.DataList.Contract;
using Dev2.Diagnostics;
using Dev2.Interfaces;
using Unlimited.Applications.BusinessDesignStudio.Activities;
using Warewolf.Core;
using Warewolf.Resource.Errors;
using Warewolf.Storage.Interfaces;
using WarewolfParserInterop;
using Dev2.Comparer;
using Dev2.Common.State;
using Dev2.Utilities;

namespace Dev2.Activities
{
    public class DsfGatherSystemInformationActivity : DsfActivityAbstract<string>, ICollectionActivity
    {
        #region Fields

        IGetSystemInformation _getSystemInformation;
        IIdentity _currentIdentity;

        #endregion

        /// <summary>
        /// The property that holds all the conversions
        /// </summary>
        public IList<GatherSystemInformationTO> SystemInformationCollection { get; set; }

        public IGetSystemInformation GetSystemInformation
        {
            get
            {
                return _getSystemInformation ?? (_getSystemInformation = new GetSystemInformationHelper());
            }
            set
            {
                _getSystemInformation = value;
            }
        }


        public override List<string> GetOutputs() => SystemInformationCollection.Select(to => to.Result).ToList();

        #region Overrides of DsfNativeActivity<string>

        public DsfGatherSystemInformationActivity()
            : base("Gather System Information")
        {
            SystemInformationCollection = new List<GatherSystemInformationTO>();
        }

        public override IEnumerable<StateVariable> GetState()
        {
            return new[]
            {
                new StateVariable
                {
                    Name="SystemInformationCollection",
                    Type=StateVariable.StateType.InputOutput,
                    Value= ActivityHelper.GetSerializedStateValueFromCollection(SystemInformationCollection)
                }
            };
        }

        void CleanArgs()
        {
            var count = 0;
            while (count < SystemInformationCollection.Count)
            {
                if (string.IsNullOrWhiteSpace(SystemInformationCollection[count].Result))
                {
                    SystemInformationCollection.RemoveAt(count);
                }
                else
                {
                    count++;
                }
            }
        }
        /// <summary>
        /// When overridden runs the activity's execution logic
        /// </summary>
        /// <param name="context">The context to be used.</param>

        protected override void OnExecute(NativeActivityContext context)
            
        {
            var dataObject = context.GetExtension<IDSFDataObject>();
            ExecuteTool(dataObject, 0);
        }

        protected override void ExecuteTool(IDSFDataObject dataObject, int update)
        {
            var allErrors = new ErrorResultTO();

            if (dataObject.ExecutingUser != null)
            {
                _currentIdentity = dataObject.ExecutingUser.Identity;
            }
            InitializeDebug(dataObject);
            try
            {
                TryExecute(dataObject, update, allErrors);
            }
            catch (Exception e)
            {
                Dev2Logger.Error("DSFGatherSystemInformationTool", e, GlobalConstants.WarewolfError);
                allErrors.AddError(e.Message);
            }
            finally
            {
                HandleErrors(dataObject, update, allErrors);
            }
        }

        void HandleErrors(IDSFDataObject dataObject, int update, ErrorResultTO allErrors)
        {
            var hasErrors = allErrors.HasErrors();
            if (hasErrors)
            {
                DisplayAndWriteError("DsfExecuteCommandLineActivity", allErrors);
                foreach (var error in allErrors.FetchErrors())
                {
                    dataObject.Environment.AddError(error);
                }
            }
            if (dataObject.IsDebugMode())
            {
                if (hasErrors)
                {
                    var innerCount = 1;
                    foreach (GatherSystemInformationTO item in SystemInformationCollection)
                    {
                        var itemToAdd = new DebugItem();
                        AddDebugItem(new DebugItemStaticDataParams("", innerCount.ToString(CultureInfo.InvariantCulture)), itemToAdd);
                        AddDebugItem(new DebugEvalResult(item.Result, "", dataObject.Environment, update), itemToAdd);
                        _debugOutputs.Add(itemToAdd);
                        innerCount++;
                    }
                }

                DispatchDebugState(dataObject, StateType.Before, update);
                DispatchDebugState(dataObject, StateType.After, update);
            }
        }

        void TryExecute(IDSFDataObject dataObject, int update, ErrorResultTO allErrors)
        {
            var indexCounter = 0;
            CleanArgs();

            foreach (GatherSystemInformationTO item in SystemInformationCollection)
            {
                try
                {
                    if (dataObject.IsDebugMode())
                    {
                        var inputToAdd = new DebugItem();
                        AddDebugItem(new DebugItemStaticDataParams("", (++indexCounter).ToString(CultureInfo.InvariantCulture)), inputToAdd);
                        AddDebugItem(new DebugItemStaticDataParams("", dataObject.Environment.EvalToExpression(item.Result, update), "", "="), inputToAdd);
                        AddDebugItem(new DebugItemStaticDataParams(item.EnTypeOfSystemInformation.GetDescription(), ""), inputToAdd);
                        _debugInputs.Add(inputToAdd);
                    }

                    var hasErrors = allErrors.HasErrors();
                    if (!hasErrors)
                    {
                        ExecuteForTO(dataObject, update, allErrors, item);
                    }
                }
                catch (Exception err)
                {
                    dataObject.Environment.Assign(item.Result, null, update);
                    allErrors.AddError(err.Message);
                }
            }
            dataObject.Environment.CommitAssign();
            if (dataObject.IsDebugMode() && !allErrors.HasErrors())
            {
                var innerCount = 1;
                foreach (GatherSystemInformationTO item in SystemInformationCollection)
                {
                    var itemToAdd = new DebugItem();
                    AddDebugItem(new DebugItemStaticDataParams("", "", innerCount.ToString(CultureInfo.InvariantCulture)), itemToAdd);
                    AddDebugItem(new DebugEvalResult(item.Result, "", dataObject.Environment, update), itemToAdd);
                    _debugOutputs.Add(itemToAdd);
                    innerCount++;
                }
            }
        }

        void ExecuteForTO(IDSFDataObject dataObject, int update, ErrorResultTO allErrors, GatherSystemInformationTO item)
        {
            var val = GetCorrectSystemInformation(item.EnTypeOfSystemInformation);
            var expression = item.Result;

            var regions = DataListCleaningUtils.SplitIntoRegions(expression);
            if (regions.Count > 1)
            {
                allErrors.AddError(ErrorResource.MultipleVariablesInResultField);
            }
            else
            {
                foreach (var region in regions)
                {
                    dataObject.Environment.AssignWithFrame(new AssignValue(region, val), update);
                }
            }
        }

#pragma warning disable S1541 // Methods and properties should not be too complex
        public string GetCorrectSystemInformation(enTypeOfSystemInformationToGather enTypeOfSystemInformation)
#pragma warning restore S1541 // Methods and properties should not be too complex
        {
            switch(enTypeOfSystemInformation)
            {
                case enTypeOfSystemInformationToGather.ComputerName:
                    return GetSystemInformation.GetComputerName();
                case enTypeOfSystemInformationToGather.OperatingSystem:
                    return GetSystemInformation.GetOperatingSystemInformation();
                case enTypeOfSystemInformationToGather.OperatingSystemVersion:
                    return GetSystemInformation.GetOperatingSystemVersionInformation();
                case enTypeOfSystemInformationToGather.ServicePack:
                    return GetSystemInformation.GetServicePackInformation();
                case enTypeOfSystemInformationToGather.OSBitValue:
                    return GetSystemInformation.GetOSBitValueInformation();
                case enTypeOfSystemInformationToGather.FullDateTime:
                    return GetSystemInformation.GetFullDateTimeInformation();
                case enTypeOfSystemInformationToGather.DateTimeFormat:
                    return GetSystemInformation.GetDateTimeFormatInformation();
                case enTypeOfSystemInformationToGather.DiskAvailable:
                    return GetSystemInformation.GetDiskSpaceAvailableInformation();
                case enTypeOfSystemInformationToGather.DiskTotal:
                    return GetSystemInformation.GetDiskSpaceTotalInformation();
                case enTypeOfSystemInformationToGather.VirtualMemoryAvailable:
                    return GetSystemInformation.GetVirtualMemoryAvailableInformation();
                case enTypeOfSystemInformationToGather.VirtualMemoryTotal:
                    return GetSystemInformation.GetVirtualMemoryTotalInformation();
                case enTypeOfSystemInformationToGather.PhysicalMemoryAvailable:
                    return GetSystemInformation.GetPhysicalMemoryAvailableInformation();
                case enTypeOfSystemInformationToGather.PhysicalMemoryTotal:
                    return GetSystemInformation.GetPhysicalMemoryTotalInformation();
                case enTypeOfSystemInformationToGather.CPUAvailable:
                    return GetSystemInformation.GetCPUAvailableInformation();
                case enTypeOfSystemInformationToGather.CPUTotal:
                    return GetSystemInformation.GetCPUTotalInformation();
                case enTypeOfSystemInformationToGather.Language:
                    return GetSystemInformation.GetLanguageInformation();
                case enTypeOfSystemInformationToGather.Region:
                    return GetSystemInformation.GetRegionInformation();
                case enTypeOfSystemInformationToGather.UserRoles:
                    return GetSystemInformation.GetUserRolesInformation(_currentIdentity);
                case enTypeOfSystemInformationToGather.UserName:
                    return GetSystemInformation.GetUserNameInformation();
                case enTypeOfSystemInformationToGather.Domain:
                    return GetSystemInformation.GetDomainInformation();
                case enTypeOfSystemInformationToGather.NumberOfServerNICS:
                    return GetSystemInformation.GetNumberOfNICS();
                case enTypeOfSystemInformationToGather.MacAddress:
                    return GetSystemInformation.GetMACAdresses();
                case enTypeOfSystemInformationToGather.GateWayAddress:
                    return GetSystemInformation.GetDefaultGateway();
                case enTypeOfSystemInformationToGather.DNSAddress:
                    return GetSystemInformation.GetDNSServer();
                case enTypeOfSystemInformationToGather.IPv4Address:
                    return GetSystemInformation.GetIPv4Adresses();
                case enTypeOfSystemInformationToGather.IPv6Address:
                    return GetSystemInformation.GetIPv6Adresses();
                case enTypeOfSystemInformationToGather.WarewolfMemory:
                    return GetSystemInformation.GetWarewolfServerMemory();
                case enTypeOfSystemInformationToGather.WarewolfCPU:
                    return GetSystemInformation.GetWarewolfCPU();
                case enTypeOfSystemInformationToGather.WarewolfServerVersion:
                    return GetSystemInformation.GetWareWolfVersion();
                default:
                    throw new ArgumentOutOfRangeException("enTypeOfSystemInformation");
            }
        }

        public override IList<DsfForEachItem> GetForEachInputs()
        {
            var enumerable = SystemInformationCollection.Select(to => to.Result);
            return GetForEachItems(enumerable.ToArray());
        }

        public override IList<DsfForEachItem> GetForEachOutputs()
        {
            var enumerable = SystemInformationCollection.Select(to => to.Result);
            return GetForEachItems(enumerable.ToArray());
        }

        public override enFindMissingType GetFindMissingType() => enFindMissingType.DataGridActivity;

        public override void UpdateForEachInputs(IList<Tuple<string, string>> updates)
        {
            if(updates != null)
            {
                foreach(Tuple<string, string> t in updates)
                {
                    // locate all updates for this tuple
                    var t1 = t;
                    var items = SystemInformationCollection.Where(c => !string.IsNullOrEmpty(c.Result) && c.Result.Equals(t1.Item1));

                    // issues updates
                    foreach(var a in items)
                    {
                        a.Result = t.Item2;
                    }
                }
            }
        }

        public override void UpdateForEachOutputs(IList<Tuple<string, string>> updates)
        {
            if(updates != null)
            {
                foreach(Tuple<string, string> t in updates)
                {
                    // locate all updates for this tuple
                    var t1 = t;
                    var items = SystemInformationCollection.Where(c => !string.IsNullOrEmpty(c.Result) && c.Result.Equals(t1.Item1));

                    // issues updates
                    foreach(var a in items)
                    {
                        a.Result = t.Item2;
                    }
                }
            }
        }

        #region Overrides of DsfNativeActivity<string>

        public override List<DebugItem> GetDebugInputs(IExecutionEnvironment env, int update) => _debugInputs;

        public override List<DebugItem> GetDebugOutputs(IExecutionEnvironment env, int update)
        {
            foreach(IDebugItem debugOutput in _debugOutputs)
            {
                debugOutput.FlushStringBuilder();
            }
            return _debugOutputs;
        }

        #endregion

        #region Private Methods

        void InsertToCollection(IEnumerable<string> listToAdd, ModelItem modelItem)
        {
            var modelProperty = modelItem.Properties["SystemInformationCollection"];
            if (modelProperty != null)
            {
                var mic = modelProperty.Collection;

                if (mic != null)
                {
                    var listOfValidRows = SystemInformationCollection.Where(c => !c.CanRemove()).ToList();
                    if (listOfValidRows.Count > 0)
                    {
                        var gatherSystemInformationTo = SystemInformationCollection.Last(c => !c.CanRemove());
                        var startIndex = SystemInformationCollection.IndexOf(gatherSystemInformationTo) + 1;
                        startIndex = InsertAllItems(listToAdd, mic, startIndex);
                        CleanUpCollection(mic, modelItem, startIndex);
                    }
                    else
                    {
                        AddToCollection(listToAdd, modelItem);
                    }
                }
            }
        }

        private int InsertAllItems(IEnumerable<string> listToAdd, ModelItemCollection mic, int startIndex)
        {
            foreach (string s in listToAdd)
            {
                mic.Insert(startIndex, new GatherSystemInformationTO(SystemInformationCollection[startIndex - 1].EnTypeOfSystemInformation, s, startIndex + 1));
                startIndex++;
            }

            return startIndex;
        }

        void AddToCollection(IEnumerable<string> listToAdd, ModelItem modelItem)
        {
            var modelProperty = modelItem.Properties["SystemInformationCollection"];
            if (modelProperty != null)
            {
                var mic = modelProperty.Collection;

                if (mic != null)
                {
                    var startIndex = 0;
                    const enTypeOfSystemInformationToGather EnTypeOfSystemInformation = enTypeOfSystemInformationToGather.FullDateTime;
                    mic.Clear();
                    foreach (string s in listToAdd)
                    {
                        mic.Add(new GatherSystemInformationTO(EnTypeOfSystemInformation, s, startIndex + 1));
                        startIndex++;
                    }
                    CleanUpCollection(mic, modelItem, startIndex);
                }
            }
        }

        void CleanUpCollection(ModelItemCollection mic, ModelItem modelItem, int startIndex)
        {
            if (startIndex < mic.Count)
            {
                mic.RemoveAt(startIndex);
            }
            mic.Add(new GatherSystemInformationTO(enTypeOfSystemInformationToGather.FullDateTime, string.Empty, startIndex + 1));
            var modelProperty = modelItem.Properties["DisplayName"];
            modelProperty?.SetValue(CreateDisplayName(modelItem, startIndex + 1));
        }

        string CreateDisplayName(ModelItem modelItem, int count)
        {
            var modelProperty = modelItem.Properties["DisplayName"];
            if (modelProperty != null)
            {
                if (modelProperty.ComputedValue is string currentName && currentName.Contains("(") && currentName.Contains(")"))
                {
                    currentName = currentName.Remove(currentName.Contains(" (") ? currentName.IndexOf(" (", StringComparison.Ordinal) : currentName.IndexOf("(", StringComparison.Ordinal));
                }
                currentName = currentName + " (" + (count - 1) + ")";
                return currentName;
            }

            return string.Empty;
        }

        #endregion

        #endregion

        #region Implementation of ICollectionActivity

        public int GetCollectionCount() => SystemInformationCollection.Count(caseConvertTo => !caseConvertTo.CanRemove());

        public void AddListToCollection(IList<string> listToAdd, bool overwrite, ModelItem modelItem)
        {
            if(!overwrite)
            {
                InsertToCollection(listToAdd, modelItem);
            }
            else
            {
                AddToCollection(listToAdd, modelItem);
            }
        }

        #endregion

        public bool Equals(DsfGatherSystemInformationActivity other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            return base.Equals(other)
                && CommonEqualityOps.CollectionEquals(SystemInformationCollection, other.SystemInformationCollection, new GatherSystemInformationTOComparer());
        }

        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != this.GetType())
            {
                return false;
            }

            return Equals((DsfGatherSystemInformationActivity) obj);
        }

        public override int GetHashCode()
        {
            unchecked
            {
                var hashCode = base.GetHashCode();
                hashCode = (hashCode * 397) ^ (SystemInformationCollection != null ? SystemInformationCollection.GetHashCode() : 0);
                return hashCode;
            }
        }
    }


}

---- Semantic diagnostics *before* transformation ----

---- Semantic diagnostics *after* transformation ----
D:\a\1\s\Dev\Dev2.Activities\Activities\DsfGatherSystemInformationActivity.cs(452,31): error CS0165: Use of unassigned local variable 'currentName'
######################################################################


######################################################################
Nr: 14 - UsePatternMatchingRewriterR8
Filepath: D:\a\1\s\Dev\Dev2.Activities\Activities\DsfXPathActivity.cs
Description: Error: The created Syntax Tree is semantically incorrect.
------------------------------------------------------------------------
---- Original Tree ----
using System;
using System.Activities;
using System.Activities.Presentation.Model;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using Dev2.Activities.Debug;
using Dev2.Common.Interfaces.Diagnostics.Debug;
using Dev2.Common.Interfaces.Toolbox;
using Dev2.Common.State;
using Dev2.Data;
using Dev2.Data.Parsers;
using Dev2.Data.TO;
using Dev2.Data.Util;
using Dev2.Diagnostics;
using Dev2.Interfaces;
using Dev2.Utilities;
using Unlimited.Applications.BusinessDesignStudio.Activities;
using Warewolf.Core;
using Warewolf.Storage;
using Warewolf.Storage.Interfaces;

namespace Dev2.Activities
{
    [ToolDescriptorInfo("Utility-Path", "XPath", ToolType.Native, "8999E59A-38A3-43BB-A98F-6090C5C9EA1E", "Dev2.Activities", "1.0.0.0", "Legacy", "Utility", "/Warewolf.Studio.Themes.Luna;component/Images.xaml", "Tool_Utility_Xpath")]
    public class DsfXPathActivity : DsfActivityAbstract<string>, ICollectionActivity,IEquatable<DsfXPathActivity>
    {
        #region Fields

        IList<XPathDTO> _resultsCollection;
        string _sourceString;
        bool _isDebugMode;

        #endregion

        #region Properties

        public IList<XPathDTO> ResultsCollection
        {
            get
            {
                return _resultsCollection;
            }
            set
            {
                _resultsCollection = value;
                OnPropertyChanged("ResultsCollection");
            }
        }

        public string SourceString
        {
            get
            {
                return _sourceString;
            }
            set
            {
                _sourceString = value;
                OnPropertyChanged("SourceString");
            }
        }

        protected override bool CanInduceIdle => true;

        #endregion

        #region Ctor

        public DsfXPathActivity()
            : base("XPath")
        {
            ResultsCollection = new List<XPathDTO>();
        }


        public override IEnumerable<StateVariable> GetState()
        {
            return new[] {
                new StateVariable
                {
                    Name = "SourceString",
                    Value = SourceString,
                    Type = StateVariable.StateType.Input
                },
                new StateVariable
                {
                    Name="ResultsCollection",
                    Value = ActivityHelper.GetSerializedStateValueFromCollection(ResultsCollection),
                    Type = StateVariable.StateType.Output
                }
            };
        }


        #endregion

        public override List<string> GetOutputs() => ResultsCollection?.Select(dto => dto.OutputVariable).ToList() ?? new List<string>();

        #region Overridden NativeActivity Methods

        protected override void OnExecute(NativeActivityContext context)
        {
            var dataObject = context.GetExtension<IDSFDataObject>();

            ExecuteTool(dataObject, 0);
        }

        protected override void ExecuteTool(IDSFDataObject dataObject, int update)
        {
            _debugOutputs.Clear();

            _isDebugMode = dataObject.IsDebugMode();
            var errors = new ErrorResultTO();
            var allErrors = new ErrorResultTO();
            var parser = new XPathParser();
            var i = 0;

            InitializeDebug(dataObject);
            try
            {
                if (!string.IsNullOrEmpty(SourceString))
                {
                    if (_isDebugMode)
                    {
                        AddSourceStringDebugInputItem(SourceString, dataObject.Environment, update);
                        AddResultDebugInputs(ResultsCollection, out errors);
                        allErrors.MergeErrors(errors);
                    }
                    if (!allErrors.HasErrors())
                    {
                        i = Process(dataObject, update, i, parser, allErrors, errors);
                    }
                    DoDebug(dataObject, update, allErrors);
                }
            }
            catch(Exception ex)
            {
                allErrors.AddError(ex.Message);
            }
            finally
            {
                var actualIndex = i - 1;
                var hasErrors = allErrors.HasErrors();
                ProcessErrors(dataObject, update, hasErrors, allErrors, actualIndex);

                DispatchDebugState(dataObject, StateType.Before, update);
                DispatchDebugState(dataObject, StateType.After, update);
            }
        }

        void ProcessErrors(IDSFDataObject dataObject, int update, bool hasErrors, ErrorResultTO allErrors, int actualIndex)
        {
            if (hasErrors)
            {
                DisplayAndWriteError("DsfXPathActivity", allErrors);
                var errorString = allErrors.MakeDataListReady();
                dataObject.Environment.AddError(errorString);
                if (actualIndex > -1)
                {
                    dataObject.Environment.Assign(ResultsCollection[actualIndex].OutputVariable, null, update);
                }
                if (_isDebugMode)
                {
                    var itemToAdd = new DebugItem();
                    if (actualIndex < 0)
                    {
                        actualIndex = 0;
                    }
                    AddDebugItem(new DebugItemStaticDataParams("", (actualIndex + 1).ToString(CultureInfo.InvariantCulture)), itemToAdd);

                    var outputVariable = "";
                    if (actualIndex >= 0)
                    {
                        outputVariable = ResultsCollection[actualIndex].OutputVariable;
                    }
                    AddDebugItem(new DebugEvalResult(outputVariable, "", dataObject.Environment, update), itemToAdd);
                    _debugOutputs.Add(itemToAdd);

                }
            }

        }

        void DoDebug(IDSFDataObject dataObject, int update, ErrorResultTO allErrors)
        {
            if (_isDebugMode && !allErrors.HasErrors())
            {
                var innerCount = 1;
                foreach (var debugOutputTo in ResultsCollection)
                {
                    if (!string.IsNullOrEmpty(debugOutputTo.OutputVariable))
                    {
                        var itemToAdd = new DebugItem();
                        AddDebugItem(new DebugItemStaticDataParams("", innerCount.ToString(CultureInfo.InvariantCulture)), itemToAdd);
                        AddDebugItem(new DebugEvalResult(DataListUtil.ReplaceRecordsetBlankWithStar(debugOutputTo.OutputVariable), "", dataObject.Environment, update), itemToAdd);
                        _debugOutputs.Add(itemToAdd);
                        innerCount++;
                    }
                }
            }
        }

        int Process(IDSFDataObject dataObject, int update, int i, XPathParser parser, ErrorResultTO allErrors, ErrorResultTO errors)
        {
            if (!string.IsNullOrEmpty(SourceString))
            {
                var itr = new WarewolfListIterator();
                var sourceIterator = new WarewolfIterator(dataObject.Environment.Eval(SourceString, update));
                itr.AddVariableToIterateOn(sourceIterator);
                while (itr.HasMoreData())
                {
                    var c = itr.FetchNextValue(sourceIterator);
                    i = ProcessResultsCollection(dataObject, update, parser, allErrors, c);
                    allErrors.MergeErrors(errors);
                }
            }
            return i;
        }

        int ProcessResultsCollection(IDSFDataObject dataObject, int update, XPathParser parser, ErrorResultTO allErrors, string c)
        {
            int i;
            for (i = 0; i < ResultsCollection.Count; i++)
            {
                if (!string.IsNullOrEmpty(ResultsCollection[i].OutputVariable))
                {
                    IterateOverXPath(dataObject, update, parser, allErrors, c, i);
                }
            }

            return i;
        }

        void IterateOverXPath(IDSFDataObject dataObject, int update, XPathParser parser, ErrorResultTO allErrors, string c, int i)
        {
            var xpathEntry = dataObject.Environment.Eval(ResultsCollection[i].XPath, update);
            var xpathIterator = new WarewolfIterator(xpathEntry);
            while (xpathIterator.HasMoreData())
            {
                var xpathCol = xpathIterator.GetNextValue();
                try
                {
                    var eval = parser.ExecuteXPath(c, xpathCol).ToList();
                    var variable = ResultsCollection[i].OutputVariable;
                    AssignResult(variable, dataObject, eval, update);
                }
                catch (Exception e)
                {
                    allErrors.AddError(e.Message);
                    dataObject.Environment.Assign(ResultsCollection[i].OutputVariable, null, update);
                }
            }
        }

        void AssignResult(string variable, IDSFDataObject dataObject, IEnumerable<string> eval, int update)
        {
            var index = 1;
            if(DataListUtil.IsValueScalar(variable))
            {
                var values = eval as IList<string> ?? eval.ToList();
                dataObject.Environment.Assign(variable, values.LastOrDefault(), update);
            }
            else
            {
                
                foreach(var val in eval)
                {
                    var correctedVariable = variable;
                    if(DataListUtil.IsValueRecordset(variable) && DataListUtil.IsStarIndex(variable) && update==0)
                    {
                        correctedVariable = DataListUtil.ReplaceStarWithFixedIndex(variable, index);
                    }
                    dataObject.Environment.Assign(correctedVariable, val, update);
                    index++;
                }
            }
        }

        void AddResultDebugInputs(IEnumerable<XPathDTO> resultsCollection, out ErrorResultTO errors)
        {
            errors = new ErrorResultTO();
            var i = 1;
            foreach(var xPathDto in resultsCollection)
            {
                if (!String.IsNullOrEmpty(xPathDto.OutputVariable) && _isDebugMode)
                {
                    var itemToAdd = new DebugItem();
                    AddDebugItem(new DebugItemStaticDataParams("", i.ToString(CultureInfo.InvariantCulture)), itemToAdd);
                    AddDebugItem(new DebugItemWarewolfAtomResult(xPathDto.XPath, xPathDto.OutputVariable, ""), itemToAdd);
                    _debugInputs.Add(itemToAdd);
                    i++;
                }

            }
        }

        void AddSourceStringDebugInputItem(string expression, IExecutionEnvironment environment, int update)
        {
            AddDebugInputItem(new DebugEvalResult(expression, "XML", environment, update));
        }

        public override enFindMissingType GetFindMissingType() => enFindMissingType.MixedActivity;

        #endregion

        #region Private Methods
        void InsertToCollection(IEnumerable<string> listToAdd, ModelItem modelItem)
        {
            var modelProperty = modelItem.Properties["ResultsCollection"];
            if(modelProperty == null)
            {
                return;
            }
            var mic = modelProperty.Collection;

            if(mic == null)
            {
                return;
            }
            var listOfValidRows = ResultsCollection.Where(c => !c.CanRemove()).ToList();
            if(listOfValidRows.Count > 0)
            {
                var xPathDto = ResultsCollection.Last(c => !c.CanRemove());
                var startIndex = ResultsCollection.IndexOf(xPathDto) + 1;
                foreach(var s in listToAdd)
                {
                    mic.Insert(startIndex, new XPathDTO(s, ResultsCollection[startIndex - 1].XPath, startIndex + 1));
                    startIndex++;
                }
                CleanUpCollection(mic, modelItem, startIndex);
            }
            else
            {
                AddToCollection(listToAdd, modelItem);
            }
        }

        void AddToCollection(IEnumerable<string> listToAdd, ModelItem modelItem)
        {
            var modelProperty = modelItem.Properties["ResultsCollection"];
            if(modelProperty == null)
            {
                return;
            }
            var mic = modelProperty.Collection;

            if(mic == null)
            {
                return;
            }
            var startIndex = 0;
            var firstRowXPath = ResultsCollection[0].XPath;
            mic.Clear();
            foreach(var s in listToAdd)
            {
                mic.Add(new XPathDTO(s, firstRowXPath, startIndex + 1));
                startIndex++;
            }
            CleanUpCollection(mic, modelItem, startIndex);
        }

        void CleanUpCollection(ModelItemCollection mic, ModelItem modelItem, int startIndex)
        {
            if(startIndex < mic.Count)
            {
                mic.RemoveAt(startIndex);
            }
            mic.Add(new XPathDTO(string.Empty, "", startIndex + 1));
            var modelProperty = modelItem.Properties["DisplayName"];
            modelProperty?.SetValue(CreateDisplayName(modelItem, startIndex + 1));
        }

        string CreateDisplayName(ModelItem modelItem, int count)
        {
            var modelProperty = modelItem.Properties["DisplayName"];
            if(modelProperty == null)
            {
                return "";
            }
            var currentName = modelProperty.ComputedValue as string;
            if (currentName != null && currentName.Contains("(") && currentName.Contains(")"))
            {
                currentName = currentName.Remove(currentName.Contains(" (") ? currentName.IndexOf(" (", StringComparison.Ordinal) : currentName.IndexOf("(", StringComparison.Ordinal));
            }
            currentName = currentName + " (" + (count - 1) + ")";
            return currentName;
        }

        #endregion Private Methods

        #region Get Debug Inputs/Outputs

        #region GetDebugInputs

        public override List<DebugItem> GetDebugInputs(IExecutionEnvironment env, int update)
        {
            foreach(IDebugItem debugInput in _debugInputs)
            {
                debugInput.FlushStringBuilder();
            }
            return _debugInputs;
        }

        #endregion

        #region GetDebugOutputs

        public override List<DebugItem> GetDebugOutputs(IExecutionEnvironment env, int update)
        {
            foreach(IDebugItem debugOutput in _debugOutputs)
            {
                debugOutput.FlushStringBuilder();
            }
            return _debugOutputs;
        }

        #endregion

        #endregion

        #region Get ForEach Inputs/Ouputs

        public override void UpdateForEachInputs(IList<Tuple<string, string>> updates)
        {
            if(updates != null)
            {
                foreach(Tuple<string, string> t in updates)
                {
                    // locate all updates for this tuple
                    var t1 = t;
                    var items = ResultsCollection.Where(c => !string.IsNullOrEmpty(c.XPath) && c.XPath.Equals(t1.Item1));

                    // issues updates
                    foreach(var a in items)
                    {
                        a.XPath = t.Item2;
                    }

                    if(SourceString == t.Item1)
                    {
                        SourceString = t.Item2;
                    }
                }
            }
        }

        public override void UpdateForEachOutputs(IList<Tuple<string, string>> updates)
        {
            if(updates != null)
            {
                foreach(Tuple<string, string> t in updates)
                {
                    // locate all updates for this tuple
                    var t1 = t;
                    var items = ResultsCollection.Where(c => !string.IsNullOrEmpty(c.OutputVariable) && c.OutputVariable.Equals(t1.Item1));

                    // issues updates
                    foreach(var a in items)
                    {
                        a.OutputVariable = t.Item2;
                    }
                }
            }
        }

        #endregion

        #region GetForEachInputs/Outputs

        public override IList<DsfForEachItem> GetForEachInputs()
        {
            var items = new[] { SourceString }.Union(ResultsCollection.Where(c => !string.IsNullOrEmpty(c.XPath)).Select(c => c.XPath)).ToArray();
            return GetForEachItems(items);
        }

        public override IList<DsfForEachItem> GetForEachOutputs()
        {
            var items = ResultsCollection.Where(c => !string.IsNullOrEmpty(c.OutputVariable)).Select(c => c.OutputVariable).ToArray();
            return GetForEachItems(items);
        }

        #endregion

        #region Implementation of ICollectionActivity

        public int GetCollectionCount() => ResultsCollection.Count(xPathDto => !xPathDto.CanRemove());

        public void AddListToCollection(IList<string> listToAdd, bool overwrite, ModelItem modelItem)
        {
            if(!overwrite)
            {
                InsertToCollection(listToAdd, modelItem);
            }
            else
            {
                AddToCollection(listToAdd, modelItem);
            }
        }

        #endregion

        public bool Equals(DsfXPathActivity other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            return base.Equals(other)
                && ResultsCollection.SequenceEqual(other.ResultsCollection)
                && string.Equals(SourceString, other.SourceString) ;
        }

        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != this.GetType())
            {
                return false;
            }

            return Equals((DsfXPathActivity) obj);
        }

        public override int GetHashCode()
        {
            unchecked
            {
                var hashCode = base.GetHashCode();
                hashCode = (hashCode * 397) ^ (ResultsCollection != null ? ResultsCollection.GetHashCode() : 0);
                hashCode = (hashCode * 397) ^ (SourceString != null ? SourceString.GetHashCode() : 0);
                hashCode = (hashCode * 397) ^ _isDebugMode.GetHashCode();
                return hashCode;
            }
        }
    }
}

---- Transformed Tree ----
using System;
using System.Activities;
using System.Activities.Presentation.Model;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using Dev2.Activities.Debug;
using Dev2.Common.Interfaces.Diagnostics.Debug;
using Dev2.Common.Interfaces.Toolbox;
using Dev2.Common.State;
using Dev2.Data;
using Dev2.Data.Parsers;
using Dev2.Data.TO;
using Dev2.Data.Util;
using Dev2.Diagnostics;
using Dev2.Interfaces;
using Dev2.Utilities;
using Unlimited.Applications.BusinessDesignStudio.Activities;
using Warewolf.Core;
using Warewolf.Storage;
using Warewolf.Storage.Interfaces;

namespace Dev2.Activities
{
    [ToolDescriptorInfo("Utility-Path", "XPath", ToolType.Native, "8999E59A-38A3-43BB-A98F-6090C5C9EA1E", "Dev2.Activities", "1.0.0.0", "Legacy", "Utility", "/Warewolf.Studio.Themes.Luna;component/Images.xaml", "Tool_Utility_Xpath")]
    public class DsfXPathActivity : DsfActivityAbstract<string>, ICollectionActivity,IEquatable<DsfXPathActivity>
    {
        #region Fields

        IList<XPathDTO> _resultsCollection;
        string _sourceString;
        bool _isDebugMode;

        #endregion

        #region Properties

        public IList<XPathDTO> ResultsCollection
        {
            get
            {
                return _resultsCollection;
            }
            set
            {
                _resultsCollection = value;
                OnPropertyChanged("ResultsCollection");
            }
        }

        public string SourceString
        {
            get
            {
                return _sourceString;
            }
            set
            {
                _sourceString = value;
                OnPropertyChanged("SourceString");
            }
        }

        protected override bool CanInduceIdle => true;

        #endregion

        #region Ctor

        public DsfXPathActivity()
            : base("XPath")
        {
            ResultsCollection = new List<XPathDTO>();
        }


        public override IEnumerable<StateVariable> GetState()
        {
            return new[] {
                new StateVariable
                {
                    Name = "SourceString",
                    Value = SourceString,
                    Type = StateVariable.StateType.Input
                },
                new StateVariable
                {
                    Name="ResultsCollection",
                    Value = ActivityHelper.GetSerializedStateValueFromCollection(ResultsCollection),
                    Type = StateVariable.StateType.Output
                }
            };
        }


        #endregion

        public override List<string> GetOutputs() => ResultsCollection?.Select(dto => dto.OutputVariable).ToList() ?? new List<string>();

        #region Overridden NativeActivity Methods

        protected override void OnExecute(NativeActivityContext context)
        {
            var dataObject = context.GetExtension<IDSFDataObject>();

            ExecuteTool(dataObject, 0);
        }

        protected override void ExecuteTool(IDSFDataObject dataObject, int update)
        {
            _debugOutputs.Clear();

            _isDebugMode = dataObject.IsDebugMode();
            var errors = new ErrorResultTO();
            var allErrors = new ErrorResultTO();
            var parser = new XPathParser();
            var i = 0;

            InitializeDebug(dataObject);
            try
            {
                if (!string.IsNullOrEmpty(SourceString))
                {
                    if (_isDebugMode)
                    {
                        AddSourceStringDebugInputItem(SourceString, dataObject.Environment, update);
                        AddResultDebugInputs(ResultsCollection, out errors);
                        allErrors.MergeErrors(errors);
                    }
                    if (!allErrors.HasErrors())
                    {
                        i = Process(dataObject, update, i, parser, allErrors, errors);
                    }
                    DoDebug(dataObject, update, allErrors);
                }
            }
            catch(Exception ex)
            {
                allErrors.AddError(ex.Message);
            }
            finally
            {
                var actualIndex = i - 1;
                var hasErrors = allErrors.HasErrors();
                ProcessErrors(dataObject, update, hasErrors, allErrors, actualIndex);

                DispatchDebugState(dataObject, StateType.Before, update);
                DispatchDebugState(dataObject, StateType.After, update);
            }
        }

        void ProcessErrors(IDSFDataObject dataObject, int update, bool hasErrors, ErrorResultTO allErrors, int actualIndex)
        {
            if (hasErrors)
            {
                DisplayAndWriteError("DsfXPathActivity", allErrors);
                var errorString = allErrors.MakeDataListReady();
                dataObject.Environment.AddError(errorString);
                if (actualIndex > -1)
                {
                    dataObject.Environment.Assign(ResultsCollection[actualIndex].OutputVariable, null, update);
                }
                if (_isDebugMode)
                {
                    var itemToAdd = new DebugItem();
                    if (actualIndex < 0)
                    {
                        actualIndex = 0;
                    }
                    AddDebugItem(new DebugItemStaticDataParams("", (actualIndex + 1).ToString(CultureInfo.InvariantCulture)), itemToAdd);

                    var outputVariable = "";
                    if (actualIndex >= 0)
                    {
                        outputVariable = ResultsCollection[actualIndex].OutputVariable;
                    }
                    AddDebugItem(new DebugEvalResult(outputVariable, "", dataObject.Environment, update), itemToAdd);
                    _debugOutputs.Add(itemToAdd);

                }
            }

        }

        void DoDebug(IDSFDataObject dataObject, int update, ErrorResultTO allErrors)
        {
            if (_isDebugMode && !allErrors.HasErrors())
            {
                var innerCount = 1;
                foreach (var debugOutputTo in ResultsCollection)
                {
                    if (!string.IsNullOrEmpty(debugOutputTo.OutputVariable))
                    {
                        var itemToAdd = new DebugItem();
                        AddDebugItem(new DebugItemStaticDataParams("", innerCount.ToString(CultureInfo.InvariantCulture)), itemToAdd);
                        AddDebugItem(new DebugEvalResult(DataListUtil.ReplaceRecordsetBlankWithStar(debugOutputTo.OutputVariable), "", dataObject.Environment, update), itemToAdd);
                        _debugOutputs.Add(itemToAdd);
                        innerCount++;
                    }
                }
            }
        }

        int Process(IDSFDataObject dataObject, int update, int i, XPathParser parser, ErrorResultTO allErrors, ErrorResultTO errors)
        {
            if (!string.IsNullOrEmpty(SourceString))
            {
                var itr = new WarewolfListIterator();
                var sourceIterator = new WarewolfIterator(dataObject.Environment.Eval(SourceString, update));
                itr.AddVariableToIterateOn(sourceIterator);
                while (itr.HasMoreData())
                {
                    var c = itr.FetchNextValue(sourceIterator);
                    i = ProcessResultsCollection(dataObject, update, parser, allErrors, c);
                    allErrors.MergeErrors(errors);
                }
            }
            return i;
        }

        int ProcessResultsCollection(IDSFDataObject dataObject, int update, XPathParser parser, ErrorResultTO allErrors, string c)
        {
            int i;
            for (i = 0; i < ResultsCollection.Count; i++)
            {
                if (!string.IsNullOrEmpty(ResultsCollection[i].OutputVariable))
                {
                    IterateOverXPath(dataObject, update, parser, allErrors, c, i);
                }
            }

            return i;
        }

        void IterateOverXPath(IDSFDataObject dataObject, int update, XPathParser parser, ErrorResultTO allErrors, string c, int i)
        {
            var xpathEntry = dataObject.Environment.Eval(ResultsCollection[i].XPath, update);
            var xpathIterator = new WarewolfIterator(xpathEntry);
            while (xpathIterator.HasMoreData())
            {
                var xpathCol = xpathIterator.GetNextValue();
                try
                {
                    var eval = parser.ExecuteXPath(c, xpathCol).ToList();
                    var variable = ResultsCollection[i].OutputVariable;
                    AssignResult(variable, dataObject, eval, update);
                }
                catch (Exception e)
                {
                    allErrors.AddError(e.Message);
                    dataObject.Environment.Assign(ResultsCollection[i].OutputVariable, null, update);
                }
            }
        }

        void AssignResult(string variable, IDSFDataObject dataObject, IEnumerable<string> eval, int update)
        {
            var index = 1;
            if(DataListUtil.IsValueScalar(variable))
            {
                var values = eval as IList<string> ?? eval.ToList();
                dataObject.Environment.Assign(variable, values.LastOrDefault(), update);
            }
            else
            {
                
                foreach(var val in eval)
                {
                    var correctedVariable = variable;
                    if(DataListUtil.IsValueRecordset(variable) && DataListUtil.IsStarIndex(variable) && update==0)
                    {
                        correctedVariable = DataListUtil.ReplaceStarWithFixedIndex(variable, index);
                    }
                    dataObject.Environment.Assign(correctedVariable, val, update);
                    index++;
                }
            }
        }

        void AddResultDebugInputs(IEnumerable<XPathDTO> resultsCollection, out ErrorResultTO errors)
        {
            errors = new ErrorResultTO();
            var i = 1;
            foreach(var xPathDto in resultsCollection)
            {
                if (!String.IsNullOrEmpty(xPathDto.OutputVariable) && _isDebugMode)
                {
                    var itemToAdd = new DebugItem();
                    AddDebugItem(new DebugItemStaticDataParams("", i.ToString(CultureInfo.InvariantCulture)), itemToAdd);
                    AddDebugItem(new DebugItemWarewolfAtomResult(xPathDto.XPath, xPathDto.OutputVariable, ""), itemToAdd);
                    _debugInputs.Add(itemToAdd);
                    i++;
                }

            }
        }

        void AddSourceStringDebugInputItem(string expression, IExecutionEnvironment environment, int update)
        {
            AddDebugInputItem(new DebugEvalResult(expression, "XML", environment, update));
        }

        public override enFindMissingType GetFindMissingType() => enFindMissingType.MixedActivity;

        #endregion

        #region Private Methods
        void InsertToCollection(IEnumerable<string> listToAdd, ModelItem modelItem)
        {
            var modelProperty = modelItem.Properties["ResultsCollection"];
            if(modelProperty == null)
            {
                return;
            }
            var mic = modelProperty.Collection;

            if(mic == null)
            {
                return;
            }
            var listOfValidRows = ResultsCollection.Where(c => !c.CanRemove()).ToList();
            if(listOfValidRows.Count > 0)
            {
                var xPathDto = ResultsCollection.Last(c => !c.CanRemove());
                var startIndex = ResultsCollection.IndexOf(xPathDto) + 1;
                foreach(var s in listToAdd)
                {
                    mic.Insert(startIndex, new XPathDTO(s, ResultsCollection[startIndex - 1].XPath, startIndex + 1));
                    startIndex++;
                }
                CleanUpCollection(mic, modelItem, startIndex);
            }
            else
            {
                AddToCollection(listToAdd, modelItem);
            }
        }

        void AddToCollection(IEnumerable<string> listToAdd, ModelItem modelItem)
        {
            var modelProperty = modelItem.Properties["ResultsCollection"];
            if(modelProperty == null)
            {
                return;
            }
            var mic = modelProperty.Collection;

            if(mic == null)
            {
                return;
            }
            var startIndex = 0;
            var firstRowXPath = ResultsCollection[0].XPath;
            mic.Clear();
            foreach(var s in listToAdd)
            {
                mic.Add(new XPathDTO(s, firstRowXPath, startIndex + 1));
                startIndex++;
            }
            CleanUpCollection(mic, modelItem, startIndex);
        }

        void CleanUpCollection(ModelItemCollection mic, ModelItem modelItem, int startIndex)
        {
            if(startIndex < mic.Count)
            {
                mic.RemoveAt(startIndex);
            }
            mic.Add(new XPathDTO(string.Empty, "", startIndex + 1));
            var modelProperty = modelItem.Properties["DisplayName"];
            modelProperty?.SetValue(CreateDisplayName(modelItem, startIndex + 1));
        }

        string CreateDisplayName(ModelItem modelItem, int count)
        {
            var modelProperty = modelItem.Properties["DisplayName"];
            if(modelProperty == null)
            {
                return "";
            }
            if (modelProperty.ComputedValue is string currentName && currentName.Contains("(") && currentName.Contains(")"))
            {
                currentName = currentName.Remove(currentName.Contains(" (") ? currentName.IndexOf(" (", StringComparison.Ordinal) : currentName.IndexOf("(", StringComparison.Ordinal));
            }
            currentName = currentName + " (" + (count - 1) + ")";
            return currentName;
        }

        #endregion Private Methods

        #region Get Debug Inputs/Outputs

        #region GetDebugInputs

        public override List<DebugItem> GetDebugInputs(IExecutionEnvironment env, int update)
        {
            foreach(IDebugItem debugInput in _debugInputs)
            {
                debugInput.FlushStringBuilder();
            }
            return _debugInputs;
        }

        #endregion

        #region GetDebugOutputs

        public override List<DebugItem> GetDebugOutputs(IExecutionEnvironment env, int update)
        {
            foreach(IDebugItem debugOutput in _debugOutputs)
            {
                debugOutput.FlushStringBuilder();
            }
            return _debugOutputs;
        }

        #endregion

        #endregion

        #region Get ForEach Inputs/Ouputs

        public override void UpdateForEachInputs(IList<Tuple<string, string>> updates)
        {
            if(updates != null)
            {
                foreach(Tuple<string, string> t in updates)
                {
                    // locate all updates for this tuple
                    var t1 = t;
                    var items = ResultsCollection.Where(c => !string.IsNullOrEmpty(c.XPath) && c.XPath.Equals(t1.Item1));

                    // issues updates
                    foreach(var a in items)
                    {
                        a.XPath = t.Item2;
                    }

                    if(SourceString == t.Item1)
                    {
                        SourceString = t.Item2;
                    }
                }
            }
        }

        public override void UpdateForEachOutputs(IList<Tuple<string, string>> updates)
        {
            if(updates != null)
            {
                foreach(Tuple<string, string> t in updates)
                {
                    // locate all updates for this tuple
                    var t1 = t;
                    var items = ResultsCollection.Where(c => !string.IsNullOrEmpty(c.OutputVariable) && c.OutputVariable.Equals(t1.Item1));

                    // issues updates
                    foreach(var a in items)
                    {
                        a.OutputVariable = t.Item2;
                    }
                }
            }
        }

        #endregion

        #region GetForEachInputs/Outputs

        public override IList<DsfForEachItem> GetForEachInputs()
        {
            var items = new[] { SourceString }.Union(ResultsCollection.Where(c => !string.IsNullOrEmpty(c.XPath)).Select(c => c.XPath)).ToArray();
            return GetForEachItems(items);
        }

        public override IList<DsfForEachItem> GetForEachOutputs()
        {
            var items = ResultsCollection.Where(c => !string.IsNullOrEmpty(c.OutputVariable)).Select(c => c.OutputVariable).ToArray();
            return GetForEachItems(items);
        }

        #endregion

        #region Implementation of ICollectionActivity

        public int GetCollectionCount() => ResultsCollection.Count(xPathDto => !xPathDto.CanRemove());

        public void AddListToCollection(IList<string> listToAdd, bool overwrite, ModelItem modelItem)
        {
            if(!overwrite)
            {
                InsertToCollection(listToAdd, modelItem);
            }
            else
            {
                AddToCollection(listToAdd, modelItem);
            }
        }

        #endregion

        public bool Equals(DsfXPathActivity other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            return base.Equals(other)
                && ResultsCollection.SequenceEqual(other.ResultsCollection)
                && string.Equals(SourceString, other.SourceString) ;
        }

        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != this.GetType())
            {
                return false;
            }

            return Equals((DsfXPathActivity) obj);
        }

        public override int GetHashCode()
        {
            unchecked
            {
                var hashCode = base.GetHashCode();
                hashCode = (hashCode * 397) ^ (ResultsCollection != null ? ResultsCollection.GetHashCode() : 0);
                hashCode = (hashCode * 397) ^ (SourceString != null ? SourceString.GetHashCode() : 0);
                hashCode = (hashCode * 397) ^ _isDebugMode.GetHashCode();
                return hashCode;
            }
        }
    }
}

---- Semantic diagnostics *before* transformation ----
D:\a\1\s\Dev\Dev2.Activities\Activities\DsfXPathActivity.cs(220,59): error CS0246: The type or namespace name 'CommonFunctions' could not be found (are you missing a using directive or an assembly reference?),D:\a\1\s\Dev\Dev2.Activities\Activities\DsfXPathActivity.cs(220,42): error CS0246: The type or namespace name 'CommonFunctions' could not be found (are you missing a using directive or an assembly reference?),D:\a\1\s\Dev\Dev2.Activities\Activities\DsfXPathActivity.cs(248,30): error CS0246: The type or namespace name 'CommonFunctions' could not be found (are you missing a using directive or an assembly reference?),D:\a\1\s\Dev\Dev2.Activities\Activities\DsfXPathActivity.cs(249,37): error CS0246: The type or namespace name 'CommonFunctions' could not be found (are you missing a using directive or an assembly reference?)
---- Semantic diagnostics *after* transformation ----
D:\a\1\s\Dev\Dev2.Activities\Activities\DsfXPathActivity.cs(220,59): error CS0246: The type or namespace name 'CommonFunctions' could not be found (are you missing a using directive or an assembly reference?),D:\a\1\s\Dev\Dev2.Activities\Activities\DsfXPathActivity.cs(220,42): error CS0246: The type or namespace name 'CommonFunctions' could not be found (are you missing a using directive or an assembly reference?),D:\a\1\s\Dev\Dev2.Activities\Activities\DsfXPathActivity.cs(248,30): error CS0246: The type or namespace name 'CommonFunctions' could not be found (are you missing a using directive or an assembly reference?),D:\a\1\s\Dev\Dev2.Activities\Activities\DsfXPathActivity.cs(249,37): error CS0246: The type or namespace name 'CommonFunctions' could not be found (are you missing a using directive or an assembly reference?),D:\a\1\s\Dev\Dev2.Activities\Activities\DsfXPathActivity.cs(396,27): error CS0165: Use of unassigned local variable 'currentName'
######################################################################


######################################################################
Nr: 15 - UsePatternMatchingRewriterR8
Filepath: D:\a\1\s\Dev\Dev2.Core\Converters\Graph\String\Json\JsonNavigator.cs
Description: Error: The created Syntax Tree is semantically incorrect.
------------------------------------------------------------------------
---- Original Tree ----
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Dev2;
using Dev2.Common;
using Dev2.Common.Interfaces.Core.Graph;
using Dev2.Converters.Graph;
using Newtonsoft.Json.Linq;
using Warewolf.Resource.Errors;

namespace Unlimited.Framework.Converters.Graph.String.Json
{
    [Serializable]
    public class JsonNavigator : NavigatorBase, INavigator
    {
        public JsonNavigator(object data) => Data = JToken.Parse(data.ToString());

        #region Methods

        public object SelectScalar(IPath path)
        {
            if (path == null)
            {
                throw new ArgumentNullException("path");
            }

            var jsonPath = path as JsonPath;

            if (jsonPath == null)
            {
                throw new Exception(string.Format(ErrorResource.PathMismatch,
                    typeof (JsonPath), path.GetType()));
            }

            var currentData = Data as JToken;

            if (path.ActualPath == JsonPath.SeperatorSymbol)
            {
                //nothing to do here yet
            }
            else if (path.ActualPath == JsonPath.EnumerableSymbol + JsonPath.SeperatorSymbol)
            {
                var enumerableData = currentData as IEnumerable;
                var enumerator = enumerableData.GetEnumerator();
                enumerator.Reset();
                while (enumerator.MoveNext())
                {
                    currentData = enumerator.Current as JToken;
                }
            }
            else
            {
                var pathSegments = jsonPath.GetSegements().ToList();
                var segmentIndex = 0;

                while (currentData != null && segmentIndex < pathSegments.Count)
                {
                    if (pathSegments[segmentIndex].IsEnumarable)
                    {
                        currentData = GetEnumuratedValueForPathSegment(currentData, pathSegments, segmentIndex);
                    }
                    else
                    {
                        currentData = GetScalarValueForPathSegment(pathSegments[segmentIndex], currentData);
                    }

                    segmentIndex++;
                }
            }

            var returnVal = "";

            if (currentData != null)
            {
                returnVal = currentData.ToString();
            }

            return returnVal;
        }

        private JToken GetEnumuratedValueForPathSegment(JToken currentData, List<IPathSegment> pathSegments, int segmentIndex)
        {
            var enumerableData = GetEnumerableValueForPathSegment(pathSegments[segmentIndex],
                                        currentData);

            if (enumerableData != null)
            {
                var enumerator = enumerableData.GetEnumerator();
                enumerator.Reset();
                while (enumerator.MoveNext())
                {
                    currentData = enumerator.Current as JToken;
                }
            }

            return currentData;
        }

        public IEnumerable<object> SelectEnumerable(IPath path)
        {
            if (path == null)
            {
                throw new ArgumentNullException("path");
            }

            var jsonPath = path as JsonPath;

            if (jsonPath == null)
            {
                throw new Exception(string.Format(ErrorResource.DataTypeMismatch,
                    typeof (JsonPath), path.GetType()));
            }

            List<object> returnData;

            if (path.ActualPath == JsonPath.SeperatorSymbol)
            {
                returnData = new List<object> {Data};
            }
            else if (path.ActualPath == JsonPath.EnumerableSymbol + JsonPath.SeperatorSymbol)
            {
                var enumerableData = Data as IEnumerable;
                returnData = new List<object>();

                if (enumerableData != null)
                {
                    var enumerator = enumerableData.GetEnumerator();
                    enumerator.Reset();
                    while (enumerator.MoveNext())
                    {
                        returnData.Add(enumerator.Current);
                    }
                }
            }
            else
            {
                returnData =
                    new List<object>(
                        SelectEnumberable(jsonPath.GetSegements().ToList(), Data as JToken).Select(o => o.ToString()));
            }

            return returnData;
        }

        public Dictionary<IPath, IList<object>> SelectEnumerablesAsRelated(IList<IPath> paths)
        {
            //
            // Get valid paths
            //
            IList<IPath> validPaths = new List<IPath>(paths.OfType<JsonPath>().ToList());

            //
            // Setup results structure
            //
            var results = new Dictionary<IPath, IList<object>>();
            BuildResultsStructure(validPaths, results);

            if (validPaths.Count == 1 && validPaths[0].ActualPath == JsonPath.SeperatorSymbol)
            {
                results[validPaths[0]].Add(Data);
            }
            else if (validPaths.Count == 1 &&
                     validPaths[0].ActualPath == JsonPath.EnumerableSymbol + JsonPath.SeperatorSymbol)
            {

                if (Data is IEnumerable enumerableData)
                {
                    var enumerator = enumerableData.GetEnumerator();
                    enumerator.Reset();
                    while (enumerator.MoveNext())
                    {
                        results[validPaths[0]].Add(enumerator.Current);
                    }
                }
            }
            else
            {
                CreateRootNode(validPaths, results);
            }
            return results;
        }

        public void Dispose()
        {
            Data = null;
        }

        #endregion Methods

        #region Private Methods

        IEnumerable<object> SelectEnumberable(IList<IPathSegment> pathSegments, JToken data)
        {
            var returnData = new List<object>();
            var currentData = data;

            for (int i = 0; i < pathSegments.Count; i++)
            {
                var pathSegment = pathSegments[i];
                var lastSegment = i == pathSegments.Count - 1;

                if (pathSegment.IsEnumarable)
                {
                    var enumerableData = GetEnumerableValueForPathSegment(pathSegment, currentData);

                    if (enumerableData != null)
                    {
                        GetEnumerableValueForSegment(pathSegments, returnData, currentData, i, enumerableData);
                    }

                    return returnData;
                }

                currentData = GetScalarValueForPathSegment(pathSegment, currentData);

                if (currentData != null && lastSegment)
                {
                    returnData.Add(currentData.ToString());
                }
            }

            return returnData;
        }

        void GetEnumerableValueForSegment(IList<IPathSegment> pathSegments, List<object> returnData, JToken currentData, int i, IEnumerable enumerableData)
        {
            var enumerator = enumerableData.GetEnumerator();
            enumerator.Reset();

            var testToken = enumerableData as JToken;

            if (testToken.IsEnumerableOfPrimitives())
            {
                while (enumerator.MoveNext())
                {
                    var currentToken = enumerator.Current as JToken;
                    if (currentData != null && currentToken != null)
                    {
                        returnData.Add(currentToken.ToString());
                    }

                }
            }
            else
            {
                while (enumerator.MoveNext())
                {
                    returnData.AddRange(SelectEnumberable(pathSegments.Skip(i + 1).ToList(),
                        enumerator.Current as JToken));
                }
            }
        }

        protected override IndexedPathSegmentTreeNode<string> CreatePathSegmentIndexedPathSegmentTreeNode(
            IPathSegment pathSegment, IndexedPathSegmentTreeNode<string> parentNode)
        {
            var newIndexedValueTreeNode = new IndexedPathSegmentTreeNode<string>();

            if (parentNode.EnumerationComplete)
            {
                newIndexedValueTreeNode.CurrentValue = string.Empty;
                newIndexedValueTreeNode.EnumerationComplete = true;
            }
            else
            {
                if (pathSegment.IsEnumarable)
                {
                    GetEnumerableValueForPathSegment(pathSegment, parentNode, newIndexedValueTreeNode);
                }
                else
                {
                    newIndexedValueTreeNode.CurrentValue = GetScalarValueForPathSegment(pathSegment,
                        parentNode.CurrentValue as JToken);

                    if (newIndexedValueTreeNode.CurrentValue == null)
                    {
                        newIndexedValueTreeNode.CurrentValue = string.Empty;
                        newIndexedValueTreeNode.EnumerationComplete = true;
                    }
                }
            }

            return newIndexedValueTreeNode;
        }

        private void GetEnumerableValueForPathSegment(IPathSegment pathSegment, IndexedPathSegmentTreeNode<string> parentNode, IndexedPathSegmentTreeNode<string> newIndexedValueTreeNode)
        {
            var data = parentNode.CurrentValue as JToken;
            newIndexedValueTreeNode.EnumerableValue = GetEnumerableValueForPathSegment(pathSegment, data);

            if (newIndexedValueTreeNode.EnumerableValue == null)
            {
                newIndexedValueTreeNode.CurrentValue = string.Empty;
                newIndexedValueTreeNode.EnumerationComplete = true;
            }
            else
            {
                var isPrimitiveArray = false;
                if (data is JObject jObject)
                {
                    var property = jObject.Property(pathSegment.ActualSegment);
                    isPrimitiveArray = property.IsEnumerableOfPrimitives();
                }

                newIndexedValueTreeNode.Enumerator = newIndexedValueTreeNode.EnumerableValue.GetEnumerator();
                newIndexedValueTreeNode.Enumerator.Reset();

                if (isPrimitiveArray)
                {
                    var valueBuilder = new StringBuilder();
                    while (newIndexedValueTreeNode.Enumerator.MoveNext())
                    {
                        valueBuilder.Append(newIndexedValueTreeNode.Enumerator.Current);
                        valueBuilder.Append(",");
                    }
                    newIndexedValueTreeNode.EnumerationComplete = true;
                    newIndexedValueTreeNode.CurrentValue = valueBuilder.ToString().TrimEnd(',');
                }
                else
                {
                    if (!newIndexedValueTreeNode.Enumerator.MoveNext())
                    {
                        newIndexedValueTreeNode.CurrentValue = string.Empty;
                        newIndexedValueTreeNode.EnumerationComplete = true;
                    }
                    else
                    {
                        newIndexedValueTreeNode.CurrentValue = newIndexedValueTreeNode.Enumerator.Current;
                    }
                }
            }
        }

        JToken GetScalarValueForPathSegment(IPathSegment pathSegment, IEnumerable<JToken> data)
        {
            var jObject = data as JObject;

            JToken returnVal = null;
            var property = jObject?.Property(pathSegment.ActualSegment);

            if (property != null)
            {
                returnVal = property.Value;
            }

            return returnVal;
        }

        IEnumerable GetEnumerableValueForPathSegment(IPathSegment pathSegment, IEnumerable<JToken> data)
        {
            var jObject = data as JObject;

            IEnumerable returnVal = null;
            var property = jObject?.Property(pathSegment.ActualSegment);

            if (property != null && property.IsEnumerable())
            {
                returnVal = property.Value as JArray;
            }

            if (data is JArray jArray)
            {
                returnVal = jArray;
            }

            return returnVal;
        }

        protected override void WriteToResults(IList<IPath> paths,
            Dictionary<IPath, List<IPathSegment>> indexedPathSegments,
            IndexedPathSegmentTreeNode<string> rootIndexedValueTreeNode, Dictionary<IPath, IList<object>> results)
        {
            foreach (IPath path in paths)
            {
                var indexedPathSegment = indexedPathSegments[path];
                var complexKey = indexedPathSegment.Select(p => p.ActualSegment).ToList();
                var IndexedPathSegmentTreeNode = rootIndexedValueTreeNode[complexKey];
                results[path].Add(IndexedPathSegmentTreeNode.CurrentValue.ToString());
            }
        }

        #endregion Private Methods
    }
}
---- Transformed Tree ----
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Dev2;
using Dev2.Common;
using Dev2.Common.Interfaces.Core.Graph;
using Dev2.Converters.Graph;
using Newtonsoft.Json.Linq;
using Warewolf.Resource.Errors;

namespace Unlimited.Framework.Converters.Graph.String.Json
{
    [Serializable]
    public class JsonNavigator : NavigatorBase, INavigator
    {
        public JsonNavigator(object data) => Data = JToken.Parse(data.ToString());

        #region Methods

        public object SelectScalar(IPath path)
        {
            if (path == null)
            {
                throw new ArgumentNullException("path");
            }

            var jsonPath = path as JsonPath;

            if (jsonPath == null)
            {
                throw new Exception(string.Format(ErrorResource.PathMismatch,
                    typeof (JsonPath), path.GetType()));
            }

            if (path.ActualPath == JsonPath.SeperatorSymbol)
            {
                //nothing to do here yet
            }
            else if (path.ActualPath == JsonPath.EnumerableSymbol + JsonPath.SeperatorSymbol)
            {
                var enumerableData = currentData as IEnumerable;
                var enumerator = enumerableData.GetEnumerator();
                enumerator.Reset();
                while (enumerator.MoveNext())
                {
                    currentData = enumerator.Current as JToken;
                }
            }
            else
            {
                var pathSegments = jsonPath.GetSegements().ToList();
                var segmentIndex = 0;

                while (Data is JToken currentData && segmentIndex < pathSegments.Count)
                {
                    if (pathSegments[segmentIndex].IsEnumarable)
                    {
                        currentData = GetEnumuratedValueForPathSegment(currentData, pathSegments, segmentIndex);
                    }
                    else
                    {
                        currentData = GetScalarValueForPathSegment(pathSegments[segmentIndex], currentData);
                    }

                    segmentIndex++;
                }
            }

            var returnVal = "";

            if (Data is JToken currentData)
            {
                returnVal = currentData.ToString();
            }

            return returnVal;
        }

        private JToken GetEnumuratedValueForPathSegment(JToken currentData, List<IPathSegment> pathSegments, int segmentIndex)
        {
            var enumerableData = GetEnumerableValueForPathSegment(pathSegments[segmentIndex],
                                        currentData);

            if (enumerableData != null)
            {
                var enumerator = enumerableData.GetEnumerator();
                enumerator.Reset();
                while (enumerator.MoveNext())
                {
                    currentData = enumerator.Current as JToken;
                }
            }

            return currentData;
        }

        public IEnumerable<object> SelectEnumerable(IPath path)
        {
            if (path == null)
            {
                throw new ArgumentNullException("path");
            }

            var jsonPath = path as JsonPath;

            if (jsonPath == null)
            {
                throw new Exception(string.Format(ErrorResource.DataTypeMismatch,
                    typeof (JsonPath), path.GetType()));
            }

            List<object> returnData;

            if (path.ActualPath == JsonPath.SeperatorSymbol)
            {
                returnData = new List<object> {Data};
            }
            else if (path.ActualPath == JsonPath.EnumerableSymbol + JsonPath.SeperatorSymbol)
            {
                returnData = new List<object>();

                if (Data is IEnumerable enumerableData)
                {
                    var enumerator = enumerableData.GetEnumerator();
                    enumerator.Reset();
                    while (enumerator.MoveNext())
                    {
                        returnData.Add(enumerator.Current);
                    }
                }
            }
            else
            {
                returnData =
                    new List<object>(
                        SelectEnumberable(jsonPath.GetSegements().ToList(), Data as JToken).Select(o => o.ToString()));
            }

            return returnData;
        }

        public Dictionary<IPath, IList<object>> SelectEnumerablesAsRelated(IList<IPath> paths)
        {
            //
            // Get valid paths
            //
            IList<IPath> validPaths = new List<IPath>(paths.OfType<JsonPath>().ToList());

            //
            // Setup results structure
            //
            var results = new Dictionary<IPath, IList<object>>();
            BuildResultsStructure(validPaths, results);

            if (validPaths.Count == 1 && validPaths[0].ActualPath == JsonPath.SeperatorSymbol)
            {
                results[validPaths[0]].Add(Data);
            }
            else if (validPaths.Count == 1 &&
                     validPaths[0].ActualPath == JsonPath.EnumerableSymbol + JsonPath.SeperatorSymbol)
            {

                if (Data is IEnumerable enumerableData)
                {
                    var enumerator = enumerableData.GetEnumerator();
                    enumerator.Reset();
                    while (enumerator.MoveNext())
                    {
                        results[validPaths[0]].Add(enumerator.Current);
                    }
                }
            }
            else
            {
                CreateRootNode(validPaths, results);
            }
            return results;
        }

        public void Dispose()
        {
            Data = null;
        }

        #endregion Methods

        #region Private Methods

        IEnumerable<object> SelectEnumberable(IList<IPathSegment> pathSegments, JToken data)
        {
            var returnData = new List<object>();
            var currentData = data;

            for (int i = 0; i < pathSegments.Count; i++)
            {
                var pathSegment = pathSegments[i];
                var lastSegment = i == pathSegments.Count - 1;

                if (pathSegment.IsEnumarable)
                {
                    var enumerableData = GetEnumerableValueForPathSegment(pathSegment, currentData);

                    if (enumerableData != null)
                    {
                        GetEnumerableValueForSegment(pathSegments, returnData, currentData, i, enumerableData);
                    }

                    return returnData;
                }

                currentData = GetScalarValueForPathSegment(pathSegment, currentData);

                if (currentData != null && lastSegment)
                {
                    returnData.Add(currentData.ToString());
                }
            }

            return returnData;
        }

        void GetEnumerableValueForSegment(IList<IPathSegment> pathSegments, List<object> returnData, JToken currentData, int i, IEnumerable enumerableData)
        {
            var enumerator = enumerableData.GetEnumerator();
            enumerator.Reset();

            var testToken = enumerableData as JToken;

            if (testToken.IsEnumerableOfPrimitives())
            {
                while (enumerator.MoveNext())
                {
                    if (currentData != null && enumerator.Current is JToken currentToken)
                    {
                        returnData.Add(currentToken.ToString());
                    }

                }
            }
            else
            {
                while (enumerator.MoveNext())
                {
                    returnData.AddRange(SelectEnumberable(pathSegments.Skip(i + 1).ToList(),
                        enumerator.Current as JToken));
                }
            }
        }

        protected override IndexedPathSegmentTreeNode<string> CreatePathSegmentIndexedPathSegmentTreeNode(
            IPathSegment pathSegment, IndexedPathSegmentTreeNode<string> parentNode)
        {
            var newIndexedValueTreeNode = new IndexedPathSegmentTreeNode<string>();

            if (parentNode.EnumerationComplete)
            {
                newIndexedValueTreeNode.CurrentValue = string.Empty;
                newIndexedValueTreeNode.EnumerationComplete = true;
            }
            else
            {
                if (pathSegment.IsEnumarable)
                {
                    GetEnumerableValueForPathSegment(pathSegment, parentNode, newIndexedValueTreeNode);
                }
                else
                {
                    newIndexedValueTreeNode.CurrentValue = GetScalarValueForPathSegment(pathSegment,
                        parentNode.CurrentValue as JToken);

                    if (newIndexedValueTreeNode.CurrentValue == null)
                    {
                        newIndexedValueTreeNode.CurrentValue = string.Empty;
                        newIndexedValueTreeNode.EnumerationComplete = true;
                    }
                }
            }

            return newIndexedValueTreeNode;
        }

        private void GetEnumerableValueForPathSegment(IPathSegment pathSegment, IndexedPathSegmentTreeNode<string> parentNode, IndexedPathSegmentTreeNode<string> newIndexedValueTreeNode)
        {
            var data = parentNode.CurrentValue as JToken;
            newIndexedValueTreeNode.EnumerableValue = GetEnumerableValueForPathSegment(pathSegment, data);

            if (newIndexedValueTreeNode.EnumerableValue == null)
            {
                newIndexedValueTreeNode.CurrentValue = string.Empty;
                newIndexedValueTreeNode.EnumerationComplete = true;
            }
            else
            {
                var isPrimitiveArray = false;
                if (data is JObject jObject)
                {
                    var property = jObject.Property(pathSegment.ActualSegment);
                    isPrimitiveArray = property.IsEnumerableOfPrimitives();
                }

                newIndexedValueTreeNode.Enumerator = newIndexedValueTreeNode.EnumerableValue.GetEnumerator();
                newIndexedValueTreeNode.Enumerator.Reset();

                if (isPrimitiveArray)
                {
                    var valueBuilder = new StringBuilder();
                    while (newIndexedValueTreeNode.Enumerator.MoveNext())
                    {
                        valueBuilder.Append(newIndexedValueTreeNode.Enumerator.Current);
                        valueBuilder.Append(",");
                    }
                    newIndexedValueTreeNode.EnumerationComplete = true;
                    newIndexedValueTreeNode.CurrentValue = valueBuilder.ToString().TrimEnd(',');
                }
                else
                {
                    if (!newIndexedValueTreeNode.Enumerator.MoveNext())
                    {
                        newIndexedValueTreeNode.CurrentValue = string.Empty;
                        newIndexedValueTreeNode.EnumerationComplete = true;
                    }
                    else
                    {
                        newIndexedValueTreeNode.CurrentValue = newIndexedValueTreeNode.Enumerator.Current;
                    }
                }
            }
        }

        JToken GetScalarValueForPathSegment(IPathSegment pathSegment, IEnumerable<JToken> data)
        {
            var jObject = data as JObject;

            JToken returnVal = null;
            var property = jObject?.Property(pathSegment.ActualSegment);

            if (property != null)
            {
                returnVal = property.Value;
            }

            return returnVal;
        }

        IEnumerable GetEnumerableValueForPathSegment(IPathSegment pathSegment, IEnumerable<JToken> data)
        {
            var jObject = data as JObject;

            IEnumerable returnVal = null;
            var property = jObject?.Property(pathSegment.ActualSegment);

            if (property != null && property.IsEnumerable())
            {
                returnVal = property.Value as JArray;
            }

            if (data is JArray jArray)
            {
                returnVal = jArray;
            }

            return returnVal;
        }

        protected override void WriteToResults(IList<IPath> paths,
            Dictionary<IPath, List<IPathSegment>> indexedPathSegments,
            IndexedPathSegmentTreeNode<string> rootIndexedValueTreeNode, Dictionary<IPath, IList<object>> results)
        {
            foreach (IPath path in paths)
            {
                var indexedPathSegment = indexedPathSegments[path];
                var complexKey = indexedPathSegment.Select(p => p.ActualSegment).ToList();
                var IndexedPathSegmentTreeNode = rootIndexedValueTreeNode[complexKey];
                results[path].Add(IndexedPathSegmentTreeNode.CurrentValue.ToString());
            }
        }

        #endregion Private Methods
    }
}
---- Semantic diagnostics *before* transformation ----

---- Semantic diagnostics *after* transformation ----
D:\a\1\s\Dev\Dev2.Core\Converters\Graph\String\Json\JsonNavigator.cs(54,38): error CS0841: Cannot use local variable 'currentData' before it is declared,D:\a\1\s\Dev\Dev2.Core\Converters\Graph\String\Json\JsonNavigator.cs(59,21): error CS0841: Cannot use local variable 'currentData' before it is declared,D:\a\1\s\Dev\Dev2.Core\Converters\Graph\String\Json\JsonNavigator.cs(67,39): error CS0136: A local or parameter named 'currentData' cannot be declared in this scope because that name is used in an enclosing local scope to define a local or parameter
######################################################################


######################################################################
Nr: 16 - UsePatternMatchingRewriterR8
Filepath: D:\a\1\s\Dev\Dev2.Core\ExecutionEnvironmentUtils.cs
Description: Error: The created Syntax Tree is semantically incorrect.
------------------------------------------------------------------------
---- Original Tree ----
using System;
using System.Collections.Generic;
using System.Data;
using System.IO;
using System.Linq;
using System.Text;
using System.Text.RegularExpressions;
using System.Xml;
using System.Xml.Linq;
using Dev2.Common;
using Dev2.Common.ExtMethods;
using Dev2.Common.Interfaces.DB;
using Dev2.Data;
using Dev2.Data.Interfaces.Enums;
using Dev2.Data.Util;
using Dev2.Interfaces;
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;
using Warewolf.Storage.Interfaces;
using WarewolfParserInterop;
using Warewolf.Data;

namespace Dev2
{
    public static class ExecutionEnvironmentUtils
    {
        public static string GetXmlOutputFromEnvironment(IDSFDataObject dataObject, string dataList, int update)
        {
            var jsonOutput = GetJsonForEnvironmentWithColumnIoDirection(dataObject, dataList, enDev2ColumnArgumentDirection.Output, update);
            var xml = JsonConvert.DeserializeXNode(jsonOutput, "DataList", true);
            return xml.ToString();
        }

        static string GetJsonForEnvironmentWithColumnIoDirection(IDSFDataObject dataObject, string dataList, enDev2ColumnArgumentDirection requestIODirection, int update)
        {
            var environment = dataObject.Environment;
            var fixedDataList = dataList.Replace(GlobalConstants.SerializableResourceQuote, "\"").Replace(GlobalConstants.SerializableResourceSingleQuote, "\'");
            var serializeXNode = JsonConvert.SerializeXNode(XDocument.Parse(fixedDataList), Newtonsoft.Json.Formatting.Indented, true);
            if (JsonConvert.DeserializeObject(serializeXNode) is JObject deserializeObject)
            {
                var outputObj = new JObject();
                var props = deserializeObject.Properties().ToList();
                foreach (var prop in props)
                {
                    TryAddPropToOutput(requestIODirection, update, environment, outputObj, prop);
                }

                var dataListString = outputObj.ToString(Newtonsoft.Json.Formatting.Indented);
                return dataListString;
            }

            return "{}";
        }

        private static void TryAddPropToOutput(enDev2ColumnArgumentDirection requestIODirection, int update, IExecutionEnvironment environment, JObject outputObj, JProperty prop)
        {
            if (prop.Value != null && prop.Value.Type == JTokenType.Object)
            {
                var val = prop.Value as JObject;
                var jProperty = val?.Properties().FirstOrDefault(property => property.Name == "@ColumnIODirection");
                if (jProperty != null)
                {
                    var propValue = jProperty.Value;
                    if (Enum.TryParse(propValue.ToString(), true, out enDev2ColumnArgumentDirection ioDirection) && (ioDirection == enDev2ColumnArgumentDirection.Both || ioDirection == requestIODirection))
                    {
                        AddPropToOutput(requestIODirection, update, environment, outputObj, prop, val);
                    }
                }
            }
        }

        private static void AddPropToOutput(enDev2ColumnArgumentDirection requestIODirection, int update, IExecutionEnvironment environment, JObject outputObj, JProperty prop, JObject val)
        {
            var objName = prop.Name;
            var isJson = val.Properties().FirstOrDefault(property => property.Name == "@IsJson");
            if (isJson != null && isJson.Value.ToString() == "True")
            {
                AddObjectsToOutput(environment, objName, outputObj);
            }
            else
            {
                if (prop.Value.Count() > 3)
                {
                    AddRecordsetsToOutput(environment, objName, val, outputObj, requestIODirection, update);
                }
                else
                {
                    AddScalarsToOutput(prop, environment, objName, outputObj, requestIODirection);
                }
            }
        }

        static void AddObjectsToOutput(IExecutionEnvironment environment, string objName, JObject outputObj)
        {
            var evalResult = environment.EvalJContainer("[[@" + objName + "]]");
            if (evalResult != null)
            {
                outputObj.Add(objName, evalResult);
            }
        }

        static void AddScalarsToOutput(JProperty prop, IExecutionEnvironment environment, string objName, JObject outputObj, enDev2ColumnArgumentDirection requestIODirection)
        {
            var v = prop.Value as JObject;
            var ioDire = v?.Properties().FirstOrDefault(property => property.Name == "@ColumnIODirection");
            if (ioDire != null)
            {
                var x = (enDev2ColumnArgumentDirection) Enum.Parse(typeof(enDev2ColumnArgumentDirection), ioDire.Value.ToString());
                if ((x == enDev2ColumnArgumentDirection.Both || x == requestIODirection) && (environment.Eval("[[" + objName + "]]", 0) is CommonFunctions.WarewolfEvalResult.WarewolfAtomResult warewolfEvalResult))
                {
                    ParseDataItemToOutputs(outputObj, objName, warewolfEvalResult.Item);
                }
            }
        }

        static void AddRecordsetsToOutput(IExecutionEnvironment environment, string objName, JObject val, JObject outputObj, enDev2ColumnArgumentDirection requestedIODirection, int update)
        {
            var evalResult = environment.Eval("[[" + objName + "(*)]]", update);
            var newArray = new JArray();
            if (evalResult != null)
            {
                if (evalResult is CommonFunctions.WarewolfEvalResult.WarewolfRecordSetResult res)
                {
                    var data = res.Item.Data;
                    foreach (var dataItem in data)
                    {
                        AddDataItemToOutputs(val, requestedIODirection, newArray, dataItem);
                    }
                }

                outputObj.Add(objName, newArray);
            }
        }

        static void AddDataItemToOutputs(JObject val, enDev2ColumnArgumentDirection requestedIODirection, JArray newArray, KeyValuePair<string, WarewolfAtomList<DataStorage.WarewolfAtom>> dataItem)
        {
            var jObjForArray = new JObject();
            var recCol = val.Properties().FirstOrDefault(property => property.Name == dataItem.Key);
            var io = recCol?.Children().FirstOrDefault() as JObject;
            var p = io?.Properties().FirstOrDefault(token => token.Name == "@ColumnIODirection");
            if (p != null)
            {
                var direction = (enDev2ColumnArgumentDirection) Enum.Parse(typeof(enDev2ColumnArgumentDirection), p.Value.ToString(), true);
                if (direction == enDev2ColumnArgumentDirection.Both || direction == requestedIODirection)
                {
                    var i = 0;
                    foreach (var warewolfAtom in dataItem.Value)
                    {
                        ParseDataItemToOutputs(jObjForArray, dataItem.Key, warewolfAtom);

                        dataItem = CreateDataItem(newArray, dataItem, jObjForArray, i, warewolfAtom);
                        jObjForArray = new JObject();
                        i++;
                    }
                }
            }
        }

        private static KeyValuePair<string, WarewolfAtomList<DataStorage.WarewolfAtom>> CreateDataItem(JArray newArray, KeyValuePair<string, WarewolfAtomList<DataStorage.WarewolfAtom>> dataItem, JObject jObjForArray, int i, DataStorage.WarewolfAtom warewolfAtom)
        {
            if (newArray.Count < i + 1 || newArray.Count == 0)
            {
                newArray.Add(jObjForArray);
            }
            else
            {
                var jToken = newArray[i] as JObject;
                ParseDataItemToOutputs(jToken, dataItem.Key, warewolfAtom);
            }

            return dataItem;
        }

        static void ParseDataItemToOutputs(JObject jObject, string key, DataStorage.WarewolfAtom warewolfAtom)
        {
            if (warewolfAtom is DataStorage.WarewolfAtom.DataString stringResult)
            {
                jObject.Add(key, stringResult.Item);
            }
            else if (warewolfAtom is DataStorage.WarewolfAtom.Int intResult)
            {
                jObject.Add(key, intResult.Item);
            }
            else if (warewolfAtom is DataStorage.WarewolfAtom.Float floatResult)
            {
                jObject.Add(key, floatResult.Item);
            }
            else
            {
                jObject.Add(key, warewolfAtom.ToString());
            }
        }

        public static string GetJsonOutputFromEnvironment(IDSFDataObject dataObject, string dataList, int update) => GetJsonForEnvironmentWithColumnIoDirection(dataObject, dataList, enDev2ColumnArgumentDirection.Output, update);

        public static void UpdateEnvironmentFromXmlPayload(IDSFDataObject dataObject, StringBuilder rawPayload, string dataList, int update)
        {
            var toLoad = rawPayload.ToString().ToCleanXml();
            var xDoc = new XmlDocument();
            toLoad = string.Format("<Tmp{0:N}>{1}</Tmp{0:N}>", Guid.NewGuid(), toLoad);
            xDoc.LoadXml(toLoad);
            if (dataList != null)
            {
                dataList = dataList.Replace("ADL>", "DataList>").Replace("root>", "DataList>");
                if (xDoc.DocumentElement != null)
                {
                    var children = xDoc.DocumentElement.ChildNodes;
                    var dataListTO = new DataListTO(dataList, true);
                    TryLoadXmlIntoEnvironment(dataObject, children, dataListTO.Inputs, update);
                }
            }
        }

        public static void UpdateEnvironmentFromInputPayload(IDSFDataObject dataObject, StringBuilder rawPayload, string dataList)
        {
            dataList = dataList.Replace("ADL>", "DataList>").Replace("root>", "DataList>");
            var dataListTO = new DataListTO(dataList);
            var inputs = dataListTO.Inputs;
            TryUpdateEnviromentWithMappings(dataObject, rawPayload, inputs);
        }

        static void TryUpdateEnviromentWithMappings(IDSFDataObject dataObject, StringBuilder rawPayload, List<string> mappings)
        {
            JObject inputObject;
            var toLoad = rawPayload.ToString();
            if (string.IsNullOrEmpty(toLoad))
            {
                return;
            }

            if (!toLoad.IsJSON())
            {
                toLoad = toLoad.ToCleanXml();
                var sXNode = JsonConvert.SerializeXNode(XDocument.Parse(toLoad), Newtonsoft.Json.Formatting.Indented, true);
                inputObject = JsonConvert.DeserializeObject(sXNode) as JObject;
            }
            else
            {
                inputObject = JsonConvert.DeserializeObject(toLoad) as JObject;
            }

            if (inputObject != null)
            {
                UpdateEnviromentWithMappings(dataObject, mappings, inputObject);
            }
        }

        static void UpdateEnviromentWithMappings(IDSFDataObject dataObject, List<string> mappings, JObject inputObject)
        {
            var recSets = mappings.Where(DataListUtil.IsValueRecordset).ToList();
            var processedRecsets = new List<string>();
            foreach (var input in mappings)
            {
                var inputName = input;
                var isValueRecordset = DataListUtil.IsValueRecordset(input);
                if (isValueRecordset)
                {
                    inputName = DataListUtil.ExtractRecordsetNameFromValue(input);
                    if (processedRecsets.Contains(inputName))
                    {
                        continue;
                    }
                }

                var propsMatching = inputObject.Properties().Where(property => property.Name == inputName).ToList();
                foreach (var prop in propsMatching)
                {
                    var value = prop.Value;
                    var tokenType = value.Type;
                    if (tokenType == JTokenType.Object)
                    {
                        PerformRecordsetUpdate(dataObject, value, processedRecsets, input, recSets, inputName, isValueRecordset);
                    }
                    else if (tokenType == JTokenType.Array)
                    {
                        PerformRecordsetUpdate(dataObject, value, isValueRecordset, input, recSets, inputName, processedRecsets);
                    }
                    else
                    {
                        dataObject.Environment.Assign(DataListUtil.AddBracketsToValueIfNotExist(input), value.ToString(), 0);
                    }
                }
            }
        }

        private static void PerformRecordsetUpdate(IDSFDataObject dataObject, JToken value, List<string> processedRecsets, string input, List<string> recSets, string inputName, bool isValueRecordset)
        {
            if (isValueRecordset)
            {
                var arr = new JArray(value);
                PerformRecordsetUpdate(dataObject, arr, true, input, recSets, inputName, processedRecsets);
            }
            else
            {
                var jContainer = value as JContainer;
                dataObject.Environment.AddToJsonObjects(DataListUtil.AddBracketsToValueIfNotExist("@" + input), jContainer);
            }
        }

        static void PerformRecordsetUpdate(IDSFDataObject dataObject, JToken value, bool isValueRecordset, string input, List<string> recSets, string inputName, List<string> processedRecsets)
        {
            var arrayValue = value as JArray;
            if (!isValueRecordset)
            {
                dataObject.Environment.AddToJsonObjects(DataListUtil.AddBracketsToValueIfNotExist("@" + input + "()"), arrayValue);
            }
            else
            {
                if (arrayValue != null)
                {
                    for (int i = 0; i < arrayValue.Count; i++)
                    {
                        UpdateEnvironmentFromJObject(dataObject, recSets, inputName, i, arrayValue[i]);
                    }

                    processedRecsets.Add(inputName);
                }
            }
        }

        static void UpdateEnvironmentFromJObject(IDSFDataObject dataObject, List<string> recSets, string inputName, int i, JToken val)
        {
            if (val is JObject valObj)
            {
                var recs = recSets.Where(s => DataListUtil.ExtractRecordsetNameFromValue(s) == inputName);
                foreach (var rec in recs)
                {
                    var field = DataListUtil.ExtractFieldNameOnlyFromValue(rec);
                    var fieldProp = valObj.Properties().FirstOrDefault(property => property.Name == field);
                    if (fieldProp != null)
                    {
                        dataObject.Environment.Assign(DataListUtil.AddBracketsToValueIfNotExist(rec), fieldProp.Value.ToString(), i + 1);
                    }
                }
            }
        }

        public static void UpdateEnvironmentFromOutputPayload(IDSFDataObject dataObject, StringBuilder rawPayload, string dataList)
        {
            dataList = dataList.Replace("ADL>", "DataList>").Replace("root>", "DataList>");
            var dataListTO = new DataListTO(dataList);
            var outputs = dataListTO.Outputs;
            TryUpdateEnviromentWithMappings(dataObject, rawPayload, outputs);
        }

        static void TryLoadXmlIntoEnvironment(IDSFDataObject dataObject, XmlNodeList children, List<string> inputDefs, int update, int level = 0)
        {
            try
            {
                LoadXmlIntoEnvironment(dataObject, children, inputDefs, update, level);
            }
            finally
            {
                dataObject.Environment.CommitAssign();
            }
        }

        static void LoadXmlIntoEnvironment(IDSFDataObject dataObject, XmlNodeList children, List<string> inputDefs, int update, int level)
        {
            foreach (XmlNode c in children)
            {
                if (c.Name != GlobalConstants.NaughtyTextNode)
                {
                    if (level > 0)
                    {
                        var c1 = c;
                        var scalars = inputDefs.Where(definition => definition == c1.Name);
                        var recSets = inputDefs.Where(definition => DataListUtil.ExtractRecordsetNameFromValue(definition) == c1.Name);
                        UpdateForRecordset(dataObject, update, recSets, c);
                        UpdateForScalars(dataObject, update, scalars, c);
                    }
                    else
                    {
                        ContinueLoadingXmlIntoEnvironment(dataObject, inputDefs, update, level, c);
                    }
                }
            }
        }

        static void ContinueLoadingXmlIntoEnvironment(IDSFDataObject dataObject, List<string> inputDefs, int update, int level, XmlNode c)
        {
            if (level == 0)
            {
                TryLoadXmlIntoEnvironment(dataObject, c.ChildNodes, inputDefs, update, ++level);
            }
        }

        static void UpdateForScalars(IDSFDataObject dataObject, int update, IEnumerable<string> scalars, XmlNode c)
        {
            var scalarDefs = scalars as string[] ?? scalars.ToArray();
            if (scalarDefs.Length != 0)
            {
                // fetch recordset index
                // process recordset
                var a = c.InnerXml;
                a = RemoveXMLPrefix(a);
                dataObject.Environment.Assign(DataListUtil.AddBracketsToValueIfNotExist(c.Name), a, update);
            }
        }

        static void UpdateForRecordset(IDSFDataObject dataObject, int update, IEnumerable<string> recSets, XmlNode c)
        {
            var recSetDefs = recSets as string[] ?? recSets.ToArray();
            if (recSetDefs.Length != 0)
            {
                var nl = c.ChildNodes;
                foreach (XmlNode subc in nl)
                {
                    foreach (var definition in recSetDefs)
                    {
                        UpdateForChildNodes(dataObject, update, subc, definition);
                    }
                }
            }
        }

        private static void UpdateForChildNodes(IDSFDataObject dataObject, int update, XmlNode subc, string definition)
        {
            if (DataListUtil.IsValueRecordset(definition) && DataListUtil.ExtractFieldNameFromValue(definition) == subc.Name)
            {
                var recSetAppend = DataListUtil.ReplaceRecordsetIndexWithBlank(definition);
                var a = subc.InnerXml;
                a = RemoveXMLPrefix(a);
                dataObject.Environment.AssignWithFrame(new AssignValue(recSetAppend, a), update);
            }
        }

        static string RemoveXMLPrefix(string a)
        {
            if (a.StartsWith(GlobalConstants.XMLPrefix))
            {
                a = a.Replace(GlobalConstants.XMLPrefix, "");
                a = Encoding.UTF8.GetString(System.Convert.FromBase64String(a));
            }

            return a;
        }

        public static string GetXmlInputFromEnvironment(IDSFDataObject dataObject, string dataList, int update)
        {
            var xml = JsonConvert.DeserializeXNode(GetJsonForEnvironmentWithColumnIoDirection(dataObject, dataList, enDev2ColumnArgumentDirection.Input, update), "DataList", true);
            return xml.ToString();
        }

        public static string GetOpenAPIOutputForService(IWarewolfResource resource, string dataList, string webServerUrl)
        {
            if (resource == null)
            {
                throw new ArgumentNullException(nameof(resource));
            }

            if (string.IsNullOrEmpty(dataList))
            {
                throw new ArgumentNullException(nameof(dataList));
            }

            Uri.TryCreate(webServerUrl, UriKind.RelativeOrAbsolute, out Uri url);
            var jsonOpenAPIInfoObject = BuildJsonOpenAPIInfoObject(resource);
            var jsonOpenAPIServerObject = BuildJsonOpenAPIServerObject(url);
            var jsonOpenAPIPathObject = BuildJsonOpenAPIPathObject(url, dataList);
            var jsonOpenAPIObject = BuildJsonOpenAPIObject(jsonOpenAPIInfoObject, jsonOpenAPIServerObject, jsonOpenAPIPathObject);
            var resultString = GetSerializedOpenAPIObject(jsonOpenAPIObject);
            return resultString;
        }

        public static string GetOpenAPIOutputForServiceList(IList<IWarewolfResource> resourceList,
            string webServerUrl)
        {
            if (resourceList == null)
            {
                throw new ArgumentNullException(nameof(resourceList));
            }
            
            if (string.IsNullOrEmpty(webServerUrl))
            {
                throw new ArgumentNullException(nameof(webServerUrl));
            }

            var paths = new List<JObject>();
            foreach (var resource in resourceList)
            {
                var filePath1 = webServerUrl;
                filePath1 = filePath1.Substring(0, filePath1.IndexOf("secure", StringComparison.Ordinal) + 6);

                var filePath2 = resource.FilePath;
                filePath2 = filePath2.Substring(filePath2.IndexOf("Resources", StringComparison.Ordinal) + 10)
                    .Replace(".bite", ".api");

                Uri.TryCreate($"{filePath1}/{filePath2}", UriKind.RelativeOrAbsolute, out Uri url);
                paths.Add(BuildJsonOpenAPIPathObject(url, resource.DataList.ToString()));
            }
            
            var info =  new JObject
            {
                {"title", new JValue(webServerUrl)},
                {"description", new JValue(webServerUrl)},
                {"version", "1"}
            };
            
            var jsonOpenAPIObject = new JObject
            {
                {"openapi", new JValue(EnvironmentVariables.OpenAPiVersion)},
                {"info", info},
                {"servers", new JArray(BuildJsonOpenAPIServerObject(new Uri(webServerUrl)))},
                {"paths", new JArray(paths)}
            };
            var serializedObject = GetSerializedOpenAPIObject(jsonOpenAPIObject);
            serializedObject = RemovePathsArray(serializedObject);

            return serializedObject;
        }

        static string RemovePathsArray(string apiObject)
        {
            apiObject = apiObject.Replace("\"paths\": [", "\"paths\": ");
            apiObject = apiObject.Replace("},\r\n    {\r\n      \"/secure", ",\r\n      \"/secure");
            apiObject = apiObject.Remove(apiObject.LastIndexOf("]"), 1);
            return apiObject;
        }

        static string GetSerializedOpenAPIObject(JObject jsonOpenAPIObject)
        {
            var converter = new JsonSerializer();
            var result = new StringBuilder();
            var jsonTextWriter = new JsonTextWriter(new StringWriter(result)) {Formatting = Newtonsoft.Json.Formatting.Indented};
            converter.Serialize(jsonTextWriter, jsonOpenAPIObject);
            jsonTextWriter.Flush();
            var resultString = Regex.Replace(result.ToString(), @"^\s+$[\r\n]*", "", RegexOptions.Multiline);
            return resultString;
        }

        static JObject BuildJsonOpenAPIObject(JObject jsonOpenAPIInfoObject, JObject jsonOpenAPIServerObject, JObject jsonOpenAPIPathObject)
        {
            var jsonOpenAPIObject = new JObject
            {
                {"openapi", new JValue(EnvironmentVariables.OpenAPiVersion)},
                {"info", jsonOpenAPIInfoObject},
                {"servers", new JArray(jsonOpenAPIServerObject)},
                {"paths", jsonOpenAPIPathObject}
            };
            return jsonOpenAPIObject;
        }

        static JObject BuildJsonOpenAPIServerObject(Uri url)
        {
            var jsonOpenAPIServerObject = new JObject
            {
                {"url", new JValue(url.Scheme + "://" + url.Host)}
            };
            return jsonOpenAPIServerObject;
        }

        static JObject BuildJsonOpenAPIInfoObject(IWarewolfResource resource)
        {
            var versionValue = resource.VersionInfo != null ? new JValue(resource.VersionInfo.VersionNumber) : new JValue("1.0.0");

            var jsonOpenAPIInfoObject = new JObject
            {
                {"title", new JValue(resource.ResourceName)},
                {"description", new JValue(resource.ResourceName)},
                {"version", versionValue}
            };
            return jsonOpenAPIInfoObject;
        }

        static JObject BuildJsonOpenAPIPathObject(Uri path, string dataList)
        {
            var parametersObject = BuildParametersObject(dataList);
            var responseObject = BuildJsonOpenAPIResponsesObject(dataList);
            var pathGetObject = new JObject
            {
                {
                    "get", new JObject
                    {
                        {"tags", new JArray("")},
                        {"description", new JValue("")},
                        {"parameters", parametersObject},
                        {"responses", responseObject}
                    }
                }
            };

            var pathObject = new JObject
            {
                {path.AbsolutePath.Replace(".api", ""), pathGetObject}
            };
            return pathObject;
        }

        static JToken BuildParametersObject(string dataList)
        {
            JArray arrayObj = new JArray();
            var dataListTo = new DataListTO(dataList);

            var scalarInputs = dataListTo.Inputs.Where(s => !DataListUtil.IsValueRecordset(s));
            foreach (var input in scalarInputs)
            {
                var inputObject = new JObject
                {
                    {"name", input},
                    {"in", "query"},
                    {"required", true},
                    {
                        "schema", new JObject
                        {
                            {"type", "string"}
                        }
                    }
                };
                arrayObj.Add(inputObject);
            }

            var recSetInputs = dataListTo.Inputs.Where(DataListUtil.IsValueRecordset).ToList();
            var groupedRecSets = recSetInputs.GroupBy(DataListUtil.ExtractRecordsetNameFromValue);
            foreach (var groupedRecSet in groupedRecSets)
            {
                var recSetName = groupedRecSet.Key;
                var propObject = BuildPropertyDefinition(groupedRecSet);
                var recSchemaObject = new Schema
                {
                    Type = "object",
                    Properties = propObject
                };
                var serializedSchema = JsonConvert.SerializeObject(recSchemaObject);
                var deserializedSchema = JsonConvert.DeserializeObject(serializedSchema) as JToken;
                var recObject = new JObject
                {
                    {"name", recSetName},
                    {"in", "query"},
                    {"required", true},
                    {"schema", deserializedSchema}
                };
                arrayObj.Add(recObject);
            }

            var serialized = JsonConvert.SerializeObject(arrayObj);
            var des = JsonConvert.DeserializeObject(serialized) as JToken;
            var definitionObject = des;
            return definitionObject;
        }

        static JObject BuildJsonOpenAPIResponsesObject(string dataList)
        {
            var jsonOpenAPIResponsesObject = new JObject
            {
                {
                    "200", new JObject
                    {
                        {"description", new JValue("Success")},
                        {
                            "content", new JObject
                            {
                                {
                                    "application/json", BuildResponseSchema(dataList)
                                }
                            }
                        }
                    }
                }
            };
            return jsonOpenAPIResponsesObject;
        }

        private static JToken BuildResponseSchema(string dataList)
        {
            var dataListTo = new DataListTO(dataList);
            var scalarOutputs = dataListTo.Outputs.Where(s => !DataListUtil.IsValueRecordset(s));
            var recSetOutputs = dataListTo.Outputs.Where(DataListUtil.IsValueRecordset);

            var propertiesObject = scalarOutputs.ToDictionary(scalarInput => scalarInput, scalarInput => new Schema {Type = "string"});
            var groupedRecSets = recSetOutputs.GroupBy(DataListUtil.ExtractRecordsetNameFromValue);
            foreach (var groupedRecSet in groupedRecSets)
            {
                var recSetName = groupedRecSet.Key;
                var propObject = BuildPropertyDefinition(groupedRecSet);

                var recObject = new Schema
                {
                    Type = "object",
                    Properties = propObject
                };
                propertiesObject.Add(recSetName, recObject);
            }

            var responseSchema = new Dictionary<string, Schema>
            {
                {
                    "schema", new Schema
                    {
                        Type = "object",
                        Properties = propertiesObject,
                    }
                }
            };
            var serialized = JsonConvert.SerializeObject(responseSchema);
            var definitionObject = JsonConvert.DeserializeObject(serialized) as JToken;
            var res = definitionObject;
            return res;
        }

        static Dictionary<string, Schema> BuildPropertyDefinition(IGrouping<string, string> groupedRecSet) => groupedRecSet.ToDictionary(DataListUtil.ExtractFieldNameOnlyFromValue, name => new Schema
        {
            Type = "string"
        });


        public static void ProcessOutputMapping(IExecutionEnvironment environment, int update, ref bool started, ref int rowIdx, DataRow row, IServiceOutputMapping serviceOutputMapping)
        {
            var rsType = DataListUtil.GetRecordsetIndexType(serviceOutputMapping.MappedTo);
            var rowIndex = DataListUtil.ExtractIndexRegionFromRecordset(serviceOutputMapping.MappedTo);

            var rs = serviceOutputMapping.RecordSetName;
            if (!string.IsNullOrEmpty(rs) && environment.HasRecordSet(DataListUtil.AddBracketsToValueIfNotExist(DataListUtil.MakeValueIntoHighLevelRecordset(rs, rsType == enRecordsetIndexType.Star))))
            {
                if (started)
                {
                    rowIdx = environment.GetLength(rs) + 1;
                    started = false;
                }
            }
            else
            {
                try
                {
                    environment.AssignDataShape(serviceOutputMapping.MappedTo);
                }
                catch (Exception e)
                {
                    Dev2Logger.Error(e, GlobalConstants.WarewolfError);
                }
            }

            GetRowIndex(ref started, ref rowIdx, rsType, rowIndex);
            if (!row.Table.Columns.Contains(serviceOutputMapping.MappedFrom))
            {
                return;
            }

            var value = row[serviceOutputMapping.MappedFrom];

            var colDataType = row.Table.Columns[serviceOutputMapping.MappedFrom].DataType;
            if (colDataType.Name == "Byte[]")
            {
                value = Encoding.UTF8.GetString(value as byte[]);
            }

            if (update != 0)
            {
                rowIdx = update;
            }

            var displayExpression = DataListUtil.ReplaceRecordsetBlankWithIndex(DataListUtil.AddBracketsToValueIfNotExist(serviceOutputMapping.MappedTo), rowIdx);
            if (rsType == enRecordsetIndexType.Star)
            {
                displayExpression = DataListUtil.ReplaceStarWithFixedIndex(displayExpression, rowIdx);
            }

            environment.Assign(displayExpression, value.ToString(), update);
        }

        static void GetRowIndex(ref bool started, ref int rowIdx, enRecordsetIndexType rsType, string rowIndex)
        {
            if (rsType == enRecordsetIndexType.Star && started)
            {
                rowIdx = 1;
                started = false;
            }

            if (rsType == enRecordsetIndexType.Numeric)
            {
                rowIdx = int.Parse(rowIndex);
            }
        }
    }

    public class Schema
    {
        [JsonProperty("type")] public string Type { get; set; }

        [JsonProperty("properties", NullValueHandling = NullValueHandling.Ignore)]
        public IDictionary<string, Schema> Properties { get; set; }
    }
}
---- Transformed Tree ----
using System;
using System.Collections.Generic;
using System.Data;
using System.IO;
using System.Linq;
using System.Text;
using System.Text.RegularExpressions;
using System.Xml;
using System.Xml.Linq;
using Dev2.Common;
using Dev2.Common.ExtMethods;
using Dev2.Common.Interfaces.DB;
using Dev2.Data;
using Dev2.Data.Interfaces.Enums;
using Dev2.Data.Util;
using Dev2.Interfaces;
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;
using Warewolf.Storage.Interfaces;
using WarewolfParserInterop;
using Warewolf.Data;

namespace Dev2
{
    public static class ExecutionEnvironmentUtils
    {
        public static string GetXmlOutputFromEnvironment(IDSFDataObject dataObject, string dataList, int update)
        {
            var jsonOutput = GetJsonForEnvironmentWithColumnIoDirection(dataObject, dataList, enDev2ColumnArgumentDirection.Output, update);
            var xml = JsonConvert.DeserializeXNode(jsonOutput, "DataList", true);
            return xml.ToString();
        }

        static string GetJsonForEnvironmentWithColumnIoDirection(IDSFDataObject dataObject, string dataList, enDev2ColumnArgumentDirection requestIODirection, int update)
        {
            var environment = dataObject.Environment;
            var fixedDataList = dataList.Replace(GlobalConstants.SerializableResourceQuote, "\"").Replace(GlobalConstants.SerializableResourceSingleQuote, "\'");
            var serializeXNode = JsonConvert.SerializeXNode(XDocument.Parse(fixedDataList), Newtonsoft.Json.Formatting.Indented, true);
            if (JsonConvert.DeserializeObject(serializeXNode) is JObject deserializeObject)
            {
                var outputObj = new JObject();
                var props = deserializeObject.Properties().ToList();
                foreach (var prop in props)
                {
                    TryAddPropToOutput(requestIODirection, update, environment, outputObj, prop);
                }

                var dataListString = outputObj.ToString(Newtonsoft.Json.Formatting.Indented);
                return dataListString;
            }

            return "{}";
        }

        private static void TryAddPropToOutput(enDev2ColumnArgumentDirection requestIODirection, int update, IExecutionEnvironment environment, JObject outputObj, JProperty prop)
        {
            if (prop.Value != null && prop.Value.Type == JTokenType.Object)
            {
                var val = prop.Value as JObject;
                var jProperty = val?.Properties().FirstOrDefault(property => property.Name == "@ColumnIODirection");
                if (jProperty != null)
                {
                    var propValue = jProperty.Value;
                    if (Enum.TryParse(propValue.ToString(), true, out enDev2ColumnArgumentDirection ioDirection) && (ioDirection == enDev2ColumnArgumentDirection.Both || ioDirection == requestIODirection))
                    {
                        AddPropToOutput(requestIODirection, update, environment, outputObj, prop, val);
                    }
                }
            }
        }

        private static void AddPropToOutput(enDev2ColumnArgumentDirection requestIODirection, int update, IExecutionEnvironment environment, JObject outputObj, JProperty prop, JObject val)
        {
            var objName = prop.Name;
            var isJson = val.Properties().FirstOrDefault(property => property.Name == "@IsJson");
            if (isJson != null && isJson.Value.ToString() == "True")
            {
                AddObjectsToOutput(environment, objName, outputObj);
            }
            else
            {
                if (prop.Value.Count() > 3)
                {
                    AddRecordsetsToOutput(environment, objName, val, outputObj, requestIODirection, update);
                }
                else
                {
                    AddScalarsToOutput(prop, environment, objName, outputObj, requestIODirection);
                }
            }
        }

        static void AddObjectsToOutput(IExecutionEnvironment environment, string objName, JObject outputObj)
        {
            var evalResult = environment.EvalJContainer("[[@" + objName + "]]");
            if (evalResult != null)
            {
                outputObj.Add(objName, evalResult);
            }
        }

        static void AddScalarsToOutput(JProperty prop, IExecutionEnvironment environment, string objName, JObject outputObj, enDev2ColumnArgumentDirection requestIODirection)
        {
            var v = prop.Value as JObject;
            var ioDire = v?.Properties().FirstOrDefault(property => property.Name == "@ColumnIODirection");
            if (ioDire != null)
            {
                var x = (enDev2ColumnArgumentDirection) Enum.Parse(typeof(enDev2ColumnArgumentDirection), ioDire.Value.ToString());
                if ((x == enDev2ColumnArgumentDirection.Both || x == requestIODirection) && (environment.Eval("[[" + objName + "]]", 0) is CommonFunctions.WarewolfEvalResult.WarewolfAtomResult warewolfEvalResult))
                {
                    ParseDataItemToOutputs(outputObj, objName, warewolfEvalResult.Item);
                }
            }
        }

        static void AddRecordsetsToOutput(IExecutionEnvironment environment, string objName, JObject val, JObject outputObj, enDev2ColumnArgumentDirection requestedIODirection, int update)
        {
            var evalResult = environment.Eval("[[" + objName + "(*)]]", update);
            var newArray = new JArray();
            if (evalResult != null)
            {
                if (evalResult is CommonFunctions.WarewolfEvalResult.WarewolfRecordSetResult res)
                {
                    var data = res.Item.Data;
                    foreach (var dataItem in data)
                    {
                        AddDataItemToOutputs(val, requestedIODirection, newArray, dataItem);
                    }
                }

                outputObj.Add(objName, newArray);
            }
        }

        static void AddDataItemToOutputs(JObject val, enDev2ColumnArgumentDirection requestedIODirection, JArray newArray, KeyValuePair<string, WarewolfAtomList<DataStorage.WarewolfAtom>> dataItem)
        {
            var jObjForArray = new JObject();
            var recCol = val.Properties().FirstOrDefault(property => property.Name == dataItem.Key);
            var io = recCol?.Children().FirstOrDefault() as JObject;
            var p = io?.Properties().FirstOrDefault(token => token.Name == "@ColumnIODirection");
            if (p != null)
            {
                var direction = (enDev2ColumnArgumentDirection) Enum.Parse(typeof(enDev2ColumnArgumentDirection), p.Value.ToString(), true);
                if (direction == enDev2ColumnArgumentDirection.Both || direction == requestedIODirection)
                {
                    var i = 0;
                    foreach (var warewolfAtom in dataItem.Value)
                    {
                        ParseDataItemToOutputs(jObjForArray, dataItem.Key, warewolfAtom);

                        dataItem = CreateDataItem(newArray, dataItem, jObjForArray, i, warewolfAtom);
                        jObjForArray = new JObject();
                        i++;
                    }
                }
            }
        }

        private static KeyValuePair<string, WarewolfAtomList<DataStorage.WarewolfAtom>> CreateDataItem(JArray newArray, KeyValuePair<string, WarewolfAtomList<DataStorage.WarewolfAtom>> dataItem, JObject jObjForArray, int i, DataStorage.WarewolfAtom warewolfAtom)
        {
            if (newArray.Count < i + 1 || newArray.Count == 0)
            {
                newArray.Add(jObjForArray);
            }
            else
            {
                var jToken = newArray[i] as JObject;
                ParseDataItemToOutputs(jToken, dataItem.Key, warewolfAtom);
            }

            return dataItem;
        }

        static void ParseDataItemToOutputs(JObject jObject, string key, DataStorage.WarewolfAtom warewolfAtom)
        {
            if (warewolfAtom is DataStorage.WarewolfAtom.DataString stringResult)
            {
                jObject.Add(key, stringResult.Item);
            }
            else if (warewolfAtom is DataStorage.WarewolfAtom.Int intResult)
            {
                jObject.Add(key, intResult.Item);
            }
            else if (warewolfAtom is DataStorage.WarewolfAtom.Float floatResult)
            {
                jObject.Add(key, floatResult.Item);
            }
            else
            {
                jObject.Add(key, warewolfAtom.ToString());
            }
        }

        public static string GetJsonOutputFromEnvironment(IDSFDataObject dataObject, string dataList, int update) => GetJsonForEnvironmentWithColumnIoDirection(dataObject, dataList, enDev2ColumnArgumentDirection.Output, update);

        public static void UpdateEnvironmentFromXmlPayload(IDSFDataObject dataObject, StringBuilder rawPayload, string dataList, int update)
        {
            var toLoad = rawPayload.ToString().ToCleanXml();
            var xDoc = new XmlDocument();
            toLoad = string.Format("<Tmp{0:N}>{1}</Tmp{0:N}>", Guid.NewGuid(), toLoad);
            xDoc.LoadXml(toLoad);
            if (dataList != null)
            {
                dataList = dataList.Replace("ADL>", "DataList>").Replace("root>", "DataList>");
                if (xDoc.DocumentElement != null)
                {
                    var children = xDoc.DocumentElement.ChildNodes;
                    var dataListTO = new DataListTO(dataList, true);
                    TryLoadXmlIntoEnvironment(dataObject, children, dataListTO.Inputs, update);
                }
            }
        }

        public static void UpdateEnvironmentFromInputPayload(IDSFDataObject dataObject, StringBuilder rawPayload, string dataList)
        {
            dataList = dataList.Replace("ADL>", "DataList>").Replace("root>", "DataList>");
            var dataListTO = new DataListTO(dataList);
            var inputs = dataListTO.Inputs;
            TryUpdateEnviromentWithMappings(dataObject, rawPayload, inputs);
        }

        static void TryUpdateEnviromentWithMappings(IDSFDataObject dataObject, StringBuilder rawPayload, List<string> mappings)
        {
            JObject inputObject;
            var toLoad = rawPayload.ToString();
            if (string.IsNullOrEmpty(toLoad))
            {
                return;
            }

            if (!toLoad.IsJSON())
            {
                toLoad = toLoad.ToCleanXml();
                var sXNode = JsonConvert.SerializeXNode(XDocument.Parse(toLoad), Newtonsoft.Json.Formatting.Indented, true);
                inputObject = JsonConvert.DeserializeObject(sXNode) as JObject;
            }
            else
            {
                inputObject = JsonConvert.DeserializeObject(toLoad) as JObject;
            }

            if (inputObject != null)
            {
                UpdateEnviromentWithMappings(dataObject, mappings, inputObject);
            }
        }

        static void UpdateEnviromentWithMappings(IDSFDataObject dataObject, List<string> mappings, JObject inputObject)
        {
            var recSets = mappings.Where(DataListUtil.IsValueRecordset).ToList();
            var processedRecsets = new List<string>();
            foreach (var input in mappings)
            {
                var inputName = input;
                var isValueRecordset = DataListUtil.IsValueRecordset(input);
                if (isValueRecordset)
                {
                    inputName = DataListUtil.ExtractRecordsetNameFromValue(input);
                    if (processedRecsets.Contains(inputName))
                    {
                        continue;
                    }
                }

                var propsMatching = inputObject.Properties().Where(property => property.Name == inputName).ToList();
                foreach (var prop in propsMatching)
                {
                    var value = prop.Value;
                    var tokenType = value.Type;
                    if (tokenType == JTokenType.Object)
                    {
                        PerformRecordsetUpdate(dataObject, value, processedRecsets, input, recSets, inputName, isValueRecordset);
                    }
                    else if (tokenType == JTokenType.Array)
                    {
                        PerformRecordsetUpdate(dataObject, value, isValueRecordset, input, recSets, inputName, processedRecsets);
                    }
                    else
                    {
                        dataObject.Environment.Assign(DataListUtil.AddBracketsToValueIfNotExist(input), value.ToString(), 0);
                    }
                }
            }
        }

        private static void PerformRecordsetUpdate(IDSFDataObject dataObject, JToken value, List<string> processedRecsets, string input, List<string> recSets, string inputName, bool isValueRecordset)
        {
            if (isValueRecordset)
            {
                var arr = new JArray(value);
                PerformRecordsetUpdate(dataObject, arr, true, input, recSets, inputName, processedRecsets);
            }
            else
            {
                var jContainer = value as JContainer;
                dataObject.Environment.AddToJsonObjects(DataListUtil.AddBracketsToValueIfNotExist("@" + input), jContainer);
            }
        }

        static void PerformRecordsetUpdate(IDSFDataObject dataObject, JToken value, bool isValueRecordset, string input, List<string> recSets, string inputName, List<string> processedRecsets)
        {
            if (!isValueRecordset)
            {
                dataObject.Environment.AddToJsonObjects(DataListUtil.AddBracketsToValueIfNotExist("@" + input + "()"), arrayValue);
            }
            else
            {
                if (value is JArray arrayValue)
                {
                    for (int i = 0; i < arrayValue.Count; i++)
                    {
                        UpdateEnvironmentFromJObject(dataObject, recSets, inputName, i, arrayValue[i]);
                    }

                    processedRecsets.Add(inputName);
                }
            }
        }

        static void UpdateEnvironmentFromJObject(IDSFDataObject dataObject, List<string> recSets, string inputName, int i, JToken val)
        {
            if (val is JObject valObj)
            {
                var recs = recSets.Where(s => DataListUtil.ExtractRecordsetNameFromValue(s) == inputName);
                foreach (var rec in recs)
                {
                    var field = DataListUtil.ExtractFieldNameOnlyFromValue(rec);
                    var fieldProp = valObj.Properties().FirstOrDefault(property => property.Name == field);
                    if (fieldProp != null)
                    {
                        dataObject.Environment.Assign(DataListUtil.AddBracketsToValueIfNotExist(rec), fieldProp.Value.ToString(), i + 1);
                    }
                }
            }
        }

        public static void UpdateEnvironmentFromOutputPayload(IDSFDataObject dataObject, StringBuilder rawPayload, string dataList)
        {
            dataList = dataList.Replace("ADL>", "DataList>").Replace("root>", "DataList>");
            var dataListTO = new DataListTO(dataList);
            var outputs = dataListTO.Outputs;
            TryUpdateEnviromentWithMappings(dataObject, rawPayload, outputs);
        }

        static void TryLoadXmlIntoEnvironment(IDSFDataObject dataObject, XmlNodeList children, List<string> inputDefs, int update, int level = 0)
        {
            try
            {
                LoadXmlIntoEnvironment(dataObject, children, inputDefs, update, level);
            }
            finally
            {
                dataObject.Environment.CommitAssign();
            }
        }

        static void LoadXmlIntoEnvironment(IDSFDataObject dataObject, XmlNodeList children, List<string> inputDefs, int update, int level)
        {
            foreach (XmlNode c in children)
            {
                if (c.Name != GlobalConstants.NaughtyTextNode)
                {
                    if (level > 0)
                    {
                        var c1 = c;
                        var scalars = inputDefs.Where(definition => definition == c1.Name);
                        var recSets = inputDefs.Where(definition => DataListUtil.ExtractRecordsetNameFromValue(definition) == c1.Name);
                        UpdateForRecordset(dataObject, update, recSets, c);
                        UpdateForScalars(dataObject, update, scalars, c);
                    }
                    else
                    {
                        ContinueLoadingXmlIntoEnvironment(dataObject, inputDefs, update, level, c);
                    }
                }
            }
        }

        static void ContinueLoadingXmlIntoEnvironment(IDSFDataObject dataObject, List<string> inputDefs, int update, int level, XmlNode c)
        {
            if (level == 0)
            {
                TryLoadXmlIntoEnvironment(dataObject, c.ChildNodes, inputDefs, update, ++level);
            }
        }

        static void UpdateForScalars(IDSFDataObject dataObject, int update, IEnumerable<string> scalars, XmlNode c)
        {
            var scalarDefs = scalars as string[] ?? scalars.ToArray();
            if (scalarDefs.Length != 0)
            {
                // fetch recordset index
                // process recordset
                var a = c.InnerXml;
                a = RemoveXMLPrefix(a);
                dataObject.Environment.Assign(DataListUtil.AddBracketsToValueIfNotExist(c.Name), a, update);
            }
        }

        static void UpdateForRecordset(IDSFDataObject dataObject, int update, IEnumerable<string> recSets, XmlNode c)
        {
            var recSetDefs = recSets as string[] ?? recSets.ToArray();
            if (recSetDefs.Length != 0)
            {
                var nl = c.ChildNodes;
                foreach (XmlNode subc in nl)
                {
                    foreach (var definition in recSetDefs)
                    {
                        UpdateForChildNodes(dataObject, update, subc, definition);
                    }
                }
            }
        }

        private static void UpdateForChildNodes(IDSFDataObject dataObject, int update, XmlNode subc, string definition)
        {
            if (DataListUtil.IsValueRecordset(definition) && DataListUtil.ExtractFieldNameFromValue(definition) == subc.Name)
            {
                var recSetAppend = DataListUtil.ReplaceRecordsetIndexWithBlank(definition);
                var a = subc.InnerXml;
                a = RemoveXMLPrefix(a);
                dataObject.Environment.AssignWithFrame(new AssignValue(recSetAppend, a), update);
            }
        }

        static string RemoveXMLPrefix(string a)
        {
            if (a.StartsWith(GlobalConstants.XMLPrefix))
            {
                a = a.Replace(GlobalConstants.XMLPrefix, "");
                a = Encoding.UTF8.GetString(System.Convert.FromBase64String(a));
            }

            return a;
        }

        public static string GetXmlInputFromEnvironment(IDSFDataObject dataObject, string dataList, int update)
        {
            var xml = JsonConvert.DeserializeXNode(GetJsonForEnvironmentWithColumnIoDirection(dataObject, dataList, enDev2ColumnArgumentDirection.Input, update), "DataList", true);
            return xml.ToString();
        }

        public static string GetOpenAPIOutputForService(IWarewolfResource resource, string dataList, string webServerUrl)
        {
            if (resource == null)
            {
                throw new ArgumentNullException(nameof(resource));
            }

            if (string.IsNullOrEmpty(dataList))
            {
                throw new ArgumentNullException(nameof(dataList));
            }

            Uri.TryCreate(webServerUrl, UriKind.RelativeOrAbsolute, out Uri url);
            var jsonOpenAPIInfoObject = BuildJsonOpenAPIInfoObject(resource);
            var jsonOpenAPIServerObject = BuildJsonOpenAPIServerObject(url);
            var jsonOpenAPIPathObject = BuildJsonOpenAPIPathObject(url, dataList);
            var jsonOpenAPIObject = BuildJsonOpenAPIObject(jsonOpenAPIInfoObject, jsonOpenAPIServerObject, jsonOpenAPIPathObject);
            var resultString = GetSerializedOpenAPIObject(jsonOpenAPIObject);
            return resultString;
        }

        public static string GetOpenAPIOutputForServiceList(IList<IWarewolfResource> resourceList,
            string webServerUrl)
        {
            if (resourceList == null)
            {
                throw new ArgumentNullException(nameof(resourceList));
            }
            
            if (string.IsNullOrEmpty(webServerUrl))
            {
                throw new ArgumentNullException(nameof(webServerUrl));
            }

            var paths = new List<JObject>();
            foreach (var resource in resourceList)
            {
                var filePath1 = webServerUrl;
                filePath1 = filePath1.Substring(0, filePath1.IndexOf("secure", StringComparison.Ordinal) + 6);

                var filePath2 = resource.FilePath;
                filePath2 = filePath2.Substring(filePath2.IndexOf("Resources", StringComparison.Ordinal) + 10)
                    .Replace(".bite", ".api");

                Uri.TryCreate($"{filePath1}/{filePath2}", UriKind.RelativeOrAbsolute, out Uri url);
                paths.Add(BuildJsonOpenAPIPathObject(url, resource.DataList.ToString()));
            }
            
            var info =  new JObject
            {
                {"title", new JValue(webServerUrl)},
                {"description", new JValue(webServerUrl)},
                {"version", "1"}
            };
            
            var jsonOpenAPIObject = new JObject
            {
                {"openapi", new JValue(EnvironmentVariables.OpenAPiVersion)},
                {"info", info},
                {"servers", new JArray(BuildJsonOpenAPIServerObject(new Uri(webServerUrl)))},
                {"paths", new JArray(paths)}
            };
            var serializedObject = GetSerializedOpenAPIObject(jsonOpenAPIObject);
            serializedObject = RemovePathsArray(serializedObject);

            return serializedObject;
        }

        static string RemovePathsArray(string apiObject)
        {
            apiObject = apiObject.Replace("\"paths\": [", "\"paths\": ");
            apiObject = apiObject.Replace("},\r\n    {\r\n      \"/secure", ",\r\n      \"/secure");
            apiObject = apiObject.Remove(apiObject.LastIndexOf("]"), 1);
            return apiObject;
        }

        static string GetSerializedOpenAPIObject(JObject jsonOpenAPIObject)
        {
            var converter = new JsonSerializer();
            var result = new StringBuilder();
            var jsonTextWriter = new JsonTextWriter(new StringWriter(result)) {Formatting = Newtonsoft.Json.Formatting.Indented};
            converter.Serialize(jsonTextWriter, jsonOpenAPIObject);
            jsonTextWriter.Flush();
            var resultString = Regex.Replace(result.ToString(), @"^\s+$[\r\n]*", "", RegexOptions.Multiline);
            return resultString;
        }

        static JObject BuildJsonOpenAPIObject(JObject jsonOpenAPIInfoObject, JObject jsonOpenAPIServerObject, JObject jsonOpenAPIPathObject)
        {
            var jsonOpenAPIObject = new JObject
            {
                {"openapi", new JValue(EnvironmentVariables.OpenAPiVersion)},
                {"info", jsonOpenAPIInfoObject},
                {"servers", new JArray(jsonOpenAPIServerObject)},
                {"paths", jsonOpenAPIPathObject}
            };
            return jsonOpenAPIObject;
        }

        static JObject BuildJsonOpenAPIServerObject(Uri url)
        {
            var jsonOpenAPIServerObject = new JObject
            {
                {"url", new JValue(url.Scheme + "://" + url.Host)}
            };
            return jsonOpenAPIServerObject;
        }

        static JObject BuildJsonOpenAPIInfoObject(IWarewolfResource resource)
        {
            var versionValue = resource.VersionInfo != null ? new JValue(resource.VersionInfo.VersionNumber) : new JValue("1.0.0");

            var jsonOpenAPIInfoObject = new JObject
            {
                {"title", new JValue(resource.ResourceName)},
                {"description", new JValue(resource.ResourceName)},
                {"version", versionValue}
            };
            return jsonOpenAPIInfoObject;
        }

        static JObject BuildJsonOpenAPIPathObject(Uri path, string dataList)
        {
            var parametersObject = BuildParametersObject(dataList);
            var responseObject = BuildJsonOpenAPIResponsesObject(dataList);
            var pathGetObject = new JObject
            {
                {
                    "get", new JObject
                    {
                        {"tags", new JArray("")},
                        {"description", new JValue("")},
                        {"parameters", parametersObject},
                        {"responses", responseObject}
                    }
                }
            };

            var pathObject = new JObject
            {
                {path.AbsolutePath.Replace(".api", ""), pathGetObject}
            };
            return pathObject;
        }

        static JToken BuildParametersObject(string dataList)
        {
            JArray arrayObj = new JArray();
            var dataListTo = new DataListTO(dataList);

            var scalarInputs = dataListTo.Inputs.Where(s => !DataListUtil.IsValueRecordset(s));
            foreach (var input in scalarInputs)
            {
                var inputObject = new JObject
                {
                    {"name", input},
                    {"in", "query"},
                    {"required", true},
                    {
                        "schema", new JObject
                        {
                            {"type", "string"}
                        }
                    }
                };
                arrayObj.Add(inputObject);
            }

            var recSetInputs = dataListTo.Inputs.Where(DataListUtil.IsValueRecordset).ToList();
            var groupedRecSets = recSetInputs.GroupBy(DataListUtil.ExtractRecordsetNameFromValue);
            foreach (var groupedRecSet in groupedRecSets)
            {
                var recSetName = groupedRecSet.Key;
                var propObject = BuildPropertyDefinition(groupedRecSet);
                var recSchemaObject = new Schema
                {
                    Type = "object",
                    Properties = propObject
                };
                var serializedSchema = JsonConvert.SerializeObject(recSchemaObject);
                var deserializedSchema = JsonConvert.DeserializeObject(serializedSchema) as JToken;
                var recObject = new JObject
                {
                    {"name", recSetName},
                    {"in", "query"},
                    {"required", true},
                    {"schema", deserializedSchema}
                };
                arrayObj.Add(recObject);
            }

            var serialized = JsonConvert.SerializeObject(arrayObj);
            var des = JsonConvert.DeserializeObject(serialized) as JToken;
            var definitionObject = des;
            return definitionObject;
        }

        static JObject BuildJsonOpenAPIResponsesObject(string dataList)
        {
            var jsonOpenAPIResponsesObject = new JObject
            {
                {
                    "200", new JObject
                    {
                        {"description", new JValue("Success")},
                        {
                            "content", new JObject
                            {
                                {
                                    "application/json", BuildResponseSchema(dataList)
                                }
                            }
                        }
                    }
                }
            };
            return jsonOpenAPIResponsesObject;
        }

        private static JToken BuildResponseSchema(string dataList)
        {
            var dataListTo = new DataListTO(dataList);
            var scalarOutputs = dataListTo.Outputs.Where(s => !DataListUtil.IsValueRecordset(s));
            var recSetOutputs = dataListTo.Outputs.Where(DataListUtil.IsValueRecordset);

            var propertiesObject = scalarOutputs.ToDictionary(scalarInput => scalarInput, scalarInput => new Schema {Type = "string"});
            var groupedRecSets = recSetOutputs.GroupBy(DataListUtil.ExtractRecordsetNameFromValue);
            foreach (var groupedRecSet in groupedRecSets)
            {
                var recSetName = groupedRecSet.Key;
                var propObject = BuildPropertyDefinition(groupedRecSet);

                var recObject = new Schema
                {
                    Type = "object",
                    Properties = propObject
                };
                propertiesObject.Add(recSetName, recObject);
            }

            var responseSchema = new Dictionary<string, Schema>
            {
                {
                    "schema", new Schema
                    {
                        Type = "object",
                        Properties = propertiesObject,
                    }
                }
            };
            var serialized = JsonConvert.SerializeObject(responseSchema);
            var definitionObject = JsonConvert.DeserializeObject(serialized) as JToken;
            var res = definitionObject;
            return res;
        }

        static Dictionary<string, Schema> BuildPropertyDefinition(IGrouping<string, string> groupedRecSet) => groupedRecSet.ToDictionary(DataListUtil.ExtractFieldNameOnlyFromValue, name => new Schema
        {
            Type = "string"
        });


        public static void ProcessOutputMapping(IExecutionEnvironment environment, int update, ref bool started, ref int rowIdx, DataRow row, IServiceOutputMapping serviceOutputMapping)
        {
            var rsType = DataListUtil.GetRecordsetIndexType(serviceOutputMapping.MappedTo);
            var rowIndex = DataListUtil.ExtractIndexRegionFromRecordset(serviceOutputMapping.MappedTo);

            var rs = serviceOutputMapping.RecordSetName;
            if (!string.IsNullOrEmpty(rs) && environment.HasRecordSet(DataListUtil.AddBracketsToValueIfNotExist(DataListUtil.MakeValueIntoHighLevelRecordset(rs, rsType == enRecordsetIndexType.Star))))
            {
                if (started)
                {
                    rowIdx = environment.GetLength(rs) + 1;
                    started = false;
                }
            }
            else
            {
                try
                {
                    environment.AssignDataShape(serviceOutputMapping.MappedTo);
                }
                catch (Exception e)
                {
                    Dev2Logger.Error(e, GlobalConstants.WarewolfError);
                }
            }

            GetRowIndex(ref started, ref rowIdx, rsType, rowIndex);
            if (!row.Table.Columns.Contains(serviceOutputMapping.MappedFrom))
            {
                return;
            }

            var value = row[serviceOutputMapping.MappedFrom];

            var colDataType = row.Table.Columns[serviceOutputMapping.MappedFrom].DataType;
            if (colDataType.Name == "Byte[]")
            {
                value = Encoding.UTF8.GetString(value as byte[]);
            }

            if (update != 0)
            {
                rowIdx = update;
            }

            var displayExpression = DataListUtil.ReplaceRecordsetBlankWithIndex(DataListUtil.AddBracketsToValueIfNotExist(serviceOutputMapping.MappedTo), rowIdx);
            if (rsType == enRecordsetIndexType.Star)
            {
                displayExpression = DataListUtil.ReplaceStarWithFixedIndex(displayExpression, rowIdx);
            }

            environment.Assign(displayExpression, value.ToString(), update);
        }

        static void GetRowIndex(ref bool started, ref int rowIdx, enRecordsetIndexType rsType, string rowIndex)
        {
            if (rsType == enRecordsetIndexType.Star && started)
            {
                rowIdx = 1;
                started = false;
            }

            if (rsType == enRecordsetIndexType.Numeric)
            {
                rowIdx = int.Parse(rowIndex);
            }
        }
    }

    public class Schema
    {
        [JsonProperty("type")] public string Type { get; set; }

        [JsonProperty("properties", NullValueHandling = NullValueHandling.Ignore)]
        public IDictionary<string, Schema> Properties { get; set; }
    }
}
---- Semantic diagnostics *before* transformation ----
D:\a\1\s\Dev\Dev2.Core\ExecutionEnvironmentUtils.cs(145,162): error CS0246: The type or namespace name 'DataStorage' could not be found (are you missing a using directive or an assembly reference?),D:\a\1\s\Dev\Dev2.Core\ExecutionEnvironmentUtils.cs(169,159): error CS0246: The type or namespace name 'DataStorage' could not be found (are you missing a using directive or an assembly reference?),D:\a\1\s\Dev\Dev2.Core\ExecutionEnvironmentUtils.cs(169,225): error CS0246: The type or namespace name 'DataStorage' could not be found (are you missing a using directive or an assembly reference?),D:\a\1\s\Dev\Dev2.Core\ExecutionEnvironmentUtils.cs(169,62): error CS0246: The type or namespace name 'DataStorage' could not be found (are you missing a using directive or an assembly reference?),D:\a\1\s\Dev\Dev2.Core\ExecutionEnvironmentUtils.cs(184,73): error CS0246: The type or namespace name 'DataStorage' could not be found (are you missing a using directive or an assembly reference?),D:\a\1\s\Dev\Dev2.Core\ExecutionEnvironmentUtils.cs(119,94): error CS0246: The type or namespace name 'CommonFunctions' could not be found (are you missing a using directive or an assembly reference?),D:\a\1\s\Dev\Dev2.Core\ExecutionEnvironmentUtils.cs(119,140): error CS0246: The type or namespace name 'CommonFunctions' could not be found (are you missing a using directive or an assembly reference?),D:\a\1\s\Dev\Dev2.Core\ExecutionEnvironmentUtils.cs(128,30): error CS0246: The type or namespace name 'CommonFunctions' could not be found (are you missing a using directive or an assembly reference?),D:\a\1\s\Dev\Dev2.Core\ExecutionEnvironmentUtils.cs(132,35): error CS0246: The type or namespace name 'CommonFunctions' could not be found (are you missing a using directive or an assembly reference?),D:\a\1\s\Dev\Dev2.Core\ExecutionEnvironmentUtils.cs(186,33): error CS0246: The type or namespace name 'DataStorage' could not be found (are you missing a using directive or an assembly reference?),D:\a\1\s\Dev\Dev2.Core\ExecutionEnvironmentUtils.cs(190,38): error CS0246: The type or namespace name 'DataStorage' could not be found (are you missing a using directive or an assembly reference?),D:\a\1\s\Dev\Dev2.Core\ExecutionEnvironmentUtils.cs(194,38): error CS0246: The type or namespace name 'DataStorage' could not be found (are you missing a using directive or an assembly reference?)
---- Semantic diagnostics *after* transformation ----
D:\a\1\s\Dev\Dev2.Core\ExecutionEnvironmentUtils.cs(145,162): error CS0246: The type or namespace name 'DataStorage' could not be found (are you missing a using directive or an assembly reference?),D:\a\1\s\Dev\Dev2.Core\ExecutionEnvironmentUtils.cs(169,159): error CS0246: The type or namespace name 'DataStorage' could not be found (are you missing a using directive or an assembly reference?),D:\a\1\s\Dev\Dev2.Core\ExecutionEnvironmentUtils.cs(169,225): error CS0246: The type or namespace name 'DataStorage' could not be found (are you missing a using directive or an assembly reference?),D:\a\1\s\Dev\Dev2.Core\ExecutionEnvironmentUtils.cs(169,62): error CS0246: The type or namespace name 'DataStorage' could not be found (are you missing a using directive or an assembly reference?),D:\a\1\s\Dev\Dev2.Core\ExecutionEnvironmentUtils.cs(184,73): error CS0246: The type or namespace name 'DataStorage' could not be found (are you missing a using directive or an assembly reference?),D:\a\1\s\Dev\Dev2.Core\ExecutionEnvironmentUtils.cs(119,94): error CS0246: The type or namespace name 'CommonFunctions' could not be found (are you missing a using directive or an assembly reference?),D:\a\1\s\Dev\Dev2.Core\ExecutionEnvironmentUtils.cs(119,140): error CS0246: The type or namespace name 'CommonFunctions' could not be found (are you missing a using directive or an assembly reference?),D:\a\1\s\Dev\Dev2.Core\ExecutionEnvironmentUtils.cs(128,30): error CS0246: The type or namespace name 'CommonFunctions' could not be found (are you missing a using directive or an assembly reference?),D:\a\1\s\Dev\Dev2.Core\ExecutionEnvironmentUtils.cs(132,35): error CS0246: The type or namespace name 'CommonFunctions' could not be found (are you missing a using directive or an assembly reference?),D:\a\1\s\Dev\Dev2.Core\ExecutionEnvironmentUtils.cs(186,33): error CS0246: The type or namespace name 'DataStorage' could not be found (are you missing a using directive or an assembly reference?),D:\a\1\s\Dev\Dev2.Core\ExecutionEnvironmentUtils.cs(190,38): error CS0246: The type or namespace name 'DataStorage' could not be found (are you missing a using directive or an assembly reference?),D:\a\1\s\Dev\Dev2.Core\ExecutionEnvironmentUtils.cs(194,38): error CS0246: The type or namespace name 'DataStorage' could not be found (are you missing a using directive or an assembly reference?),D:\a\1\s\Dev\Dev2.Core\ExecutionEnvironmentUtils.cs(314,120): error CS0103: The name 'arrayValue' does not exist in the current context
######################################################################


######################################################################
Nr: 17 - UsePatternMatchingRewriterR8
Filepath: D:\a\1\s\Dev\Dev2.Runtime\ESB\Control\EnvironmentOutputMappingManager.cs
Description: Error: The created Syntax Tree is semantically incorrect.
------------------------------------------------------------------------
---- Original Tree ----
using System.Collections.Generic;
using System.Linq;
using Dev2.Common.Interfaces.Data;
using Dev2.Data.Interfaces;
using Dev2.Data.Interfaces.Enums;
using Dev2.Data.TO;
using Dev2.Data.Util;
using Dev2.DataList.Contract;
using Dev2.Interfaces;
using Warewolf.Storage;
using Warewolf.Storage.Interfaces;

namespace Dev2.Runtime.ESB.Control
{
    public class EnvironmentOutputMappingManager : IEnvironmentOutputMappingManager
    {
        readonly IDataListFactory _dataListFactory;
        public EnvironmentOutputMappingManager()
            : this(DataListFactory.Instance)
        {
        }
        public EnvironmentOutputMappingManager(IDataListFactory dataListFactory)
        {
            _dataListFactory = dataListFactory;
        }

        public IExecutionEnvironment UpdatePreviousEnvironmentWithSubExecutionResultUsingOutputMappings(IDSFDataObject dataObject, string outputDefs, int update, bool handleErrors, ErrorResultTO errors)
        {
            var innerEnvironment = dataObject.Environment;
            dataObject.PopEnvironment();
            OutputsToEnvironment(innerEnvironment, dataObject.Environment, outputDefs, update);
            if (innerEnvironment.HasErrors() && !handleErrors)
            {
                CopyErrors(dataObject, errors, innerEnvironment);
            }
            if (innerEnvironment.HasErrors() && handleErrors)
            {
                CopyErrorsAndHandleThem(dataObject, errors, innerEnvironment);
            }
            return innerEnvironment;
        }

        private static void CopyErrors(IDSFDataObject dataObject, ErrorResultTO errors, IExecutionEnvironment innerEnvironment)
        {
            foreach (var error in innerEnvironment.AllErrors)
            {
                if (!dataObject.Environment.AllErrors.Contains(error))
                {
                    dataObject.Environment.AllErrors.Add(error);
                    errors.AddError(error);
                }
            }
            foreach (var error in innerEnvironment.Errors)
            {
                if (!dataObject.Environment.AllErrors.Contains(error))
                {
                    dataObject.Environment.AllErrors.Add(error);
                    errors.AddError(error);
                }
            }
        }

        private static void CopyErrorsAndHandleThem(IDSFDataObject dataObject, ErrorResultTO errors, IExecutionEnvironment innerEnvironment)
        {
            foreach (var error in innerEnvironment.AllErrors)
            {
                if (!dataObject.Environment.AllErrors.Contains(error))
                {

                    errors.AddError(error);
                }
            }
            foreach (var error in innerEnvironment.Errors)
            {
                if (!dataObject.Environment.AllErrors.Contains(error))
                {

                    errors.AddError(error);
                }
            }
        }

        void OutputsToEnvironment(IExecutionEnvironment innerEnvironment, IExecutionEnvironment environment, string outputDefs, int update)
        {
            try
            {
                var outputs = _dataListFactory.CreateOutputParser().Parse(outputDefs);
                var outputRecSets = _dataListFactory.CreateRecordSetCollection(outputs, true);
                var outputScalarList = _dataListFactory.CreateScalarList(outputs, true);
                var outputComplexObjectList = _dataListFactory.CreateObjectList(outputs);
                TryEvalAssignRecordSets(innerEnvironment, environment, update, outputRecSets, outputs);
                TryEvalAssignScalars(innerEnvironment, environment, update, outputScalarList);
                TryEvalAssignComplexObjects(innerEnvironment, environment, outputComplexObjectList);
            }
            finally
            {
                environment.CommitAssign();
            }

        }

        static void TryEvalAssignComplexObjects(IExecutionEnvironment innerEnvironment, IExecutionEnvironment environment, IEnumerable<IDev2Definition> outputComplexObjectList)
        {
            foreach (var dev2Definition in outputComplexObjectList)
            {
                if (dev2Definition.IsObject)
                {
                    EvalAssignComplexObjects(innerEnvironment, environment, dev2Definition);
                }
            }
        }

        static void TryEvalAssignScalars(IExecutionEnvironment innerEnvironment, IExecutionEnvironment environment, int update, IEnumerable<IDev2Definition> outputScalarList)
        {
            foreach (var dev2Definition in outputScalarList)
            {
                if (!dev2Definition.IsRecordSet && !dev2Definition.IsObject)
                {
                    EvalAssignScalars(innerEnvironment, environment, update, dev2Definition);
                }
            }
        }

        static void TryEvalAssignRecordSets(IExecutionEnvironment innerEnvironment, IExecutionEnvironment environment, int update, IRecordSetCollection outputRecSets, IList<IDev2Definition> outputs)
        {
            foreach (var recordSetDefinition in outputRecSets.RecordSets)
            {
                var outPutRecSet = outputs.FirstOrDefault(definition => definition.IsRecordSet && definition.RecordSetName == recordSetDefinition.SetName);
                if (outPutRecSet != null)
                {
                    foreach (var outputColumnDefinitions in recordSetDefinition.Columns)
                    {
                        EvalAssignRecordSets(innerEnvironment, environment, update, outPutRecSet, outputColumnDefinitions);
                    }
                }
            }
        }

        static void EvalAssignComplexObjects(IExecutionEnvironment innerEnvironment, IExecutionEnvironment environment, IDev2Definition dev2Definition)
        {
            var warewolfEvalResult = innerEnvironment.EvalJContainer(DataListUtil.AddBracketsToValueIfNotExist(dev2Definition.Name));
            if (warewolfEvalResult != null)
            {
                environment.AddToJsonObjects(DataListUtil.AddBracketsToValueIfNotExist(dev2Definition.Value), warewolfEvalResult);
            }
        }

        static void EvalAssignScalars(IExecutionEnvironment innerEnvironment, IExecutionEnvironment environment, int update, IDev2Definition dev2Definition)
        {
            var warewolfEvalResult = innerEnvironment.Eval(DataListUtil.AddBracketsToValueIfNotExist(dev2Definition.Name), update);
            if (warewolfEvalResult.IsWarewolfAtomListresult)
            {
                if (warewolfEvalResult is CommonFunctions.WarewolfEvalResult.WarewolfAtomListresult data && data.Item.Any())
                {
                    environment.Assign("[[" + dev2Definition.Value + "]]", ExecutionEnvironment.WarewolfAtomToString(data.Item.Last()), update);
                }
            }
            else
            {
                if (warewolfEvalResult is CommonFunctions.WarewolfEvalResult.WarewolfAtomResult data)
                {
                    environment.Assign(DataListUtil.AddBracketsToValueIfNotExist(dev2Definition.Value), ExecutionEnvironment.WarewolfAtomToString(data.Item), update);
                }
            }
        }

        static void EvalAssignRecordSets(IExecutionEnvironment innerEnvironment, IExecutionEnvironment environment, int update, IDev2Definition outPutRecSet, IDev2Definition outputColumnDefinitions)
        {
            var correctRecSet = "[[" + outputColumnDefinitions.RecordSetName + "(*)." + outputColumnDefinitions.Name + "]]";
            var warewolfEvalResult = innerEnvironment.Eval(correctRecSet, 0);
            if (warewolfEvalResult.IsWarewolfAtomListresult)
            {
                var recsetResult = warewolfEvalResult as CommonFunctions.WarewolfEvalResult.WarewolfAtomListresult;
                if (outPutRecSet.IsRecordSet)
                {
                    var enRecordsetIndexType = DataListUtil.GetRecordsetIndexType(outputColumnDefinitions.RawValue);
                    if (enRecordsetIndexType == enRecordsetIndexType.Star && recsetResult != null)
                    {
                        environment.EvalAssignFromNestedStar(outputColumnDefinitions.RawValue, recsetResult, update);
                    }

                    if (enRecordsetIndexType == enRecordsetIndexType.Blank && recsetResult != null)
                    {
                        environment.EvalAssignFromNestedLast(outputColumnDefinitions.RawValue, recsetResult, 0);
                    }

                    if (enRecordsetIndexType == enRecordsetIndexType.Numeric && recsetResult != null)
                    {
                        environment.EvalAssignFromNestedNumeric(outputColumnDefinitions.RawValue, recsetResult, 0);
                    }
                }
            }
        }
    }
}
---- Transformed Tree ----
using System.Collections.Generic;
using System.Linq;
using Dev2.Common.Interfaces.Data;
using Dev2.Data.Interfaces;
using Dev2.Data.Interfaces.Enums;
using Dev2.Data.TO;
using Dev2.Data.Util;
using Dev2.DataList.Contract;
using Dev2.Interfaces;
using Warewolf.Storage;
using Warewolf.Storage.Interfaces;

namespace Dev2.Runtime.ESB.Control
{
    public class EnvironmentOutputMappingManager : IEnvironmentOutputMappingManager
    {
        readonly IDataListFactory _dataListFactory;
        public EnvironmentOutputMappingManager()
            : this(DataListFactory.Instance)
        {
        }
        public EnvironmentOutputMappingManager(IDataListFactory dataListFactory)
        {
            _dataListFactory = dataListFactory;
        }

        public IExecutionEnvironment UpdatePreviousEnvironmentWithSubExecutionResultUsingOutputMappings(IDSFDataObject dataObject, string outputDefs, int update, bool handleErrors, ErrorResultTO errors)
        {
            var innerEnvironment = dataObject.Environment;
            dataObject.PopEnvironment();
            OutputsToEnvironment(innerEnvironment, dataObject.Environment, outputDefs, update);
            if (innerEnvironment.HasErrors() && !handleErrors)
            {
                CopyErrors(dataObject, errors, innerEnvironment);
            }
            if (innerEnvironment.HasErrors() && handleErrors)
            {
                CopyErrorsAndHandleThem(dataObject, errors, innerEnvironment);
            }
            return innerEnvironment;
        }

        private static void CopyErrors(IDSFDataObject dataObject, ErrorResultTO errors, IExecutionEnvironment innerEnvironment)
        {
            foreach (var error in innerEnvironment.AllErrors)
            {
                if (!dataObject.Environment.AllErrors.Contains(error))
                {
                    dataObject.Environment.AllErrors.Add(error);
                    errors.AddError(error);
                }
            }
            foreach (var error in innerEnvironment.Errors)
            {
                if (!dataObject.Environment.AllErrors.Contains(error))
                {
                    dataObject.Environment.AllErrors.Add(error);
                    errors.AddError(error);
                }
            }
        }

        private static void CopyErrorsAndHandleThem(IDSFDataObject dataObject, ErrorResultTO errors, IExecutionEnvironment innerEnvironment)
        {
            foreach (var error in innerEnvironment.AllErrors)
            {
                if (!dataObject.Environment.AllErrors.Contains(error))
                {

                    errors.AddError(error);
                }
            }
            foreach (var error in innerEnvironment.Errors)
            {
                if (!dataObject.Environment.AllErrors.Contains(error))
                {

                    errors.AddError(error);
                }
            }
        }

        void OutputsToEnvironment(IExecutionEnvironment innerEnvironment, IExecutionEnvironment environment, string outputDefs, int update)
        {
            try
            {
                var outputs = _dataListFactory.CreateOutputParser().Parse(outputDefs);
                var outputRecSets = _dataListFactory.CreateRecordSetCollection(outputs, true);
                var outputScalarList = _dataListFactory.CreateScalarList(outputs, true);
                var outputComplexObjectList = _dataListFactory.CreateObjectList(outputs);
                TryEvalAssignRecordSets(innerEnvironment, environment, update, outputRecSets, outputs);
                TryEvalAssignScalars(innerEnvironment, environment, update, outputScalarList);
                TryEvalAssignComplexObjects(innerEnvironment, environment, outputComplexObjectList);
            }
            finally
            {
                environment.CommitAssign();
            }

        }

        static void TryEvalAssignComplexObjects(IExecutionEnvironment innerEnvironment, IExecutionEnvironment environment, IEnumerable<IDev2Definition> outputComplexObjectList)
        {
            foreach (var dev2Definition in outputComplexObjectList)
            {
                if (dev2Definition.IsObject)
                {
                    EvalAssignComplexObjects(innerEnvironment, environment, dev2Definition);
                }
            }
        }

        static void TryEvalAssignScalars(IExecutionEnvironment innerEnvironment, IExecutionEnvironment environment, int update, IEnumerable<IDev2Definition> outputScalarList)
        {
            foreach (var dev2Definition in outputScalarList)
            {
                if (!dev2Definition.IsRecordSet && !dev2Definition.IsObject)
                {
                    EvalAssignScalars(innerEnvironment, environment, update, dev2Definition);
                }
            }
        }

        static void TryEvalAssignRecordSets(IExecutionEnvironment innerEnvironment, IExecutionEnvironment environment, int update, IRecordSetCollection outputRecSets, IList<IDev2Definition> outputs)
        {
            foreach (var recordSetDefinition in outputRecSets.RecordSets)
            {
                var outPutRecSet = outputs.FirstOrDefault(definition => definition.IsRecordSet && definition.RecordSetName == recordSetDefinition.SetName);
                if (outPutRecSet != null)
                {
                    foreach (var outputColumnDefinitions in recordSetDefinition.Columns)
                    {
                        EvalAssignRecordSets(innerEnvironment, environment, update, outPutRecSet, outputColumnDefinitions);
                    }
                }
            }
        }

        static void EvalAssignComplexObjects(IExecutionEnvironment innerEnvironment, IExecutionEnvironment environment, IDev2Definition dev2Definition)
        {
            var warewolfEvalResult = innerEnvironment.EvalJContainer(DataListUtil.AddBracketsToValueIfNotExist(dev2Definition.Name));
            if (warewolfEvalResult != null)
            {
                environment.AddToJsonObjects(DataListUtil.AddBracketsToValueIfNotExist(dev2Definition.Value), warewolfEvalResult);
            }
        }

        static void EvalAssignScalars(IExecutionEnvironment innerEnvironment, IExecutionEnvironment environment, int update, IDev2Definition dev2Definition)
        {
            var warewolfEvalResult = innerEnvironment.Eval(DataListUtil.AddBracketsToValueIfNotExist(dev2Definition.Name), update);
            if (warewolfEvalResult.IsWarewolfAtomListresult)
            {
                if (warewolfEvalResult is CommonFunctions.WarewolfEvalResult.WarewolfAtomListresult data && data.Item.Any())
                {
                    environment.Assign("[[" + dev2Definition.Value + "]]", ExecutionEnvironment.WarewolfAtomToString(data.Item.Last()), update);
                }
            }
            else
            {
                if (warewolfEvalResult is CommonFunctions.WarewolfEvalResult.WarewolfAtomResult data)
                {
                    environment.Assign(DataListUtil.AddBracketsToValueIfNotExist(dev2Definition.Value), ExecutionEnvironment.WarewolfAtomToString(data.Item), update);
                }
            }
        }

        static void EvalAssignRecordSets(IExecutionEnvironment innerEnvironment, IExecutionEnvironment environment, int update, IDev2Definition outPutRecSet, IDev2Definition outputColumnDefinitions)
        {
            var correctRecSet = "[[" + outputColumnDefinitions.RecordSetName + "(*)." + outputColumnDefinitions.Name + "]]";
            var warewolfEvalResult = innerEnvironment.Eval(correctRecSet, 0);
            if (warewolfEvalResult.IsWarewolfAtomListresult)
            {
                if (outPutRecSet.IsRecordSet)
                {
                    var enRecordsetIndexType = DataListUtil.GetRecordsetIndexType(outputColumnDefinitions.RawValue);

                    if (enRecordsetIndexType == enRecordsetIndexType.Star && warewolfEvalResult is CommonFunctions.WarewolfEvalResult.WarewolfAtomListresult recsetResult)
                    {
                        environment.EvalAssignFromNestedStar(outputColumnDefinitions.RawValue, recsetResult, update);
                    }

                    if (enRecordsetIndexType == enRecordsetIndexType.Blank && warewolfEvalResult is CommonFunctions.WarewolfEvalResult.WarewolfAtomListresult recsetResult)
                    {
                        environment.EvalAssignFromNestedLast(outputColumnDefinitions.RawValue, recsetResult, 0);
                    }

                    if (enRecordsetIndexType == enRecordsetIndexType.Numeric && warewolfEvalResult is CommonFunctions.WarewolfEvalResult.WarewolfAtomListresult recsetResult)
                    {
                        environment.EvalAssignFromNestedNumeric(outputColumnDefinitions.RawValue, recsetResult, 0);
                    }
                }
            }
        }
    }
}
---- Semantic diagnostics *before* transformation ----
D:\a\1\s\Dev\Dev2.Runtime\ESB\Control\EnvironmentOutputMappingManager.cs(161,38): error CS0246: The type or namespace name 'CommonFunctions' could not be found (are you missing a using directive or an assembly reference?),D:\a\1\s\Dev\Dev2.Runtime\ESB\Control\EnvironmentOutputMappingManager.cs(164,43): error CS0246: The type or namespace name 'CommonFunctions' could not be found (are you missing a using directive or an assembly reference?),D:\a\1\s\Dev\Dev2.Runtime\ESB\Control\EnvironmentOutputMappingManager.cs(166,76): error CS0246: The type or namespace name 'DataStorage' could not be found (are you missing a using directive or an assembly reference?),D:\a\1\s\Dev\Dev2.Runtime\ESB\Control\EnvironmentOutputMappingManager.cs(171,43): error CS0246: The type or namespace name 'CommonFunctions' could not be found (are you missing a using directive or an assembly reference?),D:\a\1\s\Dev\Dev2.Runtime\ESB\Control\EnvironmentOutputMappingManager.cs(173,105): error CS0246: The type or namespace name 'DataStorage' could not be found (are you missing a using directive or an assembly reference?),D:\a\1\s\Dev\Dev2.Runtime\ESB\Control\EnvironmentOutputMappingManager.cs(181,38): error CS0246: The type or namespace name 'CommonFunctions' could not be found (are you missing a using directive or an assembly reference?),D:\a\1\s\Dev\Dev2.Runtime\ESB\Control\EnvironmentOutputMappingManager.cs(184,58): error CS0246: The type or namespace name 'CommonFunctions' could not be found (are you missing a using directive or an assembly reference?),D:\a\1\s\Dev\Dev2.Runtime\ESB\Control\EnvironmentOutputMappingManager.cs(190,25): error CS0246: The type or namespace name 'CommonFunctions' could not be found (are you missing a using directive or an assembly reference?),D:\a\1\s\Dev\Dev2.Runtime\ESB\Control\EnvironmentOutputMappingManager.cs(195,25): error CS0246: The type or namespace name 'CommonFunctions' could not be found (are you missing a using directive or an assembly reference?),D:\a\1\s\Dev\Dev2.Runtime\ESB\Control\EnvironmentOutputMappingManager.cs(200,25): error CS0246: The type or namespace name 'CommonFunctions' could not be found (are you missing a using directive or an assembly reference?)
---- Semantic diagnostics *after* transformation ----
D:\a\1\s\Dev\Dev2.Runtime\ESB\Control\EnvironmentOutputMappingManager.cs(161,38): error CS0246: The type or namespace name 'CommonFunctions' could not be found (are you missing a using directive or an assembly reference?),D:\a\1\s\Dev\Dev2.Runtime\ESB\Control\EnvironmentOutputMappingManager.cs(164,43): error CS0246: The type or namespace name 'CommonFunctions' could not be found (are you missing a using directive or an assembly reference?),D:\a\1\s\Dev\Dev2.Runtime\ESB\Control\EnvironmentOutputMappingManager.cs(166,76): error CS0246: The type or namespace name 'DataStorage' could not be found (are you missing a using directive or an assembly reference?),D:\a\1\s\Dev\Dev2.Runtime\ESB\Control\EnvironmentOutputMappingManager.cs(171,43): error CS0246: The type or namespace name 'CommonFunctions' could not be found (are you missing a using directive or an assembly reference?),D:\a\1\s\Dev\Dev2.Runtime\ESB\Control\EnvironmentOutputMappingManager.cs(173,105): error CS0246: The type or namespace name 'DataStorage' could not be found (are you missing a using directive or an assembly reference?),D:\a\1\s\Dev\Dev2.Runtime\ESB\Control\EnvironmentOutputMappingManager.cs(181,38): error CS0246: The type or namespace name 'CommonFunctions' could not be found (are you missing a using directive or an assembly reference?),D:\a\1\s\Dev\Dev2.Runtime\ESB\Control\EnvironmentOutputMappingManager.cs(188,100): error CS0246: The type or namespace name 'CommonFunctions' could not be found (are you missing a using directive or an assembly reference?),D:\a\1\s\Dev\Dev2.Runtime\ESB\Control\EnvironmentOutputMappingManager.cs(190,25): error CS0246: The type or namespace name 'CommonFunctions' could not be found (are you missing a using directive or an assembly reference?),D:\a\1\s\Dev\Dev2.Runtime\ESB\Control\EnvironmentOutputMappingManager.cs(193,101): error CS0246: The type or namespace name 'CommonFunctions' could not be found (are you missing a using directive or an assembly reference?),D:\a\1\s\Dev\Dev2.Runtime\ESB\Control\EnvironmentOutputMappingManager.cs(193,159): error CS0128: A local variable or function named 'recsetResult' is already defined in this scope,D:\a\1\s\Dev\Dev2.Runtime\ESB\Control\EnvironmentOutputMappingManager.cs(195,25): error CS0246: The type or namespace name 'CommonFunctions' could not be found (are you missing a using directive or an assembly reference?),D:\a\1\s\Dev\Dev2.Runtime\ESB\Control\EnvironmentOutputMappingManager.cs(198,103): error CS0246: The type or namespace name 'CommonFunctions' could not be found (are you missing a using directive or an assembly reference?),D:\a\1\s\Dev\Dev2.Runtime\ESB\Control\EnvironmentOutputMappingManager.cs(198,161): error CS0128: A local variable or function named 'recsetResult' is already defined in this scope,D:\a\1\s\Dev\Dev2.Runtime\ESB\Control\EnvironmentOutputMappingManager.cs(200,25): error CS0246: The type or namespace name 'CommonFunctions' could not be found (are you missing a using directive or an assembly reference?)
######################################################################


######################################################################
Nr: 18 - UsePatternMatchingRewriterR8
Filepath: D:\a\1\s\Dev\Dev2.Runtime.Configuration\CustomControls\AutoCompleteBox.cs
Description: Error: The created Syntax Tree is semantically incorrect.
------------------------------------------------------------------------
---- Original Tree ----
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Diagnostics.CodeAnalysis;
using System.Globalization;
using System.Linq;
using System.Windows.Automation.Peers;
using System.Windows.Controls.Primitives;
using System.Windows.Data;
using System.Windows.Input;
using System.Windows.Markup;
using System.Windows.Media;
using System.Windows.Threading;

namespace System.Windows.Controls
{
    [TemplatePart(Name = nameof(SelectionAdapter), Type = typeof(ISelectionAdapter))]
    [TemplatePart(Name = "Selector", Type = typeof(Selector))]
    [TemplatePart(Name = nameof(Text), Type = typeof(TextBox))]
    [TemplatePart(Name = "Popup", Type = typeof(Popup))]
    [StyleTypedProperty(Property = nameof(TextBoxStyle), StyleTargetType = typeof(TextBox))]
    [StyleTypedProperty(Property = nameof(ItemContainerStyle), StyleTargetType = typeof(ListBox))]
    [TemplateVisualState(Name = VisualStates.StateNormal, GroupName = VisualStates.GroupCommon)]
    [TemplateVisualState(Name = VisualStates.StateMouseOver, GroupName = VisualStates.GroupCommon)]
    [TemplateVisualState(Name = VisualStates.StatePressed, GroupName = VisualStates.GroupCommon)]
    [TemplateVisualState(Name = VisualStates.StateDisabled, GroupName = VisualStates.GroupCommon)]
    [TemplateVisualState(Name = VisualStates.StateFocused, GroupName = VisualStates.GroupFocus)]
    [TemplateVisualState(Name = VisualStates.StateUnfocused, GroupName = VisualStates.GroupFocus)]
    [TemplateVisualState(Name = VisualStates.StatePopupClosed, GroupName = VisualStates.GroupPopup)]
    [TemplateVisualState(Name = VisualStates.StatePopupOpened, GroupName = VisualStates.GroupPopup)]
    [TemplateVisualState(Name = VisualStates.StateValid, GroupName = VisualStates.GroupValidation)]
    [TemplateVisualState(Name = VisualStates.StateInvalidFocused, GroupName = VisualStates.GroupValidation)]
    [TemplateVisualState(Name = VisualStates.StateInvalidUnfocused, GroupName = VisualStates.GroupValidation)]
    [SuppressMessage("Microsoft.Maintainability", "CA1506:AvoidExcessiveClassCoupling", Justification = "Large implementation keeps the components contained.")]
    [ContentProperty("ItemsSource")]
    public class AutoCompleteBox : Control, IUpdateVisualState
    {
        List<object> _items;
        ObservableCollection<object> _view;
        int _ignoreTextPropertyChange;
        bool _ignorePropertyChange;
        bool _ignoreTextSelectionChange;
        bool _skipSelectedItemTextUpdate;
        int _textSelectionStart;
        bool _userCalledPopulate;
        bool _popupHasOpened;
        DispatcherTimer _delayTimer;
        bool _allowWrite;
        internal InteractionHelper Interaction { get; set; }
        BindingEvaluator<string> _valueBindingEvaluator;

        public int MinimumPrefixLength
        {
            get => (int)GetValue(MinimumPrefixLengthProperty);
            set => SetValue(MinimumPrefixLengthProperty, value);
        }

        public static readonly DependencyProperty MinimumPrefixLengthProperty =
            DependencyProperty.Register(nameof(MinimumPrefixLength), typeof(int), typeof(AutoCompleteBox), new PropertyMetadata(1, OnMinimumPrefixLengthPropertyChanged));

        [SuppressMessage("Microsoft.Usage", "CA2208:InstantiateArgumentExceptionsCorrectly", Justification = "MinimumPrefixLength is the name of the actual dependency property.")]
        static void OnMinimumPrefixLengthPropertyChanged(DependencyObject d, DependencyPropertyChangedEventArgs e)
        {
            var newValue = (int)e.NewValue;

            if (newValue < 0 && newValue != -1)
            {
                throw new ArgumentOutOfRangeException(nameof(MinimumPrefixLength));
            }
        }

        [ExcludeFromCodeCoverage]
        public int MinimumPopulateDelay
        {
            get => (int)GetValue(MinimumPopulateDelayProperty);
            set => SetValue(MinimumPopulateDelayProperty, value);
        }

        public static readonly DependencyProperty MinimumPopulateDelayProperty =
            DependencyProperty.Register(nameof(MinimumPopulateDelay), typeof(int), typeof(AutoCompleteBox), new PropertyMetadata(OnMinimumPopulateDelayPropertyChanged));

        [SuppressMessage("Microsoft.Usage", "CA2208:InstantiateArgumentExceptionsCorrectly", Justification = "The exception is most likely to be called through the CLR property setter.")]
        [ExcludeFromCodeCoverage]
        static void OnMinimumPopulateDelayPropertyChanged(DependencyObject d, DependencyPropertyChangedEventArgs e)
        {
            var source = d as AutoCompleteBox;

            if (source != null && source._ignorePropertyChange)
            {
                source._ignorePropertyChange = false;
                return;
            }

            var newValue = (int)e.NewValue;
            if (newValue < 0)
            {
                if (source != null)
                {
                    source._ignorePropertyChange = true;
                }
                d.SetValue(e.Property, e.OldValue);

                throw new ArgumentException(string.Format(CultureInfo.InvariantCulture,
                    Dev2.Runtime.Configuration.Properties.Resources.AutoComplete_OnMinimumPopulateDelayPropertyChanged_InvalidValue, newValue));
            }

            SetupNewDelayTimer(source, newValue);
        }

        private static void SetupNewDelayTimer(AutoCompleteBox source, int newValue)
        {
            if (source?._delayTimer != null)
            {
                source._delayTimer.Stop();

                if (newValue == 0)
                {
                    source._delayTimer = null;
                }
            }

            if (source != null && newValue > 0 && source._delayTimer == null)
            {
                source._delayTimer = new DispatcherTimer();
                source._delayTimer.Tick += source.PopulateDropDown;
            }

            if (source != null && newValue > 0 && source._delayTimer != null)
            {
                source._delayTimer.Interval = TimeSpan.FromMilliseconds(newValue);
            }
        }

        public static readonly DependencyProperty DefaultTextTemplateProperty =
            DependencyProperty.Register(nameof(DefaultTextTemplate), typeof(DataTemplate), typeof(AutoCompleteBox), new UIPropertyMetadata(null));

        [ExcludeFromCodeCoverage]
        public DataTemplate DefaultTextTemplate
        {
            get => (DataTemplate)GetValue(DefaultTextTemplateProperty);
            set => SetValue(DefaultTextTemplateProperty, value);
        }

        public static readonly DependencyProperty DefaultTextProperty =
            DependencyProperty.Register(nameof(DefaultText), typeof(object), typeof(AutoCompleteBox), new UIPropertyMetadata(null));

        public object DefaultText
        {
            get => GetValue(DefaultTextProperty);
            set => SetValue(DefaultTextProperty, value);
        }

        public static readonly DependencyProperty AllowUserInsertLineProperty =
            DependencyProperty.Register(nameof(AllowUserInsertLine), typeof(bool), typeof(AutoCompleteBox), new PropertyMetadata(true));

        public bool AllowUserInsertLine
        {
            get => (bool)GetValue(AllowUserInsertLineProperty);
            set => SetValue(AllowUserInsertLineProperty, value);
        }

        public bool IsTextCompletionEnabled
        {
            get => (bool)GetValue(IsTextCompletionEnabledProperty);
            set => SetValue(IsTextCompletionEnabledProperty, value);
        }

        public static readonly DependencyProperty IsTextCompletionEnabledProperty =
            DependencyProperty.Register(nameof(IsTextCompletionEnabled), typeof(bool), typeof(AutoCompleteBox), new PropertyMetadata(false, null));

        [ExcludeFromCodeCoverage]
        public DataTemplate ItemTemplate
        {
            get => GetValue(ItemTemplateProperty) as DataTemplate;
            set => SetValue(ItemTemplateProperty, value);
        }

        public static readonly DependencyProperty ItemTemplateProperty =
            DependencyProperty.Register(nameof(ItemTemplate), typeof(DataTemplate), typeof(AutoCompleteBox), new PropertyMetadata(null));

        [ExcludeFromCodeCoverage]
        public Style ItemContainerStyle
        {
            get => GetValue(ItemContainerStyleProperty) as Style;
            set => SetValue(ItemContainerStyleProperty, value);
        }

        public static readonly DependencyProperty ItemContainerStyleProperty =
            DependencyProperty.Register(nameof(ItemContainerStyle), typeof(Style), typeof(AutoCompleteBox), new PropertyMetadata(null, null));

        [ExcludeFromCodeCoverage]
        public Style TextBoxStyle
        {
            get => GetValue(TextBoxStyleProperty) as Style;
            set => SetValue(TextBoxStyleProperty, value);
        }

        public static readonly DependencyProperty TextBoxStyleProperty =
            DependencyProperty.Register(nameof(TextBoxStyle), typeof(Style), typeof(AutoCompleteBox), new PropertyMetadata(null));

        [ExcludeFromCodeCoverage]
        public double MaxDropDownHeight
        {
            get => (double)GetValue(MaxDropDownHeightProperty);
            set => SetValue(MaxDropDownHeightProperty, value);
        }

        public static readonly DependencyProperty MaxDropDownHeightProperty =
            DependencyProperty.Register(nameof(MaxDropDownHeight), typeof(double), typeof(AutoCompleteBox), new PropertyMetadata(double.PositiveInfinity, OnMaxDropDownHeightPropertyChanged));

        [SuppressMessage("Microsoft.Usage", "CA2208:InstantiateArgumentExceptionsCorrectly", Justification = "The exception will be called through a CLR setter in most cases.")]
        static void OnMaxDropDownHeightPropertyChanged(DependencyObject d, DependencyPropertyChangedEventArgs e)
        {
            var source = d as AutoCompleteBox;
            if (source != null && source._ignorePropertyChange)
            {
                source._ignorePropertyChange = false;
                return;
            }

            var newValue = (double)e.NewValue;

            if (newValue < 0)
            {
                if (source != null)
                {
                    source._ignorePropertyChange = true;
                    source.SetValue(e.Property, e.OldValue);
                }

                throw new ArgumentException(string.Format(CultureInfo.InvariantCulture, Dev2.Runtime.Configuration.Properties.Resources.AutoComplete_OnMaxDropDownHeightPropertyChanged_InvalidValue, e.NewValue));
            }

            source?.OnMaxDropDownHeightChanged(newValue);
        }

        public static readonly DependencyProperty IsDropDownOpenProperty =
            DependencyProperty.Register(nameof(IsDropDownOpen), typeof(bool), typeof(AutoCompleteBox), new PropertyMetadata(false, OnIsDropDownOpenPropertyChanged));

        public bool IsDropDownOpen
        {
            get => (bool)GetValue(IsDropDownOpenProperty);
            set => SetValue(IsDropDownOpenProperty, value);
        }

        static void OnIsDropDownOpenPropertyChanged(DependencyObject d, DependencyPropertyChangedEventArgs e)
        {
            var source = d as AutoCompleteBox;

            if (source != null && source._ignorePropertyChange)
            {
                source._ignorePropertyChange = false;
                return;
            }

            var oldValue = (bool)e.OldValue;
            var newValue = (bool)e.NewValue;
            if (source != null)
            {
                if (newValue)
                {
                    source.TextUpdated(source.Text, true);
                }
                else
                {
                    source.ClosingDropDown(oldValue);
                }

                source.UpdateVisualState(true);
            }
        }

        public IEnumerable ItemsSource
        {
            get => GetValue(ItemsSourceProperty) as IEnumerable;
            set => SetValue(ItemsSourceProperty, value);
        }

        public static readonly DependencyProperty ItemsSourceProperty =
            DependencyProperty.Register(nameof(ItemsSource), typeof(IEnumerable), typeof(AutoCompleteBox), new PropertyMetadata(OnItemsSourcePropertyChanged));

        static void OnItemsSourcePropertyChanged(DependencyObject d, DependencyPropertyChangedEventArgs e)
        {
            var autoComplete = d as AutoCompleteBox;
            autoComplete?.OnItemsSourceChanged((IEnumerable)e.OldValue, (IEnumerable)e.NewValue);
        }

        public object SelectedItem
        {
            get => GetValue(SelectedItemProperty);
            set => SetValue(SelectedItemProperty, value);
        }

        public static readonly DependencyProperty SelectedItemProperty =
            DependencyProperty.Register(nameof(SelectedItem), typeof(object), typeof(AutoCompleteBox), new PropertyMetadata(OnSelectedItemPropertyChanged));

        static void OnSelectedItemPropertyChanged(DependencyObject d, DependencyPropertyChangedEventArgs e)
        {
            var source = d as AutoCompleteBox;
            if (source != null)
            {
                if (source._ignorePropertyChange)
                {
                    source._ignorePropertyChange = false;
                    return;
                }

                if (source._skipSelectedItemTextUpdate)
                {
                    source._skipSelectedItemTextUpdate = false;
                }
                else
                {
                    source.OnSelectedItemChanged(e.NewValue);
                }
            }

            var removed = new List<object>();
            if (e.OldValue != null)
            {
                removed.Add(e.OldValue);
            }

            var added = new List<object>();
            if (e.NewValue != null)
            {
                added.Add(e.NewValue);
            }

            source?.OnSelectionChanged(new SelectionChangedEventArgs(SelectionChangedEvent, removed, added));
        }

        void OnSelectedItemChanged(object newItem)
        {
            if (CustomSelection)
            {
                return;
            }
            var text = newItem == null ? SearchText : FormatValue(newItem, true);

            UpdateTextValue(text);

            if (TextBox != null && Text != null)
            {
                TextBox.SelectionStart = Text.Length;
            }
        }

        public bool CustomSelection { get; set; }

        public string Text
        {
            get => GetValue(TextProperty) as string;
            set => SetValue(TextProperty, value);
        }

        public static readonly DependencyProperty TextProperty =
            DependencyProperty.Register(nameof(Text), typeof(string), typeof(AutoCompleteBox), new PropertyMetadata(string.Empty, OnTextPropertyChanged));

        static void OnTextPropertyChanged(DependencyObject d, DependencyPropertyChangedEventArgs e)
        {
            var source = d as AutoCompleteBox;
            source?.TextUpdated((string)e.NewValue, false);
        }

        public string SearchText
        {
            get => (string)GetValue(SearchTextProperty);
            private set
            {
                try
                {
                    _allowWrite = true;
                    SetValue(SearchTextProperty, value);
                }
                finally
                {
                    _allowWrite = false;
                }
            }
        }

        public static readonly DependencyProperty SearchTextProperty =
            DependencyProperty.Register(nameof(SearchText), typeof(string), typeof(AutoCompleteBox), new PropertyMetadata(string.Empty, OnSearchTextPropertyChanged));

        static void OnSearchTextPropertyChanged(DependencyObject d, DependencyPropertyChangedEventArgs e)
        {
            var source = d as AutoCompleteBox;
            if (source != null && source._ignorePropertyChange)
            {
                source._ignorePropertyChange = false;
                return;
            }

            if (source != null && !source._allowWrite)
            {
                source._ignorePropertyChange = true;
                source.SetValue(e.Property, e.OldValue);

                throw new InvalidOperationException(Dev2.Runtime.Configuration.Properties.Resources.AutoComplete_OnSearchTextPropertyChanged_InvalidWrite);
            }
        }

        public AutoCompleteFilterMode FilterMode
        {
            get => (AutoCompleteFilterMode)GetValue(FilterModeProperty);
            set => SetValue(FilterModeProperty, value);
        }

        public static readonly DependencyProperty FilterModeProperty =
            DependencyProperty.Register(nameof(FilterMode), typeof(AutoCompleteFilterMode), typeof(AutoCompleteBox), new PropertyMetadata(AutoCompleteFilterMode.StartsWith, OnFilterModePropertyChanged));

        [SuppressMessage("Microsoft.Usage", "CA2208:InstantiateArgumentExceptionsCorrectly", Justification = "The exception will be thrown when the CLR setter is used in most situations.")]
        [ExcludeFromCodeCoverage]
        static void OnFilterModePropertyChanged(DependencyObject d, DependencyPropertyChangedEventArgs e)
        {
            var source = d as AutoCompleteBox;
            var mode = (AutoCompleteFilterMode)e.NewValue;

            var modeNotContainingFilterMode = mode != AutoCompleteFilterMode.Contains;
            modeNotContainingFilterMode &= mode != AutoCompleteFilterMode.EqualsCaseSensitive;
            modeNotContainingFilterMode &= mode != AutoCompleteFilterMode.StartsWith;
            modeNotContainingFilterMode &= mode != AutoCompleteFilterMode.Custom;
            modeNotContainingFilterMode &= mode != AutoCompleteFilterMode.None;

            if (modeNotContainingFilterMode)
            {
                source?.SetValue(e.Property, e.OldValue);
                throw new ArgumentException(Dev2.Runtime.Configuration.Properties.Resources.AutoComplete_OnFilterModePropertyChanged_InvalidValue);
            }

            var newValue = (AutoCompleteFilterMode)e.NewValue;
            if (source != null)
            {
                source.TextFilter = AutoCompleteSearch.GetFilter(newValue);
            }
        }

        public AutoCompleteFilterPredicate<object> ItemFilter
        {
            get => GetValue(ItemFilterProperty) as AutoCompleteFilterPredicate<object>;
            set => SetValue(ItemFilterProperty, value);
        }

        public static readonly DependencyProperty ItemFilterProperty =
            DependencyProperty.Register(nameof(ItemFilter), typeof(AutoCompleteFilterPredicate<object>), typeof(AutoCompleteBox), new PropertyMetadata(OnItemFilterPropertyChanged));

        static void OnItemFilterPropertyChanged(DependencyObject d, DependencyPropertyChangedEventArgs e)
        {
            var autoCompleteBox = d as AutoCompleteBox;
            if (e.NewValue is AutoCompleteFilterPredicate<object>)
            {
                if (autoCompleteBox != null)
                {
                    autoCompleteBox.FilterMode = AutoCompleteFilterMode.Custom;
                    autoCompleteBox.TextFilter = null;
                }
                return;
            }
            if (autoCompleteBox != null)
            {
                autoCompleteBox.FilterMode = AutoCompleteFilterMode.None;
            }
        }

        public AutoCompleteFilterPredicate<string> TextFilter
        {
            get => GetValue(TextFilterProperty) as AutoCompleteFilterPredicate<string>;
            set => SetValue(TextFilterProperty, value);
        }

        public static readonly DependencyProperty TextFilterProperty =
            DependencyProperty.Register(nameof(TextFilter), typeof(AutoCompleteFilterPredicate<string>), typeof(AutoCompleteBox), new PropertyMetadata(AutoCompleteSearch.GetFilter(AutoCompleteFilterMode.StartsWith)));

        PopupHelper DropDownPopup { get; set; }
        TextBox _text;
        ISelectionAdapter _adapter;

        public TextBox TextBox
        {
            get => _text;
            set
            {
                if (_text != null)
                {
                    _text.SelectionChanged -= OnTextBoxSelectionChanged;
                    _text.TextChanged -= OnTextBoxTextChanged;
                }
                _text = value;
                if (_text != null)
                {
                    _text.SelectionChanged += OnTextBoxSelectionChanged;
                    _text.TextChanged += OnTextBoxTextChanged;

                    if (Text != null)
                    {
                        UpdateTextValue(Text);
                    }
                }
            }
        }

        protected internal ISelectionAdapter SelectionAdapter
        {
            get => _adapter;
            set
            {
                if (_adapter != null)
                {
                    _adapter.SelectionChanged -= OnAdapterSelectionChanged;
                    _adapter.Commit -= OnAdapterSelectionComplete;
                    _adapter.Cancel -= OnAdapterSelectionCanceled;
                    _adapter.Cancel -= OnAdapterSelectionComplete;
                    _adapter.ItemsSource = null;
                }

                _adapter = value;

                if (_adapter != null)
                {
                    _adapter.SelectionChanged += OnAdapterSelectionChanged;
                    _adapter.Commit += OnAdapterSelectionComplete;
                    _adapter.Cancel += OnAdapterSelectionCanceled;
                    _adapter.Cancel += OnAdapterSelectionComplete;
                    _adapter.ItemsSource = _view;
                }
            }
        }

        public static readonly DependencyProperty HasErrorProperty =
            DependencyProperty.Register(nameof(HasError), typeof(bool), typeof(AutoCompleteBox), new PropertyMetadata(false));

        public bool HasError
        {
            get => (bool)GetValue(HasErrorProperty);
            set => SetValue(HasErrorProperty, value);
        }

        public static readonly RoutedEvent TextChangedEvent = EventManager.RegisterRoutedEvent(nameof(TextChanged), RoutingStrategy.Bubble, typeof(RoutedEventHandler), typeof(AutoCompleteBox));

        public event RoutedEventHandler TextChanged
        {
            add { AddHandler(TextChangedEvent, value); }
            remove { RemoveHandler(TextChangedEvent, value); }
        }

        public static readonly RoutedEvent PopulatingEvent = EventManager.RegisterRoutedEvent(nameof(Populating), RoutingStrategy.Bubble, typeof(PopulatingEventHandler), typeof(AutoCompleteBox));

        public event PopulatingEventHandler Populating
        {
            add { AddHandler(PopulatingEvent, value); }
            remove { RemoveHandler(PopulatingEvent, value); }
        }

        public static readonly RoutedEvent PopulatedEvent = EventManager.RegisterRoutedEvent(nameof(Populated), RoutingStrategy.Bubble, typeof(PopulatedEventHandler), typeof(AutoCompleteBox));

        public event PopulatedEventHandler Populated
        {
            add { AddHandler(PopulatedEvent, value); }
            remove { RemoveHandler(PopulatedEvent, value); }
        }

        public static readonly RoutedEvent DropDownOpeningEvent = EventManager.RegisterRoutedEvent(nameof(DropDownOpening), RoutingStrategy.Bubble, typeof(RoutedPropertyChangingEventHandler<bool>), typeof(AutoCompleteBox));

        public event RoutedPropertyChangingEventHandler<bool> DropDownOpening
        {
            add { AddHandler(PopulatedEvent, value); }
            remove { RemoveHandler(PopulatedEvent, value); }
        }

        public static readonly RoutedEvent DropDownOpenedEvent = EventManager.RegisterRoutedEvent(nameof(DropDownOpened), RoutingStrategy.Bubble, typeof(RoutedPropertyChangedEventHandler<bool>), typeof(AutoCompleteBox));

        public event RoutedPropertyChangedEventHandler<bool> DropDownOpened
        {
            add { AddHandler(DropDownOpenedEvent, value); }
            remove { RemoveHandler(DropDownOpenedEvent, value); }
        }

        public static readonly RoutedEvent DropDownClosingEvent = EventManager.RegisterRoutedEvent(nameof(DropDownClosing), RoutingStrategy.Bubble, typeof(RoutedPropertyChangingEventHandler<bool>), typeof(AutoCompleteBox));

        public event RoutedPropertyChangingEventHandler<bool> DropDownClosing
        {
            add { AddHandler(DropDownClosingEvent, value); }
            remove { RemoveHandler(DropDownClosingEvent, value); }
        }

        public static readonly RoutedEvent DropDownClosedEvent = EventManager.RegisterRoutedEvent(nameof(DropDownClosed), RoutingStrategy.Bubble, typeof(RoutedPropertyChangedEventHandler<bool>), typeof(AutoCompleteBox));

        public event RoutedPropertyChangedEventHandler<bool> DropDownClosed
        {
            add { AddHandler(DropDownClosedEvent, value); }
            remove { RemoveHandler(DropDownClosedEvent, value); }
        }

        public static readonly RoutedEvent SelectionChangedEvent = EventManager.RegisterRoutedEvent(nameof(SelectionChanged), RoutingStrategy.Bubble, typeof(SelectionChangedEventHandler), typeof(AutoCompleteBox));

        public event SelectionChangedEventHandler SelectionChanged
        {
            add { AddHandler(SelectionChangedEvent, value); }
            remove { RemoveHandler(SelectionChangedEvent, value); }
        }

        public Binding ValueMemberBinding
        {
            get => _valueBindingEvaluator?.ValueBinding;
            set => _valueBindingEvaluator = new BindingEvaluator<string>(value);
        }

        public string ValueMemberPath
        {
            get => ValueMemberBinding?.Path.Path;
            set => ValueMemberBinding = value == null ? null : new Binding(value);
        }

        public ObservableCollection<object> View => _view;

        static AutoCompleteBox()
        {
            DefaultStyleKeyProperty.OverrideMetadata(typeof(AutoCompleteBox), new FrameworkPropertyMetadata(typeof(AutoCompleteBox)));
        }

        public AutoCompleteBox()
        {
            IsEnabledChanged += ControlIsEnabledChanged;
            Interaction = new InteractionHelper(this);

            ClearView();
            if (Application.Current != null)
            {
                Style = Application.Current.TryFindResource("AutoCompleteBoxStyle") as Style;
            }
        }

        protected override Size ArrangeOverride(Size arrangeBounds)
        {
            var r = base.ArrangeOverride(arrangeBounds);
            DropDownPopup?.Arrange();
            return r;
        }

        public override void OnApplyTemplate()
        {
            if (TextBox != null)
            {
                TextBox.PreviewKeyDown -= OnTextBoxPreviewKeyDown;
            }

            if (DropDownPopup != null)
            {
                DropDownPopup.Closed -= DropDownPopupClosed;
                DropDownPopup.FocusChanged -= OnDropDownFocusChanged;
                DropDownPopup.UpdateVisualStates -= OnDropDownPopupUpdateVisualStates;
                DropDownPopup.BeforeOnApplyTemplate();
                DropDownPopup = null;
            }

            base.OnApplyTemplate();

            if (GetTemplateChild("Popup") is Popup popup)
            {
                DropDownPopup = new PopupHelper(this, popup) { MaxDropDownHeight = MaxDropDownHeight };
                DropDownPopup.AfterOnApplyTemplate();
                DropDownPopup.Closed += DropDownPopupClosed;
                DropDownPopup.FocusChanged += OnDropDownFocusChanged;
                DropDownPopup.UpdateVisualStates += OnDropDownPopupUpdateVisualStates;
            }
            SelectionAdapter = GetSelectionAdapterPart();
            TextBox = GetTemplateChild("Text") as TextBox;

            if (TextBox != null)
            {
                TextBox.PreviewKeyDown += OnTextBoxPreviewKeyDown;
            }

            Interaction.OnApplyTemplateBase();

            if (IsDropDownOpen && DropDownPopup != null && !DropDownPopup.IsOpen)
            {
                OpeningDropDown(false);
            }
        }

        void OnDropDownPopupUpdateVisualStates(object sender, EventArgs e)
        {
            UpdateVisualState(true);
        }

        void OnDropDownFocusChanged(object sender, EventArgs e)
        {
            FocusChanged(HasFocus());
        }

        void ClosingDropDown(bool oldValue)
        {
            var delayedClosingVisual = false;
            if (DropDownPopup != null)
            {
                delayedClosingVisual = DropDownPopup.UsesClosingVisualState;
            }

            var args = new RoutedPropertyChangingEventArgs<bool>(IsDropDownOpenProperty, oldValue, false, true, DropDownClosingEvent);
            OnDropDownClosing(args);

            if (_view == null || _view.Count == 0)
            {
                delayedClosingVisual = false;
            }

            if (args.Cancel)
            {
                _ignorePropertyChange = true;
                SetValue(IsDropDownOpenProperty, oldValue);
            }
            else
            {
                RaiseExpandCollapseAutomationEvent(oldValue, false);
                if (!delayedClosingVisual)
                {
                    CloseDropDown(oldValue, false);
                }
            }

            UpdateVisualState(true);
        }

        void OpeningDropDown(bool oldValue)
        {
            var args = new RoutedPropertyChangingEventArgs<bool>(IsDropDownOpenProperty, oldValue, true, true, DropDownOpeningEvent);
            OnDropDownOpening(args);

            if (args.Cancel)
            {
                _ignorePropertyChange = true;
                SetValue(IsDropDownOpenProperty, oldValue);
            }
            else
            {
                RaiseExpandCollapseAutomationEvent(oldValue, true);
                OpenDropDown(oldValue, true);
            }

            UpdateVisualState(true);
        }

        void RaiseExpandCollapseAutomationEvent(bool oldValue, bool newValue)
        {
            var peer = UIElementAutomationPeer.FromElement(this) as AutoCompleteBoxAutomationPeer;
            peer?.RaiseExpandCollapseAutomationEvent(oldValue, newValue);
        }

        void OnTextBoxPreviewKeyDown(object sender, KeyEventArgs e)
        {
            OnKeyDown(e);
        }

        void DropDownPopupClosed(object sender, EventArgs e)
        {
            if (IsDropDownOpen)
            {
                IsDropDownOpen = false;
            }

            if (_popupHasOpened)
            {
                OnDropDownClosed(new RoutedPropertyChangedEventArgs<bool>(true, false, DropDownClosedEvent));
            }
        }

        protected override AutomationPeer OnCreateAutomationPeer() => new AutoCompleteBoxAutomationPeer(this);

        void FocusChanged(bool hasFocus)
        {
            if (!hasFocus)
            {
                IsDropDownOpen = false;
                _userCalledPopulate = false;
                TextBox?.Select(TextBox.Text.Length, 0);
            }
        }

        protected bool HasFocus()
        {
            var focused = IsKeyboardFocusWithin ? Keyboard.FocusedElement as DependencyObject : FocusManager.GetFocusedElement(this) as DependencyObject;
            while (focused != null)
            {
                if (ReferenceEquals(focused, this))
                {
                    return true;
                }

                var parent = VisualTreeHelper.GetParent(focused);
                if (parent == null && focused is FrameworkElement element)
                {
                    parent = element.Parent;
                }

                focused = parent;
            }
            return false;
        }

        protected override void OnGotFocus(RoutedEventArgs e)
        {
            base.OnGotFocus(e);
            FocusChanged(HasFocus());
        }

        protected override void OnIsKeyboardFocusWithinChanged(DependencyPropertyChangedEventArgs e)
        {
            base.OnIsKeyboardFocusWithinChanged(e);
            if (!IsKeyboardFocusWithin)
            {
                IsDropDownOpen = false;
            }
        }

        protected override void OnLostFocus(RoutedEventArgs e)
        {
            base.OnLostFocus(e);
            FocusChanged(HasFocus());
        }

        void ControlIsEnabledChanged(object sender, DependencyPropertyChangedEventArgs e)
        {
            var isEnabled = (bool)e.NewValue;
            if (!isEnabled)
            {
                IsDropDownOpen = false;
            }
        }

        [SuppressMessage("Microsoft.Design", "CA1024:UsePropertiesWhereAppropriate", Justification = "Following the GetTemplateChild pattern for the method.")]
        [ExcludeFromCodeCoverage]
        protected virtual ISelectionAdapter GetSelectionAdapterPart()
        {
            ISelectionAdapter adapter = null;
            if (GetTemplateChild("Selector") is Selector selector)
            {
                adapter = selector as ISelectionAdapter ?? new SelectorSelectionAdapter(selector);
            }

            return adapter ?? GetTemplateChild("SelectionAdapter") as ISelectionAdapter;
        }

        [ExcludeFromCodeCoverage]
        void PopulateDropDown(object sender, EventArgs e)
        {
            _delayTimer?.Stop();
            SearchText = Text;

            var populating = new PopulatingEventArgs(SearchText, PopulatingEvent);

            OnPopulating(populating);
            if (!populating.Cancel)
            {
                PopulateComplete();
            }
        }

        protected virtual void OnPopulating(PopulatingEventArgs e)
        {
            RaiseEvent(e);
        }

        [ExcludeFromCodeCoverage]
        protected virtual void OnPopulated(PopulatedEventArgs e)
        {
            RaiseEvent(e);
        }

        [ExcludeFromCodeCoverage]
        protected virtual void OnSelectionChanged(SelectionChangedEventArgs e)
        {
            RaiseEvent(e);

            var box = (AutoCompleteBox)e.Source;
            var innerListBox = (ListBox)box?.Template?.FindName("Selector", box);
            innerListBox?.ScrollIntoView(innerListBox.SelectedItem);

            RaiseEvent(e);
        }

        [ExcludeFromCodeCoverage]
        protected virtual void OnDropDownOpening(RoutedPropertyChangingEventArgs<bool> e)
        {
            RaiseEvent(e);
        }

        [ExcludeFromCodeCoverage]
        protected virtual void OnDropDownOpened(RoutedPropertyChangedEventArgs<bool> e)
        {
            RaiseEvent(e);
        }

        [ExcludeFromCodeCoverage]
        protected virtual void OnDropDownClosing(RoutedPropertyChangingEventArgs<bool> e)
        {
            RaiseEvent(e);
        }

        protected virtual void OnDropDownClosed(RoutedPropertyChangedEventArgs<bool> e)
        {
            RaiseEvent(e);
        }

        string FormatValue(object value, bool clearDataContext)
        {
            var str = FormatValue(value);
            if (clearDataContext)
            {
                _valueBindingEvaluator?.ClearDataContext();
            }
            return str;
        }

        protected virtual string FormatValue(object value)
        {
            if (_valueBindingEvaluator != null)
            {
                return _valueBindingEvaluator.GetDynamicValue(value) ?? string.Empty;
            }

            return value?.ToString() ?? string.Empty;
        }

        protected virtual void OnTextChanged(RoutedEventArgs e)
        {
            RaiseEvent(e);
        }

        void OnTextBoxTextChanged(object sender, TextChangedEventArgs e)
        {
            TextUpdated(_text.Text, true);
        }

        void OnTextBoxSelectionChanged(object sender, RoutedEventArgs e)
        {
            if (_ignoreTextSelectionChange)
            {
                return;
            }

            _textSelectionStart = _text.SelectionStart;
        }

        void UpdateTextValue(string value)
        {
            UpdateTextValue(value, null);
        }

        void UpdateTextValue(string value, bool? userInitiated)
        {
            var textUpdated = false;

            if ((userInitiated is null || userInitiated == true) && Text != value)
            {
                _ignoreTextPropertyChange++;
                Text = value;
                textUpdated = true;
            }

            if (TextBox is null)
            {
                Text = value;
                textUpdated = true;
            }

            var textBoxUpdated = UpdateTextBoxValue(value, userInitiated);

            if (textUpdated || textBoxUpdated)
            {
                OnTextChanged(new RoutedEventArgs(TextChangedEvent));
            }
        }

        private bool UpdateTextBoxValue(string value, bool? userInitiated)
        {
            if ((userInitiated is null || userInitiated == false) && TextBox != null && TextBox.Text != value)
            {
                _ignoreTextPropertyChange++;
                TextBox.Text = value ?? string.Empty;

                if (Text == value || Text is null)
                {
                    return true;
                }
            }
            return false;
        }

        void TextUpdated(string newText, bool userInitiated)
        {
            if (_ignoreTextPropertyChange > 0)
            {
                _ignoreTextPropertyChange--;
                return;
            }

            var text = newText;

            if (text == null)
            {
                text = string.Empty;
            }

            if (IsTextCompletionEnabled && TextBox != null && TextBox.SelectionLength > 0 && TextBox.SelectionStart != TextBox.Text.Length)
            {
                return;
            }

            var populateReady = text.Length >= MinimumPrefixLength && MinimumPrefixLength >= 0;
            _userCalledPopulate = populateReady && userInitiated;

            UpdateTextValue(text, userInitiated);

            if (populateReady)
            {
                PopulateReady();
                return;
            }
            PopulateNotReady();
        }

        private void PopulateReady()
        {
            _ignoreTextSelectionChange = true;

            if (_delayTimer != null)
            {
                _delayTimer.Start();
            }
            else
            {
                PopulateDropDown(this, EventArgs.Empty);
            }
        }

        private void PopulateNotReady()
        {
            SearchText = string.Empty;
            if (SelectedItem != null)
            {
                _skipSelectedItemTextUpdate = true;
            }
            SelectedItem = null;
            if (IsDropDownOpen)
            {
                IsDropDownOpen = false;
            }
        }

        public void PopulateComplete()
        {
            RefreshView();

            var populated = new PopulatedEventArgs(new ReadOnlyCollection<object>(_view), PopulatedEvent);
            OnPopulated(populated);

            if (SelectionAdapter != null && !SelectionAdapter.ItemsSource.Equals(_view))
            {
                SelectionAdapter.ItemsSource = _view;
            }

            var isDropDownOpen = _userCalledPopulate && _view.Count > 0;
            if (isDropDownOpen != IsDropDownOpen)
            {
                _ignorePropertyChange = true;
                IsDropDownOpen = isDropDownOpen;
            }
            if (IsDropDownOpen)
            {
                OpeningDropDown(false);
                DropDownPopup?.Arrange();
            }
            else
            {
                ClosingDropDown(true);
            }

            UpdateTextCompletion(_userCalledPopulate);
        }

        void UpdateTextCompletion(bool userInitiated)
        {
            object newSelectedItem = null;
            var text = Text;
            if (_view.Count > 0)
            {
                if (IsTextCompletionEnabled && TextBox != null && userInitiated)
                {
                    var currentLength = TextBox.Text.Length;
                    var selectionStart = TextBox.SelectionStart;
                    newSelectedItem = UpdateSelection(newSelectedItem, text, currentLength, selectionStart);
                }
                else
                {
                    newSelectedItem = TryGetMatch(text, _view, AutoCompleteSearch.GetFilter(AutoCompleteFilterMode.EqualsCaseSensitive));
                }
            }
            if (SelectedItem != newSelectedItem)
            {
                _skipSelectedItemTextUpdate = true;
            }
            SelectedItem = newSelectedItem;
            if (_ignoreTextSelectionChange)
            {
                _ignoreTextSelectionChange = false;
                if (TextBox != null)
                {
                    _textSelectionStart = TextBox.SelectionStart;
                }
            }
        }

        private object UpdateSelection(object newSelectedItem, string text, int currentLength, int selectionStart)
        {
            var selectedItem = newSelectedItem;
            if (selectionStart == text.Length && selectionStart > _textSelectionStart)
            {
                var top = FilterMode == AutoCompleteFilterMode.StartsWith || FilterMode == AutoCompleteFilterMode.StartsWithCaseSensitive
                    ? _view[0]
                    : TryGetMatch(text, _view, AutoCompleteSearch.GetFilter(AutoCompleteFilterMode.StartsWith));
                if (top != null)
                {
                    selectedItem = top;
                    var topString = FormatValue(top, true);
                    var minLength = Math.Min(topString.Length, Text.Length);
                    if (AutoCompleteSearch.Equals(Text.Substring(0, minLength), topString.Substring(0, minLength)))
                    {
                        UpdateTextValue(topString);
                        TextBox.SelectionStart = currentLength;
                        TextBox.SelectionLength = topString.Length - currentLength;
                    }
                }
            }

            return selectedItem;
        }

        object TryGetMatch(string searchText, ObservableCollection<object> view, AutoCompleteFilterPredicate<string> predicate)
        {
            if (view != null && view.Count > 0)
            {
                return view.FirstOrDefault(o => predicate?.Invoke(searchText, FormatValue(o)) ?? default(bool));
            }

            return null;
        }

        void ClearView()
        {
            if (_view == null)
            {
                _view = new ObservableCollection<object>();
            }
            else
            {
                _view.Clear();
            }
        }

        void RefreshView()
        {
            if (_items == null)
            {
                ClearView();
                return;
            }

            _view.Clear();

            var filteredItems = GetFilteredItems();
            foreach (var item in filteredItems)
            {
                _view.Add(item);
            }

            _valueBindingEvaluator?.ClearDataContext();
        }

        private IEnumerable<object> GetFilteredItems()
        {
            var text = Text ?? string.Empty;
            var stringFiltering = TextFilter != null;
            var objectFiltering = FilterMode == AutoCompleteFilterMode.Custom && TextFilter == null;

            var filteredItems = _items.Where(item =>
            {
                var isAutoCompleteMatch = !(stringFiltering || objectFiltering);
                if (!isAutoCompleteMatch)
                {
                    isAutoCompleteMatch = stringFiltering ? TextFilter?.Invoke(text, FormatValue(item)) ?? default(bool) : ItemFilter?.Invoke(text, item) ?? default(bool);
                }
                return isAutoCompleteMatch;
            });
            return filteredItems;
        }

        [SuppressMessage("Microsoft.Usage", "CA1801:ReviewUnusedParameters", MessageId = "oldValue", Justification = "This makes it easy to add validation or other changes in the future.")]
        [ExcludeFromCodeCoverage]
        void OnItemsSourceChanged(IEnumerable oldValue, IEnumerable newValue)
        {
            _items = newValue == null ? null : new List<object>(newValue.Cast<object>().ToList());
            ClearView();
            if (SelectionAdapter != null && !SelectionAdapter.ItemsSource.Equals(_view))
            {
                SelectionAdapter.ItemsSource = _view;
            }
            if (IsDropDownOpen)
            {
                RefreshView();
            }
        }

        [ExcludeFromCodeCoverage]
        void OnAdapterSelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            SelectedItem = _adapter.SelectedItem;
        }

        [ExcludeFromCodeCoverage]
        void OnAdapterSelectionComplete(object sender, RoutedEventArgs e)
        {
            IsDropDownOpen = false;
            UpdateTextCompletion(false);
            TextBox?.Select(TextBox.Text.Length, 0);

            if (TextBox != null)
            {
                Keyboard.Focus(TextBox);
            }
            else
            {
                Focus();
            }
        }

        [ExcludeFromCodeCoverage]
        void OnAdapterSelectionCanceled(object sender, RoutedEventArgs e)
        {
            UpdateTextValue(SearchText);
            UpdateTextCompletion(false);
        }

        [SuppressMessage("Microsoft.Usage", "CA1801:ReviewUnusedParameters", MessageId = "newValue", Justification = "This makes it easy to add validation or other changes in the future.")]
        [ExcludeFromCodeCoverage]
        void OnMaxDropDownHeightChanged(double newValue)
        {
            if (DropDownPopup != null)
            {
                DropDownPopup.MaxDropDownHeight = newValue;
                DropDownPopup.Arrange();
            }
            UpdateVisualState(true);
        }

        void OpenDropDown(bool oldValue, bool newValue)
        {
            if (DropDownPopup != null)
            {
                DropDownPopup.IsOpen = true;
            }
            _popupHasOpened = true;
            OnDropDownOpened(new RoutedPropertyChangedEventArgs<bool>(oldValue, newValue, DropDownOpenedEvent));
        }

        protected void CloseDropDown(bool oldValue, bool newValue)
        {
            if (_popupHasOpened)
            {
                if (SelectionAdapter != null)
                {
                    SelectionAdapter.SelectedItem = null;
                }
                if (DropDownPopup != null)
                {
                    DropDownPopup.IsOpen = false;
                }
                OnDropDownClosed(new RoutedPropertyChangedEventArgs<bool>(oldValue, newValue, DropDownClosedEvent));
            }
        }

        protected override void OnKeyDown(KeyEventArgs e)
        {
            if (e == null)
            {
                throw new ArgumentNullException();
            }

            base.OnKeyDown(e);

            if (e.Handled || !IsEnabled)
            {
                return;
            }
            if (IsDropDownOpen)
            {
                if (SelectionAdapter != null)
                {
                    SelectionAdapter.HandleKeyDown(e);
                    if (e.Handled)
                    {
                        return;
                    }
                }

                switch (e.Key)
                {
                    case Key.F4:
                        IsDropDownOpen = !IsDropDownOpen;
                        e.Handled = true;
                        break;
                    case Key.Enter:
                    case Key.Escape:
                        OnAdapterSelectionComplete(this, new RoutedEventArgs());
                        e.Handled = true;
                        break;
                    default:
                        e.Handled = false;
                        break;
                }
            }
        }

        void IUpdateVisualState.UpdateVisualState(bool useTransitions)
        {
            UpdateVisualState(useTransitions);
        }

        internal virtual void UpdateVisualState(bool useTransitions)
        {
            VisualStateManager.GoToState(this, IsDropDownOpen ? VisualStates.StatePopupOpened : VisualStates.StatePopupClosed, useTransitions);
            Interaction.UpdateVisualStateBase(useTransitions);
        }
    }
}
---- Transformed Tree ----
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Diagnostics.CodeAnalysis;
using System.Globalization;
using System.Linq;
using System.Windows.Automation.Peers;
using System.Windows.Controls.Primitives;
using System.Windows.Data;
using System.Windows.Input;
using System.Windows.Markup;
using System.Windows.Media;
using System.Windows.Threading;

namespace System.Windows.Controls
{
    [TemplatePart(Name = nameof(SelectionAdapter), Type = typeof(ISelectionAdapter))]
    [TemplatePart(Name = "Selector", Type = typeof(Selector))]
    [TemplatePart(Name = nameof(Text), Type = typeof(TextBox))]
    [TemplatePart(Name = "Popup", Type = typeof(Popup))]
    [StyleTypedProperty(Property = nameof(TextBoxStyle), StyleTargetType = typeof(TextBox))]
    [StyleTypedProperty(Property = nameof(ItemContainerStyle), StyleTargetType = typeof(ListBox))]
    [TemplateVisualState(Name = VisualStates.StateNormal, GroupName = VisualStates.GroupCommon)]
    [TemplateVisualState(Name = VisualStates.StateMouseOver, GroupName = VisualStates.GroupCommon)]
    [TemplateVisualState(Name = VisualStates.StatePressed, GroupName = VisualStates.GroupCommon)]
    [TemplateVisualState(Name = VisualStates.StateDisabled, GroupName = VisualStates.GroupCommon)]
    [TemplateVisualState(Name = VisualStates.StateFocused, GroupName = VisualStates.GroupFocus)]
    [TemplateVisualState(Name = VisualStates.StateUnfocused, GroupName = VisualStates.GroupFocus)]
    [TemplateVisualState(Name = VisualStates.StatePopupClosed, GroupName = VisualStates.GroupPopup)]
    [TemplateVisualState(Name = VisualStates.StatePopupOpened, GroupName = VisualStates.GroupPopup)]
    [TemplateVisualState(Name = VisualStates.StateValid, GroupName = VisualStates.GroupValidation)]
    [TemplateVisualState(Name = VisualStates.StateInvalidFocused, GroupName = VisualStates.GroupValidation)]
    [TemplateVisualState(Name = VisualStates.StateInvalidUnfocused, GroupName = VisualStates.GroupValidation)]
    [SuppressMessage("Microsoft.Maintainability", "CA1506:AvoidExcessiveClassCoupling", Justification = "Large implementation keeps the components contained.")]
    [ContentProperty("ItemsSource")]
    public class AutoCompleteBox : Control, IUpdateVisualState
    {
        List<object> _items;
        ObservableCollection<object> _view;
        int _ignoreTextPropertyChange;
        bool _ignorePropertyChange;
        bool _ignoreTextSelectionChange;
        bool _skipSelectedItemTextUpdate;
        int _textSelectionStart;
        bool _userCalledPopulate;
        bool _popupHasOpened;
        DispatcherTimer _delayTimer;
        bool _allowWrite;
        internal InteractionHelper Interaction { get; set; }
        BindingEvaluator<string> _valueBindingEvaluator;

        public int MinimumPrefixLength
        {
            get => (int)GetValue(MinimumPrefixLengthProperty);
            set => SetValue(MinimumPrefixLengthProperty, value);
        }

        public static readonly DependencyProperty MinimumPrefixLengthProperty =
            DependencyProperty.Register(nameof(MinimumPrefixLength), typeof(int), typeof(AutoCompleteBox), new PropertyMetadata(1, OnMinimumPrefixLengthPropertyChanged));

        [SuppressMessage("Microsoft.Usage", "CA2208:InstantiateArgumentExceptionsCorrectly", Justification = "MinimumPrefixLength is the name of the actual dependency property.")]
        static void OnMinimumPrefixLengthPropertyChanged(DependencyObject d, DependencyPropertyChangedEventArgs e)
        {
            var newValue = (int)e.NewValue;

            if (newValue < 0 && newValue != -1)
            {
                throw new ArgumentOutOfRangeException(nameof(MinimumPrefixLength));
            }
        }

        [ExcludeFromCodeCoverage]
        public int MinimumPopulateDelay
        {
            get => (int)GetValue(MinimumPopulateDelayProperty);
            set => SetValue(MinimumPopulateDelayProperty, value);
        }

        public static readonly DependencyProperty MinimumPopulateDelayProperty =
            DependencyProperty.Register(nameof(MinimumPopulateDelay), typeof(int), typeof(AutoCompleteBox), new PropertyMetadata(OnMinimumPopulateDelayPropertyChanged));

        [SuppressMessage("Microsoft.Usage", "CA2208:InstantiateArgumentExceptionsCorrectly", Justification = "The exception is most likely to be called through the CLR property setter.")]
        [ExcludeFromCodeCoverage]
        static void OnMinimumPopulateDelayPropertyChanged(DependencyObject d, DependencyPropertyChangedEventArgs e)
        {
            if (d is AutoCompleteBox source && source._ignorePropertyChange)
            {
                source._ignorePropertyChange = false;
                return;
            }

            var newValue = (int)e.NewValue;
            if (newValue < 0)
            {
                if (d is AutoCompleteBox source)
                {
                    source._ignorePropertyChange = true;
                }
                d.SetValue(e.Property, e.OldValue);

                throw new ArgumentException(string.Format(CultureInfo.InvariantCulture,
                    Dev2.Runtime.Configuration.Properties.Resources.AutoComplete_OnMinimumPopulateDelayPropertyChanged_InvalidValue, newValue));
            }

            SetupNewDelayTimer(source, newValue);
        }

        private static void SetupNewDelayTimer(AutoCompleteBox source, int newValue)
        {
            if (source?._delayTimer != null)
            {
                source._delayTimer.Stop();

                if (newValue == 0)
                {
                    source._delayTimer = null;
                }
            }

            if (source != null && newValue > 0 && source._delayTimer == null)
            {
                source._delayTimer = new DispatcherTimer();
                source._delayTimer.Tick += source.PopulateDropDown;
            }

            if (source != null && newValue > 0 && source._delayTimer != null)
            {
                source._delayTimer.Interval = TimeSpan.FromMilliseconds(newValue);
            }
        }

        public static readonly DependencyProperty DefaultTextTemplateProperty =
            DependencyProperty.Register(nameof(DefaultTextTemplate), typeof(DataTemplate), typeof(AutoCompleteBox), new UIPropertyMetadata(null));

        [ExcludeFromCodeCoverage]
        public DataTemplate DefaultTextTemplate
        {
            get => (DataTemplate)GetValue(DefaultTextTemplateProperty);
            set => SetValue(DefaultTextTemplateProperty, value);
        }

        public static readonly DependencyProperty DefaultTextProperty =
            DependencyProperty.Register(nameof(DefaultText), typeof(object), typeof(AutoCompleteBox), new UIPropertyMetadata(null));

        public object DefaultText
        {
            get => GetValue(DefaultTextProperty);
            set => SetValue(DefaultTextProperty, value);
        }

        public static readonly DependencyProperty AllowUserInsertLineProperty =
            DependencyProperty.Register(nameof(AllowUserInsertLine), typeof(bool), typeof(AutoCompleteBox), new PropertyMetadata(true));

        public bool AllowUserInsertLine
        {
            get => (bool)GetValue(AllowUserInsertLineProperty);
            set => SetValue(AllowUserInsertLineProperty, value);
        }

        public bool IsTextCompletionEnabled
        {
            get => (bool)GetValue(IsTextCompletionEnabledProperty);
            set => SetValue(IsTextCompletionEnabledProperty, value);
        }

        public static readonly DependencyProperty IsTextCompletionEnabledProperty =
            DependencyProperty.Register(nameof(IsTextCompletionEnabled), typeof(bool), typeof(AutoCompleteBox), new PropertyMetadata(false, null));

        [ExcludeFromCodeCoverage]
        public DataTemplate ItemTemplate
        {
            get => GetValue(ItemTemplateProperty) as DataTemplate;
            set => SetValue(ItemTemplateProperty, value);
        }

        public static readonly DependencyProperty ItemTemplateProperty =
            DependencyProperty.Register(nameof(ItemTemplate), typeof(DataTemplate), typeof(AutoCompleteBox), new PropertyMetadata(null));

        [ExcludeFromCodeCoverage]
        public Style ItemContainerStyle
        {
            get => GetValue(ItemContainerStyleProperty) as Style;
            set => SetValue(ItemContainerStyleProperty, value);
        }

        public static readonly DependencyProperty ItemContainerStyleProperty =
            DependencyProperty.Register(nameof(ItemContainerStyle), typeof(Style), typeof(AutoCompleteBox), new PropertyMetadata(null, null));

        [ExcludeFromCodeCoverage]
        public Style TextBoxStyle
        {
            get => GetValue(TextBoxStyleProperty) as Style;
            set => SetValue(TextBoxStyleProperty, value);
        }

        public static readonly DependencyProperty TextBoxStyleProperty =
            DependencyProperty.Register(nameof(TextBoxStyle), typeof(Style), typeof(AutoCompleteBox), new PropertyMetadata(null));

        [ExcludeFromCodeCoverage]
        public double MaxDropDownHeight
        {
            get => (double)GetValue(MaxDropDownHeightProperty);
            set => SetValue(MaxDropDownHeightProperty, value);
        }

        public static readonly DependencyProperty MaxDropDownHeightProperty =
            DependencyProperty.Register(nameof(MaxDropDownHeight), typeof(double), typeof(AutoCompleteBox), new PropertyMetadata(double.PositiveInfinity, OnMaxDropDownHeightPropertyChanged));

        [SuppressMessage("Microsoft.Usage", "CA2208:InstantiateArgumentExceptionsCorrectly", Justification = "The exception will be called through a CLR setter in most cases.")]
        static void OnMaxDropDownHeightPropertyChanged(DependencyObject d, DependencyPropertyChangedEventArgs e)
        {
            if (d is AutoCompleteBox source && source._ignorePropertyChange)
            {
                source._ignorePropertyChange = false;
                return;
            }

            var newValue = (double)e.NewValue;

            if (newValue < 0)
            {
                if (d is AutoCompleteBox source)
                {
                    source._ignorePropertyChange = true;
                    source.SetValue(e.Property, e.OldValue);
                }

                throw new ArgumentException(string.Format(CultureInfo.InvariantCulture, Dev2.Runtime.Configuration.Properties.Resources.AutoComplete_OnMaxDropDownHeightPropertyChanged_InvalidValue, e.NewValue));
            }

            source?.OnMaxDropDownHeightChanged(newValue);
        }

        public static readonly DependencyProperty IsDropDownOpenProperty =
            DependencyProperty.Register(nameof(IsDropDownOpen), typeof(bool), typeof(AutoCompleteBox), new PropertyMetadata(false, OnIsDropDownOpenPropertyChanged));

        public bool IsDropDownOpen
        {
            get => (bool)GetValue(IsDropDownOpenProperty);
            set => SetValue(IsDropDownOpenProperty, value);
        }

        static void OnIsDropDownOpenPropertyChanged(DependencyObject d, DependencyPropertyChangedEventArgs e)
        {
            if (d is AutoCompleteBox source && source._ignorePropertyChange)
            {
                source._ignorePropertyChange = false;
                return;
            }

            var oldValue = (bool)e.OldValue;
            var newValue = (bool)e.NewValue;

            if (d is AutoCompleteBox source)
            {
                if (newValue)
                {
                    source.TextUpdated(source.Text, true);
                }
                else
                {
                    source.ClosingDropDown(oldValue);
                }

                source.UpdateVisualState(true);
            }
        }

        public IEnumerable ItemsSource
        {
            get => GetValue(ItemsSourceProperty) as IEnumerable;
            set => SetValue(ItemsSourceProperty, value);
        }

        public static readonly DependencyProperty ItemsSourceProperty =
            DependencyProperty.Register(nameof(ItemsSource), typeof(IEnumerable), typeof(AutoCompleteBox), new PropertyMetadata(OnItemsSourcePropertyChanged));

        static void OnItemsSourcePropertyChanged(DependencyObject d, DependencyPropertyChangedEventArgs e)
        {
            var autoComplete = d as AutoCompleteBox;
            autoComplete?.OnItemsSourceChanged((IEnumerable)e.OldValue, (IEnumerable)e.NewValue);
        }

        public object SelectedItem
        {
            get => GetValue(SelectedItemProperty);
            set => SetValue(SelectedItemProperty, value);
        }

        public static readonly DependencyProperty SelectedItemProperty =
            DependencyProperty.Register(nameof(SelectedItem), typeof(object), typeof(AutoCompleteBox), new PropertyMetadata(OnSelectedItemPropertyChanged));

        static void OnSelectedItemPropertyChanged(DependencyObject d, DependencyPropertyChangedEventArgs e)
        {
            if (d is AutoCompleteBox source)
            {
                if (source._ignorePropertyChange)
                {
                    source._ignorePropertyChange = false;
                    return;
                }

                if (source._skipSelectedItemTextUpdate)
                {
                    source._skipSelectedItemTextUpdate = false;
                }
                else
                {
                    source.OnSelectedItemChanged(e.NewValue);
                }
            }

            var removed = new List<object>();
            if (e.OldValue != null)
            {
                removed.Add(e.OldValue);
            }

            var added = new List<object>();
            if (e.NewValue != null)
            {
                added.Add(e.NewValue);
            }

            source?.OnSelectionChanged(new SelectionChangedEventArgs(SelectionChangedEvent, removed, added));
        }

        void OnSelectedItemChanged(object newItem)
        {
            if (CustomSelection)
            {
                return;
            }
            var text = newItem == null ? SearchText : FormatValue(newItem, true);

            UpdateTextValue(text);

            if (TextBox != null && Text != null)
            {
                TextBox.SelectionStart = Text.Length;
            }
        }

        public bool CustomSelection { get; set; }

        public string Text
        {
            get => GetValue(TextProperty) as string;
            set => SetValue(TextProperty, value);
        }

        public static readonly DependencyProperty TextProperty =
            DependencyProperty.Register(nameof(Text), typeof(string), typeof(AutoCompleteBox), new PropertyMetadata(string.Empty, OnTextPropertyChanged));

        static void OnTextPropertyChanged(DependencyObject d, DependencyPropertyChangedEventArgs e)
        {
            var source = d as AutoCompleteBox;
            source?.TextUpdated((string)e.NewValue, false);
        }

        public string SearchText
        {
            get => (string)GetValue(SearchTextProperty);
            private set
            {
                try
                {
                    _allowWrite = true;
                    SetValue(SearchTextProperty, value);
                }
                finally
                {
                    _allowWrite = false;
                }
            }
        }

        public static readonly DependencyProperty SearchTextProperty =
            DependencyProperty.Register(nameof(SearchText), typeof(string), typeof(AutoCompleteBox), new PropertyMetadata(string.Empty, OnSearchTextPropertyChanged));

        static void OnSearchTextPropertyChanged(DependencyObject d, DependencyPropertyChangedEventArgs e)
        {
            if (d is AutoCompleteBox source && source._ignorePropertyChange)
            {
                source._ignorePropertyChange = false;
                return;
            }

            if (d is AutoCompleteBox source && !source._allowWrite)
            {
                source._ignorePropertyChange = true;
                source.SetValue(e.Property, e.OldValue);

                throw new InvalidOperationException(Dev2.Runtime.Configuration.Properties.Resources.AutoComplete_OnSearchTextPropertyChanged_InvalidWrite);
            }
        }

        public AutoCompleteFilterMode FilterMode
        {
            get => (AutoCompleteFilterMode)GetValue(FilterModeProperty);
            set => SetValue(FilterModeProperty, value);
        }

        public static readonly DependencyProperty FilterModeProperty =
            DependencyProperty.Register(nameof(FilterMode), typeof(AutoCompleteFilterMode), typeof(AutoCompleteBox), new PropertyMetadata(AutoCompleteFilterMode.StartsWith, OnFilterModePropertyChanged));

        [SuppressMessage("Microsoft.Usage", "CA2208:InstantiateArgumentExceptionsCorrectly", Justification = "The exception will be thrown when the CLR setter is used in most situations.")]
        [ExcludeFromCodeCoverage]
        static void OnFilterModePropertyChanged(DependencyObject d, DependencyPropertyChangedEventArgs e)
        {
            var mode = (AutoCompleteFilterMode)e.NewValue;

            var modeNotContainingFilterMode = mode != AutoCompleteFilterMode.Contains;
            modeNotContainingFilterMode &= mode != AutoCompleteFilterMode.EqualsCaseSensitive;
            modeNotContainingFilterMode &= mode != AutoCompleteFilterMode.StartsWith;
            modeNotContainingFilterMode &= mode != AutoCompleteFilterMode.Custom;
            modeNotContainingFilterMode &= mode != AutoCompleteFilterMode.None;

            if (modeNotContainingFilterMode)
            {
                source?.SetValue(e.Property, e.OldValue);
                throw new ArgumentException(Dev2.Runtime.Configuration.Properties.Resources.AutoComplete_OnFilterModePropertyChanged_InvalidValue);
            }

            var newValue = (AutoCompleteFilterMode)e.NewValue;

            if (d is AutoCompleteBox source)
            {
                source.TextFilter = AutoCompleteSearch.GetFilter(newValue);
            }
        }

        public AutoCompleteFilterPredicate<object> ItemFilter
        {
            get => GetValue(ItemFilterProperty) as AutoCompleteFilterPredicate<object>;
            set => SetValue(ItemFilterProperty, value);
        }

        public static readonly DependencyProperty ItemFilterProperty =
            DependencyProperty.Register(nameof(ItemFilter), typeof(AutoCompleteFilterPredicate<object>), typeof(AutoCompleteBox), new PropertyMetadata(OnItemFilterPropertyChanged));

        static void OnItemFilterPropertyChanged(DependencyObject d, DependencyPropertyChangedEventArgs e)
        {
            if (e.NewValue is AutoCompleteFilterPredicate<object>)
            {
                if (d is AutoCompleteBox autoCompleteBox)
                {
                    autoCompleteBox.FilterMode = AutoCompleteFilterMode.Custom;
                    autoCompleteBox.TextFilter = null;
                }
                return;
            }

            if (d is AutoCompleteBox autoCompleteBox)
            {
                autoCompleteBox.FilterMode = AutoCompleteFilterMode.None;
            }
        }

        public AutoCompleteFilterPredicate<string> TextFilter
        {
            get => GetValue(TextFilterProperty) as AutoCompleteFilterPredicate<string>;
            set => SetValue(TextFilterProperty, value);
        }

        public static readonly DependencyProperty TextFilterProperty =
            DependencyProperty.Register(nameof(TextFilter), typeof(AutoCompleteFilterPredicate<string>), typeof(AutoCompleteBox), new PropertyMetadata(AutoCompleteSearch.GetFilter(AutoCompleteFilterMode.StartsWith)));

        PopupHelper DropDownPopup { get; set; }
        TextBox _text;
        ISelectionAdapter _adapter;

        public TextBox TextBox
        {
            get => _text;
            set
            {
                if (_text != null)
                {
                    _text.SelectionChanged -= OnTextBoxSelectionChanged;
                    _text.TextChanged -= OnTextBoxTextChanged;
                }
                _text = value;
                if (_text != null)
                {
                    _text.SelectionChanged += OnTextBoxSelectionChanged;
                    _text.TextChanged += OnTextBoxTextChanged;

                    if (Text != null)
                    {
                        UpdateTextValue(Text);
                    }
                }
            }
        }

        protected internal ISelectionAdapter SelectionAdapter
        {
            get => _adapter;
            set
            {
                if (_adapter != null)
                {
                    _adapter.SelectionChanged -= OnAdapterSelectionChanged;
                    _adapter.Commit -= OnAdapterSelectionComplete;
                    _adapter.Cancel -= OnAdapterSelectionCanceled;
                    _adapter.Cancel -= OnAdapterSelectionComplete;
                    _adapter.ItemsSource = null;
                }

                _adapter = value;

                if (_adapter != null)
                {
                    _adapter.SelectionChanged += OnAdapterSelectionChanged;
                    _adapter.Commit += OnAdapterSelectionComplete;
                    _adapter.Cancel += OnAdapterSelectionCanceled;
                    _adapter.Cancel += OnAdapterSelectionComplete;
                    _adapter.ItemsSource = _view;
                }
            }
        }

        public static readonly DependencyProperty HasErrorProperty =
            DependencyProperty.Register(nameof(HasError), typeof(bool), typeof(AutoCompleteBox), new PropertyMetadata(false));

        public bool HasError
        {
            get => (bool)GetValue(HasErrorProperty);
            set => SetValue(HasErrorProperty, value);
        }

        public static readonly RoutedEvent TextChangedEvent = EventManager.RegisterRoutedEvent(nameof(TextChanged), RoutingStrategy.Bubble, typeof(RoutedEventHandler), typeof(AutoCompleteBox));

        public event RoutedEventHandler TextChanged
        {
            add { AddHandler(TextChangedEvent, value); }
            remove { RemoveHandler(TextChangedEvent, value); }
        }

        public static readonly RoutedEvent PopulatingEvent = EventManager.RegisterRoutedEvent(nameof(Populating), RoutingStrategy.Bubble, typeof(PopulatingEventHandler), typeof(AutoCompleteBox));

        public event PopulatingEventHandler Populating
        {
            add { AddHandler(PopulatingEvent, value); }
            remove { RemoveHandler(PopulatingEvent, value); }
        }

        public static readonly RoutedEvent PopulatedEvent = EventManager.RegisterRoutedEvent(nameof(Populated), RoutingStrategy.Bubble, typeof(PopulatedEventHandler), typeof(AutoCompleteBox));

        public event PopulatedEventHandler Populated
        {
            add { AddHandler(PopulatedEvent, value); }
            remove { RemoveHandler(PopulatedEvent, value); }
        }

        public static readonly RoutedEvent DropDownOpeningEvent = EventManager.RegisterRoutedEvent(nameof(DropDownOpening), RoutingStrategy.Bubble, typeof(RoutedPropertyChangingEventHandler<bool>), typeof(AutoCompleteBox));

        public event RoutedPropertyChangingEventHandler<bool> DropDownOpening
        {
            add { AddHandler(PopulatedEvent, value); }
            remove { RemoveHandler(PopulatedEvent, value); }
        }

        public static readonly RoutedEvent DropDownOpenedEvent = EventManager.RegisterRoutedEvent(nameof(DropDownOpened), RoutingStrategy.Bubble, typeof(RoutedPropertyChangedEventHandler<bool>), typeof(AutoCompleteBox));

        public event RoutedPropertyChangedEventHandler<bool> DropDownOpened
        {
            add { AddHandler(DropDownOpenedEvent, value); }
            remove { RemoveHandler(DropDownOpenedEvent, value); }
        }

        public static readonly RoutedEvent DropDownClosingEvent = EventManager.RegisterRoutedEvent(nameof(DropDownClosing), RoutingStrategy.Bubble, typeof(RoutedPropertyChangingEventHandler<bool>), typeof(AutoCompleteBox));

        public event RoutedPropertyChangingEventHandler<bool> DropDownClosing
        {
            add { AddHandler(DropDownClosingEvent, value); }
            remove { RemoveHandler(DropDownClosingEvent, value); }
        }

        public static readonly RoutedEvent DropDownClosedEvent = EventManager.RegisterRoutedEvent(nameof(DropDownClosed), RoutingStrategy.Bubble, typeof(RoutedPropertyChangedEventHandler<bool>), typeof(AutoCompleteBox));

        public event RoutedPropertyChangedEventHandler<bool> DropDownClosed
        {
            add { AddHandler(DropDownClosedEvent, value); }
            remove { RemoveHandler(DropDownClosedEvent, value); }
        }

        public static readonly RoutedEvent SelectionChangedEvent = EventManager.RegisterRoutedEvent(nameof(SelectionChanged), RoutingStrategy.Bubble, typeof(SelectionChangedEventHandler), typeof(AutoCompleteBox));

        public event SelectionChangedEventHandler SelectionChanged
        {
            add { AddHandler(SelectionChangedEvent, value); }
            remove { RemoveHandler(SelectionChangedEvent, value); }
        }

        public Binding ValueMemberBinding
        {
            get => _valueBindingEvaluator?.ValueBinding;
            set => _valueBindingEvaluator = new BindingEvaluator<string>(value);
        }

        public string ValueMemberPath
        {
            get => ValueMemberBinding?.Path.Path;
            set => ValueMemberBinding = value == null ? null : new Binding(value);
        }

        public ObservableCollection<object> View => _view;

        static AutoCompleteBox()
        {
            DefaultStyleKeyProperty.OverrideMetadata(typeof(AutoCompleteBox), new FrameworkPropertyMetadata(typeof(AutoCompleteBox)));
        }

        public AutoCompleteBox()
        {
            IsEnabledChanged += ControlIsEnabledChanged;
            Interaction = new InteractionHelper(this);

            ClearView();
            if (Application.Current != null)
            {
                Style = Application.Current.TryFindResource("AutoCompleteBoxStyle") as Style;
            }
        }

        protected override Size ArrangeOverride(Size arrangeBounds)
        {
            var r = base.ArrangeOverride(arrangeBounds);
            DropDownPopup?.Arrange();
            return r;
        }

        public override void OnApplyTemplate()
        {
            if (TextBox != null)
            {
                TextBox.PreviewKeyDown -= OnTextBoxPreviewKeyDown;
            }

            if (DropDownPopup != null)
            {
                DropDownPopup.Closed -= DropDownPopupClosed;
                DropDownPopup.FocusChanged -= OnDropDownFocusChanged;
                DropDownPopup.UpdateVisualStates -= OnDropDownPopupUpdateVisualStates;
                DropDownPopup.BeforeOnApplyTemplate();
                DropDownPopup = null;
            }

            base.OnApplyTemplate();

            if (GetTemplateChild("Popup") is Popup popup)
            {
                DropDownPopup = new PopupHelper(this, popup) { MaxDropDownHeight = MaxDropDownHeight };
                DropDownPopup.AfterOnApplyTemplate();
                DropDownPopup.Closed += DropDownPopupClosed;
                DropDownPopup.FocusChanged += OnDropDownFocusChanged;
                DropDownPopup.UpdateVisualStates += OnDropDownPopupUpdateVisualStates;
            }
            SelectionAdapter = GetSelectionAdapterPart();
            TextBox = GetTemplateChild("Text") as TextBox;

            if (TextBox != null)
            {
                TextBox.PreviewKeyDown += OnTextBoxPreviewKeyDown;
            }

            Interaction.OnApplyTemplateBase();

            if (IsDropDownOpen && DropDownPopup != null && !DropDownPopup.IsOpen)
            {
                OpeningDropDown(false);
            }
        }

        void OnDropDownPopupUpdateVisualStates(object sender, EventArgs e)
        {
            UpdateVisualState(true);
        }

        void OnDropDownFocusChanged(object sender, EventArgs e)
        {
            FocusChanged(HasFocus());
        }

        void ClosingDropDown(bool oldValue)
        {
            var delayedClosingVisual = false;
            if (DropDownPopup != null)
            {
                delayedClosingVisual = DropDownPopup.UsesClosingVisualState;
            }

            var args = new RoutedPropertyChangingEventArgs<bool>(IsDropDownOpenProperty, oldValue, false, true, DropDownClosingEvent);
            OnDropDownClosing(args);

            if (_view == null || _view.Count == 0)
            {
                delayedClosingVisual = false;
            }

            if (args.Cancel)
            {
                _ignorePropertyChange = true;
                SetValue(IsDropDownOpenProperty, oldValue);
            }
            else
            {
                RaiseExpandCollapseAutomationEvent(oldValue, false);
                if (!delayedClosingVisual)
                {
                    CloseDropDown(oldValue, false);
                }
            }

            UpdateVisualState(true);
        }

        void OpeningDropDown(bool oldValue)
        {
            var args = new RoutedPropertyChangingEventArgs<bool>(IsDropDownOpenProperty, oldValue, true, true, DropDownOpeningEvent);
            OnDropDownOpening(args);

            if (args.Cancel)
            {
                _ignorePropertyChange = true;
                SetValue(IsDropDownOpenProperty, oldValue);
            }
            else
            {
                RaiseExpandCollapseAutomationEvent(oldValue, true);
                OpenDropDown(oldValue, true);
            }

            UpdateVisualState(true);
        }

        void RaiseExpandCollapseAutomationEvent(bool oldValue, bool newValue)
        {
            var peer = UIElementAutomationPeer.FromElement(this) as AutoCompleteBoxAutomationPeer;
            peer?.RaiseExpandCollapseAutomationEvent(oldValue, newValue);
        }

        void OnTextBoxPreviewKeyDown(object sender, KeyEventArgs e)
        {
            OnKeyDown(e);
        }

        void DropDownPopupClosed(object sender, EventArgs e)
        {
            if (IsDropDownOpen)
            {
                IsDropDownOpen = false;
            }

            if (_popupHasOpened)
            {
                OnDropDownClosed(new RoutedPropertyChangedEventArgs<bool>(true, false, DropDownClosedEvent));
            }
        }

        protected override AutomationPeer OnCreateAutomationPeer() => new AutoCompleteBoxAutomationPeer(this);

        void FocusChanged(bool hasFocus)
        {
            if (!hasFocus)
            {
                IsDropDownOpen = false;
                _userCalledPopulate = false;
                TextBox?.Select(TextBox.Text.Length, 0);
            }
        }

        protected bool HasFocus()
        {
            var focused = IsKeyboardFocusWithin ? Keyboard.FocusedElement as DependencyObject : FocusManager.GetFocusedElement(this) as DependencyObject;
            while (focused != null)
            {
                if (ReferenceEquals(focused, this))
                {
                    return true;
                }

                var parent = VisualTreeHelper.GetParent(focused);
                if (parent == null && focused is FrameworkElement element)
                {
                    parent = element.Parent;
                }

                focused = parent;
            }
            return false;
        }

        protected override void OnGotFocus(RoutedEventArgs e)
        {
            base.OnGotFocus(e);
            FocusChanged(HasFocus());
        }

        protected override void OnIsKeyboardFocusWithinChanged(DependencyPropertyChangedEventArgs e)
        {
            base.OnIsKeyboardFocusWithinChanged(e);
            if (!IsKeyboardFocusWithin)
            {
                IsDropDownOpen = false;
            }
        }

        protected override void OnLostFocus(RoutedEventArgs e)
        {
            base.OnLostFocus(e);
            FocusChanged(HasFocus());
        }

        void ControlIsEnabledChanged(object sender, DependencyPropertyChangedEventArgs e)
        {
            var isEnabled = (bool)e.NewValue;
            if (!isEnabled)
            {
                IsDropDownOpen = false;
            }
        }

        [SuppressMessage("Microsoft.Design", "CA1024:UsePropertiesWhereAppropriate", Justification = "Following the GetTemplateChild pattern for the method.")]
        [ExcludeFromCodeCoverage]
        protected virtual ISelectionAdapter GetSelectionAdapterPart()
        {
            ISelectionAdapter adapter = null;
            if (GetTemplateChild("Selector") is Selector selector)
            {
                adapter = selector as ISelectionAdapter ?? new SelectorSelectionAdapter(selector);
            }

            return adapter ?? GetTemplateChild("SelectionAdapter") as ISelectionAdapter;
        }

        [ExcludeFromCodeCoverage]
        void PopulateDropDown(object sender, EventArgs e)
        {
            _delayTimer?.Stop();
            SearchText = Text;

            var populating = new PopulatingEventArgs(SearchText, PopulatingEvent);

            OnPopulating(populating);
            if (!populating.Cancel)
            {
                PopulateComplete();
            }
        }

        protected virtual void OnPopulating(PopulatingEventArgs e)
        {
            RaiseEvent(e);
        }

        [ExcludeFromCodeCoverage]
        protected virtual void OnPopulated(PopulatedEventArgs e)
        {
            RaiseEvent(e);
        }

        [ExcludeFromCodeCoverage]
        protected virtual void OnSelectionChanged(SelectionChangedEventArgs e)
        {
            RaiseEvent(e);

            var box = (AutoCompleteBox)e.Source;
            var innerListBox = (ListBox)box?.Template?.FindName("Selector", box);
            innerListBox?.ScrollIntoView(innerListBox.SelectedItem);

            RaiseEvent(e);
        }

        [ExcludeFromCodeCoverage]
        protected virtual void OnDropDownOpening(RoutedPropertyChangingEventArgs<bool> e)
        {
            RaiseEvent(e);
        }

        [ExcludeFromCodeCoverage]
        protected virtual void OnDropDownOpened(RoutedPropertyChangedEventArgs<bool> e)
        {
            RaiseEvent(e);
        }

        [ExcludeFromCodeCoverage]
        protected virtual void OnDropDownClosing(RoutedPropertyChangingEventArgs<bool> e)
        {
            RaiseEvent(e);
        }

        protected virtual void OnDropDownClosed(RoutedPropertyChangedEventArgs<bool> e)
        {
            RaiseEvent(e);
        }

        string FormatValue(object value, bool clearDataContext)
        {
            var str = FormatValue(value);
            if (clearDataContext)
            {
                _valueBindingEvaluator?.ClearDataContext();
            }
            return str;
        }

        protected virtual string FormatValue(object value)
        {
            if (_valueBindingEvaluator != null)
            {
                return _valueBindingEvaluator.GetDynamicValue(value) ?? string.Empty;
            }

            return value?.ToString() ?? string.Empty;
        }

        protected virtual void OnTextChanged(RoutedEventArgs e)
        {
            RaiseEvent(e);
        }

        void OnTextBoxTextChanged(object sender, TextChangedEventArgs e)
        {
            TextUpdated(_text.Text, true);
        }

        void OnTextBoxSelectionChanged(object sender, RoutedEventArgs e)
        {
            if (_ignoreTextSelectionChange)
            {
                return;
            }

            _textSelectionStart = _text.SelectionStart;
        }

        void UpdateTextValue(string value)
        {
            UpdateTextValue(value, null);
        }

        void UpdateTextValue(string value, bool? userInitiated)
        {
            var textUpdated = false;

            if ((userInitiated is null || userInitiated == true) && Text != value)
            {
                _ignoreTextPropertyChange++;
                Text = value;
                textUpdated = true;
            }

            if (TextBox is null)
            {
                Text = value;
                textUpdated = true;
            }

            var textBoxUpdated = UpdateTextBoxValue(value, userInitiated);

            if (textUpdated || textBoxUpdated)
            {
                OnTextChanged(new RoutedEventArgs(TextChangedEvent));
            }
        }

        private bool UpdateTextBoxValue(string value, bool? userInitiated)
        {
            if ((userInitiated is null || userInitiated == false) && TextBox != null && TextBox.Text != value)
            {
                _ignoreTextPropertyChange++;
                TextBox.Text = value ?? string.Empty;

                if (Text == value || Text is null)
                {
                    return true;
                }
            }
            return false;
        }

        void TextUpdated(string newText, bool userInitiated)
        {
            if (_ignoreTextPropertyChange > 0)
            {
                _ignoreTextPropertyChange--;
                return;
            }

            var text = newText;

            if (text == null)
            {
                text = string.Empty;
            }

            if (IsTextCompletionEnabled && TextBox != null && TextBox.SelectionLength > 0 && TextBox.SelectionStart != TextBox.Text.Length)
            {
                return;
            }

            var populateReady = text.Length >= MinimumPrefixLength && MinimumPrefixLength >= 0;
            _userCalledPopulate = populateReady && userInitiated;

            UpdateTextValue(text, userInitiated);

            if (populateReady)
            {
                PopulateReady();
                return;
            }
            PopulateNotReady();
        }

        private void PopulateReady()
        {
            _ignoreTextSelectionChange = true;

            if (_delayTimer != null)
            {
                _delayTimer.Start();
            }
            else
            {
                PopulateDropDown(this, EventArgs.Empty);
            }
        }

        private void PopulateNotReady()
        {
            SearchText = string.Empty;
            if (SelectedItem != null)
            {
                _skipSelectedItemTextUpdate = true;
            }
            SelectedItem = null;
            if (IsDropDownOpen)
            {
                IsDropDownOpen = false;
            }
        }

        public void PopulateComplete()
        {
            RefreshView();

            var populated = new PopulatedEventArgs(new ReadOnlyCollection<object>(_view), PopulatedEvent);
            OnPopulated(populated);

            if (SelectionAdapter != null && !SelectionAdapter.ItemsSource.Equals(_view))
            {
                SelectionAdapter.ItemsSource = _view;
            }

            var isDropDownOpen = _userCalledPopulate && _view.Count > 0;
            if (isDropDownOpen != IsDropDownOpen)
            {
                _ignorePropertyChange = true;
                IsDropDownOpen = isDropDownOpen;
            }
            if (IsDropDownOpen)
            {
                OpeningDropDown(false);
                DropDownPopup?.Arrange();
            }
            else
            {
                ClosingDropDown(true);
            }

            UpdateTextCompletion(_userCalledPopulate);
        }

        void UpdateTextCompletion(bool userInitiated)
        {
            object newSelectedItem = null;
            var text = Text;
            if (_view.Count > 0)
            {
                if (IsTextCompletionEnabled && TextBox != null && userInitiated)
                {
                    var currentLength = TextBox.Text.Length;
                    var selectionStart = TextBox.SelectionStart;
                    newSelectedItem = UpdateSelection(newSelectedItem, text, currentLength, selectionStart);
                }
                else
                {
                    newSelectedItem = TryGetMatch(text, _view, AutoCompleteSearch.GetFilter(AutoCompleteFilterMode.EqualsCaseSensitive));
                }
            }
            if (SelectedItem != newSelectedItem)
            {
                _skipSelectedItemTextUpdate = true;
            }
            SelectedItem = newSelectedItem;
            if (_ignoreTextSelectionChange)
            {
                _ignoreTextSelectionChange = false;
                if (TextBox != null)
                {
                    _textSelectionStart = TextBox.SelectionStart;
                }
            }
        }

        private object UpdateSelection(object newSelectedItem, string text, int currentLength, int selectionStart)
        {
            var selectedItem = newSelectedItem;
            if (selectionStart == text.Length && selectionStart > _textSelectionStart)
            {
                var top = FilterMode == AutoCompleteFilterMode.StartsWith || FilterMode == AutoCompleteFilterMode.StartsWithCaseSensitive
                    ? _view[0]
                    : TryGetMatch(text, _view, AutoCompleteSearch.GetFilter(AutoCompleteFilterMode.StartsWith));
                if (top != null)
                {
                    selectedItem = top;
                    var topString = FormatValue(top, true);
                    var minLength = Math.Min(topString.Length, Text.Length);
                    if (AutoCompleteSearch.Equals(Text.Substring(0, minLength), topString.Substring(0, minLength)))
                    {
                        UpdateTextValue(topString);
                        TextBox.SelectionStart = currentLength;
                        TextBox.SelectionLength = topString.Length - currentLength;
                    }
                }
            }

            return selectedItem;
        }

        object TryGetMatch(string searchText, ObservableCollection<object> view, AutoCompleteFilterPredicate<string> predicate)
        {
            if (view != null && view.Count > 0)
            {
                return view.FirstOrDefault(o => predicate?.Invoke(searchText, FormatValue(o)) ?? default(bool));
            }

            return null;
        }

        void ClearView()
        {
            if (_view == null)
            {
                _view = new ObservableCollection<object>();
            }
            else
            {
                _view.Clear();
            }
        }

        void RefreshView()
        {
            if (_items == null)
            {
                ClearView();
                return;
            }

            _view.Clear();

            var filteredItems = GetFilteredItems();
            foreach (var item in filteredItems)
            {
                _view.Add(item);
            }

            _valueBindingEvaluator?.ClearDataContext();
        }

        private IEnumerable<object> GetFilteredItems()
        {
            var text = Text ?? string.Empty;
            var stringFiltering = TextFilter != null;
            var objectFiltering = FilterMode == AutoCompleteFilterMode.Custom && TextFilter == null;

            var filteredItems = _items.Where(item =>
            {
                var isAutoCompleteMatch = !(stringFiltering || objectFiltering);
                if (!isAutoCompleteMatch)
                {
                    isAutoCompleteMatch = stringFiltering ? TextFilter?.Invoke(text, FormatValue(item)) ?? default(bool) : ItemFilter?.Invoke(text, item) ?? default(bool);
                }
                return isAutoCompleteMatch;
            });
            return filteredItems;
        }

        [SuppressMessage("Microsoft.Usage", "CA1801:ReviewUnusedParameters", MessageId = "oldValue", Justification = "This makes it easy to add validation or other changes in the future.")]
        [ExcludeFromCodeCoverage]
        void OnItemsSourceChanged(IEnumerable oldValue, IEnumerable newValue)
        {
            _items = newValue == null ? null : new List<object>(newValue.Cast<object>().ToList());
            ClearView();
            if (SelectionAdapter != null && !SelectionAdapter.ItemsSource.Equals(_view))
            {
                SelectionAdapter.ItemsSource = _view;
            }
            if (IsDropDownOpen)
            {
                RefreshView();
            }
        }

        [ExcludeFromCodeCoverage]
        void OnAdapterSelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            SelectedItem = _adapter.SelectedItem;
        }

        [ExcludeFromCodeCoverage]
        void OnAdapterSelectionComplete(object sender, RoutedEventArgs e)
        {
            IsDropDownOpen = false;
            UpdateTextCompletion(false);
            TextBox?.Select(TextBox.Text.Length, 0);

            if (TextBox != null)
            {
                Keyboard.Focus(TextBox);
            }
            else
            {
                Focus();
            }
        }

        [ExcludeFromCodeCoverage]
        void OnAdapterSelectionCanceled(object sender, RoutedEventArgs e)
        {
            UpdateTextValue(SearchText);
            UpdateTextCompletion(false);
        }

        [SuppressMessage("Microsoft.Usage", "CA1801:ReviewUnusedParameters", MessageId = "newValue", Justification = "This makes it easy to add validation or other changes in the future.")]
        [ExcludeFromCodeCoverage]
        void OnMaxDropDownHeightChanged(double newValue)
        {
            if (DropDownPopup != null)
            {
                DropDownPopup.MaxDropDownHeight = newValue;
                DropDownPopup.Arrange();
            }
            UpdateVisualState(true);
        }

        void OpenDropDown(bool oldValue, bool newValue)
        {
            if (DropDownPopup != null)
            {
                DropDownPopup.IsOpen = true;
            }
            _popupHasOpened = true;
            OnDropDownOpened(new RoutedPropertyChangedEventArgs<bool>(oldValue, newValue, DropDownOpenedEvent));
        }

        protected void CloseDropDown(bool oldValue, bool newValue)
        {
            if (_popupHasOpened)
            {
                if (SelectionAdapter != null)
                {
                    SelectionAdapter.SelectedItem = null;
                }
                if (DropDownPopup != null)
                {
                    DropDownPopup.IsOpen = false;
                }
                OnDropDownClosed(new RoutedPropertyChangedEventArgs<bool>(oldValue, newValue, DropDownClosedEvent));
            }
        }

        protected override void OnKeyDown(KeyEventArgs e)
        {
            if (e == null)
            {
                throw new ArgumentNullException();
            }

            base.OnKeyDown(e);

            if (e.Handled || !IsEnabled)
            {
                return;
            }
            if (IsDropDownOpen)
            {
                if (SelectionAdapter != null)
                {
                    SelectionAdapter.HandleKeyDown(e);
                    if (e.Handled)
                    {
                        return;
                    }
                }

                switch (e.Key)
                {
                    case Key.F4:
                        IsDropDownOpen = !IsDropDownOpen;
                        e.Handled = true;
                        break;
                    case Key.Enter:
                    case Key.Escape:
                        OnAdapterSelectionComplete(this, new RoutedEventArgs());
                        e.Handled = true;
                        break;
                    default:
                        e.Handled = false;
                        break;
                }
            }
        }

        void IUpdateVisualState.UpdateVisualState(bool useTransitions)
        {
            UpdateVisualState(useTransitions);
        }

        internal virtual void UpdateVisualState(bool useTransitions)
        {
            VisualStateManager.GoToState(this, IsDropDownOpen ? VisualStates.StatePopupOpened : VisualStates.StatePopupClosed, useTransitions);
            Interaction.UpdateVisualStateBase(useTransitions);
        }
    }
}
---- Semantic diagnostics *before* transformation ----

---- Semantic diagnostics *after* transformation ----
D:\a\1\s\Dev\Dev2.Runtime.Configuration\CustomControls\AutoCompleteBox.cs(106,42): error CS0136: A local or parameter named 'source' cannot be declared in this scope because that name is used in an enclosing local scope to define a local or parameter,D:\a\1\s\Dev\Dev2.Runtime.Configuration\CustomControls\AutoCompleteBox.cs(116,32): error CS0165: Use of unassigned local variable 'source',D:\a\1\s\Dev\Dev2.Runtime.Configuration\CustomControls\AutoCompleteBox.cs(233,42): error CS0136: A local or parameter named 'source' cannot be declared in this scope because that name is used in an enclosing local scope to define a local or parameter,D:\a\1\s\Dev\Dev2.Runtime.Configuration\CustomControls\AutoCompleteBox.cs(242,13): error CS0165: Use of unassigned local variable 'source',D:\a\1\s\Dev\Dev2.Runtime.Configuration\CustomControls\AutoCompleteBox.cs(265,38): error CS0128: A local variable or function named 'source' is already defined in this scope,D:\a\1\s\Dev\Dev2.Runtime.Configuration\CustomControls\AutoCompleteBox.cs(269,21): error CS0165: Use of unassigned local variable 'source',D:\a\1\s\Dev\Dev2.Runtime.Configuration\CustomControls\AutoCompleteBox.cs(336,13): error CS0165: Use of unassigned local variable 'source',D:\a\1\s\Dev\Dev2.Runtime.Configuration\CustomControls\AutoCompleteBox.cs(400,38): error CS0128: A local variable or function named 'source' is already defined in this scope,D:\a\1\s\Dev\Dev2.Runtime.Configuration\CustomControls\AutoCompleteBox.cs(400,49): error CS0165: Use of unassigned local variable 'source',D:\a\1\s\Dev\Dev2.Runtime.Configuration\CustomControls\AutoCompleteBox.cs(432,17): error CS0841: Cannot use local variable 'source' before it is declared,D:\a\1\s\Dev\Dev2.Runtime.Configuration\CustomControls\AutoCompleteBox.cs(457,42): error CS0136: A local or parameter named 'autoCompleteBox' cannot be declared in this scope because that name is used in an enclosing local scope to define a local or parameter
######################################################################


######################################################################
Nr: 19 - UsePatternMatchingRewriterR8
Filepath: D:\a\1\s\Dev\Dev2.Studio.Core.Tests\Merge\ConflictRowListTests.cs
Description: Error: The created Syntax Tree is semantically incorrect.
------------------------------------------------------------------------
---- Original Tree ----
using Dev2.Core.Tests.Merge.Utils;
using Dev2.ViewModels.Merge;
using Microsoft.VisualStudio.TestTools.UnitTesting;

namespace Dev2.Core.Tests.Merge
{
    [TestClass]
    public class ConflictRowListTests : MergeTestUtils
    {
        [TestMethod]
        public void ConflictRowList_Constructor()
        {
            var conflictRowList = CreateConflictRowList();

            Assert.AreEqual(6, conflictRowList.Count);
            Assert.AreEqual(6, conflictRowList.Count);

            Assert.IsNotNull(conflictRowList[0].Current);
            Assert.IsNotNull(conflictRowList[0].Different);

            Assert.IsNotNull(conflictRowList[1].Current);
            Assert.IsNotNull(conflictRowList[1].Different);

            Assert.AreEqual(conflictRowList[0].Current, conflictRowList[0].Different);
            Assert.AreEqual(conflictRowList[0].Different, conflictRowList[0].Current);

            Assert.AreNotEqual(conflictRowList[0].Current, conflictRowList[1].Different);
            Assert.AreNotEqual(conflictRowList[0].Different, conflictRowList[1].Current);

            Assert.AreNotEqual(conflictRowList[1].Current, conflictRowList[0].Different);
            Assert.AreNotEqual(conflictRowList[1].Different, conflictRowList[0].Current);

            var toolConflictRow = conflictRowList[0] as ToolConflictRow;
            if (toolConflictRow != null)
            {
                Assert.IsNotNull(toolConflictRow.UniqueId);
                Assert.IsNotNull(toolConflictRow.Connectors);
                Assert.IsFalse(toolConflictRow.HasConflict);
            } else
            {
                Assert.Fail();
            }

            var toolConflictRow2 = conflictRowList[2] as ToolConflictRow;
            if (toolConflictRow2 != null)
            {
                Assert.IsNotNull(toolConflictRow2.UniqueId);
                Assert.IsNotNull(toolConflictRow2.Connectors);
                Assert.IsFalse(toolConflictRow2.HasConflict);
            } else
            {
                Assert.Fail();
            }

            // Validate User Interface properties are Visible
            Assert.IsFalse(toolConflictRow.IsMergeVisible);
            Assert.IsFalse(toolConflictRow2.IsMergeVisible);
        }
    }
}

---- Transformed Tree ----
using Dev2.Core.Tests.Merge.Utils;
using Dev2.ViewModels.Merge;
using Microsoft.VisualStudio.TestTools.UnitTesting;

namespace Dev2.Core.Tests.Merge
{
    [TestClass]
    public class ConflictRowListTests : MergeTestUtils
    {
        [TestMethod]
        public void ConflictRowList_Constructor()
        {
            var conflictRowList = CreateConflictRowList();

            Assert.AreEqual(6, conflictRowList.Count);
            Assert.AreEqual(6, conflictRowList.Count);

            Assert.IsNotNull(conflictRowList[0].Current);
            Assert.IsNotNull(conflictRowList[0].Different);

            Assert.IsNotNull(conflictRowList[1].Current);
            Assert.IsNotNull(conflictRowList[1].Different);

            Assert.AreEqual(conflictRowList[0].Current, conflictRowList[0].Different);
            Assert.AreEqual(conflictRowList[0].Different, conflictRowList[0].Current);

            Assert.AreNotEqual(conflictRowList[0].Current, conflictRowList[1].Different);
            Assert.AreNotEqual(conflictRowList[0].Different, conflictRowList[1].Current);

            Assert.AreNotEqual(conflictRowList[1].Current, conflictRowList[0].Different);
            Assert.AreNotEqual(conflictRowList[1].Different, conflictRowList[0].Current);

            if (conflictRowList[0] is ToolConflictRow toolConflictRow)
            {
                Assert.IsNotNull(toolConflictRow.UniqueId);
                Assert.IsNotNull(toolConflictRow.Connectors);
                Assert.IsFalse(toolConflictRow.HasConflict);
            } else
            {
                Assert.Fail();
            }

            if (conflictRowList[2] is ToolConflictRow toolConflictRow2)
            {
                Assert.IsNotNull(toolConflictRow2.UniqueId);
                Assert.IsNotNull(toolConflictRow2.Connectors);
                Assert.IsFalse(toolConflictRow2.HasConflict);
            } else
            {
                Assert.Fail();
            }

            // Validate User Interface properties are Visible
            Assert.IsFalse(toolConflictRow.IsMergeVisible);
            Assert.IsFalse(toolConflictRow2.IsMergeVisible);
        }
    }
}

---- Semantic diagnostics *before* transformation ----

---- Semantic diagnostics *after* transformation ----
D:\a\1\s\Dev\Dev2.Studio.Core.Tests\Merge\ConflictRowListTests.cs(54,28): error CS0165: Use of unassigned local variable 'toolConflictRow',D:\a\1\s\Dev\Dev2.Studio.Core.Tests\Merge\ConflictRowListTests.cs(55,28): error CS0165: Use of unassigned local variable 'toolConflictRow2'
######################################################################


######################################################################
Nr: 20 - UsePatternMatchingRewriterR8
Filepath: D:\a\1\s\Dev\Dev2.CustomControls\Converters\MultipleBoolToEnabledConverter.cs
Description: Error: The created Syntax Tree is semantically incorrect.
------------------------------------------------------------------------
---- Original Tree ----
using System;
using System.Globalization;
using System.Windows.Data;

namespace Dev2.CustomControls.Converters
{
    public class MultipleBoolToEnabledConverter : IMultiValueConverter
    {
        #region Implementation of IMultiValueConverter

        /// <summary>
        ///     Converts source values to a value for the binding target. The data binding engine calls this method when it
        ///     propagates the values from source bindings to the binding target.
        /// </summary>
        /// <returns>
        ///     A converted value.If the method returns null, the valid null value is used.A return value of
        ///     <see cref="T:System.Windows.DependencyProperty" />.<see cref="F:System.Windows.DependencyProperty.UnsetValue" />
        ///     indicates that the converter did not produce a value, and that the binding will use the
        ///     <see cref="P:System.Windows.Data.BindingBase.FallbackValue" /> if it is available, or else will use the default
        ///     value.A return value of <see cref="T:System.Windows.Data.Binding" />.
        ///     <see cref="F:System.Windows.Data.Binding.DoNothing" /> indicates that the binding does not transfer the value or
        ///     use the <see cref="P:System.Windows.Data.BindingBase.FallbackValue" /> or the default value.
        /// </returns>
        /// <param name="values">
        ///     The array of values that the source bindings in the
        ///     <see cref="T:System.Windows.Data.MultiBinding" /> produces. The value
        ///     <see cref="F:System.Windows.DependencyProperty.UnsetValue" /> indicates that the source binding has no value to
        ///     provide for conversion.
        /// </param>
        /// <param name="targetType">The type of the binding target property.</param>
        /// <param name="parameter">The converter parameter to use.</param>
        /// <param name="culture">The culture to use in the converter.</param>
        public object Convert(object[] values, Type targetType, object parameter, CultureInfo culture)
        {
            foreach (object value in values)
            {
                var tmpval = value as bool?;
                if (tmpval != null && !tmpval.GetValueOrDefault())
                {
                    return false;
                }

            }
            return true;
        }

        /// <summary>
        ///     Converts a binding target value to the source binding values.
        /// </summary>
        /// <returns>
        ///     An array of values that have been converted from the target value back to the source values.
        /// </returns>
        /// <param name="value">The value that the binding target produces.</param>
        /// <param name="targetTypes">
        ///     The array of types to convert to. The array length indicates the number and types of values
        ///     that are suggested for the method to return.
        /// </param>
        /// <param name="parameter">The converter parameter to use.</param>
        /// <param name="culture">The culture to use in the converter.</param>
        public object[] ConvertBack(object value, Type[] targetTypes, object parameter, CultureInfo culture) => new object[] { };

        #endregion
    }
}
---- Transformed Tree ----
using System;
using System.Globalization;
using System.Windows.Data;

namespace Dev2.CustomControls.Converters
{
    public class MultipleBoolToEnabledConverter : IMultiValueConverter
    {
        #region Implementation of IMultiValueConverter

        /// <summary>
        ///     Converts source values to a value for the binding target. The data binding engine calls this method when it
        ///     propagates the values from source bindings to the binding target.
        /// </summary>
        /// <returns>
        ///     A converted value.If the method returns null, the valid null value is used.A return value of
        ///     <see cref="T:System.Windows.DependencyProperty" />.<see cref="F:System.Windows.DependencyProperty.UnsetValue" />
        ///     indicates that the converter did not produce a value, and that the binding will use the
        ///     <see cref="P:System.Windows.Data.BindingBase.FallbackValue" /> if it is available, or else will use the default
        ///     value.A return value of <see cref="T:System.Windows.Data.Binding" />.
        ///     <see cref="F:System.Windows.Data.Binding.DoNothing" /> indicates that the binding does not transfer the value or
        ///     use the <see cref="P:System.Windows.Data.BindingBase.FallbackValue" /> or the default value.
        /// </returns>
        /// <param name="values">
        ///     The array of values that the source bindings in the
        ///     <see cref="T:System.Windows.Data.MultiBinding" /> produces. The value
        ///     <see cref="F:System.Windows.DependencyProperty.UnsetValue" /> indicates that the source binding has no value to
        ///     provide for conversion.
        /// </param>
        /// <param name="targetType">The type of the binding target property.</param>
        /// <param name="parameter">The converter parameter to use.</param>
        /// <param name="culture">The culture to use in the converter.</param>
        public object Convert(object[] values, Type targetType, object parameter, CultureInfo culture)
        {
            foreach (object value in values)
            {
                if (value is bool? tmpval && !tmpval.GetValueOrDefault())
                {
                    return false;
                }

            }
            return true;
        }

        /// <summary>
        ///     Converts a binding target value to the source binding values.
        /// </summary>
        /// <returns>
        ///     An array of values that have been converted from the target value back to the source values.
        /// </returns>
        /// <param name="value">The value that the binding target produces.</param>
        /// <param name="targetTypes">
        ///     The array of types to convert to. The array length indicates the number and types of values
        ///     that are suggested for the method to return.
        /// </param>
        /// <param name="parameter">The converter parameter to use.</param>
        /// <param name="culture">The culture to use in the converter.</param>
        public object[] ConvertBack(object value, Type[] targetTypes, object parameter, CultureInfo culture) => new object[] { };

        #endregion
    }
}
---- Semantic diagnostics *before* transformation ----

---- Semantic diagnostics *after* transformation ----
D:\a\1\s\Dev\Dev2.CustomControls\Converters\MultipleBoolToEnabledConverter.cs(48,30): error CS8116: It is not legal to use nullable type 'bool?' in a pattern; use the underlying type 'bool' instead.
######################################################################


######################################################################
Nr: 21 - UsePatternMatchingRewriterR8
Filepath: D:\a\1\s\Dev\Dev2.Studio.Core\AppResources\Converters\StringToIntInRangeConverter.cs
Description: Error: The created Syntax Tree is semantically incorrect.
------------------------------------------------------------------------
---- Original Tree ----
using System;
using System.Globalization;
using System.Windows.Data;

namespace Dev2.Studio.Core.AppResources.Converters
{
    public class StringToIntInRangeConverter : IValueConverter
    {
        public object Convert(object value, Type targetType, object parameter, CultureInfo culture)
        {
            var intValue = value as int?;
            if (intValue != null && intValue == 0)
            {
                return string.Empty;
            }
            var parameterString = parameter as string;
            if (!string.IsNullOrWhiteSpace(parameterString))
            {
                var stringValue = parameterString.Split('-');
                var minValue = int.Parse(stringValue[0]);
                var maxValue = int.Parse(stringValue[1]);
                if (intValue >= minValue && intValue <= maxValue)
                {
                    return value;
                }
                if (intValue > minValue || intValue > maxValue)
                {
                    return value;
                }
            }
            return value;
        }

        public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture)
        {
            const int intValue = 0;
            var stringValue = value as string;
            if (string.IsNullOrWhiteSpace(stringValue))
            {
                return intValue;
            }

            return value;
        }
    }
}

---- Transformed Tree ----
using System;
using System.Globalization;
using System.Windows.Data;

namespace Dev2.Studio.Core.AppResources.Converters
{
    public class StringToIntInRangeConverter : IValueConverter
    {
        public object Convert(object value, Type targetType, object parameter, CultureInfo culture)
        {
            if (value is int? intValue && intValue == 0)
            {
                return string.Empty;
            }
            var parameterString = parameter as string;
            if (!string.IsNullOrWhiteSpace(parameterString))
            {
                var stringValue = parameterString.Split('-');
                var minValue = int.Parse(stringValue[0]);
                var maxValue = int.Parse(stringValue[1]);
                if (intValue >= minValue && intValue <= maxValue)
                {
                    return value;
                }
                if (intValue > minValue || intValue > maxValue)
                {
                    return value;
                }
            }
            return value;
        }

        public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture)
        {
            const int intValue = 0;
            var stringValue = value as string;
            if (string.IsNullOrWhiteSpace(stringValue))
            {
                return intValue;
            }

            return value;
        }
    }
}

---- Semantic diagnostics *before* transformation ----

---- Semantic diagnostics *after* transformation ----
D:\a\1\s\Dev\Dev2.Studio.Core\AppResources\Converters\StringToIntInRangeConverter.cs(11,26): error CS8116: It is not legal to use nullable type 'int?' in a pattern; use the underlying type 'int' instead.,D:\a\1\s\Dev\Dev2.Studio.Core\AppResources\Converters\StringToIntInRangeConverter.cs(21,21): error CS0165: Use of unassigned local variable 'intValue'
######################################################################


######################################################################
Nr: 22 - UsePatternMatchingRewriterR8
Filepath: D:\a\1\s\Dev\Dev2.Studio.Core\AppResources\Converters\MultipleBoolToVisibilityValueConverter.cs
Description: Error: The created Syntax Tree is semantically incorrect.
------------------------------------------------------------------------
---- Original Tree ----
using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Windows;
using System.Windows.Data;


namespace Dev2.Studio.Core.AppResources.Converters
{
    public class MultipleBoolToVisibilityValueConverter : IMultiValueConverter
    {
        #region Implementation of IMultiValueConverter

        /// <summary>
        /// Converts source values to a value for the binding target. The data binding engine calls this method when it propagates the values from source bindings to the binding target.
        /// </summary>
        /// <returns>
        /// A converted value.If the method returns null, the valid null value is used.A return value of <see cref="T:System.Windows.DependencyProperty"/>.<see cref="F:System.Windows.DependencyProperty.UnsetValue"/> indicates that the converter did not produce a value, and that the binding will use the <see cref="P:System.Windows.Data.BindingBase.FallbackValue"/> if it is available, or else will use the default value.A return value of <see cref="T:System.Windows.Data.Binding"/>.<see cref="F:System.Windows.Data.Binding.DoNothing"/> indicates that the binding does not transfer the value or use the <see cref="P:System.Windows.Data.BindingBase.FallbackValue"/> or the default value.
        /// </returns>
        /// <param name="values">The array of values that the source bindings in the <see cref="T:System.Windows.Data.MultiBinding"/> produces. The value <see cref="F:System.Windows.DependencyProperty.UnsetValue"/> indicates that the source binding has no value to provide for conversion.</param><param name="targetType">The type of the binding target property.</param><param name="parameter">The converter parameter to use.</param><param name="culture">The culture to use in the converter.</param>
        public object Convert(object[] values, Type targetType, object parameter, CultureInfo culture)
        {
            var boolValues = new List<bool>();

            foreach (object value in values)
            {
                var item = value as bool?;
                if (item != null)
                {
                    boolValues.Add(item.GetValueOrDefault());
                }
            }

            if(boolValues.Any(c => !c))
            {
                return Visibility.Collapsed;
            }

            return Visibility.Visible;
        }

        /// <summary>
        /// Converts a binding target value to the source binding values.
        /// </summary>
        /// <returns>
        /// An array of values that have been converted from the target value back to the source values.
        /// </returns>
        /// <param name="value">The value that the binding target produces.</param><param name="targetTypes">The array of types to convert to. The array length indicates the number and types of values that are suggested for the method to return.</param><param name="parameter">The converter parameter to use.</param><param name="culture">The culture to use in the converter.</param>
        public object[] ConvertBack(object value, Type[] targetTypes, object parameter, CultureInfo culture) => new object[] { };

        #endregion
    }
}

---- Transformed Tree ----
using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Windows;
using System.Windows.Data;


namespace Dev2.Studio.Core.AppResources.Converters
{
    public class MultipleBoolToVisibilityValueConverter : IMultiValueConverter
    {
        #region Implementation of IMultiValueConverter

        /// <summary>
        /// Converts source values to a value for the binding target. The data binding engine calls this method when it propagates the values from source bindings to the binding target.
        /// </summary>
        /// <returns>
        /// A converted value.If the method returns null, the valid null value is used.A return value of <see cref="T:System.Windows.DependencyProperty"/>.<see cref="F:System.Windows.DependencyProperty.UnsetValue"/> indicates that the converter did not produce a value, and that the binding will use the <see cref="P:System.Windows.Data.BindingBase.FallbackValue"/> if it is available, or else will use the default value.A return value of <see cref="T:System.Windows.Data.Binding"/>.<see cref="F:System.Windows.Data.Binding.DoNothing"/> indicates that the binding does not transfer the value or use the <see cref="P:System.Windows.Data.BindingBase.FallbackValue"/> or the default value.
        /// </returns>
        /// <param name="values">The array of values that the source bindings in the <see cref="T:System.Windows.Data.MultiBinding"/> produces. The value <see cref="F:System.Windows.DependencyProperty.UnsetValue"/> indicates that the source binding has no value to provide for conversion.</param><param name="targetType">The type of the binding target property.</param><param name="parameter">The converter parameter to use.</param><param name="culture">The culture to use in the converter.</param>
        public object Convert(object[] values, Type targetType, object parameter, CultureInfo culture)
        {
            var boolValues = new List<bool>();

            foreach (object value in values)
            {
                if (value is bool? item)
                {
                    boolValues.Add(item.GetValueOrDefault());
                }
            }

            if(boolValues.Any(c => !c))
            {
                return Visibility.Collapsed;
            }

            return Visibility.Visible;
        }

        /// <summary>
        /// Converts a binding target value to the source binding values.
        /// </summary>
        /// <returns>
        /// An array of values that have been converted from the target value back to the source values.
        /// </returns>
        /// <param name="value">The value that the binding target produces.</param><param name="targetTypes">The array of types to convert to. The array length indicates the number and types of values that are suggested for the method to return.</param><param name="parameter">The converter parameter to use.</param><param name="culture">The culture to use in the converter.</param>
        public object[] ConvertBack(object value, Type[] targetTypes, object parameter, CultureInfo culture) => new object[] { };

        #endregion
    }
}

---- Semantic diagnostics *before* transformation ----

---- Semantic diagnostics *after* transformation ----
D:\a\1\s\Dev\Dev2.Studio.Core\AppResources\Converters\MultipleBoolToVisibilityValueConverter.cs(39,30): error CS8116: It is not legal to use nullable type 'bool?' in a pattern; use the underlying type 'bool' instead.
######################################################################


######################################################################
Nr: 23 - UsePatternMatchingRewriterR8
Filepath: D:\a\1\s\Dev\Warewolf.Studio.ViewModels\ServiceTestViewModel.cs
Description: Error: The created Syntax Tree is semantically incorrect.
------------------------------------------------------------------------
---- Original Tree ----
using System;
using System.Activities;
using System.Activities.Presentation.Model;
using System.Activities.Statements;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Linq;
using System.Reflection;
using System.Text.RegularExpressions;
using System.Windows;
using System.Windows.Input;
using System.Windows.Media;
using Caliburn.Micro;
using Dev2;
using Dev2.Activities;
using Dev2.Activities.SelectAndApply;
using Dev2.Common;
using Dev2.Common.Common;
using Dev2.Common.Interfaces;
using Dev2.Common.Interfaces.Diagnostics.Debug;
using Dev2.Common.Interfaces.Studio.Controller;
using Dev2.Common.Interfaces.Threading;
using Dev2.Common.Interfaces.Toolbox;
using Dev2.Communication;
using Dev2.Data;
using Dev2.Data.ServiceModel.Messages;
using Dev2.Data.SystemTemplates.Models;
using Dev2.Runtime.ServiceModel.Data;
using Dev2.Studio.Core;
using Dev2.Studio.Core.Activities.Utils;
using Dev2.Studio.Core.Messages;
using Dev2.Studio.Core.Network;
using Dev2.Studio.Interfaces;
using Microsoft.Practices.Prism.Commands;
using Microsoft.Practices.Prism.Mvvm;
using Unlimited.Applications.BusinessDesignStudio.Activities;
using Warewolf.Core;
using Warewolf.Resource.Errors;

namespace Warewolf.Studio.ViewModels
{
    public class ServiceTestViewModel : BindableBase, IServiceTestViewModel
    {
        readonly IExternalProcessExecutor _processExecutor;
        private IServiceTestModel _selectedServiceTest;
        private string _runAllTestsUrl;
        private string _runAllCoverageUrl;
        private string _testPassingResult;
        ObservableCollection<IServiceTestModel> _tests;
        private string _displayName;
        public IPopupController PopupController { get; }
        private string _errorMessage;
        private readonly IShellViewModel _shellViewModel;
        IContextualResourceModel _resourceModel;
        private string _serverName;
        private IWorkflowDesignerViewModel _workflowDesignerViewModel;
        readonly IEnumerable<Type> _types;
        
        public ServiceTestViewModel(IContextualResourceModel resourceModel, IAsyncWorker asyncWorker, IEventAggregator eventPublisher, IExternalProcessExecutor processExecutor, IWorkflowDesignerViewModel workflowDesignerViewModel, IPopupController popupController, IMessage msg, IEnumerable<Type> currentDomainTypes)
            : this(resourceModel, asyncWorker, eventPublisher, processExecutor, workflowDesignerViewModel, popupController)
        {
            _types = currentDomainTypes;
            PrePopulateTestsUsingDebugAsync(msg);
        }
        
        public ServiceTestViewModel(IContextualResourceModel resourceModel, IAsyncWorker asyncWorker, IEventAggregator eventPublisher, IExternalProcessExecutor processExecutor, IWorkflowDesignerViewModel workflowDesignerViewModel, IPopupController popupController, IMessage msg)
            : this(resourceModel, asyncWorker, eventPublisher, processExecutor, workflowDesignerViewModel, popupController)
        {
            _types = AppDomain.CurrentDomain.GetAssemblies().SelectMany(x => x.GetTypes());
            PrePopulateTestsUsingDebugAsync(msg);
        }

        public ServiceTestViewModel(IContextualResourceModel resourceModel, IAsyncWorker asyncWorker, IEventAggregator eventPublisher, IExternalProcessExecutor processExecutor, IWorkflowDesignerViewModel workflowDesignerViewModel, IPopupController popupController)
        {
            _processExecutor = processExecutor;
            AsyncWorker = asyncWorker;
            EventPublisher = eventPublisher;
            ResourceModel = resourceModel ?? throw new ArgumentNullException(nameof(resourceModel));
            ResourceModel.Environment.IsConnectedChanged += (sender, args) =>
            {
                ViewModelUtils.RaiseCanExecuteChanged(DeleteTestCommand);
                RefreshCommands();
            };

            ResourceModel.Environment.Connection.ReceivedResourceAffectedMessage += OnReceivedResourceAffectedMessage;
            SetServerName(resourceModel);
            DisplayName = resourceModel.DisplayName + " - Tests" + _serverName;

            ServiceTestCommandHandler = new ServiceTestCommandHandlerModel();
            PopupController = popupController;
            _shellViewModel = CustomContainer.Get<IShellViewModel>();
            RunAllTestsInBrowserCommand = new DelegateCommand(RunAllTestsInBrowser, IsServerConnected);
            RunAllTestCoverageInBrowserCommand = new DelegateCommand(RunAllCoverageInBrowser, IsServerConnected);
            RunAllTestsCommand = new DelegateCommand(RunAllTests, IsServerConnected);
            RunSelectedTestInBrowserCommand = new DelegateCommand(RunSelectedTestInBrowser, () => CanRunSelectedTestInBrowser);
            RunSelectedTestCommand = new DelegateCommand(RunSelectedTest, () => CanRunSelectedTest);
            StopTestCommand = new DelegateCommand(StopTest, () => CanStopTest);
            CreateTestCommand = new DelegateCommand(() => CreateTests());
            DeleteTestCommand = new DelegateCommand<IServiceTestModel>(DeleteTest, CanDeleteTest);
            DeleteTestStepCommand = new DelegateCommand<IServiceTestStep>(DeleteTestStep);
            DuplicateTestCommand = new DelegateCommand(DuplicateTest, () => CanDuplicateTest);
            RunAllTestsUrl = resourceModel.GetWorkflowUri("", UrlType.Tests)?.ToString();
            RunAllCoverageUrl = resourceModel.GetWorkflowUri("", UrlType.Coverage)?.ToString();

            UpdateHelpDescriptor(Resources.Languages.HelpText.ServiceTestGenericHelpText);

            WorkflowDesignerViewModel = workflowDesignerViewModel;
            WorkflowDesignerViewModel.IsTestView = true;
            WorkflowDesignerViewModel.ItemSelectedAction = ItemSelectedAction;
            IsLoading = true;
            if (Tests == null)
            {
                PrePopulateTestsUsingDebugAsync(null);
            }
        }

        public bool IsLoading
        {
            get => _isLoading;
            set
            {
                _isLoading = value;
                OnPropertyChanged(() => IsLoading);
            }
        }

        private void PrePopulateTestsUsingDebugAsync(IMessage msg)
        {
            AsyncWorker.Start(GetTests, models =>
            {
                var dummyTest = new DummyServiceTest(CreateTests) {TestName = "Create a new test."};
                models.Add(dummyTest);
                SelectedServiceTest = dummyTest;
                Tests = models;
                if (msg != null)
                {
                    if (msg is NewTestFromDebugMessage test)
                    {
                        var newTest = test;
                        if (newTest.RootItems == null)
                        {
                            throw new ArgumentNullException(nameof(newTest.RootItems));
                        }

                        PrePopulateTestsUsingDebug(newTest.RootItems);
                    }
                    else
                    {
                        throw new ArgumentException("expected " + nameof(NewTestFromDebugMessage) + " but got " +
                                                    msg.GetType().Name);
                    }
                }

                IsLoading = false;
            }, OnError);
        }

        public void PrePopulateTestsUsingDebug(List<IDebugTreeViewItemViewModel> models)
        {
            CreateTests(true);
            if (_canAddFromDebug)
            {
                WorkflowDesignerViewModel?.UpdateWorkflowInputDataViewModel(ResourceModel);
                AddFromDebug(models);
            }
        }

        private void AddFromDebug(IEnumerable<IDebugTreeViewItemViewModel> models)
        {
            foreach (var debugState in models)
            {
                if (debugState is DebugStateTreeViewItemViewModel debugItem && debugItem.Parent == null)
                {
                    if (debugItem.Content == null)
                    {
                        continue;
                    }
                    ValidateAddStepType(debugState, debugItem.Content);
                }
            }
        }

        void ValidateAddStepType(IDebugTreeViewItemViewModel debugState, IDebugState debugItemContent)
        {
            if (debugItemContent.ActivityType == ActivityType.Workflow && debugItemContent.OriginatingResourceID == ResourceModel.ID)
            {
                ProcessInputsAndOutputs(debugItemContent);
                UpdateInputValues(debugItemContent);
            }
            else if (debugItemContent.ActivityType == ActivityType.Workflow && debugItemContent.ActualType == nameof(DsfActivity))
            {
                AddStepFromDebug(debugState, debugItemContent);
            }
            else
            {
                if (debugItemContent.ActivityType != ActivityType.Workflow && debugItemContent.ActualType != nameof(DsfCommentActivity))
                {
                    ProcessRegularDebugItem(debugItemContent, debugState);
                }
            }
        }

        private void UpdateInputValues(IDebugState debugItemContent)
        {
            foreach (var item in debugItemContent.Inputs)
            {
                foreach (var res in item?.ResultsList)
                {
                    var variable = res?.Variable?.Replace("[[", "");
                    variable = variable?.Replace("]]", "");
                    var inputsValue = WorkflowDesignerViewModel?.GetWorkflowInputs(variable);
                    if (res != null)
                    {
                        res.Value = inputsValue;
                    }
                }
            }
        }

        private void ProcessRegularDebugItem(IDebugState debugItemContent, IDebugTreeViewItemViewModel debugState)
        {
            var actualType = debugItemContent.ActualType;
            if (actualType == nameof(DsfDecision) || actualType == nameof(TestMockDecisionStep))
            {
                DecisionFromDebug(debugState, debugItemContent);
            }
            else if (actualType == nameof(DsfSwitch) || actualType == nameof(TestMockSwitchStep))
            {
                SwitchFromDebug(debugState, debugItemContent);
            }
            else if (actualType == nameof(DsfEnhancedDotNetDllActivity))
            {
                EnhancedDotNetDllFromDebug(debugState, debugItemContent);
            }
            else
            {
                AddStepFromDebug(debugState, debugItemContent);
            }
        }

        void EnhancedDotNetDllFromDebug(IDebugTreeViewItemViewModel debugState, IDebugState debugItemContent)
        {
            var exists = FindExistingStep(debugItemContent.ID.ToString());
            IServiceTestStep serviceTestStep = null;
            if (exists == null)
            {
                serviceTestStep = SelectedServiceTest.AddDebugItemTestStep(debugItemContent, new ObservableCollection<IServiceTestOutput>());

                if (serviceTestStep != null)
                {
                    SetStepIcon(serviceTestStep.ActivityType, serviceTestStep);
                }
            }

            if (debugState.Children != null && debugState.Children.Count > 0)
            {
                AddChildren(debugState, serviceTestStep);
            }
        }

        void SwitchFromDebug(IDebugTreeViewItemViewModel itemContent, IDebugState debugItemContent)
        {
            var processFlowSwitch = ProcessFlowSwitch(WorkflowDesignerViewModel.GetModelItem(debugItemContent.WorkSurfaceMappingId, debugItemContent.ParentID.GetValueOrDefault()));
            if (processFlowSwitch != null)
            {
                if (debugItemContent?.Outputs.Count > 0 && debugItemContent.Outputs[0].ResultsList?.Count > 0)
                {
                    processFlowSwitch.StepOutputs[0].Value = debugItemContent.Outputs[0].ResultsList[0].Value;
                }

                var debugStateActivityTypeName = itemContent.ActivityTypeName;
                if (debugStateActivityTypeName == nameof(TestMockSwitchStep))
                {
                    processFlowSwitch.MockSelected = true;
                    processFlowSwitch.AssertSelected = false;
                    processFlowSwitch.StepOutputs[0].Value = debugItemContent.AssertResultList[0].ResultsList[0].Value;
                }
            }
        }

        void DecisionFromDebug(IDebugTreeViewItemViewModel itemContent, IDebugState debugItemContent)
        {
            var processFlowDecision = ProcessFlowDecision(WorkflowDesignerViewModel.GetModelItem(debugItemContent.WorkSurfaceMappingId, debugItemContent.ParentID.GetValueOrDefault()));
            if (processFlowDecision != null)
            {
                if (debugItemContent?.Outputs.Count > 0 && debugItemContent.Outputs[0].ResultsList?.Count > 0)
                {
                    processFlowDecision.StepOutputs[0].Value = debugItemContent.Outputs[0].ResultsList[0].Value;
                }
                var debugStateActivityTypeName = itemContent.ActivityTypeName;
                if (debugStateActivityTypeName == nameof(TestMockDecisionStep))
                {
                    processFlowDecision.MockSelected = true;
                    processFlowDecision.AssertSelected = false;
                    processFlowDecision.StepOutputs[0].Value = debugItemContent.AssertResultList[0].ResultsList[0].Value;
                }
            }
        }

        void ProcessInputsAndOutputs(IDebugState debugItemContent)
        {
            if (debugItemContent.StateType == StateType.Start)
            {
                SetInputs(debugItemContent);
            }
            else
            {
                if (debugItemContent.StateType == StateType.End)
                {
                    SetOutputs(debugItemContent);
                }
            }
        }

        void AddStepFromDebug(IDebugTreeViewItemViewModel debugState, IDebugState debugItemContent)
        {
            if (debugState.Children != null && debugState.Children.Count > 0)
            {
                AddChildDebugItems(debugItemContent, debugState, null);
            }
            else
            {
                var outputs = debugItemContent.Outputs;
                var exists = FindExistingStep(debugItemContent.ID.ToString());
                if (exists == null)
                {
                    var serviceTestStep = SelectedServiceTest.AddDebugItemTestStep(debugItemContent, new ObservableCollection<IServiceTestOutput>());
                    var hasOutputs = outputs?.Select(item => item.ResultsList).All(list => list.Count > 0);
                    var debugStateActivityTypeName = debugState.ActivityTypeName;

                    if (outputs?.Count > 0 && hasOutputs.HasValue && hasOutputs.Value)
                    {
                        AddOutputs(outputs, serviceTestStep);
                    }
                    else
                    {
                        SetStepOutputs(serviceTestStep, debugStateActivityTypeName);
                    }
                    if (serviceTestStep != null)
                    {
                        SetMockTestStep(debugItemContent, serviceTestStep, debugStateActivityTypeName);
                        SetStepIcon(serviceTestStep.ActivityType, serviceTestStep);
                    }
                }
            }
        }

        void SetMockTestStep(IDebugState debugItemContent, IServiceTestStep serviceTestStep, string debugStateActivityTypeName)
        {
            if (debugStateActivityTypeName == nameof(TestMockStep))
            {
                var model = WorkflowDesignerViewModel.GetModelItem(debugItemContent.WorkSurfaceMappingId, debugItemContent.ID);
                var val = model.GetCurrentValue();
                serviceTestStep.MockSelected = true;
                serviceTestStep.AssertSelected = false;
                serviceTestStep.Type = StepType.Mock;
                serviceTestStep.ActivityType = val.GetType().Name;
            }
        }

        void SetStepOutputs(IServiceTestStep serviceTestStep, string debugStateActivityTypeName)
        {
            var type = _types?.FirstOrDefault(x => x.Name == debugStateActivityTypeName);
            if (type == null) return;
            var act = Activator.CreateInstance(type) as IDev2Activity;
            if (serviceTestStep != null)
            {
                serviceTestStep.StepOutputs = AddOutputs(act?.GetOutputs(), serviceTestStep).ToObservableCollection();
            }
        }

        void AddChildDebugItems(IDebugState debugItemContent, IDebugTreeViewItemViewModel debugState, IServiceTestStep parent)
        {
            if (NullParent(debugItemContent, ref parent))
            {
                return;
            }

            if (parent.ActivityType == nameof(DsfForEachActivity))
            {
                ForEachParent(debugItemContent, debugState, parent);
            }
            else if (parent.ActivityType == nameof(GateActivity))
            {
                GateParent(debugItemContent, debugState, parent);
            }
            else if (parent.ActivityType == nameof(SuspendExecutionActivity))
            {
                SuspendExecutionParent(debugItemContent, debugState, parent);
            }
            else if (parent.ActivityType == nameof(DsfSequenceActivity))
            {
                var model = WorkflowDesignerViewModel.GetModelItem(debugItemContent.WorkSurfaceMappingId, debugItemContent.ID);
                if (model?.GetCurrentValue() is DsfSequenceActivity sequence)
                {
                    parent.ActivityID = Guid.Parse(sequence.UniqueID);
                    AddChildren(debugState, parent);
                }
            }
            else
            {
                AddNotContainerActivityType(debugState, parent);
            }
            while (parent != null)
            {
                var child = parent;
                if (child.Parent == null)
                {
                    var exists = FindExistingStep(child.ActivityID.ToString());
                    if (exists == null)
                    {
                        SelectedServiceTest.TestSteps.Add(child);
                    }
                }
                parent = child.Parent;
            }
        }

        void AddNotContainerActivityType(IDebugTreeViewItemViewModel debugState, IServiceTestStep parent)
        {
            if (parent.ActivityType == nameof(DsfActivity))
            {
                if (debugState is DebugStateTreeViewItemViewModel childItem)
                {
                    var content = childItem.Content;
                    var outputs = content.Outputs;
                    AddOutputs(outputs, parent);
                    SetStepIcon(parent.ActivityType, parent);
                }
            }
            else
            {
                AddChildren(debugState, parent);
            }
        }

        void GateParent(IDebugState debugItemContent, IDebugTreeViewItemViewModel debugState, IServiceTestStep parent)
        {
            var model = WorkflowDesignerViewModel?.GetModelItem(debugItemContent.WorkSurfaceMappingId, debugItemContent.ID);
            if (model?.GetCurrentValue() is GateActivity gateActivity && debugState.Children.LastOrDefault() is DebugStateTreeViewItemViewModel childItem)
            {
                var act = gateActivity.DataFunc.Handler as IDev2Activity;
                if (act != null)
                {
                    var guid = Guid.Parse(act.UniqueID);
                    childItem.Content.ID = guid;
                }

                var childItemContent = childItem.Content;
                var outputs = childItemContent.Outputs;

                var exists = parent.Children.FirstOrDefault(a => a.ActivityID == childItemContent.ID);
                if (exists == null)
                {
                    AddGateChildStep(parent, childItem, act, childItemContent, outputs);
                }
            }
        }

        void AddGateChildStep(IServiceTestStep parent, DebugStateTreeViewItemViewModel childItem, IDev2Activity act, IDebugState childItemContent, List<IDebugItem> outputs)
        {
            var childStep = CreateAssertChildStep(parent, childItemContent, childItemContent.ID);
            if (outputs.Count > 0)
            {
                AddOutputs(outputs, childStep);
            }
            else
            {
                AddOutputs(act?.GetOutputs(), childStep);
            }
            SetStepIcon(childStep.ActivityType, childStep);
            parent.Children.Add(childStep);
            if (childItem.Children?.Count > 0)
            {
                AddChildDebugItems(childItemContent, childItem, childStep);
            }
        }

        void SuspendExecutionParent(IDebugState debugItemContent, IDebugTreeViewItemViewModel debugState, IServiceTestStep parent)
        {
            var model = WorkflowDesignerViewModel?.GetModelItem(debugItemContent.WorkSurfaceMappingId, debugItemContent.ID);
            if (model?.GetCurrentValue() is SuspendExecutionActivity suspendExecutionActivity && debugState.Children.LastOrDefault() is DebugStateTreeViewItemViewModel childItem)
            {
                var act = suspendExecutionActivity.SaveDataFunc.Handler as IDev2Activity;
                if (act != null)
                {
                    var guid = Guid.Parse(act.UniqueID);
                    childItem.Content.ID = guid;
                }

                var childItemContent = childItem.Content;
                var outputs = childItemContent.Outputs;

                var exists = parent.Children.FirstOrDefault(a => a.ActivityID == childItemContent.ID);
                if (exists == null)
                {
                    AddSuspendExecutionChildStep(parent, childItem, act, childItemContent, outputs);
                }
            }
        }

        void AddSuspendExecutionChildStep(IServiceTestStep parent, IDebugTreeViewItemViewModel childItem, IDev2Activity act, IDebugState childItemContent, List<IDebugItem> outputs)
        {
            var childStep = CreateAssertChildStep(parent, childItemContent, childItemContent.ID);
            if (outputs.Count > 0)
            {
                AddOutputs(outputs, childStep);
            }
            else
            {
                AddOutputs(act?.GetOutputs(), childStep);
            }
            SetStepIcon(childStep.ActivityType, childStep);
            parent.Children.Add(childStep);
            if (childItem.Children?.Count > 0)
            {
                AddChildDebugItems(childItemContent, childItem, childStep);
            }
        }

        void ForEachParent(IDebugState debugItemContent, IDebugTreeViewItemViewModel debugState, IServiceTestStep parent)
        {
            var model = WorkflowDesignerViewModel?.GetModelItem(debugItemContent.WorkSurfaceMappingId, debugItemContent.ID);
            if (model?.GetCurrentValue() is DsfForEachActivity forEach && debugState.Children.LastOrDefault() is DebugStateTreeViewItemViewModel childItem)
            {
                var act = forEach.DataFunc.Handler as IDev2Activity;
                if (act != null)
                {
                    var guid = Guid.Parse(act.UniqueID);
                    childItem.Content.ID = guid;
                }

                var childItemContent = childItem.Content;
                var outputs = childItemContent.Outputs;

                var exists = parent.Children.FirstOrDefault(a => a.ActivityID == childItemContent.ID);
                if (exists == null)
                {
                    AddForEachChildStep(parent, childItem, act, childItemContent, outputs);
                }
            }
        }

        void AddForEachChildStep(IServiceTestStep parent, DebugStateTreeViewItemViewModel childItem, IDev2Activity act, IDebugState childItemContent, List<IDebugItem> outputs)
        {
            var childStep = CreateAssertChildStep(parent, childItemContent, childItemContent.ID);
            if (outputs.Count > 0)
            {
                AddOutputs(outputs, childStep);
            }
            else
            {
                AddOutputs(act?.GetOutputs(), childStep);
            }
            SetStepIcon(childStep.ActivityType, childStep);
            parent.Children.Add(childStep);
            if (childItem.Children?.Count > 0)
            {
                AddChildDebugItems(childItemContent, childItem, childStep);
            }
        }

        static IServiceTestStep CreateAssertChildStep(IServiceTestStep parent, IDebugState childItemContent, Guid childItemContentId)
        {
            var serviceTestOutputs = new ObservableCollection<IServiceTestOutput>();
            var childStep = new ServiceTestStep(childItemContentId, childItemContent.ActualType, serviceTestOutputs, StepType.Assert)
            {
                StepDescription = childItemContent.DisplayName,
                Parent = parent,
                Type = StepType.Assert
            };
            return childStep;
        }

        bool NullParent(IDebugState debugItemContent, ref IServiceTestStep parent)
        {
            if (parent == null)
            {
                var testStep = new ServiceTestStep(debugItemContent.ID, "", new ObservableCollection<IServiceTestOutput>(), StepType.Assert)
                {
                    StepDescription = debugItemContent.DisplayName,
                    Parent = null
                };

                var seqTypeName = nameof(DsfSequenceActivity);
                var forEachTypeName = nameof(DsfForEachActivity);
                var selectApplyTypeName = nameof(DsfSelectAndApplyActivity);
                var suspendTypeName = nameof(SuspendExecutionActivity);
                var serviceName = nameof(DsfActivity);
                var actualType = debugItemContent.ActualType;
                if (actualType == seqTypeName)
                {
                    SetStepIcon(typeof(DsfSequenceActivity), testStep);
                    testStep.ActivityType = seqTypeName;
                    testStep.ActivityID = debugItemContent.WorkSurfaceMappingId;
                    parent = testStep;
                }
                else if (actualType == forEachTypeName)
                {
                    SetStepIcon(typeof(DsfForEachActivity), testStep);
                    testStep.ActivityType = forEachTypeName;
                    testStep.ActivityID = debugItemContent.WorkSurfaceMappingId;
                    parent = testStep;
                }
                else if (actualType == selectApplyTypeName)
                {
                    SetStepIcon(typeof(DsfSelectAndApplyActivity), testStep);
                    testStep.ActivityType = selectApplyTypeName;
                    testStep.ActivityID = debugItemContent.WorkSurfaceMappingId;
                    parent = testStep;
                }
                else if (actualType == suspendTypeName)
                {
                    SetStepIcon(typeof(SuspendExecutionActivity), testStep);
                    testStep.ActivityType = selectApplyTypeName;
                    testStep.ActivityID = debugItemContent.WorkSurfaceMappingId;
                    parent = testStep;
                }
                else if (actualType == serviceName)
                {
                    SetStepIcon(typeof(DsfActivity), testStep);
                    testStep.ActivityType = serviceName;
                    parent = testStep;
                }
                else
                {
                    return true;
                }
            }
            return false;
        }

        void AddChildren(IDebugTreeViewItemViewModel debugState, IServiceTestStep parent)
        {
            foreach (var debugTreeViewItemViewModel in debugState.Children)
            {
                if (debugTreeViewItemViewModel is DebugStateTreeViewItemViewModel childItem && childItem.ActivityTypeName != "DsfSelectAndApplyActivity")
                {
                    var childItemContent = childItem.Content;
                    var outputs = childItemContent.Outputs;

                    var contentId = childItemContent.ID;
                    if (childItemContent.ActualType == "DsfActivity")
                    {
                        contentId = childItemContent.WorkSurfaceMappingId;
                    }

                    var exists = parent.Children.FirstOrDefault(a => a.ActivityID == contentId);
                    if (exists == null)
                    {
                        AddNewDebugStateChild(parent, childItem, childItemContent, outputs, contentId);
                    }
                    else
                    {
                        AddExistingDebugState(childItem, outputs, exists);
                    }
                }
            }
        }

        void AddExistingDebugState(DebugStateTreeViewItemViewModel childItem, List<IDebugItem> outputs, IServiceTestStep exists)
        {
            if (exists is ServiceTestStep serviceTestStep)
            {
                if (outputs.Count > 0)
                {
                    AddOutputs(outputs, serviceTestStep);
                }
                else
                {
                    var type = _types?.FirstOrDefault(x => x.Name == childItem.ActivityTypeName);
                    if (type == null) return;
                    var act = Activator.CreateInstance(type) as IDev2Activity;
                    serviceTestStep.StepOutputs = AddOutputs(act?.GetOutputs(), serviceTestStep).ToObservableCollection();
                }
            }
        }

        void AddNewDebugStateChild(IServiceTestStep parent, DebugStateTreeViewItemViewModel childItem, IDebugState childItemContent, List<IDebugItem> outputs, Guid contentId)
        {
            var childStep = CreateAssertChildStep(parent, childItemContent, contentId);
            if (outputs.Count > 0)
            {
                AddOutputs(outputs, childStep);
            }
            else
            {
                var type = _types?.FirstOrDefault(x => x.Name == childItem.ActivityTypeName);
                if (type != null)
                {
                    var act = Activator.CreateInstance(type) as IDev2Activity;
                    childStep.StepOutputs = AddOutputs(act?.GetOutputs(), childStep).ToObservableCollection();
                }
            }
            SetStepIcon(childStep.ActivityType, childStep);
            if (!(childStep.StepOutputs?.Count > 0)) return;
            parent.Children.Add(childStep);
            if (childItem.Children?.Count > 0)
            {
                AddChildDebugItems(childItemContent, childItem, childStep);
            }
        }

        void AddOutputs(List<IDebugItem> outputs, IServiceTestStep serviceTestStep)
        {
            var serviceTestOutputs = new ObservableCollection<IServiceTestOutput>();
            if (outputs == null || outputs.Count < 1)
            {
                serviceTestOutputs.Add(new ServiceTestOutput("", "", "", "")
                {
                    AssertOp = "",
                    AddStepOutputRow = s => { serviceTestStep?.AddNewOutput(s); }
                });
                serviceTestStep.StepOutputs = serviceTestOutputs;
                return;
            }
            foreach (var output in outputs)
            {
                AddOutput(output, serviceTestStep, serviceTestOutputs);
            }
            serviceTestStep.StepOutputs = serviceTestOutputs;
        }

        void AddOutput(IDebugItem output, IServiceTestStep serviceTestStep, ObservableCollection<IServiceTestOutput> serviceTestOutputs)
        {
            var actualOutputs = output.ResultsList.Where(result => result.Type == DebugItemResultType.Variable);
            foreach (var debugItemResult in actualOutputs)
            {
                var variable = debugItemResult.Variable;
                var value = debugItemResult.Value;
                var assertOp = "=";
                if (debugItemResult.MoreLink != null)
                {
                    if (serviceTestStep.ActivityType == nameof(DsfEnhancedDotNetDllActivity))
                    {
                        var realValue = WebClient.DownloadString(debugItemResult.MoreLink);
                        value = realValue.TrimEnd(Environment.NewLine.ToCharArray());
                    }
                    else
                    {
                        assertOp = "Contains";
                    }
                }
                var serviceTestOutput = new ServiceTestOutput(variable ?? "", value, "", "")
                {
                    AssertOp = assertOp,
                    AddStepOutputRow = s => { serviceTestStep?.AddNewOutput(s); }
                };
                serviceTestOutputs.Add(serviceTestOutput);
            }
        }

        void SetInputs(IDebugState inputState)
        {
            if (inputState != null)
            {
                foreach (var debugItem in inputState.Inputs)
                {
                    var variable = debugItem.ResultsList.First().Variable.Replace("[[", "").Replace("]]", "");
                    var value = debugItem.ResultsList.First().Value;
                    var serviceTestInput = SelectedServiceTest?.Inputs?.FirstOrDefault(input => input.Variable.Equals(variable));
                    if (serviceTestInput != null)
                    {
                        serviceTestInput.Value = value;
                    }
                }
            }
        }

        public IWarewolfWebClient WebClient
        {
            private get => _webClient ?? CustomContainer.Get<IWarewolfWebClient>();
            set => _webClient = value;
        }

        void SetOutputs(IDebugState outPutState)
        {
            var dataList = new DataListModel();
            dataList.Create(ResourceModel.DataList, ResourceModel.DataList);
            if (outPutState == null)
            {
                return;
            }
            var outPuts = new ObservableCollection<IServiceTestOutput>();
            foreach (var debugItem in outPutState.Outputs)
            {
                foreach (var debugItemResult in debugItem.ResultsList)
                {
                    SetResultListOutputs(outPutState, dataList, outPuts, debugItemResult);
                }
            }
            SelectedServiceTest.Outputs = outPuts;
            SelectedServiceTest.ErrorExpected = outPutState.HasError;
            SelectedServiceTest.NoErrorExpected = !outPutState.HasError;
            SelectedServiceTest.ErrorContainsText = outPutState.ErrorMessage;
        }

        void SetResultListOutputs(IDebugState outPutState, DataListModel dataList, ObservableCollection<IServiceTestOutput> outPuts, IDebugItemResult debugItemResult)
        {
            var variable = debugItemResult.Variable.Replace("[[", "").Replace("]]", "");
            var value = debugItemResult.Value;
            var serviceTestOutput = new ServiceTestOutput(variable, value, "", "");
            var output = serviceTestOutput;
            serviceTestOutput.AddNewAction = () => ((ServiceTestModel)SelectedServiceTest).AddRow(output, dataList);

            if (!string.IsNullOrEmpty(debugItemResult.MoreLink))
            {
                if (outPutState.ActualType == nameof(DsfEnhancedDotNetDllActivity))
                {
                    var realValue = WebClient.DownloadString(debugItemResult.MoreLink);
                    value = realValue.TrimEnd(Environment.NewLine.ToCharArray());
                }
                else
                {
                    serviceTestOutput.AssertOp = "Contains";
                }
            }
            serviceTestOutput.Value = value;
            outPuts.Add(serviceTestOutput);
        }

        static void OnError(Exception exception)
        {
            Dev2Logger.Error(exception, GlobalConstants.WarewolfError);
            throw exception;
        }

        void ItemSelectedAction(ModelItem modelItem)
        {
            if (modelItem == null)
            {
                return;
            }

            var itemType = GetInnerItemType(modelItem);
            if (itemType == typeof(Flowchart) || itemType == typeof(ActivityBuilder))
            {
                return;
            }
            if (itemType == typeof(DsfForEachActivity))
            {
                ProcessForEach(modelItem);
            }
            else if (itemType == typeof(DsfSelectAndApplyActivity))
            {
                ProcessSelectAndApply(modelItem);
            }
            else if (itemType == typeof(DsfSequenceActivity))
            {
                ProcessSequence(modelItem);
            }
            else if (itemType == typeof(GateActivity))
            {
                ProcessGate(modelItem);
            }
            else if (itemType == typeof(SuspendExecutionActivity))
            {
                ProcessSuspendExecution(modelItem);
            }
            else if (itemType == typeof(DsfEnhancedDotNetDllActivity))
            {
                ProcessEnhancedDotNetDll(modelItem);
            }
            else if (itemType == typeof(FlowSwitch<string>))
            {
                ProcessFlowSwitch(modelItem);
            }
            else if (itemType == typeof(DsfSwitch))
            {
                ProcessSwitch(modelItem);
            }
            else if (itemType == typeof(FlowDecision))
            {
                ProcessFlowDecision(modelItem);
            }
            else if (itemType == typeof(DsfDecision))
            {
                ProcessDecision(modelItem);
            }
            else
            {
                ProcessActivity(modelItem);
            }
        }

        static Type GetInnerItemType(ModelItem modelItem)
        {
            var itemType = modelItem.ItemType;
            if (modelItem.Content?.Value != null && itemType == typeof(FlowStep))
            {
                itemType = modelItem.Content.Value.ItemType;
            }
            return itemType;
        }

        void ProcessSequence(ModelItem modelItem)
        {
            var sequence = GetCurrentActivity<DsfSequenceActivity>(modelItem);
            var testStep = BuildParentsFromModelItem(modelItem);
            if (testStep != null)
            {
                AddSequence(sequence, testStep, testStep.Children);
                if (FindExistingStep(testStep.ActivityID.ToString()) == null)
                {
                    SelectedServiceTest.TestSteps.Add(testStep);
                }
            }
            else
            {
                AddSequence(sequence, null, SelectedServiceTest.TestSteps);
            }
        }

        void ProcessGate(ModelItem modelItem)
        {
            var gateActivity = GetCurrentActivity<GateActivity>(modelItem);
            AddGate(gateActivity, null, SelectedServiceTest.TestSteps);
        }

        void ProcessSuspendExecution(ModelItem modelItem)
        {
            var suspendExecutionActivity = GetCurrentActivity<SuspendExecutionActivity>(modelItem);
            AddSuspendExecution(suspendExecutionActivity, null, SelectedServiceTest.TestSteps);
        }

        void ProcessEnhancedDotNetDll(ModelItem modelItem)
        {
            var dotNetDllActivity = GetCurrentActivity<DsfEnhancedDotNetDllActivity>(modelItem);
            var buildParentsFromModelItem = BuildParentsFromModelItem(modelItem);
            if (buildParentsFromModelItem != null)
            {
                AddEnhancedDotNetDll(dotNetDllActivity, buildParentsFromModelItem, buildParentsFromModelItem.Children);
                if (FindExistingStep(buildParentsFromModelItem.ActivityID.ToString()) == null)
                {
                    SelectedServiceTest.TestSteps.Add(buildParentsFromModelItem);
                }
            }
            else
            {
                AddEnhancedDotNetDll(dotNetDllActivity, null, SelectedServiceTest.TestSteps);
            }
        }

        static T GetCurrentActivity<T>(ModelItem modelItem) where T : class
        {
            var activity = modelItem.GetCurrentValue() as T;
            if (activity == null && modelItem.Content?.Value != null)
            {
                activity = modelItem.Content.Value.GetCurrentValue() as T;
            }
            return activity;
        }

        void ProcessForEach(ModelItem modelItem)
        {
            var forEachActivity = GetCurrentActivity<DsfForEachActivity>(modelItem);
            AddForEach(forEachActivity, null, SelectedServiceTest.TestSteps);
        }

        void AddForEach(DsfForEachActivity forEachActivity, IServiceTestStep parent, ObservableCollection<IServiceTestStep> serviceTestSteps)
        {
            if (forEachActivity == null)
            {
                return;
            }
            var uniqueId = forEachActivity.UniqueID;
            var exists = serviceTestSteps.FirstOrDefault(a => a.ActivityID.ToString() == uniqueId);

            var type = typeof(DsfForEachActivity);
            var testStep = CreateMockChildStep(Guid.Parse(uniqueId), parent, type.Name, forEachActivity.DisplayName);
            SetStepIcon(type, testStep);
            var activity = forEachActivity.DataFunc.Handler;
            var act = activity as DsfNativeActivity<string>;
            var workFlowService = activity as DsfActivity;
            if (act != null)
            {
                if (act.GetType() == typeof(DsfSequenceActivity))
                {
                    AddSequence(act as DsfSequenceActivity, testStep, testStep.Children);
                }
                else
                {
                    AddChildActivity(act, testStep);
                }
            }
            else
            {
                if (activity.GetType() == typeof(DsfSelectAndApplyActivity))
                {
                    AddSelectAndApply(activity as DsfSelectAndApplyActivity, testStep, testStep.Children);
                }
                else
                {
                    if (activity.GetType() == type)
                    {
                        AddForEach(activity as DsfForEachActivity, testStep, testStep.Children);
                    }
                }
            }

            if (workFlowService != null)
            {
                AddChildActivity(workFlowService, testStep);
            }
            if (exists == null)
            {
                serviceTestSteps.Add(testStep);
            }
        }

        static IServiceTestStep CreateMockChildStep(Guid uniqueId, IServiceTestStep parent, string typeName, string displayName) => new ServiceTestStep(uniqueId, typeName, new ObservableCollection<IServiceTestOutput>(), StepType.Mock)
        {
            StepDescription = displayName,
            Parent = parent
        };

        void ProcessSelectAndApply(ModelItem modelItem)
        {
            var selectAndApplyActivity = GetCurrentActivity<DsfSelectAndApplyActivity>(modelItem);
            AddSelectAndApply(selectAndApplyActivity, null, SelectedServiceTest.TestSteps);
        }

        void AddSelectAndApply(DsfSelectAndApplyActivity selectApplyActivity, IServiceTestStep parent, ObservableCollection<IServiceTestStep> serviceTestSteps)
        {
            if (selectApplyActivity == null)
            {
                return;
            }
            var uniqueId = selectApplyActivity.UniqueID;
            var exists = serviceTestSteps.FirstOrDefault(a => a.ActivityID.ToString() == uniqueId);

            var type = typeof(DsfSelectAndApplyActivity);
            var testStep = CreateMockChildStep(Guid.Parse(uniqueId), parent, type.Name, selectApplyActivity.DisplayName);
            SetStepIcon(type, testStep);
            var activity = selectApplyActivity.ApplyActivityFunc.Handler;
            var act = activity as DsfNativeActivity<string>;
            var workFlowService = activity as DsfActivity;
            if (act != null)
            {
                if (act.GetType() == typeof(DsfSequenceActivity))
                {
                    AddSequence(act as DsfSequenceActivity, testStep, testStep.Children);
                }
                else
                {
                    AddChildActivity(act, testStep);
                }
            }
            else
            {
                if (activity != null && activity.GetType() == typeof(DsfForEachActivity))
                {
                    AddForEach(activity as DsfForEachActivity, testStep, testStep.Children);
                }
                else
                {
                    if (activity != null && activity.GetType() == typeof(DsfSelectAndApplyActivity))
                    {
                        AddSelectAndApply(activity as DsfSelectAndApplyActivity, testStep, testStep.Children);
                    }
                }
            }
            if (workFlowService != null)
            {
                AddChildActivity(workFlowService, testStep);
            }
            if (exists == null)
            {
                serviceTestSteps.Add(testStep);
            }
            else
            {
                AddMissingChild(serviceTestSteps, testStep);
            }
        }

        void AddSequence(DsfSequenceActivity sequence, IServiceTestStep parent, ObservableCollection<IServiceTestStep> serviceTestSteps)
        {
            if (sequence is null)
            {
                return;
            }
            var uniqueId = sequence.UniqueID;
            var exists = serviceTestSteps.FirstOrDefault(a => a.ActivityID.ToString() == uniqueId);

            var type = typeof(DsfSequenceActivity);
            var testStep = CreateMockChildStep(Guid.Parse(uniqueId), parent, type.Name, sequence.DisplayName);
            SetStepIcon(type, testStep);
            foreach (var activity in sequence.Activities)
            {
                AddSequenceActivity(testStep, activity);
            }
            if (exists == null)
            {
                serviceTestSteps.Add(testStep);
            }
            else
            {
                AddMissingChild(serviceTestSteps, testStep);
            }
        }

        void AddSequenceActivity(IServiceTestStep testStep, Activity activity)
        {
            if (activity is DsfNativeActivity<string> act)
            {
                if (act.GetType() == typeof(DsfSequenceActivity))
                {
                    AddSequence(act as DsfSequenceActivity, testStep, testStep.Children);
                }
                else
                {
                    AddChildActivity(act, testStep);
                }
            }
            else
            {
                if (activity is DsfNativeActivity<bool> act2)
                {
                    AddChildActivity(act2, testStep);
                }
                if (activity.GetType() == typeof(DsfForEachActivity))
                {
                    AddForEach(activity as DsfForEachActivity, testStep, testStep.Children);
                }
                else
                {
                    if (activity.GetType() == typeof(DsfSelectAndApplyActivity))
                    {
                        AddSelectAndApply(activity as DsfSelectAndApplyActivity, testStep, testStep.Children);
                    }
                }
            }
        }

        void AddGate(GateActivity gateActivity, IServiceTestStep parent, ObservableCollection<IServiceTestStep> serviceTestSteps)
        {
            if (gateActivity == null)
            {
                return;
            }
            var uniqueId = gateActivity.UniqueID;
            var exists = serviceTestSteps.FirstOrDefault(a => a.ActivityID.ToString() == uniqueId);

            var type = typeof(GateActivity);
            var testStep = CreateMockChildStep(Guid.Parse(uniqueId), parent, type.Name, gateActivity.DisplayName);
            SetStepIcon(type, testStep);
            var activity = gateActivity.DataFunc.Handler;
            var act = activity as DsfNativeActivity<string>;
            var workFlowService = activity as DsfActivity;
            if (act != null)
            {
                if (act.GetType() == typeof(DsfSequenceActivity))
                {
                    AddSequence(act as DsfSequenceActivity, testStep, testStep.Children);
                }
                else
                {
                    AddChildActivity(act, testStep);
                }
            }
            else
            {
                if (activity?.GetType() == typeof(DsfSelectAndApplyActivity))
                {
                    AddSelectAndApply(activity as DsfSelectAndApplyActivity, testStep, testStep.Children);
                }
                else
                {
                    if (activity?.GetType() == type)
                    {
                        AddGate(activity as GateActivity, testStep, testStep.Children);
                    }
                }
            }

            if (workFlowService != null)
            {
                AddChildActivity(workFlowService, testStep);
            }
            if (exists == null)
            {
                serviceTestSteps.Add(testStep);
            }
        }

        void AddSuspendExecution(SuspendExecutionActivity suspendExecutionActivity, IServiceTestStep parent, ICollection<IServiceTestStep> serviceTestSteps)
        {
            if (suspendExecutionActivity == null)
            {
                return;
            }
            var uniqueId = suspendExecutionActivity.UniqueID;
            var exists = serviceTestSteps.FirstOrDefault(a => a.ActivityID.ToString() == uniqueId);

            var type = typeof(SuspendExecutionActivity);
            var testStep = CreateMockChildStep(Guid.Parse(uniqueId), parent, type.Name, suspendExecutionActivity.DisplayName);
            SetStepIcon(type, testStep);
            var activity = suspendExecutionActivity.SaveDataFunc.Handler;
            var act = activity as DsfNativeActivity<string>;
            var workFlowService = activity as DsfActivity;
            if (act != null)
            {
                if (act.GetType() == typeof(DsfSequenceActivity))
                {
                    AddSequence(act as DsfSequenceActivity, testStep, testStep.Children);
                }
                else
                {
                    AddChildActivity(act, testStep);
                }
            }
            else
            {
                if (activity?.GetType() == typeof(DsfSelectAndApplyActivity))
                {
                    AddSelectAndApply(activity as DsfSelectAndApplyActivity, testStep, testStep.Children);
                }
                else
                {
                    if (activity?.GetType() == type)
                    {
                        AddSuspendExecution(activity as SuspendExecutionActivity, testStep, testStep.Children);
                    }
                }
            }

            if (workFlowService != null)
            {
                AddChildActivity(workFlowService, testStep);
            }
            if (exists == null)
            {
                serviceTestSteps.Add(testStep);
            }
        }

        void AddEnhancedDotNetDll(DsfEnhancedDotNetDllActivity dotNetDllActivity, IServiceTestStep parent, ObservableCollection<IServiceTestStep> serviceTestSteps)
        {
            if (dotNetDllActivity == null)
            {
                return;
            }
            var uniqueId = dotNetDllActivity.UniqueID;
            var exists = serviceTestSteps.FirstOrDefault(a => a.ActivityID.ToString() == uniqueId);

            var type = typeof(DsfEnhancedDotNetDllActivity);
            var testStep = CreateMockChildStep(Guid.Parse(uniqueId), parent, type.Name, dotNetDllActivity.DisplayName);
            SetStepIcon(type, testStep);
            if (exists == null)
            {
                serviceTestSteps.Add(testStep);
                AddEnhancedDotNetDllConstructor(dotNetDllActivity, testStep);
                foreach (var pluginAction in dotNetDllActivity.MethodsToRun)
                {
                    if (!pluginAction.IsVoid)
                    {
                        AddEnhancedDotNetDllMethod(pluginAction, testStep);
                    }
                }
            }
            else
            {
                AddMissingChild(serviceTestSteps, exists);
                var constructorStepExists = exists.Children.FirstOrDefault(step => step.ActivityID == dotNetDllActivity.Constructor.ID);
                if (constructorStepExists == null)
                {
                    AddEnhancedDotNetDllConstructor(dotNetDllActivity, exists);
                }
                foreach (var pluginAction in dotNetDllActivity.MethodsToRun)
                {
                    AddEnhancedDotNetDllMethodChild(pluginAction, exists);
                }
            }
        }

        void AddEnhancedDotNetDllMethodChild(IPluginAction pluginAction, IServiceTestStep exists)
        {
            if (!pluginAction.IsVoid)
            {
                var actionExists = exists.Children.FirstOrDefault(step => step.ActivityID == pluginAction.ID);
                if (actionExists != null)
                {
                    AddEnhancedDotNetDllMethod(pluginAction, exists);
                }
            }
        }

        static void AddMissingChild(ObservableCollection<IServiceTestStep> serviceTestSteps, IServiceTestStep testStep)
        {
            if (serviceTestSteps.Count < 1)
            {
                return;
            }
            foreach (var serviceTestStep in serviceTestSteps)
            {
                if (serviceTestStep.ActivityID != testStep.ActivityID)
                {
                    continue;
                }
                AddMissingChild(serviceTestStep, testStep);
            }
        }

        static void AddMissingChild(IServiceTestStep serviceTestStep, IServiceTestStep testStep)
        {
            if (serviceTestStep.Children.Count == testStep.Children.Count)
            {
                foreach (var child in testStep.Children)
                {
                    AddMissingChild(serviceTestStep.Children, child);
                }
            }
            else
            {
                foreach (var child in testStep.Children)
                {
                    AddMissingChild(serviceTestStep, testStep, child);
                }
            }
        }

        static void AddMissingChild(IServiceTestStep serviceTestStep, IServiceTestStep testStep, IServiceTestStep child)
        {
            var testSteps = serviceTestStep.Children.Where(a => a.ActivityID == child.ActivityID);
            if (!testSteps.Any())
            {
                var indexOf = testStep.Children.IndexOf(child);
                child.Parent = serviceTestStep;
                serviceTestStep.Children.Insert(indexOf, child);
            }
        }

        void AddChildActivity<T>(DsfNativeActivity<T> act, IServiceTestStep testStep)
        {
            var outputs = act.GetOutputs();
            if (outputs != null && outputs.Count > 0)
            {
                var serviceTestStep = CreateMockChildStep(Guid.Parse(act.UniqueID), testStep, act.GetType().Name, act.DisplayName);
                var serviceTestOutputs = outputs.Select(output => new ServiceTestOutput(output, "", "", "")
                {
                    HasOptionsForValue = false,
                    AddStepOutputRow = serviceTestStep.AddNewOutput
                }).Cast<IServiceTestOutput>().ToObservableCollection();
                serviceTestStep.StepOutputs = serviceTestOutputs;
                SetStepIcon(act.GetType(), serviceTestStep);
                testStep.Children.Add(serviceTestStep);
            }
        }

        void AddEnhancedDotNetDllConstructor(DsfEnhancedDotNetDllActivity dotNetConstructor, IServiceTestStep testStep)
        {
            var serviceTestStep = CreateMockChildStep(dotNetConstructor.Constructor.ID, testStep, testStep.ActivityType, dotNetConstructor.Constructor.ConstructorName);
            var serviceOutputs = new ObservableCollection<IServiceTestOutput>
            {
                new ServiceTestOutput(dotNetConstructor.ObjectName ?? "", "", "", "")
            };
            serviceTestStep.StepOutputs = serviceOutputs;
            SetStepIcon(testStep.ActivityType, serviceTestStep);
            testStep.Children.Insert(0, serviceTestStep);
        }

        void AddEnhancedDotNetDllMethod(IPluginAction pluginAction, IServiceTestStep testStep)
        {
            var serviceTestStep = CreateMockChildStep(pluginAction.ID, testStep, testStep.ActivityType, pluginAction.Method);
            var serviceOutputs = new ObservableCollection<IServiceTestOutput>
            {
                new ServiceTestOutput(pluginAction.OutputVariable ?? "", "", "", "")
            };
            serviceTestStep.StepOutputs = serviceOutputs;
            SetStepIcon(testStep.ActivityType, serviceTestStep);
            testStep.Children.Add(serviceTestStep);
        }

        void ProcessSwitch(ModelItem modelItem)
        {
            var cases = modelItem.GetProperty("Switches") as Dictionary<string, IDev2Activity>;
            var defaultCase = modelItem.GetProperty("Default") as List<IDev2Activity>;
            var uniqueId = modelItem.GetProperty("UniqueID").ToString();
            var exists = SelectedServiceTest.TestSteps.FirstOrDefault(a => a.ActivityID.ToString() == uniqueId);

            if (exists == null && SelectedServiceTest != null)
            {
                var switchOptions = cases?.Select(pair => pair.Key).ToList();
                if (defaultCase != null)
                {
                    switchOptions?.Insert(0, "Default");
                }
                var serviceTestOutputs = new ObservableCollection<IServiceTestOutput>();
                var serviceTestOutput = new ServiceTestOutput(GlobalConstants.ArmResultText, "", "", "")
                {
                    HasOptionsForValue = true,
                    OptionsForValue = switchOptions
                };
                serviceTestOutputs.Add(serviceTestOutput);
                if (SelectedServiceTest.AddTestStep(uniqueId, modelItem.GetProperty("DisplayName").ToString(), nameof(DsfSwitch), serviceTestOutputs) is ServiceTestStep serviceTestStep)
                {
                    SetStepIcon(typeof(DsfSwitch), serviceTestStep);
                }
            }
        }

        IServiceTestStep ProcessFlowSwitch(ModelItem modelItem)
        {
            if (modelItem == null)
            {
                return null;
            }
            var condition = modelItem.GetProperty("Expression");
            var activity = (DsfFlowNodeActivity<string>)condition;
            var flowSwitch = GetCurrentActivity<FlowSwitch<string>>(modelItem);
            if (flowSwitch == null)
            {
                var modelItemParent = modelItem.Parent;
                if (modelItemParent != null)
                {
                    flowSwitch = GetCurrentActivity<FlowSwitch<string>>(modelItemParent);
                    condition = modelItemParent.GetProperty("Expression");
                }
                activity = (DsfFlowNodeActivity<string>)condition;
            }
            if (flowSwitch != null)
            {
                var uniqueId = activity.UniqueID;
                var exists = SelectedServiceTest.TestSteps.FirstOrDefault(a => a.ActivityID.ToString() == uniqueId);

                if (exists == null && SelectedServiceTest != null)
                {
                    return CreateFlowSwitchTestStep(flowSwitch, uniqueId);
                }
            }
            return null;
        }

        IServiceTestStep CreateFlowSwitchTestStep(FlowSwitch<string> flowSwitch, string uniqueId)
        {
            var switchOptions = flowSwitch.Cases?.Select(pair => pair.Key).ToList();
            if (flowSwitch.Default != null)
            {
                switchOptions?.Insert(0, "Default");
            }
            var serviceTestOutputs = new ObservableCollection<IServiceTestOutput>();
            var serviceTestOutput = new ServiceTestOutput(GlobalConstants.ArmResultText, "", "", "")
            {
                HasOptionsForValue = true,
                OptionsForValue = switchOptions
            };
            serviceTestOutputs.Add(serviceTestOutput);
            var serviceTestStep = SelectedServiceTest.AddTestStep(uniqueId, flowSwitch.DisplayName, nameof(DsfSwitch), serviceTestOutputs);
            if (serviceTestStep != null)
            {
                SetStepIcon(typeof(DsfSwitch), serviceTestStep);
            }

            return serviceTestStep;
        }

        void ProcessActivity(ModelItem modelItem)
        {
            var step = BuildParentsFromModelItem(modelItem);
            if (step != null)
            {
                if (step.Parent == null)
                {
                    ProcessStepActivity(step);
                }
                else
                {
                    ProcessParentsActivities(step);
                }
            }
            else
            {
                var computedValue = modelItem.GetCurrentValue();
                var boolAct = computedValue as DsfActivityAbstract<bool>;
                var activityUniqueId = boolAct?.UniqueID;
                var activityDisplayName = boolAct?.DisplayName;
                var type = computedValue.GetType();
                var serviceTestOutputs = new ObservableCollection<IServiceTestOutput>();
                var alreadyAdded = CheckForExists(activityUniqueId, new List<string>(), activityDisplayName, type);
                if (alreadyAdded == null && activityUniqueId != null && type == typeof(DsfActivity))
                {
                    var testStep = CreateMockChildStep(Guid.Parse(activityUniqueId), null, type.Name, activityDisplayName);
                    serviceTestOutputs.Add(new ServiceTestOutput("", "", "", "")
                    {
                        AssertOp = "",
                        AddStepOutputRow = testStep.AddNewOutput,
                        IsSearchCriteriaEnabled = true
                    });
                    testStep.StepOutputs = serviceTestOutputs;
                    SelectedServiceTest.TestSteps.Add(testStep);
                    SetStepIcon(type, testStep);
                }
            }
        }

        void ProcessStepActivity(IServiceTestStep step)
        {
            var exists = FindExistingStep(step.ActivityID.ToString());
            if (exists == null)
            {
                SelectedServiceTest.TestSteps.Add(step);
            }
        }

        void ProcessParentsActivities(IServiceTestStep step)
        {
            var parent = step.Parent;
            while (parent != null)
            {
                var child = parent;
                if (child.Parent == null)
                {
                    var exists = FindExistingStep(step.ActivityID.ToString());
                    if (exists == null)
                    {
                        SelectedServiceTest.TestSteps.Add(child);
                    }
                }
                parent = child.Parent;
            }
        }

        IServiceTestStep BuildParentsFromModelItem(ModelItem modelItem)
        {
            var computedValue = modelItem.GetCurrentValue();
            if (computedValue is FlowStep && modelItem.Content?.Value != null)
            {
                computedValue = modelItem.Content.Value.GetCurrentValue();
            }
            var dsfActivityAbstract = computedValue as DsfActivityAbstract<string>;

            var activityUniqueId = dsfActivityAbstract?.UniqueID;
            var activityDisplayName = dsfActivityAbstract?.DisplayName;
            var outputs = dsfActivityAbstract?.GetOutputs();

            if (dsfActivityAbstract == null)
            {
                var boolAct = computedValue as DsfActivityAbstract<bool>;

                activityUniqueId = boolAct?.UniqueID;
                activityDisplayName = boolAct?.DisplayName;
                outputs = boolAct?.GetOutputs();
            }

            var type = computedValue.GetType();
            var item = modelItem.Parent;

            if (item != null && (item.ItemType != typeof(Flowchart) || item.ItemType == typeof(ActivityBuilder)))
            {
                var parentComputedValue = item.GetCurrentValue();
                if (parentComputedValue is FlowStep)
                {
                    var parentFlowStepUniqueId = GetParentFlowStepUniqueId(computedValue, item, ref parentComputedValue);
                    if (parentFlowStepUniqueId == activityUniqueId)
                    {
                        parentComputedValue = item.Content.Value.GetCurrentValue();
                    }
                    var parentActivityAbstract = parentComputedValue as DsfActivityAbstract<string>;
                    var parentActivityUniqueId = parentActivityAbstract?.UniqueID;
                    if (parentActivityAbstract == null)
                    {
                        var boolParentAct = computedValue as DsfActivityAbstract<bool>;
                        parentActivityUniqueId = boolParentAct?.UniqueID;
                    }
                    if (parentActivityUniqueId == activityUniqueId)
                    {
                        return CheckForExists(activityUniqueId, outputs, activityDisplayName, type);
                    }
                }

                if (outputs != null && outputs.Count > 0 && ServiceTestStepWithOutputs(activityUniqueId, activityDisplayName, outputs, type, item, out IServiceTestStep serviceTestStep) && ServiceTestStepWithOutputs(activityUniqueId, activityDisplayName, outputs, type, item, out IServiceTestStep testStep))
                {
                    return testStep;
                }

                if (ServiceTestStepGetParentType(item, out var serviceTestStep1))
                {
                    return serviceTestStep1;
                }
                return BuildParentsFromModelItem(item);
            }
            return CheckForExists(activityUniqueId, outputs, activityDisplayName, type);
        }

        static string GetParentFlowStepUniqueId(object computedValue, ModelItem item, ref object parentComputedValue)
        {
            if (item.Content?.Value != null)
            {
                parentComputedValue = item.Content.Value.GetCurrentValue();
            }
            var parentActivityAbstract = parentComputedValue as DsfActivityAbstract<string>;
            var parentActivityUniqueId = parentActivityAbstract?.UniqueID;
            if (parentActivityAbstract == null)
            {
                var boolParentAct = computedValue as DsfActivityAbstract<bool>;
                parentActivityUniqueId = boolParentAct?.UniqueID;
            }

            return parentActivityUniqueId;
        }

        IServiceTestStep CheckForExists(string activityUniqueId, List<string> outputs, string activityDisplayName, Type type)
        {
            var exists = FindExistingStep(activityUniqueId);
            if (exists == null && outputs != null && outputs.Count > 0)
            {
                var serviceTestStep = SelectedServiceTest.AddTestStep(activityUniqueId, activityDisplayName, type.Name, new ObservableCollection<IServiceTestOutput>());

                var serviceTestOutputs = outputs.Select(output =>
                {
                    return new ServiceTestOutput(output ?? "", "", "", "")
                    {
                        HasOptionsForValue = false,
                        AddStepOutputRow = s => { serviceTestStep?.AddNewOutput(s); }
                    };
                }).Cast<IServiceTestOutput>().ToList();
                if (serviceTestStep != null)
                {
                    serviceTestStep.StepOutputs = serviceTestOutputs.ToObservableCollection();
                    SetStepIcon(type, serviceTestStep);

                    return serviceTestStep;
                }
            }
            return exists;
        }

        bool ServiceTestStepWithOutputs(string uniqueId, string displayName, List<string> outputs, Type type, ModelItem item, out IServiceTestStep serviceTestStep)
        {
            var exists = FindExistingStep(uniqueId);
            if (exists == null)
            {
                var step = CreateServiceTestStep(Guid.Parse(uniqueId), displayName, type, new List<IServiceTestOutput>());
                var serviceTestOutputs = AddOutputsIfHasVariable(outputs, step);
                step.StepOutputs = serviceTestOutputs.ToObservableCollection();
                SetParentChild(item, step);
                {
                    serviceTestStep = step;
                    return true;
                }
            }
            serviceTestStep = null;
            return false;
        }

        static List<IServiceTestOutput> AddOutputsIfHasVariable(List<string> outputs, IServiceTestStep step)
        {
            var serviceTestOutputs =
                outputs.Select(output => new ServiceTestOutput(output ?? "", "", "", "")
                {
                    HasOptionsForValue = false,
                    AddStepOutputRow = step.AddNewOutput
                }).Cast<IServiceTestOutput>().ToList();
            return serviceTestOutputs;
        }

        static List<IServiceTestOutput> AddOutputs(List<string> outputs, IServiceTestStep step)
        {
            if (outputs == null || outputs.Count == 0)
            {
                return new List<IServiceTestOutput>
                {
                    new ServiceTestOutput("", "", "", "")
                    {
                        HasOptionsForValue = false,
                        AddStepOutputRow = step.AddNewOutput
                    }
                };
            }
            var serviceTestOutputs =
                outputs.Select(output => new ServiceTestOutput(output ?? "", "", "", "")
                {
                    HasOptionsForValue = false,
                    AddStepOutputRow = step.AddNewOutput
                }).Cast<IServiceTestOutput>().ToList();
            return serviceTestOutputs;
        }

        IServiceTestStep FindExistingStep(string uniqueId)
        {
            var exists = SelectedServiceTest.TestSteps.Flatten(step => step.Children).FirstOrDefault(a => a.ActivityID.ToString() == uniqueId);
            return exists;
        }

        bool ServiceTestStepGetParentType(ModelItem item, out IServiceTestStep serviceTestStep)
        {
            Type activityType = null;
            var uniqueId = string.Empty;
            var displayName = string.Empty;
            if (item.ItemType == typeof(DsfSequenceActivity))
            {
                if (item.GetCurrentValue() is DsfSequenceActivity act)
                {
                    uniqueId = act.UniqueID;
                    activityType = typeof(DsfSequenceActivity);
                    displayName = act.DisplayName;
                }
            }
            else if (item.ItemType == typeof(DsfForEachActivity))
            {
                if (item.GetCurrentValue() is DsfForEachActivity act)
                {
                    uniqueId = act.UniqueID;
                    activityType = typeof(DsfForEachActivity);
                    displayName = act.DisplayName;
                }
            }
            else if (item.ItemType == typeof(SuspendExecutionActivity))
            {
                if (item.GetCurrentValue() is SuspendExecutionActivity act)
                {
                    uniqueId = act.UniqueID;
                    activityType = typeof(SuspendExecutionActivity);
                    displayName = act.DisplayName;
                }
            }
            else
            {
                if (item.ItemType == typeof(DsfSelectAndApplyActivity) && item.GetCurrentValue() is DsfSelectAndApplyActivity act)
                {
                    uniqueId = act.UniqueID;
                    activityType = typeof(DsfSelectAndApplyActivity);
                    displayName = act.DisplayName;
                }
            }
            if (!string.IsNullOrWhiteSpace(uniqueId))
            {
                var exists = FindExistingStep(uniqueId);
                if (exists == null)
                {
                    var step = CreateServiceTestStep(Guid.Parse(uniqueId), displayName, activityType, new List<IServiceTestOutput>());
                    SetParentChild(item, step);
                    {
                        serviceTestStep = step;
                        return true;
                    }
                }
                serviceTestStep = SelectedServiceTest.TestSteps.Flatten(step => step.Children).FirstOrDefault(a => a.ActivityID.ToString() == uniqueId);
                return true;
            }
            serviceTestStep = null;
            return false;
        }

        IServiceTestStep CreateServiceTestStep(Guid uniqueId, string displayName, Type type, List<IServiceTestOutput> serviceTestOutputs)
        {
            var step = new ServiceTestStep(uniqueId, type.Name, serviceTestOutputs.ToObservableCollection(), StepType.Assert)
            {
                StepDescription = displayName
            };
            SetStepIcon(type, step);
            return step;
        }

        void SetParentChild(ModelItem item, IServiceTestStep step)
        {
            var parent = BuildParentsFromModelItem(item);
            if (parent != null)
            {
                step.Parent = parent;
                parent.Children.Add(step);
            }
        }

        void SetStepIcon(Type type, IServiceTestStep serviceTestStep)
        {
            SetStepIcon(type?.Name, serviceTestStep);
        }

        void SetStepIcon(string typeName, IServiceTestStep serviceTestStep)
        {
            if (string.IsNullOrEmpty(typeName) || serviceTestStep == null)
            {
                return;
            }
            var actTypeName = typeName;
            if (actTypeName == "DsfActivity")
            {
                if (serviceTestStep is ServiceTestStep serviceStep)
                {
                    serviceStep.StepIcon = Application.Current?.TryFindResource("Explorer-WorkflowService") as ImageSource;
                }
                return;
            }
            if (typeName == "DsfDecision" || typeName == "FlowDecision")
            {
                actTypeName = "DsfFlowDecisionActivity";
            }
            if (typeName == "DsfSwitch")
            {
                actTypeName = "DsfFlowSwitchActivity";
            }
            var type = _types?.FirstOrDefault(x => x.Name == actTypeName);
            if (type == null || !type.GetCustomAttributes().Any(a => a is ToolDescriptorInfo)) return;
            var desc = GetDescriptorFromAttribute(type);
            if (serviceTestStep is ServiceTestStep serviceStepAsTestStep)
            {
                serviceStepAsTestStep.StepIcon = Application.Current?.TryFindResource(desc.Icon) as ImageSource;
            }
        }

        static IToolDescriptor GetDescriptorFromAttribute(Type type)
        {
            var info = type.GetCustomAttributes(typeof(ToolDescriptorInfo)).First() as ToolDescriptorInfo;
            return new ToolDescriptor(info.Id, info.Designer, new WarewolfType(type.FullName, type.Assembly.GetName().Version, type.Assembly.Location), info.Name, info.Icon, type.Assembly.GetName().Version, true, info.Category, ToolType.Native, info.IconUri, info.FilterTag, info.ResourceToolTip, info.ResourceHelpText);
        }

        void ProcessDecision(ModelItem modelItem)
        {
            if (modelItem == null)
            {
                return;
            }
            var dds = modelItem.GetProperty("Conditions") as Dev2DecisionStack;
            var uniqueId = modelItem.GetProperty("UniqueID").ToString();
            var exists = SelectedServiceTest.TestSteps.FirstOrDefault(a => a.ActivityID.ToString() == uniqueId);

            if (exists == null && SelectedServiceTest != null)
            {
                var serviceTestOutputs = new ObservableCollection<IServiceTestOutput>();
                if (dds != null)
                {
                    var serviceTestOutput = new ServiceTestOutput(GlobalConstants.ArmResultText, "", "", "")
                    {
                        HasOptionsForValue = true,
                        OptionsForValue = new List<string> { dds.TrueArmText, dds.FalseArmText }
                    };
                    serviceTestOutputs.Add(serviceTestOutput);
                }
                if (SelectedServiceTest.AddTestStep(uniqueId, modelItem.GetProperty("DisplayName").ToString(), nameof(DsfDecision), serviceTestOutputs) is ServiceTestStep serviceTestStep)
                {
                    SetStepIcon(typeof(DsfDecision), serviceTestStep);
                }
            }
        }

        IServiceTestStep ProcessFlowDecision(ModelItem modelItem)
        {
            if (modelItem == null)
            {
                return null;
            }
            var condition = modelItem.GetProperty("Condition");
            string expression;
            string uniqueId;
            var activity = (DsfFlowNodeActivity<bool>)condition;
            if (activity != null)
            {
                uniqueId = activity.UniqueID;
                expression = activity.ExpressionText;
            }
            else
            {
                expression = modelItem.GetProperty("ExpressionText") as string;
                uniqueId = modelItem.GetProperty("UniqueID") as string;
            }
            if (!string.IsNullOrEmpty(expression))
            {
                var eval = Dev2DecisionStack.ExtractModelFromWorkflowPersistedData(expression);

                if (!string.IsNullOrEmpty(eval))
                {
                    var ser = new Dev2JsonSerializer();
                    var dds = ser.Deserialize<Dev2DecisionStack>(eval);

                    var exists = SelectedServiceTest.TestSteps?.FirstOrDefault(a => a.ActivityID.ToString() == uniqueId);

                    if (exists == null && SelectedServiceTest != null)
                    {
                        var serviceTestOutputs = new ObservableCollection<IServiceTestOutput>();
                        var serviceTestOutput = new ServiceTestOutput(GlobalConstants.ArmResultText, "", "", "")
                        {
                            HasOptionsForValue = true,
                            OptionsForValue = new List<string> { dds.TrueArmText, dds.FalseArmText }
                        };
                        serviceTestOutputs.Add(serviceTestOutput);
                        var serviceTestStep = SelectedServiceTest.AddTestStep(uniqueId, dds.DisplayText, nameof(DsfDecision), serviceTestOutputs);
                        SetStepIcon(typeof(DsfDecision), serviceTestStep);
                        return serviceTestStep;
                    }
                }
            }
            return null;
        }

        void SetServerName(IContextualResourceModel resourceModel)
        {
            if (resourceModel.Environment == null || resourceModel.Environment.IsLocalHost)
            {
                _serverName = string.Empty;
            }
            else
            {
                if (!resourceModel.Environment.IsLocalHost)
                {
                    _serverName = " - " + resourceModel.Environment.Name;
                }
            }
        }

        void OnReceivedResourceAffectedMessage(Guid resourceId, CompileMessageList changeList)
        {
            if (resourceId == ResourceModel.ID)
            {
                IsLoading = true;
                AsyncWorker.Start(() =>
                {
                    var contextModel = ResourceModel?.Environment?.ResourceRepository?.LoadContextualResourceModel(resourceId);
                    _resourceModel = contextModel;
                    return GetTests();
                }, models =>
                {
                    var dummyTest = new DummyServiceTest(CreateTests) { TestName = "Create a new test." };
                    models.Add(dummyTest);
                    var testName = SelectedServiceTest?.TestName;
                    SelectedServiceTest = dummyTest;
                    Tests = models;
                    SelectedServiceTest = _tests.FirstOrDefault(model => model.TestName == testName);
                    var mainViewModel = CustomContainer.Get<IShellViewModel>();
                    WorkflowDesignerViewModel = mainViewModel?.CreateNewDesigner(ResourceModel);
                    if (WorkflowDesignerViewModel != null)
                    {
                        WorkflowDesignerViewModel.ItemSelectedAction = ItemSelectedAction;
                    }
                    IsLoading = false;
                });
            }
        }

        bool IsServerConnected() => ResourceModel.Environment.IsConnected;

        void StopTest()
        {
            SelectedServiceTest.IsTestRunning = false;
            SelectedServiceTest.TestPending = true;
            ServiceTestCommandHandler.StopTest(ResourceModel);
        }

        void RunSelectedTestInBrowser()
        {
            var runSelectedTestUrl = GetWebRunUrlForTest(SelectedServiceTest);
            ServiceTestCommandHandler.RunSelectedTestInBrowser(runSelectedTestUrl, _processExecutor);
        }

        void RunSelectedTest()
        {
            if (SelectedServiceTest != null)
            {
                if (SelectedServiceTest.IsDirty)
                {
                    if (ShowPopupWhenDuplicates())
                    {
                        return;
                    }
                    Save(new List<IServiceTestModel> { SelectedServiceTest });
                    if (IsResourceDeleted)
                    {
                        return;
                    }
                }
                ServiceTestCommandHandler.RunSelectedTest(SelectedServiceTest, ResourceModel, AsyncWorker);
                ViewModelUtils.RaiseCanExecuteChanged(StopTestCommand);
            }
        }

        void RunAllTestsInBrowser()
        {
            ServiceTestCommandHandler.RunAllTestsInBrowser(IsDirty, RunAllTestsUrl, _processExecutor);
        }

        private void RunAllCoverageInBrowser()
        {
            ServiceTestCommandHandler.RunAllTestCoverageInBrowser(IsDirty, RunAllCoverageUrl, _processExecutor);
        }

        void RunAllTests()
        {
            ServiceTestCommandHandler.RunAllTestsCommand(IsDirty, RealTests().Where(model => model.Enabled), ResourceModel, AsyncWorker);
            SelectedServiceTest = null;
        }

        void DuplicateTest()
        {
            var testNumber = GetNewTestNumber(SelectedServiceTest.TestName);
            var duplicateTest = ServiceTestCommandHandler.DuplicateTest(SelectedServiceTest, testNumber);
            AddAndSelectTest(duplicateTest);
            foreach (var testStep in duplicateTest.TestSteps)
            {
                var typeName = testStep.ActivityType;
                SetStepIcon(typeName, testStep);
            }
        }

        bool CanDeleteTest(IServiceTestModel selectedTestModel) => GetPermissions() && selectedTestModel != null && !selectedTestModel.Enabled && IsServerConnected();

        IAsyncWorker AsyncWorker { get; }
        IEventAggregator EventPublisher { get; }

        void CreateTests(bool isFromDebug = false)
        {
            _canAddFromDebug = true;
            SelectedServiceTest = null;
            if (IsDirty)
            {
                PopupController?.Show(Resources.Languages.Core.ServiceTestSaveEditedTestsMessage, Resources.Languages.Core.ServiceTestSaveEditedTestsHeader, MessageBoxButton.OK, MessageBoxImage.Error, null, false, true, false, false, false, false);
                _canAddFromDebug = false;
                return;
            }

            var testNumber = GetNewTestNumber("Test");
            var testModel = ServiceTestCommandHandler.CreateTest(ResourceModel, testNumber, isFromDebug);
            AddAndSelectTest(testModel);
        }

        bool _canAddFromDebug;
        bool _isLoading;
        bool _isValid;
        bool _dirty;
        IWarewolfWebClient _webClient;

        int GetNewTestNumber(string testName)
        {
            var counter = 1;
            var fullName = testName + " " + counter;

            while (Contains(fullName))
            {
                counter++;
                fullName = testName + " " + counter;
            }

            return counter;
        }

        bool Contains(string nameToCheck)
        {
            var serviceTestModel = RealTests().FirstOrDefault(a => a.TestName.Contains(nameToCheck));
            return serviceTestModel != null;
        }

        void SetDuplicateTestTooltip()
        {
            if (SelectedServiceTest != null)
            {
                SelectedServiceTest.DuplicateTestTooltip = SelectedServiceTest.NewTest ? Resources.Languages.Tooltips.ServiceTestNewTestDisabledDuplicateSelectedTestTooltip : CanDuplicateTest ? Resources.Languages.Tooltips.ServiceTestDuplicateSelectedTestTooltip : Resources.Languages.Tooltips.ServiceTestDisabledDuplicateSelectedTestTooltip;
            }
        }

        void AddAndSelectTest(IServiceTestModel testModel)
        {
            var index = _tests.Count - 1;
            if (index >= 0)
            {
                _tests.Insert(index, testModel);
            }
            else
            {
                _tests.Add(testModel);
            }
            SelectedServiceTest = testModel;
            var isDirty = IsDirty;
            SetDisplayName(isDirty);
        }

        bool CanStopTest => SelectedServiceTest != null && SelectedServiceTest.IsTestRunning;
        bool CanRunSelectedTestInBrowser => SelectedServiceTest != null && !SelectedServiceTest.IsDirty && IsServerConnected();
        bool CanRunSelectedTest => GetPermissions() && IsServerConnected();
        bool CanDuplicateTest => GetPermissions() && SelectedServiceTest != null && !SelectedServiceTest.NewTest;

        public bool CanSave { get; set; }

        bool IsResourceDeleted { get; set; }

        static bool GetPermissions() => true;

        bool IsValidName()
        {
            if (SelectedServiceTest != null)
            {
                var name = SelectedServiceTest.TestName;
                ErrorMessage = string.Empty;
                if (string.IsNullOrEmpty(name))
                {
                    ErrorMessage = string.Format(ErrorResource.CannotBeNull, "'name'");
                }
                else if (NameHasInvalidCharacters(name))
                {
                    ErrorMessage = string.Format(ErrorResource.ContainsInvalidCharecters, "'name'");
                }
                else
                {
                    if (name.Trim() != name)
                    {
                        ErrorMessage = string.Format(ErrorResource.ContainsLeadingOrTrailingWhitespace, "'name'");
                    }
                }

                return string.IsNullOrEmpty(ErrorMessage);
            }
            return true;
        }

        bool AllNamesValid(IEnumerable<string> testNames)
        {
            foreach (var name in testNames)
            {
                ErrorMessage = string.Empty;
                if (string.IsNullOrEmpty(name))
                {
                    ErrorMessage = string.Format(ErrorResource.CannotBeNull, "'name'");
                    var popupController = CustomContainer.Get<IPopupController>();
                    popupController?.Show(Resources.Languages.Core.ServiceTestEmptyTestNameHeader, "Empty Test Name"
                        , MessageBoxButton.OK, MessageBoxImage.Error, null,
                        false, true, false, false, false, false);
                    return false;
                }
                else if (NameHasInvalidCharacters(name))
                {
                    ErrorMessage = string.Format(ErrorResource.ContainsInvalidCharecters, "'name'");
                    return false;
                }
                else if (name.Trim() != name)
                {
                    ErrorMessage = string.Format(ErrorResource.ContainsLeadingOrTrailingWhitespace, "'name'");
                    return false;
                }
                else
                {
                    continue;
                }
            }
            return true;
        }
        static bool NameHasInvalidCharacters(string name) => Regex.IsMatch(name, @"[^a-zA-Z0-9._\s-]");

        public string ErrorMessage
        {
            get => _errorMessage;
            set
            {
                _errorMessage = value;
                OnPropertyChanged(() => ErrorMessage);
            }
        }

        public IWorkflowDesignerViewModel WorkflowDesignerViewModel
        {
            get => _workflowDesignerViewModel;
            set
            {
                _workflowDesignerViewModel = value;
                OnPropertyChanged(() => WorkflowDesignerViewModel);
            }
        }

        public bool IsDirty
        {
            get
            {
                try
                {
                    if (_tests == null || _tests.Count <= 1)
                    {
                        return false;
                    }
                    var isDirty = _tests.Any(resource => resource.IsDirty || resource.NewTest);

                    var isConnected = ResourceModel.Environment.Connection.IsConnected;
                    _dirty = isDirty && isConnected;
                    _isValid = IsValidName();
                    CanSave = _isValid && _dirty;
                    SetDisplayName(_dirty);
                    return _dirty;
                }
                catch (Exception)
                {
                    return false;
                }
            }
        }

        public Guid ResourceID => ResourceModel?.ID ?? Guid.Empty;

        public void Save()
        {
            try
            {
                if (ShowPopupWhenDuplicates())
                {
                    return;
                }

                var serviceTestModels = RealTests().Where(a => a.IsDirty).ToList();
                Save(serviceTestModels);
                UpdateTestsFromResourceUpdate();
            }
            catch (Exception ex)
            {
                Dev2Logger.Error("Service test save error.", ex, GlobalConstants.WarewolfError);
            }
            finally
            {
                var isDirty = IsDirty;
                SetDisplayName(isDirty);
            }
        }

        void Save(List<IServiceTestModel> serviceTestModels)
        {
            if (!AllNamesValid(Tests.Select(p => p.TestName).ToList()))
            {
                return;
            }
            MarkPending(serviceTestModels);
            var serviceTestModelTos = serviceTestModels.Select(CreateServiceTestModelTo).ToList();

            var result = ResourceModel.Environment.ResourceRepository.SaveTests(ResourceModel, serviceTestModelTos);
            switch (result.Result)
            {
                case SaveResult.Success:
                    MarkTestsAsNotNew();
                    SetSelectedTestUrl();
                    break;
                case SaveResult.ResourceDeleted:
                    PopupController?.Show(Resources.Languages.Core.ServiceTestResourceDeletedMessage, Resources.Languages.Core.ServiceTestResourceDeletedHeader, MessageBoxButton.OK, MessageBoxImage.Error, null, false, true, false, false, false, false);
                    _shellViewModel.CloseResourceTestView(ResourceModel.ID, ResourceModel.ServerID, ResourceModel.Environment.EnvironmentID);
                    IsResourceDeleted = true;
                    break;
                case SaveResult.ResourceUpdated:
                    UpdateTestsFromResourceUpdate();
                    break;
                default:
                    throw new ArgumentOutOfRangeException();
            }
        }

        static void MarkPending(List<IServiceTestModel> serviceTestModels)
        {
            foreach (var serviceTestModel in serviceTestModels)
            {
                serviceTestModel.TestPending = true;
                if (serviceTestModel.TestSteps != null)
                {
                    MarkTestStepsPending(serviceTestModel);
                }

                if (serviceTestModel.Outputs == null)
                {
                    continue;
                }

                foreach (var testOutput in serviceTestModel.Outputs.OfType<ServiceTestOutput>())
                {
                    testOutput.TestPending = true;
                    if (testOutput.Result != null)
                    {
                        testOutput.Result.RunTestResult = RunResult.TestPending;
                    }
                }
            }
        }

        static void MarkTestStepsPending(IServiceTestModel serviceTestModel)
        {
            foreach (var serviceTestStep in serviceTestModel.TestSteps)
            {
                MarkChildrenPending(serviceTestStep);
                if (serviceTestStep.Children == null)
                {
                    continue;
                }

                var testSteps = serviceTestStep.Children.Flatten(step => step.Children);
                foreach (var testStep in testSteps)
                {
                    MarkChildrenPending(testStep);
                }
            }
        }

        static void MarkChildrenPending(IServiceTestStep serviceTestStep)
        {
            if (serviceTestStep is ServiceTestStep step)
            {
                step.TestPending = true;
                if (step.Result != null)
                {
                    step.Result.RunTestResult = RunResult.TestPending;
                }

                if (step.StepOutputs == null)
                {
                    return;
                }
                MarkStepOutputsPending(step);
            }
        }

        static void MarkStepOutputsPending(IServiceTestStep step)
        {
            foreach (var serviceTestOutput in step.StepOutputs)
            {
                if (serviceTestOutput is ServiceTestOutput stepOutput)
                {
                    stepOutput.TestPending = true;
                    if (stepOutput.Result != null)
                    {
                        stepOutput.Result.RunTestResult = RunResult.TestPending;
                    }
                }
            }
        }

        static IServiceTestModelTO CreateServiceTestModelTo(IServiceTestModel model) => new ServiceTestModelTO
        {
            TestName = model.TestName,
            ResourceId = model.ParentId,
            AuthenticationType = model.AuthenticationType,
            Enabled = model.Enabled,
            ErrorExpected = model.ErrorExpected,
            NoErrorExpected = model.NoErrorExpected,
            ErrorContainsText = model.ErrorContainsText,
            TestSteps = model.TestSteps?.Select(step => CreateServiceTestStepTo(step, null)).ToList() ?? new List<IServiceTestStep>(),
            Inputs = model.Inputs?.Select(CreateServiceTestInputsTo).ToList() ?? new List<IServiceTestInput>(),
            Outputs = model.Outputs?.Select(CreateServiceTestOutputTo).ToList() ?? new List<IServiceTestOutput>(),
            LastRunDate = model.LastRunDate,
            OldTestName = model.OldTestName,
            Password = model.Password,
            IsDirty = model.IsDirty,
            TestPending = model.TestPending,
            UserName = model.UserName,
            TestFailing = model.TestFailing,
            TestInvalid = model.TestInvalid,
            TestPassed = model.TestPassed
        };

        static IServiceTestOutput CreateServiceTestOutputTo(IServiceTestOutput output) => new ServiceTestOutputTO
        {
            Variable = output.Variable,
            Value = output.Value,
            From = output.From,
            To = output.To,
            AssertOp = output.AssertOp,
            HasOptionsForValue = output.HasOptionsForValue,
            OptionsForValue = output.OptionsForValue
        };

        static IServiceTestInput CreateServiceTestInputsTo(IServiceTestInput input) => new ServiceTestInputTO
        {
            Variable = input.Variable,
            Value = input.Value,
            EmptyIsNull = input.EmptyIsNull
        };

        static IServiceTestStep CreateServiceTestStepTo(IServiceTestStep step, IServiceTestStep parent)
        {
            var serviceTestStepTo = new ServiceTestStepTO(step.ActivityID, step.ActivityType, step.StepOutputs.Select(CreateServiceTestStepOutputsTo).ToObservableCollection(), step.Type)
            {
                Children = new ObservableCollection<IServiceTestStep>(),
                Parent = parent,
                StepDescription = step.StepDescription
            };
            if (step.Children != null)
            {
                foreach (var serviceTestStep in step.Children)
                {
                    serviceTestStepTo.Children.Add(CreateServiceTestStepTo(serviceTestStep, serviceTestStepTo));
                }
            }
            return serviceTestStepTo;
        }

        static IServiceTestOutput CreateServiceTestStepOutputsTo(IServiceTestOutput output) => new ServiceTestOutputTO
        {
            Variable = output.Variable,
            Value = output.Value,
            From = output.From,
            To = output.To,
            AssertOp = output.AssertOp,
            HasOptionsForValue = output.HasOptionsForValue,
            OptionsForValue = output.OptionsForValue
        };

        void UpdateTestsFromResourceUpdate()
        {
            foreach (var serviceTestModel in Tests)
            {
                var runSelectedTestUrl = GetWebRunUrlForTest(serviceTestModel);
                serviceTestModel.RunSelectedTestUrl = runSelectedTestUrl;
            }
        }

        string GetWebRunUrlForTest(IServiceTestModel serviceTestModel)
        {
            var runSelectedTestUrl = ResourceModel.GetWorkflowUri("", UrlType.Tests) + "/" + serviceTestModel.TestName;
            if (serviceTestModel.AuthenticationType == AuthenticationType.Public)
            {
                runSelectedTestUrl = runSelectedTestUrl.Replace("/secure/", "/public/");
            }
            return runSelectedTestUrl;
        }

        bool ShowPopupWhenDuplicates()
        {
            if (HasDuplicates())
            {
                ShowDuplicatePopup();
                return true;
            }
            return false;
        }

        public void ShowDuplicatePopup()
        {
            PopupController?.Show(Resources.Languages.Core.ServiceTestDuplicateTestNameMessage, Resources.Languages.Core.ServiceTestDuplicateTestNameHeader, MessageBoxButton.OK, MessageBoxImage.Error, null, false, true, false, false, false, false);
        }

        public void RefreshCommands()
        {
            ViewModelUtils.RaiseCanExecuteChanged(RunAllTestsCommand);
            ViewModelUtils.RaiseCanExecuteChanged(RunAllTestsInBrowserCommand);
            ViewModelUtils.RaiseCanExecuteChanged(RunSelectedTestCommand);
            ViewModelUtils.RaiseCanExecuteChanged(RunSelectedTestInBrowserCommand);
            _dirty = IsDirty;
            OnPropertyChanged(() => IsDirty);
            OnPropertyChanged(() => DisplayName);
            SetDisplayName(_dirty);
        }

        public bool HasDuplicates() => RealTests().ToList().GroupBy(x => x.TestName).Where(group => @group.Count() > 1).Select(group => @group.Key).Any();

        void SetSelectedTestUrl()
        {
            var runSelectedTestUrl = GetWebRunUrlForTest(SelectedServiceTest);
            SelectedServiceTest.RunSelectedTestUrl = runSelectedTestUrl;
        }

        void MarkTestsAsNotNew()
        {
            foreach (var model in _tests.Where(model => model.NewTest))
            {
                model.NewTest = false;
            }
            foreach (var model in RealTests())
            {
                var clone = model.Clone();
                model.SetItem(clone);
                model.ResetOldTestName();
            }
        }

        public IContextualResourceModel ResourceModel
        {
            get => _resourceModel;
            private set => _resourceModel = value;
        }

        public IServiceTestModel SelectedServiceTest
        {
            get => _selectedServiceTest;
            set
            {
                if (value == null)
                {
                    if (_selectedServiceTest != null)
                    {
                        _selectedServiceTest.PropertyChanged -= ActionsForPropChanges;
                    }

                    _selectedServiceTest = null;
                    EventPublisher.Publish(new DebugOutputMessage(new List<IDebugState>()));
                    OnPropertyChanged(() => SelectedServiceTest);
                    return;
                }
                if (Equals(_selectedServiceTest, value) || value.IsNewTest)
                {
                    return;
                }
                if (_selectedServiceTest != null)
                {
                    _selectedServiceTest.PropertyChanged -= ActionsForPropChanges;
                }

                _selectedServiceTest = value;
                _selectedServiceTest.IsTestLoading = true;
                _selectedServiceTest.PropertyChanged += ActionsForPropChanges;

                var serviceTestSteps = _selectedServiceTest?.TestSteps?.Flatten(step => step.Children ?? new ObservableCollection<IServiceTestStep>());
                if (serviceTestSteps != null)
                {
                    foreach (var serviceTestOutput in serviceTestSteps.Where(serviceTestStep => serviceTestStep?.StepOutputs != null).SelectMany(serviceTestStep => serviceTestStep.StepOutputs))
                    {
                        ((ServiceTestOutput)serviceTestOutput).PropertyChanged += OnStepOutputPropertyChanges;
                    }
                }
                SetSelectedTestUrl();
                SetDuplicateTestTooltip();
                OnPropertyChanged(() => SelectedServiceTest);
                EventPublisher.Publish(new DebugOutputMessage(_selectedServiceTest?.DebugForTest ?? new List<IDebugState>()));
                if (_selectedServiceTest != null)
                {
                    _selectedServiceTest.IsTestLoading = false;
                }
            }
        }

        void OnStepOutputPropertyChanges(object sender, PropertyChangedEventArgs e)
        {
            ViewModelUtils.RaiseCanExecuteChanged(RunSelectedTestInBrowserCommand);
            _dirty = IsDirty;
            OnPropertyChanged(() => IsDirty);
        }

        void ActionsForPropChanges(object sender, PropertyChangedEventArgs e)
        {
            if (e.PropertyName == "Enabled")
            {
                ViewModelUtils.RaiseCanExecuteChanged(DeleteTestCommand);
            }
            if (e.PropertyName == "IsDirty")
            {
                ViewModelUtils.RaiseCanExecuteChanged(RunSelectedTestInBrowserCommand);
                _dirty = IsDirty;
                OnPropertyChanged(() => IsDirty);
            }
            if (e.PropertyName == "Inputs" || e.PropertyName == "Outputs")
            {
                ViewModelUtils.RaiseCanExecuteChanged(RunSelectedTestInBrowserCommand);
            }
            if (e.PropertyName == "RunSelectedTestUrl")
            {
                ViewModelUtils.RaiseCanExecuteChanged(RunSelectedTestInBrowserCommand);
            }
            if (e.PropertyName == "DebugForTest")
            {
                EventPublisher.Publish(new DebugOutputMessage(SelectedServiceTest?.DebugForTest ?? new List<IDebugState>()));
            }
            if (e.PropertyName == "TestName")
            {
                _dirty = IsDirty;
                OnPropertyChanged(() => IsDirty);
            }
            ViewModelUtils.RaiseCanExecuteChanged(DuplicateTestCommand);
        }

        void SetDisplayName(bool isDirty)
        {
            if (isDirty)
            {
                if (!DisplayName.EndsWith(" *"))
                {
                    DisplayName += " *";
                }
            }
            else
            {
                DisplayName = _displayName.Replace("*", "").TrimEnd(' ');
            }
        }

        public IServiceTestCommandHandler ServiceTestCommandHandler { get; set; }

        public string RunAllTestsUrl
        {
            get => _runAllTestsUrl;
            set
            {
                _runAllTestsUrl = value;
                OnPropertyChanged(() => RunAllTestsUrl);
            }
        }

        public string RunAllCoverageUrl
        {
            get => _runAllCoverageUrl;
            set
            {
                _runAllCoverageUrl = value;
                OnPropertyChanged(() => RunAllCoverageUrl);
            }
        }

        public string TestPassingResult
        {
            get => _testPassingResult;
            set
            {
                _testPassingResult = value;
                OnPropertyChanged(() => TestPassingResult);
            }
        }

        IEnumerable<IServiceTestModel> RealTests() => _tests.Where(model => model.GetType() != typeof(DummyServiceTest)).ToObservableCollection();

        public ObservableCollection<IServiceTestModel> Tests
        {
            get => _tests;
            set
            {
                _tests = value;
                OnPropertyChanged(() => Tests);
            }
        }

        void DeleteTest(IServiceTestModel test)
        {
            if (test == null)
            {
                return;
            }

            var nameOfItemBeingDeleted = test.NameForDisplay.Replace("*", "").TrimEnd(' ');
            if (PopupController.ShowDeleteConfirmation(nameOfItemBeingDeleted) == MessageBoxResult.Yes)
            {
                try
                {
                    if (!test.IsNewTest)
                    {
                        ResourceModel.Environment.ResourceRepository.DeleteResourceTest(ResourceModel.ID, test.TestName);
                    }
                    _tests.Remove(test);
                    OnPropertyChanged(() => Tests);
                    SelectedServiceTest = null;
                    if (Tests.Count == 1 && Tests.Single().GetType() == typeof(DummyServiceTest))
                    {
                        CanSave = false;
                    }
                }
                catch (Exception ex)
                {
                    Dev2Logger.Error("IServiceTestModelTO DeleteTest(IServiceTestModel model)", ex, GlobalConstants.WarewolfError);
                }
            }
            if (_tests.Count == 1 && _tests.Single().GetType() == typeof(DummyServiceTest))
            {
                CanSave = false;
            }
        }

        void DeleteTestStep(IServiceTestStep testStep)
        {
            if (testStep == null)
            {
                return;
            }

            DeleteStep(testStep, SelectedServiceTest.TestSteps);
        }

        static void DeleteStep(IServiceTestStep testStep, ObservableCollection<IServiceTestStep> serviceTestSteps)
        {
            if (serviceTestSteps.Contains(testStep))
            {
                serviceTestSteps.Remove(testStep);
            }
            else
            {
                var foundParentStep = serviceTestSteps.FirstOrDefault(step => step.ActivityID == testStep.Parent?.ActivityID);
                foundParentStep?.Children?.Remove(testStep);
            }
        }

        ObservableCollection<IServiceTestModel> GetTests()
        {
            try
            {
                var serviceTestModels = new List<ServiceTestModel>();
                var loadResourceTests = ResourceModel.Environment.ResourceRepository.LoadResourceTests(ResourceModel.ID);
                if (loadResourceTests != null)
                {
                    foreach (var test in loadResourceTests)
                    {
                        var serviceTestModel = ToServiceTestModel(test);
                        serviceTestModel.Item = (ServiceTestModel)serviceTestModel.Clone();
                        serviceTestModels.Add(serviceTestModel);
                    }
                }
                return serviceTestModels.ToObservableCollection<IServiceTestModel>();
            }
            catch (Exception)
            {
                return new ObservableCollection<IServiceTestModel>();
            }
        }

        public ServiceTestModel ToServiceTestModel(IServiceTestModelTO to)
        {
            var serviceTestModel = new ServiceTestModel(ResourceModel.ID)
            {
                OldTestName = to.TestName,
                TestName = to.TestName,
                IsTestRunning = false,
                NameForDisplay = to.TestName,
                UserName = to.UserName,
                AuthenticationType = to.AuthenticationType,
                Enabled = to.Enabled,
                ErrorExpected = to.ErrorExpected,
                NoErrorExpected = to.NoErrorExpected,
                ErrorContainsText = to.ErrorContainsText,
                LastRunDate = to.LastRunDate,
                TestInvalid = to.TestInvalid,
                TestPending = to.TestPending,
                TestFailing = to.TestFailing,
                TestPassed = to.TestPassed,
                Password = to.Password,
                ParentId = to.ResourceId,
                TestSteps = to.TestSteps?.Select(step => CreateServiceTestStep(step) as IServiceTestStep).ToObservableCollection(),
                Inputs = to.Inputs?.Select(CreateInput).ToObservableCollection(),
                Outputs = to.Outputs?.Select(CreateOutput).ToObservableCollection()
            };
            return serviceTestModel;
        }

        static IServiceTestOutput CreateOutput(IServiceTestOutput output)
        {
            var serviceTestOutput = new ServiceTestOutput(output.Variable, output.Value, output.From, output.To) as IServiceTestOutput;
            serviceTestOutput.AssertOp = output.AssertOp;
            serviceTestOutput.Result = output.Result;
            return serviceTestOutput;
        }

        static IServiceTestInput CreateInput(IServiceTestInput input)
        {
            var serviceTestInput = new ServiceTestInput(input.Variable, input.Value) as IServiceTestInput;
            serviceTestInput.EmptyIsNull = input.EmptyIsNull;
            return serviceTestInput;
        }

        IServiceTestStep CreateServiceTestStep(IServiceTestStep step)
        {
            var testStep = new ServiceTestStep(step.ActivityID, step.ActivityType, new ObservableCollection<IServiceTestOutput>(), step.Type)
            {
                Children = new ObservableCollection<IServiceTestStep>(),
                Parent = step.Parent,
                StepDescription = step.StepDescription,
                Result = step.Result
            };
            testStep.StepOutputs = CreateServiceTestOutputFromStep(step.StepOutputs, testStep);
            if (testStep.MockSelected)
            {
                testStep.TestPending = false;
                testStep.TestPassed = false;
                testStep.TestFailing = false;
                testStep.TestInvalid = false;
            }
            SetStepIcon(testStep.ActivityType, testStep);

            if (step.Children != null)
            {
                foreach (var serviceTestStep in step.Children)
                {
                    testStep.Children.Add(CreateServiceTestStep(serviceTestStep));
                }
            }
            return testStep;
        }

        static ObservableCollection<IServiceTestOutput> CreateServiceTestOutputFromStep(ObservableCollection<IServiceTestOutput> stepStepOutputs, IServiceTestStep testStep)
        {
            var stepOutputs = new ObservableCollection<IServiceTestOutput>();
            foreach (var serviceTestOutput in stepStepOutputs)
            {
                var testOutput = new ServiceTestOutput(serviceTestOutput.Variable, serviceTestOutput.Value, serviceTestOutput.From, serviceTestOutput.To)
                {
                    AddStepOutputRow = testStep.AddNewOutput,
                    AssertOp = serviceTestOutput.AssertOp,
                    HasOptionsForValue = serviceTestOutput.HasOptionsForValue,
                    OptionsForValue = serviceTestOutput.OptionsForValue,
                    Result = serviceTestOutput.Result
                };
                if (testStep.MockSelected)
                {
                    testOutput.TestPending = false;
                    testOutput.TestPassed = false;
                    testOutput.TestFailing = false;
                    testOutput.TestInvalid = false;
                }

                stepOutputs.Add(testOutput);
            }
            return stepOutputs;
        }

        public ICommand DeleteTestCommand { get; set; }
        public ICommand DeleteTestStepCommand { get; set; }
        public ICommand DuplicateTestCommand { get; set; }
        public ICommand RunAllTestsInBrowserCommand { get; set; }
        public ICommand RunAllTestCoverageInBrowserCommand { get; set; }
        public ICommand RunAllTestsCommand { get; set; }
        public ICommand RunSelectedTestInBrowserCommand { get; set; }
        public ICommand RunSelectedTestCommand { get; set; }
        public ICommand StopTestCommand { get; set; }
        public ICommand CreateTestCommand { get; set; }

        public string DisplayName
        {
            get => _displayName;
            set
            {
                _displayName = value;
                OnPropertyChanged(() => DisplayName);
            }
        }

        public void Dispose()
        {
            if (ResourceModel?.Environment?.Connection != null)
            {
                ResourceModel.Environment.Connection.ReceivedResourceAffectedMessage -= OnReceivedResourceAffectedMessage;
            }
        }

        public void UpdateHelpDescriptor(string helpText)
        {
            var mainViewModel = CustomContainer.Get<IShellViewModel>();
            mainViewModel?.HelpViewModel?.UpdateHelpText(helpText);
        }
    }
}

---- Transformed Tree ----
using System;
using System.Activities;
using System.Activities.Presentation.Model;
using System.Activities.Statements;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Linq;
using System.Reflection;
using System.Text.RegularExpressions;
using System.Windows;
using System.Windows.Input;
using System.Windows.Media;
using Caliburn.Micro;
using Dev2;
using Dev2.Activities;
using Dev2.Activities.SelectAndApply;
using Dev2.Common;
using Dev2.Common.Common;
using Dev2.Common.Interfaces;
using Dev2.Common.Interfaces.Diagnostics.Debug;
using Dev2.Common.Interfaces.Studio.Controller;
using Dev2.Common.Interfaces.Threading;
using Dev2.Common.Interfaces.Toolbox;
using Dev2.Communication;
using Dev2.Data;
using Dev2.Data.ServiceModel.Messages;
using Dev2.Data.SystemTemplates.Models;
using Dev2.Runtime.ServiceModel.Data;
using Dev2.Studio.Core;
using Dev2.Studio.Core.Activities.Utils;
using Dev2.Studio.Core.Messages;
using Dev2.Studio.Core.Network;
using Dev2.Studio.Interfaces;
using Microsoft.Practices.Prism.Commands;
using Microsoft.Practices.Prism.Mvvm;
using Unlimited.Applications.BusinessDesignStudio.Activities;
using Warewolf.Core;
using Warewolf.Resource.Errors;

namespace Warewolf.Studio.ViewModels
{
    public class ServiceTestViewModel : BindableBase, IServiceTestViewModel
    {
        readonly IExternalProcessExecutor _processExecutor;
        private IServiceTestModel _selectedServiceTest;
        private string _runAllTestsUrl;
        private string _runAllCoverageUrl;
        private string _testPassingResult;
        ObservableCollection<IServiceTestModel> _tests;
        private string _displayName;
        public IPopupController PopupController { get; }
        private string _errorMessage;
        private readonly IShellViewModel _shellViewModel;
        IContextualResourceModel _resourceModel;
        private string _serverName;
        private IWorkflowDesignerViewModel _workflowDesignerViewModel;
        readonly IEnumerable<Type> _types;
        
        public ServiceTestViewModel(IContextualResourceModel resourceModel, IAsyncWorker asyncWorker, IEventAggregator eventPublisher, IExternalProcessExecutor processExecutor, IWorkflowDesignerViewModel workflowDesignerViewModel, IPopupController popupController, IMessage msg, IEnumerable<Type> currentDomainTypes)
            : this(resourceModel, asyncWorker, eventPublisher, processExecutor, workflowDesignerViewModel, popupController)
        {
            _types = currentDomainTypes;
            PrePopulateTestsUsingDebugAsync(msg);
        }
        
        public ServiceTestViewModel(IContextualResourceModel resourceModel, IAsyncWorker asyncWorker, IEventAggregator eventPublisher, IExternalProcessExecutor processExecutor, IWorkflowDesignerViewModel workflowDesignerViewModel, IPopupController popupController, IMessage msg)
            : this(resourceModel, asyncWorker, eventPublisher, processExecutor, workflowDesignerViewModel, popupController)
        {
            _types = AppDomain.CurrentDomain.GetAssemblies().SelectMany(x => x.GetTypes());
            PrePopulateTestsUsingDebugAsync(msg);
        }

        public ServiceTestViewModel(IContextualResourceModel resourceModel, IAsyncWorker asyncWorker, IEventAggregator eventPublisher, IExternalProcessExecutor processExecutor, IWorkflowDesignerViewModel workflowDesignerViewModel, IPopupController popupController)
        {
            _processExecutor = processExecutor;
            AsyncWorker = asyncWorker;
            EventPublisher = eventPublisher;
            ResourceModel = resourceModel ?? throw new ArgumentNullException(nameof(resourceModel));
            ResourceModel.Environment.IsConnectedChanged += (sender, args) =>
            {
                ViewModelUtils.RaiseCanExecuteChanged(DeleteTestCommand);
                RefreshCommands();
            };

            ResourceModel.Environment.Connection.ReceivedResourceAffectedMessage += OnReceivedResourceAffectedMessage;
            SetServerName(resourceModel);
            DisplayName = resourceModel.DisplayName + " - Tests" + _serverName;

            ServiceTestCommandHandler = new ServiceTestCommandHandlerModel();
            PopupController = popupController;
            _shellViewModel = CustomContainer.Get<IShellViewModel>();
            RunAllTestsInBrowserCommand = new DelegateCommand(RunAllTestsInBrowser, IsServerConnected);
            RunAllTestCoverageInBrowserCommand = new DelegateCommand(RunAllCoverageInBrowser, IsServerConnected);
            RunAllTestsCommand = new DelegateCommand(RunAllTests, IsServerConnected);
            RunSelectedTestInBrowserCommand = new DelegateCommand(RunSelectedTestInBrowser, () => CanRunSelectedTestInBrowser);
            RunSelectedTestCommand = new DelegateCommand(RunSelectedTest, () => CanRunSelectedTest);
            StopTestCommand = new DelegateCommand(StopTest, () => CanStopTest);
            CreateTestCommand = new DelegateCommand(() => CreateTests());
            DeleteTestCommand = new DelegateCommand<IServiceTestModel>(DeleteTest, CanDeleteTest);
            DeleteTestStepCommand = new DelegateCommand<IServiceTestStep>(DeleteTestStep);
            DuplicateTestCommand = new DelegateCommand(DuplicateTest, () => CanDuplicateTest);
            RunAllTestsUrl = resourceModel.GetWorkflowUri("", UrlType.Tests)?.ToString();
            RunAllCoverageUrl = resourceModel.GetWorkflowUri("", UrlType.Coverage)?.ToString();

            UpdateHelpDescriptor(Resources.Languages.HelpText.ServiceTestGenericHelpText);

            WorkflowDesignerViewModel = workflowDesignerViewModel;
            WorkflowDesignerViewModel.IsTestView = true;
            WorkflowDesignerViewModel.ItemSelectedAction = ItemSelectedAction;
            IsLoading = true;
            if (Tests == null)
            {
                PrePopulateTestsUsingDebugAsync(null);
            }
        }

        public bool IsLoading
        {
            get => _isLoading;
            set
            {
                _isLoading = value;
                OnPropertyChanged(() => IsLoading);
            }
        }

        private void PrePopulateTestsUsingDebugAsync(IMessage msg)
        {
            AsyncWorker.Start(GetTests, models =>
            {
                var dummyTest = new DummyServiceTest(CreateTests) {TestName = "Create a new test."};
                models.Add(dummyTest);
                SelectedServiceTest = dummyTest;
                Tests = models;
                if (msg != null)
                {
                    if (msg is NewTestFromDebugMessage test)
                    {
                        var newTest = test;
                        if (newTest.RootItems == null)
                        {
                            throw new ArgumentNullException(nameof(newTest.RootItems));
                        }

                        PrePopulateTestsUsingDebug(newTest.RootItems);
                    }
                    else
                    {
                        throw new ArgumentException("expected " + nameof(NewTestFromDebugMessage) + " but got " +
                                                    msg.GetType().Name);
                    }
                }

                IsLoading = false;
            }, OnError);
        }

        public void PrePopulateTestsUsingDebug(List<IDebugTreeViewItemViewModel> models)
        {
            CreateTests(true);
            if (_canAddFromDebug)
            {
                WorkflowDesignerViewModel?.UpdateWorkflowInputDataViewModel(ResourceModel);
                AddFromDebug(models);
            }
        }

        private void AddFromDebug(IEnumerable<IDebugTreeViewItemViewModel> models)
        {
            foreach (var debugState in models)
            {
                if (debugState is DebugStateTreeViewItemViewModel debugItem && debugItem.Parent == null)
                {
                    if (debugItem.Content == null)
                    {
                        continue;
                    }
                    ValidateAddStepType(debugState, debugItem.Content);
                }
            }
        }

        void ValidateAddStepType(IDebugTreeViewItemViewModel debugState, IDebugState debugItemContent)
        {
            if (debugItemContent.ActivityType == ActivityType.Workflow && debugItemContent.OriginatingResourceID == ResourceModel.ID)
            {
                ProcessInputsAndOutputs(debugItemContent);
                UpdateInputValues(debugItemContent);
            }
            else if (debugItemContent.ActivityType == ActivityType.Workflow && debugItemContent.ActualType == nameof(DsfActivity))
            {
                AddStepFromDebug(debugState, debugItemContent);
            }
            else
            {
                if (debugItemContent.ActivityType != ActivityType.Workflow && debugItemContent.ActualType != nameof(DsfCommentActivity))
                {
                    ProcessRegularDebugItem(debugItemContent, debugState);
                }
            }
        }

        private void UpdateInputValues(IDebugState debugItemContent)
        {
            foreach (var item in debugItemContent.Inputs)
            {
                foreach (var res in item?.ResultsList)
                {
                    var variable = res?.Variable?.Replace("[[", "");
                    variable = variable?.Replace("]]", "");
                    var inputsValue = WorkflowDesignerViewModel?.GetWorkflowInputs(variable);
                    if (res != null)
                    {
                        res.Value = inputsValue;
                    }
                }
            }
        }

        private void ProcessRegularDebugItem(IDebugState debugItemContent, IDebugTreeViewItemViewModel debugState)
        {
            var actualType = debugItemContent.ActualType;
            if (actualType == nameof(DsfDecision) || actualType == nameof(TestMockDecisionStep))
            {
                DecisionFromDebug(debugState, debugItemContent);
            }
            else if (actualType == nameof(DsfSwitch) || actualType == nameof(TestMockSwitchStep))
            {
                SwitchFromDebug(debugState, debugItemContent);
            }
            else if (actualType == nameof(DsfEnhancedDotNetDllActivity))
            {
                EnhancedDotNetDllFromDebug(debugState, debugItemContent);
            }
            else
            {
                AddStepFromDebug(debugState, debugItemContent);
            }
        }

        void EnhancedDotNetDllFromDebug(IDebugTreeViewItemViewModel debugState, IDebugState debugItemContent)
        {
            var exists = FindExistingStep(debugItemContent.ID.ToString());
            IServiceTestStep serviceTestStep = null;
            if (exists == null)
            {
                serviceTestStep = SelectedServiceTest.AddDebugItemTestStep(debugItemContent, new ObservableCollection<IServiceTestOutput>());

                if (serviceTestStep != null)
                {
                    SetStepIcon(serviceTestStep.ActivityType, serviceTestStep);
                }
            }

            if (debugState.Children != null && debugState.Children.Count > 0)
            {
                AddChildren(debugState, serviceTestStep);
            }
        }

        void SwitchFromDebug(IDebugTreeViewItemViewModel itemContent, IDebugState debugItemContent)
        {
            var processFlowSwitch = ProcessFlowSwitch(WorkflowDesignerViewModel.GetModelItem(debugItemContent.WorkSurfaceMappingId, debugItemContent.ParentID.GetValueOrDefault()));
            if (processFlowSwitch != null)
            {
                if (debugItemContent?.Outputs.Count > 0 && debugItemContent.Outputs[0].ResultsList?.Count > 0)
                {
                    processFlowSwitch.StepOutputs[0].Value = debugItemContent.Outputs[0].ResultsList[0].Value;
                }

                var debugStateActivityTypeName = itemContent.ActivityTypeName;
                if (debugStateActivityTypeName == nameof(TestMockSwitchStep))
                {
                    processFlowSwitch.MockSelected = true;
                    processFlowSwitch.AssertSelected = false;
                    processFlowSwitch.StepOutputs[0].Value = debugItemContent.AssertResultList[0].ResultsList[0].Value;
                }
            }
        }

        void DecisionFromDebug(IDebugTreeViewItemViewModel itemContent, IDebugState debugItemContent)
        {
            var processFlowDecision = ProcessFlowDecision(WorkflowDesignerViewModel.GetModelItem(debugItemContent.WorkSurfaceMappingId, debugItemContent.ParentID.GetValueOrDefault()));
            if (processFlowDecision != null)
            {
                if (debugItemContent?.Outputs.Count > 0 && debugItemContent.Outputs[0].ResultsList?.Count > 0)
                {
                    processFlowDecision.StepOutputs[0].Value = debugItemContent.Outputs[0].ResultsList[0].Value;
                }
                var debugStateActivityTypeName = itemContent.ActivityTypeName;
                if (debugStateActivityTypeName == nameof(TestMockDecisionStep))
                {
                    processFlowDecision.MockSelected = true;
                    processFlowDecision.AssertSelected = false;
                    processFlowDecision.StepOutputs[0].Value = debugItemContent.AssertResultList[0].ResultsList[0].Value;
                }
            }
        }

        void ProcessInputsAndOutputs(IDebugState debugItemContent)
        {
            if (debugItemContent.StateType == StateType.Start)
            {
                SetInputs(debugItemContent);
            }
            else
            {
                if (debugItemContent.StateType == StateType.End)
                {
                    SetOutputs(debugItemContent);
                }
            }
        }

        void AddStepFromDebug(IDebugTreeViewItemViewModel debugState, IDebugState debugItemContent)
        {
            if (debugState.Children != null && debugState.Children.Count > 0)
            {
                AddChildDebugItems(debugItemContent, debugState, null);
            }
            else
            {
                var outputs = debugItemContent.Outputs;
                var exists = FindExistingStep(debugItemContent.ID.ToString());
                if (exists == null)
                {
                    var serviceTestStep = SelectedServiceTest.AddDebugItemTestStep(debugItemContent, new ObservableCollection<IServiceTestOutput>());
                    var hasOutputs = outputs?.Select(item => item.ResultsList).All(list => list.Count > 0);
                    var debugStateActivityTypeName = debugState.ActivityTypeName;

                    if (outputs?.Count > 0 && hasOutputs.HasValue && hasOutputs.Value)
                    {
                        AddOutputs(outputs, serviceTestStep);
                    }
                    else
                    {
                        SetStepOutputs(serviceTestStep, debugStateActivityTypeName);
                    }
                    if (serviceTestStep != null)
                    {
                        SetMockTestStep(debugItemContent, serviceTestStep, debugStateActivityTypeName);
                        SetStepIcon(serviceTestStep.ActivityType, serviceTestStep);
                    }
                }
            }
        }

        void SetMockTestStep(IDebugState debugItemContent, IServiceTestStep serviceTestStep, string debugStateActivityTypeName)
        {
            if (debugStateActivityTypeName == nameof(TestMockStep))
            {
                var model = WorkflowDesignerViewModel.GetModelItem(debugItemContent.WorkSurfaceMappingId, debugItemContent.ID);
                var val = model.GetCurrentValue();
                serviceTestStep.MockSelected = true;
                serviceTestStep.AssertSelected = false;
                serviceTestStep.Type = StepType.Mock;
                serviceTestStep.ActivityType = val.GetType().Name;
            }
        }

        void SetStepOutputs(IServiceTestStep serviceTestStep, string debugStateActivityTypeName)
        {
            var type = _types?.FirstOrDefault(x => x.Name == debugStateActivityTypeName);
            if (type == null) return;
            var act = Activator.CreateInstance(type) as IDev2Activity;
            if (serviceTestStep != null)
            {
                serviceTestStep.StepOutputs = AddOutputs(act?.GetOutputs(), serviceTestStep).ToObservableCollection();
            }
        }

        void AddChildDebugItems(IDebugState debugItemContent, IDebugTreeViewItemViewModel debugState, IServiceTestStep parent)
        {
            if (NullParent(debugItemContent, ref parent))
            {
                return;
            }

            if (parent.ActivityType == nameof(DsfForEachActivity))
            {
                ForEachParent(debugItemContent, debugState, parent);
            }
            else if (parent.ActivityType == nameof(GateActivity))
            {
                GateParent(debugItemContent, debugState, parent);
            }
            else if (parent.ActivityType == nameof(SuspendExecutionActivity))
            {
                SuspendExecutionParent(debugItemContent, debugState, parent);
            }
            else if (parent.ActivityType == nameof(DsfSequenceActivity))
            {
                var model = WorkflowDesignerViewModel.GetModelItem(debugItemContent.WorkSurfaceMappingId, debugItemContent.ID);
                if (model?.GetCurrentValue() is DsfSequenceActivity sequence)
                {
                    parent.ActivityID = Guid.Parse(sequence.UniqueID);
                    AddChildren(debugState, parent);
                }
            }
            else
            {
                AddNotContainerActivityType(debugState, parent);
            }
            while (parent != null)
            {
                var child = parent;
                if (child.Parent == null)
                {
                    var exists = FindExistingStep(child.ActivityID.ToString());
                    if (exists == null)
                    {
                        SelectedServiceTest.TestSteps.Add(child);
                    }
                }
                parent = child.Parent;
            }
        }

        void AddNotContainerActivityType(IDebugTreeViewItemViewModel debugState, IServiceTestStep parent)
        {
            if (parent.ActivityType == nameof(DsfActivity))
            {
                if (debugState is DebugStateTreeViewItemViewModel childItem)
                {
                    var content = childItem.Content;
                    var outputs = content.Outputs;
                    AddOutputs(outputs, parent);
                    SetStepIcon(parent.ActivityType, parent);
                }
            }
            else
            {
                AddChildren(debugState, parent);
            }
        }

        void GateParent(IDebugState debugItemContent, IDebugTreeViewItemViewModel debugState, IServiceTestStep parent)
        {
            var model = WorkflowDesignerViewModel?.GetModelItem(debugItemContent.WorkSurfaceMappingId, debugItemContent.ID);
            if (model?.GetCurrentValue() is GateActivity gateActivity && debugState.Children.LastOrDefault() is DebugStateTreeViewItemViewModel childItem)
            {
                if (gateActivity.DataFunc.Handler is IDev2Activity act)
                {
                    var guid = Guid.Parse(act.UniqueID);
                    childItem.Content.ID = guid;
                }

                var childItemContent = childItem.Content;
                var outputs = childItemContent.Outputs;

                var exists = parent.Children.FirstOrDefault(a => a.ActivityID == childItemContent.ID);
                if (exists == null)
                {
                    AddGateChildStep(parent, childItem, act, childItemContent, outputs);
                }
            }
        }

        void AddGateChildStep(IServiceTestStep parent, DebugStateTreeViewItemViewModel childItem, IDev2Activity act, IDebugState childItemContent, List<IDebugItem> outputs)
        {
            var childStep = CreateAssertChildStep(parent, childItemContent, childItemContent.ID);
            if (outputs.Count > 0)
            {
                AddOutputs(outputs, childStep);
            }
            else
            {
                AddOutputs(act?.GetOutputs(), childStep);
            }
            SetStepIcon(childStep.ActivityType, childStep);
            parent.Children.Add(childStep);
            if (childItem.Children?.Count > 0)
            {
                AddChildDebugItems(childItemContent, childItem, childStep);
            }
        }

        void SuspendExecutionParent(IDebugState debugItemContent, IDebugTreeViewItemViewModel debugState, IServiceTestStep parent)
        {
            var model = WorkflowDesignerViewModel?.GetModelItem(debugItemContent.WorkSurfaceMappingId, debugItemContent.ID);
            if (model?.GetCurrentValue() is SuspendExecutionActivity suspendExecutionActivity && debugState.Children.LastOrDefault() is DebugStateTreeViewItemViewModel childItem)
            {
                if (suspendExecutionActivity.SaveDataFunc.Handler is IDev2Activity act)
                {
                    var guid = Guid.Parse(act.UniqueID);
                    childItem.Content.ID = guid;
                }

                var childItemContent = childItem.Content;
                var outputs = childItemContent.Outputs;

                var exists = parent.Children.FirstOrDefault(a => a.ActivityID == childItemContent.ID);
                if (exists == null)
                {
                    AddSuspendExecutionChildStep(parent, childItem, act, childItemContent, outputs);
                }
            }
        }

        void AddSuspendExecutionChildStep(IServiceTestStep parent, IDebugTreeViewItemViewModel childItem, IDev2Activity act, IDebugState childItemContent, List<IDebugItem> outputs)
        {
            var childStep = CreateAssertChildStep(parent, childItemContent, childItemContent.ID);
            if (outputs.Count > 0)
            {
                AddOutputs(outputs, childStep);
            }
            else
            {
                AddOutputs(act?.GetOutputs(), childStep);
            }
            SetStepIcon(childStep.ActivityType, childStep);
            parent.Children.Add(childStep);
            if (childItem.Children?.Count > 0)
            {
                AddChildDebugItems(childItemContent, childItem, childStep);
            }
        }

        void ForEachParent(IDebugState debugItemContent, IDebugTreeViewItemViewModel debugState, IServiceTestStep parent)
        {
            var model = WorkflowDesignerViewModel?.GetModelItem(debugItemContent.WorkSurfaceMappingId, debugItemContent.ID);
            if (model?.GetCurrentValue() is DsfForEachActivity forEach && debugState.Children.LastOrDefault() is DebugStateTreeViewItemViewModel childItem)
            {
                if (forEach.DataFunc.Handler is IDev2Activity act)
                {
                    var guid = Guid.Parse(act.UniqueID);
                    childItem.Content.ID = guid;
                }

                var childItemContent = childItem.Content;
                var outputs = childItemContent.Outputs;

                var exists = parent.Children.FirstOrDefault(a => a.ActivityID == childItemContent.ID);
                if (exists == null)
                {
                    AddForEachChildStep(parent, childItem, act, childItemContent, outputs);
                }
            }
        }

        void AddForEachChildStep(IServiceTestStep parent, DebugStateTreeViewItemViewModel childItem, IDev2Activity act, IDebugState childItemContent, List<IDebugItem> outputs)
        {
            var childStep = CreateAssertChildStep(parent, childItemContent, childItemContent.ID);
            if (outputs.Count > 0)
            {
                AddOutputs(outputs, childStep);
            }
            else
            {
                AddOutputs(act?.GetOutputs(), childStep);
            }
            SetStepIcon(childStep.ActivityType, childStep);
            parent.Children.Add(childStep);
            if (childItem.Children?.Count > 0)
            {
                AddChildDebugItems(childItemContent, childItem, childStep);
            }
        }

        static IServiceTestStep CreateAssertChildStep(IServiceTestStep parent, IDebugState childItemContent, Guid childItemContentId)
        {
            var serviceTestOutputs = new ObservableCollection<IServiceTestOutput>();
            var childStep = new ServiceTestStep(childItemContentId, childItemContent.ActualType, serviceTestOutputs, StepType.Assert)
            {
                StepDescription = childItemContent.DisplayName,
                Parent = parent,
                Type = StepType.Assert
            };
            return childStep;
        }

        bool NullParent(IDebugState debugItemContent, ref IServiceTestStep parent)
        {
            if (parent == null)
            {
                var testStep = new ServiceTestStep(debugItemContent.ID, "", new ObservableCollection<IServiceTestOutput>(), StepType.Assert)
                {
                    StepDescription = debugItemContent.DisplayName,
                    Parent = null
                };

                var seqTypeName = nameof(DsfSequenceActivity);
                var forEachTypeName = nameof(DsfForEachActivity);
                var selectApplyTypeName = nameof(DsfSelectAndApplyActivity);
                var suspendTypeName = nameof(SuspendExecutionActivity);
                var serviceName = nameof(DsfActivity);
                var actualType = debugItemContent.ActualType;
                if (actualType == seqTypeName)
                {
                    SetStepIcon(typeof(DsfSequenceActivity), testStep);
                    testStep.ActivityType = seqTypeName;
                    testStep.ActivityID = debugItemContent.WorkSurfaceMappingId;
                    parent = testStep;
                }
                else if (actualType == forEachTypeName)
                {
                    SetStepIcon(typeof(DsfForEachActivity), testStep);
                    testStep.ActivityType = forEachTypeName;
                    testStep.ActivityID = debugItemContent.WorkSurfaceMappingId;
                    parent = testStep;
                }
                else if (actualType == selectApplyTypeName)
                {
                    SetStepIcon(typeof(DsfSelectAndApplyActivity), testStep);
                    testStep.ActivityType = selectApplyTypeName;
                    testStep.ActivityID = debugItemContent.WorkSurfaceMappingId;
                    parent = testStep;
                }
                else if (actualType == suspendTypeName)
                {
                    SetStepIcon(typeof(SuspendExecutionActivity), testStep);
                    testStep.ActivityType = selectApplyTypeName;
                    testStep.ActivityID = debugItemContent.WorkSurfaceMappingId;
                    parent = testStep;
                }
                else if (actualType == serviceName)
                {
                    SetStepIcon(typeof(DsfActivity), testStep);
                    testStep.ActivityType = serviceName;
                    parent = testStep;
                }
                else
                {
                    return true;
                }
            }
            return false;
        }

        void AddChildren(IDebugTreeViewItemViewModel debugState, IServiceTestStep parent)
        {
            foreach (var debugTreeViewItemViewModel in debugState.Children)
            {
                if (debugTreeViewItemViewModel is DebugStateTreeViewItemViewModel childItem && childItem.ActivityTypeName != "DsfSelectAndApplyActivity")
                {
                    var childItemContent = childItem.Content;
                    var outputs = childItemContent.Outputs;

                    var contentId = childItemContent.ID;
                    if (childItemContent.ActualType == "DsfActivity")
                    {
                        contentId = childItemContent.WorkSurfaceMappingId;
                    }

                    var exists = parent.Children.FirstOrDefault(a => a.ActivityID == contentId);
                    if (exists == null)
                    {
                        AddNewDebugStateChild(parent, childItem, childItemContent, outputs, contentId);
                    }
                    else
                    {
                        AddExistingDebugState(childItem, outputs, exists);
                    }
                }
            }
        }

        void AddExistingDebugState(DebugStateTreeViewItemViewModel childItem, List<IDebugItem> outputs, IServiceTestStep exists)
        {
            if (exists is ServiceTestStep serviceTestStep)
            {
                if (outputs.Count > 0)
                {
                    AddOutputs(outputs, serviceTestStep);
                }
                else
                {
                    var type = _types?.FirstOrDefault(x => x.Name == childItem.ActivityTypeName);
                    if (type == null) return;
                    var act = Activator.CreateInstance(type) as IDev2Activity;
                    serviceTestStep.StepOutputs = AddOutputs(act?.GetOutputs(), serviceTestStep).ToObservableCollection();
                }
            }
        }

        void AddNewDebugStateChild(IServiceTestStep parent, DebugStateTreeViewItemViewModel childItem, IDebugState childItemContent, List<IDebugItem> outputs, Guid contentId)
        {
            var childStep = CreateAssertChildStep(parent, childItemContent, contentId);
            if (outputs.Count > 0)
            {
                AddOutputs(outputs, childStep);
            }
            else
            {
                var type = _types?.FirstOrDefault(x => x.Name == childItem.ActivityTypeName);
                if (type != null)
                {
                    var act = Activator.CreateInstance(type) as IDev2Activity;
                    childStep.StepOutputs = AddOutputs(act?.GetOutputs(), childStep).ToObservableCollection();
                }
            }
            SetStepIcon(childStep.ActivityType, childStep);
            if (!(childStep.StepOutputs?.Count > 0)) return;
            parent.Children.Add(childStep);
            if (childItem.Children?.Count > 0)
            {
                AddChildDebugItems(childItemContent, childItem, childStep);
            }
        }

        void AddOutputs(List<IDebugItem> outputs, IServiceTestStep serviceTestStep)
        {
            var serviceTestOutputs = new ObservableCollection<IServiceTestOutput>();
            if (outputs == null || outputs.Count < 1)
            {
                serviceTestOutputs.Add(new ServiceTestOutput("", "", "", "")
                {
                    AssertOp = "",
                    AddStepOutputRow = s => { serviceTestStep?.AddNewOutput(s); }
                });
                serviceTestStep.StepOutputs = serviceTestOutputs;
                return;
            }
            foreach (var output in outputs)
            {
                AddOutput(output, serviceTestStep, serviceTestOutputs);
            }
            serviceTestStep.StepOutputs = serviceTestOutputs;
        }

        void AddOutput(IDebugItem output, IServiceTestStep serviceTestStep, ObservableCollection<IServiceTestOutput> serviceTestOutputs)
        {
            var actualOutputs = output.ResultsList.Where(result => result.Type == DebugItemResultType.Variable);
            foreach (var debugItemResult in actualOutputs)
            {
                var variable = debugItemResult.Variable;
                var value = debugItemResult.Value;
                var assertOp = "=";
                if (debugItemResult.MoreLink != null)
                {
                    if (serviceTestStep.ActivityType == nameof(DsfEnhancedDotNetDllActivity))
                    {
                        var realValue = WebClient.DownloadString(debugItemResult.MoreLink);
                        value = realValue.TrimEnd(Environment.NewLine.ToCharArray());
                    }
                    else
                    {
                        assertOp = "Contains";
                    }
                }
                var serviceTestOutput = new ServiceTestOutput(variable ?? "", value, "", "")
                {
                    AssertOp = assertOp,
                    AddStepOutputRow = s => { serviceTestStep?.AddNewOutput(s); }
                };
                serviceTestOutputs.Add(serviceTestOutput);
            }
        }

        void SetInputs(IDebugState inputState)
        {
            if (inputState != null)
            {
                foreach (var debugItem in inputState.Inputs)
                {
                    var variable = debugItem.ResultsList.First().Variable.Replace("[[", "").Replace("]]", "");
                    var value = debugItem.ResultsList.First().Value;
                    var serviceTestInput = SelectedServiceTest?.Inputs?.FirstOrDefault(input => input.Variable.Equals(variable));
                    if (serviceTestInput != null)
                    {
                        serviceTestInput.Value = value;
                    }
                }
            }
        }

        public IWarewolfWebClient WebClient
        {
            private get => _webClient ?? CustomContainer.Get<IWarewolfWebClient>();
            set => _webClient = value;
        }

        void SetOutputs(IDebugState outPutState)
        {
            var dataList = new DataListModel();
            dataList.Create(ResourceModel.DataList, ResourceModel.DataList);
            if (outPutState == null)
            {
                return;
            }
            var outPuts = new ObservableCollection<IServiceTestOutput>();
            foreach (var debugItem in outPutState.Outputs)
            {
                foreach (var debugItemResult in debugItem.ResultsList)
                {
                    SetResultListOutputs(outPutState, dataList, outPuts, debugItemResult);
                }
            }
            SelectedServiceTest.Outputs = outPuts;
            SelectedServiceTest.ErrorExpected = outPutState.HasError;
            SelectedServiceTest.NoErrorExpected = !outPutState.HasError;
            SelectedServiceTest.ErrorContainsText = outPutState.ErrorMessage;
        }

        void SetResultListOutputs(IDebugState outPutState, DataListModel dataList, ObservableCollection<IServiceTestOutput> outPuts, IDebugItemResult debugItemResult)
        {
            var variable = debugItemResult.Variable.Replace("[[", "").Replace("]]", "");
            var value = debugItemResult.Value;
            var serviceTestOutput = new ServiceTestOutput(variable, value, "", "");
            var output = serviceTestOutput;
            serviceTestOutput.AddNewAction = () => ((ServiceTestModel)SelectedServiceTest).AddRow(output, dataList);

            if (!string.IsNullOrEmpty(debugItemResult.MoreLink))
            {
                if (outPutState.ActualType == nameof(DsfEnhancedDotNetDllActivity))
                {
                    var realValue = WebClient.DownloadString(debugItemResult.MoreLink);
                    value = realValue.TrimEnd(Environment.NewLine.ToCharArray());
                }
                else
                {
                    serviceTestOutput.AssertOp = "Contains";
                }
            }
            serviceTestOutput.Value = value;
            outPuts.Add(serviceTestOutput);
        }

        static void OnError(Exception exception)
        {
            Dev2Logger.Error(exception, GlobalConstants.WarewolfError);
            throw exception;
        }

        void ItemSelectedAction(ModelItem modelItem)
        {
            if (modelItem == null)
            {
                return;
            }

            var itemType = GetInnerItemType(modelItem);
            if (itemType == typeof(Flowchart) || itemType == typeof(ActivityBuilder))
            {
                return;
            }
            if (itemType == typeof(DsfForEachActivity))
            {
                ProcessForEach(modelItem);
            }
            else if (itemType == typeof(DsfSelectAndApplyActivity))
            {
                ProcessSelectAndApply(modelItem);
            }
            else if (itemType == typeof(DsfSequenceActivity))
            {
                ProcessSequence(modelItem);
            }
            else if (itemType == typeof(GateActivity))
            {
                ProcessGate(modelItem);
            }
            else if (itemType == typeof(SuspendExecutionActivity))
            {
                ProcessSuspendExecution(modelItem);
            }
            else if (itemType == typeof(DsfEnhancedDotNetDllActivity))
            {
                ProcessEnhancedDotNetDll(modelItem);
            }
            else if (itemType == typeof(FlowSwitch<string>))
            {
                ProcessFlowSwitch(modelItem);
            }
            else if (itemType == typeof(DsfSwitch))
            {
                ProcessSwitch(modelItem);
            }
            else if (itemType == typeof(FlowDecision))
            {
                ProcessFlowDecision(modelItem);
            }
            else if (itemType == typeof(DsfDecision))
            {
                ProcessDecision(modelItem);
            }
            else
            {
                ProcessActivity(modelItem);
            }
        }

        static Type GetInnerItemType(ModelItem modelItem)
        {
            var itemType = modelItem.ItemType;
            if (modelItem.Content?.Value != null && itemType == typeof(FlowStep))
            {
                itemType = modelItem.Content.Value.ItemType;
            }
            return itemType;
        }

        void ProcessSequence(ModelItem modelItem)
        {
            var sequence = GetCurrentActivity<DsfSequenceActivity>(modelItem);
            var testStep = BuildParentsFromModelItem(modelItem);
            if (testStep != null)
            {
                AddSequence(sequence, testStep, testStep.Children);
                if (FindExistingStep(testStep.ActivityID.ToString()) == null)
                {
                    SelectedServiceTest.TestSteps.Add(testStep);
                }
            }
            else
            {
                AddSequence(sequence, null, SelectedServiceTest.TestSteps);
            }
        }

        void ProcessGate(ModelItem modelItem)
        {
            var gateActivity = GetCurrentActivity<GateActivity>(modelItem);
            AddGate(gateActivity, null, SelectedServiceTest.TestSteps);
        }

        void ProcessSuspendExecution(ModelItem modelItem)
        {
            var suspendExecutionActivity = GetCurrentActivity<SuspendExecutionActivity>(modelItem);
            AddSuspendExecution(suspendExecutionActivity, null, SelectedServiceTest.TestSteps);
        }

        void ProcessEnhancedDotNetDll(ModelItem modelItem)
        {
            var dotNetDllActivity = GetCurrentActivity<DsfEnhancedDotNetDllActivity>(modelItem);
            var buildParentsFromModelItem = BuildParentsFromModelItem(modelItem);
            if (buildParentsFromModelItem != null)
            {
                AddEnhancedDotNetDll(dotNetDllActivity, buildParentsFromModelItem, buildParentsFromModelItem.Children);
                if (FindExistingStep(buildParentsFromModelItem.ActivityID.ToString()) == null)
                {
                    SelectedServiceTest.TestSteps.Add(buildParentsFromModelItem);
                }
            }
            else
            {
                AddEnhancedDotNetDll(dotNetDllActivity, null, SelectedServiceTest.TestSteps);
            }
        }

        static T GetCurrentActivity<T>(ModelItem modelItem) where T : class
        {
            var activity = modelItem.GetCurrentValue() as T;
            if (activity == null && modelItem.Content?.Value != null)
            {
                activity = modelItem.Content.Value.GetCurrentValue() as T;
            }
            return activity;
        }

        void ProcessForEach(ModelItem modelItem)
        {
            var forEachActivity = GetCurrentActivity<DsfForEachActivity>(modelItem);
            AddForEach(forEachActivity, null, SelectedServiceTest.TestSteps);
        }

        void AddForEach(DsfForEachActivity forEachActivity, IServiceTestStep parent, ObservableCollection<IServiceTestStep> serviceTestSteps)
        {
            if (forEachActivity == null)
            {
                return;
            }
            var uniqueId = forEachActivity.UniqueID;
            var exists = serviceTestSteps.FirstOrDefault(a => a.ActivityID.ToString() == uniqueId);

            var type = typeof(DsfForEachActivity);
            var testStep = CreateMockChildStep(Guid.Parse(uniqueId), parent, type.Name, forEachActivity.DisplayName);
            SetStepIcon(type, testStep);
            var activity = forEachActivity.DataFunc.Handler;

            if (activity is DsfNativeActivity<string> act)
            {
                if (act.GetType() == typeof(DsfSequenceActivity))
                {
                    AddSequence(act as DsfSequenceActivity, testStep, testStep.Children);
                }
                else
                {
                    AddChildActivity(act, testStep);
                }
            }
            else
            {
                if (activity.GetType() == typeof(DsfSelectAndApplyActivity))
                {
                    AddSelectAndApply(activity as DsfSelectAndApplyActivity, testStep, testStep.Children);
                }
                else
                {
                    if (activity.GetType() == type)
                    {
                        AddForEach(activity as DsfForEachActivity, testStep, testStep.Children);
                    }
                }
            }

            if (activity is DsfActivity workFlowService)
            {
                AddChildActivity(workFlowService, testStep);
            }
            if (exists == null)
            {
                serviceTestSteps.Add(testStep);
            }
        }

        static IServiceTestStep CreateMockChildStep(Guid uniqueId, IServiceTestStep parent, string typeName, string displayName) => new ServiceTestStep(uniqueId, typeName, new ObservableCollection<IServiceTestOutput>(), StepType.Mock)
        {
            StepDescription = displayName,
            Parent = parent
        };

        void ProcessSelectAndApply(ModelItem modelItem)
        {
            var selectAndApplyActivity = GetCurrentActivity<DsfSelectAndApplyActivity>(modelItem);
            AddSelectAndApply(selectAndApplyActivity, null, SelectedServiceTest.TestSteps);
        }

        void AddSelectAndApply(DsfSelectAndApplyActivity selectApplyActivity, IServiceTestStep parent, ObservableCollection<IServiceTestStep> serviceTestSteps)
        {
            if (selectApplyActivity == null)
            {
                return;
            }
            var uniqueId = selectApplyActivity.UniqueID;
            var exists = serviceTestSteps.FirstOrDefault(a => a.ActivityID.ToString() == uniqueId);

            var type = typeof(DsfSelectAndApplyActivity);
            var testStep = CreateMockChildStep(Guid.Parse(uniqueId), parent, type.Name, selectApplyActivity.DisplayName);
            SetStepIcon(type, testStep);
            var activity = selectApplyActivity.ApplyActivityFunc.Handler;

            if (activity is DsfNativeActivity<string> act)
            {
                if (act.GetType() == typeof(DsfSequenceActivity))
                {
                    AddSequence(act as DsfSequenceActivity, testStep, testStep.Children);
                }
                else
                {
                    AddChildActivity(act, testStep);
                }
            }
            else
            {
                if (activity != null && activity.GetType() == typeof(DsfForEachActivity))
                {
                    AddForEach(activity as DsfForEachActivity, testStep, testStep.Children);
                }
                else
                {
                    if (activity != null && activity.GetType() == typeof(DsfSelectAndApplyActivity))
                    {
                        AddSelectAndApply(activity as DsfSelectAndApplyActivity, testStep, testStep.Children);
                    }
                }
            }

            if (activity is DsfActivity workFlowService)
            {
                AddChildActivity(workFlowService, testStep);
            }
            if (exists == null)
            {
                serviceTestSteps.Add(testStep);
            }
            else
            {
                AddMissingChild(serviceTestSteps, testStep);
            }
        }

        void AddSequence(DsfSequenceActivity sequence, IServiceTestStep parent, ObservableCollection<IServiceTestStep> serviceTestSteps)
        {
            if (sequence is null)
            {
                return;
            }
            var uniqueId = sequence.UniqueID;
            var exists = serviceTestSteps.FirstOrDefault(a => a.ActivityID.ToString() == uniqueId);

            var type = typeof(DsfSequenceActivity);
            var testStep = CreateMockChildStep(Guid.Parse(uniqueId), parent, type.Name, sequence.DisplayName);
            SetStepIcon(type, testStep);
            foreach (var activity in sequence.Activities)
            {
                AddSequenceActivity(testStep, activity);
            }
            if (exists == null)
            {
                serviceTestSteps.Add(testStep);
            }
            else
            {
                AddMissingChild(serviceTestSteps, testStep);
            }
        }

        void AddSequenceActivity(IServiceTestStep testStep, Activity activity)
        {
            if (activity is DsfNativeActivity<string> act)
            {
                if (act.GetType() == typeof(DsfSequenceActivity))
                {
                    AddSequence(act as DsfSequenceActivity, testStep, testStep.Children);
                }
                else
                {
                    AddChildActivity(act, testStep);
                }
            }
            else
            {
                if (activity is DsfNativeActivity<bool> act2)
                {
                    AddChildActivity(act2, testStep);
                }
                if (activity.GetType() == typeof(DsfForEachActivity))
                {
                    AddForEach(activity as DsfForEachActivity, testStep, testStep.Children);
                }
                else
                {
                    if (activity.GetType() == typeof(DsfSelectAndApplyActivity))
                    {
                        AddSelectAndApply(activity as DsfSelectAndApplyActivity, testStep, testStep.Children);
                    }
                }
            }
        }

        void AddGate(GateActivity gateActivity, IServiceTestStep parent, ObservableCollection<IServiceTestStep> serviceTestSteps)
        {
            if (gateActivity == null)
            {
                return;
            }
            var uniqueId = gateActivity.UniqueID;
            var exists = serviceTestSteps.FirstOrDefault(a => a.ActivityID.ToString() == uniqueId);

            var type = typeof(GateActivity);
            var testStep = CreateMockChildStep(Guid.Parse(uniqueId), parent, type.Name, gateActivity.DisplayName);
            SetStepIcon(type, testStep);
            var activity = gateActivity.DataFunc.Handler;

            if (activity is DsfNativeActivity<string> act)
            {
                if (act.GetType() == typeof(DsfSequenceActivity))
                {
                    AddSequence(act as DsfSequenceActivity, testStep, testStep.Children);
                }
                else
                {
                    AddChildActivity(act, testStep);
                }
            }
            else
            {
                if (activity?.GetType() == typeof(DsfSelectAndApplyActivity))
                {
                    AddSelectAndApply(activity as DsfSelectAndApplyActivity, testStep, testStep.Children);
                }
                else
                {
                    if (activity?.GetType() == type)
                    {
                        AddGate(activity as GateActivity, testStep, testStep.Children);
                    }
                }
            }

            if (activity is DsfActivity workFlowService)
            {
                AddChildActivity(workFlowService, testStep);
            }
            if (exists == null)
            {
                serviceTestSteps.Add(testStep);
            }
        }

        void AddSuspendExecution(SuspendExecutionActivity suspendExecutionActivity, IServiceTestStep parent, ICollection<IServiceTestStep> serviceTestSteps)
        {
            if (suspendExecutionActivity == null)
            {
                return;
            }
            var uniqueId = suspendExecutionActivity.UniqueID;
            var exists = serviceTestSteps.FirstOrDefault(a => a.ActivityID.ToString() == uniqueId);

            var type = typeof(SuspendExecutionActivity);
            var testStep = CreateMockChildStep(Guid.Parse(uniqueId), parent, type.Name, suspendExecutionActivity.DisplayName);
            SetStepIcon(type, testStep);
            var activity = suspendExecutionActivity.SaveDataFunc.Handler;

            if (activity is DsfNativeActivity<string> act)
            {
                if (act.GetType() == typeof(DsfSequenceActivity))
                {
                    AddSequence(act as DsfSequenceActivity, testStep, testStep.Children);
                }
                else
                {
                    AddChildActivity(act, testStep);
                }
            }
            else
            {
                if (activity?.GetType() == typeof(DsfSelectAndApplyActivity))
                {
                    AddSelectAndApply(activity as DsfSelectAndApplyActivity, testStep, testStep.Children);
                }
                else
                {
                    if (activity?.GetType() == type)
                    {
                        AddSuspendExecution(activity as SuspendExecutionActivity, testStep, testStep.Children);
                    }
                }
            }

            if (activity is DsfActivity workFlowService)
            {
                AddChildActivity(workFlowService, testStep);
            }
            if (exists == null)
            {
                serviceTestSteps.Add(testStep);
            }
        }

        void AddEnhancedDotNetDll(DsfEnhancedDotNetDllActivity dotNetDllActivity, IServiceTestStep parent, ObservableCollection<IServiceTestStep> serviceTestSteps)
        {
            if (dotNetDllActivity == null)
            {
                return;
            }
            var uniqueId = dotNetDllActivity.UniqueID;
            var exists = serviceTestSteps.FirstOrDefault(a => a.ActivityID.ToString() == uniqueId);

            var type = typeof(DsfEnhancedDotNetDllActivity);
            var testStep = CreateMockChildStep(Guid.Parse(uniqueId), parent, type.Name, dotNetDllActivity.DisplayName);
            SetStepIcon(type, testStep);
            if (exists == null)
            {
                serviceTestSteps.Add(testStep);
                AddEnhancedDotNetDllConstructor(dotNetDllActivity, testStep);
                foreach (var pluginAction in dotNetDllActivity.MethodsToRun)
                {
                    if (!pluginAction.IsVoid)
                    {
                        AddEnhancedDotNetDllMethod(pluginAction, testStep);
                    }
                }
            }
            else
            {
                AddMissingChild(serviceTestSteps, exists);
                var constructorStepExists = exists.Children.FirstOrDefault(step => step.ActivityID == dotNetDllActivity.Constructor.ID);
                if (constructorStepExists == null)
                {
                    AddEnhancedDotNetDllConstructor(dotNetDllActivity, exists);
                }
                foreach (var pluginAction in dotNetDllActivity.MethodsToRun)
                {
                    AddEnhancedDotNetDllMethodChild(pluginAction, exists);
                }
            }
        }

        void AddEnhancedDotNetDllMethodChild(IPluginAction pluginAction, IServiceTestStep exists)
        {
            if (!pluginAction.IsVoid)
            {
                var actionExists = exists.Children.FirstOrDefault(step => step.ActivityID == pluginAction.ID);
                if (actionExists != null)
                {
                    AddEnhancedDotNetDllMethod(pluginAction, exists);
                }
            }
        }

        static void AddMissingChild(ObservableCollection<IServiceTestStep> serviceTestSteps, IServiceTestStep testStep)
        {
            if (serviceTestSteps.Count < 1)
            {
                return;
            }
            foreach (var serviceTestStep in serviceTestSteps)
            {
                if (serviceTestStep.ActivityID != testStep.ActivityID)
                {
                    continue;
                }
                AddMissingChild(serviceTestStep, testStep);
            }
        }

        static void AddMissingChild(IServiceTestStep serviceTestStep, IServiceTestStep testStep)
        {
            if (serviceTestStep.Children.Count == testStep.Children.Count)
            {
                foreach (var child in testStep.Children)
                {
                    AddMissingChild(serviceTestStep.Children, child);
                }
            }
            else
            {
                foreach (var child in testStep.Children)
                {
                    AddMissingChild(serviceTestStep, testStep, child);
                }
            }
        }

        static void AddMissingChild(IServiceTestStep serviceTestStep, IServiceTestStep testStep, IServiceTestStep child)
        {
            var testSteps = serviceTestStep.Children.Where(a => a.ActivityID == child.ActivityID);
            if (!testSteps.Any())
            {
                var indexOf = testStep.Children.IndexOf(child);
                child.Parent = serviceTestStep;
                serviceTestStep.Children.Insert(indexOf, child);
            }
        }

        void AddChildActivity<T>(DsfNativeActivity<T> act, IServiceTestStep testStep)
        {
            var outputs = act.GetOutputs();
            if (outputs != null && outputs.Count > 0)
            {
                var serviceTestStep = CreateMockChildStep(Guid.Parse(act.UniqueID), testStep, act.GetType().Name, act.DisplayName);
                var serviceTestOutputs = outputs.Select(output => new ServiceTestOutput(output, "", "", "")
                {
                    HasOptionsForValue = false,
                    AddStepOutputRow = serviceTestStep.AddNewOutput
                }).Cast<IServiceTestOutput>().ToObservableCollection();
                serviceTestStep.StepOutputs = serviceTestOutputs;
                SetStepIcon(act.GetType(), serviceTestStep);
                testStep.Children.Add(serviceTestStep);
            }
        }

        void AddEnhancedDotNetDllConstructor(DsfEnhancedDotNetDllActivity dotNetConstructor, IServiceTestStep testStep)
        {
            var serviceTestStep = CreateMockChildStep(dotNetConstructor.Constructor.ID, testStep, testStep.ActivityType, dotNetConstructor.Constructor.ConstructorName);
            var serviceOutputs = new ObservableCollection<IServiceTestOutput>
            {
                new ServiceTestOutput(dotNetConstructor.ObjectName ?? "", "", "", "")
            };
            serviceTestStep.StepOutputs = serviceOutputs;
            SetStepIcon(testStep.ActivityType, serviceTestStep);
            testStep.Children.Insert(0, serviceTestStep);
        }

        void AddEnhancedDotNetDllMethod(IPluginAction pluginAction, IServiceTestStep testStep)
        {
            var serviceTestStep = CreateMockChildStep(pluginAction.ID, testStep, testStep.ActivityType, pluginAction.Method);
            var serviceOutputs = new ObservableCollection<IServiceTestOutput>
            {
                new ServiceTestOutput(pluginAction.OutputVariable ?? "", "", "", "")
            };
            serviceTestStep.StepOutputs = serviceOutputs;
            SetStepIcon(testStep.ActivityType, serviceTestStep);
            testStep.Children.Add(serviceTestStep);
        }

        void ProcessSwitch(ModelItem modelItem)
        {
            var cases = modelItem.GetProperty("Switches") as Dictionary<string, IDev2Activity>;
            var uniqueId = modelItem.GetProperty("UniqueID").ToString();
            var exists = SelectedServiceTest.TestSteps.FirstOrDefault(a => a.ActivityID.ToString() == uniqueId);

            if (exists == null && SelectedServiceTest != null)
            {
                var switchOptions = cases?.Select(pair => pair.Key).ToList();

                if (modelItem.GetProperty("Default") is List<IDev2Activity> defaultCase)
                {
                    switchOptions?.Insert(0, "Default");
                }
                var serviceTestOutputs = new ObservableCollection<IServiceTestOutput>();
                var serviceTestOutput = new ServiceTestOutput(GlobalConstants.ArmResultText, "", "", "")
                {
                    HasOptionsForValue = true,
                    OptionsForValue = switchOptions
                };
                serviceTestOutputs.Add(serviceTestOutput);
                if (SelectedServiceTest.AddTestStep(uniqueId, modelItem.GetProperty("DisplayName").ToString(), nameof(DsfSwitch), serviceTestOutputs) is ServiceTestStep serviceTestStep)
                {
                    SetStepIcon(typeof(DsfSwitch), serviceTestStep);
                }
            }
        }

        IServiceTestStep ProcessFlowSwitch(ModelItem modelItem)
        {
            if (modelItem == null)
            {
                return null;
            }
            var condition = modelItem.GetProperty("Expression");
            var activity = (DsfFlowNodeActivity<string>)condition;
            var flowSwitch = GetCurrentActivity<FlowSwitch<string>>(modelItem);
            if (flowSwitch == null)
            {
                var modelItemParent = modelItem.Parent;
                if (modelItemParent != null)
                {
                    flowSwitch = GetCurrentActivity<FlowSwitch<string>>(modelItemParent);
                    condition = modelItemParent.GetProperty("Expression");
                }
                activity = (DsfFlowNodeActivity<string>)condition;
            }
            if (flowSwitch != null)
            {
                var uniqueId = activity.UniqueID;
                var exists = SelectedServiceTest.TestSteps.FirstOrDefault(a => a.ActivityID.ToString() == uniqueId);

                if (exists == null && SelectedServiceTest != null)
                {
                    return CreateFlowSwitchTestStep(flowSwitch, uniqueId);
                }
            }
            return null;
        }

        IServiceTestStep CreateFlowSwitchTestStep(FlowSwitch<string> flowSwitch, string uniqueId)
        {
            var switchOptions = flowSwitch.Cases?.Select(pair => pair.Key).ToList();
            if (flowSwitch.Default != null)
            {
                switchOptions?.Insert(0, "Default");
            }
            var serviceTestOutputs = new ObservableCollection<IServiceTestOutput>();
            var serviceTestOutput = new ServiceTestOutput(GlobalConstants.ArmResultText, "", "", "")
            {
                HasOptionsForValue = true,
                OptionsForValue = switchOptions
            };
            serviceTestOutputs.Add(serviceTestOutput);
            var serviceTestStep = SelectedServiceTest.AddTestStep(uniqueId, flowSwitch.DisplayName, nameof(DsfSwitch), serviceTestOutputs);
            if (serviceTestStep != null)
            {
                SetStepIcon(typeof(DsfSwitch), serviceTestStep);
            }

            return serviceTestStep;
        }

        void ProcessActivity(ModelItem modelItem)
        {
            var step = BuildParentsFromModelItem(modelItem);
            if (step != null)
            {
                if (step.Parent == null)
                {
                    ProcessStepActivity(step);
                }
                else
                {
                    ProcessParentsActivities(step);
                }
            }
            else
            {
                var computedValue = modelItem.GetCurrentValue();
                var boolAct = computedValue as DsfActivityAbstract<bool>;
                var activityUniqueId = boolAct?.UniqueID;
                var activityDisplayName = boolAct?.DisplayName;
                var type = computedValue.GetType();
                var serviceTestOutputs = new ObservableCollection<IServiceTestOutput>();
                var alreadyAdded = CheckForExists(activityUniqueId, new List<string>(), activityDisplayName, type);
                if (alreadyAdded == null && activityUniqueId != null && type == typeof(DsfActivity))
                {
                    var testStep = CreateMockChildStep(Guid.Parse(activityUniqueId), null, type.Name, activityDisplayName);
                    serviceTestOutputs.Add(new ServiceTestOutput("", "", "", "")
                    {
                        AssertOp = "",
                        AddStepOutputRow = testStep.AddNewOutput,
                        IsSearchCriteriaEnabled = true
                    });
                    testStep.StepOutputs = serviceTestOutputs;
                    SelectedServiceTest.TestSteps.Add(testStep);
                    SetStepIcon(type, testStep);
                }
            }
        }

        void ProcessStepActivity(IServiceTestStep step)
        {
            var exists = FindExistingStep(step.ActivityID.ToString());
            if (exists == null)
            {
                SelectedServiceTest.TestSteps.Add(step);
            }
        }

        void ProcessParentsActivities(IServiceTestStep step)
        {
            var parent = step.Parent;
            while (parent != null)
            {
                var child = parent;
                if (child.Parent == null)
                {
                    var exists = FindExistingStep(step.ActivityID.ToString());
                    if (exists == null)
                    {
                        SelectedServiceTest.TestSteps.Add(child);
                    }
                }
                parent = child.Parent;
            }
        }

        IServiceTestStep BuildParentsFromModelItem(ModelItem modelItem)
        {
            var computedValue = modelItem.GetCurrentValue();
            if (computedValue is FlowStep && modelItem.Content?.Value != null)
            {
                computedValue = modelItem.Content.Value.GetCurrentValue();
            }
            var dsfActivityAbstract = computedValue as DsfActivityAbstract<string>;

            var activityUniqueId = dsfActivityAbstract?.UniqueID;
            var activityDisplayName = dsfActivityAbstract?.DisplayName;
            var outputs = dsfActivityAbstract?.GetOutputs();

            if (dsfActivityAbstract == null)
            {
                var boolAct = computedValue as DsfActivityAbstract<bool>;

                activityUniqueId = boolAct?.UniqueID;
                activityDisplayName = boolAct?.DisplayName;
                outputs = boolAct?.GetOutputs();
            }

            var type = computedValue.GetType();
            var item = modelItem.Parent;

            if (item != null && (item.ItemType != typeof(Flowchart) || item.ItemType == typeof(ActivityBuilder)))
            {
                var parentComputedValue = item.GetCurrentValue();
                if (parentComputedValue is FlowStep)
                {
                    var parentFlowStepUniqueId = GetParentFlowStepUniqueId(computedValue, item, ref parentComputedValue);
                    if (parentFlowStepUniqueId == activityUniqueId)
                    {
                        parentComputedValue = item.Content.Value.GetCurrentValue();
                    }
                    var parentActivityAbstract = parentComputedValue as DsfActivityAbstract<string>;
                    var parentActivityUniqueId = parentActivityAbstract?.UniqueID;
                    if (parentActivityAbstract == null)
                    {
                        var boolParentAct = computedValue as DsfActivityAbstract<bool>;
                        parentActivityUniqueId = boolParentAct?.UniqueID;
                    }
                    if (parentActivityUniqueId == activityUniqueId)
                    {
                        return CheckForExists(activityUniqueId, outputs, activityDisplayName, type);
                    }
                }

                if (outputs != null && outputs.Count > 0 && ServiceTestStepWithOutputs(activityUniqueId, activityDisplayName, outputs, type, item, out IServiceTestStep serviceTestStep) && ServiceTestStepWithOutputs(activityUniqueId, activityDisplayName, outputs, type, item, out IServiceTestStep testStep))
                {
                    return testStep;
                }

                if (ServiceTestStepGetParentType(item, out var serviceTestStep1))
                {
                    return serviceTestStep1;
                }
                return BuildParentsFromModelItem(item);
            }
            return CheckForExists(activityUniqueId, outputs, activityDisplayName, type);
        }

        static string GetParentFlowStepUniqueId(object computedValue, ModelItem item, ref object parentComputedValue)
        {
            if (item.Content?.Value != null)
            {
                parentComputedValue = item.Content.Value.GetCurrentValue();
            }
            var parentActivityAbstract = parentComputedValue as DsfActivityAbstract<string>;
            var parentActivityUniqueId = parentActivityAbstract?.UniqueID;
            if (parentActivityAbstract == null)
            {
                var boolParentAct = computedValue as DsfActivityAbstract<bool>;
                parentActivityUniqueId = boolParentAct?.UniqueID;
            }

            return parentActivityUniqueId;
        }

        IServiceTestStep CheckForExists(string activityUniqueId, List<string> outputs, string activityDisplayName, Type type)
        {
            var exists = FindExistingStep(activityUniqueId);
            if (exists == null && outputs != null && outputs.Count > 0)
            {
                var serviceTestStep = SelectedServiceTest.AddTestStep(activityUniqueId, activityDisplayName, type.Name, new ObservableCollection<IServiceTestOutput>());

                var serviceTestOutputs = outputs.Select(output =>
                {
                    return new ServiceTestOutput(output ?? "", "", "", "")
                    {
                        HasOptionsForValue = false,
                        AddStepOutputRow = s => { serviceTestStep?.AddNewOutput(s); }
                    };
                }).Cast<IServiceTestOutput>().ToList();
                if (serviceTestStep != null)
                {
                    serviceTestStep.StepOutputs = serviceTestOutputs.ToObservableCollection();
                    SetStepIcon(type, serviceTestStep);

                    return serviceTestStep;
                }
            }
            return exists;
        }

        bool ServiceTestStepWithOutputs(string uniqueId, string displayName, List<string> outputs, Type type, ModelItem item, out IServiceTestStep serviceTestStep)
        {
            var exists = FindExistingStep(uniqueId);
            if (exists == null)
            {
                var step = CreateServiceTestStep(Guid.Parse(uniqueId), displayName, type, new List<IServiceTestOutput>());
                var serviceTestOutputs = AddOutputsIfHasVariable(outputs, step);
                step.StepOutputs = serviceTestOutputs.ToObservableCollection();
                SetParentChild(item, step);
                {
                    serviceTestStep = step;
                    return true;
                }
            }
            serviceTestStep = null;
            return false;
        }

        static List<IServiceTestOutput> AddOutputsIfHasVariable(List<string> outputs, IServiceTestStep step)
        {
            var serviceTestOutputs =
                outputs.Select(output => new ServiceTestOutput(output ?? "", "", "", "")
                {
                    HasOptionsForValue = false,
                    AddStepOutputRow = step.AddNewOutput
                }).Cast<IServiceTestOutput>().ToList();
            return serviceTestOutputs;
        }

        static List<IServiceTestOutput> AddOutputs(List<string> outputs, IServiceTestStep step)
        {
            if (outputs == null || outputs.Count == 0)
            {
                return new List<IServiceTestOutput>
                {
                    new ServiceTestOutput("", "", "", "")
                    {
                        HasOptionsForValue = false,
                        AddStepOutputRow = step.AddNewOutput
                    }
                };
            }
            var serviceTestOutputs =
                outputs.Select(output => new ServiceTestOutput(output ?? "", "", "", "")
                {
                    HasOptionsForValue = false,
                    AddStepOutputRow = step.AddNewOutput
                }).Cast<IServiceTestOutput>().ToList();
            return serviceTestOutputs;
        }

        IServiceTestStep FindExistingStep(string uniqueId)
        {
            var exists = SelectedServiceTest.TestSteps.Flatten(step => step.Children).FirstOrDefault(a => a.ActivityID.ToString() == uniqueId);
            return exists;
        }

        bool ServiceTestStepGetParentType(ModelItem item, out IServiceTestStep serviceTestStep)
        {
            Type activityType = null;
            var uniqueId = string.Empty;
            var displayName = string.Empty;
            if (item.ItemType == typeof(DsfSequenceActivity))
            {
                if (item.GetCurrentValue() is DsfSequenceActivity act)
                {
                    uniqueId = act.UniqueID;
                    activityType = typeof(DsfSequenceActivity);
                    displayName = act.DisplayName;
                }
            }
            else if (item.ItemType == typeof(DsfForEachActivity))
            {
                if (item.GetCurrentValue() is DsfForEachActivity act)
                {
                    uniqueId = act.UniqueID;
                    activityType = typeof(DsfForEachActivity);
                    displayName = act.DisplayName;
                }
            }
            else if (item.ItemType == typeof(SuspendExecutionActivity))
            {
                if (item.GetCurrentValue() is SuspendExecutionActivity act)
                {
                    uniqueId = act.UniqueID;
                    activityType = typeof(SuspendExecutionActivity);
                    displayName = act.DisplayName;
                }
            }
            else
            {
                if (item.ItemType == typeof(DsfSelectAndApplyActivity) && item.GetCurrentValue() is DsfSelectAndApplyActivity act)
                {
                    uniqueId = act.UniqueID;
                    activityType = typeof(DsfSelectAndApplyActivity);
                    displayName = act.DisplayName;
                }
            }
            if (!string.IsNullOrWhiteSpace(uniqueId))
            {
                var exists = FindExistingStep(uniqueId);
                if (exists == null)
                {
                    var step = CreateServiceTestStep(Guid.Parse(uniqueId), displayName, activityType, new List<IServiceTestOutput>());
                    SetParentChild(item, step);
                    {
                        serviceTestStep = step;
                        return true;
                    }
                }
                serviceTestStep = SelectedServiceTest.TestSteps.Flatten(step => step.Children).FirstOrDefault(a => a.ActivityID.ToString() == uniqueId);
                return true;
            }
            serviceTestStep = null;
            return false;
        }

        IServiceTestStep CreateServiceTestStep(Guid uniqueId, string displayName, Type type, List<IServiceTestOutput> serviceTestOutputs)
        {
            var step = new ServiceTestStep(uniqueId, type.Name, serviceTestOutputs.ToObservableCollection(), StepType.Assert)
            {
                StepDescription = displayName
            };
            SetStepIcon(type, step);
            return step;
        }

        void SetParentChild(ModelItem item, IServiceTestStep step)
        {
            var parent = BuildParentsFromModelItem(item);
            if (parent != null)
            {
                step.Parent = parent;
                parent.Children.Add(step);
            }
        }

        void SetStepIcon(Type type, IServiceTestStep serviceTestStep)
        {
            SetStepIcon(type?.Name, serviceTestStep);
        }

        void SetStepIcon(string typeName, IServiceTestStep serviceTestStep)
        {
            if (string.IsNullOrEmpty(typeName) || serviceTestStep == null)
            {
                return;
            }
            var actTypeName = typeName;
            if (actTypeName == "DsfActivity")
            {
                if (serviceTestStep is ServiceTestStep serviceStep)
                {
                    serviceStep.StepIcon = Application.Current?.TryFindResource("Explorer-WorkflowService") as ImageSource;
                }
                return;
            }
            if (typeName == "DsfDecision" || typeName == "FlowDecision")
            {
                actTypeName = "DsfFlowDecisionActivity";
            }
            if (typeName == "DsfSwitch")
            {
                actTypeName = "DsfFlowSwitchActivity";
            }
            var type = _types?.FirstOrDefault(x => x.Name == actTypeName);
            if (type == null || !type.GetCustomAttributes().Any(a => a is ToolDescriptorInfo)) return;
            var desc = GetDescriptorFromAttribute(type);
            if (serviceTestStep is ServiceTestStep serviceStepAsTestStep)
            {
                serviceStepAsTestStep.StepIcon = Application.Current?.TryFindResource(desc.Icon) as ImageSource;
            }
        }

        static IToolDescriptor GetDescriptorFromAttribute(Type type)
        {
            var info = type.GetCustomAttributes(typeof(ToolDescriptorInfo)).First() as ToolDescriptorInfo;
            return new ToolDescriptor(info.Id, info.Designer, new WarewolfType(type.FullName, type.Assembly.GetName().Version, type.Assembly.Location), info.Name, info.Icon, type.Assembly.GetName().Version, true, info.Category, ToolType.Native, info.IconUri, info.FilterTag, info.ResourceToolTip, info.ResourceHelpText);
        }

        void ProcessDecision(ModelItem modelItem)
        {
            if (modelItem == null)
            {
                return;
            }
            var uniqueId = modelItem.GetProperty("UniqueID").ToString();
            var exists = SelectedServiceTest.TestSteps.FirstOrDefault(a => a.ActivityID.ToString() == uniqueId);

            if (exists == null && SelectedServiceTest != null)
            {
                var serviceTestOutputs = new ObservableCollection<IServiceTestOutput>();

                if (modelItem.GetProperty("Conditions") is Dev2DecisionStack dds)
                {
                    var serviceTestOutput = new ServiceTestOutput(GlobalConstants.ArmResultText, "", "", "")
                    {
                        HasOptionsForValue = true,
                        OptionsForValue = new List<string> { dds.TrueArmText, dds.FalseArmText }
                    };
                    serviceTestOutputs.Add(serviceTestOutput);
                }
                if (SelectedServiceTest.AddTestStep(uniqueId, modelItem.GetProperty("DisplayName").ToString(), nameof(DsfDecision), serviceTestOutputs) is ServiceTestStep serviceTestStep)
                {
                    SetStepIcon(typeof(DsfDecision), serviceTestStep);
                }
            }
        }

        IServiceTestStep ProcessFlowDecision(ModelItem modelItem)
        {
            if (modelItem == null)
            {
                return null;
            }
            var condition = modelItem.GetProperty("Condition");
            string expression;
            string uniqueId;
            var activity = (DsfFlowNodeActivity<bool>)condition;
            if (activity != null)
            {
                uniqueId = activity.UniqueID;
                expression = activity.ExpressionText;
            }
            else
            {
                expression = modelItem.GetProperty("ExpressionText") as string;
                uniqueId = modelItem.GetProperty("UniqueID") as string;
            }
            if (!string.IsNullOrEmpty(expression))
            {
                var eval = Dev2DecisionStack.ExtractModelFromWorkflowPersistedData(expression);

                if (!string.IsNullOrEmpty(eval))
                {
                    var ser = new Dev2JsonSerializer();
                    var dds = ser.Deserialize<Dev2DecisionStack>(eval);

                    var exists = SelectedServiceTest.TestSteps?.FirstOrDefault(a => a.ActivityID.ToString() == uniqueId);

                    if (exists == null && SelectedServiceTest != null)
                    {
                        var serviceTestOutputs = new ObservableCollection<IServiceTestOutput>();
                        var serviceTestOutput = new ServiceTestOutput(GlobalConstants.ArmResultText, "", "", "")
                        {
                            HasOptionsForValue = true,
                            OptionsForValue = new List<string> { dds.TrueArmText, dds.FalseArmText }
                        };
                        serviceTestOutputs.Add(serviceTestOutput);
                        var serviceTestStep = SelectedServiceTest.AddTestStep(uniqueId, dds.DisplayText, nameof(DsfDecision), serviceTestOutputs);
                        SetStepIcon(typeof(DsfDecision), serviceTestStep);
                        return serviceTestStep;
                    }
                }
            }
            return null;
        }

        void SetServerName(IContextualResourceModel resourceModel)
        {
            if (resourceModel.Environment == null || resourceModel.Environment.IsLocalHost)
            {
                _serverName = string.Empty;
            }
            else
            {
                if (!resourceModel.Environment.IsLocalHost)
                {
                    _serverName = " - " + resourceModel.Environment.Name;
                }
            }
        }

        void OnReceivedResourceAffectedMessage(Guid resourceId, CompileMessageList changeList)
        {
            if (resourceId == ResourceModel.ID)
            {
                IsLoading = true;
                AsyncWorker.Start(() =>
                {
                    var contextModel = ResourceModel?.Environment?.ResourceRepository?.LoadContextualResourceModel(resourceId);
                    _resourceModel = contextModel;
                    return GetTests();
                }, models =>
                {
                    var dummyTest = new DummyServiceTest(CreateTests) { TestName = "Create a new test." };
                    models.Add(dummyTest);
                    var testName = SelectedServiceTest?.TestName;
                    SelectedServiceTest = dummyTest;
                    Tests = models;
                    SelectedServiceTest = _tests.FirstOrDefault(model => model.TestName == testName);
                    var mainViewModel = CustomContainer.Get<IShellViewModel>();
                    WorkflowDesignerViewModel = mainViewModel?.CreateNewDesigner(ResourceModel);
                    if (WorkflowDesignerViewModel != null)
                    {
                        WorkflowDesignerViewModel.ItemSelectedAction = ItemSelectedAction;
                    }
                    IsLoading = false;
                });
            }
        }

        bool IsServerConnected() => ResourceModel.Environment.IsConnected;

        void StopTest()
        {
            SelectedServiceTest.IsTestRunning = false;
            SelectedServiceTest.TestPending = true;
            ServiceTestCommandHandler.StopTest(ResourceModel);
        }

        void RunSelectedTestInBrowser()
        {
            var runSelectedTestUrl = GetWebRunUrlForTest(SelectedServiceTest);
            ServiceTestCommandHandler.RunSelectedTestInBrowser(runSelectedTestUrl, _processExecutor);
        }

        void RunSelectedTest()
        {
            if (SelectedServiceTest != null)
            {
                if (SelectedServiceTest.IsDirty)
                {
                    if (ShowPopupWhenDuplicates())
                    {
                        return;
                    }
                    Save(new List<IServiceTestModel> { SelectedServiceTest });
                    if (IsResourceDeleted)
                    {
                        return;
                    }
                }
                ServiceTestCommandHandler.RunSelectedTest(SelectedServiceTest, ResourceModel, AsyncWorker);
                ViewModelUtils.RaiseCanExecuteChanged(StopTestCommand);
            }
        }

        void RunAllTestsInBrowser()
        {
            ServiceTestCommandHandler.RunAllTestsInBrowser(IsDirty, RunAllTestsUrl, _processExecutor);
        }

        private void RunAllCoverageInBrowser()
        {
            ServiceTestCommandHandler.RunAllTestCoverageInBrowser(IsDirty, RunAllCoverageUrl, _processExecutor);
        }

        void RunAllTests()
        {
            ServiceTestCommandHandler.RunAllTestsCommand(IsDirty, RealTests().Where(model => model.Enabled), ResourceModel, AsyncWorker);
            SelectedServiceTest = null;
        }

        void DuplicateTest()
        {
            var testNumber = GetNewTestNumber(SelectedServiceTest.TestName);
            var duplicateTest = ServiceTestCommandHandler.DuplicateTest(SelectedServiceTest, testNumber);
            AddAndSelectTest(duplicateTest);
            foreach (var testStep in duplicateTest.TestSteps)
            {
                var typeName = testStep.ActivityType;
                SetStepIcon(typeName, testStep);
            }
        }

        bool CanDeleteTest(IServiceTestModel selectedTestModel) => GetPermissions() && selectedTestModel != null && !selectedTestModel.Enabled && IsServerConnected();

        IAsyncWorker AsyncWorker { get; }
        IEventAggregator EventPublisher { get; }

        void CreateTests(bool isFromDebug = false)
        {
            _canAddFromDebug = true;
            SelectedServiceTest = null;
            if (IsDirty)
            {
                PopupController?.Show(Resources.Languages.Core.ServiceTestSaveEditedTestsMessage, Resources.Languages.Core.ServiceTestSaveEditedTestsHeader, MessageBoxButton.OK, MessageBoxImage.Error, null, false, true, false, false, false, false);
                _canAddFromDebug = false;
                return;
            }

            var testNumber = GetNewTestNumber("Test");
            var testModel = ServiceTestCommandHandler.CreateTest(ResourceModel, testNumber, isFromDebug);
            AddAndSelectTest(testModel);
        }

        bool _canAddFromDebug;
        bool _isLoading;
        bool _isValid;
        bool _dirty;
        IWarewolfWebClient _webClient;

        int GetNewTestNumber(string testName)
        {
            var counter = 1;
            var fullName = testName + " " + counter;

            while (Contains(fullName))
            {
                counter++;
                fullName = testName + " " + counter;
            }

            return counter;
        }

        bool Contains(string nameToCheck)
        {
            var serviceTestModel = RealTests().FirstOrDefault(a => a.TestName.Contains(nameToCheck));
            return serviceTestModel != null;
        }

        void SetDuplicateTestTooltip()
        {
            if (SelectedServiceTest != null)
            {
                SelectedServiceTest.DuplicateTestTooltip = SelectedServiceTest.NewTest ? Resources.Languages.Tooltips.ServiceTestNewTestDisabledDuplicateSelectedTestTooltip : CanDuplicateTest ? Resources.Languages.Tooltips.ServiceTestDuplicateSelectedTestTooltip : Resources.Languages.Tooltips.ServiceTestDisabledDuplicateSelectedTestTooltip;
            }
        }

        void AddAndSelectTest(IServiceTestModel testModel)
        {
            var index = _tests.Count - 1;
            if (index >= 0)
            {
                _tests.Insert(index, testModel);
            }
            else
            {
                _tests.Add(testModel);
            }
            SelectedServiceTest = testModel;
            var isDirty = IsDirty;
            SetDisplayName(isDirty);
        }

        bool CanStopTest => SelectedServiceTest != null && SelectedServiceTest.IsTestRunning;
        bool CanRunSelectedTestInBrowser => SelectedServiceTest != null && !SelectedServiceTest.IsDirty && IsServerConnected();
        bool CanRunSelectedTest => GetPermissions() && IsServerConnected();
        bool CanDuplicateTest => GetPermissions() && SelectedServiceTest != null && !SelectedServiceTest.NewTest;

        public bool CanSave { get; set; }

        bool IsResourceDeleted { get; set; }

        static bool GetPermissions() => true;

        bool IsValidName()
        {
            if (SelectedServiceTest != null)
            {
                var name = SelectedServiceTest.TestName;
                ErrorMessage = string.Empty;
                if (string.IsNullOrEmpty(name))
                {
                    ErrorMessage = string.Format(ErrorResource.CannotBeNull, "'name'");
                }
                else if (NameHasInvalidCharacters(name))
                {
                    ErrorMessage = string.Format(ErrorResource.ContainsInvalidCharecters, "'name'");
                }
                else
                {
                    if (name.Trim() != name)
                    {
                        ErrorMessage = string.Format(ErrorResource.ContainsLeadingOrTrailingWhitespace, "'name'");
                    }
                }

                return string.IsNullOrEmpty(ErrorMessage);
            }
            return true;
        }

        bool AllNamesValid(IEnumerable<string> testNames)
        {
            foreach (var name in testNames)
            {
                ErrorMessage = string.Empty;
                if (string.IsNullOrEmpty(name))
                {
                    ErrorMessage = string.Format(ErrorResource.CannotBeNull, "'name'");
                    var popupController = CustomContainer.Get<IPopupController>();
                    popupController?.Show(Resources.Languages.Core.ServiceTestEmptyTestNameHeader, "Empty Test Name"
                        , MessageBoxButton.OK, MessageBoxImage.Error, null,
                        false, true, false, false, false, false);
                    return false;
                }
                else if (NameHasInvalidCharacters(name))
                {
                    ErrorMessage = string.Format(ErrorResource.ContainsInvalidCharecters, "'name'");
                    return false;
                }
                else if (name.Trim() != name)
                {
                    ErrorMessage = string.Format(ErrorResource.ContainsLeadingOrTrailingWhitespace, "'name'");
                    return false;
                }
                else
                {
                    continue;
                }
            }
            return true;
        }
        static bool NameHasInvalidCharacters(string name) => Regex.IsMatch(name, @"[^a-zA-Z0-9._\s-]");

        public string ErrorMessage
        {
            get => _errorMessage;
            set
            {
                _errorMessage = value;
                OnPropertyChanged(() => ErrorMessage);
            }
        }

        public IWorkflowDesignerViewModel WorkflowDesignerViewModel
        {
            get => _workflowDesignerViewModel;
            set
            {
                _workflowDesignerViewModel = value;
                OnPropertyChanged(() => WorkflowDesignerViewModel);
            }
        }

        public bool IsDirty
        {
            get
            {
                try
                {
                    if (_tests == null || _tests.Count <= 1)
                    {
                        return false;
                    }
                    var isDirty = _tests.Any(resource => resource.IsDirty || resource.NewTest);

                    var isConnected = ResourceModel.Environment.Connection.IsConnected;
                    _dirty = isDirty && isConnected;
                    _isValid = IsValidName();
                    CanSave = _isValid && _dirty;
                    SetDisplayName(_dirty);
                    return _dirty;
                }
                catch (Exception)
                {
                    return false;
                }
            }
        }

        public Guid ResourceID => ResourceModel?.ID ?? Guid.Empty;

        public void Save()
        {
            try
            {
                if (ShowPopupWhenDuplicates())
                {
                    return;
                }

                var serviceTestModels = RealTests().Where(a => a.IsDirty).ToList();
                Save(serviceTestModels);
                UpdateTestsFromResourceUpdate();
            }
            catch (Exception ex)
            {
                Dev2Logger.Error("Service test save error.", ex, GlobalConstants.WarewolfError);
            }
            finally
            {
                var isDirty = IsDirty;
                SetDisplayName(isDirty);
            }
        }

        void Save(List<IServiceTestModel> serviceTestModels)
        {
            if (!AllNamesValid(Tests.Select(p => p.TestName).ToList()))
            {
                return;
            }
            MarkPending(serviceTestModels);
            var serviceTestModelTos = serviceTestModels.Select(CreateServiceTestModelTo).ToList();

            var result = ResourceModel.Environment.ResourceRepository.SaveTests(ResourceModel, serviceTestModelTos);
            switch (result.Result)
            {
                case SaveResult.Success:
                    MarkTestsAsNotNew();
                    SetSelectedTestUrl();
                    break;
                case SaveResult.ResourceDeleted:
                    PopupController?.Show(Resources.Languages.Core.ServiceTestResourceDeletedMessage, Resources.Languages.Core.ServiceTestResourceDeletedHeader, MessageBoxButton.OK, MessageBoxImage.Error, null, false, true, false, false, false, false);
                    _shellViewModel.CloseResourceTestView(ResourceModel.ID, ResourceModel.ServerID, ResourceModel.Environment.EnvironmentID);
                    IsResourceDeleted = true;
                    break;
                case SaveResult.ResourceUpdated:
                    UpdateTestsFromResourceUpdate();
                    break;
                default:
                    throw new ArgumentOutOfRangeException();
            }
        }

        static void MarkPending(List<IServiceTestModel> serviceTestModels)
        {
            foreach (var serviceTestModel in serviceTestModels)
            {
                serviceTestModel.TestPending = true;
                if (serviceTestModel.TestSteps != null)
                {
                    MarkTestStepsPending(serviceTestModel);
                }

                if (serviceTestModel.Outputs == null)
                {
                    continue;
                }

                foreach (var testOutput in serviceTestModel.Outputs.OfType<ServiceTestOutput>())
                {
                    testOutput.TestPending = true;
                    if (testOutput.Result != null)
                    {
                        testOutput.Result.RunTestResult = RunResult.TestPending;
                    }
                }
            }
        }

        static void MarkTestStepsPending(IServiceTestModel serviceTestModel)
        {
            foreach (var serviceTestStep in serviceTestModel.TestSteps)
            {
                MarkChildrenPending(serviceTestStep);
                if (serviceTestStep.Children == null)
                {
                    continue;
                }

                var testSteps = serviceTestStep.Children.Flatten(step => step.Children);
                foreach (var testStep in testSteps)
                {
                    MarkChildrenPending(testStep);
                }
            }
        }

        static void MarkChildrenPending(IServiceTestStep serviceTestStep)
        {
            if (serviceTestStep is ServiceTestStep step)
            {
                step.TestPending = true;
                if (step.Result != null)
                {
                    step.Result.RunTestResult = RunResult.TestPending;
                }

                if (step.StepOutputs == null)
                {
                    return;
                }
                MarkStepOutputsPending(step);
            }
        }

        static void MarkStepOutputsPending(IServiceTestStep step)
        {
            foreach (var serviceTestOutput in step.StepOutputs)
            {
                if (serviceTestOutput is ServiceTestOutput stepOutput)
                {
                    stepOutput.TestPending = true;
                    if (stepOutput.Result != null)
                    {
                        stepOutput.Result.RunTestResult = RunResult.TestPending;
                    }
                }
            }
        }

        static IServiceTestModelTO CreateServiceTestModelTo(IServiceTestModel model) => new ServiceTestModelTO
        {
            TestName = model.TestName,
            ResourceId = model.ParentId,
            AuthenticationType = model.AuthenticationType,
            Enabled = model.Enabled,
            ErrorExpected = model.ErrorExpected,
            NoErrorExpected = model.NoErrorExpected,
            ErrorContainsText = model.ErrorContainsText,
            TestSteps = model.TestSteps?.Select(step => CreateServiceTestStepTo(step, null)).ToList() ?? new List<IServiceTestStep>(),
            Inputs = model.Inputs?.Select(CreateServiceTestInputsTo).ToList() ?? new List<IServiceTestInput>(),
            Outputs = model.Outputs?.Select(CreateServiceTestOutputTo).ToList() ?? new List<IServiceTestOutput>(),
            LastRunDate = model.LastRunDate,
            OldTestName = model.OldTestName,
            Password = model.Password,
            IsDirty = model.IsDirty,
            TestPending = model.TestPending,
            UserName = model.UserName,
            TestFailing = model.TestFailing,
            TestInvalid = model.TestInvalid,
            TestPassed = model.TestPassed
        };

        static IServiceTestOutput CreateServiceTestOutputTo(IServiceTestOutput output) => new ServiceTestOutputTO
        {
            Variable = output.Variable,
            Value = output.Value,
            From = output.From,
            To = output.To,
            AssertOp = output.AssertOp,
            HasOptionsForValue = output.HasOptionsForValue,
            OptionsForValue = output.OptionsForValue
        };

        static IServiceTestInput CreateServiceTestInputsTo(IServiceTestInput input) => new ServiceTestInputTO
        {
            Variable = input.Variable,
            Value = input.Value,
            EmptyIsNull = input.EmptyIsNull
        };

        static IServiceTestStep CreateServiceTestStepTo(IServiceTestStep step, IServiceTestStep parent)
        {
            var serviceTestStepTo = new ServiceTestStepTO(step.ActivityID, step.ActivityType, step.StepOutputs.Select(CreateServiceTestStepOutputsTo).ToObservableCollection(), step.Type)
            {
                Children = new ObservableCollection<IServiceTestStep>(),
                Parent = parent,
                StepDescription = step.StepDescription
            };
            if (step.Children != null)
            {
                foreach (var serviceTestStep in step.Children)
                {
                    serviceTestStepTo.Children.Add(CreateServiceTestStepTo(serviceTestStep, serviceTestStepTo));
                }
            }
            return serviceTestStepTo;
        }

        static IServiceTestOutput CreateServiceTestStepOutputsTo(IServiceTestOutput output) => new ServiceTestOutputTO
        {
            Variable = output.Variable,
            Value = output.Value,
            From = output.From,
            To = output.To,
            AssertOp = output.AssertOp,
            HasOptionsForValue = output.HasOptionsForValue,
            OptionsForValue = output.OptionsForValue
        };

        void UpdateTestsFromResourceUpdate()
        {
            foreach (var serviceTestModel in Tests)
            {
                var runSelectedTestUrl = GetWebRunUrlForTest(serviceTestModel);
                serviceTestModel.RunSelectedTestUrl = runSelectedTestUrl;
            }
        }

        string GetWebRunUrlForTest(IServiceTestModel serviceTestModel)
        {
            var runSelectedTestUrl = ResourceModel.GetWorkflowUri("", UrlType.Tests) + "/" + serviceTestModel.TestName;
            if (serviceTestModel.AuthenticationType == AuthenticationType.Public)
            {
                runSelectedTestUrl = runSelectedTestUrl.Replace("/secure/", "/public/");
            }
            return runSelectedTestUrl;
        }

        bool ShowPopupWhenDuplicates()
        {
            if (HasDuplicates())
            {
                ShowDuplicatePopup();
                return true;
            }
            return false;
        }

        public void ShowDuplicatePopup()
        {
            PopupController?.Show(Resources.Languages.Core.ServiceTestDuplicateTestNameMessage, Resources.Languages.Core.ServiceTestDuplicateTestNameHeader, MessageBoxButton.OK, MessageBoxImage.Error, null, false, true, false, false, false, false);
        }

        public void RefreshCommands()
        {
            ViewModelUtils.RaiseCanExecuteChanged(RunAllTestsCommand);
            ViewModelUtils.RaiseCanExecuteChanged(RunAllTestsInBrowserCommand);
            ViewModelUtils.RaiseCanExecuteChanged(RunSelectedTestCommand);
            ViewModelUtils.RaiseCanExecuteChanged(RunSelectedTestInBrowserCommand);
            _dirty = IsDirty;
            OnPropertyChanged(() => IsDirty);
            OnPropertyChanged(() => DisplayName);
            SetDisplayName(_dirty);
        }

        public bool HasDuplicates() => RealTests().ToList().GroupBy(x => x.TestName).Where(group => @group.Count() > 1).Select(group => @group.Key).Any();

        void SetSelectedTestUrl()
        {
            var runSelectedTestUrl = GetWebRunUrlForTest(SelectedServiceTest);
            SelectedServiceTest.RunSelectedTestUrl = runSelectedTestUrl;
        }

        void MarkTestsAsNotNew()
        {
            foreach (var model in _tests.Where(model => model.NewTest))
            {
                model.NewTest = false;
            }
            foreach (var model in RealTests())
            {
                var clone = model.Clone();
                model.SetItem(clone);
                model.ResetOldTestName();
            }
        }

        public IContextualResourceModel ResourceModel
        {
            get => _resourceModel;
            private set => _resourceModel = value;
        }

        public IServiceTestModel SelectedServiceTest
        {
            get => _selectedServiceTest;
            set
            {
                if (value == null)
                {
                    if (_selectedServiceTest != null)
                    {
                        _selectedServiceTest.PropertyChanged -= ActionsForPropChanges;
                    }

                    _selectedServiceTest = null;
                    EventPublisher.Publish(new DebugOutputMessage(new List<IDebugState>()));
                    OnPropertyChanged(() => SelectedServiceTest);
                    return;
                }
                if (Equals(_selectedServiceTest, value) || value.IsNewTest)
                {
                    return;
                }
                if (_selectedServiceTest != null)
                {
                    _selectedServiceTest.PropertyChanged -= ActionsForPropChanges;
                }

                _selectedServiceTest = value;
                _selectedServiceTest.IsTestLoading = true;
                _selectedServiceTest.PropertyChanged += ActionsForPropChanges;

                var serviceTestSteps = _selectedServiceTest?.TestSteps?.Flatten(step => step.Children ?? new ObservableCollection<IServiceTestStep>());
                if (serviceTestSteps != null)
                {
                    foreach (var serviceTestOutput in serviceTestSteps.Where(serviceTestStep => serviceTestStep?.StepOutputs != null).SelectMany(serviceTestStep => serviceTestStep.StepOutputs))
                    {
                        ((ServiceTestOutput)serviceTestOutput).PropertyChanged += OnStepOutputPropertyChanges;
                    }
                }
                SetSelectedTestUrl();
                SetDuplicateTestTooltip();
                OnPropertyChanged(() => SelectedServiceTest);
                EventPublisher.Publish(new DebugOutputMessage(_selectedServiceTest?.DebugForTest ?? new List<IDebugState>()));
                if (_selectedServiceTest != null)
                {
                    _selectedServiceTest.IsTestLoading = false;
                }
            }
        }

        void OnStepOutputPropertyChanges(object sender, PropertyChangedEventArgs e)
        {
            ViewModelUtils.RaiseCanExecuteChanged(RunSelectedTestInBrowserCommand);
            _dirty = IsDirty;
            OnPropertyChanged(() => IsDirty);
        }

        void ActionsForPropChanges(object sender, PropertyChangedEventArgs e)
        {
            if (e.PropertyName == "Enabled")
            {
                ViewModelUtils.RaiseCanExecuteChanged(DeleteTestCommand);
            }
            if (e.PropertyName == "IsDirty")
            {
                ViewModelUtils.RaiseCanExecuteChanged(RunSelectedTestInBrowserCommand);
                _dirty = IsDirty;
                OnPropertyChanged(() => IsDirty);
            }
            if (e.PropertyName == "Inputs" || e.PropertyName == "Outputs")
            {
                ViewModelUtils.RaiseCanExecuteChanged(RunSelectedTestInBrowserCommand);
            }
            if (e.PropertyName == "RunSelectedTestUrl")
            {
                ViewModelUtils.RaiseCanExecuteChanged(RunSelectedTestInBrowserCommand);
            }
            if (e.PropertyName == "DebugForTest")
            {
                EventPublisher.Publish(new DebugOutputMessage(SelectedServiceTest?.DebugForTest ?? new List<IDebugState>()));
            }
            if (e.PropertyName == "TestName")
            {
                _dirty = IsDirty;
                OnPropertyChanged(() => IsDirty);
            }
            ViewModelUtils.RaiseCanExecuteChanged(DuplicateTestCommand);
        }

        void SetDisplayName(bool isDirty)
        {
            if (isDirty)
            {
                if (!DisplayName.EndsWith(" *"))
                {
                    DisplayName += " *";
                }
            }
            else
            {
                DisplayName = _displayName.Replace("*", "").TrimEnd(' ');
            }
        }

        public IServiceTestCommandHandler ServiceTestCommandHandler { get; set; }

        public string RunAllTestsUrl
        {
            get => _runAllTestsUrl;
            set
            {
                _runAllTestsUrl = value;
                OnPropertyChanged(() => RunAllTestsUrl);
            }
        }

        public string RunAllCoverageUrl
        {
            get => _runAllCoverageUrl;
            set
            {
                _runAllCoverageUrl = value;
                OnPropertyChanged(() => RunAllCoverageUrl);
            }
        }

        public string TestPassingResult
        {
            get => _testPassingResult;
            set
            {
                _testPassingResult = value;
                OnPropertyChanged(() => TestPassingResult);
            }
        }

        IEnumerable<IServiceTestModel> RealTests() => _tests.Where(model => model.GetType() != typeof(DummyServiceTest)).ToObservableCollection();

        public ObservableCollection<IServiceTestModel> Tests
        {
            get => _tests;
            set
            {
                _tests = value;
                OnPropertyChanged(() => Tests);
            }
        }

        void DeleteTest(IServiceTestModel test)
        {
            if (test == null)
            {
                return;
            }

            var nameOfItemBeingDeleted = test.NameForDisplay.Replace("*", "").TrimEnd(' ');
            if (PopupController.ShowDeleteConfirmation(nameOfItemBeingDeleted) == MessageBoxResult.Yes)
            {
                try
                {
                    if (!test.IsNewTest)
                    {
                        ResourceModel.Environment.ResourceRepository.DeleteResourceTest(ResourceModel.ID, test.TestName);
                    }
                    _tests.Remove(test);
                    OnPropertyChanged(() => Tests);
                    SelectedServiceTest = null;
                    if (Tests.Count == 1 && Tests.Single().GetType() == typeof(DummyServiceTest))
                    {
                        CanSave = false;
                    }
                }
                catch (Exception ex)
                {
                    Dev2Logger.Error("IServiceTestModelTO DeleteTest(IServiceTestModel model)", ex, GlobalConstants.WarewolfError);
                }
            }
            if (_tests.Count == 1 && _tests.Single().GetType() == typeof(DummyServiceTest))
            {
                CanSave = false;
            }
        }

        void DeleteTestStep(IServiceTestStep testStep)
        {
            if (testStep == null)
            {
                return;
            }

            DeleteStep(testStep, SelectedServiceTest.TestSteps);
        }

        static void DeleteStep(IServiceTestStep testStep, ObservableCollection<IServiceTestStep> serviceTestSteps)
        {
            if (serviceTestSteps.Contains(testStep))
            {
                serviceTestSteps.Remove(testStep);
            }
            else
            {
                var foundParentStep = serviceTestSteps.FirstOrDefault(step => step.ActivityID == testStep.Parent?.ActivityID);
                foundParentStep?.Children?.Remove(testStep);
            }
        }

        ObservableCollection<IServiceTestModel> GetTests()
        {
            try
            {
                var serviceTestModels = new List<ServiceTestModel>();
                var loadResourceTests = ResourceModel.Environment.ResourceRepository.LoadResourceTests(ResourceModel.ID);
                if (loadResourceTests != null)
                {
                    foreach (var test in loadResourceTests)
                    {
                        var serviceTestModel = ToServiceTestModel(test);
                        serviceTestModel.Item = (ServiceTestModel)serviceTestModel.Clone();
                        serviceTestModels.Add(serviceTestModel);
                    }
                }
                return serviceTestModels.ToObservableCollection<IServiceTestModel>();
            }
            catch (Exception)
            {
                return new ObservableCollection<IServiceTestModel>();
            }
        }

        public ServiceTestModel ToServiceTestModel(IServiceTestModelTO to)
        {
            var serviceTestModel = new ServiceTestModel(ResourceModel.ID)
            {
                OldTestName = to.TestName,
                TestName = to.TestName,
                IsTestRunning = false,
                NameForDisplay = to.TestName,
                UserName = to.UserName,
                AuthenticationType = to.AuthenticationType,
                Enabled = to.Enabled,
                ErrorExpected = to.ErrorExpected,
                NoErrorExpected = to.NoErrorExpected,
                ErrorContainsText = to.ErrorContainsText,
                LastRunDate = to.LastRunDate,
                TestInvalid = to.TestInvalid,
                TestPending = to.TestPending,
                TestFailing = to.TestFailing,
                TestPassed = to.TestPassed,
                Password = to.Password,
                ParentId = to.ResourceId,
                TestSteps = to.TestSteps?.Select(step => CreateServiceTestStep(step) as IServiceTestStep).ToObservableCollection(),
                Inputs = to.Inputs?.Select(CreateInput).ToObservableCollection(),
                Outputs = to.Outputs?.Select(CreateOutput).ToObservableCollection()
            };
            return serviceTestModel;
        }

        static IServiceTestOutput CreateOutput(IServiceTestOutput output)
        {
            var serviceTestOutput = new ServiceTestOutput(output.Variable, output.Value, output.From, output.To) as IServiceTestOutput;
            serviceTestOutput.AssertOp = output.AssertOp;
            serviceTestOutput.Result = output.Result;
            return serviceTestOutput;
        }

        static IServiceTestInput CreateInput(IServiceTestInput input)
        {
            var serviceTestInput = new ServiceTestInput(input.Variable, input.Value) as IServiceTestInput;
            serviceTestInput.EmptyIsNull = input.EmptyIsNull;
            return serviceTestInput;
        }

        IServiceTestStep CreateServiceTestStep(IServiceTestStep step)
        {
            var testStep = new ServiceTestStep(step.ActivityID, step.ActivityType, new ObservableCollection<IServiceTestOutput>(), step.Type)
            {
                Children = new ObservableCollection<IServiceTestStep>(),
                Parent = step.Parent,
                StepDescription = step.StepDescription,
                Result = step.Result
            };
            testStep.StepOutputs = CreateServiceTestOutputFromStep(step.StepOutputs, testStep);
            if (testStep.MockSelected)
            {
                testStep.TestPending = false;
                testStep.TestPassed = false;
                testStep.TestFailing = false;
                testStep.TestInvalid = false;
            }
            SetStepIcon(testStep.ActivityType, testStep);

            if (step.Children != null)
            {
                foreach (var serviceTestStep in step.Children)
                {
                    testStep.Children.Add(CreateServiceTestStep(serviceTestStep));
                }
            }
            return testStep;
        }

        static ObservableCollection<IServiceTestOutput> CreateServiceTestOutputFromStep(ObservableCollection<IServiceTestOutput> stepStepOutputs, IServiceTestStep testStep)
        {
            var stepOutputs = new ObservableCollection<IServiceTestOutput>();
            foreach (var serviceTestOutput in stepStepOutputs)
            {
                var testOutput = new ServiceTestOutput(serviceTestOutput.Variable, serviceTestOutput.Value, serviceTestOutput.From, serviceTestOutput.To)
                {
                    AddStepOutputRow = testStep.AddNewOutput,
                    AssertOp = serviceTestOutput.AssertOp,
                    HasOptionsForValue = serviceTestOutput.HasOptionsForValue,
                    OptionsForValue = serviceTestOutput.OptionsForValue,
                    Result = serviceTestOutput.Result
                };
                if (testStep.MockSelected)
                {
                    testOutput.TestPending = false;
                    testOutput.TestPassed = false;
                    testOutput.TestFailing = false;
                    testOutput.TestInvalid = false;
                }

                stepOutputs.Add(testOutput);
            }
            return stepOutputs;
        }

        public ICommand DeleteTestCommand { get; set; }
        public ICommand DeleteTestStepCommand { get; set; }
        public ICommand DuplicateTestCommand { get; set; }
        public ICommand RunAllTestsInBrowserCommand { get; set; }
        public ICommand RunAllTestCoverageInBrowserCommand { get; set; }
        public ICommand RunAllTestsCommand { get; set; }
        public ICommand RunSelectedTestInBrowserCommand { get; set; }
        public ICommand RunSelectedTestCommand { get; set; }
        public ICommand StopTestCommand { get; set; }
        public ICommand CreateTestCommand { get; set; }

        public string DisplayName
        {
            get => _displayName;
            set
            {
                _displayName = value;
                OnPropertyChanged(() => DisplayName);
            }
        }

        public void Dispose()
        {
            if (ResourceModel?.Environment?.Connection != null)
            {
                ResourceModel.Environment.Connection.ReceivedResourceAffectedMessage -= OnReceivedResourceAffectedMessage;
            }
        }

        public void UpdateHelpDescriptor(string helpText)
        {
            var mainViewModel = CustomContainer.Get<IShellViewModel>();
            mainViewModel?.HelpViewModel?.UpdateHelpText(helpText);
        }
    }
}

---- Semantic diagnostics *before* transformation ----

---- Semantic diagnostics *after* transformation ----
D:\a\1\s\Dev\Warewolf.Studio.ViewModels\ServiceTestViewModel.cs(465,57): error CS0165: Use of unassigned local variable 'act',D:\a\1\s\Dev\Warewolf.Studio.ViewModels\ServiceTestViewModel.cs(506,69): error CS0165: Use of unassigned local variable 'act',D:\a\1\s\Dev\Warewolf.Studio.ViewModels\ServiceTestViewModel.cs(547,60): error CS0165: Use of unassigned local variable 'act'
######################################################################


######################################################################
Nr: 24 - UsePatternMatchingRewriterR8
Filepath: D:\a\1\s\Dev\Warewolf.Studio.Views\MessageBoxView.xaml.cs
Description: Error: The created Syntax Tree is semantically incorrect.
------------------------------------------------------------------------
---- Original Tree ----
using System;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Navigation;
using Warewolf.Studio.Core;
using Warewolf.Studio.ViewModels;

namespace Warewolf.Studio.Views
{
    public partial class MessageBoxView
    {
        readonly Grid _blackoutGrid = new Grid();
        bool _openDependencyGraph;
        public bool OpenDependencyGraph => _openDependencyGraph;

        public MessageBoxView()
        {
            InitializeComponent();
            PopupViewManageEffects.AddBlackOutEffect(_blackoutGrid);
        }

        void MessageBoxView_OnClosing(object sender, CancelEventArgs e)
        {
            PopupViewManageEffects.RemoveBlackOutEffect(_blackoutGrid);
        }

        void BtnDependencies_OnClick(object sender, RoutedEventArgs e)
        {
            _openDependencyGraph = true;
            DialogResult = false;
        }

        void Hyperlink_OnRequestNavigate(object sender, RequestNavigateEventArgs e)
        {
            if (sender is Hyperlink resourcePath)
            {
                var listStrLineElements = resourcePath.NavigateUri.OriginalString.Split(new[] { "\r\n" }, StringSplitOptions.RemoveEmptyEntries).ToList();

                for (int i = 1; i < listStrLineElements.Count; i++)
                {
                    Process.Start("explorer.exe", "/select," + listStrLineElements[i]);
                }
            }
        }

        void MessageBoxView_OnLoaded(object sender, RoutedEventArgs e)
        {
            var messageBoxViewModel = DataContext as MessageBoxViewModel;
            if (messageBoxViewModel != null && messageBoxViewModel.IsYesButtonVisible)
            {
                BtnYesCommand.Focusable = true;
                BtnYesCommand.Focus();
            }
            if (messageBoxViewModel != null && messageBoxViewModel.IsOkButtonVisible)
            {
                BtnOkCommand.Focusable = true;
                BtnOkCommand.Focus();
            }
        }

        void MessageBoxView_OnKeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Escape)
            {
                Close();
            }
        }

#pragma warning disable S1541 // Methods and properties should not be too complex
        void MessageBoxView_OnPreviewKeyDown(object sender, KeyEventArgs e)
#pragma warning restore S1541 // Methods and properties should not be too complex
        {
            if ((Keyboard.Modifiers == (ModifierKeys.Alt | ModifierKeys.Control)) && (e.Key == Key.F4) && Application.Current != null)
            {
                CloseAllWindows();
            }

            if (e.Key == Key.Escape)
            {
                var messageBoxViewModel = DataContext as MessageBoxViewModel;
                if (messageBoxViewModel != null && messageBoxViewModel.IsYesButtonVisible)
                {
                    BtnYesCommand.Focusable = false;
                    BtnYesCommand.Focus();
                }
                if (messageBoxViewModel != null && messageBoxViewModel.IsOkButtonVisible)
                {
                    BtnOkCommand.Focusable = false;
                    BtnOkCommand.Focus();
                }
                if (messageBoxViewModel != null && messageBoxViewModel.IsCancelButtonVisible)
                {
                    BtnCancelCommand.Focusable = true;
                    BtnCancelCommand.Focus();
                }
                if (messageBoxViewModel != null && messageBoxViewModel.IsNoButtonVisible)
                {
                    BtnNoCommand.Focusable = true;
                    BtnNoCommand.Focus();
                }
            }
        }

        private static void CloseAllWindows()
        {
            var windowCollection = Application.Current.Windows;
            foreach (var window in windowCollection)
            {
                if (window is Window window1 && window1.Name != "MainViewWindow")
                {
                    window1.Close();
                }
            }
        }

        void BtnDeleteAll_OnClick(object sender, RoutedEventArgs e)
        {
            if (DataContext is MessageBoxViewModel messageBoxViewModel)
            {
                messageBoxViewModel.IsDeleteAnywaySelected = true;
            }
            DialogResult = false;
        }
    }
}

---- Transformed Tree ----
using System;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Navigation;
using Warewolf.Studio.Core;
using Warewolf.Studio.ViewModels;

namespace Warewolf.Studio.Views
{
    public partial class MessageBoxView
    {
        readonly Grid _blackoutGrid = new Grid();
        bool _openDependencyGraph;
        public bool OpenDependencyGraph => _openDependencyGraph;

        public MessageBoxView()
        {
            InitializeComponent();
            PopupViewManageEffects.AddBlackOutEffect(_blackoutGrid);
        }

        void MessageBoxView_OnClosing(object sender, CancelEventArgs e)
        {
            PopupViewManageEffects.RemoveBlackOutEffect(_blackoutGrid);
        }

        void BtnDependencies_OnClick(object sender, RoutedEventArgs e)
        {
            _openDependencyGraph = true;
            DialogResult = false;
        }

        void Hyperlink_OnRequestNavigate(object sender, RequestNavigateEventArgs e)
        {
            if (sender is Hyperlink resourcePath)
            {
                var listStrLineElements = resourcePath.NavigateUri.OriginalString.Split(new[] { "\r\n" }, StringSplitOptions.RemoveEmptyEntries).ToList();

                for (int i = 1; i < listStrLineElements.Count; i++)
                {
                    Process.Start("explorer.exe", "/select," + listStrLineElements[i]);
                }
            }
        }

        void MessageBoxView_OnLoaded(object sender, RoutedEventArgs e)
        {
            if (DataContext is MessageBoxViewModel messageBoxViewModel && messageBoxViewModel.IsYesButtonVisible)
            {
                BtnYesCommand.Focusable = true;
                BtnYesCommand.Focus();
            }

            if (DataContext is MessageBoxViewModel messageBoxViewModel && messageBoxViewModel.IsOkButtonVisible)
            {
                BtnOkCommand.Focusable = true;
                BtnOkCommand.Focus();
            }
        }

        void MessageBoxView_OnKeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Escape)
            {
                Close();
            }
        }

#pragma warning disable S1541 // Methods and properties should not be too complex
        void MessageBoxView_OnPreviewKeyDown(object sender, KeyEventArgs e)
#pragma warning restore S1541 // Methods and properties should not be too complex
        {
            if ((Keyboard.Modifiers == (ModifierKeys.Alt | ModifierKeys.Control)) && (e.Key == Key.F4) && Application.Current != null)
            {
                CloseAllWindows();
            }

            if (e.Key == Key.Escape)
            {
                if (DataContext is MessageBoxViewModel messageBoxViewModel && messageBoxViewModel.IsYesButtonVisible)
                {
                    BtnYesCommand.Focusable = false;
                    BtnYesCommand.Focus();
                }

                if (DataContext is MessageBoxViewModel messageBoxViewModel && messageBoxViewModel.IsOkButtonVisible)
                {
                    BtnOkCommand.Focusable = false;
                    BtnOkCommand.Focus();
                }

                if (DataContext is MessageBoxViewModel messageBoxViewModel && messageBoxViewModel.IsCancelButtonVisible)
                {
                    BtnCancelCommand.Focusable = true;
                    BtnCancelCommand.Focus();
                }

                if (DataContext is MessageBoxViewModel messageBoxViewModel && messageBoxViewModel.IsNoButtonVisible)
                {
                    BtnNoCommand.Focusable = true;
                    BtnNoCommand.Focus();
                }
            }
        }

        private static void CloseAllWindows()
        {
            var windowCollection = Application.Current.Windows;
            foreach (var window in windowCollection)
            {
                if (window is Window window1 && window1.Name != "MainViewWindow")
                {
                    window1.Close();
                }
            }
        }

        void BtnDeleteAll_OnClick(object sender, RoutedEventArgs e)
        {
            if (DataContext is MessageBoxViewModel messageBoxViewModel)
            {
                messageBoxViewModel.IsDeleteAnywaySelected = true;
            }
            DialogResult = false;
        }
    }
}

---- Semantic diagnostics *before* transformation ----
D:\a\1\s\Dev\Warewolf.Studio.Views\MessageBoxView.xaml.cs(24,13): error CS0103: The name 'InitializeComponent' does not exist in the current context,D:\a\1\s\Dev\Warewolf.Studio.Views\MessageBoxView.xaml.cs(36,13): error CS0103: The name 'DialogResult' does not exist in the current context,D:\a\1\s\Dev\Warewolf.Studio.Views\MessageBoxView.xaml.cs(54,39): error CS0103: The name 'DataContext' does not exist in the current context,D:\a\1\s\Dev\Warewolf.Studio.Views\MessageBoxView.xaml.cs(57,17): error CS0103: The name 'BtnYesCommand' does not exist in the current context,D:\a\1\s\Dev\Warewolf.Studio.Views\MessageBoxView.xaml.cs(58,17): error CS0103: The name 'BtnYesCommand' does not exist in the current context,D:\a\1\s\Dev\Warewolf.Studio.Views\MessageBoxView.xaml.cs(62,17): error CS0103: The name 'BtnOkCommand' does not exist in the current context,D:\a\1\s\Dev\Warewolf.Studio.Views\MessageBoxView.xaml.cs(63,17): error CS0103: The name 'BtnOkCommand' does not exist in the current context,D:\a\1\s\Dev\Warewolf.Studio.Views\MessageBoxView.xaml.cs(71,17): error CS0103: The name 'Close' does not exist in the current context,D:\a\1\s\Dev\Warewolf.Studio.Views\MessageBoxView.xaml.cs(86,43): error CS0103: The name 'DataContext' does not exist in the current context,D:\a\1\s\Dev\Warewolf.Studio.Views\MessageBoxView.xaml.cs(89,21): error CS0103: The name 'BtnYesCommand' does not exist in the current context,D:\a\1\s\Dev\Warewolf.Studio.Views\MessageBoxView.xaml.cs(90,21): error CS0103: The name 'BtnYesCommand' does not exist in the current context,D:\a\1\s\Dev\Warewolf.Studio.Views\MessageBoxView.xaml.cs(94,21): error CS0103: The name 'BtnOkCommand' does not exist in the current context,D:\a\1\s\Dev\Warewolf.Studio.Views\MessageBoxView.xaml.cs(95,21): error CS0103: The name 'BtnOkCommand' does not exist in the current context,D:\a\1\s\Dev\Warewolf.Studio.Views\MessageBoxView.xaml.cs(99,21): error CS0103: The name 'BtnCancelCommand' does not exist in the current context,D:\a\1\s\Dev\Warewolf.Studio.Views\MessageBoxView.xaml.cs(100,21): error CS0103: The name 'BtnCancelCommand' does not exist in the current context,D:\a\1\s\Dev\Warewolf.Studio.Views\MessageBoxView.xaml.cs(104,21): error CS0103: The name 'BtnNoCommand' does not exist in the current context,D:\a\1\s\Dev\Warewolf.Studio.Views\MessageBoxView.xaml.cs(105,21): error CS0103: The name 'BtnNoCommand' does not exist in the current context,D:\a\1\s\Dev\Warewolf.Studio.Views\MessageBoxView.xaml.cs(124,17): error CS0103: The name 'DataContext' does not exist in the current context,D:\a\1\s\Dev\Warewolf.Studio.Views\MessageBoxView.xaml.cs(128,13): error CS0103: The name 'DialogResult' does not exist in the current context
---- Semantic diagnostics *after* transformation ----
D:\a\1\s\Dev\Warewolf.Studio.Views\MessageBoxView.xaml.cs(24,13): error CS0103: The name 'InitializeComponent' does not exist in the current context,D:\a\1\s\Dev\Warewolf.Studio.Views\MessageBoxView.xaml.cs(36,13): error CS0103: The name 'DialogResult' does not exist in the current context,D:\a\1\s\Dev\Warewolf.Studio.Views\MessageBoxView.xaml.cs(54,17): error CS0103: The name 'DataContext' does not exist in the current context,D:\a\1\s\Dev\Warewolf.Studio.Views\MessageBoxView.xaml.cs(56,17): error CS0103: The name 'BtnYesCommand' does not exist in the current context,D:\a\1\s\Dev\Warewolf.Studio.Views\MessageBoxView.xaml.cs(57,17): error CS0103: The name 'BtnYesCommand' does not exist in the current context,D:\a\1\s\Dev\Warewolf.Studio.Views\MessageBoxView.xaml.cs(60,17): error CS0103: The name 'DataContext' does not exist in the current context,D:\a\1\s\Dev\Warewolf.Studio.Views\MessageBoxView.xaml.cs(60,52): error CS0128: A local variable or function named 'messageBoxViewModel' is already defined in this scope,D:\a\1\s\Dev\Warewolf.Studio.Views\MessageBoxView.xaml.cs(62,17): error CS0103: The name 'BtnOkCommand' does not exist in the current context,D:\a\1\s\Dev\Warewolf.Studio.Views\MessageBoxView.xaml.cs(63,17): error CS0103: The name 'BtnOkCommand' does not exist in the current context,D:\a\1\s\Dev\Warewolf.Studio.Views\MessageBoxView.xaml.cs(60,75): error CS0165: Use of unassigned local variable 'messageBoxViewModel',D:\a\1\s\Dev\Warewolf.Studio.Views\MessageBoxView.xaml.cs(71,17): error CS0103: The name 'Close' does not exist in the current context,D:\a\1\s\Dev\Warewolf.Studio.Views\MessageBoxView.xaml.cs(86,21): error CS0103: The name 'DataContext' does not exist in the current context,D:\a\1\s\Dev\Warewolf.Studio.Views\MessageBoxView.xaml.cs(88,21): error CS0103: The name 'BtnYesCommand' does not exist in the current context,D:\a\1\s\Dev\Warewolf.Studio.Views\MessageBoxView.xaml.cs(89,21): error CS0103: The name 'BtnYesCommand' does not exist in the current context,D:\a\1\s\Dev\Warewolf.Studio.Views\MessageBoxView.xaml.cs(92,21): error CS0103: The name 'DataContext' does not exist in the current context,D:\a\1\s\Dev\Warewolf.Studio.Views\MessageBoxView.xaml.cs(92,56): error CS0128: A local variable or function named 'messageBoxViewModel' is already defined in this scope,D:\a\1\s\Dev\Warewolf.Studio.Views\MessageBoxView.xaml.cs(94,21): error CS0103: The name 'BtnOkCommand' does not exist in the current context,D:\a\1\s\Dev\Warewolf.Studio.Views\MessageBoxView.xaml.cs(95,21): error CS0103: The name 'BtnOkCommand' does not exist in the current context,D:\a\1\s\Dev\Warewolf.Studio.Views\MessageBoxView.xaml.cs(98,21): error CS0103: The name 'DataContext' does not exist in the current context,D:\a\1\s\Dev\Warewolf.Studio.Views\MessageBoxView.xaml.cs(98,56): error CS0128: A local variable or function named 'messageBoxViewModel' is already defined in this scope,D:\a\1\s\Dev\Warewolf.Studio.Views\MessageBoxView.xaml.cs(100,21): error CS0103: The name 'BtnCancelCommand' does not exist in the current context,D:\a\1\s\Dev\Warewolf.Studio.Views\MessageBoxView.xaml.cs(101,21): error CS0103: The name 'BtnCancelCommand' does not exist in the current context,D:\a\1\s\Dev\Warewolf.Studio.Views\MessageBoxView.xaml.cs(104,21): error CS0103: The name 'DataContext' does not exist in the current context,D:\a\1\s\Dev\Warewolf.Studio.Views\MessageBoxView.xaml.cs(104,56): error CS0128: A local variable or function named 'messageBoxViewModel' is already defined in this scope,D:\a\1\s\Dev\Warewolf.Studio.Views\MessageBoxView.xaml.cs(106,21): error CS0103: The name 'BtnNoCommand' does not exist in the current context,D:\a\1\s\Dev\Warewolf.Studio.Views\MessageBoxView.xaml.cs(107,21): error CS0103: The name 'BtnNoCommand' does not exist in the current context,D:\a\1\s\Dev\Warewolf.Studio.Views\MessageBoxView.xaml.cs(92,79): error CS0165: Use of unassigned local variable 'messageBoxViewModel',D:\a\1\s\Dev\Warewolf.Studio.Views\MessageBoxView.xaml.cs(126,17): error CS0103: The name 'DataContext' does not exist in the current context,D:\a\1\s\Dev\Warewolf.Studio.Views\MessageBoxView.xaml.cs(130,13): error CS0103: The name 'DialogResult' does not exist in the current context
######################################################################


######################################################################
Nr: 25 - UsePatternMatchingRewriterR8
Filepath: D:\a\1\s\Dev\Warewolf.Studio.Views\ServiceTestView.xaml.cs
Description: Error: The created Syntax Tree is semantically incorrect.
------------------------------------------------------------------------
---- Original Tree ----
using System.Activities.Presentation;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Controls.Primitives;
using System.Windows.Input;
using System.Windows.Media;
using Dev2.Studio.Interfaces;
using Dev2.UI;
using Microsoft.Practices.Prism.Mvvm;
using Warewolf.Studio.ViewModels;

namespace Warewolf.Studio.Views
{
    public partial class ServiceTestView : IView
    {
        public ServiceTestView()
        {
            InitializeComponent();
            WorkflowControl.PreviewMouseLeftButtonUp += WorkflowDesignerViewPreviewMouseUp;
            PreviewDragOver += DropPointOnDragEnter;
            PreviewDrop += DropPointOnDragEnter;
        }

        void DropPointOnDragEnter(object sender, DragEventArgs e)
        {
            if (sender != null)
            {
                e.Effects = DragDropEffects.None;
                e.Handled = true;
            }
        }

        void WorkflowDesignerViewPreviewMouseUp(object sender, MouseButtonEventArgs e)
        {
            if (e.ChangedButton == MouseButton.Left)
            {
                InvokeParentModelItem(e.OriginalSource as DependencyObject);
            }
        }

        void InvokeParentModelItem(DependencyObject node)
        {
            while (node != null)
            {
                if (node is WorkflowViewElement)
                {
                    var dt = DataContext as ServiceTestViewModel;
                    var wd = dt?.WorkflowDesignerViewModel;
                    var designer = node as WorkflowViewElement;
                    var modelItem = designer.ModelItem;
                    if (wd != null && wd.IsTestView && modelItem != null)
                    {
                        wd.ItemSelectedAction?.Invoke(modelItem);
                    }
                    break;
                }
                node = node is Visual ? VisualTreeHelper.GetParent(node) : null;
            }
        }

        void ToggleButton_OnChecked(object sender, RoutedEventArgs e)
        {

            if (sender is ToggleButton control)
            {
                RefreshCommands(e);
            }
        }

        void RefreshCommands(RoutedEventArgs e)
        {
            var serviceTestViewModel = DataContext as IServiceTestViewModel;
            serviceTestViewModel?.RefreshCommands();
            e.Handled = true;
        }

        void SelectedTestCheckBox_OnPreviewMouseLeftButtonDown(object sender, MouseButtonEventArgs e)
        {
            if (sender is CheckBox cb)
            {
                var item = cb.DataContext;
                TestsListbox.SelectedItem = item;
            }
        }

        void SelectedTestRunTestButton_OnPreviewMouseLeftButtonDown(object sender, MouseButtonEventArgs e)
        {
            if (sender is Button btn)
            {
                var item = btn.DataContext;
                TestsListbox.SelectedItem = item;
            }
        }

        void MainGrid_OnMouseLeftButtonUp(object sender, MouseButtonEventArgs e)
        {
            var serviceTestViewModel = DataContext as IServiceTestViewModel;
            serviceTestViewModel?.UpdateHelpDescriptor(Studio.Resources.Languages.HelpText.ServiceTestGenericHelpText);
            e.Handled = true;
        }

        void ListBoxItemGrid_OnMouseLeftButtonUp(object sender, MouseButtonEventArgs e)
        {
            var serviceTestViewModel = DataContext as IServiceTestViewModel;
            serviceTestViewModel?.UpdateHelpDescriptor(Studio.Resources.Languages.HelpText.ServiceTestSelectedTestHelpText);
            e.Handled = true;
        }

        void AutoCompleteBox_OnTextChanged(object sender, RoutedEventArgs e)
        {
            var textBox = sender as IntellisenseTextBox;
            if (textBox != null)
            {
                RefreshCommands(e);
            }

            if (textBox == null && sender is TextBox box)
            {
                RefreshCommands(e);
            }
        }

        void Selector_OnSelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            var routedEventArgs = new RoutedEventArgs(e.RoutedEvent);
            RefreshCommands(routedEventArgs);
            e.Handled = true;
        }
    }
}

---- Transformed Tree ----
using System.Activities.Presentation;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Controls.Primitives;
using System.Windows.Input;
using System.Windows.Media;
using Dev2.Studio.Interfaces;
using Dev2.UI;
using Microsoft.Practices.Prism.Mvvm;
using Warewolf.Studio.ViewModels;

namespace Warewolf.Studio.Views
{
    public partial class ServiceTestView : IView
    {
        public ServiceTestView()
        {
            InitializeComponent();
            WorkflowControl.PreviewMouseLeftButtonUp += WorkflowDesignerViewPreviewMouseUp;
            PreviewDragOver += DropPointOnDragEnter;
            PreviewDrop += DropPointOnDragEnter;
        }

        void DropPointOnDragEnter(object sender, DragEventArgs e)
        {
            if (sender != null)
            {
                e.Effects = DragDropEffects.None;
                e.Handled = true;
            }
        }

        void WorkflowDesignerViewPreviewMouseUp(object sender, MouseButtonEventArgs e)
        {
            if (e.ChangedButton == MouseButton.Left)
            {
                InvokeParentModelItem(e.OriginalSource as DependencyObject);
            }
        }

        void InvokeParentModelItem(DependencyObject node)
        {
            while (node != null)
            {
                if (node is WorkflowViewElement)
                {
                    var dt = DataContext as ServiceTestViewModel;
                    var wd = dt?.WorkflowDesignerViewModel;
                    var designer = node as WorkflowViewElement;
                    var modelItem = designer.ModelItem;
                    if (wd != null && wd.IsTestView && modelItem != null)
                    {
                        wd.ItemSelectedAction?.Invoke(modelItem);
                    }
                    break;
                }
                node = node is Visual ? VisualTreeHelper.GetParent(node) : null;
            }
        }

        void ToggleButton_OnChecked(object sender, RoutedEventArgs e)
        {

            if (sender is ToggleButton control)
            {
                RefreshCommands(e);
            }
        }

        void RefreshCommands(RoutedEventArgs e)
        {
            var serviceTestViewModel = DataContext as IServiceTestViewModel;
            serviceTestViewModel?.RefreshCommands();
            e.Handled = true;
        }

        void SelectedTestCheckBox_OnPreviewMouseLeftButtonDown(object sender, MouseButtonEventArgs e)
        {
            if (sender is CheckBox cb)
            {
                var item = cb.DataContext;
                TestsListbox.SelectedItem = item;
            }
        }

        void SelectedTestRunTestButton_OnPreviewMouseLeftButtonDown(object sender, MouseButtonEventArgs e)
        {
            if (sender is Button btn)
            {
                var item = btn.DataContext;
                TestsListbox.SelectedItem = item;
            }
        }

        void MainGrid_OnMouseLeftButtonUp(object sender, MouseButtonEventArgs e)
        {
            var serviceTestViewModel = DataContext as IServiceTestViewModel;
            serviceTestViewModel?.UpdateHelpDescriptor(Studio.Resources.Languages.HelpText.ServiceTestGenericHelpText);
            e.Handled = true;
        }

        void ListBoxItemGrid_OnMouseLeftButtonUp(object sender, MouseButtonEventArgs e)
        {
            var serviceTestViewModel = DataContext as IServiceTestViewModel;
            serviceTestViewModel?.UpdateHelpDescriptor(Studio.Resources.Languages.HelpText.ServiceTestSelectedTestHelpText);
            e.Handled = true;
        }

        void AutoCompleteBox_OnTextChanged(object sender, RoutedEventArgs e)
        {
            if (sender is IntellisenseTextBox textBox)
            {
                RefreshCommands(e);
            }

            if (textBox == null && sender is TextBox box)
            {
                RefreshCommands(e);
            }
        }

        void Selector_OnSelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            var routedEventArgs = new RoutedEventArgs(e.RoutedEvent);
            RefreshCommands(routedEventArgs);
            e.Handled = true;
        }
    }
}

---- Semantic diagnostics *before* transformation ----
D:\a\1\s\Dev\Warewolf.Studio.Views\ServiceTestView.xaml.cs(15,44): error CS0535: 'ServiceTestView' does not implement interface member 'IView.DataContext',D:\a\1\s\Dev\Warewolf.Studio.Views\ServiceTestView.xaml.cs(19,13): error CS0103: The name 'InitializeComponent' does not exist in the current context,D:\a\1\s\Dev\Warewolf.Studio.Views\ServiceTestView.xaml.cs(20,13): error CS0103: The name 'WorkflowControl' does not exist in the current context,D:\a\1\s\Dev\Warewolf.Studio.Views\ServiceTestView.xaml.cs(21,13): error CS0103: The name 'PreviewDragOver' does not exist in the current context,D:\a\1\s\Dev\Warewolf.Studio.Views\ServiceTestView.xaml.cs(22,13): error CS0103: The name 'PreviewDrop' does not exist in the current context,D:\a\1\s\Dev\Warewolf.Studio.Views\ServiceTestView.xaml.cs(48,30): error CS0103: The name 'DataContext' does not exist in the current context,D:\a\1\s\Dev\Warewolf.Studio.Views\ServiceTestView.xaml.cs(73,40): error CS0103: The name 'DataContext' does not exist in the current context,D:\a\1\s\Dev\Warewolf.Studio.Views\ServiceTestView.xaml.cs(83,17): error CS0103: The name 'TestsListbox' does not exist in the current context,D:\a\1\s\Dev\Warewolf.Studio.Views\ServiceTestView.xaml.cs(92,17): error CS0103: The name 'TestsListbox' does not exist in the current context,D:\a\1\s\Dev\Warewolf.Studio.Views\ServiceTestView.xaml.cs(98,40): error CS0103: The name 'DataContext' does not exist in the current context,D:\a\1\s\Dev\Warewolf.Studio.Views\ServiceTestView.xaml.cs(105,40): error CS0103: The name 'DataContext' does not exist in the current context
---- Semantic diagnostics *after* transformation ----
D:\a\1\s\Dev\Warewolf.Studio.Views\ServiceTestView.xaml.cs(15,44): error CS0535: 'ServiceTestView' does not implement interface member 'IView.DataContext',D:\a\1\s\Dev\Warewolf.Studio.Views\ServiceTestView.xaml.cs(19,13): error CS0103: The name 'InitializeComponent' does not exist in the current context,D:\a\1\s\Dev\Warewolf.Studio.Views\ServiceTestView.xaml.cs(20,13): error CS0103: The name 'WorkflowControl' does not exist in the current context,D:\a\1\s\Dev\Warewolf.Studio.Views\ServiceTestView.xaml.cs(21,13): error CS0103: The name 'PreviewDragOver' does not exist in the current context,D:\a\1\s\Dev\Warewolf.Studio.Views\ServiceTestView.xaml.cs(22,13): error CS0103: The name 'PreviewDrop' does not exist in the current context,D:\a\1\s\Dev\Warewolf.Studio.Views\ServiceTestView.xaml.cs(48,30): error CS0103: The name 'DataContext' does not exist in the current context,D:\a\1\s\Dev\Warewolf.Studio.Views\ServiceTestView.xaml.cs(73,40): error CS0103: The name 'DataContext' does not exist in the current context,D:\a\1\s\Dev\Warewolf.Studio.Views\ServiceTestView.xaml.cs(83,17): error CS0103: The name 'TestsListbox' does not exist in the current context,D:\a\1\s\Dev\Warewolf.Studio.Views\ServiceTestView.xaml.cs(92,17): error CS0103: The name 'TestsListbox' does not exist in the current context,D:\a\1\s\Dev\Warewolf.Studio.Views\ServiceTestView.xaml.cs(98,40): error CS0103: The name 'DataContext' does not exist in the current context,D:\a\1\s\Dev\Warewolf.Studio.Views\ServiceTestView.xaml.cs(105,40): error CS0103: The name 'DataContext' does not exist in the current context,D:\a\1\s\Dev\Warewolf.Studio.Views\ServiceTestView.xaml.cs(117,17): error CS0165: Use of unassigned local variable 'textBox'
######################################################################


