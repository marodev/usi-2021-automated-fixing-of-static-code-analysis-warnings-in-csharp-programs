diff --git a/Applications/ClientControls.Net4/Browse/AttributeListCtrl.cs b/Applications/ClientControls.Net4/Browse/AttributeListCtrl.cs
index 00c26a47..ffe04e3a 100644
--- a/Applications/ClientControls.Net4/Browse/AttributeListCtrl.cs
+++ b/Applications/ClientControls.Net4/Browse/AttributeListCtrl.cs
@@ -210,7 +210,7 @@ namespace Opc.Ua.Client.Controls
                 {
                     if (value != null)
                     {
-                        return String.Format("{0}", Enum.ToObject(typeof(NodeClass), value));
+                        return $"{Enum.ToObject(typeof(NodeClass), value)}";
                     }
 
                     return "(null)";
@@ -226,15 +226,15 @@ namespace Opc.Ua.Client.Controls
 
                         if (datatype != null)
                         {
-                            return String.Format("{0}", datatype.DisplayName.Text);
+                            return $"{datatype.DisplayName.Text}";
                         }
                         else
                         {
-                            return String.Format("{0}", datatypeId);
+                            return $"{datatypeId}";
                         }
                     }
                 
-                    return String.Format("{0}", value);
+                    return $"{value}";
                 }
                       
                 case Attributes.ValueRank:
@@ -252,12 +252,12 @@ namespace Opc.Ua.Client.Controls
 
                             default:
                             {
-                                return String.Format("{0}", valueRank.Value);
+                                return $"{valueRank.Value}";
                             }
                         }                            
                     }
 
-                    return String.Format("{0}", value);
+                    return $"{value}";
                 }
                       
                 case Attributes.MinimumSamplingInterval:
@@ -276,10 +276,10 @@ namespace Opc.Ua.Client.Controls
                             return "Continuous";
                         }
 
-                       return String.Format("{0}", minimumSamplingInterval.Value);
+                       return $"{minimumSamplingInterval.Value}";
                     }
 
-                    return String.Format("{0}", value);
+                    return $"{value}";
                 }
 
                 case Attributes.AccessLevel:
@@ -329,7 +329,7 @@ namespace Opc.Ua.Client.Controls
                         bits.Append("No Access");
                     }
 
-                    return String.Format("{0}", bits);
+                    return $"{bits}";
                 }
                
                 case Attributes.EventNotifier:
@@ -368,12 +368,12 @@ namespace Opc.Ua.Client.Controls
                         bits.Append("No Access");
                     }
 
-                    return String.Format("{0}", bits);
+                    return $"{bits}";
                 }
 
                 default:
                 {
-                    return String.Format("{0}", value);
+                    return $"{value}";
                 }
             }
         }
diff --git a/Applications/ClientControls.Net4/Browse/BrowseListCtrl.cs b/Applications/ClientControls.Net4/Browse/BrowseListCtrl.cs
index 5949e63f..7f38a6e6 100644
--- a/Applications/ClientControls.Net4/Browse/BrowseListCtrl.cs
+++ b/Applications/ClientControls.Net4/Browse/BrowseListCtrl.cs
@@ -112,10 +112,8 @@ namespace Opc.Ua.Client.Controls
 				base.UpdateItem(listItem, item);
 				return;
 			}
-            
-            IReferenceType referenceType = m_session.NodeCache.Find(reference.ReferenceTypeId) as IReferenceType;
 
-            if (referenceType != null)
+            if (m_session.NodeCache.Find(reference.ReferenceTypeId) is IReferenceType referenceType)
             {
                 if (reference.IsInverse)
                 {
@@ -130,10 +128,8 @@ namespace Opc.Ua.Client.Controls
             {
 			    listItem.SubItems[0].Text = Utils.Format("{0}", reference.ReferenceTypeId);
             }
-            
-            INode target = m_session.NodeCache.Find(reference.TargetId) as INode;
 
-            if (target != null)
+            if (m_session.NodeCache.Find(reference.TargetId) is INode target)
             {
 			    listItem.SubItems[1].Text = Utils.Format("{0}", target.DisplayName);
             }
diff --git a/Applications/ClientControls.Net4/Browse/BrowseTreeCtrl.cs b/Applications/ClientControls.Net4/Browse/BrowseTreeCtrl.cs
index 363c1879..fbdd306d 100644
--- a/Applications/ClientControls.Net4/Browse/BrowseTreeCtrl.cs
+++ b/Applications/ClientControls.Net4/Browse/BrowseTreeCtrl.cs
@@ -304,16 +304,10 @@ namespace Opc.Ua.Client.Controls
             }
 
             // update attributes control.
-            if (AttributesCTRL != null)
-            {
-                AttributesCTRL.Initialize(m_session, reference.NodeId);
-            }
+            AttributesCTRL?.Initialize(m_session, reference.NodeId);
 
             // update references control.
-            if (ReferencesCTRL != null)
-            {
-                ReferencesCTRL.Initialize(m_session, reference.NodeId);
-            }
+            ReferencesCTRL?.Initialize(m_session, reference.NodeId);
         }
 
         /// <see cref="BaseTreeCtrl.BeforeExpand" />
@@ -412,9 +406,7 @@ namespace Opc.Ua.Client.Controls
                         return;
                     }
 
-                    ReferenceDescription reference = NodesTV.SelectedNode.Tag as ReferenceDescription;
-
-                    if (reference != null)
+                    if (NodesTV.SelectedNode.Tag is ReferenceDescription reference)
                     {
                         ReferenceDescriptionCollection collection = new ReferenceDescriptionCollection();
                         collection.Add(reference);
@@ -443,9 +435,7 @@ namespace Opc.Ua.Client.Controls
 
                     foreach (TreeNode child in NodesTV.SelectedNode.Nodes)
                     {
-                        ReferenceDescription reference = child.Tag as ReferenceDescription;
-
-                        if (reference != null)
+                        if (child.Tag is ReferenceDescription reference)
                         {
                             collection.Add(reference);
                         }
diff --git a/Applications/ClientControls.Net4/Browse/NodeListCtrl.cs b/Applications/ClientControls.Net4/Browse/NodeListCtrl.cs
index 8ba9fbcf..fbc07a43 100644
--- a/Applications/ClientControls.Net4/Browse/NodeListCtrl.cs
+++ b/Applications/ClientControls.Net4/Browse/NodeListCtrl.cs
@@ -117,9 +117,7 @@ namespace Opc.Ua.Client.Controls
         /// </summary>
         public void Add(NodeId nodeId)
         {
-            ILocalNode node = m_session.NodeCache.Find(nodeId) as ILocalNode;
-
-            if (node != null)
+            if (m_session.NodeCache.Find(nodeId) is ILocalNode node)
             {
                 AddItem(node);
                 AdjustColumns();
@@ -155,16 +153,10 @@ namespace Opc.Ua.Client.Controls
             }
 
             // update attributes control.
-            if (AttributesCTRL != null)
-            {
-                AttributesCTRL.Initialize(m_session, node.NodeId);
-            }
+            AttributesCTRL?.Initialize(m_session, node.NodeId);
 
             // update references control.
-            if (ReferencesCTRL != null)
-            {
-                ReferencesCTRL.Initialize(m_session, node.NodeId);
-            }
+            ReferencesCTRL?.Initialize(m_session, node.NodeId);
         }
 
         /// <see cref="Opc.Ua.Client.Controls.BaseListCtrl.EnableMenuItems" />
diff --git a/Applications/ClientControls.Net4/Common/Client/AttrributesListViewCtrl.cs b/Applications/ClientControls.Net4/Common/Client/AttrributesListViewCtrl.cs
index 64662309..a483cf7d 100644
--- a/Applications/ClientControls.Net4/Common/Client/AttrributesListViewCtrl.cs
+++ b/Applications/ClientControls.Net4/Common/Client/AttrributesListViewCtrl.cs
@@ -90,9 +90,7 @@ namespace Opc.Ua.Client.Controls
         {
             if (index >=0 && index < AttributesLV.SelectedItems.Count)
             {
-                AttributeInfo info = AttributesLV.SelectedItems[index].Tag as AttributeInfo;
-
-                if (info != null)
+                if (AttributesLV.SelectedItems[index].Tag is AttributeInfo info)
                 {
                     return info.NodeToRead;
                 }
diff --git a/Applications/ClientControls.Net4/Common/Client/BrowseTreeViewCtrl.cs b/Applications/ClientControls.Net4/Common/Client/BrowseTreeViewCtrl.cs
index 97b78d7a..6100ebed 100644
--- a/Applications/ClientControls.Net4/Common/Client/BrowseTreeViewCtrl.cs
+++ b/Applications/ClientControls.Net4/Common/Client/BrowseTreeViewCtrl.cs
@@ -241,9 +241,7 @@ namespace Opc.Ua.Client.Controls
         {
             foreach (TreeNode node in nodes)
             {
-                ReferenceDescription reference = node.Tag as ReferenceDescription;
-
-                if (reference != null)
+                if (node.Tag is ReferenceDescription reference)
                 {
                     if (reference.NodeId == nodeId)
                     {
@@ -267,10 +265,7 @@ namespace Opc.Ua.Client.Controls
         {
             m_session = session;
 
-            if (AttributesControl != null)
-            {
-                AttributesControl.ChangeSession(session);
-            }
+            AttributesControl?.ChangeSession(session);
 
             BrowseTV.Nodes.Clear();
 
@@ -347,10 +342,7 @@ namespace Opc.Ua.Client.Controls
 
                 m_selectedNodeId = nodeId;
 
-                if (AttributesControl != null)
-                {
-                    AttributesControl.ReadAttributes(m_selectedNodeId, true);
-                }
+                AttributesControl?.ReadAttributes(m_selectedNodeId, true);
 
                 // raise event.
                 if (m_AfterSelect != null) m_AfterSelect(this, new EventArgs());
@@ -429,9 +421,8 @@ namespace Opc.Ua.Client.Controls
                                 if (nodeIds.Count > 0 && nodeIds[0] != null)
                                 {
                                     DataValue value = m_session.ReadValue(nodeIds[0]);
-                                    byte[] bytes = value.Value as byte[];
 
-                                    if (bytes != null)
+                                    if (value.Value is byte[] bytes)
                                     {
                                         System.IO.MemoryStream istrm = new System.IO.MemoryStream(bytes);
                                         Image icon = Image.FromStream(istrm);
diff --git a/Applications/ClientControls.Net4/Common/Client/EditComplexValue2Dlg.cs b/Applications/ClientControls.Net4/Common/Client/EditComplexValue2Dlg.cs
index e68b4d88..eefe1b69 100644
--- a/Applications/ClientControls.Net4/Common/Client/EditComplexValue2Dlg.cs
+++ b/Applications/ClientControls.Net4/Common/Client/EditComplexValue2Dlg.cs
@@ -207,9 +207,7 @@ namespace Opc.Ua.Client.Controls
 
             foreach (INode node in m_session.NodeCache.Find(dataTypeNode.NodeId, Opc.Ua.ReferenceTypeIds.HasEncoding, false, false))
             {
-                IObject encodingNode2 = node as IObject;
-
-                if (encodingNode2 != null)
+                if (node is IObject encodingNode2)
                 {
                     ToolStripMenuItem item = new ToolStripMenuItem(m_session.NodeCache.GetDisplayText(encodingNode2));
                     item.Tag = encodingNode2;
@@ -274,9 +272,7 @@ namespace Opc.Ua.Client.Controls
         {
             try
             {
-                ToolStripMenuItem item = sender as ToolStripMenuItem;
-
-                if (item != null)
+                if (sender is ToolStripMenuItem item)
                 {
                     IObject encodingNode = item.Tag as IObject;
                     m_encodingName = encodingNode.BrowseName;
diff --git a/Applications/ClientControls.Net4/Common/Client/EditComplexValueCtrl.cs b/Applications/ClientControls.Net4/Common/Client/EditComplexValueCtrl.cs
index 06b72364..8cd064da 100644
--- a/Applications/ClientControls.Net4/Common/Client/EditComplexValueCtrl.cs
+++ b/Applications/ClientControls.Net4/Common/Client/EditComplexValueCtrl.cs
@@ -680,9 +680,8 @@ namespace Opc.Ua.Client.Controls.Common
             TypeInfo typeInfo = parent.TypeInfo;
             object value = parent.Value;
 
-            if (value is Variant)
+            if (value is Variant variant)
             {
-                Variant variant = (Variant)value;
                 value = variant.Value;
 
                 if (value != null)
@@ -797,58 +796,58 @@ namespace Opc.Ua.Client.Controls.Common
             }
 
             // check for XmlElements.
-            if (structure is XmlElement)
+            if (structure is XmlElement xmlElement)
             {
-                ShowTextValue((XmlElement)structure);
+                ShowTextValue(xmlElement);
                 return;
             }
 
             // check for ByteString.
-            if (structure is byte[])
+            if (structure is byte[] bytes)
             {
-                ShowTextValue((byte[])structure);
+                ShowTextValue(bytes);
                 return;
             }
 
             // check for NodeId.
-            if (structure is NodeId)
+            if (structure is NodeId nodeId)
             {
-                ShowTextValue(((NodeId)structure).ToString());
+                ShowTextValue(nodeId.ToString());
                 return;
             }
 
             // check for ExpandedNodeId.
-            if (structure is ExpandedNodeId)
+            if (structure is ExpandedNodeId expandedNodeId)
             {
-                ShowTextValue(((ExpandedNodeId)structure).ToString());
+                ShowTextValue(expandedNodeId.ToString());
                 return;
             }
 
             // check for QualifiedName.
-            if (structure is QualifiedName)
+            if (structure is QualifiedName qualifiedName)
             {
-                ShowTextValue(((QualifiedName)structure).ToString());
+                ShowTextValue(qualifiedName.ToString());
                 return;
             }
 
             // check for Guid.
-            if (structure is Guid)
+            if (structure is Guid guid)
             {
-                ShowTextValue(((Guid)structure).ToString());
+                ShowTextValue(guid.ToString());
                 return;
             }
 
             // check for Uuid.
-            if (structure is Uuid)
+            if (structure is Uuid uuid)
             {
-                ShowTextValue(((Uuid)structure).ToString());
+                ShowTextValue(uuid.ToString());
                 return;
             }
 
             // check for StatusCode.
-            if (structure is StatusCode)
+            if (structure is StatusCode statusCode)
             {
-                ShowTextValue(Utils.Format("0x{0:X8}", ((StatusCode)structure).Code));
+                ShowTextValue(Utils.Format("0x{0:X8}", statusCode.Code));
                 return;
             }
 
@@ -1179,9 +1178,8 @@ namespace Opc.Ua.Client.Controls.Common
                 return String.Empty;
             }
 
-            if (value is Variant)
+            if (value is Variant variant)
             {
-                Variant variant = (Variant)value;
                 value = variant.Value;
 
                 if (value != null)
diff --git a/Applications/ClientControls.Net4/Common/Client/EditMonitoredItemDlg.cs b/Applications/ClientControls.Net4/Common/Client/EditMonitoredItemDlg.cs
index 168a45ca..85008c26 100644
--- a/Applications/ClientControls.Net4/Common/Client/EditMonitoredItemDlg.cs
+++ b/Applications/ClientControls.Net4/Common/Client/EditMonitoredItemDlg.cs
@@ -146,9 +146,7 @@ namespace Opc.Ua.Client.Controls
                 MonitoringModeCB.SelectedItem = monitoredItem.MonitoringMode;
                 QueueSizeUP.Value = monitoredItem.QueueSize;
 
-                DataChangeFilter filter = monitoredItem.Filter as DataChangeFilter;
-
-                if (filter != null)
+                if (monitoredItem.Filter is DataChangeFilter filter)
                 {
                     DeadbandTypeCB.SelectedItem = (DeadbandType)filter.DeadbandType;
                     DeadbandValueUP.Value = (decimal)filter.DeadbandValue;
@@ -158,12 +156,11 @@ namespace Opc.Ua.Client.Controls
                 if (!monitoredItem.Created)
                 {
                     // fetch the available encodings for the first node in the list from the server.
-                    IVariableBase variable = session.NodeCache.Find(monitoredItem.StartNodeId) as IVariableBase;
 
                     DataEncodingCB.Items.Add(new EncodingInfo());
                     DataEncodingCB.SelectedIndex = 0;
 
-                    if (variable != null)
+                    if (session.NodeCache.Find(monitoredItem.StartNodeId) is IVariableBase variable)
                     {
                         if (session.NodeCache.IsTypeOf(variable.DataType, Opc.Ua.DataTypeIds.Structure))
                         {
diff --git a/Applications/ClientControls.Net4/Common/Client/EditReadValueIdDlg.cs b/Applications/ClientControls.Net4/Common/Client/EditReadValueIdDlg.cs
index eeed3d7f..f7040002 100644
--- a/Applications/ClientControls.Net4/Common/Client/EditReadValueIdDlg.cs
+++ b/Applications/ClientControls.Net4/Common/Client/EditReadValueIdDlg.cs
@@ -159,9 +159,8 @@ namespace Opc.Ua.Client.Controls
                     IndexRangeTB.Text = nodesToRead[0].IndexRange;
 
                     // fetch the available encodings for the first node in the list from the server.
-                    IVariableBase variable = session.NodeCache.Find(nodesToRead[0].NodeId) as IVariableBase;
 
-                    if (variable != null)
+                    if (session.NodeCache.Find(nodesToRead[0].NodeId) is IVariableBase variable)
                     {
                         if (session.NodeCache.IsTypeOf(variable.DataType, Opc.Ua.DataTypeIds.Structure))
                         {
@@ -254,9 +253,7 @@ namespace Opc.Ua.Client.Controls
                 {
                     results[ii].DataEncoding = null;
 
-                    EncodingInfo encoding = DataEncodingCB.SelectedItem as EncodingInfo;
-
-                    if (encoding != null)
+                    if (DataEncodingCB.SelectedItem is EncodingInfo encoding)
                     {
                         results[ii].DataEncoding = encoding.EncodingName;
                     }
diff --git a/Applications/ClientControls.Net4/Common/Client/HistoryDataListView.cs b/Applications/ClientControls.Net4/Common/Client/HistoryDataListView.cs
index 63e920eb..9e1e2214 100644
--- a/Applications/ClientControls.Net4/Common/Client/HistoryDataListView.cs
+++ b/Applications/ClientControls.Net4/Common/Client/HistoryDataListView.cs
@@ -472,15 +472,11 @@ namespace Opc.Ua.Client.Controls
             {
                 AggregateCB.Items.Clear();
 
-                ILocalNode node = m_session.NodeCache.Find(ObjectIds.Server_ServerCapabilities_AggregateFunctions) as ILocalNode;
-
-                if (node != null)
+                if (m_session.NodeCache.Find(ObjectIds.Server_ServerCapabilities_AggregateFunctions) is ILocalNode node)
                 {
                     foreach (IReference reference in node.References.Find(ReferenceTypeIds.HierarchicalReferences, false, true, m_session.TypeTree))
                     {
-                        ILocalNode aggregate = m_session.NodeCache.Find(reference.TargetId) as ILocalNode;
-
-                        if (aggregate != null && aggregate.TypeDefinitionId == ObjectTypeIds.AggregateFunctionType)
+                        if (m_session.NodeCache.Find(reference.TargetId) is ILocalNode aggregate && aggregate.TypeDefinitionId == ObjectTypeIds.AggregateFunctionType)
                         {
                             AvailableAggregate item = new AvailableAggregate();
                             item.NodeId = aggregate.NodeId;
@@ -1489,9 +1485,7 @@ namespace Opc.Ua.Client.Controls
             
             bool isStructured = false;
 
-            PropertyWithHistory property = PropertyCB.SelectedItem as PropertyWithHistory;
-
-            if (property != null && property.BrowseName == Opc.Ua.BrowseNames.Annotations)
+            if (PropertyCB.SelectedItem is PropertyWithHistory property && property.BrowseName == Opc.Ua.BrowseNames.Annotations)
             {
                 isStructured = true;
             }
@@ -1639,9 +1633,7 @@ namespace Opc.Ua.Client.Controls
         /// </summary>
         private void DisplayResults(HistoryData values)
         {
-            HistoryModifiedData modifiedData = values as HistoryModifiedData;
-
-            if (modifiedData != null)
+            if (values is HistoryModifiedData modifiedData)
             {
                 ResultsDV.Columns[5].Visible = true;
                 ResultsDV.Columns[6].Visible = true;
diff --git a/Applications/ClientControls.Net4/Common/Client/SubscribeDataListViewCtrl.cs b/Applications/ClientControls.Net4/Common/Client/SubscribeDataListViewCtrl.cs
index b7632d2d..f2e78104 100644
--- a/Applications/ClientControls.Net4/Common/Client/SubscribeDataListViewCtrl.cs
+++ b/Applications/ClientControls.Net4/Common/Client/SubscribeDataListViewCtrl.cs
@@ -153,10 +153,7 @@ namespace Opc.Ua.Client.Controls
                     }
                 }
 
-                if (m_EditComplexValueDlg != null)
-                {
-                    m_EditComplexValueDlg.ChangeSession(session);
-                }
+                m_EditComplexValueDlg?.ChangeSession(session);
             }
         }
 
diff --git a/Applications/ClientControls.Net4/Common/Client/SubscribeEventsDlg.cs b/Applications/ClientControls.Net4/Common/Client/SubscribeEventsDlg.cs
index be1a8865..e893413c 100644
--- a/Applications/ClientControls.Net4/Common/Client/SubscribeEventsDlg.cs
+++ b/Applications/ClientControls.Net4/Common/Client/SubscribeEventsDlg.cs
@@ -567,8 +567,6 @@ namespace Opc.Ua.Client.Controls
                 return null;
             }
 
-            ReferenceDescription reference = node.Tag as ReferenceDescription;
-
             NodeId typeId = null;
             int childCount = 0;
 
@@ -583,7 +581,7 @@ namespace Opc.Ua.Client.Controls
                 }
             }
 
-            if (reference != null)
+            if (node.Tag is ReferenceDescription reference)
             {
                 if (childCount != 1)
                 {
diff --git a/Applications/ClientControls.Net4/Common/Client/UserNamePasswordDlg.cs b/Applications/ClientControls.Net4/Common/Client/UserNamePasswordDlg.cs
index 8ba5698c..dc77805b 100644
--- a/Applications/ClientControls.Net4/Common/Client/UserNamePasswordDlg.cs
+++ b/Applications/ClientControls.Net4/Common/Client/UserNamePasswordDlg.cs
@@ -64,9 +64,7 @@ namespace Opc.Ua.Client.Controls
 
             if (identity != null)
             {
-                UserNameIdentityToken token = identity.GetIdentityToken() as UserNameIdentityToken;
-
-                if (token != null)
+                if (identity.GetIdentityToken() is UserNameIdentityToken token)
                 {
                     UserNameTB.Text = token.UserName;
                     PasswordTB.Text = token.DecryptedPassword;
diff --git a/Applications/ClientControls.Net4/Common/DiscoveredServerListCtrl.cs b/Applications/ClientControls.Net4/Common/DiscoveredServerListCtrl.cs
index 6bb99e0c..f055038b 100644
--- a/Applications/ClientControls.Net4/Common/DiscoveredServerListCtrl.cs
+++ b/Applications/ClientControls.Net4/Common/DiscoveredServerListCtrl.cs
@@ -132,7 +132,7 @@ namespace Opc.Ua.Client.Controls
             // get a list of well known discovery urls to use.
             StringCollection discoveryUrls = null;
 
-            if (configuration != null && configuration.ClientConfiguration != null)
+            if (configuration?.ClientConfiguration != null)
             {
                 discoveryUrls = configuration.ClientConfiguration.WellKnownDiscoveryUrls;
             }
@@ -167,9 +167,7 @@ namespace Opc.Ua.Client.Controls
             
             ItemsLV.Items.Clear();
 
-            ApplicationDescriptionCollection servers = state as ApplicationDescriptionCollection;
-
-            if (servers != null)
+            if (state is ApplicationDescriptionCollection servers)
             {
                 foreach (ApplicationDescription server in servers)
                 {
@@ -265,10 +263,7 @@ namespace Opc.Ua.Client.Controls
             }
             finally
             {
-                if (client != null)
-                {
-                    client.Close();
-                }
+                client?.Close();
             }
         }
         #endregion
@@ -312,10 +307,10 @@ namespace Opc.Ua.Client.Controls
                 }
             }
 
-			listItem.SubItems[0].Text = String.Format("{0}", server.ApplicationName);
-			listItem.SubItems[1].Text = String.Format("{0}", server.ApplicationType);
-			listItem.SubItems[2].Text = String.Format("{0}", hostname);
-			listItem.SubItems[3].Text = String.Format("{0}", server.ApplicationUri); 
+			listItem.SubItems[0].Text = $"{server.ApplicationName}";
+			listItem.SubItems[1].Text = $"{server.ApplicationType}";
+			listItem.SubItems[2].Text = $"{hostname}";
+			listItem.SubItems[3].Text = $"{server.ApplicationUri}"; 
 
             listItem.ImageKey = GuiUtils.Icons.Service;
         }
diff --git a/Applications/ClientControls.Net4/Common/DiscoveredServerOnNetworkListCtrl.cs b/Applications/ClientControls.Net4/Common/DiscoveredServerOnNetworkListCtrl.cs
index c7705149..cf9ca7e9 100644
--- a/Applications/ClientControls.Net4/Common/DiscoveredServerOnNetworkListCtrl.cs
+++ b/Applications/ClientControls.Net4/Common/DiscoveredServerOnNetworkListCtrl.cs
@@ -122,7 +122,7 @@ namespace Opc.Ua.Client.Controls
             // get a list of well known discovery urls to use.
             StringCollection discoveryUrls = null;
 
-            if (configuration != null && configuration.ClientConfiguration != null)
+            if (configuration?.ClientConfiguration != null)
             {
                 discoveryUrls = configuration.ClientConfiguration.WellKnownDiscoveryUrls;
             }
@@ -157,9 +157,7 @@ namespace Opc.Ua.Client.Controls
             
             ItemsLV.Items.Clear();
 
-            ServerOnNetworkCollection servers = state as ServerOnNetworkCollection;
-
-            if (servers != null)
+            if (state is ServerOnNetworkCollection servers)
             {
                 foreach (ServerOnNetwork server in servers)
                 {
@@ -270,10 +268,7 @@ namespace Opc.Ua.Client.Controls
             }
             finally
             {
-                if (client != null)
-                {
-                    client.Close();
-                }
+                client?.Close();
             }
         }
         #endregion
@@ -292,10 +287,10 @@ namespace Opc.Ua.Client.Controls
                 return;
             }
 
-            listItem.SubItems[0].Text = String.Format("{0}", server.RecordId);
-            listItem.SubItems[1].Text = String.Format("{0}", server.ServerName);
-            listItem.SubItems[2].Text = String.Format("{0}", server.DiscoveryUrl);
-            listItem.SubItems[3].Text = String.Format("{0}", string.Join(",", server.ServerCapabilities)); 
+            listItem.SubItems[0].Text = $"{server.RecordId}";
+            listItem.SubItems[1].Text = $"{server.ServerName}";
+            listItem.SubItems[2].Text = $"{server.DiscoveryUrl}";
+            listItem.SubItems[3].Text = $"{string.Join(",", server.ServerCapabilities)}"; 
 
             listItem.ImageKey = GuiUtils.Icons.Service;
         }
diff --git a/Applications/ClientControls.Net4/Common/EventListView.cs b/Applications/ClientControls.Net4/Common/EventListView.cs
index 1eda7fd0..a0d06820 100644
--- a/Applications/ClientControls.Net4/Common/EventListView.cs
+++ b/Applications/ClientControls.Net4/Common/EventListView.cs
@@ -302,10 +302,7 @@ namespace Opc.Ua.Client.Controls
         /// </summary>
         public void ConditionRefresh()
         {
-            if (m_subscription != null)
-            {
-                m_subscription.ConditionRefresh();
-            }
+            m_subscription?.ConditionRefresh();
         }
 
         /// <summary>
@@ -379,15 +376,12 @@ namespace Opc.Ua.Client.Controls
 
             if (m_displayConditions)
             {
-                NodeId conditionId = fieldValues[0].Value as NodeId;
-
-                if (conditionId != null)
+                if (fieldValues[0].Value is NodeId conditionId)
                 {
                     for (int ii = 0; ii < EventsLV.Items.Count; ii++)
                     {
-                        VariantCollection fields = EventsLV.Items[ii].Tag as VariantCollection;
 
-                        if (fields != null && Utils.IsEqual(conditionId, fields[0].Value))
+                        if (EventsLV.Items[ii].Tag is VariantCollection fields && Utils.IsEqual(conditionId, fields[0].Value))
                         {
                             item = EventsLV.Items[ii];
                             break;
@@ -553,9 +547,8 @@ namespace Opc.Ua.Client.Controls
             if (m_session != null)
             {
                 // check if area supports history.
-                IObject area = m_session.NodeCache.Find(m_areaId) as IObject;
 
-                if (area != null && ((area.EventNotifier & EventNotifiers.HistoryRead) != 0))
+                if (m_session.NodeCache.Find(m_areaId) is IObject area && ((area.EventNotifier & EventNotifiers.HistoryRead) != 0))
                 {
                     // get the last hour or 10 events.
                     ReadEventDetails details = new ReadEventDetails();
@@ -714,9 +707,7 @@ namespace Opc.Ua.Client.Controls
                     return;
                 }
 
-                VariantCollection fields = EventsLV.SelectedItems[0].Tag as VariantCollection;
-
-                if (fields != null)
+                if (EventsLV.SelectedItems[0].Tag is VariantCollection fields)
                 {
                     // new ViewEventDetailsDlg().ShowDialog(m_filter, fields);
                 }
@@ -740,9 +731,7 @@ namespace Opc.Ua.Client.Controls
 
                 foreach (ListViewItem item in EventsLV.SelectedItems)
                 {
-                    VariantCollection fields = item.Tag as VariantCollection;
-
-                    if (fields != null)
+                    if (item.Tag is VariantCollection fields)
                     {
                         events.Add(fields);
                     }
@@ -754,9 +743,7 @@ namespace Opc.Ua.Client.Controls
 
                     foreach (ListViewItem item in EventsLV.SelectedItems)
                     {
-                        VariantCollection fields = item.Tag as VariantCollection;
-
-                        if (fields != null)
+                        if (item.Tag is VariantCollection fields)
                         {
                             item.Font = new Font(item.Font, FontStyle.Strikeout);
                         }
diff --git a/Applications/ClientControls.Net4/Common/HostListCtrl.cs b/Applications/ClientControls.Net4/Common/HostListCtrl.cs
index e992789b..d8d6865e 100644
--- a/Applications/ClientControls.Net4/Common/HostListCtrl.cs
+++ b/Applications/ClientControls.Net4/Common/HostListCtrl.cs
@@ -169,7 +169,7 @@ namespace Opc.Ua.Client.Controls
                 return;
             }
 
-			listItem.SubItems[0].Text = String.Format("{0}", hostname);
+			listItem.SubItems[0].Text = $"{hostname}";
 			listItem.SubItems[1].Text = "<Unknown>";
 
             listItem.ImageKey = GuiUtils.Icons.Computer;
diff --git a/Applications/ClientControls.Net4/Configuration/CertificateListCtrl.cs b/Applications/ClientControls.Net4/Configuration/CertificateListCtrl.cs
index eb27ee3b..3de047d7 100644
--- a/Applications/ClientControls.Net4/Configuration/CertificateListCtrl.cs
+++ b/Applications/ClientControls.Net4/Configuration/CertificateListCtrl.cs
@@ -317,7 +317,7 @@ namespace Opc.Ua.Client.Controls
 
                 if (String.IsNullOrEmpty(listItem.SubItems[0].Text))
                 {
-                    listItem.SubItems[0].Text = String.Format("{0}", certificate.Subject);
+                    listItem.SubItems[0].Text = $"{certificate.Subject}";
                 }
 
                 // determine certificate type.
diff --git a/Applications/ClientControls.Net4/Configuration/CertificatePropertiesListCtrl.cs b/Applications/ClientControls.Net4/Configuration/CertificatePropertiesListCtrl.cs
index 0d2c682d..70c9f103 100644
--- a/Applications/ClientControls.Net4/Configuration/CertificatePropertiesListCtrl.cs
+++ b/Applications/ClientControls.Net4/Configuration/CertificatePropertiesListCtrl.cs
@@ -119,9 +119,7 @@ namespace Opc.Ua.Client.Controls
 
             foreach (X509Extension extension in certificate.Extensions)
             {
-                X509BasicConstraintsExtension basicContraints = extension as X509BasicConstraintsExtension; 
-                
-                if (basicContraints != null)
+                if (extension is X509BasicConstraintsExtension basicContraints)
                 {
                     StringBuilder buffer = new StringBuilder();
 
@@ -143,9 +141,7 @@ namespace Opc.Ua.Client.Controls
                     continue;
                 }
 
-                X509KeyUsageExtension keyUsage = extension as X509KeyUsageExtension;
-
-                if (keyUsage != null)
+                if (extension is X509KeyUsageExtension keyUsage)
                 {
                     StringBuilder buffer = new StringBuilder();
 
@@ -166,9 +162,8 @@ namespace Opc.Ua.Client.Controls
                     continue;
                 }
 
-                X509EnhancedKeyUsageExtension enhancedKeyUsage = extension as X509EnhancedKeyUsageExtension;
                 
-                if (enhancedKeyUsage != null)
+                if (extension is X509EnhancedKeyUsageExtension enhancedKeyUsage)
                 {
                     StringBuilder buffer = new StringBuilder();
 
@@ -193,9 +188,8 @@ namespace Opc.Ua.Client.Controls
                     continue;
                 }
 
-                X509SubjectKeyIdentifierExtension subjectKeyId = extension as X509SubjectKeyIdentifierExtension;
                 
-                if (subjectKeyId != null)
+                if (extension is X509SubjectKeyIdentifierExtension subjectKeyId)
                 {
                     AddItem(new FieldInfo("SubjectKeyIdentifier", subjectKeyId.SubjectKeyIdentifier));
                     continue;
@@ -269,8 +263,8 @@ namespace Opc.Ua.Client.Controls
                 return;
             }
 
-			listItem.SubItems[0].Text = String.Format("{0}", info.Name);
-			listItem.SubItems[1].Text = String.Format("{0}", info.Value);
+			listItem.SubItems[0].Text = $"{info.Name}";
+			listItem.SubItems[1].Text = $"{info.Value}";
             
             listItem.Tag = item;
         }
diff --git a/Applications/ClientControls.Net4/Configuration/CertificateStoreTreeCtrl.cs b/Applications/ClientControls.Net4/Configuration/CertificateStoreTreeCtrl.cs
index 2439affe..db24613f 100644
--- a/Applications/ClientControls.Net4/Configuration/CertificateStoreTreeCtrl.cs
+++ b/Applications/ClientControls.Net4/Configuration/CertificateStoreTreeCtrl.cs
@@ -196,9 +196,7 @@ namespace Opc.Ua.Client.Controls
         {
             base.EnableMenuItems(clickedNode);
 
-            ContainerInfo info = clickedNode.Tag as ContainerInfo;
-
-            if (info != null)
+            if (clickedNode.Tag is ContainerInfo info)
             {
                 CopyMI.Enabled = true;
 
@@ -221,9 +219,7 @@ namespace Opc.Ua.Client.Controls
         {
             base.UpdateNode(treeNode, item, text, icon);
 
-            ContainerInfo info = item as ContainerInfo;
-
-            if (info != null)
+            if (item is ContainerInfo info)
             {
                 SetIcon(treeNode, info);
             }
@@ -309,9 +305,7 @@ namespace Opc.Ua.Client.Controls
                     {
                         for (int ii = 0; ii < certificates.Length; ii++)
                         {
-                            X509Certificate2 certificate = certificates[ii] as X509Certificate2;
-
-                            if (certificate != null)
+                            if (certificates[ii] is X509Certificate2 certificate)
                             {
                                 store.Add(certificate);
                             }
diff --git a/Applications/ClientControls.Net4/Configuration/Common (OLD)/BaseListCtrl.cs b/Applications/ClientControls.Net4/Configuration/Common (OLD)/BaseListCtrl.cs
index a991d31e..287d6219 100644
--- a/Applications/ClientControls.Net4/Configuration/Common (OLD)/BaseListCtrl.cs	
+++ b/Applications/ClientControls.Net4/Configuration/Common (OLD)/BaseListCtrl.cs	
@@ -232,9 +232,7 @@ namespace Opc.Ua.Client.Controls
 		/// </summary>
         protected virtual int CompareItems(object item1, object item2)
         {
-            IComparable comparable = item1 as IComparable;
-
-            if (comparable != null)
+            if (item1 is IComparable comparable)
             {
                 return comparable.CompareTo(item2);
             }
@@ -299,7 +297,7 @@ namespace Opc.Ua.Client.Controls
                 listItem = new ListViewItem();
             }
 
-			listItem.Text     = String.Format("{0}", item);
+			listItem.Text     = $"{item}";
 			listItem.ImageKey = icon;
             listItem.Tag      = item;
             
@@ -497,9 +495,7 @@ namespace Opc.Ua.Client.Controls
 		{
 			if (m_ItemsPicked != null)
 			{
-				ICollection data = GetDataToDrag() as ICollection;
-
-                if (data != null)
+                if (GetDataToDrag() is ICollection data)
                 {
                     m_ItemsPicked(this, new ListItemActionEventArgs(ListItemAction.Picked, data));
                 }
@@ -670,9 +666,7 @@ namespace Opc.Ua.Client.Controls
                         {
                             foreach (ToolStripItem subItem in menuItem.DropDown.Items)
                             {
-                                ToolStripMenuItem subMenuItem = subItem as ToolStripMenuItem;
-
-                                if (subMenuItem != null)
+                                if (subItem is ToolStripMenuItem subMenuItem)
                                 {
                                     subMenuItem.Enabled = false;
                                 }
diff --git a/Applications/ClientControls.Net4/Configuration/Common (OLD)/BaseTreeCtrl.cs b/Applications/ClientControls.Net4/Configuration/Common (OLD)/BaseTreeCtrl.cs
index fa6b72ec..64fbca5f 100644
--- a/Applications/ClientControls.Net4/Configuration/Common (OLD)/BaseTreeCtrl.cs	
+++ b/Applications/ClientControls.Net4/Configuration/Common (OLD)/BaseTreeCtrl.cs	
@@ -99,7 +99,7 @@ namespace Opc.Ua.Client.Controls
 		/// </summary>
 		protected virtual TreeNode AddNode(TreeNode treeNode, object item)
 		{
-            return AddNode(treeNode, item, String.Format("{0}", item), "ClosedFolder");
+            return AddNode(treeNode, item, $"{item}", "ClosedFolder");
 		}
 
 		/// <summary>
@@ -307,9 +307,7 @@ namespace Opc.Ua.Client.Controls
                         {
                             foreach (ToolStripItem subItem in menuItem.DropDown.Items)
                             {
-                                ToolStripMenuItem subMenuItem = subItem as ToolStripMenuItem;
-
-                                if (subMenuItem != null)
+                                if (subItem is ToolStripMenuItem subMenuItem)
                                 {
                                     subMenuItem.Enabled = false;
                                 }
diff --git a/Applications/ClientControls.Net4/Configuration/Common (OLD)/DataListCtrl.cs b/Applications/ClientControls.Net4/Configuration/Common (OLD)/DataListCtrl.cs
index 078f57ee..1c9daac3 100644
--- a/Applications/ClientControls.Net4/Configuration/Common (OLD)/DataListCtrl.cs	
+++ b/Applications/ClientControls.Net4/Configuration/Common (OLD)/DataListCtrl.cs	
@@ -339,9 +339,9 @@ namespace Opc.Ua.Client.Controls
             }
 
             // check for Variant.
-            if (value is Variant)
+            if (value is Variant variant)
             {
-                return IsExpandableType(((Variant)value).Value);
+                return IsExpandableType(variant.Value);
             }
             
             // check for bytes.
@@ -546,7 +546,7 @@ namespace Opc.Ua.Client.Controls
             {
                 if (m_monitoredItem != null)
                 {
-                    return String.Format("{0}", m_monitoredItem.GetEventType(eventFields));
+                    return $"{m_monitoredItem.GetEventType(eventFields)}";
                 }
 
                 return eventFields.GetType().Name;
@@ -727,9 +727,9 @@ namespace Opc.Ua.Client.Controls
                 }
             }
            
-            if (propertyValue is Variant)
+            if (propertyValue is Variant variant)
             {
-                propertyValue = ((Variant)propertyValue).Value;
+                propertyValue = variant.Value;
             }
             
             // update the list view.
@@ -1568,7 +1568,7 @@ namespace Opc.Ua.Client.Controls
             }
 
             // show unknown types as strings.
-            ShowValue(ref index, ref overwrite, String.Format("{0}", value));
+            ShowValue(ref index, ref overwrite, $"{value}");
         }
 
         private void ItemsLV_MouseClick(object sender, MouseEventArgs e)
diff --git a/Applications/ClientControls.Net4/Configuration/Common (OLD)/NodeIdCtrl.cs b/Applications/ClientControls.Net4/Configuration/Common (OLD)/NodeIdCtrl.cs
index 83f0c65e..3dc62993 100644
--- a/Applications/ClientControls.Net4/Configuration/Common (OLD)/NodeIdCtrl.cs	
+++ b/Applications/ClientControls.Net4/Configuration/Common (OLD)/NodeIdCtrl.cs	
@@ -175,7 +175,7 @@ namespace Opc.Ua.Client.Controls
             {
                 ReferenceDescription reference = new SelectNodeDlg().ShowDialog(m_browser.Session, RootId, null, "", null);
 
-                if (reference != null && reference.NodeId != null)
+                if (reference?.NodeId != null)
                 {
                     NodeIdTB.Text = Utils.Format("{0}", reference.NodeId);
                     m_reference = reference;
diff --git a/Applications/ClientControls.Net4/Endpoints/ConfiguredServerDlg.cs b/Applications/ClientControls.Net4/Endpoints/ConfiguredServerDlg.cs
index cb7b99fd..503c3434 100644
--- a/Applications/ClientControls.Net4/Endpoints/ConfiguredServerDlg.cs
+++ b/Applications/ClientControls.Net4/Endpoints/ConfiguredServerDlg.cs
@@ -1327,7 +1327,7 @@ namespace Opc.Ua.Client.Controls
             UriBuilder builder = null;
             string scheme = Utils.UriSchemeOpcTcp;
 
-            if (currentProtocol != null && currentProtocol.Url != null)
+            if (currentProtocol?.Url != null)
             {
                 scheme = currentProtocol.Url.Scheme;
             }
diff --git a/Applications/ClientControls.Net4/Endpoints/ConfiguredServerListCtrl.cs b/Applications/ClientControls.Net4/Endpoints/ConfiguredServerListCtrl.cs
index 5e8891c6..c7e8c5d6 100644
--- a/Applications/ClientControls.Net4/Endpoints/ConfiguredServerListCtrl.cs
+++ b/Applications/ClientControls.Net4/Endpoints/ConfiguredServerListCtrl.cs
@@ -144,14 +144,11 @@ namespace Opc.Ua.Client.Controls
                 protocol = uri.Scheme;
             }
 
-			listItem.SubItems[0].Text = String.Format("{0}", endpoint.Description.Server.ApplicationName);
-			listItem.SubItems[1].Text = String.Format("{0}", hostname);
-			listItem.SubItems[2].Text = String.Format("{0}", protocol); 
-
-			listItem.SubItems[3].Text = String.Format(
-                "{0}/{1}", 
-                SecurityPolicies.GetDisplayName(endpoint.Description.SecurityPolicyUri),
-                endpoint.Description.SecurityMode);
+			listItem.SubItems[0].Text = $"{endpoint.Description.Server.ApplicationName}";
+			listItem.SubItems[1].Text = $"{hostname}";
+			listItem.SubItems[2].Text = $"{protocol}"; 
+
+			listItem.SubItems[3].Text = $"{SecurityPolicies.GetDisplayName(endpoint.Description.SecurityPolicyUri)}/{endpoint.Description.SecurityMode}";
             
 			listItem.SubItems[4].Text = "<Unknown>";
 
diff --git a/Applications/ClientControls.Net4/ExceptionDlg.cs b/Applications/ClientControls.Net4/ExceptionDlg.cs
index fb0e416d..4442c0d3 100644
--- a/Applications/ClientControls.Net4/ExceptionDlg.cs
+++ b/Applications/ClientControls.Net4/ExceptionDlg.cs
@@ -110,9 +110,7 @@ namespace Opc.Ua.Client.Controls
             AddBlock(buffer, "EXCEPTION (" + e.GetType().Name + ")", 1);
             AddBlock(buffer, e.Message);
 
-            ServiceResultException sre = e as ServiceResultException;
-
-            if (sre != null)
+            if (e is ServiceResultException sre)
             {
                 ServiceResult sr = new ServiceResult(sre);
 
diff --git a/Applications/ReferenceServer/ReferenceNodeManager.cs b/Applications/ReferenceServer/ReferenceNodeManager.cs
index c4735033..540bd25e 100644
--- a/Applications/ReferenceServer/ReferenceNodeManager.cs
+++ b/Applications/ReferenceServer/ReferenceNodeManager.cs
@@ -86,11 +86,9 @@ namespace Quickstarts.ReferenceServer
         {
             BaseInstanceState instance = node as BaseInstanceState;
 
-            if (instance != null && instance.Parent != null)
+            if (instance?.Parent != null)
             {
-                string id = instance.Parent.NodeId.Identifier as string;
-
-                if (id != null)
+                if (instance.Parent.NodeId.Identifier is string id)
                 {
                     return new NodeId(id + "_" + instance.SymbolicName, instance.Parent.NodeId.NamespaceIndex);
                 }
@@ -1493,10 +1491,7 @@ namespace Quickstarts.ReferenceServer
             folder.UserWriteMask = AttributeWriteMask.None;
             folder.EventNotifier = EventNotifiers.None;
 
-            if (parent != null)
-            {
-                parent.AddChild(folder);
-            }
+            parent?.AddChild(folder);
 
             return folder;
         }
@@ -1518,10 +1513,7 @@ namespace Quickstarts.ReferenceServer
             folder.UserWriteMask = AttributeWriteMask.None;
             folder.EventNotifier = EventNotifiers.None;
 
-            if (parent != null)
-            {
-                parent.AddChild(folder);
-            }
+            parent?.AddChild(folder);
 
             return folder;
         }
@@ -1630,10 +1622,7 @@ namespace Quickstarts.ReferenceServer
             variable.Definition.AccessLevel = AccessLevels.CurrentReadOrWrite;
             variable.Definition.UserAccessLevel = AccessLevels.CurrentReadOrWrite;
 
-            if (parent != null)
-            {
-                parent.AddChild(variable);
-            }
+            parent?.AddChild(variable);
 
             return variable;
         }
@@ -1646,8 +1635,8 @@ namespace Quickstarts.ReferenceServer
             // now to create the remaining NUMBERED items
             for (uint i = 0; i < numVariables; i++)
             {
-                string newName = string.Format("{0}{1}", name, i.ToString("000"));
-                string newPath = string.Format("{0}/Mass/{1}", path, newName);
+                string newName = $"{name}{i.ToString("000")}";
+                string newPath = $"{path}/Mass/{newName}";
                 itemsCreated.Add(CreateDataItemVariable(parent, newPath, newName, dataType, valueRank));
             }//for i
             return (itemsCreated.ToArray());
@@ -1785,10 +1774,7 @@ namespace Quickstarts.ReferenceServer
             variable.InstrumentRange.AccessLevel = AccessLevels.CurrentReadOrWrite;
             variable.InstrumentRange.UserAccessLevel = AccessLevels.CurrentReadOrWrite;
 
-            if (parent != null)
-            {
-                parent.AddChild(variable);
-            }
+            parent?.AddChild(variable);
 
             return variable;
         }
@@ -1832,10 +1818,7 @@ namespace Quickstarts.ReferenceServer
             variable.FalseState.AccessLevel = AccessLevels.CurrentReadOrWrite;
             variable.FalseState.UserAccessLevel = AccessLevels.CurrentReadOrWrite;
 
-            if (parent != null)
-            {
-                parent.AddChild(variable);
-            }
+            parent?.AddChild(variable);
 
             return variable;
         }
@@ -1883,10 +1866,7 @@ namespace Quickstarts.ReferenceServer
             variable.EnumStrings.AccessLevel = AccessLevels.CurrentReadOrWrite;
             variable.EnumStrings.UserAccessLevel = AccessLevels.CurrentReadOrWrite;
 
-            if (parent != null)
-            {
-                parent.AddChild(variable);
-            }
+            parent?.AddChild(variable);
 
             return variable;
         }
@@ -1956,10 +1936,7 @@ namespace Quickstarts.ReferenceServer
             variable.EnumValues.UserAccessLevel = AccessLevels.CurrentReadOrWrite;
             variable.ValueAsText.Value = variable.EnumValues.Value[0].DisplayName;
 
-            if (parent != null)
-            {
-                parent.AddChild(variable);
-            }
+            parent?.AddChild(variable);
 
             return variable;
         }
@@ -2193,10 +2170,7 @@ namespace Quickstarts.ReferenceServer
                 variable.ArrayDimensions = new ReadOnlyList<uint>(new List<uint> { 0, 0 });
             }
 
-            if (parent != null)
-            {
-                parent.AddChild(variable);
-            }
+            parent?.AddChild(variable);
 
             return variable;
         }
@@ -2215,8 +2189,8 @@ namespace Quickstarts.ReferenceServer
             // now to create the remaining NUMBERED items
             for (uint i = 0; i < numVariables; i++)
             {
-                string newName = string.Format("{0}_{1}", name, i.ToString("00"));
-                string newPath = string.Format("{0}_{1}", path, newName);
+                string newName = $"{name}_{i.ToString("00")}";
+                string newPath = $"{path}_{newName}";
                 itemsCreated.Add(CreateVariable(newParentFolder, newPath, newName, dataType, valueRank));
             }
             return (itemsCreated.ToArray());
@@ -2255,8 +2229,8 @@ namespace Quickstarts.ReferenceServer
             // now to create the remaining NUMBERED items
             for (uint i = 0; i < numVariables; i++)
             {
-                string newName = string.Format("{0}_{1}", name, i.ToString("00"));
-                string newPath = string.Format("{0}_{1}", path, newName);
+                string newName = $"{name}_{i.ToString("00")}";
+                string newPath = $"{path}_{newName}";
                 itemsCreated.Add(CreateDynamicVariable(newParentFolder, newPath, newName, dataType, valueRank));
             }//for i
             return (itemsCreated.ToArray());
@@ -2424,10 +2398,7 @@ namespace Quickstarts.ReferenceServer
             method.Executable = true;
             method.UserExecutable = true;
 
-            if (parent != null)
-            {
-                parent.AddChild(method);
-            }
+            parent?.AddChild(method);
 
             return method;
         }
diff --git a/Applications/ServerControls.Net4/ExceptionDlg.cs b/Applications/ServerControls.Net4/ExceptionDlg.cs
index ab0fc043..7d1a8061 100644
--- a/Applications/ServerControls.Net4/ExceptionDlg.cs
+++ b/Applications/ServerControls.Net4/ExceptionDlg.cs
@@ -110,9 +110,7 @@ namespace Opc.Ua.Server.Controls
             AddBlock(buffer, "EXCEPTION (" + e.GetType().Name + ")", 1);
             AddBlock(buffer, e.Message);
 
-            ServiceResultException sre = e as ServiceResultException;
-
-            if (sre != null)
+            if (e is ServiceResultException sre)
             {
                 ServiceResult sr = new ServiceResult(sre);
 
diff --git a/Applications/ServerControls.Net4/ServerDiagnosticsCtrl.cs b/Applications/ServerControls.Net4/ServerDiagnosticsCtrl.cs
index afd7b9f4..069505b1 100644
--- a/Applications/ServerControls.Net4/ServerDiagnosticsCtrl.cs
+++ b/Applications/ServerControls.Net4/ServerDiagnosticsCtrl.cs
@@ -115,7 +115,7 @@ namespace Opc.Ua.Server.Controls
                         item.SubItems.Add(String.Empty);
                     }
 
-                    item.SubItems.Add(String.Format("{0}", session.Id));
+                    item.SubItems.Add($"{session.Id}");
                     item.SubItems.Add(String.Format("{0:HH:mm:ss}", session.SessionDiagnostics.ClientLastContactTime.ToLocalTime()));
 
                     SessionsLV.Items.Add(item);
@@ -144,12 +144,12 @@ namespace Opc.Ua.Server.Controls
 
                 ListViewItem item = new ListViewItem(subscription.Id.ToString());
 
-                item.SubItems.Add(String.Format("{0}", (int)subscription.PublishingInterval));
-                item.SubItems.Add(String.Format("{0}", subscription.MonitoredItemCount));
+                item.SubItems.Add($"{(int)subscription.PublishingInterval}");
+                item.SubItems.Add($"{subscription.MonitoredItemCount}");
 
                 lock (subscription.DiagnosticsLock)
                 {
-                    item.SubItems.Add(String.Format("{0}", subscription.Diagnostics.NextSequenceNumber));
+                    item.SubItems.Add($"{subscription.Diagnostics.NextSequenceNumber}");
                 }
 
                 SubscriptionsLV.Items.Add(item);
diff --git a/Libraries/Opc.Ua.Client.ComplexTypes/ComplexTypeSystem.cs b/Libraries/Opc.Ua.Client.ComplexTypes/ComplexTypeSystem.cs
index 003dec99..01ddb2e8 100644
--- a/Libraries/Opc.Ua.Client.ComplexTypes/ComplexTypeSystem.cs
+++ b/Libraries/Opc.Ua.Client.ComplexTypes/ComplexTypeSystem.cs
@@ -595,7 +595,7 @@ namespace Opc.Ua.Client.ComplexTypes
                                 }
                                 catch (DataTypeNotFoundException dtnfex)
                                 {
-                                    var typeMatch = structTypesWorkList.Where(n => n.NodeId == dtnfex.nodeId).FirstOrDefault();
+                                    var typeMatch = structTypesWorkList.FirstOrDefault(n => n.NodeId == dtnfex.nodeId);
                                     if (typeMatch == null)
                                     {
                                         throw;
@@ -795,9 +795,9 @@ namespace Opc.Ua.Client.ComplexTypes
                 false,
                 false
                 );
-            binaryEncodingId = references.Where(r => r.BrowseName.Name == BrowseNames.DefaultBinary).FirstOrDefault()?.NodeId;
+            binaryEncodingId = references.FirstOrDefault(r => r.BrowseName.Name == BrowseNames.DefaultBinary)?.NodeId;
             binaryEncodingId = NormalizeExpandedNodeId(binaryEncodingId);
-            xmlEncodingId = references.Where(r => r.BrowseName.Name == BrowseNames.DefaultXml).FirstOrDefault()?.NodeId;
+            xmlEncodingId = references.FirstOrDefault(r => r.BrowseName.Name == BrowseNames.DefaultXml)?.NodeId;
             xmlEncodingId = NormalizeExpandedNodeId(xmlEncodingId);
             return references.Where(r => supportedEncodings.Contains(r.BrowseName.Name))
                 .Select(r => ExpandedNodeId.ToNodeId(r.NodeId, m_session.NamespaceUris)).ToList();
@@ -972,11 +972,10 @@ namespace Opc.Ua.Client.ComplexTypes
                 }
                 else
                 {
-                    enumDescription = allEnumerationTypes.Where(node =>
+                    enumDescription = allEnumerationTypes.FirstOrDefault(node =>
                         node.BrowseName.Name == item.Name &&
                         (node.BrowseName.NamespaceIndex == complexTypeBuilder.TargetNamespaceIndex ||
-                        complexTypeBuilder.TargetNamespaceIndex == -1)).FirstOrDefault()
-                        as DataTypeNode;
+                        complexTypeBuilder.TargetNamespaceIndex == -1))                        as DataTypeNode;
                 }
                 if (enumDescription != null)
                 {
diff --git a/Libraries/Opc.Ua.Client.ComplexTypes/Types/BaseComplexType.cs b/Libraries/Opc.Ua.Client.ComplexTypes/Types/BaseComplexType.cs
index fc33e016..99c22d95 100644
--- a/Libraries/Opc.Ua.Client.ComplexTypes/Types/BaseComplexType.cs
+++ b/Libraries/Opc.Ua.Client.ComplexTypes/Types/BaseComplexType.cs
@@ -329,15 +329,15 @@ namespace Opc.Ua.Client.ComplexTypes
             StringBuilder body,
             object value)
         {
-            if (value is byte[])
+            if (value is byte[] bytes)
             {
-                body.AppendFormat(formatProvider, "Byte[{0}]", ((byte[])value).Length);
+                body.AppendFormat(formatProvider, "Byte[{0}]", bytes.Length);
                 return;
             }
 
-            if (value is XmlElement)
+            if (value is XmlElement xmlElement)
             {
-                body.AppendFormat(formatProvider, "<{0}>", ((XmlElement)value).Name);
+                body.AppendFormat(formatProvider, "<{0}>", xmlElement.Name);
                 return;
             }
 
diff --git a/Libraries/Opc.Ua.Client/MonitoredItem.cs b/Libraries/Opc.Ua.Client/MonitoredItem.cs
index 4f91644b..eb5b547f 100644
--- a/Libraries/Opc.Ua.Client/MonitoredItem.cs
+++ b/Libraries/Opc.Ua.Client/MonitoredItem.cs
@@ -638,10 +638,7 @@ namespace Opc.Ua.Client
                 {
                     EventFieldList eventchange = newValue as EventFieldList;
 
-                    if (m_eventCache != null)
-                    {
-                        m_eventCache.OnNotification(eventchange);
-                    }
+                    m_eventCache?.OnNotification(eventchange);
                 }
 
                 if (m_Notification != null)
diff --git a/Libraries/Opc.Ua.Client/NodeCache.cs b/Libraries/Opc.Ua.Client/NodeCache.cs
index 1700f3f7..76987158 100644
--- a/Libraries/Opc.Ua.Client/NodeCache.cs
+++ b/Libraries/Opc.Ua.Client/NodeCache.cs
@@ -508,17 +508,15 @@ namespace Opc.Ua.Client
             }
 
             // for structure types must try to determine the subtype.
-            ExtensionObject extension = value as ExtensionObject;
             
-            if (extension != null)
+            if (value is ExtensionObject extension)
             {
                 return IsEncodingFor(expectedTypeId, extension);
             }
-            
+
             // every element in an array must match.
-            ExtensionObject[] extensions = value as ExtensionObject[];
 
-            if (extensions != null)
+            if (value is ExtensionObject[] extensions)
             {
                 for (int ii = 0; ii < extensions.Length; ii++)
                 {
diff --git a/Libraries/Opc.Ua.Client/Session.cs b/Libraries/Opc.Ua.Client/Session.cs
index 979f69d8..c53b3ad1 100644
--- a/Libraries/Opc.Ua.Client/Session.cs
+++ b/Libraries/Opc.Ua.Client/Session.cs
@@ -1394,9 +1394,7 @@ namespace Opc.Ua.Client
         /// </remarks>
         public void FetchTypeTree(ExpandedNodeId typeId)
         {
-            Node node = NodeCache.Find(typeId) as Node;
-
-            if (node != null)
+            if (NodeCache.Find(typeId) is Node node)
             {
                 foreach (IReference reference in node.Find(ReferenceTypeIds.HasSubtype, false))
                 {
@@ -2094,9 +2092,7 @@ namespace Opc.Ua.Client
             if (attributes.TryGetValue(Attributes.RolePermissions, out value) &&
                 value != null)
             {
-                ExtensionObject[] rolePermissions = value.Value as ExtensionObject[];
-
-                if (rolePermissions != null)
+                if (value.Value is ExtensionObject[] rolePermissions)
                 {
                     node.RolePermissions = new RolePermissionTypeCollection();
 
@@ -2111,9 +2107,7 @@ namespace Opc.Ua.Client
             if (attributes.TryGetValue(Attributes.UserRolePermissions, out value) &&
                 value != null)
             {
-                ExtensionObject[] userRolePermissions = value.Value as ExtensionObject[];
-
-                if (userRolePermissions != null)
+                if (value.Value is ExtensionObject[] userRolePermissions)
                 {
                     node.UserRolePermissions = new RolePermissionTypeCollection();
 
@@ -2187,9 +2181,7 @@ namespace Opc.Ua.Client
 
             if (expectedType != null)
             {
-                ExtensionObject extension = value as ExtensionObject;
-
-                if (extension != null)
+                if (value is ExtensionObject extension)
                 {
                     value = extension.Body;
                 }
@@ -3090,9 +3082,8 @@ namespace Opc.Ua.Client
                 object value = results[ii].Value;
 
                 // extract the body from extension objects.
-                ExtensionObject extension = value as ExtensionObject;
 
-                if (extension != null && extension.Body is IEncodeable)
+                if (value is ExtensionObject extension && extension.Body is IEncodeable)
                 {
                     value = extension.Body;
                 }
@@ -3249,9 +3240,9 @@ namespace Opc.Ua.Client
                 {
                     // dont throw errors on disconnect, but return them
                     // so the caller can log the error.
-                    if (e is ServiceResultException)
+                    if (e is ServiceResultException serviceResultException)
                     {
-                        result = ((ServiceResultException)e).StatusCode;
+                        result = serviceResultException.StatusCode;
                     }
                     else
                     {
diff --git a/Libraries/Opc.Ua.Client/SessionReconnectHandler.cs b/Libraries/Opc.Ua.Client/SessionReconnectHandler.cs
index d614f6e4..92fedda4 100644
--- a/Libraries/Opc.Ua.Client/SessionReconnectHandler.cs
+++ b/Libraries/Opc.Ua.Client/SessionReconnectHandler.cs
@@ -181,10 +181,9 @@ namespace Opc.Ua.Client
                 catch (Exception exception)
                 {
                     // recreate the session if it has been closed.
-                    ServiceResultException sre = exception as ServiceResultException;
 
                     // check if the server endpoint could not be reached.
-                    if ((sre != null &&
+                    if ((exception is ServiceResultException sre &&
                         (sre.StatusCode == StatusCodes.BadTcpInternalError ||
                          sre.StatusCode == StatusCodes.BadCommunicationError ||
                          sre.StatusCode == StatusCodes.BadNotConnected ||
diff --git a/Libraries/Opc.Ua.Client/Subscription.cs b/Libraries/Opc.Ua.Client/Subscription.cs
index c51025d6..b365993c 100644
--- a/Libraries/Opc.Ua.Client/Subscription.cs
+++ b/Libraries/Opc.Ua.Client/Subscription.cs
@@ -1684,9 +1684,7 @@ namespace Opc.Ua.Client
                         {
                             for (int jj = 0; jj < message.NotificationData.Count; jj++)
                             {
-                                DataChangeNotification datachange = message.NotificationData[jj].Body as DataChangeNotification;
-
-                                if (datachange != null)
+                                if (message.NotificationData[jj].Body is DataChangeNotification datachange)
                                 {
                                     noNotificationsReceived += datachange.MonitoredItems.Count;
 
@@ -1701,9 +1699,7 @@ namespace Opc.Ua.Client
                                     }
                                 }
 
-                                EventNotificationList events = message.NotificationData[jj].Body as EventNotificationList;
-
-                                if (events != null)
+                                if (message.NotificationData[jj].Body is EventNotificationList events)
                                 {
                                     noNotificationsReceived += events.Events.Count;
 
@@ -1718,9 +1714,7 @@ namespace Opc.Ua.Client
                                     }
                                 }
 
-                                StatusChangeNotification statusChanged = message.NotificationData[jj].Body as StatusChangeNotification;
-
-                                if (statusChanged != null)
+                                if (message.NotificationData[jj].Body is StatusChangeNotification statusChanged)
                                 {
                                     Utils.Trace("StatusChangeNotification received with Status = {0} for SubscriptionId={1}.", statusChanged.Status.ToString(), Id);
                                 }
diff --git a/Libraries/Opc.Ua.Configuration/ApplicationInstance.cs b/Libraries/Opc.Ua.Configuration/ApplicationInstance.cs
index 4b97d106..a3658c3b 100644
--- a/Libraries/Opc.Ua.Configuration/ApplicationInstance.cs
+++ b/Libraries/Opc.Ua.Configuration/ApplicationInstance.cs
@@ -732,7 +732,7 @@ namespace Opc.Ua.Configuration
 
             string storePath = null;
 
-            if (configuration != null && configuration.SecurityConfiguration != null && configuration.SecurityConfiguration.TrustedPeerCertificates != null)
+            if (configuration?.SecurityConfiguration != null && configuration.SecurityConfiguration.TrustedPeerCertificates != null)
             {
                 storePath = configuration.SecurityConfiguration.TrustedPeerCertificates.StorePath;
             }
diff --git a/Libraries/Opc.Ua.PubSub/Configuration/UaPubSubConfigurator.cs b/Libraries/Opc.Ua.PubSub/Configuration/UaPubSubConfigurator.cs
index c33d2ac9..0661b9fb 100644
--- a/Libraries/Opc.Ua.PubSub/Configuration/UaPubSubConfigurator.cs
+++ b/Libraries/Opc.Ua.PubSub/Configuration/UaPubSubConfigurator.cs
@@ -804,7 +804,7 @@ namespace Opc.Ua.PubSub.Configuration
             }
             if (!m_idsToObjects.ContainsKey(parentConnectionId))
             {
-                throw new ArgumentException(String.Format("There is no connection with configurationId = {0} in current configuration.", parentConnectionId));
+                throw new ArgumentException($"There is no connection with configurationId = {parentConnectionId} in current configuration.");
             }
             try
             {
@@ -980,7 +980,7 @@ namespace Opc.Ua.PubSub.Configuration
             }
             if (!m_idsToObjects.ContainsKey(parentWriterGroupId))
             {
-                throw new ArgumentException(String.Format("There is no WriterGroup with configurationId = {0} in current configuration.", parentWriterGroupId));
+                throw new ArgumentException($"There is no WriterGroup with configurationId = {parentWriterGroupId} in current configuration.");
             }
             try
             {
@@ -1135,7 +1135,7 @@ namespace Opc.Ua.PubSub.Configuration
             }
             if (!m_idsToObjects.ContainsKey(parentConnectionId))
             {
-                throw new ArgumentException(String.Format("There is no connection with configurationId = {0} in current configuration.", parentConnectionId));
+                throw new ArgumentException($"There is no connection with configurationId = {parentConnectionId} in current configuration.");
             }
             try
             {
@@ -1312,7 +1312,7 @@ namespace Opc.Ua.PubSub.Configuration
             }
             if (!m_idsToObjects.ContainsKey(parentReaderGroupId))
             {
-                throw new ArgumentException(String.Format("There is no ReaderGroup with configurationId = {0} in current configuration.", parentReaderGroupId));
+                throw new ArgumentException($"There is no ReaderGroup with configurationId = {parentReaderGroupId} in current configuration.");
             }
             try
             {
@@ -1566,29 +1566,29 @@ namespace Opc.Ua.PubSub.Configuration
                 }
                 bool configurationObjectEnabled = (newState == PubSubState.Operational || newState == PubSubState.Paused);
                 //update the Enabled flag in config object
-                if (configurationObject is PubSubConfigurationDataType)
+                if (configurationObject is PubSubConfigurationDataType pubSubConfigurationDataType)
                 {
-                    ((PubSubConfigurationDataType)configurationObject).Enabled = configurationObjectEnabled;
+                    pubSubConfigurationDataType.Enabled = configurationObjectEnabled;
                 }
-                else if (configurationObject is PubSubConnectionDataType)
+                else if (configurationObject is PubSubConnectionDataType pubSubConnectionDataType)
                 {
-                    ((PubSubConnectionDataType)configurationObject).Enabled = configurationObjectEnabled;
+                    pubSubConnectionDataType.Enabled = configurationObjectEnabled;
                 }
-                else if (configurationObject is WriterGroupDataType)
+                else if (configurationObject is WriterGroupDataType writerGroupDataType)
                 {
-                    ((WriterGroupDataType)configurationObject).Enabled = configurationObjectEnabled;
+                    writerGroupDataType.Enabled = configurationObjectEnabled;
                 }
-                else if (configurationObject is DataSetWriterDataType)
+                else if (configurationObject is DataSetWriterDataType dataSetWriterDataType)
                 {
-                    ((DataSetWriterDataType)configurationObject).Enabled = configurationObjectEnabled;
+                    dataSetWriterDataType.Enabled = configurationObjectEnabled;
                 }
-                else if (configurationObject is ReaderGroupDataType)
+                else if (configurationObject is ReaderGroupDataType readerGroupDataType)
                 {
-                    ((ReaderGroupDataType)configurationObject).Enabled = configurationObjectEnabled;
+                    readerGroupDataType.Enabled = configurationObjectEnabled;
                 }
-                else if (configurationObject is DataSetReaderDataType)
+                else if (configurationObject is DataSetReaderDataType dataSetReaderDataType)
                 {
-                    ((DataSetReaderDataType)configurationObject).Enabled = configurationObjectEnabled;
+                    dataSetReaderDataType.Enabled = configurationObjectEnabled;
                 }
             }
         }
@@ -1676,43 +1676,43 @@ namespace Opc.Ua.PubSub.Configuration
             PubSubState parentPubSubState = PubSubState.Operational;
             uint parentId = InvalidId;
 
-            if (configurationObject is PubSubConfigurationDataType)
+            if (configurationObject is PubSubConfigurationDataType pubSubConfigurationDataType)
             {
-                configurationObjectEnabled = ((PubSubConfigurationDataType)configurationObject).Enabled;
+                configurationObjectEnabled = pubSubConfigurationDataType.Enabled;
             }
-            else if (configurationObject is PubSubConnectionDataType)
+            else if (configurationObject is PubSubConnectionDataType pubSubConnectionDataType)
             {
-                configurationObjectEnabled = ((PubSubConnectionDataType)configurationObject).Enabled;
+                configurationObjectEnabled = pubSubConnectionDataType.Enabled;
                 //find parent state 
                 parentPubSubState = FindStateForObject(m_pubSubConfiguration);
             }
-            else if (configurationObject is WriterGroupDataType)
+            else if (configurationObject is WriterGroupDataType writerGroupDataType)
             {
-                configurationObjectEnabled = ((WriterGroupDataType)configurationObject).Enabled;
+                configurationObjectEnabled = writerGroupDataType.Enabled;
                 //find parent connection
                 object parentConnection = FindParentForObject(configurationObject);
                 //find parent state 
                 parentPubSubState = FindStateForObject(parentConnection);
             }
-            else if (configurationObject is DataSetWriterDataType)
+            else if (configurationObject is DataSetWriterDataType dataSetWriterDataType)
             {
-                configurationObjectEnabled = ((DataSetWriterDataType)configurationObject).Enabled;
+                configurationObjectEnabled = dataSetWriterDataType.Enabled;
                 //find parent 
                 object parentWriterGroup = FindParentForObject(configurationObject);
                 //find parent state 
                 parentPubSubState = FindStateForObject(parentWriterGroup);
             }
-            else if (configurationObject is ReaderGroupDataType)
+            else if (configurationObject is ReaderGroupDataType readerGroupDataType)
             {
-                configurationObjectEnabled = ((ReaderGroupDataType)configurationObject).Enabled;
+                configurationObjectEnabled = readerGroupDataType.Enabled;
                 //find parent connection
                 object parentConnection = FindParentForObject(configurationObject);
                 //find parent state 
                 parentPubSubState = FindStateForObject(parentConnection);
             }
-            else if (configurationObject is DataSetReaderDataType)
+            else if (configurationObject is DataSetReaderDataType dataSetReaderDataType)
             {
-                configurationObjectEnabled = ((DataSetReaderDataType)configurationObject).Enabled;
+                configurationObjectEnabled = dataSetReaderDataType.Enabled;
                 //find parent 
                 object parentReaderGroup = FindParentForObject(configurationObject);
                 //find parent state 
diff --git a/Libraries/Opc.Ua.PubSub/PublishedData/DataCollector.cs b/Libraries/Opc.Ua.PubSub/PublishedData/DataCollector.cs
index 11a40fa5..1409a548 100644
--- a/Libraries/Opc.Ua.PubSub/PublishedData/DataCollector.cs
+++ b/Libraries/Opc.Ua.PubSub/PublishedData/DataCollector.cs
@@ -72,7 +72,7 @@ namespace Opc.Ua.PubSub.PublishedData
                 return false;
             }
             PublishedDataItemsDataType publishedDataItems = ExtensionObject.ToEncodeable(publishedDataSet.DataSetSource) as PublishedDataItemsDataType;
-            if (publishedDataItems != null && publishedDataItems.PublishedData != null)
+            if (publishedDataItems?.PublishedData != null)
             {
                 if (publishedDataItems.PublishedData.Count != publishedDataSet.DataSetMetaData.Fields.Count)
                 {
@@ -139,7 +139,7 @@ namespace Opc.Ua.PubSub.PublishedData
                 {
                     DataSet dataSet = new DataSet(dataSetName);
                     PublishedDataItemsDataType publishedDataItems = ExtensionObject.ToEncodeable(publishedDataSet.DataSetSource) as PublishedDataItemsDataType;
-                    if (publishedDataItems != null && publishedDataItems.PublishedData != null && publishedDataItems.PublishedData.Count > 0)
+                    if (publishedDataItems?.PublishedData != null && publishedDataItems.PublishedData.Count > 0)
                     {
                         dataSet.Fields = new Field[publishedDataItems.PublishedData.Count];
                         for (int i = 0; i < publishedDataItems.PublishedData.Count; i++)
@@ -161,12 +161,10 @@ namespace Opc.Ua.PubSub.PublishedData
 
                                 if (dataValue == null)
                                 {
-                                    //try to get the dataValue from ExtensionFields
-                                    /*If an entry of the PublishedData references one of the ExtensionFields, the substituteValue shall contain the 
+                                    //try to get the dataValue from ExtensionFields                                    /*If an entry of the PublishedData references one of the ExtensionFields, the substituteValue shall contain the 
                                     * QualifiedName of the ExtensionFields entry. 
                                     * All other fields of this PublishedVariableDataType array element shall be null*/
-                                    QualifiedName extensionFieldName = publishedVariable.SubstituteValue.Value as QualifiedName;
-                                    if (extensionFieldName != null)
+                                    if (publishedVariable.SubstituteValue.Value is QualifiedName extensionFieldName)
                                     {
                                         KeyValuePair extensionField = publishedDataSet.ExtensionFields.Find(x => x.Key == extensionFieldName);
                                         if (extensionField != null)
diff --git a/Libraries/Opc.Ua.PubSub/Uadp/UadpDataSetMessage.cs b/Libraries/Opc.Ua.PubSub/Uadp/UadpDataSetMessage.cs
index 01cff4e6..c9a3f94a 100644
--- a/Libraries/Opc.Ua.PubSub/Uadp/UadpDataSetMessage.cs
+++ b/Libraries/Opc.Ua.PubSub/Uadp/UadpDataSetMessage.cs
@@ -336,9 +336,7 @@ namespace Opc.Ua.PubSub.Uadp
         /// <returns></returns>
         public DataSet DecodePossibleDataSetReader(BinaryDecoder binaryDecoder, DataSetReaderDataType dataSetReader)
         {
-            UadpDataSetReaderMessageDataType messageSettings = ExtensionObject.ToEncodeable(dataSetReader.MessageSettings) 
-                as UadpDataSetReaderMessageDataType;
-            if (messageSettings != null)
+            if (ExtensionObject.ToEncodeable(dataSetReader.MessageSettings) is UadpDataSetReaderMessageDataType messageSettings)
             {
                 //StartPositionInStream is calculated but different from reader configuration dataset cannot be decoded
                 if (StartPositionInStream != messageSettings.DataSetOffset)
diff --git a/Libraries/Opc.Ua.PubSub/Uadp/UadpNetworkMessage.cs b/Libraries/Opc.Ua.PubSub/Uadp/UadpNetworkMessage.cs
index 1c80a277..064762ac 100644
--- a/Libraries/Opc.Ua.PubSub/Uadp/UadpNetworkMessage.cs
+++ b/Libraries/Opc.Ua.PubSub/Uadp/UadpNetworkMessage.cs
@@ -950,8 +950,8 @@ namespace Opc.Ua.PubSub.Uadp
                     }
                 }
             }
-            BinaryDecoder binaryDecoder = decoder as BinaryDecoder;
-            if (binaryDecoder != null)
+
+            if (decoder is BinaryDecoder binaryDecoder)
             {
                 int offset = 0;
                 // set start position of dataset message in binary stream 
diff --git a/Libraries/Opc.Ua.PubSub/Uadp/UadpPubSubConnection.cs b/Libraries/Opc.Ua.PubSub/Uadp/UadpPubSubConnection.cs
index a2721d70..8c9eb8f6 100644
--- a/Libraries/Opc.Ua.PubSub/Uadp/UadpPubSubConnection.cs
+++ b/Libraries/Opc.Ua.PubSub/Uadp/UadpPubSubConnection.cs
@@ -211,11 +211,8 @@ namespace Opc.Ua.PubSub.Uadp
                     DataSet dataSet = Application.DataCollector.CollectData(dataSetWriter.DataSetName);
                     if (dataSet != null)
                     {
-                        UadpDataSetWriterMessageDataType dataSetMessageSettings =
-                            ExtensionObject.ToEncodeable(dataSetWriter.MessageSettings) as
-                                UadpDataSetWriterMessageDataType;
                         // check MessageSettings to see how to encode DataSet
-                        if (dataSetMessageSettings != null)
+                        if (                            ExtensionObject.ToEncodeable(dataSetWriter.MessageSettings) is UadpDataSetWriterMessageDataType dataSetMessageSettings)
                         {
                             UadpDataSetMessage uadpDataSetMessage = new UadpDataSetMessage(dataSet);
                             uadpDataSetMessage.DataSetWriterId = dataSetWriter.DataSetWriterId;
diff --git a/Libraries/Opc.Ua.Security.Certificates/Extensions/X509Extensions.cs b/Libraries/Opc.Ua.Security.Certificates/Extensions/X509Extensions.cs
index 9b0d7f59..00088245 100644
--- a/Libraries/Opc.Ua.Security.Certificates/Extensions/X509Extensions.cs
+++ b/Libraries/Opc.Ua.Security.Certificates/Extensions/X509Extensions.cs
@@ -64,10 +64,10 @@ namespace Opc.Ua.Security.Certificates
                 // search known custom extensions
                 if (typeof(T) == typeof(X509AuthorityKeyIdentifierExtension))
                 {
-                    var extension = extensions.Cast<X509Extension>().Where(e => (
+                    var extension = extensions.Cast<X509Extension>().FirstOrDefault(e => (
                         e.Oid.Value == X509AuthorityKeyIdentifierExtension.AuthorityKeyIdentifierOid ||
                         e.Oid.Value == X509AuthorityKeyIdentifierExtension.AuthorityKeyIdentifier2Oid)
-                    ).FirstOrDefault();
+                    );
                     if (extension != null)
                     {
                         return new X509AuthorityKeyIdentifierExtension(extension, extension.Critical) as T;
@@ -76,10 +76,10 @@ namespace Opc.Ua.Security.Certificates
 
                 if (typeof(T) == typeof(X509SubjectAltNameExtension))
                 {
-                    var extension = extensions.Cast<X509Extension>().Where(e => (
+                    var extension = extensions.Cast<X509Extension>().FirstOrDefault(e => (
                         e.Oid.Value == X509SubjectAltNameExtension.SubjectAltNameOid ||
                         e.Oid.Value == X509SubjectAltNameExtension.SubjectAltName2Oid)
-                    ).FirstOrDefault();
+                    );
                     if (extension != null)
                     {
                         return new X509SubjectAltNameExtension(extension, extension.Critical) as T;
@@ -88,9 +88,9 @@ namespace Opc.Ua.Security.Certificates
 
                 if (typeof(T) == typeof(X509CrlNumberExtension))
                 {
-                    var extension = extensions.Cast<X509Extension>().Where(e => (
+                    var extension = extensions.Cast<X509Extension>().FirstOrDefault(e => (
                         e.Oid.Value == X509CrlNumberExtension.CrlNumberOid)
-                    ).FirstOrDefault();
+                    );
                     if (extension != null)
                     {
                         return new X509CrlNumberExtension(extension, extension.Critical) as T;
diff --git a/Libraries/Opc.Ua.Security.Certificates/Org.BouncyCastle/PEMReader.cs b/Libraries/Opc.Ua.Security.Certificates/Org.BouncyCastle/PEMReader.cs
index 770c1909..7f48a994 100644
--- a/Libraries/Opc.Ua.Security.Certificates/Org.BouncyCastle/PEMReader.cs
+++ b/Libraries/Opc.Ua.Security.Certificates/Org.BouncyCastle/PEMReader.cs
@@ -71,8 +71,8 @@ namespace Opc.Ua.Security.Certificates
                     while (pemObject != null)
                     {
                         RsaPrivateCrtKeyParameters privateKey = null;
-                        var keypair = pemObject as Org.BouncyCastle.Crypto.AsymmetricCipherKeyPair;
-                        if (keypair != null)
+
+                        if (pemObject is Org.BouncyCastle.Crypto.AsymmetricCipherKeyPair keypair)
                         {
                             privateKey = keypair.Private as RsaPrivateCrtKeyParameters;
                         }
diff --git a/Libraries/Opc.Ua.Server/Configuration/ConfigurationNodeManager.cs b/Libraries/Opc.Ua.Server/Configuration/ConfigurationNodeManager.cs
index 45bfc4ac..39e75138 100644
--- a/Libraries/Opc.Ua.Server/Configuration/ConfigurationNodeManager.cs
+++ b/Libraries/Opc.Ua.Server/Configuration/ConfigurationNodeManager.cs
@@ -138,9 +138,7 @@ namespace Opc.Ua.Server
             ISystemContext context,
             NodeState predefinedNode)
         {
-            BaseObjectState passiveNode = predefinedNode as BaseObjectState;
-
-            if (passiveNode != null)
+            if (predefinedNode is BaseObjectState passiveNode)
             {
                 NodeId typeId = passiveNode.TypeDefinitionId;
                 if (IsNodeIdInNamespace(typeId) && typeId.IdType == IdType.Numeric)
@@ -257,9 +255,8 @@ namespace Opc.Ua.Server
             }
 
             // find ServerNamespaces node and subscribe to StateChanged
-            NamespacesState serverNamespacesNode = FindPredefinedNode(ObjectIds.Server_Namespaces, typeof(NamespacesState)) as NamespacesState;
 
-            if (serverNamespacesNode != null)
+            if (FindPredefinedNode(ObjectIds.Server_Namespaces, typeof(NamespacesState)) is NamespacesState serverNamespacesNode)
             {
                 serverNamespacesNode.StateChanged += ServerNamespacesChanged;
             }
@@ -337,8 +334,7 @@ namespace Opc.Ua.Server
         /// <seealso cref="StatusCodes.BadUserAccessDenied"/>
         public void HasApplicationSecureAdminAccess(ISystemContext context)
         {
-            OperationContext operationContext = (context as SystemContext)?.OperationContext as OperationContext;
-            if (operationContext != null)
+            if ((context as SystemContext)?.OperationContext is OperationContext operationContext)
             {
                 if (operationContext.ChannelContext?.EndpointDescription?.SecurityMode != MessageSecurityMode.SignAndEncrypt)
                 {
diff --git a/Libraries/Opc.Ua.Server/Diagnostics/CustomNodeManager.cs b/Libraries/Opc.Ua.Server/Diagnostics/CustomNodeManager.cs
index e87723b5..fd075962 100644
--- a/Libraries/Opc.Ua.Server/Diagnostics/CustomNodeManager.cs
+++ b/Libraries/Opc.Ua.Server/Diagnostics/CustomNodeManager.cs
@@ -651,7 +651,7 @@ namespace Opc.Ua.Server
             // remove from the parent.
             BaseInstanceState instance = node as BaseInstanceState;
 
-            if (instance != null && instance.Parent != null)
+            if (instance?.Parent != null)
             {
                 instance.Parent.RemoveChild(instance);
             }
@@ -1873,7 +1873,7 @@ namespace Opc.Ua.Server
 
                     // check if the node is AnalogItem and the value is outside the InstrumentRange.
                     AnalogItemState analogItemState = handle.Node as AnalogItemState;
-                    if (analogItemState != null && analogItemState.InstrumentRange != null)
+                    if (analogItemState?.InstrumentRange != null)
                     {
                         try
                         {
diff --git a/Libraries/Opc.Ua.Server/Diagnostics/DiagnosticsNodeManager.cs b/Libraries/Opc.Ua.Server/Diagnostics/DiagnosticsNodeManager.cs
index 908efc92..fe733f69 100644
--- a/Libraries/Opc.Ua.Server/Diagnostics/DiagnosticsNodeManager.cs
+++ b/Libraries/Opc.Ua.Server/Diagnostics/DiagnosticsNodeManager.cs
@@ -656,10 +656,7 @@ namespace Opc.Ua.Server
                     ObjectIds.Server_ServerDiagnostics_SessionsDiagnosticsSummary,
                     typeof(SessionsDiagnosticsSummaryState));
 
-                if (summary != null)
-                {
-                    summary.AddReference(ReferenceTypeIds.HasComponent, false, sessionNode.NodeId);
-                }
+                summary?.AddReference(ReferenceTypeIds.HasComponent, false, sessionNode.NodeId);
 
                 // initialize diagnostics node.
                 SessionDiagnosticsVariableState diagnosticsNode = sessionNode.CreateChild(
@@ -792,10 +789,7 @@ namespace Opc.Ua.Server
                     VariableIds.Server_ServerDiagnostics_SubscriptionDiagnosticsArray,
                     typeof(SubscriptionDiagnosticsArrayState));
 
-                if (array != null)
-                {
-                    array.AddReference(ReferenceTypeIds.HasComponent, false, diagnosticsNode.NodeId);
-                }
+                array?.AddReference(ReferenceTypeIds.HasComponent, false, diagnosticsNode.NodeId);
 
                 // add reference to session subscription array.
                 diagnosticsNode.AddReference(
@@ -815,10 +809,7 @@ namespace Opc.Ua.Server
                         systemContext,
                         BrowseNames.SubscriptionDiagnosticsArray);
 
-                    if (array != null)
-                    {
-                        array.AddReference(ReferenceTypeIds.HasComponent, false, diagnosticsNode.NodeId);
-                    }
+                    array?.AddReference(ReferenceTypeIds.HasComponent, false, diagnosticsNode.NodeId);
                 }
 
                 // send initial update.
@@ -1385,9 +1376,7 @@ namespace Opc.Ua.Server
             // check if the variable needs to be sampled.
             if (monitoredItem.AttributeId == Attributes.Value)
             {
-                BaseVariableState variable = handle.Node as BaseVariableState;
-
-                if (variable != null && variable.MinimumSamplingInterval > 0)
+                if (handle.Node is BaseVariableState variable && variable.MinimumSamplingInterval > 0)
                 {
                     CreateSampledItem(monitoredItem.SamplingInterval, monitoredItem);
                 }
@@ -1446,9 +1435,7 @@ namespace Opc.Ua.Server
             // check if sampling needs to be turned off.
             if (monitoredItem.AttributeId == Attributes.Value)
             {
-                BaseVariableState variable = handle.Node as BaseVariableState;
-
-                if (variable != null && variable.MinimumSamplingInterval > 0)
+                if (handle.Node is BaseVariableState variable && variable.MinimumSamplingInterval > 0)
                 {
                     DeleteSampledItem(monitoredItem);
                 }
diff --git a/Libraries/Opc.Ua.Server/Diagnostics/MonitoredNode.cs b/Libraries/Opc.Ua.Server/Diagnostics/MonitoredNode.cs
index 71739412..27ea1f69 100644
--- a/Libraries/Opc.Ua.Server/Diagnostics/MonitoredNode.cs
+++ b/Libraries/Opc.Ua.Server/Diagnostics/MonitoredNode.cs
@@ -218,9 +218,8 @@ namespace Opc.Ua.Server
             for (int ii = 0; ii < eventMonitoredItems.Count; ii++)
             {
                 IEventMonitoredItem monitoredItem = eventMonitoredItems[ii];
-                BaseEventState baseEventState = e as BaseEventState;
 
-                if (baseEventState != null)
+                if (e is BaseEventState baseEventState)
                 {
                     ServiceResult validationResult = NodeManager.ValidateRolePermissions(new OperationContext(monitoredItem),
                         baseEventState?.EventType?.Value, PermissionType.ReceiveEvents);
diff --git a/Libraries/Opc.Ua.Server/Diagnostics/v10/CustomNodeManager.cs b/Libraries/Opc.Ua.Server/Diagnostics/v10/CustomNodeManager.cs
index ebd80308..033b6a92 100644
--- a/Libraries/Opc.Ua.Server/Diagnostics/v10/CustomNodeManager.cs
+++ b/Libraries/Opc.Ua.Server/Diagnostics/v10/CustomNodeManager.cs
@@ -458,7 +458,7 @@ namespace Opc.Ua.Server
             // remove from the parent.
             BaseInstanceState instance = node as BaseInstanceState;
 
-            if (instance != null && instance.Parent != null)
+            if (instance?.Parent != null)
             {
                 instance.Parent.RemoveChild(instance);
             }
@@ -859,10 +859,7 @@ namespace Opc.Ua.Server
                     {
                         NodeState target = GetManagerHandle(m_systemContext, (NodeId)targetId, null) as NodeState;
 
-                        if (target != null)
-                        {
-                            target.RemoveReference(referenceTypeId, !isInverse, source.NodeId);
-                        }
+                        target?.RemoveReference(referenceTypeId, !isInverse, source.NodeId);
                     }
                 }
 
diff --git a/Libraries/Opc.Ua.Server/Diagnostics/v10/DataChangeMonitoredItem.cs b/Libraries/Opc.Ua.Server/Diagnostics/v10/DataChangeMonitoredItem.cs
index 36a7eadb..810abf74 100644
--- a/Libraries/Opc.Ua.Server/Diagnostics/v10/DataChangeMonitoredItem.cs
+++ b/Libraries/Opc.Ua.Server/Diagnostics/v10/DataChangeMonitoredItem.cs
@@ -556,10 +556,7 @@ namespace Opc.Ua.Server
                 m_lastError = error;
 
                 // queue value.
-                if (m_queue != null)
-                {
-                    m_queue.QueueValue(value, error);
-                }
+                m_queue?.QueueValue(value, error);
 
                 // flag the item as ready to publish.
                 m_readyToPublish = true;
diff --git a/Libraries/Opc.Ua.Server/NodeManager/CoreNodeManager.cs b/Libraries/Opc.Ua.Server/NodeManager/CoreNodeManager.cs
index 85ebc014..56cda314 100644
--- a/Libraries/Opc.Ua.Server/NodeManager/CoreNodeManager.cs
+++ b/Libraries/Opc.Ua.Server/NodeManager/CoreNodeManager.cs
@@ -192,9 +192,7 @@ namespace Opc.Ua.Server
                 // collect nodes to dispose.
                 foreach (INode node in m_nodes)
                 {
-                    IDisposable disposable = node as IDisposable;
-
-                    if (disposable != null)
+                    if (node is IDisposable disposable)
                     {
                         nodesToDispose.Add(disposable);
                     }
@@ -646,9 +644,7 @@ namespace Opc.Ua.Server
 
                 while (enumerator.MoveNext())
                 {
-                    ILocalNode actualNode = GetLocalNode(enumerator.Current.Key) as ILocalNode;
-
-                    if (actualNode != null)
+                    if (GetLocalNode(enumerator.Current.Key) is ILocalNode actualNode)
                     {
                         foreach (IReference reference in enumerator.Current.Value)
                         {
@@ -1253,9 +1249,8 @@ namespace Opc.Ua.Server
                     if (itemToCreate.ItemToMonitor.AttributeId == Attributes.Value)
                     {
                         // use the MinimumSamplingInterval attribute to limit the sampling rate for value attributes.
-                        IVariable variableNode = node as IVariable;
  
-                        if (variableNode != null)
+                        if (node is IVariable variableNode)
                         {
                             minimumSamplingInterval = variableNode.MinimumSamplingInterval;
 
@@ -1547,11 +1542,10 @@ namespace Opc.Ua.Server
 
                         initialValue.ServerTimestamp = DateTime.UtcNow;
                         initialValue.StatusCode      = StatusCodes.BadWaitingForInitialData;
-                        
+
                         // read the initial value.
-                        Node node = monitoredItem.ManagerHandle as Node;
                         
-                        if (node != null)
+                        if (monitoredItem.ManagerHandle is Node node)
                         {
                             ServiceResult error = node.Read(context, monitoredItem.AttributeId, initialValue);
 
@@ -2309,10 +2303,8 @@ namespace Opc.Ua.Server
                         {
                             continue;
                         }
-                        
-                        ILocalNode child = GetLocalNode(reference.TargetId) as ILocalNode;
 
-                        if (child != null)
+                        if (GetLocalNode(reference.TargetId) is ILocalNode child)
                         {
                             if (instance)
                             {
@@ -2848,9 +2840,7 @@ namespace Opc.Ua.Server
 
                 if (deleteBidirectional)
                 {
-                    ILocalNode target = GetManagerHandle(targetId) as ILocalNode;
-
-                    if (target != null)
+                    if (GetManagerHandle(targetId) is ILocalNode target)
                     {
                         target.References.Remove(referenceTypeId, !isInverse, source.NodeId);
                     }
@@ -2972,9 +2962,7 @@ namespace Opc.Ua.Server
 
                 foreach (IReference reference in source.References.Find(referenceTypeId, isInverse, true, m_nodes.TypeTree))
                 {                    
-                    ILocalNode target = GetLocalNode(reference.TargetId) as ILocalNode;
-
-                    if (target != null)
+                    if (GetLocalNode(reference.TargetId) is ILocalNode target)
                     {
                         targets.Add(target);
                     }
@@ -3070,9 +3058,8 @@ namespace Opc.Ua.Server
                     }
 
                     // find target.
-                    ILocalNode target = GetLocalNode(reference.TargetId) as ILocalNode;
 
-                    if (target != null)
+                    if (GetLocalNode(reference.TargetId) is ILocalNode target)
                     {
                         AddReferenceToLocalNode(target, reference.ReferenceTypeId, !reference.IsInverse, node.NodeId, isInternal);
                     }                  
diff --git a/Libraries/Opc.Ua.Server/NodeManager/MasterNodeManager.cs b/Libraries/Opc.Ua.Server/NodeManager/MasterNodeManager.cs
index 480c0bb6..58c6f5d3 100644
--- a/Libraries/Opc.Ua.Server/NodeManager/MasterNodeManager.cs
+++ b/Libraries/Opc.Ua.Server/NodeManager/MasterNodeManager.cs
@@ -351,9 +351,7 @@ namespace Opc.Ua.Server
             {
                 for (int ii = 0; ii < m_nodeManagers.Count; ii++)
                 {
-                    INodeManager2 nodeManager = m_nodeManagers[ii] as INodeManager2;
-
-                    if (nodeManager != null)
+                    if (m_nodeManagers[ii] is INodeManager2 nodeManager)
                     {
                         try
                         {
@@ -1030,7 +1028,7 @@ namespace Opc.Ua.Server
                     // release all allocated continuation points.
                     foreach (BrowseResult current in results)
                     {
-                        if (current != null && current.ContinuationPoint != null && current.ContinuationPoint.Length > 0)
+                        if (current?.ContinuationPoint != null && current.ContinuationPoint.Length > 0)
                         {
                             ContinuationPoint cp = context.Session.RestoreContinuationPoint(current.ContinuationPoint);
                             cp.Dispose();
@@ -1121,7 +1119,7 @@ namespace Opc.Ua.Server
                     // release all allocated continuation points.
                     foreach (BrowseResult current in results)
                     {
-                        if (current != null && current.ContinuationPoint != null && current.ContinuationPoint.Length > 0)
+                        if (current?.ContinuationPoint != null && current.ContinuationPoint.Length > 0)
                         {
                             cp = context.Session.RestoreContinuationPoint(current.ContinuationPoint);
                             cp.Dispose();
@@ -2653,10 +2651,8 @@ namespace Opc.Ua.Server
             // check that no filter is specified for non-value attributes.
             if (!ExtensionObject.IsNull(filter))
             {
-                DataChangeFilter datachangeFilter = filter.Body as DataChangeFilter;
-
                 // validate data change filter.
-                if (datachangeFilter != null)
+                if (filter.Body is DataChangeFilter datachangeFilter)
                 {
                     error = datachangeFilter.Validate();
 
diff --git a/Libraries/Opc.Ua.Server/NodeManager/ResourceManager.cs b/Libraries/Opc.Ua.Server/NodeManager/ResourceManager.cs
index 85439449..61ea80d4 100644
--- a/Libraries/Opc.Ua.Server/NodeManager/ResourceManager.cs
+++ b/Libraries/Opc.Ua.Server/NodeManager/ResourceManager.cs
@@ -112,7 +112,7 @@ namespace Opc.Ua.Server
                 {
                     TranslationInfo info = result.LocalizedText.TranslationInfo;
 
-                    if (info != null && info.Args != null && info.Args.Length > 0)
+                    if (info?.Args != null && info.Args.Length > 0)
                     {
                         args = info.Args;
                     }
@@ -526,7 +526,7 @@ namespace Opc.Ua.Server
                 }
             }
 
-            return String.Format("{0:X8}", statusCode.Code);
+            return $"{statusCode.Code:X8}";
         }
 
         /// <summary>
diff --git a/Libraries/Opc.Ua.Server/NodeManager/SamplingGroup.cs b/Libraries/Opc.Ua.Server/NodeManager/SamplingGroup.cs
index 1c1a18dd..4d88562c 100644
--- a/Libraries/Opc.Ua.Server/NodeManager/SamplingGroup.cs
+++ b/Libraries/Opc.Ua.Server/NodeManager/SamplingGroup.cs
@@ -430,10 +430,8 @@ namespace Opc.Ua.Server
         {  
             try
             {
-                List<ISampledDataChangeMonitoredItem> items = state as List<ISampledDataChangeMonitoredItem>;
-
                 // read values for all enabled items.
-                if (items != null && items.Count > 0)
+                if (state is List<ISampledDataChangeMonitoredItem> items && items.Count > 0)
                 {
                     ReadValueIdCollection itemsToRead = new ReadValueIdCollection(items.Count);
                     DataValueCollection values = new DataValueCollection(items.Count);
diff --git a/Libraries/Opc.Ua.Server/NodeManager/SamplingGroupManager.cs b/Libraries/Opc.Ua.Server/NodeManager/SamplingGroupManager.cs
index c30dd763..7eab6c7a 100644
--- a/Libraries/Opc.Ua.Server/NodeManager/SamplingGroupManager.cs
+++ b/Libraries/Opc.Ua.Server/NodeManager/SamplingGroupManager.cs
@@ -458,10 +458,7 @@ namespace Opc.Ua.Server
 
                 if (m_sampledItems.TryGetValue(monitoredItem, out samplingGroup))
                 {                         
-                    if (samplingGroup != null)
-                    {
-                        samplingGroup.StopMonitoring(monitoredItem);
-                    }
+                    samplingGroup?.StopMonitoring(monitoredItem);
 
                     m_sampledItems.Remove(monitoredItem);
                     return;
diff --git a/Libraries/Opc.Ua.Server/Server/ServerInternalData.cs b/Libraries/Opc.Ua.Server/Server/ServerInternalData.cs
index 34feb689..b314cc3d 100644
--- a/Libraries/Opc.Ua.Server/Server/ServerInternalData.cs
+++ b/Libraries/Opc.Ua.Server/Server/ServerInternalData.cs
@@ -535,10 +535,7 @@ namespace Opc.Ua.Server
         /// <param name="e">The event.</param>
         public void ReportEvent(IFilterTarget e)
         {
-            if (m_serverObject != null)
-            {
-                m_serverObject.ReportEvent(this.DefaultSystemContext, e);
-            }
+            m_serverObject?.ReportEvent(this.DefaultSystemContext, e);
         }
 
         /// <summary>
@@ -548,10 +545,7 @@ namespace Opc.Ua.Server
         /// <param name="e">The event.</param>
         public void ReportEvent(ISystemContext context, IFilterTarget e)
         {
-            if (m_serverObject != null)
-            {
-                m_serverObject.ReportEvent(context, e);
-            }
+            m_serverObject?.ReportEvent(context, e);
         }
 
         /// <summary>
diff --git a/Libraries/Opc.Ua.Server/Server/StandardServer.cs b/Libraries/Opc.Ua.Server/Server/StandardServer.cs
index 411573c7..d2c4349b 100644
--- a/Libraries/Opc.Ua.Server/Server/StandardServer.cs
+++ b/Libraries/Opc.Ua.Server/Server/StandardServer.cs
@@ -2499,7 +2499,7 @@ namespace Opc.Ua.Server
         {
             IList<string> preferredLocales = null;
 
-            if (context != null && context.Session != null)
+            if (context?.Session != null)
             {
                 preferredLocales = context.Session.PreferredLocales;
             }
diff --git a/Libraries/Opc.Ua.Server/Session/SessionManager.cs b/Libraries/Opc.Ua.Server/Session/SessionManager.cs
index 95a76cb6..f59a31ef 100644
--- a/Libraries/Opc.Ua.Server/Session/SessionManager.cs
+++ b/Libraries/Opc.Ua.Server/Session/SessionManager.cs
@@ -474,9 +474,7 @@ namespace Opc.Ua.Server
             }
             catch (Exception e)
             {
-                ServiceResultException sre = e as ServiceResultException;
-
-                if (sre != null && sre.StatusCode == StatusCodes.BadSessionNotActivated)
+                if (e is ServiceResultException sre && sre.StatusCode == StatusCodes.BadSessionNotActivated)
                 {
                     if (session != null)
                     {
diff --git a/Libraries/Opc.Ua.Server/Subscription/MonitoredItem.cs b/Libraries/Opc.Ua.Server/Subscription/MonitoredItem.cs
index 4c6b3809..62838dbb 100644
--- a/Libraries/Opc.Ua.Server/Subscription/MonitoredItem.cs
+++ b/Libraries/Opc.Ua.Server/Subscription/MonitoredItem.cs
@@ -1150,10 +1150,7 @@ namespace Opc.Ua.Server
 
                             StatusResult result = value as StatusResult;
 
-                            if (result != null)
-                            {
-                                result.ApplyDiagnosticMasks(context.DiagnosticsMask, context.StringTable);
-                            }
+                            result?.ApplyDiagnosticMasks(context.DiagnosticsMask, context.StringTable);
                         }
 
                         notifications.Enqueue((EventFieldList)m_events[ii]);
@@ -1608,9 +1605,9 @@ namespace Opc.Ua.Server
         protected static bool ExceedsDeadband(object value1, object value2, DeadbandType deadbandType, double deadband, double range)
         {
             // cannot convert doubles safely to decimals.
-            if (value1 is double)
+            if (value1 is double d)
             {
-                return ExceedsDeadband((double)value1, (double)value2, deadbandType, deadband, range);
+                return ExceedsDeadband(d, (double)value2, deadbandType, deadband, range);
             }
 
             try
diff --git a/Libraries/Opc.Ua.Server/Subscription/SubscriptionManager.cs b/Libraries/Opc.Ua.Server/Subscription/SubscriptionManager.cs
index dd2d3529..214d19b6 100644
--- a/Libraries/Opc.Ua.Server/Subscription/SubscriptionManager.cs
+++ b/Libraries/Opc.Ua.Server/Subscription/SubscriptionManager.cs
@@ -360,10 +360,7 @@ namespace Opc.Ua.Server
             {
                 Subscription subscription = state as Subscription;
 
-                if (subscription != null)
-                {
-                    subscription.ConditionRefresh();
-                }
+                subscription?.ConditionRefresh();
             }
             catch (Exception e)
             {
@@ -442,7 +439,7 @@ namespace Opc.Ua.Server
                     diagnostics.PublishingIntervalCount = publishingIntervalCount;
                 }
 
-                if (context != null && context.Session != null)
+                if (context?.Session != null)
                 {
                     lock (context.Session.DiagnosticsLock)
                     {
diff --git a/Stack/Opc.Ua.Bindings.Https/Stack/Https/HttpsTransportChannel.cs b/Stack/Opc.Ua.Bindings.Https/Stack/Https/HttpsTransportChannel.cs
index 1ef2f2e2..002feb94 100644
--- a/Stack/Opc.Ua.Bindings.Https/Stack/Https/HttpsTransportChannel.cs
+++ b/Stack/Opc.Ua.Bindings.Https/Stack/Https/HttpsTransportChannel.cs
@@ -153,10 +153,7 @@ namespace Opc.Ua.Bindings
         /// <inheritdoc/>
         public void Close()
         {
-            if (m_client != null)
-            {
-                m_client.Dispose();
-            }
+            m_client?.Dispose();
         }
 
         /// <summary>
diff --git a/Stack/Opc.Ua.Core/Schema/SecuredApplicationHelpers.cs b/Stack/Opc.Ua.Core/Schema/SecuredApplicationHelpers.cs
index ffb4427c..010cac3f 100644
--- a/Stack/Opc.Ua.Core/Schema/SecuredApplicationHelpers.cs
+++ b/Stack/Opc.Ua.Core/Schema/SecuredApplicationHelpers.cs
@@ -238,7 +238,7 @@ namespace Opc.Ua.Security
         {
             Opc.Ua.CertificateIdentifierCollection output = new Opc.Ua.CertificateIdentifierCollection();
 
-            if (input != null && input.Certificates != null)
+            if (input?.Certificates != null)
             {
                 for (int ii = 0; ii < input.Certificates.Count; ii++)
                 {
diff --git a/Stack/Opc.Ua.Core/Schema/UANodeSetHelpers.cs b/Stack/Opc.Ua.Core/Schema/UANodeSetHelpers.cs
index 9d0573ce..d6df50dc 100644
--- a/Stack/Opc.Ua.Core/Schema/UANodeSetHelpers.cs
+++ b/Stack/Opc.Ua.Core/Schema/UANodeSetHelpers.cs
@@ -639,8 +639,6 @@ namespace Opc.Ua.Export
 
             if (node.References != null)
             {
-                BaseInstanceState instance = importedNode as BaseInstanceState;
-                BaseTypeState type = importedNode as BaseTypeState;
 
                 for (int ii = 0; ii < node.References.Length; ii++)
                 {
@@ -648,7 +646,7 @@ namespace Opc.Ua.Export
                     bool isInverse = !node.References[ii].IsForward;
                     Opc.Ua.ExpandedNodeId targetId = ImportExpandedNodeId(node.References[ii].Value, context.NamespaceUris, context.ServerUris);
 
-                    if (instance != null)
+                    if (importedNode is BaseInstanceState instance)
                     {
                         if (referenceTypeId == ReferenceTypeIds.HasModellingRule && !isInverse)
                         {
@@ -663,7 +661,7 @@ namespace Opc.Ua.Export
                         }
                     }
 
-                    if (type != null)
+                    if (importedNode is BaseTypeState type)
                     {
                         if (referenceTypeId == ReferenceTypeIds.HasSubtype && isInverse)
                         {
@@ -898,9 +896,7 @@ namespace Opc.Ua.Export
                 case DataTypeModifier.OptionSet: { definition.IsOptionSet = true; break; }
             }
 
-            StructureDefinition structureDefinition = source.Body as StructureDefinition;
-
-            if (structureDefinition != null)
+            if (source.Body is StructureDefinition structureDefinition)
             {
                 if (structureDefinition.StructureType == StructureType.Union)
                 {
@@ -939,9 +935,7 @@ namespace Opc.Ua.Export
                 }
             }
 
-            EnumDefinition enumDefinition = source.Body as EnumDefinition;
-
-            if (enumDefinition != null)
+            if (source.Body is EnumDefinition enumDefinition)
             {
                 if (enumDefinition.Fields != null)
                 {
diff --git a/Stack/Opc.Ua.Core/Security/Certificates/DirectoryCertificateStore.cs b/Stack/Opc.Ua.Core/Security/Certificates/DirectoryCertificateStore.cs
index 2c2ca6e7..9843efa8 100644
--- a/Stack/Opc.Ua.Core/Security/Certificates/DirectoryCertificateStore.cs
+++ b/Stack/Opc.Ua.Core/Security/Certificates/DirectoryCertificateStore.cs
@@ -583,17 +583,11 @@ namespace Opc.Ua
                 DateTime now = DateTime.UtcNow;
 
                 // refresh the directories.
-                if (m_certificateSubdir != null)
-                {
-                    m_certificateSubdir.Refresh();
-                }
+                m_certificateSubdir?.Refresh();
 
                 if (!NoPrivateKeys)
                 {
-                    if (m_privateKeySubdir != null)
-                    {
-                        m_privateKeySubdir.Refresh();
-                    }
+                    m_privateKeySubdir?.Refresh();
                 }
 
                 // check if store exists.
diff --git a/Stack/Opc.Ua.Core/Stack/Bindings/TransportBindingsBase.cs b/Stack/Opc.Ua.Core/Stack/Bindings/TransportBindingsBase.cs
index 8c110c98..25b00764 100644
--- a/Stack/Opc.Ua.Core/Stack/Bindings/TransportBindingsBase.cs
+++ b/Stack/Opc.Ua.Core/Stack/Bindings/TransportBindingsBase.cs
@@ -97,8 +97,7 @@ namespace Opc.Ua.Bindings
             var result = new List<Type>();
             foreach (Type bindingType in bindings)
             {
-                var binding = Activator.CreateInstance(bindingType) as T;
-                if (binding != null)
+                if (Activator.CreateInstance(bindingType) is T binding)
                 {
                     Bindings[binding.UriScheme] = binding;
                     result.Add(bindingType);
@@ -160,7 +159,7 @@ namespace Opc.Ua.Bindings
                 if (assembly != null)
                 {
                     var listeners = AddBindings(assembly);
-                    return listeners.Count() > 0;
+                    return listeners.Any();
                 }
             }
             else
diff --git a/Stack/Opc.Ua.Core/Stack/Client/DiscoveryClient.cs b/Stack/Opc.Ua.Core/Stack/Client/DiscoveryClient.cs
index 9f2d033c..14fd61f1 100644
--- a/Stack/Opc.Ua.Core/Stack/Client/DiscoveryClient.cs
+++ b/Stack/Opc.Ua.Core/Stack/Client/DiscoveryClient.cs
@@ -129,8 +129,7 @@ namespace Opc.Ua
 
             try
             {
-                if (applicationConfiguration != null &&
-                    applicationConfiguration.SecurityConfiguration != null &&
+                if (applicationConfiguration?.SecurityConfiguration != null &&
                     applicationConfiguration.SecurityConfiguration.ApplicationCertificate != null)
                 {
                     clientCertificate = applicationConfiguration.SecurityConfiguration.ApplicationCertificate.Find(true).Result;
diff --git a/Stack/Opc.Ua.Core/Stack/Client/UaChannelBase.cs b/Stack/Opc.Ua.Core/Stack/Client/UaChannelBase.cs
index 3b9bf251..c893c9ff 100644
--- a/Stack/Opc.Ua.Core/Stack/Client/UaChannelBase.cs
+++ b/Stack/Opc.Ua.Core/Stack/Client/UaChannelBase.cs
@@ -95,9 +95,7 @@ namespace Opc.Ua
         /// </summary>
         public void OpenChannel()
         {
-            ICommunicationObject channel = m_channel as ICommunicationObject;
-
-            if (channel != null && channel.State == CommunicationState.Closed)
+            if (m_channel is ICommunicationObject channel && channel.State == CommunicationState.Closed)
             {
                 channel.Open();
             }
@@ -108,9 +106,7 @@ namespace Opc.Ua
         /// </summary>
         public void CloseChannel()
         {
-            ICommunicationObject channel = m_channel as ICommunicationObject;
-
-            if (channel != null && channel.State == CommunicationState.Opened)
+            if (m_channel is ICommunicationObject channel && channel.State == CommunicationState.Opened)
             {
                 channel.Abort();
             }
@@ -972,10 +968,7 @@ namespace Opc.Ua
                 {
                     communicationObject = channel as ICommunicationObject;
 
-                    if (communicationObject != null)
-                    {
-                        communicationObject.Close();
-                    }
+                    communicationObject?.Close();
                 }
                 catch
                 {
diff --git a/Stack/Opc.Ua.Core/Stack/Client/UserIdentity.cs b/Stack/Opc.Ua.Core/Stack/Client/UserIdentity.cs
index 4225e53c..797ca39b 100644
--- a/Stack/Opc.Ua.Core/Stack/Client/UserIdentity.cs
+++ b/Stack/Opc.Ua.Core/Stack/Client/UserIdentity.cs
@@ -160,8 +160,7 @@ namespace Opc.Ua
             m_grantedRoleIds = new NodeIdCollection();
             m_token = token;
 
-            UserNameIdentityToken usernameToken = token as UserNameIdentityToken;
-            if (usernameToken != null)
+            if (token is UserNameIdentityToken usernameToken)
             {
                 m_tokenType = UserTokenType.UserName;
                 m_issuedTokenType = null;
@@ -169,8 +168,7 @@ namespace Opc.Ua
                 return;
             }
 
-            X509IdentityToken x509Token = token as X509IdentityToken;
-            if (x509Token != null)
+            if (token is X509IdentityToken x509Token)
             {
                 m_tokenType = UserTokenType.Certificate;
                 m_issuedTokenType = null;
@@ -186,8 +184,7 @@ namespace Opc.Ua
                 return;
             }
 
-            IssuedIdentityToken issuedToken = token as IssuedIdentityToken;
-            if (issuedToken != null)
+            if (token is IssuedIdentityToken issuedToken)
             {
                 if (issuedToken.IssuedTokenType == Ua.IssuedTokenType.JWT)
                 {
@@ -207,8 +204,7 @@ namespace Opc.Ua
                 }
             }
 
-            AnonymousIdentityToken anonymousToken = token as AnonymousIdentityToken;
-            if (anonymousToken != null)
+            if (token is AnonymousIdentityToken anonymousToken)
             {
                 m_tokenType = UserTokenType.Anonymous;
                 m_issuedTokenType = null;
diff --git a/Stack/Opc.Ua.Core/Stack/Generated/Opc.Ua.Classes.cs b/Stack/Opc.Ua.Core/Stack/Generated/Opc.Ua.Classes.cs
index 68b311a5..001156b7 100644
--- a/Stack/Opc.Ua.Core/Stack/Generated/Opc.Ua.Classes.cs
+++ b/Stack/Opc.Ua.Core/Stack/Generated/Opc.Ua.Classes.cs
@@ -86,45 +86,21 @@ namespace Opc.Ua
         {
             base.InitializeOptionalChildren(context);
 
-            if (UrisVersion != null)
-            {
-                UrisVersion.Initialize(context, UrisVersion_InitializationString);
-            }
+            UrisVersion?.Initialize(context, UrisVersion_InitializationString);
 
-            if (EstimatedReturnTime != null)
-            {
-                EstimatedReturnTime.Initialize(context, EstimatedReturnTime_InitializationString);
-            }
+            EstimatedReturnTime?.Initialize(context, EstimatedReturnTime_InitializationString);
 
-            if (LocalTime != null)
-            {
-                LocalTime.Initialize(context, LocalTime_InitializationString);
-            }
+            LocalTime?.Initialize(context, LocalTime_InitializationString);
 
-            if (Namespaces != null)
-            {
-                Namespaces.Initialize(context, Namespaces_InitializationString);
-            }
+            Namespaces?.Initialize(context, Namespaces_InitializationString);
 
-            if (GetMonitoredItems != null)
-            {
-                GetMonitoredItems.Initialize(context, GetMonitoredItems_InitializationString);
-            }
+            GetMonitoredItems?.Initialize(context, GetMonitoredItems_InitializationString);
 
-            if (ResendData != null)
-            {
-                ResendData.Initialize(context, ResendData_InitializationString);
-            }
+            ResendData?.Initialize(context, ResendData_InitializationString);
 
-            if (SetSubscriptionDurable != null)
-            {
-                SetSubscriptionDurable.Initialize(context, SetSubscriptionDurable_InitializationString);
-            }
+            SetSubscriptionDurable?.Initialize(context, SetSubscriptionDurable_InitializationString);
 
-            if (RequestServerStateChange != null)
-            {
-                RequestServerStateChange.Initialize(context, RequestServerStateChange_InitializationString);
-            }
+            RequestServerStateChange?.Initialize(context, RequestServerStateChange_InitializationString);
         }
 
         #region Initialization String
@@ -1134,30 +1110,15 @@ namespace Opc.Ua
         {
             base.InitializeOptionalChildren(context);
 
-            if (MaxArrayLength != null)
-            {
-                MaxArrayLength.Initialize(context, MaxArrayLength_InitializationString);
-            }
+            MaxArrayLength?.Initialize(context, MaxArrayLength_InitializationString);
 
-            if (MaxStringLength != null)
-            {
-                MaxStringLength.Initialize(context, MaxStringLength_InitializationString);
-            }
+            MaxStringLength?.Initialize(context, MaxStringLength_InitializationString);
 
-            if (MaxByteStringLength != null)
-            {
-                MaxByteStringLength.Initialize(context, MaxByteStringLength_InitializationString);
-            }
+            MaxByteStringLength?.Initialize(context, MaxByteStringLength_InitializationString);
 
-            if (OperationLimits != null)
-            {
-                OperationLimits.Initialize(context, OperationLimits_InitializationString);
-            }
+            OperationLimits?.Initialize(context, OperationLimits_InitializationString);
 
-            if (RoleSet != null)
-            {
-                RoleSet.Initialize(context, RoleSet_InitializationString);
-            }
+            RoleSet?.Initialize(context, RoleSet_InitializationString);
         }
 
         #region Initialization String
@@ -1959,10 +1920,7 @@ namespace Opc.Ua
         {
             base.InitializeOptionalChildren(context);
 
-            if (SamplingIntervalDiagnosticsArray != null)
-            {
-                SamplingIntervalDiagnosticsArray.Initialize(context, SamplingIntervalDiagnosticsArray_InitializationString);
-            }
+            SamplingIntervalDiagnosticsArray?.Initialize(context, SamplingIntervalDiagnosticsArray_InitializationString);
         }
 
         #region Initialization String
@@ -3583,65 +3541,29 @@ namespace Opc.Ua
         {
             base.InitializeOptionalChildren(context);
 
-            if (MaxNodesPerRead != null)
-            {
-                MaxNodesPerRead.Initialize(context, MaxNodesPerRead_InitializationString);
-            }
+            MaxNodesPerRead?.Initialize(context, MaxNodesPerRead_InitializationString);
 
-            if (MaxNodesPerHistoryReadData != null)
-            {
-                MaxNodesPerHistoryReadData.Initialize(context, MaxNodesPerHistoryReadData_InitializationString);
-            }
+            MaxNodesPerHistoryReadData?.Initialize(context, MaxNodesPerHistoryReadData_InitializationString);
 
-            if (MaxNodesPerHistoryReadEvents != null)
-            {
-                MaxNodesPerHistoryReadEvents.Initialize(context, MaxNodesPerHistoryReadEvents_InitializationString);
-            }
+            MaxNodesPerHistoryReadEvents?.Initialize(context, MaxNodesPerHistoryReadEvents_InitializationString);
 
-            if (MaxNodesPerWrite != null)
-            {
-                MaxNodesPerWrite.Initialize(context, MaxNodesPerWrite_InitializationString);
-            }
+            MaxNodesPerWrite?.Initialize(context, MaxNodesPerWrite_InitializationString);
 
-            if (MaxNodesPerHistoryUpdateData != null)
-            {
-                MaxNodesPerHistoryUpdateData.Initialize(context, MaxNodesPerHistoryUpdateData_InitializationString);
-            }
+            MaxNodesPerHistoryUpdateData?.Initialize(context, MaxNodesPerHistoryUpdateData_InitializationString);
 
-            if (MaxNodesPerHistoryUpdateEvents != null)
-            {
-                MaxNodesPerHistoryUpdateEvents.Initialize(context, MaxNodesPerHistoryUpdateEvents_InitializationString);
-            }
+            MaxNodesPerHistoryUpdateEvents?.Initialize(context, MaxNodesPerHistoryUpdateEvents_InitializationString);
 
-            if (MaxNodesPerMethodCall != null)
-            {
-                MaxNodesPerMethodCall.Initialize(context, MaxNodesPerMethodCall_InitializationString);
-            }
+            MaxNodesPerMethodCall?.Initialize(context, MaxNodesPerMethodCall_InitializationString);
 
-            if (MaxNodesPerBrowse != null)
-            {
-                MaxNodesPerBrowse.Initialize(context, MaxNodesPerBrowse_InitializationString);
-            }
+            MaxNodesPerBrowse?.Initialize(context, MaxNodesPerBrowse_InitializationString);
 
-            if (MaxNodesPerRegisterNodes != null)
-            {
-                MaxNodesPerRegisterNodes.Initialize(context, MaxNodesPerRegisterNodes_InitializationString);
-            }
+            MaxNodesPerRegisterNodes?.Initialize(context, MaxNodesPerRegisterNodes_InitializationString);
 
-            if (MaxNodesPerTranslateBrowsePathsToNodeIds != null)
-            {
-                MaxNodesPerTranslateBrowsePathsToNodeIds.Initialize(context, MaxNodesPerTranslateBrowsePathsToNodeIds_InitializationString);
-            }
+            MaxNodesPerTranslateBrowsePathsToNodeIds?.Initialize(context, MaxNodesPerTranslateBrowsePathsToNodeIds_InitializationString);
 
-            if (MaxNodesPerNodeManagement != null)
-            {
-                MaxNodesPerNodeManagement.Initialize(context, MaxNodesPerNodeManagement_InitializationString);
-            }
+            MaxNodesPerNodeManagement?.Initialize(context, MaxNodesPerNodeManagement_InitializationString);
 
-            if (MaxMonitoredItemsPerCall != null)
-            {
-                MaxMonitoredItemsPerCall.Initialize(context, MaxMonitoredItemsPerCall_InitializationString);
-            }
+            MaxMonitoredItemsPerCall?.Initialize(context, MaxMonitoredItemsPerCall_InitializationString);
         }
 
         #region Initialization String
@@ -4365,10 +4287,7 @@ namespace Opc.Ua
         {
             base.InitializeOptionalChildren(context);
 
-            if (MimeType != null)
-            {
-                MimeType.Initialize(context, MimeType_InitializationString);
-            }
+            MimeType?.Initialize(context, MimeType_InitializationString);
         }
 
         #region Initialization String
@@ -5013,10 +4932,7 @@ namespace Opc.Ua
         {
             base.InitializeOptionalChildren(context);
 
-            if (ExportNamespace != null)
-            {
-                ExportNamespace.Initialize(context, ExportNamespace_InitializationString);
-            }
+            ExportNamespace?.Initialize(context, ExportNamespace_InitializationString);
         }
 
         #region Initialization String
@@ -5202,25 +5118,13 @@ namespace Opc.Ua
         {
             base.InitializeOptionalChildren(context);
 
-            if (NamespaceFile != null)
-            {
-                NamespaceFile.Initialize(context, NamespaceFile_InitializationString);
-            }
+            NamespaceFile?.Initialize(context, NamespaceFile_InitializationString);
 
-            if (DefaultRolePermissions != null)
-            {
-                DefaultRolePermissions.Initialize(context, DefaultRolePermissions_InitializationString);
-            }
+            DefaultRolePermissions?.Initialize(context, DefaultRolePermissions_InitializationString);
 
-            if (DefaultUserRolePermissions != null)
-            {
-                DefaultUserRolePermissions.Initialize(context, DefaultUserRolePermissions_InitializationString);
-            }
+            DefaultUserRolePermissions?.Initialize(context, DefaultUserRolePermissions_InitializationString);
 
-            if (DefaultAccessRestrictions != null)
-            {
-                DefaultAccessRestrictions.Initialize(context, DefaultAccessRestrictions_InitializationString);
-            }
+            DefaultAccessRestrictions?.Initialize(context, DefaultAccessRestrictions_InitializationString);
         }
 
         #region Initialization String
@@ -5985,10 +5889,7 @@ namespace Opc.Ua
         {
             base.InitializeOptionalChildren(context);
 
-            if (LocalTime != null)
-            {
-                LocalTime.Initialize(context, LocalTime_InitializationString);
-            }
+            LocalTime?.Initialize(context, LocalTime_InitializationString);
         }
 
         #region Initialization String
@@ -6874,10 +6775,7 @@ namespace Opc.Ua
         {
             base.InitializeOptionalChildren(context);
 
-            if (StatusCodeId != null)
-            {
-                StatusCodeId.Initialize(context, StatusCodeId_InitializationString);
-            }
+            StatusCodeId?.Initialize(context, StatusCodeId_InitializationString);
         }
 
         #region Initialization String
@@ -24489,10 +24387,7 @@ namespace Opc.Ua
         {
             base.InitializeOptionalChildren(context);
 
-            if (BitMask != null)
-            {
-                BitMask.Initialize(context, BitMask_InitializationString);
-            }
+            BitMask?.Initialize(context, BitMask_InitializationString);
         }
 
         #region Initialization String
@@ -24776,15 +24671,9 @@ namespace Opc.Ua
         {
             base.InitializeOptionalChildren(context);
 
-            if (SelectionDescriptions != null)
-            {
-                SelectionDescriptions.Initialize(context, SelectionDescriptions_InitializationString);
-            }
+            SelectionDescriptions?.Initialize(context, SelectionDescriptions_InitializationString);
 
-            if (RestrictToList != null)
-            {
-                RestrictToList.Initialize(context, RestrictToList_InitializationString);
-            }
+            RestrictToList?.Initialize(context, RestrictToList_InitializationString);
         }
 
         #region Initialization String
@@ -25119,20 +25008,11 @@ namespace Opc.Ua
         {
             base.InitializeOptionalChildren(context);
 
-            if (ListId != null)
-            {
-                ListId.Initialize(context, ListId_InitializationString);
-            }
+            ListId?.Initialize(context, ListId_InitializationString);
 
-            if (AgencyId != null)
-            {
-                AgencyId.Initialize(context, AgencyId_InitializationString);
-            }
+            AgencyId?.Initialize(context, AgencyId_InitializationString);
 
-            if (VersionId != null)
-            {
-                VersionId.Initialize(context, VersionId_InitializationString);
-            }
+            VersionId?.Initialize(context, VersionId_InitializationString);
         }
 
         #region Initialization String
@@ -25880,10 +25760,7 @@ namespace Opc.Ua
         {
             base.InitializeOptionalChildren(context);
 
-            if (LastTransition != null)
-            {
-                LastTransition.Initialize(context, LastTransition_InitializationString);
-            }
+            LastTransition?.Initialize(context, LastTransition_InitializationString);
         }
 
         #region Initialization String
@@ -26109,20 +25986,11 @@ namespace Opc.Ua
         {
             base.InitializeOptionalChildren(context);
 
-            if (Name != null)
-            {
-                Name.Initialize(context, Name_InitializationString);
-            }
+            Name?.Initialize(context, Name_InitializationString);
 
-            if (Number != null)
-            {
-                Number.Initialize(context, Number_InitializationString);
-            }
+            Number?.Initialize(context, Number_InitializationString);
 
-            if (EffectiveDisplayName != null)
-            {
-                EffectiveDisplayName.Initialize(context, EffectiveDisplayName_InitializationString);
-            }
+            EffectiveDisplayName?.Initialize(context, EffectiveDisplayName_InitializationString);
         }
 
         #region Initialization String
@@ -26446,25 +26314,13 @@ namespace Opc.Ua
         {
             base.InitializeOptionalChildren(context);
 
-            if (Name != null)
-            {
-                Name.Initialize(context, Name_InitializationString);
-            }
+            Name?.Initialize(context, Name_InitializationString);
 
-            if (Number != null)
-            {
-                Number.Initialize(context, Number_InitializationString);
-            }
+            Number?.Initialize(context, Number_InitializationString);
 
-            if (TransitionTime != null)
-            {
-                TransitionTime.Initialize(context, TransitionTime_InitializationString);
-            }
+            TransitionTime?.Initialize(context, TransitionTime_InitializationString);
 
-            if (EffectiveTransitionTime != null)
-            {
-                EffectiveTransitionTime.Initialize(context, EffectiveTransitionTime_InitializationString);
-            }
+            EffectiveTransitionTime?.Initialize(context, EffectiveTransitionTime_InitializationString);
         }
 
         #region Initialization String
@@ -26823,20 +26679,11 @@ namespace Opc.Ua
         {
             base.InitializeOptionalChildren(context);
 
-            if (LastTransition != null)
-            {
-                LastTransition.Initialize(context, LastTransition_InitializationString);
-            }
+            LastTransition?.Initialize(context, LastTransition_InitializationString);
 
-            if (AvailableStates != null)
-            {
-                AvailableStates.Initialize(context, AvailableStates_InitializationString);
-            }
+            AvailableStates?.Initialize(context, AvailableStates_InitializationString);
 
-            if (AvailableTransitions != null)
-            {
-                AvailableTransitions.Initialize(context, AvailableTransitions_InitializationString);
-            }
+            AvailableTransitions?.Initialize(context, AvailableTransitions_InitializationString);
         }
 
         #region Initialization String
@@ -28662,10 +28509,7 @@ namespace Opc.Ua
         {
             base.InitializeOptionalChildren(context);
 
-            if (VectorUnit != null)
-            {
-                VectorUnit.Initialize(context, VectorUnit_InitializationString);
-            }
+            VectorUnit?.Initialize(context, VectorUnit_InitializationString);
         }
 
         #region Initialization String
@@ -29354,10 +29198,7 @@ namespace Opc.Ua
         {
             base.InitializeOptionalChildren(context);
 
-            if (LengthUnit != null)
-            {
-                LengthUnit.Initialize(context, LengthUnit_InitializationString);
-            }
+            LengthUnit?.Initialize(context, LengthUnit_InitializationString);
         }
 
         #region Initialization String
@@ -30046,10 +29887,7 @@ namespace Opc.Ua
         {
             base.InitializeOptionalChildren(context);
 
-            if (AngleUnit != null)
-            {
-                AngleUnit.Initialize(context, AngleUnit_InitializationString);
-            }
+            AngleUnit?.Initialize(context, AngleUnit_InitializationString);
         }
 
         #region Initialization String
@@ -30738,20 +30576,11 @@ namespace Opc.Ua
         {
             base.InitializeOptionalChildren(context);
 
-            if (Constant != null)
-            {
-                Constant.Initialize(context, Constant_InitializationString);
-            }
+            Constant?.Initialize(context, Constant_InitializationString);
 
-            if (BaseFrame != null)
-            {
-                BaseFrame.Initialize(context, BaseFrame_InitializationString);
-            }
+            BaseFrame?.Initialize(context, BaseFrame_InitializationString);
 
-            if (FixedBase != null)
-            {
-                FixedBase.Initialize(context, FixedBase_InitializationString);
-            }
+            FixedBase?.Initialize(context, FixedBase_InitializationString);
         }
 
         #region Initialization String
@@ -35028,55 +34857,25 @@ namespace Opc.Ua
         {
             base.InitializeOptionalChildren(context);
 
-            if (Applications != null)
-            {
-                Applications.Initialize(context, Applications_InitializationString);
-            }
+            Applications?.Initialize(context, Applications_InitializationString);
 
-            if (ApplicationsExclude != null)
-            {
-                ApplicationsExclude.Initialize(context, ApplicationsExclude_InitializationString);
-            }
+            ApplicationsExclude?.Initialize(context, ApplicationsExclude_InitializationString);
 
-            if (Endpoints != null)
-            {
-                Endpoints.Initialize(context, Endpoints_InitializationString);
-            }
+            Endpoints?.Initialize(context, Endpoints_InitializationString);
 
-            if (EndpointsExclude != null)
-            {
-                EndpointsExclude.Initialize(context, EndpointsExclude_InitializationString);
-            }
+            EndpointsExclude?.Initialize(context, EndpointsExclude_InitializationString);
 
-            if (AddIdentity != null)
-            {
-                AddIdentity.Initialize(context, AddIdentity_InitializationString);
-            }
+            AddIdentity?.Initialize(context, AddIdentity_InitializationString);
 
-            if (RemoveIdentity != null)
-            {
-                RemoveIdentity.Initialize(context, RemoveIdentity_InitializationString);
-            }
+            RemoveIdentity?.Initialize(context, RemoveIdentity_InitializationString);
 
-            if (AddApplication != null)
-            {
-                AddApplication.Initialize(context, AddApplication_InitializationString);
-            }
+            AddApplication?.Initialize(context, AddApplication_InitializationString);
 
-            if (RemoveApplication != null)
-            {
-                RemoveApplication.Initialize(context, RemoveApplication_InitializationString);
-            }
+            RemoveApplication?.Initialize(context, RemoveApplication_InitializationString);
 
-            if (AddEndpoint != null)
-            {
-                AddEndpoint.Initialize(context, AddEndpoint_InitializationString);
-            }
+            AddEndpoint?.Initialize(context, AddEndpoint_InitializationString);
 
-            if (RemoveEndpoint != null)
-            {
-                RemoveEndpoint.Initialize(context, RemoveEndpoint_InitializationString);
-            }
+            RemoveEndpoint?.Initialize(context, RemoveEndpoint_InitializationString);
         }
 
         #region Initialization String
@@ -37033,10 +36832,7 @@ namespace Opc.Ua
         {
             base.InitializeOptionalChildren(context);
 
-            if (NodeVersion != null)
-            {
-                NodeVersion.Initialize(context, NodeVersion_InitializationString);
-            }
+            NodeVersion?.Initialize(context, NodeVersion_InitializationString);
         }
 
         #region Initialization String
@@ -37214,15 +37010,9 @@ namespace Opc.Ua
         {
             base.InitializeOptionalChildren(context);
 
-            if (Definition != null)
-            {
-                Definition.Initialize(context, Definition_InitializationString);
-            }
+            Definition?.Initialize(context, Definition_InitializationString);
 
-            if (ValuePrecision != null)
-            {
-                ValuePrecision.Initialize(context, ValuePrecision_InitializationString);
-            }
+            ValuePrecision?.Initialize(context, ValuePrecision_InitializationString);
         }
 
         #region Initialization String
@@ -37508,20 +37298,11 @@ namespace Opc.Ua
         {
             base.InitializeOptionalChildren(context);
 
-            if (InstrumentRange != null)
-            {
-                InstrumentRange.Initialize(context, InstrumentRange_InitializationString);
-            }
+            InstrumentRange?.Initialize(context, InstrumentRange_InitializationString);
 
-            if (EURange != null)
-            {
-                EURange.Initialize(context, EURange_InitializationString);
-            }
+            EURange?.Initialize(context, EURange_InitializationString);
 
-            if (EngineeringUnits != null)
-            {
-                EngineeringUnits.Initialize(context, EngineeringUnits_InitializationString);
-            }
+            EngineeringUnits?.Initialize(context, EngineeringUnits_InitializationString);
         }
 
         #region Initialization String
@@ -39093,10 +38874,7 @@ namespace Opc.Ua
         {
             base.InitializeOptionalChildren(context);
 
-            if (InstrumentRange != null)
-            {
-                InstrumentRange.Initialize(context, InstrumentRange_InitializationString);
-            }
+            InstrumentRange?.Initialize(context, InstrumentRange_InitializationString);
         }
 
         #region Initialization String
@@ -40773,25 +40551,13 @@ namespace Opc.Ua
         {
             base.InitializeOptionalChildren(context);
 
-            if (TransitionTime != null)
-            {
-                TransitionTime.Initialize(context, TransitionTime_InitializationString);
-            }
+            TransitionTime?.Initialize(context, TransitionTime_InitializationString);
 
-            if (EffectiveTransitionTime != null)
-            {
-                EffectiveTransitionTime.Initialize(context, EffectiveTransitionTime_InitializationString);
-            }
+            EffectiveTransitionTime?.Initialize(context, EffectiveTransitionTime_InitializationString);
 
-            if (TrueState != null)
-            {
-                TrueState.Initialize(context, TrueState_InitializationString);
-            }
+            TrueState?.Initialize(context, TrueState_InitializationString);
 
-            if (FalseState != null)
-            {
-                FalseState.Initialize(context, FalseState_InitializationString);
-            }
+            FalseState?.Initialize(context, FalseState_InitializationString);
         }
 
         #region Initialization String
@@ -41363,15 +41129,9 @@ namespace Opc.Ua
         {
             base.InitializeOptionalChildren(context);
 
-            if (ConditionSubClassId != null)
-            {
-                ConditionSubClassId.Initialize(context, ConditionSubClassId_InitializationString);
-            }
+            ConditionSubClassId?.Initialize(context, ConditionSubClassId_InitializationString);
 
-            if (ConditionSubClassName != null)
-            {
-                ConditionSubClassName.Initialize(context, ConditionSubClassName_InitializationString);
-            }
+            ConditionSubClassName?.Initialize(context, ConditionSubClassName_InitializationString);
         }
 
         #region Initialization String
@@ -43191,15 +42951,9 @@ namespace Opc.Ua
         {
             base.InitializeOptionalChildren(context);
 
-            if (ConfirmedState != null)
-            {
-                ConfirmedState.Initialize(context, ConfirmedState_InitializationString);
-            }
+            ConfirmedState?.Initialize(context, ConfirmedState_InitializationString);
 
-            if (Confirm != null)
-            {
-                Confirm.Initialize(context, Confirm_InitializationString);
-            }
+            Confirm?.Initialize(context, Confirm_InitializationString);
         }
 
         #region Initialization String
@@ -43555,105 +43309,45 @@ namespace Opc.Ua
         {
             base.InitializeOptionalChildren(context);
 
-            if (SuppressedState != null)
-            {
-                SuppressedState.Initialize(context, SuppressedState_InitializationString);
-            }
+            SuppressedState?.Initialize(context, SuppressedState_InitializationString);
 
-            if (OutOfServiceState != null)
-            {
-                OutOfServiceState.Initialize(context, OutOfServiceState_InitializationString);
-            }
+            OutOfServiceState?.Initialize(context, OutOfServiceState_InitializationString);
 
-            if (ShelvingState != null)
-            {
-                ShelvingState.Initialize(context, ShelvingState_InitializationString);
-            }
+            ShelvingState?.Initialize(context, ShelvingState_InitializationString);
 
-            if (MaxTimeShelved != null)
-            {
-                MaxTimeShelved.Initialize(context, MaxTimeShelved_InitializationString);
-            }
+            MaxTimeShelved?.Initialize(context, MaxTimeShelved_InitializationString);
 
-            if (AudibleEnabled != null)
-            {
-                AudibleEnabled.Initialize(context, AudibleEnabled_InitializationString);
-            }
+            AudibleEnabled?.Initialize(context, AudibleEnabled_InitializationString);
 
-            if (AudibleSound != null)
-            {
-                AudibleSound.Initialize(context, AudibleSound_InitializationString);
-            }
+            AudibleSound?.Initialize(context, AudibleSound_InitializationString);
 
-            if (SilenceState != null)
-            {
-                SilenceState.Initialize(context, SilenceState_InitializationString);
-            }
+            SilenceState?.Initialize(context, SilenceState_InitializationString);
 
-            if (OnDelay != null)
-            {
-                OnDelay.Initialize(context, OnDelay_InitializationString);
-            }
+            OnDelay?.Initialize(context, OnDelay_InitializationString);
 
-            if (OffDelay != null)
-            {
-                OffDelay.Initialize(context, OffDelay_InitializationString);
-            }
+            OffDelay?.Initialize(context, OffDelay_InitializationString);
 
-            if (FirstInGroupFlag != null)
-            {
-                FirstInGroupFlag.Initialize(context, FirstInGroupFlag_InitializationString);
-            }
+            FirstInGroupFlag?.Initialize(context, FirstInGroupFlag_InitializationString);
 
-            if (FirstInGroup != null)
-            {
-                FirstInGroup.Initialize(context, FirstInGroup_InitializationString);
-            }
+            FirstInGroup?.Initialize(context, FirstInGroup_InitializationString);
 
-            if (LatchedState != null)
-            {
-                LatchedState.Initialize(context, LatchedState_InitializationString);
-            }
+            LatchedState?.Initialize(context, LatchedState_InitializationString);
 
-            if (ReAlarmTime != null)
-            {
-                ReAlarmTime.Initialize(context, ReAlarmTime_InitializationString);
-            }
+            ReAlarmTime?.Initialize(context, ReAlarmTime_InitializationString);
 
-            if (ReAlarmRepeatCount != null)
-            {
-                ReAlarmRepeatCount.Initialize(context, ReAlarmRepeatCount_InitializationString);
-            }
+            ReAlarmRepeatCount?.Initialize(context, ReAlarmRepeatCount_InitializationString);
 
-            if (Silence != null)
-            {
-                Silence.Initialize(context, Silence_InitializationString);
-            }
+            Silence?.Initialize(context, Silence_InitializationString);
 
-            if (Suppress != null)
-            {
-                Suppress.Initialize(context, Suppress_InitializationString);
-            }
+            Suppress?.Initialize(context, Suppress_InitializationString);
 
-            if (Unsuppress != null)
-            {
-                Unsuppress.Initialize(context, Unsuppress_InitializationString);
-            }
+            Unsuppress?.Initialize(context, Unsuppress_InitializationString);
 
-            if (RemoveFromService != null)
-            {
-                RemoveFromService.Initialize(context, RemoveFromService_InitializationString);
-            }
+            RemoveFromService?.Initialize(context, RemoveFromService_InitializationString);
 
-            if (PlaceInService != null)
-            {
-                PlaceInService.Initialize(context, PlaceInService_InitializationString);
-            }
+            PlaceInService?.Initialize(context, PlaceInService_InitializationString);
 
-            if (Reset != null)
-            {
-                Reset.Initialize(context, Reset_InitializationString);
-            }
+            Reset?.Initialize(context, Reset_InitializationString);
         }
 
         #region Initialization String
@@ -45502,45 +45196,21 @@ namespace Opc.Ua
         {
             base.InitializeOptionalChildren(context);
 
-            if (HighHighLimit != null)
-            {
-                HighHighLimit.Initialize(context, HighHighLimit_InitializationString);
-            }
+            HighHighLimit?.Initialize(context, HighHighLimit_InitializationString);
 
-            if (HighLimit != null)
-            {
-                HighLimit.Initialize(context, HighLimit_InitializationString);
-            }
+            HighLimit?.Initialize(context, HighLimit_InitializationString);
 
-            if (LowLimit != null)
-            {
-                LowLimit.Initialize(context, LowLimit_InitializationString);
-            }
+            LowLimit?.Initialize(context, LowLimit_InitializationString);
 
-            if (LowLowLimit != null)
-            {
-                LowLowLimit.Initialize(context, LowLowLimit_InitializationString);
-            }
+            LowLowLimit?.Initialize(context, LowLowLimit_InitializationString);
 
-            if (BaseHighHighLimit != null)
-            {
-                BaseHighHighLimit.Initialize(context, BaseHighHighLimit_InitializationString);
-            }
+            BaseHighHighLimit?.Initialize(context, BaseHighHighLimit_InitializationString);
 
-            if (BaseHighLimit != null)
-            {
-                BaseHighLimit.Initialize(context, BaseHighLimit_InitializationString);
-            }
+            BaseHighLimit?.Initialize(context, BaseHighLimit_InitializationString);
 
-            if (BaseLowLimit != null)
-            {
-                BaseLowLimit.Initialize(context, BaseLowLimit_InitializationString);
-            }
+            BaseLowLimit?.Initialize(context, BaseLowLimit_InitializationString);
 
-            if (BaseLowLowLimit != null)
-            {
-                BaseLowLowLimit.Initialize(context, BaseLowLowLimit_InitializationString);
-            }
+            BaseLowLowLimit?.Initialize(context, BaseLowLowLimit_InitializationString);
         }
 
         #region Initialization String
@@ -46363,25 +46033,13 @@ namespace Opc.Ua
         {
             base.InitializeOptionalChildren(context);
 
-            if (HighHighState != null)
-            {
-                HighHighState.Initialize(context, HighHighState_InitializationString);
-            }
+            HighHighState?.Initialize(context, HighHighState_InitializationString);
 
-            if (HighState != null)
-            {
-                HighState.Initialize(context, HighState_InitializationString);
-            }
+            HighState?.Initialize(context, HighState_InitializationString);
 
-            if (LowState != null)
-            {
-                LowState.Initialize(context, LowState_InitializationString);
-            }
+            LowState?.Initialize(context, LowState_InitializationString);
 
-            if (LowLowState != null)
-            {
-                LowLowState.Initialize(context, LowLowState_InitializationString);
-            }
+            LowLowState?.Initialize(context, LowLowState_InitializationString);
         }
 
         #region Initialization String
@@ -46986,10 +46644,7 @@ namespace Opc.Ua
         {
             base.InitializeOptionalChildren(context);
 
-            if (BaseSetpointNode != null)
-            {
-                BaseSetpointNode.Initialize(context, BaseSetpointNode_InitializationString);
-            }
+            BaseSetpointNode?.Initialize(context, BaseSetpointNode_InitializationString);
         }
 
         #region Initialization String
@@ -47235,10 +46890,7 @@ namespace Opc.Ua
         {
             base.InitializeOptionalChildren(context);
 
-            if (EngineeringUnits != null)
-            {
-                EngineeringUnits.Initialize(context, EngineeringUnits_InitializationString);
-            }
+            EngineeringUnits?.Initialize(context, EngineeringUnits_InitializationString);
         }
 
         #region Initialization String
@@ -47437,10 +47089,7 @@ namespace Opc.Ua
         {
             base.InitializeOptionalChildren(context);
 
-            if (BaseSetpointNode != null)
-            {
-                BaseSetpointNode.Initialize(context, BaseSetpointNode_InitializationString);
-            }
+            BaseSetpointNode?.Initialize(context, BaseSetpointNode_InitializationString);
         }
 
         #region Initialization String
@@ -47688,10 +47337,7 @@ namespace Opc.Ua
         {
             base.InitializeOptionalChildren(context);
 
-            if (EngineeringUnits != null)
-            {
-                EngineeringUnits.Initialize(context, EngineeringUnits_InitializationString);
-            }
+            EngineeringUnits?.Initialize(context, EngineeringUnits_InitializationString);
         }
 
         #region Initialization String
@@ -48629,10 +48275,7 @@ namespace Opc.Ua
         {
             base.InitializeOptionalChildren(context);
 
-            if (ExpirationLimit != null)
-            {
-                ExpirationLimit.Initialize(context, ExpirationLimit_InitializationString);
-            }
+            ExpirationLimit?.Initialize(context, ExpirationLimit_InitializationString);
         }
 
         #region Initialization String
@@ -48972,10 +48615,7 @@ namespace Opc.Ua
         {
             base.InitializeOptionalChildren(context);
 
-            if (Tolerance != null)
-            {
-                Tolerance.Initialize(context, Tolerance_InitializationString);
-            }
+            Tolerance?.Initialize(context, Tolerance_InitializationString);
         }
 
         #region Initialization String
@@ -50901,10 +50541,7 @@ namespace Opc.Ua
         {
             base.InitializeOptionalChildren(context);
 
-            if (ShelvingTime != null)
-            {
-                ShelvingTime.Initialize(context, ShelvingTime_InitializationString);
-            }
+            ShelvingTime?.Initialize(context, ShelvingTime_InitializationString);
         }
 
         #region Initialization String
@@ -52358,15 +51995,9 @@ namespace Opc.Ua
         {
             base.InitializeOptionalChildren(context);
 
-            if (ProgramDiagnostic != null)
-            {
-                ProgramDiagnostic.Initialize(context, ProgramDiagnostic_InitializationString);
-            }
+            ProgramDiagnostic?.Initialize(context, ProgramDiagnostic_InitializationString);
 
-            if (FinalResultData != null)
-            {
-                FinalResultData.Initialize(context, FinalResultData_InitializationString);
-            }
+            FinalResultData?.Initialize(context, FinalResultData_InitializationString);
         }
 
         #region Initialization String
@@ -55740,50 +55371,23 @@ namespace Opc.Ua
         {
             base.InitializeOptionalChildren(context);
 
-            if (AggregateFunctions != null)
-            {
-                AggregateFunctions.Initialize(context, AggregateFunctions_InitializationString);
-            }
+            AggregateFunctions?.Initialize(context, AggregateFunctions_InitializationString);
 
-            if (Definition != null)
-            {
-                Definition.Initialize(context, Definition_InitializationString);
-            }
+            Definition?.Initialize(context, Definition_InitializationString);
 
-            if (MaxTimeInterval != null)
-            {
-                MaxTimeInterval.Initialize(context, MaxTimeInterval_InitializationString);
-            }
+            MaxTimeInterval?.Initialize(context, MaxTimeInterval_InitializationString);
 
-            if (MinTimeInterval != null)
-            {
-                MinTimeInterval.Initialize(context, MinTimeInterval_InitializationString);
-            }
+            MinTimeInterval?.Initialize(context, MinTimeInterval_InitializationString);
 
-            if (ExceptionDeviation != null)
-            {
-                ExceptionDeviation.Initialize(context, ExceptionDeviation_InitializationString);
-            }
+            ExceptionDeviation?.Initialize(context, ExceptionDeviation_InitializationString);
 
-            if (ExceptionDeviationFormat != null)
-            {
-                ExceptionDeviationFormat.Initialize(context, ExceptionDeviationFormat_InitializationString);
-            }
+            ExceptionDeviationFormat?.Initialize(context, ExceptionDeviationFormat_InitializationString);
 
-            if (StartOfArchive != null)
-            {
-                StartOfArchive.Initialize(context, StartOfArchive_InitializationString);
-            }
+            StartOfArchive?.Initialize(context, StartOfArchive_InitializationString);
 
-            if (StartOfOnlineArchive != null)
-            {
-                StartOfOnlineArchive.Initialize(context, StartOfOnlineArchive_InitializationString);
-            }
+            StartOfOnlineArchive?.Initialize(context, StartOfOnlineArchive_InitializationString);
 
-            if (ServerTimestampSupported != null)
-            {
-                ServerTimestampSupported.Initialize(context, ServerTimestampSupported_InitializationString);
-            }
+            ServerTimestampSupported?.Initialize(context, ServerTimestampSupported_InitializationString);
         }
 
         #region Initialization String
@@ -59620,25 +59224,13 @@ namespace Opc.Ua
         {
             base.InitializeOptionalChildren(context);
 
-            if (UpdateFrequency != null)
-            {
-                UpdateFrequency.Initialize(context, UpdateFrequency_InitializationString);
-            }
+            UpdateFrequency?.Initialize(context, UpdateFrequency_InitializationString);
 
-            if (CloseAndUpdate != null)
-            {
-                CloseAndUpdate.Initialize(context, CloseAndUpdate_InitializationString);
-            }
+            CloseAndUpdate?.Initialize(context, CloseAndUpdate_InitializationString);
 
-            if (AddCertificate != null)
-            {
-                AddCertificate.Initialize(context, AddCertificate_InitializationString);
-            }
+            AddCertificate?.Initialize(context, AddCertificate_InitializationString);
 
-            if (RemoveCertificate != null)
-            {
-                RemoveCertificate.Initialize(context, RemoveCertificate_InitializationString);
-            }
+            RemoveCertificate?.Initialize(context, RemoveCertificate_InitializationString);
         }
 
         #region Initialization String
@@ -60377,15 +59969,9 @@ namespace Opc.Ua
         {
             base.InitializeOptionalChildren(context);
 
-            if (CertificateExpired != null)
-            {
-                CertificateExpired.Initialize(context, CertificateExpired_InitializationString);
-            }
+            CertificateExpired?.Initialize(context, CertificateExpired_InitializationString);
 
-            if (TrustListOutOfDate != null)
-            {
-                TrustListOutOfDate.Initialize(context, TrustListOutOfDate_InitializationString);
-            }
+            TrustListOutOfDate?.Initialize(context, TrustListOutOfDate_InitializationString);
         }
 
         #region Initialization String
@@ -60882,15 +60468,9 @@ namespace Opc.Ua
         {
             base.InitializeOptionalChildren(context);
 
-            if (DefaultHttpsGroup != null)
-            {
-                DefaultHttpsGroup.Initialize(context, DefaultHttpsGroup_InitializationString);
-            }
+            DefaultHttpsGroup?.Initialize(context, DefaultHttpsGroup_InitializationString);
 
-            if (DefaultUserTokenGroup != null)
-            {
-                DefaultUserTokenGroup.Initialize(context, DefaultUserTokenGroup_InitializationString);
-            }
+            DefaultUserTokenGroup?.Initialize(context, DefaultUserTokenGroup_InitializationString);
         }
 
         #region Initialization String
@@ -63139,10 +62719,7 @@ namespace Opc.Ua
         {
             base.InitializeOptionalChildren(context);
 
-            if (CreateCredential != null)
-            {
-                CreateCredential.Initialize(context, CreateCredential_InitializationString);
-            }
+            CreateCredential?.Initialize(context, CreateCredential_InitializationString);
         }
 
         #region Initialization String
@@ -63313,25 +62890,13 @@ namespace Opc.Ua
         {
             base.InitializeOptionalChildren(context);
 
-            if (EndpointUrls != null)
-            {
-                EndpointUrls.Initialize(context, EndpointUrls_InitializationString);
-            }
+            EndpointUrls?.Initialize(context, EndpointUrls_InitializationString);
 
-            if (ServiceStatus != null)
-            {
-                ServiceStatus.Initialize(context, ServiceStatus_InitializationString);
-            }
+            ServiceStatus?.Initialize(context, ServiceStatus_InitializationString);
 
-            if (UpdateCredential != null)
-            {
-                UpdateCredential.Initialize(context, UpdateCredential_InitializationString);
-            }
+            UpdateCredential?.Initialize(context, UpdateCredential_InitializationString);
 
-            if (DeleteCredential != null)
-            {
-                DeleteCredential.Initialize(context, DeleteCredential_InitializationString);
-            }
+            DeleteCredential?.Initialize(context, DeleteCredential_InitializationString);
         }
 
         #region Initialization String
@@ -64773,20 +64338,11 @@ namespace Opc.Ua
         {
             base.InitializeOptionalChildren(context);
 
-            if (GetSecurityKeys != null)
-            {
-                GetSecurityKeys.Initialize(context, GetSecurityKeys_InitializationString);
-            }
+            GetSecurityKeys?.Initialize(context, GetSecurityKeys_InitializationString);
 
-            if (GetSecurityGroup != null)
-            {
-                GetSecurityGroup.Initialize(context, GetSecurityGroup_InitializationString);
-            }
+            GetSecurityGroup?.Initialize(context, GetSecurityGroup_InitializationString);
 
-            if (SecurityGroups != null)
-            {
-                SecurityGroups.Initialize(context, SecurityGroups_InitializationString);
-            }
+            SecurityGroups?.Initialize(context, SecurityGroups_InitializationString);
         }
 
         #region Initialization String
@@ -66165,25 +65721,13 @@ namespace Opc.Ua
         {
             base.InitializeOptionalChildren(context);
 
-            if (SetSecurityKeys != null)
-            {
-                SetSecurityKeys.Initialize(context, SetSecurityKeys_InitializationString);
-            }
+            SetSecurityKeys?.Initialize(context, SetSecurityKeys_InitializationString);
 
-            if (AddConnection != null)
-            {
-                AddConnection.Initialize(context, AddConnection_InitializationString);
-            }
+            AddConnection?.Initialize(context, AddConnection_InitializationString);
 
-            if (RemoveConnection != null)
-            {
-                RemoveConnection.Initialize(context, RemoveConnection_InitializationString);
-            }
+            RemoveConnection?.Initialize(context, RemoveConnection_InitializationString);
 
-            if (Diagnostics != null)
-            {
-                Diagnostics.Initialize(context, Diagnostics_InitializationString);
-            }
+            Diagnostics?.Initialize(context, Diagnostics_InitializationString);
         }
 
         #region Initialization String
@@ -67113,15 +66657,9 @@ namespace Opc.Ua
         {
             base.InitializeOptionalChildren(context);
 
-            if (DataSetClassId != null)
-            {
-                DataSetClassId.Initialize(context, DataSetClassId_InitializationString);
-            }
+            DataSetClassId?.Initialize(context, DataSetClassId_InitializationString);
 
-            if (ExtensionFields != null)
-            {
-                ExtensionFields.Initialize(context, ExtensionFields_InitializationString);
-            }
+            ExtensionFields?.Initialize(context, ExtensionFields_InitializationString);
         }
 
         #region Initialization String
@@ -67886,15 +67424,9 @@ namespace Opc.Ua
         {
             base.InitializeOptionalChildren(context);
 
-            if (AddVariables != null)
-            {
-                AddVariables.Initialize(context, AddVariables_InitializationString);
-            }
+            AddVariables?.Initialize(context, AddVariables_InitializationString);
 
-            if (RemoveVariables != null)
-            {
-                RemoveVariables.Initialize(context, RemoveVariables_InitializationString);
-            }
+            RemoveVariables?.Initialize(context, RemoveVariables_InitializationString);
         }
 
         #region Initialization String
@@ -68445,10 +67977,7 @@ namespace Opc.Ua
         {
             base.InitializeOptionalChildren(context);
 
-            if (ModifyFieldSelection != null)
-            {
-                ModifyFieldSelection.Initialize(context, ModifyFieldSelection_InitializationString);
-            }
+            ModifyFieldSelection?.Initialize(context, ModifyFieldSelection_InitializationString);
         }
 
         #region Initialization String
@@ -68897,40 +68426,19 @@ namespace Opc.Ua
         {
             base.InitializeOptionalChildren(context);
 
-            if (AddPublishedDataItems != null)
-            {
-                AddPublishedDataItems.Initialize(context, AddPublishedDataItems_InitializationString);
-            }
+            AddPublishedDataItems?.Initialize(context, AddPublishedDataItems_InitializationString);
 
-            if (AddPublishedEvents != null)
-            {
-                AddPublishedEvents.Initialize(context, AddPublishedEvents_InitializationString);
-            }
+            AddPublishedEvents?.Initialize(context, AddPublishedEvents_InitializationString);
 
-            if (AddPublishedDataItemsTemplate != null)
-            {
-                AddPublishedDataItemsTemplate.Initialize(context, AddPublishedDataItemsTemplate_InitializationString);
-            }
+            AddPublishedDataItemsTemplate?.Initialize(context, AddPublishedDataItemsTemplate_InitializationString);
 
-            if (AddPublishedEventsTemplate != null)
-            {
-                AddPublishedEventsTemplate.Initialize(context, AddPublishedEventsTemplate_InitializationString);
-            }
+            AddPublishedEventsTemplate?.Initialize(context, AddPublishedEventsTemplate_InitializationString);
 
-            if (RemovePublishedDataSet != null)
-            {
-                RemovePublishedDataSet.Initialize(context, RemovePublishedDataSet_InitializationString);
-            }
+            RemovePublishedDataSet?.Initialize(context, RemovePublishedDataSet_InitializationString);
 
-            if (AddDataSetFolder != null)
-            {
-                AddDataSetFolder.Initialize(context, AddDataSetFolder_InitializationString);
-            }
+            AddDataSetFolder?.Initialize(context, AddDataSetFolder_InitializationString);
 
-            if (RemoveDataSetFolder != null)
-            {
-                RemoveDataSetFolder.Initialize(context, RemoveDataSetFolder_InitializationString);
-            }
+            RemoveDataSetFolder?.Initialize(context, RemoveDataSetFolder_InitializationString);
         }
 
         #region Initialization String
@@ -70358,30 +69866,15 @@ namespace Opc.Ua
         {
             base.InitializeOptionalChildren(context);
 
-            if (TransportSettings != null)
-            {
-                TransportSettings.Initialize(context, TransportSettings_InitializationString);
-            }
+            TransportSettings?.Initialize(context, TransportSettings_InitializationString);
 
-            if (Diagnostics != null)
-            {
-                Diagnostics.Initialize(context, Diagnostics_InitializationString);
-            }
+            Diagnostics?.Initialize(context, Diagnostics_InitializationString);
 
-            if (AddWriterGroup != null)
-            {
-                AddWriterGroup.Initialize(context, AddWriterGroup_InitializationString);
-            }
+            AddWriterGroup?.Initialize(context, AddWriterGroup_InitializationString);
 
-            if (AddReaderGroup != null)
-            {
-                AddReaderGroup.Initialize(context, AddReaderGroup_InitializationString);
-            }
+            AddReaderGroup?.Initialize(context, AddReaderGroup_InitializationString);
 
-            if (RemoveGroup != null)
-            {
-                RemoveGroup.Initialize(context, RemoveGroup_InitializationString);
-            }
+            RemoveGroup?.Initialize(context, RemoveGroup_InitializationString);
         }
 
         #region Initialization String
@@ -71502,15 +70995,9 @@ namespace Opc.Ua
         {
             base.InitializeOptionalChildren(context);
 
-            if (SecurityGroupId != null)
-            {
-                SecurityGroupId.Initialize(context, SecurityGroupId_InitializationString);
-            }
+            SecurityGroupId?.Initialize(context, SecurityGroupId_InitializationString);
 
-            if (SecurityKeyServices != null)
-            {
-                SecurityKeyServices.Initialize(context, SecurityKeyServices_InitializationString);
-            }
+            SecurityKeyServices?.Initialize(context, SecurityKeyServices_InitializationString);
         }
 
         #region Initialization String
@@ -71911,30 +71398,15 @@ namespace Opc.Ua
         {
             base.InitializeOptionalChildren(context);
 
-            if (TransportSettings != null)
-            {
-                TransportSettings.Initialize(context, TransportSettings_InitializationString);
-            }
+            TransportSettings?.Initialize(context, TransportSettings_InitializationString);
 
-            if (MessageSettings != null)
-            {
-                MessageSettings.Initialize(context, MessageSettings_InitializationString);
-            }
+            MessageSettings?.Initialize(context, MessageSettings_InitializationString);
 
-            if (Diagnostics != null)
-            {
-                Diagnostics.Initialize(context, Diagnostics_InitializationString);
-            }
+            Diagnostics?.Initialize(context, Diagnostics_InitializationString);
 
-            if (AddDataSetWriter != null)
-            {
-                AddDataSetWriter.Initialize(context, AddDataSetWriter_InitializationString);
-            }
+            AddDataSetWriter?.Initialize(context, AddDataSetWriter_InitializationString);
 
-            if (RemoveDataSetWriter != null)
-            {
-                RemoveDataSetWriter.Initialize(context, RemoveDataSetWriter_InitializationString);
-            }
+            RemoveDataSetWriter?.Initialize(context, RemoveDataSetWriter_InitializationString);
         }
 
         #region Initialization String
@@ -73075,30 +72547,15 @@ namespace Opc.Ua
         {
             base.InitializeOptionalChildren(context);
 
-            if (Diagnostics != null)
-            {
-                Diagnostics.Initialize(context, Diagnostics_InitializationString);
-            }
+            Diagnostics?.Initialize(context, Diagnostics_InitializationString);
 
-            if (TransportSettings != null)
-            {
-                TransportSettings.Initialize(context, TransportSettings_InitializationString);
-            }
+            TransportSettings?.Initialize(context, TransportSettings_InitializationString);
 
-            if (MessageSettings != null)
-            {
-                MessageSettings.Initialize(context, MessageSettings_InitializationString);
-            }
+            MessageSettings?.Initialize(context, MessageSettings_InitializationString);
 
-            if (AddDataSetReader != null)
-            {
-                AddDataSetReader.Initialize(context, AddDataSetReader_InitializationString);
-            }
+            AddDataSetReader?.Initialize(context, AddDataSetReader_InitializationString);
 
-            if (RemoveDataSetReader != null)
-            {
-                RemoveDataSetReader.Initialize(context, RemoveDataSetReader_InitializationString);
-            }
+            RemoveDataSetReader?.Initialize(context, RemoveDataSetReader_InitializationString);
         }
 
         #region Initialization String
@@ -73941,25 +73398,13 @@ namespace Opc.Ua
         {
             base.InitializeOptionalChildren(context);
 
-            if (KeyFrameCount != null)
-            {
-                KeyFrameCount.Initialize(context, KeyFrameCount_InitializationString);
-            }
+            KeyFrameCount?.Initialize(context, KeyFrameCount_InitializationString);
 
-            if (TransportSettings != null)
-            {
-                TransportSettings.Initialize(context, TransportSettings_InitializationString);
-            }
+            TransportSettings?.Initialize(context, TransportSettings_InitializationString);
 
-            if (MessageSettings != null)
-            {
-                MessageSettings.Initialize(context, MessageSettings_InitializationString);
-            }
+            MessageSettings?.Initialize(context, MessageSettings_InitializationString);
 
-            if (Diagnostics != null)
-            {
-                Diagnostics.Initialize(context, Diagnostics_InitializationString);
-            }
+            Diagnostics?.Initialize(context, Diagnostics_InitializationString);
         }
 
         #region Initialization String
@@ -74683,45 +74128,21 @@ namespace Opc.Ua
         {
             base.InitializeOptionalChildren(context);
 
-            if (SecurityMode != null)
-            {
-                SecurityMode.Initialize(context, SecurityMode_InitializationString);
-            }
+            SecurityMode?.Initialize(context, SecurityMode_InitializationString);
 
-            if (SecurityGroupId != null)
-            {
-                SecurityGroupId.Initialize(context, SecurityGroupId_InitializationString);
-            }
+            SecurityGroupId?.Initialize(context, SecurityGroupId_InitializationString);
 
-            if (SecurityKeyServices != null)
-            {
-                SecurityKeyServices.Initialize(context, SecurityKeyServices_InitializationString);
-            }
+            SecurityKeyServices?.Initialize(context, SecurityKeyServices_InitializationString);
 
-            if (TransportSettings != null)
-            {
-                TransportSettings.Initialize(context, TransportSettings_InitializationString);
-            }
+            TransportSettings?.Initialize(context, TransportSettings_InitializationString);
 
-            if (MessageSettings != null)
-            {
-                MessageSettings.Initialize(context, MessageSettings_InitializationString);
-            }
+            MessageSettings?.Initialize(context, MessageSettings_InitializationString);
 
-            if (Diagnostics != null)
-            {
-                Diagnostics.Initialize(context, Diagnostics_InitializationString);
-            }
+            Diagnostics?.Initialize(context, Diagnostics_InitializationString);
 
-            if (CreateTargetVariables != null)
-            {
-                CreateTargetVariables.Initialize(context, CreateTargetVariables_InitializationString);
-            }
+            CreateTargetVariables?.Initialize(context, CreateTargetVariables_InitializationString);
 
-            if (CreateDataSetMirror != null)
-            {
-                CreateDataSetMirror.Initialize(context, CreateDataSetMirror_InitializationString);
-            }
+            CreateDataSetMirror?.Initialize(context, CreateDataSetMirror_InitializationString);
         }
 
         #region Initialization String
@@ -76316,15 +75737,9 @@ namespace Opc.Ua
         {
             base.InitializeOptionalChildren(context);
 
-            if (AddTargetVariables != null)
-            {
-                AddTargetVariables.Initialize(context, AddTargetVariables_InitializationString);
-            }
+            AddTargetVariables?.Initialize(context, AddTargetVariables_InitializationString);
 
-            if (RemoveTargetVariables != null)
-            {
-                RemoveTargetVariables.Initialize(context, RemoveTargetVariables_InitializationString);
-            }
+            RemoveTargetVariables?.Initialize(context, RemoveTargetVariables_InitializationString);
         }
 
         #region Initialization String
@@ -76923,15 +76338,9 @@ namespace Opc.Ua
         {
             base.InitializeOptionalChildren(context);
 
-            if (Enable != null)
-            {
-                Enable.Initialize(context, Enable_InitializationString);
-            }
+            Enable?.Initialize(context, Enable_InitializationString);
 
-            if (Disable != null)
-            {
-                Disable.Initialize(context, Disable_InitializationString);
-            }
+            Disable?.Initialize(context, Disable_InitializationString);
         }
 
         #region Initialization String
@@ -77670,10 +77079,7 @@ namespace Opc.Ua
         {
             base.InitializeOptionalChildren(context);
 
-            if (TimeFirstChange != null)
-            {
-                TimeFirstChange.Initialize(context, TimeFirstChange_InitializationString);
-            }
+            TimeFirstChange?.Initialize(context, TimeFirstChange_InitializationString);
         }
 
         #region Initialization String
@@ -79332,10 +78738,7 @@ namespace Opc.Ua
         {
             base.InitializeOptionalChildren(context);
 
-            if (SamplingOffset != null)
-            {
-                SamplingOffset.Initialize(context, SamplingOffset_InitializationString);
-            }
+            SamplingOffset?.Initialize(context, SamplingOffset_InitializationString);
         }
 
         #region Initialization String
@@ -81187,15 +80590,9 @@ namespace Opc.Ua
         {
             base.InitializeOptionalChildren(context);
 
-            if (MessageRepeatCount != null)
-            {
-                MessageRepeatCount.Initialize(context, MessageRepeatCount_InitializationString);
-            }
+            MessageRepeatCount?.Initialize(context, MessageRepeatCount_InitializationString);
 
-            if (MessageRepeatDelay != null)
-            {
-                MessageRepeatDelay.Initialize(context, MessageRepeatDelay_InitializationString);
-            }
+            MessageRepeatDelay?.Initialize(context, MessageRepeatDelay_InitializationString);
         }
 
         #region Initialization String
@@ -83329,10 +82726,7 @@ namespace Opc.Ua
         {
             base.InitializeOptionalChildren(context);
 
-            if (ValueAsDictionaryEntries != null)
-            {
-                ValueAsDictionaryEntries.Initialize(context, ValueAsDictionaryEntries_InitializationString);
-            }
+            ValueAsDictionaryEntries?.Initialize(context, ValueAsDictionaryEntries_InitializationString);
         }
 
         #region Initialization String
diff --git a/Stack/Opc.Ua.Core/Stack/Nodes/ContentFilter.cs b/Stack/Opc.Ua.Core/Stack/Nodes/ContentFilter.cs
index e2b4c135..9b51fe19 100644
--- a/Stack/Opc.Ua.Core/Stack/Nodes/ContentFilter.cs
+++ b/Stack/Opc.Ua.Core/Stack/Nodes/ContentFilter.cs
@@ -1163,7 +1163,7 @@ namespace Opc.Ua
         {
             if (format == null)
             {
-                return String.Format("[{0}]", m_index);
+                return $"[{m_index}]";
             }
 
             throw new FormatException(Utils.Format("Invalid format string: '{0}'.", format));
@@ -1259,7 +1259,7 @@ namespace Opc.Ua
         {
             if (format == null)
             {
-                return String.Format("{0}", m_value);
+                return $"{m_value}";
             }
 
             throw new FormatException(Utils.Format("Invalid format string: '{0}'.", format));
diff --git a/Stack/Opc.Ua.Core/Stack/Nodes/NodeSet.cs b/Stack/Opc.Ua.Core/Stack/Nodes/NodeSet.cs
index 2c756637..106210dc 100644
--- a/Stack/Opc.Ua.Core/Stack/Nodes/NodeSet.cs
+++ b/Stack/Opc.Ua.Core/Stack/Nodes/NodeSet.cs
@@ -238,9 +238,7 @@ namespace Opc.Ua
 
                 case BuiltInType.ExtensionObject:
                 {
-                    Argument argument = ExtensionObject.ToEncodeable((ExtensionObject)value) as Argument;
-
-                    if (argument != null)
+                    if (ExtensionObject.ToEncodeable((ExtensionObject)value) is Argument argument)
                     {
                         argument.DataType = Translate(argument.DataType, m_namespaceUris, namespaceUris);
                     }
@@ -268,10 +266,8 @@ namespace Opc.Ua
 
             node.NodeId = Translate(nodeToExport.NodeId, m_namespaceUris, namespaceUris);
             node.BrowseName = Translate(nodeToExport.BrowseName, m_namespaceUris, namespaceUris);
-            
-            VariableNode variableToExport = nodeToExport as VariableNode;
 
-            if (variableToExport != null)
+            if (nodeToExport is VariableNode variableToExport)
             {
                 VariableNode variableNode = (VariableNode)node;
 
@@ -280,10 +276,8 @@ namespace Opc.Ua
 
                 variableNode.DataType = Translate(variableToExport.DataType, m_namespaceUris, namespaceUris);
             }
-            
-            VariableTypeNode variableTypeToExport = nodeToExport as VariableTypeNode;
 
-            if (variableTypeToExport != null)
+            if (nodeToExport is VariableTypeNode variableTypeToExport)
             {
                 VariableTypeNode variableTypeNode = (VariableTypeNode)node;
 
@@ -436,9 +430,7 @@ namespace Opc.Ua
             node.NodeId = Translate(nodeToImport.NodeId, namespaceUris, m_namespaceUris);
             node.BrowseName = Translate(nodeToImport.BrowseName, namespaceUris, m_namespaceUris);
 
-            VariableNode variableToImport = nodeToImport as VariableNode;
-
-            if (variableToImport != null)
+            if (nodeToImport is VariableNode variableToImport)
             {
                 VariableNode variable = (VariableNode)node;
 
@@ -449,10 +441,8 @@ namespace Opc.Ua
                     variable.Value = new Variant(ImportValue(variableToImport.Value.Value, namespaceUris, serverUris));
                 }
             }
-            
-            VariableTypeNode variableTypeToImport = nodeToImport as VariableTypeNode;
 
-            if (variableTypeToImport != null)
+            if (nodeToImport is VariableTypeNode variableTypeToImport)
             {
                 VariableTypeNode variableType = (VariableTypeNode)node;
 
@@ -487,9 +477,7 @@ namespace Opc.Ua
         /// <returns></returns>
         private object ImportValue(object value, NamespaceTable namespaceUris, StringTable serverUris)
         {
-            Array array = value as Array;
-
-            if (array != null)
+            if (value is Array array)
             {
                 Type elementType = array.GetType().GetElementType();
 
@@ -508,27 +496,19 @@ namespace Opc.Ua
                 return copy;
             }
 
-            NodeId nodeId = value as NodeId; 
-
-            if (nodeId != null)
+            if (value is NodeId nodeId)
             {
                 return Import(nodeId, namespaceUris);
             }
 
-            ExpandedNodeId expandedNodeId = value as ExpandedNodeId; 
-
-            if (expandedNodeId != null)
+            if (value is ExpandedNodeId expandedNodeId)
             {
                 return Import(expandedNodeId, namespaceUris, serverUris);
             }
 
-            ExtensionObject extension = value as ExtensionObject; 
-
-            if (extension != null)
+            if (value is ExtensionObject extension)
             {
-                Argument argument = ExtensionObject.ToEncodeable(extension) as Argument;
-
-                if (argument != null)
+                if (ExtensionObject.ToEncodeable(extension) is Argument argument)
                 {
                     argument.DataType = Import(argument.DataType, namespaceUris);
                 }
diff --git a/Stack/Opc.Ua.Core/Stack/Nodes/NodeTable.cs b/Stack/Opc.Ua.Core/Stack/Nodes/NodeTable.cs
index ef248ccd..dc1156cc 100644
--- a/Stack/Opc.Ua.Core/Stack/Nodes/NodeTable.cs
+++ b/Stack/Opc.Ua.Core/Stack/Nodes/NodeTable.cs
@@ -475,10 +475,7 @@ namespace Opc.Ua
                 }
                 
                 // see if it is a type.
-                if (m_typeTree != null)
-                {
-                    m_typeTree.Add(node);
-                }
+                m_typeTree?.Add(node);
             }
 
             return importedNodes;
@@ -513,11 +510,10 @@ namespace Opc.Ua
                     target = node;
                 }
             }
-            
+
             // update local node attributes.
-            Node targetNode = target as Node;
 
-            if (targetNode != null)
+            if (target is Node targetNode)
             {
                 targetNode.NodeClass   = reference.NodeClass;
                 targetNode.BrowseName  = reference.BrowseName;
@@ -530,11 +526,10 @@ namespace Opc.Ua
 
                 return targetNode;
             }           
-            
+
             // update remote node attributes.
-            RemoteNode remoteNode = target as RemoteNode;
 
-            if (remoteNode != null)
+            if (target is RemoteNode remoteNode)
             {
                 remoteNode.NodeClass        = reference.NodeClass;
                 remoteNode.BrowseName       = reference.BrowseName;
@@ -562,11 +557,9 @@ namespace Opc.Ua
             {
                 Remove(node.NodeId);
             }
-
             // check if importing a node from a XML source (must copy references from References array to ReferenceTable).
-            Node serializedNode = node as Node;
 
-            if (serializedNode != null && serializedNode.References.Count > 0 && serializedNode.ReferenceTable.Count == 0)
+            if (node is Node serializedNode && serializedNode.References.Count > 0 && serializedNode.ReferenceTable.Count == 0)
             {
                 // index references.
                 foreach (ReferenceNode reference in node.References)
@@ -619,10 +612,7 @@ namespace Opc.Ua
             }
 
             // see if it is a type.
-            if (m_typeTree != null)
-            {
-                m_typeTree.Add(node);
-            }
+            m_typeTree?.Add(node);
         }
 
         /// <summary>
@@ -659,9 +649,8 @@ namespace Opc.Ua
                 }
 
                 // remove remote node if nothing else references it.
-                RemoteNode remoteNode = target as RemoteNode;
 
-                if (remoteNode != null)
+                if (target is RemoteNode remoteNode)
                 {
                     if (remoteNode.Release() == 0)
                     {
@@ -672,9 +661,8 @@ namespace Opc.Ua
                 }
 
                 // remote inverse references.                  
-                ILocalNode targetNode = target as ILocalNode;
                 
-                if (targetNode != null)
+                if (target is ILocalNode targetNode)
                 {
                     targetNode.References.Remove(reference.ReferenceTypeId, reference.IsInverse, sourceNode.NodeId);
                 }
diff --git a/Stack/Opc.Ua.Core/Stack/Nodes/TypeTable.cs b/Stack/Opc.Ua.Core/Stack/Nodes/TypeTable.cs
index 6e193632..f15a653c 100644
--- a/Stack/Opc.Ua.Core/Stack/Nodes/TypeTable.cs
+++ b/Stack/Opc.Ua.Core/Stack/Nodes/TypeTable.cs
@@ -380,17 +380,15 @@ namespace Opc.Ua
             }
 
             // for structure types must try to determine the subtype.
-            ExtensionObject extension = value as ExtensionObject;
             
-            if (extension != null)
+            if (value is ExtensionObject extension)
             {
                 return IsEncodingFor(expectedTypeId, extension);
             }
-            
+
             // every element in an array must match.
-            ExtensionObject[] extensions = value as ExtensionObject[];
 
-            if (extensions != null)
+            if (value is ExtensionObject[] extensions)
             {
                 for (int ii = 0; ii < extensions.Length; ii++)
                 {
@@ -522,10 +520,7 @@ namespace Opc.Ua
                 typeInfo.Deleted = false;
 
                 // add to supertype.
-                if (superTypeInfo != null)
-                {
-                    superTypeInfo.AddSubType(typeInfo);
-                }
+                superTypeInfo?.AddSubType(typeInfo);
                                 
                 // remove the encodings.
                 if (typeInfo.Encodings != null)
@@ -669,10 +664,7 @@ namespace Opc.Ua
                 typeInfo.Deleted = false;
 
                 // add to supertype.
-                if (superTypeInfo != null)
-                {
-                    superTypeInfo.AddSubType(typeInfo);
-                }
+                superTypeInfo?.AddSubType(typeInfo);
 
                 // remove the encodings.
                 if (typeInfo.Encodings != null)
diff --git a/Stack/Opc.Ua.Core/Stack/Server/EndpointBase.cs b/Stack/Opc.Ua.Core/Stack/Server/EndpointBase.cs
index f97f6fe9..8b94b54d 100644
--- a/Stack/Opc.Ua.Core/Stack/Server/EndpointBase.cs
+++ b/Stack/Opc.Ua.Core/Stack/Server/EndpointBase.cs
@@ -397,9 +397,7 @@ namespace Opc.Ua
 
             ServiceResult result = null;
 
-            ServiceResultException sre = exception as ServiceResultException;
-
-            if (sre != null)
+            if (exception is ServiceResultException sre)
             {
                 result = new ServiceResult(sre);
 
@@ -823,9 +821,7 @@ namespace Opc.Ua
             /// <returns>The request object if available; otherwise null.</returns>
             public static IServiceRequest GetRequest(IAsyncResult ar)
             {
-                ProcessRequestAsyncResult result = ar as ProcessRequestAsyncResult;
-
-                if (result != null)
+                if (ar is ProcessRequestAsyncResult result)
                 {
                     return result.m_request;
                 }
diff --git a/Stack/Opc.Ua.Core/Stack/Server/ServerBase.cs b/Stack/Opc.Ua.Core/Stack/Server/ServerBase.cs
index 37ee0d13..c1ca75ff 100644
--- a/Stack/Opc.Ua.Core/Stack/Server/ServerBase.cs
+++ b/Stack/Opc.Ua.Core/Stack/Server/ServerBase.cs
@@ -441,10 +441,7 @@ namespace Opc.Ua
                 maxQueuedRequestCount = 100;
             }
 
-            if (m_requestQueue != null)
-            {
-                m_requestQueue.Dispose();
-            }
+            m_requestQueue?.Dispose();
 
             m_requestQueue = new RequestQueue(this, minRequestThreadCount, maxRequestThreadCount, maxQueuedRequestCount);
         }
diff --git a/Stack/Opc.Ua.Core/Stack/State/BaseInstanceState.cs b/Stack/Opc.Ua.Core/Stack/State/BaseInstanceState.cs
index c2dc6f57..6e0cc6d6 100644
--- a/Stack/Opc.Ua.Core/Stack/State/BaseInstanceState.cs
+++ b/Stack/Opc.Ua.Core/Stack/State/BaseInstanceState.cs
@@ -288,10 +288,7 @@ namespace Opc.Ua
             base.ReportEvent(context, e);
 
             // recusively notify the parent.
-            if (m_parent != null)
-            {
-                m_parent.ReportEvent(context, e);
-            }
+            m_parent?.ReportEvent(context, e);
         }
 
         /// <summary>
diff --git a/Stack/Opc.Ua.Core/Stack/State/BaseInstanceStateSnapshot.cs b/Stack/Opc.Ua.Core/Stack/State/BaseInstanceStateSnapshot.cs
index a709e847..a23b949d 100644
--- a/Stack/Opc.Ua.Core/Stack/State/BaseInstanceStateSnapshot.cs
+++ b/Stack/Opc.Ua.Core/Stack/State/BaseInstanceStateSnapshot.cs
@@ -199,9 +199,7 @@ namespace Opc.Ua
             node.NodeClass  = state.NodeClass;
             node.BrowseName = state.BrowseName;
 
-            BaseVariableState variable = state as BaseVariableState;
-
-            if (variable != null)
+            if (state is BaseVariableState variable)
             {
                 if (!StatusCode.IsBad(variable.StatusCode))
                 {
@@ -209,9 +207,7 @@ namespace Opc.Ua
                 }
             }
 
-            BaseObjectState instance = state as BaseObjectState;
-
-            if (instance != null)
+            if (state is BaseObjectState instance)
             {
                 node.Value = instance.NodeId;                    
             }
diff --git a/Stack/Opc.Ua.Core/Stack/State/BaseObjectState.cs b/Stack/Opc.Ua.Core/Stack/State/BaseObjectState.cs
index 3f456fea..5de62600 100644
--- a/Stack/Opc.Ua.Core/Stack/State/BaseObjectState.cs
+++ b/Stack/Opc.Ua.Core/Stack/State/BaseObjectState.cs
@@ -75,9 +75,7 @@ namespace Opc.Ua
         /// </summary>
         protected override void Initialize(ISystemContext context, NodeState source)
         {
-            BaseObjectState instance = source as BaseObjectState;
-
-            if (instance != null)
+            if (source is BaseObjectState instance)
             {
                 m_eventNotifier = instance.m_eventNotifier;
             }
@@ -139,9 +137,7 @@ namespace Opc.Ua
         {
             base.Export(context, node);
 
-            ObjectNode objectNode = node as ObjectNode;
-
-            if (objectNode != null)
+            if (node is ObjectNode objectNode)
             {
                 objectNode.EventNotifier = this.EventNotifier;
             }
diff --git a/Stack/Opc.Ua.Core/Stack/State/BaseTypeState.cs b/Stack/Opc.Ua.Core/Stack/State/BaseTypeState.cs
index 518e161e..018492dc 100644
--- a/Stack/Opc.Ua.Core/Stack/State/BaseTypeState.cs
+++ b/Stack/Opc.Ua.Core/Stack/State/BaseTypeState.cs
@@ -43,9 +43,7 @@ namespace Opc.Ua
         /// </summary>
         protected override void Initialize(ISystemContext context, NodeState source)
         {
-            BaseTypeState type = source as BaseTypeState;
-
-            if (type != null)
+            if (source is BaseTypeState type)
             {
                 m_superTypeId = type.m_superTypeId;
                 m_isAbstract = type.m_isAbstract;
diff --git a/Stack/Opc.Ua.Core/Stack/State/ConditionState.cs b/Stack/Opc.Ua.Core/Stack/State/ConditionState.cs
index 3a0774e1..b2510574 100644
--- a/Stack/Opc.Ua.Core/Stack/State/ConditionState.cs
+++ b/Stack/Opc.Ua.Core/Stack/State/ConditionState.cs
@@ -286,7 +286,7 @@ namespace Opc.Ua
         {
             IOperationContext operationContext = context as IOperationContext;
 
-            if (operationContext != null && operationContext.UserIdentity != null)
+            if (operationContext?.UserIdentity != null)
             {
                 return operationContext.UserIdentity.DisplayName;
             }
diff --git a/Stack/Opc.Ua.Core/Stack/State/MethodState.cs b/Stack/Opc.Ua.Core/Stack/State/MethodState.cs
index 3755891c..2014ae07 100644
--- a/Stack/Opc.Ua.Core/Stack/State/MethodState.cs
+++ b/Stack/Opc.Ua.Core/Stack/State/MethodState.cs
@@ -65,9 +65,7 @@ namespace Opc.Ua
         /// </summary>
         protected override void Initialize(ISystemContext context, NodeState source)
         {
-            MethodState method = source as MethodState;
-
-            if (method != null)
+            if (source is MethodState method)
             {
                 m_executable = method.m_executable;
                 m_userExecutable = method.m_userExecutable;
@@ -179,9 +177,7 @@ namespace Opc.Ua
         {
             base.Export(context, node);
 
-            MethodNode methodNode = node as MethodNode;
-
-            if (methodNode != null)
+            if (node is MethodNode methodNode)
             {
                 methodNode.Executable = this.Executable;
                 methodNode.UserExecutable = this.UserExecutable;
diff --git a/Stack/Opc.Ua.Core/Stack/State/NodeState.cs b/Stack/Opc.Ua.Core/Stack/State/NodeState.cs
index 29fb50f6..ec76fdc9 100644
--- a/Stack/Opc.Ua.Core/Stack/State/NodeState.cs
+++ b/Stack/Opc.Ua.Core/Stack/State/NodeState.cs
@@ -2524,9 +2524,7 @@ namespace Opc.Ua
 
             for (int ii = 0; ii < children.Count; ii++)
             {
-                MethodState method = children[ii] as MethodState;
-
-                if (method != null)
+                if (children[ii] is MethodState method)
                 {
                     if (method.NodeId == methodId || method.MethodDeclarationId == methodId)
                     {
@@ -3203,21 +3201,15 @@ namespace Opc.Ua
                     continue;
                 }
 
-                BaseVariableState variableInstance = child as BaseVariableState;
-
-                if (variableInstance != null)
+                if (child is BaseVariableState variableInstance)
                 {
                     variableInstance.Value = values.EventFields[ii].Value;
                     continue;
                 }
 
-                BaseObjectState objectInstance = child as BaseObjectState;
-
-                if (objectInstance != null)
+                if (child is BaseObjectState objectInstance)
                 {
-                    NodeId nodeId = values.EventFields[ii].Value as NodeId;
-
-                    if (nodeId != null)
+                    if (values.EventFields[ii].Value is NodeId nodeId)
                     {
                         objectInstance.NodeId = nodeId;
                     }
@@ -4227,10 +4219,7 @@ namespace Opc.Ua
                 return false;
             }
 
-            BaseVariableState variable = child as BaseVariableState;
-            BaseVariableState sourceVariable = source as BaseVariableState;
-
-            if (variable != null && sourceVariable != null)
+            if (child is BaseVariableState variable && source is BaseVariableState sourceVariable)
             {
                 if (copy)
                 {
diff --git a/Stack/Opc.Ua.Core/Stack/State/NodeStateCollection.cs b/Stack/Opc.Ua.Core/Stack/State/NodeStateCollection.cs
index 266f7c2e..a79e32fd 100644
--- a/Stack/Opc.Ua.Core/Stack/State/NodeStateCollection.cs
+++ b/Stack/Opc.Ua.Core/Stack/State/NodeStateCollection.cs
@@ -214,10 +214,7 @@ namespace Opc.Ua
                 {
                     NodeState state = this[ii];
 
-                    if (state != null)
-                    {
-                        state.SaveAsXml(context, encoder);
-                    }
+                    state?.SaveAsXml(context, encoder);
                 }
 
                 encoder.Close();
@@ -579,10 +576,7 @@ namespace Opc.Ua
         {
             if (NodeId.IsNull(typeDefinitionId)) throw new ArgumentNullException(nameof(typeDefinitionId));
 
-            if (m_types != null)
-            {
-                m_types.Remove(typeDefinitionId);
-            }
+            m_types?.Remove(typeDefinitionId);
         }
         
         private NodeIdDictionary<Type> m_types;
diff --git a/Stack/Opc.Ua.Core/Stack/State/ProgramStateMachineState.cs b/Stack/Opc.Ua.Core/Stack/State/ProgramStateMachineState.cs
index e217fe59..6ee154fd 100644
--- a/Stack/Opc.Ua.Core/Stack/State/ProgramStateMachineState.cs
+++ b/Stack/Opc.Ua.Core/Stack/State/ProgramStateMachineState.cs
@@ -159,10 +159,7 @@ namespace Opc.Ua
             {
                 ProgramTransitionAuditEventState e2 = e as ProgramTransitionAuditEventState;
 
-                if (e2 != null)
-                {
-                    e2.SetChildValue(context, BrowseNames.Transition, LastTransition, false);
-                }
+                e2?.SetChildValue(context, BrowseNames.Transition, LastTransition, false);
             }
         }
 
diff --git a/Stack/Opc.Ua.Core/Stack/State/ReferenceTypeState.cs b/Stack/Opc.Ua.Core/Stack/State/ReferenceTypeState.cs
index 002f9b94..54c60be2 100644
--- a/Stack/Opc.Ua.Core/Stack/State/ReferenceTypeState.cs
+++ b/Stack/Opc.Ua.Core/Stack/State/ReferenceTypeState.cs
@@ -58,9 +58,7 @@ namespace Opc.Ua
         /// </summary>
         protected override void Initialize(ISystemContext context, NodeState source)
         {
-            ReferenceTypeState type = source as ReferenceTypeState;
-
-            if (type != null)
+            if (source is ReferenceTypeState type)
             {
                 m_inverseName = type.m_inverseName;
                 m_symmetric = type.m_symmetric;
@@ -124,9 +122,7 @@ namespace Opc.Ua
         {
             base.Export(context, node);
 
-            ReferenceTypeNode referenceTypeNode = node as ReferenceTypeNode;
-
-            if (referenceTypeNode != null)
+            if (node is ReferenceTypeNode referenceTypeNode)
             {
                 referenceTypeNode.InverseName = this.InverseName;
                 referenceTypeNode.Symmetric = this.Symmetric;
diff --git a/Stack/Opc.Ua.Core/Stack/State/ViewState.cs b/Stack/Opc.Ua.Core/Stack/State/ViewState.cs
index ff2bfa3c..a4f0f72a 100644
--- a/Stack/Opc.Ua.Core/Stack/State/ViewState.cs
+++ b/Stack/Opc.Ua.Core/Stack/State/ViewState.cs
@@ -61,9 +61,7 @@ namespace Opc.Ua
         /// </summary>
         protected override void Initialize(ISystemContext context, NodeState source)
         {
-            ViewState instance = source as ViewState;
-
-            if (instance != null)
+            if (source is ViewState instance)
             {
                 m_eventNotifier = instance.m_eventNotifier;
                 m_containsNoLoops = instance.m_containsNoLoops;
@@ -175,9 +173,7 @@ namespace Opc.Ua
         {
             base.Export(context, node);
 
-            ViewNode viewNode = node as ViewNode;
-
-            if (viewNode != null)
+            if (node is ViewNode viewNode)
             {
                 viewNode.EventNotifier = this.EventNotifier;
                 viewNode.ContainsNoLoops = this.ContainsNoLoops;
diff --git a/Stack/Opc.Ua.Core/Stack/Tcp/ChannelAsyncOperation.cs b/Stack/Opc.Ua.Core/Stack/Tcp/ChannelAsyncOperation.cs
index 99c07df5..f892038e 100644
--- a/Stack/Opc.Ua.Core/Stack/Tcp/ChannelAsyncOperation.cs
+++ b/Stack/Opc.Ua.Core/Stack/Tcp/ChannelAsyncOperation.cs
@@ -291,9 +291,9 @@ namespace Opc.Ua.Bindings
                     return false;
                 }
 
-                if (result is T)
+                if (result is T t)
                 {
-                    m_response = (T)result;
+                    m_response = t;
                 }
                 else
                 {
@@ -308,10 +308,7 @@ namespace Opc.Ua.Bindings
                     m_timer = null;
                 }
 
-                if (m_event != null)
-                {
-                    m_event.Set();
-                }
+                m_event?.Set();
             }
 
             if (m_callback != null)
diff --git a/Stack/Opc.Ua.Core/Stack/Tcp/TcpListenerChannel.cs b/Stack/Opc.Ua.Core/Stack/Tcp/TcpListenerChannel.cs
index 903ff609..eee0def6 100644
--- a/Stack/Opc.Ua.Core/Stack/Tcp/TcpListenerChannel.cs
+++ b/Stack/Opc.Ua.Core/Stack/Tcp/TcpListenerChannel.cs
@@ -175,10 +175,7 @@ namespace Opc.Ua.Bindings
                 }
                 catch (Exception)
                 {
-                    if (buffers != null)
-                    {
-                        buffers.Release(BufferManager, "SendResponse");
-                    }
+                    buffers?.Release(BufferManager, "SendResponse");
 
                     m_queuedResponses[requestId] = response;
                     return;
@@ -333,10 +330,7 @@ namespace Opc.Ua.Bindings
         {
             try
             {
-                if (Socket != null)
-                {
-                    Socket.Close();
-                }
+                Socket?.Close();
             }
             finally
             {
@@ -452,10 +446,7 @@ namespace Opc.Ua.Bindings
             }
             catch (Exception e)
             {
-                if (buffers != null)
-                {
-                    buffers.Release(BufferManager, "SendServiceFault");
-                }
+                buffers?.Release(BufferManager, "SendServiceFault");
 
                 ForceChannelFault(ServiceResult.Create(e, StatusCodes.BadTcpInternalError, "Unexpected error sending a service fault."));
             }
@@ -526,10 +517,7 @@ namespace Opc.Ua.Bindings
             }
             catch (Exception e)
             {
-                if (chunksToSend != null)
-                {
-                    chunksToSend.Release(BufferManager, "SendServiceFault");
-                }
+                chunksToSend?.Release(BufferManager, "SendServiceFault");
 
                 ForceChannelFault(ServiceResult.Create(e, StatusCodes.BadTcpInternalError, "Unexpected error sending a service fault."));
             }
diff --git a/Stack/Opc.Ua.Core/Stack/Tcp/TcpServerChannel.cs b/Stack/Opc.Ua.Core/Stack/Tcp/TcpServerChannel.cs
index 4de31d8b..42e056e9 100644
--- a/Stack/Opc.Ua.Core/Stack/Tcp/TcpServerChannel.cs
+++ b/Stack/Opc.Ua.Core/Stack/Tcp/TcpServerChannel.cs
@@ -498,10 +498,8 @@ namespace Opc.Ua.Bindings
             }
             catch (Exception e)
             {
-                ServiceResultException innerException = e.InnerException as ServiceResultException;
-
                 // If the certificate structre, signature and trust list checks pass, we return the other specific validation errors instead of BadSecurityChecksFailed
-                if (innerException != null)
+                if (e.InnerException is ServiceResultException innerException)
                 {
                     if (innerException.StatusCode == StatusCodes.BadCertificateUntrusted ||
                         innerException.StatusCode == StatusCodes.BadCertificateChainIncomplete ||
@@ -695,10 +693,7 @@ namespace Opc.Ua.Bindings
             }
             finally
             {
-                if (chunksToProcess != null)
-                {
-                    chunksToProcess.Release(BufferManager, "ProcessOpenSecureChannelRequest");
-                }
+                chunksToProcess?.Release(BufferManager, "ProcessOpenSecureChannelRequest");
             }
         }
 
@@ -762,10 +757,7 @@ namespace Opc.Ua.Bindings
             }
             finally
             {
-                if (chunksToSend != null)
-                {
-                    chunksToSend.Release(BufferManager, "SendOpenSecureChannelResponse");
-                }
+                chunksToSend?.Release(BufferManager, "SendOpenSecureChannelResponse");
             }
         }
 
@@ -829,10 +821,7 @@ namespace Opc.Ua.Bindings
             }
             finally
             {
-                if (chunksToProcess != null)
-                {
-                    chunksToProcess.Release(BufferManager, "ProcessCloseSecureChannelRequest");
-                }
+                chunksToProcess?.Release(BufferManager, "ProcessCloseSecureChannelRequest");
 
                 Utils.Trace(
                     "{0} ProcessCloseSecureChannelRequest Socket={0:X8}, ChannelId={1}, TokenId={2}",
@@ -948,10 +937,7 @@ namespace Opc.Ua.Bindings
             }
             finally
             {
-                if (chunksToProcess != null)
-                {
-                    chunksToProcess.Release(BufferManager, "ProcessRequestMessage");
-                }
+                chunksToProcess?.Release(BufferManager, "ProcessRequestMessage");
             }
         }
         #endregion
diff --git a/Stack/Opc.Ua.Core/Stack/Tcp/TcpTransportListener.cs b/Stack/Opc.Ua.Core/Stack/Tcp/TcpTransportListener.cs
index 2d68f6b0..0c9f8075 100644
--- a/Stack/Opc.Ua.Core/Stack/Tcp/TcpTransportListener.cs
+++ b/Stack/Opc.Ua.Core/Stack/Tcp/TcpTransportListener.cs
@@ -196,10 +196,7 @@ namespace Opc.Ua.Bindings
         {
             lock (m_lock)
             {
-                if (m_channels != null)
-                {
-                    m_channels.Remove(channelId);
-                }
+                m_channels?.Remove(channelId);
             }
 
             Utils.Trace("Channel {0} closed", channelId);
diff --git a/Stack/Opc.Ua.Core/Stack/Tcp/UaSCBinaryChannel.Asymmetric.cs b/Stack/Opc.Ua.Core/Stack/Tcp/UaSCBinaryChannel.Asymmetric.cs
index 88e3c420..bbc6c6a0 100644
--- a/Stack/Opc.Ua.Core/Stack/Tcp/UaSCBinaryChannel.Asymmetric.cs
+++ b/Stack/Opc.Ua.Core/Stack/Tcp/UaSCBinaryChannel.Asymmetric.cs
@@ -885,9 +885,7 @@ namespace Opc.Ua.Bindings
             // validate the sender certificate.
             if (senderCertificate != null && Quotas.CertificateValidator != null && securityPolicyUri != SecurityPolicies.None)
             {
-                CertificateValidator certificateValidator = Quotas.CertificateValidator as CertificateValidator;
-
-                if (certificateValidator != null)
+                if (Quotas.CertificateValidator is CertificateValidator certificateValidator)
                 {
                     certificateValidator.Validate(senderCertificateChain);
                 }
diff --git a/Stack/Opc.Ua.Core/Stack/Tcp/UaSCBinaryChannel.Symmetric.cs b/Stack/Opc.Ua.Core/Stack/Tcp/UaSCBinaryChannel.Symmetric.cs
index 43cf082f..2575c0e8 100644
--- a/Stack/Opc.Ua.Core/Stack/Tcp/UaSCBinaryChannel.Symmetric.cs
+++ b/Stack/Opc.Ua.Core/Stack/Tcp/UaSCBinaryChannel.Symmetric.cs
@@ -433,10 +433,7 @@ namespace Opc.Ua.Bindings
             {
                 if (!success)
                 {
-                    if (chunksToProcess != null)
-                    {
-                        chunksToProcess.Release(BufferManager, "WriteSymmetricMessage");
-                    }
+                    chunksToProcess?.Release(BufferManager, "WriteSymmetricMessage");
                 }
             }
         }
diff --git a/Stack/Opc.Ua.Core/Stack/Tcp/UaSCBinaryChannel.cs b/Stack/Opc.Ua.Core/Stack/Tcp/UaSCBinaryChannel.cs
index ee6a31f9..9204d90e 100644
--- a/Stack/Opc.Ua.Core/Stack/Tcp/UaSCBinaryChannel.cs
+++ b/Stack/Opc.Ua.Core/Stack/Tcp/UaSCBinaryChannel.cs
@@ -483,10 +483,7 @@ namespace Opc.Ua.Bindings
         /// </summary>
         protected virtual void HandleWriteComplete(BufferCollection buffers, object state, int bytesWritten, ServiceResult result)
         {
-            if (buffers != null)
-            {
-                buffers.Release(BufferManager, "WriteOperation");
-            }
+            buffers?.Release(BufferManager, "WriteOperation");
         }
 
         /// <summary>
diff --git a/Stack/Opc.Ua.Core/Stack/Tcp/UaSCBinaryClientChannel.cs b/Stack/Opc.Ua.Core/Stack/Tcp/UaSCBinaryClientChannel.cs
index d37c3745..1852a81a 100644
--- a/Stack/Opc.Ua.Core/Stack/Tcp/UaSCBinaryClientChannel.cs
+++ b/Stack/Opc.Ua.Core/Stack/Tcp/UaSCBinaryClientChannel.cs
@@ -528,10 +528,7 @@ namespace Opc.Ua.Bindings
             }
             finally
             {
-                if (chunksToSend != null)
-                {
-                    chunksToSend.Release(BufferManager, "SendOpenSecureChannelRequest");
-                }
+                chunksToSend?.Release(BufferManager, "SendOpenSecureChannelRequest");
             }
         }
 
@@ -661,10 +658,7 @@ namespace Opc.Ua.Bindings
             }
             finally
             {
-                if (chunksToProcess != null)
-                {
-                    chunksToProcess.Release(BufferManager, "ProcessOpenSecureChannelResponse");
-                }
+                chunksToProcess?.Release(BufferManager, "ProcessOpenSecureChannelResponse");
             }
 
             return false;
@@ -687,9 +681,7 @@ namespace Opc.Ua.Bindings
         {
             lock (DataLock)
             {
-                WriteOperation operation = state as WriteOperation;
-
-                if (operation != null)
+                if (state is WriteOperation operation)
                 {
                     if (ServiceResult.IsBad(result))
                     {
@@ -964,10 +956,7 @@ namespace Opc.Ua.Bindings
             }
             finally
             {
-                if (buffers != null)
-                {
-                    buffers.Release(BufferManager, "SendRequest");
-                }
+                buffers?.Release(BufferManager, "SendRequest");
 
                 if (!success)
                 {
@@ -1331,10 +1320,7 @@ namespace Opc.Ua.Bindings
             }
             finally
             {
-                if (buffers != null)
-                {
-                    buffers.Release(BufferManager, "SendCloseSecureChannelRequest");
-                }
+                buffers?.Release(BufferManager, "SendCloseSecureChannelRequest");
             }
         }
 
@@ -1429,10 +1415,7 @@ namespace Opc.Ua.Bindings
             }
             finally
             {
-                if (chunksToProcess != null)
-                {
-                    chunksToProcess.Release(BufferManager, "ProcessResponseMessage");
-                }
+                chunksToProcess?.Release(BufferManager, "ProcessResponseMessage");
             }
         }
         #endregion
diff --git a/Stack/Opc.Ua.Core/Stack/Types/ContentFilter.Evaluate.cs b/Stack/Opc.Ua.Core/Stack/Types/ContentFilter.Evaluate.cs
index 6b5ebcea..e7d18223 100644
--- a/Stack/Opc.Ua.Core/Stack/Types/ContentFilter.Evaluate.cs
+++ b/Stack/Opc.Ua.Core/Stack/Types/ContentFilter.Evaluate.cs
@@ -1469,9 +1469,9 @@ namespace Opc.Ua
             }
 
             // extract the value from a Variant if specified.
-            if (source is Variant)
+            if (source is Variant variant)
             {
-                return Cast(((Variant)source).Value, targetType);
+                return Cast(variant.Value, targetType);
             }
 
             // call the appropriate function if a conversion is supported for the target type.
diff --git a/Stack/Opc.Ua.Core/Stack/Types/WriteValue.cs b/Stack/Opc.Ua.Core/Stack/Types/WriteValue.cs
index 7cab9151..57e04463 100644
--- a/Stack/Opc.Ua.Core/Stack/Types/WriteValue.cs
+++ b/Stack/Opc.Ua.Core/Stack/Types/WriteValue.cs
@@ -110,10 +110,8 @@ namespace Opc.Ua
                 else
                 {
                     // check that value provided is actually an array.
-                    Array array = value.Value.Value as Array;
-                    string str = value.Value.Value as string;
 
-                    if (array != null)
+                    if (value.Value.Value is Array array)
                     {
                         NumericRange range = value.ParsedIndexRange;
 
@@ -129,7 +127,7 @@ namespace Opc.Ua
                             return StatusCodes.BadIndexRangeInvalid;
                         }
                     }
-                    else if(str != null)
+                    else if(value.Value.Value is string str)
                     {
                         NumericRange range = value.ParsedIndexRange;
 
diff --git a/Stack/Opc.Ua.Core/Types/BuiltIn/DataValue.cs b/Stack/Opc.Ua.Core/Types/BuiltIn/DataValue.cs
index 16e3f2b7..a7571092 100644
--- a/Stack/Opc.Ua.Core/Types/BuiltIn/DataValue.cs
+++ b/Stack/Opc.Ua.Core/Types/BuiltIn/DataValue.cs
@@ -214,9 +214,7 @@ namespace Opc.Ua
                 return true;
             }
 
-            DataValue value = obj as DataValue;
-
-            if (value != null)
+            if (obj is DataValue value)
             {
                 if (this.m_statusCode != value.m_statusCode)
                 {
@@ -522,9 +520,7 @@ namespace Opc.Ua
                     return null;
                 }
 
-                ExtensionObject extension = value as ExtensionObject;
-
-                if (extension != null)
+                if (value is ExtensionObject extension)
                 {
                     value = extension.Body;
                 }
@@ -561,9 +557,7 @@ namespace Opc.Ua
                 return (T)this.Value;
             }
 
-            ExtensionObject extension = this.Value as ExtensionObject;
-
-            if (extension != null)
+            if (this.Value is ExtensionObject extension)
             {
                 if (typeof(T).IsInstanceOfType(extension.Body))
                 {
diff --git a/Stack/Opc.Ua.Core/Types/BuiltIn/DiagnosticInfo.cs b/Stack/Opc.Ua.Core/Types/BuiltIn/DiagnosticInfo.cs
index 0f718b1c..c7170b87 100644
--- a/Stack/Opc.Ua.Core/Types/BuiltIn/DiagnosticInfo.cs
+++ b/Stack/Opc.Ua.Core/Types/BuiltIn/DiagnosticInfo.cs
@@ -384,9 +384,7 @@ namespace Opc.Ua
                 return true;
             }
 
-            DiagnosticInfo value = obj as DiagnosticInfo;
-
-            if (value != null)
+            if (obj is DiagnosticInfo value)
             {
                 if (this.m_symbolicId != value.m_symbolicId)
                 {
diff --git a/Stack/Opc.Ua.Core/Types/BuiltIn/ExpandedNodeId.cs b/Stack/Opc.Ua.Core/Types/BuiltIn/ExpandedNodeId.cs
index b1c2e223..435c13e3 100644
--- a/Stack/Opc.Ua.Core/Types/BuiltIn/ExpandedNodeId.cs
+++ b/Stack/Opc.Ua.Core/Types/BuiltIn/ExpandedNodeId.cs
@@ -789,9 +789,8 @@ namespace Opc.Ua
             NodeId nodeId = obj as NodeId;
 
             // check for expanded node ids.
-            ExpandedNodeId expandedId = obj as ExpandedNodeId;
 
-            if (expandedId != null)
+            if (obj is ExpandedNodeId expandedId)
             {
                 if (this.IsNull && expandedId.IsNull)
                 {
diff --git a/Stack/Opc.Ua.Core/Types/BuiltIn/ExtensionObject.cs b/Stack/Opc.Ua.Core/Types/BuiltIn/ExtensionObject.cs
index 96bbbdc2..ba89b726 100644
--- a/Stack/Opc.Ua.Core/Types/BuiltIn/ExtensionObject.cs
+++ b/Stack/Opc.Ua.Core/Types/BuiltIn/ExtensionObject.cs
@@ -447,9 +447,7 @@ namespace Opc.Ua
                 return true;
             }
 
-            ExtensionObject value = obj as ExtensionObject;
-
-            if (value != null)
+            if (obj is ExtensionObject value)
             {
                 if (this.m_typeId != value.m_typeId)
                 {
@@ -509,19 +507,19 @@ namespace Opc.Ua
         {
             if (format == null)
             {
-                if (m_body is byte[])
+                if (m_body is byte[] bytes)
                 {
-                    return String.Format(formatProvider, "Byte[{0}]", ((byte[])m_body).Length);
+                    return String.Format(formatProvider, "Byte[{0}]", bytes.Length);
                 }
 
-                if (m_body is XmlElement)
+                if (m_body is XmlElement xmlElement)
                 {
-                    return String.Format(formatProvider, "<{0}>", ((XmlElement)m_body).Name);
+                    return String.Format(formatProvider, "<{0}>", xmlElement.Name);
                 }
 
-                if (m_body is IFormattable)
+                if (m_body is IFormattable iFormattable)
                 {
-                    return String.Format(formatProvider, "{0}", ((IFormattable)m_body).ToString(null, formatProvider));
+                    return String.Format(formatProvider, "{0}", iFormattable.ToString(null, formatProvider));
                 }
 
                 if (m_body is IEncodeable)
@@ -536,9 +534,7 @@ namespace Opc.Ua
 
                         for (int ii = 0; ii < attributes.Length; ii++)
                         {
-                            DataMemberAttribute contract = attributes[ii] as DataMemberAttribute;
-
-                            if (contract != null)
+                            if (attributes[ii] is DataMemberAttribute contract)
                             {
                                 if (body.Length == 0)
                                 {
@@ -600,7 +596,7 @@ namespace Opc.Ua
         /// </remarks>
         public static bool IsNull(ExtensionObject extension)
         {
-            if (extension != null && extension.m_body != null)
+            if (extension?.m_body != null)
             {
                 return false;
             }
@@ -918,9 +914,8 @@ namespace Opc.Ua
                 foreach (IEncodeable encodeable in encodeables)
                 {
                     // check if already an extension object.
-                    ExtensionObject extensible = encodeable as ExtensionObject;
 
-                    if (extensible != null)
+                    if (encodeable is ExtensionObject extensible)
                     {
                         extensibles.Add(extensible);
                     }
diff --git a/Stack/Opc.Ua.Core/Types/BuiltIn/NodeId.cs b/Stack/Opc.Ua.Core/Types/BuiltIn/NodeId.cs
index f1c3b1b1..4cb6dd09 100644
--- a/Stack/Opc.Ua.Core/Types/BuiltIn/NodeId.cs
+++ b/Stack/Opc.Ua.Core/Types/BuiltIn/NodeId.cs
@@ -1064,9 +1064,9 @@ namespace Opc.Ua
                 case IdType.Guid:
                 {
                     Guid id1 = (Guid)m_identifier;
-                    if (id is Uuid)
+                    if (id is Uuid uuid)
                     {
-                        return id1.CompareTo((Uuid)id);
+                        return id1.CompareTo(uuid);
                     }
                     return id1.CompareTo((Guid)id);
                 }
@@ -2705,10 +2705,7 @@ namespace Opc.Ua
                 {
                     IDisposable diposeable = m_enumerator as IDisposable;
 
-                    if (diposeable != null)
-                    {
-                        diposeable.Dispose();
-                    }
+                    diposeable?.Dispose();
 
                     m_enumerator = null;
                 }
diff --git a/Stack/Opc.Ua.Core/Types/BuiltIn/StatusCode.cs b/Stack/Opc.Ua.Core/Types/BuiltIn/StatusCode.cs
index 713a0fc5..147c736e 100644
--- a/Stack/Opc.Ua.Core/Types/BuiltIn/StatusCode.cs
+++ b/Stack/Opc.Ua.Core/Types/BuiltIn/StatusCode.cs
@@ -439,15 +439,15 @@ namespace Opc.Ua
             }
 
             // check for status code.
-            if (obj is uint)
+            if (obj is uint ui)
             {
-                return m_code.CompareTo((uint)obj);
+                return m_code.CompareTo(ui);
             }
 
             // compare codes.
-            if (obj is StatusCode)
+            if (obj is StatusCode statusCode)
             {
-                return m_code.CompareTo(((StatusCode)obj).m_code);
+                return m_code.CompareTo(statusCode.m_code);
             }
 
             // objects not comparable.
diff --git a/Stack/Opc.Ua.Core/Types/BuiltIn/Uuid.cs b/Stack/Opc.Ua.Core/Types/BuiltIn/Uuid.cs
index af9c0bad..9ef98be4 100644
--- a/Stack/Opc.Ua.Core/Types/BuiltIn/Uuid.cs
+++ b/Stack/Opc.Ua.Core/Types/BuiltIn/Uuid.cs
@@ -248,15 +248,15 @@ namespace Opc.Ua
             }
 
             // check for uuids.
-            if (obj is Uuid)
+            if (obj is Uuid uuid)
             {
-                return ((Uuid)obj).m_guid.CompareTo(m_guid);
+                return uuid.m_guid.CompareTo(m_guid);
             }
 
             // compare guids.            
-            if (obj is Guid)
+            if (obj is Guid guid)
             {
-                return m_guid.CompareTo((Guid)obj);
+                return m_guid.CompareTo(guid);
             }
 
             return +1;
diff --git a/Stack/Opc.Ua.Core/Types/Encoders/BinaryDecoder.cs b/Stack/Opc.Ua.Core/Types/Encoders/BinaryDecoder.cs
index bb7bfa4c..9f37dbc3 100644
--- a/Stack/Opc.Ua.Core/Types/Encoders/BinaryDecoder.cs
+++ b/Stack/Opc.Ua.Core/Types/Encoders/BinaryDecoder.cs
@@ -73,15 +73,9 @@ namespace Opc.Ua
         {
             if (disposing)
             {
-                if (m_reader != null)
-                {
-                    m_reader.Dispose();
-                }
+                m_reader?.Dispose();
 
-                if (m_istrm != null)
-                {
-                    m_istrm.Dispose();
-                }
+                m_istrm?.Dispose();
             }
         }
         #endregion
@@ -795,9 +789,8 @@ namespace Opc.Ua
             if (encodeableTypeId != null)
             {
                 // set type identifier for custom complex data types before decode.
-                IComplexTypeInstance complexTypeInstance = encodeable as IComplexTypeInstance;
 
-                if (complexTypeInstance != null)
+                if (encodeable is IComplexTypeInstance complexTypeInstance)
                 {
                     complexTypeInstance.TypeId = encodeableTypeId;
                 }
@@ -1580,9 +1573,8 @@ namespace Opc.Ua
                 encodeable = Activator.CreateInstance(systemType) as IEncodeable;
 
                 // set type identifier for custom complex data types before decode.
-                IComplexTypeInstance complexTypeInstance = encodeable as IComplexTypeInstance;
 
-                if (complexTypeInstance != null)
+                if (encodeable is IComplexTypeInstance complexTypeInstance)
                 {
                     complexTypeInstance.TypeId = extension.TypeId;
                 }
diff --git a/Stack/Opc.Ua.Core/Types/Encoders/BinaryEncoder.cs b/Stack/Opc.Ua.Core/Types/Encoders/BinaryEncoder.cs
index 5758f853..9d8fca8f 100644
--- a/Stack/Opc.Ua.Core/Types/Encoders/BinaryEncoder.cs
+++ b/Stack/Opc.Ua.Core/Types/Encoders/BinaryEncoder.cs
@@ -121,9 +121,9 @@ namespace Opc.Ua
             m_writer.Flush();
             m_writer.Dispose();
 
-            if (m_ostrm is MemoryStream)
+            if (m_ostrm is MemoryStream memoryStream)
             {
-                return ((MemoryStream)m_ostrm).ToArray();
+                return memoryStream.ToArray();
             }
 
             return null;
@@ -1044,10 +1044,7 @@ namespace Opc.Ua
             m_nestingLevel++;
 
             // encode the object.
-            if (value != null)
-            {
-                value.Encode(this);
-            }
+            value?.Encode(this);
 
             m_nestingLevel--;
         }
diff --git a/Stack/Opc.Ua.Core/Types/Encoders/EncodeableFactory.cs b/Stack/Opc.Ua.Core/Types/Encoders/EncodeableFactory.cs
index ce678195..f788c603 100644
--- a/Stack/Opc.Ua.Core/Types/Encoders/EncodeableFactory.cs
+++ b/Stack/Opc.Ua.Core/Types/Encoders/EncodeableFactory.cs
@@ -133,9 +133,7 @@ namespace Opc.Ua
             {
                 for (int ii = 0; ii < attributes.Length; ii++)
                 {
-                    DataContractAttribute contract = attributes[ii] as DataContractAttribute;
-
-                    if (contract != null)
+                    if (attributes[ii] is DataContractAttribute contract)
                     {
                         if (String.IsNullOrEmpty(contract.Name))
                         {
@@ -153,9 +151,7 @@ namespace Opc.Ua
             {
                 for (int ii = 0; ii < attributes.Length; ii++)
                 {
-                    CollectionDataContractAttribute contract = attributes[ii] as CollectionDataContractAttribute;
-
-                    if (contract != null)
+                    if (attributes[ii] is DataContractAttribute contract)
                     {
                         if (String.IsNullOrEmpty(contract.Name))
                         {
diff --git a/Stack/Opc.Ua.Core/Types/Encoders/JsonDecoder.cs b/Stack/Opc.Ua.Core/Types/Encoders/JsonDecoder.cs
index 97ce1eff..691b8f57 100644
--- a/Stack/Opc.Ua.Core/Types/Encoders/JsonDecoder.cs
+++ b/Stack/Opc.Ua.Core/Types/Encoders/JsonDecoder.cs
@@ -371,10 +371,7 @@ namespace Opc.Ua
         {
             if (disposing)
             {
-                if (m_reader != null)
-                {
-                    m_reader.Close();
-                }
+                m_reader?.Close();
             }
         }
         #endregion
diff --git a/Stack/Opc.Ua.Core/Types/Encoders/XmlDecoder.cs b/Stack/Opc.Ua.Core/Types/Encoders/XmlDecoder.cs
index 1acebabf..02c36e82 100644
--- a/Stack/Opc.Ua.Core/Types/Encoders/XmlDecoder.cs
+++ b/Stack/Opc.Ua.Core/Types/Encoders/XmlDecoder.cs
@@ -587,10 +587,7 @@ namespace Opc.Ua
         {
             if (disposing)
             {
-                if (m_reader != null)
-                {
-                    m_reader.Dispose();
-                }
+                m_reader?.Dispose();
             }
         }
         #endregion
@@ -1450,8 +1447,7 @@ namespace Opc.Ua
             // read end of extension object.
             EndField(fieldName);
 
-            IEncodeable encodeable = body as IEncodeable;
-            if (encodeable != null)
+            if (body is IEncodeable encodeable)
             {
                 // Set the known TypeId for encodeables.
                 absoluteId = encodeable.TypeId;
@@ -1483,9 +1479,8 @@ namespace Opc.Ua
             if (encodeableTypeId != null)
             {
                 // set type identifier for custom complex data types before decode.
-                IComplexTypeInstance complexTypeInstance = value as IComplexTypeInstance;
 
-                if (complexTypeInstance != null)
+                if (value is IComplexTypeInstance complexTypeInstance)
                 {
                     complexTypeInstance.TypeId = encodeableTypeId;
                 }
diff --git a/Stack/Opc.Ua.Core/Types/Encoders/XmlEncoder.cs b/Stack/Opc.Ua.Core/Types/Encoders/XmlEncoder.cs
index cb66a386..0a9a62ea 100644
--- a/Stack/Opc.Ua.Core/Types/Encoders/XmlEncoder.cs
+++ b/Stack/Opc.Ua.Core/Types/Encoders/XmlEncoder.cs
@@ -871,10 +871,7 @@ namespace Opc.Ua
 
             if (BeginField(fieldName, value == null, true))
             {
-                if (value != null)
-                {
-                    value.Encode(this);
-                }
+                value?.Encode(this);
 
                 EndField(fieldName);
             }
diff --git a/Stack/Opc.Ua.Core/Types/Schemas/BinarySchemaValidator.cs b/Stack/Opc.Ua.Core/Types/Schemas/BinarySchemaValidator.cs
index 3204dc61..19fd8e26 100644
--- a/Stack/Opc.Ua.Core/Types/Schemas/BinarySchemaValidator.cs
+++ b/Stack/Opc.Ua.Core/Types/Schemas/BinarySchemaValidator.cs
@@ -267,9 +267,7 @@ namespace Opc.Ua.Schema.Binary
                 return true;
             }
 
-            OpaqueType opaqueType = description as OpaqueType;
-
-            if (opaqueType != null)
+            if (description is OpaqueType opaqueType)
             {
                 if (opaqueType.LengthInBitsSpecified)
                 {
@@ -304,9 +302,7 @@ namespace Opc.Ua.Schema.Binary
                 }
             }
 
-            EnumeratedType enumerated = description as EnumeratedType;
-
-            if (enumerated != null)
+            if (description is EnumeratedType enumerated)
             {
                 if (enumerated.LengthInBitsSpecified)
                 {
@@ -315,9 +311,7 @@ namespace Opc.Ua.Schema.Binary
             }
             else
             {
-                OpaqueType opaque = description as OpaqueType;
-
-                if (opaque != null)
+                if (description is OpaqueType opaque)
                 {
                     if (opaque.LengthInBitsSpecified)
                     {
@@ -392,9 +386,7 @@ namespace Opc.Ua.Schema.Binary
         /// </summary>
         private void ValidateDescription(TypeDescription description)
         {
-            OpaqueType opaque = description as OpaqueType;
-
-            if (opaque != null)
+            if (description is OpaqueType opaque)
             {
                 if (!opaque.LengthInBitsSpecified)
                 {
@@ -407,9 +399,7 @@ namespace Opc.Ua.Schema.Binary
                 }
             }
 
-            EnumeratedType enumerated = description as EnumeratedType;
-
-            if (enumerated != null)
+            if (description is EnumeratedType enumerated)
             {
 
                 if (!enumerated.LengthInBitsSpecified)
@@ -418,9 +408,7 @@ namespace Opc.Ua.Schema.Binary
                 }
             }
 
-            StructuredType structure = description as StructuredType;
-
-            if (structure != null)
+            if (description is StructuredType structure)
             {
                 if (structure.Field == null || structure.Field.Length == 0)
                 {
diff --git a/Stack/Opc.Ua.Core/Types/Schemas/XmlSchemaValidator.cs b/Stack/Opc.Ua.Core/Types/Schemas/XmlSchemaValidator.cs
index 22db6b9e..6616b85d 100644
--- a/Stack/Opc.Ua.Core/Types/Schemas/XmlSchemaValidator.cs
+++ b/Stack/Opc.Ua.Core/Types/Schemas/XmlSchemaValidator.cs
@@ -124,8 +124,7 @@ namespace Opc.Ua.Schema.Xml
                 {
                     foreach (XmlNode current in m_schema.ChildNodes)
                     {       
-                        XmlElement element = current as XmlElement;
-                        if (element != null)
+                        if (current is XmlElement element)
                         {
                             if (element.Name == typeName)
                             {                                
diff --git a/Stack/Opc.Ua.Core/Types/Utils/DataComparer.cs b/Stack/Opc.Ua.Core/Types/Utils/DataComparer.cs
index d73f4fbd..28276fbf 100644
--- a/Stack/Opc.Ua.Core/Types/Utils/DataComparer.cs
+++ b/Stack/Opc.Ua.Core/Types/Utils/DataComparer.cs
@@ -935,9 +935,7 @@ namespace Opc.Ua.Test
         {
             object body = value.Body;
 
-            IEncodeable encodeable = body as IEncodeable;
-
-            if (encodeable != null)
+            if (body is IEncodeable encodeable)
             {
                 return encodeable;
             }
@@ -952,9 +950,7 @@ namespace Opc.Ua.Test
             ServiceMessageContext context = new ServiceMessageContext();
             context.Factory = EncodeableFactory;
 
-            XmlElement xml = body as XmlElement;
-
-            if (xml != null)
+            if (body is XmlElement xml)
             {
                 XmlQualifiedName xmlName = EncodeableFactory.GetXmlName(expectedType);
                 XmlDecoder decoder = new XmlDecoder(xml, context);
@@ -967,9 +963,7 @@ namespace Opc.Ua.Test
                 return (IEncodeable)body;
             }
 
-            byte[] bytes = body as byte[];
-
-            if (bytes != null)
+            if (body is byte[] bytes)
             {
                 BinaryDecoder decoder = new BinaryDecoder(bytes, context);
                 body = decoder.ReadEncodeable(null, expectedType);
@@ -1008,10 +1002,7 @@ namespace Opc.Ua.Test
                 return body1 == body2;
             }
 
-            byte[] bytes1 = value1.Body as byte[];
-            byte[] bytes2 = value2.Body as byte[];
-
-            if (bytes1 != null && bytes2 != null)
+            if (value1.Body is byte[] bytes1 && value2.Body is byte[] bytes2)
             {
                 if (!CompareExpandedNodeId(value1.TypeId, value2.TypeId))
                 {
@@ -1021,10 +1012,7 @@ namespace Opc.Ua.Test
                 return CompareByteString(bytes1, bytes2);
             }
 
-            XmlElement xml1 = value1.Body as XmlElement;
-            XmlElement xml2 = value2.Body as XmlElement;
-
-            if (xml1 != null && xml2 != null)
+            if (value1.Body is XmlElement xml1 && value2.Body is XmlElement xml2)
             {
                 if (!CompareExpandedNodeId(value1.TypeId, value2.TypeId))
                 {
@@ -1055,10 +1043,7 @@ namespace Opc.Ua.Test
                 return true;
             }
 
-            IEncodeable encodeable1 = value1 as IEncodeable;
-            IEncodeable encodeable2 = value2 as IEncodeable;
-
-            if (encodeable1 != null && encodeable2 != null)
+            if (value1 is IEncodeable encodeable1 && value2 is IEncodeable encodeable2)
             {
                 if (encodeable1.IsEqual(encodeable1))
                 {
diff --git a/Stack/Opc.Ua.Core/Types/Utils/RelativePath.cs b/Stack/Opc.Ua.Core/Types/Utils/RelativePath.cs
index 3c3618ae..44972b76 100644
--- a/Stack/Opc.Ua.Core/Types/Utils/RelativePath.cs
+++ b/Stack/Opc.Ua.Core/Types/Utils/RelativePath.cs
@@ -435,10 +435,7 @@ namespace Opc.Ua
         {
             RelativePathFormatter path = Parse(textToParse);
 
-            if (path != null)
-            {
-                path.TranslateNamespaceIndexes(currentTable, targetTable);
-            }
+            path?.TranslateNamespaceIndexes(currentTable, targetTable);
 
             return path;
         }
diff --git a/Stack/Opc.Ua.Core/Types/Utils/ServiceResult.cs b/Stack/Opc.Ua.Core/Types/Utils/ServiceResult.cs
index 5cc4cf7b..777b288c 100644
--- a/Stack/Opc.Ua.Core/Types/Utils/ServiceResult.cs
+++ b/Stack/Opc.Ua.Core/Types/Utils/ServiceResult.cs
@@ -430,9 +430,8 @@ namespace Opc.Ua
         public static ServiceResult Create(Exception e, TranslationInfo translation, uint defaultCode)
         {
             // replace the default code with the one from the exception.
-            ServiceResultException sre = e as ServiceResultException;
 
-            if (sre != null)
+            if (e is ServiceResultException sre)
             {
                 defaultCode = sre.StatusCode;
             }
@@ -469,9 +468,8 @@ namespace Opc.Ua
         public static ServiceResult Create(Exception e, uint defaultCode, string format, params object[] args)
         {
             // replace the default code with the one from the exception.
-            ServiceResultException sre = e as ServiceResultException;
 
-            if (sre != null)
+            if (e is ServiceResultException sre)
             {
                 defaultCode = sre.StatusCode;
             }
@@ -771,7 +769,7 @@ namespace Opc.Ua
                 buffer.Append(m_localizedText);
             }
 
-            if (AdditionalInfo != null && AdditionalInfo.Length > 0)
+            if (!string.IsNullOrEmpty(AdditionalInfo))
             {
                 buffer.AppendLine();
                 buffer.Append(AdditionalInfo);
@@ -811,7 +809,7 @@ namespace Opc.Ua
         /// <param name="exception"></param>
         private static string GetDefaultMessage(Exception exception)
         {
-            if (exception != null && exception.Message != null)
+            if (exception?.Message != null)
             {
                 if (exception.Message.StartsWith("[") || exception is ServiceResultException)
                 {
diff --git a/Stack/Opc.Ua.Core/Types/Utils/Utils.cs b/Stack/Opc.Ua.Core/Types/Utils/Utils.cs
index c6cd4062..b01232d2 100644
--- a/Stack/Opc.Ua.Core/Types/Utils/Utils.cs
+++ b/Stack/Opc.Ua.Core/Types/Utils/Utils.cs
@@ -433,9 +433,7 @@ namespace Opc.Ua
             // append exception information.
             if (e != null)
             {
-                ServiceResultException sre = e as ServiceResultException;
-
-                if (sre != null)
+                if (e is ServiceResultException sre)
                 {
                     message.AppendFormat(CultureInfo.InvariantCulture, " {0} '{1}'", StatusCodes.GetBrowseName(sre.StatusCode), sre.Message);
                 }
@@ -921,9 +919,7 @@ namespace Opc.Ua
         /// </remarks>
         public static void SilentDispose(object objectToDispose)
         {
-            IDisposable disposable = objectToDispose as IDisposable;
-
-            if (disposable != null)
+            if (objectToDispose is IDisposable disposable)
             {
                 try
                 {
@@ -1579,8 +1575,7 @@ namespace Opc.Ua
             }
 
             // copy arrays, any dimension.
-            Array array = value as Array;
-            if (array != null)
+            if (value is Array array)
             {
                 if (array.Rank == 1)
                 {
@@ -1621,24 +1616,21 @@ namespace Opc.Ua
             }
 
             // copy XmlNode.
-            XmlNode node = value as XmlNode;
-            if (node != null)
+            if (value is XmlNode node)
             {
                 return node.CloneNode(true);
             }
 
             // copy ExtensionObject.
             {
-                ExtensionObject castedObject = value as ExtensionObject;
-                if (castedObject != null)
+                if (value is ExtensionObject castedObject)
                 {
                     return castedObject.MemberwiseClone();
                 }
             }
             // copy ExtensionObjectCollection.
             {
-                ExtensionObjectCollection castedObject = value as ExtensionObjectCollection;
-                if (castedObject != null)
+                if (value is ExtensionObject castedObject)
                 {
                     return castedObject.MemberwiseClone();
                 }
@@ -1646,8 +1638,7 @@ namespace Opc.Ua
 
             // copy EnumValueType.
             {
-                EnumValueType castedObject = value as EnumValueType;
-                if (castedObject != null)
+                if (value is ExtensionObject castedObject)
                 {
                     return castedObject.MemberwiseClone();
                 }
@@ -1655,8 +1646,7 @@ namespace Opc.Ua
 
             // copy LocalizedText.
             {
-                LocalizedText castedObject = value as LocalizedText;
-                if (castedObject != null)
+                if (value is ExtensionObject castedObject)
                 {
                     return castedObject.MemberwiseClone();
                 }
@@ -1664,8 +1654,7 @@ namespace Opc.Ua
 
             // copy Argument.
             {
-                Argument castedObject = value as Argument;
-                if (castedObject != null)
+                if (value is ExtensionObject castedObject)
                 {
                     return castedObject.MemberwiseClone();
                 }
@@ -1673,8 +1662,7 @@ namespace Opc.Ua
 
             // copy NodeId.
             {
-                NodeId castedObject = value as NodeId;
-                if (castedObject != null)
+                if (value is ExtensionObject castedObject)
                 {
                     return castedObject.MemberwiseClone();
                 }
@@ -1682,8 +1670,7 @@ namespace Opc.Ua
 
             // copy UInt32Collection.
             {
-                UInt32Collection castedObject = value as UInt32Collection;
-                if (castedObject != null)
+                if (value is ExtensionObject castedObject)
                 {
                     return castedObject.MemberwiseClone();
                 }
@@ -1691,8 +1678,7 @@ namespace Opc.Ua
 
             // copy QualifiedName.
             {
-                QualifiedName castedObject = value as QualifiedName;
-                if (castedObject != null)
+                if (value is ExtensionObject castedObject)
                 {
                     return castedObject.MemberwiseClone();
                 }
@@ -1700,8 +1686,7 @@ namespace Opc.Ua
 
             // copy ServerDiagnosticsSummaryDataType.
             {
-                ServerDiagnosticsSummaryDataType castedObject = value as ServerDiagnosticsSummaryDataType;
-                if (castedObject != null)
+                if (value is ExtensionObject castedObject)
                 {
                     return castedObject.MemberwiseClone();
                 }
@@ -1709,8 +1694,7 @@ namespace Opc.Ua
 
             // copy ApplicationDescription.
             {
-                ApplicationDescription castedObject = value as ApplicationDescription;
-                if (castedObject != null)
+                if (value is ExtensionObject castedObject)
                 {
                     return castedObject.MemberwiseClone();
                 }
@@ -1718,8 +1702,7 @@ namespace Opc.Ua
 
             // copy StringCollection.
             {
-                StringCollection castedObject = value as StringCollection;
-                if (castedObject != null)
+                if (value is ExtensionObject castedObject)
                 {
                     return castedObject.MemberwiseClone();
                 }
@@ -1727,8 +1710,7 @@ namespace Opc.Ua
 
             // copy UserTokenPolicyCollection.
             {
-                UserTokenPolicyCollection castedObject = value as UserTokenPolicyCollection;
-                if (castedObject != null)
+                if (value is ExtensionObject castedObject)
                 {
                     return castedObject.MemberwiseClone();
                 }
@@ -1736,8 +1718,7 @@ namespace Opc.Ua
 
             // copy UserTokenPolicy
             {
-                UserTokenPolicy castedObject = value as UserTokenPolicy;
-                if (castedObject != null)
+                if (value is ExtensionObject castedObject)
                 {
                     return castedObject.MemberwiseClone();
                 }
@@ -1745,8 +1726,7 @@ namespace Opc.Ua
 
             // copy SessionDiagnosticsDataType
             {
-                SessionDiagnosticsDataType castedObject = value as SessionDiagnosticsDataType;
-                if (castedObject != null)
+                if (value is ExtensionObject castedObject)
                 {
                     return castedObject.MemberwiseClone();
                 }
@@ -1754,8 +1734,7 @@ namespace Opc.Ua
 
             // copy ServiceCounterDataType
             {
-                ServiceCounterDataType castedObject = value as ServiceCounterDataType;
-                if (castedObject != null)
+                if (value is ExtensionObject castedObject)
                 {
                     return castedObject.MemberwiseClone();
                 }
@@ -1763,8 +1742,7 @@ namespace Opc.Ua
 
             // copy SessionSecurityDiagnosticsDataType
             {
-                SessionSecurityDiagnosticsDataType castedObject = value as SessionSecurityDiagnosticsDataType;
-                if (castedObject != null)
+                if (value is ExtensionObject castedObject)
                 {
                     return castedObject.MemberwiseClone();
                 }
@@ -1772,8 +1750,7 @@ namespace Opc.Ua
 
             // copy AnonymousIdentityToken
             {
-                AnonymousIdentityToken castedObject = value as AnonymousIdentityToken;
-                if (castedObject != null)
+                if (value is ExtensionObject castedObject)
                 {
                     return castedObject.MemberwiseClone();
                 }
@@ -1781,8 +1758,7 @@ namespace Opc.Ua
 
             // copy EventFilter.
             {
-                EventFilter castedObject = value as EventFilter;
-                if (castedObject != null)
+                if (value is ExtensionObject castedObject)
                 {
                     return castedObject.MemberwiseClone();
                 }
@@ -1790,8 +1766,7 @@ namespace Opc.Ua
 
             // copy DataChangeFilter.
             {
-                DataChangeFilter castedObject = value as DataChangeFilter;
-                if (castedObject != null)
+                if (value is ExtensionObject castedObject)
                 {
                     return castedObject.MemberwiseClone();
                 }
@@ -1799,8 +1774,7 @@ namespace Opc.Ua
 
             // copy SimpleAttributeOperandCollection.
             {
-                SimpleAttributeOperandCollection castedObject = value as SimpleAttributeOperandCollection;
-                if (castedObject != null)
+                if (value is ExtensionObject castedObject)
                 {
                     return castedObject.MemberwiseClone();
                 }
@@ -1808,8 +1782,7 @@ namespace Opc.Ua
 
             // copy SimpleAttributeOperand.
             {
-                SimpleAttributeOperand castedObject = value as SimpleAttributeOperand;
-                if (castedObject != null)
+                if (value is ExtensionObject castedObject)
                 {
                     return castedObject.MemberwiseClone();
                 }
@@ -1817,8 +1790,7 @@ namespace Opc.Ua
 
             // copy QualifiedNameCollection.
             {
-                QualifiedNameCollection castedObject = value as QualifiedNameCollection;
-                if (castedObject != null)
+                if (value is ExtensionObject castedObject)
                 {
                     return castedObject.MemberwiseClone();
                 }
@@ -1826,16 +1798,14 @@ namespace Opc.Ua
 
             // copy ContentFilter.
             {
-                ContentFilter castedObject = value as ContentFilter;
-                if (castedObject != null)
+                if (value is ExtensionObject castedObject)
                 {
                     return castedObject.MemberwiseClone();
                 }
             }
             // copy ContentFilterElement.
             {
-                ContentFilterElement castedObject = value as ContentFilterElement;
-                if (castedObject != null)
+                if (value is ExtensionObject castedObject)
                 {
                     return castedObject.MemberwiseClone();
                 }
@@ -1843,112 +1813,98 @@ namespace Opc.Ua
 
             // copy ContentFilterElementCollection.
             {
-                ContentFilterElementCollection castedObject = value as ContentFilterElementCollection;
-                if (castedObject != null)
+                if (value is ExtensionObject castedObject)
                 {
                     return castedObject.MemberwiseClone();
                 }
             }
             // copy SubscriptionDiagnosticsDataType.
             {
-                SubscriptionDiagnosticsDataType castedObject = value as SubscriptionDiagnosticsDataType;
-                if (castedObject != null)
+                if (value is ExtensionObject castedObject)
                 {
                     return castedObject.MemberwiseClone();
                 }
             }
             // copy UserNameIdentityToken.
             {
-                UserNameIdentityToken castedObject = value as UserNameIdentityToken;
-                if (castedObject != null)
+                if (value is ExtensionObject castedObject)
                 {
                     return castedObject.MemberwiseClone();
                 }
             }
             // copy ServerStatusDataType.
             {
-                ServerStatusDataType castedObject = value as ServerStatusDataType;
-                if (castedObject != null)
+                if (value is ExtensionObject castedObject)
                 {
                     return castedObject.MemberwiseClone();
                 }
             }
             // copy BuildInfo.
             {
-                BuildInfo castedObject = value as BuildInfo;
-                if (castedObject != null)
+                if (value is ExtensionObject castedObject)
                 {
                     return castedObject.MemberwiseClone();
                 }
             }
             // copy X509IdentityToken.
             {
-                X509IdentityToken castedObject = value as X509IdentityToken;
-                if (castedObject != null)
+                if (value is ExtensionObject castedObject)
                 {
                     return castedObject.MemberwiseClone();
                 }
             }
             // copy Opc.Ua.Range.
             {
-                Opc.Ua.Range castedObject = value as Opc.Ua.Range;
-                if (castedObject != null)
+                if (value is ExtensionObject castedObject)
                 {
                     return castedObject.MemberwiseClone();
                 }
             }
             // copy Opc.Ua.EUInformation
             {
-                Opc.Ua.EUInformation castedObject = value as Opc.Ua.EUInformation;
-                if (castedObject != null)
+                if (value is ExtensionObject castedObject)
                 {
                     return castedObject.MemberwiseClone();
                 }
             }
             // copy Opc.Ua.WriteValueCollection
             {
-                Opc.Ua.WriteValueCollection castedObject = value as Opc.Ua.WriteValueCollection;
-                if (castedObject != null)
+                if (value is ExtensionObject castedObject)
                 {
                     return castedObject.MemberwiseClone();
                 }
             }
             // copy Opc.Ua.WriteValue
             {
-                Opc.Ua.WriteValue castedObject = value as Opc.Ua.WriteValue;
-                if (castedObject != null)
+                if (value is ExtensionObject castedObject)
                 {
                     return castedObject.MemberwiseClone();
                 }
             }
             // copy Opc.Ua.DataValue
             {
-                Opc.Ua.DataValue castedObject = value as Opc.Ua.DataValue;
-                if (castedObject != null)
+                if (value is ExtensionObject castedObject)
                 {
                     return castedObject.MemberwiseClone();
                 }
             }
             // copy Opc.Ua.ExpandedNodeId
             {
-                ExpandedNodeId castedObject = value as ExpandedNodeId;
-                if (castedObject != null)
+                if (value is ExtensionObject castedObject)
                 {
                     return castedObject.MemberwiseClone();
                 }
             }
             // copy Opc.Ua.TimeZoneDataType
             {
-                TimeZoneDataType castedObject = value as TimeZoneDataType;
-                if (castedObject != null)
+                if (value is ExtensionObject castedObject)
                 {
                     return castedObject.MemberwiseClone();
                 }
             }
             // copy Opc.Ua.LiteralOperand
             {
-                LiteralOperand castedObject = value as LiteralOperand;
-                if (castedObject != null)
+                if (value is ExtensionObject castedObject)
                 {
                     return castedObject.MemberwiseClone();
                 }
@@ -2015,23 +1971,21 @@ namespace Opc.Ua
             }
 
             // check for DateTime objects
-            if (value1 is DateTime)
+            if (value1 is DateTime dateTime)
             {
-                return (Utils.ToOpcUaUniversalTime((DateTime)value1).CompareTo(Utils.ToOpcUaUniversalTime((DateTime)value2))) == 0;
+                return (Utils.ToOpcUaUniversalTime(dateTime).CompareTo(Utils.ToOpcUaUniversalTime((DateTime)value2))) == 0;
             }
 
             // check for compareable objects.
-            IComparable comparable1 = value1 as IComparable;
 
-            if (comparable1 != null)
+            if (value1 is IComparable comparable1)
             {
                 return comparable1.CompareTo(value2) == 0;
             }
 
             // check for encodeable objects.
-            IEncodeable encodeable1 = value1 as IEncodeable;
 
-            if (encodeable1 != null)
+            if (value1 is IEncodeable encodeable1)
             {
                 IEncodeable encodeable2 = value2 as IEncodeable;
 
@@ -2044,9 +1998,8 @@ namespace Opc.Ua
             }
 
             // check for XmlElement objects.
-            XmlElement element1 = value1 as XmlElement;
 
-            if (element1 != null)
+            if (value1 is XmlElement element1)
             {
                 XmlElement element2 = value2 as XmlElement;
 
@@ -2059,9 +2012,8 @@ namespace Opc.Ua
             }
 
             // check for arrays.
-            Array array1 = value1 as Array;
 
-            if (array1 != null)
+            if (value1 is Array array1)
             {
                 Array array2 = value2 as Array;
 
@@ -2093,9 +2045,8 @@ namespace Opc.Ua
             }
 
             // check enumerables.
-            IEnumerable enumerable1 = value1 as IEnumerable;
 
-            if (enumerable1 != null)
+            if (value1 is IEnumerable enumerable1)
             {
                 IEnumerable enumerable2 = value2 as IEnumerable;
 
@@ -2564,9 +2515,7 @@ namespace Opc.Ua
             {
                 for (int ii = 0; ii < attributes.Length; ii++)
                 {
-                    DataMemberAttribute contract = attributes[ii] as DataMemberAttribute;
-
-                    if (contract != null)
+                    if (attributes[ii] is DataMemberAttribute contract)
                     {
                         if (String.IsNullOrEmpty(contract.Name))
                         {
