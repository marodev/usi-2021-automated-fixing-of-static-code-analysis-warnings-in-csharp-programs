diff --git a/src/Microsoft.AspNet.OData.Shared/Builder/ContainmentPathBuilder.cs b/src/Microsoft.AspNet.OData.Shared/Builder/ContainmentPathBuilder.cs
index 0d76f38b9..84aee22de 100644
--- a/src/Microsoft.AspNet.OData.Shared/Builder/ContainmentPathBuilder.cs
+++ b/src/Microsoft.AspNet.OData.Shared/Builder/ContainmentPathBuilder.cs
@@ -127,8 +127,7 @@ private void AddTypeCastsIfNecessary()
             List<ODataPathSegment> newSegments = new List<ODataPathSegment>();
             foreach (ODataPathSegment segment in _segments)
             {
-                NavigationPropertySegment navProp = segment as NavigationPropertySegment;
-                if (navProp != null && owningType != null &&
+                if (segment is NavigationPropertySegment navProp && owningType != null &&
                     owningType.FindProperty(navProp.NavigationProperty.Name) == null)
                 {
                     // need a type cast
@@ -153,20 +152,17 @@ private static IEdmEntityType GetTargetEntityType(ODataPathSegment segment)
         {
             Contract.Assert(segment != null);
 
-            EntitySetSegment entitySetSegment = segment as EntitySetSegment;
-            if (entitySetSegment != null)
+            if (segment is EntitySetSegment entitySetSegment)
             {
                 return entitySetSegment.EntitySet.EntityType();
             }
 
-            SingletonSegment singletonSegment = segment as SingletonSegment;
-            if (singletonSegment != null)
+            if (segment is SingletonSegment singletonSegment)
             {
                 return singletonSegment.Singleton.EntityType();
             }
 
-            NavigationPropertySegment navigationPropertySegment = segment as NavigationPropertySegment;
-            if (navigationPropertySegment != null)
+            if (segment is NavigationPropertySegment navigationPropertySegment)
             {
                 return navigationPropertySegment.NavigationSource.EntityType();
             }
diff --git a/src/Microsoft.AspNet.OData.Shared/Builder/Conventions/AbstractTypeDiscoveryConvention.cs b/src/Microsoft.AspNet.OData.Shared/Builder/Conventions/AbstractTypeDiscoveryConvention.cs
index 40c984aeb..f12e82a20 100644
--- a/src/Microsoft.AspNet.OData.Shared/Builder/Conventions/AbstractTypeDiscoveryConvention.cs
+++ b/src/Microsoft.AspNet.OData.Shared/Builder/Conventions/AbstractTypeDiscoveryConvention.cs
@@ -11,8 +11,7 @@ internal class AbstractTypeDiscoveryConvention : IEdmTypeConvention
     {
         public void Apply(IEdmTypeConfiguration edmTypeConfiguration, ODataConventionModelBuilder model)
         {
-            StructuralTypeConfiguration structuralType = edmTypeConfiguration as StructuralTypeConfiguration;
-            if (structuralType != null && structuralType.IsAbstract == null)
+            if (edmTypeConfiguration is StructuralTypeConfiguration structuralType && structuralType.IsAbstract == null)
             {
                 structuralType.IsAbstract = TypeHelper.IsAbstract(structuralType.ClrType);
             }
diff --git a/src/Microsoft.AspNet.OData.Shared/Builder/Conventions/Attributes/ActionOnDeleteAttributeConvention.cs b/src/Microsoft.AspNet.OData.Shared/Builder/Conventions/Attributes/ActionOnDeleteAttributeConvention.cs
index 3d556fcbd..ec051943a 100644
--- a/src/Microsoft.AspNet.OData.Shared/Builder/Conventions/Attributes/ActionOnDeleteAttributeConvention.cs
+++ b/src/Microsoft.AspNet.OData.Shared/Builder/Conventions/Attributes/ActionOnDeleteAttributeConvention.cs
@@ -21,9 +21,7 @@ public ActionOnDeleteAttributeConvention()
             {
                 throw Error.ArgumentNull("edmProperty");
             }
-
-            ActionOnDeleteAttribute actionOnDelete = attribute as ActionOnDeleteAttribute;
-            if (actionOnDelete != null && !edmProperty.AddedExplicitly && edmProperty.DependentProperties.Any())
+            if (attribute is ActionOnDeleteAttribute actionOnDelete && !edmProperty.AddedExplicitly && edmProperty.DependentProperties.Any())
             {
                 edmProperty.OnDeleteAction = actionOnDelete.OnDeleteAction;
             }
diff --git a/src/Microsoft.AspNet.OData.Shared/Builder/Conventions/Attributes/AttributeEdmPropertyConvention.cs b/src/Microsoft.AspNet.OData.Shared/Builder/Conventions/Attributes/AttributeEdmPropertyConvention.cs
index ef3348c99..54137a1be 100644
--- a/src/Microsoft.AspNet.OData.Shared/Builder/Conventions/Attributes/AttributeEdmPropertyConvention.cs
+++ b/src/Microsoft.AspNet.OData.Shared/Builder/Conventions/Attributes/AttributeEdmPropertyConvention.cs
@@ -42,8 +42,7 @@ protected AttributeEdmPropertyConvention(Func<Attribute, bool> attributeFilter,
                 throw Error.ArgumentNull("structuralTypeConfiguration");
             }
 
-            TPropertyConfiguration property = edmProperty as TPropertyConfiguration;
-            if (property != null)
+            if (edmProperty is TPropertyConfiguration property)
             {
                 Apply(property, structuralTypeConfiguration, model);
             }
diff --git a/src/Microsoft.AspNet.OData.Shared/Builder/Conventions/Attributes/AttributeEdmTypeConvention.cs b/src/Microsoft.AspNet.OData.Shared/Builder/Conventions/Attributes/AttributeEdmTypeConvention.cs
index f4ac7acea..02ba225b9 100644
--- a/src/Microsoft.AspNet.OData.Shared/Builder/Conventions/Attributes/AttributeEdmTypeConvention.cs
+++ b/src/Microsoft.AspNet.OData.Shared/Builder/Conventions/Attributes/AttributeEdmTypeConvention.cs
@@ -30,8 +30,7 @@ protected AttributeEdmTypeConvention(Func<Attribute, bool> attributeFilter, bool
         /// <param name="model">The model that this edm type belongs to.</param>
         public void Apply(IEdmTypeConfiguration edmTypeConfiguration, ODataConventionModelBuilder model)
         {
-            TEdmTypeConfiguration type = edmTypeConfiguration as TEdmTypeConfiguration;
-            if (type != null)
+            if (edmTypeConfiguration is TEdmTypeConfiguration type)
             {
                 Apply(type, model);
             }
diff --git a/src/Microsoft.AspNet.OData.Shared/Builder/Conventions/Attributes/DataContractAttributeEdmTypeConvention.cs b/src/Microsoft.AspNet.OData.Shared/Builder/Conventions/Attributes/DataContractAttributeEdmTypeConvention.cs
index 642581dde..8ef573754 100644
--- a/src/Microsoft.AspNet.OData.Shared/Builder/Conventions/Attributes/DataContractAttributeEdmTypeConvention.cs
+++ b/src/Microsoft.AspNet.OData.Shared/Builder/Conventions/Attributes/DataContractAttributeEdmTypeConvention.cs
@@ -42,8 +42,7 @@ public DataContractAttributeEdmTypeConvention()
                 model.ModelAliasingEnabled)
             {
                 // set the name, and namespace, if not null
-                DataContractAttribute dataContractAttribute = attribute as DataContractAttribute;
-                if (dataContractAttribute != null)
+                if (attribute is DataContractAttribute dataContractAttribute)
                 {
                     if (dataContractAttribute.Name != null)
                     {
diff --git a/src/Microsoft.AspNet.OData.Shared/Builder/Conventions/Attributes/DataContractAttributeEnumTypeConvention.cs b/src/Microsoft.AspNet.OData.Shared/Builder/Conventions/Attributes/DataContractAttributeEnumTypeConvention.cs
index 1cc236c1a..404aca449 100644
--- a/src/Microsoft.AspNet.OData.Shared/Builder/Conventions/Attributes/DataContractAttributeEnumTypeConvention.cs
+++ b/src/Microsoft.AspNet.OData.Shared/Builder/Conventions/Attributes/DataContractAttributeEnumTypeConvention.cs
@@ -42,8 +42,7 @@ public DataContractAttributeEnumTypeConvention()
                 model.ModelAliasingEnabled)
             {
                 // set the name, and namespace, if not null
-                DataContractAttribute dataContractAttribute = attribute as DataContractAttribute;
-                if (dataContractAttribute != null)
+                if (attribute is DataContractAttribute dataContractAttribute)
                 {
                     if (dataContractAttribute.Name != null)
                     {
@@ -61,13 +60,11 @@ public DataContractAttributeEnumTypeConvention()
             IEnumerable<EnumMemberConfiguration> allMembers = enumTypeConfiguration.Members.ToArray();
             foreach (EnumMemberConfiguration member in allMembers)
             {
-                EnumMemberAttribute enumMemberAttribute =
-                    enumTypeConfiguration.ClrType.GetField(member.Name)
-                        .GetCustomAttributes(typeof(EnumMemberAttribute), inherit: true)
-                        .FirstOrDefault() as EnumMemberAttribute;
                 if (!member.AddedExplicitly)
                 {
-                    if (model.ModelAliasingEnabled && enumMemberAttribute != null)
+                    if (model.ModelAliasingEnabled &&                     enumTypeConfiguration.ClrType.GetField(member.Name)
+                        .GetCustomAttributes(typeof(EnumMemberAttribute), inherit: true)
+                        .FirstOrDefault() is EnumMemberAttribute enumMemberAttribute)
                     {
                         if (!String.IsNullOrWhiteSpace(enumMemberAttribute.Value))
                         {
diff --git a/src/Microsoft.AspNet.OData.Shared/Builder/Conventions/Attributes/DataMemberAttributeEdmPropertyConvention.cs b/src/Microsoft.AspNet.OData.Shared/Builder/Conventions/Attributes/DataMemberAttributeEdmPropertyConvention.cs
index 226986968..2d61f435b 100644
--- a/src/Microsoft.AspNet.OData.Shared/Builder/Conventions/Attributes/DataMemberAttributeEdmPropertyConvention.cs
+++ b/src/Microsoft.AspNet.OData.Shared/Builder/Conventions/Attributes/DataMemberAttributeEdmPropertyConvention.cs
@@ -40,9 +40,8 @@ public DataMemberAttributeEdmPropertyConvention()
             }
 
             bool isTypeDataContract = TypeHelper.AsMemberInfo(structuralTypeConfiguration.ClrType).GetCustomAttributes(typeof(DataContractAttribute), inherit: true).Any();
-            DataMemberAttribute dataMember = attribute as DataMemberAttribute;
 
-            if (isTypeDataContract && dataMember != null && !edmProperty.AddedExplicitly)
+            if (isTypeDataContract && attribute is DataMemberAttribute dataMember && !edmProperty.AddedExplicitly)
             {
                 // set the name alias
                 if (model.ModelAliasingEnabled &&
@@ -51,14 +50,12 @@ public DataMemberAttributeEdmPropertyConvention()
                     edmProperty.Name = dataMember.Name;
                 }
 
-                StructuralPropertyConfiguration structuralProperty = edmProperty as StructuralPropertyConfiguration;
-                if (structuralProperty != null)
+                if (edmProperty is StructuralPropertyConfiguration structuralProperty)
                 {
                     structuralProperty.OptionalProperty = !dataMember.IsRequired;
                 }
 
-                NavigationPropertyConfiguration navigationProperty = edmProperty as NavigationPropertyConfiguration;
-                if (navigationProperty != null && navigationProperty.Multiplicity != EdmMultiplicity.Many)
+                if (edmProperty is NavigationPropertyConfiguration navigationProperty && navigationProperty.Multiplicity != EdmMultiplicity.Many)
                 {
                     if (dataMember.IsRequired)
                     {
diff --git a/src/Microsoft.AspNet.OData.Shared/Builder/Conventions/Attributes/DefaultValueAttributeEdmPropertyConvention.cs b/src/Microsoft.AspNet.OData.Shared/Builder/Conventions/Attributes/DefaultValueAttributeEdmPropertyConvention.cs
index 17c17378a..430843cf9 100644
--- a/src/Microsoft.AspNet.OData.Shared/Builder/Conventions/Attributes/DefaultValueAttributeEdmPropertyConvention.cs
+++ b/src/Microsoft.AspNet.OData.Shared/Builder/Conventions/Attributes/DefaultValueAttributeEdmPropertyConvention.cs
@@ -33,9 +33,7 @@ public DefaultValueAttributeEdmPropertyConvention()
             {
                 throw Error.ArgumentNull("edmProperty");
             }
-
-            DefaultValueAttribute defaultValueAttribute = attribute as DefaultValueAttribute;
-            if (!edmProperty.AddedExplicitly && defaultValueAttribute != null && defaultValueAttribute.Value != null)
+            if (!edmProperty.AddedExplicitly && attribute is DefaultValueAttribute defaultValueAttribute && defaultValueAttribute.Value != null)
             {
                 if (edmProperty.Kind == PropertyKind.Primitive)
                 {
diff --git a/src/Microsoft.AspNet.OData.Shared/Builder/Conventions/Attributes/KeyAttributeEdmPropertyConvention.cs b/src/Microsoft.AspNet.OData.Shared/Builder/Conventions/Attributes/KeyAttributeEdmPropertyConvention.cs
index 745c1e6f7..b9acbbe7b 100644
--- a/src/Microsoft.AspNet.OData.Shared/Builder/Conventions/Attributes/KeyAttributeEdmPropertyConvention.cs
+++ b/src/Microsoft.AspNet.OData.Shared/Builder/Conventions/Attributes/KeyAttributeEdmPropertyConvention.cs
@@ -38,10 +38,7 @@ public KeyAttributeEdmPropertyConvention()
             if (edmProperty.Kind == PropertyKind.Primitive || edmProperty.Kind == PropertyKind.Enum)
             {
                 EntityTypeConfiguration entity = structuralTypeConfiguration as EntityTypeConfiguration;
-                if (entity != null)
-                {
-                    entity.HasKey(edmProperty.PropertyInfo);
-                }
+                entity?.HasKey(edmProperty.PropertyInfo);
             }
         }
     }
diff --git a/src/Microsoft.AspNet.OData.Shared/Builder/Conventions/Attributes/RequiredAttributeEdmPropertyConvention.cs b/src/Microsoft.AspNet.OData.Shared/Builder/Conventions/Attributes/RequiredAttributeEdmPropertyConvention.cs
index dfc86ccef..5e8f4e203 100644
--- a/src/Microsoft.AspNet.OData.Shared/Builder/Conventions/Attributes/RequiredAttributeEdmPropertyConvention.cs
+++ b/src/Microsoft.AspNet.OData.Shared/Builder/Conventions/Attributes/RequiredAttributeEdmPropertyConvention.cs
@@ -37,14 +37,12 @@ public RequiredAttributeEdmPropertyConvention()
 
             if (!edmProperty.AddedExplicitly)
             {
-                StructuralPropertyConfiguration structuralProperty = edmProperty as StructuralPropertyConfiguration;
-                if (structuralProperty != null)
+                if (edmProperty is StructuralPropertyConfiguration structuralProperty)
                 {
                     structuralProperty.OptionalProperty = false;
                 }
 
-                NavigationPropertyConfiguration navigationProperty = edmProperty as NavigationPropertyConfiguration;
-                if (navigationProperty != null && navigationProperty.Multiplicity != EdmMultiplicity.Many)
+                if (edmProperty is NavigationPropertyConfiguration navigationProperty && navigationProperty.Multiplicity != EdmMultiplicity.Many)
                 {
                     navigationProperty.Required();
                 }
diff --git a/src/Microsoft.AspNet.OData.Shared/Builder/Conventions/Attributes/TimestampAttributeEdmPropertyConvention.cs b/src/Microsoft.AspNet.OData.Shared/Builder/Conventions/Attributes/TimestampAttributeEdmPropertyConvention.cs
index 044e64c10..b2e6dc6ff 100644
--- a/src/Microsoft.AspNet.OData.Shared/Builder/Conventions/Attributes/TimestampAttributeEdmPropertyConvention.cs
+++ b/src/Microsoft.AspNet.OData.Shared/Builder/Conventions/Attributes/TimestampAttributeEdmPropertyConvention.cs
@@ -20,8 +20,7 @@ public TimestampAttributeEdmPropertyConvention()
             Attribute attribute,
             ODataConventionModelBuilder model)
         {
-            EntityTypeConfiguration entity = structuralTypeConfiguration as EntityTypeConfiguration;
-            if (entity != null)
+            if (structuralTypeConfiguration is EntityTypeConfiguration entity)
             {
                 PrimitivePropertyConfiguration[] timestampProperties = GetPropertiesWithTimestamp(entity);
 
diff --git a/src/Microsoft.AspNet.OData.Shared/Builder/Conventions/ConventionsHelpers.cs b/src/Microsoft.AspNet.OData.Shared/Builder/Conventions/ConventionsHelpers.cs
index 21a419442..d4a6ff8ba 100644
--- a/src/Microsoft.AspNet.OData.Shared/Builder/Conventions/ConventionsHelpers.cs
+++ b/src/Microsoft.AspNet.OData.Shared/Builder/Conventions/ConventionsHelpers.cs
@@ -155,8 +155,7 @@ public static IEnumerable<PropertyInfo> IgnoredProperties(this StructuralTypeCon
                 return Enumerable.Empty<PropertyInfo>();
             }
 
-            EntityTypeConfiguration entityType = structuralType as EntityTypeConfiguration;
-            if (entityType != null)
+            if (structuralType is EntityTypeConfiguration entityType)
             {
                 return entityType.IgnoredProperties.Concat(entityType.BaseType.IgnoredProperties());
             }
diff --git a/src/Microsoft.AspNet.OData.Shared/Builder/Conventions/EntityTypeConvention.cs b/src/Microsoft.AspNet.OData.Shared/Builder/Conventions/EntityTypeConvention.cs
index 0188c81e3..f7ce0c51f 100644
--- a/src/Microsoft.AspNet.OData.Shared/Builder/Conventions/EntityTypeConvention.cs
+++ b/src/Microsoft.AspNet.OData.Shared/Builder/Conventions/EntityTypeConvention.cs
@@ -15,8 +15,7 @@ protected EntityTypeConvention()
 
         public void Apply(IEdmTypeConfiguration edmTypeConfiguration, ODataConventionModelBuilder model)
         {
-            EntityTypeConfiguration entity = edmTypeConfiguration as EntityTypeConfiguration;
-            if (entity != null)
+            if (edmTypeConfiguration is EntityTypeConfiguration entity)
             {
                 Apply(entity, model);
             }
diff --git a/src/Microsoft.AspNet.OData.Shared/Builder/Conventions/ForeignKeyDiscoveryConvention.cs b/src/Microsoft.AspNet.OData.Shared/Builder/Conventions/ForeignKeyDiscoveryConvention.cs
index 3eabb7bd7..984f1694b 100644
--- a/src/Microsoft.AspNet.OData.Shared/Builder/Conventions/ForeignKeyDiscoveryConvention.cs
+++ b/src/Microsoft.AspNet.OData.Shared/Builder/Conventions/ForeignKeyDiscoveryConvention.cs
@@ -27,8 +27,7 @@ internal class ForeignKeyDiscoveryConvention : IEdmPropertyConvention<Navigation
                 throw Error.ArgumentNull("edmProperty");
             }
 
-            NavigationPropertyConfiguration navigationProperty = edmProperty as NavigationPropertyConfiguration;
-            if (navigationProperty != null)
+            if (edmProperty is NavigationPropertyConfiguration navigationProperty)
             {
                 Apply(navigationProperty, structuralTypeConfiguration, model);
             }
@@ -74,7 +73,7 @@ internal class ForeignKeyDiscoveryConvention : IEdmPropertyConvention<Navigation
             IDictionary<PrimitivePropertyConfiguration, PrimitivePropertyConfiguration> typeNameForeignKeys =
                 GetForeignKeys(principalEntityType, dependentEntityType);
 
-            if (typeNameForeignKeys.Any() && typeNameForeignKeys.Count() == principalEntityType.Keys.Count())
+            if (typeNameForeignKeys.Any() && typeNameForeignKeys.Count == principalEntityType.Keys.Count())
             {
                 foreach (KeyValuePair<PrimitivePropertyConfiguration, PrimitivePropertyConfiguration> foreignKey
                     in typeNameForeignKeys)
diff --git a/src/Microsoft.AspNet.OData.Shared/Builder/Conventions/SelfLinksGenerationConvention.cs b/src/Microsoft.AspNet.OData.Shared/Builder/Conventions/SelfLinksGenerationConvention.cs
index 2ba44eea7..1c4afde2c 100644
--- a/src/Microsoft.AspNet.OData.Shared/Builder/Conventions/SelfLinksGenerationConvention.cs
+++ b/src/Microsoft.AspNet.OData.Shared/Builder/Conventions/SelfLinksGenerationConvention.cs
@@ -19,8 +19,7 @@ public void Apply(NavigationSourceConfiguration configuration, ODataModelBuilder
             }
 
             // Configure the self link for the feed
-            EntitySetConfiguration entitySet = configuration as EntitySetConfiguration;
-            if (entitySet != null && (entitySet.GetFeedSelfLink() == null))
+            if (configuration is EntitySetConfiguration entitySet && (entitySet.GetFeedSelfLink() == null))
             {
                 entitySet.HasFeedSelfLink(feedContext =>
                 {
diff --git a/src/Microsoft.AspNet.OData.Shared/Builder/EdmModelHelperMethods.cs b/src/Microsoft.AspNet.OData.Shared/Builder/EdmModelHelperMethods.cs
index a161d9311..69c7e30e5 100644
--- a/src/Microsoft.AspNet.OData.Shared/Builder/EdmModelHelperMethods.cs
+++ b/src/Microsoft.AspNet.OData.Shared/Builder/EdmModelHelperMethods.cs
@@ -176,14 +176,13 @@ private static string ConvertBindingPath(EdmTypeMap edmMap, NavigationPropertyBi
             foreach (MemberInfo bindingInfo in binding.Path)
             {
                 Type typeCast = TypeHelper.AsType(bindingInfo);
-                PropertyInfo propertyInfo = bindingInfo as PropertyInfo;
 
                 if (typeCast != null)
                 {
                     IEdmType edmType = edmMap.EdmTypes[typeCast];
                     bindings.Add(edmType.FullTypeName());
                 }
-                else if (propertyInfo != null)
+                else if (bindingInfo is PropertyInfo propertyInfo)
                 {
                     bindings.Add(edmMap.EdmProperties[propertyInfo].Name);
                 }
@@ -224,19 +223,15 @@ private static void AddOperationParameters(this EdmModel model, EdmOperation ope
 
         private static void AddOperationLinkBuilder(IEdmModel model, IEdmOperation operation, OperationConfiguration operationConfiguration)
         {
-            ActionConfiguration actionConfiguration = operationConfiguration as ActionConfiguration;
-            IEdmAction action = operation as IEdmAction;
-            FunctionConfiguration functionConfiguration = operationConfiguration as FunctionConfiguration;
-            IEdmFunction function = operation as IEdmFunction;
             if (operationConfiguration.BindingParameter.TypeConfiguration.Kind == EdmTypeKind.Entity)
             {
-                if (actionConfiguration != null && actionConfiguration.GetActionLink() != null && action != null)
+                if (operationConfiguration is ActionConfiguration actionConfiguration && actionConfiguration.GetActionLink() != null && operation is IEdmAction action)
                 {
                     model.SetOperationLinkBuilder(
                         action,
                         new OperationLinkBuilder(actionConfiguration.GetActionLink(), actionConfiguration.FollowsConventions));
                 }
-                else if (functionConfiguration != null && functionConfiguration.GetFunctionLink() != null && function != null)
+                else if (operationConfiguration is FunctionConfiguration functionConfiguration && functionConfiguration.GetFunctionLink() != null && operation is IEdmFunction function)
                 {
                     model.SetOperationLinkBuilder(
                         function,
@@ -250,13 +245,13 @@ private static void AddOperationLinkBuilder(IEdmModel model, IEdmOperation opera
 
                 if (collectionTypeConfiguration.ElementType.Kind == EdmTypeKind.Entity)
                 {
-                    if (actionConfiguration != null && actionConfiguration.GetFeedActionLink() != null && action != null)
+                    if (operationConfiguration is ActionConfiguration actionConfiguration && actionConfiguration.GetFeedActionLink() != null && operation is IEdmAction action)
                     {
                         model.SetOperationLinkBuilder(
                             action,
                             new OperationLinkBuilder(actionConfiguration.GetFeedActionLink(), actionConfiguration.FollowsConventions));
                     }
-                    else if (functionConfiguration != null && functionConfiguration.GetFeedFunctionLink() != null && function != null)
+                    else if (operationConfiguration is FunctionConfiguration functionConfiguration && functionConfiguration.GetFeedFunctionLink() != null && operation is IEdmFunction function)
                     {
                         model.SetOperationLinkBuilder(
                             function,
@@ -653,8 +648,7 @@ private static void AddCoreAndValidationVocabularyAnnotations(this EdmModel mode
                 IEdmProperty value;
                 if (edmTypeMap.EdmProperties.TryGetValue(property.PropertyInfo, out value))
                 {
-                    var item = value as IEdmStructuralProperty;
-                    if (item != null)
+                    if (value is IEdmStructuralProperty item)
                     {
                         edmProperties.Add(item);
                     }
@@ -900,8 +894,7 @@ private static IEdmExpression GetEdmEntitySetExpression(IDictionary<string, EdmN
                 EdmNavigationSource navigationSource;
                 if (navigationSources.TryGetValue(operationConfiguration.NavigationSource.Name, out navigationSource))
                 {
-                    EdmEntitySet entitySet = navigationSource as EdmEntitySet;
-                    if (entitySet != null)
+                    if (navigationSource is EdmEntitySet entitySet)
                     {
                         return new EdmPathExpression(entitySet.Name);
                     }
diff --git a/src/Microsoft.AspNet.OData.Shared/Builder/NavigationPropertyExtensions.cs b/src/Microsoft.AspNet.OData.Shared/Builder/NavigationPropertyExtensions.cs
index 2c2694063..6d0c6265d 100644
--- a/src/Microsoft.AspNet.OData.Shared/Builder/NavigationPropertyExtensions.cs
+++ b/src/Microsoft.AspNet.OData.Shared/Builder/NavigationPropertyExtensions.cs
@@ -82,11 +82,7 @@ internal static class NavigationPropertyExtensions
             {
                 path.Push(property.PropertyInfo);
 
-                NavigationPropertyConfiguration nav = property as NavigationPropertyConfiguration;
-                ComplexPropertyConfiguration complex = property as ComplexPropertyConfiguration;
-                CollectionPropertyConfiguration collection = property as CollectionPropertyConfiguration;
-
-                if (nav != null)
+                if (property is NavigationPropertyConfiguration nav)
                 {
                     // how about the containment?
                     IList<MemberInfo> bindingPath = path.Reverse().ToList();
@@ -95,7 +91,7 @@ internal static class NavigationPropertyExtensions
                         new Tuple<StructuralTypeConfiguration, IList<MemberInfo>, NavigationPropertyConfiguration>(configuration,
                             bindingPath, nav));
                 }
-                else if (complex != null && !typesAlreadyProcessed.Contains(complex.RelatedClrType))
+                else if (property is ComplexPropertyConfiguration complex && !typesAlreadyProcessed.Contains(complex.RelatedClrType))
                 {
                     StructuralTypeConfiguration complexType = builder.GetTypeConfigurationOrNull(complex.RelatedClrType) as StructuralTypeConfiguration;
 
@@ -104,7 +100,7 @@ internal static class NavigationPropertyExtensions
                     builder.FindAllNavigationPropertiesRecursive(complexType, navs, path, typesAlreadyProcessed);
                     typesAlreadyProcessed.Remove(complex.RelatedClrType);
                 }
-                else if (collection != null && !typesAlreadyProcessed.Contains(collection.ElementType))
+                else if (property is CollectionPropertyConfiguration collection && !typesAlreadyProcessed.Contains(collection.ElementType))
                 {
                     IEdmTypeConfiguration edmType = builder.GetTypeConfigurationOrNull(collection.ElementType);
                     if (edmType != null && edmType.Kind == EdmTypeKind.Complex)
diff --git a/src/Microsoft.AspNet.OData.Shared/Builder/NavigationSourceConfiguration.cs b/src/Microsoft.AspNet.OData.Shared/Builder/NavigationSourceConfiguration.cs
index 8dc530a2d..a8ed5ac27 100644
--- a/src/Microsoft.AspNet.OData.Shared/Builder/NavigationSourceConfiguration.cs
+++ b/src/Microsoft.AspNet.OData.Shared/Builder/NavigationSourceConfiguration.cs
@@ -546,8 +546,7 @@ private static Type VerifyBindingSegment(Type current, MemberInfo info)
             Contract.Assert(current != null);
             Contract.Assert(info != null);
 
-            TypeInfo derivedType = info as TypeInfo;
-            if (derivedType != null)
+            if (info is TypeInfo derivedType)
             {
                 if (!(derivedType.IsAssignableFrom(current) || current.IsAssignableFrom(derivedType.BaseType)))
                 {
diff --git a/src/Microsoft.AspNet.OData.Shared/Builder/ODataConventionModelBuilder.cs b/src/Microsoft.AspNet.OData.Shared/Builder/ODataConventionModelBuilder.cs
index 78cbfa189..f024f9039 100644
--- a/src/Microsoft.AspNet.OData.Shared/Builder/ODataConventionModelBuilder.cs
+++ b/src/Microsoft.AspNet.OData.Shared/Builder/ODataConventionModelBuilder.cs
@@ -945,8 +945,7 @@ private void PruneUnreachableTypes()
                     IEdmTypeConfiguration propertyType = GetStructuralTypeOrNull(property.RelatedClrType);
                     Contract.Assert(propertyType != null, "we should already have seen this type");
 
-                    var structuralTypeConfiguration = propertyType as StructuralTypeConfiguration;
-                    if (structuralTypeConfiguration != null && !visitedTypes.Contains(propertyType))
+                    if (propertyType is StructuralTypeConfiguration structuralTypeConfiguration && !visitedTypes.Contains(propertyType))
                     {
                         reachableTypes.Enqueue(structuralTypeConfiguration);
                     }
@@ -1005,13 +1004,9 @@ private void ApplyTypeAndPropertyConventions(StructuralTypeConfiguration edmType
             foreach (IConvention convention in _conventions)
             {
                 IEdmTypeConvention typeConvention = convention as IEdmTypeConvention;
-                if (typeConvention != null)
-                {
-                    typeConvention.Apply(edmTypeConfiguration, this);
-                }
+                typeConvention?.Apply(edmTypeConfiguration, this);
 
-                IEdmPropertyConvention propertyConvention = convention as IEdmPropertyConvention;
-                if (propertyConvention != null)
+                if (convention is IEdmPropertyConvention propertyConvention)
                 {
                     ApplyPropertyConvention(propertyConvention, edmTypeConfiguration);
                 }
@@ -1032,10 +1027,7 @@ private void ApplyNavigationSourceConventions(NavigationSourceConfiguration navi
 
                 foreach (INavigationSourceConvention convention in _conventions.OfType<INavigationSourceConvention>())
                 {
-                    if (convention != null)
-                    {
-                        convention.Apply(navigationSourceConfiguration, this);
-                    }
+                    convention?.Apply(navigationSourceConfiguration, this);
                 }
             }
         }
diff --git a/src/Microsoft.AspNet.OData.Shared/Builder/ODataModelBuilder.cs b/src/Microsoft.AspNet.OData.Shared/Builder/ODataModelBuilder.cs
index 7a8244d48..baf5516e5 100644
--- a/src/Microsoft.AspNet.OData.Shared/Builder/ODataModelBuilder.cs
+++ b/src/Microsoft.AspNet.OData.Shared/Builder/ODataModelBuilder.cs
@@ -503,8 +503,7 @@ public virtual bool RemoveEntitySet(string name)
 
             if (_navigationSources.ContainsKey(name))
             {
-                EntitySetConfiguration entitySet = _navigationSources[name] as EntitySetConfiguration;
-                if (entitySet != null)
+                if (_navigationSources[name] is EntitySetConfiguration entitySet)
                 {
                     return _navigationSources.Remove(name);
                 }
@@ -527,8 +526,7 @@ public virtual bool RemoveSingleton(string name)
 
             if (_navigationSources.ContainsKey(name))
             {
-                SingletonConfiguration singleton = _navigationSources[name] as SingletonConfiguration;
-                if (singleton != null)
+                if (_navigationSources[name] is SingletonConfiguration singleton)
                 {
                     return _navigationSources.Remove(name);
                 }
diff --git a/src/Microsoft.AspNet.OData.Shared/Common/CollectionExtensions.cs b/src/Microsoft.AspNet.OData.Shared/Common/CollectionExtensions.cs
index b81e25ee9..201d3b3e1 100644
--- a/src/Microsoft.AspNet.OData.Shared/Common/CollectionExtensions.cs
+++ b/src/Microsoft.AspNet.OData.Shared/Common/CollectionExtensions.cs
@@ -52,8 +52,7 @@ public static Collection<T> AsCollection<T>(this IEnumerable<T> enumerable)
         {
             Contract.Assert(enumerable != null);
 
-            Collection<T> collection = enumerable as Collection<T>;
-            if (collection != null)
+            if (enumerable is Collection<T> collection)
             {
                 return collection;
             }
@@ -73,8 +72,7 @@ public static IList<T> AsIList<T>(this IEnumerable<T> enumerable)
         {
             Contract.Assert(enumerable != null);
 
-            IList<T> list = enumerable as IList<T>;
-            if (list != null)
+            if (enumerable is IList<T> list)
             {
                 return list;
             }
@@ -89,13 +87,12 @@ public static List<T> AsList<T>(this IEnumerable<T> enumerable)
         {
             Contract.Assert(enumerable != null);
 
-            List<T> list = enumerable as List<T>;
-            if (list != null)
+            if (enumerable is List<T> list)
             {
                 return list;
             }
-            ListWrapperCollection<T> listWrapper = enumerable as ListWrapperCollection<T>;
-            if (listWrapper != null)
+
+            if (enumerable is ListWrapperCollection<T> listWrapper)
             {
                 return listWrapper.ItemsList;
             }
@@ -148,8 +145,7 @@ public static void RemoveFrom<T>(this List<T> list, int start)
             TMatch result = null;
             for (int i = 0; i < list.Count; i++)
             {
-                TMatch typedValue = list[i] as TMatch;
-                if (typedValue != null)
+                if (list[i] is TMatch typedValue)
                 {
                     if (result == null)
                     {
@@ -219,8 +215,7 @@ public static void RemoveFrom<T>(this List<T> list, int start)
             Contract.Assert(list != null);
             Contract.Assert(keySelector != null);
 
-            TValue[] array = list as TValue[];
-            if (array != null)
+            if (list is TValue[] array)
             {
                 return ToDictionaryFast(array, keySelector, comparer);
             }
@@ -235,13 +230,12 @@ public static void RemoveFrom<T>(this List<T> list, int start)
             Contract.Assert(enumerable != null);
             Contract.Assert(keySelector != null);
 
-            TValue[] array = enumerable as TValue[];
-            if (array != null)
+            if (enumerable is TValue[] array)
             {
                 return ToDictionaryFast(array, keySelector, comparer);
             }
-            IList<TValue> list = enumerable as IList<TValue>;
-            if (list != null)
+
+            if (enumerable is IList<TValue> list)
             {
                 return ToDictionaryFastNoCheck(list, keySelector, comparer);
             }
diff --git a/src/Microsoft.AspNet.OData.Shared/DeltaOfTStructuralType.cs b/src/Microsoft.AspNet.OData.Shared/DeltaOfTStructuralType.cs
index 64c5830fb..4118c8041 100644
--- a/src/Microsoft.AspNet.OData.Shared/DeltaOfTStructuralType.cs
+++ b/src/Microsoft.AspNet.OData.Shared/DeltaOfTStructuralType.cs
@@ -393,10 +393,7 @@ public void Put(TStructuralType original)
 
             if (source.Count == 0)
             {
-                if (dest != null)
-                {
-                    dest.Clear();
-                }
+                dest?.Clear();
             }
             else
             {
@@ -595,10 +592,7 @@ private void CopyUnchangedDynamicValues(TStructuralType targetEntity)
 
             if (_dynamicDictionaryCache == null)
             {
-                if (toDictionary != null)
-                {
-                    toDictionary.Clear();
-                }
+                toDictionary?.Clear();
             }
             else
             {
diff --git a/src/Microsoft.AspNet.OData.Shared/ETagMessageHandler.cs b/src/Microsoft.AspNet.OData.Shared/ETagMessageHandler.cs
index 003071384..d8a7e6140 100644
--- a/src/Microsoft.AspNet.OData.Shared/ETagMessageHandler.cs
+++ b/src/Microsoft.AspNet.OData.Shared/ETagMessageHandler.cs
@@ -76,8 +76,7 @@ private static IEdmEntityTypeReference GetTypeReference(IEdmModel model, IEdmEnt
                 return null;
             }
 
-            IEdmObject edmObject = value as IEdmEntityObject;
-            if (edmObject != null)
+            if (value is IEdmEntityObject edmObject)
             {
                 IEdmTypeReference edmTypeReference = edmObject.GetEdmType();
                 return edmTypeReference.AsEntity();
@@ -159,8 +158,7 @@ internal static IEdmEntityType GetSingleEntityEntityType(ODataPath path)
                 return (IEdmEntityType)path.EdmType;
             }
 
-            NavigationPropertySegment navigationPropertySegment = currentSegment as NavigationPropertySegment;
-            if (navigationPropertySegment != null)
+            if (currentSegment is NavigationPropertySegment navigationPropertySegment)
             {
                 if (navigationPropertySegment.NavigationProperty.TargetMultiplicity() == EdmMultiplicity.ZeroOrOne ||
                     navigationPropertySegment.NavigationProperty.TargetMultiplicity() == EdmMultiplicity.One)
diff --git a/src/Microsoft.AspNet.OData.Shared/EnableQueryAttribute.cs b/src/Microsoft.AspNet.OData.Shared/EnableQueryAttribute.cs
index c2cc1b0e0..edf60e068 100644
--- a/src/Microsoft.AspNet.OData.Shared/EnableQueryAttribute.cs
+++ b/src/Microsoft.AspNet.OData.Shared/EnableQueryAttribute.cs
@@ -707,10 +707,7 @@ public virtual object ApplyQuery(object entity, ODataQueryOptions queryOptions)
                 // Ensure any active/open database objects that were created
                 // iterating over the IQueryable object are properly closed.
                 var disposable = enumerator as IDisposable;
-                if (disposable != null)
-                {
-                    disposable.Dispose();
-                }
+                disposable?.Dispose();
             }
         }
 
diff --git a/src/Microsoft.AspNet.OData.Shared/ExpressionHelperMethods.cs b/src/Microsoft.AspNet.OData.Shared/ExpressionHelperMethods.cs
index d65c9c71f..e62c77ada 100644
--- a/src/Microsoft.AspNet.OData.Shared/ExpressionHelperMethods.cs
+++ b/src/Microsoft.AspNet.OData.Shared/ExpressionHelperMethods.cs
@@ -432,8 +432,8 @@ private static MethodInfo GetCreateQueryGenericMethod()
         {
             return typeof(IQueryProvider).GetTypeInfo()
                 .GetDeclaredMethods("CreateQuery")
-                .Where(m => m.IsGenericMethod)
-                .FirstOrDefault();
+                .FirstOrDefault(m => m.IsGenericMethod)
+;
         }
     }
 }
diff --git a/src/Microsoft.AspNet.OData.Shared/Formatter/Deserialization/ODataActionPayloadDeserializer.cs b/src/Microsoft.AspNet.OData.Shared/Formatter/Deserialization/ODataActionPayloadDeserializer.cs
index 870a178e1..2470c1a5a 100644
--- a/src/Microsoft.AspNet.OData.Shared/Formatter/Deserialization/ODataActionPayloadDeserializer.cs
+++ b/src/Microsoft.AspNet.OData.Shared/Formatter/Deserialization/ODataActionPayloadDeserializer.cs
@@ -151,11 +151,9 @@ internal static IEdmAction GetAction(ODataDeserializerContext readContext)
             if (path.PathTemplate == "~/unboundaction")
             {
                 // only one segment, it may be an unbound action
-                OperationImportSegment unboundActionSegment = path.Segments.Last() as OperationImportSegment;
-                if (unboundActionSegment != null)
+                if (path.Segments.Last() is OperationImportSegment unboundActionSegment)
                 {
-                    IEdmActionImport actionImport = unboundActionSegment.OperationImports.First() as IEdmActionImport;
-                    if (actionImport != null)
+                    if (unboundActionSegment.OperationImports.First() is IEdmActionImport actionImport)
                     {
                         action = actionImport.Action;
                     }
@@ -164,8 +162,7 @@ internal static IEdmAction GetAction(ODataDeserializerContext readContext)
             else
             {
                 // otherwise, it may be a bound action
-                OperationSegment actionSegment = path.Segments.Last() as OperationSegment;
-                if (actionSegment != null)
+                if (path.Segments.Last() is OperationSegment actionSegment)
                 {
                     action = actionSegment.Operations.First() as IEdmAction;
                 }
@@ -292,8 +289,7 @@ private static void ProcessResourceSet(object feed, IEdmCollectionTypeReference
             IEdmTypeReference elementTypeReference = resourceSetType.ElementType();
             Contract.Assert(elementTypeReference.IsStructured());
 
-            IEnumerable enumerable = result as IEnumerable;
-            if (enumerable != null)
+            if (result is IEnumerable enumerable)
             {
                 if (readContext.IsUntyped)
                 {
diff --git a/src/Microsoft.AspNet.OData.Shared/Formatter/Deserialization/ODataReaderExtensions.cs b/src/Microsoft.AspNet.OData.Shared/Formatter/Deserialization/ODataReaderExtensions.cs
index e86b4bcf3..e25375b82 100644
--- a/src/Microsoft.AspNet.OData.Shared/Formatter/Deserialization/ODataReaderExtensions.cs
+++ b/src/Microsoft.AspNet.OData.Shared/Formatter/Deserialization/ODataReaderExtensions.cs
@@ -86,8 +86,8 @@ private static void ReadCollectionItem(ODataReader reader, Stack<ODataItemBase>
                     else
                     {
                         ODataItemBase parentItem = itemsStack.Peek();
-                        ODataResourceSetWrapper parentResourceSet = parentItem as ODataResourceSetWrapper;
-                        if (parentResourceSet != null)
+
+                        if (parentItem is ODataResourceSetWrapper parentResourceSet)
                         {
                             parentResourceSet.Resources.Add(resourceWrapper);
                         }
diff --git a/src/Microsoft.AspNet.OData.Shared/Formatter/EdmLibHelpers.cs b/src/Microsoft.AspNet.OData.Shared/Formatter/EdmLibHelpers.cs
index 7a907d188..4032b21c4 100644
--- a/src/Microsoft.AspNet.OData.Shared/Formatter/EdmLibHelpers.cs
+++ b/src/Microsoft.AspNet.OData.Shared/Formatter/EdmLibHelpers.cs
@@ -438,8 +438,8 @@ public static bool IsNotExpandable(IEdmProperty edmProperty, IEdmModel edmModel)
             bool isSelectPresent = false, ModelBoundQuerySettings querySettings = null)
         {
             List<IEdmNavigationProperty> autoExpandNavigationProperties = new List<IEdmNavigationProperty>();
-            IEdmEntityType baseEntityType = pathStructuredType as IEdmEntityType;
-            if (baseEntityType != null)
+
+            if (pathStructuredType is IEdmEntityType baseEntityType)
             {
                 List<IEdmEntityType> entityTypes = new List<IEdmEntityType>();
                 entityTypes.Add(baseEntityType);
@@ -471,8 +471,8 @@ public static bool IsNotExpandable(IEdmProperty edmProperty, IEdmModel edmModel)
             ModelBoundQuerySettings querySettings = null)
         {
             List<IEdmStructuralProperty> autoSelectProperties = new List<IEdmStructuralProperty>();
-            IEdmEntityType baseEntityType = pathStructuredType as IEdmEntityType;
-            if (baseEntityType != null)
+
+            if (pathStructuredType is IEdmEntityType baseEntityType)
             {
                 List<IEdmEntityType> entityTypes = new List<IEdmEntityType>();
                 entityTypes.Add(baseEntityType);
@@ -637,8 +637,7 @@ public static IEdmType GetElementType(IEdmTypeReference edmTypeReference)
                 IEnumerable<ODataPathSegment> reverseSegments = segments.Reverse();
                 foreach (var segment in reverseSegments)
                 {
-                    NavigationPropertySegment navigationPathSegment = segment as NavigationPropertySegment;
-                    if (navigationPathSegment != null)
+                    if (segment is NavigationPropertySegment navigationPathSegment)
                     {
                         property = navigationPathSegment.NavigationProperty;
                         if (structuredType == null)
@@ -650,8 +649,7 @@ public static IEdmType GetElementType(IEdmTypeReference edmTypeReference)
                         return;
                     }
 
-                    PropertySegment propertyAccessPathSegment = segment as PropertySegment;
-                    if (propertyAccessPathSegment != null)
+                    if (segment is PropertySegment propertyAccessPathSegment)
                     {
                         property = propertyAccessPathSegment.Property;
                         if (structuredType == null)
@@ -662,8 +660,7 @@ public static IEdmType GetElementType(IEdmTypeReference edmTypeReference)
                         return;
                     }
 
-                    EntitySetSegment entitySetSegment = segment as EntitySetSegment;
-                    if (entitySetSegment != null)
+                    if (segment is EntitySetSegment entitySetSegment)
                     {
                         if (structuredType == null)
                         {
@@ -673,8 +670,7 @@ public static IEdmType GetElementType(IEdmTypeReference edmTypeReference)
                         return;
                     }
 
-                    TypeSegment typeSegment = segment as TypeSegment;
-                    if (typeSegment != null)
+                    if (segment is TypeSegment typeSegment)
                     {
                         structuredType = GetElementType(typeSegment.EdmType.ToEdmTypeReference(false)) as IEdmStructuredType;
                         typeCast = "/" + structuredType;
@@ -846,27 +842,24 @@ public static IEnumerable<IEdmStructuralProperty> GetConcurrencyProperties(this
 
             IList<IEdmStructuralProperty> results = new List<IEdmStructuralProperty>();
             IEdmEntityType entityType = navigationSource.EntityType();
-            IEdmVocabularyAnnotatable annotatable = navigationSource as IEdmVocabularyAnnotatable;
-            if (annotatable != null)
+
+            if (navigationSource is IEdmVocabularyAnnotatable annotatable)
             {
                 var annotations = model.FindVocabularyAnnotations<IEdmVocabularyAnnotation>(annotatable, CoreVocabularyModel.ConcurrencyTerm);
                 IEdmVocabularyAnnotation annotation = annotations.FirstOrDefault();
                 if (annotation != null)
                 {
-                    IEdmCollectionExpression properties = annotation.Value as IEdmCollectionExpression;
-                    if (properties != null)
+                    if (annotation.Value is IEdmCollectionExpression properties)
                     {
                         foreach (var property in properties.Elements)
                         {
-                            IEdmPathExpression pathExpression = property as IEdmPathExpression;
-                            if (pathExpression != null)
+                            if (property is IEdmPathExpression pathExpression)
                             {
                                 // So far, we only consider the single path, because only the direct properties from declaring type are used.
                                 // However we have an issue tracking on: https://github.com/OData/WebApi/issues/472
                                 string propertyName = pathExpression.PathSegments.First();
                                 IEdmProperty edmProperty = entityType.FindProperty(propertyName);
-                                IEdmStructuralProperty structuralProperty = edmProperty as IEdmStructuralProperty;
-                                if (structuralProperty != null)
+                                if (edmProperty is IEdmStructuralProperty structuralProperty)
                                 {
                                     results.Add(structuralProperty);
                                 }
diff --git a/src/Microsoft.AspNet.OData.Shared/Formatter/EdmPrimitiveHelpers.cs b/src/Microsoft.AspNet.OData.Shared/Formatter/EdmPrimitiveHelpers.cs
index b93c16ddf..30c666d5b 100644
--- a/src/Microsoft.AspNet.OData.Shared/Formatter/EdmPrimitiveHelpers.cs
+++ b/src/Microsoft.AspNet.OData.Shared/Formatter/EdmPrimitiveHelpers.cs
@@ -92,17 +92,15 @@ public static object ConvertPrimitiveValue(object value, Type type)
                 }
                 else if (type == typeof(DateTime))
                 {
-                    if (value is DateTimeOffset)
+                    if (value is DateTimeOffset dateTimeOffsetValue)
                     {
-                        DateTimeOffset dateTimeOffsetValue = (DateTimeOffset)value;
                         TimeZoneInfo timeZone = TimeZoneInfoHelper.TimeZone;
                         dateTimeOffsetValue = TimeZoneInfo.ConvertTime(dateTimeOffsetValue, timeZone);
                         return dateTimeOffsetValue.DateTime;
                     }
 
-                    if (value is Date)
+                    if (value is Date dt)
                     {
-                        Date dt = (Date)value;
                         return (DateTime)dt;
                     }
 
@@ -110,9 +108,8 @@ public static object ConvertPrimitiveValue(object value, Type type)
                 }
                 else if (type == typeof(TimeSpan))
                 {
-                    if (value is TimeOfDay)
+                    if (value is TimeOfDay tod)
                     {
-                        TimeOfDay tod = (TimeOfDay)value;
                         return (TimeSpan)tod;
                     }
 
diff --git a/src/Microsoft.AspNet.OData.Shared/Formatter/ODataMessageWrapper.cs b/src/Microsoft.AspNet.OData.Shared/Formatter/ODataMessageWrapper.cs
index 16dc5406b..81f303c35 100644
--- a/src/Microsoft.AspNet.OData.Shared/Formatter/ODataMessageWrapper.cs
+++ b/src/Microsoft.AspNet.OData.Shared/Formatter/ODataMessageWrapper.cs
@@ -161,10 +161,7 @@ protected void Dispose(bool disposing)
         {
             if (disposing)
             {
-                if (_stream != null)
-                {
-                    _stream.Dispose();
-                }
+                _stream?.Dispose();
             }
         }
     }
diff --git a/src/Microsoft.AspNet.OData.Shared/Formatter/ODataModelBinderConverter.cs b/src/Microsoft.AspNet.OData.Shared/Formatter/ODataModelBinderConverter.cs
index 7ac3f06f7..37fc0e956 100644
--- a/src/Microsoft.AspNet.OData.Shared/Formatter/ODataModelBinderConverter.cs
+++ b/src/Microsoft.AspNet.OData.Shared/Formatter/ODataModelBinderConverter.cs
@@ -55,16 +55,14 @@ public static class ODataModelBinderConverter
             }
 
             // collection of primitive, enum
-            ODataCollectionValue collectionValue = graph as ODataCollectionValue;
-            if (collectionValue != null)
+            if (graph is ODataCollectionValue collectionValue)
             {
                 return ConvertCollection(collectionValue, edmTypeReference, clrType, parameterName, readContext,
                     requestContainer);
             }
 
             // enum value
-            ODataEnumValue enumValue = graph as ODataEnumValue;
-            if (enumValue != null)
+            if (graph is ODataEnumValue enumValue)
             {
                 IEdmEnumTypeReference edmEnumType = edmTypeReference.AsEnum();
                 Contract.Assert(edmEnumType != null);
@@ -81,8 +79,7 @@ public static class ODataModelBinderConverter
             // primitive value
             if (edmTypeReference.IsPrimitive())
             {
-                ConstantNode node = graph as ConstantNode;
-                return EdmPrimitiveHelpers.ConvertPrimitiveValue(node != null ? node.Value : graph, clrType);
+                return EdmPrimitiveHelpers.ConvertPrimitiveValue(graph is ConstantNode node ? node.Value : graph, clrType);
             }
 
             // Resource, ResourceSet, Entity Reference or collection of entity reference
@@ -273,8 +270,8 @@ internal static object ConvertTo(string valueString, Type type)
                 (ODataResourceSetDeserializer)deserializerProvider.GetEdmTypeDeserializer(collectionType);
 
             object result = resourceSetDeserializer.ReadInline(resourceSet, collectionType, readContext);
-            IEnumerable enumerable = result as IEnumerable;
-            if (enumerable != null)
+
+            if (result is IEnumerable enumerable)
             {
                 IEnumerable newEnumerable = enumerable;
                 if (collectionType.ElementType().IsEntity())
diff --git a/src/Microsoft.AspNet.OData.Shared/Formatter/ODataOutputFormatterHelper.cs b/src/Microsoft.AspNet.OData.Shared/Formatter/ODataOutputFormatterHelper.cs
index 8b12a249c..241604ac2 100644
--- a/src/Microsoft.AspNet.OData.Shared/Formatter/ODataOutputFormatterHelper.cs
+++ b/src/Microsoft.AspNet.OData.Shared/Formatter/ODataOutputFormatterHelper.cs
@@ -271,8 +271,7 @@ private static ODataSerializer GetSerializer(Type type, object value, IWebApiReq
         {
             ODataSerializer serializer;
 
-            IEdmObject edmObject = value as IEdmObject;
-            if (edmObject != null)
+            if (value is IEdmObject edmObject)
             {
                 IEdmTypeReference edmType = edmObject.GetEdmType();
                 if (edmType == null)
@@ -315,18 +314,15 @@ private static string GetRootElementName(ODataPath path)
                 ODataPathSegment lastSegment = path.Segments.LastOrDefault();
                 if (lastSegment != null)
                 {
-                    OperationSegment actionSegment = lastSegment as OperationSegment;
-                    if (actionSegment != null)
+                    if (lastSegment is OperationSegment actionSegment)
                     {
-                        IEdmAction action = actionSegment.Operations.Single() as IEdmAction;
-                        if (action != null)
+                        if (actionSegment.Operations.Single() is IEdmAction action)
                         {
                             return action.Name;
                         }
                     }
 
-                    PropertySegment propertyAccessSegment = lastSegment as PropertySegment;
-                    if (propertyAccessSegment != null)
+                    if (lastSegment is PropertySegment propertyAccessSegment)
                     {
                         return propertyAccessSegment.Property.Name;
                     }
@@ -369,13 +365,13 @@ private static Microsoft.OData.UriParser.ODataPath ConvertPath(ODataPath path)
             {
                 var lastSegment = path.Segments.Last();
                 OperationSegment operation = lastSegment as OperationSegment;
-                if (operation != null && operation.EntitySet != null)
+                if (operation?.EntitySet != null)
                 {
                     return GeneratePath(operation.EntitySet);
                 }
 
                 OperationImportSegment operationImport = lastSegment as OperationImportSegment;
-                if (operationImport != null && operationImport.EntitySet != null)
+                if (operationImport?.EntitySet != null)
                 {
                     return GeneratePath(operationImport.EntitySet);
                 }
diff --git a/src/Microsoft.AspNet.OData.Shared/Formatter/ODataValueExtensions.cs b/src/Microsoft.AspNet.OData.Shared/Formatter/ODataValueExtensions.cs
index 784fc9d77..5e29f30f1 100644
--- a/src/Microsoft.AspNet.OData.Shared/Formatter/ODataValueExtensions.cs
+++ b/src/Microsoft.AspNet.OData.Shared/Formatter/ODataValueExtensions.cs
@@ -14,8 +14,7 @@ public static object GetInnerValue(this ODataValue odataValue)
                 return null;
             }
 
-            ODataPrimitiveValue oDataPrimitiveValue = odataValue as ODataPrimitiveValue;
-            if (oDataPrimitiveValue != null)
+            if (odataValue is ODataPrimitiveValue oDataPrimitiveValue)
             {
                 return oDataPrimitiveValue.Value;
             }
diff --git a/src/Microsoft.AspNet.OData.Shared/Formatter/QueryStringMediaTypeMapping.cs b/src/Microsoft.AspNet.OData.Shared/Formatter/QueryStringMediaTypeMapping.cs
index 3de58c1fd..8e63c7a3d 100644
--- a/src/Microsoft.AspNet.OData.Shared/Formatter/QueryStringMediaTypeMapping.cs
+++ b/src/Microsoft.AspNet.OData.Shared/Formatter/QueryStringMediaTypeMapping.cs
@@ -39,8 +39,7 @@ private bool DoesQueryStringMatch(IEnumerable<KeyValuePair<string, string>> quer
         {
             if (queryString != null)
             {
-                string queryValue = queryString.Where(kvp => kvp.Key == QueryStringParameterName)
-                    .FirstOrDefault()
+                string queryValue = queryString.FirstOrDefault(kvp => kvp.Key == QueryStringParameterName)
                     .Value;
 
                 if (queryValue != null)
diff --git a/src/Microsoft.AspNet.OData.Shared/Formatter/Serialization/ODataCollectionSerializer.cs b/src/Microsoft.AspNet.OData.Shared/Formatter/Serialization/ODataCollectionSerializer.cs
index f38479fd1..4aa64196f 100644
--- a/src/Microsoft.AspNet.OData.Shared/Formatter/Serialization/ODataCollectionSerializer.cs
+++ b/src/Microsoft.AspNet.OData.Shared/Formatter/Serialization/ODataCollectionSerializer.cs
@@ -125,8 +125,7 @@ public ODataCollectionSerializer(ODataSerializerProvider serializerProvider, boo
 
             if (graph != null)
             {
-                ODataCollectionValue collectionValue = CreateODataValue(graph, collectionType, writeContext) as ODataCollectionValue;
-                if (collectionValue != null)
+                if (CreateODataValue(graph, collectionType, writeContext) is ODataCollectionValue collectionValue)
                 {
                     foreach (object item in collectionValue.Items)
                     {
@@ -160,8 +159,7 @@ public ODataCollectionSerializer(ODataSerializerProvider serializerProvider, boo
 
             if (graph != null)
             {
-                ODataCollectionValue collectionValue = CreateODataValue(graph, collectionType, writeContext) as ODataCollectionValue;
-                if (collectionValue != null)
+                if (CreateODataValue(graph, collectionType, writeContext) is ODataCollectionValue collectionValue)
                 {
                     foreach (object item in collectionValue.Items)
                     {
diff --git a/src/Microsoft.AspNet.OData.Shared/Formatter/Serialization/ODataDeltaFeedSerializer.cs b/src/Microsoft.AspNet.OData.Shared/Formatter/Serialization/ODataDeltaFeedSerializer.cs
index 617b4bbff..9cba6a577 100644
--- a/src/Microsoft.AspNet.OData.Shared/Formatter/Serialization/ODataDeltaFeedSerializer.cs
+++ b/src/Microsoft.AspNet.OData.Shared/Formatter/Serialization/ODataDeltaFeedSerializer.cs
@@ -407,8 +407,7 @@ public override async Task WriteObjectAsync(object graph, Type type, ODataMessag
             if (writeContext.ExpandedResource == null)
             {
                 // If we have more OData format specific information apply it now, only if we are the root feed.
-                PageResult odataFeedAnnotations = feedInstance as PageResult;
-                if (odataFeedAnnotations != null)
+                if (feedInstance is PageResult odataFeedAnnotations)
                 {
                     feed.Count = odataFeedAnnotations.Count;
                     feed.NextPageLink = odataFeedAnnotations.NextPageLink;
diff --git a/src/Microsoft.AspNet.OData.Shared/Formatter/Serialization/ODataResourceSerializer.cs b/src/Microsoft.AspNet.OData.Shared/Formatter/Serialization/ODataResourceSerializer.cs
index 02ffd1b8c..76716d726 100644
--- a/src/Microsoft.AspNet.OData.Shared/Formatter/Serialization/ODataResourceSerializer.cs
+++ b/src/Microsoft.AspNet.OData.Shared/Formatter/Serialization/ODataResourceSerializer.cs
@@ -241,7 +241,7 @@ private ResourceContext GetResourceContext(object graph, ODataSerializerContext
             IEdmStructuredTypeReference structuredType = GetResourceType(graph, writeContext);
             ResourceContext resourceContext = new ResourceContext(writeContext, structuredType, graph);
             EdmDeltaEntityObject deltaResource = graph as EdmDeltaEntityObject;
-            if (deltaResource != null && deltaResource.NavigationSource != null)
+            if (deltaResource?.NavigationSource != null)
             {
                 resourceContext.NavigationSource = deltaResource.NavigationSource;
             }
diff --git a/src/Microsoft.AspNet.OData.Shared/Formatter/Serialization/ODataResourceSetSerializer.cs b/src/Microsoft.AspNet.OData.Shared/Formatter/Serialization/ODataResourceSetSerializer.cs
index 98ba88f5e..073225576 100644
--- a/src/Microsoft.AspNet.OData.Shared/Formatter/Serialization/ODataResourceSetSerializer.cs
+++ b/src/Microsoft.AspNet.OData.Shared/Formatter/Serialization/ODataResourceSetSerializer.cs
@@ -277,8 +277,7 @@ public override async Task WriteObjectAsync(object graph, Type type, ODataMessag
                 var odataOperations = CreateODataOperations(operations, resourceSetContext, writeContext);
                 foreach (var odataOperation in odataOperations)
                 {
-                    ODataAction action = odataOperation as ODataAction;
-                    if (action != null)
+                    if (odataOperation is ODataAction action)
                     {
                         resourceSet.AddAction(action);
                     }
@@ -292,8 +291,7 @@ public override async Task WriteObjectAsync(object graph, Type type, ODataMessag
             if (writeContext.ExpandedResource == null)
             {
                 // If we have more OData format specific information apply it now, only if we are the root feed.
-                PageResult odataResourceSetAnnotations = resourceSetInstance as PageResult;
-                if (odataResourceSetAnnotations != null)
+                if (resourceSetInstance is PageResult odataResourceSetAnnotations)
                 {
                     resourceSet.Count = odataResourceSetAnnotations.Count;
                     resourceSet.NextPageLink = odataResourceSetAnnotations.NextPageLink;
@@ -313,7 +311,7 @@ public override async Task WriteObjectAsync(object graph, Type type, ODataMessag
             else
             {
                 ICountOptionCollection countOptionCollection = resourceSetInstance as ICountOptionCollection;
-                if (countOptionCollection != null && countOptionCollection.TotalCount != null)
+                if (countOptionCollection?.TotalCount != null)
                 {
                     resourceSet.Count = countOptionCollection.TotalCount;
                 }
@@ -331,7 +329,7 @@ public override async Task WriteObjectAsync(object graph, Type type, ODataMessag
         /// <returns>The function that generates the NextLink from an object.</returns>
         internal static Func<Object, Uri> GetNextLinkGenerator(ODataResourceSetBase resourceSet, IEnumerable resourceSetInstance, ODataSerializerContext writeContext)
         {
-            if (resourceSet != null && resourceSet.NextPageLink != null)
+            if (resourceSet?.NextPageLink != null)
             {
                Uri defaultUri = resourceSet.NextPageLink;
                return (obj) => { return defaultUri; };
@@ -348,8 +346,7 @@ public override async Task WriteObjectAsync(object graph, Type type, ODataMessag
             else
             {
                 // nested resourceSet
-                ITruncatedCollection truncatedCollection = resourceSetInstance as ITruncatedCollection;
-                if (truncatedCollection != null && truncatedCollection.IsTruncated)
+                if (resourceSetInstance is ITruncatedCollection truncatedCollection && truncatedCollection.IsTruncated)
                 {
                     return (obj) => { return GetNestedNextPageLink(writeContext, truncatedCollection.PageSize, obj); };
                 }
@@ -409,8 +406,8 @@ public virtual ODataOperation CreateODataOperation(IEdmOperation operation, Reso
             Uri metadata = new Uri(baseUri, "#" + operation.FullName());
 
             ODataOperation odataOperation;
-            IEdmAction action = operation as IEdmAction;
-            if (action != null)
+
+            if (operation is IEdmAction action)
             {
                 odataOperation = new ODataAction();
             }
@@ -549,8 +546,7 @@ private static Uri GenerateQueryFromExpandedItem(ODataSerializerContext writeCon
                     }
                 }
 
-                ExpandedNavigationSelectItem expandedNavigationItem = writeContext.CurrentExpandedSelectItem as ExpandedNavigationSelectItem;
-                if (expandedNavigationItem != null)
+                if (writeContext.CurrentExpandedSelectItem is ExpandedNavigationSelectItem expandedNavigationItem)
                 {
                     newUri.SelectAndExpand = expandedNavigationItem.SelectAndExpand;
                 }
diff --git a/src/Microsoft.AspNet.OData.Shared/Formatter/Serialization/ODataResourceValueSerializer.cs b/src/Microsoft.AspNet.OData.Shared/Formatter/Serialization/ODataResourceValueSerializer.cs
index 0be29f7df..7414c2131 100644
--- a/src/Microsoft.AspNet.OData.Shared/Formatter/Serialization/ODataResourceValueSerializer.cs
+++ b/src/Microsoft.AspNet.OData.Shared/Formatter/Serialization/ODataResourceValueSerializer.cs
@@ -117,9 +117,8 @@ private ODataResourceValue CreateODataResourceValue(object graph, IEdmStructured
         {
             List<ODataProperty> properties = new List<ODataProperty>();
             ODataResourceValue resourceValue = new ODataResourceValue { TypeName = writeContext.GetEdmType(graph, graph.GetType()).FullName() };
-  
-            IDelta delta = graph as IDelta;
-            if (delta != null)
+
+            if (graph is IDelta delta)
             {
                 foreach (string propertyName in delta.GetChangedPropertyNames())
                 {
diff --git a/src/Microsoft.AspNet.OData.Shared/Formatter/Serialization/ODataSerializerContext.cs b/src/Microsoft.AspNet.OData.Shared/Formatter/Serialization/ODataSerializerContext.cs
index f98cfce09..0e1ea8f85 100644
--- a/src/Microsoft.AspNet.OData.Shared/Formatter/Serialization/ODataSerializerContext.cs
+++ b/src/Microsoft.AspNet.OData.Shared/Formatter/Serialization/ODataSerializerContext.cs
@@ -284,8 +284,7 @@ internal IEdmTypeReference GetEdmType(object instance, Type type)
         {
             IEdmTypeReference edmType;
 
-            IEdmObject edmObject = instance as IEdmObject;
-            if (edmObject != null)
+            if (instance is IEdmObject edmObject)
             {
                 edmType = edmObject.GetEdmType();
                 if (edmType == null)
diff --git a/src/Microsoft.AspNet.OData.Shared/Formatter/Serialization/SelectExpandNode.cs b/src/Microsoft.AspNet.OData.Shared/Formatter/Serialization/SelectExpandNode.cs
index 89b2aa887..234bf6e6c 100644
--- a/src/Microsoft.AspNet.OData.Shared/Formatter/Serialization/SelectExpandNode.cs
+++ b/src/Microsoft.AspNet.OData.Shared/Formatter/Serialization/SelectExpandNode.cs
@@ -328,7 +328,7 @@ private void BuildSelectExpand(SelectExpandClause selectExpandClause, EdmStructu
             IDictionary<IEdmStructuralProperty, SelectExpandIncludedProperty> currentLevelPropertiesInclude,
             EdmStructuralTypeInfo structuralTypeInfo)
         {
-            Contract.Assert(expandReferenceItem != null && expandReferenceItem.PathToNavigationProperty != null);
+            Contract.Assert(expandReferenceItem?.PathToNavigationProperty != null);
             Contract.Assert(currentLevelPropertiesInclude != null);
             Contract.Assert(structuralTypeInfo != null);
 
@@ -403,7 +403,7 @@ private void BuildSelectExpand(SelectExpandClause selectExpandClause, EdmStructu
             IDictionary<IEdmStructuralProperty, SelectExpandIncludedProperty> currentLevelPropertiesInclude,
             EdmStructuralTypeInfo structuralTypeInfo)
         {
-            Contract.Assert(pathSelectItem != null && pathSelectItem.SelectedPath != null);
+            Contract.Assert(pathSelectItem?.SelectedPath != null);
             Contract.Assert(currentLevelPropertiesInclude != null);
             Contract.Assert(structuralTypeInfo != null);
 
diff --git a/src/Microsoft.AspNet.OData.Shared/ODataNullValueMessageHandler.cs b/src/Microsoft.AspNet.OData.Shared/ODataNullValueMessageHandler.cs
index a60d571dc..36ed434ad 100644
--- a/src/Microsoft.AspNet.OData.Shared/ODataNullValueMessageHandler.cs
+++ b/src/Microsoft.AspNet.OData.Shared/ODataNullValueMessageHandler.cs
@@ -46,8 +46,7 @@ public partial class ODataNullValueMessageHandler
                 return null;
             }
 
-            KeySegment keySegment = segments[currentIndex] as KeySegment;
-            if (keySegment != null)
+            if (segments[currentIndex] is KeySegment keySegment)
             {
                 // Look at the previous segment to decide, but skip any possible sequence of cast segments in 
                 // between.
@@ -76,23 +75,20 @@ public partial class ODataNullValueMessageHandler
                 return null;
             }
 
-            PropertySegment propertySegment = segments[currentIndex] as PropertySegment;
-            if (propertySegment != null)
+            if (segments[currentIndex] is PropertySegment propertySegment)
             {
                 // Return 204 only if the property is single valued (not a collection of values).
                 return GetChangedStatusCodeForProperty(propertySegment);
             }
 
-            NavigationPropertySegment navigationSegment = segments[currentIndex] as NavigationPropertySegment;
-            if (navigationSegment != null)
+            if (segments[currentIndex] is NavigationPropertySegment navigationSegment)
             {
                 // Return 204 only if the navigation property is a single related entity and not a collection
                 // of entities.
                 return GetChangedStatusCodeForNavigationProperty(navigationSegment);
             }
 
-            SingletonSegment singletonSegment = segments[currentIndex] as SingletonSegment;
-            if (singletonSegment != null)
+            if (segments[currentIndex] is SingletonSegment singletonSegment)
             {
                 // Return 404 for a singleton with a null value.
                 return HttpStatusCode.NotFound;
diff --git a/src/Microsoft.AspNet.OData.Shared/ODataSwaggerConverter.cs b/src/Microsoft.AspNet.OData.Shared/ODataSwaggerConverter.cs
index b345c6817..54ed545f5 100644
--- a/src/Microsoft.AspNet.OData.Shared/ODataSwaggerConverter.cs
+++ b/src/Microsoft.AspNet.OData.Shared/ODataSwaggerConverter.cs
@@ -230,9 +230,7 @@ protected virtual void InitializeOperations()
                 }
                 else if (boundType.TypeKind == EdmTypeKind.Collection)
                 {
-                    IEdmCollectionType collectionType = boundType as IEdmCollectionType;
-
-                    if (collectionType != null && collectionType.ElementType.Definition.TypeKind == EdmTypeKind.Entity)
+                    if (boundType is IEdmCollectionType collectionType && collectionType.ElementType.Definition.TypeKind == EdmTypeKind.Entity)
                     {
                         IEdmEntityType entityType = (IEdmEntityType)collectionType.ElementType.Definition;
                         foreach (var entitySet in
diff --git a/src/Microsoft.AspNet.OData.Shared/Query/CountQueryOption.cs b/src/Microsoft.AspNet.OData.Shared/Query/CountQueryOption.cs
index a2ce501a7..f33a4787f 100644
--- a/src/Microsoft.AspNet.OData.Shared/Query/CountQueryOption.cs
+++ b/src/Microsoft.AspNet.OData.Shared/Query/CountQueryOption.cs
@@ -117,10 +117,7 @@ public void Validate(ODataValidationSettings validationSettings)
                 throw Error.ArgumentNull("validationSettings");
             }
 
-            if (Validator != null)
-            {
-                Validator.Validate(this, validationSettings);
-            }
+            Validator?.Validate(this, validationSettings);
         }
 
         /// <summary>
diff --git a/src/Microsoft.AspNet.OData.Shared/Query/DefaultSkipTokenHandler.cs b/src/Microsoft.AspNet.OData.Shared/Query/DefaultSkipTokenHandler.cs
index 3042610b4..fcb57c908 100644
--- a/src/Microsoft.AspNet.OData.Shared/Query/DefaultSkipTokenHandler.cs
+++ b/src/Microsoft.AspNet.OData.Shared/Query/DefaultSkipTokenHandler.cs
@@ -115,13 +115,13 @@ private static string GenerateSkipTokenValue(Object lastMember, IEdmModel model,
             string uriLiteral;
             object value;
             int lastIndex = propertiesForSkipToken.Count() - 1;
-            IEdmStructuredObject obj = lastMember as IEdmStructuredObject;
 
             foreach (IEdmProperty edmProperty in propertiesForSkipToken)
             {
                 bool islast = count == lastIndex;
                 string clrPropertyName = EdmLibHelpers.GetClrPropertyName(edmProperty, model);
-                if (obj != null)
+
+                if (lastMember is IEdmStructuredObject obj)
                 {
                     obj.TryGetPropertyValue(clrPropertyName, out value);
                 }
@@ -254,8 +254,8 @@ private static IQueryable ApplyToCore(IQueryable query, ODataQuerySettings query
                 object value = item.Value;
 
                 Expression compare = null;
-                ODataEnumValue enumValue = value as ODataEnumValue;
-                if (enumValue != null)
+
+                if (value is ODataEnumValue enumValue)
                 {
                     value = enumValue.Value;
                 }
@@ -419,8 +419,7 @@ private static IEnumerable<IEdmProperty> GetPropertiesForSkipToken(object lastMe
         /// <returns>The EdmType of the underlying instance.</returns>
         private static IEdmType GetTypeFromObject(object value, IEdmModel model)
         {
-            SelectExpandWrapper selectExpand = value as SelectExpandWrapper;
-            if (selectExpand != null)
+            if (value is SelectExpandWrapper selectExpand)
             {
                 IEdmTypeReference typeReference = selectExpand.GetEdmType();
                 return typeReference.Definition;
diff --git a/src/Microsoft.AspNet.OData.Shared/Query/Expressions/AggregationBinder.cs b/src/Microsoft.AspNet.OData.Shared/Query/Expressions/AggregationBinder.cs
index 8498cf2b7..70f73c401 100644
--- a/src/Microsoft.AspNet.OData.Shared/Query/Expressions/AggregationBinder.cs
+++ b/src/Microsoft.AspNet.OData.Shared/Query/Expressions/AggregationBinder.cs
@@ -86,8 +86,7 @@ private IEnumerable<AggregateExpressionBase> FixCustomMethodReturnTypes(IEnumera
         {
             return aggregateExpressions.Select(x =>
             {
-                var ae = x as AggregateExpression;
-                return ae != null ? FixCustomMethodReturnType(ae) : x;
+                return x is AggregateExpression ae ? FixCustomMethodReturnType(ae) : x;
             });
         }
 
diff --git a/src/Microsoft.AspNet.OData.Shared/Query/Expressions/AggregationPropertyContainer.cs b/src/Microsoft.AspNet.OData.Shared/Query/Expressions/AggregationPropertyContainer.cs
index d34f990eb..b0988deb8 100644
--- a/src/Microsoft.AspNet.OData.Shared/Query/Expressions/AggregationPropertyContainer.cs
+++ b/src/Microsoft.AspNet.OData.Shared/Query/Expressions/AggregationPropertyContainer.cs
@@ -60,10 +60,7 @@ public GroupByWrapper NestedValue
             bool includeAutoSelected)
         {
             base.ToDictionaryCore(dictionary, propertyMapper, includeAutoSelected);
-            if (Next != null)
-            {
-                Next.ToDictionaryCore(dictionary, propertyMapper, includeAutoSelected);
-            }
+            Next?.ToDictionaryCore(dictionary, propertyMapper, includeAutoSelected);
         }
 
         public override object GetValue()
diff --git a/src/Microsoft.AspNet.OData.Shared/Query/Expressions/DynamicTypeWrapper.cs b/src/Microsoft.AspNet.OData.Shared/Query/Expressions/DynamicTypeWrapper.cs
index f9ab8c295..0823776be 100644
--- a/src/Microsoft.AspNet.OData.Shared/Query/Expressions/DynamicTypeWrapper.cs
+++ b/src/Microsoft.AspNet.OData.Shared/Query/Expressions/DynamicTypeWrapper.cs
@@ -72,7 +72,7 @@ public override bool Equals(object obj)
             }
             var dictionary1 = this.Values;
             var dictionary2 = compareWith.Values;
-            return dictionary1.Count() == dictionary2.Count() && !dictionary1.Except(dictionary2).Any();
+            return dictionary1.Count == dictionary2.Count && !dictionary1.Except(dictionary2).Any();
         }
 
         /// <inheritdoc />
@@ -154,9 +154,7 @@ private void EnsureValues()
             if (!this._merged)
             {
                 // Base properties available via Instance can be real OData properties or generated in previous transformations
-
-                var instanceContainer = this.Instance as DynamicTypeWrapper;
-                if (instanceContainer != null)
+                if (this.Instance is DynamicTypeWrapper instanceContainer)
                 {
                     // Add proeprties generated in previous transformations to the collection
                     base.Values.MergeWithReplace(instanceContainer.Values);
diff --git a/src/Microsoft.AspNet.OData.Shared/Query/Expressions/DynamicTypeWrapperConverter.cs b/src/Microsoft.AspNet.OData.Shared/Query/Expressions/DynamicTypeWrapperConverter.cs
index 6bf0bdc67..c1e28bcbc 100644
--- a/src/Microsoft.AspNet.OData.Shared/Query/Expressions/DynamicTypeWrapperConverter.cs
+++ b/src/Microsoft.AspNet.OData.Shared/Query/Expressions/DynamicTypeWrapperConverter.cs
@@ -31,8 +31,7 @@ public override object ReadJson(JsonReader reader, Type objectType, object exist
 
         public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer)
         {
-            DynamicTypeWrapper dynamicTypeWrapper = value as DynamicTypeWrapper;
-            if (dynamicTypeWrapper != null)
+            if (value is DynamicTypeWrapper dynamicTypeWrapper)
             {
                 serializer.Serialize(writer, dynamicTypeWrapper.Values);
             }
diff --git a/src/Microsoft.AspNet.OData.Shared/Query/Expressions/FilterBinder.cs b/src/Microsoft.AspNet.OData.Shared/Query/Expressions/FilterBinder.cs
index 7d8d87371..233cebbc7 100644
--- a/src/Microsoft.AspNet.OData.Shared/Query/Expressions/FilterBinder.cs
+++ b/src/Microsoft.AspNet.OData.Shared/Query/Expressions/FilterBinder.cs
@@ -186,14 +186,11 @@ public override Expression Bind(QueryNode node)
             // Recursion guard to avoid stack overflows
             RuntimeHelpers.EnsureSufficientExecutionStack();
 
-            CollectionNode collectionNode = node as CollectionNode;
-            SingleValueNode singleValueNode = node as SingleValueNode;
-
-            if (collectionNode != null)
+            if (node is CollectionNode collectionNode)
             {
                 return BindCollectionNode(collectionNode);
             }
-            else if (singleValueNode != null)
+            else if (node is SingleValueNode singleValueNode)
             {
                 return BindSingleValueNode(singleValueNode);
             }
@@ -909,11 +906,10 @@ private ParameterExpression HandleLambdaParameters(IEnumerable<RangeVariable> ra
                     // for primitive collections rather than the inner element type of the collection.
                     // Remove this block of code when 481323 is resolved.
                     IEdmTypeReference edmTypeReference = rangeVariable.TypeReference;
-                    IEdmCollectionTypeReference collectionTypeReference = edmTypeReference as IEdmCollectionTypeReference;
-                    if (collectionTypeReference != null)
+
+                    if (edmTypeReference is IEdmCollectionTypeReference collectionTypeReference)
                     {
-                        IEdmCollectionType collectionType = collectionTypeReference.Definition as IEdmCollectionType;
-                        if (collectionType != null)
+                        if (collectionTypeReference.Definition is IEdmCollectionType collectionType)
                         {
                             edmTypeReference = collectionType.ElementType;
                         }
diff --git a/src/Microsoft.AspNet.OData.Shared/Query/Expressions/SelectExpandBinder.cs b/src/Microsoft.AspNet.OData.Shared/Query/Expressions/SelectExpandBinder.cs
index 805dbb7d3..27ce4b470 100644
--- a/src/Microsoft.AspNet.OData.Shared/Query/Expressions/SelectExpandBinder.cs
+++ b/src/Microsoft.AspNet.OData.Shared/Query/Expressions/SelectExpandBinder.cs
@@ -468,7 +468,7 @@ internal Expression ProjectElement(Expression source, SelectExpandClause selectE
             IDictionary<IEdmStructuralProperty, SelectExpandIncludedProperty> currentLevelPropertiesInclude,
             ref IDictionary<IEdmNavigationProperty, ExpandedReferenceSelectItem> propertiesToExpand)
         {
-            Contract.Assert(expandedItem != null && expandedItem.PathToNavigationProperty != null);
+            Contract.Assert(expandedItem?.PathToNavigationProperty != null);
             Contract.Assert(currentLevelPropertiesInclude != null);
 
             // Verify and process the $expand=... path.
@@ -524,7 +524,7 @@ internal Expression ProjectElement(Expression source, SelectExpandClause selectE
             IEdmNavigationSource navigationSource,
             IDictionary<IEdmStructuralProperty, SelectExpandIncludedProperty> currentLevelPropertiesInclude)
         {
-            Contract.Assert(pathSelectItem != null && pathSelectItem.SelectedPath != null);
+            Contract.Assert(pathSelectItem?.SelectedPath != null);
             Contract.Assert(currentLevelPropertiesInclude != null);
 
             // Verify and process the $select path
diff --git a/src/Microsoft.AspNet.OData.Shared/Query/Expressions/SelectExpandIncludedProperty.cs b/src/Microsoft.AspNet.OData.Shared/Query/Expressions/SelectExpandIncludedProperty.cs
index 054b9c921..b3a5292bc 100644
--- a/src/Microsoft.AspNet.OData.Shared/Query/Expressions/SelectExpandIncludedProperty.cs
+++ b/src/Microsoft.AspNet.OData.Shared/Query/Expressions/SelectExpandIncludedProperty.cs
@@ -181,8 +181,8 @@ public void AddSubExpandItem(IList<ODataPathSegment> remainingSegments, Expanded
             }
 
             ODataExpandPath newPath = new ODataExpandPath(remainingSegments);
-            ExpandedNavigationSelectItem expandedNav = oldRefItem as ExpandedNavigationSelectItem;
-            if (expandedNav != null)
+
+            if (oldRefItem is ExpandedNavigationSelectItem expandedNav)
             {
                 _subSelectItems.Add(new ExpandedNavigationSelectItem(newPath,
                     expandedNav.NavigationSource,
diff --git a/src/Microsoft.AspNet.OData.Shared/Query/Expressions/SelectExpandWrapper.cs b/src/Microsoft.AspNet.OData.Shared/Query/Expressions/SelectExpandWrapper.cs
index bfabc9302..0df0f13b3 100644
--- a/src/Microsoft.AspNet.OData.Shared/Query/Expressions/SelectExpandWrapper.cs
+++ b/src/Microsoft.AspNet.OData.Shared/Query/Expressions/SelectExpandWrapper.cs
@@ -51,9 +51,8 @@ public IEdmTypeReference GetEdmType()
             if (InstanceType != null)
             {
                 IEdmStructuredType structuredType = model.FindType(InstanceType) as IEdmStructuredType;
-                IEdmEntityType entityType = structuredType as IEdmEntityType;
 
-                if (entityType != null)
+                if (structuredType is IEdmEntityType entityType)
                 {
                     return entityType.ToEdmTypeReference(true);
                 }
diff --git a/src/Microsoft.AspNet.OData.Shared/Query/Expressions/SelectExpandWrapperConverter.cs b/src/Microsoft.AspNet.OData.Shared/Query/Expressions/SelectExpandWrapperConverter.cs
index 355754a22..af3479bea 100644
--- a/src/Microsoft.AspNet.OData.Shared/Query/Expressions/SelectExpandWrapperConverter.cs
+++ b/src/Microsoft.AspNet.OData.Shared/Query/Expressions/SelectExpandWrapperConverter.cs
@@ -37,8 +37,7 @@ public override object ReadJson(JsonReader reader, Type objectType, object exist
 
         public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer)
         {
-            ISelectExpandWrapper selectExpandWrapper = value as ISelectExpandWrapper;
-            if (selectExpandWrapper != null)
+            if (value is ISelectExpandWrapper selectExpandWrapper)
             {
                 serializer.Serialize(writer, selectExpandWrapper.ToDictionary(_mapperProvider));
             }
diff --git a/src/Microsoft.AspNet.OData.Shared/Query/FilterQueryOption.cs b/src/Microsoft.AspNet.OData.Shared/Query/FilterQueryOption.cs
index a7e1fd5f3..6b7ba8ac0 100644
--- a/src/Microsoft.AspNet.OData.Shared/Query/FilterQueryOption.cs
+++ b/src/Microsoft.AspNet.OData.Shared/Query/FilterQueryOption.cs
@@ -157,10 +157,7 @@ public void Validate(ODataValidationSettings validationSettings)
                 throw Error.ArgumentNull("validationSettings");
             }
 
-            if (Validator != null)
-            {
-                Validator.Validate(this, validationSettings);
-            }
+            Validator?.Validate(this, validationSettings);
         }
     }
 }
diff --git a/src/Microsoft.AspNet.OData.Shared/Query/ODataQueryOptions.cs b/src/Microsoft.AspNet.OData.Shared/Query/ODataQueryOptions.cs
index 13da5b7cf..532f56e65 100644
--- a/src/Microsoft.AspNet.OData.Shared/Query/ODataQueryOptions.cs
+++ b/src/Microsoft.AspNet.OData.Shared/Query/ODataQueryOptions.cs
@@ -581,10 +581,7 @@ public virtual void Validate(ODataValidationSettings validationSettings)
                 throw Error.ArgumentNull("validationSettings");
             }
 
-            if (Validator != null)
-            {
-                Validator.Validate(this, validationSettings);
-            }
+            Validator?.Validate(this, validationSettings);
         }
 
         private static void ThrowIfEmpty(string queryValue, string queryName)
@@ -833,7 +830,6 @@ private string GetAutoSelectRawValue()
         {
             var selectRawValue = RawValues.Select;
             var autoSelectRawValue = String.Empty;
-            IEdmEntityType baseEntityType = Context.TargetStructuredType as IEdmEntityType;
             if (String.IsNullOrEmpty(selectRawValue))
             {
                 var autoSelectProperties = EdmLibHelpers.GetAutoSelectProperties(Context.TargetProperty,
@@ -846,7 +842,7 @@ private string GetAutoSelectRawValue()
                         autoSelectRawValue += ",";
                     }
 
-                    if (baseEntityType != null && property.DeclaringType != baseEntityType)
+                    if (Context.TargetStructuredType is IEdmEntityType baseEntityType && property.DeclaringType != baseEntityType)
                     {
                         autoSelectRawValue += String.Format(CultureInfo.InvariantCulture, "{0}/",
                             property.DeclaringType.FullTypeName());
diff --git a/src/Microsoft.AspNet.OData.Shared/Query/OrderByNode.cs b/src/Microsoft.AspNet.OData.Shared/Query/OrderByNode.cs
index 6b4f72c17..fb5b7f42f 100644
--- a/src/Microsoft.AspNet.OData.Shared/Query/OrderByNode.cs
+++ b/src/Microsoft.AspNet.OData.Shared/Query/OrderByNode.cs
@@ -96,24 +96,21 @@ internal static string RestorePropertyPath(SingleValueNode expression)
             string propertyName = String.Empty;
             SingleValueNode source = null;
 
-            var accessNode = expression as SingleValuePropertyAccessNode;
-            if (accessNode != null)
+            if (expression is SingleValuePropertyAccessNode accessNode)
             {
                 propertyName = accessNode.Property.Name;
                 source = accessNode.Source;
             }
             else
             {
-                var complexNode = expression as SingleComplexNode;
-                if (complexNode != null)
+                if (expression is SingleComplexNode complexNode)
                 {
                     propertyName = complexNode.Property.Name;
                     source = complexNode.Source;
                 }
                 else
                 {
-                    var navNode = expression as SingleNavigationNode;
-                    if (navNode != null)
+                    if (expression is SingleNavigationNode navNode)
                     {
                         propertyName = navNode.NavigationProperty.Name;
                         source = navNode.Source;
diff --git a/src/Microsoft.AspNet.OData.Shared/Query/OrderByQueryOption.cs b/src/Microsoft.AspNet.OData.Shared/Query/OrderByQueryOption.cs
index e5b8ba1b3..62429bdd4 100644
--- a/src/Microsoft.AspNet.OData.Shared/Query/OrderByQueryOption.cs
+++ b/src/Microsoft.AspNet.OData.Shared/Query/OrderByQueryOption.cs
@@ -217,10 +217,7 @@ public void Validate(ODataValidationSettings validationSettings)
                 throw Error.ArgumentNull("validationSettings");
             }
 
-            if (Validator != null)
-            {
-                Validator.Validate(this, validationSettings);
-            }
+            Validator?.Validate(this, validationSettings);
         }
 
         private IOrderedQueryable ApplyToCore(IQueryable query, ODataQuerySettings querySettings)
@@ -241,11 +238,7 @@ private IOrderedQueryable ApplyToCore(IQueryable query, ODataQuerySettings query
 
             foreach (OrderByNode node in nodes)
             {
-                OrderByPropertyNode propertyNode = node as OrderByPropertyNode;
-                OrderByOpenPropertyNode openPropertyNode = node as OrderByOpenPropertyNode;
-                OrderByCountNode countNode = node as OrderByCountNode;
-
-                if (propertyNode != null)
+                if (node is OrderByPropertyNode propertyNode)
                 {
                     // Use autonomy class to achieve value equality for HasSet.
                     var edmPropertyWithPath = new { propertyNode.Property, propertyNode.PropertyPath };
@@ -270,7 +263,7 @@ private IOrderedQueryable ApplyToCore(IQueryable query, ODataQuerySettings query
 
                     alreadyOrdered = true;
                 }
-                else if (openPropertyNode != null)
+                else if (node is OrderByOpenPropertyNode openPropertyNode)
                 {
                     // This check prevents queries with duplicate properties (e.g. $orderby=Id,Id,Id,Id...) from causing stack overflows
                     if (openPropertiesSoFar.Contains(openPropertyNode.PropertyName))
@@ -283,7 +276,7 @@ private IOrderedQueryable ApplyToCore(IQueryable query, ODataQuerySettings query
                     querySoFar = AddOrderByQueryForProperty(query, querySettings, openPropertyNode.OrderByClause, querySoFar, openPropertyNode.Direction, alreadyOrdered);
                     alreadyOrdered = true;
                 }
-                else if (countNode != null)
+                else if (node is OrderByCountNode countNode)
                 {
                     Contract.Assert(countNode.OrderByClause != null);
                     querySoFar = AddOrderByQueryForProperty(query, querySettings, countNode.OrderByClause, querySoFar, countNode.Direction, alreadyOrdered);
diff --git a/src/Microsoft.AspNet.OData.Shared/Query/SelectExpandQueryOption.cs b/src/Microsoft.AspNet.OData.Shared/Query/SelectExpandQueryOption.cs
index b380eb8bc..bd6007107 100644
--- a/src/Microsoft.AspNet.OData.Shared/Query/SelectExpandQueryOption.cs
+++ b/src/Microsoft.AspNet.OData.Shared/Query/SelectExpandQueryOption.cs
@@ -244,10 +244,7 @@ public void Validate(ODataValidationSettings validationSettings)
                 throw Error.ArgumentNull("validationSettings");
             }
 
-            if (Validator != null)
-            {
-                Validator.Validate(this, validationSettings);
-            }
+            Validator?.Validate(this, validationSettings);
         }
 
         internal SelectExpandClause ProcessLevels()
@@ -436,7 +433,7 @@ internal SelectExpandClause ProcessLevels()
                         selectExpandClause);
 
                     autoExpandItems.Add(item);
-                    if (!isAllSelected || autoSelectProperties.Count() != 0)
+                    if (!isAllSelected || autoSelectProperties.Any())
                     {
                         PathSelectItem pathSelectItem = new PathSelectItem(
                             new ODataSelectPath(pathSegments));
@@ -543,7 +540,7 @@ internal SelectExpandClause ProcessLevels()
             }
 
             List<SelectItem> autoExpandItems = new List<SelectItem>(originAutoExpandItems);
-            bool hasAutoSelectExpandInExpand = (originAutoSelectItems.Count() + originAutoExpandItems.Count() != 0);
+            bool hasAutoSelectExpandInExpand = (originAutoSelectItems.Count + originAutoExpandItems.Count != 0);
             bool allSelected = originAutoSelectItems.Count == 0 && selectExpandClause.AllSelected;
 
             while (level > 0)
@@ -638,8 +635,7 @@ private static List<SelectItem> RemoveExpandItemExceedMaxDepth(int depth, IEnume
             {
                 foreach (var autoExpandItem in autoExpandItems)
                 {
-                    ExpandedNavigationSelectItem expandItem = autoExpandItem as ExpandedNavigationSelectItem;
-                    if (expandItem != null)
+                    if (autoExpandItem is ExpandedNavigationSelectItem expandItem)
                     {
                         SelectExpandClause selectExpandClause =
                             new SelectExpandClause(
diff --git a/src/Microsoft.AspNet.OData.Shared/Query/SkipQueryOption.cs b/src/Microsoft.AspNet.OData.Shared/Query/SkipQueryOption.cs
index 8372ccf53..c12c41ed6 100644
--- a/src/Microsoft.AspNet.OData.Shared/Query/SkipQueryOption.cs
+++ b/src/Microsoft.AspNet.OData.Shared/Query/SkipQueryOption.cs
@@ -150,10 +150,7 @@ public void Validate(ODataValidationSettings validationSettings)
                 throw Error.ArgumentNull("validationSettings");
             }
 
-            if (Validator != null)
-            {
-                Validator.Validate(this, validationSettings);
-            }
+            Validator?.Validate(this, validationSettings);
         }
 
         private IQueryable ApplyToCore(IQueryable query, ODataQuerySettings querySettings)
diff --git a/src/Microsoft.AspNet.OData.Shared/Query/SkipTokenQueryOption.cs b/src/Microsoft.AspNet.OData.Shared/Query/SkipTokenQueryOption.cs
index cd08e2c96..0ab10cc7c 100644
--- a/src/Microsoft.AspNet.OData.Shared/Query/SkipTokenQueryOption.cs
+++ b/src/Microsoft.AspNet.OData.Shared/Query/SkipTokenQueryOption.cs
@@ -115,10 +115,7 @@ public void Validate(ODataValidationSettings validationSettings)
                 throw Error.ArgumentNull("validationSettings");
             }
 
-            if (Validator != null)
-            {
-                Validator.Validate(this, validationSettings);
-            }
+            Validator?.Validate(this, validationSettings);
         }
     }
 }
\ No newline at end of file
diff --git a/src/Microsoft.AspNet.OData.Shared/Query/TopQueryOption.cs b/src/Microsoft.AspNet.OData.Shared/Query/TopQueryOption.cs
index a480dfab3..4196a14ae 100644
--- a/src/Microsoft.AspNet.OData.Shared/Query/TopQueryOption.cs
+++ b/src/Microsoft.AspNet.OData.Shared/Query/TopQueryOption.cs
@@ -150,10 +150,7 @@ public void Validate(ODataValidationSettings validationSettings)
                 throw Error.ArgumentNull("validationSettings");
             }
 
-            if (Validator != null)
-            {
-                Validator.Validate(this, validationSettings);
-            }
+            Validator?.Validate(this, validationSettings);
         }
 
         private IQueryable ApplyToCore(IQueryable query, ODataQuerySettings querySettings)
diff --git a/src/Microsoft.AspNet.OData.Shared/Query/Validators/FilterQueryValidator.cs b/src/Microsoft.AspNet.OData.Shared/Query/Validators/FilterQueryValidator.cs
index d71725614..1458b3ce9 100644
--- a/src/Microsoft.AspNet.OData.Shared/Query/Validators/FilterQueryValidator.cs
+++ b/src/Microsoft.AspNet.OData.Shared/Query/Validators/FilterQueryValidator.cs
@@ -638,16 +638,13 @@ public virtual void ValidateQueryNode(QueryNode node, ODataValidationSettings se
             // Recursion guard to avoid stack overflows
             RuntimeHelpers.EnsureSufficientExecutionStack();
 
-            SingleValueNode singleNode = node as SingleValueNode;
-            CollectionNode collectionNode = node as CollectionNode;
-
             IncrementNodeCount(settings);
 
-            if (singleNode != null)
+            if (node is SingleValueNode singleNode)
             {
                 ValidateSingleValueNode(singleNode, settings);
             }
-            else if (collectionNode != null)
+            else if (node is CollectionNode collectionNode)
             {
                 ValidateCollectionNode(collectionNode, settings);
             }
diff --git a/src/Microsoft.AspNet.OData.Shared/Query/Validators/OrderByQueryValidator.cs b/src/Microsoft.AspNet.OData.Shared/Query/Validators/OrderByQueryValidator.cs
index d26aca9e4..ef57cb588 100644
--- a/src/Microsoft.AspNet.OData.Shared/Query/Validators/OrderByQueryValidator.cs
+++ b/src/Microsoft.AspNet.OData.Shared/Query/Validators/OrderByQueryValidator.cs
@@ -59,8 +59,8 @@ public virtual void Validate(OrderByQueryOption orderByOption, ODataValidationSe
             foreach (OrderByNode node in orderByOption.OrderByNodes)
             {
                 string propertyName = null;
-                OrderByPropertyNode propertyNode = node as OrderByPropertyNode;
-                if (propertyNode != null)
+
+                if (node is OrderByPropertyNode propertyNode)
                 {
                     propertyName = propertyNode.Property.Name;
                     bool isValidPath = !validator.TryValidate(propertyNode.OrderByClause, explicitAllowedProperties);
diff --git a/src/Microsoft.AspNet.OData.Shared/Query/Validators/SelectExpandQueryValidator.cs b/src/Microsoft.AspNet.OData.Shared/Query/Validators/SelectExpandQueryValidator.cs
index 278998e4a..1cc6173a8 100644
--- a/src/Microsoft.AspNet.OData.Shared/Query/Validators/SelectExpandQueryValidator.cs
+++ b/src/Microsoft.AspNet.OData.Shared/Query/Validators/SelectExpandQueryValidator.cs
@@ -191,12 +191,11 @@ private static void ValidateDepth(SelectExpandClause selectExpand, int maxDepth)
         private void ValidateSelectItem(SelectItem selectItem, IEdmProperty pathProperty, IEdmStructuredType pathStructuredType,
             IEdmModel edmModel)
         {
-            PathSelectItem pathSelectItem = selectItem as PathSelectItem;
-            if (pathSelectItem != null)
+            if (selectItem is PathSelectItem pathSelectItem)
             {
                 ODataPathSegment segment = pathSelectItem.SelectedPath.LastSegment;
-                NavigationPropertySegment navigationPropertySegment = segment as NavigationPropertySegment;
-                if (navigationPropertySegment != null)
+
+                if (segment is NavigationPropertySegment navigationPropertySegment)
                 {
                     IEdmNavigationProperty property = navigationPropertySegment.NavigationProperty;
                     if (EdmLibHelpers.IsNotNavigable(property, edmModel))
@@ -207,8 +206,7 @@ private static void ValidateDepth(SelectExpandClause selectExpand, int maxDepth)
                 }
                 else
                 {
-                    PropertySegment propertySegment = segment as PropertySegment;
-                    if (propertySegment != null)
+                    if (segment is PropertySegment propertySegment)
                     {
                         if (EdmLibHelpers.IsNotSelectable(propertySegment.Property, pathProperty, pathStructuredType, edmModel,
                             _defaultQuerySettings.EnableSelect))
@@ -221,8 +219,7 @@ private static void ValidateDepth(SelectExpandClause selectExpand, int maxDepth)
             }
             else
             {
-                WildcardSelectItem wildCardSelectItem = selectItem as WildcardSelectItem;
-                if (wildCardSelectItem != null)
+                if (selectItem is WildcardSelectItem wildCardSelectItem)
                 {
                     foreach (var property in pathStructuredType.StructuralProperties())
                     {
@@ -314,8 +311,7 @@ private static void ValidateDepth(SelectExpandClause selectExpand, int maxDepth)
 
             foreach (SelectItem selectItem in selectExpandClause.SelectedItems)
             {
-                ExpandedNavigationSelectItem expandItem = selectItem as ExpandedNavigationSelectItem;
-                if (expandItem != null)
+                if (selectItem is ExpandedNavigationSelectItem expandItem)
                 {
                     NavigationPropertySegment navigationSegment =
                         (NavigationPropertySegment)expandItem.PathToNavigationProperty.LastSegment;
diff --git a/src/Microsoft.AspNet.OData.Shared/ResourceContext.cs b/src/Microsoft.AspNet.OData.Shared/ResourceContext.cs
index bf587f6ab..64b86a530 100644
--- a/src/Microsoft.AspNet.OData.Shared/ResourceContext.cs
+++ b/src/Microsoft.AspNet.OData.Shared/ResourceContext.cs
@@ -216,14 +216,13 @@ private object BuildResourceInstance()
                 return null;
             }
 
-            TypedEdmStructuredObject edmStructruredObject = EdmObject as TypedEdmStructuredObject;
-            if (edmStructruredObject != null)
+            if (EdmObject is TypedEdmStructuredObject edmStructruredObject)
             {
                 return edmStructruredObject.Instance;
             }
 
             SelectExpandWrapper selectExpandWrapper = EdmObject as SelectExpandWrapper;
-            if (selectExpandWrapper != null && selectExpandWrapper.UntypedInstance != null)
+            if (selectExpandWrapper?.UntypedInstance != null)
             {
                 return selectExpandWrapper.UntypedInstance;
             }
@@ -269,8 +268,7 @@ private static IEdmStructuredObject AsEdmResourceObject(object resourceInstance,
                 throw Error.ArgumentNull("structuredType");
             }
 
-            IEdmStructuredObject edmStructuredObject = resourceInstance as IEdmStructuredObject;
-            if (edmStructuredObject != null)
+            if (resourceInstance is IEdmStructuredObject edmStructuredObject)
             {
                 return edmStructuredObject;
             }
diff --git a/src/Microsoft.AspNet.OData.Shared/Routing/Conventions/ActionRoutingConvention.cs b/src/Microsoft.AspNet.OData.Shared/Routing/Conventions/ActionRoutingConvention.cs
index 784371d93..07491adfb 100644
--- a/src/Microsoft.AspNet.OData.Shared/Routing/Conventions/ActionRoutingConvention.cs
+++ b/src/Microsoft.AspNet.OData.Shared/Routing/Conventions/ActionRoutingConvention.cs
@@ -45,8 +45,8 @@ private static IEdmAction GetAction(ODataPath odataPath)
         {
             ODataPathSegment odataSegment = odataPath.Segments.Last();
             IEdmAction action = null;
-            OperationSegment actionSegment = odataSegment as OperationSegment;
-            if (actionSegment != null)
+
+            if (odataSegment is OperationSegment actionSegment)
             {
                 action = actionSegment.Operations.First() as IEdmAction;
             }
diff --git a/src/Microsoft.AspNet.OData.Shared/Routing/Conventions/NavigationRoutingConvention.cs b/src/Microsoft.AspNet.OData.Shared/Routing/Conventions/NavigationRoutingConvention.cs
index 6b984ec86..c03588f86 100644
--- a/src/Microsoft.AspNet.OData.Shared/Routing/Conventions/NavigationRoutingConvention.cs
+++ b/src/Microsoft.AspNet.OData.Shared/Routing/Conventions/NavigationRoutingConvention.cs
@@ -37,7 +37,6 @@ internal static string SelectActionImpl(ODataPath odataPath, IWebApiControllerCo
                     (odataPath.Segments.Last() as NavigationPropertySegment) ??
                     odataPath.Segments[odataPath.Segments.Count - 2] as NavigationPropertySegment;
                 IEdmNavigationProperty navigationProperty = navigationSegment.NavigationProperty;
-                IEdmEntityType declaringType = navigationProperty.DeclaringType as IEdmEntityType;
 
                 // It is not valid to *Post* to any non-collection valued navigation property.
                 if (navigationProperty.TargetMultiplicity() != EdmMultiplicity.Many &&
@@ -59,7 +58,7 @@ internal static string SelectActionImpl(ODataPath odataPath, IWebApiControllerCo
                     return null;
                 }
 
-                if (declaringType != null)
+                if (navigationProperty.DeclaringType is IEdmEntityType declaringType)
                 {
                     // e.g. Try GetNavigationPropertyFromDeclaringType first, then fallback on GetNavigationProperty action name
                     string actionName = actionMap.FindMatchingAction(
diff --git a/src/Microsoft.AspNet.OData.Shared/Routing/Conventions/NavigationSourceRoutingConvention.cs b/src/Microsoft.AspNet.OData.Shared/Routing/Conventions/NavigationSourceRoutingConvention.cs
index b853b96a1..c46720377 100644
--- a/src/Microsoft.AspNet.OData.Shared/Routing/Conventions/NavigationSourceRoutingConvention.cs
+++ b/src/Microsoft.AspNet.OData.Shared/Routing/Conventions/NavigationSourceRoutingConvention.cs
@@ -24,22 +24,19 @@ internal static SelectControllerResult SelectControllerImpl(ODataPath odataPath)
             ODataPathSegment firstSegment = odataPath.Segments.FirstOrDefault();
 
             // entity set
-            EntitySetSegment entitySetSegment = firstSegment as EntitySetSegment;
-            if (entitySetSegment != null)
+            if (firstSegment is EntitySetSegment entitySetSegment)
             {
                 return new SelectControllerResult(entitySetSegment.EntitySet.Name, null);
             }
 
             // singleton
-            SingletonSegment singletonSegment = firstSegment as SingletonSegment;
-            if (singletonSegment != null)
+            if (firstSegment is SingletonSegment singletonSegment)
             {
                 return new SelectControllerResult(singletonSegment.Singleton.Name, null);
             }
 
             // operation import
-            OperationImportSegment importSegment = firstSegment as OperationImportSegment;
-            if (importSegment != null)
+            if (firstSegment is OperationImportSegment importSegment)
             {
                 // There's two options: Each one has advantages/disadvantanges. Here picks #1.
                 // 1) map all operation import to a certain controller, for example: ODataOperationImportController
diff --git a/src/Microsoft.AspNet.OData.Shared/Routing/Conventions/RoutingConventionHelpers.cs b/src/Microsoft.AspNet.OData.Shared/Routing/Conventions/RoutingConventionHelpers.cs
index 0fedebbc2..3234048b7 100644
--- a/src/Microsoft.AspNet.OData.Shared/Routing/Conventions/RoutingConventionHelpers.cs
+++ b/src/Microsoft.AspNet.OData.Shared/Routing/Conventions/RoutingConventionHelpers.cs
@@ -36,8 +36,7 @@ public static string SelectAction(this IEdmOperation operation, IWebApiActionMap
                 }
                 else
                 {
-                    IEdmCollectionType bindingParameterType = bindingParameter.Type.Definition as IEdmCollectionType;
-                    if (bindingParameterType != null)
+                    if (bindingParameter.Type.Definition is IEdmCollectionType bindingParameterType)
                     {
                         entityType = bindingParameterType.ElementType.Definition as IEdmEntityType;
                     }
@@ -106,8 +105,6 @@ public static bool TryMatch(this KeySegment keySegment, IDictionary<string, stri
                 return false;
             }
 
-            IEdmEntityType entityType = keySegment.EdmType as IEdmEntityType;
-
             Dictionary<string, object> routeData = new Dictionary<string, object>();
             foreach (KeyValuePair<string, object> key in keySegment.Keys)
             {
@@ -119,8 +116,9 @@ public static bool TryMatch(this KeySegment keySegment, IDictionary<string, stri
                 }
 
                 IEdmTypeReference typeReference;
+
                 // get the key property from the entity type
-                if (entityType != null)
+                if (keySegment.EdmType is IEdmEntityType entityType)
                 {
                     IEdmStructuralProperty keyProperty = entityType.Key().FirstOrDefault(k => k.Name == key.Key);
                     if (keyProperty == null)
@@ -204,11 +202,10 @@ public static void AddKeyValueToRouteData(this IWebApiControllerContext controll
 
             object routeValue = null;
             object odataValue = null;
-            ConstantNode node = value as ConstantNode;
-            if (node != null)
+
+            if (value is ConstantNode node)
             {
-                ODataEnumValue enumValue = node.Value as ODataEnumValue;
-                if (enumValue != null)
+                if (node.Value is ODataEnumValue enumValue)
                 {
                     odataValue = new ODataParameterValue(enumValue, edmTypeReference);
                     routeValue = enumValue.Value;
@@ -331,14 +328,12 @@ public static void AddFunctionParameterToRouteData(this IWebApiControllerContext
                 routeData.Add(name, paramValue);
             }
 
-            ODataNullValue nullValue = paramValue as ODataNullValue;
-            if (nullValue != null)
+            if (paramValue is ODataNullValue nullValue)
             {
                 routeData[name] = null;
             }
 
-            ODataEnumValue enumValue = paramValue as ODataEnumValue;
-            if (enumValue != null)
+            if (paramValue is ODataEnumValue enumValue)
             {
                 // Remove the type name of the ODataEnumValue and keep the value.
                 routeData[name] = enumValue.Value;
@@ -384,11 +379,9 @@ public static void IncrementKeyCount(IDictionary<string, object> routingConventi
                 string parameterName = parameter.Name;
                 string nameInRouteData = null;
 
-                ConstantNode node = parameter.Value as ConstantNode;
-                if (node != null)
+                if (parameter.Value is ConstantNode node)
                 {
-                    UriTemplateExpression uriTemplateExpression = node.Value as UriTemplateExpression;
-                    if (uriTemplateExpression != null)
+                    if (node.Value is UriTemplateExpression uriTemplateExpression)
                     {
                         nameInRouteData = uriTemplateExpression.LiteralText.Trim();
                     }
diff --git a/src/Microsoft.AspNet.OData.Shared/Routing/DefaultODataPathHandler.cs b/src/Microsoft.AspNet.OData.Shared/Routing/DefaultODataPathHandler.cs
index a9d839319..9fb89d5b7 100644
--- a/src/Microsoft.AspNet.OData.Shared/Routing/DefaultODataPathHandler.cs
+++ b/src/Microsoft.AspNet.OData.Shared/Routing/DefaultODataPathHandler.cs
@@ -172,9 +172,7 @@ private ODataPath Parse(string serviceRoot, string odataPath, IServiceProvider r
 
             if (!template && path.LastSegment is ODL.NavigationPropertyLinkSegment)
             {
-                IEdmCollectionType lastSegmentEdmType = path.LastSegment.EdmType as IEdmCollectionType;
-
-                if (lastSegmentEdmType != null)
+                if (path.LastSegment.EdmType is IEdmCollectionType lastSegmentEdmType)
                 {
                     ODL.EntityIdSegment entityIdSegment = null;
                     bool exceptionThrown = false;
@@ -270,8 +268,7 @@ private static ODataPathTemplate Templatify(ODataPath path, string pathTemplate)
             ODataPathSegmentTemplateTranslator translator = new ODataPathSegmentTemplateTranslator();
             var newPath = path.Segments.Select(e =>
             {
-                UnresolvedPathSegment unresolvedPathSegment = e as UnresolvedPathSegment;
-                if (unresolvedPathSegment != null)
+                if (e is UnresolvedPathSegment unresolvedPathSegment)
                 {
                     throw new ODataException(
                            Error.Format(SRResources.UnresolvedPathSegmentInTemplate, unresolvedPathSegment, pathTemplate));
diff --git a/src/Microsoft.AspNet.OData.Shared/Routing/ODataParameterHelper.cs b/src/Microsoft.AspNet.OData.Shared/Routing/ODataParameterHelper.cs
index 0d3d6660f..7266c7f7d 100644
--- a/src/Microsoft.AspNet.OData.Shared/Routing/ODataParameterHelper.cs
+++ b/src/Microsoft.AspNet.OData.Shared/Routing/ODataParameterHelper.cs
@@ -181,21 +181,18 @@ internal static object TranslateNode(object value)
                 return null;
             }
 
-            ConstantNode node = value as ConstantNode;
-            if (node != null)
+            if (value is ConstantNode node)
             {
                 return node.Value;
             }
 
-            ConvertNode convertNode = value as ConvertNode;
-            if (convertNode != null)
+            if (value is ConvertNode convertNode)
             {
                 object source = TranslateNode(convertNode.Source);
                 return source;
             }
 
-            ParameterAliasNode parameterAliasNode = value as ParameterAliasNode;
-            if (parameterAliasNode != null)
+            if (value is ParameterAliasNode parameterAliasNode)
             {
                 return parameterAliasNode.Alias;
             }
diff --git a/src/Microsoft.AspNet.OData.Shared/Routing/ODataPathSegmentExtensions.cs b/src/Microsoft.AspNet.OData.Shared/Routing/ODataPathSegmentExtensions.cs
index d9a5b6448..14577829d 100644
--- a/src/Microsoft.AspNet.OData.Shared/Routing/ODataPathSegmentExtensions.cs
+++ b/src/Microsoft.AspNet.OData.Shared/Routing/ODataPathSegmentExtensions.cs
@@ -230,9 +230,7 @@ public static string ToUriLiteral(this OperationSegment segment)
                 throw Error.ArgumentNull("segment");
             }
 
-            IEdmAction action = segment.Operations.Single() as IEdmAction;
-
-            if (action != null)
+            if (segment.Operations.Single() is IEdmAction action)
             {
                 return action.FullName();
             }
@@ -257,9 +255,7 @@ public static string ToUriLiteral(this OperationImportSegment segment)
                 throw Error.ArgumentNull("segment");
             }
 
-            IEdmActionImport action = segment.OperationImports.Single() as IEdmActionImport;
-
-            if (action != null)
+            if (segment.OperationImports.Single() is IEdmActionImport action)
             {
                 return action.Name;
             }
@@ -325,17 +321,14 @@ private static string TranslateKeySegmentValue(object value)
                 throw Error.ArgumentNull("value");
             }
 
-            UriTemplateExpression uriTemplateExpression = value as UriTemplateExpression;
-            if (uriTemplateExpression != null)
+            if (value is UriTemplateExpression uriTemplateExpression)
             {
                 return uriTemplateExpression.LiteralText;
             }
 
-            ConstantNode constantNode = value as ConstantNode;
-            if (constantNode != null)
+            if (value is ConstantNode constantNode)
             {
-                ODataEnumValue enumValue = constantNode.Value as ODataEnumValue;
-                if (enumValue != null)
+                if (constantNode.Value is ODataEnumValue enumValue)
                 {
                     return ODataUriUtils.ConvertToUriLiteral(enumValue, ODataVersion.V4);
                 }
@@ -351,18 +344,14 @@ private static string TranslateNode(object node)
                 throw Error.ArgumentNull("node");
             }
 
-            ConstantNode constantNode = node as ConstantNode;
-            if (constantNode != null)
+            if (node is ConstantNode constantNode)
             {
-                UriTemplateExpression uriTemplateExpression = constantNode.Value as UriTemplateExpression;
-                if (uriTemplateExpression != null)
+                if (constantNode.Value is UriTemplateExpression uriTemplateExpression)
                 {
                     return uriTemplateExpression.LiteralText;
                 }
-
                 // Make the enum prefix free to work.
-                ODataEnumValue enumValue = constantNode.Value as ODataEnumValue;
-                if (enumValue != null)
+                if (constantNode.Value is ODataEnumValue enumValue)
                 {
                     return ODataUriUtils.ConvertToUriLiteral(enumValue, ODataVersion.V4);
                 }
@@ -370,8 +359,7 @@ private static string TranslateNode(object node)
                 return constantNode.LiteralText;
             }
 
-            ConvertNode convertNode = node as ConvertNode;
-            if (convertNode != null)
+            if (node is ConvertNode convertNode)
             {
                 return TranslateNode(convertNode.Source);
             }
diff --git a/src/Microsoft.AspNet.OData.Shared/Routing/ODataPathSegmentHandler.cs b/src/Microsoft.AspNet.OData.Shared/Routing/ODataPathSegmentHandler.cs
index 89f440eb4..25addc533 100644
--- a/src/Microsoft.AspNet.OData.Shared/Routing/ODataPathSegmentHandler.cs
+++ b/src/Microsoft.AspNet.OData.Shared/Routing/ODataPathSegmentHandler.cs
@@ -158,9 +158,8 @@ public override void Handle(OperationImportSegment segment)
             _navigationSource = segment.EntitySet;
 
             IEdmOperationImport operationImport = segment.OperationImports.Single();
-            IEdmActionImport actionImport = operationImport as IEdmActionImport;
 
-            if (actionImport != null)
+            if (operationImport is IEdmActionImport actionImport)
             {
                 _pathTemplate.Add(ODataSegmentKinds.UnboundAction); // unbound action
                 _pathUriLiteral.Add(actionImport.Name);
@@ -192,9 +191,8 @@ public override void Handle(OperationSegment segment)
             _navigationSource = segment.EntitySet;
 
             IEdmOperation edmOperation = segment.Operations.Single();
-            IEdmAction action = edmOperation as IEdmAction;
 
-            if (action != null)
+            if (edmOperation is IEdmAction action)
             {
                 _pathTemplate.Add(ODataSegmentKinds.Action); // action
                 _pathUriLiteral.Add(action.FullName());
@@ -396,17 +394,14 @@ private static string TranslateKeySegmentValue(object value)
                 throw Error.ArgumentNull("value");
             }
 
-            UriTemplateExpression uriTemplateExpression = value as UriTemplateExpression;
-            if (uriTemplateExpression != null)
+            if (value is UriTemplateExpression uriTemplateExpression)
             {
                 return uriTemplateExpression.LiteralText;
             }
 
-            ConstantNode constantNode = value as ConstantNode;
-            if (constantNode != null)
+            if (value is ConstantNode constantNode)
             {
-                ODataEnumValue enumValue = constantNode.Value as ODataEnumValue;
-                if (enumValue != null)
+                if (constantNode.Value is ODataEnumValue enumValue)
                 {
                     return ODataUriUtils.ConvertToUriLiteral(enumValue, ODataVersion.V4);
                 }
@@ -427,18 +422,14 @@ private static string TranslateNode(object node, string functionName, string par
                 throw new InvalidOperationException(Error.Format(SRResources.MissingConvertNode, parameterName, functionName));
             }
 
-            ConstantNode constantNode = node as ConstantNode;
-            if (constantNode != null)
+            if (node is ConstantNode constantNode)
             {
-                UriTemplateExpression uriTemplateExpression = constantNode.Value as UriTemplateExpression;
-                if (uriTemplateExpression != null)
+                if (constantNode.Value is UriTemplateExpression uriTemplateExpression)
                 {
                     return uriTemplateExpression.LiteralText;
                 }
-
                 // Make the enum prefix free to work.
-                ODataEnumValue enumValue = constantNode.Value as ODataEnumValue;
-                if (enumValue != null)
+                if (constantNode.Value is ODataEnumValue enumValue)
                 {
                     return ODataUriUtils.ConvertToUriLiteral(enumValue, ODataVersion.V4);
                 }
@@ -446,14 +437,12 @@ private static string TranslateNode(object node, string functionName, string par
                 return constantNode.LiteralText;
             }
 
-            ConvertNode convertNode = node as ConvertNode;
-            if (convertNode != null)
+            if (node is ConvertNode convertNode)
             {
                 return TranslateNode(convertNode.Source, functionName, parameterName);
             }
 
-            ParameterAliasNode parameterAliasNode = node as ParameterAliasNode;
-            if (parameterAliasNode != null)
+            if (node is ParameterAliasNode parameterAliasNode)
             {
                 return parameterAliasNode.Alias;
             }
diff --git a/src/Microsoft.AspNet.OData.Shared/Routing/ODataPathSegmentTranslator.cs b/src/Microsoft.AspNet.OData.Shared/Routing/ODataPathSegmentTranslator.cs
index 0637e6355..160d802fe 100644
--- a/src/Microsoft.AspNet.OData.Shared/Routing/ODataPathSegmentTranslator.cs
+++ b/src/Microsoft.AspNet.OData.Shared/Routing/ODataPathSegmentTranslator.cs
@@ -220,9 +220,7 @@ private static object TranslateKeyValue(object value)
         /// <returns>Translated odata path segment.</returns>
         public override ODataPathSegment Translate(OperationImportSegment segment)
         {
-            IEdmActionImport actionImport = segment.OperationImports.Single() as IEdmActionImport;
-
-            if (actionImport != null)
+            if (segment.OperationImports.Single() is IEdmActionImport actionImport)
             {
                 return segment;
             }
@@ -247,9 +245,7 @@ public override ODataPathSegment Translate(OperationSegment segment)
         {
             Contract.Assert(segment != null);
 
-            IEdmFunction function = segment.Operations.Single() as IEdmFunction;
-
-            if (function != null)
+            if (segment.Operations.Single() is IEdmFunction function)
             {
                 OperationSegment newSegment = segment;
                 if (segment.Parameters.Any(p => p.Value is ParameterAliasNode || p.Value is ConvertNode))
@@ -287,21 +283,18 @@ private object TranslateNode(object node)
                 throw Error.ArgumentNull("node");
             }
 
-            ConstantNode constantNode = node as ConstantNode;
-            if (constantNode != null)
+            if (node is ConstantNode constantNode)
             {
                 return constantNode;
             }
 
-            ConvertNode convertNode = node as ConvertNode;
-            if (convertNode != null)
+            if (node is ConvertNode convertNode)
             {
                 object value = TranslateNode(convertNode.Source);
                 return ConvertNode(value, convertNode.TypeReference);
             }
 
-            ParameterAliasNode parameterAliasNode = node as ParameterAliasNode;
-            if (parameterAliasNode != null)
+            if (node is ParameterAliasNode parameterAliasNode)
             {
                 SingleValueNode singleValueNode;
 
diff --git a/src/Microsoft.AspNet.OData.Shared/Routing/Template/EntitySetSegmentTemplate.cs b/src/Microsoft.AspNet.OData.Shared/Routing/Template/EntitySetSegmentTemplate.cs
index 2ac3afbac..a37da2721 100644
--- a/src/Microsoft.AspNet.OData.Shared/Routing/Template/EntitySetSegmentTemplate.cs
+++ b/src/Microsoft.AspNet.OData.Shared/Routing/Template/EntitySetSegmentTemplate.cs
@@ -34,8 +34,7 @@ public EntitySetSegmentTemplate(EntitySetSegment segment)
         /// <inheritdoc/>
         public override bool TryMatch(ODataPathSegment pathSegment, IDictionary<string, object> values)
         {
-            EntitySetSegment otherEntitySet = pathSegment as EntitySetSegment;
-            return otherEntitySet != null && otherEntitySet.EntitySet == Segment.EntitySet;
+            return pathSegment is EntitySetSegment otherEntitySet && otherEntitySet.EntitySet == Segment.EntitySet;
         }
     }
 }
diff --git a/src/Microsoft.AspNet.OData.Shared/Routing/Template/KeySegmentTemplate.cs b/src/Microsoft.AspNet.OData.Shared/Routing/Template/KeySegmentTemplate.cs
index 525ab9118..f804309e7 100644
--- a/src/Microsoft.AspNet.OData.Shared/Routing/Template/KeySegmentTemplate.cs
+++ b/src/Microsoft.AspNet.OData.Shared/Routing/Template/KeySegmentTemplate.cs
@@ -45,8 +45,7 @@ public KeySegmentTemplate(KeySegment segment)
         /// <inheritdoc/>
         public override bool TryMatch(ODataPathSegment pathSegment, IDictionary<string, object> values)
         {
-            KeySegment keySegment = pathSegment as KeySegment;
-            if (keySegment != null)
+            if (pathSegment is KeySegment keySegment)
             {
                 return keySegment.TryMatch(ParameterMappings, values);
             }
@@ -64,8 +63,7 @@ public override bool TryMatch(ODataPathSegment pathSegment, IDictionary<string,
             {
                 string nameInRouteData;
 
-                UriTemplateExpression uriTemplateExpression = key.Value as UriTemplateExpression;
-                if (uriTemplateExpression != null)
+                if (key.Value is UriTemplateExpression uriTemplateExpression)
                 {
                     nameInRouteData = uriTemplateExpression.LiteralText.Trim();
                 }
diff --git a/src/Microsoft.AspNet.OData.Shared/Routing/Template/NavigationPropertyLinkSegmentTemplate.cs b/src/Microsoft.AspNet.OData.Shared/Routing/Template/NavigationPropertyLinkSegmentTemplate.cs
index d98f2a100..c2e2d2927 100644
--- a/src/Microsoft.AspNet.OData.Shared/Routing/Template/NavigationPropertyLinkSegmentTemplate.cs
+++ b/src/Microsoft.AspNet.OData.Shared/Routing/Template/NavigationPropertyLinkSegmentTemplate.cs
@@ -34,8 +34,7 @@ public NavigationPropertyLinkSegmentTemplate(NavigationPropertyLinkSegment segme
         /// <inheritdoc/>
         public override bool TryMatch(ODataPathSegment pathSegment, IDictionary<string, object> values)
         {
-            NavigationPropertyLinkSegment other = pathSegment as NavigationPropertyLinkSegment;
-            return other != null && other.NavigationProperty == Segment.NavigationProperty;
+            return pathSegment is NavigationPropertyLinkSegment other && other.NavigationProperty == Segment.NavigationProperty;
         }
     }
 }
diff --git a/src/Microsoft.AspNet.OData.Shared/Routing/Template/NavigationPropertySegmentTemplate.cs b/src/Microsoft.AspNet.OData.Shared/Routing/Template/NavigationPropertySegmentTemplate.cs
index 70cb2ad92..8b1aa1485 100644
--- a/src/Microsoft.AspNet.OData.Shared/Routing/Template/NavigationPropertySegmentTemplate.cs
+++ b/src/Microsoft.AspNet.OData.Shared/Routing/Template/NavigationPropertySegmentTemplate.cs
@@ -34,8 +34,7 @@ public NavigationPropertySegmentTemplate(NavigationPropertySegment segment)
         /// <inheritdoc/>
         public override bool TryMatch(ODataPathSegment pathSegment, IDictionary<string, object> values)
         {
-            NavigationPropertySegment otherNavPropSegment = pathSegment as NavigationPropertySegment;
-            return otherNavPropSegment != null && otherNavPropSegment.NavigationProperty == Segment.NavigationProperty;
+            return pathSegment is NavigationPropertySegment otherNavPropSegment && otherNavPropSegment.NavigationProperty == Segment.NavigationProperty;
         }
     }
 }
diff --git a/src/Microsoft.AspNet.OData.Shared/Routing/Template/PropertySegmentTemplate.cs b/src/Microsoft.AspNet.OData.Shared/Routing/Template/PropertySegmentTemplate.cs
index ab38d6a3d..3243469b0 100644
--- a/src/Microsoft.AspNet.OData.Shared/Routing/Template/PropertySegmentTemplate.cs
+++ b/src/Microsoft.AspNet.OData.Shared/Routing/Template/PropertySegmentTemplate.cs
@@ -34,8 +34,7 @@ public PropertySegmentTemplate(PropertySegment segment)
         /// <inheritdoc/>
         public override bool TryMatch(ODataPathSegment pathSegment, IDictionary<string, object> values)
         {
-            PropertySegment other = pathSegment as PropertySegment;
-            return other != null && other.Property == Segment.Property;
+            return pathSegment is PropertySegment other && other.Property == Segment.Property;
         }
     }
 }
diff --git a/src/Microsoft.AspNet.OData.Shared/Routing/Template/SingletonSegmentTemplate.cs b/src/Microsoft.AspNet.OData.Shared/Routing/Template/SingletonSegmentTemplate.cs
index f23f5dd5f..742076743 100644
--- a/src/Microsoft.AspNet.OData.Shared/Routing/Template/SingletonSegmentTemplate.cs
+++ b/src/Microsoft.AspNet.OData.Shared/Routing/Template/SingletonSegmentTemplate.cs
@@ -34,8 +34,7 @@ public SingletonSegmentTemplate(SingletonSegment segment)
         /// <inheritdoc/>
         public override bool TryMatch(ODataPathSegment pathSegment, IDictionary<string, object> values)
         {
-            SingletonSegment otherSingleton = pathSegment as SingletonSegment;
-            return otherSingleton != null && otherSingleton.Singleton == Segment.Singleton;
+            return pathSegment is SingletonSegment otherSingleton && otherSingleton.Singleton == Segment.Singleton;
         }
     }
 }
diff --git a/src/Microsoft.AspNet.OData.Shared/Routing/Template/TypeSegmentTemplate.cs b/src/Microsoft.AspNet.OData.Shared/Routing/Template/TypeSegmentTemplate.cs
index 85ce336de..73a736b66 100644
--- a/src/Microsoft.AspNet.OData.Shared/Routing/Template/TypeSegmentTemplate.cs
+++ b/src/Microsoft.AspNet.OData.Shared/Routing/Template/TypeSegmentTemplate.cs
@@ -35,8 +35,7 @@ public TypeSegmentTemplate(TypeSegment segment)
         /// <inheritdoc/>
         public override bool TryMatch(ODataPathSegment pathSegment, IDictionary<string, object> values)
         {
-            TypeSegment otherType = pathSegment as TypeSegment;
-            return otherType != null && otherType.EdmType.FullTypeName() == Segment.EdmType.FullTypeName();
+            return pathSegment is TypeSegment otherType && otherType.EdmType.FullTypeName() == Segment.EdmType.FullTypeName();
         }
     }
 }
diff --git a/src/Microsoft.AspNet.OData.Shared/TypeHelper.cs b/src/Microsoft.AspNet.OData.Shared/TypeHelper.cs
index 20e25e998..f2c065027 100644
--- a/src/Microsoft.AspNet.OData.Shared/TypeHelper.cs
+++ b/src/Microsoft.AspNet.OData.Shared/TypeHelper.cs
@@ -64,8 +64,7 @@ public static Type GetBaseType(Type clrType)
         public static string GetQualifiedName(MemberInfo memberInfo)
         {
             Contract.Assert(memberInfo != null);
-            Type type = memberInfo as Type;
-            return type != null ? (type.Namespace + "." + type.Name) : memberInfo.Name;
+            return memberInfo is Type type ? (type.Namespace + "." + type.Name) : memberInfo.Name;
         }
 
         /// <summary>
diff --git a/src/Microsoft.AspNet.OData/Batch/ChangeSetRequestItem.cs b/src/Microsoft.AspNet.OData/Batch/ChangeSetRequestItem.cs
index 4c8a3772e..cfffc48a7 100644
--- a/src/Microsoft.AspNet.OData/Batch/ChangeSetRequestItem.cs
+++ b/src/Microsoft.AspNet.OData/Batch/ChangeSetRequestItem.cs
@@ -101,10 +101,7 @@ protected override void Dispose(bool disposing)
             {
                 foreach (HttpRequestMessage request in Requests)
                 {
-                    if (request != null)
-                    {
-                        request.Dispose();
-                    }
+                    request?.Dispose();
                 }
             }
         }
@@ -113,10 +110,7 @@ internal static void DisposeResponses(List<HttpResponseMessage> responses)
         {
             foreach (HttpResponseMessage response in responses)
             {
-                if (response != null)
-                {
-                    response.Dispose();
-                }
+                response?.Dispose();
             }
         }
     }
diff --git a/src/Microsoft.AspNet.OData/Batch/ChangeSetResponseItem.cs b/src/Microsoft.AspNet.OData/Batch/ChangeSetResponseItem.cs
index f0913151f..f62028204 100644
--- a/src/Microsoft.AspNet.OData/Batch/ChangeSetResponseItem.cs
+++ b/src/Microsoft.AspNet.OData/Batch/ChangeSetResponseItem.cs
@@ -86,10 +86,7 @@ protected override void Dispose(bool disposing)
             {
                 foreach (HttpResponseMessage response in Responses)
                 {
-                    if (response != null)
-                    {
-                        response.Dispose();
-                    }
+                    response?.Dispose();
                 }
             }
         }
diff --git a/src/Microsoft.AspNet.OData/Batch/DefaultODataBatchHandler.cs b/src/Microsoft.AspNet.OData/Batch/DefaultODataBatchHandler.cs
index 6c83bd05b..c7727dc22 100644
--- a/src/Microsoft.AspNet.OData/Batch/DefaultODataBatchHandler.cs
+++ b/src/Microsoft.AspNet.OData/Batch/DefaultODataBatchHandler.cs
@@ -100,10 +100,7 @@ public virtual async Task<IList<ODataBatchResponseItem>> ExecuteRequestMessagesA
             {
                 foreach (ODataBatchResponseItem response in responses)
                 {
-                    if (response != null)
-                    {
-                        response.Dispose();
-                    }
+                    response?.Dispose();
                 }
                 throw;
             }
diff --git a/src/Microsoft.AspNet.OData/Batch/ODataBatchContent.cs b/src/Microsoft.AspNet.OData/Batch/ODataBatchContent.cs
index ba5549d2e..3753e2367 100644
--- a/src/Microsoft.AspNet.OData/Batch/ODataBatchContent.cs
+++ b/src/Microsoft.AspNet.OData/Batch/ODataBatchContent.cs
@@ -80,10 +80,7 @@ protected override void Dispose(bool disposing)
             {
                 foreach (ODataBatchResponseItem response in Responses)
                 {
-                    if (response != null)
-                    {
-                        response.Dispose();
-                    }
+                    response?.Dispose();
                 }
             }
 
diff --git a/src/Microsoft.AspNet.OData/Batch/UnbufferedODataBatchHandler.cs b/src/Microsoft.AspNet.OData/Batch/UnbufferedODataBatchHandler.cs
index 5ce3bba9e..59fb2223e 100644
--- a/src/Microsoft.AspNet.OData/Batch/UnbufferedODataBatchHandler.cs
+++ b/src/Microsoft.AspNet.OData/Batch/UnbufferedODataBatchHandler.cs
@@ -85,10 +85,7 @@ public override async Task<HttpResponseMessage> ProcessBatchAsync(HttpRequestMes
             {
                 foreach (ODataBatchResponseItem response in responses)
                 {
-                    if (response != null)
-                    {
-                        response.Dispose();
-                    }
+                    response?.Dispose();
                 }
                 throw;
             }
diff --git a/src/Microsoft.AspNet.OData/EnableQueryAttribute.cs b/src/Microsoft.AspNet.OData/EnableQueryAttribute.cs
index c40d51a4a..86e282228 100644
--- a/src/Microsoft.AspNet.OData/EnableQueryAttribute.cs
+++ b/src/Microsoft.AspNet.OData/EnableQueryAttribute.cs
@@ -86,8 +86,8 @@ public override void OnActionExecuted(HttpActionExecutedContext actionExecutedCo
 
                 // Get collection from SingleResult.
                 IQueryable singleResultCollection = null;
-                SingleResult singleResult = responseContent.Value as SingleResult;
-                if (singleResult != null)
+
+                if (responseContent.Value is SingleResult singleResult)
                 {
                     // This could be a SingleResult, which has the property Queryable.
                     // But it could be a SingleResult() or SingleResult<T>. Sort by number of parameters
diff --git a/src/Microsoft.AspNet.OData/Extensions/HttpConfigurationExtensions.cs b/src/Microsoft.AspNet.OData/Extensions/HttpConfigurationExtensions.cs
index 9e2cf70ea..046e49f5f 100644
--- a/src/Microsoft.AspNet.OData/Extensions/HttpConfigurationExtensions.cs
+++ b/src/Microsoft.AspNet.OData/Extensions/HttpConfigurationExtensions.cs
@@ -895,10 +895,7 @@ private static Action<IContainerBuilder> ConfigureDefaultServices(HttpConfigurat
                 builder.AddDefaultWebApiServices();
 
                 // Add custom actions.
-                if (configureAction != null)
-                {
-                    configureAction.Invoke(builder);
-                }
+                configureAction?.Invoke(builder);
             });
         }
     }
diff --git a/src/Microsoft.AspNet.OData/Extensions/HttpErrorExtensions.cs b/src/Microsoft.AspNet.OData/Extensions/HttpErrorExtensions.cs
index b50cb314a..c05a68ac8 100644
--- a/src/Microsoft.AspNet.OData/Extensions/HttpErrorExtensions.cs
+++ b/src/Microsoft.AspNet.OData/Extensions/HttpErrorExtensions.cs
@@ -80,8 +80,7 @@ private static string ConvertModelStateErrors(HttpError error)
                     builder.Append(modelStateError.Key);
                     builder.Append(" : ");
 
-                    IEnumerable<string> errorMessages = modelStateError.Value as IEnumerable<string>;
-                    if (errorMessages != null)
+                    if (modelStateError.Value is IEnumerable<string> errorMessages)
                     {
                         foreach (string errorMessage in errorMessages)
                         {
diff --git a/src/Microsoft.AspNet.OData/Formatter/ODataModelBinderProvider.cs b/src/Microsoft.AspNet.OData/Formatter/ODataModelBinderProvider.cs
index 74d50f24d..e42362056 100644
--- a/src/Microsoft.AspNet.OData/Formatter/ODataModelBinderProvider.cs
+++ b/src/Microsoft.AspNet.OData/Formatter/ODataModelBinderProvider.cs
@@ -75,16 +75,14 @@ public bool BindModel(HttpActionContext actionContext, ModelBindingContext bindi
 
                 try
                 {
-                    ODataParameterValue paramValue = value.RawValue as ODataParameterValue;
-                    if (paramValue != null)
+                    if (value.RawValue is ODataParameterValue paramValue)
                     {
                         bindingContext.Model = ConvertTo(paramValue, actionContext, bindingContext,
                             actionContext.Request.GetRequestContainer());
                         return true;
                     }
 
-                    string valueString = value.RawValue as string;
-                    if (valueString != null)
+                    if (value.RawValue is string valueString)
                     {
                         bindingContext.Model = ODataModelBinderConverter.ConvertTo(valueString, bindingContext.ModelType);
                         return true;
@@ -117,7 +115,7 @@ public bool BindModel(HttpActionContext actionContext, ModelBindingContext bindi
             internal static object ConvertTo(ODataParameterValue parameterValue, HttpActionContext actionContext, ModelBindingContext bindingContext,
                 IServiceProvider requestContainer)
             {
-                Contract.Assert(parameterValue != null && parameterValue.EdmType != null);
+                Contract.Assert(parameterValue?.EdmType != null);
 
                 object oDataValue = parameterValue.Value;
                 if (oDataValue == null || oDataValue is ODataNullValue)
diff --git a/src/Microsoft.AspNet.OData/PerRequestActionValueBinder.cs b/src/Microsoft.AspNet.OData/PerRequestActionValueBinder.cs
index af8ff66d1..b56e08c09 100644
--- a/src/Microsoft.AspNet.OData/PerRequestActionValueBinder.cs
+++ b/src/Microsoft.AspNet.OData/PerRequestActionValueBinder.cs
@@ -51,7 +51,7 @@ public HttpActionBinding GetBinding(HttpActionDescriptor actionDescriptor)
                     // attach the request may fail when using with OData (and the exception retured in that instance
                     // will explain the necessity of providing this behavior when implementing HttpParameterBinding for
                     // OData).
-                    if (parameterBinding != null && parameterBinding is FormatterParameterBinding)
+                    if (parameterBinding is FormatterParameterBinding)
                     {
                         Contract.Assert(parameterBinding.Descriptor != null);
                         Contract.Assert(actionDescriptor.Configuration != null);
diff --git a/src/Microsoft.AspNet.OData/Routing/ODataRoute.cs b/src/Microsoft.AspNet.OData/Routing/ODataRoute.cs
index 305f8e1f5..67f3b52b6 100644
--- a/src/Microsoft.AspNet.OData/Routing/ODataRoute.cs
+++ b/src/Microsoft.AspNet.OData/Routing/ODataRoute.cs
@@ -111,8 +111,7 @@ public override IHttpVirtualPathData GetVirtualPath(HttpRequestMessage request,
                 object odataPathValue;
                 if (values.TryGetValue(ODataRouteConstants.ODataPath, out odataPathValue))
                 {
-                    string odataPath = odataPathValue as string;
-                    if (odataPath != null)
+                    if (odataPathValue is string odataPath)
                     {
                         // Try to generate an optimized direct link
                         // Otherwise, fall back to the base implementation
diff --git a/test/UnitTest/Microsoft.AspNet.OData.Test.Shared/Builder/ActionConfigurationTest.cs b/test/UnitTest/Microsoft.AspNet.OData.Test.Shared/Builder/ActionConfigurationTest.cs
index 22b27e5ae..2bb189a0b 100644
--- a/test/UnitTest/Microsoft.AspNet.OData.Test.Shared/Builder/ActionConfigurationTest.cs
+++ b/test/UnitTest/Microsoft.AspNet.OData.Test.Shared/Builder/ActionConfigurationTest.cs
@@ -113,7 +113,7 @@ public void CanCreateActionWithComplexReturnType()
 
             CollectionTypeConfiguration addresses = createAddresses.ReturnType as CollectionTypeConfiguration;
             Assert.NotNull(addresses);
-            Assert.Equal(string.Format("Collection({0})", typeof(Address).FullName), addresses.FullName);
+            Assert.Equal($"Collection({typeof(Address).FullName})", addresses.FullName);
             address = addresses.ElementType as ComplexTypeConfiguration;
             Assert.NotNull(address);
             Assert.Equal(typeof(Address).FullName, address.FullName);
@@ -178,7 +178,7 @@ public void CanCreateActionThatBindsToEntityCollection()
             Assert.NotNull(sendEmail.Parameters);
             Assert.Single(sendEmail.Parameters);
             Assert.Equal(BindingParameterConfiguration.DefaultBindingParameterName, sendEmail.Parameters.Single().Name);
-            Assert.Equal(string.Format("Collection({0})", typeof(Customer).FullName), sendEmail.Parameters.Single().TypeConfiguration.FullName);
+            Assert.Equal($"Collection({typeof(Customer).FullName})", sendEmail.Parameters.Single().TypeConfiguration.FullName);
         }
 
         [Fact]
@@ -265,13 +265,13 @@ public void CanCreateActionWithNonbindingParameters()
             Assert.Equal("p4", parameters[4].Name);
             Assert.Equal("Collection(Edm.Int32)", parameters[4].TypeConfiguration.FullName);
             Assert.Equal("p5", parameters[5].Name);
-            Assert.Equal(string.Format("Collection({0})", typeof(ZipCode).FullName), parameters[5].TypeConfiguration.FullName);
+            Assert.Equal($"Collection({typeof(ZipCode).FullName})", parameters[5].TypeConfiguration.FullName);
 
             Assert.Equal("p6", parameters[6].Name);
             Assert.Equal(typeof(Customer).FullName, parameters[6].TypeConfiguration.FullName);
 
             Assert.Equal("p7", parameters[7].Name);
-            Assert.Equal(string.Format("Collection({0})", typeof(Employee).FullName), parameters[7].TypeConfiguration.FullName);
+            Assert.Equal($"Collection({typeof(Employee).FullName})", parameters[7].TypeConfiguration.FullName);
         }
 
         [Fact]
diff --git a/test/UnitTest/Microsoft.AspNet.OData.Test.Shared/Builder/ContainmentPathBuilderTest.cs b/test/UnitTest/Microsoft.AspNet.OData.Test.Shared/Builder/ContainmentPathBuilderTest.cs
index 440dcf260..eeceeee86 100644
--- a/test/UnitTest/Microsoft.AspNet.OData.Test.Shared/Builder/ContainmentPathBuilderTest.cs
+++ b/test/UnitTest/Microsoft.AspNet.OData.Test.Shared/Builder/ContainmentPathBuilderTest.cs
@@ -272,29 +272,25 @@ private Uri CreateUriFromPath(ODataPath path)
             // Append each segment to base uri
             foreach (ODataPathSegment segment in segments)
             {
-                KeySegment keySegment = segment as KeySegment;
-                if (keySegment != null)
+                if (segment is KeySegment keySegment)
                 {
                     computedUri = AppendKeyExpression(computedUri, keySegment.Keys);
                     continue;
                 }
 
-                EntitySetSegment entitySetSegment = segment as EntitySetSegment;
-                if (entitySetSegment != null)
+                if (segment is EntitySetSegment entitySetSegment)
                 {
                     computedUri = AppendSegment(computedUri, entitySetSegment.EntitySet.Name);
                     continue;
                 }
 
-                SingletonSegment singletonSegment = segment as SingletonSegment;
-                if (singletonSegment != null)
+                if (segment is SingletonSegment singletonSegment)
                 {
                     computedUri = AppendSegment(computedUri, singletonSegment.Singleton.Name);
                     continue;
                 }
 
-                var typeSegment = segment as TypeSegment;
-                if (typeSegment != null)
+                if (segment is TypeSegment typeSegment)
                 {
                     var edmType = typeSegment.EdmType;
                     if (edmType.TypeKind == EdmTypeKind.Collection)
diff --git a/test/UnitTest/Microsoft.AspNet.OData.Test.Shared/Builder/Conventions/ODataConventionModelBuilderTests.cs b/test/UnitTest/Microsoft.AspNet.OData.Test.Shared/Builder/Conventions/ODataConventionModelBuilderTests.cs
index 2e06cef0e..495e28323 100644
--- a/test/UnitTest/Microsoft.AspNet.OData.Test.Shared/Builder/Conventions/ODataConventionModelBuilderTests.cs
+++ b/test/UnitTest/Microsoft.AspNet.OData.Test.Shared/Builder/Conventions/ODataConventionModelBuilderTests.cs
@@ -2254,7 +2254,7 @@ public void ComplexType_Containing_ComplexCollection_works()
 
             IEdmComplexType complexEdmType = model.AssertHasComplexType(complexType);
             model.AssertHasComplexType(typeof(Version));
-            var collectionProperty = complexEdmType.DeclaredProperties.Where(p => p.Name == "CollectionProperty").SingleOrDefault();
+            var collectionProperty = complexEdmType.DeclaredProperties.SingleOrDefault(p => p.Name == "CollectionProperty");
             Assert.NotNull(collectionProperty);
             Assert.True(collectionProperty.Type.IsCollection());
             Assert.Equal("System.Version", collectionProperty.Type.AsCollection().ElementType().FullName());
@@ -2275,7 +2275,7 @@ public void EntityType_Containing_ComplexCollection_Works()
 
             IEdmEntityType entityEdmType = model.AssertHasEntityType(entityType);
             model.AssertHasComplexType(typeof(Version));
-            var collectionProperty = entityEdmType.DeclaredProperties.Where(p => p.Name == "CollectionProperty").SingleOrDefault();
+            var collectionProperty = entityEdmType.DeclaredProperties.SingleOrDefault(p => p.Name == "CollectionProperty");
             Assert.NotNull(collectionProperty);
             Assert.True(collectionProperty.Type.IsCollection());
             Assert.Equal("System.Version", collectionProperty.Type.AsCollection().ElementType().FullName());
@@ -2302,7 +2302,7 @@ public void EntityType_Containing_ComplexTypeContainingComplexCollection_Works()
             model.AssertHasComplexType(typeof(Version));
             IEdmComplexType edmComplexType = model.AssertHasComplexType(complexTypeWithComplexCollection);
 
-            var collectionProperty = edmComplexType.DeclaredProperties.Where(p => p.Name == "ComplexCollectionProperty").SingleOrDefault();
+            var collectionProperty = edmComplexType.DeclaredProperties.SingleOrDefault(p => p.Name == "ComplexCollectionProperty");
             Assert.NotNull(collectionProperty);
             Assert.True(collectionProperty.Type.IsCollection());
             Assert.Equal("System.Version", collectionProperty.Type.AsCollection().ElementType().FullName());
@@ -2978,8 +2978,8 @@ public void GetEdmModel_WorksOnConventionModelBuilder_ForOpenEntityType()
             Assert.True(entityType.IsOpen);
             Assert.Equal(2, entityType.Properties().Count());
 
-            Assert.True(entityType.Properties().Where(c => c.Name == "Id").Any());
-            Assert.True(entityType.Properties().Where(c => c.Name == "Name").Any());
+            Assert.True(entityType.Properties().Any(c => c.Name == "Id"));
+            Assert.True(entityType.Properties().Any(c => c.Name == "Name"));
         }
 
         [Fact]
@@ -3363,11 +3363,11 @@ public void CanConfig_MaxLengthOfStringAndBinaryType()
 
             // Assert
             Assert.NotNull(model);
-            var nameProp = entityType.Properties.Where(p => p.Name.Equals("Name")).First();
+            var nameProp = entityType.Properties.First(p => p.Name.Equals("Name"));
             Assert.NotNull(nameProp);
-            var byteProp = entityType.Properties.Where(p => p.Name.Equals("Byte")).First();
+            var byteProp = entityType.Properties.First(p => p.Name.Equals("Byte"));
             Assert.NotNull(byteProp);
-            var nonLengthProp = entityType.Properties.Where(p => p.Name.Equals("NonLength")).First();
+            var nonLengthProp = entityType.Properties.First(p => p.Name.Equals("NonLength"));
             Assert.NotNull(nonLengthProp);
             Assert.Equal(3, ((LengthPropertyConfiguration)nameProp).MaxLength);
             Assert.Equal(5, ((LengthPropertyConfiguration)byteProp).MaxLength);
diff --git a/test/UnitTest/Microsoft.AspNet.OData.Test.Shared/Builder/EdmModelAsserts.cs b/test/UnitTest/Microsoft.AspNet.OData.Test.Shared/Builder/EdmModelAsserts.cs
index 9eb5e248d..1dc64c377 100644
--- a/test/UnitTest/Microsoft.AspNet.OData.Test.Shared/Builder/EdmModelAsserts.cs
+++ b/test/UnitTest/Microsoft.AspNet.OData.Test.Shared/Builder/EdmModelAsserts.cs
@@ -57,7 +57,7 @@ public static IEdmEntityType AssertHasEntityType(this IEdmModel model, Type mapp
 
         public static IEdmEntityType AssertHasEntityType(this IEdmModel model, Type mappedEntityClrType)
         {
-            var entityType = model.SchemaElements.OfType<IEdmEntityType>().Where(t => model.GetEdmType(mappedEntityClrType).IsEquivalentTo(t)).SingleOrDefault();
+            var entityType = model.SchemaElements.OfType<IEdmEntityType>().SingleOrDefault(t => model.GetEdmType(mappedEntityClrType).IsEquivalentTo(t));
             Assert.NotNull(entityType);
             Assert.True(model.GetEdmType(mappedEntityClrType).IsEquivalentTo(entityType));
             return entityType;
@@ -65,7 +65,7 @@ public static IEdmEntityType AssertHasEntityType(this IEdmModel model, Type mapp
 
         public static IEdmComplexType AssertHasComplexType(this IEdmModel model, Type mappedClrType)
         {
-            var complexType = model.SchemaElements.OfType<IEdmComplexType>().Where(t => model.GetEdmType(mappedClrType).IsEquivalentTo(t)).SingleOrDefault();
+            var complexType = model.SchemaElements.OfType<IEdmComplexType>().SingleOrDefault(t => model.GetEdmType(mappedClrType).IsEquivalentTo(t));
             Assert.NotNull(complexType);
             Assert.True(model.GetEdmType(mappedClrType).IsEquivalentTo(complexType));
             return complexType;
diff --git a/test/UnitTest/Microsoft.AspNet.OData.Test.Shared/Builder/EdmTypeConfigurationExtensionsTest.cs b/test/UnitTest/Microsoft.AspNet.OData.Test.Shared/Builder/EdmTypeConfigurationExtensionsTest.cs
index 449f51a26..398d393c9 100644
--- a/test/UnitTest/Microsoft.AspNet.OData.Test.Shared/Builder/EdmTypeConfigurationExtensionsTest.cs
+++ b/test/UnitTest/Microsoft.AspNet.OData.Test.Shared/Builder/EdmTypeConfigurationExtensionsTest.cs
@@ -351,7 +351,7 @@ public void ComplexType_ThisAndBaseTypes_ReturnsThisType()
             // Arrange
             ODataModelBuilder builder = GetMockVehicleModel();
             ComplexTypeConfiguration sportbikeAddress = builder.StructuralTypes
-                .OfType<ComplexTypeConfiguration>().Where(e => e.Name == "SportbikeAddress").Single();
+                .OfType<ComplexTypeConfiguration>().Single(e => e.Name == "SportbikeAddress");
 
             // Act & Assert
             Assert.Contains(sportbikeAddress, sportbikeAddress.ThisAndBaseTypes());
diff --git a/test/UnitTest/Microsoft.AspNet.OData.Test.Shared/Builder/EntitySetLinkConfigurationTest.cs b/test/UnitTest/Microsoft.AspNet.OData.Test.Shared/Builder/EntitySetLinkConfigurationTest.cs
index 20f4b1643..afab0fcb6 100644
--- a/test/UnitTest/Microsoft.AspNet.OData.Test.Shared/Builder/EntitySetLinkConfigurationTest.cs
+++ b/test/UnitTest/Microsoft.AspNet.OData.Test.Shared/Builder/EntitySetLinkConfigurationTest.cs
@@ -23,9 +23,7 @@ public void CanConfigureOnIdLinkViaIdLinkFactory()
 
             var products = builder.EntitySet<EntitySetLinkConfigurationTest_Product>("Products");
             products.HasIdLink(c =>
-                new Uri(string.Format(
-                    "http://server/service/Products({0})",
-                    c.GetPropertyValue("ID"))
+                new Uri($"http://server/service/Products({c.GetPropertyValue("ID")})"
                 ),
                 followsConventions: false);
 
@@ -59,10 +57,7 @@ public void CanConfigureLinksIndependently()
 
             var products = builder.EntitySet<EntitySetLinkConfigurationTest_Product>("Products");
             products.HasEditLink(c => new Uri(
-                string.Format(
-                    "http://server1/service/Products({0})",
-                    c.GetPropertyValue("ID")
-                )
+                $"http://server1/service/Products({c.GetPropertyValue("ID")})"
             ),
             followsConventions: false);
             products.HasReadLink(c => new Uri(
@@ -73,9 +68,7 @@ public void CanConfigureLinksIndependently()
             ),
             followsConventions: false);
             products.HasIdLink(c =>
-                new Uri(string.Format(
-                    "http://server3/service/Products({0})",
-                    c.GetPropertyValue("ID"))
+                new Uri($"http://server3/service/Products({c.GetPropertyValue("ID")})"
                 ),
             followsConventions: false
             );
diff --git a/test/UnitTest/Microsoft.AspNet.OData.Test.Shared/Builder/EntitySetTest.cs b/test/UnitTest/Microsoft.AspNet.OData.Test.Shared/Builder/EntitySetTest.cs
index 89de514cc..173a742e6 100644
--- a/test/UnitTest/Microsoft.AspNet.OData.Test.Shared/Builder/EntitySetTest.cs
+++ b/test/UnitTest/Microsoft.AspNet.OData.Test.Shared/Builder/EntitySetTest.cs
@@ -283,8 +283,7 @@ public void CanConfigureLinks_For_NavigationPropertiesInDerivedType()
             vehiclesSet.HasNavigationPropertyLink(
                 vehiclesSet.HasOptionalBinding((Motorcycle m) => m.Manufacturer, "manufacturers").NavigationProperty,
                 (ctxt, property) =>
-                    new Uri(String.Format("http://localhost/vehicles/{0}/{1}/{2}",
-                        ctxt.GetPropertyValue("Model"), ctxt.GetPropertyValue("Name"), property.Name)), followsConventions: false);
+                    new Uri($"http://localhost/vehicles/{ctxt.GetPropertyValue("Model")}/{ctxt.GetPropertyValue("Name")}/{property.Name}"), followsConventions: false);
 
             IEdmModel model = builder.GetEdmModel();
             var vehicles = model.EntityContainer.FindEntitySet("vehicles");
@@ -418,7 +417,7 @@ public void CanConfigureSingleProperty_MultipleBindingPath_For_NavigationPropert
             var address = model.AssertHasComplexType(typeof(BindingAddress));
             var cityProperty = address.AssertHasNavigationProperty(model, "City", typeof(BindingCity), isNullable: false, multiplicity: EdmMultiplicity.One);
             var bindings = customers.FindNavigationPropertyBindings(cityProperty).ToList();
-            Assert.Equal(2, bindings.Count());
+            Assert.Equal(2, bindings.Count);
 
             Assert.Equal("City, City", String.Join(", ", bindings.Select(e => e.NavigationProperty.Name)));
 
diff --git a/test/UnitTest/Microsoft.AspNet.OData.Test.Shared/Builder/EntityTypeTest.cs b/test/UnitTest/Microsoft.AspNet.OData.Test.Shared/Builder/EntityTypeTest.cs
index 39e0f8eb0..d90550ec7 100644
--- a/test/UnitTest/Microsoft.AspNet.OData.Test.Shared/Builder/EntityTypeTest.cs
+++ b/test/UnitTest/Microsoft.AspNet.OData.Test.Shared/Builder/EntityTypeTest.cs
@@ -688,8 +688,8 @@ public void GetEdmModel_WorksOnModelBuilder_ForOpenEntityType()
             Assert.True(entityType.IsOpen);
             Assert.Equal(2, entityType.Properties().Count());
 
-            Assert.True(entityType.Properties().Where(c => c.Name == "Id").Any());
-            Assert.True(entityType.Properties().Where(c => c.Name == "Name").Any());
+            Assert.True(entityType.Properties().Any(c => c.Name == "Id"));
+            Assert.True(entityType.Properties().Any(c => c.Name == "Name"));
         }
 
 
diff --git a/test/UnitTest/Microsoft.AspNet.OData.Test.Shared/Builder/FunctionConfigurationTest.cs b/test/UnitTest/Microsoft.AspNet.OData.Test.Shared/Builder/FunctionConfigurationTest.cs
index aab89f99d..faba453ec 100644
--- a/test/UnitTest/Microsoft.AspNet.OData.Test.Shared/Builder/FunctionConfigurationTest.cs
+++ b/test/UnitTest/Microsoft.AspNet.OData.Test.Shared/Builder/FunctionConfigurationTest.cs
@@ -112,7 +112,7 @@ public void CanCreateFunctionWithComplexReturnType()
 
             CollectionTypeConfiguration addresses = createAddresses.ReturnType as CollectionTypeConfiguration;
             Assert.NotNull(addresses);
-            Assert.Equal(string.Format("Collection({0})", typeof(Address).FullName), addresses.FullName);
+            Assert.Equal($"Collection({typeof(Address).FullName})", addresses.FullName);
             address = addresses.ElementType as ComplexTypeConfiguration;
             Assert.NotNull(address);
             Assert.Equal(typeof(Address).FullName, address.FullName);
@@ -214,7 +214,7 @@ public void CanCreateFunctionThatBindsToEntityCollection()
             Assert.NotNull(sendEmail.Parameters);
             Assert.Single(sendEmail.Parameters);
             Assert.Equal(BindingParameterConfiguration.DefaultBindingParameterName, sendEmail.Parameters.Single().Name);
-            Assert.Equal(string.Format("Collection({0})", typeof(Customer).FullName), sendEmail.Parameters.Single().TypeConfiguration.FullName);
+            Assert.Equal($"Collection({typeof(Customer).FullName})", sendEmail.Parameters.Single().TypeConfiguration.FullName);
         }
 
         [Fact]
@@ -298,13 +298,13 @@ public void CanCreateFunctionWithNonbindingParameters()
             Assert.Equal("p4", parameters[4].Name);
             Assert.Equal("Collection(Edm.Int32)", parameters[4].TypeConfiguration.FullName);
             Assert.Equal("p5", parameters[5].Name);
-            Assert.Equal(string.Format("Collection({0})", typeof(ZipCode).FullName), parameters[5].TypeConfiguration.FullName);
+            Assert.Equal($"Collection({typeof(ZipCode).FullName})", parameters[5].TypeConfiguration.FullName);
 
             Assert.Equal("p6", parameters[6].Name);
             Assert.Equal(typeof(Customer).FullName, parameters[6].TypeConfiguration.FullName);
 
             Assert.Equal("p7", parameters[7].Name);
-            Assert.Equal(string.Format("Collection({0})", typeof(Employee).FullName), parameters[7].TypeConfiguration.FullName);
+            Assert.Equal($"Collection({typeof(Employee).FullName})", parameters[7].TypeConfiguration.FullName);
         }
 
         [Fact]
diff --git a/test/UnitTest/Microsoft.AspNet.OData.Test.Shared/Builder/ParameterConfigurationTest.cs b/test/UnitTest/Microsoft.AspNet.OData.Test.Shared/Builder/ParameterConfigurationTest.cs
index a9076064d..4bb953909 100644
--- a/test/UnitTest/Microsoft.AspNet.OData.Test.Shared/Builder/ParameterConfigurationTest.cs
+++ b/test/UnitTest/Microsoft.AspNet.OData.Test.Shared/Builder/ParameterConfigurationTest.cs
@@ -24,7 +24,7 @@ public void BindingParameterConfigurationThrowsWhenParameterTypeIsNotEntity()
             {
                 BindingParameterConfiguration configuration = new BindingParameterConfiguration("name", builder.GetTypeConfigurationOrNull(typeof(Address)));
             });
-            Assert.Contains(string.Format("'{0}'", typeof(Address).FullName), exception.Message);
+            Assert.Contains($"'{typeof(Address).FullName}'", exception.Message);
             Assert.Equal("parameterType", exception.ParamName);
         }
 
diff --git a/test/UnitTest/Microsoft.AspNet.OData.Test.Shared/Builder/PropertyPairSelectorVisitorTest.cs b/test/UnitTest/Microsoft.AspNet.OData.Test.Shared/Builder/PropertyPairSelectorVisitorTest.cs
index 5596c0c9b..a5c791042 100644
--- a/test/UnitTest/Microsoft.AspNet.OData.Test.Shared/Builder/PropertyPairSelectorVisitorTest.cs
+++ b/test/UnitTest/Microsoft.AspNet.OData.Test.Shared/Builder/PropertyPairSelectorVisitorTest.cs
@@ -92,7 +92,7 @@ public void LambdaExpressionAccessesNotProperty_ThrowException()
 
             // Act & Assert
             ExceptionAssert.Throws<InvalidOperationException>(() => PropertyPairSelectorVisitor.GetSelectedProperty(expr),
-                string.Format("Member '{0}.Field' is not a property.", typeof(Principal).FullName));
+                $"Member '{typeof(Principal).FullName}.Field' is not a property.");
         }
 
         [Fact]
diff --git a/test/UnitTest/Microsoft.AspNet.OData.Test.Shared/Builder/PropertySelectorVisitorTest.cs b/test/UnitTest/Microsoft.AspNet.OData.Test.Shared/Builder/PropertySelectorVisitorTest.cs
index ef4c3582d..b37a262bf 100644
--- a/test/UnitTest/Microsoft.AspNet.OData.Test.Shared/Builder/PropertySelectorVisitorTest.cs
+++ b/test/UnitTest/Microsoft.AspNet.OData.Test.Shared/Builder/PropertySelectorVisitorTest.cs
@@ -40,7 +40,7 @@ public void FailWhenLambdaExpressionAccessesFields()
             {
                 var properties = PropertySelectorVisitor.GetSelectedProperties(expr);
             });
-            Assert.Equal(string.Format("Member '{0}.Field' is not a property.", typeof(WorkItem).FullName), exception.Message);
+            Assert.Equal($"Member '{typeof(WorkItem).FullName}.Field' is not a property.", exception.Message);
         }
 
         [Fact]
diff --git a/test/UnitTest/Microsoft.AspNet.OData.Test.Shared/Builder/StructuralTypeConfigurationTest.cs b/test/UnitTest/Microsoft.AspNet.OData.Test.Shared/Builder/StructuralTypeConfigurationTest.cs
index f42780334..bd18d66f0 100644
--- a/test/UnitTest/Microsoft.AspNet.OData.Test.Shared/Builder/StructuralTypeConfigurationTest.cs
+++ b/test/UnitTest/Microsoft.AspNet.OData.Test.Shared/Builder/StructuralTypeConfigurationTest.cs
@@ -54,7 +54,7 @@ public void AddDynamicPropertyDictionary_ThrowsIfTypeIsNotDictionary()
             // Act & Assert
             ExceptionAssert.ThrowsArgument(() => configuration.AddDynamicPropertyDictionary(property),
                 "propertyInfo",
-                string.Format("The argument must be of type '{0}'.", "IDictionary<string, object>"));
+                $"The argument must be of type '{"IDictionary<string, object>"}'.");
         }
 
         [Fact]
diff --git a/test/UnitTest/Microsoft.AspNet.OData.Test.Shared/Common/ExceptionAssert.cs b/test/UnitTest/Microsoft.AspNet.OData.Test.Shared/Common/ExceptionAssert.cs
index 49ba1b52c..1d223d9bb 100644
--- a/test/UnitTest/Microsoft.AspNet.OData.Test.Shared/Common/ExceptionAssert.cs
+++ b/test/UnitTest/Microsoft.AspNet.OData.Test.Shared/Common/ExceptionAssert.cs
@@ -97,8 +97,7 @@ public static TException Throws<TException>(Action testCode, bool allowDerivedEx
             Type exceptionType = typeof(TException);
             Exception exception = RecordException(testCode);
 
-            TargetInvocationException tie = exception as TargetInvocationException;
-            if (tie != null)
+            if (exception is TargetInvocationException tie)
             {
                 exception = tie.InnerException;
             }
@@ -525,8 +524,7 @@ public static Exception RecordException(Action testCode)
 
         private static Exception UnwrapException(Exception exception)
         {
-            AggregateException aggEx = exception as AggregateException;
-            if (aggEx != null)
+            if (exception is AggregateException aggEx)
             {
                 return aggEx.GetBaseException();
             }
diff --git a/test/UnitTest/Microsoft.AspNet.OData.Test.Shared/Common/MemberHelper.cs b/test/UnitTest/Microsoft.AspNet.OData.Test.Shared/Common/MemberHelper.cs
index 84c40c138..9bc8fbb34 100644
--- a/test/UnitTest/Microsoft.AspNet.OData.Test.Shared/Common/MemberHelper.cs
+++ b/test/UnitTest/Microsoft.AspNet.OData.Test.Shared/Common/MemberHelper.cs
@@ -20,9 +20,7 @@ private static ConstructorInfo GetConstructorInfo(object instance, Type[] parame
             ConstructorInfo constructorInfo = instance.GetType().GetConstructor(parameterTypes);
             if (constructorInfo == null)
             {
-                throw new ArgumentException(String.Format(
-                    "A matching constructor on type '{0}' could not be found.",
-                    instance.GetType().FullName));
+                throw new ArgumentException($"A matching constructor on type '{instance.GetType().FullName}' could not be found.");
             }
             return constructorInfo;
         }
@@ -40,9 +38,7 @@ private static EventInfo GetEventInfo(object instance, string eventName)
             EventInfo eventInfo = instance.GetType().GetEvent(eventName);
             if (eventInfo == null)
             {
-                throw new ArgumentException(String.Format(
-                    "An event named '{0}' on type '{1}' could not be found.",
-                    eventName, instance.GetType().FullName));
+                throw new ArgumentException($"An event named '{eventName}' on type '{instance.GetType().FullName}' could not be found.");
             }
             return eventInfo;
         }
@@ -75,16 +71,12 @@ private static MethodInfo GetMethodInfo(object instance, string methodName, Type
 
             if (methodInfo == null)
             {
-                throw new ArgumentException(String.Format(
-                    "A method named '{0}' on type '{1}' could not be found.",
-                    methodName, instance.GetType().FullName));
+                throw new ArgumentException($"A method named '{methodName}' on type '{instance.GetType().FullName}' could not be found.");
             }
 
             if ((methodInfo.Attributes & attrs) != attrs)
             {
-                throw new ArgumentException(String.Format(
-                    "Method '{0}' on type '{1}' with attributes '{2}' does not match the attributes '{3}'.",
-                    methodName, instance.GetType().FullName, methodInfo.Attributes, attrs));
+                throw new ArgumentException($"Method '{methodName}' on type '{instance.GetType().FullName}' with attributes '{methodInfo.Attributes}' does not match the attributes '{attrs}'.");
             }
 
             return methodInfo;
@@ -103,9 +95,7 @@ private static PropertyInfo GetPropertyInfo(object instance, string propertyName
             PropertyInfo propInfo = instance.GetType().GetProperty(propertyName, BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance);
             if (propInfo == null)
             {
-                throw new ArgumentException(String.Format(
-                    "A property named '{0}' on type '{1}' could not be found.",
-                    propertyName, instance.GetType().FullName));
+                throw new ArgumentException($"A property named '{propertyName}' on type '{instance.GetType().FullName}' could not be found.");
             }
             return propInfo;
         }
diff --git a/test/UnitTest/Microsoft.AspNet.OData.Test.Shared/Common/PreAppStartTestHelper.cs b/test/UnitTest/Microsoft.AspNet.OData.Test.Shared/Common/PreAppStartTestHelper.cs
index ed86024fe..a3564f09f 100644
--- a/test/UnitTest/Microsoft.AspNet.OData.Test.Shared/Common/PreAppStartTestHelper.cs
+++ b/test/UnitTest/Microsoft.AspNet.OData.Test.Shared/Common/PreAppStartTestHelper.cs
@@ -12,14 +12,14 @@ public static class PreAppStartTestHelper
     {
         public static void TestPreAppStartClass(Type preAppStartType)
         {
-            string typeMessage = String.Format("The type '{0}' must be static, public, and named 'PreApplicationStartCode'.", preAppStartType.FullName);
+            string typeMessage = $"The type '{preAppStartType.FullName}' must be static, public, and named 'PreApplicationStartCode'.";
             Assert.True(preAppStartType.IsSealed && preAppStartType.IsAbstract && preAppStartType.IsPublic && preAppStartType.Name == "PreApplicationStartCode", typeMessage);
 
-            string editorBrowsableMessage = String.Format("The only attribute on type '{0}' must be [EditorBrowsable(EditorBrowsableState.Never)].", preAppStartType.FullName);
+            string editorBrowsableMessage = $"The only attribute on type '{preAppStartType.FullName}' must be [EditorBrowsable(EditorBrowsableState.Never)].";
             object[] attrs = preAppStartType.GetCustomAttributes(typeof(EditorBrowsableAttribute), true);
             Assert.True(attrs.Length == 1 && ((EditorBrowsableAttribute)attrs[0]).State == EditorBrowsableState.Never, editorBrowsableMessage);
 
-            string startMethodMessage = String.Format("The only public member on type '{0}' must be a method called Start().", preAppStartType.FullName);
+            string startMethodMessage = $"The only public member on type '{preAppStartType.FullName}' must be a method called Start().";
             MemberInfo[] publicMembers = preAppStartType.GetMembers(BindingFlags.Public | BindingFlags.Static);
             Assert.True(publicMembers.Length == 1, startMethodMessage);
             Assert.True(publicMembers[0].MemberType == MemberTypes.Method, startMethodMessage);
diff --git a/test/UnitTest/Microsoft.AspNet.OData.Test.Shared/Common/TestFile.cs b/test/UnitTest/Microsoft.AspNet.OData.Test.Shared/Common/TestFile.cs
index 41ae8b93f..fee4ede6d 100644
--- a/test/UnitTest/Microsoft.AspNet.OData.Test.Shared/Common/TestFile.cs
+++ b/test/UnitTest/Microsoft.AspNet.OData.Test.Shared/Common/TestFile.cs
@@ -31,7 +31,7 @@ public Stream OpenRead()
             Stream strm = Assembly.GetManifestResourceStream(ResourceName);
             if (strm == null)
             {
-                Assert.True(false, String.Format("Manifest resource: {0} not found", ResourceName));
+                Assert.True(false, $"Manifest resource: {ResourceName} not found");
             }
             return strm;
         }
diff --git a/test/UnitTest/Microsoft.AspNet.OData.Test.Shared/Common/TypeAssert.cs b/test/UnitTest/Microsoft.AspNet.OData.Test.Shared/Common/TypeAssert.cs
index 89a3ddd1b..176d3c772 100644
--- a/test/UnitTest/Microsoft.AspNet.OData.Test.Shared/Common/TypeAssert.cs
+++ b/test/UnitTest/Microsoft.AspNet.OData.Test.Shared/Common/TypeAssert.cs
@@ -97,7 +97,7 @@ public enum TypeProperties
         private static void CheckProperty(Type type, bool expected, bool actual, string property)
         {
             Assert.NotNull(type);
-            Assert.True(expected == actual, String.Format("Type '{0}' should{1} be {2}.", type.FullName, expected ? "" : " NOT", property));
+            Assert.True(expected == actual, $"Type '{type.FullName}' should{(expected ? "" : " NOT")} be {property}.");
         }
 
         /// <summary>
@@ -158,7 +158,7 @@ public static void HasProperties(Type type, TypeProperties typeProperties, Type
             TypeAssert.CheckProperty(type, (typeProperties & TypeProperties.IsVisible) > 0, type.IsVisible, "visible");
             if (isAssignableFrom != null)
             {
-                TypeAssert.CheckProperty(type, true, isAssignableFrom.IsAssignableFrom(type), String.Format("assignable from {0}", isAssignableFrom.FullName));
+                TypeAssert.CheckProperty(type, true, isAssignableFrom.IsAssignableFrom(type), $"assignable from {isAssignableFrom.FullName}");
             }
         }
     }
diff --git a/test/UnitTest/Microsoft.AspNet.OData.Test.Shared/ContentIdHelpersTest.cs b/test/UnitTest/Microsoft.AspNet.OData.Test.Shared/ContentIdHelpersTest.cs
index b1a30cef4..56552d690 100644
--- a/test/UnitTest/Microsoft.AspNet.OData.Test.Shared/ContentIdHelpersTest.cs
+++ b/test/UnitTest/Microsoft.AspNet.OData.Test.Shared/ContentIdHelpersTest.cs
@@ -55,7 +55,7 @@ public void ResolveContentId_ResolvesExactContentID(string url, string expectedR
             Dictionary<string, string> contentIdToLocationMapping = new Dictionary<string, string>();
             for (int id = 1; id < 101; id++)
             {
-                contentIdToLocationMapping.Add(id.ToString(), string.Format("http://localhost/OData/Customers({0})", id));
+                contentIdToLocationMapping.Add(id.ToString(), $"http://localhost/OData/Customers({id})");
             }
 
             // Act
diff --git a/test/UnitTest/Microsoft.AspNet.OData.Test.Shared/DollarFormatTest.cs b/test/UnitTest/Microsoft.AspNet.OData.Test.Shared/DollarFormatTest.cs
index a940190d1..267400785 100644
--- a/test/UnitTest/Microsoft.AspNet.OData.Test.Shared/DollarFormatTest.cs
+++ b/test/UnitTest/Microsoft.AspNet.OData.Test.Shared/DollarFormatTest.cs
@@ -24,7 +24,7 @@ public async Task DollarFormat_Applies_IfPresent(string path, string mediaTypeFo
         {
             // Arrange
             MediaTypeHeaderValue expected = MediaTypeHeaderValue.Parse(mediaTypeFormat);
-            string url = string.Format("http://localhost/{0}?$format={1}", path, mediaTypeFormat);
+            string url = $"http://localhost/{path}?$format={mediaTypeFormat}";
             IEdmModel model = GetEdmModel();
             var configuration = RoutingConfigurationFactory.CreateWithTypes(
                 new[] { typeof(FormatCustomersController), typeof(ThisController) });
diff --git a/test/UnitTest/Microsoft.AspNet.OData.Test.Shared/Formatter/Deserialization/ODataActionPayloadDeserializerTest.cs b/test/UnitTest/Microsoft.AspNet.OData.Test.Shared/Formatter/Deserialization/ODataActionPayloadDeserializerTest.cs
index ce9aa00ca..265f21793 100644
--- a/test/UnitTest/Microsoft.AspNet.OData.Test.Shared/Formatter/Deserialization/ODataActionPayloadDeserializerTest.cs
+++ b/test/UnitTest/Microsoft.AspNet.OData.Test.Shared/Formatter/Deserialization/ODataActionPayloadDeserializerTest.cs
@@ -661,7 +661,7 @@ public void Throws_ODataException_When_Parameter_Notfound(string actionName, IEd
 
         private static ODataPath CreateBoundPath(string actionName)
         {
-            string path = String.Format("Customers(1)/A.B.{0}", actionName);
+            string path = $"Customers(1)/A.B.{actionName}";
             ODataPath odataPath = new DefaultODataPathHandler().Parse(_model, _serviceRoot, path);
             Assert.NotNull(odataPath); // Guard
             return odataPath;
@@ -669,7 +669,7 @@ private static ODataPath CreateBoundPath(string actionName)
 
         private static ODataPath CreateUnboundPath(string actionName)
         {
-            string path = String.Format("{0}", actionName);
+            string path = $"{actionName}";
             ODataPath odataPath = new DefaultODataPathHandler().Parse(_model, _serviceRoot, path);
             Assert.NotNull(odataPath); // Guard
             return odataPath;
diff --git a/test/UnitTest/Microsoft.AspNet.OData.Test.Shared/Formatter/Deserialization/ODataResourceDeserializerTests.cs b/test/UnitTest/Microsoft.AspNet.OData.Test.Shared/Formatter/Deserialization/ODataResourceDeserializerTests.cs
index a46d2196f..c31223b87 100644
--- a/test/UnitTest/Microsoft.AspNet.OData.Test.Shared/Formatter/Deserialization/ODataResourceDeserializerTests.cs
+++ b/test/UnitTest/Microsoft.AspNet.OData.Test.Shared/Formatter/Deserialization/ODataResourceDeserializerTests.cs
@@ -432,7 +432,7 @@ public void ReadResource_CanReadDynamicPropertiesForOpenEntityType()
             ODataNestedResourceInfoWrapper resourceInfoWrapper = new ODataNestedResourceInfoWrapper(resourceInfo);
             ODataResourceSetWrapper resourceSetWrapper = new ODataResourceSetWrapper(new ODataResourceSet
             {
-                TypeName = String.Format("Collection({0})", typeof(SimpleOpenAddress).FullName)
+                TypeName = $"Collection({typeof(SimpleOpenAddress).FullName})"
             });
             foreach (var complexResource in complexResources)
             {
@@ -461,7 +461,7 @@ public void ReadResource_CanReadDynamicPropertiesForOpenEntityType()
             // Verify the dynamic collection property
             var collectionValues = Assert.IsType<List<SimpleOpenAddress>>(customer.CustomerProperties["CollectionProperty"]);
             Assert.NotNull(collectionValues);
-            Assert.Equal(2, collectionValues.Count());
+            Assert.Equal(2, collectionValues.Count);
 
             Assert.Equal(new DateTimeOffset(new DateTime(2014, 5, 6)), collectionValues[0].Properties["DateTimeProperty"]);
             Assert.Equal(new List<int> { 1, 2, 3, 4 }, collectionValues[1].Properties["ArrayProperty"]);
@@ -558,7 +558,7 @@ public void ReadResource_CanReadDynamicPropertiesForOpenEntityTypeAndAnnotations
             ODataNestedResourceInfoWrapper resourceInfoWrapper = new ODataNestedResourceInfoWrapper(resourceInfo);
             ODataResourceSetWrapper resourceSetWrapper = new ODataResourceSetWrapper(new ODataResourceSet
             {
-                TypeName = String.Format("Collection({0})", typeof(SimpleOpenAddress).FullName)
+                TypeName = $"Collection({typeof(SimpleOpenAddress).FullName})"
             });
             foreach (var complexResource in complexResources)
             {
@@ -587,7 +587,7 @@ public void ReadResource_CanReadDynamicPropertiesForOpenEntityTypeAndAnnotations
             // Verify the dynamic collection property
             var collectionValues = Assert.IsType<List<SimpleOpenAddress>>(customer.CustomerProperties["CollectionProperty"]);
             Assert.NotNull(collectionValues);
-            Assert.Equal(2, collectionValues.Count());
+            Assert.Equal(2, collectionValues.Count);
 
             Assert.Equal(new DateTimeOffset(new DateTime(2014, 5, 6)), collectionValues[0].Properties["DateTimeProperty"]);
             Assert.Equal(new List<int> { 1, 2, 3, 4 }, collectionValues[1].Properties["ArrayProperty"]);
@@ -707,7 +707,7 @@ public void ReadResource_CanReadDynamicPropertiesForOpenEntityTypeAndAnnotations
             ODataNestedResourceInfoWrapper resourceInfoWrapper = new ODataNestedResourceInfoWrapper(resourceInfo);
             ODataResourceSetWrapper resourceSetWrapper = new ODataResourceSetWrapper(new ODataResourceSet
             {
-                TypeName = String.Format("Collection({0})", typeof(SimpleOpenAddress).FullName)
+                TypeName = $"Collection({typeof(SimpleOpenAddress).FullName})"
             });
             foreach (var complexResource in complexResources)
             {
@@ -736,7 +736,7 @@ public void ReadResource_CanReadDynamicPropertiesForOpenEntityTypeAndAnnotations
             // Verify the dynamic collection property
             var collectionValues = Assert.IsType<List<SimpleOpenAddress>>(customer.CustomerProperties["CollectionProperty"]);
             Assert.NotNull(collectionValues);
-            Assert.Equal(2, collectionValues.Count());
+            Assert.Equal(2, collectionValues.Count);
 
             Assert.Equal(new DateTimeOffset(new DateTime(2014, 5, 6)), collectionValues[0].Properties["DateTimeProperty"]);
             Assert.Equal(new List<int> { 1, 2, 3, 4 }, collectionValues[1].Properties["ArrayProperty"]);
diff --git a/test/UnitTest/Microsoft.AspNet.OData.Test.Shared/Formatter/EdmLibHelpersTests.cs b/test/UnitTest/Microsoft.AspNet.OData.Test.Shared/Formatter/EdmLibHelpersTests.cs
index 5bd5f726b..2431ac157 100644
--- a/test/UnitTest/Microsoft.AspNet.OData.Test.Shared/Formatter/EdmLibHelpersTests.cs
+++ b/test/UnitTest/Microsoft.AspNet.OData.Test.Shared/Formatter/EdmLibHelpersTests.cs
@@ -88,22 +88,22 @@ public void IsNonstandardEdmPrimitive_Returns_False(Type primitiveType)
         public void GetEdmType_ReturnsBaseType()
         {
             IEdmModel model = GetEdmModel();
-            Assert.Equal(model.GetEdmType(typeof(BaseType)), model.SchemaElements.OfType<IEdmEntityType>().Where(t => t.Name == "BaseType").Single());
+            Assert.Equal(model.GetEdmType(typeof(BaseType)), model.SchemaElements.OfType<IEdmEntityType>().Single(t => t.Name == "BaseType"));
         }
 
         [Fact]
         public void GetEdmType_ReturnsDerivedType()
         {
             IEdmModel model = GetEdmModel();
-            Assert.Equal(model.GetEdmType(typeof(DerivedTypeA)), model.SchemaElements.OfType<IEdmEntityType>().Where(t => t.Name == "DerivedTypeA").Single());
-            Assert.Equal(model.GetEdmType(typeof(DerivedTypeB)), model.SchemaElements.OfType<IEdmEntityType>().Where(t => t.Name == "DerivedTypeB").Single());
+            Assert.Equal(model.GetEdmType(typeof(DerivedTypeA)), model.SchemaElements.OfType<IEdmEntityType>().Single(t => t.Name == "DerivedTypeA"));
+            Assert.Equal(model.GetEdmType(typeof(DerivedTypeB)), model.SchemaElements.OfType<IEdmEntityType>().Single(t => t.Name == "DerivedTypeB"));
         }
 
         [Fact]
         public void GetEdmType_Returns_NearestDerivedType()
         {
             IEdmModel model = GetEdmModel();
-            Assert.Equal(model.GetEdmType(typeof(DerivedTypeAA)), model.SchemaElements.OfType<IEdmEntityType>().Where(t => t.Name == "DerivedTypeA").Single());
+            Assert.Equal(model.GetEdmType(typeof(DerivedTypeAA)), model.SchemaElements.OfType<IEdmEntityType>().Single(t => t.Name == "DerivedTypeA"));
         }
 
         [Fact]
@@ -187,8 +187,7 @@ public void ToEdmTypeReference_InstantiatesRightEdmTypeReference(IEdmType edmTyp
         {
             IEdmTypeReference result = EdmLibHelpers.ToEdmTypeReference(edmType, isNullable);
 
-            IEdmCollectionTypeReference collection = result as IEdmCollectionTypeReference;
-            if (collection != null)
+            if (result is IEdmCollectionTypeReference collection)
             {
                 Assert.Equal(isNullable, collection.ElementType().IsNullable);
             }
diff --git a/test/UnitTest/Microsoft.AspNet.OData.Test.Shared/Formatter/ODataFormatterTests.cs b/test/UnitTest/Microsoft.AspNet.OData.Test.Shared/Formatter/ODataFormatterTests.cs
index c0186a74d..4e30f918f 100644
--- a/test/UnitTest/Microsoft.AspNet.OData.Test.Shared/Formatter/ODataFormatterTests.cs
+++ b/test/UnitTest/Microsoft.AspNet.OData.Test.Shared/Formatter/ODataFormatterTests.cs
@@ -613,7 +613,7 @@ public async Task CustomSerializerWorks_ForInstanceAnnotationsFilter(string filt
             HttpClient client = TestServerFactory.CreateClient(server);
 
             HttpRequestMessage request = CreateRequestWithAnnotationFilter("People(2)",
-                String.Format("odata.include-annotations=\"{0}\"", filter));
+                $"odata.include-annotations=\"{filter}\"");
 
             // Act
             HttpResponseMessage response = await client.SendAsync(request);
@@ -1400,8 +1400,7 @@ private static IEdmModel CreateModelForFullMetadata(bool sameLinksForIdAndEdit,
                     followsConventions: false);
 
             main.Function("IsAlways").ReturnsCollectionFromEntitySet<MainEntity>("MainEntity").HasFunctionLink(c =>
-                CreateAbsoluteUri(String.Format(
-                    "/MainEntity({0})/Default.IsAlways()", c.GetPropertyValue("Id"))),
+                CreateAbsoluteUri($"/MainEntity({c.GetPropertyValue("Id")})/Default.IsAlways()"),
                 followsConventions: false);
 
             // action and function bound to collection
diff --git a/test/UnitTest/Microsoft.AspNet.OData.Test.Shared/Formatter/ODataMediaTypeFormatterTests.cs b/test/UnitTest/Microsoft.AspNet.OData.Test.Shared/Formatter/ODataMediaTypeFormatterTests.cs
index 8cfa1b3b4..6d54a89eb 100644
--- a/test/UnitTest/Microsoft.AspNet.OData.Test.Shared/Formatter/ODataMediaTypeFormatterTests.cs
+++ b/test/UnitTest/Microsoft.AspNet.OData.Test.Shared/Formatter/ODataMediaTypeFormatterTests.cs
@@ -681,7 +681,7 @@ public Task ReadFromStreamAsync_UsesCorrectCharacterEncoding(string content, str
             MediaTypeFormatter formatter = CreateFormatterWithRequest();
             formatter.SupportedEncodings.Add(CreateEncoding(encoding));
             string formattedContent = CreateFormattedContent(content);
-            string mediaType = string.Format("application/json; odata.metadata=minimal; charset={0}", encoding);
+            string mediaType = $"application/json; odata.metadata=minimal; charset={encoding}";
 
             // Act & assert
             return ReadContentUsingCorrectCharacterEncodingHelper(
@@ -697,7 +697,7 @@ public Task WriteToStreamAsync_UsesCorrectCharacterEncoding(string content, stri
             MediaTypeFormatter formatter = CreateFormatterWithRequest();
             formatter.SupportedEncodings.Add(CreateEncoding(encoding));
             string formattedContent = CreateFormattedContent(content);
-            string mediaType = string.Format("application/json; odata.metadata=minimal; charset={0}", encoding);
+            string mediaType = $"application/json; odata.metadata=minimal; charset={encoding}";
 
             // Act & assert
             return WriteContentUsingCorrectCharacterEncodingHelper(
diff --git a/test/UnitTest/Microsoft.AspNet.OData.Test.Shared/Formatter/ODataModelBinderProviderTest.cs b/test/UnitTest/Microsoft.AspNet.OData.Test.Shared/Formatter/ODataModelBinderProviderTest.cs
index 5d7ed39de..6f2d91565 100644
--- a/test/UnitTest/Microsoft.AspNet.OData.Test.Shared/Formatter/ODataModelBinderProviderTest.cs
+++ b/test/UnitTest/Microsoft.AspNet.OData.Test.Shared/Formatter/ODataModelBinderProviderTest.cs
@@ -165,9 +165,7 @@ public void GetBinder_ThrowsArgumentNull_modelType()
         public async Task ODataModelBinderProvider_Works(object value, string action)
         {
             // Arrange
-            string url = String.Format("http://localhost/ODataModelBinderProviderTest/{0}({1})",
-                action,
-                Uri.EscapeDataString(ConventionsHelpers.GetUriRepresentationForValue(value)));
+            string url = $"http://localhost/ODataModelBinderProviderTest/{action}({Uri.EscapeDataString(ConventionsHelpers.GetUriRepresentationForValue(value))})";
 
             // Act
             HttpResponseMessage response = await _client.GetAsync(url);
@@ -185,8 +183,7 @@ public async Task ODataModelBinderProvider_Works(object value, string action)
         public async Task ODataModelBinderProvider_Works_ForNullable(object value, Type type, string action)
         {
             // Arrange
-            string url = String.Format("http://localhost/ODataModelBinderProviderTest/{0}({1})", action,
-                value == null ? "null" : Uri.EscapeDataString(ConventionsHelpers.GetUriRepresentationForValue(value)));
+            string url = $"http://localhost/ODataModelBinderProviderTest/{action}({(value == null ? "null" : Uri.EscapeDataString(ConventionsHelpers.GetUriRepresentationForValue(value)))})";
 
             // Act
             HttpResponseMessage response = await _client.GetAsync(url);
@@ -204,9 +201,7 @@ public async Task ODataModelBinderProvider_Works_DateTime()
         {
             TimeZoneInfoHelper.TimeZone = null;
             DateTime value = new DateTime(2014, 11, 5, 0, 0, 0, DateTimeKind.Local);
-            string url = String.Format(
-                "http://localhost/ODataModelBinderProviderTest/GetDateTime({0})",
-                Uri.EscapeDataString(ConventionsHelpers.GetUriRepresentationForValue(value)));
+            string url = $"http://localhost/ODataModelBinderProviderTest/GetDateTime({Uri.EscapeDataString(ConventionsHelpers.GetUriRepresentationForValue(value))})";
             HttpResponseMessage response = await _client.GetAsync(url);
             ExceptionAssert.DoesNotThrow(() => response.EnsureSuccessStatusCode());
             Assert.Equal(
@@ -218,10 +213,7 @@ public async Task ODataModelBinderProvider_Works_DateTime()
         [MemberData(nameof(ODataModelBinderProvider_Throws_TestData))]
         public async Task ODataModelBinderProvider_Throws(object value, string action)
         {
-            string url = String.Format(
-                "http://localhost/ODataModelBinderProviderThrowsTest/{0}({1})",
-                action,
-                Uri.EscapeDataString(ODataUriUtils.ConvertToUriLiteral(value, ODataVersion.V4)));
+            string url = $"http://localhost/ODataModelBinderProviderThrowsTest/{action}({Uri.EscapeDataString(ODataUriUtils.ConvertToUriLiteral(value, ODataVersion.V4))})";
             HttpResponseMessage response = await _client.GetAsync(url);
 
             Assert.Equal(HttpStatusCode.BadRequest, response.StatusCode);
@@ -232,7 +224,7 @@ public async Task ODataModelBinderProvider_Throws(object value, string action)
         [MemberData(nameof(ODataModelBinderProvider_ModelStateErrors_InvalidODataRepresentations_TestData))]
         public async Task ODataModelBinderProvider_ModelStateErrors_InvalidODataRepresentations(string value, string action, string error)
         {
-            string url = String.Format("http://localhost/ODataModelBinderProviderThrowsTest/{0}({1})", action, Uri.EscapeDataString(value));
+            string url = $"http://localhost/ODataModelBinderProviderThrowsTest/{action}({Uri.EscapeDataString(value)})";
             HttpResponseMessage response = await _client.GetAsync(url);
 
             ExceptionAssert.DoesNotThrow(() => response.EnsureSuccessStatusCode());
@@ -246,7 +238,7 @@ public async Task ODataModelBinderProvider_ModelStateErrors_InvalidODataRepresen
         [MemberData(nameof(ODataModelBinderProvider_ModelStateErrors_InvalidConversions_TestData))]
         public async Task ODataModelBinderProvider_ModelStateErrors_InvalidConversions(string value, string action, string error)
         {
-            string url = String.Format("http://localhost/ODataModelBinderProviderThrowsTest/{0}({1})", action, Uri.EscapeDataString(value));
+            string url = $"http://localhost/ODataModelBinderProviderThrowsTest/{action}({Uri.EscapeDataString(value)})";
             HttpResponseMessage response = await _client.GetAsync(url);
 
             ExceptionAssert.DoesNotThrow(() => response.EnsureSuccessStatusCode());
@@ -258,10 +250,7 @@ public async Task ODataModelBinderProvider_ModelStateErrors_InvalidConversions(s
         [Fact]
         public async Task TestMultipleKeys()
         {
-            string url = String.Format(
-                "http://localhost/ODataModeBinderMultipleKeys/GetMultipleKeys(name={0},model={1})",
-                Uri.EscapeDataString(ODataUriUtils.ConvertToUriLiteral("name", ODataVersion.V4)),
-                Uri.EscapeDataString(ODataUriUtils.ConvertToUriLiteral(2009, ODataVersion.V4)));
+            string url = $"http://localhost/ODataModeBinderMultipleKeys/GetMultipleKeys(name={Uri.EscapeDataString(ODataUriUtils.ConvertToUriLiteral("name", ODataVersion.V4))},model={Uri.EscapeDataString(ODataUriUtils.ConvertToUriLiteral(2009, ODataVersion.V4))})";
 
             HttpResponseMessage response = await _client.GetAsync(url);
 
@@ -291,11 +280,7 @@ public async Task ODataModelBinderProvider_Works_ForEnum(object value, string ac
             HttpClient client = new HttpClient(server);
 
             // Act
-            string url = String.Format(
-                "http://localhost/{0}({1}={2})",
-                action,
-                parameterName,
-                Uri.EscapeDataString(ConventionsHelpers.GetUriRepresentationForValue(value)));
+            string url = $"http://localhost/{action}({parameterName}={Uri.EscapeDataString(ConventionsHelpers.GetUriRepresentationForValue(value))})";
             HttpResponseMessage response = await client.GetAsync(url);
 
             // Assert
@@ -323,9 +308,7 @@ public async Task ODataModelBinderProvider_Works_ForNullableEnum(object value, b
             HttpClient client = new HttpClient(server);
 
             // Act
-            string url = String.Format(
-                "http://localhost/GetNullableFlagsEnum(flagsEnum={0})",
-                value == null ? "null" : Uri.EscapeDataString(ConventionsHelpers.GetUriRepresentationForValue(value)));
+            string url = $"http://localhost/GetNullableFlagsEnum(flagsEnum={(value == null ? "null" : Uri.EscapeDataString(ConventionsHelpers.GetUriRepresentationForValue(value)))})";
             HttpResponseMessage response = await client.GetAsync(url);
 
             // Assert
@@ -352,11 +335,7 @@ public async Task ResourceIsNotFound_IfContainsInvalidEnum(object value, string
             HttpClient client = new HttpClient(server);
 
             // Act
-            string url = String.Format(
-                "http://localhost/{0}({1}={2})",
-                action,
-                parameterName,
-                Uri.EscapeDataString(ConventionsHelpers.GetUriRepresentationForValue(value)));
+            string url = $"http://localhost/{action}({parameterName}={Uri.EscapeDataString(ConventionsHelpers.GetUriRepresentationForValue(value))})";
             HttpResponseMessage response = await client.GetAsync(url);
 
             // Assert
@@ -380,11 +359,7 @@ public void DefaultODataPathHandler_IfContainsStringAsEnum()
             HttpClient client = new HttpClient(server);
 
             // Act
-            string url = String.Format(
-                "http://localhost/{0}({1}={2})",
-                action,
-                parameterName,
-                Uri.EscapeDataString(ConventionsHelpers.GetUriRepresentationForValue(value)));
+            string url = $"http://localhost/{action}({parameterName}={Uri.EscapeDataString(ConventionsHelpers.GetUriRepresentationForValue(value))})";
             HttpResponseMessage response = client.GetAsync(url).Result;
 
             // Assert
@@ -409,7 +384,7 @@ public async Task ODataModelBinderProvider_Works_OtherParameters(string action,
             HttpClient client = new HttpClient(server);
 
             // Act
-            string url = String.Format("http://localhost/{0}({1}=@p)?@p={2}", action, parameterName, parameterValue);
+            string url = $"http://localhost/{action}({parameterName}=@p)?@p={parameterValue}";
             HttpResponseMessage response = await client.GetAsync(url);
 
             // Assert
@@ -485,7 +460,7 @@ public ValueProviderResult GetValue(string key)
                     {
                         KeyValuePair<string, object> data = match.First();
                         int index = Int32.Parse(data.Key.Replace("key", String.Empty));
-                        object value = _routeData.Values[String.Format("value{0}", index)];
+                        object value = _routeData.Values[$"value{index}"];
                         return new ValueProviderResult(value, value.ToString(), CultureInfo.InvariantCulture);
                     }
 
diff --git a/test/UnitTest/Microsoft.AspNet.OData.Test.Shared/Formatter/Serialization/ODataEntityReferenceLinksSerializerTest.cs b/test/UnitTest/Microsoft.AspNet.OData.Test.Shared/Formatter/Serialization/ODataEntityReferenceLinksSerializerTest.cs
index 9a3c76f85..caca6f0fa 100644
--- a/test/UnitTest/Microsoft.AspNet.OData.Test.Shared/Formatter/Serialization/ODataEntityReferenceLinksSerializerTest.cs
+++ b/test/UnitTest/Microsoft.AspNet.OData.Test.Shared/Formatter/Serialization/ODataEntityReferenceLinksSerializerTest.cs
@@ -146,10 +146,7 @@ public void ODataEntityReferenceLinkSerializer_Serializes_UrisAndEntityReference
             stream.Seek(0, SeekOrigin.Begin);
             string result = new StreamReader(stream).ReadToEnd();
             Assert.Equal(
-                string.Format("{0},{1},{2}",
-                    "{\"@odata.context\":\"http://any/$metadata#Collection($ref)\"",
-                    "\"@odata.count\":1",
-                    "\"value\":[{\"@odata.id\":\"http://uri1/\"}]}"), result);
+                $"{"{\"@odata.context\":\"http://any/$metadata#Collection($ref)\""},{"\"@odata.count\":1"},{"\"value\":[{\"@odata.id\":\"http://uri1/\"}]}"}", result);
         }
     }
 }
diff --git a/test/UnitTest/Microsoft.AspNet.OData.Test.Shared/Formatter/Serialization/ODataResourceSerializerTests.cs b/test/UnitTest/Microsoft.AspNet.OData.Test.Shared/Formatter/Serialization/ODataResourceSerializerTests.cs
index 584e527ad..20a4f1d28 100644
--- a/test/UnitTest/Microsoft.AspNet.OData.Test.Shared/Formatter/Serialization/ODataResourceSerializerTests.cs
+++ b/test/UnitTest/Microsoft.AspNet.OData.Test.Shared/Formatter/Serialization/ODataResourceSerializerTests.cs
@@ -988,7 +988,7 @@ public void CreateResource_Works_WithInstanceAnnotations()
 
             //Verify Instance Annotations
             Assert.Equal(1, resource.InstanceAnnotations.Count);
-            Assert.Equal(1, resource.Properties.ToList().Where(x => x.Name == "Name").First().InstanceAnnotations.Count);
+            Assert.Equal(1, resource.Properties.ToList().First(x => x.Name == "Name").InstanceAnnotations.Count);
         }
 
         [Fact]
@@ -1058,7 +1058,7 @@ public void CreateResource_Works_WithInstanceAnnotations_WithNullAnnotation()
 
             //Verify Instance Annotations
             Assert.Equal(1, resource.InstanceAnnotations.Count);
-            Assert.Equal(1, resource.Properties.ToList().Where(x => x.Name == "Name").First().InstanceAnnotations.Count);
+            Assert.Equal(1, resource.Properties.ToList().First(x => x.Name == "Name").InstanceAnnotations.Count);
         }
 
 
@@ -1233,7 +1233,7 @@ public void CreateResource_Works_WithInstanceAnnotations_OfTypeCollection()
 
             //Verify Instance Annotations
             Assert.Equal(1, resource.InstanceAnnotations.Count);
-            Assert.Equal(1, resource.Properties.ToList().Where(x => x.Name == "Name").First().InstanceAnnotations.Count);
+            Assert.Equal(1, resource.Properties.ToList().First(x => x.Name == "Name").InstanceAnnotations.Count);
 
             var collVal = resource.InstanceAnnotations.First().Value as ODataCollectionValue;
             Assert.NotNull(collVal);
@@ -1323,7 +1323,7 @@ public void CreateResource_Works_WithInstanceAnnotations_OfTypeComplex()
             Assert.Equal("Default.Address", ((ODataResourceValue)resource.InstanceAnnotations.First().Value).TypeName);
             Assert.Equal("152nd st", ((ODataResourceValue)resource.InstanceAnnotations.First().Value).Properties.ToList()[0].Value);
             Assert.Equal("Redmond", ((ODataResourceValue)resource.InstanceAnnotations.First().Value).Properties.ToList()[1].Value);
-            Assert.Equal(1, resource.Properties.ToList().Where(x => x.Name == "Name").First().InstanceAnnotations.Count);
+            Assert.Equal(1, resource.Properties.ToList().First(x => x.Name == "Name").InstanceAnnotations.Count);
         }
 
 
@@ -1412,7 +1412,7 @@ public void CreateResource_Works_WithInstanceAnnotations_OfTypeComplex_Collectio
             Assert.Equal("Collection(Default.Address)", ((ODataCollectionValue)resource.InstanceAnnotations.First().Value).TypeName);            
             Assert.Equal("152nd st", ((ODataResourceValue)((ODataCollectionValue)(resource.InstanceAnnotations.First().Value)).Items.ToList().First()).Properties.ToList()[0].Value);
             Assert.Equal("Redmond", ((ODataResourceValue)((ODataCollectionValue)(resource.InstanceAnnotations.First().Value)).Items.ToList().First()).Properties.ToList()[1].Value);
-            Assert.Equal(1, resource.Properties.ToList().Where(x => x.Name == "Name").First().InstanceAnnotations.Count);
+            Assert.Equal(1, resource.Properties.ToList().First(x => x.Name == "Name").InstanceAnnotations.Count);
         }
 
         [Fact]
@@ -1498,7 +1498,7 @@ public void CreateResource_Works_WithInstanceAnnotations_OnComplexType_AndProper
             Assert.Equal("Collection(Default.Address)", ((ODataCollectionValue)resource.InstanceAnnotations.First().Value).TypeName);
             Assert.Equal("152nd st", ((ODataResourceValue)((ODataCollectionValue)(resource.InstanceAnnotations.First().Value)).Items.ToList().First()).Properties.ToList()[0].Value);
             Assert.Equal("Redmond", ((ODataResourceValue)((ODataCollectionValue)(resource.InstanceAnnotations.First().Value)).Items.ToList().First()).Properties.ToList()[1].Value);
-            Assert.Equal(1, resource.Properties.ToList().Where(x => x.Name == "City").First().InstanceAnnotations.Count);
+            Assert.Equal(1, resource.Properties.ToList().First(x => x.Name == "City").InstanceAnnotations.Count);
         }
 
 
@@ -1608,7 +1608,7 @@ public void CreateResource_Works_ToAppendDynamicProperties_ForOpenEntityType_Wit
 
             //Verify Instance Annotations
             Assert.Equal(1, resource.InstanceAnnotations.Count);
-            Assert.Equal(1, resource.Properties.ToList().Where(x=>x.Name=="Name").First().InstanceAnnotations.Count);
+            Assert.Equal(1, resource.Properties.ToList().First(x=>x.Name=="Name").InstanceAnnotations.Count);
         }
 
         [Theory]
diff --git a/test/UnitTest/Microsoft.AspNet.OData.Test.Shared/ODataUriResolverExtensionTest.cs b/test/UnitTest/Microsoft.AspNet.OData.Test.Shared/ODataUriResolverExtensionTest.cs
index 86bd2889e..04df77d5f 100644
--- a/test/UnitTest/Microsoft.AspNet.OData.Test.Shared/ODataUriResolverExtensionTest.cs
+++ b/test/UnitTest/Microsoft.AspNet.OData.Test.Shared/ODataUriResolverExtensionTest.cs
@@ -250,7 +250,7 @@ public async Task ExtensionResolver_Works_EnumPrefixFree(string parameter, bool
 
             // Act
             HttpRequestMessage request = new HttpRequestMessage(HttpMethod.Get,
-                String.Format("http://localhost/odata/ParserExtenstionCustomers/Default.GetCustomerByGender({0})", parameter));
+                $"http://localhost/odata/ParserExtenstionCustomers/Default.GetCustomerByGender({parameter})");
             HttpResponseMessage response = await client.SendAsync(request);
 
             // Assert
@@ -299,7 +299,7 @@ public async Task ExtensionResolver_Works_EnumPrefixFree_QueryOption(string quer
 
             // Act
             HttpRequestMessage request = new HttpRequestMessage(HttpMethod.Get,
-                String.Format("http://localhost/odata/ParserExtenstionCustomers?{0}", query));
+                $"http://localhost/odata/ParserExtenstionCustomers?{query}");
             HttpResponseMessage response = await client.SendAsync(request);
 
             // Assert
diff --git a/test/UnitTest/Microsoft.AspNet.OData.Test.Shared/PublicApi/PublicApiTest.cs b/test/UnitTest/Microsoft.AspNet.OData.Test.Shared/PublicApi/PublicApiTest.cs
index 9ca4ac572..cf6d0ba52 100644
--- a/test/UnitTest/Microsoft.AspNet.OData.Test.Shared/PublicApi/PublicApiTest.cs
+++ b/test/UnitTest/Microsoft.AspNet.OData.Test.Shared/PublicApi/PublicApiTest.cs
@@ -23,7 +23,7 @@ public void TestPublicApi()
                 using (StreamWriter sw = new StreamWriter(fs))
                 {
                     string assemblyPath = outputPath + Path.DirectorySeparatorChar + AssemblyName;
-                    Assert.True(File.Exists(assemblyPath), string.Format("{0} does not exist in current directory", assemblyPath));
+                    Assert.True(File.Exists(assemblyPath), $"{assemblyPath} does not exist in current directory");
                     PublicApiHelper.DumpPublicApi(sw, assemblyPath);
                 }
             }
diff --git a/test/UnitTest/Microsoft.AspNet.OData.Test.Shared/Query/ApplyQueryOptionTest.cs b/test/UnitTest/Microsoft.AspNet.OData.Test.Shared/Query/ApplyQueryOptionTest.cs
index 78f8e560a..a4b33ded6 100644
--- a/test/UnitTest/Microsoft.AspNet.OData.Test.Shared/Query/ApplyQueryOptionTest.cs
+++ b/test/UnitTest/Microsoft.AspNet.OData.Test.Shared/Query/ApplyQueryOptionTest.cs
@@ -1231,7 +1231,7 @@ public void ApplyTo_Returns_Correct_Queryable(string filter, List<Dictionary<str
             Assert.NotNull(queryable);
             var actualCustomers = Assert.IsAssignableFrom<IEnumerable<DynamicTypeWrapper>>(queryable).ToList();
 
-            Assert.Equal(aggregation.Count(), actualCustomers.Count());
+            Assert.Equal(aggregation.Count, actualCustomers.Count);
 
             var aggEnum = actualCustomers.GetEnumerator();
 
@@ -1279,7 +1279,7 @@ public void ClausesAfterApplyTo_Returns_Correct_Queryable(string filter, List<Di
             Assert.NotNull(queryable);
             var actualCustomers = Assert.IsAssignableFrom<IEnumerable<DynamicTypeWrapper>>(queryable).ToList();
 
-            Assert.Equal(aggregation.Count(), actualCustomers.Count());
+            Assert.Equal(aggregation.Count, actualCustomers.Count);
 
             var aggEnum = actualCustomers.GetEnumerator();
 
@@ -1354,7 +1354,7 @@ public void StableSortingAndPagingApplyTo_Returns_Correct_Queryable(string filte
             Assert.NotNull(queryable);
             var actualCustomers = Assert.IsAssignableFrom<IEnumerable<DynamicTypeWrapper>>(queryable).ToList();
 
-            Assert.Equal(aggregation.Count(), actualCustomers.Count());
+            Assert.Equal(aggregation.Count, actualCustomers.Count);
 
             var aggEnum = actualCustomers.GetEnumerator();
 
@@ -1392,8 +1392,8 @@ public void ApplyTo_Returns_Correct_Queryable_ForFilter(string filter, int[] cus
                 context.Model,
                 context.ElementType,
                 context.NavigationSource,
-                new Dictionary<string, string> { { "$apply", string.Format("filter({0})", filter) } });
-            var filterOption = new ApplyQueryOption(string.Format("filter({0})", filter), context, queryOptionParser);
+                new Dictionary<string, string> { { "$apply", $"filter({filter})" } });
+            var filterOption = new ApplyQueryOption($"filter({filter})", context, queryOptionParser);
             IEnumerable<Customer> customers = CustomerApplyTestData;
 
             // Act
diff --git a/test/UnitTest/Microsoft.AspNet.OData.Test.Shared/Query/EnableQueryAttributeTest.cs b/test/UnitTest/Microsoft.AspNet.OData.Test.Shared/Query/EnableQueryAttributeTest.cs
index ea89e510b..b332af6ab 100644
--- a/test/UnitTest/Microsoft.AspNet.OData.Test.Shared/Query/EnableQueryAttributeTest.cs
+++ b/test/UnitTest/Microsoft.AspNet.OData.Test.Shared/Query/EnableQueryAttributeTest.cs
@@ -270,7 +270,7 @@ public void OnActionExecuted_Throws_Null_Request()
             ExceptionAssert.ThrowsArgument(
                 () => new EnableQueryAttribute().OnActionExecuted(new HttpActionExecutedContext()),
                 "actionExecutedContext",
-                String.Format("The HttpExecutedActionContext.Request is null.{0}Parameter name: actionExecutedContext", Environment.NewLine));
+                $"The HttpExecutedActionContext.Request is null.{Environment.NewLine}Parameter name: actionExecutedContext");
         }
 
         [Fact]
@@ -289,7 +289,7 @@ public void OnActionExecuted_Throws_Null_Configuration()
             ExceptionAssert.ThrowsArgument(
                 () => new EnableQueryAttribute().OnActionExecuted(context),
                 "actionExecutedContext",
-                String.Format("Request message does not contain an HttpConfiguration object.{0}Parameter name: actionExecutedContext", Environment.NewLine));
+                $"Request message does not contain an HttpConfiguration object.{Environment.NewLine}Parameter name: actionExecutedContext");
         }
 
         [Theory]
diff --git a/test/UnitTest/Microsoft.AspNet.OData.Test.Shared/Query/Expressions/AggregationBinderTests.cs b/test/UnitTest/Microsoft.AspNet.OData.Test.Shared/Query/Expressions/AggregationBinderTests.cs
index 3f17c587f..c08c3d199 100644
--- a/test/UnitTest/Microsoft.AspNet.OData.Test.Shared/Query/Expressions/AggregationBinderTests.cs
+++ b/test/UnitTest/Microsoft.AspNet.OData.Test.Shared/Query/Expressions/AggregationBinderTests.cs
@@ -202,10 +202,7 @@ private Expression VerifyQueryDeserialization(string filter, string expectedResu
 
             Func<ODataQuerySettings, ODataQuerySettings> customizeSettings = (settings) =>
             {
-                if (settingsCustomizer != null)
-                {
-                    settingsCustomizer.Invoke(settings);
-                }
+                settingsCustomizer?.Invoke(settings);
 
                 return settings;
             };
@@ -247,7 +244,7 @@ private void VerifyExpression<T>(Expression clause, string expectedExpression)
 #endif
             resultExpression = resultExpression.Replace(replace, string.Empty);
             Assert.True(resultExpression == expectedExpression,
-                String.Format("Expected expression '{0}' but the deserializer produced '{1}'", expectedExpression, resultExpression));
+                $"Expected expression '{expectedExpression}' but the deserializer produced '{resultExpression}'");
         }
 
         private ApplyClause CreateApplyNode(string clause, IEdmModel model, Type entityType)
diff --git a/test/UnitTest/Microsoft.AspNet.OData.Test.Shared/Query/Expressions/ExpressionStringBuilder.cs b/test/UnitTest/Microsoft.AspNet.OData.Test.Shared/Query/Expressions/ExpressionStringBuilder.cs
index 018cb9c19..1fe4a5833 100644
--- a/test/UnitTest/Microsoft.AspNet.OData.Test.Shared/Query/Expressions/ExpressionStringBuilder.cs
+++ b/test/UnitTest/Microsoft.AspNet.OData.Test.Shared/Query/Expressions/ExpressionStringBuilder.cs
@@ -81,9 +81,9 @@ protected override Expression VisitConstant(ConstantExpression node)
             }
             else
             {
-                LinqParameterContainer container = node.Value as LinqParameterContainer;
                 string stringValue;
-                if (container != null)
+
+                if (node.Value is LinqParameterContainer container)
                 {
                     stringValue = container.Property as string;
                     if (stringValue != null)
diff --git a/test/UnitTest/Microsoft.AspNet.OData.Test.Shared/Query/Expressions/FilterBinderTests.cs b/test/UnitTest/Microsoft.AspNet.OData.Test.Shared/Query/Expressions/FilterBinderTests.cs
index fff55f9b4..7f94fc3b1 100644
--- a/test/UnitTest/Microsoft.AspNet.OData.Test.Shared/Query/Expressions/FilterBinderTests.cs
+++ b/test/UnitTest/Microsoft.AspNet.OData.Test.Shared/Query/Expressions/FilterBinderTests.cs
@@ -839,7 +839,7 @@ public void RecursiveAllAny()
         [InlineData("Abcd", 5, "", true, typeof(ArgumentOutOfRangeException))]
         public void StringSubstringStart(string productName, int startIndex, string compareString, bool withNullPropagation, object withoutNullPropagation)
         {
-            string filter = String.Format("substring(ProductName, {0}) eq '{1}'", startIndex, compareString);
+            string filter = $"substring(ProductName, {startIndex}) eq '{compareString}'";
             var filters = VerifyQueryDeserialization(filter);
 
             RunFilters(filters,
@@ -863,7 +863,7 @@ public void StringSubstringStart(string productName, int startIndex, string comp
         [InlineData("Abcd", 5, -1, "", true, typeof(ArgumentOutOfRangeException))]
         public void StringSubstringStartAndLength(string productName, int startIndex, int length, string compareString, bool withNullPropagation, object withoutNullPropagation)
         {
-            string filter = String.Format("substring(ProductName, {0}, {1}) eq '{2}'", startIndex, length, compareString);
+            string filter = $"substring(ProductName, {startIndex}, {length}) eq '{compareString}'";
             var filters = VerifyQueryDeserialization(filter);
 
             RunFilters(filters,
@@ -1435,7 +1435,7 @@ public void CustomMethod_InstanceMethodOfDeclaringType()
                 CustomUriFunctions.AddCustomUriFunction(padrightMethodName, padrightStringEdmFunction);
                 UriFunctionsBinder.BindUriFunctionName(padrightMethodName, padRightStringMethodInfo);
 
-                string filter = String.Format("padright(ProductName, {0}) eq '{1}'", totalWidth, expectedProductName);
+                string filter = $"padright(ProductName, {totalWidth}) eq '{expectedProductName}'";
                 var filters = VerifyQueryDeserialization(filter);
 
                 RunFilters(filters,
@@ -1469,7 +1469,7 @@ public void CustomMethod_InstanceMethodNotOfDeclaringType()
                 CustomUriFunctions.AddCustomUriFunction(padrightMethodName, padrightStringEdmFunction);
                 UriFunctionsBinder.BindUriFunctionName(padrightMethodName, padRightStringMethodInfo);
 
-                string filter = String.Format("padright(ProductName, {0}) eq '{1}'", totalWidth, expectedProductName);
+                string filter = $"padright(ProductName, {totalWidth}) eq '{expectedProductName}'";
 
                 Action filterToExpression = () => VerifyQueryDeserialization(filter);
                 ExceptionAssert.Throws(typeof(NotImplementedException),filterToExpression);
@@ -1502,7 +1502,7 @@ public void CustomMethod_StaticExtensionMethod()
                 CustomUriFunctions.AddCustomUriFunction(padrightMethodName, padrightStringEdmFunction);
                 UriFunctionsBinder.BindUriFunctionName(padrightMethodName, padRightStringMethodInfo);
 
-                string filter = String.Format("padright(ProductName, {0}) eq '{1}'", totalWidth, expectedProductName);
+                string filter = $"padright(ProductName, {totalWidth}) eq '{expectedProductName}'";
                 var filters = VerifyQueryDeserialization(filter);
 
                 RunFilters(filters,
@@ -1537,7 +1537,7 @@ public void CustomMethod_StaticMethodNotOfDeclaringType()
                 CustomUriFunctions.AddCustomUriFunction(padrightMethodName, padrightStringEdmFunction);
                 UriFunctionsBinder.BindUriFunctionName(padrightMethodName, padRightStringMethodInfo);
 
-                string filter = String.Format("padright(ProductName, {0}) eq '{1}'", totalWidth, expectedProductName);
+                string filter = $"padright(ProductName, {totalWidth}) eq '{expectedProductName}'";
                 var filters = VerifyQueryDeserialization(filter);
 
                 RunFilters(filters,
@@ -1571,7 +1571,7 @@ public void CustomMethod_AddSignatureAndBindFunctionWithShortcut()
                 // Add the custom function
                 ODataUriFunctions.AddCustomUriFunction(padrightMethodName, padrightStringEdmFunction, padRightStringMethodInfo);
 
-                string filter = String.Format("padright(ProductName, {0}) eq '{1}'", totalWidth, expectedProductName);
+                string filter = $"padright(ProductName, {totalWidth}) eq '{expectedProductName}'";
                 var filters = VerifyQueryDeserialization(filter);
 
                 RunFilters(filters,
@@ -1729,7 +1729,7 @@ public void StringLiterals(string literal, string expected)
         {
             VerifyQueryDeserialization<Product>(
                 "ProductName eq " + literal,
-                String.Format("$it => ($it.ProductName == \"{0}\")", expected));
+                $"$it => ($it.ProductName == \"{expected}\")");
         }
 
         [Theory]
@@ -1761,7 +1761,7 @@ public void SpecialCharactersInStringLiteral(char c)
         {
             var filters = VerifyQueryDeserialization<Product>(
                 "ProductName eq '" + c + "'",
-                String.Format("$it => ($it.ProductName == \"{0}\")", c));
+                $"$it => ($it.ProductName == \"{c}\")");
 
             RunFilters(
                 filters,
@@ -1967,9 +1967,7 @@ public void Cast_UndefinedSource_ThrowsODataException(string filter, string erro
         public void CastToUnquotedUndefinedTarget_ThrowsODataException(string filter, string typeName)
         {
             // Arrange
-            var expectedMessage = string.Format(
-                "The child type '{0}' in a cast was not an entity type. Casts can only be performed on entity types.",
-                typeName);
+            var expectedMessage = $"The child type '{typeName}' in a cast was not an entity type. Casts can only be performed on entity types.";
 
             // Act & Assert
             ExceptionAssert.Throws<ODataException>(() => Bind<DataTypes>(filter), expectedMessage);
@@ -2472,9 +2470,7 @@ public void IsOfPrimitiveType_Succeeds_WithFalse(string filter)
         public void IsOfUndefinedTarget_ThrowsODataException(string filter, string typeName)
         {
             // Arrange
-            var expectedMessage = string.Format(
-                "The child type '{0}' in a cast was not an entity type. Casts can only be performed on entity types.",
-                typeName);
+            var expectedMessage = $"The child type '{typeName}' in a cast was not an entity type. Casts can only be performed on entity types.";
 
             // Act & Assert
             ExceptionAssert.Throws<ODataException>(() => Bind<DataTypes>(filter), expectedMessage);
@@ -3068,10 +3064,7 @@ private dynamic VerifyQueryDeserialization(string filter, string expectedResult
 
             Func<ODataQuerySettings, ODataQuerySettings> customizeSettings = (settings) =>
             {
-                if (settingsCustomizer != null)
-                {
-                    settingsCustomizer.Invoke(settings);
-                }
+                settingsCustomizer?.Invoke(settings);
 
                 return settings;
             };
@@ -3113,7 +3106,7 @@ private void VerifyExpression(Expression filter, string expectedExpression)
             // actual query operator
             string resultExpression = ExpressionStringBuilder.ToString(filter);
             Assert.True(resultExpression == expectedExpression,
-                String.Format("Expected expression '{0}' but the deserializer produced '{1}'", expectedExpression, resultExpression));
+                $"Expected expression '{expectedExpression}' but the deserializer produced '{resultExpression}'");
         }
 
         private IEdmModel GetModel<T>() where T : class
diff --git a/test/UnitTest/Microsoft.AspNet.OData.Test.Shared/Query/Expressions/SelectExpandBinderTest.cs b/test/UnitTest/Microsoft.AspNet.OData.Test.Shared/Query/Expressions/SelectExpandBinderTest.cs
index 4a2f8cf1d..0ce050771 100644
--- a/test/UnitTest/Microsoft.AspNet.OData.Test.Shared/Query/Expressions/SelectExpandBinderTest.cs
+++ b/test/UnitTest/Microsoft.AspNet.OData.Test.Shared/Query/Expressions/SelectExpandBinderTest.cs
@@ -1346,7 +1346,7 @@ public void CreatePropertyValueExpression_NonDerivedNavigationProperty_ReturnsMe
             // Assert
             Assert.Equal(ExpressionType.MemberAccess, propertyValue.NodeType);
             Assert.Equal(typeof(QueryCustomer).GetProperty(property), (propertyValue as MemberExpression).Member);
-            Assert.Equal(String.Format("{0}.{1}", source.ToString(), property), propertyValue.ToString());
+            Assert.Equal($"{source.ToString()}.{property}", propertyValue.ToString());
         }
 
         [Theory]
@@ -1367,7 +1367,7 @@ public void CreatePropertyValueExpression_DerivedNavigationProperty_ReturnsPrope
             Expression propertyValue = _binder.CreatePropertyValueExpression(_customer, specialProperty, source, null);
 
             // Assert
-            Assert.Equal(String.Format("({0} As QueryVipCustomer).{1}", source.ToString(), property), propertyValue.ToString());
+            Assert.Equal($"({source.ToString()} As QueryVipCustomer).{property}", propertyValue.ToString());
         }
 
         [Theory]
@@ -1392,7 +1392,7 @@ public void CreatePropertyValueExpression_DerivedValueProperty_ReturnsPropertyAc
 #if NETCORE
             Assert.Equal(String.Format("Convert(({0} As QueryVipCustomer).{1}, Nullable`1)", source.ToString(), property), propertyValue.ToString());
 #else
-            Assert.Equal(String.Format("Convert(({0} As QueryVipCustomer).{1})", source.ToString(), property), propertyValue.ToString());
+            Assert.Equal($"Convert(({source.ToString()} As QueryVipCustomer).{property})", propertyValue.ToString());
 #endif
         }
 
@@ -1415,7 +1415,7 @@ public void CreatePropertyValueExpression_DerivedReferenceProperty_ReturnsProper
             Expression propertyValue = _binder.CreatePropertyValueExpression(_customer, edmProperty, source, null);
 
             // Assert
-            Assert.Equal(String.Format("({0} As QueryVipCustomer).{1}", source.ToString(), property), propertyValue.ToString());
+            Assert.Equal($"({source.ToString()} As QueryVipCustomer).{property}", propertyValue.ToString());
         }
 
         [Fact]
@@ -1439,7 +1439,7 @@ public void CreatePropertyValueExpression_HandleNullPropagationTrue_AddsNullChec
             Assert.Equal(ExpressionType.Convert, conditionalExpression.IfFalse.NodeType);
             UnaryExpression falseUnaryExpression = conditionalExpression.IfFalse as UnaryExpression;
             Assert.NotNull(falseUnaryExpression);
-            Assert.Equal(String.Format("{0}.Id", source.ToString()), falseUnaryExpression.Operand.ToString());
+            Assert.Equal($"{source.ToString()}.Id", falseUnaryExpression.Operand.ToString());
             Assert.Equal(typeof(int?), falseUnaryExpression.Type);
 
             Assert.Equal(ExpressionType.Constant, conditionalExpression.IfTrue.NodeType);
@@ -1470,7 +1470,7 @@ public void CreatePropertyValueExpression_HandleNullPropagationFalse_ConvertsToN
 #if NETCORE
             Assert.Equal(String.Format("Convert({0}.Id, Nullable`1)", source.ToString()), property.ToString());
 #else
-            Assert.Equal(String.Format("Convert({0}.Id)", source.ToString()), property.ToString());
+            Assert.Equal($"Convert({source.ToString()}.Id)", property.ToString());
 #endif
             Assert.Equal(typeof(int?), property.Type);
         }
@@ -1500,8 +1500,7 @@ public void CreatePropertyValueExpression_Collection_ThrowsODataException_IfMapp
             // Act & Assert
             ExceptionAssert.Throws<ODataException>(
                 () => _binder.CreatePropertyValueExpression(_customer, ordersProperty, source, expandItem.FilterOption),
-                String.Format("The provided mapping does not contain a resource for the resource type '{0}'.",
-                ordersProperty.Type.Definition.AsElementType().FullTypeName()));
+                $"The provided mapping does not contain a resource for the resource type '{ordersProperty.Type.Definition.AsElementType().FullTypeName()}'.");
         }
 
         [Theory]
@@ -1574,7 +1573,7 @@ public void CreatePropertyValueExpression_Single_ThrowsODataException_IfMappingT
             // Act & Assert
             ExceptionAssert.Throws<ODataException>(
                 () => _binder.CreatePropertyValueExpression(_order, customerProperty, source, expandItem.FilterOption),
-                String.Format("The provided mapping does not contain a resource for the resource type '{0}'.", customerProperty.Type.FullName()));
+                $"The provided mapping does not contain a resource for the resource type '{customerProperty.Type.FullName()}'.");
         }
 
         [Fact]
diff --git a/test/UnitTest/Microsoft.AspNet.OData.Test.Shared/Query/ODataQueryOptionTest.cs b/test/UnitTest/Microsoft.AspNet.OData.Test.Shared/Query/ODataQueryOptionTest.cs
index 78d541152..1cc675a73 100644
--- a/test/UnitTest/Microsoft.AspNet.OData.Test.Shared/Query/ODataQueryOptionTest.cs
+++ b/test/UnitTest/Microsoft.AspNet.OData.Test.Shared/Query/ODataQueryOptionTest.cs
@@ -480,12 +480,12 @@ public void QueryTest(string queryName, string queryValue)
             if (queryValue == null)
             {
                 // same as not passing the query - - this would work
-                uri = string.Format("http://server/service/Customers?{0}=", queryName);
+                uri = $"http://server/service/Customers?{queryName}=";
             }
             else
             {
                 // if queryValue is invalid, such as whitespace or not a number for top and skip
-                uri = string.Format("http://server/service/Customers?{0}={1}", queryName, queryValue);
+                uri = $"http://server/service/Customers?{queryName}={queryValue}";
             }
 
             var request = RequestFactory.Create(HttpMethod.Get, uri);
diff --git a/test/UnitTest/Microsoft.AspNet.OData.Test.Shared/Query/ODataQueryParameterBindingAttributeTests.cs b/test/UnitTest/Microsoft.AspNet.OData.Test.Shared/Query/ODataQueryParameterBindingAttributeTests.cs
index bc04f4168..08f873ae8 100644
--- a/test/UnitTest/Microsoft.AspNet.OData.Test.Shared/Query/ODataQueryParameterBindingAttributeTests.cs
+++ b/test/UnitTest/Microsoft.AspNet.OData.Test.Shared/Query/ODataQueryParameterBindingAttributeTests.cs
@@ -118,11 +118,7 @@ public async Task BadReturnTypeThrows(string methodName)
             // Act & Assert
             await ExceptionAssert.ThrowsAsync<InvalidOperationException>(
                 () => binding.ExecuteBindingAsync((ModelMetadataProvider)null, actionContext, CancellationToken.None),
-                String.Format(
-                        "Cannot create an EDM model as the action '{0}' on controller '{1}' has a return type '{2}' that does not implement IEnumerable<T>.",
-                        actionDescriptor.ActionName,
-                        actionDescriptor.ControllerDescriptor.ControllerName,
-                        actionDescriptor.ReturnType.FullName));
+                $"Cannot create an EDM model as the action '{actionDescriptor.ActionName}' on controller '{actionDescriptor.ControllerDescriptor.ControllerName}' has a return type '{actionDescriptor.ReturnType.FullName}' that does not implement IEnumerable<T>.");
         }
 
         [Fact]
diff --git a/test/UnitTest/Microsoft.AspNet.OData.Test.Shared/Query/OrderByPropertyNodeTest.cs b/test/UnitTest/Microsoft.AspNet.OData.Test.Shared/Query/OrderByPropertyNodeTest.cs
index 8761105da..042e67d0a 100644
--- a/test/UnitTest/Microsoft.AspNet.OData.Test.Shared/Query/OrderByPropertyNodeTest.cs
+++ b/test/UnitTest/Microsoft.AspNet.OData.Test.Shared/Query/OrderByPropertyNodeTest.cs
@@ -165,7 +165,7 @@ public void CreateCollection_CopmplexType_Succeeds()
             ICollection<OrderByNode> nodes = OrderByNode.CreateCollection(orderByNode);
 
             // Assert
-            Assert.Equal(3, nodes.Count());
+            Assert.Equal(3, nodes.Count);
             Assert.Equal("Street", (nodes.ToList()[0] as OrderByPropertyNode).Property.Name);
             Assert.Equal(OrderByDirection.Descending, nodes.ToList()[0].Direction);
             Assert.Equal("Address/Street", nodes.ToList()[0].PropertyPath);
diff --git a/test/UnitTest/Microsoft.AspNet.OData.Test.Shared/Query/QueryCompositionTests.cs b/test/UnitTest/Microsoft.AspNet.OData.Test.Shared/Query/QueryCompositionTests.cs
index af6232312..460c02784 100644
--- a/test/UnitTest/Microsoft.AspNet.OData.Test.Shared/Query/QueryCompositionTests.cs
+++ b/test/UnitTest/Microsoft.AspNet.OData.Test.Shared/Query/QueryCompositionTests.cs
@@ -64,7 +64,7 @@ public async Task QueryComposition_Works(string controllerName)
             HttpClient client = new HttpClient(server);
 
             HttpResponseMessage response = await GetResponse(client, server.Configuration,
-                String.Format("http://localhost:8080/{0}?$filter=Id ge 22 and Address/City ne 'seattle'&$orderby=Name&$skip=0&$top=1", controllerName));
+                $"http://localhost:8080/{controllerName}?$filter=Id ge 22 and Address/City ne 'seattle'&$orderby=Name&$skip=0&$top=1");
             ExceptionAssert.DoesNotThrow(() => response.EnsureSuccessStatusCode());
             var customers = await response.Content.ReadAsObject<List<QueryCompositionCustomer>>();
 
diff --git a/test/UnitTest/Microsoft.AspNet.OData.Test.Shared/Query/Validators/FilterQueryValidatorTest.cs b/test/UnitTest/Microsoft.AspNet.OData.Test.Shared/Query/Validators/FilterQueryValidatorTest.cs
index dac9ed5ef..67693f97c 100644
--- a/test/UnitTest/Microsoft.AspNet.OData.Test.Shared/Query/Validators/FilterQueryValidatorTest.cs
+++ b/test/UnitTest/Microsoft.AspNet.OData.Test.Shared/Query/Validators/FilterQueryValidatorTest.cs
@@ -501,9 +501,9 @@ public void ValidateThrowsIfNotFilterableProperty(string property)
         {
             ExceptionAssert.Throws<ODataException>(() =>
                 _validator.Validate(
-                    new FilterQueryOption(String.Format("{0} eq 'David'", property), _context),
+                    new FilterQueryOption($"{property} eq 'David'", _context),
                     new ODataValidationSettings()),
-                String.Format("The property '{0}' cannot be used in the $filter query option.", property));
+                $"The property '{property}' cannot be used in the $filter query option.");
         }
 
         [Theory]
@@ -513,9 +513,9 @@ public void ValidateThrowsIfNotFilterableNavigationProperty(string property)
         {
             ExceptionAssert.Throws<ODataException>(() =>
                 _validator.Validate(
-                    new FilterQueryOption(String.Format("{0}/Name eq 'Seattle'", property), _context),
+                    new FilterQueryOption($"{property}/Name eq 'Seattle'", _context),
                     new ODataValidationSettings()),
-                String.Format("The property '{0}' cannot be used in the $filter query option.", property));
+                $"The property '{property}' cannot be used in the $filter query option.");
         }
 
         [Theory]
@@ -525,9 +525,9 @@ public void ValidateThrowsIfNavigationHasNotFilterableProperty(string property)
         {
             ExceptionAssert.Throws<ODataException>(() =>
                 _validator.Validate(
-                    new FilterQueryOption(String.Format("NavigationWithNotFilterableProperty/{0} eq 'David'", property), _context),
+                    new FilterQueryOption($"NavigationWithNotFilterableProperty/{property} eq 'David'", _context),
                     new ODataValidationSettings()),
-                String.Format("The property '{0}' cannot be used in the $filter query option.", property));
+                $"The property '{property}' cannot be used in the $filter query option.");
         }
 
         [Theory]
@@ -1014,10 +1014,7 @@ public void OtherFunctions_SomeTwoParameterCasts_ThrowODataException(AllowedFunc
             {
                 AllowedFunctions = AllowedFunctions.None,
             };
-            var expectedMessage = string.Format(
-                "Encountered invalid type cast. '{0}' is not assignable from '{1}'.",
-                typeof(DerivedCategory).FullName,
-                typeof(Product).FullName);
+            var expectedMessage = $"Encountered invalid type cast. '{typeof(DerivedCategory).FullName}' is not assignable from '{typeof(Product).FullName}'.";
             var option = new FilterQueryOption(query, _productContext);
 
             // Act & Assert
@@ -1088,9 +1085,7 @@ public void Functions_CheckNotFilterable_ThrowODataException(string query, strin
             {
                 AllowedFunctions = AllowedFunctions.AllFunctions,
             };
-            var expectedMessage = string.Format(
-                "The property '{0}' cannot be used in the $filter query option.",
-                propertyName);
+            var expectedMessage = $"The property '{propertyName}' cannot be used in the $filter query option.";
             var option = new FilterQueryOption(query, _productContext);
 
             // Act & Assert
@@ -1363,7 +1358,7 @@ private static TheoryDataSet<string> GetLongInputsTestData(int maxCount)
                     "" + String.Join(" add ", Enumerable.Range(1, maxCount/2)) + " eq 5050",
                     "" + String.Join("/", Enumerable.Range(1, maxCount/2).Select(_ => "Category/Product")) + "/ProductID eq 1",
                     "" + String.Join("/", Enumerable.Range(1, maxCount/2).Select(_ => "Category/Product")) + "/UnsignedReorderLevel eq 1",
-                    "" + Enumerable.Range(1,maxCount).Aggregate("'abc'", (prev,i) => String.Format("trim({0})", prev)) + " eq '123'",
+                    "" + Enumerable.Range(1,maxCount).Aggregate("'abc'", (prev,i) => $"trim({prev})") + " eq '123'",
                     " Category/Products/any(" + Enumerable.Range(1,maxCount/4).Aggregate("", (prev,i) => String.Format("p{1}: p{1}/Category/Products/any({0})", prev, i)) +")"
                 };
         }
diff --git a/test/UnitTest/Microsoft.AspNet.OData.Test.Shared/Query/Validators/OrderByQueryValidatorTest.cs b/test/UnitTest/Microsoft.AspNet.OData.Test.Shared/Query/Validators/OrderByQueryValidatorTest.cs
index 2c7de1d0d..c6e47d87a 100644
--- a/test/UnitTest/Microsoft.AspNet.OData.Test.Shared/Query/Validators/OrderByQueryValidatorTest.cs
+++ b/test/UnitTest/Microsoft.AspNet.OData.Test.Shared/Query/Validators/OrderByQueryValidatorTest.cs
@@ -51,8 +51,8 @@ public void Validate_ThrowsNotSortableException_ForNotSortableProperty_OnEmptyAl
             // Act & Assert
             ExceptionAssert.Throws<ODataException>(() =>
                 _validator.Validate(
-                    new OrderByQueryOption(String.Format("{0} asc", property), _context), settings),
-                String.Format("The property '{0}' cannot be used in the $orderby query option.", property));
+                    new OrderByQueryOption($"{property} asc", _context), settings),
+                $"The property '{property}' cannot be used in the $orderby query option.");
         }
 
         [Theory]
@@ -65,7 +65,7 @@ public void Validate_DoesntThrowNotSortableException_ForNotSortableProperty_OnNo
             settings.AllowedOrderByProperties.Add(property);
 
             // Act & Assert
-            _validator.Validate(new OrderByQueryOption(String.Format("{0} asc", property), _context), settings);
+            _validator.Validate(new OrderByQueryOption($"{property} asc", _context), settings);
         }
 
         [Fact]
@@ -101,11 +101,9 @@ public void Validate_ThrowsNotAllowedException_ForNotAllowedAndSortableLimitedPr
             // Act & Assert
             ExceptionAssert.Throws<ODataException>(
                 () => _validator.Validate(
-                    new OrderByQueryOption(String.Format("{0} asc", property), _context),
+                    new OrderByQueryOption($"{property} asc", _context),
                     settings),
-                String.Format(
-                    "Order by '{0}' is not allowed. To allow it, set the 'AllowedOrderByProperties' property on EnableQueryAttribute or QueryValidationSettings.",
-                    property));
+                $"Order by '{property}' is not allowed. To allow it, set the 'AllowedOrderByProperties' property on EnableQueryAttribute or QueryValidationSettings.");
         }
 
         [Fact]
diff --git a/test/UnitTest/Microsoft.AspNet.OData.Test.Shared/QueryableLimitationTest.cs b/test/UnitTest/Microsoft.AspNet.OData.Test.Shared/QueryableLimitationTest.cs
index f3852ebe7..98c61cb11 100644
--- a/test/UnitTest/Microsoft.AspNet.OData.Test.Shared/QueryableLimitationTest.cs
+++ b/test/UnitTest/Microsoft.AspNet.OData.Test.Shared/QueryableLimitationTest.cs
@@ -251,7 +251,7 @@ public async Task QueryableLimitation_NotSortableFromAttributeTest(string proper
             Assert.False(response.IsSuccessStatusCode);
             Assert.Equal(HttpStatusCode.BadRequest, response.StatusCode);
             Assert.Contains(
-                String.Format("The query specified in the URI is not valid. The property '{0}' cannot be used in the $orderby query option.", property),
+                $"The query specified in the URI is not valid. The property '{property}' cannot be used in the $orderby query option.",
                 responseString);
         }
 
@@ -280,7 +280,7 @@ public async Task QueryableLimitation_NotFilterableFromAttributeTest(string prop
         {
             // Arrange
             string requestUri = BaseAddress +
-                String.Format("/odata/QueryLimitCustomers?$filter={0} eq 'LastName 1'", property);
+                $"/odata/QueryLimitCustomers?$filter={property} eq 'LastName 1'";
 
             // Act
             HttpRequestMessage request = new HttpRequestMessage(HttpMethod.Get, requestUri);
@@ -291,9 +291,7 @@ public async Task QueryableLimitation_NotFilterableFromAttributeTest(string prop
             Assert.False(response.IsSuccessStatusCode);
             Assert.Equal(HttpStatusCode.BadRequest, response.StatusCode);
             Assert.Contains(
-                String.Format(
-                    "The query specified in the URI is not valid. The property '{0}' cannot be used in the $filter query option.",
-                    property),
+                $"The query specified in the URI is not valid. The property '{property}' cannot be used in the $filter query option.",
                 responseString);
         }
 
diff --git a/test/UnitTest/Microsoft.AspNet.OData.Test.Shared/Routing/AttributeRoutingUnboundTest.cs b/test/UnitTest/Microsoft.AspNet.OData.Test.Shared/Routing/AttributeRoutingUnboundTest.cs
index eae42c59c..c588e2ccb 100644
--- a/test/UnitTest/Microsoft.AspNet.OData.Test.Shared/Routing/AttributeRoutingUnboundTest.cs
+++ b/test/UnitTest/Microsoft.AspNet.OData.Test.Shared/Routing/AttributeRoutingUnboundTest.cs
@@ -294,13 +294,13 @@ public IEnumerable<ConventionCustomer> GetAllConventionCustomers()
         [ODataRoute("GetConventionCustomerById(CustomerId={CustomerId})")]
         public ConventionCustomer GetConventionCustomerById([FromODataUri]int CustomerId)
         {
-            return ModelDataBase.Instance.Customers.Where(c => c.ID == CustomerId).FirstOrDefault();
+            return ModelDataBase.Instance.Customers.FirstOrDefault(c => c.ID == CustomerId);
         }
 
         [ODataRoute("GetConventionCustomerById(CustomerId={CustomerId})/Name")]
         public ITestActionResult GetNameById([FromODataUri]int CustomerId)
         {
-            ConventionCustomer customer = ModelDataBase.Instance.Customers.Where(c => c.ID == CustomerId).FirstOrDefault();
+            ConventionCustomer customer = ModelDataBase.Instance.Customers.FirstOrDefault(c => c.ID == CustomerId);
             if (customer == null)
             {
                 return NotFound();
@@ -313,8 +313,8 @@ public ITestActionResult GetNameById([FromODataUri]int CustomerId)
         [ODataRoute("GetConventionOrderByCustomerIdAndOrderName(CustomerId={CustomerId},OrderName={OrderName})")]
         public ConventionOrder GetConventionOrderByCustomerIdAndOrderName(int CustomerId, [FromODataUri]string OrderName)
         {
-            ConventionCustomer customer = ModelDataBase.Instance.Customers.Where(c => c.ID == CustomerId).FirstOrDefault();
-            return customer.Orders.Where(o => o.OrderName == OrderName).FirstOrDefault();
+            ConventionCustomer customer = ModelDataBase.Instance.Customers.FirstOrDefault(c => c.ID == CustomerId);
+            return customer.Orders.FirstOrDefault(o => o.OrderName == OrderName);
         }
 
         // It's an action post call
@@ -397,15 +397,15 @@ public IEnumerable<ConventionCustomer> Customers
 
         public ConventionCustomer GetCustomerById(int customerId)
         {
-            return _customers.Where(c => c.ID == customerId).FirstOrDefault();
+            return _customers.FirstOrDefault(c => c.ID == customerId);
         }
 
         public ConventionCustomer CreateCustomerById(int customerId)
         {
-            ConventionCustomer customer = _customers.Where(c => c.ID == customerId).FirstOrDefault();
+            ConventionCustomer customer = _customers.FirstOrDefault(c => c.ID == customerId);
             if (customer != null)
             {
-                string message = String.Format("Customer with ID {0} already exists.", customerId);
+                string message = $"Customer with ID {customerId} already exists.";
                 throw new Exception(message);
             }
 
diff --git a/test/UnitTest/Microsoft.AspNet.OData.Test.Shared/Routing/DefaultODataPathHandlerTest.cs b/test/UnitTest/Microsoft.AspNet.OData.Test.Shared/Routing/DefaultODataPathHandlerTest.cs
index 02d9cec8a..f0b0f4ff6 100644
--- a/test/UnitTest/Microsoft.AspNet.OData.Test.Shared/Routing/DefaultODataPathHandlerTest.cs
+++ b/test/UnitTest/Microsoft.AspNet.OData.Test.Shared/Routing/DefaultODataPathHandlerTest.cs
@@ -1022,7 +1022,7 @@ public void CannotParseQualifiedUnboundOperation(string odataPath, string segmen
             // Act & Assert
             ExceptionAssert.Throws<ODataUnrecognizedPathException>(
                 () => _parser.Parse(model.Model, _serviceRoot, odataPath),
-                String.Format("Resource not found for the segment '{0}'.", segmentName));
+                $"Resource not found for the segment '{segmentName}'.");
         }
 
         [Theory]
@@ -1252,7 +1252,7 @@ public void CanParseUndefinedEnumValue(Type enumerationType, string enumerationE
             functionConfiguration.AddParameter("Enum", enumTypeConfiguration);
             functionConfiguration.Returns<int>();
             IEdmModel model = builder.GetEdmModel();
-            string uri = String.Format("FunctionWithEnumParam(Enum={0})", enumerationExpression);
+            string uri = $"FunctionWithEnumParam(Enum={enumerationExpression})";
 
             // Act & Assert
             ExceptionAssert.DoesNotThrow(() => _parser.Parse(model, _serviceRoot, uri));
@@ -1272,12 +1272,12 @@ public void CannotParseInvalidEnumValue(Type enumerationType, string enumeration
             functionConfiguration.AddParameter("Enum", enumTypeConfiguration);
             functionConfiguration.Returns<int>();
             IEdmModel model = builder.GetEdmModel();
-            string uri = String.Format("FunctionWithEnumParam(Enum={0})", enumerationExpression);
+            string uri = $"FunctionWithEnumParam(Enum={enumerationExpression})";
 
             // Act & Assert
             ExceptionAssert.Throws<ODataException>(
                 () => _parser.Parse(model, _serviceRoot, uri),
-                String.Format("The string '{0}' is not a valid enumeration type constant.", enumerationExpression));
+                $"The string '{enumerationExpression}' is not a valid enumeration type constant.");
         }
 
         [Fact]
@@ -2348,7 +2348,7 @@ public void ParseTemplate_ThrowODataException_InvalidODataPathSegmentTemplate(st
             // Act & Assert
             ExceptionAssert.Throws<ODataUnrecognizedPathException>(
                 () => _parser.ParseTemplate(model.Model, template),
-                String.Format("Resource not found for the segment '{0}'.", segmentValue));
+                $"Resource not found for the segment '{segmentValue}'.");
         }
 
         [Fact]
@@ -2375,7 +2375,7 @@ public void ParseTemplate_ThrowODataException_InvalidAttributeRoutingTemplateSeg
 
             // Act & Assert
             ExceptionAssert.Throws<ODataException>(() => _parser.ParseTemplate(model.Model, template),
-                string.Format("The attribute routing template contains invalid segment '{0}'.", error));
+                $"The attribute routing template contains invalid segment '{error}'.");
         }
 
         public static TheoryDataSet<string, string, string> PathSegmentIdentifierCaseInsensitiveCases
diff --git a/test/UnitTest/Microsoft.AspNet.OData.Test.Shared/Routing/ODataPathRouteConstraintTest.cs b/test/UnitTest/Microsoft.AspNet.OData.Test.Shared/Routing/ODataPathRouteConstraintTest.cs
index d063c054e..1fc250f07 100644
--- a/test/UnitTest/Microsoft.AspNet.OData.Test.Shared/Routing/ODataPathRouteConstraintTest.cs
+++ b/test/UnitTest/Microsoft.AspNet.OData.Test.Shared/Routing/ODataPathRouteConstraintTest.cs
@@ -272,7 +272,7 @@ public void Match_DeterminesExpectedServiceRoot_ForFunctionCall(string prefixStr
             var model = builder.GetEdmModel();
 
             var pathHandler = new TestPathHandler();
-            var oDataPath = String.Format("Unbound(p0='{0}')", oDataString);
+            var oDataPath = $"Unbound(p0='{oDataString}')";
             var routeRequest = new TestRouteRequest(HttpMethod.Get, expectedRoot + oDataPath)
             {
                 PathHandler = pathHandler,
@@ -315,7 +315,7 @@ public void Match_DeterminesExpectedServiceRoot_ForFunctionCall(string prefixStr
             var model = builder.GetEdmModel();
 
             var pathHandler = new TestPathHandler();
-            var oDataPath = String.Format("Unbound(p0='{0}')", oDataString);
+            var oDataPath = $"Unbound(p0='{oDataString}')";
             var routeRequest = new TestRouteRequest(HttpMethod.Get, originalRoot + oDataPath)
             {
                 PathHandler = pathHandler,
@@ -452,18 +452,18 @@ private bool ConstraintMatch(ODataPathRouteConstraint constraint, TestRouteReque
             };
 
             var configuration = new HttpConfiguration(httpRouteCollection);
-            if (routeRequest != null && routeRequest.PathHandler != null && routeRequest.Model != null)
+            if (routeRequest?.PathHandler != null && routeRequest.Model != null)
             {
                 configuration.CreateODataRootContainer(_routeName, builder =>
                     builder.AddService(Microsoft.OData.ServiceLifetime.Singleton, sp => routeRequest.PathHandler)
                            .AddService(Microsoft.OData.ServiceLifetime.Singleton, sp => routeRequest.Model));
             }
-            else if (routeRequest != null && routeRequest.PathHandler != null)
+            else if (routeRequest?.PathHandler != null)
             {
                 configuration.CreateODataRootContainer(_routeName, builder =>
                     builder.AddService(Microsoft.OData.ServiceLifetime.Singleton, sp => routeRequest.PathHandler));
             }
-            else if (routeRequest != null && routeRequest.Model != null)
+            else if (routeRequest?.Model != null)
             {
                 configuration.CreateODataRootContainer(_routeName, builder =>
                     builder.AddService(Microsoft.OData.ServiceLifetime.Singleton, sp => routeRequest.Model));
diff --git a/test/UnitTest/Microsoft.AspNet.OData.Test.Shared/Routing/Template/PathTemplateSegmentTemplateTest.cs b/test/UnitTest/Microsoft.AspNet.OData.Test.Shared/Routing/Template/PathTemplateSegmentTemplateTest.cs
index 95a800d23..10543f481 100644
--- a/test/UnitTest/Microsoft.AspNet.OData.Test.Shared/Routing/Template/PathTemplateSegmentTemplateTest.cs
+++ b/test/UnitTest/Microsoft.AspNet.OData.Test.Shared/Routing/Template/PathTemplateSegmentTemplateTest.cs
@@ -41,7 +41,7 @@ public void Ctor_FailedWithWrongPathTemplateString()
 
             // Act & Assert
             ExceptionAssert.Throws<ODataException>(() => new PathTemplateSegmentTemplate(segment),
-                string.Format("The attribute routing template contains invalid segment '{0}'.", "{pName:dynamic:test}"));
+                $"The attribute routing template contains invalid segment '{"{pName:dynamic:test}"}'.");
         }
 
         [Fact]
diff --git a/test/UnitTest/Microsoft.AspNet.OData.Test.Shared/SelectExpandTest.cs b/test/UnitTest/Microsoft.AspNet.OData.Test.Shared/SelectExpandTest.cs
index 5379e7559..5186fd005 100644
--- a/test/UnitTest/Microsoft.AspNet.OData.Test.Shared/SelectExpandTest.cs
+++ b/test/UnitTest/Microsoft.AspNet.OData.Test.Shared/SelectExpandTest.cs
@@ -147,7 +147,7 @@ public async Task SelectExpand_WithInheritance_Works()
             // Arrange
             string @namespace = typeof(SelectExpandTestCustomer).Namespace;
             string select = String.Format("$select={0}.SelectExpandTestSpecialCustomer/Rank,{0}.SelectExpandTestSpecialCustomer/SpecialOrders", @namespace);
-            string expand = String.Format("$expand={0}.SelectExpandTestSpecialCustomer/SpecialOrders", @namespace);
+            string expand = $"$expand={@namespace}.SelectExpandTestSpecialCustomer/SpecialOrders";
             string uri = "/odata-inheritance/SelectExpandTestCustomers?" + select + "&" + expand;
 
             // Act
@@ -189,7 +189,7 @@ public async Task SelectExpand_WithInheritance_Alias_Works()
             // Arrange
             string @namespace = "com.contoso";
             string select = String.Format("$select={0}.SelectExpandTestSpecialCustomerAlias/RankAlias,{0}.SelectExpandTestSpecialCustomerAlias/SpecialOrdersAlias", @namespace);
-            string expand = String.Format("$expand={0}.SelectExpandTestSpecialCustomerAlias/SpecialOrdersAlias", @namespace);
+            string expand = $"$expand={@namespace}.SelectExpandTestSpecialCustomerAlias/SpecialOrdersAlias";
             string uri = "/odata-alias2-inheritance/SelectExpandTestCustomersAlias?" + select + "&" + expand;
 
             // Act
@@ -212,7 +212,7 @@ public async Task SelectExpand_WithInheritanceAndNonODataJson_Works()
             // Arrange
             string customerNamespace = typeof(SelectExpandTestCustomer).Namespace;
             string select = String.Format("$select={0}.SelectExpandTestSpecialCustomer/Rank,{0}.SelectExpandTestSpecialCustomer/SpecialOrders", customerNamespace);
-            string expand = String.Format("$expand={0}.SelectExpandTestSpecialCustomer/SpecialOrders", customerNamespace);
+            string expand = $"$expand={customerNamespace}.SelectExpandTestSpecialCustomer/SpecialOrders";
             string uri = "/api/?" + select + "&" + expand;
 
             // Act
@@ -408,7 +408,7 @@ public async Task SelectExpand_DoesnotWork_ForSelectAction_WithNonNamespaceQuali
             // Assert
             Assert.False(response.IsSuccessStatusCode);
             Assert.Contains("The query specified in the URI is not valid. " +
-                String.Format("Can not resolve the segment identifier '{0}' in query option.", nonNamespaceQualifiedName),
+                $"Can not resolve the segment identifier '{nonNamespaceQualifiedName}' in query option.",
                 responseString);
         }
 
diff --git a/test/UnitTest/Microsoft.AspNet.OData.Test.Shared/TestCommon/EdmTestHelpers.cs b/test/UnitTest/Microsoft.AspNet.OData.Test.Shared/TestCommon/EdmTestHelpers.cs
index 8501ba0a4..2159658ec 100644
--- a/test/UnitTest/Microsoft.AspNet.OData.Test.Shared/TestCommon/EdmTestHelpers.cs
+++ b/test/UnitTest/Microsoft.AspNet.OData.Test.Shared/TestCommon/EdmTestHelpers.cs
@@ -47,7 +47,7 @@ public static IEdmModel GetModel()
                 }
                 else
                 {
-                    throw new NotSupportedException(string.Format("Parsing csdl failed with errors {0}", String.Join("\n", edmErrors.Select((edmError => edmError.ErrorMessage)))));
+                    throw new NotSupportedException($"Parsing csdl failed with errors {String.Join("\n", edmErrors.Select((edmError => edmError.ErrorMessage)))}");
                 }
             }
             else
@@ -66,7 +66,7 @@ public static string GetEdmx()
             PropertyInfo pInfo = ((property.Body as MemberExpression).Member as PropertyInfo);
             if (pInfo == null)
             {
-                throw new InvalidOperationException(String.Format("Test error: {0} is not a property access lambda", property));
+                throw new InvalidOperationException($"Test error: {property} is not a property access lambda");
             }
 
             return new EdmStructuralProperty(declaringType, pInfo.Name, propertyType ?? EdmLibHelpers.GetEdmPrimitiveTypeReferenceOrNull(pInfo.PropertyType));
diff --git a/test/UnitTest/Microsoft.AspNet.OData.Test.Shared/TestCommon/ODataMediaTypeMapping.cs b/test/UnitTest/Microsoft.AspNet.OData.Test.Shared/TestCommon/ODataMediaTypeMapping.cs
index 44249e452..baf30dada 100644
--- a/test/UnitTest/Microsoft.AspNet.OData.Test.Shared/TestCommon/ODataMediaTypeMapping.cs
+++ b/test/UnitTest/Microsoft.AspNet.OData.Test.Shared/TestCommon/ODataMediaTypeMapping.cs
@@ -83,8 +83,7 @@ private bool DoesQueryStringMatch(IEnumerable<KeyValuePair<string, string>> quer
         {
             if (queryString != null)
             {
-                string queryValue = queryString.Where(kvp => kvp.Key == ODataMediaTypeMapping.QueryStringFormatParameter)
-                      .FirstOrDefault()
+                string queryValue = queryString.FirstOrDefault(kvp => kvp.Key == ODataMediaTypeMapping.QueryStringFormatParameter)
                       .Value;
 
                 if (queryValue != null)
diff --git a/test/UnitTest/Microsoft.AspNet.OData.Test.Shared/TestCommon/TypeInitializer.cs b/test/UnitTest/Microsoft.AspNet.OData.Test.Shared/TestCommon/TypeInitializer.cs
index 9e599ef1f..06ed9ab8c 100644
--- a/test/UnitTest/Microsoft.AspNet.OData.Test.Shared/TestCommon/TypeInitializer.cs
+++ b/test/UnitTest/Microsoft.AspNet.OData.Test.Shared/TestCommon/TypeInitializer.cs
@@ -12,7 +12,7 @@ public static object GetInstance(SupportedTypes type, int index = 0, int maxRefe
         {
             if (index > DataSource.MaxIndex)
             {
-                throw new ArgumentException(String.Format("The max supported index is : {0}", DataSource.MaxIndex));
+                throw new ArgumentException($"The max supported index is : {DataSource.MaxIndex}");
             }
 
             return InternalGetInstance(type, index, new ReferenceDepthContext(maxReferenceDepth));
@@ -44,7 +44,7 @@ internal static object InternalGetInstance(SupportedTypes type, int index, Refer
 
             context.DecrementCounter();
 
-            throw new ArgumentException(String.Format("Cannot initialize an instance for {0} type.", type.ToString()));
+            throw new ArgumentException($"Cannot initialize an instance for {type.ToString()} type.");
 
         }
     }
