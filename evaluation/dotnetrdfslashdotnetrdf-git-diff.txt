diff --git a/Libraries/dotNetRDF.Query.FullText/FullTextExtensions.cs b/Libraries/dotNetRDF.Query.FullText/FullTextExtensions.cs
index c25975173..d24096f8d 100644
--- a/Libraries/dotNetRDF.Query.FullText/FullTextExtensions.cs
+++ b/Libraries/dotNetRDF.Query.FullText/FullTextExtensions.cs
@@ -205,10 +205,10 @@ namespace VDS.RDF.Query
             {
                 context.Graph.Assert(dirObj, dnrType, context.Graph.CreateLiteralNode(directory.GetType().FullName + ", Lucene.Net"));
             }
-            else if (directory is FSDirectory)
+            else if (directory is FSDirectory fSDirectory)
             {
                 context.Graph.Assert(dirObj, dnrType, context.Graph.CreateLiteralNode(typeof(FSDirectory).FullName + ", Lucene.Net"));
-                context.Graph.Assert(dirObj, context.Graph.CreateUriNode(UriFactory.Create(ConfigurationLoader.PropertyFromFile)), context.Graph.CreateLiteralNode(((FSDirectory)directory).Directory.FullName));
+                context.Graph.Assert(dirObj, context.Graph.CreateUriNode(UriFactory.Create(ConfigurationLoader.PropertyFromFile)), context.Graph.CreateLiteralNode(fSDirectory.Directory.FullName));
             }
             else
             {
diff --git a/Libraries/dotNetRDF.Query.Spin/Constructors/ConstructorExtensions.cs b/Libraries/dotNetRDF.Query.Spin/Constructors/ConstructorExtensions.cs
index 64ceca757..cdb2ab7b1 100644
--- a/Libraries/dotNetRDF.Query.Spin/Constructors/ConstructorExtensions.cs
+++ b/Libraries/dotNetRDF.Query.Spin/Constructors/ConstructorExtensions.cs
@@ -50,7 +50,7 @@ namespace VDS.RDF.Query.Spin.Constructors
                 foreach (Resource classResource in usedClasses)
                 {
                     IEnumerable<IUpdate> constructors = dataset.spinProcessor.GetConstructorsForClass(classResource);
-                    if (constructors.Count() > 0)
+                    if (constructors.Any())
                     {
                         outputGraph.Assert(dataset.ExecuteUpdate(constructors).Triples);
                     }
diff --git a/Libraries/dotNetRDF.Query.Spin/Core/SPINLabels.cs b/Libraries/dotNetRDF.Query.Spin/Core/SPINLabels.cs
index 6e0cd8a98..cd5909991 100644
--- a/Libraries/dotNetRDF.Query.Spin/Core/SPINLabels.cs
+++ b/Libraries/dotNetRDF.Query.Spin/Core/SPINLabels.cs
@@ -68,7 +68,7 @@ namespace VDS.RDF.Query.Spin.Core
          */
         public static String getLabel(INode resource)
         {
-            if (resource is IUriNode)
+            if (resource is IUriNode iUriNode)
             {
                 String qname = null; // TODO chercher dans les NS prefixes ;
                 if (qname != null)
@@ -77,7 +77,7 @@ namespace VDS.RDF.Query.Spin.Core
                 }
                 else
                 {
-                    return "<" + ((IUriNode)resource).Uri.ToString() + ">";
+                    return "<" + iUriNode.Uri.ToString() + ">";
                 }
             }
             else
diff --git a/Libraries/dotNetRDF.Query.Spin/Model/BaseImpl/AggregationImpl.cs b/Libraries/dotNetRDF.Query.Spin/Model/BaseImpl/AggregationImpl.cs
index 15859fee8..167a623bd 100644
--- a/Libraries/dotNetRDF.Query.Spin/Model/BaseImpl/AggregationImpl.cs
+++ b/Libraries/dotNetRDF.Query.Spin/Model/BaseImpl/AggregationImpl.cs
@@ -93,9 +93,9 @@ namespace VDS.RDF.Query.Spin.Model
             {
                 IResource r = Resource.Get(exprS.Object, getModel());
                 IResource expr = SPINFactory.asExpression(r);
-                if (expr is IPrintable)
+                if (expr is IPrintable iPrintable)
                 {
-                    ((IPrintable)expr).Print(p);
+                    iPrintable.Print(p);
                 }
                 else
                 {
diff --git a/Libraries/dotNetRDF.Query.Spin/Model/BaseImpl/ModifyImpl.cs b/Libraries/dotNetRDF.Query.Spin/Model/BaseImpl/ModifyImpl.cs
index 67c27f329..98fbc6201 100644
--- a/Libraries/dotNetRDF.Query.Spin/Model/BaseImpl/ModifyImpl.cs
+++ b/Libraries/dotNetRDF.Query.Spin/Model/BaseImpl/ModifyImpl.cs
@@ -84,7 +84,7 @@ namespace VDS.RDF.Query.Spin.Model
             }
 
             IEnumerable<INode> usings = getUsing();
-            if (usings.Count() == 0)
+            if (!usings.Any())
             {
                 usings = p.Dataset.DefaultGraphs;
             }
@@ -97,7 +97,7 @@ namespace VDS.RDF.Query.Spin.Model
             }
 
             usings = getUsingNamed();
-            if (usings.Count() == 0)
+            if (!usings.Any())
             {
                 usings = p.Dataset.ActiveGraphs;
             }
diff --git a/Libraries/dotNetRDF.Query.Spin/Model/BaseImpl/ModuleImpl.cs b/Libraries/dotNetRDF.Query.Spin/Model/BaseImpl/ModuleImpl.cs
index c252e4a08..b5efc6f9f 100644
--- a/Libraries/dotNetRDF.Query.Spin/Model/BaseImpl/ModuleImpl.cs
+++ b/Libraries/dotNetRDF.Query.Spin/Model/BaseImpl/ModuleImpl.cs
@@ -62,10 +62,7 @@ namespace VDS.RDF.Query.Spin.Model
             }
             finally
             {
-                if (it != null)
-                {
-                    it.Dispose();
-                }
+                it?.Dispose();
                 //JenaUtil.setGraphReadOptimization(false);
             }
 
diff --git a/Libraries/dotNetRDF.Query.Spin/Model/BaseImpl/QueryImpl.cs b/Libraries/dotNetRDF.Query.Spin/Model/BaseImpl/QueryImpl.cs
index 90f633de6..04ac76fd9 100644
--- a/Libraries/dotNetRDF.Query.Spin/Model/BaseImpl/QueryImpl.cs
+++ b/Libraries/dotNetRDF.Query.Spin/Model/BaseImpl/QueryImpl.cs
@@ -78,13 +78,13 @@ namespace VDS.RDF.Query.Spin.Model
             while (it.MoveNext())
             {
                 INode node = it.Current.Object;
-                if (node is IValuedNode)
+                if (node is IValuedNode iValuedNode)
                 {
-                    results.Add(((IValuedNode)node).AsString());
+                    results.Add(iValuedNode.AsString());
                 }
-                else if (node is IUriNode)
+                else if (node is IUriNode iUriNode)
                 {
-                    results.Add(((IUriNode)node).Uri.ToString());
+                    results.Add(iUriNode.Uri.ToString());
                 }
             }
             return results;
@@ -153,7 +153,7 @@ namespace VDS.RDF.Query.Spin.Model
         protected void printStringFrom(ISparqlPrinter context)
         {
             IEnumerable<INode> froms = getFrom();
-            if (froms.Count() == 0)
+            if (!froms.Any())
             {
                 froms = context.Dataset.DefaultGraphs;
             }
@@ -164,7 +164,7 @@ namespace VDS.RDF.Query.Spin.Model
                 context.printURIResource(from);
             }
             froms = getFromNamed();
-            if (froms.Count() == 0)
+            if (!froms.Any())
             {
                 froms = context.Dataset.DefaultGraphs;
             }
diff --git a/Libraries/dotNetRDF.Query.Spin/Model/BaseImpl/SelectImpl.cs b/Libraries/dotNetRDF.Query.Spin/Model/BaseImpl/SelectImpl.cs
index daf0cd780..80df36b41 100644
--- a/Libraries/dotNetRDF.Query.Spin/Model/BaseImpl/SelectImpl.cs
+++ b/Libraries/dotNetRDF.Query.Spin/Model/BaseImpl/SelectImpl.cs
@@ -92,11 +92,11 @@ namespace VDS.RDF.Query.Spin.Model
                 for (IEnumerator<IResource> vit = vars.GetEnumerator(); vit.MoveNext(); )
                 {
                     IResource var = vit.Current;
-                    if (var is IVariable)
+                    if (var is IVariable iVariable)
                     {
                         if (getModel().ContainsTriple(var, SP.PropertyExpression, null))
                         {
-                            printProjectExpression(p, (IVariable)var);
+                            printProjectExpression(p, iVariable);
                         }
                         else
                         {
diff --git a/Libraries/dotNetRDF.Query.Spin/SparqlUtil/BaseSparqlPrinter.cs b/Libraries/dotNetRDF.Query.Spin/SparqlUtil/BaseSparqlPrinter.cs
index dcc29b9b2..6b6559952 100644
--- a/Libraries/dotNetRDF.Query.Spin/SparqlUtil/BaseSparqlPrinter.cs
+++ b/Libraries/dotNetRDF.Query.Spin/SparqlUtil/BaseSparqlPrinter.cs
@@ -433,10 +433,7 @@ namespace VDS.RDF.Query.Spin.SparqlUtil
                     continue;
                 }
                 IElement asElement = SPINFactory.asElement(element);
-                if (asElement != null)
-                {
-                    asElement.PrintEnhancedSPARQL(this);
-                }
+                asElement?.PrintEnhancedSPARQL(this);
             }
         }
 
diff --git a/Libraries/dotNetRDF.Query.Spin/SparqlUtil/SpinSyntax.cs b/Libraries/dotNetRDF.Query.Spin/SparqlUtil/SpinSyntax.cs
index b9b91d153..d3486167c 100644
--- a/Libraries/dotNetRDF.Query.Spin/SparqlUtil/SpinSyntax.cs
+++ b/Libraries/dotNetRDF.Query.Spin/SparqlUtil/SpinSyntax.cs
@@ -497,38 +497,36 @@ namespace VDS.RDF.Query.Spin
         {
             INode p = g.CreateBlankNode();
 
-            if (pattern is TriplePattern)
+            if (pattern is TriplePattern tp)
             {
-                TriplePattern tp = (TriplePattern)pattern;
                 g.Assert(p, RDF.PropertyType, SP.ClassTriplePattern);
                 g.Assert(p, SP.PropertySubject, tp.Subject.ToSpinRdf(g, varTable));
                 g.Assert(p, SP.PropertyPredicate, tp.Predicate.ToSpinRdf(g, varTable));
                 g.Assert(p, SP.PropertyObject, tp.Object.ToSpinRdf(g, varTable));
             }
-            else if (pattern is SubQueryPattern)
+            else if (pattern is SubQueryPattern subQueryPattern)
             {
                 g.Assert(p, RDF.PropertyType, SP.ClassSubQuery);
-                g.Assert(p, SP.PropertyQuery, ((SubQueryPattern)pattern).SubQuery.ToSpinRdf(g));
+                g.Assert(p, SP.PropertyQuery, subQueryPattern.SubQuery.ToSpinRdf(g));
             }
-            else if (pattern is FilterPattern)
+            else if (pattern is FilterPattern filterPattern)
             {
                 g.Assert(p, RDF.PropertyType, SP.ClassFilter);
-                g.Assert(p, SP.PropertyExpression, ((FilterPattern)pattern).Filter.Expression.ToSpinRdf(g, varTable));
+                g.Assert(p, SP.PropertyExpression, filterPattern.Filter.Expression.ToSpinRdf(g, varTable));
             }
-            else if (pattern is PropertyPathPattern)
+            else if (pattern is PropertyPathPattern pp)
             {
-                PropertyPathPattern pp = (PropertyPathPattern)pattern;
                 g.Assert(p, RDF.PropertyType, SP.ClassTriplePath);
                 g.Assert(p, SP.PropertySubject, pp.Subject.ToSpinRdf(g, varTable));
                 g.Assert(p, SP.PropertyPath, pp.Path.ToSpinRdf(g, varTable));
                 g.Assert(p, SP.PropertyObject, pp.Object.ToSpinRdf(g, varTable));
             }
-            else if (pattern is LetPattern)
+            else if (pattern is LetPattern letPattern)
             {
                 g.Assert(p, RDF.PropertyType, SP.ClassLet);
                 INode var = g.CreateBlankNode();
                 g.Assert(p, SP.PropertyVariable, var);
-                g.Assert(var, SP.PropertyVarName, g.CreateLiteralNode(((LetPattern)pattern).VariableName, XSD.string_.Uri));
+                g.Assert(var, SP.PropertyVarName, g.CreateLiteralNode(letPattern.VariableName, XSD.string_.Uri));
                 g.Assert(p, SP.PropertyExpression, ((LetPattern)pattern).AssignExpression.ToSpinRdf(g, varTable));
             }
             else if (pattern is BindPattern)
@@ -543,9 +541,9 @@ namespace VDS.RDF.Query.Spin
         {
             INode i;
 
-            if (item is NodeMatchPattern)
+            if (item is NodeMatchPattern nodeMatchPattern)
             {
-                i = ((NodeMatchPattern)item).Node;
+                i = nodeMatchPattern.Node;
             }
             else if (item is VariablePattern)
             {
diff --git a/Libraries/dotNetRDF.Query.Spin/SpinProcessor.cs b/Libraries/dotNetRDF.Query.Spin/SpinProcessor.cs
index bbb3ada55..ff2abed03 100644
--- a/Libraries/dotNetRDF.Query.Spin/SpinProcessor.cs
+++ b/Libraries/dotNetRDF.Query.Spin/SpinProcessor.cs
@@ -197,9 +197,9 @@ namespace VDS.RDF.Query.Spin
 
         private INode GetSourceNode(INode resource)
         {
-            if (resource is IResource)
+            if (resource is IResource iResource)
             {
-                return ((IResource)resource).getSource();
+                return iResource.getSource();
             }
             return resource;
         }
diff --git a/Libraries/dotNetRDF.Query.Spin/Util/Resource.cs b/Libraries/dotNetRDF.Query.Spin/Util/Resource.cs
index 692ab4a95..23315b381 100644
--- a/Libraries/dotNetRDF.Query.Spin/Util/Resource.cs
+++ b/Libraries/dotNetRDF.Query.Spin/Util/Resource.cs
@@ -257,7 +257,7 @@ namespace VDS.RDF.Query.Spin.Util
         public bool? getBoolean(INode property)
         {
             ILiteralNode obj = getLiteral(property);
-            if (obj != null && obj is IValuedNode)
+            if (obj is IValuedNode)
             {
                 return ((IValuedNode)obj).AsBoolean();
             }
@@ -267,7 +267,7 @@ namespace VDS.RDF.Query.Spin.Util
         public int? getInteger(INode property)
         {
             ILiteralNode obj = getLiteral(property);
-            if (obj != null && obj is IValuedNode)
+            if (obj is IValuedNode)
             {
                 return (int)((IValuedNode)obj).AsInteger();
             }
@@ -276,7 +276,7 @@ namespace VDS.RDF.Query.Spin.Util
         public long? getLong(INode property)
         {
             ILiteralNode obj = getLiteral(property);
-            if (obj != null && obj is IValuedNode)
+            if (obj is IValuedNode)
             {
                 return ((IValuedNode)obj).AsInteger();
             }
diff --git a/Libraries/dotNetRDF.Web/BaseGraphHandler.cs b/Libraries/dotNetRDF.Web/BaseGraphHandler.cs
index 44d250b01..3c17effd9 100644
--- a/Libraries/dotNetRDF.Web/BaseGraphHandler.cs
+++ b/Libraries/dotNetRDF.Web/BaseGraphHandler.cs
@@ -109,11 +109,11 @@ namespace VDS.RDF.Web
                 // Serve the Graph to the User
                 context.Response.ContentType = definition.CanonicalMimeType;
                 HandlerHelper.AddCachingHeaders(webContext, this._config.ETag, null);
-                if (writer is IHtmlWriter)
+                if (writer is IHtmlWriter iHtmlWriter)
                 {
                     if (!this._config.Stylesheet.Equals(String.Empty))
                     {
-                        ((IHtmlWriter)writer).Stylesheet = this._config.Stylesheet;
+                        iHtmlWriter.Stylesheet = this._config.Stylesheet;
                     }
                 }
                 context.Response.ContentEncoding = definition.Encoding;
diff --git a/Libraries/dotNetRDF.Web/BaseSparqlServer.cs b/Libraries/dotNetRDF.Web/BaseSparqlServer.cs
index fa4402f3b..0f2e6819e 100644
--- a/Libraries/dotNetRDF.Web/BaseSparqlServer.cs
+++ b/Libraries/dotNetRDF.Web/BaseSparqlServer.cs
@@ -605,8 +605,7 @@ namespace VDS.RDF.Web
                     // Check whether we need to (and are permitted to) apply USING/USING NAMED parameters
                     if (userDefaultGraphs.Count > 0 || userNamedGraphs.Count > 0)
                     {
-                        BaseModificationCommand modify = cmd as BaseModificationCommand;
-                        if (modify != null)
+                        if (cmd is BaseModificationCommand modify)
                         {
                             if (modify.GraphUri != null || modify.UsingUris.Any() || modify.UsingNamedUris.Any())
                             {
diff --git a/Libraries/dotNetRDF.Web/BaseSparqlUpdateHandler.cs b/Libraries/dotNetRDF.Web/BaseSparqlUpdateHandler.cs
index 9aed5c6c6..9d38d9423 100644
--- a/Libraries/dotNetRDF.Web/BaseSparqlUpdateHandler.cs
+++ b/Libraries/dotNetRDF.Web/BaseSparqlUpdateHandler.cs
@@ -238,8 +238,7 @@ namespace VDS.RDF.Web
                     // Check whether we need to (and are permitted to) apply USING/USING NAMED parameters
                     if (userDefaultGraphs.Count > 0 || userNamedGraphs.Count > 0)
                     {
-                        BaseModificationCommand modify = cmd as BaseModificationCommand;
-                        if (modify != null)
+                        if (cmd is BaseModificationCommand modify)
                         {
                             if (modify.GraphUri != null || modify.UsingUris.Any() || modify.UsingNamedUris.Any())
                             {
diff --git a/Libraries/dotNetRDF.Web/Configuration/BaseHandlerConfiguration.cs b/Libraries/dotNetRDF.Web/Configuration/BaseHandlerConfiguration.cs
index 5490e28cc..808b09f9a 100644
--- a/Libraries/dotNetRDF.Web/Configuration/BaseHandlerConfiguration.cs
+++ b/Libraries/dotNetRDF.Web/Configuration/BaseHandlerConfiguration.cs
@@ -133,9 +133,9 @@ namespace VDS.RDF.Web.Configuration
             foreach (INode group in groups)
             {
                 Object temp = ConfigurationLoader.LoadObject(g, group);
-                if (temp is UserGroup)
+                if (temp is UserGroup userGroup)
                 {
-                    this._userGroups.Add((UserGroup)temp);
+                    this._userGroups.Add(userGroup);
                 }
                 else
                 {
@@ -172,9 +172,9 @@ namespace VDS.RDF.Web.Configuration
             foreach (INode factory in factories)
             {
                 Object temp = ConfigurationLoader.LoadObject(g, factory);
-                if (temp is ISparqlCustomExpressionFactory)
+                if (temp is ISparqlCustomExpressionFactory iSparqlCustomExpressionFactory)
                 {
-                    this._expressionFactories.Add((ISparqlCustomExpressionFactory)temp);
+                    this._expressionFactories.Add(iSparqlCustomExpressionFactory);
                 }
                 else
                 {
@@ -187,9 +187,9 @@ namespace VDS.RDF.Web.Configuration
             foreach (INode factory in factories)
             {
                 Object temp = ConfigurationLoader.LoadObject(g, factory);
-                if (temp is IPropertyFunctionFactory)
+                if (temp is IPropertyFunctionFactory iPropertyFunctionFactory)
                 {
-                    this._propertyFunctionFactories.Add((IPropertyFunctionFactory)temp);
+                    this._propertyFunctionFactories.Add(iPropertyFunctionFactory);
                 }
                 else
                 {
@@ -210,9 +210,9 @@ namespace VDS.RDF.Web.Configuration
             if (nsNode != null)
             {
                 Object nsTemp = ConfigurationLoader.LoadObject(g, nsNode);
-                if (nsTemp is IGraph)
+                if (nsTemp is IGraph iGraph)
                 {
-                    this._defaultNamespaces.Import(((IGraph)nsTemp).NamespaceMap);
+                    this._defaultNamespaces.Import(iGraph.NamespaceMap);
                 }
             }
         }
diff --git a/Libraries/dotNetRDF.Web/Configuration/Protocol/BaseProtocolHandlerConfiguration.cs b/Libraries/dotNetRDF.Web/Configuration/Protocol/BaseProtocolHandlerConfiguration.cs
index c59b79ef2..70e654cf0 100644
--- a/Libraries/dotNetRDF.Web/Configuration/Protocol/BaseProtocolHandlerConfiguration.cs
+++ b/Libraries/dotNetRDF.Web/Configuration/Protocol/BaseProtocolHandlerConfiguration.cs
@@ -59,9 +59,9 @@ namespace VDS.RDF.Web.Configuration.Protocol
             INode procNode = ConfigurationLoader.GetConfigurationNode(g, objNode, g.CreateUriNode(UriFactory.Create(ConfigurationLoader.PropertyProtocolProcessor)));
             if (procNode == null) throw new DotNetRdfConfigurationException("Unable to load Protocol Handler Configuration as the RDF configuration file does not specify a dnr:protocolProcessor property for the Handler");
             Object temp = ConfigurationLoader.LoadObject(g, procNode);
-            if (temp is ISparqlHttpProtocolProcessor)
+            if (temp is ISparqlHttpProtocolProcessor iSparqlHttpProtocolProcessor)
             {
-                processor = (ISparqlHttpProtocolProcessor)temp;
+                processor = iSparqlHttpProtocolProcessor;
             }
             else
             {
@@ -74,9 +74,9 @@ namespace VDS.RDF.Web.Configuration.Protocol
             if (descripNode != null)
             {
                 Object descrip = ConfigurationLoader.LoadObject(g, descripNode);
-                if (descrip is IGraph)
+                if (descrip is IGraph iGraph)
                 {
-                    this._serviceDescription = (IGraph)descrip;
+                    this._serviceDescription = iGraph;
                 }
                 else
                 {
diff --git a/Libraries/dotNetRDF.Web/Configuration/Query/BaseQueryHandlerConfiguration.cs b/Libraries/dotNetRDF.Web/Configuration/Query/BaseQueryHandlerConfiguration.cs
index d8152244f..32e58f246 100644
--- a/Libraries/dotNetRDF.Web/Configuration/Query/BaseQueryHandlerConfiguration.cs
+++ b/Libraries/dotNetRDF.Web/Configuration/Query/BaseQueryHandlerConfiguration.cs
@@ -121,9 +121,9 @@ namespace VDS.RDF.Web.Configuration.Query
             INode procNode = ConfigurationLoader.GetConfigurationNode(g, objNode, g.CreateUriNode(UriFactory.Create(ConfigurationLoader.PropertyQueryProcessor)));
             if (procNode == null) throw new DotNetRdfConfigurationException("Unable to load Query Handler Configuration as the RDF configuration file does not specify a dnr:queryProcessor property for the Handler");
             Object temp = ConfigurationLoader.LoadObject(g, procNode);
-            if (temp is ISparqlQueryProcessor)
+            if (temp is ISparqlQueryProcessor iSparqlQueryProcessor)
             {
-                processor = (ISparqlQueryProcessor)temp;
+                processor = iSparqlQueryProcessor;
             }
             else
             {
@@ -176,9 +176,9 @@ namespace VDS.RDF.Web.Configuration.Query
                     try
                     {
                         Object desc = Activator.CreateInstance(Type.GetType(algoClass));
-                        if (desc is ISparqlDescribe)
+                        if (desc is ISparqlDescribe iSparqlDescribe)
                         {
-                            this._describer = (ISparqlDescribe)desc;
+                            this._describer = iSparqlDescribe;
                         }
                         else
                         {
@@ -201,9 +201,9 @@ namespace VDS.RDF.Web.Configuration.Query
             if (descripNode != null)
             {
                 Object descrip = ConfigurationLoader.LoadObject(g, descripNode);
-                if (descrip is IGraph)
+                if (descrip is IGraph iGraph)
                 {
-                    this._serviceDescription = (IGraph)descrip;
+                    this._serviceDescription = iGraph;
                 }
                 else
                 {
@@ -216,9 +216,9 @@ namespace VDS.RDF.Web.Configuration.Query
             if (queryOptNode != null)
             {
                 Object queryOpt = ConfigurationLoader.LoadObject(g, queryOptNode);
-                if (queryOpt is IQueryOptimiser)
+                if (queryOpt is IQueryOptimiser iQueryOptimiser)
                 {
-                    this._queryOptimiser = (IQueryOptimiser)queryOpt;
+                    this._queryOptimiser = iQueryOptimiser;
                 }
                 else
                 {
@@ -230,9 +230,9 @@ namespace VDS.RDF.Web.Configuration.Query
             foreach (INode algOptNode in ConfigurationLoader.GetConfigurationData(g, objNode, g.CreateUriNode(UriFactory.Create(ConfigurationLoader.PropertyAlgebraOptimiser))))
             {
                 Object algOpt = ConfigurationLoader.LoadObject(g, algOptNode);
-                if (algOpt is IAlgebraOptimiser)
+                if (algOpt is IAlgebraOptimiser iAlgebraOptimiser)
                 {
-                    this._algebraOptimisers.Add((IAlgebraOptimiser)algOpt);
+                    this._algebraOptimisers.Add(iAlgebraOptimiser);
                 }
                 else
                 {
diff --git a/Libraries/dotNetRDF.Web/Configuration/Resource/BaseDatasetHandlerConfiguration.cs b/Libraries/dotNetRDF.Web/Configuration/Resource/BaseDatasetHandlerConfiguration.cs
index 61d74d08f..21a5ac0cb 100644
--- a/Libraries/dotNetRDF.Web/Configuration/Resource/BaseDatasetHandlerConfiguration.cs
+++ b/Libraries/dotNetRDF.Web/Configuration/Resource/BaseDatasetHandlerConfiguration.cs
@@ -52,9 +52,9 @@ namespace VDS.RDF.Web.Configuration.Resource
 
             // Load the Dataset
             Object temp = ConfigurationLoader.LoadObject(config, datasetNode);
-            if (temp is ISparqlDataset)
+            if (temp is ISparqlDataset iSparqlDataset)
             {
-                this._dataset = (ISparqlDataset)temp;
+                this._dataset = iSparqlDataset;
             }
             else
             {
diff --git a/Libraries/dotNetRDF.Web/Configuration/Resource/BaseGraphHandlerConfiguration.cs b/Libraries/dotNetRDF.Web/Configuration/Resource/BaseGraphHandlerConfiguration.cs
index 03e132ab7..c1d3fecab 100644
--- a/Libraries/dotNetRDF.Web/Configuration/Resource/BaseGraphHandlerConfiguration.cs
+++ b/Libraries/dotNetRDF.Web/Configuration/Resource/BaseGraphHandlerConfiguration.cs
@@ -51,9 +51,9 @@ namespace VDS.RDF.Web.Configuration.Resource
 
             // Load the Graph
             Object temp = ConfigurationLoader.LoadObject(g, graphNode);
-            if (temp is IGraph)
+            if (temp is IGraph iGraph)
             {
-                this._g = (IGraph)temp;
+                this._g = iGraph;
             }
             else
             {
diff --git a/Libraries/dotNetRDF.Web/Configuration/Server/BaseSparqlServerConfiguration.cs b/Libraries/dotNetRDF.Web/Configuration/Server/BaseSparqlServerConfiguration.cs
index 644f0e16f..2a3b1b36e 100644
--- a/Libraries/dotNetRDF.Web/Configuration/Server/BaseSparqlServerConfiguration.cs
+++ b/Libraries/dotNetRDF.Web/Configuration/Server/BaseSparqlServerConfiguration.cs
@@ -328,9 +328,9 @@ namespace VDS.RDF.Web.Configuration.Server
             if (procNode != null)
             {
                 Object temp = ConfigurationLoader.LoadObject(g, procNode);
-                if (temp is ISparqlQueryProcessor)
+                if (temp is ISparqlQueryProcessor iSparqlQueryProcessor)
                 {
-                    this._queryProcessor = (ISparqlQueryProcessor)temp;
+                    this._queryProcessor = iSparqlQueryProcessor;
                 }
                 else
                 {
@@ -383,9 +383,9 @@ namespace VDS.RDF.Web.Configuration.Server
                     try
                     {
                         Object desc = Activator.CreateInstance(Type.GetType(algoClass));
-                        if (desc is ISparqlDescribe)
+                        if (desc is ISparqlDescribe iSparqlDescribe)
                         {
-                            this._describer = (ISparqlDescribe)desc;
+                            this._describer = iSparqlDescribe;
                         }
                         else
                         {
@@ -408,9 +408,9 @@ namespace VDS.RDF.Web.Configuration.Server
             if (queryOptNode != null)
             {
                 Object queryOpt = ConfigurationLoader.LoadObject(g, queryOptNode);
-                if (queryOpt is IQueryOptimiser)
+                if (queryOpt is IQueryOptimiser iQueryOptimiser)
                 {
-                    this._queryOptimiser = (IQueryOptimiser)queryOpt;
+                    this._queryOptimiser = iQueryOptimiser;
                 }
                 else
                 {
@@ -422,9 +422,9 @@ namespace VDS.RDF.Web.Configuration.Server
             foreach (INode algOptNode in ConfigurationLoader.GetConfigurationData(g, objNode, g.CreateUriNode(UriFactory.Create(ConfigurationLoader.PropertyAlgebraOptimiser))))
             {
                 Object algOpt = ConfigurationLoader.LoadObject(g, algOptNode);
-                if (algOpt is IAlgebraOptimiser)
+                if (algOpt is IAlgebraOptimiser iAlgebraOptimiser)
                 {
-                    this._algebraOptimisers.Add((IAlgebraOptimiser)algOpt);
+                    this._algebraOptimisers.Add(iAlgebraOptimiser);
                 }
                 else
                 {
@@ -437,9 +437,9 @@ namespace VDS.RDF.Web.Configuration.Server
             if (procNode != null)
             {
                 Object temp = ConfigurationLoader.LoadObject(g, procNode);
-                if (temp is ISparqlUpdateProcessor)
+                if (temp is ISparqlUpdateProcessor iSparqlUpdateProcessor)
                 {
-                    this._updateProcessor = (ISparqlUpdateProcessor)temp;
+                    this._updateProcessor = iSparqlUpdateProcessor;
                 }
                 else
                 {
@@ -468,9 +468,9 @@ namespace VDS.RDF.Web.Configuration.Server
             if (procNode != null)
             {
                 Object temp = ConfigurationLoader.LoadObject(g, procNode);
-                if (temp is ISparqlHttpProtocolProcessor)
+                if (temp is ISparqlHttpProtocolProcessor iSparqlHttpProtocolProcessor)
                 {
-                    this._protocolProcessor = (ISparqlHttpProtocolProcessor)temp;
+                    this._protocolProcessor = iSparqlHttpProtocolProcessor;
                 }
                 else
                 {
@@ -488,9 +488,9 @@ namespace VDS.RDF.Web.Configuration.Server
             if (descripNode != null)
             {
                 Object descrip = ConfigurationLoader.LoadObject(g, descripNode);
-                if (descrip is IGraph)
+                if (descrip is IGraph iGraph)
                 {
-                    this._serviceDescription = (IGraph)descrip;
+                    this._serviceDescription = iGraph;
                 }
                 else
                 {
diff --git a/Libraries/dotNetRDF.Web/Configuration/Update/BaseUpdateHandlerConfiguration.cs b/Libraries/dotNetRDF.Web/Configuration/Update/BaseUpdateHandlerConfiguration.cs
index 1b45cf808..6e3146717 100644
--- a/Libraries/dotNetRDF.Web/Configuration/Update/BaseUpdateHandlerConfiguration.cs
+++ b/Libraries/dotNetRDF.Web/Configuration/Update/BaseUpdateHandlerConfiguration.cs
@@ -69,9 +69,9 @@ namespace VDS.RDF.Web.Configuration.Update
             INode procNode = ConfigurationLoader.GetConfigurationNode(g, objNode, g.CreateUriNode(UriFactory.Create(ConfigurationLoader.PropertyUpdateProcessor)));
             if (procNode == null) throw new DotNetRdfConfigurationException("Unable to load Update Handler Configuration as the RDF configuration file does not specify a dnr:updateProcessor property for the Handler");
             Object temp = ConfigurationLoader.LoadObject(g, procNode);
-            if (temp is ISparqlUpdateProcessor)
+            if (temp is ISparqlUpdateProcessor iSparqlUpdateProcessor)
             {
-                processor = (ISparqlUpdateProcessor)temp;
+                processor = iSparqlUpdateProcessor;
             }
             else
             {
@@ -100,9 +100,9 @@ namespace VDS.RDF.Web.Configuration.Update
             if (descripNode != null)
             {
                 Object descrip = ConfigurationLoader.LoadObject(g, descripNode);
-                if (descrip is IGraph)
+                if (descrip is IGraph iGraph)
                 {
-                    this._serviceDescription = (IGraph)descrip;
+                    this._serviceDescription = iGraph;
                 }
                 else
                 {
diff --git a/Libraries/dotNetRDF.Web/HandlerHelper.cs b/Libraries/dotNetRDF.Web/HandlerHelper.cs
index 2285b84f5..4ecb5b740 100644
--- a/Libraries/dotNetRDF.Web/HandlerHelper.cs
+++ b/Libraries/dotNetRDF.Web/HandlerHelper.cs
@@ -161,7 +161,7 @@ namespace VDS.RDF.Web
             String[] acceptTypes = context.GetAcceptTypes();
 
             // Return the Results
-            if (result is SparqlResultSet)
+            if (result is SparqlResultSet sparqlResultSet)
             {
                 ISparqlResultsWriter sparqlWriter = null;      
        
@@ -192,9 +192,9 @@ namespace VDS.RDF.Web
 
                 // Send Result Set to Client
                 context.Response.ContentEncoding = definition.Encoding;
-                sparqlWriter.Save((SparqlResultSet)result, new StreamWriter(context.Response.OutputStream, definition.Encoding));
+                sparqlWriter.Save(sparqlResultSet, new StreamWriter(context.Response.OutputStream, definition.Encoding));
             }
-            else if (result is IGraph)
+            else if (result is IGraph iGraph)
             {
                 IRdfWriter rdfWriter = null;
 
@@ -225,14 +225,14 @@ namespace VDS.RDF.Web
                 if (definition != null)
                 {
                     context.Response.ContentEncoding = definition.Encoding;
-                    rdfWriter.Save((IGraph)result, new StreamWriter(context.Response.OutputStream, definition.Encoding));
+                    rdfWriter.Save(iGraph, new StreamWriter(context.Response.OutputStream, definition.Encoding));
                 }
                 else 
                 {
                     rdfWriter.Save((IGraph)result, new StreamWriter(context.Response.OutputStream));
                 }
             }
-            else if (result is ITripleStore)
+            else if (result is ITripleStore iTripleStore)
             {
                 IStoreWriter storeWriter = null;
 
@@ -263,17 +263,17 @@ namespace VDS.RDF.Web
                 if (definition != null) 
                 {
                     context.Response.ContentEncoding = definition.Encoding;
-                    storeWriter.Save((ITripleStore)result, new StreamWriter(context.Response.OutputStream, definition.Encoding));
+                    storeWriter.Save(iTripleStore, new StreamWriter(context.Response.OutputStream, definition.Encoding));
                 } 
                 else
                 {
                     storeWriter.Save((ITripleStore)result, new StreamWriter(context.Response.OutputStream));
                 }
             }
-            else if (result is ISparqlDataset)
+            else if (result is ISparqlDataset iSparqlDataset)
             {
                 // Wrap in a Triple Store and then call self so the Triple Store writing branch of this if gets called instead
-                TripleStore store = new TripleStore(new DatasetGraphCollection((ISparqlDataset)result));
+                TripleStore store = new TripleStore(new DatasetGraphCollection(iSparqlDataset));
                 HandlerHelper.SendToClient(context, store, config);
             }
             else
@@ -292,35 +292,35 @@ namespace VDS.RDF.Web
             if (config != null)
             {
                 // Apply Stylesheet to HTML writers
-                if (writer is IHtmlWriter)
+                if (writer is IHtmlWriter iHtmlWriter)
                 {
-                    ((IHtmlWriter)writer).Stylesheet = config.Stylesheet;
+                    iHtmlWriter.Stylesheet = config.Stylesheet;
                 }
 
                 // Apply Compression Options
-                if (writer is ICompressingWriter)
+                if (writer is ICompressingWriter iCompressingWriter)
                 {
-                    ((ICompressingWriter)writer).CompressionLevel = config.WriterCompressionLevel;
+                    iCompressingWriter.CompressionLevel = config.WriterCompressionLevel;
                 }
-                if (writer is INamespaceWriter)
+                if (writer is INamespaceWriter iNamespaceWriter)
                 {
-                    ((INamespaceWriter)writer).DefaultNamespaces = config.DefaultNamespaces;
+                    iNamespaceWriter.DefaultNamespaces = config.DefaultNamespaces;
                 }
-                if (writer is IDtdWriter)
+                if (writer is IDtdWriter iDtdWriter)
                 {
-                    ((IDtdWriter)writer).UseDtd = config.WriterUseDtds;
+                    iDtdWriter.UseDtd = config.WriterUseDtds;
                 }
-                if (writer is IAttributeWriter)
+                if (writer is IAttributeWriter iAttributeWriter)
                 {
-                    ((IAttributeWriter)writer).UseAttributes = config.WriterUseAttributes;
+                    iAttributeWriter.UseAttributes = config.WriterUseAttributes;
                 }
-                if (writer is IHighSpeedWriter)
+                if (writer is IHighSpeedWriter iHighSpeedWriter)
                 {
-                    ((IHighSpeedWriter)writer).HighSpeedModePermitted = config.WriterHighSpeedMode;
+                    iHighSpeedWriter.HighSpeedModePermitted = config.WriterHighSpeedMode;
                 }
-                if (writer is IPrettyPrintingWriter)
+                if (writer is IPrettyPrintingWriter iPrettyPrintingWriter)
                 {
-                    ((IPrettyPrintingWriter)writer).PrettyPrintMode = config.WriterPrettyPrinting;
+                    iPrettyPrintingWriter.PrettyPrintMode = config.WriterPrettyPrinting;
                 }
             }
         }
diff --git a/Libraries/dotNetRDF/Configuration/CachedObjectKey.cs b/Libraries/dotNetRDF/Configuration/CachedObjectKey.cs
index acea249cb..42816fc6c 100644
--- a/Libraries/dotNetRDF/Configuration/CachedObjectKey.cs
+++ b/Libraries/dotNetRDF/Configuration/CachedObjectKey.cs
@@ -63,9 +63,9 @@ namespace VDS.RDF.Configuration
         /// <returns></returns>
         public override bool Equals(object obj)
         {
-            if (obj is CachedObjectKey)
+            if (obj is CachedObjectKey cachedObjectKey)
             {
-                return Equals((CachedObjectKey)obj);
+                return Equals(cachedObjectKey);
             }
             else
             {
diff --git a/Libraries/dotNetRDF/Configuration/ConfigurationLoader.cs b/Libraries/dotNetRDF/Configuration/ConfigurationLoader.cs
index 837735ee9..2f9a3a40c 100644
--- a/Libraries/dotNetRDF/Configuration/ConfigurationLoader.cs
+++ b/Libraries/dotNetRDF/Configuration/ConfigurationLoader.cs
@@ -453,9 +453,9 @@ namespace VDS.RDF.Configuration
             foreach (INode objNode in g.GetTriplesWithPredicateObject(rdfType, objLoader).Select(t => t.Subject))
             {
                 Object temp = LoadObject(g, objNode);
-                if (temp is IObjectFactory)
+                if (temp is IObjectFactory iObjectFactory)
                 {
-                    AddObjectFactory((IObjectFactory)temp);
+                    AddObjectFactory(iObjectFactory);
                 }
                 else
                 {
@@ -581,7 +581,7 @@ namespace VDS.RDF.Configuration
             foreach (INode objNode in g.GetTriplesWithPredicateObject(rdfType, desiredType).Select(t => t.Subject))
             {
                 temp = LoadObject(g, objNode);
-                if (temp is IRdfReader)
+                if (temp is IRdfReader iRdfReader)
                 {
                     // Get the formats to associate this with
                     mimeTypes = GetConfigurationArray(g, objNode, formatMimeType);
@@ -589,7 +589,7 @@ namespace VDS.RDF.Configuration
                     extensions = GetConfigurationArray(g, objNode, formatExtension);
 
                     // Register
-                    MimeTypesHelper.RegisterParser((IRdfReader)temp, mimeTypes, extensions);
+                    MimeTypesHelper.RegisterParser(iRdfReader, mimeTypes, extensions);
                 }
                 else
                 {
@@ -602,7 +602,7 @@ namespace VDS.RDF.Configuration
             foreach (INode objNode in g.GetTriplesWithPredicateObject(rdfType, desiredType).Select(t => t.Subject))
             {
                 temp = LoadObject(g, objNode);
-                if (temp is IStoreReader)
+                if (temp is IStoreReader iStoreReader)
                 {
                     // Get the formats to associate this with
                     mimeTypes = GetConfigurationArray(g, objNode, formatMimeType);
@@ -610,7 +610,7 @@ namespace VDS.RDF.Configuration
                     extensions = GetConfigurationArray(g, objNode, formatExtension);
 
                     // Register
-                    MimeTypesHelper.RegisterParser((IStoreReader)temp, mimeTypes, extensions);
+                    MimeTypesHelper.RegisterParser(iStoreReader, mimeTypes, extensions);
                 }
                 else
                 {
@@ -623,7 +623,7 @@ namespace VDS.RDF.Configuration
             foreach (INode objNode in g.GetTriplesWithPredicateObject(rdfType, desiredType).Select(t => t.Subject))
             {
                 temp = LoadObject(g, objNode);
-                if (temp is ISparqlResultsReader)
+                if (temp is ISparqlResultsReader iSparqlResultsReader)
                 {
                     // Get the formats to associate this with
                     mimeTypes = GetConfigurationArray(g, objNode, formatMimeType);
@@ -631,7 +631,7 @@ namespace VDS.RDF.Configuration
                     extensions = GetConfigurationArray(g, objNode, formatExtension);
 
                     // Register
-                    MimeTypesHelper.RegisterParser((ISparqlResultsReader)temp, mimeTypes, extensions);
+                    MimeTypesHelper.RegisterParser(iSparqlResultsReader, mimeTypes, extensions);
                 }
                 else
                 {
@@ -644,7 +644,7 @@ namespace VDS.RDF.Configuration
             foreach (INode objNode in g.GetTriplesWithPredicateObject(rdfType, desiredType).Select(t => t.Subject))
             {
                 temp = LoadObject(g, objNode);
-                if (temp is IRdfWriter)
+                if (temp is IRdfWriter iRdfWriter)
                 {
                     // Get the formats to associate this with
                     mimeTypes = GetConfigurationArray(g, objNode, formatMimeType);
@@ -652,7 +652,7 @@ namespace VDS.RDF.Configuration
                     extensions = GetConfigurationArray(g, objNode, formatExtension);
 
                     // Register
-                    MimeTypesHelper.RegisterWriter((IRdfWriter)temp, mimeTypes, extensions);
+                    MimeTypesHelper.RegisterWriter(iRdfWriter, mimeTypes, extensions);
                 }
                 else
                 {
@@ -665,7 +665,7 @@ namespace VDS.RDF.Configuration
             foreach (INode objNode in g.GetTriplesWithPredicateObject(rdfType, desiredType).Select(t => t.Subject))
             {
                 temp = LoadObject(g, objNode);
-                if (temp is IStoreWriter)
+                if (temp is IStoreWriter iStoreWriter)
                 {
                     // Get the formats to associate this with
                     mimeTypes = GetConfigurationArray(g, objNode, formatMimeType);
@@ -673,7 +673,7 @@ namespace VDS.RDF.Configuration
                     extensions = GetConfigurationArray(g, objNode, formatExtension);
 
                     // Register
-                    MimeTypesHelper.RegisterWriter((IStoreWriter)temp, mimeTypes, extensions);
+                    MimeTypesHelper.RegisterWriter(iStoreWriter, mimeTypes, extensions);
                 }
                 else
                 {
@@ -686,7 +686,7 @@ namespace VDS.RDF.Configuration
             foreach (INode objNode in g.GetTriplesWithPredicateObject(rdfType, desiredType).Select(t => t.Subject))
             {
                 temp = LoadObject(g, objNode);
-                if (temp is ISparqlResultsWriter)
+                if (temp is ISparqlResultsWriter iSparqlResultsWriter)
                 {
                     // Get the formats to associate this with
                     mimeTypes = GetConfigurationArray(g, objNode, formatMimeType);
@@ -694,7 +694,7 @@ namespace VDS.RDF.Configuration
                     extensions = GetConfigurationArray(g, objNode, formatExtension);
 
                     // Register
-                    MimeTypesHelper.RegisterWriter((ISparqlResultsWriter)temp, mimeTypes, extensions);
+                    MimeTypesHelper.RegisterWriter(iSparqlResultsWriter, mimeTypes, extensions);
                 }
                 else
                 {
@@ -716,12 +716,12 @@ namespace VDS.RDF.Configuration
             foreach (Triple t in g.GetTriplesWithPredicateObject(rdfType, operatorClass))
             {
                 Object temp = LoadObject(g, t.Subject);
-                if (temp is ISparqlOperator)
+                if (temp is ISparqlOperator iSparqlOperator)
                 {
                     bool enable = GetConfigurationBoolean(g, t.Subject, enabled, true);
                     if (enable)
                     {
-                        SparqlOperators.AddOperator((ISparqlOperator)temp);
+                        SparqlOperators.AddOperator(iSparqlOperator);
                     }
                     else
                     {
@@ -852,7 +852,7 @@ namespace VDS.RDF.Configuration
         /// </returns>
         public static INode GetConfigurationNode(IGraph g, INode objNode, IEnumerable<INode> properties)
         {
-            return properties.Select(p => GetConfigurationNode(g, objNode, p)).Where(n => n != null).FirstOrDefault();
+            return properties.Select(p => GetConfigurationNode(g, objNode, p)).FirstOrDefault(n => n != null);
         }
 
         /// <summary>
@@ -902,7 +902,7 @@ namespace VDS.RDF.Configuration
         /// </returns>
         public static String GetConfigurationString(IGraph g, INode objNode, IEnumerable<INode> properties)
         {
-            return properties.Select(p => GetConfigurationString(g, objNode, p)).Where(s => s != null).FirstOrDefault();
+            return properties.Select(p => GetConfigurationString(g, objNode, p)).FirstOrDefault(s => s != null);
         }
 
         /// <summary>
@@ -947,7 +947,7 @@ namespace VDS.RDF.Configuration
         /// <returns></returns>
         public static String GetConfigurationValue(IGraph g, INode objNode, IEnumerable<INode> properties)
         {
-            return properties.Select(p => GetConfigurationValue(g, objNode, p)).Where(s => s != null).FirstOrDefault();
+            return properties.Select(p => GetConfigurationValue(g, objNode, p)).FirstOrDefault(s => s != null);
         }
 
         /// <summary>
@@ -1496,7 +1496,7 @@ namespace VDS.RDF.Configuration
             IBlankNode blankNode = _configGraph.GetBlankNode(blankNodeIdentifier);
             if (blankNode == null)
             {
-                throw new ArgumentException(string.Format("Resource _:{0} was not found is configuration graph", blankNodeIdentifier));
+                throw new ArgumentException($"Resource _:{blankNodeIdentifier} was not found is configuration graph");
             }
 
             return LoadObject(_configGraph, blankNode);
@@ -1513,7 +1513,7 @@ namespace VDS.RDF.Configuration
             IUriNode uriNode = _configGraph.GetUriNode(objectIdentifier);
             if (uriNode == null)
             {
-                throw new ArgumentException(string.Format("Resource <{0}> was not found is configuration graph", objectIdentifier));
+                throw new ArgumentException($"Resource <{objectIdentifier}> was not found is configuration graph");
             }
 
             return LoadObject(_configGraph, uriNode);
diff --git a/Libraries/dotNetRDF/Configuration/DataFactories.cs b/Libraries/dotNetRDF/Configuration/DataFactories.cs
index 368a68238..d7c3b0eb5 100644
--- a/Libraries/dotNetRDF/Configuration/DataFactories.cs
+++ b/Libraries/dotNetRDF/Configuration/DataFactories.cs
@@ -89,9 +89,9 @@ namespace VDS.RDF.Configuration
                 ConfigurationLoader.CheckCircularReference(objNode, source, "dnr:fromGraph");
 
                 Object graph = ConfigurationLoader.LoadObject(g, source);
-                if (graph is IGraph)
+                if (graph is IGraph iGraph)
                 {
-                    output.Merge((IGraph)graph);
+                    output.Merge(iGraph);
                 }
                 else
                 {
@@ -150,13 +150,13 @@ namespace VDS.RDF.Configuration
             sources = ConfigurationLoader.GetConfigurationData(g, objNode, g.CreateUriNode(UriFactory.Create(ConfigurationLoader.PropertyWithUri)));
             foreach (Object store in connections)
             {
-                if (store is IStorageProvider)
+                if (store is IStorageProvider iStorageProvider)
                 {
                     foreach (INode source in sources)
                     {
                         if (source.NodeType == NodeType.Uri || source.NodeType == NodeType.Literal)
                         {
-                            ((IStorageProvider)store).LoadGraph(output, source.ToString());
+                            iStorageProvider.LoadGraph(output, source.ToString());
                         } 
                         else 
                         {
@@ -261,9 +261,9 @@ namespace VDS.RDF.Configuration
             foreach (INode reasoner in reasoners)
             {
                 Object temp = ConfigurationLoader.LoadObject(g, reasoner);
-                if (temp is IInferenceEngine)
+                if (temp is IInferenceEngine iInferenceEngine)
                 {
-                    ((IInferenceEngine)temp).Apply(output);
+                    iInferenceEngine.Apply(output);
                 }
                 else
                 {
@@ -360,9 +360,9 @@ namespace VDS.RDF.Configuration
                     if (subObj == null) return false;
 
                     temp = ConfigurationLoader.LoadObject(g, subObj);
-                    if (temp is IStorageProvider)
+                    if (temp is IStorageProvider iStorageProvider)
                     {
-                        store = new PersistentTripleStore((IStorageProvider)temp);
+                        store = new PersistentTripleStore(iStorageProvider);
                     }
                     else
                     {
@@ -380,9 +380,9 @@ namespace VDS.RDF.Configuration
                 foreach (INode source in sources)
                 {
                     temp = ConfigurationLoader.LoadObject(g, source);
-                    if (temp is IGraph)
+                    if (temp is IGraph iGraph)
                     {
-                        store.Add((IGraph)temp);
+                        store.Add(iGraph);
                     }
                     else
                     {
@@ -419,15 +419,15 @@ namespace VDS.RDF.Configuration
                 }
 
                 // Finally we'll apply any reasoners
-                if (store is IInferencingTripleStore)
+                if (store is IInferencingTripleStore iInferencingTripleStore)
                 {
                     IEnumerable<INode> reasoners = ConfigurationLoader.GetConfigurationData(g, objNode, g.CreateUriNode(UriFactory.Create(ConfigurationLoader.PropertyReasoner)));
                     foreach (INode reasoner in reasoners)
                     {
                         temp = ConfigurationLoader.LoadObject(g, reasoner);
-                        if (temp is IInferenceEngine)
+                        if (temp is IInferenceEngine iInferenceEngine)
                         {
-                            ((IInferencingTripleStore)store).AddInferenceEngine((IInferenceEngine)temp);
+                            iInferencingTripleStore.AddInferenceEngine(iInferenceEngine);
                         }
                         else
                         {
@@ -437,9 +437,9 @@ namespace VDS.RDF.Configuration
                 }
 
                 // And as an absolute final step if the store is transactional we'll flush any changes we've made
-                if (store is ITransactionalStore)
+                if (store is ITransactionalStore iTransactionalStore)
                 {
-                    ((ITransactionalStore)store).Flush();
+                    iTransactionalStore.Flush();
                 }
             }
 
diff --git a/Libraries/dotNetRDF/Configuration/DatasetFactory.cs b/Libraries/dotNetRDF/Configuration/DatasetFactory.cs
index 9ba9a09c3..fb81d4aaf 100644
--- a/Libraries/dotNetRDF/Configuration/DatasetFactory.cs
+++ b/Libraries/dotNetRDF/Configuration/DatasetFactory.cs
@@ -66,11 +66,11 @@ namespace VDS.RDF.Configuration
                     else
                     {
                         Object temp = ConfigurationLoader.LoadObject(g, storeNode);
-                        if (temp is IInMemoryQueryableStore)
+                        if (temp is IInMemoryQueryableStore iInMemoryQueryableStore)
                         {
                             if (unionDefGraph)
                             {
-                                obj = new InMemoryDataset((IInMemoryQueryableStore)temp, unionDefGraph);
+                                obj = new InMemoryDataset(iInMemoryQueryableStore, unionDefGraph);
                             }
                             else if (defaultGraph != null)
                             {
@@ -97,9 +97,9 @@ namespace VDS.RDF.Configuration
                     else
                     {
                         Object temp = ConfigurationLoader.LoadObject(g, storeNode);
-                        if (temp is IInMemoryQueryableStore)
+                        if (temp is IInMemoryQueryableStore iInMemoryQueryableStore)
                         {
-                            obj = new InMemoryQuadDataset((IInMemoryQueryableStore)temp);
+                            obj = new InMemoryQuadDataset(iInMemoryQueryableStore);
                         }
                         else
                         {
@@ -117,9 +117,9 @@ namespace VDS.RDF.Configuration
                     else
                     {
                         Object temp = ConfigurationLoader.LoadObject(g, storeNode);
-                        if (temp is ISparqlDataset)
+                        if (temp is ISparqlDataset iSparqlDataset)
                         {
-                            obj = new WebDemandDataset((ISparqlDataset)temp);
+                            obj = new WebDemandDataset(iSparqlDataset);
                         }
                         else
                         {
diff --git a/Libraries/dotNetRDF/Configuration/EndpointFactories.cs b/Libraries/dotNetRDF/Configuration/EndpointFactories.cs
index 77b97cdc1..212419b46 100644
--- a/Libraries/dotNetRDF/Configuration/EndpointFactories.cs
+++ b/Libraries/dotNetRDF/Configuration/EndpointFactories.cs
@@ -83,11 +83,11 @@ namespace VDS.RDF.Configuration
                     foreach (INode e in endpoints)
                     {
                         Object temp = ConfigurationLoader.LoadObject(g, e);
-                        if (temp is SparqlRemoteEndpoint)
+                        if (temp is SparqlRemoteEndpoint sparqlRemoteEndpoint)
                         {
                             if (endpoint == null)
                             {
-                                endpoint = new FederatedSparqlRemoteEndpoint((SparqlRemoteEndpoint)temp);
+                                endpoint = new FederatedSparqlRemoteEndpoint(sparqlRemoteEndpoint);
                             }
                             else
                             {
@@ -117,9 +117,9 @@ namespace VDS.RDF.Configuration
                 if (proxyNode != null)
                 {
                     Object proxy = ConfigurationLoader.LoadObject(g, proxyNode);
-                    if (proxy is IWebProxy)
+                    if (proxy is IWebProxy iWebProxy)
                     {
-                        endpoint.Proxy = (IWebProxy)proxy;
+                        endpoint.Proxy = iWebProxy;
 
                         // Are we supposed to use the same credentials for the proxy as for the endpoint?
                         bool useCredentialsForProxy = ConfigurationLoader.GetConfigurationBoolean(g, objNode, g.CreateUriNode(UriFactory.Create(ConfigurationLoader.PropertyUseCredentialsForProxy)), false);
diff --git a/Libraries/dotNetRDF/Configuration/OperatorFactory.cs b/Libraries/dotNetRDF/Configuration/OperatorFactory.cs
index df74f2855..dcf704699 100644
--- a/Libraries/dotNetRDF/Configuration/OperatorFactory.cs
+++ b/Libraries/dotNetRDF/Configuration/OperatorFactory.cs
@@ -53,9 +53,9 @@ namespace VDS.RDF.Configuration
         {
             obj = null;
             Object temp = Activator.CreateInstance(targetType);
-            if (temp is ISparqlOperator)
+            if (temp is ISparqlOperator iSparqlOperator)
             {
-                obj = (ISparqlOperator)temp;
+                obj = iSparqlOperator;
                 return true;
             }
             else
diff --git a/Libraries/dotNetRDF/Configuration/OptimiserFactory.cs b/Libraries/dotNetRDF/Configuration/OptimiserFactory.cs
index 4f3fa91d2..a7ee5e208 100644
--- a/Libraries/dotNetRDF/Configuration/OptimiserFactory.cs
+++ b/Libraries/dotNetRDF/Configuration/OptimiserFactory.cs
@@ -71,9 +71,9 @@ namespace VDS.RDF.Configuration
                     if (statsObj != null)
                     {
                         temp = ConfigurationLoader.LoadObject(g, statsObj);
-                        if (temp is IGraph)
+                        if (temp is IGraph iGraph)
                         {
-                            obj = new WeightedOptimiser((IGraph)temp);
+                            obj = new WeightedOptimiser(iGraph);
                         }
                         else
                         {
diff --git a/Libraries/dotNetRDF/Configuration/PermissionFactories.cs b/Libraries/dotNetRDF/Configuration/PermissionFactories.cs
index c06ab6897..0ac4d53f9 100644
--- a/Libraries/dotNetRDF/Configuration/PermissionFactories.cs
+++ b/Libraries/dotNetRDF/Configuration/PermissionFactories.cs
@@ -136,9 +136,9 @@ namespace VDS.RDF.Configuration
                     foreach (INode allow in allowed)
                     {
                         Object temp = ConfigurationLoader.LoadObject(g, allow);
-                        if (temp is IPermission)
+                        if (temp is IPermission iPermission)
                         {
-                            result.AddAllowedAction((IPermission)temp);
+                            result.AddAllowedAction(iPermission);
                         }
                         else
                         {
@@ -151,9 +151,9 @@ namespace VDS.RDF.Configuration
                     foreach (INode deny in denied)
                     {
                         Object temp = ConfigurationLoader.LoadObject(g, deny);
-                        if (temp is IPermission)
+                        if (temp is IPermission iPermission)
                         {
-                            result.AddDeniedAction((IPermission)temp);
+                            result.AddDeniedAction(iPermission);
                         }
                         else
                         {
diff --git a/Libraries/dotNetRDF/Configuration/ProcessorFactories.cs b/Libraries/dotNetRDF/Configuration/ProcessorFactories.cs
index aa448c2ed..e9e43cd9d 100644
--- a/Libraries/dotNetRDF/Configuration/ProcessorFactories.cs
+++ b/Libraries/dotNetRDF/Configuration/ProcessorFactories.cs
@@ -103,9 +103,9 @@ namespace VDS.RDF.Configuration
                     if (datasetObj != null)
                     {
                         temp = ConfigurationLoader.LoadObject(g, datasetObj);
-                        if (temp is ISparqlDataset)
+                        if (temp is ISparqlDataset iSparqlDataset)
                         {
-                            processor = new LeviathanQueryProcessor((ISparqlDataset)temp);
+                            processor = new LeviathanQueryProcessor(iSparqlDataset);
                         }
                         else
                         {
@@ -118,9 +118,9 @@ namespace VDS.RDF.Configuration
                         storeObj = ConfigurationLoader.GetConfigurationNode(g, objNode, g.CreateUriNode(UriFactory.Create(ConfigurationLoader.PropertyUsingStore)));
                         if (storeObj == null) return false;
                         temp = ConfigurationLoader.LoadObject(g, storeObj);
-                        if (temp is IInMemoryQueryableStore)
+                        if (temp is IInMemoryQueryableStore iInMemoryQueryableStore)
                         {
-                            processor = new LeviathanQueryProcessor((IInMemoryQueryableStore)temp);
+                            processor = new LeviathanQueryProcessor(iInMemoryQueryableStore);
                         }
                         else
                         {
@@ -133,9 +133,9 @@ namespace VDS.RDF.Configuration
                     storeObj = ConfigurationLoader.GetConfigurationNode(g, objNode, g.CreateUriNode(UriFactory.Create(ConfigurationLoader.PropertyUsingStore)));
                     if (storeObj == null) return false;
                     temp = ConfigurationLoader.LoadObject(g, storeObj);
-                    if (temp is INativelyQueryableStore)
+                    if (temp is INativelyQueryableStore iNativelyQueryableStore)
                     {
-                        processor = new SimpleQueryProcessor((INativelyQueryableStore)temp);
+                        processor = new SimpleQueryProcessor(iNativelyQueryableStore);
                     }
                     else
                     {
@@ -147,9 +147,9 @@ namespace VDS.RDF.Configuration
                     INode managerObj = ConfigurationLoader.GetConfigurationNode(g, objNode, propStorageProvider);
                     if (managerObj == null) return false;
                     temp = ConfigurationLoader.LoadObject(g, managerObj);
-                    if (temp is IQueryableStorage)
+                    if (temp is IQueryableStorage iQueryableStorage)
                     {
-                        processor = new GenericQueryProcessor((IQueryableStorage)temp);
+                        processor = new GenericQueryProcessor(iQueryableStorage);
                     }
                     else
                     {
@@ -161,9 +161,9 @@ namespace VDS.RDF.Configuration
                     INode endpointObj = ConfigurationLoader.GetConfigurationNode(g, objNode, g.CreateUriNode(UriFactory.Create(ConfigurationLoader.PropertyEndpoint)));
                     if (endpointObj == null) return false;
                     temp = ConfigurationLoader.LoadObject(g, endpointObj);
-                    if (temp is SparqlRemoteEndpoint)
+                    if (temp is SparqlRemoteEndpoint sparqlRemoteEndpoint)
                     {
-                        processor = new RemoteQueryProcessor((SparqlRemoteEndpoint)temp);
+                        processor = new RemoteQueryProcessor(sparqlRemoteEndpoint);
                     }
                     else
                     {
@@ -241,9 +241,9 @@ namespace VDS.RDF.Configuration
                     if (datasetObj != null)
                     {
                         temp = ConfigurationLoader.LoadObject(g, datasetObj);
-                        if (temp is ISparqlDataset)
+                        if (temp is ISparqlDataset iSparqlDataset)
                         {
-                            processor = new LeviathanUpdateProcessor((ISparqlDataset)temp);
+                            processor = new LeviathanUpdateProcessor(iSparqlDataset);
                         }
                         else
                         {
@@ -255,9 +255,9 @@ namespace VDS.RDF.Configuration
                         storeObj = ConfigurationLoader.GetConfigurationNode(g, objNode, g.CreateUriNode(UriFactory.Create(ConfigurationLoader.PropertyUsingStore)));
                         if (storeObj == null) return false;
                         temp = ConfigurationLoader.LoadObject(g, storeObj);
-                        if (temp is IInMemoryQueryableStore)
+                        if (temp is IInMemoryQueryableStore iInMemoryQueryableStore)
                         {
-                            processor = new LeviathanUpdateProcessor((IInMemoryQueryableStore)temp);
+                            processor = new LeviathanUpdateProcessor(iInMemoryQueryableStore);
                         }
                         else
                         {
@@ -270,9 +270,9 @@ namespace VDS.RDF.Configuration
                     storeObj = ConfigurationLoader.GetConfigurationNode(g, objNode, g.CreateUriNode(UriFactory.Create(ConfigurationLoader.PropertyUsingStore)));
                     if (storeObj == null) return false;
                     temp = ConfigurationLoader.LoadObject(g, storeObj);
-                    if (temp is IUpdateableTripleStore)
+                    if (temp is IUpdateableTripleStore iUpdateableTripleStore)
                     {
-                        processor = new SimpleUpdateProcessor((IUpdateableTripleStore)temp);
+                        processor = new SimpleUpdateProcessor(iUpdateableTripleStore);
                     }
                     else
                     {
@@ -284,9 +284,9 @@ namespace VDS.RDF.Configuration
                     INode managerObj = ConfigurationLoader.GetConfigurationNode(g, objNode, propStorageProvider);
                     if (managerObj == null) return false;
                     temp = ConfigurationLoader.LoadObject(g, managerObj);
-                    if (temp is IStorageProvider)
+                    if (temp is IStorageProvider iStorageProvider)
                     {
-                        processor = new GenericUpdateProcessor((IStorageProvider)temp);
+                        processor = new GenericUpdateProcessor(iStorageProvider);
                     }
                     else
                     {
@@ -355,11 +355,11 @@ namespace VDS.RDF.Configuration
                     Object queryProc = ConfigurationLoader.LoadObject(g, qNode);
                     Object updateProc = ConfigurationLoader.LoadObject(g, uNode);
 
-                    if (queryProc is ISparqlQueryProcessor)
+                    if (queryProc is ISparqlQueryProcessor iSparqlQueryProcessor)
                     {
-                        if (updateProc is ISparqlUpdateProcessor)
+                        if (updateProc is ISparqlUpdateProcessor iSparqlUpdateProcessor)
                         {
-                            processor = new ProtocolToUpdateProcessor((ISparqlQueryProcessor)queryProc, (ISparqlUpdateProcessor)updateProc);
+                            processor = new ProtocolToUpdateProcessor(iSparqlQueryProcessor, iSparqlUpdateProcessor);
                         }
                         else
                         {
@@ -378,9 +378,9 @@ namespace VDS.RDF.Configuration
                     if (datasetNode != null)
                     {
                         temp = ConfigurationLoader.LoadObject(g, datasetNode);
-                        if (temp is ISparqlDataset)
+                        if (temp is ISparqlDataset iSparqlDataset)
                         {
-                            processor = new LeviathanProtocolProcessor((ISparqlDataset)temp);
+                            processor = new LeviathanProtocolProcessor(iSparqlDataset);
                         }
                         else
                         {
@@ -394,9 +394,9 @@ namespace VDS.RDF.Configuration
 
                         Object store = ConfigurationLoader.LoadObject(g, storeNode);
 
-                        if (store is IInMemoryQueryableStore)
+                        if (store is IInMemoryQueryableStore iInMemoryQueryableStore)
                         {
-                            processor = new LeviathanProtocolProcessor((IInMemoryQueryableStore)store);
+                            processor = new LeviathanProtocolProcessor(iInMemoryQueryableStore);
                         }
                         else
                         {
@@ -409,9 +409,9 @@ namespace VDS.RDF.Configuration
                     INode managerObj = ConfigurationLoader.GetConfigurationNode(g, objNode, propStorageProvider);
                     if (managerObj == null) return false;
                     temp = ConfigurationLoader.LoadObject(g, managerObj);
-                    if (temp is IStorageProvider)
+                    if (temp is IStorageProvider iStorageProvider)
                     {
-                        processor = new GenericProtocolProcessor((IStorageProvider)temp);
+                        processor = new GenericProtocolProcessor(iStorageProvider);
                     }
                     else
                     {
diff --git a/Libraries/dotNetRDF/Configuration/ReasonerFactory.cs b/Libraries/dotNetRDF/Configuration/ReasonerFactory.cs
index de4d867a5..863226ee8 100644
--- a/Libraries/dotNetRDF/Configuration/ReasonerFactory.cs
+++ b/Libraries/dotNetRDF/Configuration/ReasonerFactory.cs
@@ -68,9 +68,9 @@ namespace VDS.RDF.Configuration
                     INode reasonerNode = ConfigurationLoader.GetConfigurationNode(g, objNode, g.CreateUriNode(UriFactory.Create(ConfigurationLoader.PropertyOwlReasoner)));
                     if (reasonerNode == null) return false;
                     Object reasoner = ConfigurationLoader.LoadObject(g, reasonerNode);
-                    if (reasoner is IOwlReasoner)
+                    if (reasoner is IOwlReasoner iOwlReasoner)
                     {
-                        output = new OwlReasonerWrapper((IOwlReasoner)reasoner);
+                        output = new OwlReasonerWrapper(iOwlReasoner);
                     }
                     else
                     {
@@ -94,16 +94,16 @@ namespace VDS.RDF.Configuration
 
             if (output != null)
             {
-                if (output is IInferenceEngine)
+                if (output is IInferenceEngine iInferenceEngine)
                 {
                     // Now initialise with any specified Graphs
                     IEnumerable<INode> rulesGraphs = ConfigurationLoader.GetConfigurationData(g, objNode, g.CreateUriNode(UriFactory.Create(ConfigurationLoader.PropertyUsingGraph)));
                     foreach (INode rulesGraph in rulesGraphs)
                     {
                         Object temp = ConfigurationLoader.LoadObject(g, rulesGraph);
-                        if (temp is IGraph)
+                        if (temp is IGraph iGraph)
                         {
-                            ((IInferenceEngine)output).Initialise((IGraph)temp);
+                            iInferenceEngine.Initialise(iGraph);
                         }
                         else
                         {
diff --git a/Libraries/dotNetRDF/Configuration/StorageFactories.cs b/Libraries/dotNetRDF/Configuration/StorageFactories.cs
index 2d1ed6abf..b2d9040a1 100644
--- a/Libraries/dotNetRDF/Configuration/StorageFactories.cs
+++ b/Libraries/dotNetRDF/Configuration/StorageFactories.cs
@@ -167,9 +167,9 @@ namespace VDS.RDF.Configuration
                     if (datasetObj != null)
                     {
                         temp = ConfigurationLoader.LoadObject(g, datasetObj);
-                        if (temp is ISparqlDataset)
+                        if (temp is ISparqlDataset iSparqlDataset)
                         {
-                            storageProvider = new InMemoryManager((ISparqlDataset) temp);
+                            storageProvider = new InMemoryManager(iSparqlDataset);
                         }
                         else
                         {
@@ -183,9 +183,9 @@ namespace VDS.RDF.Configuration
                         if (storeObj != null)
                         {
                             temp = ConfigurationLoader.LoadObject(g, storeObj);
-                            if (temp is IInMemoryQueryableStore)
+                            if (temp is IInMemoryQueryableStore iInMemoryQueryableStore)
                             {
-                                storageProvider = new InMemoryManager((IInMemoryQueryableStore) temp);
+                                storageProvider = new InMemoryManager(iInMemoryQueryableStore);
                             }
                             else
                             {
@@ -204,9 +204,9 @@ namespace VDS.RDF.Configuration
                     // Get the actual Manager we are wrapping
                     storeObj = ConfigurationLoader.GetConfigurationNode(g, objNode, propStorageProvider);
                     temp = ConfigurationLoader.LoadObject(g, storeObj);
-                    if (temp is IStorageProvider)
+                    if (temp is IStorageProvider iStorageProvider)
                     {
-                        storageProvider = new ReadOnlyConnector((IStorageProvider) temp);
+                        storageProvider = new ReadOnlyConnector(iStorageProvider);
                     }
                     else
                     {
@@ -218,9 +218,9 @@ namespace VDS.RDF.Configuration
                     // Get the actual Manager we are wrapping
                     storeObj = ConfigurationLoader.GetConfigurationNode(g, objNode, propStorageProvider);
                     temp = ConfigurationLoader.LoadObject(g, storeObj);
-                    if (temp is IQueryableStorage)
+                    if (temp is IQueryableStorage iQueryableStorage)
                     {
-                        storageProvider = new QueryableReadOnlyConnector((IQueryableStorage) temp);
+                        storageProvider = new QueryableReadOnlyConnector(iQueryableStorage);
                     }
                     else
                     {
@@ -287,9 +287,9 @@ namespace VDS.RDF.Configuration
                         INode endpointObj = ConfigurationLoader.GetConfigurationNode(g, objNode, new INode[] {g.CreateUriNode(UriFactory.Create(ConfigurationLoader.PropertyQueryEndpoint)), g.CreateUriNode(UriFactory.Create(ConfigurationLoader.PropertyEndpoint))});
                         if (endpointObj == null) return false;
                         temp = ConfigurationLoader.LoadObject(g, endpointObj);
-                        if (temp is SparqlRemoteEndpoint)
+                        if (temp is SparqlRemoteEndpoint sparqlRemoteEndpoint)
                         {
-                            storageProvider = new SparqlConnector((SparqlRemoteEndpoint) temp, loadMode);
+                            storageProvider = new SparqlConnector(sparqlRemoteEndpoint, loadMode);
                         }
                         else
                         {
@@ -343,9 +343,9 @@ namespace VDS.RDF.Configuration
                         INode endpointObj = ConfigurationLoader.GetConfigurationNode(g, objNode, new INode[] {g.CreateUriNode(UriFactory.Create(ConfigurationLoader.PropertyQueryEndpoint)), g.CreateUriNode(UriFactory.Create(ConfigurationLoader.PropertyEndpoint))});
                         if (endpointObj == null) return false;
                         temp = ConfigurationLoader.LoadObject(g, endpointObj);
-                        if (temp is SparqlRemoteEndpoint)
+                        if (temp is SparqlRemoteEndpoint sparqlRemoteEndpoint)
                         {
-                            queryEndpoint = (SparqlRemoteEndpoint) temp;
+                            queryEndpoint = sparqlRemoteEndpoint;
                         }
                         else
                         {
@@ -380,9 +380,9 @@ namespace VDS.RDF.Configuration
                         INode endpointObj = ConfigurationLoader.GetConfigurationNode(g, objNode, new INode[] {g.CreateUriNode(UriFactory.Create(ConfigurationLoader.PropertyUpdateEndpoint)), g.CreateUriNode(UriFactory.Create(ConfigurationLoader.PropertyEndpoint))});
                         if (endpointObj == null) return false;
                         temp = ConfigurationLoader.LoadObject(g, endpointObj);
-                        if (temp is SparqlRemoteUpdateEndpoint)
+                        if (temp is SparqlRemoteUpdateEndpoint sparqlRemoteUpdateEndpoint)
                         {
-                            updateEndpoint = (SparqlRemoteUpdateEndpoint) temp;
+                            updateEndpoint = sparqlRemoteUpdateEndpoint;
                         }
                         else
                         {
@@ -532,10 +532,8 @@ namespace VDS.RDF.Configuration
             }
 
             // Check whether this is a standard HTTP manager and if so load standard configuration
-            if (obj is BaseHttpConnector)
+            if (obj is BaseHttpConnector connector)
             {
-                BaseHttpConnector connector = (BaseHttpConnector) obj;
-
                 int timeout = ConfigurationLoader.GetConfigurationInt32(g, objNode, g.CreateUriNode(UriFactory.Create(ConfigurationLoader.PropertyTimeout)), 0);
                 if (timeout > 0)
                 {
@@ -545,9 +543,9 @@ namespace VDS.RDF.Configuration
                 if (proxyNode != null)
                 {
                     temp = ConfigurationLoader.LoadObject(g, proxyNode);
-                    if (temp is IWebProxy)
+                    if (temp is IWebProxy iWebProxy)
                     {
-                        connector.Proxy = (IWebProxy) temp;
+                        connector.Proxy = iWebProxy;
                     }
                     else
                     {
diff --git a/Libraries/dotNetRDF/Core/BlankNode.cs b/Libraries/dotNetRDF/Core/BlankNode.cs
index a35b497f5..2ab5b5ca8 100644
--- a/Libraries/dotNetRDF/Core/BlankNode.cs
+++ b/Libraries/dotNetRDF/Core/BlankNode.cs
@@ -154,9 +154,9 @@ namespace VDS.RDF
 
             if (ReferenceEquals(this, obj)) return true;
 
-            if (obj is INode)
+            if (obj is INode iNode)
             {
-                return Equals((INode)obj);
+                return Equals(iNode);
             }
             else
             {
diff --git a/Libraries/dotNetRDF/Core/GraphLiteralNode.cs b/Libraries/dotNetRDF/Core/GraphLiteralNode.cs
index 43cd90fb9..b653603eb 100644
--- a/Libraries/dotNetRDF/Core/GraphLiteralNode.cs
+++ b/Libraries/dotNetRDF/Core/GraphLiteralNode.cs
@@ -117,9 +117,9 @@ namespace VDS.RDF
 
             if (ReferenceEquals(this, obj)) return true;
 
-            if (obj is INode)
+            if (obj is INode iNode)
             {
-                return Equals((INode)obj);
+                return Equals(iNode);
             }
             else
             {
diff --git a/Libraries/dotNetRDF/Core/GraphMatcher.cs b/Libraries/dotNetRDF/Core/GraphMatcher.cs
index 98cb6a5cd..34542a8b5 100644
--- a/Libraries/dotNetRDF/Core/GraphMatcher.cs
+++ b/Libraries/dotNetRDF/Core/GraphMatcher.cs
@@ -1108,9 +1108,8 @@ namespace VDS.RDF
         public override bool Equals(object obj)
         {
             if (obj == null) return false;
-            if (obj is MappingPair)
+            if (obj is MappingPair p)
             {
-                MappingPair p = (MappingPair)obj;
                 return (_x.Equals(p.X) && _y.Equals(p.Y) && _type == p.Type);
             }
             else
diff --git a/Libraries/dotNetRDF/Core/GraphPersistenceWrapper.cs b/Libraries/dotNetRDF/Core/GraphPersistenceWrapper.cs
index 2f2d2f37e..b6cbe31c9 100644
--- a/Libraries/dotNetRDF/Core/GraphPersistenceWrapper.cs
+++ b/Libraries/dotNetRDF/Core/GraphPersistenceWrapper.cs
@@ -654,10 +654,10 @@ namespace VDS.RDF
         /// </remarks>
         public override bool Equals(object obj)
         {
-            if (obj is IGraph)
+            if (obj is IGraph iGraph)
             {
                 Dictionary<INode, INode> temp;
-                return Equals((IGraph)obj, out temp);
+                return Equals(iGraph, out temp);
             }
             else
             {
diff --git a/Libraries/dotNetRDF/Core/LiteralNode.cs b/Libraries/dotNetRDF/Core/LiteralNode.cs
index cca6be9f9..6d720e8e8 100644
--- a/Libraries/dotNetRDF/Core/LiteralNode.cs
+++ b/Libraries/dotNetRDF/Core/LiteralNode.cs
@@ -252,9 +252,9 @@ namespace VDS.RDF
 
             if (ReferenceEquals(this, obj)) return true;
 
-            if (obj is INode)
+            if (obj is INode iNode)
             {
-                return Equals((INode)obj);
+                return Equals(iNode);
             }
             else
             {
diff --git a/Libraries/dotNetRDF/Core/MIMETypesHelper.cs b/Libraries/dotNetRDF/Core/MIMETypesHelper.cs
index fb6c41a30..1800cc09a 100644
--- a/Libraries/dotNetRDF/Core/MIMETypesHelper.cs
+++ b/Libraries/dotNetRDF/Core/MIMETypesHelper.cs
@@ -1079,13 +1079,13 @@ namespace VDS.RDF
         /// <param name="writer">Writer.</param>
         private static void ApplyWriterOptions(Object writer)
         {
-            if (writer is ICompressingWriter)
+            if (writer is ICompressingWriter iCompressingWriter)
             {
-                ((ICompressingWriter)writer).CompressionLevel = Options.DefaultCompressionLevel;
+                iCompressingWriter.CompressionLevel = Options.DefaultCompressionLevel;
             }
-            if (writer is IDtdWriter)
+            if (writer is IDtdWriter iDtdWriter)
             {
-                ((IDtdWriter)writer).UseDtd = Options.UseDtd;
+                iDtdWriter.UseDtd = Options.UseDtd;
             }
         }
 
@@ -1095,9 +1095,9 @@ namespace VDS.RDF
         /// <param name="parser">Parser.</param>
         public static void ApplyParserOptions(Object parser)
         {
-            if (parser is ITokenisingParser)
+            if (parser is ITokenisingParser iTokenisingParser)
             {
-                ((ITokenisingParser)parser).TokenQueueMode = Options.DefaultTokenQueueMode;
+                iTokenisingParser.TokenQueueMode = Options.DefaultTokenQueueMode;
             }
         }
 
diff --git a/Libraries/dotNetRDF/Core/PersistentTripleStore.cs b/Libraries/dotNetRDF/Core/PersistentTripleStore.cs
index 7e7298422..043d13af3 100644
--- a/Libraries/dotNetRDF/Core/PersistentTripleStore.cs
+++ b/Libraries/dotNetRDF/Core/PersistentTripleStore.cs
@@ -179,14 +179,14 @@ namespace VDS.RDF
         /// <param name="query">SPARQL Query as unparsed String.</param>
         public void ExecuteQuery(IRdfHandler rdfHandler, ISparqlResultsHandler resultsHandler, string query)
         {
-            if (_manager is IQueryableStorage)
+            if (_manager is IQueryableStorage iQueryableStorage)
             {
                 if (!((PersistentGraphCollection)_graphs).IsSynced)
                 {
                     throw new RdfQueryException("Unable to execute a SPARQL Query as the in-memory view of the store is not synced with the underlying store, please invoked Flush() or Discard() and try again.  Alternatively if you do not want to see in-memory changes reflected in query results you can invoke the Query() method directly on the underlying store by accessing it through the UnderlyingStore property.");
                 }
 
-                ((IQueryableStorage)_manager).Query(rdfHandler, resultsHandler, query);
+                iQueryableStorage.Query(rdfHandler, resultsHandler, query);
             }
             else
             {
@@ -207,14 +207,14 @@ namespace VDS.RDF
         /// </remarks>
         public void ExecuteUpdate(string update)
         {
-            if (_manager is IUpdateableStorage)
+            if (_manager is IUpdateableStorage iUpdateableStorage)
             {
                 if (!((PersistentGraphCollection)_graphs).IsSynced)
                 {
                     throw new SparqlUpdateException("Unable to execute a SPARQL Update as the in-memory view of the store is not synced with the underlying store, please invoked Flush() or Discard() and try again.  Alternatively if you do not want to see in-memory changes reflected in update results you can invoke the Update() method directly on the underlying store by accessing it through the UnderlyingStore property.");
                 }
 
-                ((IUpdateableStorage)_manager).Update(update);
+                iUpdateableStorage.Update(update);
             }
             else
             {
diff --git a/Libraries/dotNetRDF/Core/Tools.cs b/Libraries/dotNetRDF/Core/Tools.cs
index 622376355..67551e92b 100644
--- a/Libraries/dotNetRDF/Core/Tools.cs
+++ b/Libraries/dotNetRDF/Core/Tools.cs
@@ -318,8 +318,7 @@ namespace VDS.RDF
             if (ReferenceEquals(original.Graph, target)) return original;
 
             // if a node can copy itself then let it do it
-            var selfcopyable_original = original as Storage.Virtualisation.ICanCopy;
-            if (selfcopyable_original != null) return selfcopyable_original.CopyNode(target);
+            if (original is Storage.Virtualisation.ICanCopy selfcopyable_original) return selfcopyable_original.CopyNode(target);
             
             // if it doesn't, copy it's values:
 
diff --git a/Libraries/dotNetRDF/Core/Triple.cs b/Libraries/dotNetRDF/Core/Triple.cs
index bba501fc3..2516aece7 100644
--- a/Libraries/dotNetRDF/Core/Triple.cs
+++ b/Libraries/dotNetRDF/Core/Triple.cs
@@ -352,10 +352,8 @@ namespace VDS.RDF
         /// </remarks>
         public override bool Equals(object obj)
         {
-            if (obj is Triple)
+            if (obj is Triple temp)
             {
-                Triple temp = (Triple)obj;
-
                 // Subject, Predicate and Object must all be equal
                 // Either the Nodes must be directly equal or they must both be Blank Nodes with identical Node IDs
                 // Use lazy evaluation as far as possible
diff --git a/Libraries/dotNetRDF/Core/URINode.cs b/Libraries/dotNetRDF/Core/URINode.cs
index fe9203e18..d3160e511 100644
--- a/Libraries/dotNetRDF/Core/URINode.cs
+++ b/Libraries/dotNetRDF/Core/URINode.cs
@@ -149,9 +149,9 @@ namespace VDS.RDF
 
             if (ReferenceEquals(this, obj)) return true;
 
-            if (obj is INode)
+            if (obj is INode iNode)
             {
-                return Equals((INode)obj);
+                return Equals(iNode);
             }
             else
             {
diff --git a/Libraries/dotNetRDF/Core/VariableNode.cs b/Libraries/dotNetRDF/Core/VariableNode.cs
index 7ba0c0fa8..42f09e04b 100644
--- a/Libraries/dotNetRDF/Core/VariableNode.cs
+++ b/Libraries/dotNetRDF/Core/VariableNode.cs
@@ -198,9 +198,9 @@ namespace VDS.RDF
 
             if (ReferenceEquals(this, obj)) return true;
 
-            if (obj is INode)
+            if (obj is INode iNode)
             {
-                return Equals((INode)obj);
+                return Equals(iNode);
             }
             else
             {
diff --git a/Libraries/dotNetRDF/Core/WrapperGraph.cs b/Libraries/dotNetRDF/Core/WrapperGraph.cs
index 1e22991c6..4bdd7fd21 100644
--- a/Libraries/dotNetRDF/Core/WrapperGraph.cs
+++ b/Libraries/dotNetRDF/Core/WrapperGraph.cs
@@ -526,10 +526,10 @@ namespace VDS.RDF
         /// </remarks>
         public override bool Equals(object obj)
         {
-            if (obj is IGraph)
+            if (obj is IGraph iGraph)
             {
                 Dictionary<INode, INode> temp;
-                return Equals((IGraph)obj, out temp);
+                return Equals(iGraph, out temp);
             }
             else
             {
diff --git a/Libraries/dotNetRDF/JsonLd/JsonLdProcessor.cs b/Libraries/dotNetRDF/JsonLd/JsonLdProcessor.cs
index f63caea4d..f344127b2 100644
--- a/Libraries/dotNetRDF/JsonLd/JsonLdProcessor.cs
+++ b/Libraries/dotNetRDF/JsonLd/JsonLdProcessor.cs
@@ -296,7 +296,7 @@ namespace VDS.RDF.JsonLd
 
             JToken context = new JObject();
             var haveContext = false;
-            if (remoteFrame != null && remoteFrame.Document is JObject remoteFrameObject &&
+            if (remoteFrame?.Document is JObject remoteFrameObject &&
                 remoteFrameObject.ContainsKey("@context"))
             {
                 context = remoteFrameObject["@context"] as JObject;
diff --git a/Libraries/dotNetRDF/JsonLd/Processors/CompactProcessor.cs b/Libraries/dotNetRDF/JsonLd/Processors/CompactProcessor.cs
index a83f460de..f21710bb2 100644
--- a/Libraries/dotNetRDF/JsonLd/Processors/CompactProcessor.cs
+++ b/Libraries/dotNetRDF/JsonLd/Processors/CompactProcessor.cs
@@ -304,7 +304,7 @@ namespace VDS.RDF.JsonLd.Processors
                     // 12.7.2 - If the term definition for item active property in the active context has a nest value entry(nest term): 
                     var td = activeContext.GetTerm(itemActiveProperty);
                     JObject nestResult = null;
-                    if (td != null && td.Nest != null)
+                    if (td?.Nest != null)
                     {
 
                         // 12.7.2.1 - If nest term is not @nest, or a term in the active context that expands to @nest, an invalid @nest value error has been detected, and processing is aborted.
@@ -339,7 +339,7 @@ namespace VDS.RDF.JsonLd.Processors
                     // 12.8.2 - If the term definition for item active property in the active context has a nest value entry (nest term):
                     var itemActiveTermDefinition = activeContext.GetTerm(itemActiveProperty);
                     JObject nestResult = null;
-                    if (itemActiveTermDefinition != null && itemActiveTermDefinition.Nest != null)
+                    if (itemActiveTermDefinition?.Nest != null)
                     {
                         // 12.8.2.1 - If nest term is not @nest, or a term in the active context that expands to @nest, an invalid @nest value error has been detected, and processing is aborted.
                         var nestTerm = itemActiveTermDefinition.Nest;
@@ -359,7 +359,7 @@ namespace VDS.RDF.JsonLd.Processors
                     }
 
                     // 12.8.4 - Initialize container to container mapping for item active property in active context, or to a new empty array, if there is no such container mapping.
-                    var container = (itemActiveTermDefinition != null && itemActiveTermDefinition.ContainerMapping != null)
+                    var container = (itemActiveTermDefinition?.ContainerMapping != null)
                         ? itemActiveTermDefinition.ContainerMapping
                         : new HashSet<JsonLdContainer>();
                     // 12.8.5 - Initialize as array to true if container includes @set, or if item active property is @graph or @list, otherwise the negation of compactArrays.
@@ -499,7 +499,7 @@ namespace VDS.RDF.JsonLd.Processors
                         var containerKey = CompactIri(activeContext, expandedKey, vocab: true);
 
                         // 12.8.9.3 - Initialize index key to the value of index mapping in the term definition associated with item active property in active context, or @index, if no such value exists.
-                        var indexKey = itemActiveTermDefinition != null && itemActiveTermDefinition.IndexMapping != null
+                        var indexKey = itemActiveTermDefinition?.IndexMapping != null
                             ? itemActiveTermDefinition.IndexMapping
                             : "@index";
 
diff --git a/Libraries/dotNetRDF/JsonLd/Processors/FramingProcessor.cs b/Libraries/dotNetRDF/JsonLd/Processors/FramingProcessor.cs
index 1127f91d8..3b4c16a82 100644
--- a/Libraries/dotNetRDF/JsonLd/Processors/FramingProcessor.cs
+++ b/Libraries/dotNetRDF/JsonLd/Processors/FramingProcessor.cs
@@ -691,8 +691,8 @@ namespace VDS.RDF.JsonLd.Processors
                 // Pattern is a wildcard
                 return valueToken != null;
             }
-            var patternTokenArray = patternToken as JArray;
-            if (patternTokenArray != null)
+
+            if (patternToken is JArray patternTokenArray)
             {
                 if (!patternTokenArray.Any())
                 {
diff --git a/Libraries/dotNetRDF/JsonLd/Processors/NodeMapGenerator.cs b/Libraries/dotNetRDF/JsonLd/Processors/NodeMapGenerator.cs
index 5c8e36042..2d9479d39 100644
--- a/Libraries/dotNetRDF/JsonLd/Processors/NodeMapGenerator.cs
+++ b/Libraries/dotNetRDF/JsonLd/Processors/NodeMapGenerator.cs
@@ -72,7 +72,7 @@ namespace VDS.RDF.JsonLd.Processors
             var elementObject = element as JObject;
             var graph = nodeMap[activeGraph] as JObject;
             JObject node = null, subjectNode = null;
-            if (activeSubject != null && activeSubject is JValue)
+            if (activeSubject is JValue)
             {
                 subjectNode = node = graph[activeSubject.Value<string>()] as JObject;
             }
diff --git a/Libraries/dotNetRDF/Ontology/OntologyClass.cs b/Libraries/dotNetRDF/Ontology/OntologyClass.cs
index 2fd29ee24..0df770e57 100644
--- a/Libraries/dotNetRDF/Ontology/OntologyClass.cs
+++ b/Libraries/dotNetRDF/Ontology/OntologyClass.cs
@@ -693,9 +693,8 @@ namespace VDS.RDF.Ontology
         {
             if (obj == null) return false;
             if (ReferenceEquals(this, obj)) return true;
-            if (obj is OntologyClass)
+            if (obj is OntologyClass other)
             {
-                OntologyClass other = (OntologyClass)obj;
                 return other.Resource.Equals(_resource) && ReferenceEquals(other.Graph, _graph);
             }
             else
diff --git a/Libraries/dotNetRDF/Ontology/OntologyResource.cs b/Libraries/dotNetRDF/Ontology/OntologyResource.cs
index f1384da64..8d5ff0bba 100644
--- a/Libraries/dotNetRDF/Ontology/OntologyResource.cs
+++ b/Libraries/dotNetRDF/Ontology/OntologyResource.cs
@@ -1152,10 +1152,10 @@ namespace VDS.RDF.Ontology
             {
                 return (Graph)results;
             }
-            else if (results is IGraph)
+            else if (results is IGraph iGraph)
             {
                 Graph g = new Graph();
-                g.Merge((IGraph)results);
+                g.Merge(iGraph);
                 return g;
             }
             else
diff --git a/Libraries/dotNetRDF/Parsing/BaseGZipDatasetParser.cs b/Libraries/dotNetRDF/Parsing/BaseGZipDatasetParser.cs
index 0de1c2396..8f0ed2c88 100644
--- a/Libraries/dotNetRDF/Parsing/BaseGZipDatasetParser.cs
+++ b/Libraries/dotNetRDF/Parsing/BaseGZipDatasetParser.cs
@@ -100,9 +100,8 @@ namespace VDS.RDF.Parsing
             if (handler == null) throw new RdfParseException("Cannot parse an RDF Dataset using a null handler");
             if (input == null) throw new RdfParseException("Cannot parse an RDF Dataset from a null input");
 
-            if (input is StreamReader)
+            if (input is StreamReader reader)
             {
-                StreamReader reader = (StreamReader)input;
                 if (reader.BaseStream is GZipStream)
                 {
                     _parser.Load(handler, input);
diff --git a/Libraries/dotNetRDF/Parsing/BaseGZipParser.cs b/Libraries/dotNetRDF/Parsing/BaseGZipParser.cs
index 4c328cb73..708920b96 100644
--- a/Libraries/dotNetRDF/Parsing/BaseGZipParser.cs
+++ b/Libraries/dotNetRDF/Parsing/BaseGZipParser.cs
@@ -117,9 +117,9 @@ namespace VDS.RDF.Parsing
         /// <param name="input">Reader to load from.</param>
         public void Load(IRdfHandler handler, TextReader input)
         {
-            if (input is StreamReader)
+            if (input is StreamReader streamReader)
             {
-                Load(handler, (StreamReader)input);
+                Load(handler, streamReader);
             }
             else
             {
diff --git a/Libraries/dotNetRDF/Parsing/BaseGZipResultsParser.cs b/Libraries/dotNetRDF/Parsing/BaseGZipResultsParser.cs
index ef7a581c3..cf0338c90 100644
--- a/Libraries/dotNetRDF/Parsing/BaseGZipResultsParser.cs
+++ b/Libraries/dotNetRDF/Parsing/BaseGZipResultsParser.cs
@@ -118,9 +118,9 @@ namespace VDS.RDF.Parsing
         /// <param name="input">Input to load from.</param>
         public void Load(ISparqlResultsHandler handler, TextReader input)
         {
-            if (input is StreamReader)
+            if (input is StreamReader streamReader)
             {
-                Load(handler, (StreamReader)input);
+                Load(handler, streamReader);
             }
             else
             {
diff --git a/Libraries/dotNetRDF/Parsing/BlockingTextReader.cs b/Libraries/dotNetRDF/Parsing/BlockingTextReader.cs
index 2883c1274..9e7ef6d39 100644
--- a/Libraries/dotNetRDF/Parsing/BlockingTextReader.cs
+++ b/Libraries/dotNetRDF/Parsing/BlockingTextReader.cs
@@ -54,9 +54,9 @@ namespace VDS.RDF.Parsing
         public static ParsingTextReader Create(TextReader input, int bufferSize)
         {
             if (input is ParsingTextReader) return (ParsingTextReader)input;
-            if (input is StreamReader)
+            if (input is StreamReader streamReader)
             {
-                Stream s = ((StreamReader)input).BaseStream;
+                Stream s = streamReader.BaseStream;
                 if (!Options.ForceBlockingIO && (s is FileStream || s is MemoryStream))
                 {
                     return new NonBlockingTextReader(input, bufferSize);
diff --git a/Libraries/dotNetRDF/Parsing/Events/RdfXml/DomBasedEventGenerator.cs b/Libraries/dotNetRDF/Parsing/Events/RdfXml/DomBasedEventGenerator.cs
index 80822bb59..d5a911728 100644
--- a/Libraries/dotNetRDF/Parsing/Events/RdfXml/DomBasedEventGenerator.cs
+++ b/Libraries/dotNetRDF/Parsing/Events/RdfXml/DomBasedEventGenerator.cs
@@ -209,9 +209,9 @@ namespace VDS.RDF.Parsing.Events.RdfXml
         {
             // Get the Base Uri
             String baseUri = String.Empty;
-            if (parent is ElementEvent)
+            if (parent is ElementEvent elementEvent)
             {
-                baseUri = ((ElementEvent)parent).BaseUri;
+                baseUri = elementEvent.BaseUri;
             }
             // Create an ElementEvent for the Node
             ElementEvent element = new ElementEvent(node.LocalName, node.Prefix, baseUri, node.OuterXml);
@@ -472,9 +472,8 @@ namespace VDS.RDF.Parsing.Events.RdfXml
             }
 
             // Iterate over Children where present
-            if (evt is RootEvent)
+            if (evt is RootEvent root)
             {
-                RootEvent root = (RootEvent)evt;
                 if (context.TraceParsing)
                 {
                     Console.WriteLine("");
@@ -487,9 +486,8 @@ namespace VDS.RDF.Parsing.Events.RdfXml
                 // No End after a RootEvent
                 return;
             }
-            else if (evt is ElementEvent)
+            else if (evt is ElementEvent element)
             {
-                ElementEvent element = (ElementEvent)evt;
                 if (context.TraceParsing)
                 {
                     Console.WriteLine(" " + element.Namespace + ":" + element.LocalName);
@@ -502,9 +500,8 @@ namespace VDS.RDF.Parsing.Events.RdfXml
                     }
                 }
             }
-            else if (evt is TextEvent)
+            else if (evt is TextEvent text)
             {
-                TextEvent text = (TextEvent)evt;
                 if (context.TraceParsing)
                 {
                     Console.WriteLine(" " + text.Value);
@@ -513,9 +510,8 @@ namespace VDS.RDF.Parsing.Events.RdfXml
                 // No additional End after a Text Event
                 return;
             }
-            else if (evt is TypedLiteralEvent)
+            else if (evt is TypedLiteralEvent tlit)
             {
-                TypedLiteralEvent tlit = (TypedLiteralEvent)evt;
                 if (context.TraceParsing)
                 {
                     Console.WriteLine();
@@ -531,9 +527,8 @@ namespace VDS.RDF.Parsing.Events.RdfXml
             if (context.TraceParsing)
             {
                 String endDescrip = String.Empty;
-                if (evt is ElementEvent)
+                if (evt is ElementEvent temp)
                 {
-                    ElementEvent temp = (ElementEvent)evt;
                     endDescrip = " " + temp.QName;
                 }
                 Console.WriteLine(nesting + " " + end.GetType().ToString() + endDescrip);
diff --git a/Libraries/dotNetRDF/Parsing/Events/RdfXml/StreamingEventGenerator.cs b/Libraries/dotNetRDF/Parsing/Events/RdfXml/StreamingEventGenerator.cs
index bc9d9185f..115a55489 100644
--- a/Libraries/dotNetRDF/Parsing/Events/RdfXml/StreamingEventGenerator.cs
+++ b/Libraries/dotNetRDF/Parsing/Events/RdfXml/StreamingEventGenerator.cs
@@ -339,26 +339,26 @@ namespace VDS.RDF.Parsing.Events.RdfXml
                 for (int i = 0; i < _reader.AttributeCount; i++)
                 {
                     IRdfXmlEvent attr = GetNextAttribute();
-                    if (attr is AttributeEvent)
+                    if (attr is AttributeEvent attributeEvent)
                     {
-                        el.Attributes.Add((AttributeEvent)attr);
+                        el.Attributes.Add(attributeEvent);
                     }
-                    else if (attr is NamespaceAttributeEvent)
+                    else if (attr is NamespaceAttributeEvent namespaceAttributeEvent)
                     {
-                        el.NamespaceAttributes.Add((NamespaceAttributeEvent)attr);
+                        el.NamespaceAttributes.Add(namespaceAttributeEvent);
                     }
-                    else if (attr is LanguageAttributeEvent)
+                    else if (attr is LanguageAttributeEvent languageAttributeEvent)
                     {
-                        el.Language = ((LanguageAttributeEvent)attr).Language;
+                        el.Language = languageAttributeEvent.Language;
                     }
-                    else if (attr is ParseTypeAttributeEvent)
+                    else if (attr is ParseTypeAttributeEvent parseTypeAttributeEvent)
                     {
-                        el.ParseType = ((ParseTypeAttributeEvent)attr).ParseType;
+                        el.ParseType = parseTypeAttributeEvent.ParseType;
                         el.Attributes.Add(new AttributeEvent( _reader.LocalName, _reader.Prefix, _reader.Value, _reader.Value, GetPosition()));
                     }
-                    else if (attr is XmlBaseAttributeEvent)
+                    else if (attr is XmlBaseAttributeEvent xmlBaseAttributeEvent)
                     {
-                        el.BaseUri = ((XmlBaseAttributeEvent)attr).BaseUri;
+                        el.BaseUri = xmlBaseAttributeEvent.BaseUri;
                         _currentBaseUri = el.BaseUri;
                     }
                 }
diff --git a/Libraries/dotNetRDF/Parsing/Handlers/HandlerExtensions.cs b/Libraries/dotNetRDF/Parsing/Handlers/HandlerExtensions.cs
index 77938aade..7473aec9e 100644
--- a/Libraries/dotNetRDF/Parsing/Handlers/HandlerExtensions.cs
+++ b/Libraries/dotNetRDF/Parsing/Handlers/HandlerExtensions.cs
@@ -43,13 +43,13 @@ namespace VDS.RDF.Parsing.Handlers
         /// <returns></returns>
         internal static Uri GetBaseUri(this IRdfHandler handler)
         {
-            if (handler is GraphHandler)
+            if (handler is GraphHandler graphHandler)
             {
-                return ((GraphHandler)handler).BaseUri;
+                return graphHandler.BaseUri;
             }
-            else if (handler is IWrappingRdfHandler)
+            else if (handler is IWrappingRdfHandler iWrappingRdfHandler)
             {
-                IRdfHandler temp = ((IWrappingRdfHandler)handler).InnerHandlers.FirstOrDefault(h => h.GetBaseUri() != null);
+                IRdfHandler temp = iWrappingRdfHandler.InnerHandlers.FirstOrDefault(h => h.GetBaseUri() != null);
                 if (temp == null)
                 {
                     return null;
diff --git a/Libraries/dotNetRDF/Parsing/Handlers/WriteThroughHandler.cs b/Libraries/dotNetRDF/Parsing/Handlers/WriteThroughHandler.cs
index 930947e8b..066409162 100644
--- a/Libraries/dotNetRDF/Parsing/Handlers/WriteThroughHandler.cs
+++ b/Libraries/dotNetRDF/Parsing/Handlers/WriteThroughHandler.cs
@@ -150,9 +150,9 @@ namespace VDS.RDF.Parsing.Handlers
                 if (_formatter == null) throw new RdfParseException("Unable to instantiate a ITripleFormatter from the given Formatter Type " + _formatterType.FullName);
             }
 
-            if (_formatter is IGraphFormatter)
+            if (_formatter is IGraphFormatter iGraphFormatter)
             {
-                _writer.WriteLine(((IGraphFormatter)_formatter).FormatGraphHeader(_formattingMapper));
+                _writer.WriteLine(iGraphFormatter.FormatGraphHeader(_formattingMapper));
             }
             _written = 0;
         }
@@ -163,9 +163,9 @@ namespace VDS.RDF.Parsing.Handlers
         /// <param name="ok">Indicates whether parsing completed without error.</param>
         protected override void EndRdfInternal(bool ok)
         {
-            if (_formatter is IGraphFormatter)
+            if (_formatter is IGraphFormatter iGraphFormatter)
             {
-                _writer.WriteLine(((IGraphFormatter)_formatter).FormatGraphFooter());
+                _writer.WriteLine(iGraphFormatter.FormatGraphFooter());
             }
             if (_closeOnEnd)
             {
@@ -182,14 +182,11 @@ namespace VDS.RDF.Parsing.Handlers
         /// <returns></returns>
         protected override bool HandleNamespaceInternal(string prefix, Uri namespaceUri)
         {
-            if (_formattingMapper != null)
-            {
-                _formattingMapper.AddNamespace(prefix, namespaceUri);
-            }
+            _formattingMapper?.AddNamespace(prefix, namespaceUri);
 
-            if (_formatter is INamespaceFormatter)
+            if (_formatter is INamespaceFormatter iNamespaceFormatter)
             {
-                _writer.WriteLine(((INamespaceFormatter)_formatter).FormatNamespace(prefix, namespaceUri));
+                _writer.WriteLine(iNamespaceFormatter.FormatNamespace(prefix, namespaceUri));
             }
 
             return true;
@@ -202,9 +199,9 @@ namespace VDS.RDF.Parsing.Handlers
         /// <returns></returns>
         protected override bool HandleBaseUriInternal(Uri baseUri)
         {
-            if (_formatter is IBaseUriFormatter)
+            if (_formatter is IBaseUriFormatter iBaseUriFormatter)
             {
-                _writer.WriteLine(((IBaseUriFormatter)_formatter).FormatBaseUri(baseUri));
+                _writer.WriteLine(iBaseUriFormatter.FormatBaseUri(baseUri));
             }
 
             return true;
@@ -365,9 +362,9 @@ namespace VDS.RDF.Parsing.Handlers
         /// <param name="ok"></param>
         protected override void EndResultsInternal(bool ok)
         {
-            if (_formatter is IResultSetFormatter)
+            if (_formatter is IResultSetFormatter iResultSetFormatter)
             {
-                _writer.WriteLine(((IResultSetFormatter)_formatter).FormatResultSetFooter());
+                _writer.WriteLine(iResultSetFormatter.FormatResultSetFooter());
             }
             if (_closeOnEnd)
             {
diff --git a/Libraries/dotNetRDF/Parsing/NQuadsParser.cs b/Libraries/dotNetRDF/Parsing/NQuadsParser.cs
index d544b7cc7..e5b9b9676 100644
--- a/Libraries/dotNetRDF/Parsing/NQuadsParser.cs
+++ b/Libraries/dotNetRDF/Parsing/NQuadsParser.cs
@@ -189,13 +189,13 @@ namespace VDS.RDF.Parsing
             if (input == null) throw new RdfParseException("Cannot parse an RDF Dataset from a null input");
 
             // Check for incorrect stream encoding and issue warning if appropriate
-            if (input is StreamReader)
+            if (input is StreamReader streamReader)
             {
                 switch (Syntax)
                 {
                     case NQuadsSyntax.Original:
                         // Issue a Warning if the Encoding of the Stream is not ASCII
-                        if (!((StreamReader) input).CurrentEncoding.Equals(Encoding.ASCII))
+                        if (!streamReader.CurrentEncoding.Equals(Encoding.ASCII))
                         {
                             RaiseWarning("Expected Input Stream to be encoded as ASCII but got a Stream encoded as " + ((StreamReader) input).CurrentEncoding.EncodingName + " - Please be aware that parsing errors may occur as a result");
                         }
diff --git a/Libraries/dotNetRDF/Parsing/RDFXMLParser.cs b/Libraries/dotNetRDF/Parsing/RDFXMLParser.cs
index 005b7ccf3..f9b6a7658 100644
--- a/Libraries/dotNetRDF/Parsing/RDFXMLParser.cs
+++ b/Libraries/dotNetRDF/Parsing/RDFXMLParser.cs
@@ -1580,7 +1580,7 @@ namespace VDS.RDF.Parsing
                 }
 
             }
-            else if (element.Attributes.Count > 0 && element.Attributes.Where(a => RdfXmlSpecsHelper.IsDataTypeAttribute(a, context.Namespaces)).Count() == 1)
+            else if (element.Attributes.Count > 0 && element.Attributes.Count(a => RdfXmlSpecsHelper.IsDataTypeAttribute(a, context.Namespaces))== 1)
             {
                 // Should be processed as a Typed Literal Event instead
                 EventQueue<IRdfXmlEvent> temp = new EventQueue<IRdfXmlEvent>();
diff --git a/Libraries/dotNetRDF/Parsing/RdfAParserBase.cs b/Libraries/dotNetRDF/Parsing/RdfAParserBase.cs
index faa4b6d24..47f7fa5f8 100644
--- a/Libraries/dotNetRDF/Parsing/RdfAParserBase.cs
+++ b/Libraries/dotNetRDF/Parsing/RdfAParserBase.cs
@@ -618,7 +618,7 @@ namespace VDS.RDF.Parsing
                     }
                     catch (RdfException)
                     {
-                        if (baseUri.Equals(string.Empty))
+                        if (string.IsNullOrEmpty(baseUri))
                         {
                             OnWarning("Unable to generate a valid Subject for a Triple since the Base URI should be used but there is no in-scope Base URI");
                             newSubj = null;
@@ -665,7 +665,7 @@ namespace VDS.RDF.Parsing
                     }
                     catch (RdfException)
                     {
-                        if (baseUri.Equals(string.Empty))
+                        if (string.IsNullOrEmpty(baseUri))
                         {
                             OnWarning("Unable to generate a valid Subject for a Triple since the Base URI should be used but there is no in-scope Base URI");
                             newSubj = null;
@@ -918,7 +918,7 @@ namespace VDS.RDF.Parsing
                     }
                     else
                     {
-                        var newBase = (baseUri.Equals(string.Empty)) ? null : UriFactory.Create(baseUri);
+                        var newBase = (string.IsNullOrEmpty(baseUri)) ? null : UriFactory.Create(baseUri);
                         newEvalContext = new RdfAEvaluationContext(newBase, evalContext.NamespaceMap);
                         // Set the Parent Subject for the new Context
                         if (newSubj != null)
diff --git a/Libraries/dotNetRDF/Parsing/SPARQLQueryParser.cs b/Libraries/dotNetRDF/Parsing/SPARQLQueryParser.cs
index 36c98bb44..618c7832a 100644
--- a/Libraries/dotNetRDF/Parsing/SPARQLQueryParser.cs
+++ b/Libraries/dotNetRDF/Parsing/SPARQLQueryParser.cs
@@ -723,7 +723,7 @@ namespace VDS.RDF.Parsing
                 switch (next.TokenType)
                 {
                     case Token.ALL:
-                        if (context.Query.Variables.Count() > 0)
+                        if (context.Query.Variables.Any())
                         {
                             throw ParserHelper.Error("Can't use the * symbol to specify Select All and specify Variables in the SELECT Clause", next);
                         }
@@ -1110,7 +1110,7 @@ namespace VDS.RDF.Parsing
                 switch (next.TokenType)
                 {
                     case Token.ALL:
-                        if (context.Query.DescribeVariables.Count() > 0)
+                        if (context.Query.DescribeVariables.Any())
                         {
                             throw ParserHelper.Error("Can't use the * symbol to specify Describe All and specify Variables/URIs/QNames in the DESCRIBE Clause", next);
                         }
diff --git a/Libraries/dotNetRDF/Parsing/SparqlUpdateParser.cs b/Libraries/dotNetRDF/Parsing/SparqlUpdateParser.cs
index 83d6ef356..a1936251e 100644
--- a/Libraries/dotNetRDF/Parsing/SparqlUpdateParser.cs
+++ b/Libraries/dotNetRDF/Parsing/SparqlUpdateParser.cs
@@ -873,9 +873,9 @@ namespace VDS.RDF.Parsing
                     }
                     delete.GraphUri = u;
                 }
-                else if (deleteCmd is BaseModificationCommand)
+                else if (deleteCmd is BaseModificationCommand baseModificationCommand)
                 {
-                    ((BaseModificationCommand) deleteCmd).GraphUri = u;
+                    baseModificationCommand.GraphUri = u;
                 }
                 else
                 {
diff --git a/Libraries/dotNetRDF/Parsing/TriXParser.cs b/Libraries/dotNetRDF/Parsing/TriXParser.cs
index 8bb2bbeec..00a4b4ae6 100644
--- a/Libraries/dotNetRDF/Parsing/TriXParser.cs
+++ b/Libraries/dotNetRDF/Parsing/TriXParser.cs
@@ -326,7 +326,7 @@ namespace VDS.RDF.Parsing
                         if (reader.Name.Equals("xml:lang")) lang = reader.Value;
                     }
                     reader.MoveToContent();
-                    if (!lang.Equals(string.Empty))
+                    if (!string.IsNullOrEmpty(lang))
                     {
                         return handler.CreateLiteralNode(reader.ReadElementContentAsString(), lang);
                     }
diff --git a/Libraries/dotNetRDF/Query/Algebra/Extend.cs b/Libraries/dotNetRDF/Query/Algebra/Extend.cs
index bc31f121a..99d5d74ad 100644
--- a/Libraries/dotNetRDF/Query/Algebra/Extend.cs
+++ b/Libraries/dotNetRDF/Query/Algebra/Extend.cs
@@ -101,9 +101,9 @@ namespace VDS.RDF.Query.Algebra
         /// <returns></returns>
         public ISparqlAlgebra Transform(IAlgebraOptimiser optimiser)
         {
-            if (optimiser is IExpressionTransformer)
+            if (optimiser is IExpressionTransformer iExpressionTransformer)
             {
-                return new Extend(optimiser.Optimise(_inner), ((IExpressionTransformer)optimiser).Transform(_expr), _var);
+                return new Extend(optimiser.Optimise(_inner), iExpressionTransformer.Transform(_expr), _var);
             }
             else
             {
diff --git a/Libraries/dotNetRDF/Query/Algebra/Filter.cs b/Libraries/dotNetRDF/Query/Algebra/Filter.cs
index 1ea58231f..4993a84d6 100644
--- a/Libraries/dotNetRDF/Query/Algebra/Filter.cs
+++ b/Libraries/dotNetRDF/Query/Algebra/Filter.cs
@@ -188,9 +188,9 @@ namespace VDS.RDF.Query.Algebra
         /// <returns></returns>
         public ISparqlAlgebra Transform(IAlgebraOptimiser optimiser)
         {
-            if (optimiser is IExpressionTransformer)
+            if (optimiser is IExpressionTransformer iExpressionTransformer)
             {
-                return new Filter(optimiser.Optimise(_pattern), new UnaryExpressionFilter(((IExpressionTransformer)optimiser).Transform(_filter.Expression)));
+                return new Filter(optimiser.Optimise(_pattern), new UnaryExpressionFilter(iExpressionTransformer.Transform(_filter.Expression)));
             }
             else
             {
diff --git a/Libraries/dotNetRDF/Query/Algebra/FilteredProduct.cs b/Libraries/dotNetRDF/Query/Algebra/FilteredProduct.cs
index fea22436a..0ea5e6efe 100644
--- a/Libraries/dotNetRDF/Query/Algebra/FilteredProduct.cs
+++ b/Libraries/dotNetRDF/Query/Algebra/FilteredProduct.cs
@@ -85,9 +85,9 @@ namespace VDS.RDF.Query.Algebra
         /// <returns></returns>
         public ISparqlAlgebra Transform(IAlgebraOptimiser optimiser)
         {
-            if (optimiser is IExpressionTransformer)
+            if (optimiser is IExpressionTransformer iExpressionTransformer)
             {
-                return new FilteredProduct(optimiser.Optimise(_lhs), optimiser.Optimise(_rhs), ((IExpressionTransformer)optimiser).Transform(_expr));
+                return new FilteredProduct(optimiser.Optimise(_lhs), optimiser.Optimise(_rhs), iExpressionTransformer.Transform(_expr));
             }
             else
             {
diff --git a/Libraries/dotNetRDF/Query/Algebra/Having.cs b/Libraries/dotNetRDF/Query/Algebra/Having.cs
index 0dda81ffe..e9ea9e9dc 100644
--- a/Libraries/dotNetRDF/Query/Algebra/Having.cs
+++ b/Libraries/dotNetRDF/Query/Algebra/Having.cs
@@ -69,10 +69,7 @@ namespace VDS.RDF.Query.Algebra
                     context.Query.Having.Evaluate(context);
                 }
             }
-            else if (_having != null)
-            {
-                _having.Evaluate(context);
-            }
+            else _having?.Evaluate(context);
 
             context.OutputMultiset = context.InputMultiset;
             return context.OutputMultiset;
diff --git a/Libraries/dotNetRDF/Query/Algebra/LazyBgp.cs b/Libraries/dotNetRDF/Query/Algebra/LazyBgp.cs
index 956f5b854..87c3f2e53 100644
--- a/Libraries/dotNetRDF/Query/Algebra/LazyBgp.cs
+++ b/Libraries/dotNetRDF/Query/Algebra/LazyBgp.cs
@@ -461,9 +461,8 @@ namespace VDS.RDF.Query.Algebra
                     }
                 }
             }
-            else if (temp is BindPattern)
+            else if (temp is BindPattern bind)
             {
-                BindPattern bind = (BindPattern) temp;
                 ISparqlExpression bindExpr = bind.AssignExpression;
                 String bindVar = bind.VariableName;
 
diff --git a/Libraries/dotNetRDF/Query/Algebra/Multiset.cs b/Libraries/dotNetRDF/Query/Algebra/Multiset.cs
index d79d9a2d7..3413f8f92 100644
--- a/Libraries/dotNetRDF/Query/Algebra/Multiset.cs
+++ b/Libraries/dotNetRDF/Query/Algebra/Multiset.cs
@@ -226,10 +226,7 @@ namespace VDS.RDF.Query.Algebra
                 if (_sets.ContainsKey(id))
                 {
                     _sets.Remove(id);
-                    if (_orderedIDs != null)
-                    {
-                        _orderedIDs.Remove(id);
-                    }
+                    _orderedIDs?.Remove(id);
                     _cacheInvalid = true;
                 }
             }
diff --git a/Libraries/dotNetRDF/Query/Algebra/PropertyPathOperators.cs b/Libraries/dotNetRDF/Query/Algebra/PropertyPathOperators.cs
index 8d9250358..b70700625 100644
--- a/Libraries/dotNetRDF/Query/Algebra/PropertyPathOperators.cs
+++ b/Libraries/dotNetRDF/Query/Algebra/PropertyPathOperators.cs
@@ -182,9 +182,9 @@ namespace VDS.RDF.Query.Algebra
         protected void GetPathStarts(SparqlEvaluationContext context, List<List<INode>> paths, bool reverse)
         {
             HashSet<KeyValuePair<INode, INode>> nodes = new HashSet<KeyValuePair<INode, INode>>();
-            if (Path is Property)
+            if (Path is Property @property)
             {
-                INode predicate = ((Property) Path).Predicate;
+                INode predicate = @property.Predicate;
                 foreach (Triple t in context.Data.GetTriplesWithPredicate(predicate))
                 {
                     if (reverse)
@@ -239,10 +239,10 @@ namespace VDS.RDF.Query.Algebra
         /// <returns></returns>
         protected List<INode> EvaluateStep(SparqlEvaluationContext context, List<INode> path, bool reverse)
         {
-            if (Path is Property)
+            if (Path is Property @property)
             {
                 HashSet<INode> nodes = new HashSet<INode>();
-                INode predicate = ((Property) Path).Predicate;
+                INode predicate = @property.Predicate;
                 IEnumerable<Triple> ts = (reverse ? context.Data.GetTriplesWithPredicateObject(predicate, path[path.Count - 1]) : context.Data.GetTriplesWithSubjectPredicate(path[path.Count - 1], predicate));
                 foreach (Triple t in ts)
                 {
diff --git a/Libraries/dotNetRDF/Query/Algebra/RestrictionFilters.cs b/Libraries/dotNetRDF/Query/Algebra/RestrictionFilters.cs
index 3ac2a7f8c..d2c5b67c1 100644
--- a/Libraries/dotNetRDF/Query/Algebra/RestrictionFilters.cs
+++ b/Libraries/dotNetRDF/Query/Algebra/RestrictionFilters.cs
@@ -314,9 +314,9 @@ namespace VDS.RDF.Query.Algebra
         /// <returns></returns>
         public override ISparqlAlgebra Transform(IAlgebraOptimiser optimiser)
         {
-            if (optimiser is IExpressionTransformer)
+            if (optimiser is IExpressionTransformer iExpressionTransformer)
             {
-                return new IdentityFilter(optimiser.Optimise(InnerAlgebra), RestrictionVariable, (ConstantTerm)((IExpressionTransformer)optimiser).Transform(RestrictionValue));
+                return new IdentityFilter(optimiser.Optimise(InnerAlgebra), RestrictionVariable, (ConstantTerm)iExpressionTransformer.Transform(RestrictionValue));
             }
             else
             {
@@ -347,9 +347,9 @@ namespace VDS.RDF.Query.Algebra
         /// <returns></returns>
         public override ISparqlAlgebra Transform(IAlgebraOptimiser optimiser)
         {
-            if (optimiser is IExpressionTransformer)
+            if (optimiser is IExpressionTransformer iExpressionTransformer)
             {
-                return new SameTermFilter(optimiser.Optimise(InnerAlgebra), RestrictionVariable, (ConstantTerm)((IExpressionTransformer)optimiser).Transform(RestrictionValue));
+                return new SameTermFilter(optimiser.Optimise(InnerAlgebra), RestrictionVariable, (ConstantTerm)iExpressionTransformer.Transform(RestrictionValue));
             }
             else
             {
diff --git a/Libraries/dotNetRDF/Query/Builder/DescribeBuilder.cs b/Libraries/dotNetRDF/Query/Builder/DescribeBuilder.cs
index 63641cea0..62528fadc 100644
--- a/Libraries/dotNetRDF/Query/Builder/DescribeBuilder.cs
+++ b/Libraries/dotNetRDF/Query/Builder/DescribeBuilder.cs
@@ -57,7 +57,7 @@ namespace VDS.RDF.Query.Builder
         {
             foreach (var uri in uris)
             {
-                _describeVariables.Add(new UriToken(string.Format("<{0}>", uri), 0, 0, 0));
+                _describeVariables.Add(new UriToken($"<{uri}>", 0, 0, 0));
             }
             return this;
         }
diff --git a/Libraries/dotNetRDF/Query/Builder/Expressions/LiteralExpressionExtensions.cs b/Libraries/dotNetRDF/Query/Builder/Expressions/LiteralExpressionExtensions.cs
index 13cf78e40..aa7c233f8 100644
--- a/Libraries/dotNetRDF/Query/Builder/Expressions/LiteralExpressionExtensions.cs
+++ b/Libraries/dotNetRDF/Query/Builder/Expressions/LiteralExpressionExtensions.cs
@@ -62,7 +62,7 @@ namespace VDS.RDF.Query.Builder.Expressions
                 case bool b:
                     return b.ToLiteral(NodeFactory);
                 default:
-                    throw new ArgumentException(string.Format("Unsupported type for literal node: {0}", value.GetType()));
+                    throw new ArgumentException($"Unsupported type for literal node: {value.GetType()}");
             }
         }
 
diff --git a/Libraries/dotNetRDF/Query/Builder/GraphPatternBuilder.cs b/Libraries/dotNetRDF/Query/Builder/GraphPatternBuilder.cs
index 9664583c8..c8b2b0891 100644
--- a/Libraries/dotNetRDF/Query/Builder/GraphPatternBuilder.cs
+++ b/Libraries/dotNetRDF/Query/Builder/GraphPatternBuilder.cs
@@ -215,7 +215,7 @@ namespace VDS.RDF.Query.Builder
         /// <inheritdoc />
         public IGraphPatternBuilder Graph(Uri graphUri, Action<IGraphPatternBuilder> buildGraphPattern)
         {
-            AddChildGraphPattern(buildGraphPattern, GraphPatternType.Graph, new UriToken(string.Format("<{0}>", graphUri), 0, 0, 0));
+            AddChildGraphPattern(buildGraphPattern, GraphPatternType.Graph, new UriToken($"<{graphUri}>", 0, 0, 0));
             return this;
         }
 
@@ -230,7 +230,7 @@ namespace VDS.RDF.Query.Builder
         public IGraphPatternBuilder Service(Uri serviceUri, Action<IGraphPatternBuilder> buildGraphPattern)
         {
             AddChildGraphPattern(buildGraphPattern, GraphPatternType.Service,
-                new UriToken(string.Format("<{0}>", serviceUri), 0, 0, 0));
+                new UriToken($"<{serviceUri}>", 0, 0, 0));
             return this;
         }
 
diff --git a/Libraries/dotNetRDF/Query/Builder/PatternItemFactory.cs b/Libraries/dotNetRDF/Query/Builder/PatternItemFactory.cs
index 8e25f8ed3..0dbe1bba7 100644
--- a/Libraries/dotNetRDF/Query/Builder/PatternItemFactory.cs
+++ b/Libraries/dotNetRDF/Query/Builder/PatternItemFactory.cs
@@ -82,7 +82,7 @@ namespace VDS.RDF.Query.Builder
                 return CreateVariablePattern(patternString);
             }
 
-            throw new ArgumentException(string.Format("Invalid node type {0}", nodeType));
+            throw new ArgumentException($"Invalid node type {nodeType}");
         }
 
         internal PatternItem CreateLiteralNodeMatchPattern(object literal)
@@ -109,13 +109,13 @@ namespace VDS.RDF.Query.Builder
         private static string GetLiteralString(object literal)
         {
             string literalString = literal.ToString();
-            if (literal is DateTimeOffset)
+            if (literal is DateTimeOffset dateTimeOffset)
             {
-                literalString = GetDatetimeString((DateTimeOffset) literal);
+                literalString = GetDatetimeString(dateTimeOffset);
             }
-            else if (literal is DateTime)
+            else if (literal is DateTime dateTime)
             {
-                literalString = GetDatetimeString((DateTime) literal);
+                literalString = GetDatetimeString(dateTime);
             }
             return literalString;
         }
diff --git a/Libraries/dotNetRDF/Query/Builder/SelectAssignmentVariableNamePart.cs b/Libraries/dotNetRDF/Query/Builder/SelectAssignmentVariableNamePart.cs
index 2ec3a98e5..8c4ea71e2 100644
--- a/Libraries/dotNetRDF/Query/Builder/SelectAssignmentVariableNamePart.cs
+++ b/Libraries/dotNetRDF/Query/Builder/SelectAssignmentVariableNamePart.cs
@@ -47,9 +47,9 @@ namespace VDS.RDF.Query.Builder
             {
                 var assignmentExpression = BuildAssignmentExpression(mapper);
 
-                if (assignmentExpression is ISparqlAggregate)
+                if (assignmentExpression is ISparqlAggregate iSparqlAggregate)
                 {
-                    return new SparqlVariable(variableName, (ISparqlAggregate)assignmentExpression);
+                    return new SparqlVariable(variableName, iSparqlAggregate);
                 }
 
                 return new SparqlVariable(variableName, (ISparqlExpression)assignmentExpression);
diff --git a/Libraries/dotNetRDF/Query/Datasets/InMemoryDataset.cs b/Libraries/dotNetRDF/Query/Datasets/InMemoryDataset.cs
index 4824e4aa0..95a8e9bf0 100644
--- a/Libraries/dotNetRDF/Query/Datasets/InMemoryDataset.cs
+++ b/Libraries/dotNetRDF/Query/Datasets/InMemoryDataset.cs
@@ -310,9 +310,9 @@ namespace VDS.RDF.Query.Datasets
         /// </summary>
         protected override void FlushInternal()
         {
-            if (_store is ITransactionalStore)
+            if (_store is ITransactionalStore iTransactionalStore)
             {
-                ((ITransactionalStore)_store).Flush();
+                iTransactionalStore.Flush();
             }
         }
     }
diff --git a/Libraries/dotNetRDF/Query/Datasets/InMemoryQuadDataset.cs b/Libraries/dotNetRDF/Query/Datasets/InMemoryQuadDataset.cs
index 0fef8eef8..fdf88c382 100644
--- a/Libraries/dotNetRDF/Query/Datasets/InMemoryQuadDataset.cs
+++ b/Libraries/dotNetRDF/Query/Datasets/InMemoryQuadDataset.cs
@@ -391,9 +391,9 @@ namespace VDS.RDF.Query.Datasets
         /// </summary>
         protected override void FlushInternal()
         {
-            if (_store is ITransactionalStore)
+            if (_store is ITransactionalStore iTransactionalStore)
             {
-                ((ITransactionalStore)_store).Flush();
+                iTransactionalStore.Flush();
             }
         }
     }
diff --git a/Libraries/dotNetRDF/Query/Datasets/WrapperDataset.cs b/Libraries/dotNetRDF/Query/Datasets/WrapperDataset.cs
index ea09650e9..17af27777 100644
--- a/Libraries/dotNetRDF/Query/Datasets/WrapperDataset.cs
+++ b/Libraries/dotNetRDF/Query/Datasets/WrapperDataset.cs
@@ -63,9 +63,9 @@ namespace VDS.RDF.Query.Datasets
         {
             get
             {
-                if (_dataset is IThreadSafeDataset)
+                if (_dataset is IThreadSafeDataset iThreadSafeDataset)
                 {
-                    return ((IThreadSafeDataset)_dataset).Lock;
+                    return iThreadSafeDataset.Lock;
                 }
                 else
                 {
@@ -364,7 +364,7 @@ namespace VDS.RDF.Query.Datasets
         /// <param name="context">Serialization Context.</param>
         public virtual void SerializeConfiguration(ConfigurationSerializationContext context)
         {
-            if (_dataset is IConfigurationSerializable)
+            if (_dataset is IConfigurationSerializable iConfigurationSerializable)
             {
                 INode dataset = context.NextSubject;
                 INode rdfType = context.Graph.CreateUriNode(UriFactory.Create(RdfSpecsHelper.RdfType));
@@ -386,7 +386,7 @@ namespace VDS.RDF.Query.Datasets
                 context.Graph.Assert(dataset, usingDataset, innerDataset);
                 context.NextSubject = innerDataset;
 
-                ((IConfigurationSerializable)_dataset).SerializeConfiguration(context);
+                iConfigurationSerializable.SerializeConfiguration(context);
             }
             else
             {
diff --git a/Libraries/dotNetRDF/Query/ExplainQueryProcessor.cs b/Libraries/dotNetRDF/Query/ExplainQueryProcessor.cs
index b1cb47202..bdaae0508 100644
--- a/Libraries/dotNetRDF/Query/ExplainQueryProcessor.cs
+++ b/Libraries/dotNetRDF/Query/ExplainQueryProcessor.cs
@@ -277,17 +277,17 @@ namespace VDS.RDF.Query
         /// <param name="context">SPARQL Evaluation Context.</param>
         private void PrintAnalysis(ISparqlAlgebra algebra, SparqlEvaluationContext context)
         {
-            if (algebra is IBgp)
+            if (algebra is IBgp iBgp)
             {
-                PrintBgpAnalysis((IBgp) algebra);
+                PrintBgpAnalysis(iBgp);
             }
-            else if (algebra is IAbstractJoin)
+            else if (algebra is IAbstractJoin iAbstractJoin)
             {
-                PrintJoinAnalysis((IAbstractJoin) algebra);
+                PrintJoinAnalysis(iAbstractJoin);
             }
-            else if (algebra is Algebra.Graph)
+            else if (algebra is Algebra.Graph graph)
             {
-                PrintGraphAnalysis((Algebra.Graph) algebra, context);
+                PrintGraphAnalysis(graph, context);
             }
         }
 
diff --git a/Libraries/dotNetRDF/Query/Expressions/Functions/Sparql/Boolean/ExistsFunction.cs b/Libraries/dotNetRDF/Query/Expressions/Functions/Sparql/Boolean/ExistsFunction.cs
index 2df5b5a89..30b24656c 100644
--- a/Libraries/dotNetRDF/Query/Expressions/Functions/Sparql/Boolean/ExistsFunction.cs
+++ b/Libraries/dotNetRDF/Query/Expressions/Functions/Sparql/Boolean/ExistsFunction.cs
@@ -310,9 +310,9 @@ namespace VDS.RDF.Query.Expressions.Functions.Sparql.Boolean
         public ISparqlExpression Transform(IExpressionTransformer transformer)
         {
             ISparqlExpression temp = transformer.Transform(new GraphPatternTerm(_pattern));
-            if (temp is GraphPatternTerm)
+            if (temp is GraphPatternTerm graphPatternTerm)
             {
-                return new ExistsFunction(((GraphPatternTerm)temp).Pattern, _mustExist);
+                return new ExistsFunction(graphPatternTerm.Pattern, _mustExist);
             }
             else
             {
diff --git a/Libraries/dotNetRDF/Query/Expressions/Functions/Sparql/Boolean/LangMatchesFunction.cs b/Libraries/dotNetRDF/Query/Expressions/Functions/Sparql/Boolean/LangMatchesFunction.cs
index 4e65d5983..f50ded9ff 100644
--- a/Libraries/dotNetRDF/Query/Expressions/Functions/Sparql/Boolean/LangMatchesFunction.cs
+++ b/Libraries/dotNetRDF/Query/Expressions/Functions/Sparql/Boolean/LangMatchesFunction.cs
@@ -71,7 +71,7 @@ namespace VDS.RDF.Query.Expressions.Functions.Sparql.Boolean
 
                     if (range.Equals("*"))
                     {
-                        return new BooleanNode(null, !lang.Equals(string.Empty));
+                        return new BooleanNode(null, !string.IsNullOrEmpty(lang));
                     }
                     return new BooleanNode(null, lang.Equals(range, StringComparison.OrdinalIgnoreCase) || lang.StartsWith(range + "-", StringComparison.OrdinalIgnoreCase));
                 }
diff --git a/Libraries/dotNetRDF/Query/Expressions/Functions/Sparql/String/StrAfterFunction.cs b/Libraries/dotNetRDF/Query/Expressions/Functions/Sparql/String/StrAfterFunction.cs
index a5ff0d16c..41a18e713 100644
--- a/Libraries/dotNetRDF/Query/Expressions/Functions/Sparql/String/StrAfterFunction.cs
+++ b/Libraries/dotNetRDF/Query/Expressions/Functions/Sparql/String/StrAfterFunction.cs
@@ -76,7 +76,7 @@ namespace VDS.RDF.Query.Expressions.Functions.Sparql.String
                 {
                     return new StringNode(null, resultValue, datatype);
                 }
-                else if (!lang.Equals(string.Empty))
+                else if (!string.IsNullOrEmpty(lang))
                 {
                     return new StringNode(null, resultValue, lang);
                 }
diff --git a/Libraries/dotNetRDF/Query/Expressions/Functions/Sparql/String/StrBeforeFunction.cs b/Libraries/dotNetRDF/Query/Expressions/Functions/Sparql/String/StrBeforeFunction.cs
index b4482c30d..c71e44711 100644
--- a/Libraries/dotNetRDF/Query/Expressions/Functions/Sparql/String/StrBeforeFunction.cs
+++ b/Libraries/dotNetRDF/Query/Expressions/Functions/Sparql/String/StrBeforeFunction.cs
@@ -76,7 +76,7 @@ namespace VDS.RDF.Query.Expressions.Functions.Sparql.String
                 {
                     return new StringNode(null, resultValue, datatype);
                 }
-                else if (!lang.Equals(string.Empty))
+                else if (!string.IsNullOrEmpty(lang))
                 {
                     return new StringNode(null, resultValue, lang);
                 }
diff --git a/Libraries/dotNetRDF/Query/LeviathanQueryProcessor.cs b/Libraries/dotNetRDF/Query/LeviathanQueryProcessor.cs
index c67f929f3..36fe59ab2 100644
--- a/Libraries/dotNetRDF/Query/LeviathanQueryProcessor.cs
+++ b/Libraries/dotNetRDF/Query/LeviathanQueryProcessor.cs
@@ -389,113 +389,113 @@ namespace VDS.RDF.Query
         /// <param name="context">SPARQL Evaluation Context.</param>
         public BaseMultiset ProcessAlgebra(ISparqlAlgebra algebra, SparqlEvaluationContext context)
         {
-            if (algebra is Ask)
+            if (algebra is Ask ask)
             {
-                return ProcessAsk((Ask)algebra, context);
+                return ProcessAsk(ask, context);
             }
-            else if (algebra is IBgp)
+            else if (algebra is IBgp iBgp)
             {
-                return ProcessBgp((IBgp)algebra, context);
+                return ProcessBgp(iBgp, context);
             }
-            else if (algebra is Bindings)
+            else if (algebra is Bindings bindings)
             {
-                return ProcessBindings((Bindings)algebra, context);
+                return ProcessBindings(bindings, context);
             }
-            else if (algebra is Distinct)
+            else if (algebra is Distinct distinct)
             {
-                return ProcessDistinct((Distinct)algebra, context);
+                return ProcessDistinct(distinct, context);
             }
-            else if (algebra is Extend)
+            else if (algebra is Extend extend)
             {
-                return ProcessExtend((Extend)algebra, context);
+                return ProcessExtend(extend, context);
             }
-            else if (algebra is IExistsJoin)
+            else if (algebra is IExistsJoin iExistsJoin)
             {
-                return ProcessExistsJoin((IExistsJoin)algebra, context);
+                return ProcessExistsJoin(iExistsJoin, context);
             }
-            else if (algebra is IFilter)
+            else if (algebra is IFilter iFilter)
             {
-                return ProcessFilter((IFilter)algebra, context);
+                return ProcessFilter(iFilter, context);
             }
-            else if (algebra is Algebra.Graph)
+            else if (algebra is Algebra.Graph graph)
             {
-                return ProcessGraph((Algebra.Graph)algebra, context);
+                return ProcessGraph(graph, context);
             }
-            else if (algebra is GroupBy)
+            else if (algebra is GroupBy groupBy)
             {
-                return ProcessGroupBy((GroupBy)algebra, context);
+                return ProcessGroupBy(groupBy, context);
             }
-            else if (algebra is Having)
+            else if (algebra is Having having)
             {
-                return ProcessHaving((Having)algebra, context);
+                return ProcessHaving(having, context);
             }
-            else if (algebra is IJoin)
+            else if (algebra is IJoin iJoin)
             {
-                return ProcessJoin((IJoin)algebra, context);
+                return ProcessJoin(iJoin, context);
             }
-            else if (algebra is ILeftJoin)
+            else if (algebra is ILeftJoin iLeftJoin)
             {
-                return ProcessLeftJoin((ILeftJoin)algebra, context);
+                return ProcessLeftJoin(iLeftJoin, context);
             }
-            else if (algebra is IMinus)
+            else if (algebra is IMinus iMinus)
             {
-                return ProcessMinus((IMinus)algebra, context);
+                return ProcessMinus(iMinus, context);
             }
-            else if (algebra is NegatedPropertySet)
+            else if (algebra is NegatedPropertySet negatedPropertySet)
             {
-                return ProcessNegatedPropertySet((NegatedPropertySet)algebra, context);
+                return ProcessNegatedPropertySet(negatedPropertySet, context);
             }
-            else if (algebra is NullOperator)
+            else if (algebra is NullOperator nullOperator)
             {
-                return ProcessNullOperator((NullOperator)algebra, context);
+                return ProcessNullOperator(nullOperator, context);
             }
-            else if (algebra is OneOrMorePath)
+            else if (algebra is OneOrMorePath oneOrMorePath)
             {
-                return ProcessOneOrMorePath((OneOrMorePath)algebra, context);
+                return ProcessOneOrMorePath(oneOrMorePath, context);
             }
-            else if (algebra is OrderBy)
+            else if (algebra is OrderBy orderBy)
             {
-                return ProcessOrderBy((OrderBy)algebra, context);
+                return ProcessOrderBy(orderBy, context);
             }
-            else if (algebra is PropertyPath)
+            else if (algebra is PropertyPath propertyPath)
             {
-                return ProcessPropertyPath((PropertyPath)algebra, context);
+                return ProcessPropertyPath(propertyPath, context);
             }
-            else if (algebra is Reduced)
+            else if (algebra is Reduced reduced)
             {
-                return ProcessReduced((Reduced)algebra, context);
+                return ProcessReduced(reduced, context);
             }
-            else if (algebra is Select)
+            else if (algebra is Select @select)
             {
-                return ProcessSelect((Select)algebra, context);
+                return ProcessSelect(@select, context);
             }
-            else if (algebra is SelectDistinctGraphs)
+            else if (algebra is SelectDistinctGraphs selectDistinctGraphs)
             {
-                return ProcessSelectDistinctGraphs((SelectDistinctGraphs)algebra, context);
+                return ProcessSelectDistinctGraphs(selectDistinctGraphs, context);
             }
-            else if (algebra is Service)
+            else if (algebra is Service service)
             {
-                return ProcessService((Service)algebra, context);
+                return ProcessService(service, context);
             }
-            else if (algebra is Slice)
+            else if (algebra is Slice slice)
             {
-                return ProcessSlice((Slice)algebra, context);
+                return ProcessSlice(slice, context);
             }
-            else if (algebra is SubQuery)
+            else if (algebra is SubQuery subQuery)
             {
-                return ProcessSubQuery((SubQuery)algebra, context);
+                return ProcessSubQuery(subQuery, context);
             }
-            else if (algebra is IUnion)
+            else if (algebra is IUnion iUnion)
             {
-                return ProcessUnion((IUnion)algebra, context);
+                return ProcessUnion(iUnion, context);
             }
-            else if (algebra is ZeroLengthPath)
+            else if (algebra is ZeroLengthPath zeroLengthPath)
             {
-                return ProcessZeroLengthPath((ZeroLengthPath)algebra, context);
+                return ProcessZeroLengthPath(zeroLengthPath, context);
             }
-            else if (algebra is ZeroOrMorePath)
+            else if (algebra is ZeroOrMorePath zeroOrMorePath)
             {
-                return ProcessZeroOrMorePath((ZeroOrMorePath)algebra, context);
+                return ProcessZeroOrMorePath(zeroOrMorePath, context);
             }
             else
             {
diff --git a/Libraries/dotNetRDF/Query/Optimisation/FilteredProductOptimiser.cs b/Libraries/dotNetRDF/Query/Optimisation/FilteredProductOptimiser.cs
index f54886c4f..cca10e94c 100644
--- a/Libraries/dotNetRDF/Query/Optimisation/FilteredProductOptimiser.cs
+++ b/Libraries/dotNetRDF/Query/Optimisation/FilteredProductOptimiser.cs
@@ -53,10 +53,8 @@ namespace VDS.RDF.Query.Optimisation
         {
             try
             {
-                if (algebra is Filter)
+                if (algebra is Filter f)
                 {
-                    Filter f = (Filter)algebra;
-
                     // See if the Filtered Product style optimization applies instead
                     int splitPoint = -1;
                     if (f.SparqlFilter.Expression.CanParallelise && IsDisjointOperation(f.InnerAlgebra, f.SparqlFilter.Expression.Variables.ToList(), out splitPoint))
@@ -79,13 +77,13 @@ namespace VDS.RDF.Query.Optimisation
                         return f.Transform(this);
                     }
                 }
-                else if (algebra is IAbstractJoin)
+                else if (algebra is IAbstractJoin iAbstractJoin)
                 {
-                    return ((IAbstractJoin)algebra).Transform(this);
+                    return iAbstractJoin.Transform(this);
                 }
-                else if (algebra is IUnaryOperator)
+                else if (algebra is IUnaryOperator iUnaryOperator)
                 {
-                    return ((IUnaryOperator)algebra).Transform(this);
+                    return iUnaryOperator.Transform(this);
                 }
                 else
                 {
@@ -101,10 +99,10 @@ namespace VDS.RDF.Query.Optimisation
         private bool IsDisjointOperation(ISparqlAlgebra algebra, List<String> filterVars, out int splitPoint)
         {
             splitPoint = -1;
-            if (algebra is IBgp)
+            if (algebra is IBgp iBgp)
             {
                 // Get Triple Patterns, can't split into a product if there are blank variables present
-                List<ITriplePattern> ps = ((IBgp)algebra).TriplePatterns.ToList();
+                List<ITriplePattern> ps = iBgp.TriplePatterns.ToList();
                 if (ps.Any(p => !p.HasNoBlankVariables)) return false;
 
                 // Iterate over the Triple Patterns to see if we can split into a Product
@@ -146,9 +144,8 @@ namespace VDS.RDF.Query.Optimisation
                 // If we get all the way here then not a product
                 return false;
             }
-            else if (algebra is IJoin)
+            else if (algebra is IJoin join)
             {
-                IJoin join = (IJoin)algebra;
                 if (join.Lhs.Variables.IsDisjoint(join.Rhs.Variables))
                 {
                     // There a product between the two sides of the join but are the variables spead over different sides of that join?
diff --git a/Libraries/dotNetRDF/Query/Optimisation/IdentityFilterOptimiser.cs b/Libraries/dotNetRDF/Query/Optimisation/IdentityFilterOptimiser.cs
index bf469e350..2b6eb57a0 100644
--- a/Libraries/dotNetRDF/Query/Optimisation/IdentityFilterOptimiser.cs
+++ b/Libraries/dotNetRDF/Query/Optimisation/IdentityFilterOptimiser.cs
@@ -52,9 +52,8 @@ namespace VDS.RDF.Query.Optimisation
         {
             try
             {
-                if (algebra is Filter)
+                if (algebra is Filter f)
                 {
-                    Filter f = (Filter)algebra;
                     String var;
                     INode term;
                     bool equals = false;
@@ -85,13 +84,13 @@ namespace VDS.RDF.Query.Optimisation
                         return f.Transform(this);
                     }
                 }
-                else if (algebra is IAbstractJoin)
+                else if (algebra is IAbstractJoin iAbstractJoin)
                 {
-                    return ((IAbstractJoin)algebra).Transform(this);
+                    return iAbstractJoin.Transform(this);
                 }
-                else if (algebra is IUnaryOperator)
+                else if (algebra is IUnaryOperator iUnaryOperator)
                 {
-                    return ((IUnaryOperator)algebra).Transform(this);
+                    return iUnaryOperator.Transform(this);
                 }
                 else
                 {
@@ -118,16 +117,14 @@ namespace VDS.RDF.Query.Optimisation
             term = null;
             equals = false;
             ISparqlExpression lhs, rhs;
-            if (expr is EqualsExpression)
+            if (expr is EqualsExpression eq)
             {
                 equals = true;
-                EqualsExpression eq = (EqualsExpression)expr;
                 lhs = eq.Arguments.First();
                 rhs = eq.Arguments.Last();
             } 
-            else if (expr is SameTermFunction)
+            else if (expr is SameTermFunction st)
             {
-                SameTermFunction st = (SameTermFunction)expr;
                 lhs = st.Arguments.First();
                 rhs = st.Arguments.Last();
             }
diff --git a/Libraries/dotNetRDF/Query/Optimisation/ImplicitJoinOptimiser.cs b/Libraries/dotNetRDF/Query/Optimisation/ImplicitJoinOptimiser.cs
index 787656e94..6feaa80c9 100644
--- a/Libraries/dotNetRDF/Query/Optimisation/ImplicitJoinOptimiser.cs
+++ b/Libraries/dotNetRDF/Query/Optimisation/ImplicitJoinOptimiser.cs
@@ -84,9 +84,8 @@ namespace VDS.RDF.Query.Optimisation
         {
             try
             {
-                if (algebra is Filter)
+                if (algebra is Filter f)
                 {
-                    Filter f = (Filter)algebra;
                     String lhsVar, rhsVar;
                     bool equals;
                     if (IsImplicitJoinExpression(f.SparqlFilter.Expression, out lhsVar, out rhsVar, out equals))
@@ -138,13 +137,13 @@ namespace VDS.RDF.Query.Optimisation
                         return f.Transform(this);
                     }
                 }
-                else if (algebra is IAbstractJoin)
+                else if (algebra is IAbstractJoin iAbstractJoin)
                 {
-                    return ((IAbstractJoin)algebra).Transform(this);
+                    return iAbstractJoin.Transform(this);
                 }
-                else if (algebra is IUnaryOperator)
+                else if (algebra is IUnaryOperator iUnaryOperator)
                 {
-                    return ((IUnaryOperator)algebra).Transform(this);
+                    return iUnaryOperator.Transform(this);
                 }
                 else
                 {
@@ -171,16 +170,14 @@ namespace VDS.RDF.Query.Optimisation
             rhsVar = null;
             equals = false;
             ISparqlExpression lhs, rhs;
-            if (expr is EqualsExpression)
+            if (expr is EqualsExpression eq)
             {
-                EqualsExpression eq = (EqualsExpression)expr;
                 lhs = eq.Arguments.First();
                 rhs = eq.Arguments.Last();
                 equals = true;
             } 
-            else if (expr is SameTermFunction)
+            else if (expr is SameTermFunction st)
             {
-                SameTermFunction st = (SameTermFunction)expr;
                 lhs = st.Arguments.First();
                 rhs = st.Arguments.Last();
             }
@@ -204,10 +201,10 @@ namespace VDS.RDF.Query.Optimisation
         private bool IsDisjointOperation(ISparqlAlgebra algebra, String lhsVar, String rhsVar, out int splitPoint)
         {
             splitPoint = -1;
-            if (algebra is IBgp)
+            if (algebra is IBgp iBgp)
             {
                 // Get Triple Patterns, can't split into a product if there are blank variables present
-                List<ITriplePattern> ps = ((IBgp)algebra).TriplePatterns.ToList();
+                List<ITriplePattern> ps = iBgp.TriplePatterns.ToList();
                 if (ps.Any(p => !p.HasNoBlankVariables)) return false;
 
                 // Iterate over the Triple Patterns to see if we can split into a Product
@@ -260,9 +257,8 @@ namespace VDS.RDF.Query.Optimisation
                 // If we get all the way here then not a product
                 return false;
             }
-            else if (algebra is IJoin)
+            else if (algebra is IJoin join)
             {
-                IJoin join = (IJoin)algebra;
                 if (join.Lhs.Variables.IsDisjoint(join.Rhs.Variables))
                 {
                     // There a product between the two sides of the join but are the two variables on different sides of that join
diff --git a/Libraries/dotNetRDF/Query/Optimisation/OrderByDistinctOptimiser.cs b/Libraries/dotNetRDF/Query/Optimisation/OrderByDistinctOptimiser.cs
index 5c5efb508..52a299f10 100644
--- a/Libraries/dotNetRDF/Query/Optimisation/OrderByDistinctOptimiser.cs
+++ b/Libraries/dotNetRDF/Query/Optimisation/OrderByDistinctOptimiser.cs
@@ -53,9 +53,8 @@ namespace VDS.RDF.Query.Optimisation
         /// <returns>Optimized algebra.</returns>
         public ISparqlAlgebra Optimise(ISparqlAlgebra algebra)
         {
-            if (algebra is Distinct)
+            if (algebra is Distinct distinct)
             {
-                Distinct distinct = (Distinct)algebra;
                 if (distinct.InnerAlgebra is Select)
                 {
                     Select select = (Select)distinct.InnerAlgebra;
@@ -90,9 +89,8 @@ namespace VDS.RDF.Query.Optimisation
                 // If we reach here than optimization is not applicable
                 return ((Distinct)algebra).Transform(this);
             }
-            else if (algebra is Reduced)
+            else if (algebra is Reduced reduced)
             {
-                Reduced reduced = (Reduced)algebra;
                 if (reduced.InnerAlgebra is Select)
                 {
                     Select select = (Select)reduced.InnerAlgebra;
@@ -131,13 +129,13 @@ namespace VDS.RDF.Query.Optimisation
             {
                 return algebra;
             }
-            else if (algebra is IUnaryOperator)
+            else if (algebra is IUnaryOperator iUnaryOperator)
             {
-                return ((IUnaryOperator)algebra).Transform(this);
+                return iUnaryOperator.Transform(this);
             }
-            else if (algebra is IAbstractJoin)
+            else if (algebra is IAbstractJoin iAbstractJoin)
             {
-                return ((IAbstractJoin)algebra).Transform(this);
+                return iAbstractJoin.Transform(this);
             }
             else
             {
diff --git a/Libraries/dotNetRDF/Query/Optimisation/ParallelEvaluationOptimiser.cs b/Libraries/dotNetRDF/Query/Optimisation/ParallelEvaluationOptimiser.cs
index 604074b0b..5756a8811 100644
--- a/Libraries/dotNetRDF/Query/Optimisation/ParallelEvaluationOptimiser.cs
+++ b/Libraries/dotNetRDF/Query/Optimisation/ParallelEvaluationOptimiser.cs
@@ -55,9 +55,8 @@ namespace VDS.RDF.Query.Optimisation
         {
             if (algebra is IAbstractJoin)
             {
-                if (algebra is Join)
+                if (algebra is Join join)
                 {
-                    Join join = (Join)algebra;
                     if (join.Lhs.Variables.IsDisjoint(join.Rhs.Variables))
                     {
                         return new ParallelJoin(Optimise(join.Lhs), Optimise(join.Rhs));
@@ -67,9 +66,8 @@ namespace VDS.RDF.Query.Optimisation
                         return join.Transform(this);
                     }
                 }
-                else if (algebra is Union)
+                else if (algebra is Union u)
                 {
-                    Union u = (Union)algebra;
                     return new ParallelUnion(Optimise(u.Lhs), Optimise(u.Rhs));
                 }
                 else
@@ -77,9 +75,9 @@ namespace VDS.RDF.Query.Optimisation
                     return ((IAbstractJoin)algebra).Transform(this);
                 }
             }
-            else if (algebra is IUnaryOperator)
+            else if (algebra is IUnaryOperator iUnaryOperator)
             {
-                return ((IUnaryOperator)algebra).Transform(this);
+                return iUnaryOperator.Transform(this);
             }
             else
             {
diff --git a/Libraries/dotNetRDF/Query/Optimisation/PropertyFunctionOptimiser.cs b/Libraries/dotNetRDF/Query/Optimisation/PropertyFunctionOptimiser.cs
index 4d01af735..9d8e5c78f 100644
--- a/Libraries/dotNetRDF/Query/Optimisation/PropertyFunctionOptimiser.cs
+++ b/Libraries/dotNetRDF/Query/Optimisation/PropertyFunctionOptimiser.cs
@@ -49,9 +49,8 @@ namespace VDS.RDF.Query.Optimisation
         /// <returns></returns>
         public ISparqlAlgebra Optimise(ISparqlAlgebra algebra)
         {
-            if (algebra is IBgp)
+            if (algebra is IBgp current)
             {
-                IBgp current = (IBgp)algebra;
                 if (current.PatternCount == 0) return current;
 
                 List<ITriplePattern> ps = current.TriplePatterns.ToList();
@@ -96,13 +95,13 @@ namespace VDS.RDF.Query.Optimisation
             {
                 return algebra;
             }
-            else if (algebra is IAbstractJoin)
+            else if (algebra is IAbstractJoin iAbstractJoin)
             {
-                return ((IAbstractJoin)algebra).Transform(this);
+                return iAbstractJoin.Transform(this);
             }
-            else if (algebra is IUnaryOperator)
+            else if (algebra is IUnaryOperator iUnaryOperator)
             {
-                return ((IUnaryOperator)algebra).Transform(this);
+                return iUnaryOperator.Transform(this);
             }
             else
             {
diff --git a/Libraries/dotNetRDF/Query/Optimisation/StrictAlgebraOptimiser.cs b/Libraries/dotNetRDF/Query/Optimisation/StrictAlgebraOptimiser.cs
index b9aa79137..ff86f9140 100644
--- a/Libraries/dotNetRDF/Query/Optimisation/StrictAlgebraOptimiser.cs
+++ b/Libraries/dotNetRDF/Query/Optimisation/StrictAlgebraOptimiser.cs
@@ -45,20 +45,18 @@ namespace VDS.RDF.Query.Optimisation
         /// <returns></returns>
         public ISparqlAlgebra Optimise(ISparqlAlgebra algebra)
         {
-            if (algebra is IAbstractJoin)
+            if (algebra is IAbstractJoin iAbstractJoin)
             {
-                return ((IAbstractJoin)algebra).Transform(this);
+                return iAbstractJoin.Transform(this);
             }
-            else if (algebra is IUnaryOperator)
+            else if (algebra is IUnaryOperator iUnaryOperator)
             {
-                return ((IUnaryOperator)algebra).Transform(this);
+                return iUnaryOperator.Transform(this);
             }
-            else if (algebra is IBgp)
+            else if (algebra is IBgp current)
             {
                 // Don't integerfer with other optimisers which have added custom BGP implementations
                 if (!(algebra is Bgp)) return algebra;
-
-                IBgp current = (IBgp)algebra;
                 if (current.PatternCount == 0)
                 {
                     return current;
diff --git a/Libraries/dotNetRDF/Query/Optimisation/VariableSubstitutionTransformer.cs b/Libraries/dotNetRDF/Query/Optimisation/VariableSubstitutionTransformer.cs
index 4375d6e56..e3e4ef40c 100644
--- a/Libraries/dotNetRDF/Query/Optimisation/VariableSubstitutionTransformer.cs
+++ b/Libraries/dotNetRDF/Query/Optimisation/VariableSubstitutionTransformer.cs
@@ -74,9 +74,9 @@ namespace VDS.RDF.Query.Optimisation
             _findVar = findVar;
             _replaceItem = new NodeMatchPattern(replaceTerm);
             _replaceExpr = new ConstantTerm(replaceTerm);
-            if (replaceTerm is IUriNode)
+            if (replaceTerm is IUriNode iUriNode)
             {
-                _replaceToken = new UriToken("<" + ((IUriNode)replaceTerm).Uri.AbsoluteUri + ">", 0, 0, 0);
+                _replaceToken = new UriToken("<" + iUriNode.Uri.AbsoluteUri + ">", 0, 0, 0);
             }
             _canReplaceObjects = true;
         }
@@ -114,9 +114,8 @@ namespace VDS.RDF.Query.Optimisation
             // that makes object replacement safe for that scope only
             bool canReplaceObjects = (_canReplaceCustom ? _canReplaceObjects : _replaceItem is NodeMatchPattern);
 
-            if (algebra is IBgp)
+            if (algebra is IBgp bgp)
             {
-                IBgp bgp = (IBgp)algebra;
                 if (bgp.PatternCount == 0) return bgp;
 
                 // Do variable substitution on the patterns
@@ -190,13 +189,13 @@ namespace VDS.RDF.Query.Optimisation
                     return g;
                 }
             }
-            else if (algebra is IUnaryOperator)
+            else if (algebra is IUnaryOperator iUnaryOperator)
             {
-                return ((IUnaryOperator)algebra).Transform(this);
+                return iUnaryOperator.Transform(this);
             }
-            else if (algebra is IAbstractJoin)
+            else if (algebra is IAbstractJoin iAbstractJoin)
             {
-                return ((IAbstractJoin)algebra).Transform(this);
+                return iAbstractJoin.Transform(this);
             }
             else if (algebra is ITerminalOperator)
             {
@@ -246,9 +245,8 @@ namespace VDS.RDF.Query.Optimisation
                     return expr;
                 }
             }
-            else if (expr is GraphPatternTerm)
+            else if (expr is GraphPatternTerm gp)
             {
-                GraphPatternTerm gp = (GraphPatternTerm)expr;
                 ISparqlAlgebra alg = gp.Pattern.ToAlgebra();
                 alg = Optimise(alg);
                 return new GraphPatternTerm(alg.ToGraphPattern());
diff --git a/Libraries/dotNetRDF/Query/Optimisation/VirtualAlgebraOptimiser.cs b/Libraries/dotNetRDF/Query/Optimisation/VirtualAlgebraOptimiser.cs
index 4ee2a70d6..fb62a88e2 100644
--- a/Libraries/dotNetRDF/Query/Optimisation/VirtualAlgebraOptimiser.cs
+++ b/Libraries/dotNetRDF/Query/Optimisation/VirtualAlgebraOptimiser.cs
@@ -67,17 +67,16 @@ namespace VDS.RDF.Query.Optimisation
         /// <returns></returns>
         public ISparqlAlgebra Optimise(ISparqlAlgebra algebra)
         {
-            if (algebra is IAbstractJoin)
+            if (algebra is IAbstractJoin iAbstractJoin)
             {
-                return ((IAbstractJoin)algebra).Transform(this);
+                return iAbstractJoin.Transform(this);
             }
-            else if (algebra is IUnaryOperator)
+            else if (algebra is IUnaryOperator iUnaryOperator)
             {
-                return ((IUnaryOperator)algebra).Transform(this);
+                return iUnaryOperator.Transform(this);
             }
-            else if (algebra is IBgp)
+            else if (algebra is IBgp current)
             {
-                IBgp current = (IBgp)algebra;
                 if (current.PatternCount == 0)
                 {
                     return current;
diff --git a/Libraries/dotNetRDF/Query/Paths/PartialPath.cs b/Libraries/dotNetRDF/Query/Paths/PartialPath.cs
index dd99ebdd2..14d32127a 100644
--- a/Libraries/dotNetRDF/Query/Paths/PartialPath.cs
+++ b/Libraries/dotNetRDF/Query/Paths/PartialPath.cs
@@ -166,9 +166,8 @@ namespace VDS.RDF.Query.Paths
         /// <returns></returns>
         public override bool Equals(object obj)
         {
-            if (obj is PotentialPath)
+            if (obj is PotentialPath other)
             {
-                PotentialPath other = (PotentialPath)obj;
                 return (_start.Equals(other.Start) && _current.Equals(other.Current));
             }
             else
diff --git a/Libraries/dotNetRDF/Query/Paths/PathTransformContext.cs b/Libraries/dotNetRDF/Query/Paths/PathTransformContext.cs
index e884f827b..f44664c10 100644
--- a/Libraries/dotNetRDF/Query/Paths/PathTransformContext.cs
+++ b/Libraries/dotNetRDF/Query/Paths/PathTransformContext.cs
@@ -193,9 +193,9 @@ namespace VDS.RDF.Query.Paths
         /// <returns></returns>
         public ITriplePattern GetTriplePattern(PatternItem subj, ISparqlPath path, PatternItem obj)
         {
-            if (path is Property)
+            if (path is Property @property)
             {
-                NodeMatchPattern nodeMatch = new NodeMatchPattern(((Property)path).Predicate, true);
+                NodeMatchPattern nodeMatch = new NodeMatchPattern(@property.Predicate, true);
                 return new TriplePattern(subj, nodeMatch, obj);
             }
             else
diff --git a/Libraries/dotNetRDF/Query/Patterns/BindingsPattern.cs b/Libraries/dotNetRDF/Query/Patterns/BindingsPattern.cs
index 1fbd703ba..c9e04a35a 100644
--- a/Libraries/dotNetRDF/Query/Patterns/BindingsPattern.cs
+++ b/Libraries/dotNetRDF/Query/Patterns/BindingsPattern.cs
@@ -193,9 +193,9 @@ namespace VDS.RDF.Query.Patterns
             {
                 if (!_values.ContainsKey(var)) throw new IndexOutOfRangeException();
                 PatternItem temp = _values[var];
-                if (temp is NodeMatchPattern)
+                if (temp is NodeMatchPattern nodeMatchPattern)
                 {
-                    return ((NodeMatchPattern)temp).Node;
+                    return nodeMatchPattern.Node;
                 }
                 else
                 {
diff --git a/Libraries/dotNetRDF/Query/Patterns/GraphPattern.cs b/Libraries/dotNetRDF/Query/Patterns/GraphPattern.cs
index c93dabd70..aef40288d 100644
--- a/Libraries/dotNetRDF/Query/Patterns/GraphPattern.cs
+++ b/Libraries/dotNetRDF/Query/Patterns/GraphPattern.cs
@@ -449,10 +449,10 @@ namespace VDS.RDF.Query.Patterns
                     // Set the Filter
                     _filter = value;
                 }
-                else if (_filter is ChainFilter)
+                else if (_filter is ChainFilter chainFilter)
                 {
                     // Add to the Filter Chain
-                    ((ChainFilter) _filter).Add(value);
+                    chainFilter.Add(value);
                 }
                 else
                 {
diff --git a/Libraries/dotNetRDF/Query/QueryExtensions.cs b/Libraries/dotNetRDF/Query/QueryExtensions.cs
index daf9ef1eb..b84979572 100644
--- a/Libraries/dotNetRDF/Query/QueryExtensions.cs
+++ b/Libraries/dotNetRDF/Query/QueryExtensions.cs
@@ -58,9 +58,9 @@ namespace VDS.RDF.Query
                 case SparqlExpressionType.UnaryOperator:
                     return expr.Arguments.All(arg => arg.UsesDefaultDataset());
                 case SparqlExpressionType.Primary:
-                    if (expr is GraphPatternTerm)
+                    if (expr is GraphPatternTerm graphPatternTerm)
                     {
-                        return ((GraphPatternTerm)expr).Pattern.UsesDefaultDataset;
+                        return graphPatternTerm.Pattern.UsesDefaultDataset;
                     }
                     else
                     {
diff --git a/Libraries/dotNetRDF/Query/SPARQLQuery.cs b/Libraries/dotNetRDF/Query/SPARQLQuery.cs
index 2437fcab4..2c8e3623c 100644
--- a/Libraries/dotNetRDF/Query/SPARQLQuery.cs
+++ b/Libraries/dotNetRDF/Query/SPARQLQuery.cs
@@ -293,18 +293,7 @@ namespace VDS.RDF.Query
                         }
                         else if (_type == SparqlQueryType.SelectDistinct)
                         {
-                            if (_defaultGraphs.Count == 0 &&
-                                _namedGraphs.Count == 0 &&
-                                _rootGraphPattern.TriplePatterns.Count == 0 &&
-                                _rootGraphPattern.ChildGraphPatterns.Count == 1 &&
-                                _rootGraphPattern.ChildGraphPatterns[0].TriplePatterns.Count == 1 &&
-                                _rootGraphPattern.ChildGraphPatterns[0].IsGraph &&
-                                !_rootGraphPattern.ChildGraphPatterns[0].IsFiltered &&
-                                _rootGraphPattern.ChildGraphPatterns[0].GraphSpecifier.TokenType == Token.VARIABLE &&
-                                _rootGraphPattern.ChildGraphPatterns[0].TriplePatterns[0].IsAcceptAll &&
-                                _vars[0].IsResultVariable && 
-                                _rootGraphPattern.ChildGraphPatterns[0].GraphSpecifier.Value.Substring(1).Equals(_vars[0].Name) &&
-                                _vars.Count(v => v.IsResultVariable) == 1)
+                            if (_defaultGraphs.Count == 0 && _namedGraphs.Count == 0 && _rootGraphPattern.TriplePatterns.Count == 0 && _rootGraphPattern.ChildGraphPatterns.Count == 1 && _rootGraphPattern.ChildGraphPatterns[0].TriplePatterns.Count == 1 && _rootGraphPattern.ChildGraphPatterns[0].IsGraph && !_rootGraphPattern.ChildGraphPatterns[0].IsFiltered && _rootGraphPattern.ChildGraphPatterns[0].GraphSpecifier.TokenType == Token.VARIABLE && _rootGraphPattern.ChildGraphPatterns[0].TriplePatterns[0].IsAcceptAll && _vars[0].IsResultVariable && _rootGraphPattern.ChildGraphPatterns[0].GraphSpecifier.Value.Substring(1).Equals(_vars[0].Name) && _vars.Count(v => v.IsResultVariable) == 1)
                             {
                                 _specialType = SparqlSpecialQueryType.DistinctGraphs;
                             }
diff --git a/Libraries/dotNetRDF/Query/SPARQLRemoteEndpoint.cs b/Libraries/dotNetRDF/Query/SPARQLRemoteEndpoint.cs
index 3bf82c9e6..d586b7b48 100644
--- a/Libraries/dotNetRDF/Query/SPARQLRemoteEndpoint.cs
+++ b/Libraries/dotNetRDF/Query/SPARQLRemoteEndpoint.cs
@@ -460,14 +460,14 @@ namespace VDS.RDF.Query
                     // Add the Default Graph URIs
                     foreach (string defaultGraph in _defaultGraphUris)
                     {
-                        if (defaultGraph.Equals(string.Empty)) continue;
+                        if (string.IsNullOrEmpty(defaultGraph)) continue;
                         queryUri.Append("&default-graph-uri=");
                         queryUri.Append(HttpUtility.UrlEncode(defaultGraph));
                     }
                     // Add the Named Graph URIs
                     foreach (string namedGraph in _namedGraphUris)
                     {
-                        if (namedGraph.Equals(string.Empty)) continue;
+                        if (string.IsNullOrEmpty(namedGraph)) continue;
                         queryUri.Append("&named-graph-uri=");
                         queryUri.Append(HttpUtility.UrlEncode(namedGraph));
                     }
@@ -530,7 +530,7 @@ namespace VDS.RDF.Query
 
             // Use HTTP GET/POST according to user set preference
             httpRequest.Accept = accept;
-            if (!postData.Equals(string.Empty))
+            if (!string.IsNullOrEmpty(postData))
             {
                 httpRequest.Method = "POST";
                 httpRequest.ContentType = MimeTypesHelper.Utf8WWWFormURLEncoded;
@@ -544,7 +544,7 @@ namespace VDS.RDF.Query
             {
                 if (HttpMode.Equals("AUTO"))
                 {
-                    httpRequest.Method = postData.Equals(string.Empty) ? "GET" : "POST";
+                    httpRequest.Method = string.IsNullOrEmpty(postData)? "GET" : "POST";
                 }
                 else
                 {
diff --git a/Libraries/dotNetRDF/Query/SparqlParameterizedString.cs b/Libraries/dotNetRDF/Query/SparqlParameterizedString.cs
index d3061424f..4f0b4d124 100644
--- a/Libraries/dotNetRDF/Query/SparqlParameterizedString.cs
+++ b/Libraries/dotNetRDF/Query/SparqlParameterizedString.cs
@@ -490,7 +490,7 @@ namespace VDS.RDF.Query
         public void SetBlankNode(string name, string value)
         {
             if (value == null) throw new ArgumentNullException(nameof(value), "Cannot set a Blank Node to have a null ID");
-            if (value.Equals(string.Empty)) throw new ArgumentException("Cannot set a Blank Node to have an empty ID", nameof(value));
+            if (string.IsNullOrEmpty(value)) throw new ArgumentException("Cannot set a Blank Node to have an empty ID", nameof(value));
             SetParameter(name, _g.CreateBlankNode(value));
         }
 
diff --git a/Libraries/dotNetRDF/Storage/BatchTriple.cs b/Libraries/dotNetRDF/Storage/BatchTriple.cs
index 66300fcc4..c3b513cfd 100644
--- a/Libraries/dotNetRDF/Storage/BatchTriple.cs
+++ b/Libraries/dotNetRDF/Storage/BatchTriple.cs
@@ -77,9 +77,8 @@ namespace VDS.RDF.Storage
         /// <returns></returns>
         public override bool Equals(object obj)
         {
-            if (obj is BatchTriple)
+            if (obj is BatchTriple other)
             {
-                BatchTriple other = (BatchTriple)obj;
                 return _graphID == other.GraphID && _t.Equals(other.Triple);
             }
             else
diff --git a/Libraries/dotNetRDF/Storage/FusekiConnector.cs b/Libraries/dotNetRDF/Storage/FusekiConnector.cs
index c6e110541..c1d2badc3 100644
--- a/Libraries/dotNetRDF/Storage/FusekiConnector.cs
+++ b/Libraries/dotNetRDF/Storage/FusekiConnector.cs
@@ -139,8 +139,7 @@ namespace VDS.RDF.Storage
         {
             try
             {
-                SparqlResultSet results = Query("SELECT DISTINCT ?g WHERE { GRAPH ?g { ?s ?p ?o } }") as SparqlResultSet;
-                if (results != null)
+                if (Query("SELECT DISTINCT ?g WHERE { GRAPH ?g { ?s ?p ?o } }") is SparqlResultSet results)
                 {
                     List<Uri> uris = new List<Uri>();
                     foreach (SparqlResult r in results)
diff --git a/Libraries/dotNetRDF/Storage/Management/SesameServer.cs b/Libraries/dotNetRDF/Storage/Management/SesameServer.cs
index 91c2b4be2..a23543c94 100644
--- a/Libraries/dotNetRDF/Storage/Management/SesameServer.cs
+++ b/Libraries/dotNetRDF/Storage/Management/SesameServer.cs
@@ -189,12 +189,11 @@ namespace VDS.RDF.Storage.Management
         /// </remarks>
         public virtual bool CreateStore(IStoreTemplate template)
         {
-            if (template is BaseSesameTemplate)
+            if (template is BaseSesameTemplate sesameTemplate)
             {
                 try
                 {
                     Dictionary<String, String> createParams = new Dictionary<string, string>();
-                    BaseSesameTemplate sesameTemplate = (BaseSesameTemplate)template;
                     if (template.Validate().Any()) throw new RdfStorageException("Template is not valid, call Validate() on the template to see the list of errors");
                     IGraph g = sesameTemplate.GetTemplateGraph();
 
diff --git a/Libraries/dotNetRDF/Storage/Management/StardogServer.cs b/Libraries/dotNetRDF/Storage/Management/StardogServer.cs
index af654b29e..c5b1ef56e 100644
--- a/Libraries/dotNetRDF/Storage/Management/StardogServer.cs
+++ b/Libraries/dotNetRDF/Storage/Management/StardogServer.cs
@@ -230,14 +230,13 @@ namespace VDS.RDF.Storage.Management
         /// </remarks>
         public virtual bool CreateStore(IStoreTemplate template)
         {
-            if (template is BaseStardogTemplate)
+            if (template is BaseStardogTemplate stardogTemplate)
             {
                 // POST /admin/databases
                 // Creates a new database; expects a multipart request with a JSON specifying database name, options and filenames followed by (optional) file contents as a multipart POST request.
                 try
                 {
                     // Get the Template
-                    BaseStardogTemplate stardogTemplate = (BaseStardogTemplate) template;
                     IEnumerable<String> errors = stardogTemplate.Validate();
                     if (errors.Any()) throw new RdfStorageException("Template is not valid, call Validate() on the template to see the list of errors");
                     JObject jsonTemplate = stardogTemplate.GetTemplateJson();
@@ -434,14 +433,13 @@ namespace VDS.RDF.Storage.Management
         /// </remarks>
         public virtual void CreateStore(IStoreTemplate template, AsyncStorageCallback callback, object state)
         {
-            if (template is BaseStardogTemplate)
+            if (template is BaseStardogTemplate stardogTemplate)
             {
                 // POST /admin/databases
                 // Creates a new database; expects a multipart request with a JSON specifying database name, options and filenames followed by (optional) file contents as a multipart POST request.
                 try
                 {
                     // Get the Template
-                    BaseStardogTemplate stardogTemplate = (BaseStardogTemplate) template;
                     IEnumerable<String> errors = stardogTemplate.Validate();
                     if (errors.Any()) throw new RdfStorageException("Template is not valid, call Validate() on the template to see the list of errors");
                     JObject jsonTemplate = stardogTemplate.GetTemplateJson();
diff --git a/Libraries/dotNetRDF/Storage/ReadOnlyConnector.cs b/Libraries/dotNetRDF/Storage/ReadOnlyConnector.cs
index 3c03ebb87..8af5871a5 100644
--- a/Libraries/dotNetRDF/Storage/ReadOnlyConnector.cs
+++ b/Libraries/dotNetRDF/Storage/ReadOnlyConnector.cs
@@ -278,11 +278,11 @@ namespace VDS.RDF.Storage
             context.Graph.Assert(manager, dnrType, context.Graph.CreateLiteralNode(GetType().ToString()));
             context.Graph.Assert(manager, rdfsLabel, context.Graph.CreateLiteralNode(ToString()));
 
-            if (_manager is IConfigurationSerializable)
+            if (_manager is IConfigurationSerializable iConfigurationSerializable)
             {
                 INode managerObj = context.Graph.CreateBlankNode();
                 context.NextSubject = managerObj;
-                ((IConfigurationSerializable)_manager).SerializeConfiguration(context);
+                iConfigurationSerializable.SerializeConfiguration(context);
                 context.Graph.Assert(manager, storageProvider, managerObj);
             }
             else
diff --git a/Libraries/dotNetRDF/Storage/SparqlConnector.cs b/Libraries/dotNetRDF/Storage/SparqlConnector.cs
index 3a4c07915..e9473fc67 100644
--- a/Libraries/dotNetRDF/Storage/SparqlConnector.cs
+++ b/Libraries/dotNetRDF/Storage/SparqlConnector.cs
@@ -540,7 +540,7 @@ namespace VDS.RDF.Storage
             context.Graph.Assert(new Triple(manager, skipParsing, _skipLocalParsing.ToLiteral(context.Graph)));
 
             // Query Endpoint
-            if (_endpoint is IConfigurationSerializable)
+            if (_endpoint is IConfigurationSerializable iConfigurationSerializable)
             {
                 // Use the indirect serialization method
 
@@ -548,7 +548,7 @@ namespace VDS.RDF.Storage
                 INode endpoint = context.Graph.CreateUriNode(UriFactory.Create(ConfigurationLoader.PropertyQueryEndpoint));
                 INode endpointObj = context.Graph.CreateBlankNode();
                 context.NextSubject = endpointObj;
-                ((IConfigurationSerializable)_endpoint).SerializeConfiguration(context);
+                iConfigurationSerializable.SerializeConfiguration(context);
 
                 // Link that serialization to our serialization
                 context.Graph.Assert(new Triple(manager, endpoint, endpointObj));
@@ -887,7 +887,7 @@ namespace VDS.RDF.Storage
             base.SerializeConfiguration(context);
             context.NextSubject = manager;
 
-            if (_updateEndpoint is IConfigurationSerializable)
+            if (_updateEndpoint is IConfigurationSerializable iConfigurationSerializable)
             {
                 // Use the indirect serialization method
 
@@ -895,7 +895,7 @@ namespace VDS.RDF.Storage
                 INode endpoint = context.Graph.CreateUriNode(UriFactory.Create(ConfigurationLoader.PropertyUpdateEndpoint));
                 INode endpointObj = context.Graph.CreateBlankNode();
                 context.NextSubject = endpointObj;
-                ((IConfigurationSerializable)_updateEndpoint).SerializeConfiguration(context);
+                iConfigurationSerializable.SerializeConfiguration(context);
 
                 // Link that serialization to our serialization
                 context.Graph.Assert(new Triple(manager, endpoint, endpointObj));
diff --git a/Libraries/dotNetRDF/Storage/SparqlHttpProtocolConnector.cs b/Libraries/dotNetRDF/Storage/SparqlHttpProtocolConnector.cs
index 7708d988d..407f0d224 100644
--- a/Libraries/dotNetRDF/Storage/SparqlHttpProtocolConnector.cs
+++ b/Libraries/dotNetRDF/Storage/SparqlHttpProtocolConnector.cs
@@ -71,7 +71,7 @@ namespace VDS.RDF.Storage
             if (serviceUri == null)
                 throw new ArgumentNullException(nameof(serviceUri),
                     "Cannot create a connection to a Graph Store HTTP Protocol store if the Service URI is null");
-            if (serviceUri.Equals(string.Empty))
+            if (string.IsNullOrEmpty(serviceUri))
                 throw new ArgumentException(
                     "Cannot create a connection to a Graph Store HTTP Protocol store if the Service URI is null/empty",
                     nameof(serviceUri));
diff --git a/Libraries/dotNetRDF/Storage/StardogConnector.cs b/Libraries/dotNetRDF/Storage/StardogConnector.cs
index 6a9409876..04f986654 100644
--- a/Libraries/dotNetRDF/Storage/StardogConnector.cs
+++ b/Libraries/dotNetRDF/Storage/StardogConnector.cs
@@ -551,7 +551,7 @@ namespace VDS.RDF.Storage
         /// </remarks>
         public virtual void LoadGraph(IGraph g, string graphUri)
         {
-            if (g.IsEmpty && graphUri != null && !graphUri.Equals(string.Empty))
+            if (g.IsEmpty && graphUri != null && !string.IsNullOrEmpty(graphUri))
             {
                 g.BaseUri = UriFactory.Create(graphUri);
             }
@@ -576,7 +576,7 @@ namespace VDS.RDF.Storage
                 string tID = (_activeTrans == null) ? string.Empty : "/" + _activeTrans;
                 string requestUri = _kb + tID + "/query";
                 SparqlParameterizedString construct = new SparqlParameterizedString();
-                if (!graphUri.Equals(string.Empty))
+                if (!string.IsNullOrEmpty(graphUri))
                 {
                     construct.CommandText = "CONSTRUCT { ?s ?p ?o } WHERE { GRAPH @graph { ?s ?p ?o } }";
                     construct.SetUri("graph", UriFactory.Create(graphUri));
@@ -803,7 +803,7 @@ namespace VDS.RDF.Storage
         /// <param name="removals">Triples to be removed.</param>
         public virtual void UpdateGraph(string graphUri, IEnumerable<Triple> additions, IEnumerable<Triple> removals)
         {
-            if (graphUri == null || graphUri.Equals(string.Empty))
+            if (string.IsNullOrEmpty(graphUri))
             {
                 UpdateGraph((Uri)null, additions, removals);
             }
@@ -840,7 +840,7 @@ namespace VDS.RDF.Storage
                     "POST",
                     new Dictionary<string, string>
                     {
-                        {"graph-uri", graphUri.Equals(string.Empty) ? "DEFAULT" : graphUri},
+                        {"graph-uri", string.IsNullOrEmpty(graphUri)? "DEFAULT" : graphUri},
                     }
                 );
 
@@ -1145,7 +1145,7 @@ namespace VDS.RDF.Storage
                 string tID = (_activeTrans == null) ? string.Empty : "/" + _activeTrans;
                 string requestUri = _kb + tID + "/query";
                 SparqlParameterizedString construct = new SparqlParameterizedString();
-                if (!graphUri.Equals(string.Empty))
+                if (!string.IsNullOrEmpty(graphUri))
                 {
                     construct.CommandText = "CONSTRUCT { ?s ?p ?o } WHERE { GRAPH @graph { ?s ?p ?o } }";
                     construct.SetUri("graph", UriFactory.Create(graphUri));
@@ -1687,7 +1687,7 @@ namespace VDS.RDF.Storage
                     "POST",
                     new Dictionary<string, string>()
                     {
-                        {"graph-uri", graphUri.Equals(string.Empty) ? "DEFAULT" : graphUri},
+                        {"graph-uri", string.IsNullOrEmpty(graphUri)? "DEFAULT" : graphUri},
                     }
                 );
 
diff --git a/Libraries/dotNetRDF/Storage/StorageHelper.cs b/Libraries/dotNetRDF/Storage/StorageHelper.cs
index d3da0543e..88c002e1a 100644
--- a/Libraries/dotNetRDF/Storage/StorageHelper.cs
+++ b/Libraries/dotNetRDF/Storage/StorageHelper.cs
@@ -120,8 +120,7 @@ namespace VDS.RDF.Storage
         {
             if (webEx.Response != null)
             {
-                HttpWebResponse httpResponse = webEx.Response as HttpWebResponse;
-                if (httpResponse != null)
+                if (webEx.Response is HttpWebResponse httpResponse)
                 {
                     return "(HTTP " + (int)httpResponse.StatusCode + " " + httpResponse.StatusDescription + ")";
                 }
@@ -137,9 +136,9 @@ namespace VDS.RDF.Storage
         /// <returns></returns>
         public static RdfQueryException HandleQueryError(Exception ex)
         {
-            if (ex is WebException)
+            if (ex is WebException webException)
             {
-                return HandleHttpQueryError((WebException)ex);
+                return HandleHttpQueryError(webException);
             }
             else
             {
@@ -155,9 +154,9 @@ namespace VDS.RDF.Storage
         /// <returns></returns>
         public static RdfStorageException HandleError(Exception ex, String action)
         {
-            if (ex is WebException)
+            if (ex is WebException webException)
             {
-                return HandleHttpError((WebException)ex, action);
+                return HandleHttpError(webException, action);
             }
             else
             {
diff --git a/Libraries/dotNetRDF/Storage/Virtualisation/VirtualNode.cs b/Libraries/dotNetRDF/Storage/Virtualisation/VirtualNode.cs
index 84e02f58d..58ab4a2d9 100644
--- a/Libraries/dotNetRDF/Storage/Virtualisation/VirtualNode.cs
+++ b/Libraries/dotNetRDF/Storage/Virtualisation/VirtualNode.cs
@@ -447,9 +447,9 @@ namespace VDS.RDF.Storage.Virtualisation
             if (ReferenceEquals(this, obj)) return true;
             if (obj == null) return false;
 
-            if (obj is INode)
+            if (obj is INode iNode)
             {
-                return this.Equals((INode)obj);
+                return this.Equals(iNode);
             }
             else
             {
@@ -550,9 +550,8 @@ namespace VDS.RDF.Storage.Virtualisation
         protected bool TryVirtualEquality(INode other, out bool areEqual)
         {
             areEqual = false;
-            if (other is IVirtualNode<TNodeID, TGraphID>)
+            if (other is IVirtualNode<TNodeID, TGraphID> virt)
             {
-                IVirtualNode<TNodeID, TGraphID> virt = (IVirtualNode<TNodeID, TGraphID>)other;
                 if (ReferenceEquals(this._provider, virt.Provider))
                 {
                     areEqual = this._id.Equals(virt.VirtualID);
diff --git a/Libraries/dotNetRDF/Update/GenericUpdateProcessor.cs b/Libraries/dotNetRDF/Update/GenericUpdateProcessor.cs
index a9f3e481a..c83503578 100644
--- a/Libraries/dotNetRDF/Update/GenericUpdateProcessor.cs
+++ b/Libraries/dotNetRDF/Update/GenericUpdateProcessor.cs
@@ -86,9 +86,9 @@ namespace VDS.RDF.Update
         /// <param name="cmd">Add Command.</param>
         public void ProcessAddCommand(AddCommand cmd)
         {
-            if (_manager is IUpdateableStorage)
+            if (_manager is IUpdateableStorage iUpdateableStorage)
             {
-                ((IUpdateableStorage)_manager).Update(cmd.ToString());
+                iUpdateableStorage.Update(cmd.ToString());
             }
             else
             {
@@ -135,9 +135,9 @@ namespace VDS.RDF.Update
         /// </remarks>
         public void ProcessClearCommand(ClearCommand cmd)
         {
-            if (_manager is IUpdateableStorage)
+            if (_manager is IUpdateableStorage iUpdateableStorage)
             {
-                ((IUpdateableStorage)_manager).Update(cmd.ToString());
+                iUpdateableStorage.Update(cmd.ToString());
             }
             else 
             {
@@ -222,9 +222,9 @@ namespace VDS.RDF.Update
         /// <param name="cmd">Copy Command.</param>
         public void ProcessCopyCommand(CopyCommand cmd)
         {
-            if (_manager is IUpdateableStorage)
+            if (_manager is IUpdateableStorage iUpdateableStorage)
             {
-                ((IUpdateableStorage)_manager).Update(cmd.ToString());
+                iUpdateableStorage.Update(cmd.ToString());
             }
             else
             {
@@ -289,9 +289,9 @@ namespace VDS.RDF.Update
         /// </remarks>
         public void ProcessCreateCommand(CreateCommand cmd)
         {
-            if (_manager is IUpdateableStorage)
+            if (_manager is IUpdateableStorage iUpdateableStorage)
             {
-                ((IUpdateableStorage)_manager).Update(cmd.ToString());
+                iUpdateableStorage.Update(cmd.ToString());
             }
             else
             {
@@ -322,9 +322,9 @@ namespace VDS.RDF.Update
         /// </remarks>
         public virtual void ProcessCommand(SparqlUpdateCommand cmd)
         {
-            if (_manager is IUpdateableStorage)
+            if (_manager is IUpdateableStorage iUpdateableStorage)
             {
-                ((IUpdateableStorage)_manager).Update(cmd.ToString());
+                iUpdateableStorage.Update(cmd.ToString());
             }
             else
             {
@@ -387,9 +387,9 @@ namespace VDS.RDF.Update
             commands.UpdateExecutionTime = null;
             try
             {
-                if (_manager is IUpdateableStorage)
+                if (_manager is IUpdateableStorage iUpdateableStorage)
                 {
-                    ((IUpdateableStorage)_manager).Update(commands.ToString());
+                    iUpdateableStorage.Update(commands.ToString());
                 }
                 else
                 {
@@ -417,13 +417,13 @@ namespace VDS.RDF.Update
         /// </remarks>
         public void ProcessDeleteCommand(DeleteCommand cmd)
         {
-            if (_manager is IUpdateableStorage)
+            if (_manager is IUpdateableStorage iUpdateableStorage)
             {
-                ((IUpdateableStorage)_manager).Update(cmd.ToString());
+                iUpdateableStorage.Update(cmd.ToString());
             }
             else
             {
-                if (_manager is IQueryableStorage)
+                if (_manager is IQueryableStorage iQueryableStorage)
                 {
                     // Check IO Behaviour
                     // For a delete we either need the ability to Update Delete Triples or to Overwrite Graphs
@@ -458,11 +458,11 @@ namespace VDS.RDF.Update
                         query.AddNamedGraph(u);
                     }
 
-                    Object results = ((IQueryableStorage)_manager).Query(query.ToString());
-                    if (results is SparqlResultSet)
+                    Object results = iQueryableStorage.Query(query.ToString());
+                    if (results is SparqlResultSet sparqlResultSet)
                     {
                         // Now need to transform the Result Set back to a Multiset
-                        Multiset mset = new Multiset((SparqlResultSet)results);
+                        Multiset mset = new Multiset(sparqlResultSet);
 
                         // Generate the Triples for each Solution
                         List<Triple> deletedTriples = new List<Triple>();
@@ -602,9 +602,9 @@ namespace VDS.RDF.Update
         /// <param name="cmd">DELETE Data Command.</param>
         public void ProcessDeleteDataCommand(DeleteDataCommand cmd)
         {
-            if (_manager is IUpdateableStorage)
+            if (_manager is IUpdateableStorage iUpdateableStorage)
             {
-                ((IUpdateableStorage)_manager).Update(cmd.ToString());
+                iUpdateableStorage.Update(cmd.ToString());
             }
             else
             {
@@ -719,9 +719,9 @@ namespace VDS.RDF.Update
         /// <param name="cmd">Drop Command.</param>
         public void ProcessDropCommand(DropCommand cmd)
         {
-            if (_manager is IUpdateableStorage)
+            if (_manager is IUpdateableStorage iUpdateableStorage)
             {
-                ((IUpdateableStorage)_manager).Update(cmd.ToString());
+                iUpdateableStorage.Update(cmd.ToString());
             }
             else
             {
@@ -812,13 +812,13 @@ namespace VDS.RDF.Update
         /// </remarks>
         public void ProcessInsertCommand(InsertCommand cmd)
         {
-            if (_manager is IUpdateableStorage)
+            if (_manager is IUpdateableStorage iUpdateableStorage)
             {
-                ((IUpdateableStorage)_manager).Update(cmd.ToString());
+                iUpdateableStorage.Update(cmd.ToString());
             }
             else
             {
-                if (_manager is IQueryableStorage)
+                if (_manager is IQueryableStorage iQueryableStorage)
                 {
                     // Check IO Behaviour
                     // For a insert we either need the ability to Update Add Triples or to Overwrite Graphs
@@ -853,11 +853,11 @@ namespace VDS.RDF.Update
                         query.AddNamedGraph(u);
                     }
 
-                    Object results = ((IQueryableStorage)_manager).Query(query.ToString());
-                    if (results is SparqlResultSet)
+                    Object results = iQueryableStorage.Query(query.ToString());
+                    if (results is SparqlResultSet sparqlResultSet)
                     {
                         // Now need to transform the Result Set back to a Multiset
-                        Multiset mset = new Multiset((SparqlResultSet)results);
+                        Multiset mset = new Multiset(sparqlResultSet);
 
                         // Generate the Triples for each Solution
                         List<Triple> insertedTriples = new List<Triple>();
@@ -997,9 +997,9 @@ namespace VDS.RDF.Update
         /// <param name="cmd">Insert Data Command.</param>
         public void ProcessInsertDataCommand(InsertDataCommand cmd)
         {
-            if (_manager is IUpdateableStorage)
+            if (_manager is IUpdateableStorage iUpdateableStorage)
             {
-                ((IUpdateableStorage)_manager).Update(cmd.ToString());
+                iUpdateableStorage.Update(cmd.ToString());
             }
             else
             {
@@ -1095,9 +1095,9 @@ namespace VDS.RDF.Update
         /// <param name="cmd">Load Command.</param>
         public void ProcessLoadCommand(LoadCommand cmd)
         {
-            if (_manager is IUpdateableStorage)
+            if (_manager is IUpdateableStorage iUpdateableStorage)
             {
-                ((IUpdateableStorage)_manager).Update(cmd.ToString());
+                iUpdateableStorage.Update(cmd.ToString());
             }
             else
             {
@@ -1146,13 +1146,13 @@ namespace VDS.RDF.Update
         /// <param name="cmd">Insert/Delete Command.</param>
         public void ProcessModifyCommand(ModifyCommand cmd)
         {
-            if (_manager is IUpdateableStorage)
+            if (_manager is IUpdateableStorage iUpdateableStorage)
             {
-                ((IUpdateableStorage)_manager).Update(cmd.ToString());
+                iUpdateableStorage.Update(cmd.ToString());
             }
             else
             {
-                if (_manager is IQueryableStorage)
+                if (_manager is IQueryableStorage iQueryableStorage)
                 {
                     // Check IO Behaviour
                     // For a delete we either need the ability to Update Delete Triples or to Overwrite Graphs
@@ -1205,11 +1205,11 @@ namespace VDS.RDF.Update
                         query.AddNamedGraph(u);
                     }
 
-                    Object results = ((IQueryableStorage)_manager).Query(query.ToString());
-                    if (results is SparqlResultSet)
+                    Object results = iQueryableStorage.Query(query.ToString());
+                    if (results is SparqlResultSet sparqlResultSet)
                     {
                         // Now need to transform the Result Set back to a Multiset
-                        Multiset mset = new Multiset((SparqlResultSet)results);
+                        Multiset mset = new Multiset(sparqlResultSet);
 
                         // Generate the Triples for each Solution
                         List<Triple> deletedTriples = new List<Triple>();
@@ -1452,9 +1452,9 @@ namespace VDS.RDF.Update
         /// <param name="cmd">Move Command.</param>
         public void ProcessMoveCommand(MoveCommand cmd)
         {
-            if (_manager is IUpdateableStorage)
+            if (_manager is IUpdateableStorage iUpdateableStorage)
             {
-                ((IUpdateableStorage)_manager).Update(cmd.ToString());
+                iUpdateableStorage.Update(cmd.ToString());
             }
             else
             {
diff --git a/Libraries/dotNetRDF/Update/Protocol/BaseProtocolProcessor.cs b/Libraries/dotNetRDF/Update/Protocol/BaseProtocolProcessor.cs
index 86d4327a1..2f3107ba7 100644
--- a/Libraries/dotNetRDF/Update/Protocol/BaseProtocolProcessor.cs
+++ b/Libraries/dotNetRDF/Update/Protocol/BaseProtocolProcessor.cs
@@ -243,9 +243,9 @@ namespace VDS.RDF.Update.Protocol
             }
 
             // Set up the Writer
-            if (writer is ICompressingWriter)
+            if (writer is ICompressingWriter iCompressingWriter)
             {
-                ((ICompressingWriter)writer).CompressionLevel = Options.DefaultCompressionLevel;
+                iCompressingWriter.CompressionLevel = Options.DefaultCompressionLevel;
             }
 
             // Send Content to Client
diff --git a/Libraries/dotNetRDF/Update/Protocol/GenericProtocolProcessor.cs b/Libraries/dotNetRDF/Update/Protocol/GenericProtocolProcessor.cs
index 2c7ea567c..c23457af2 100644
--- a/Libraries/dotNetRDF/Update/Protocol/GenericProtocolProcessor.cs
+++ b/Libraries/dotNetRDF/Update/Protocol/GenericProtocolProcessor.cs
@@ -339,7 +339,7 @@ namespace VDS.RDF.Update.Protocol
         /// <returns></returns>
         protected override bool HasGraph(Uri graphUri)
         {
-            if (_manager is IQueryableStorage)
+            if (_manager is IQueryableStorage iQueryableStorage)
             {
                 // Generate an ASK query based on this
                 SparqlParameterizedString ask = new SparqlParameterizedString();
@@ -353,10 +353,10 @@ namespace VDS.RDF.Update.Protocol
                     ask.CommandText = "ASK WHERE { ?s ?p ?o }";
                 }
 
-                Object results = ((IQueryableStorage)_manager).Query(ask.ToString());
-                if (results is SparqlResultSet)
+                Object results = iQueryableStorage.Query(ask.ToString());
+                if (results is SparqlResultSet sparqlResultSet)
                 {
-                    return ((SparqlResultSet)results).Result;
+                    return sparqlResultSet.Result;
                 }
                 else
                 {
diff --git a/Libraries/dotNetRDF/Update/Protocol/ProtocolToUpdateProcessor.cs b/Libraries/dotNetRDF/Update/Protocol/ProtocolToUpdateProcessor.cs
index 2397025ac..1bbc1288e 100644
--- a/Libraries/dotNetRDF/Update/Protocol/ProtocolToUpdateProcessor.cs
+++ b/Libraries/dotNetRDF/Update/Protocol/ProtocolToUpdateProcessor.cs
@@ -217,9 +217,9 @@ namespace VDS.RDF.Update.Protocol
                 graphExistsQuery.SetUri("graph", graphUri);
 
                 Object temp = _queryProcessor.ProcessQuery(parser.ParseFromString(graphExistsQuery));
-                if (temp is SparqlResultSet)
+                if (temp is SparqlResultSet sparqlResultSet)
                 {
-                    created = !((SparqlResultSet)temp).Result;
+                    created = !sparqlResultSet.Result;
                 }
             }
             catch
@@ -454,9 +454,9 @@ namespace VDS.RDF.Update.Protocol
             SparqlQuery q = parser.ParseFromString(ask);
 
             Object results = _queryProcessor.ProcessQuery(q);
-            if (results is SparqlResultSet)
+            if (results is SparqlResultSet sparqlResultSet)
             {
-                return ((SparqlResultSet)results).Result;
+                return sparqlResultSet.Result;
             }
             else
             {
diff --git a/Libraries/dotNetRDF/Update/SimpleUpdateProcessor.cs b/Libraries/dotNetRDF/Update/SimpleUpdateProcessor.cs
index eed91a06c..f8fa96652 100644
--- a/Libraries/dotNetRDF/Update/SimpleUpdateProcessor.cs
+++ b/Libraries/dotNetRDF/Update/SimpleUpdateProcessor.cs
@@ -58,9 +58,9 @@ namespace VDS.RDF.Update
         /// </summary>
         public virtual void Flush()
         {
-            if (_store is ITransactionalStore)
+            if (_store is ITransactionalStore iTransactionalStore)
             {
-                ((ITransactionalStore)_store).Flush();
+                iTransactionalStore.Flush();
             }
         }
 
diff --git a/Libraries/dotNetRDF/Web/HttpContextExtensions.cs b/Libraries/dotNetRDF/Web/HttpContextExtensions.cs
index a26035c6b..7da32425a 100644
--- a/Libraries/dotNetRDF/Web/HttpContextExtensions.cs
+++ b/Libraries/dotNetRDF/Web/HttpContextExtensions.cs
@@ -41,7 +41,7 @@ namespace VDS.RDF.Web
         public static string[] GetAcceptTypes(this IHttpContext context)
         {
             var accept = context.Request.Headers["Accept"];
-            if (accept != null && !accept.Equals(string.Empty))
+            if (!string.IsNullOrEmpty(accept))
             {
                 // If Accept Header is not null or empty then check to see if it matches up with the AcceptTypes
                 // array
diff --git a/Libraries/dotNetRDF/Writing/BaseGZipDatasetWriter.cs b/Libraries/dotNetRDF/Writing/BaseGZipDatasetWriter.cs
index b835e1fbf..41ce28ab8 100644
--- a/Libraries/dotNetRDF/Writing/BaseGZipDatasetWriter.cs
+++ b/Libraries/dotNetRDF/Writing/BaseGZipDatasetWriter.cs
@@ -73,9 +73,8 @@ namespace VDS.RDF.Writing
             if (store == null) throw new RdfOutputException("Cannot output a null Triple Store");
             if (output == null) throw new RdfOutputException("Cannot output to a null writer");
 
-            if (output is StreamWriter)
+            if (output is StreamWriter writer)
             {
-                StreamWriter writer = (StreamWriter)output;
                 if (writer.BaseStream is GZipStream)
                 {
                     _writer.Save(store, writer);
diff --git a/Libraries/dotNetRDF/Writing/BaseGZipResultsWriter.cs b/Libraries/dotNetRDF/Writing/BaseGZipResultsWriter.cs
index b850cdad2..299c482d1 100644
--- a/Libraries/dotNetRDF/Writing/BaseGZipResultsWriter.cs
+++ b/Libraries/dotNetRDF/Writing/BaseGZipResultsWriter.cs
@@ -75,10 +75,9 @@ namespace VDS.RDF.Writing
         {
             if (results == null) throw new RdfOutputException("Cannot write RDF from a null Graph");
 
-            if (output is StreamWriter)
+            if (output is StreamWriter streamOutput)
             {
                 // Check for inner GZipStream and re-wrap if required
-                StreamWriter streamOutput = (StreamWriter)output;
                 if (streamOutput.BaseStream is GZipStream)
                 {
                     _writer.Save(results, streamOutput);
diff --git a/Libraries/dotNetRDF/Writing/Formatting/SparqlFormatter.cs b/Libraries/dotNetRDF/Writing/Formatting/SparqlFormatter.cs
index 5156d36ca..557c42efa 100644
--- a/Libraries/dotNetRDF/Writing/Formatting/SparqlFormatter.cs
+++ b/Libraries/dotNetRDF/Writing/Formatting/SparqlFormatter.cs
@@ -388,7 +388,7 @@ namespace VDS.RDF.Writing.Formatting
                 output.Append("MINUS ");
             }
 
-            if (gp.TriplePatterns.Count > 1 || gp.HasChildGraphPatterns || (gp.TriplePatterns.Count <= 1 && gp.Filter != null) || gp.UnplacedAssignments.Count() > 0 || gp.UnplacedFilters.Count() > 0 || gp.HasInlineData)
+            if (gp.TriplePatterns.Count > 1 || gp.HasChildGraphPatterns || (gp.TriplePatterns.Count <= 1 && gp.Filter != null) || gp.UnplacedAssignments.Any() || gp.UnplacedFilters.Any()|| gp.HasInlineData)
             {
                 output.AppendLine("{");
                 foreach (ITriplePattern tp in gp.TriplePatterns)
@@ -571,9 +571,8 @@ namespace VDS.RDF.Writing.Formatting
             {
                 return item.ToString();
             }
-            else if (item is NodeMatchPattern)
+            else if (item is NodeMatchPattern match)
             {
-                NodeMatchPattern match = (NodeMatchPattern)item;
                 return Format(match.Node, segment);
             }
             else if (item is FixedBlankNodePattern)
@@ -730,9 +729,8 @@ namespace VDS.RDF.Writing.Formatting
                 switch (expr.Type)
                 {
                     case SparqlExpressionType.Aggregate:
-                        if (expr is AggregateTerm)
+                        if (expr is AggregateTerm agg)
                         {
-                            AggregateTerm agg = (AggregateTerm)expr;
                             output.Append(FormatAggregate(agg.Aggregate));
                         }
                         else
@@ -825,14 +823,12 @@ namespace VDS.RDF.Writing.Formatting
 
                     case SparqlExpressionType.Primary:
                         // If Node/Numeric Term then use Node Formatting otherwise use ToString() on the expression
-                        if (expr is ConstantTerm)
+                        if (expr is ConstantTerm nodeTerm)
                         {
-                            ConstantTerm nodeTerm = (ConstantTerm)expr;
                             output.Append(Format(nodeTerm.Evaluate(null, 0)));
                         }
-                        else if (expr is GraphPatternTerm)
+                        else if (expr is GraphPatternTerm gp)
                         {
-                            GraphPatternTerm gp = (GraphPatternTerm)expr;
                             output.Append(Format(gp.Pattern));
                         }
                         else
@@ -931,18 +927,16 @@ namespace VDS.RDF.Writing.Formatting
         {
             StringBuilder output = new StringBuilder();
 
-            if (path is AlternativePath)
+            if (path is AlternativePath alt)
             {
-                AlternativePath alt = (AlternativePath)path;
                 output.Append('(');
                 output.Append(FormatPath(alt.LhsPath));
                 output.Append(" | ");
                 output.Append(FormatPath(alt.RhsPath));
                 output.Append(')');
             }
-            else if (path is FixedCardinality)
+            else if (path is FixedCardinality card)
             {
-                FixedCardinality card = (FixedCardinality)path;
                 if (card.Path is BaseBinaryPath) output.Append('(');
                 output.Append(FormatPath(card.Path));
                 if (card.Path is BaseBinaryPath) output.Append(')');
@@ -950,17 +944,15 @@ namespace VDS.RDF.Writing.Formatting
                 output.Append(card.MaxCardinality);
                 output.Append('}');
             }
-            else if (path is InversePath)
+            else if (path is InversePath inv)
             {
-                InversePath inv = (InversePath)path;
                 output.Append('^');
                 if (inv.Path is BaseBinaryPath) output.Append('(');
                 output.Append(FormatPath(inv.Path));
                 if (inv.Path is BaseBinaryPath) output.Append(')');
             }
-            else if (path is NOrMore)
+            else if (path is NOrMore nOrMore)
             {
-                NOrMore nOrMore = (NOrMore)path;
                 if (nOrMore.Path is BaseBinaryPath) output.Append('(');
                 output.Append(FormatPath(nOrMore.Path));
                 if (nOrMore.Path is BaseBinaryPath) output.Append(')');
@@ -968,9 +960,8 @@ namespace VDS.RDF.Writing.Formatting
                 output.Append(nOrMore.MinCardinality);
                 output.Append(",}");
             }
-            else if (path is NToM)
+            else if (path is NToM nToM)
             {
-                NToM nToM = (NToM)path;
                 if (nToM.Path is BaseBinaryPath) output.Append('(');
                 output.Append(FormatPath(nToM.Path));
                 if (nToM.Path is BaseBinaryPath) output.Append(')');
@@ -980,45 +971,39 @@ namespace VDS.RDF.Writing.Formatting
                 output.Append(nToM.MaxCardinality);
                 output.Append('}');
             }
-            else if (path is OneOrMore)
+            else if (path is OneOrMore oneOrMore)
             {
-                OneOrMore oneOrMore = (OneOrMore)path;
                 if (oneOrMore.Path is BaseBinaryPath) output.Append('(');
                 output.Append(FormatPath(oneOrMore.Path));
                 if (oneOrMore.Path is BaseBinaryPath) output.Append(')');
                 output.Append('+');
             }
-            else if (path is Property)
+            else if (path is Property prop)
             {
-                Property prop = (Property)path;
                 output.Append(Format(prop.Predicate, TripleSegment.Predicate));
             }
-            else if (path is SequencePath)
+            else if (path is SequencePath seq)
             {
-                SequencePath seq = (SequencePath)path;
                 output.Append(FormatPath(seq.LhsPath));
                 output.Append(" / ");
                 output.Append(FormatPath(seq.RhsPath));
             }
-            else if (path is ZeroOrMore)
+            else if (path is ZeroOrMore zeroOrMore)
             {
-                ZeroOrMore zeroOrMore = (ZeroOrMore)path;
                 if (zeroOrMore.Path is BaseBinaryPath) output.Append('(');
                 output.Append(FormatPath(zeroOrMore.Path));
                 if (zeroOrMore.Path is BaseBinaryPath) output.Append(')');
                 output.Append('*');
             }
-            else if (path is ZeroOrOne)
+            else if (path is ZeroOrOne zeroOrOne)
             {
-                ZeroOrOne zeroOrOne = (ZeroOrOne)path;
                 if (zeroOrOne.Path is BaseBinaryPath) output.Append('(');
                 output.Append(FormatPath(zeroOrOne.Path));
                 if (zeroOrOne.Path is BaseBinaryPath) output.Append(')');
                 output.Append('?');
             }
-            else if (path is ZeroToN)
+            else if (path is ZeroToN zeroToN)
             {
-                ZeroToN zeroToN = (ZeroToN)path;
                 if (zeroToN.Path is BaseBinaryPath) output.Append('(');
                 output.Append(FormatPath(zeroToN.Path));
                 if (zeroToN.Path is BaseBinaryPath) output.Append(')');
@@ -1026,9 +1011,8 @@ namespace VDS.RDF.Writing.Formatting
                 output.Append(zeroToN.MaxCardinality);
                 output.Append('}');
             }
-            else if (path is NegatedSet)
+            else if (path is NegatedSet negSet)
             {
-                NegatedSet negSet = (NegatedSet)path;
                 output.Append('!');
                 if (negSet.Properties.Count() + negSet.InverseProperties.Count() > 1) output.Append('(');
                 foreach (Property p in negSet.Properties)
diff --git a/Libraries/dotNetRDF/Writing/HtmlSchemaWriter.cs b/Libraries/dotNetRDF/Writing/HtmlSchemaWriter.cs
index 1bdc33dd5..143e36412 100644
--- a/Libraries/dotNetRDF/Writing/HtmlSchemaWriter.cs
+++ b/Libraries/dotNetRDF/Writing/HtmlSchemaWriter.cs
@@ -179,9 +179,9 @@ namespace VDS.RDF.Writing
                 try 
                 {
                     results = context.Graph.ExecuteQuery(getOntoDescrip);
-                    if (results is SparqlResultSet)
+                    if (results is SparqlResultSet sparqlResultSet)
                     {
-                        if (!((SparqlResultSet)results).IsEmpty)
+                        if (!sparqlResultSet.IsEmpty)
                         {
                             SparqlResult ontoInfo = ((SparqlResultSet)results)[0];
 
@@ -349,9 +349,8 @@ namespace VDS.RDF.Writing
             try
             {
                 results = context.Graph.ExecuteQuery(getClasses);
-                if (results is SparqlResultSet)
+                if (results is SparqlResultSet rs)
                 {
-                    SparqlResultSet rs = (SparqlResultSet)results;
                     for (int i = 0; i < rs.Count; i++)
                     {
                         SparqlResult r = rs[i];
@@ -399,9 +398,8 @@ namespace VDS.RDF.Writing
             try
             {
                 results = context.Graph.ExecuteQuery(getProperties);
-                if (results is SparqlResultSet)
+                if (results is SparqlResultSet rs)
                 {
-                    SparqlResultSet rs = (SparqlResultSet)results;
                     for (int i = 0; i < rs.Count; i++)
                     {
                         SparqlResult r = rs[i];
diff --git a/Libraries/dotNetRDF/Writing/WriterUtilities.cs b/Libraries/dotNetRDF/Writing/WriterUtilities.cs
index 7a00e8a55..994fb77b8 100644
--- a/Libraries/dotNetRDF/Writing/WriterUtilities.cs
+++ b/Libraries/dotNetRDF/Writing/WriterUtilities.cs
@@ -341,7 +341,7 @@ namespace VDS.RDF.Writing
                 // Can't be null
                 return false;
             }
-            else if (id.Equals(string.Empty))
+            else if (string.IsNullOrEmpty(id))
             {
                 // Can't be empty
                 return false;
@@ -375,7 +375,7 @@ namespace VDS.RDF.Writing
                 // Can't be null
                 return false;
             }
-            else if (id.Equals(string.Empty))
+            else if (string.IsNullOrEmpty(id))
             {
                 // Can't be empty
                 return false;
diff --git a/Testing/unittest/Core/GraphDiffTests.cs b/Testing/unittest/Core/GraphDiffTests.cs
index 8ba02262a..262e5e203 100644
--- a/Testing/unittest/Core/GraphDiffTests.cs
+++ b/Testing/unittest/Core/GraphDiffTests.cs
@@ -244,9 +244,9 @@ namespace VDS.RDF
         private static void TestGraphDiff(string testGraphName)
         {
             Graph a = new Graph();
-            a.LoadFromFile(string.Format("resources\\diff_cases\\{0}_a.ttl", testGraphName));
+            a.LoadFromFile($"resources\\diff_cases\\{testGraphName}_a.ttl");
             Graph b = new Graph();
-            b.LoadFromFile(string.Format("resources\\diff_cases\\{0}_b.ttl", testGraphName));
+            b.LoadFromFile($"resources\\diff_cases\\{testGraphName}_b.ttl");
 
             var diff = a.Difference(b);
 
diff --git a/Testing/unittest/Core/HardGraphMatching.cs b/Testing/unittest/Core/HardGraphMatching.cs
index f28d0b884..3b9258c49 100644
--- a/Testing/unittest/Core/HardGraphMatching.cs
+++ b/Testing/unittest/Core/HardGraphMatching.cs
@@ -291,9 +291,9 @@ namespace VDS.RDF
         private static void TestGraphMatch(string testGraphName)
         {
             Graph a = new Graph();
-            a.LoadFromFile(string.Format("resources\\diff_cases\\{0}_a.ttl", testGraphName));
+            a.LoadFromFile($"resources\\diff_cases\\{testGraphName}_a.ttl");
             Graph b = new Graph();
-            b.LoadFromFile(string.Format("resources\\diff_cases\\{0}_b.ttl", testGraphName));
+            b.LoadFromFile($"resources\\diff_cases\\{testGraphName}_b.ttl");
 
             Assert.True(a.Equals(b));
             Assert.True(b.Equals(a));
diff --git a/Testing/unittest/JsonLd/JsonLdTestSuiteBase.cs b/Testing/unittest/JsonLd/JsonLdTestSuiteBase.cs
index a5333db14..f16c005c4 100644
--- a/Testing/unittest/JsonLd/JsonLdTestSuiteBase.cs
+++ b/Testing/unittest/JsonLd/JsonLdTestSuiteBase.cs
@@ -484,8 +484,7 @@ namespace VDS.RDF.JsonLd
             var xsdString = new Uri("http://www.w3.org/2001/XMLSchema#string");
             foreach (var t in store.Triples.ToList())
             {
-                var literalNode = t.Object as ILiteralNode;
-                if (literalNode != null && String.IsNullOrEmpty(literalNode.Language) && literalNode.DataType == null)
+                if (t.Object is ILiteralNode literalNode && String.IsNullOrEmpty(literalNode.Language) && literalNode.DataType == null)
                 {
                     var graphToUpdate = t.Graph;
                     graphToUpdate.Retract(t);
diff --git a/Testing/unittest/JsonLd/JsonLdTestSuiteDataSource.cs b/Testing/unittest/JsonLd/JsonLdTestSuiteDataSource.cs
index c3d54f848..526b9450f 100644
--- a/Testing/unittest/JsonLd/JsonLdTestSuiteDataSource.cs
+++ b/Testing/unittest/JsonLd/JsonLdTestSuiteDataSource.cs
@@ -78,8 +78,8 @@ namespace VDS.RDF.JsonLd
                     specVersion = null,
                     rdfDirection = null;
                 var compactArrays = true;
-                var options = optionsProperty?.Value as JObject;
-                if (options != null)
+
+                if (optionsProperty?.Value is JObject options)
                 {
                     foreach (var p in options.Properties())
                     {
@@ -176,8 +176,8 @@ namespace VDS.RDF.JsonLd
                 var optionsProperty = testConfiguration.Property("option");
                 bool useNativeTypes = false, useRdfType = false, ordered=false;
                 string specVersion = null, rdfDirection = null;
-                var options = optionsProperty?.Value as JObject;
-                if (options != null)
+
+                if (optionsProperty?.Value is JObject options)
                 {
                     foreach (var p in options.Properties())
                     {
@@ -253,8 +253,8 @@ namespace VDS.RDF.JsonLd
                 bool pruneBlankNodeIdentifiers = false, ordered = false;
                 bool? omitGraph = null;
                 string processingMode = null, specVersion = null;
-                var options = optionsProperty?.Value as JObject;
-                if (options != null)
+
+                if (optionsProperty?.Value is JObject options)
                 {
                     foreach (var p in options.Properties())
                     {
diff --git a/Testing/unittest/Parsing/GZipTests.cs b/Testing/unittest/Parsing/GZipTests.cs
index 2c14495b2..30a18ec57 100644
--- a/Testing/unittest/Parsing/GZipTests.cs
+++ b/Testing/unittest/Parsing/GZipTests.cs
@@ -205,7 +205,7 @@ namespace VDS.RDF.Parsing
 
                 String ext = MimeTypesHelper.GetTrueFileExtension(filename);
                 ext = ext.Substring(1);
-                MimeTypeDefinition def = MimeTypesHelper.Definitions.Where(d => d.CanParseRdfDatasets && d.SupportsFileExtension(ext)).FirstOrDefault();
+                MimeTypeDefinition def = MimeTypesHelper.Definitions.FirstOrDefault(d => d.CanParseRdfDatasets && d.SupportsFileExtension(ext));
                 Assert.NotNull(def);
 
                 IStoreReader reader = def.GetRdfDatasetParser();
@@ -225,7 +225,7 @@ namespace VDS.RDF.Parsing
 
                 String ext = MimeTypesHelper.GetTrueFileExtension(filename);
                 ext = ext.Substring(1);
-                MimeTypeDefinition def = MimeTypesHelper.Definitions.Where(d => d.CanParseRdfDatasets && d.SupportsFileExtension(ext)).FirstOrDefault();
+                MimeTypeDefinition def = MimeTypesHelper.Definitions.FirstOrDefault(d => d.CanParseRdfDatasets && d.SupportsFileExtension(ext));
                 Assert.NotNull(def);
 
                 IStoreReader reader = def.GetRdfDatasetParser();
@@ -244,7 +244,7 @@ namespace VDS.RDF.Parsing
 
                 String ext = MimeTypesHelper.GetTrueFileExtension(filename);
                 ext = ext.Substring(1);
-                MimeTypeDefinition def = MimeTypesHelper.Definitions.Where(d => d.CanParseRdfDatasets && d.SupportsFileExtension(ext)).FirstOrDefault();
+                MimeTypeDefinition def = MimeTypesHelper.Definitions.FirstOrDefault(d => d.CanParseRdfDatasets && d.SupportsFileExtension(ext));
                 Assert.NotNull(def);
 
                 IStoreReader reader = def.GetRdfDatasetParser();
@@ -264,7 +264,7 @@ namespace VDS.RDF.Parsing
 
                 String ext = MimeTypesHelper.GetTrueFileExtension(filename);
                 ext = ext.Substring(1);
-                MimeTypeDefinition def = MimeTypesHelper.Definitions.Where(d => d.CanParseRdfDatasets && d.SupportsFileExtension(ext)).FirstOrDefault();
+                MimeTypeDefinition def = MimeTypesHelper.Definitions.FirstOrDefault(d => d.CanParseRdfDatasets && d.SupportsFileExtension(ext));
                 Assert.NotNull(def);
 
                 IStoreReader reader = def.GetRdfDatasetParser();
@@ -284,7 +284,7 @@ namespace VDS.RDF.Parsing
 
                 String ext = MimeTypesHelper.GetTrueFileExtension(filename);
                 ext = ext.Substring(1);
-                MimeTypeDefinition def = MimeTypesHelper.Definitions.Where(d => d.CanParseSparqlResults && d.SupportsFileExtension(ext)).FirstOrDefault();
+                MimeTypeDefinition def = MimeTypesHelper.Definitions.FirstOrDefault(d => d.CanParseSparqlResults && d.SupportsFileExtension(ext));
                 Assert.NotNull(def);
 
                 ISparqlResultsReader reader = def.GetSparqlResultsParser();
@@ -303,7 +303,7 @@ namespace VDS.RDF.Parsing
 
                 String ext = MimeTypesHelper.GetTrueFileExtension(filename);
                 ext = ext.Substring(1);
-                MimeTypeDefinition def = MimeTypesHelper.Definitions.Where(d => d.CanParseSparqlResults && d.SupportsFileExtension(ext)).FirstOrDefault();
+                MimeTypeDefinition def = MimeTypesHelper.Definitions.FirstOrDefault(d => d.CanParseSparqlResults && d.SupportsFileExtension(ext));
                 Assert.NotNull(def);
 
                 ISparqlResultsReader reader = def.GetSparqlResultsParser();
@@ -322,7 +322,7 @@ namespace VDS.RDF.Parsing
 
                 String ext = MimeTypesHelper.GetTrueFileExtension(filename);
                 ext = ext.Substring(1);
-                MimeTypeDefinition def = MimeTypesHelper.Definitions.Where(d => d.CanParseSparqlResults && d.SupportsFileExtension(ext)).FirstOrDefault();
+                MimeTypeDefinition def = MimeTypesHelper.Definitions.FirstOrDefault(d => d.CanParseSparqlResults && d.SupportsFileExtension(ext));
                 Assert.NotNull(def);
 
                 ISparqlResultsReader reader = def.GetSparqlResultsParser();
@@ -341,7 +341,7 @@ namespace VDS.RDF.Parsing
 
                 String ext = MimeTypesHelper.GetTrueFileExtension(filename);
                 ext = ext.Substring(1);
-                MimeTypeDefinition def = MimeTypesHelper.Definitions.Where(d => d.CanParseSparqlResults && d.SupportsFileExtension(ext)).FirstOrDefault();
+                MimeTypeDefinition def = MimeTypesHelper.Definitions.FirstOrDefault(d => d.CanParseSparqlResults && d.SupportsFileExtension(ext));
                 Assert.NotNull(def);
 
                 ISparqlResultsReader reader = def.GetSparqlResultsParser();
@@ -374,7 +374,7 @@ namespace VDS.RDF.Parsing
 
                 String ext = MimeTypesHelper.GetTrueFileExtension(filename);
                 ext = ext.Substring(1);
-                MimeTypeDefinition def = MimeTypesHelper.Definitions.Where(d => d.CanParseSparqlResults && d.SupportsFileExtension(ext)).FirstOrDefault();
+                MimeTypeDefinition def = MimeTypesHelper.Definitions.FirstOrDefault(d => d.CanParseSparqlResults && d.SupportsFileExtension(ext));
                 Assert.NotNull(def);
 
                 ISparqlResultsReader reader = def.GetSparqlResultsParser();
@@ -393,7 +393,7 @@ namespace VDS.RDF.Parsing
 
                 String ext = MimeTypesHelper.GetTrueFileExtension(filename);
                 ext = ext.Substring(1);
-                MimeTypeDefinition def = MimeTypesHelper.Definitions.Where(d => d.CanParseSparqlResults && d.SupportsFileExtension(ext)).FirstOrDefault();
+                MimeTypeDefinition def = MimeTypesHelper.Definitions.FirstOrDefault(d => d.CanParseSparqlResults && d.SupportsFileExtension(ext));
                 Assert.NotNull(def);
 
                 ISparqlResultsReader reader = def.GetSparqlResultsParser();
@@ -412,7 +412,7 @@ namespace VDS.RDF.Parsing
 
                 String ext = MimeTypesHelper.GetTrueFileExtension(filename);
                 ext = ext.Substring(1);
-                MimeTypeDefinition def = MimeTypesHelper.Definitions.Where(d => d.CanParseRdf && d.SupportsFileExtension(ext)).FirstOrDefault();
+                MimeTypeDefinition def = MimeTypesHelper.Definitions.FirstOrDefault(d => d.CanParseRdf && d.SupportsFileExtension(ext));
                 Assert.NotNull(def);
 
                 IRdfReader reader = def.GetRdfParser();
@@ -457,7 +457,7 @@ namespace VDS.RDF.Parsing
 
                 String ext = MimeTypesHelper.GetTrueFileExtension(filename);
                 ext = ext.Substring(1);
-                MimeTypeDefinition def = MimeTypesHelper.Definitions.Where(d => d.CanParseRdf && d.SupportsFileExtension(ext)).FirstOrDefault();
+                MimeTypeDefinition def = MimeTypesHelper.Definitions.FirstOrDefault(d => d.CanParseRdf && d.SupportsFileExtension(ext));
                 Assert.NotNull(def);
 
                 IRdfReader reader = def.GetRdfParser();
@@ -476,7 +476,7 @@ namespace VDS.RDF.Parsing
 
                 String ext = MimeTypesHelper.GetTrueFileExtension(filename);
                 ext = ext.Substring(1);
-                MimeTypeDefinition def = MimeTypesHelper.Definitions.Where(d => d.CanParseRdf && d.SupportsFileExtension(ext)).FirstOrDefault();
+                MimeTypeDefinition def = MimeTypesHelper.Definitions.FirstOrDefault(d => d.CanParseRdf && d.SupportsFileExtension(ext));
                 Assert.NotNull(def);
 
                 IRdfReader reader = def.GetRdfParser();
@@ -495,7 +495,7 @@ namespace VDS.RDF.Parsing
 
                 String ext = MimeTypesHelper.GetTrueFileExtension(filename);
                 ext = ext.Substring(1);
-                MimeTypeDefinition def = MimeTypesHelper.Definitions.Where(d => d.CanParseRdf && d.SupportsFileExtension(ext)).FirstOrDefault();
+                MimeTypeDefinition def = MimeTypesHelper.Definitions.FirstOrDefault(d => d.CanParseRdf && d.SupportsFileExtension(ext));
                 Assert.NotNull(def);
 
                 IRdfReader reader = def.GetRdfParser();
@@ -540,7 +540,7 @@ namespace VDS.RDF.Parsing
 
                 String ext = MimeTypesHelper.GetTrueFileExtension(filename);
                 ext = ext.Substring(1);
-                MimeTypeDefinition def = MimeTypesHelper.Definitions.Where(d => d.CanParseRdf && d.SupportsFileExtension(ext)).FirstOrDefault();
+                MimeTypeDefinition def = MimeTypesHelper.Definitions.FirstOrDefault(d => d.CanParseRdf && d.SupportsFileExtension(ext));
                 Assert.NotNull(def);
 
                 IRdfReader reader = def.GetRdfParser();
@@ -559,7 +559,7 @@ namespace VDS.RDF.Parsing
 
                 String ext = MimeTypesHelper.GetTrueFileExtension(filename);
                 ext = ext.Substring(1);
-                MimeTypeDefinition def = MimeTypesHelper.Definitions.Where(d => d.CanParseRdf && d.SupportsFileExtension(ext)).FirstOrDefault();
+                MimeTypeDefinition def = MimeTypesHelper.Definitions.FirstOrDefault(d => d.CanParseRdf && d.SupportsFileExtension(ext));
                 Assert.NotNull(def);
 
                 IRdfReader reader = def.GetRdfParser();
diff --git a/Testing/unittest/Parsing/LoaderTests.cs b/Testing/unittest/Parsing/LoaderTests.cs
index 1dc0df014..8c2836317 100644
--- a/Testing/unittest/Parsing/LoaderTests.cs
+++ b/Testing/unittest/Parsing/LoaderTests.cs
@@ -300,7 +300,7 @@ namespace VDS.RDF.Parsing
             TripleStore store = new TripleStore();
             store.LoadFromEmbeddedResource("VDS.RDF.Configuration.configuration.ttl");
 
-            Assert.True(store.Triples.Count() > 0);
+            Assert.True(store.Triples.Any());
             Assert.Equal(1, store.Graphs.Count);
         }
 
@@ -315,7 +315,7 @@ namespace VDS.RDF.Parsing
             
             store.LoadFromFile("fileloader-graph-to-store.ttl");
 
-            Assert.True(store.Triples.Count() > 0);
+            Assert.True(store.Triples.Any());
             Assert.Equal(1, store.Graphs.Count);
         }
        
diff --git a/Testing/unittest/Parsing/RdfATests.cs b/Testing/unittest/Parsing/RdfATests.cs
index 5521dff45..9e8ab6286 100644
--- a/Testing/unittest/Parsing/RdfATests.cs
+++ b/Testing/unittest/Parsing/RdfATests.cs
@@ -82,10 +82,10 @@ namespace VDS.RDF.Parsing
                     h.BaseUri = g.BaseUri;
 
                     Console.WriteLine("Graph A Warnings:");
-                    FileLoader.Load(g, string.Format("resources\\{0}.xhtml", test));
+                    FileLoader.Load(g, $"resources\\{test}.xhtml");
                     Console.WriteLine();
                     Console.WriteLine("Graph B Warnings:");
-                    FileLoader.Load(h, string.Format("resources\\{0}b.xhtml", test));
+                    FileLoader.Load(h, $"resources\\{test}b.xhtml");
                     Console.WriteLine();
 
                     Console.WriteLine("Graph A (RDFa 1.0)");
diff --git a/Testing/unittest/Parsing/RdfXmlTests.cs b/Testing/unittest/Parsing/RdfXmlTests.cs
index a20fcb1ee..5bc3d0fd4 100644
--- a/Testing/unittest/Parsing/RdfXmlTests.cs
+++ b/Testing/unittest/Parsing/RdfXmlTests.cs
@@ -65,9 +65,9 @@ namespace VDS.RDF.Parsing
         private void TestRdfXmlSequence(IRdfReader parser, String file)
         {
             Graph g = new Graph();
-            if (parser is ITraceableParser)
+            if (parser is ITraceableParser iTraceableParser)
             {
-                ((ITraceableParser)parser).TraceParsing = true;
+                iTraceableParser.TraceParsing = true;
             }
             parser.Load(g, file);
 
diff --git a/Testing/unittest/Parsing/Suites/BaseParserSuite.cs b/Testing/unittest/Parsing/Suites/BaseParserSuite.cs
index b9ed9870c..5cb93dada 100644
--- a/Testing/unittest/Parsing/Suites/BaseParserSuite.cs
+++ b/Testing/unittest/Parsing/Suites/BaseParserSuite.cs
@@ -365,11 +365,11 @@ WHERE
 
                     //Repeat parsing with tracing enabled if appropriate
                     //This gives us more useful debugging output for failed tests
-                    if (Parser is ITraceableTokeniser)
+                    if (Parser is ITraceableTokeniser iTraceableTokeniser)
                     {
                         try
                         {
-                            ((ITraceableTokeniser)Parser).TraceTokeniser = true;
+                            iTraceableTokeniser.TraceTokeniser = true;
                             ((IRdfReader)Parser).Load(new Graph(), Path.GetFileName(file));
                         }
                         catch
diff --git a/Testing/unittest/Parsing/Suites/RdfA.cs b/Testing/unittest/Parsing/Suites/RdfA.cs
index 8f4bd4408..4c845caa3 100644
--- a/Testing/unittest/Parsing/Suites/RdfA.cs
+++ b/Testing/unittest/Parsing/Suites/RdfA.cs
@@ -210,12 +210,12 @@ namespace VDS.RDF.Parsing.Suites
                                 {
                                     SparqlQuery q = queryparser.ParseFromFile("rdfa_tests/" + Path.GetFileNameWithoutExtension(file) + ".sparql");
                                     Object results = g.ExecuteQuery(q);
-                                    if (results is SparqlResultSet)
+                                    if (results is SparqlResultSet sparqlResultSet)
                                     {
                                         //The Result is the result of the ASK Query
                                         if (falseTests.Contains(Path.GetFileName(file)))
                                         {
-                                            passed = !((SparqlResultSet)results).Result;
+                                            passed = !sparqlResultSet.Result;
                                         }
                                         else
                                         {
diff --git a/Testing/unittest/Query/ConstructWithOptionalTests.cs b/Testing/unittest/Query/ConstructWithOptionalTests.cs
index 76251c9f5..cbe316f1d 100644
--- a/Testing/unittest/Query/ConstructWithOptionalTests.cs
+++ b/Testing/unittest/Query/ConstructWithOptionalTests.cs
@@ -69,10 +69,8 @@ namespace VDS.RDF.Query
 
             LeviathanQueryProcessor processor = new LeviathanQueryProcessor(AsDataset(store));
             Object results = processor.ProcessQuery(q);
-            if (results is IGraph)
+            if (results is IGraph result)
             {
-                IGraph result = (IGraph)results;
-
                 NTriplesFormatter formatter = new NTriplesFormatter();
                 Console.WriteLine("Result Data");
                 foreach (Triple t in result.Triples)
diff --git a/Testing/unittest/Query/DataTableTests.cs b/Testing/unittest/Query/DataTableTests.cs
index d5eb91389..60e30306a 100644
--- a/Testing/unittest/Query/DataTableTests.cs
+++ b/Testing/unittest/Query/DataTableTests.cs
@@ -45,10 +45,8 @@ namespace VDS.RDF.Query
             FileLoader.Load(g, "resources\\InferenceTest.ttl");
 
             Object results = g.ExecuteQuery(q);
-            if (results is SparqlResultSet)
+            if (results is SparqlResultSet rset)
             {
-                SparqlResultSet rset = (SparqlResultSet)results;
-
                 DataTable table = new DataTable();
                 foreach (String var in rset.Variables)
                 {
@@ -103,10 +101,8 @@ namespace VDS.RDF.Query
             FileLoader.Load(g, "resources\\InferenceTest.ttl");
 
             Object results = g.ExecuteQuery(q);
-            if (results is SparqlResultSet)
+            if (results is SparqlResultSet rset)
             {
-                SparqlResultSet rset = (SparqlResultSet)results;
-
                 DataTable table = new DataTable();
                 foreach (String var in rset.Variables)
                 {
@@ -161,10 +157,8 @@ namespace VDS.RDF.Query
             FileLoader.Load(g, "resources\\InferenceTest.ttl");
 
             Object results = g.ExecuteQuery(q);
-            if (results is SparqlResultSet)
+            if (results is SparqlResultSet rset)
             {
-                SparqlResultSet rset = (SparqlResultSet)results;
-
                 DataTable table = rset.ToDataTable();
 
                 Assert.Equal(rset.Variables.Count(), table.Columns.Count);
@@ -197,10 +191,8 @@ namespace VDS.RDF.Query
             FileLoader.Load(g, "resources\\InferenceTest.ttl");
 
             Object results = g.ExecuteQuery(q);
-            if (results is SparqlResultSet)
+            if (results is SparqlResultSet rset)
             {
-                SparqlResultSet rset = (SparqlResultSet)results;
-
                 DataTable table = rset.ToDataTable();
 
                 Assert.Equal(rset.Variables.Count(), table.Columns.Count);
@@ -233,10 +225,8 @@ namespace VDS.RDF.Query
             FileLoader.Load(g, "resources\\InferenceTest.ttl");
 
             Object results = g.ExecuteQuery(q);
-            if (results is SparqlResultSet)
+            if (results is SparqlResultSet rset)
             {
-                SparqlResultSet rset = (SparqlResultSet)results;
-
                 DataTable table = rset.ToDataTable();
 
                 Assert.True(rset.ResultsType == SparqlResultsType.Boolean);
@@ -271,10 +261,8 @@ namespace VDS.RDF.Query
             FileLoader.Load(g, "resources\\InferenceTest.ttl");
 
             Object results = g.ExecuteQuery(q);
-            if (results is SparqlResultSet)
+            if (results is SparqlResultSet rset)
             {
-                SparqlResultSet rset = (SparqlResultSet)results;
-
                 DataTable table = rset.ToDataTable();
 
                 Assert.True(rset.ResultsType == SparqlResultsType.Boolean);
diff --git a/Testing/unittest/Query/DefaultGraphTests.cs b/Testing/unittest/Query/DefaultGraphTests.cs
index 72ac8977a..03687a495 100644
--- a/Testing/unittest/Query/DefaultGraphTests.cs
+++ b/Testing/unittest/Query/DefaultGraphTests.cs
@@ -60,9 +60,9 @@ namespace VDS.RDF.Query
             store.Add(g);
 
             Object results = ExecuteQuery(store, "ASK WHERE { GRAPH ?g { ?s ?p ?o }}");
-            if (results is SparqlResultSet)
+            if (results is SparqlResultSet sparqlResultSet)
             {
-                Assert.False(((SparqlResultSet)results).Result);
+                Assert.False(sparqlResultSet.Result);
             }
             else
             {
@@ -79,9 +79,9 @@ namespace VDS.RDF.Query
             store.Add(g);
 
             Object results = ExecuteQuery(store, "ASK WHERE { GRAPH <dotnetrdf:default-graph> { ?s ?p ?o }}");
-            if (results is SparqlResultSet)
+            if (results is SparqlResultSet sparqlResultSet)
             {
-                Assert.False(((SparqlResultSet)results).Result);
+                Assert.False(sparqlResultSet.Result);
             }
             else
             {
@@ -107,10 +107,10 @@ namespace VDS.RDF.Query
             SparqlQuery q = parser.ParseFromString("SELECT * WHERE { ?s ?p ?o }");
 
             Object results = processor.ProcessQuery(q);
-            if (results is SparqlResultSet)
+            if (results is SparqlResultSet sparqlResultSet)
             {
                 TestTools.ShowResults(results);
-                Assert.True(((SparqlResultSet)results).IsEmpty, "Results should be empty as an empty Graph was set as the Default Graph");
+                Assert.True(sparqlResultSet.IsEmpty, "Results should be empty as an empty Graph was set as the Default Graph");
             }
             else
             {
@@ -136,10 +136,10 @@ namespace VDS.RDF.Query
             SparqlQuery q = parser.ParseFromString("SELECT * WHERE { ?s ?p ?o }");
 
             Object results = processor.ProcessQuery(q);
-            if (results is SparqlResultSet)
+            if (results is SparqlResultSet sparqlResultSet)
             {
                 TestTools.ShowResults(results);
-                Assert.False(((SparqlResultSet)results).IsEmpty, "Results should be false as a non-empty Graph was set as the Default Graph");
+                Assert.False(sparqlResultSet.IsEmpty, "Results should be false as a non-empty Graph was set as the Default Graph");
             }
             else
             {
@@ -279,9 +279,8 @@ namespace VDS.RDF.Query
 
             LeviathanQueryProcessor processor = new LeviathanQueryProcessor(dataset);
             Object results = processor.ProcessQuery(q);
-            if (results is SparqlResultSet)
+            if (results is SparqlResultSet rset)
             {
-                SparqlResultSet rset = (SparqlResultSet)results;
                 TestTools.ShowResults(rset);
                 Assert.Equal(ex.Triples.Count, rset.Count);
             }
@@ -309,9 +308,8 @@ namespace VDS.RDF.Query
 
             LeviathanQueryProcessor processor = new LeviathanQueryProcessor(dataset);
             Object results = processor.ProcessQuery(q);
-            if (results is SparqlResultSet)
+            if (results is SparqlResultSet rset)
             {
-                SparqlResultSet rset = (SparqlResultSet)results;
                 TestTools.ShowResults(rset);
                 Assert.Equal(ex.Triples.Count, rset.Count);
             }
@@ -341,9 +339,8 @@ namespace VDS.RDF.Query
 
             LeviathanQueryProcessor processor = new LeviathanQueryProcessor(dataset);
             Object results = processor.ProcessQuery(q);
-            if (results is SparqlResultSet)
+            if (results is SparqlResultSet rset)
             {
-                SparqlResultSet rset = (SparqlResultSet)results;
                 TestTools.ShowResults(rset);
                 Assert.Equal(ex.Triples.Count, rset.Count);
             }
@@ -371,9 +368,8 @@ namespace VDS.RDF.Query
 
             LeviathanQueryProcessor processor = new LeviathanQueryProcessor(dataset);
             Object results = processor.ProcessQuery(q);
-            if (results is SparqlResultSet)
+            if (results is SparqlResultSet rset)
             {
-                SparqlResultSet rset = (SparqlResultSet)results;
                 TestTools.ShowResults(rset);
                 Assert.Equal(ex.Triples.Count, rset.Count);
             }
@@ -404,9 +400,8 @@ namespace VDS.RDF.Query
 
             LeviathanQueryProcessor processor = new LeviathanQueryProcessor(dataset);
             Object results = processor.ProcessQuery(q);
-            if (results is SparqlResultSet)
+            if (results is SparqlResultSet rset)
             {
-                SparqlResultSet rset = (SparqlResultSet)results;
                 TestTools.ShowResults(rset);
                 Assert.Equal(0, rset.Count);
             }
diff --git a/Testing/unittest/Query/DefaultGraphTests2.cs b/Testing/unittest/Query/DefaultGraphTests2.cs
index 24235063d..e094e0943 100644
--- a/Testing/unittest/Query/DefaultGraphTests2.cs
+++ b/Testing/unittest/Query/DefaultGraphTests2.cs
@@ -78,9 +78,8 @@ namespace VDS.RDF.Query
             LeviathanQueryProcessor processor = new LeviathanQueryProcessor(dataset);
 
             Object results = processor.ProcessQuery(q);
-            if (results is IGraph)
+            if (results is IGraph r)
             {
-                IGraph r = (IGraph)results;
                 Assert.Equal(g.Triples.Count + h.Triples.Count, r.Triples.Count);
                 Assert.True(r.HasSubGraph(g), "g should be a subgraph of the results");
                 Assert.True(r.HasSubGraph(h), "h should be a subgraph of the results");
@@ -108,9 +107,8 @@ namespace VDS.RDF.Query
             LeviathanQueryProcessor processor = new LeviathanQueryProcessor(dataset);
 
             Object results = processor.ProcessQuery(q);
-            if (results is IGraph)
+            if (results is IGraph r)
             {
-                IGraph r = (IGraph)results;
                 Assert.Equal(0, r.Triples.Count);
                 Assert.False(r.HasSubGraph(g), "g should not be a subgraph of the results");
                 Assert.False(r.HasSubGraph(h), "h should not be a subgraph of the results");
@@ -138,9 +136,8 @@ namespace VDS.RDF.Query
             LeviathanQueryProcessor processor = new LeviathanQueryProcessor(dataset);
 
             Object results = processor.ProcessQuery(q);
-            if (results is IGraph)
+            if (results is IGraph r)
             {
-                IGraph r = (IGraph)results;
                 Assert.Equal(0, r.Triples.Count);
                 Assert.False(r.HasSubGraph(g), "g should not be a subgraph of the results");
                 Assert.False(r.HasSubGraph(h), "h should not be a subgraph of the results");
@@ -170,9 +167,8 @@ namespace VDS.RDF.Query
             LeviathanQueryProcessor processor = new LeviathanQueryProcessor(dataset);
 
             Object results = processor.ProcessQuery(q);
-            if (results is IGraph)
+            if (results is IGraph r)
             {
-                IGraph r = (IGraph)results;
                 Assert.Equal(g.Triples.Count, r.Triples.Count);
                 Assert.Equal(g, r);
                 Assert.NotEqual(h, r);
@@ -202,9 +198,8 @@ namespace VDS.RDF.Query
             LeviathanQueryProcessor processor = new LeviathanQueryProcessor(dataset);
 
             Object results = processor.ProcessQuery(q);
-            if (results is IGraph)
+            if (results is IGraph r)
             {
-                IGraph r = (IGraph)results;
                 Assert.Equal(h.Triples.Count, r.Triples.Count);
                 Assert.NotEqual(g, r);
                 Assert.Equal(h, r);
@@ -234,9 +229,8 @@ namespace VDS.RDF.Query
             LeviathanQueryProcessor processor = new LeviathanQueryProcessor(dataset);
 
             Object results = processor.ProcessQuery(q);
-            if (results is IGraph)
+            if (results is IGraph r)
             {
-                IGraph r = (IGraph)results;
                 Assert.Equal(h.Triples.Count, r.Triples.Count);
                 Assert.NotEqual(g, r);
                 Assert.Equal(h, r);
@@ -266,9 +260,8 @@ namespace VDS.RDF.Query
             LeviathanQueryProcessor processor = new LeviathanQueryProcessor(dataset);
 
             Object results = processor.ProcessQuery(q);
-            if (results is IGraph)
+            if (results is IGraph r)
             {
-                IGraph r = (IGraph)results;
                 Assert.Equal(g.Triples.Count, r.Triples.Count);
                 Assert.Equal(g, r);
                 Assert.NotEqual(h, r);
@@ -298,9 +291,8 @@ namespace VDS.RDF.Query
             LeviathanQueryProcessor processor = new LeviathanQueryProcessor(dataset);
 
             Object results = processor.ProcessQuery(q);
-            if (results is IGraph)
+            if (results is IGraph r)
             {
-                IGraph r = (IGraph)results;
                 Assert.Equal(0, r.Triples.Count);
                 Assert.False(r.HasSubGraph(g), "g should not be a subgraph of the results");
                 Assert.False(r.HasSubGraph(h), "h should not be a subgraph of the results");
@@ -330,9 +322,8 @@ namespace VDS.RDF.Query
             LeviathanQueryProcessor processor = new LeviathanQueryProcessor(dataset);
 
             Object results = processor.ProcessQuery(q);
-            if (results is IGraph)
+            if (results is IGraph r)
             {
-                IGraph r = (IGraph)results;
                 Assert.Equal(0, r.Triples.Count);
                 Assert.False(r.HasSubGraph(g), "g should not be a subgraph of the results");
                 Assert.False(r.HasSubGraph(h), "h should not be a subgraph of the results");
diff --git a/Testing/unittest/Query/FilterPlacementTests.cs b/Testing/unittest/Query/FilterPlacementTests.cs
index 30bb1538a..b366c6b50 100644
--- a/Testing/unittest/Query/FilterPlacementTests.cs
+++ b/Testing/unittest/Query/FilterPlacementTests.cs
@@ -49,8 +49,8 @@ namespace VDS.RDF.Query
 
             SparqlQueryParser parser = new SparqlQueryParser();
             SparqlQuery q = parser.ParseFromString(query);
-            SparqlResultSet results = g.ExecuteQuery(q) as SparqlResultSet;
-            if (results != null)
+
+            if (g.ExecuteQuery(q) is SparqlResultSet results)
             {
                 TestTools.ShowResults(results);
 
diff --git a/Testing/unittest/Query/FullText/FullTextSparqlTests.cs b/Testing/unittest/Query/FullText/FullTextSparqlTests.cs
index 9cd8f7cf5..9ae7001b2 100644
--- a/Testing/unittest/Query/FullText/FullTextSparqlTests.cs
+++ b/Testing/unittest/Query/FullText/FullTextSparqlTests.cs
@@ -102,8 +102,8 @@ namespace VDS.RDF.Query.FullText
                 Options.AlgebraOptimisation = true;
 
                 LeviathanQueryProcessor processor = new LeviathanQueryProcessor(this._dataset);
-                SparqlResultSet results = processor.ProcessQuery(q) as SparqlResultSet;
-                if (results != null)
+
+                if (processor.ProcessQuery(q) is SparqlResultSet results)
                 {
                     TestTools.ShowResults(results);
 
diff --git a/Testing/unittest/Query/FullText/FullTextSparqlTests2.cs b/Testing/unittest/Query/FullText/FullTextSparqlTests2.cs
index 5c4363ab3..775e6c7a4 100644
--- a/Testing/unittest/Query/FullText/FullTextSparqlTests2.cs
+++ b/Testing/unittest/Query/FullText/FullTextSparqlTests2.cs
@@ -96,8 +96,8 @@ namespace VDS.RDF.Query.FullText
                 Options.AlgebraOptimisation = true;
 
                 LeviathanQueryProcessor processor = new LeviathanQueryProcessor(this._dataset);
-                SparqlResultSet results = processor.ProcessQuery(q) as SparqlResultSet;
-                if (results != null)
+
+                if (processor.ProcessQuery(q) is SparqlResultSet results)
                 {
                     TestTools.ShowResults(results);
 
diff --git a/Testing/unittest/Query/GroupByTests.cs b/Testing/unittest/Query/GroupByTests.cs
index 63f234aca..23cb2b4d7 100644
--- a/Testing/unittest/Query/GroupByTests.cs
+++ b/Testing/unittest/Query/GroupByTests.cs
@@ -71,9 +71,8 @@ namespace VDS.RDF.Query
             FileLoader.Load(g, "resources\\InferenceTest.ttl");
 
             Object results = g.ExecuteQuery(q);
-            if (results is SparqlResultSet)
+            if (results is SparqlResultSet rset)
             {
-                SparqlResultSet rset = (SparqlResultSet)results;
                 TestTools.ShowResults(rset);
 
                 Assert.True(rset.All(r => r.HasValue("x") && !r.HasValue("s")), "All Results should have a ?x variable and no ?s variable");
@@ -99,9 +98,8 @@ namespace VDS.RDF.Query
             FileLoader.Load(g, "resources\\InferenceTest.ttl");
 
             Object results = g.ExecuteQuery(q);
-            if (results is SparqlResultSet)
+            if (results is SparqlResultSet rset)
             {
-                SparqlResultSet rset = (SparqlResultSet)results;
                 TestTools.ShowResults(rset);
 
                 Assert.True(rset.All(r => r.HasValue("x") && !r.HasValue("s") && r.HasValue("predicates")), "All Results should have a ?x and ?predicates variables and no ?s variable");
@@ -127,9 +125,8 @@ namespace VDS.RDF.Query
             FileLoader.Load(g, "resources\\InferenceTest.ttl");
 
             Object results = g.ExecuteQuery(q);
-            if (results is SparqlResultSet)
+            if (results is SparqlResultSet rset)
             {
-                SparqlResultSet rset = (SparqlResultSet)results;
                 TestTools.ShowResults(rset);
 
                 Assert.True(rset.All(r => r.HasValue("s") && r.HasValue("sum")), "All Results should have a ?s and a ?sum variable");
@@ -158,9 +155,8 @@ namespace VDS.RDF.Query
             UriLoader.Load(g, new Uri("http://dbpedia.org/resource/Southampton"));
 
             Object results = g.ExecuteQuery(q);
-            if (results is SparqlResultSet)
+            if (results is SparqlResultSet rset)
             {
-                SparqlResultSet rset = (SparqlResultSet)results;
                 TestTools.ShowResults(rset);
 
                 Assert.True(rset.All(r => r.HasValue("lang") && r.HasValue("example")), "All Results should have a ?lang and a ?example variable");
@@ -189,9 +185,8 @@ namespace VDS.RDF.Query
             UriLoader.Load(g, new Uri("http://dbpedia.org/resource/Southampton"));
 
             Object results = g.ExecuteQuery(q);
-            if (results is SparqlResultSet)
+            if (results is SparqlResultSet rset)
             {
-                SparqlResultSet rset = (SparqlResultSet)results;
                 TestTools.ShowResults(rset);
 
                 Assert.True(rset.All(r => r.HasValue("lang") && r.HasValue("example")), "All Results should have a ?lang and a ?example variable");
diff --git a/Testing/unittest/Query/LeviathanTests.cs b/Testing/unittest/Query/LeviathanTests.cs
index 1630c6d41..0ec874ab8 100644
--- a/Testing/unittest/Query/LeviathanTests.cs
+++ b/Testing/unittest/Query/LeviathanTests.cs
@@ -62,9 +62,8 @@ SELECT * WHERE {?s ?p ?o . ?s rdfs:label ?label}");
             var processor = new LeviathanQueryProcessor(store);
             Object testResult = processor.ProcessQuery(q);
 
-            if (testResult is SparqlResultSet)
+            if (testResult is SparqlResultSet rset)
             {
-                SparqlResultSet rset = (SparqlResultSet)testResult;
                 Console.WriteLine(rset.Count + " Results");
                 foreach (SparqlResult r in rset) 
                 {
@@ -446,11 +445,9 @@ SELECT * WHERE {?s ?p ?o . ?s rdfs:label ?label}");
             var q = parser.ParseFromString(query);
             Object results = processor.ProcessQuery(q);
 
-            if (results is SparqlResultSet)
+            if (results is SparqlResultSet rset)
             {
                 TestTools.ShowResults(results);
-
-                SparqlResultSet rset = (SparqlResultSet)results;
                 Assert.True(rset.IsEmpty, "Result Set should be empty");
                 Assert.Equal(3, rset.Variables.Count());
             }
diff --git a/Testing/unittest/Query/ParallelEvaluation.cs b/Testing/unittest/Query/ParallelEvaluation.cs
index 63df3e24a..0026e87cf 100644
--- a/Testing/unittest/Query/ParallelEvaluation.cs
+++ b/Testing/unittest/Query/ParallelEvaluation.cs
@@ -97,9 +97,8 @@ namespace VDS.RDF.Query
             _output.WriteLine("Normal Evaluation took " + timer.Elapsed);
             timer.Reset();
 
-            if (normResults is SparqlResultSet)
+            if (normResults is SparqlResultSet rsetNorm)
             {
-                SparqlResultSet rsetNorm = (SparqlResultSet)normResults;
                 _output.WriteLine("Normal Evaluation returned " + rsetNorm.Count + " Result(s)");
                 _output.WriteLine(string.Empty);
 
diff --git a/Testing/unittest/Query/QueryTimeouts.cs b/Testing/unittest/Query/QueryTimeouts.cs
index 97004d9db..0e8fe3398 100644
--- a/Testing/unittest/Query/QueryTimeouts.cs
+++ b/Testing/unittest/Query/QueryTimeouts.cs
@@ -123,10 +123,8 @@ namespace VDS.RDF.Query
                     //Run the Query
                     Object results = processor.ProcessQuery(q);
                     Assert.IsAssignableFrom<SparqlResultSet>(results);
-                    if (results is SparqlResultSet)
+                    if (results is SparqlResultSet rset)
                     {
-                        SparqlResultSet rset = (SparqlResultSet)results;
-
                         Console.WriteLine("Requested Timeout: " + t + " - Actual Timeout: " + expected + "ms - Results: " + rset.Count + " - Query Time: " + q.QueryExecutionTime);
                         Assert.True(rset.Count <= expectedResults, "Results should be <= expected");
                     }
@@ -315,9 +313,8 @@ namespace VDS.RDF.Query
                 LeviathanQueryProcessor processor = new LeviathanQueryProcessor(AsDataset(store));
                 Object results = processor.ProcessQuery(q);
                 Assert.IsAssignableFrom<SparqlResultSet>(results);
-                if (results is SparqlResultSet)
+                if (results is SparqlResultSet rset)
                 {
-                    SparqlResultSet rset = (SparqlResultSet)results;
                     Console.WriteLine("Results: " + rset.Count + " - Query Time: " + q.QueryExecutionTime);
                     Assert.Equal(g.Triples.Count * g.Triples.Count, rset.Count);
                 }
@@ -349,9 +346,8 @@ namespace VDS.RDF.Query
                 LeviathanQueryProcessor processor = new LeviathanQueryProcessor(AsDataset(store));
                 Object results = processor.ProcessQuery(q);
                 Assert.IsAssignableFrom<SparqlResultSet>(results);
-                if (results is SparqlResultSet)
+                if (results is SparqlResultSet rset)
                 {
-                    SparqlResultSet rset = (SparqlResultSet)results;
                     Console.WriteLine("Results: " + rset.Count + " - Query Time: " + q.QueryExecutionTime);
                     Assert.True(rset.Count < (g.Triples.Count * g.Triples.Count * g.Triples.Count));
                 }
diff --git a/Testing/unittest/Query/SparqlNewFunctions.cs b/Testing/unittest/Query/SparqlNewFunctions.cs
index 3849ece0d..862942a7c 100644
--- a/Testing/unittest/Query/SparqlNewFunctions.cs
+++ b/Testing/unittest/Query/SparqlNewFunctions.cs
@@ -86,8 +86,8 @@ namespace VDS.RDF.Query
 
             TripleStore store = new TripleStore();
             LeviathanQueryProcessor processor = new LeviathanQueryProcessor(store);
-            SparqlResultSet results = processor.ProcessQuery(q) as SparqlResultSet;
-            if (results != null)
+
+            if (processor.ProcessQuery(q) is SparqlResultSet results)
             {
                 Assert.True(results.Result, "Result should be true");
             }
@@ -105,9 +105,8 @@ namespace VDS.RDF.Query
             g.LoadFromFile("resources\\InferenceTest.ttl");
 
             Object results = g.ExecuteQuery(query);
-            if (results is SparqlResultSet)
+            if (results is SparqlResultSet rset)
             {
-                SparqlResultSet rset = (SparqlResultSet)results;
                 TestTools.ShowResults(rset);
             }
             else
diff --git a/Testing/unittest/Query/SparqlParsingComplex.cs b/Testing/unittest/Query/SparqlParsingComplex.cs
index 7335f459d..bb9959ecb 100644
--- a/Testing/unittest/Query/SparqlParsingComplex.cs
+++ b/Testing/unittest/Query/SparqlParsingComplex.cs
@@ -74,9 +74,8 @@ namespace VDS.RDF.Query
             SparqlQuery q = parser.ParseFromString(query);
 
             Object results = g.ExecuteQuery(q);
-            if (results is SparqlResultSet)
+            if (results is SparqlResultSet rset)
             {
-                SparqlResultSet rset = (SparqlResultSet)results;
                 TestTools.ShowResults(rset);
 
                 Assert.True(rset.All(r => r.HasValue("s") && r.HasValue("p") && r.HasValue("o")), "All Results should have had ?s, ?p and ?o variables");
diff --git a/Testing/unittest/Query/SparqlTests.cs b/Testing/unittest/Query/SparqlTests.cs
index 70398e3b0..248b47777 100644
--- a/Testing/unittest/Query/SparqlTests.cs
+++ b/Testing/unittest/Query/SparqlTests.cs
@@ -346,10 +346,8 @@ where {
 
             Object results = ExecuteQuery(store, query);
             Assert.IsAssignableFrom<SparqlResultSet>(results);
-            if (results is SparqlResultSet)
+            if (results is SparqlResultSet rset)
             {
-                SparqlResultSet rset = (SparqlResultSet)results;
-
                 //Serialize to both XML and JSON Results format
                 SparqlXmlWriter xmlwriter = new SparqlXmlWriter();
                 xmlwriter.Save(rset, "results.xml");
@@ -512,9 +510,8 @@ SELECT * WHERE {?s rdfs:label ?label . ?label bif:contains " + "\"London\" } LIM
 
             Object results = g.ExecuteQuery(query);
             Assert.IsAssignableFrom<SparqlResultSet>(results);
-            if (results is SparqlResultSet)
+            if (results is SparqlResultSet rset)
             {
-                SparqlResultSet rset = (SparqlResultSet)results;
                 foreach (SparqlResult r in rset)
                 {
                     Console.WriteLine(r);
diff --git a/Testing/unittest/Storage/AllegroGraphTests.cs b/Testing/unittest/Storage/AllegroGraphTests.cs
index f0b3ec270..86ced4eda 100644
--- a/Testing/unittest/Storage/AllegroGraphTests.cs
+++ b/Testing/unittest/Storage/AllegroGraphTests.cs
@@ -190,9 +190,9 @@ namespace VDS.RDF.Storage
             Assert.False(g.Equals(h), "Graph retrieved should not be equal to original Graph");
 
             Object results = agraph.Query("ASK WHERE { GRAPH <http://example.org/AllegroGraphTest> { <http://example.org/vehicles/FordFiesta> ?p ?o } }");
-            if (results is SparqlResultSet)
+            if (results is SparqlResultSet sparqlResultSet)
             {
-                Assert.False(((SparqlResultSet) results).Result, "There should no longer be any triples about the Ford Fiesta present");
+                Assert.False(sparqlResultSet.Result, "There should no longer be any triples about the Ford Fiesta present");
             }
         }
 
@@ -271,9 +271,9 @@ namespace VDS.RDF.Storage
 
             Object results = agraph.Query(describe);
             Assert.IsAssignableFrom<IGraph>(results);
-            if (results is IGraph)
+            if (results is IGraph iGraph)
             {
-                TestTools.ShowGraph((IGraph) results);
+                TestTools.ShowGraph(iGraph);
             }
         }
 
diff --git a/Testing/unittest/Storage/FusekiTest.cs b/Testing/unittest/Storage/FusekiTest.cs
index 4c8f0957e..87a8c62f1 100644
--- a/Testing/unittest/Storage/FusekiTest.cs
+++ b/Testing/unittest/Storage/FusekiTest.cs
@@ -439,9 +439,9 @@ namespace VDS.RDF.Storage
                 FusekiConnector fuseki = FusekiTest.GetConnection();
 
                 Object results = fuseki.Query("DESCRIBE <http://example.org/vehicles/FordFiesta>");
-                if (results is IGraph)
+                if (results is IGraph iGraph)
                 {
-                    TestTools.ShowGraph((IGraph)results);
+                    TestTools.ShowGraph(iGraph);
                 }
                 else
                 {
diff --git a/Testing/unittest/Storage/ReadWriteSparqlTest.cs b/Testing/unittest/Storage/ReadWriteSparqlTest.cs
index d90abd0de..a107b9871 100644
--- a/Testing/unittest/Storage/ReadWriteSparqlTest.cs
+++ b/Testing/unittest/Storage/ReadWriteSparqlTest.cs
@@ -408,9 +408,9 @@ namespace VDS.RDF.Storage
                 ReadWriteSparqlConnector readWrite = ReadWriteSparqlTests.GetConnection();
 
                 Object results = readWrite.Query("DESCRIBE <http://example.org/vehicles/FordFiesta>");
-                if (results is IGraph)
+                if (results is IGraph iGraph)
                 {
-                    TestTools.ShowGraph((IGraph)results);
+                    TestTools.ShowGraph(iGraph);
                 }
                 else
                 {
diff --git a/Testing/unittest/Storage/VirtuosoTest.cs b/Testing/unittest/Storage/VirtuosoTest.cs
index e22af9c20..569029ce2 100644
--- a/Testing/unittest/Storage/VirtuosoTest.cs
+++ b/Testing/unittest/Storage/VirtuosoTest.cs
@@ -737,10 +737,10 @@ namespace VDS.RDF.Storage
                 manager.UpdateGraph("http://localhost/insertBNodeTest", t.AsEnumerable(), null);
 
                 Object results = manager.Query("ASK WHERE { GRAPH <http://localhost/insertBNodeTest> { ?s a <http:///example.org/object> } }");
-                if (results is SparqlResultSet)
+                if (results is SparqlResultSet sparqlResultSet)
                 {
                     TestTools.ShowResults(results);
-                    Assert.True(((SparqlResultSet)results).Result, "Expected a true result");
+                    Assert.True(sparqlResultSet.Result, "Expected a true result");
                 }
                 else
                 {
@@ -768,10 +768,10 @@ namespace VDS.RDF.Storage
                 manager.UpdateGraph("http://localhost/deleteBNodeTest", t.AsEnumerable(), null);
 
                 Object results = manager.Query("ASK WHERE { GRAPH <http://localhost/deleteBNodeTest> { ?s a <http://example.org/object> } }");
-                if (results is SparqlResultSet)
+                if (results is SparqlResultSet sparqlResultSet)
                 {
                     TestTools.ShowResults(results);
-                    Assert.True(((SparqlResultSet)results).Result, "Expected a true result");
+                    Assert.True(sparqlResultSet.Result, "Expected a true result");
 
                     //Now we've ensured data is present we can first load the graph and then try to delete the given triple
                     Graph h = new Graph();
@@ -904,13 +904,11 @@ namespace VDS.RDF.Storage
             {
                 Assert.True(false, "Got a Null Result from a Query");
             }
-            else if (results is SparqlResultSet)
+            else if (results is SparqlResultSet rset)
             {
                 if (expectResultSet)
                 {
                     Console.WriteLine("Got a SPARQL Result Set as expected");
-
-                    SparqlResultSet rset = (SparqlResultSet)results;
                     Console.WriteLine("Result = " + rset.Result);
                     foreach (SparqlResult r in rset)
                     {
@@ -923,12 +921,11 @@ namespace VDS.RDF.Storage
                     Assert.True(false, "Expected a Graph but got a '" + results.GetType().ToString() + "'");
                 }
             }
-            else if (results is Graph)
+            else if (results is Graph g)
             {
                 if (!expectResultSet)
                 {
                     Console.WriteLine("Got a Graph as expected");
-                    Graph g = (Graph)results;
                     Console.WriteLine(g.Triples.Count + " Triples");
                     foreach (Triple t in g.Triples)
                     {
diff --git a/Testing/unittest/TestTools.cs b/Testing/unittest/TestTools.cs
index e2cac4c31..f14a07f3c 100644
--- a/Testing/unittest/TestTools.cs
+++ b/Testing/unittest/TestTools.cs
@@ -104,13 +104,12 @@ namespace VDS.RDF
 
         public static void ShowResults(Object results)
         {
-            if (results is IGraph)
+            if (results is IGraph iGraph)
             {
-                ShowGraph((IGraph) results);
+                ShowGraph(iGraph);
             }
-            else if (results is SparqlResultSet)
+            else if (results is SparqlResultSet resultSet)
             {
-                SparqlResultSet resultSet = (SparqlResultSet) results;
                 Console.WriteLine("Result: " + resultSet.Result);
                 Console.WriteLine(resultSet.Results.Count + " Results");
                 foreach (SparqlResult r in resultSet.Results)
diff --git a/Testing/unittest/Update/UpdateTests1.cs b/Testing/unittest/Update/UpdateTests1.cs
index 12a21037a..9ae4dfd1a 100644
--- a/Testing/unittest/Update/UpdateTests1.cs
+++ b/Testing/unittest/Update/UpdateTests1.cs
@@ -724,7 +724,7 @@ _:template        tpl:PropertyRole  'ValueB'^^xsd:String .";
             processor.ProcessCommandSet(cmds);
 
             Assert.NotEqual(origTriples, g.Triples.Count);
-            Assert.False(g.GetTriplesWithPredicate(g.CreateUriNode(new Uri("http://xmlns.com/foaf/0.1/mbox"))).Where(t => t.Object.ToString().Contains("dotnetrdf.org")).Any(), "Expected triples to have been deleted");
+            Assert.False(g.GetTriplesWithPredicate(g.CreateUriNode(new Uri("http://xmlns.com/foaf/0.1/mbox"))).Any(t => t.Object.ToString().Contains("dotnetrdf.org")), "Expected triples to have been deleted");
         }
     }
 }
diff --git a/Testing/unittest/Writing/CompressionTests.cs b/Testing/unittest/Writing/CompressionTests.cs
index 3ff2dd18d..e6c0a7f48 100644
--- a/Testing/unittest/Writing/CompressionTests.cs
+++ b/Testing/unittest/Writing/CompressionTests.cs
@@ -58,13 +58,13 @@ namespace VDS.RDF.Writing
             {
 
                 IRdfWriter writer = kvp.Key;
-                if (writer is ICompressingWriter)
+                if (writer is ICompressingWriter iCompressingWriter)
                 {
-                    ((ICompressingWriter)writer).CompressionLevel = WriterCompressionLevel.High;
+                    iCompressingWriter.CompressionLevel = WriterCompressionLevel.High;
                 }
-                if (writer is IHighSpeedWriter)
+                if (writer is IHighSpeedWriter iHighSpeedWriter)
                 {
-                    ((IHighSpeedWriter)writer).HighSpeedModePermitted = false;
+                    iHighSpeedWriter.HighSpeedModePermitted = false;
                 }
                 System.IO.StringWriter strWriter = new System.IO.StringWriter();
                 writer.Save(g, strWriter);
diff --git a/Testing/unittest/Writing/SparqlXmlTests.cs b/Testing/unittest/Writing/SparqlXmlTests.cs
index 6ca016087..3b77ceadd 100644
--- a/Testing/unittest/Writing/SparqlXmlTests.cs
+++ b/Testing/unittest/Writing/SparqlXmlTests.cs
@@ -54,9 +54,8 @@ namespace VDS.RDF.Writing
             store.Add(g);
 
             Object results = ExecuteQuery(store, "SELECT DISTINCT ?g WHERE { GRAPH ?g { ?s ?p ?o } }");
-            if (results is SparqlResultSet)
+            if (results is SparqlResultSet rset)
             {
-                SparqlResultSet rset = (SparqlResultSet)results;
                 SparqlXmlWriter writer = new SparqlXmlWriter();
                 writer.Save(rset, "temp.srx");
 
@@ -98,9 +97,8 @@ namespace VDS.RDF.Writing
             store.Add(g);
 
             Object results = ExecuteQuery(store, "SELECT * WHERE { ?s ?p ?o }");
-            if (results is SparqlResultSet)
+            if (results is SparqlResultSet rset)
             {
-                SparqlResultSet rset = (SparqlResultSet)results;
                 SparqlXmlWriter writer = new SparqlXmlWriter();
                 writer.Save(rset, "temp.srx");
 
diff --git a/Testing/unittest/Writing/StoreWriterTests.cs b/Testing/unittest/Writing/StoreWriterTests.cs
index 6571a8f30..2509de80e 100644
--- a/Testing/unittest/Writing/StoreWriterTests.cs
+++ b/Testing/unittest/Writing/StoreWriterTests.cs
@@ -47,13 +47,13 @@ namespace VDS.RDF.Writing
             g.BaseUri = new Uri("http://example.org/cyrillic");
             store.Add(g);
 
-            if (writer is ICompressingWriter)
+            if (writer is ICompressingWriter iCompressingWriter)
             {
-                ((ICompressingWriter)writer).CompressionLevel = compressionLevel;
+                iCompressingWriter.CompressionLevel = compressionLevel;
             }
-            if (writer is IMultiThreadedWriter)
+            if (writer is IMultiThreadedWriter iMultiThreadedWriter)
             {
-                ((IMultiThreadedWriter)writer).UseMultiThreadedWriting = useMultiThreaded;
+                iMultiThreadedWriter.UseMultiThreadedWriting = useMultiThreaded;
             }
             System.IO.StringWriter strWriter = new System.IO.StringWriter();
             writer.Save(store, strWriter);
