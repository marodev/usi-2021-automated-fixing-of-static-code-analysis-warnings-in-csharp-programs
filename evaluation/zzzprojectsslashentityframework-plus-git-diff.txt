diff --git a/src/Z.Test.EntityFramework.Plus.EFCore.Shared/_Model/Methods/Insert.cs b/src/Z.Test.EntityFramework.Plus.EFCore.Shared/_Model/Methods/Insert.cs
index 3ddf8df..0c092aa 100644
--- a/src/Z.Test.EntityFramework.Plus.EFCore.Shared/_Model/Methods/Insert.cs
+++ b/src/Z.Test.EntityFramework.Plus.EFCore.Shared/_Model/Methods/Insert.cs
@@ -42,40 +42,22 @@ public static void InsertFactory<T>(T item, int i)
                 PropertyInfo property;
 
                 property = item.GetType().GetProperty("ColumnInt", BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance);
-                if (property != null)
-                {
-                    property.SetValue(item, i);
-                }
+                property?.SetValue(item, i);
 
                 property = item.GetType().GetProperty("Column1", BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance);
-                if (property != null)
-                {
-                    property.SetValue(item, i);
-                }
+                property?.SetValue(item, i);
 
                 property = item.GetType().GetProperty("Column2", BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance);
-                if (property != null)
-                {
-                    property.SetValue(item, i);
-                }
+                property?.SetValue(item, i);
 
                 property = item.GetType().GetProperty("Column3", BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance);
-                if (property != null)
-                {
-                    property.SetValue(item, i);
-                }
+                property?.SetValue(item, i);
 
                 property = item.GetType().GetProperty("ColumnCat");
-                if (property != null)
-                {
-                    property.SetValue(item, i);
-                }
+                property?.SetValue(item, i);
 
                 property = item.GetType().GetProperty("ColumnDog");
-                if (property != null)
-                {
-                    property.SetValue(item, i);
-                }
+                property?.SetValue(item, i);
             }
         }
 
diff --git a/src/shared/Z.EF.Plus.Audit.Shared/Audit/AuditEntityAdded.cs b/src/shared/Z.EF.Plus.Audit.Shared/Audit/AuditEntityAdded.cs
index 8f62fda..91ab396 100644
--- a/src/shared/Z.EF.Plus.Audit.Shared/Audit/AuditEntityAdded.cs
+++ b/src/shared/Z.EF.Plus.Audit.Shared/Audit/AuditEntityAdded.cs
@@ -64,8 +64,7 @@ public static void AuditEntityAdded(AuditEntry auditEntry, ObjectStateEntry obje
                     value = null;
                 }
 
-                var valueRecord = value as DbUpdatableDataRecord;
-                if (valueRecord != null)
+                if (value is DbUpdatableDataRecord valueRecord)
                 {
                     // Complex Type
                     AuditEntityAdded(auditEntry, objectStateEntry, valueRecord, string.Concat(prefix, name, "."));
diff --git a/src/shared/Z.EF.Plus.Audit.Shared/Audit/AuditEntityDeleted.cs b/src/shared/Z.EF.Plus.Audit.Shared/Audit/AuditEntityDeleted.cs
index 33b46dd..4fe0ec2 100644
--- a/src/shared/Z.EF.Plus.Audit.Shared/Audit/AuditEntityDeleted.cs
+++ b/src/shared/Z.EF.Plus.Audit.Shared/Audit/AuditEntityDeleted.cs
@@ -66,8 +66,7 @@ public static void AuditEntityDeleted(AuditEntry entry, ObjectStateEntry objectS
                     value = null;
                 }
 
-                var valueRecord = value as DbDataRecord;
-                if (valueRecord != null)
+                if (value is DbDataRecord valueRecord)
                 {
                     // Complex Type
                     AuditEntityDeleted(entry, objectStateEntry, valueRecord, string.Concat(prefix, name, "."));
diff --git a/src/shared/Z.EF.Plus.Audit.Shared/Audit/AuditEntityModified.cs b/src/shared/Z.EF.Plus.Audit.Shared/Audit/AuditEntityModified.cs
index d78f1cb..278c98c 100644
--- a/src/shared/Z.EF.Plus.Audit.Shared/Audit/AuditEntityModified.cs
+++ b/src/shared/Z.EF.Plus.Audit.Shared/Audit/AuditEntityModified.cs
@@ -86,8 +86,7 @@ public static void AuditEntityModified(Audit audit, AuditEntry entry, ObjectStat
                     currentValue = null;
                 }
 
-                var valueRecord = originalValue as DbDataRecord;
-                if (valueRecord != null)
+                if (originalValue is DbDataRecord valueRecord)
                 {
                     // Complex Type
                     AuditEntityModified(audit, entry, objectStateEntry, valueRecord, currentValue as DbUpdatableDataRecord, string.Concat(prefix, name, "."));
diff --git a/src/shared/Z.EF.Plus.Audit.Shared/AuditConfiguration/SoftAdded.cs b/src/shared/Z.EF.Plus.Audit.Shared/AuditConfiguration/SoftAdded.cs
index 094c74f..ef9412f 100644
--- a/src/shared/Z.EF.Plus.Audit.Shared/AuditConfiguration/SoftAdded.cs
+++ b/src/shared/Z.EF.Plus.Audit.Shared/AuditConfiguration/SoftAdded.cs
@@ -33,8 +33,7 @@ public AuditConfiguration SoftAdded(Func<object, bool> softAddPredicate)
         {
             SoftAddedPredicates.Add(o =>
             {
-                var entity = o as T;
-                return entity != null && softAddPredicate(entity);
+                return o is T entity && softAddPredicate(entity);
             });
 
             return this;
diff --git a/src/shared/Z.EF.Plus.Audit.Shared/AuditConfiguration/SoftDeleted.cs b/src/shared/Z.EF.Plus.Audit.Shared/AuditConfiguration/SoftDeleted.cs
index 6328b85..595b770 100644
--- a/src/shared/Z.EF.Plus.Audit.Shared/AuditConfiguration/SoftDeleted.cs
+++ b/src/shared/Z.EF.Plus.Audit.Shared/AuditConfiguration/SoftDeleted.cs
@@ -33,8 +33,7 @@ public AuditConfiguration SoftDeleted(Func<object, bool> softDeletePredicate)
         {
             SoftDeletedPredicates.Add(o =>
             {
-                var entity = o as T;
-                return entity != null && softDeletePredicate(entity);
+                return o is T entity && softDeletePredicate(entity);
             });
 
             return this;
diff --git a/src/shared/Z.EF.Plus.QueryCache.Shared/QueryCacheItemTracker.cs b/src/shared/Z.EF.Plus.QueryCache.Shared/QueryCacheItemTracker.cs
index 52f2024..0b80895 100644
--- a/src/shared/Z.EF.Plus.QueryCache.Shared/QueryCacheItemTracker.cs
+++ b/src/shared/Z.EF.Plus.QueryCache.Shared/QueryCacheItemTracker.cs
@@ -66,7 +66,7 @@ public void Dispose()
                             {
                                 var objectContextInitialized = objectContextInitializedProperty.GetValue(internalContext, null);
 
-                                if (objectContextInitialized != null && objectContextInitialized is ObjectContext objectContext)
+                                if (objectContextInitialized is ObjectContext objectContext)
                                 {
                                     Context = objectContext;
                                     AddHook();
diff --git a/src/shared/Z.EF.Plus.QueryDeferred.Shared/QueryDeferred.cs b/src/shared/Z.EF.Plus.QueryDeferred.Shared/QueryDeferred.cs
index 871e162..d510eb1 100644
--- a/src/shared/Z.EF.Plus.QueryDeferred.Shared/QueryDeferred.cs
+++ b/src/shared/Z.EF.Plus.QueryDeferred.Shared/QueryDeferred.cs
@@ -94,6 +94,49 @@ public Task<TResult> ExecuteAsync()
         public Task<TResult> ExecuteAsync(CancellationToken cancellationToken)
         {
 #if EF5
+
+/* Unmerged change from project 'Z.EntityFramework.Plus.EFCore.NETStandard20'
+Before:
+            return Task.Run(() => Execute(), cancellationToken);
+#elif EF6
+            var asyncQueryProvider = Query.Provider as IDbAsyncQueryProvider;
+
+            return asyncQueryProvider != null ?
+                asyncQueryProvider.ExecuteAsync<TResult>(Expression, cancellationToken) :
+                Task.Run(() => Execute(), cancellationToken);
+#elif EFCORE_2X
+            var asyncQueryProvider = Query.Provider as IAsyncQueryProvider;
+
+            return asyncQueryProvider != null ?
+After:
+            return Query.Provider is IAsyncQueryProvider asyncQueryProvider ?
+*/
+
+/* Unmerged change from project 'Z.EntityFramework.Plus.EFCore3x.NETStandard20'
+Before:
+            return Task.Run(() => Execute(), cancellationToken);
+#elif EF6
+            var asyncQueryProvider = Query.Provider as IDbAsyncQueryProvider;
+
+            return asyncQueryProvider != null ?
+                asyncQueryProvider.ExecuteAsync<TResult>(Expression, cancellationToken) :
+                Task.Run(() => Execute(), cancellationToken);
+#elif EFCORE_2X
+            var asyncQueryProvider = Query.Provider as IAsyncQueryProvider;
+
+            return asyncQueryProvider != null ?
+                asyncQueryProvider.ExecuteAsync<TResult>(Expression, cancellationToken) :
+                Task.Run(() => Execute(), cancellationToken);
+#elif EFCORE_3X
+            var asyncQueryProvider = Query.Provider as IAsyncQueryProvider;
+
+            return asyncQueryProvider != null ?
+After:
+            return Query.Provider is IAsyncQueryProvider asyncQueryProvider ?
+*/
+
+/* Unmerged change from project 'Z.EntityFramework.Plus.EFCore3x.NETStandard21'
+Before:
             return Task.Run(() => Execute(), cancellationToken);
 #elif EF6
             var asyncQueryProvider = Query.Provider as IDbAsyncQueryProvider;
@@ -110,6 +153,23 @@ public Task<TResult> ExecuteAsync(CancellationToken cancellationToken)
 #elif EFCORE_3X
             var asyncQueryProvider = Query.Provider as IAsyncQueryProvider;
 
+            return asyncQueryProvider != null ?
+After:
+            return Query.Provider is IAsyncQueryProvider asyncQueryProvider ?
+*/
+
+            return Query.Provider is IDbAsyncQueryProvider asyncQueryProvider ?
+                asyncQueryProvider.ExecuteAsync<TResult>(Expression, cancellationToken) :
+                Task.Run(() => Execute(), cancellationToken);
+#elif EFCORE_2X
+            var asyncQueryProvider = Query.Provider as IAsyncQueryProvider;
+
+            return asyncQueryProvider != null ?
+                asyncQueryProvider.ExecuteAsync<TResult>(Expression, cancellationToken) :
+                Task.Run(() => Execute(), cancellationToken);
+#elif EFCORE_3X
+            var asyncQueryProvider = Query.Provider as IAsyncQueryProvider;
+
             return asyncQueryProvider != null ?
                 asyncQueryProvider.ExecuteAsync<Task<TResult>>(Expression, cancellationToken) :
                 Task.Run(() => Execute(), cancellationToken);
diff --git a/src/shared/Z.EF.Plus.QueryDeferred.Shared/QueryDeferredExtensions.cs b/src/shared/Z.EF.Plus.QueryDeferred.Shared/QueryDeferredExtensions.cs
index a582d65..f71579d 100644
--- a/src/shared/Z.EF.Plus.QueryDeferred.Shared/QueryDeferredExtensions.cs
+++ b/src/shared/Z.EF.Plus.QueryDeferred.Shared/QueryDeferredExtensions.cs
@@ -59,8 +59,7 @@ public static partial class QueryDeferredExtensions
 
         private static Expression GetSourceExpression<TSource>(IEnumerable<TSource> source)
         {
-            var q = source as IQueryable<TSource>;
-            if (q != null) return q.Expression;
+            if (source is IQueryable<TSource> q) return q.Expression;
             return Expression.Constant(source, typeof(IEnumerable<TSource>));
         }
     }
diff --git a/src/shared/Z.EF.Plus.QueryFilterInterceptor.Shared/QueryFilterInterceptorDbCommandTree.cs b/src/shared/Z.EF.Plus.QueryFilterInterceptor.Shared/QueryFilterInterceptorDbCommandTree.cs
index b1870ae..97f3183 100644
--- a/src/shared/Z.EF.Plus.QueryFilterInterceptor.Shared/QueryFilterInterceptorDbCommandTree.cs
+++ b/src/shared/Z.EF.Plus.QueryFilterInterceptor.Shared/QueryFilterInterceptorDbCommandTree.cs
@@ -21,9 +21,7 @@ public class QueryFilterInterceptorDbCommandTree : IDbCommandTreeInterceptor
         /// <param name="interceptionContext">Contextual information associated with the call.</param>
         public void TreeCreated(DbCommandTreeInterceptionContext interceptionContext)
         {
-      
-            var dbQueryCommandTree = interceptionContext.Result as DbQueryCommandTree;
-            if (dbQueryCommandTree != null && interceptionContext.DbContexts.Count() == 1)
+            if (interceptionContext.Result is DbQueryCommandTree dbQueryCommandTree && interceptionContext.DbContexts.Count() == 1)
             {
                 var context = interceptionContext.DbContexts.First();
 
diff --git a/src/shared/Z.EF.Plus.QueryFilterInterceptor.Shared/QueryFilterInterceptorDbProjectExpression.cs b/src/shared/Z.EF.Plus.QueryFilterInterceptor.Shared/QueryFilterInterceptorDbProjectExpression.cs
index abc0151..2c3053b 100644
--- a/src/shared/Z.EF.Plus.QueryFilterInterceptor.Shared/QueryFilterInterceptorDbProjectExpression.cs
+++ b/src/shared/Z.EF.Plus.QueryFilterInterceptor.Shared/QueryFilterInterceptorDbProjectExpression.cs
@@ -22,9 +22,8 @@ public class QueryFilterInterceptorDbProjectExpression : DefaultExpressionVisito
         public override DbExpression Visit(DbProjectExpression expression)
         {
             var baseExpression = base.Visit(expression);
-            var baseDbProject = baseExpression as DbProjectExpression;
 
-            if (baseDbProject != null && !baseDbProject.ResultType.ToString().StartsWith("Transient.collection[Edm.Int32("))
+            if (baseExpression is DbProjectExpression baseDbProject && !baseDbProject.ResultType.ToString().StartsWith("Transient.collection[Edm.Int32("))
             {
                 return baseDbProject.Input.Expression;
             }
diff --git a/src/shared/Z.EF.Plus.QueryFuture.Shared/BaseQueryFuture.cs b/src/shared/Z.EF.Plus.QueryFuture.Shared/BaseQueryFuture.cs
index c2e8808..6342043 100644
--- a/src/shared/Z.EF.Plus.QueryFuture.Shared/BaseQueryFuture.cs
+++ b/src/shared/Z.EF.Plus.QueryFuture.Shared/BaseQueryFuture.cs
@@ -647,10 +647,7 @@ public IEnumerator<T> GetQueryEnumerator<T>(DbDataReader reader)
                 // }
                 var fielReaderColumns = enumerator.GetType().GetField("_readerColumns", BindingFlags.FlattenHierarchy | BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic);
 
-                if (fielReaderColumns != null)
-                {
-	                fielReaderColumns.SetValue(enumerator, null);
-                }
+                fielReaderColumns?.SetValue(enumerator, null);
             }
 
             return enumerator;
diff --git a/src/shared/Z.EF.Plus.QueryIncludeFilter.Shared/QueryIncludeFilterLazyLoading.cs b/src/shared/Z.EF.Plus.QueryIncludeFilter.Shared/QueryIncludeFilterLazyLoading.cs
index 81c1c83..58ce412 100644
--- a/src/shared/Z.EF.Plus.QueryIncludeFilter.Shared/QueryIncludeFilterLazyLoading.cs
+++ b/src/shared/Z.EF.Plus.QueryIncludeFilter.Shared/QueryIncludeFilterLazyLoading.cs
@@ -53,11 +53,10 @@ public static void SetLazyLoaded(object item, List<BaseQueryIncludeFilterChild>
         /// <param name="index">Zero-based index of the.</param>
         public static void SetLazyLoaded(object currentItem, List<string> paths, int index)
         {
-            var currentItemEnumerable = currentItem as IEnumerable;
  
             var path = paths[index];
 
-            if (currentItemEnumerable != null)
+            if (currentItem is IEnumerable currentItemEnumerable)
             {
                 foreach (var item in currentItemEnumerable)
                 {
diff --git a/src/shared/Z.EF.Plus.QueryIncludeFilter.Shared/QueryIncludeFilterNullCollection.cs b/src/shared/Z.EF.Plus.QueryIncludeFilter.Shared/QueryIncludeFilterNullCollection.cs
index ad545b3..3d6a6ed 100644
--- a/src/shared/Z.EF.Plus.QueryIncludeFilter.Shared/QueryIncludeFilterNullCollection.cs
+++ b/src/shared/Z.EF.Plus.QueryIncludeFilter.Shared/QueryIncludeFilterNullCollection.cs
@@ -52,10 +52,9 @@ public static void NullCollectionToEmpty(object item, List<BaseQueryIncludeFilte
         /// <param name="index">Zero-based index of the.</param>
         public static void CheckNullRecursive(object currentItem, List<string> paths, int index)
         {
-            var currentItemEnumerable = currentItem as IEnumerable;
             var path = paths[index];
 
-            if (currentItemEnumerable != null)
+            if (currentItem is IEnumerable currentItemEnumerable)
             {
                 foreach (var item in currentItemEnumerable)
                 {
diff --git a/src/shared/Z.EF.Plus.QueryIncludeFilter.Shared/QueryIncludeFilterProvider.cs b/src/shared/Z.EF.Plus.QueryIncludeFilter.Shared/QueryIncludeFilterProvider.cs
index a38b985..4f25d1b 100644
--- a/src/shared/Z.EF.Plus.QueryIncludeFilter.Shared/QueryIncludeFilterProvider.cs
+++ b/src/shared/Z.EF.Plus.QueryIncludeFilter.Shared/QueryIncludeFilterProvider.cs
@@ -111,12 +111,9 @@ public TResult Execute<TResult>(Expression expression)
             var isExpressionSupported = false;
 
             var firstExpression = methodCall.Arguments.FirstOrDefault(x => x.Type.IsSubclassOf(typeof (Expression)));
-            var unaryExpression = firstExpression as UnaryExpression;
-            if (firstExpression != null && unaryExpression != null && methodCall.Arguments.Count == 2)
+            if (firstExpression != null && firstExpression is UnaryExpression unaryExpression && methodCall.Arguments.Count == 2)
             {
-                var lambdaExpression = unaryExpression.Operand as LambdaExpression;
-
-                if (lambdaExpression != null)
+                if (unaryExpression.Operand is LambdaExpression lambdaExpression)
                 {
                     if (lambdaExpression.Type == typeof (Func<,>).MakeGenericType(currentQuery.ElementType, typeof (bool)))
                     {
diff --git a/src/shared/Z.EF.Plus.QueryIncludeFilterCore.Shared/QueryIncludeFilterChild`2.cs b/src/shared/Z.EF.Plus.QueryIncludeFilterCore.Shared/QueryIncludeFilterChild`2.cs
index 720ba64..545182e 100644
--- a/src/shared/Z.EF.Plus.QueryIncludeFilterCore.Shared/QueryIncludeFilterChild`2.cs
+++ b/src/shared/Z.EF.Plus.QueryIncludeFilterCore.Shared/QueryIncludeFilterChild`2.cs
@@ -92,9 +92,9 @@ public override void CreateIncludeQuery(IQueryable rootQuery)
                 {
                     var subQuery = queryable.Select(Filter);
 
-                    if (subQuery is QueryIncludeFilterParentQueryable<TChild>)
+                    if (subQuery is QueryIncludeFilterParentQueryable<TChild> TChilds)
                     {
-                        subQuery = ((QueryIncludeFilterParentQueryable<TChild>) subQuery).OriginalQueryable;
+                        subQuery = TChilds.OriginalQueryable;
                     }
 
                     subQuery.Future();
diff --git a/src/shared/Z.EF.Plus.QueryIncludeFilterCore.Shared/QueryIncludeFilterNullCollection.cs b/src/shared/Z.EF.Plus.QueryIncludeFilterCore.Shared/QueryIncludeFilterNullCollection.cs
index 3839f4a..52745dd 100644
--- a/src/shared/Z.EF.Plus.QueryIncludeFilterCore.Shared/QueryIncludeFilterNullCollection.cs
+++ b/src/shared/Z.EF.Plus.QueryIncludeFilterCore.Shared/QueryIncludeFilterNullCollection.cs
@@ -52,10 +52,9 @@ public static void NullCollectionToEmpty(object item, List<BaseQueryIncludeFilte
         /// <param name="index">Zero-based index of the.</param>
         public static void CheckNullRecursive(object currentItem, List<string> paths, int index)
         {
-            var currentItemEnumerable = currentItem as IEnumerable;
             var path = paths[index];
 
-            if (currentItemEnumerable != null)
+            if (currentItem is IEnumerable currentItemEnumerable)
             {
                 foreach (var item in currentItemEnumerable)
                 {
diff --git a/src/shared/Z.EF.Plus.QueryIncludeFilterCore.Shared/QueryIncludeFilterProvider.cs b/src/shared/Z.EF.Plus.QueryIncludeFilterCore.Shared/QueryIncludeFilterProvider.cs
index 368aced..bf6a1a6 100644
--- a/src/shared/Z.EF.Plus.QueryIncludeFilterCore.Shared/QueryIncludeFilterProvider.cs
+++ b/src/shared/Z.EF.Plus.QueryIncludeFilterCore.Shared/QueryIncludeFilterProvider.cs
@@ -118,8 +118,8 @@ public TResult Execute<TResult>(Expression expression)
             if (firstExpression != null && methodCall.Arguments.Count == 2)
             {
                 var quoteExpression = ((UnaryExpression) firstExpression).Operand;
-                var lambdaExpression = quoteExpression as LambdaExpression;
-                if (lambdaExpression != null)
+
+                if (quoteExpression is LambdaExpression lambdaExpression)
                 {
                     if (lambdaExpression.Type == typeof (Func<,>).MakeGenericType(currentQuery.ElementType, typeof (bool)))
                     {
diff --git a/src/shared/Z.EF.Plus.QueryIncludeOptimized.Shared/QueryIncludeOptimizedChild`2.cs b/src/shared/Z.EF.Plus.QueryIncludeOptimized.Shared/QueryIncludeOptimizedChild`2.cs
index 217ff46..3f33962 100644
--- a/src/shared/Z.EF.Plus.QueryIncludeOptimized.Shared/QueryIncludeOptimizedChild`2.cs
+++ b/src/shared/Z.EF.Plus.QueryIncludeOptimized.Shared/QueryIncludeOptimizedChild`2.cs
@@ -50,9 +50,9 @@ public override void CreateIncludeQuery(IQueryable rootQuery)
             {
                 var subQuery = queryable.Select(Filter);
 
-                if (subQuery is QueryIncludeOptimizedParentQueryable<TChild>)
+                if (subQuery is QueryIncludeOptimizedParentQueryable<TChild> TChilds)
                 {
-                    subQuery = ((QueryIncludeOptimizedParentQueryable<TChild>) subQuery).OriginalQueryable;
+                    subQuery = TChilds.OriginalQueryable;
                 }
 
                 subQuery.Future();
diff --git a/src/shared/Z.EF.Plus.QueryIncludeOptimized.Shared/QueryIncludeOptimizedLazyLoading.cs b/src/shared/Z.EF.Plus.QueryIncludeOptimized.Shared/QueryIncludeOptimizedLazyLoading.cs
index f42cbfb..9981c3d 100644
--- a/src/shared/Z.EF.Plus.QueryIncludeOptimized.Shared/QueryIncludeOptimizedLazyLoading.cs
+++ b/src/shared/Z.EF.Plus.QueryIncludeOptimized.Shared/QueryIncludeOptimizedLazyLoading.cs
@@ -53,10 +53,9 @@ public static void SetLazyLoaded(object item, List<BaseQueryIncludeOptimizedChil
         /// <param name="index">Zero-based index of the.</param>
         public static void SetLazyLoaded(object currentItem, List<string> paths, int index)
         {
-            var currentItemEnumerable = currentItem as IEnumerable;
             var path = paths[index];
 
-            if (currentItemEnumerable != null)
+            if (currentItem is IEnumerable currentItemEnumerable)
             {
                 foreach (var item in currentItemEnumerable)
                 {
diff --git a/src/shared/Z.EF.Plus.QueryIncludeOptimized.Shared/QueryIncludeOptimizedNullCollection.cs b/src/shared/Z.EF.Plus.QueryIncludeOptimized.Shared/QueryIncludeOptimizedNullCollection.cs
index 664d256..8fa9bcf 100644
--- a/src/shared/Z.EF.Plus.QueryIncludeOptimized.Shared/QueryIncludeOptimizedNullCollection.cs
+++ b/src/shared/Z.EF.Plus.QueryIncludeOptimized.Shared/QueryIncludeOptimizedNullCollection.cs
@@ -52,10 +52,9 @@ public static void NullCollectionToEmpty(object item, List<BaseQueryIncludeOptim
         /// <param name="index">Zero-based index of the.</param>
         public static void CheckNullRecursive(object currentItem, List<string> paths, int index)
         {
-            var currentItemEnumerable = currentItem as IEnumerable;
             var path = paths[index];
 
-            if (currentItemEnumerable != null)
+            if (currentItem is IEnumerable currentItemEnumerable)
             {
                 foreach (var item in currentItemEnumerable)
                 {
diff --git a/src/shared/Z.EF.Plus.QueryIncludeOptimized.Shared/QueryIncludeOptimizedProvider.cs b/src/shared/Z.EF.Plus.QueryIncludeOptimized.Shared/QueryIncludeOptimizedProvider.cs
index 5de01ed..55376b6 100644
--- a/src/shared/Z.EF.Plus.QueryIncludeOptimized.Shared/QueryIncludeOptimizedProvider.cs
+++ b/src/shared/Z.EF.Plus.QueryIncludeOptimized.Shared/QueryIncludeOptimizedProvider.cs
@@ -143,8 +143,8 @@ public TResult Execute<TResult>(Expression expression)
             if (firstExpression != null && methodCall.Arguments.Count == 2)
             {
                 var quoteExpression = ((UnaryExpression) firstExpression).Operand;
-                var lambdaExpression = quoteExpression as LambdaExpression;
-                if (lambdaExpression != null)
+
+                if (quoteExpression is LambdaExpression lambdaExpression)
                 {
                     if (lambdaExpression.Type == typeof (Func<,>).MakeGenericType(currentQuery.ElementType, typeof (bool)))
                     {
diff --git a/src/shared/Z.EF.Plus._Core.Shared/EF/DbParameter/DbParameter.CopyFrom.cs b/src/shared/Z.EF.Plus._Core.Shared/EF/DbParameter/DbParameter.CopyFrom.cs
index dc1b1ba..7b95588 100644
--- a/src/shared/Z.EF.Plus._Core.Shared/EF/DbParameter/DbParameter.CopyFrom.cs
+++ b/src/shared/Z.EF.Plus._Core.Shared/EF/DbParameter/DbParameter.CopyFrom.cs
@@ -39,9 +39,8 @@ public static void CopyFrom(this DbParameter @this, DbParameter from)
             @this.Size = from.Size;
 
 #if !EFCORE
-            if (from is SqlParameter)
+            if (from is SqlParameter fromSql)
             {
-                var fromSql = (SqlParameter)from;
                 var toSql = (SqlParameter)@this;
 
                 toSql.SqlDbType = fromSql.SqlDbType;
@@ -79,9 +78,8 @@ public static void CopyFrom(this DbParameter @this, DbParameter from, string new
             @this.Size = from.Size;
 
 #if !EFCORE
-            if (from is SqlParameter)
+            if (from is SqlParameter fromSql)
             {
-                var fromSql = (SqlParameter)from;
                 var toSql = (SqlParameter)@this;
 
                 toSql.SqlDbType = fromSql.SqlDbType;
diff --git a/src/shared/Z.EF.Plus._Core.Shared/EF5_EF6/IQueryable/IQueryable.GetObjectQuery.cs b/src/shared/Z.EF.Plus._Core.Shared/EF5_EF6/IQueryable/IQueryable.GetObjectQuery.cs
index fc42fe9..e35dc47 100644
--- a/src/shared/Z.EF.Plus._Core.Shared/EF5_EF6/IQueryable/IQueryable.GetObjectQuery.cs
+++ b/src/shared/Z.EF.Plus._Core.Shared/EF5_EF6/IQueryable/IQueryable.GetObjectQuery.cs
@@ -30,16 +30,14 @@ public static partial class PublicInternalExtensions
         public static ObjectQuery GetObjectQuery(this IQueryable query)
         {
             // CHECK ObjectQuery
-            var objectQuery = query as ObjectQuery;
-            if (objectQuery != null)
+            if (query is ObjectQuery objectQuery)
             {
                 return objectQuery;
             }
 
             // CHECK DbQuery
-            var dbQuery = query as DbQuery;
 
-            if (dbQuery != null)
+            if (query is DbQuery dbQuery)
             {
                 var internalQueryProperty = dbQuery.GetType().GetProperty("InternalQuery", BindingFlags.NonPublic | BindingFlags.Instance);
                 var internalQuery = internalQueryProperty.GetValue(dbQuery, null);
@@ -81,9 +79,7 @@ public static ObjectQuery GetObjectQuery(this IQueryable query)
 
             if (innerField != null)
             {
-                var innerQuery = innerField.GetValue(query) as IQueryable;
-
-                if (innerQuery != null && query != innerQuery)
+                if (innerField.GetValue(query) is IQueryable innerQuery && query != innerQuery)
                 {
                     var innerObjectQuery = innerQuery.GetObjectQuery();
                     return innerObjectQuery;
@@ -95,9 +91,7 @@ public static ObjectQuery GetObjectQuery(this IQueryable query)
 
             if (innerQueryProperty != null)
             {
-                var innerQuery = innerQueryProperty.GetValue(query, null) as IQueryable;
-
-                if (innerQuery != null && query != innerQuery)
+                if (innerField.GetValue(query) is IQueryable innerQuery && query != innerQuery)
                 {
                     var innerObjectQuery = innerQuery.GetObjectQuery();
                     return innerObjectQuery;
diff --git a/src/shared/Z.EF.Plus._Core.Shared/EF5_EF6/IQueryable/IQueryable.GetObjectQuerySafe.cs b/src/shared/Z.EF.Plus._Core.Shared/EF5_EF6/IQueryable/IQueryable.GetObjectQuerySafe.cs
index bea7d24..105128a 100644
--- a/src/shared/Z.EF.Plus._Core.Shared/EF5_EF6/IQueryable/IQueryable.GetObjectQuerySafe.cs
+++ b/src/shared/Z.EF.Plus._Core.Shared/EF5_EF6/IQueryable/IQueryable.GetObjectQuerySafe.cs
@@ -30,16 +30,14 @@ internal static partial class InternalExtensions
         internal static ObjectQuery GetObjectQuerySafe(this IQueryable query)
         {
             // CHECK ObjectQuery
-            var objectQuery = query as ObjectQuery;
-            if (objectQuery != null)
+            if (query is ObjectQuery objectQuery)
             {
                 return objectQuery;
             }
 
             // CHECK DbQuery
-            var dbQuery = query as DbQuery;
 
-            if (dbQuery != null)
+            if (query is DbQuery dbQuery)
             {
                 var internalQueryProperty = dbQuery.GetType().GetProperty("InternalQuery", BindingFlags.NonPublic | BindingFlags.Instance);
                 var internalQuery = internalQueryProperty.GetValue(dbQuery, null);
@@ -80,9 +78,7 @@ internal static ObjectQuery GetObjectQuerySafe(this IQueryable query)
 
             if (innerField != null)
             {
-                var innerQuery = innerField.GetValue(query) as IQueryable;
-
-                if (innerQuery != null && query != innerQuery)
+                if (innerField.GetValue(query) is IQueryable innerQuery && query != innerQuery)
                 {
                     var innerObjectQuery = innerQuery.GetObjectQuery();
                     return innerObjectQuery;
@@ -94,9 +90,7 @@ internal static ObjectQuery GetObjectQuerySafe(this IQueryable query)
 
             if (innerQueryProperty != null)
             {
-                var innerQuery = innerQueryProperty.GetValue(query, null) as IQueryable;
-
-                if (innerQuery != null && query != innerQuery)
+                if (innerField.GetValue(query) is IQueryable innerQuery && query != innerQuery)
                 {
                     var innerObjectQuery = innerQuery.GetObjectQuery();
                     return innerObjectQuery;
diff --git a/src/shared/Z.EF.Plus._Core.Shared/EF5_EF6/IQueryable`/IQueryable`.GetObjectQuery.cs b/src/shared/Z.EF.Plus._Core.Shared/EF5_EF6/IQueryable`/IQueryable`.GetObjectQuery.cs
index c60d268..c20f83a 100644
--- a/src/shared/Z.EF.Plus._Core.Shared/EF5_EF6/IQueryable`/IQueryable`.GetObjectQuery.cs
+++ b/src/shared/Z.EF.Plus._Core.Shared/EF5_EF6/IQueryable`/IQueryable`.GetObjectQuery.cs
@@ -30,8 +30,7 @@ public static partial class PublicInternalExtensions
         public static ObjectQuery<T> GetObjectQuery<T>(this IQueryable<T> query)
         {
             // CHECK for ObjectQuery
-            var objectQuery = query as ObjectQuery<T>;
-            if (objectQuery != null)
+            if (query is ObjectQuery<T> objectQuery)
             {
                 return objectQuery;
             }
@@ -50,9 +49,7 @@ public static ObjectQuery<T> GetObjectQuery<T>(this IQueryable<T> query)
 
                     if (innerField != null)
                     {
-                        var innerQuery = innerField.GetValue(query) as IQueryable<T>;
-
-                        if (innerQuery != null && query != innerQuery)
+                        if (innerField.GetValue(query) is IQueryable<T> innerQuery && query != innerQuery)
                         {
                             var innerObjectQuery = innerQuery.GetObjectQuery();
                             return innerObjectQuery;
@@ -64,9 +61,7 @@ public static ObjectQuery<T> GetObjectQuery<T>(this IQueryable<T> query)
 
                     if (innerQueryProperty != null)
                     {
-                        var innerQuery = innerQueryProperty.GetValue(query, null) as IQueryable<T>;
-
-                        if (innerQuery != null && query != innerQuery)
+                        if (innerField.GetValue(query) is IQueryable<T> innerQuery && query != innerQuery)
                         {
                             var innerObjectQuery = innerQuery.GetObjectQuery();
                             return innerObjectQuery;
diff --git a/src/shared/Z.EF.Plus._Core.Shared/LazyAsyncEnumerator/LazyAsyncEnumerator.cs b/src/shared/Z.EF.Plus._Core.Shared/LazyAsyncEnumerator/LazyAsyncEnumerator.cs
index 758e56a..c9844e6 100644
--- a/src/shared/Z.EF.Plus._Core.Shared/LazyAsyncEnumerator/LazyAsyncEnumerator.cs
+++ b/src/shared/Z.EF.Plus._Core.Shared/LazyAsyncEnumerator/LazyAsyncEnumerator.cs
@@ -42,10 +42,7 @@ object IDbAsyncEnumerator.Current
 
         public void Dispose()
         {
-            if (_objectResultAsyncEnumerator != null)
-            {
-                _objectResultAsyncEnumerator.Dispose();
-            }
+            _objectResultAsyncEnumerator?.Dispose();
         }
 
         public Task<bool> MoveNextAsync(CancellationToken cancellationToken)
diff --git a/src/shared/Z.EF.Plus._Core.Shared/LazyAsyncEnumerator/LazyAsyncEnumeratorCore.cs b/src/shared/Z.EF.Plus._Core.Shared/LazyAsyncEnumerator/LazyAsyncEnumeratorCore.cs
index cf23d02..7af9ac9 100644
--- a/src/shared/Z.EF.Plus._Core.Shared/LazyAsyncEnumerator/LazyAsyncEnumeratorCore.cs
+++ b/src/shared/Z.EF.Plus._Core.Shared/LazyAsyncEnumerator/LazyAsyncEnumeratorCore.cs
@@ -36,10 +36,7 @@ public T Current
 
         public void Dispose()
         {
-            if (_objectResultAsyncEnumerator != null)
-            {
-                _objectResultAsyncEnumerator.Dispose();
-            }
+            _objectResultAsyncEnumerator?.Dispose();
         }
 
 
diff --git a/src/shared/Z.EF.Plus._Core.Shared/LinqExpressionExtensions/LambdaExpression/LambdaExpression.GetPropertyOrFieldAccessor.cs b/src/shared/Z.EF.Plus._Core.Shared/LinqExpressionExtensions/LambdaExpression/LambdaExpression.GetPropertyOrFieldAccessor.cs
index c0ae2d9..1175ad0 100644
--- a/src/shared/Z.EF.Plus._Core.Shared/LinqExpressionExtensions/LambdaExpression/LambdaExpression.GetPropertyOrFieldAccessor.cs
+++ b/src/shared/Z.EF.Plus._Core.Shared/LinqExpressionExtensions/LambdaExpression/LambdaExpression.GetPropertyOrFieldAccessor.cs
@@ -25,9 +25,8 @@ internal static PropertyOrFieldAccessor GetPropertyOrFieldAccessor(this LambdaEx
         {
             PropertyOrFieldAccessor memberAccessor;
             var parameterExpression = @this.Parameters.Single();
-            var newExpression = @this.Body.RemoveConvert() as NewExpression;
 
-            if (newExpression != null)
+            if (@this.Body.RemoveConvert() is NewExpression newExpression)
             {
                 if (newExpression.Arguments.Count > 1)
                 {
diff --git a/src/shared/Z.EF.Plus._Core.Shared/LinqExpressionExtensions/LambdaExpression/LambdaExpression.GetPropertyOrFieldAccessors.cs b/src/shared/Z.EF.Plus._Core.Shared/LinqExpressionExtensions/LambdaExpression/LambdaExpression.GetPropertyOrFieldAccessors.cs
index c75279f..a9a4b09 100644
--- a/src/shared/Z.EF.Plus._Core.Shared/LinqExpressionExtensions/LambdaExpression/LambdaExpression.GetPropertyOrFieldAccessors.cs
+++ b/src/shared/Z.EF.Plus._Core.Shared/LinqExpressionExtensions/LambdaExpression/LambdaExpression.GetPropertyOrFieldAccessors.cs
@@ -22,9 +22,8 @@ internal static PropertyOrFieldAccessor[] GetPropertyOrFieldAccessors(this Lambd
         {
             PropertyOrFieldAccessor[] memberAccessors;
             var parameterExpression = @this.Parameters.Single();
-            var newExpression = @this.Body.RemoveConvert() as NewExpression;
 
-            if (newExpression != null)
+            if (@this.Body.RemoveConvert() is NewExpression newExpression)
             {
                 var arguments = newExpression.Arguments;
                 memberAccessors = arguments.Select(x => x.GetPropertyOrFieldAccess(parameterExpression)).ToArray();
diff --git a/src/shared/Z.EF.Plus._Core.Shared/LinqExpressionExtensions/_Internal/ExpressionExtensions.cs b/src/shared/Z.EF.Plus._Core.Shared/LinqExpressionExtensions/_Internal/ExpressionExtensions.cs
index 1e1a4c4..821dd3f 100644
--- a/src/shared/Z.EF.Plus._Core.Shared/LinqExpressionExtensions/_Internal/ExpressionExtensions.cs
+++ b/src/shared/Z.EF.Plus._Core.Shared/LinqExpressionExtensions/_Internal/ExpressionExtensions.cs
@@ -84,14 +84,12 @@ internal static PropertyOrFieldAccessor GetPropertyOrFieldAccess(this Expression
                     throw new Exception("Invalid expression.");
                 }
 
-                var propertyInfo = memberExpression.Member as PropertyInfo;
-                var fieldInfo = memberExpression.Member as FieldInfo;
-
-                if (propertyInfo != null)
+                if (memberExpression.Member is PropertyInfo propertyInfo)
                 {
                     paths.Add(propertyInfo);
                 }
-                if (fieldInfo != null)
+
+                if (memberExpression.Member is FieldInfo fieldInfo)
                 {
                     paths.Add(fieldInfo);
                 }
diff --git a/src/test/Z.Test.EntityFramework.Plus.EF5/Audit/EntityModified/Inheritance_TPC.cs b/src/test/Z.Test.EntityFramework.Plus.EF5/Audit/EntityModified/Inheritance_TPC.cs
index f2b6028..dd3b8e2 100644
--- a/src/test/Z.Test.EntityFramework.Plus.EF5/Audit/EntityModified/Inheritance_TPC.cs
+++ b/src/test/Z.Test.EntityFramework.Plus.EF5/Audit/EntityModified/Inheritance_TPC.cs
@@ -42,14 +42,12 @@ public void Inheritance_TPC()
                 {
                     x.ColumnInt++;
 
-                    var cat = x as Inheritance_TPC_Cat;
-                    var dog = x as Inheritance_TPC_Dog;
-
-                    if (cat != null)
+                    if (x is Inheritance_TPC_Cat cat)
                     {
                         cat.ColumnCat++;
                     }
-                    if (dog != null)
+
+                    if (x is Inheritance_TPC_Dog dog)
                     {
                         dog.ColumnDog++;
                     }
diff --git a/src/test/Z.Test.EntityFramework.Plus.EF5/Audit/EntityModified/Inheritance_TPH.cs b/src/test/Z.Test.EntityFramework.Plus.EF5/Audit/EntityModified/Inheritance_TPH.cs
index fba3135..cce3d46 100644
--- a/src/test/Z.Test.EntityFramework.Plus.EF5/Audit/EntityModified/Inheritance_TPH.cs
+++ b/src/test/Z.Test.EntityFramework.Plus.EF5/Audit/EntityModified/Inheritance_TPH.cs
@@ -41,14 +41,12 @@ public void Inheritance_TPH()
                 {
                     x.ColumnInt++;
 
-                    var cat = x as Inheritance_TPH_Cat;
-                    var dog = x as Inheritance_TPH_Dog;
-
-                    if (cat != null)
+                    if (x is Inheritance_TPH_Cat cat)
                     {
                         cat.ColumnCat++;
                     }
-                    if (dog != null)
+
+                    if (x is Inheritance_TPH_Dog dog)
                     {
                         dog.ColumnDog++;
                     }
diff --git a/src/test/Z.Test.EntityFramework.Plus.EF5/Audit/EntityModified/Inheritance_TPT.cs b/src/test/Z.Test.EntityFramework.Plus.EF5/Audit/EntityModified/Inheritance_TPT.cs
index 667a0de..392ade7 100644
--- a/src/test/Z.Test.EntityFramework.Plus.EF5/Audit/EntityModified/Inheritance_TPT.cs
+++ b/src/test/Z.Test.EntityFramework.Plus.EF5/Audit/EntityModified/Inheritance_TPT.cs
@@ -41,14 +41,12 @@ public void Inheritance_TPT()
                 {
                     x.ColumnInt++;
 
-                    var cat = x as Inheritance_TPT_Cat;
-                    var dog = x as Inheritance_TPT_Dog;
-
-                    if (cat != null)
+                    if (x is Inheritance_TPT_Cat cat)
                     {
                         cat.ColumnCat++;
                     }
-                    if (dog != null)
+
+                    if (x is Inheritance_TPT_Dog dog)
                     {
                         dog.ColumnDog++;
                     }
diff --git a/src/test/Z.Test.EntityFramework.Plus.EF5/Audit/EntitySoftAdded/Inheritance_TPC.cs b/src/test/Z.Test.EntityFramework.Plus.EF5/Audit/EntitySoftAdded/Inheritance_TPC.cs
index be5fbfd..ed959e1 100644
--- a/src/test/Z.Test.EntityFramework.Plus.EF5/Audit/EntitySoftAdded/Inheritance_TPC.cs
+++ b/src/test/Z.Test.EntityFramework.Plus.EF5/Audit/EntitySoftAdded/Inheritance_TPC.cs
@@ -43,14 +43,12 @@ public void Inheritance_TPC()
                 {
                     x.ColumnInt++;
 
-                    var cat = x as Inheritance_TPC_Cat;
-                    var dog = x as Inheritance_TPC_Dog;
-
-                    if (cat != null)
+                    if (x is Inheritance_TPC_Cat cat)
                     {
                         cat.ColumnCat++;
                     }
-                    if (dog != null)
+
+                    if (x is Inheritance_TPC_Dog dog)
                     {
                         dog.ColumnDog++;
                     }
diff --git a/src/test/Z.Test.EntityFramework.Plus.EF5/Audit/EntitySoftAdded/Inheritance_TPH.cs b/src/test/Z.Test.EntityFramework.Plus.EF5/Audit/EntitySoftAdded/Inheritance_TPH.cs
index c757390..ccb6abb 100644
--- a/src/test/Z.Test.EntityFramework.Plus.EF5/Audit/EntitySoftAdded/Inheritance_TPH.cs
+++ b/src/test/Z.Test.EntityFramework.Plus.EF5/Audit/EntitySoftAdded/Inheritance_TPH.cs
@@ -42,14 +42,12 @@ public void Inheritance_TPH()
                 {
                     x.ColumnInt++;
 
-                    var cat = x as Inheritance_TPH_Cat;
-                    var dog = x as Inheritance_TPH_Dog;
-
-                    if (cat != null)
+                    if (x is Inheritance_TPH_Cat cat)
                     {
                         cat.ColumnCat++;
                     }
-                    if (dog != null)
+
+                    if (x is Inheritance_TPH_Dog dog)
                     {
                         dog.ColumnDog++;
                     }
diff --git a/src/test/Z.Test.EntityFramework.Plus.EF5/Audit/EntitySoftAdded/Inheritance_TPT.cs b/src/test/Z.Test.EntityFramework.Plus.EF5/Audit/EntitySoftAdded/Inheritance_TPT.cs
index 3d8da27..64af58b 100644
--- a/src/test/Z.Test.EntityFramework.Plus.EF5/Audit/EntitySoftAdded/Inheritance_TPT.cs
+++ b/src/test/Z.Test.EntityFramework.Plus.EF5/Audit/EntitySoftAdded/Inheritance_TPT.cs
@@ -42,14 +42,12 @@ public void Inheritance_TPT()
                 {
                     x.ColumnInt++;
 
-                    var cat = x as Inheritance_TPT_Cat;
-                    var dog = x as Inheritance_TPT_Dog;
-
-                    if (cat != null)
+                    if (x is Inheritance_TPT_Cat cat)
                     {
                         cat.ColumnCat++;
                     }
-                    if (dog != null)
+
+                    if (x is Inheritance_TPT_Dog dog)
                     {
                         dog.ColumnDog++;
                     }
diff --git a/src/test/Z.Test.EntityFramework.Plus.EF5/Audit/EntitySoftDeleted/Inheritance_TPC.cs b/src/test/Z.Test.EntityFramework.Plus.EF5/Audit/EntitySoftDeleted/Inheritance_TPC.cs
index c24d791..581e307 100644
--- a/src/test/Z.Test.EntityFramework.Plus.EF5/Audit/EntitySoftDeleted/Inheritance_TPC.cs
+++ b/src/test/Z.Test.EntityFramework.Plus.EF5/Audit/EntitySoftDeleted/Inheritance_TPC.cs
@@ -43,14 +43,12 @@ public void Inheritance_TPC()
                 {
                     x.ColumnInt++;
 
-                    var cat = x as Inheritance_TPC_Cat;
-                    var dog = x as Inheritance_TPC_Dog;
-
-                    if (cat != null)
+                    if (x is Inheritance_TPC_Cat cat)
                     {
                         cat.ColumnCat++;
                     }
-                    if (dog != null)
+
+                    if (x is Inheritance_TPC_Dog dog)
                     {
                         dog.ColumnDog++;
                     }
diff --git a/src/test/Z.Test.EntityFramework.Plus.EF5/Audit/EntitySoftDeleted/Inheritance_TPH.cs b/src/test/Z.Test.EntityFramework.Plus.EF5/Audit/EntitySoftDeleted/Inheritance_TPH.cs
index 0c2ca68..31f8264 100644
--- a/src/test/Z.Test.EntityFramework.Plus.EF5/Audit/EntitySoftDeleted/Inheritance_TPH.cs
+++ b/src/test/Z.Test.EntityFramework.Plus.EF5/Audit/EntitySoftDeleted/Inheritance_TPH.cs
@@ -42,14 +42,12 @@ public void Inheritance_TPH()
                 {
                     x.ColumnInt++;
 
-                    var cat = x as Inheritance_TPH_Cat;
-                    var dog = x as Inheritance_TPH_Dog;
-
-                    if (cat != null)
+                    if (x is Inheritance_TPH_Cat cat)
                     {
                         cat.ColumnCat++;
                     }
-                    if (dog != null)
+
+                    if (x is Inheritance_TPH_Dog dog)
                     {
                         dog.ColumnDog++;
                     }
diff --git a/src/test/Z.Test.EntityFramework.Plus.EF5/Audit/EntitySoftDeleted/Inheritance_TPT.cs b/src/test/Z.Test.EntityFramework.Plus.EF5/Audit/EntitySoftDeleted/Inheritance_TPT.cs
index 9acb540..f089d13 100644
--- a/src/test/Z.Test.EntityFramework.Plus.EF5/Audit/EntitySoftDeleted/Inheritance_TPT.cs
+++ b/src/test/Z.Test.EntityFramework.Plus.EF5/Audit/EntitySoftDeleted/Inheritance_TPT.cs
@@ -42,14 +42,12 @@ public void Inheritance_TPT()
                 {
                     x.ColumnInt++;
 
-                    var cat = x as Inheritance_TPT_Cat;
-                    var dog = x as Inheritance_TPT_Dog;
-
-                    if (cat != null)
+                    if (x is Inheritance_TPT_Cat cat)
                     {
                         cat.ColumnCat++;
                     }
-                    if (dog != null)
+
+                    if (x is Inheritance_TPT_Dog dog)
                     {
                         dog.ColumnDog++;
                     }
diff --git a/src/test/Z.Test.EntityFramework.Plus.EF5/_Model/Methods/Insert.cs b/src/test/Z.Test.EntityFramework.Plus.EF5/_Model/Methods/Insert.cs
index ae99e95..c1a6e20 100644
--- a/src/test/Z.Test.EntityFramework.Plus.EF5/_Model/Methods/Insert.cs
+++ b/src/test/Z.Test.EntityFramework.Plus.EF5/_Model/Methods/Insert.cs
@@ -42,40 +42,22 @@ public static void InsertFactory<T>(T item, int i)
                 PropertyInfo property;
 
                 property = item.GetType().GetProperty("ColumnInt", BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance);
-                if (property != null)
-                {
-                    property.SetValue(item, i);
-                }
+                property?.SetValue(item, i);
 
                 property = item.GetType().GetProperty("Column1", BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance);
-                if (property != null)
-                {
-                    property.SetValue(item, i);
-                }
+                property?.SetValue(item, i);
 
                 property = item.GetType().GetProperty("Column2", BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance);
-                if (property != null)
-                {
-                    property.SetValue(item, i);
-                }
+                property?.SetValue(item, i);
 
                 property = item.GetType().GetProperty("Column3", BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance);
-                if (property != null)
-                {
-                    property.SetValue(item, i);
-                }
+                property?.SetValue(item, i);
 
                 property = item.GetType().GetProperty("ColumnCat");
-                if (property != null)
-                {
-                    property.SetValue(item, i);
-                }
+                property?.SetValue(item, i);
 
                 property = item.GetType().GetProperty("ColumnDog");
-                if (property != null)
-                {
-                    property.SetValue(item, i);
-                }
+                property?.SetValue(item, i);
             }
         }
 
diff --git a/src/test/Z.Test.EntityFramework.Plus.EF6/Audit/EntityModified/Inheritance_TPC.cs b/src/test/Z.Test.EntityFramework.Plus.EF6/Audit/EntityModified/Inheritance_TPC.cs
index f2b6028..dd3b8e2 100644
--- a/src/test/Z.Test.EntityFramework.Plus.EF6/Audit/EntityModified/Inheritance_TPC.cs
+++ b/src/test/Z.Test.EntityFramework.Plus.EF6/Audit/EntityModified/Inheritance_TPC.cs
@@ -42,14 +42,12 @@ public void Inheritance_TPC()
                 {
                     x.ColumnInt++;
 
-                    var cat = x as Inheritance_TPC_Cat;
-                    var dog = x as Inheritance_TPC_Dog;
-
-                    if (cat != null)
+                    if (x is Inheritance_TPC_Cat cat)
                     {
                         cat.ColumnCat++;
                     }
-                    if (dog != null)
+
+                    if (x is Inheritance_TPC_Dog dog)
                     {
                         dog.ColumnDog++;
                     }
diff --git a/src/test/Z.Test.EntityFramework.Plus.EF6/Audit/EntityModified/Inheritance_TPH.cs b/src/test/Z.Test.EntityFramework.Plus.EF6/Audit/EntityModified/Inheritance_TPH.cs
index fba3135..cce3d46 100644
--- a/src/test/Z.Test.EntityFramework.Plus.EF6/Audit/EntityModified/Inheritance_TPH.cs
+++ b/src/test/Z.Test.EntityFramework.Plus.EF6/Audit/EntityModified/Inheritance_TPH.cs
@@ -41,14 +41,12 @@ public void Inheritance_TPH()
                 {
                     x.ColumnInt++;
 
-                    var cat = x as Inheritance_TPH_Cat;
-                    var dog = x as Inheritance_TPH_Dog;
-
-                    if (cat != null)
+                    if (x is Inheritance_TPH_Cat cat)
                     {
                         cat.ColumnCat++;
                     }
-                    if (dog != null)
+
+                    if (x is Inheritance_TPH_Dog dog)
                     {
                         dog.ColumnDog++;
                     }
diff --git a/src/test/Z.Test.EntityFramework.Plus.EF6/Audit/EntityModified/Inheritance_TPT.cs b/src/test/Z.Test.EntityFramework.Plus.EF6/Audit/EntityModified/Inheritance_TPT.cs
index 458dc4d..07e0b82 100644
--- a/src/test/Z.Test.EntityFramework.Plus.EF6/Audit/EntityModified/Inheritance_TPT.cs
+++ b/src/test/Z.Test.EntityFramework.Plus.EF6/Audit/EntityModified/Inheritance_TPT.cs
@@ -41,14 +41,12 @@ public void Inheritance_TPT()
                 {
                     x.ColumnInt++;
 
-                    var cat = x as Inheritance_TPT_Cat;
-                    var dog = x as Inheritance_TPT_Dog;
-
-                    if (cat != null)
+                    if (x is Inheritance_TPT_Cat cat)
                     {
                         cat.ColumnCat++;
                     }
-                    if (dog != null)
+
+                    if (x is Inheritance_TPT_Dog dog)
                     {
                         dog.ColumnDog++;
                     }
diff --git a/src/test/Z.Test.EntityFramework.Plus.EF6/Audit/EntitySoftAdded/Inheritance_TPC.cs b/src/test/Z.Test.EntityFramework.Plus.EF6/Audit/EntitySoftAdded/Inheritance_TPC.cs
index be5fbfd..ed959e1 100644
--- a/src/test/Z.Test.EntityFramework.Plus.EF6/Audit/EntitySoftAdded/Inheritance_TPC.cs
+++ b/src/test/Z.Test.EntityFramework.Plus.EF6/Audit/EntitySoftAdded/Inheritance_TPC.cs
@@ -43,14 +43,12 @@ public void Inheritance_TPC()
                 {
                     x.ColumnInt++;
 
-                    var cat = x as Inheritance_TPC_Cat;
-                    var dog = x as Inheritance_TPC_Dog;
-
-                    if (cat != null)
+                    if (x is Inheritance_TPC_Cat cat)
                     {
                         cat.ColumnCat++;
                     }
-                    if (dog != null)
+
+                    if (x is Inheritance_TPC_Dog dog)
                     {
                         dog.ColumnDog++;
                     }
diff --git a/src/test/Z.Test.EntityFramework.Plus.EF6/Audit/EntitySoftAdded/Inheritance_TPH.cs b/src/test/Z.Test.EntityFramework.Plus.EF6/Audit/EntitySoftAdded/Inheritance_TPH.cs
index c757390..ccb6abb 100644
--- a/src/test/Z.Test.EntityFramework.Plus.EF6/Audit/EntitySoftAdded/Inheritance_TPH.cs
+++ b/src/test/Z.Test.EntityFramework.Plus.EF6/Audit/EntitySoftAdded/Inheritance_TPH.cs
@@ -42,14 +42,12 @@ public void Inheritance_TPH()
                 {
                     x.ColumnInt++;
 
-                    var cat = x as Inheritance_TPH_Cat;
-                    var dog = x as Inheritance_TPH_Dog;
-
-                    if (cat != null)
+                    if (x is Inheritance_TPH_Cat cat)
                     {
                         cat.ColumnCat++;
                     }
-                    if (dog != null)
+
+                    if (x is Inheritance_TPH_Dog dog)
                     {
                         dog.ColumnDog++;
                     }
diff --git a/src/test/Z.Test.EntityFramework.Plus.EF6/Audit/EntitySoftAdded/Inheritance_TPT.cs b/src/test/Z.Test.EntityFramework.Plus.EF6/Audit/EntitySoftAdded/Inheritance_TPT.cs
index 74d7d6f..13ee57d 100644
--- a/src/test/Z.Test.EntityFramework.Plus.EF6/Audit/EntitySoftAdded/Inheritance_TPT.cs
+++ b/src/test/Z.Test.EntityFramework.Plus.EF6/Audit/EntitySoftAdded/Inheritance_TPT.cs
@@ -42,14 +42,12 @@ public void Inheritance_TPT()
                 {
                     x.ColumnInt++;
 
-                    var cat = x as Inheritance_TPT_Cat;
-                    var dog = x as Inheritance_TPT_Dog;
-
-                    if (cat != null)
+                    if (x is Inheritance_TPT_Cat cat)
                     {
                         cat.ColumnCat++;
                     }
-                    if (dog != null)
+
+                    if (x is Inheritance_TPT_Dog dog)
                     {
                         dog.ColumnDog++;
                     }
diff --git a/src/test/Z.Test.EntityFramework.Plus.EF6/Audit/EntitySoftDeleted/Inheritance_TPC.cs b/src/test/Z.Test.EntityFramework.Plus.EF6/Audit/EntitySoftDeleted/Inheritance_TPC.cs
index c24d791..581e307 100644
--- a/src/test/Z.Test.EntityFramework.Plus.EF6/Audit/EntitySoftDeleted/Inheritance_TPC.cs
+++ b/src/test/Z.Test.EntityFramework.Plus.EF6/Audit/EntitySoftDeleted/Inheritance_TPC.cs
@@ -43,14 +43,12 @@ public void Inheritance_TPC()
                 {
                     x.ColumnInt++;
 
-                    var cat = x as Inheritance_TPC_Cat;
-                    var dog = x as Inheritance_TPC_Dog;
-
-                    if (cat != null)
+                    if (x is Inheritance_TPC_Cat cat)
                     {
                         cat.ColumnCat++;
                     }
-                    if (dog != null)
+
+                    if (x is Inheritance_TPC_Dog dog)
                     {
                         dog.ColumnDog++;
                     }
diff --git a/src/test/Z.Test.EntityFramework.Plus.EF6/Audit/EntitySoftDeleted/Inheritance_TPH.cs b/src/test/Z.Test.EntityFramework.Plus.EF6/Audit/EntitySoftDeleted/Inheritance_TPH.cs
index 0c2ca68..31f8264 100644
--- a/src/test/Z.Test.EntityFramework.Plus.EF6/Audit/EntitySoftDeleted/Inheritance_TPH.cs
+++ b/src/test/Z.Test.EntityFramework.Plus.EF6/Audit/EntitySoftDeleted/Inheritance_TPH.cs
@@ -42,14 +42,12 @@ public void Inheritance_TPH()
                 {
                     x.ColumnInt++;
 
-                    var cat = x as Inheritance_TPH_Cat;
-                    var dog = x as Inheritance_TPH_Dog;
-
-                    if (cat != null)
+                    if (x is Inheritance_TPH_Cat cat)
                     {
                         cat.ColumnCat++;
                     }
-                    if (dog != null)
+
+                    if (x is Inheritance_TPH_Dog dog)
                     {
                         dog.ColumnDog++;
                     }
diff --git a/src/test/Z.Test.EntityFramework.Plus.EF6/Audit/EntitySoftDeleted/Inheritance_TPT.cs b/src/test/Z.Test.EntityFramework.Plus.EF6/Audit/EntitySoftDeleted/Inheritance_TPT.cs
index 0ac0f86..82a447b 100644
--- a/src/test/Z.Test.EntityFramework.Plus.EF6/Audit/EntitySoftDeleted/Inheritance_TPT.cs
+++ b/src/test/Z.Test.EntityFramework.Plus.EF6/Audit/EntitySoftDeleted/Inheritance_TPT.cs
@@ -42,14 +42,12 @@ public void Inheritance_TPT()
                 {
                     x.ColumnInt++;
 
-                    var cat = x as Inheritance_TPT_Cat;
-                    var dog = x as Inheritance_TPT_Dog;
-
-                    if (cat != null)
+                    if (x is Inheritance_TPT_Cat cat)
                     {
                         cat.ColumnCat++;
                     }
-                    if (dog != null)
+
+                    if (x is Inheritance_TPT_Dog dog)
                     {
                         dog.ColumnDog++;
                     }
diff --git a/src/test/Z.Test.EntityFramework.Plus.EF6/_Model/Methods/Insert.cs b/src/test/Z.Test.EntityFramework.Plus.EF6/_Model/Methods/Insert.cs
index febbf1c..c947d88 100644
--- a/src/test/Z.Test.EntityFramework.Plus.EF6/_Model/Methods/Insert.cs
+++ b/src/test/Z.Test.EntityFramework.Plus.EF6/_Model/Methods/Insert.cs
@@ -43,40 +43,22 @@ public static void InsertFactory<T>(T item, int i)
                 PropertyInfo property;
 
                 property = item.GetType().GetProperty("ColumnInt", BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance);
-                if (property != null)
-                {
-                    property.SetValue(item, i);
-                }
+                property?.SetValue(item, i);
 
                 property = item.GetType().GetProperty("Column1", BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance);
-                if (property != null)
-                {
-                    property.SetValue(item, i);
-                }
+                property?.SetValue(item, i);
 
                 property = item.GetType().GetProperty("Column2", BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance);
-                if (property != null)
-                {
-                    property.SetValue(item, i);
-                }
+                property?.SetValue(item, i);
 
                 property = item.GetType().GetProperty("Column3", BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance);
-                if (property != null)
-                {
-                    property.SetValue(item, i);
-                }
+                property?.SetValue(item, i);
 
                 property = item.GetType().GetProperty("ColumnCat");
-                if (property != null)
-                {
-                    property.SetValue(item, i);
-                }
+                property?.SetValue(item, i);
 
                 property = item.GetType().GetProperty("ColumnDog");
-                if (property != null)
-                {
-                    property.SetValue(item, i);
-                }
+                property?.SetValue(item, i);
             }
         }
 
