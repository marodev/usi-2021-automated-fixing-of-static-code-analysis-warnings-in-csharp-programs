diff --git a/src/common.props b/src/common.props
index 5100764ae..c01a22943 100644
--- a/src/common.props
+++ b/src/common.props
@@ -2,7 +2,7 @@
   <PropertyGroup>
     <Copyright>Copyright Â© 2013-2021 Akka.NET Team</Copyright>
     <Authors>Akka.NET Team</Authors>
-    <VersionPrefix>1.4.15</VersionPrefix>
+    <VersionPrefix>1.4.16</VersionPrefix>
     <PackageIconUrl>https://getakka.net/images/akkalogo.png</PackageIconUrl>
     <PackageProjectUrl>https://github.com/akkadotnet/akka.net</PackageProjectUrl>
     <PackageLicenseUrl>https://github.com/akkadotnet/akka.net/blob/master/LICENSE</PackageLicenseUrl>
@@ -30,22 +30,8 @@
   </PropertyGroup>
   <PropertyGroup>
     <PackageReleaseNotes>Maintenance Release for Akka.NET 1.4**
-Akka.NET v1.4.15 introduces a new module, Akka.DependencyInjection, which will replace Akka.DI.Core and all of the libraries which depend on it. This seemed like the easiest way to preserve backwards compatibility - simple deprecate the old package and replace it with a new one.
-So what does Akka.DependencyInjection do differently than Akka.DI.Core?
-1. **Allows users to pass in an [`IServiceProvider`](https://docs.microsoft.com/en-us/dotnet/api/system.iserviceprovider) into the `ActorSystem` before the latter is created, via [a new kind of programmatic configuration `Setup` that was introduced in Akka.NET v1.4](https://getakka.net/articles/concepts/configuration.html#programmatic-configuration-with-setup)**. This ensures that the `IServiceProvider` is immutable within an `ActorSystem`, a problem that we have currently with Akka.DI.Core.
-2. **Makes it easy to access the `IServiceProvider` via the `Akka.DependencyInjection.ServiceProvider.For(ActorSystem)` method**, which is what we can use to get access to the service provider in order to consume required services inside our actors.
-3. **Makes it possible to dependency inject some parameters will dynamically specifying some others**, something that users have been asking for since 2015.
-To see a full example of how to use Akka.DependencyInjection in concert with Microsoft.Extensions.DependencyInjection, please see https://getakka.net/articles/actors/dependency-injection.html
-Other changes:
-[Akka: Add `WithConfigFallback` quality of life helper method to `BootstrapSetup`](https://github.com/akkadotnet/akka.net/pull/4714)
-[Akka.MultiNodeTestRunner: Provide .NET 5.0 support for MultiNode TestKit](https://github.com/akkadotnet/akka.net/issues/4602)
-To see the [full set of fixes in Akka.NET v1.4.15, please see the milestone on Github](https://github.com/akkadotnet/akka.net/milestone/46).
-| COMMITS | LOC+ | LOC- | AUTHOR |
-| --- | --- | --- | --- |
-| 8 | 5351 | 4004 | Aaron Stannard |
-| 3 | 5 | 5 | dependabot-preview[bot] |
-| 2 | 369 | 170 | Ebere Abanonu |
-| 1 | 7 | 0 | Gregorius Soedharmo |</PackageReleaseNotes>
+This is a tiny release of Akka.NET, aimed at solving a transient dependency issue with Akka.DependencyInjection:
+[Akka.DependencyInjection: Allow different versions of MS Abstractions nuget package for Akka.DependencyInjection](https://github.com/akkadotnet/akka.net/pull/4739) - rolls back to Microsoft.Extensions.DependencyInjection.Abstractions 3.1 instead of 5.0</PackageReleaseNotes>
   </PropertyGroup>
   <!-- SourceLink support for all Akka.NET projects -->
   <ItemGroup>
diff --git a/src/contrib/cluster/Akka.Cluster.Metrics.Tests.MultiNode/ClustetMetricsRoutingSpec.cs b/src/contrib/cluster/Akka.Cluster.Metrics.Tests.MultiNode/ClustetMetricsRoutingSpec.cs
index 75e2ae707..86b8a4949 100644
--- a/src/contrib/cluster/Akka.Cluster.Metrics.Tests.MultiNode/ClustetMetricsRoutingSpec.cs
+++ b/src/contrib/cluster/Akka.Cluster.Metrics.Tests.MultiNode/ClustetMetricsRoutingSpec.cs
@@ -284,7 +284,7 @@ private async Task Should_create_routees_from_configuration()
                 await AwaitAssertAsync(async () =>
                 {
                     var r = await GetCurrentRoutees(router3);
-                    r.Count().Should().Be(9);
+                    r.Count.Should().Be(9);
                 });
                 var routees = await GetCurrentRoutees(router3);
                 routees.Select(r => FullAddress((r as ActorRefRoutee).Actor)).Distinct().Should().BeEquivalentTo(Node(_config.Node1).Address);
@@ -302,7 +302,7 @@ private async Task Should_create_routees_from_cluster_enabled_configuration()
                 await AwaitAssertAsync(async () =>
                 {
                     var r = await GetCurrentRoutees(router4);
-                    r.Count().Should().Be(6);
+                    r.Count.Should().Be(6);
                 });
                 var routees = await GetCurrentRoutees(router4);
                 routees
diff --git a/src/contrib/cluster/Akka.Cluster.Metrics/Serialization/ClusterMetricsMessages.g.cs b/src/contrib/cluster/Akka.Cluster.Metrics/Serialization/ClusterMetricsMessages.g.cs
index 01368becd..ee67ad5bf 100644
--- a/src/contrib/cluster/Akka.Cluster.Metrics/Serialization/ClusterMetricsMessages.g.cs
+++ b/src/contrib/cluster/Akka.Cluster.Metrics/Serialization/ClusterMetricsMessages.g.cs
@@ -196,9 +196,7 @@ public sealed partial class MetricsGossipEnvelope : pb::IMessage<MetricsGossipEn
         output.WriteRawTag(24);
         output.WriteBool(Reply);
       }
-      if (_unknownFields != null) {
-        _unknownFields.WriteTo(output);
-      }
+      _unknownFields?.WriteTo(output);
     }
 
     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
@@ -385,9 +383,7 @@ public sealed partial class MetricsGossip : pb::IMessage<MetricsGossip> {
       allAddresses_.WriteTo(output, _repeated_allAddresses_codec);
       allMetricNames_.WriteTo(output, _repeated_allMetricNames_codec);
       nodeMetrics_.WriteTo(output, _repeated_nodeMetrics_codec);
-      if (_unknownFields != null) {
-        _unknownFields.WriteTo(output);
-      }
+      _unknownFields?.WriteTo(output);
     }
 
     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
@@ -527,9 +523,7 @@ public sealed partial class NodeMetrics : pb::IMessage<NodeMetrics> {
         output.WriteInt64(Timestamp);
       }
       metrics_.WriteTo(output, _repeated_metrics_codec);
-      if (_unknownFields != null) {
-        _unknownFields.WriteTo(output);
-      }
+      _unknownFields?.WriteTo(output);
     }
 
     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
@@ -736,9 +730,7 @@ public sealed partial class Number : pb::IMessage<Number> {
             output.WriteRawTag(34);
             output.WriteBytes(Serialized);
           }
-          if (_unknownFields != null) {
-            _unknownFields.WriteTo(output);
-          }
+          _unknownFields?.WriteTo(output);
         }
 
         [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
@@ -913,9 +905,7 @@ public sealed partial class EWMA : pb::IMessage<EWMA> {
             output.WriteRawTag(17);
             output.WriteDouble(Alpha);
           }
-          if (_unknownFields != null) {
-            _unknownFields.WriteTo(output);
-          }
+          _unknownFields?.WriteTo(output);
         }
 
         [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
@@ -1057,9 +1047,7 @@ public sealed partial class Metric : pb::IMessage<Metric> {
             output.WriteRawTag(26);
             output.WriteMessage(Ewma);
           }
-          if (_unknownFields != null) {
-            _unknownFields.WriteTo(output);
-          }
+          _unknownFields?.WriteTo(output);
         }
 
         [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
@@ -1281,9 +1269,7 @@ public sealed partial class AddressData : pb::IMessage<AddressData> {
         output.WriteRawTag(34);
         output.WriteString(Protocol);
       }
-      if (_unknownFields != null) {
-        _unknownFields.WriteTo(output);
-      }
+      _unknownFields?.WriteTo(output);
     }
 
     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
@@ -1500,9 +1486,7 @@ public sealed partial class AdaptiveLoadBalancingPool : pb::IMessage<AdaptiveLoa
         output.WriteRawTag(32);
         output.WriteBool(UsePoolDispatcher);
       }
-      if (_unknownFields != null) {
-        _unknownFields.WriteTo(output);
-      }
+      _unknownFields?.WriteTo(output);
     }
 
     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
@@ -1704,9 +1688,7 @@ public sealed partial class MetricsSelector : pb::IMessage<MetricsSelector> {
         output.WriteRawTag(26);
         output.WriteBytes(Data);
       }
-      if (_unknownFields != null) {
-        _unknownFields.WriteTo(output);
-      }
+      _unknownFields?.WriteTo(output);
     }
 
     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
@@ -1849,9 +1831,7 @@ public sealed partial class MixMetricsSelector : pb::IMessage<MixMetricsSelector
     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
     public void WriteTo(pb::CodedOutputStream output) {
       selectors_.WriteTo(output, _repeated_selectors_codec);
-      if (_unknownFields != null) {
-        _unknownFields.WriteTo(output);
-      }
+      _unknownFields?.WriteTo(output);
     }
 
     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
diff --git a/src/contrib/cluster/Akka.Cluster.Sharding.Tests.MultiNode/AsyncWriteProxyEx.cs b/src/contrib/cluster/Akka.Cluster.Sharding.Tests.MultiNode/AsyncWriteProxyEx.cs
index c7faf070f..664a8a276 100644
--- a/src/contrib/cluster/Akka.Cluster.Sharding.Tests.MultiNode/AsyncWriteProxyEx.cs
+++ b/src/contrib/cluster/Akka.Cluster.Sharding.Tests.MultiNode/AsyncWriteProxyEx.cs
@@ -459,10 +459,7 @@ private static async Task<object> AskEx(ICanTell self, Func<IActorRef, object> m
                     ctrList[i].Dispose();
                 }
 
-                if (timeoutCancellation != null)
-                {
-                    timeoutCancellation.Dispose();
-                }
+                timeoutCancellation?.Dispose();
             }
         }
     }
diff --git a/src/contrib/cluster/Akka.Cluster.Sharding.Tests.MultiNode/ClusterShardingSpec.cs b/src/contrib/cluster/Akka.Cluster.Sharding.Tests.MultiNode/ClusterShardingSpec.cs
index 7a5d58c93..d299803bd 100644
--- a/src/contrib/cluster/Akka.Cluster.Sharding.Tests.MultiNode/ClusterShardingSpec.cs
+++ b/src/contrib/cluster/Akka.Cluster.Sharding.Tests.MultiNode/ClusterShardingSpec.cs
@@ -1267,7 +1267,7 @@ public void PersistentClusterShards_should_ensure_rebalance_restarts_shards()
                             entity.Tell(new Identify(i));
 
                             var msg = ReceiveOne(TimeSpan.FromSeconds(3)) as ActorIdentity;
-                            if (msg != null && msg.Subject != null && msg.MessageId.Equals(i))
+                            if (msg?.Subject != null && msg.MessageId.Equals(i))
                                 count++;
                         }
 
diff --git a/src/contrib/cluster/Akka.Cluster.Tools.Tests.MultiNode/PublishSubscribe/DistributedPubSubMediatorSpec.cs b/src/contrib/cluster/Akka.Cluster.Tools.Tests.MultiNode/PublishSubscribe/DistributedPubSubMediatorSpec.cs
index 39bd1e8fa..0c35824f9 100644
--- a/src/contrib/cluster/Akka.Cluster.Tools.Tests.MultiNode/PublishSubscribe/DistributedPubSubMediatorSpec.cs
+++ b/src/contrib/cluster/Akka.Cluster.Tools.Tests.MultiNode/PublishSubscribe/DistributedPubSubMediatorSpec.cs
@@ -180,8 +180,7 @@ public Subscriber()
 
             protected override void OnReceive(object message)
             {
-                var ack = message as SubscribeAck;
-                if (ack != null && ack.Subscribe.Topic == "content" && ack.Subscribe.Ref.Equals(Self))
+                if (message is SubscribeAck ack && ack.Subscribe.Topic == "content" && ack.Subscribe.Ref.Equals(Self))
                 {
                     Context.Become(Ready);
                 }
@@ -204,8 +203,7 @@ public Sender()
 
             protected override void OnReceive(object message)
             {
-                var str = message as string;
-                if (str != null)
+                if (message is string str)
                 {
                     _mediator.Tell(new Send("/user/destination", str.ToUpperInvariant(), true));
                 }
diff --git a/src/contrib/cluster/Akka.Cluster.Tools.Tests.MultiNode/TestLease.cs b/src/contrib/cluster/Akka.Cluster.Tools.Tests.MultiNode/TestLease.cs
index 696682bb1..65d2fb847 100644
--- a/src/contrib/cluster/Akka.Cluster.Tools.Tests.MultiNode/TestLease.cs
+++ b/src/contrib/cluster/Akka.Cluster.Tools.Tests.MultiNode/TestLease.cs
@@ -167,7 +167,7 @@ protected override bool Receive(object message)
                     return true;
 
                 case ActionRequest ar:
-                    var r = requests.Where(i => i.Item2.Equals(ar.Request)).FirstOrDefault();
+                    var r = requests.FirstOrDefault(i => i.Item2.Equals(ar.Request));
                     if (r.Item1 != null)
                     {
                         _log.Info("Actioning request {0} to {1}", r.Item2, ar.Result);
diff --git a/src/contrib/cluster/Akka.DistributedData.Tests/ORDictionarySpec.cs b/src/contrib/cluster/Akka.DistributedData.Tests/ORDictionarySpec.cs
index 5db03176a..6bc7c9efe 100644
--- a/src/contrib/cluster/Akka.DistributedData.Tests/ORDictionarySpec.cs
+++ b/src/contrib/cluster/Akka.DistributedData.Tests/ORDictionarySpec.cs
@@ -189,12 +189,11 @@ public void ORDictionary_must_do_not_have_divergence_in_dot_versions_between_the
             var m1 = ORDictionary<string, GSet<string>>.Empty.SetItem(_node1, "a", GSet.Create("A"));
 
             var deltaVersion = default(long?);
-            var delta = m1.Delta as ORDictionary<string, GSet<string>>.PutDeltaOperation;
-            if (delta != null)
+
+            if (m1.Delta is ORDictionary<string, GSet<string>>.PutDeltaOperation delta)
             {
                 VersionVector v;
-                var addDelta = delta.Underlying as ORSet<string>.AddDeltaOperation;
-                if (addDelta != null && addDelta.Underlying.ElementsMap.TryGetValue("a", out v))
+                if (delta.Underlying is ORSet<string>.AddDeltaOperation addDelta && addDelta.Underlying.ElementsMap.TryGetValue("a", out v))
                     deltaVersion = v.VersionAt(_node1);
             }
 
diff --git a/src/contrib/cluster/Akka.DistributedData/ORSet.cs b/src/contrib/cluster/Akka.DistributedData/ORSet.cs
index 150b29c32..ca9ea0526 100644
--- a/src/contrib/cluster/Akka.DistributedData/ORSet.cs
+++ b/src/contrib/cluster/Akka.DistributedData/ORSet.cs
@@ -518,9 +518,9 @@ public AddDeltaOperation(ORSet<T> underlying)
             public override ORSet<T> Underlying { get; }
             public override IReplicatedData Merge(IReplicatedData other)
             {
-                if (other is AddDeltaOperation)
+                if (other is AddDeltaOperation addDeltaOperation)
                 {
-                    var u = ((AddDeltaOperation)other).Underlying;
+                    var u = addDeltaOperation.Underlying;
                     // Note that we only merge deltas originating from the same node
                     return new AddDeltaOperation(new ORSet<T>(
                         ConcatElementsMap(u.ElementsMap),
@@ -530,9 +530,9 @@ public override IReplicatedData Merge(IReplicatedData other)
                 {
                     return new DeltaGroup(ImmutableArray.Create(this, other));
                 }
-                else if (other is DeltaGroup)
+                else if (other is DeltaGroup deltaGroup)
                 {
-                    var vector = ((DeltaGroup)other).Operations;
+                    var vector = deltaGroup.Operations;
                     return new DeltaGroup(vector.Add(this));
                 }
                 else throw new ArgumentException($"Unknown delta operation of type {other.GetType()}", nameof(other));
@@ -567,9 +567,9 @@ public override IReplicatedData Merge(IReplicatedData other)
                 {
                     return new DeltaGroup(ImmutableArray.Create(this, other));
                 }
-                else if (other is DeltaGroup)
+                else if (other is DeltaGroup deltaGroup)
                 {
-                    var vector = ((DeltaGroup)other).Operations;
+                    var vector = deltaGroup.Operations;
                     return new DeltaGroup(vector.Add(this));
                 }
                 else throw new ArgumentException($"Unknown delta operation of type {other.GetType()}", nameof(other));
@@ -590,9 +590,9 @@ public override IReplicatedData Merge(IReplicatedData other)
                 {
                     return new DeltaGroup(ImmutableArray.Create(this, other));
                 }
-                else if (other is DeltaGroup)
+                else if (other is DeltaGroup deltaGroup)
                 {
-                    var vector = ((DeltaGroup)other).Operations;
+                    var vector = deltaGroup.Operations;
                     return new DeltaGroup(vector.Add(this));
                 }
                 else throw new ArgumentException($"Unknown delta operation of type {other.GetType()}", nameof(other));
diff --git a/src/contrib/cluster/Akka.DistributedData/ReadAggregator.cs b/src/contrib/cluster/Akka.DistributedData/ReadAggregator.cs
index 8972e845f..93ee8e0a1 100644
--- a/src/contrib/cluster/Akka.DistributedData/ReadAggregator.cs
+++ b/src/contrib/cluster/Akka.DistributedData/ReadAggregator.cs
@@ -41,12 +41,12 @@ public ReadAggregator(IKey key, IReadConsistency consistency, object req, IImmut
 
         private int GetDoneWhenRemainingSize()
         {
-            if (_consistency is ReadFrom) return Nodes.Count - (((ReadFrom) _consistency).N - 1);
+            if (_consistency is ReadFrom readFrom) return Nodes.Count - (readFrom.N - 1);
             else if (_consistency is ReadAll) return 0;
-            else if (_consistency is ReadMajority)
+            else if (_consistency is ReadMajority readMajority)
             {
                 var ncount = Nodes.Count + 1;
-                var w = CalculateMajorityWithMinCapacity(((ReadMajority) _consistency).MinCapacity, ncount);
+                var w = CalculateMajorityWithMinCapacity(readMajority.MinCapacity, ncount);
                 return ncount - w;
             }
             else if (_consistency is ReadLocal) throw new ArgumentException("ReadAggregator does not support ReadLocal");
@@ -137,7 +137,7 @@ public sealed class ReadLocal : IReadConsistency
         private ReadLocal() { }
 
         /// <inheritdoc/>
-        public override bool Equals(object obj) => obj != null && obj is ReadLocal;
+        public override bool Equals(object obj) => obj is ReadLocal;
 
         /// <inheritdoc/>
         public override string ToString() => "ReadLocal";
diff --git a/src/contrib/cluster/Akka.DistributedData/WriteAggregator.cs b/src/contrib/cluster/Akka.DistributedData/WriteAggregator.cs
index d068b4b16..8b452bfd0 100644
--- a/src/contrib/cluster/Akka.DistributedData/WriteAggregator.cs
+++ b/src/contrib/cluster/Akka.DistributedData/WriteAggregator.cs
@@ -167,7 +167,7 @@ public sealed class WriteLocal : IWriteConsistency
         /// <inheritdoc/>
         public override bool Equals(object obj)
         {
-            return obj != null && obj is WriteLocal;
+            return obj is WriteLocal;
         }
 
         private WriteLocal() { }
diff --git a/src/contrib/persistence/Akka.Persistence.Sql.Common/Snapshot/QueryExecutor.cs b/src/contrib/persistence/Akka.Persistence.Sql.Common/Snapshot/QueryExecutor.cs
index 918f3243b..92c461bf3 100644
--- a/src/contrib/persistence/Akka.Persistence.Sql.Common/Snapshot/QueryExecutor.cs
+++ b/src/contrib/persistence/Akka.Persistence.Sql.Common/Snapshot/QueryExecutor.cs
@@ -353,9 +353,9 @@ protected virtual void SetManifestParameters(object snapshot, DbCommand command)
             var serializer = Serialization.FindSerializerForType(snapshotType, Configuration.DefaultSerializer);
 
             string manifest = "";
-            if (serializer is SerializerWithStringManifest)
+            if (serializer is SerializerWithStringManifest serializerWithStringManifest)
             {
-                manifest = ((SerializerWithStringManifest)serializer).Manifest(snapshot);
+                manifest = serializerWithStringManifest.Manifest(snapshot);
             }
             else
             {
diff --git a/src/contrib/serializers/Akka.Serialization.TestKit/UntypedContainerMessage.cs b/src/contrib/serializers/Akka.Serialization.TestKit/UntypedContainerMessage.cs
index 1629911bc..585635b4b 100644
--- a/src/contrib/serializers/Akka.Serialization.TestKit/UntypedContainerMessage.cs
+++ b/src/contrib/serializers/Akka.Serialization.TestKit/UntypedContainerMessage.cs
@@ -45,7 +45,7 @@ public override int GetHashCode()
 
         public override string ToString()
         {
-            return String.Format("<UntypedContainerMessage {0}>", Contents);
+            return $"<UntypedContainerMessage {Contents}>";
         }
     }
 }
diff --git a/src/core/Akka.Cluster.Tests.MultiNode/ClusterDeathWatchSpec.cs b/src/core/Akka.Cluster.Tests.MultiNode/ClusterDeathWatchSpec.cs
index a40765533..2bfa7fabe 100644
--- a/src/core/Akka.Cluster.Tests.MultiNode/ClusterDeathWatchSpec.cs
+++ b/src/core/Akka.Cluster.Tests.MultiNode/ClusterDeathWatchSpec.cs
@@ -277,12 +277,12 @@ public void An_actor_watching_a_remote_actor_in_the_cluster_must_be_able_to_shut
                     {
                         if (!Sys.WhenTerminated.Wait(timeout)) // TestConductor.Shutdown called by First MUST terminate this actor system
                         {
-                            Assert.True(false, String.Format("Failed to stop [{0}] within [{1}]", Sys.Name, timeout));
+                            Assert.True(false, $"Failed to stop [{Sys.Name}] within [{timeout}]");
                         }
                     }
                     catch (TimeoutException)
                     {
-                        Assert.True(false, String.Format("Failed to stop [{0}] within [{1}]", Sys.Name, timeout));
+                        Assert.True(false, $"Failed to stop [{Sys.Name}] within [{timeout}]");
                     }
 
                     
diff --git a/src/core/Akka.Cluster.Tests.MultiNode/LeaderLeavingSpec.cs b/src/core/Akka.Cluster.Tests.MultiNode/LeaderLeavingSpec.cs
index 25695b3ab..1045eb519 100644
--- a/src/core/Akka.Cluster.Tests.MultiNode/LeaderLeavingSpec.cs
+++ b/src/core/Akka.Cluster.Tests.MultiNode/LeaderLeavingSpec.cs
@@ -132,14 +132,13 @@ public Listener(Address oldLeaderAddress, TestLatch latch)
 
             protected override void OnReceive(object message)
             {
-                var state = message as ClusterEvent.CurrentClusterState;
-                if (state != null)
+                if (message is ClusterEvent.CurrentClusterState state)
                 {
                     if (state.Members.Any(m => m.Address == _oldLeaderAddress && m.Status == MemberStatus.Exiting))
                         _latch.CountDown();
                 }
-                var memberExited = message as ClusterEvent.MemberExited;
-                if(memberExited != null && memberExited.Member.Address == _oldLeaderAddress)
+
+                if(message is ClusterEvent.MemberExited memberExited && memberExited.Member.Address == _oldLeaderAddress)
                     _latch.CountDown();
             }
         }
diff --git a/src/core/Akka.Cluster.Tests.MultiNode/RestartFirstSeedNodeSpec.cs b/src/core/Akka.Cluster.Tests.MultiNode/RestartFirstSeedNodeSpec.cs
index 4af498b94..08b5b22a1 100644
--- a/src/core/Akka.Cluster.Tests.MultiNode/RestartFirstSeedNodeSpec.cs
+++ b/src/core/Akka.Cluster.Tests.MultiNode/RestartFirstSeedNodeSpec.cs
@@ -177,8 +177,7 @@ private class Listener : UntypedActor
         {
             protected override void OnReceive(object message)
             {
-                var address = message as Address;
-                if (address != null)
+                if (message is Address address)
                 {
                     _seedNode1Address = address;
                     Sender.Tell("ok");
diff --git a/src/core/Akka.Cluster.Tests.MultiNode/Routing/ClusterBroadcastRouter2266BugfixSpec.cs b/src/core/Akka.Cluster.Tests.MultiNode/Routing/ClusterBroadcastRouter2266BugfixSpec.cs
index e17250560..72e31fa0d 100644
--- a/src/core/Akka.Cluster.Tests.MultiNode/Routing/ClusterBroadcastRouter2266BugfixSpec.cs
+++ b/src/core/Akka.Cluster.Tests.MultiNode/Routing/ClusterBroadcastRouter2266BugfixSpec.cs
@@ -121,8 +121,7 @@ private Address FullAddress(IActorRef actorRef)
             var zero = Roles.Select(GetAddress).ToDictionary(c => c, c => 0);
             var replays = ReceiveWhile(5.Seconds(), msg =>
             {
-                var routee = msg as ClusterBroadcastGroupSpecConfig.Reply;
-                if (routee != null && routee.RouteeType.GetType() == routeeType.GetType())
+                if (msg is ClusterBroadcastGroupSpecConfig.Reply routee && routee.RouteeType.GetType() == routeeType.GetType())
                     return FullAddress(routee.ActorRef);
                 return null;
             }, expectedReplies).Aggregate(zero, (replyMap, address) =>
diff --git a/src/core/Akka.Cluster.Tests.MultiNode/Routing/ClusterRoundRobinSpec.cs b/src/core/Akka.Cluster.Tests.MultiNode/Routing/ClusterRoundRobinSpec.cs
index efd8c7f03..7ab583731 100644
--- a/src/core/Akka.Cluster.Tests.MultiNode/Routing/ClusterRoundRobinSpec.cs
+++ b/src/core/Akka.Cluster.Tests.MultiNode/Routing/ClusterRoundRobinSpec.cs
@@ -426,8 +426,7 @@ private void A_cluster_router_with_a_RoundRobin_router_must_deploy_programatical
 
                 routees().ForEach(actorRef =>
                 {
-                    var actorRefRoutee = actorRef as ActorRefRoutee;
-                    if (actorRefRoutee != null)
+                    if (actorRef is ActorRefRoutee actorRefRoutee)
                     {
                         Watch(actorRefRoutee.Actor);
                     }
diff --git a/src/core/Akka.Cluster.Tests.MultiNode/Routing/UseRoleIgnoredSpec.cs b/src/core/Akka.Cluster.Tests.MultiNode/Routing/UseRoleIgnoredSpec.cs
index 155883b33..156590583 100644
--- a/src/core/Akka.Cluster.Tests.MultiNode/Routing/UseRoleIgnoredSpec.cs
+++ b/src/core/Akka.Cluster.Tests.MultiNode/Routing/UseRoleIgnoredSpec.cs
@@ -112,8 +112,7 @@ private Address FullAddress(IActorRef actorRef)
             var zero = Roles.Select(c => GetAddress(c)).ToDictionary(c => c, c => 0);
             var replays = ReceiveWhile(5.Seconds(), msg =>
             {
-                var routee = msg as UseRoleIgnoredSpecConfig.Reply;
-                if (routee != null && routee.RouteeType.GetType() == routeeType.GetType())
+                if (msg is UseRoleIgnoredSpecConfig.Reply routee && routee.RouteeType.GetType() == routeeType.GetType())
                     return FullAddress(routee.ActorRef);
                 return null;
             }, expectedReplies).Aggregate(zero, (replyMap, address) =>
diff --git a/src/core/Akka.Cluster/Cluster.cs b/src/core/Akka.Cluster/Cluster.cs
index 52de7e074..a77d1dc62 100644
--- a/src/core/Akka.Cluster/Cluster.cs
+++ b/src/core/Akka.Cluster/Cluster.cs
@@ -538,10 +538,7 @@ internal void Shutdown()
                 LogInfo("Shutting down...");
                 System.Stop(_clusterDaemons);
 
-                if (_readView != null)
-                {
-                    _readView.Dispose();
-                }
+                _readView?.Dispose();
 
                 LogInfo("Successfully shut down");
             }
diff --git a/src/core/Akka.Cluster/ClusterDaemon.cs b/src/core/Akka.Cluster/ClusterDaemon.cs
index 6785e89ae..b3640054f 100644
--- a/src/core/Akka.Cluster/ClusterDaemon.cs
+++ b/src/core/Akka.Cluster/ClusterDaemon.cs
@@ -2176,10 +2176,7 @@ public void LeaderActions()
                             "Leader can currently not perform its duties, reachability status: [{0}], member status: [{1}]",
                             _latestGossip.ReachabilityExcludingDownedObservers,
                             string.Join(", ", _latestGossip.Members
-                                .Select(m => string.Format("${0} ${1} seen=${2}",
-                                    m.Address,
-                                    m.Status,
-                                    _latestGossip.SeenByNode(m.UniqueAddress)))));
+                                .Select(m => $"${m.Address} ${m.Status} seen=${_latestGossip.SeenByNode(m.UniqueAddress)}")));
                     }
                 }
             }
@@ -2728,10 +2725,9 @@ protected override void OnReceive(object message)
                 }
                 _attempts++;
             }
-            else if (message is InternalClusterAction.InitJoinAck)
+            else if (message is InternalClusterAction.InitJoinAck initJoinAck)
             {
                 //first InitJoinAck reply
-                var initJoinAck = (InternalClusterAction.InitJoinAck)message;
                 Context.Parent.Tell(new ClusterUserAction.JoinTo(initJoinAck.Address));
                 Context.Become(Done);
             }
@@ -2835,16 +2831,14 @@ protected override void OnReceive(object message)
                     Context.Stop(Self);
                 }
             }
-            else if (message is InternalClusterAction.InitJoinAck)
+            else if (message is InternalClusterAction.InitJoinAck initJoinAck)
             {
                 // first InitJoinAck reply, join existing cluster
-                var initJoinAck = (InternalClusterAction.InitJoinAck)message;
                 Context.Parent.Tell(new ClusterUserAction.JoinTo(initJoinAck.Address));
                 Context.Stop(Self);
             }
-            else if (message is InternalClusterAction.InitJoinNack)
+            else if (message is InternalClusterAction.InitJoinNack initJoinNack)
             {
-                var initJoinNack = (InternalClusterAction.InitJoinNack)message;
                 _remainingSeeds = _remainingSeeds.Remove(initJoinNack.Address);
                 if (_remainingSeeds.IsEmpty)
                 {
diff --git a/src/core/Akka.Cluster/Serialization/ClusterMessageSerializer.cs b/src/core/Akka.Cluster/Serialization/ClusterMessageSerializer.cs
index 0f82abc37..5b230bc48 100644
--- a/src/core/Akka.Cluster/Serialization/ClusterMessageSerializer.cs
+++ b/src/core/Akka.Cluster/Serialization/ClusterMessageSerializer.cs
@@ -409,8 +409,7 @@ private static UniqueAddress UniqueAddressFrom(Proto.Msg.UniqueAddress uniqueAdd
         [MethodImpl(MethodImplOptions.AggressiveInlining)]
         private static string GetObjectManifest(Serializer serializer, object obj)
         {
-            var manifestSerializer = serializer as SerializerWithStringManifest;
-            if (manifestSerializer != null)
+            if (serializer is SerializerWithStringManifest manifestSerializer)
             {
                 return manifestSerializer.Manifest(obj);
             }
diff --git a/src/core/Akka.Cluster/Serialization/Proto/ClusterMessages.g.cs b/src/core/Akka.Cluster/Serialization/Proto/ClusterMessages.g.cs
index a0bc89667..8240c21c7 100644
--- a/src/core/Akka.Cluster/Serialization/Proto/ClusterMessages.g.cs
+++ b/src/core/Akka.Cluster/Serialization/Proto/ClusterMessages.g.cs
@@ -262,9 +262,7 @@ internal sealed partial class Join : pb::IMessage<Join>
         output.WriteRawTag(26);
         output.WriteString(AppVersion);
       }
-      if (_unknownFields != null) {
-        _unknownFields.WriteTo(ref output);
-      }
+      _unknownFields?.WriteTo(ref output);
     }
     #endif
 
@@ -492,9 +490,7 @@ internal sealed partial class Welcome : pb::IMessage<Welcome>
         output.WriteRawTag(18);
         output.WriteMessage(Gossip);
       }
-      if (_unknownFields != null) {
-        _unknownFields.WriteTo(ref output);
-      }
+      _unknownFields?.WriteTo(ref output);
     }
     #endif
 
@@ -743,9 +739,7 @@ internal sealed partial class GossipEnvelope : pb::IMessage<GossipEnvelope>
         output.WriteRawTag(26);
         output.WriteBytes(SerializedGossip);
       }
-      if (_unknownFields != null) {
-        _unknownFields.WriteTo(ref output);
-      }
+      _unknownFields?.WriteTo(ref output);
     }
     #endif
 
@@ -1001,9 +995,7 @@ internal sealed partial class GossipStatus : pb::IMessage<GossipStatus>
         output.WriteRawTag(26);
         output.WriteMessage(Version);
       }
-      if (_unknownFields != null) {
-        _unknownFields.WriteTo(ref output);
-      }
+      _unknownFields?.WriteTo(ref output);
     }
     #endif
 
@@ -1315,9 +1307,7 @@ internal sealed partial class Gossip : pb::IMessage<Gossip>
         output.WriteMessage(Version);
       }
       allAppVersions_.WriteTo(ref output, _repeated_allAppVersions_codec);
-      if (_unknownFields != null) {
-        _unknownFields.WriteTo(ref output);
-      }
+      _unknownFields?.WriteTo(ref output);
     }
     #endif
 
@@ -1583,9 +1573,7 @@ internal sealed partial class GossipOverview : pb::IMessage<GossipOverview>
     void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
       seen_.WriteTo(ref output, _repeated_seen_codec);
       observerReachability_.WriteTo(ref output, _repeated_observerReachability_codec);
-      if (_unknownFields != null) {
-        _unknownFields.WriteTo(ref output);
-      }
+      _unknownFields?.WriteTo(ref output);
     }
     #endif
 
@@ -1803,9 +1791,7 @@ internal sealed partial class ObserverReachability : pb::IMessage<ObserverReacha
         output.WriteRawTag(32);
         output.WriteInt64(Version);
       }
-      if (_unknownFields != null) {
-        _unknownFields.WriteTo(ref output);
-      }
+      _unknownFields?.WriteTo(ref output);
     }
     #endif
 
@@ -2043,9 +2029,7 @@ internal sealed partial class SubjectReachability : pb::IMessage<SubjectReachabi
         output.WriteRawTag(32);
         output.WriteInt64(Version);
       }
-      if (_unknownFields != null) {
-        _unknownFields.WriteTo(ref output);
-      }
+      _unknownFields?.WriteTo(ref output);
     }
     #endif
 
@@ -2353,9 +2337,7 @@ internal sealed partial class Member : pb::IMessage<Member>
         output.WriteRawTag(40);
         output.WriteInt32(AppVersionIndex);
       }
-      if (_unknownFields != null) {
-        _unknownFields.WriteTo(ref output);
-      }
+      _unknownFields?.WriteTo(ref output);
     }
     #endif
 
@@ -2617,9 +2599,7 @@ internal sealed partial class VectorClock : pb::IMessage<VectorClock>
         output.WriteInt64(Timestamp);
       }
       versions_.WriteTo(ref output, _repeated_versions_codec);
-      if (_unknownFields != null) {
-        _unknownFields.WriteTo(ref output);
-      }
+      _unknownFields?.WriteTo(ref output);
     }
     #endif
 
@@ -2823,9 +2803,7 @@ internal sealed partial class Version : pb::IMessage<Version>
             output.WriteRawTag(16);
             output.WriteInt64(Timestamp);
           }
-          if (_unknownFields != null) {
-            _unknownFields.WriteTo(ref output);
-          }
+          _unknownFields?.WriteTo(ref output);
         }
         #endif
 
@@ -3039,9 +3017,7 @@ internal sealed partial class UniqueAddress : pb::IMessage<UniqueAddress>
         output.WriteRawTag(16);
         output.WriteUInt32(Uid);
       }
-      if (_unknownFields != null) {
-        _unknownFields.WriteTo(ref output);
-      }
+      _unknownFields?.WriteTo(ref output);
     }
     #endif
 
@@ -3256,9 +3232,7 @@ internal sealed partial class ClusterRouterPool : pb::IMessage<ClusterRouterPool
         output.WriteRawTag(18);
         output.WriteMessage(Settings);
       }
-      if (_unknownFields != null) {
-        _unknownFields.WriteTo(ref output);
-      }
+      _unknownFields?.WriteTo(ref output);
     }
     #endif
 
@@ -3504,9 +3478,7 @@ internal sealed partial class Pool : pb::IMessage<Pool>
         output.WriteRawTag(26);
         output.WriteBytes(Data);
       }
-      if (_unknownFields != null) {
-        _unknownFields.WriteTo(ref output);
-      }
+      _unknownFields?.WriteTo(ref output);
     }
     #endif
 
@@ -3770,9 +3742,7 @@ internal sealed partial class ClusterRouterPoolSettings : pb::IMessage<ClusterRo
         output.WriteRawTag(34);
         output.WriteString(UseRole);
       }
-      if (_unknownFields != null) {
-        _unknownFields.WriteTo(ref output);
-      }
+      _unknownFields?.WriteTo(ref output);
     }
     #endif
 
diff --git a/src/core/Akka.MultiNodeTestRunner.Shared.Tests/NodeMessageHelpers.cs b/src/core/Akka.MultiNodeTestRunner.Shared.Tests/NodeMessageHelpers.cs
index 3937a3aa4..72c26eb51 100644
--- a/src/core/Akka.MultiNodeTestRunner.Shared.Tests/NodeMessageHelpers.cs
+++ b/src/core/Akka.MultiNodeTestRunner.Shared.Tests/NodeMessageHelpers.cs
@@ -94,7 +94,7 @@ public static SortedSet<MultiNodeMessage> GenerateMessageSequence(int nodeIndex,
             {
                 messages.Add(new MultiNodeLogMessage(
                     GetTimeStamp(startTime, startTime + TimeSpan.FromSeconds(20)), 
-                    String.Format("Message {0}", i), nodeIndex, DummyRoleFor + nodeIndex,
+                    $"Message {i}", nodeIndex, DummyRoleFor + nodeIndex,
                     "/foo", LogLevel.InfoLevel));
             }
             return messages;
@@ -113,7 +113,7 @@ public static SortedSet<MultiNodeMessage> GenerateMessageFragmentSequence(int no
             {
                 messages.Add(new MultiNodeLogMessageFragment(
                     GetTimeStamp(startTime, startTime + TimeSpan.FromSeconds(20)),
-                    String.Format("Message {0}", i), nodeIndex, DummyRoleFor + nodeIndex));
+                    $"Message {i}", nodeIndex, DummyRoleFor + nodeIndex));
             }
             return messages;
         }
@@ -124,7 +124,7 @@ public static SortedSet<MultiNodeMessage> GenerateTestRunnerMessageSequence(int
             var startTime = DateTime.UtcNow;
             foreach (var i in Enumerable.Range(0, count))
             {
-                messages.Add(new MultiNodeTestRunnerMessage(GetTimeStamp(startTime, startTime + TimeSpan.FromSeconds(20)), String.Format("Message {0}", i),
+                messages.Add(new MultiNodeTestRunnerMessage(GetTimeStamp(startTime, startTime + TimeSpan.FromSeconds(20)), $"Message {i}",
                     "/foo", LogLevel.InfoLevel));
             }
             return messages;
@@ -145,7 +145,7 @@ public static SortedSet<MultiNodeMessage> GenerateResultMessage(int nodeIndex, b
             messages.Add(
                 new MultiNodeResultMessage(
                     GetTimeStamp(startTime, startTime + TimeSpan.FromSeconds(30)),
-                    String.Format("Test passed? {0}", pass), nodeIndex, DummyRoleFor + nodeIndex, pass));
+                    $"Test passed? {pass}", nodeIndex, DummyRoleFor + nodeIndex, pass));
             return messages;
         }
 
diff --git a/src/core/Akka.MultiNodeTestRunner.Shared/Persistence/JsonPersistentTestRunStore.cs b/src/core/Akka.MultiNodeTestRunner.Shared/Persistence/JsonPersistentTestRunStore.cs
index 88f11e69a..f0029ecef 100644
--- a/src/core/Akka.MultiNodeTestRunner.Shared/Persistence/JsonPersistentTestRunStore.cs
+++ b/src/core/Akka.MultiNodeTestRunner.Shared/Persistence/JsonPersistentTestRunStore.cs
@@ -29,8 +29,7 @@ protected override JsonProperty CreateProperty(MemberInfo member, MemberSerializ
 
                 if (!prop.Writable)
                 {
-                    var property = member as PropertyInfo;
-                    if (property != null)
+                    if (member is PropertyInfo property)
                     {
                         var hasPrivateSetter = property.GetSetMethod(true) != null;
                         prop.Writable = hasPrivateSetter;
diff --git a/src/core/Akka.MultiNodeTestRunner.Shared/Persistence/VisualizerRuntimeTemplate.Tree.cs b/src/core/Akka.MultiNodeTestRunner.Shared/Persistence/VisualizerRuntimeTemplate.Tree.cs
index 9c159baa1..a0294582d 100644
--- a/src/core/Akka.MultiNodeTestRunner.Shared/Persistence/VisualizerRuntimeTemplate.Tree.cs
+++ b/src/core/Akka.MultiNodeTestRunner.Shared/Persistence/VisualizerRuntimeTemplate.Tree.cs
@@ -105,8 +105,8 @@ public string BuildOptions(FactData spec)
                 var startEndDelta = (endDisplayTime - startEventTime).Ticks / 2;
                 endDisplayTime = endDisplayTime.AddTicks(startEndDelta);
 
-                startEventTimeParameter = string.Format("'{0}'", startEventTime.ToString("o"));
-                endEventTimeParameter = string.Format("'{0}'", endDisplayTime.ToString("o"));
+                startEventTimeParameter = $"'{startEventTime.ToString("o")}'";
+                endEventTimeParameter = $"'{endDisplayTime.ToString("o")}'";
             }
 
 
diff --git a/src/core/Akka.MultiNodeTestRunner.Shared/Reporting/MultiNodeMessage.cs b/src/core/Akka.MultiNodeTestRunner.Shared/Reporting/MultiNodeMessage.cs
index 112b48ffb..ec5645049 100644
--- a/src/core/Akka.MultiNodeTestRunner.Shared/Reporting/MultiNodeMessage.cs
+++ b/src/core/Akka.MultiNodeTestRunner.Shared/Reporting/MultiNodeMessage.cs
@@ -91,8 +91,7 @@ public override bool Equals(object obj)
             if (ReferenceEquals(null, obj)) return false;
             if (ReferenceEquals(this, obj)) return true;
             if (obj.GetType() != GetType()) return false;
-            var msg = obj as MultiNodeMessage;
-            return msg != null && Equals(msg);
+            return obj is MultiNodeMessage msg && Equals(msg);
         }
 
         /// <inheritdoc/>
@@ -149,8 +148,7 @@ public override int GetHashCode()
         /// <inheritdoc/>
         public override bool Equals(MultiNodeMessage other)
         {
-            var otherResultMessage = other as MultiNodeResultMessage;
-            return otherResultMessage != null &&
+            return other is MultiNodeResultMessage otherResultMessage &&
                    base.Equals(other) &&
                    Passed == otherResultMessage.Passed;
         }
@@ -206,8 +204,7 @@ public override int GetHashCode()
         /// <inheritdoc/>
         public override bool Equals(MultiNodeMessage other)
         {
-            var otherLogMessage = other as MultiNodeTestRunnerMessage;
-            return otherLogMessage != null &&
+            return other is MultiNodeTestRunnerMessage otherLogMessage &&
                     base.Equals(other) &&
                     LogLevel == otherLogMessage.LogLevel &&
                     string.Equals(ActorPath, otherLogMessage.ActorPath);
@@ -285,8 +282,7 @@ public override int GetHashCode()
         /// <inheritdoc/>
         public override bool Equals(MultiNodeMessage other)
         {
-            var otherLogMessage = other as MultiNodeLogMessage;
-            return otherLogMessage != null &&
+            return other is MultiNodeLogMessage otherLogMessage &&
                     base.Equals(other) &&
                     LogLevel == otherLogMessage.LogLevel &&
                     string.Equals(ActorPath, otherLogMessage.ActorPath);
diff --git a/src/core/Akka.MultiNodeTestRunner.Shared/Reporting/SpecRunCoordinator.cs b/src/core/Akka.MultiNodeTestRunner.Shared/Reporting/SpecRunCoordinator.cs
index 66b672822..8f3735925 100644
--- a/src/core/Akka.MultiNodeTestRunner.Shared/Reporting/SpecRunCoordinator.cs
+++ b/src/core/Akka.MultiNodeTestRunner.Shared/Reporting/SpecRunCoordinator.cs
@@ -23,7 +23,7 @@ public SpecRunCoordinator(string className, string methodName, IList<NodeTest> n
             Nodes = nodes;
             MethodName = methodName;
             ClassName = className;
-            FactData = new FactData(string.Format("{0}.{1}", className, methodName));
+            FactData = new FactData($"{className}.{methodName}");
             _nodeActors = new Dictionary<int, IActorRef>();
             SetReceive();
         }
diff --git a/src/core/Akka.MultiNodeTestRunner.Shared/Sinks/ConsoleMessageSinkActor.cs b/src/core/Akka.MultiNodeTestRunner.Shared/Sinks/ConsoleMessageSinkActor.cs
index 22b92aa1f..72f06392c 100644
--- a/src/core/Akka.MultiNodeTestRunner.Shared/Sinks/ConsoleMessageSinkActor.cs
+++ b/src/core/Akka.MultiNodeTestRunner.Shared/Sinks/ConsoleMessageSinkActor.cs
@@ -41,17 +41,14 @@ protected override void ReceiveFactData(FactData data)
 
         private void PrintSpecRunResults(FactData data)
         {
-            WriteSpecMessage(string.Format("Results for {0}", data.FactName));
-            WriteSpecMessage(string.Format("Start time: {0}", new DateTime(data.StartTime, DateTimeKind.Utc)));
+            WriteSpecMessage($"Results for {data.FactName}");
+            WriteSpecMessage($"Start time: {new DateTime(data.StartTime, DateTimeKind.Utc)}");
             foreach (var node in data.NodeFacts)
             {
-                WriteSpecMessage(string.Format(" --> Node {0}:{1} : {2} [{3} elapsed]", node.Value.NodeIndex, node.Value.NodeRole,
-                    node.Value.Passed.GetValueOrDefault(false) ? "PASS" : "FAIL", node.Value.Elapsed));
+                WriteSpecMessage($" --> Node {node.Value.NodeIndex}:{node.Value.NodeRole} : {(node.Value.Passed.GetValueOrDefault(false) ? "PASS" : "FAIL")} [{node.Value.Elapsed} elapsed]");
             }
-            WriteSpecMessage(string.Format("End time: {0}",
-                new DateTime(data.EndTime.GetValueOrDefault(DateTime.UtcNow.Ticks), DateTimeKind.Utc)));
-            WriteSpecMessage(string.Format("FINAL RESULT: {0} after {1}.",
-                data.Passed.GetValueOrDefault(false) ? "PASS" : "FAIL", data.Elapsed));
+            WriteSpecMessage($"End time: {new DateTime(data.EndTime.GetValueOrDefault(DateTime.UtcNow.Ticks), DateTimeKind.Utc)}");
+            WriteSpecMessage($"FINAL RESULT: {(data.Passed.GetValueOrDefault(false) ? "PASS" : "FAIL")} after {data.Elapsed}.");
 
             //If we had a failure
             if (data.Passed.GetValueOrDefault(false) == false)
@@ -61,14 +58,14 @@ private void PrintSpecRunResults(FactData data)
                 {
                     if (node.Value.Passed.GetValueOrDefault(false) == false)
                     {
-                        WriteSpecMessage(string.Format("<----------- BEGIN NODE {0}:{1} ----------->", node.Key, node.Value.NodeRole));
+                        WriteSpecMessage($"<----------- BEGIN NODE {node.Key}:{node.Value.NodeRole} ----------->");
                         foreach (var resultMessage in node.Value.ResultMessages)
                         {
-                            WriteSpecMessage(String.Format(" --> {0}", resultMessage.Message));
+                            WriteSpecMessage($" --> {resultMessage.Message}");
                         }
                         if (node.Value.ResultMessages == null || node.Value.ResultMessages.Count == 0)
                             WriteSpecMessage("[received no messages - SILENT FAILURE].");
-                        WriteSpecMessage(string.Format("<----------- END NODE {0}:{1} ----------->", node.Key, node.Value.NodeRole));
+                        WriteSpecMessage($"<----------- END NODE {node.Key}:{node.Value.NodeRole} ----------->");
                     }
                 }
             }
@@ -91,7 +88,7 @@ protected override void HandleTestRunEnd(EndTestRun endTestRun)
         protected override void HandleTestRunTree(TestRunTree tree)
         {
             var passedSpecs = tree.Specs.Count(x => x.Passed.GetValueOrDefault(false));
-            WriteSpecMessage(string.Format("Test run completed in [{0}] with {1}/{2} specs passed.", tree.Elapsed, passedSpecs, tree.Specs.Count()));
+            WriteSpecMessage($"Test run completed in [{tree.Elapsed}] with {passedSpecs}/{tree.Specs.Count()} specs passed.");
             foreach (var factData in tree.Specs)
             {
                 PrintSpecRunResults(factData);
@@ -100,7 +97,7 @@ protected override void HandleTestRunTree(TestRunTree tree)
 
         protected override void HandleNewSpec(BeginNewSpec newSpec)
         {
-            WriteSpecMessage(string.Format("Beginning spec {0}.{1} on {2} nodes", newSpec.ClassName, newSpec.MethodName, newSpec.Nodes.Count));
+            WriteSpecMessage($"Beginning spec {newSpec.ClassName}.{newSpec.MethodName} on {newSpec.Nodes.Count} nodes");
 
             base.HandleNewSpec(newSpec);
         }
diff --git a/src/core/Akka.MultiNodeTestRunner.Shared/Sinks/Messages.cs b/src/core/Akka.MultiNodeTestRunner.Shared/Sinks/Messages.cs
index 8ba9a037d..881ebc504 100644
--- a/src/core/Akka.MultiNodeTestRunner.Shared/Sinks/Messages.cs
+++ b/src/core/Akka.MultiNodeTestRunner.Shared/Sinks/Messages.cs
@@ -116,7 +116,7 @@ public LogMessageFragmentForNode(int nodeIndex, string nodeRole, string message,
 
         public override string ToString()
         {
-            return string.Format("[NODE{1}:{2}][{0}]: {3}", When, NodeIndex, NodeRole, Message);
+            return $"[NODE{When}:{NodeIndex}][{NodeRole}]: {Message}";
         }
     }
 
@@ -143,9 +143,7 @@ public LogMessageForTestRunner(string message, LogLevel level, DateTime when, st
 
         public override string ToString()
         {
-            return string.Format("[RUNNER][{0}][{1}][{2}]: {3}", When,
-                Level.ToString().Replace("Level", "").ToUpperInvariant(), LogSource,
-                Message);
+            return $"[RUNNER][{When}][{Level.ToString().Replace("Level", "").ToUpperInvariant()}][{LogSource}]: {Message}";
         }
     }
 
diff --git a/src/core/Akka.MultiNodeTestRunner.Shared/Sinks/Spec.cs b/src/core/Akka.MultiNodeTestRunner.Shared/Sinks/Spec.cs
index 955075061..acc57e266 100644
--- a/src/core/Akka.MultiNodeTestRunner.Shared/Sinks/Spec.cs
+++ b/src/core/Akka.MultiNodeTestRunner.Shared/Sinks/Spec.cs
@@ -37,7 +37,7 @@ public SpecPass(int nodeIndex, string nodeRole, string testDisplayName)
 
         public override string ToString()
         {
-            return string.Format("[Node{0}:{1}][PASS] {2}", NodeIndex, NodeRole, TestDisplayName);
+            return $"[Node{NodeIndex}:{NodeRole}][PASS] {TestDisplayName}";
         }
     }
 
@@ -65,7 +65,7 @@ public SpecFail(int nodeIndex, string nodeRole, string testDisplayName) : base(n
         public override string ToString()
         {
             var sb = new StringBuilder();
-            sb.AppendLine(string.Format("[Node{0}:{1}][FAIL] {2}", NodeIndex, NodeRole, TestDisplayName));
+            sb.AppendLine($"[Node{NodeIndex}:{NodeRole}][FAIL] {TestDisplayName}");
             foreach (var exception in FailureExceptionTypes)
             {
                 sb.AppendFormat("[Node{0}:{1}][FAIL-EXCEPTION] Type: {2}", NodeIndex, NodeRole, exception);
diff --git a/src/core/Akka.NodeTestRunner/Program.cs b/src/core/Akka.NodeTestRunner/Program.cs
index c4f84342e..2d0935d9b 100644
--- a/src/core/Akka.NodeTestRunner/Program.cs
+++ b/src/core/Akka.NodeTestRunner/Program.cs
@@ -129,8 +129,7 @@ static int Main(string[] args)
                         var timedOut = false;
                         if (!sink.Finished.WaitOne(MaxProcessWaitTimeout)) //timed out
                         {
-                            var line = string.Format("Timed out while waiting for test to complete after {0} ms",
-                                MaxProcessWaitTimeout);
+                            var line = $"Timed out while waiting for test to complete after {MaxProcessWaitTimeout} ms";
                             _logger.Tell(line);
                             Console.WriteLine(line);
                             timedOut = true;
diff --git a/src/core/Akka.NodeTestRunner/Sink.cs b/src/core/Akka.NodeTestRunner/Sink.cs
index 7da52a4b9..82f2482aa 100644
--- a/src/core/Akka.NodeTestRunner/Sink.cs
+++ b/src/core/Akka.NodeTestRunner/Sink.cs
@@ -40,14 +40,13 @@ public Sink(int nodeIndex, string nodeRole, IActorRef logger)
 
         public bool OnMessage(IMessageSinkMessage message)
         {
-            var resultMessage = message as ITestResultMessage;
-            if (resultMessage != null)
+            if (message is ITestResultMessage resultMessage)
             {
                 _logger.Tell(resultMessage.Output);
                 Console.WriteLine(resultMessage.Output);
             }
-            var testPassed = message as ITestPassed;
-            if (testPassed != null)
+
+            if (message is ITestPassed testPassed)
             {
                 //the MultiNodeTestRunner uses 1-based indexing, which is why we have to add 1 to the index.
                 var specPass = new SpecPass(_nodeIndex + 1, _nodeRole, testPassed.TestCase.DisplayName);
@@ -56,8 +55,8 @@ public bool OnMessage(IMessageSinkMessage message)
                 Passed = true;
                 return true;
             }
-            var testFailed = message as ITestFailed;
-            if (testFailed != null)
+
+            if (message is ITestFailed testFailed)
             {
                 //the MultiNodeTestRunner uses 1-based indexing, which is why we have to add 1 to the index.
                 var specFail = new SpecFail(_nodeIndex + 1, _nodeRole, testFailed.TestCase.DisplayName);
@@ -68,8 +67,8 @@ public bool OnMessage(IMessageSinkMessage message)
                 Console.WriteLine(specFail.ToString());
                 return true;
             }
-            var errorMessage = message as ErrorMessage;
-            if (errorMessage != null)
+
+            if (message is ErrorMessage errorMessage)
             {
                 var specFail = new SpecFail(_nodeIndex + 1, _nodeRole, "ERRORED");
                 foreach (var failedMessage in errorMessage.Messages) specFail.FailureMessages.Add(failedMessage);
diff --git a/src/core/Akka.Persistence.TCK/Serialization/JournalSerializationSpec.cs b/src/core/Akka.Persistence.TCK/Serialization/JournalSerializationSpec.cs
index 754fe912c..5ee871a09 100644
--- a/src/core/Akka.Persistence.TCK/Serialization/JournalSerializationSpec.cs
+++ b/src/core/Akka.Persistence.TCK/Serialization/JournalSerializationSpec.cs
@@ -193,8 +193,8 @@ public MyPayload2Serializer(ExtendedActorSystem system) : base(system)
 
             public override byte[] ToBinary(object obj)
             {
-                if (obj is MyPayload2)
-                    return Encoding.UTF8.GetBytes(string.Format(".{0}:{1}", ((MyPayload2)obj).Data, ((MyPayload2)obj).N));
+                if (obj is MyPayload2 myPayload2)
+                    return Encoding.UTF8.GetBytes($".{myPayload2.Data}:{((MyPayload2)obj).N}");
                 return null;
             }
 
diff --git a/src/core/Akka.Persistence.Tests/AtLeastOnceDeliveryFailureSpec.cs b/src/core/Akka.Persistence.Tests/AtLeastOnceDeliveryFailureSpec.cs
index 9220c90ac..28202b4af 100644
--- a/src/core/Akka.Persistence.Tests/AtLeastOnceDeliveryFailureSpec.cs
+++ b/src/core/Akka.Persistence.Tests/AtLeastOnceDeliveryFailureSpec.cs
@@ -160,8 +160,8 @@ protected override bool ReceiveRecover(object message)
                     {
                         UpdateState(evt);
                         if (ChaosSupportExtensions.ShouldFail(_replayProcessingFailureRate))
-                            throw new TestException(DebugMessage(string.Format("replay failed at event {0}", evt)));
-                        Log.Debug(DebugMessage(string.Format("replayed event {0}", evt)));
+                            throw new TestException(DebugMessage($"replay failed at event {evt}"));
+                        Log.Debug(DebugMessage($"replayed event {evt}"));
                     }).WasHandled;
             }
 
@@ -180,8 +180,8 @@ protected override bool ReceiveCommand(object message)
                             {
                                 UpdateState(sent);
                                 if (ChaosSupportExtensions.ShouldFail(_liveProcessingFailureRate))
-                                    throw new TestException(DebugMessage(string.Format("failed at payload {0}", sent.I)));
-                                Log.Debug(DebugMessage(String.Format("processed payload {0}", sent.I)));
+                                    throw new TestException(DebugMessage($"failed at payload {sent.I}"));
+                                Log.Debug(DebugMessage($"processed payload {sent.I}"));
                             });
                     })
                     .With<Confirm>(confirm =>
@@ -193,23 +193,20 @@ protected override bool ReceiveCommand(object message)
 
             private void UpdateState(IEvt evt)
             {
-                if (evt is MsgSent)
+                if (evt is MsgSent msg)
                 {
-                    var msg = (MsgSent)evt;
                     Add(msg.I);
                     Deliver(_destination.Path, deliveryId => new Msg(deliveryId, msg.I));
                 }
-                else if (evt is MsgConfirmed)
+                else if (evt is MsgConfirmed confirmation)
                 {
-                    var confirmation = (MsgConfirmed)evt;
                     ConfirmDelivery(confirmation.DeliveryId);
                 }
             }
 
             private string DebugMessage(string msg)
             {
-                return string.Format("[Sender] {0} (mode = {1}, seqNr = {2}, state = {3})",
-                    msg, IsRecovering ? "replay" : "live", LastSequenceNr, string.Join(", ", State));
+                return $"[Sender] {msg} (mode = {(IsRecovering ? "replay" : "live")}, seqNr = {LastSequenceNr}, state = {string.Join(", ", State)})";
             }
 
             private void Add(int i)
diff --git a/src/core/Akka.Persistence.Tests/AtLeastOnceDeliveryReceiveActorSpec.cs b/src/core/Akka.Persistence.Tests/AtLeastOnceDeliveryReceiveActorSpec.cs
index 1da19c0ae..7e12168ba 100644
--- a/src/core/Akka.Persistence.Tests/AtLeastOnceDeliveryReceiveActorSpec.cs
+++ b/src/core/Akka.Persistence.Tests/AtLeastOnceDeliveryReceiveActorSpec.cs
@@ -335,7 +335,7 @@ public DeliverToStarSelection(string name)
                     // this is not supported currently, so expecting exception
                     try
                     {
-                        Deliver(Context.ActorSelection("*"), id => string.Format("{0}{1}", message, id));
+                        Deliver(Context.ActorSelection("*"), id => $"{message}{id}");
                     }
                     catch (Exception ex)
                     {
diff --git a/src/core/Akka.Persistence.Tests/AtLeastOnceDeliverySpec.cs b/src/core/Akka.Persistence.Tests/AtLeastOnceDeliverySpec.cs
index 46c29c4c5..d8059fcf2 100644
--- a/src/core/Akka.Persistence.Tests/AtLeastOnceDeliverySpec.cs
+++ b/src/core/Akka.Persistence.Tests/AtLeastOnceDeliverySpec.cs
@@ -348,7 +348,7 @@ protected override bool ReceiveCommand(object message)
                 // this is not supported currently, so expecting exception
                 try
                 {
-                    Deliver(Context.ActorSelection("*"), id => string.Format("{0}{1}", message, id));
+                    Deliver(Context.ActorSelection("*"), id => $"{message}{id}");
                 }
                 catch (Exception ex)
                 {
diff --git a/src/core/Akka.Persistence.Tests/EndToEndEventAdapterSpec.cs b/src/core/Akka.Persistence.Tests/EndToEndEventAdapterSpec.cs
index 25dd0291d..d497ee734 100644
--- a/src/core/Akka.Persistence.Tests/EndToEndEventAdapterSpec.cs
+++ b/src/core/Akka.Persistence.Tests/EndToEndEventAdapterSpec.cs
@@ -393,7 +393,7 @@ public void EventAdapters_in_end_to_end_scenarios_should_give_nice_error_message
         {
             // after some time we start the system a-new
             // and the adapter originally used for adapting A is missing from the configuration!
-            var journalPath = string.Format("akka.persistence.journal.{0}", _journalName);
+            var journalPath = $"akka.persistence.journal.{_journalName}";
 
             // TODO when WithoutPath is added
             // var missingAdapterConfig = AdaptersConfig.WithoutPath(...)
diff --git a/src/core/Akka.Persistence.Tests/Journal/ChaosJournal.cs b/src/core/Akka.Persistence.Tests/Journal/ChaosJournal.cs
index ae9001359..a36cd3d2e 100644
--- a/src/core/Akka.Persistence.Tests/Journal/ChaosJournal.cs
+++ b/src/core/Akka.Persistence.Tests/Journal/ChaosJournal.cs
@@ -22,13 +22,13 @@ namespace Akka.Persistence.Tests.Journal
     internal class WriteFailedException : TestException
     {
         public WriteFailedException(IEnumerable<AtomicWrite> ps)
-            : base(string.Format("write failed for payloads = [{0}]", string.Join(", ", ps.SelectMany(x => (IEnumerable<IPersistentRepresentation>)x.Payload)))) { }
+            : base($"write failed for payloads = [{string.Join(", ", ps.SelectMany(x => (IEnumerable<IPersistentRepresentation>)x.Payload))}]") { }
     }
 
     internal class ReplayFailedException : TestException
     {
         public ReplayFailedException(IEnumerable<IPersistentRepresentation> ps)
-            : base(string.Format("recovery failed after replaying payloads = [{0}]", string.Join(", ", ps.Select(x => x.Payload)))) { }
+            : base($"recovery failed after replaying payloads = [{string.Join(", ", ps.Select(x => x.Payload))}]") { }
     }
 
     internal class ReadHighestFailedException : TestException
diff --git a/src/core/Akka.Persistence.Tests/PersistentActorDeleteFailureSpec.cs b/src/core/Akka.Persistence.Tests/PersistentActorDeleteFailureSpec.cs
index e55b1862d..1501c603b 100644
--- a/src/core/Akka.Persistence.Tests/PersistentActorDeleteFailureSpec.cs
+++ b/src/core/Akka.Persistence.Tests/PersistentActorDeleteFailureSpec.cs
@@ -66,9 +66,9 @@ protected override bool ReceiveRecover(object message)
 
             protected override bool ReceiveCommand(object message)
             {
-                if (message is DeleteTo)
+                if (message is DeleteTo deleteTo)
                 {
-                    DeleteMessages(((DeleteTo)message).N);
+                    DeleteMessages(deleteTo.N);
                     return true;
                 }
                 return false;
@@ -95,8 +95,8 @@ protected override bool ReceiveRecover(object message)
 
             protected override bool ReceiveCommand(object message)
             {
-                if (message is DeleteTo)
-                    DeleteMessages(((DeleteTo)message).N);
+                if (message is DeleteTo deleteTo)
+                    DeleteMessages(deleteTo.N);
                 if (message is DeleteMessagesFailure)
                     _probe.Tell(message);
                 else return false;
diff --git a/src/core/Akka.Persistence.Tests/PersistentActorFailureSpec.cs b/src/core/Akka.Persistence.Tests/PersistentActorFailureSpec.cs
index 2c23cfa2c..7aa74d0a5 100644
--- a/src/core/Akka.Persistence.Tests/PersistentActorFailureSpec.cs
+++ b/src/core/Akka.Persistence.Tests/PersistentActorFailureSpec.cs
@@ -74,7 +74,7 @@ protected override Task<IImmutableList<Exception>> WriteMessagesAsync(IEnumerabl
                 if (IsCorrupt(readFromStore))
                 {
                     var promise = new TaskCompletionSource<object>();
-                    promise.SetException( new SimulatedException(string.Format("blahonga {0} {1}", fromSequenceNr, toSequenceNr)));
+                    promise.SetException( new SimulatedException($"blahonga {fromSequenceNr} {toSequenceNr}"));
                     return promise.Task;
                 }
                 readFromStore.ForEach(recoveryCallback);
@@ -126,8 +126,7 @@ protected override bool ReceiveCommand(object message)
             {
                 if (!CommonBehavior(message))
                 {
-                    var cmd = message as Cmd;
-                    if (cmd != null)
+                    if (message is Cmd cmd)
                     {
                         Persist(new Evt(cmd.Data), evt => UpdateState(evt));
 
@@ -198,8 +197,7 @@ protected override bool ReceiveCommand(object message)
             {
                 if (!CommonBehavior(message))
                 {
-                    var cmd = message as Cmd;
-                    if (cmd != null)
+                    if (message is Cmd cmd)
                     {
                         Persist(new Evt(cmd.Data), evt => UpdateState(evt));
                     }
@@ -210,9 +208,9 @@ protected override bool ReceiveCommand(object message)
 
             private bool FailingRecover(object message)
             {
-                if (message is Evt)
+                if (message is Evt evt)
                 {
-                    if (((Evt) message).Data.Equals("bad"))
+                    if (evt.Data.Equals("bad"))
                         throw new SimulatedException("Simulated exception from receiveRecover");
                 }
                 return true;
@@ -238,10 +236,9 @@ protected override bool ReceiveCommand(object message)
             {
                 if (!CommonBehavior(message))
                 {
-                    var cmd = message as Cmd;
-                    if (cmd != null)
+                    if (message is Cmd cmd)
                     {
-                        Persist(new Evt(string.Format("{0}", cmd.Data)), evt => UpdateState(evt));
+                        Persist(new Evt($"{cmd.Data}"), evt => UpdateState(evt));
                         if (cmd.Data.Equals("err"))
                             throw new SimulatedException("simulated exception");
                     }
@@ -261,10 +258,9 @@ protected override bool ReceiveCommand(object message)
             {
                 if (!CommonBehavior(message))
                 {
-                    var cmd = message as Cmd;
-                    if (cmd != null)
+                    if (message is Cmd cmd)
                     {
-                        Persist(new Evt(string.Format("{0}", cmd.Data)), evt =>
+                        Persist(new Evt($"{cmd.Data}"), evt =>
                         {
                             if (cmd.Data.Equals("err"))
                                 throw new SimulatedException("simulated exception");
diff --git a/src/core/Akka.Persistence.Tests/PersistentActorJournalProtocolSpec.cs b/src/core/Akka.Persistence.Tests/PersistentActorJournalProtocolSpec.cs
index cdb838205..160c9b4df 100644
--- a/src/core/Akka.Persistence.Tests/PersistentActorJournalProtocolSpec.cs
+++ b/src/core/Akka.Persistence.Tests/PersistentActorJournalProtocolSpec.cs
@@ -220,9 +220,9 @@ protected override bool ReceiveCommand(object message)
             {
                 if (!Behavior(message))
                 {
-                    if (message is Multi)
+                    if (message is Multi multi)
                     {
-                        foreach (var command in ((Multi) message).Commands)
+                        foreach (var command in multi.Commands)
                             Behavior(command);
                         return true;
                     }
@@ -233,14 +233,14 @@ protected override bool ReceiveCommand(object message)
 
             private bool Behavior(object message)
             {
-                if (message is Persist)
-                    P((Persist) message);
-                else if (message is PersistAsync)
-                    PA((PersistAsync) message);
-                else if (message is Echo)
-                    Sender.Tell(new Done(((Echo) message).Id, 0));
-                else if (message is Fail)
-                    throw ((Fail) message).Exception;
+                if (message is Persist persist)
+                    P(persist);
+                else if (message is PersistAsync persistAsync)
+                    PA(persistAsync);
+                else if (message is Echo echo)
+                    Sender.Tell(new Done(echo.Id, 0));
+                else if (message is Fail fail)
+                    throw fail.Exception;
                 else return false;
                 return true;
             }
@@ -371,9 +371,9 @@ private void Confirm(WriteMessages w)
             _journal.Send(w.PersistentActor, WriteMessagesSuccessful.Instance);
             foreach (var message in w.Messages)
             {
-                if (message is AtomicWrite)
+                if (message is AtomicWrite atomicWrite)
                 {
-                    var msgs = (IEnumerable<IPersistentRepresentation>) ((AtomicWrite) message).Payload;
+                    var msgs = (IEnumerable<IPersistentRepresentation>) atomicWrite.Payload;
                     foreach (var msg in msgs)
                     {
                         w.PersistentActor.Tell(new WriteMessageSuccess(msg, w.ActorInstanceId), msg.Sender);
diff --git a/src/core/Akka.Persistence.Tests/PersistentActorSpec.Actors.cs b/src/core/Akka.Persistence.Tests/PersistentActorSpec.Actors.cs
index e70f063ed..563be2b77 100644
--- a/src/core/Akka.Persistence.Tests/PersistentActorSpec.Actors.cs
+++ b/src/core/Akka.Persistence.Tests/PersistentActorSpec.Actors.cs
@@ -45,16 +45,16 @@ protected bool Receiver(object message)
 
         protected override void OnPersistRejected(Exception cause, object @event, long sequenceNr)
         {
-            if (@event is Evt)
-                Sender.Tell("Rejected: " + ((Evt)@event).Data);
+            if (@event is Evt evt)
+                Sender.Tell("Rejected: " + evt.Data);
             else
                 base.OnPersistRejected(cause, @event, sequenceNr);
         }
 
         protected override void OnPersistFailure(Exception cause, object @event, long sequenceNr)
         {
-            if (@event is Evt)
-                Sender.Tell("Failure: " + ((Evt)@event).Data);
+            if (@event is Evt evt)
+                Sender.Tell("Failure: " + evt.Data);
             else
                 base.OnPersistFailure(cause, @event, sequenceNr);
         }
@@ -143,8 +143,8 @@ protected bool UpdateState(object message)
             {
                 if (message is Evt)
                     Events = Events.AddFirst((message as Evt).Data);
-                else if (message is IActorRef)
-                    AskedForDelete = (IActorRef) message;
+                else if (message is IActorRef iActorRef)
+                    AskedForDelete = iActorRef;
                 else
                     return false;
                 return true;
@@ -154,10 +154,10 @@ protected bool CommonBehavior(object message)
             {
                 if (message is GetState) Sender.Tell(Events.Reverse().ToArray());
                 else if (message.ToString() == "boom") throw new TestException("boom");
-                else if (message is Delete)
+                else if (message is Delete delete)
                 {
                     Persist(Sender, s => AskedForDelete = s);
-                    DeleteMessages(((Delete)message).ToSequenceNr);
+                    DeleteMessages(delete.ToSequenceNr);
                 }
                 else return false;
                 return true;
@@ -445,8 +445,7 @@ protected override bool ReceiveCommand(object message)
             {
                 if (!CommonBehavior(message))
                 {
-                    var cmd = message as Cmd;
-                    if (cmd != null)
+                    if (message is Cmd cmd)
                     {
                         Sender.Tell(cmd.Data);
                         PersistAsync(new Evt(cmd.Data.ToString() + "-" + (++_counter)), evt =>
@@ -463,8 +462,8 @@ protected override bool ReceiveCommand(object message)
 
             protected override void OnPersistFailure(Exception cause, object @event, long sequenceNr)
             {
-                if (@event is Evt)
-                    Sender.Tell(string.Format("Failure: {0}", ((Evt)@event).Data));
+                if (@event is Evt evt)
+                    Sender.Tell($"Failure: {evt.Data}");
                 else
                     base.OnPersistFailure(cause, @event, sequenceNr);
             }
@@ -482,8 +481,7 @@ protected override bool ReceiveCommand(object message)
             {
                 if (!CommonBehavior(message))
                 {
-                    var cmd = message as Cmd;
-                    if (cmd != null)
+                    if (message is Cmd cmd)
                     {
                         Sender.Tell(cmd.Data);
                         for (int i = 1; i <= 3; i++)
@@ -514,8 +512,7 @@ protected override bool ReceiveCommand(object message)
             {
                 if (!CommonBehavior(message))
                 {
-                    var cmd = message as Cmd;
-                    if (cmd != null)
+                    if (message is Cmd cmd)
                     {
                         Sender.Tell(cmd.Data);
                         var @event = new Evt(cmd.Data);
@@ -547,8 +544,7 @@ protected override bool ReceiveCommand(object message)
             {
                 if (!CommonBehavior(message))
                 {
-                    var cmd = message as Cmd;
-                    if (cmd != null)
+                    if (message is Cmd cmd)
                     {
                         var data = (string)cmd.Data;
                         if (data.Contains("defer"))
@@ -587,8 +583,7 @@ protected override bool ReceiveCommand(object message)
             {
                 if (!CommonBehavior(message))
                 {
-                    var cmd = message as Cmd;
-                    if (cmd != null)
+                    if (message is Cmd cmd)
                     {
                         Sender.Tell(cmd.Data);
 
@@ -617,8 +612,7 @@ protected override bool ReceiveCommand(object message)
             {
                 if (!CommonBehavior(message))
                 {
-                    var cmd = message as Cmd;
-                    if (cmd != null)
+                    if (message is Cmd cmd)
                     {
                         Sender.Tell(cmd.Data);
 
@@ -645,8 +639,7 @@ protected override bool ReceiveCommand(object message)
             {
                 if (!CommonBehavior(message))
                 {
-                    var cmd = message as Cmd;
-                    if (cmd != null)
+                    if (message is Cmd cmd)
                     {
                         PersistAsync(new Evt(cmd.Data), evt =>
                         {
@@ -671,8 +664,7 @@ public ValueTypeEventPersistentActor(string name)
 
             protected override bool ReceiveCommand(object message)
             {
-                var cmd = message as Cmd;
-                if (cmd != null && cmd.Data.ToString() == "a")
+                if (message is Cmd cmd && cmd.Data.ToString() == "a")
                 {
                     Persist(5L, i =>
                     {
@@ -731,8 +723,7 @@ public DeferringWithPersistActor(string name)
 
             protected override bool ReceiveCommand(object message)
             {
-                var cmd = message as Cmd;
-                if (cmd != null)
+                if (message is Cmd cmd)
                 {
                     DeferAsync("d-1", Sender.Tell);
                     Persist(cmd.Data + "-2", Sender.Tell);
@@ -754,8 +745,7 @@ public DeferringWithAsyncPersistActor(string name)
 
             protected override bool ReceiveCommand(object message)
             {
-                var cmd = message as Cmd;
-                if (cmd != null)
+                if (message is Cmd cmd)
                 {
                     DeferAsync("d-" + cmd.Data + "-1", Sender.Tell);
                     PersistAsync("pa-" + cmd.Data + "-2", Sender.Tell);
@@ -777,8 +767,7 @@ public DeferringMixedCallsPPADDPADPersistActor(string name)
 
             protected override bool ReceiveCommand(object message)
             {
-                var cmd = message as Cmd;
-                if (cmd != null)
+                if (message is Cmd cmd)
                 {
                     Persist("p-" + cmd.Data + "-1", Sender.Tell);
                     PersistAsync("pa-" + cmd.Data + "-2", Sender.Tell);
@@ -802,8 +791,7 @@ public DeferringWithNoPersistCallsPersistActor(string name)
 
             protected override bool ReceiveCommand(object message)
             {
-                var cmd = message as Cmd;
-                if (cmd != null)
+                if (message is Cmd cmd)
                 {
                     DeferAsync("d-1", Sender.Tell);
                     DeferAsync("d-2", Sender.Tell);
@@ -881,9 +869,8 @@ public MultipleAndNestedPersists(string name, IActorRef probe)
 
             protected override bool ReceiveCommand(object message)
             {
-                if (message is string)
+                if (message is string s)
                 {
-                    var s = (string) message;
                     _probe.Tell(s);
                     Persist(s + "-outer-1", outer =>
                     {
@@ -913,9 +900,8 @@ public MultipleAndNestedPersistAsyncs(string name, IActorRef probe)
 
             protected override bool ReceiveCommand(object message)
             {
-                if (message is string)
+                if (message is string s)
                 {
-                    var s = (string) message;
                     _probe.Tell(s);
                     PersistAsync(s + "-outer-1", outer =>
                     {
@@ -945,9 +931,8 @@ public NestedPersistNormalAndAsyncs(string name, IActorRef probe)
 
             protected override bool ReceiveCommand(object message)
             {
-                if (message is string)
+                if (message is string s)
                 {
-                    var s = (string) message;
                     _probe.Tell(s);
                     Persist(s + "-outer-1", outer =>
                     {
@@ -977,9 +962,8 @@ public NestedPersistAsyncsAndNormal(string name, IActorRef probe)
 
             protected override bool ReceiveCommand(object message)
             {
-                if (message is string)
+                if (message is string s)
                 {
-                    var s = (string) message;
                     _probe.Tell(s);
                     PersistAsync(s + "-outer-async-1", outer =>
                     {
@@ -1009,9 +993,8 @@ public NestedPersistInAsyncEnforcesStashing(string name, IActorRef probe)
 
             protected override bool ReceiveCommand(object message)
             {
-                if (message is string)
+                if (message is string s)
                 {
-                    var s = (string) message;
                     _probe.Tell(s);
                     PersistAsync(s + "-outer-async", outer =>
                     {
@@ -1067,9 +1050,8 @@ private void WeMustGoDeeper(string dWithDepth)
 
             protected override bool ReceiveCommand(object message)
             {
-                if (message is string)
+                if (message is string s)
                 {
-                    var s = (string) message;
                     _probe.Tell(s);
                     Persist(s + "-1", WeMustGoDeeper);
                     return true;
@@ -1111,9 +1093,8 @@ private void WeMustGoDeeper(string dWithDepth)
 
             protected override bool ReceiveCommand(object message)
             {
-                if (message is string)
+                if (message is string s)
                 {
-                    var s = (string) message;
                     _probe.Tell(s);
                     PersistAsync(s + "-1", WeMustGoDeeper);
                     return true;
diff --git a/src/core/Akka.Persistence.Tests/PersistentActorSpecAsyncAwait.Actors.cs b/src/core/Akka.Persistence.Tests/PersistentActorSpecAsyncAwait.Actors.cs
index 9b1d7696b..5c8f809df 100644
--- a/src/core/Akka.Persistence.Tests/PersistentActorSpecAsyncAwait.Actors.cs
+++ b/src/core/Akka.Persistence.Tests/PersistentActorSpecAsyncAwait.Actors.cs
@@ -52,16 +52,16 @@ protected bool Receiver(object message)
 
             protected override void OnPersistRejected(Exception cause, object @event, long sequenceNr)
             {
-                if (@event is Evt)
-                    Sender.Tell("Rejected: " + ((Evt)@event).Data);
+                if (@event is Evt evt)
+                    Sender.Tell("Rejected: " + evt.Data);
                 else
                     base.OnPersistRejected(cause, @event, sequenceNr);
             }
 
             protected override void OnPersistFailure(Exception cause, object @event, long sequenceNr)
             {
-                if (@event is Evt)
-                    Sender.Tell("Failure: " + ((Evt)@event).Data);
+                if (@event is Evt evt)
+                    Sender.Tell("Failure: " + evt.Data);
                 else
                     base.OnPersistFailure(cause, @event, sequenceNr);
             }
@@ -150,8 +150,8 @@ protected bool UpdateState(object message)
             {
                 if (message is Evt)
                     Events = Events.AddFirst((message as Evt).Data);
-                else if (message is IActorRef)
-                    AskedForDelete = (IActorRef)message;
+                else if (message is IActorRef iActorRef)
+                    AskedForDelete = iActorRef;
                 else
                     return false;
                 return true;
@@ -161,14 +161,14 @@ protected bool CommonBehavior(object message)
             {
                 if (message is GetState) Sender.Tell(Events.Reverse().ToArray());
                 else if (message.ToString() == "boom") throw new TestException("boom");
-                else if (message is Delete)
+                else if (message is Delete delete)
                 {
                     RunTask(async () =>
                     {
                         await Task.Yield();
                         await Task.Delay(100);
                         Persist(Sender, s => AskedForDelete = s);
-                        DeleteMessages(((Delete)message).ToSequenceNr);
+                        DeleteMessages(delete.ToSequenceNr);
                     });
                 }
                 else return false;
@@ -508,8 +508,7 @@ protected override bool ReceiveCommand(object message)
             {
                 if (!CommonBehavior(message))
                 {
-                    var cmd = message as Cmd;
-                    if (cmd != null)
+                    if (message is Cmd cmd)
                     {
                         RunTask(async () =>
                         {
@@ -532,8 +531,8 @@ protected override bool ReceiveCommand(object message)
 
             protected override void OnPersistFailure(Exception cause, object @event, long sequenceNr)
             {
-                if (@event is Evt)
-                    Sender.Tell(string.Format("Failure: {0}", ((Evt)@event).Data));
+                if (@event is Evt evt)
+                    Sender.Tell($"Failure: {evt.Data}");
                 else
                     base.OnPersistFailure(cause, @event, sequenceNr);
             }
@@ -551,8 +550,7 @@ protected override bool ReceiveCommand(object message)
             {
                 if (!CommonBehavior(message))
                 {
-                    var cmd = message as Cmd;
-                    if (cmd != null)
+                    if (message is Cmd cmd)
                     {
                         RunTask(async () =>
                         {
@@ -589,8 +587,7 @@ protected override bool ReceiveCommand(object message)
             {
                 if (!CommonBehavior(message))
                 {
-                    var cmd = message as Cmd;
-                    if (cmd != null)
+                    if (message is Cmd cmd)
                     {
                         RunTask(async () =>
                         {
@@ -628,8 +625,7 @@ protected override bool ReceiveCommand(object message)
             {
                 if (!CommonBehavior(message))
                 {
-                    var cmd = message as Cmd;
-                    if (cmd != null)
+                    if (message is Cmd cmd)
                     {
                         RunTask(async () =>
                         {
@@ -674,8 +670,7 @@ protected override bool ReceiveCommand(object message)
             {
                 if (!CommonBehavior(message))
                 {
-                    var cmd = message as Cmd;
-                    if (cmd != null)
+                    if (message is Cmd cmd)
                     {
                         RunTask(async () =>
                         {
@@ -710,8 +705,7 @@ protected override bool ReceiveCommand(object message)
             {
                 if (!CommonBehavior(message))
                 {
-                    var cmd = message as Cmd;
-                    if (cmd != null)
+                    if (message is Cmd cmd)
                     {
                         RunTask(async () =>
                         {
@@ -743,8 +737,7 @@ protected override bool ReceiveCommand(object message)
             {
                 if (!CommonBehavior(message))
                 {
-                    var cmd = message as Cmd;
-                    if (cmd != null)
+                    if (message is Cmd cmd)
                     {
                         RunTask(async () =>
                         {
@@ -774,8 +767,7 @@ public ValueTypeEventPersistentActor(string name)
 
             protected override bool ReceiveCommand(object message)
             {
-                var cmd = message as Cmd;
-                if (cmd != null && cmd.Data.ToString() == "a")
+                if (message is Cmd cmd && cmd.Data.ToString() == "a")
                 {
                     RunTask(async () =>
                     {
@@ -839,8 +831,7 @@ public DeferringWithPersistActor(string name)
 
             protected override bool ReceiveCommand(object message)
             {
-                var cmd = message as Cmd;
-                if (cmd != null)
+                if (message is Cmd cmd)
                 {
                     RunTask(async () =>
                     {
@@ -867,8 +858,7 @@ public DeferringWithAsyncPersistActor(string name)
 
             protected override bool ReceiveCommand(object message)
             {
-                var cmd = message as Cmd;
-                if (cmd != null)
+                if (message is Cmd cmd)
                 {
                     RunTask(async () =>
                     {
@@ -895,8 +885,7 @@ public DeferringMixedCallsPPADDPADPersistActor(string name)
 
             protected override bool ReceiveCommand(object message)
             {
-                var cmd = message as Cmd;
-                if (cmd != null)
+                if (message is Cmd cmd)
                 {
                     RunTask(async () =>
                     {
@@ -925,8 +914,7 @@ public DeferringWithNoPersistCallsPersistActor(string name)
 
             protected override bool ReceiveCommand(object message)
             {
-                var cmd = message as Cmd;
-                if (cmd != null)
+                if (message is Cmd cmd)
                 {
                     RunTask(async () =>
                     {
diff --git a/src/core/Akka.Persistence.Tests/PersistentActorStashingSpec.cs b/src/core/Akka.Persistence.Tests/PersistentActorStashingSpec.cs
index 6328811f0..d38676704 100644
--- a/src/core/Akka.Persistence.Tests/PersistentActorStashingSpec.cs
+++ b/src/core/Akka.Persistence.Tests/PersistentActorStashingSpec.cs
@@ -116,8 +116,7 @@ protected override bool ReceiveCommand(object message)
             {
                 if (!CommonBehavior(message))
                 {
-                    var cmd = message as Cmd;
-                    if (cmd != null)
+                    if (message is Cmd cmd)
                     {
                         var data = cmd.Data.ToString();
                         if (data == "a")
@@ -151,8 +150,7 @@ protected bool ProcessC(object message)
 
             protected override bool UnstashBehavior(object message)
             {
-                var cmd = message as Cmd;
-                if (cmd != null && cmd.Data.ToString() == "c")
+                if (message is Cmd cmd && cmd.Data.ToString() == "c")
                 {
                     Persist(new Evt("c"), evt =>
                     {
@@ -174,8 +172,7 @@ public UserStashWithinHandlerManyActor(string name) : base(name)
 
             protected override bool UnstashBehavior(object message)
             {
-                var cmd = message as Cmd;
-                if (cmd != null && cmd.Data.ToString() == "c")
+                if (message is Cmd cmd && cmd.Data.ToString() == "c")
                 {
                     Persist(new Evt("c"), evt =>
                     {
@@ -200,8 +197,7 @@ protected override bool ReceiveCommand(object message)
             {
                 if (!CommonBehavior(message))
                 {
-                    var cmd = message as Cmd;
-                    if (cmd != null)
+                    if (message is Cmd cmd)
                     {
                         if (cmd.Data.ToString() == "b-2") throw new TestException("boom");
 
@@ -229,8 +225,7 @@ protected bool OtherCommandHandler(object message)
 
             protected override bool UnstashBehavior(object message)
             {
-                var cmd = message as Cmd;
-                if (cmd != null && cmd.Data.ToString() == "c")
+                if (message is Cmd cmd && cmd.Data.ToString() == "c")
                 {
                     Persist(new Evt("c"), evt =>
                     {
@@ -252,8 +247,7 @@ public UserStashWithinHandlerFailureCallbackActor(string name) : base(name)
 
             protected override bool UnstashBehavior(object message)
             {
-                var cmd = message as Cmd;
-                if (cmd != null && cmd.Data.ToString() == "c")
+                if (message is Cmd cmd && cmd.Data.ToString() == "c")
                 {
                     Persist(new Evt("c"), evt =>
                     {
@@ -377,9 +371,9 @@ protected override bool ReceiveCommand(object message)
             {
                 if (!CommonBehavior(message) && !UnstashBehavior(message))
                 {
-                    if (message is Cmd)
+                    if (message is Cmd cmd)
                     {
-                        var data = ((Cmd) message).Data;
+                        var data = cmd.Data;
                         if (data.Equals("a"))
                         {
                             PersistAsync(new Evt("a"), UpdateStateHandler);
@@ -404,8 +398,7 @@ protected override bool ReceiveCommand(object message)
 
             protected override bool UnstashBehavior(object message)
             {
-                var cmd = message as Cmd;
-                if (cmd != null && cmd.Data.ToString() == "c")
+                if (message is Cmd cmd && cmd.Data.ToString() == "c")
                 {
                     PersistAsync(new Evt("c"), UpdateStateHandler);
                     Stash.UnstashAll();
diff --git a/src/core/Akka.Persistence.Tests/Serialization/MessageSerializerRemotingSpec.cs b/src/core/Akka.Persistence.Tests/Serialization/MessageSerializerRemotingSpec.cs
index d2941f278..e0baa36d6 100644
--- a/src/core/Akka.Persistence.Tests/Serialization/MessageSerializerRemotingSpec.cs
+++ b/src/core/Akka.Persistence.Tests/Serialization/MessageSerializerRemotingSpec.cs
@@ -108,7 +108,7 @@ public LocalActor(int port)
 
             protected override bool Receive(object message)
             {
-                Context.ActorSelection(string.Format("akka.tcp://remote@127.0.0.1:{0}/user/remote", _port))
+                Context.ActorSelection($"akka.tcp://remote@127.0.0.1:{_port}/user/remote")
                     .Tell(message, ActorRefs.NoSender);
                 return true;
             }
diff --git a/src/core/Akka.Persistence.Tests/Serialization/TestSerializers.cs b/src/core/Akka.Persistence.Tests/Serialization/TestSerializers.cs
index 668c5fd07..af5cd122f 100644
--- a/src/core/Akka.Persistence.Tests/Serialization/TestSerializers.cs
+++ b/src/core/Akka.Persistence.Tests/Serialization/TestSerializers.cs
@@ -31,8 +31,8 @@ public override bool IncludeManifest
 
         public override byte[] ToBinary(object obj)
         {
-            if (obj is MyPayload)
-                return Encoding.UTF8.GetBytes("." + ((MyPayload) obj).Data);
+            if (obj is MyPayload myPayload)
+                return Encoding.UTF8.GetBytes("." + myPayload.Data);
             return null;
         }
 
@@ -41,7 +41,7 @@ public override object FromBinary(byte[] bytes, Type type)
             if (type == null)
                 throw new ArgumentException("no manifest");
             if (type == typeof (MyPayload))
-                return new MyPayload(string.Format("{0}.", Encoding.UTF8.GetString(bytes)));
+                return new MyPayload($"{Encoding.UTF8.GetString(bytes)}.");
             throw new ArgumentException("unexpected manifest " + type);
         }
     }
diff --git a/src/core/Akka.Persistence.Tests/SnapshotDirectoryFailureSpec.cs b/src/core/Akka.Persistence.Tests/SnapshotDirectoryFailureSpec.cs
index 209a96ec2..bbb9c79e4 100644
--- a/src/core/Akka.Persistence.Tests/SnapshotDirectoryFailureSpec.cs
+++ b/src/core/Akka.Persistence.Tests/SnapshotDirectoryFailureSpec.cs
@@ -40,8 +40,8 @@ protected override bool ReceiveCommand(object message)
             {
                 if (message is string)
                     SaveSnapshot(message);
-                else if (message is SaveSnapshotSuccess)
-                    _probe.Tell(((SaveSnapshotSuccess)message).Metadata.SequenceNr);
+                else if (message is SaveSnapshotSuccess saveSnapshotSuccess)
+                    _probe.Tell(saveSnapshotSuccess.Metadata.SequenceNr);
                 else
                     _probe.Tell(message);
                 return true;
diff --git a/src/core/Akka.Persistence.Tests/SnapshotFailureRobustnessSpec.cs b/src/core/Akka.Persistence.Tests/SnapshotFailureRobustnessSpec.cs
index 3badbcc95..656d95519 100644
--- a/src/core/Akka.Persistence.Tests/SnapshotFailureRobustnessSpec.cs
+++ b/src/core/Akka.Persistence.Tests/SnapshotFailureRobustnessSpec.cs
@@ -99,17 +99,16 @@ protected override bool ReceiveRecover(object message)
 
             protected override bool ReceiveCommand(object message)
             {
-                if (message is Cmd)
+                if (message is Cmd cmd)
                 {
-                    var cmd = (Cmd) message;
                     Persist(cmd.Payload, _ => SaveSnapshot(cmd.Payload));
                 }
-                else if (message is DeleteSnapshot)
-                    DeleteSnapshot(((DeleteSnapshot)message).SequenceNr);
-                else if (message is DeleteSnapshots)
-                    DeleteSnapshots(((DeleteSnapshots)message).Criteria);
-                else if (message is SaveSnapshotSuccess)
-                    _probe.Tell(((SaveSnapshotSuccess)message).Metadata.SequenceNr);
+                else if (message is DeleteSnapshot deleteSnapshot)
+                    DeleteSnapshot(deleteSnapshot.SequenceNr);
+                else if (message is DeleteSnapshots deleteSnapshots)
+                    DeleteSnapshots(deleteSnapshots.Criteria);
+                else if (message is SaveSnapshotSuccess saveSnapshotSuccess)
+                    _probe.Tell(saveSnapshotSuccess.Metadata.SequenceNr);
                 else
                     _probe.Tell(message);
                 return true;
@@ -136,17 +135,16 @@ protected override bool ReceiveRecover(object message)
 
             protected override bool ReceiveCommand(object message)
             {
-                if (message is Cmd)
+                if (message is Cmd cmd)
                 {
-                    var cmd = (Cmd) message;
                     Persist(cmd.Payload, _ => SaveSnapshot(cmd.Payload));
                 }
-                else if (message is DeleteSnapshot)
-                    DeleteSnapshot(((DeleteSnapshot)message).SequenceNr);
-                else if (message is DeleteSnapshots)
-                    DeleteSnapshots(((DeleteSnapshots)message).Criteria);
-                else if (message is SaveSnapshotSuccess)
-                    _probe.Tell(((SaveSnapshotSuccess)message).Metadata.SequenceNr);
+                else if (message is DeleteSnapshot deleteSnapshot)
+                    DeleteSnapshot(deleteSnapshot.SequenceNr);
+                else if (message is DeleteSnapshots deleteSnapshots)
+                    DeleteSnapshots(deleteSnapshots.Criteria);
+                else if (message is SaveSnapshotSuccess saveSnapshotSuccess)
+                    _probe.Tell(saveSnapshotSuccess.Metadata.SequenceNr);
                 else
                     _probe.Tell(message);
                 return true;
diff --git a/src/core/Akka.Persistence.Tests/SnapshotRecoveryLocalStoreSpec.cs b/src/core/Akka.Persistence.Tests/SnapshotRecoveryLocalStoreSpec.cs
index 95f94e4da..131b48ae5 100644
--- a/src/core/Akka.Persistence.Tests/SnapshotRecoveryLocalStoreSpec.cs
+++ b/src/core/Akka.Persistence.Tests/SnapshotRecoveryLocalStoreSpec.cs
@@ -42,8 +42,8 @@ protected override bool ReceiveCommand(object message)
             {
                 if (message is TakeSnapshot)
                     SaveSnapshot(_state);
-                else if (message is SaveSnapshotSuccess)
-                    _probe.Tell(((SaveSnapshotSuccess)message).Metadata.SequenceNr);
+                else if (message is SaveSnapshotSuccess saveSnapshotSuccess)
+                    _probe.Tell(saveSnapshotSuccess.Metadata.SequenceNr);
                 else if (message is GetState)
                     _probe.Tell(_state);
                 else return false;
diff --git a/src/core/Akka.Persistence.Tests/SnapshotSerializationSpec.cs b/src/core/Akka.Persistence.Tests/SnapshotSerializationSpec.cs
index c16799621..8d1913239 100644
--- a/src/core/Akka.Persistence.Tests/SnapshotSerializationSpec.cs
+++ b/src/core/Akka.Persistence.Tests/SnapshotSerializationSpec.cs
@@ -122,11 +122,11 @@ protected override bool ReceiveRecover(object message)
 
             protected override bool ReceiveCommand(object message)
             {
-                if (message is string)
+                if (message is string s)
                     SaveSnapshot(new SnapshotTypeWithAFullyQualifiedNameLongerThan255BytesXxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx(
-                        (string)message));
-                else if (message is SaveSnapshotSuccess)
-                    _probe.Tell(((SaveSnapshotSuccess)message).Metadata.SequenceNr);
+s));
+                else if (message is SaveSnapshotSuccess saveSnapshotSuccess)
+                    _probe.Tell(saveSnapshotSuccess.Metadata.SequenceNr);
                 else
                     _probe.Tell(message);
                 return true;
diff --git a/src/core/Akka.Persistence.Tests/SnapshotSpec.cs b/src/core/Akka.Persistence.Tests/SnapshotSpec.cs
index 13e631e72..6cbe0bd3f 100644
--- a/src/core/Akka.Persistence.Tests/SnapshotSpec.cs
+++ b/src/core/Akka.Persistence.Tests/SnapshotSpec.cs
@@ -362,8 +362,7 @@ public void PersistentActor_should_support_bulk_snapshot_deletions()
 
             ExpectMsgPf("offer", o =>
             {
-                var offer = o as SnapshotOffer;
-                if (offer != null)
+                if (o is SnapshotOffer offer)
                 {
                     var snapshot = offer.Snapshot as IEnumerable<string>;
                     snapshot.Reverse().ShouldOnlyContainInOrder("a-1", "b-2", "c-3", "d-4");
diff --git a/src/core/Akka.Persistence/Eventsourced.cs b/src/core/Akka.Persistence/Eventsourced.cs
index 33d9db1f5..e2f80040b 100644
--- a/src/core/Akka.Persistence/Eventsourced.cs
+++ b/src/core/Akka.Persistence/Eventsourced.cs
@@ -620,9 +620,9 @@ private void StashInternally(object currentMessage)
                     var sender = Sender;
                     Context.System.DeadLetters.Tell(new DeadLetter(currentMessage, sender, Self), Sender);
                 }
-                else if (strategy is ReplyToStrategy)
+                else if (strategy is ReplyToStrategy replyToStrategy)
                 {
-                    Sender.Tell(((ReplyToStrategy)strategy).Response);
+                    Sender.Tell(replyToStrategy.Response);
                 }
                 else if (strategy is ThrowOverflowExceptionStrategy)
                 {
diff --git a/src/core/Akka.Persistence/Fsm/PersistentFSM.cs b/src/core/Akka.Persistence/Fsm/PersistentFSM.cs
index 96150903b..7c3b82840 100644
--- a/src/core/Akka.Persistence/Fsm/PersistentFSM.cs
+++ b/src/core/Akka.Persistence/Fsm/PersistentFSM.cs
@@ -71,8 +71,7 @@ protected override bool ReceiveRecover(object message)
 
             if (message is SnapshotOffer snapshotOffer)
             {
-                var persistentFSMSnapshot = snapshotOffer.Snapshot as PersistentFSMSnapshot<TData>;
-                if (persistentFSMSnapshot != null)
+                if (snapshotOffer.Snapshot is PersistentFSMSnapshot<TData> persistentFSMSnapshot)
                 {
                     StartWith(StatesMap[persistentFSMSnapshot.StateIdentifier], persistentFSMSnapshot.Data, persistentFSMSnapshot.Timeout);
                     return true;
diff --git a/src/core/Akka.Persistence/Journal/AsyncWriteJournal.cs b/src/core/Akka.Persistence/Journal/AsyncWriteJournal.cs
index 1cf19e7c8..c039fe09c 100644
--- a/src/core/Akka.Persistence/Journal/AsyncWriteJournal.cs
+++ b/src/core/Akka.Persistence/Journal/AsyncWriteJournal.cs
@@ -309,8 +309,7 @@ private void HandleReplayMessages(ReplayMessages message)
         /// <returns>TBD</returns>
         protected Exception TryUnwrapException(Exception e)
         {
-            var aggregateException = e as AggregateException;
-            if (aggregateException != null)
+            if (e is AggregateException aggregateException)
             {
                 aggregateException = aggregateException.Flatten();
                 if (aggregateException.InnerExceptions.Count == 1)
diff --git a/src/core/Akka.Persistence/Journal/AsyncWriteProxy.cs b/src/core/Akka.Persistence/Journal/AsyncWriteProxy.cs
index 920670a9a..018793a8a 100644
--- a/src/core/Akka.Persistence/Journal/AsyncWriteProxy.cs
+++ b/src/core/Akka.Persistence/Journal/AsyncWriteProxy.cs
@@ -303,9 +303,9 @@ protected internal override bool AroundReceive(Receive receive, object message)
                 if (!(message is InitTimeout))
                     return base.AroundReceive(receive, message);
             }
-            else if (message is SetStore)
+            else if (message is SetStore setStore)
             {
-                _store = ((SetStore) message).Store;
+                _store = setStore.Store;
                 Stash.UnstashAll();
                 _isInitialized = true;
             }
diff --git a/src/core/Akka.Persistence/Journal/EventAdapters.cs b/src/core/Akka.Persistence/Journal/EventAdapters.cs
index c1c5e7983..ce1e7b4ee 100644
--- a/src/core/Akka.Persistence/Journal/EventAdapters.cs
+++ b/src/core/Akka.Persistence/Journal/EventAdapters.cs
@@ -314,8 +314,7 @@ private static EventAdapters Create(ExtendedActorSystem system, IDictionary<stri
                 foreach (var boundAdapter in kv.Value)
                 {
                     if (!adapterNames.Contains(boundAdapter))
-                        throw new ArgumentException(string.Format("{0} was bound to undefined event-adapter: {1} (bindings: [{2}], known adapters: [{3}])",
-                            kv.Key, boundAdapter, string.Join(", ", kv.Value), string.Join(", ", adapters.Keys)));
+                        throw new ArgumentException($"{kv.Key} was bound to undefined event-adapter: {boundAdapter} (bindings: [{string.Join(", ", kv.Value)}], known adapters: [{string.Join(", ", adapters.Keys)}])");
                 }
             }
 
@@ -363,7 +362,7 @@ private static EventAdapters Create(ExtendedActorSystem system, IDictionary<stri
         private static IEventAdapter CombineAdapters(IEnumerable<IEventAdapter> adapters)
         {
             var writeAdapters = adapters.Where(a => a is NoopReadEventAdapter);
-            if (writeAdapters.Count() == 0)
+            if (!writeAdapters.Any())
                 return new NoopWriteEventAdapter(new CombinedReadEventAdapter(adapters));
             else if (writeAdapters.Count() == 1)
                 return new ReadWriteEventAdapter(new CombinedReadEventAdapter(adapters.Where(a => a is NoopWriteEventAdapter)), writeAdapters.First());
@@ -435,8 +434,7 @@ private static T Instantiate<T>(string qualifiedName, ExtendedActorSystem system
         {
             var type = Type.GetType(qualifiedName);
             if (!typeof(T).IsAssignableFrom(type))
-                throw new ArgumentException(string.Format("Couldn't create instance of [{0}] from provided qualified type name [{1}], because it's not assignable from it",
-                    typeof(T), qualifiedName));
+                throw new ArgumentException($"Couldn't create instance of [{typeof(T)}] from provided qualified type name [{qualifiedName}], because it's not assignable from it");
 
             try
             {
@@ -465,8 +463,7 @@ private static T Instantiate<T>(string qualifiedName, ExtendedActorSystem system
                 var hoconObject = config.GetConfig(path).Root.GetObject();
                 return hoconObject.Unwrapped.ToDictionary(kv => kv.Key, kv =>
                 {
-                    var hoconValue = kv.Value as HoconValue;
-                    if (hoconValue != null)
+                    if (kv.Value is HoconValue hoconValue)
                     {
                         var str = hoconValue.GetString();
                         return str != null ? new[] { str } : hoconValue.GetStringList().ToArray();
diff --git a/src/core/Akka.Persistence/Journal/PersistencePluginProxy.cs b/src/core/Akka.Persistence/Journal/PersistencePluginProxy.cs
index 2bce82184..109878fdd 100644
--- a/src/core/Akka.Persistence/Journal/PersistencePluginProxy.cs
+++ b/src/core/Akka.Persistence/Journal/PersistencePluginProxy.cs
@@ -223,7 +223,7 @@ private void BecomeIdentifying(Address address)
 
         private void SendIdentify(Address address)
         {
-            var sel = Context.ActorSelection(string.Format("{0}/system/{1}", new RootActorPath(address), _targetPluginId));
+            var sel = Context.ActorSelection($"{new RootActorPath(address)}/system/{_targetPluginId}");
             if (_log.IsInfoEnabled)
                 _log.Info("Trying to identify target + {0} at {1}", _pluginType.Qualifier, sel);
             sel.Tell(new Identify(_targetPluginId));
diff --git a/src/core/Akka.Persistence/Journal/ReplayFilter.cs b/src/core/Akka.Persistence/Journal/ReplayFilter.cs
index 86a0b688a..0f823a4ff 100644
--- a/src/core/Akka.Persistence/Journal/ReplayFilter.cs
+++ b/src/core/Akka.Persistence/Journal/ReplayFilter.cs
@@ -131,9 +131,8 @@ public static Props Props(IActorRef persistentActor, ReplayFilterMode mode, int
         /// <returns>TBD</returns>
         protected override bool Receive(object message)
         {
-            if (message is ReplayedMessage)
+            if (message is ReplayedMessage r)
             {
-                var r = (ReplayedMessage) message;
                 if (DebugEnabled && _log.IsDebugEnabled)
                     _log.Debug($"Replay: {r.Persistent}");
 
diff --git a/src/core/Akka.Persistence/Snapshot/SnapshotStore.cs b/src/core/Akka.Persistence/Snapshot/SnapshotStore.cs
index 1beb03eb2..beb8eece6 100644
--- a/src/core/Akka.Persistence/Snapshot/SnapshotStore.cs
+++ b/src/core/Akka.Persistence/Snapshot/SnapshotStore.cs
@@ -196,8 +196,7 @@ private bool ReceiveSnapshotStore(object message)
 
         private Exception TryUnwrapException(Exception e)
         {
-            var aggregateException = e as AggregateException;
-            if (aggregateException != null)
+            if (e is AggregateException aggregateException)
             {
                 aggregateException = aggregateException.Flatten();
                 if (aggregateException.InnerExceptions.Count == 1)
diff --git a/src/core/Akka.Remote.TestKit/Conductor.cs b/src/core/Akka.Remote.TestKit/Conductor.cs
index 80dec2ecf..5d637510f 100644
--- a/src/core/Akka.Remote.TestKit/Conductor.cs
+++ b/src/core/Akka.Remote.TestKit/Conductor.cs
@@ -187,7 +187,7 @@ public Task<Done> Exit(RoleName node, int exitValue)
             {
                 if(t.Result is Done) return Done.Instance;
                 var failure = t.Result as FSMBase.Failure;
-                if (failure != null && failure.Cause is Controller.ClientDisconnectedException) return Done.Instance;
+                if (failure?.Cause is Controller.ClientDisconnectedException) return Done.Instance;
 
                 throw new InvalidOperationException($"Expected Done but received {t.Result}");
             });
@@ -210,7 +210,7 @@ public Task<Done> Shutdown(RoleName node, bool abort = false)
             {
                 if (t.Result is Done) return Done.Instance;
                 var failure = t.Result as FSMBase.Failure;
-                if (failure != null && failure.Cause is Controller.ClientDisconnectedException) return Done.Instance;
+                if (failure?.Cause is Controller.ClientDisconnectedException) return Done.Instance;
 
                 throw new InvalidOperationException($"Expected Done but received {t.Result}");
             });
@@ -358,8 +358,7 @@ protected void InitFSM()
 
             WhenUnhandled(@event =>
             {
-                var clientDisconnected = @event.FsmEvent as Controller.ClientDisconnected;
-                if (clientDisconnected != null)
+                if (@event.FsmEvent is Controller.ClientDisconnected clientDisconnected)
                 {
                     if(@event.StateData != null)
                         @event.StateData.Tell(new Failure(new Controller.ClientDisconnectedException("client disconnected in state " + StateName + ": " + _channel)));                   
@@ -376,8 +375,7 @@ protected void InitFSM()
 
             When(State.Initial, @event =>
             {
-                var hello = @event.FsmEvent as Hello;
-                if (hello != null)
+                if (@event.FsmEvent is Hello hello)
                 {
                     _roleName = new RoleName(hello.Name);
                     _controller.Tell(new Controller.NodeInfo(_roleName, hello.Address, Self));
@@ -420,8 +418,8 @@ protected void InitFSM()
                     _log.Warning("client {0} sent unsupported message {1}", _channel.RemoteAddress, @event.FsmEvent);
                     return Stop();
                 }
-                var toClient = @event.FsmEvent as IToClient;
-                if (toClient != null)
+
+                if (@event.FsmEvent is IToClient toClient)
                 {
                     if (toClient.Msg is IUnconfirmedClientOp)
                     {
diff --git a/src/core/Akka.Remote.TestKit/Controller.cs b/src/core/Akka.Remote.TestKit/Controller.cs
index ef7ced008..fee6d0ac8 100644
--- a/src/core/Akka.Remote.TestKit/Controller.cs
+++ b/src/core/Akka.Remote.TestKit/Controller.cs
@@ -278,8 +278,7 @@ private Directive FailBarrier(BarrierCoordinator.Data data)
 
         protected override void OnReceive(object message)
         {
-            var createServerFSM = message as CreateServerFSM;
-            if (createServerFSM != null)
+            if (message is CreateServerFSM createServerFSM)
             {
                 var channel = createServerFSM.Channel;
                 var host = (IPEndPoint)channel.RemoteAddress;
@@ -290,8 +289,8 @@ protected override void OnReceive(object message)
                 Sender.Tell(fsm);
                 return;
             }
-            var nodeInfo = message as NodeInfo;
-            if (nodeInfo != null)
+
+            if (message is NodeInfo nodeInfo)
             {
                 _barrier.Forward(nodeInfo);
                 if (_nodes.ContainsKey(nodeInfo.Name))
@@ -323,7 +322,7 @@ protected override void OnReceive(object message)
                 }
             }
             var clientDisconnected = message as ClientDisconnected;
-            if (clientDisconnected != null && clientDisconnected.Name != null)
+            if (clientDisconnected?.Name != null)
             {
                 _nodes = _nodes.Remove(clientDisconnected.Name);
                 _barrier.Forward(clientDisconnected);
diff --git a/src/core/Akka.Remote.TestKit/MsgDecoder.cs b/src/core/Akka.Remote.TestKit/MsgDecoder.cs
index 6163e2ebb..00bf91095 100644
--- a/src/core/Akka.Remote.TestKit/MsgDecoder.cs
+++ b/src/core/Akka.Remote.TestKit/MsgDecoder.cs
@@ -41,8 +41,7 @@ protected object Decode(object message)
         {
             _logger.LogDebug("Decoding {0}", message);
 
-            var w = message as Proto.Msg.Wrapper;
-            if (w != null)
+            if (message is Proto.Msg.Wrapper w)
             {
                 if (w.Hello != null)
                 {
diff --git a/src/core/Akka.Remote.TestKit/MsgEncoder.cs b/src/core/Akka.Remote.TestKit/MsgEncoder.cs
index 48ed2fd3e..1c1d97bf3 100644
--- a/src/core/Akka.Remote.TestKit/MsgEncoder.cs
+++ b/src/core/Akka.Remote.TestKit/MsgEncoder.cs
@@ -48,18 +48,16 @@ protected override void Encode(IChannelHandlerContext context, object message, L
 
             var wrapper = new Proto.Msg.Wrapper();
 
-            if (message is Hello)
+            if (message is Hello hello)
             {
-                var hello = (Hello)message;
                 wrapper.Hello = new Proto.Msg.Hello
                 {
                     Name = hello.Name,
                     Address = AddressMessageBuilder(hello.Address)
                 };
             }
-            else if (message is EnterBarrier)
+            else if (message is EnterBarrier enterBarrier)
             {
-                var enterBarrier = (EnterBarrier)message;
                 wrapper.Barrier = new Proto.Msg.EnterBarrier
                 {
                     Name = enterBarrier.Name,
@@ -67,9 +65,8 @@ protected override void Encode(IChannelHandlerContext context, object message, L
                     Op = Proto.Msg.EnterBarrier.Types.BarrierOp.Enter,
                 };
             }
-            else if (message is BarrierResult)
+            else if (message is BarrierResult barrierResult)
             {
-                var barrierResult = (BarrierResult)message;
                 wrapper.Barrier = new Proto.Msg.EnterBarrier
                 {
                     Name = barrierResult.Name,
@@ -78,18 +75,16 @@ protected override void Encode(IChannelHandlerContext context, object message, L
                         : Proto.Msg.EnterBarrier.Types.BarrierOp.Failed
                 };
             }
-            else if (message is FailBarrier)
+            else if (message is FailBarrier failBarrier)
             {
-                var failBarrier = (FailBarrier)message;
                 wrapper.Barrier = new Proto.Msg.EnterBarrier
                 {
                     Name = failBarrier.Name,
                     Op = Proto.Msg.EnterBarrier.Types.BarrierOp.Fail
                 };
             }
-            else if (message is ThrottleMsg)
+            else if (message is ThrottleMsg throttleMsg)
             {
-                var throttleMsg = (ThrottleMsg)message;
                 wrapper.Failure = new Proto.Msg.InjectFailure
                 {
                     Address = AddressMessageBuilder(throttleMsg.Target),
@@ -98,9 +93,8 @@ protected override void Encode(IChannelHandlerContext context, object message, L
                     RateMBit = throttleMsg.RateMBit
                 };
             }
-            else if (message is DisconnectMsg)
+            else if (message is DisconnectMsg disconnectMsg)
             {
-                var disconnectMsg = (DisconnectMsg)message;
                 wrapper.Failure = new Proto.Msg.InjectFailure
                 {
                     Address = AddressMessageBuilder(disconnectMsg.Target),
@@ -109,9 +103,8 @@ protected override void Encode(IChannelHandlerContext context, object message, L
                         : Proto.Msg.InjectFailure.Types.FailType.Disconnect
                 };
             }
-            else if (message is TerminateMsg)
+            else if (message is TerminateMsg terminate)
             {
-                var terminate = (TerminateMsg)message;
                 if (terminate.ShutdownOrExit.IsRight)
                 {
                     wrapper.Failure = new Proto.Msg.InjectFailure()
@@ -135,14 +128,12 @@ protected override void Encode(IChannelHandlerContext context, object message, L
                     };
                 }
             }
-            else if (message is GetAddress)
+            else if (message is GetAddress getAddress)
             {
-                var getAddress = (GetAddress)message;
                 wrapper.Addr = new Proto.Msg.AddressRequest { Node = getAddress.Node.Name };
             }
-            else if (message is AddressReply)
+            else if (message is AddressReply addressReply)
             {
-                var addressReply = (AddressReply)message;
                 wrapper.Addr = new Proto.Msg.AddressRequest
                 {
                     Node = addressReply.Node.Name,
diff --git a/src/core/Akka.Remote.TestKit/MultiNodeSpec.cs b/src/core/Akka.Remote.TestKit/MultiNodeSpec.cs
index e13e484da..b4222bc8c 100644
--- a/src/core/Akka.Remote.TestKit/MultiNodeSpec.cs
+++ b/src/core/Akka.Remote.TestKit/MultiNodeSpec.cs
@@ -640,8 +640,7 @@ protected void InjectDeployments(ActorSystem system, RoleName role)
                     }
                     else
                     {
-                        throw new ArgumentException(String.Format("key {0} must map to deployment section, not simple value {1}",
-                            pair.Key, pair.Value));
+                        throw new ArgumentException($"key {pair.Key} must map to deployment section, not simple value {pair.Value}");
                     }
                 }
             }
diff --git a/src/core/Akka.Remote.Tests.MultiNode/RemoteDeliverySpec.cs b/src/core/Akka.Remote.Tests.MultiNode/RemoteDeliverySpec.cs
index 4648ca081..6eee8352a 100644
--- a/src/core/Akka.Remote.Tests.MultiNode/RemoteDeliverySpec.cs
+++ b/src/core/Akka.Remote.Tests.MultiNode/RemoteDeliverySpec.cs
@@ -48,8 +48,7 @@ public class Postman : UntypedActor
         {
             protected override void OnReceive(object message)
             {
-                var letter = message as Letter;
-                if (letter != null)
+                if (message is Letter letter)
                 {
                     letter.Route[0].Tell(new Letter(letter.N, letter.Route.Skip(1).ToList()));
                 }
diff --git a/src/core/Akka.Remote.Tests/AccrualFailureDetectorSpec.cs b/src/core/Akka.Remote.Tests/AccrualFailureDetectorSpec.cs
index 9d9634cb2..7b3ea5db6 100644
--- a/src/core/Akka.Remote.Tests/AccrualFailureDetectorSpec.cs
+++ b/src/core/Akka.Remote.Tests/AccrualFailureDetectorSpec.cs
@@ -304,7 +304,7 @@ public void PhiAccrualHistory_must_work_with_MonotonicClock()
         /// </summary>
         protected void ShouldBe(double actual, double expected, double epsilon = 0.001d)
         {
-            Assert.True(Math.Abs(actual - expected) <= epsilon, string.Format("Expected {0} but received {1}", expected, actual));
+            Assert.True(Math.Abs(actual - expected) <= epsilon, $"Expected {expected} but received {actual}");
         }
 
     }
diff --git a/src/core/Akka.Remote.Tests/AckedDeliverySpec.cs b/src/core/Akka.Remote.Tests/AckedDeliverySpec.cs
index 5301db14a..adc74bcf9 100644
--- a/src/core/Akka.Remote.Tests/AckedDeliverySpec.cs
+++ b/src/core/Akka.Remote.Tests/AckedDeliverySpec.cs
@@ -32,7 +32,7 @@ public Sequenced(SeqNo seq, string body)
 
             public override string ToString()
             {
-                return string.Format("MSG[{0}]]", Seq.RawValue);
+                return $"MSG[{Seq.RawValue}]]";
             }
         }
 
@@ -343,14 +343,14 @@ public void SendBuffer_and_ReceiveBuffer_must_correctly_cooperate_with_each_othe
                     {
                         var del = rcvBuf.Receive(msg).ExtractDeliverable();
                         rcvBuf = del.Buffer;
-                        dbLog(string.Format("{0} -- {1} --> {2}", sndBuf, msg, rcvBuf));
+                        dbLog($"{sndBuf} -- {msg} --> {rcvBuf}");
                         lastAck = del.Ack;
                         received.AddRange(del.Deliverables);
-                        dbLog(string.Format("R: {0}", string.Join(",", received.Select(x => x.ToString()))));
+                        dbLog($"R: {string.Join(",", received.Select(x => x.ToString()))}");
                     }
                     else
                     {
-                        dbLog(string.Format("{0} -- {1} --X {2}", sndBuf, msg, rcvBuf));
+                        dbLog($"{sndBuf} -- {msg} --X {rcvBuf}");
                     }
                 }
             };
@@ -360,11 +360,11 @@ public void SendBuffer_and_ReceiveBuffer_must_correctly_cooperate_with_each_othe
                 if (Happened(p))
                 {
                     sndBuf = sndBuf.Acknowledge(lastAck);
-                    dbLog(string.Format("{0} <-- {1} -- {2}", sndBuf, lastAck, rcvBuf));
+                    dbLog($"{sndBuf} <-- {lastAck} -- {rcvBuf}");
                 }
                 else
                 {
-                    dbLog(string.Format("{0} X-- {1} -- {2}", sndBuf, lastAck, rcvBuf));
+                    dbLog($"{sndBuf} X-- {lastAck} -- {rcvBuf}");
                 }
             };
 
diff --git a/src/core/Akka.Remote.Tests/Serialization/MiscMessageSerializerSpec.cs b/src/core/Akka.Remote.Tests/Serialization/MiscMessageSerializerSpec.cs
index 9dfc97020..f362cd809 100644
--- a/src/core/Akka.Remote.Tests/Serialization/MiscMessageSerializerSpec.cs
+++ b/src/core/Akka.Remote.Tests/Serialization/MiscMessageSerializerSpec.cs
@@ -361,9 +361,8 @@ private T AssertAndReturn<T>(T message)
             serializer.Should().BeOfType<MiscMessageSerializer>();
             var serializedBytes = serializer.ToBinary(message);
 
-            if (serializer is SerializerWithStringManifest)
+            if (serializer is SerializerWithStringManifest serializerManifest)
             {
-                var serializerManifest = (SerializerWithStringManifest)serializer;
                 return (T)serializerManifest.FromBinary(serializedBytes, serializerManifest.Manifest(message));
             }
             return (T)serializer.FromBinary(serializedBytes, typeof(T));
diff --git a/src/core/Akka.Remote.Tests/Transport/AkkaProtocolStressTest.cs b/src/core/Akka.Remote.Tests/Transport/AkkaProtocolStressTest.cs
index 1a48a618a..11c585b35 100644
--- a/src/core/Akka.Remote.Tests/Transport/AkkaProtocolStressTest.cs
+++ b/src/core/Akka.Remote.Tests/Transport/AkkaProtocolStressTest.cs
@@ -118,7 +118,7 @@ protected override void OnReceive(object message)
                     }
                     else
                     {
-                        _controller.Tell(string.Format("Received out of order message. Previous {0} Received: {1}", MaxSeq, seq));
+                        _controller.Tell($"Received out of order message. Previous {MaxSeq} Received: {seq}");
                     }
                 }
             }
diff --git a/src/core/Akka.Remote.Tests/Transport/GenericTransportSpec.cs b/src/core/Akka.Remote.Tests/Transport/GenericTransportSpec.cs
index a6cbbd098..922fe261d 100644
--- a/src/core/Akka.Remote.Tests/Transport/GenericTransportSpec.cs
+++ b/src/core/Akka.Remote.Tests/Transport/GenericTransportSpec.cs
@@ -32,8 +32,8 @@ public GenericTransportSpec(bool withAkkaProtocol = false)
         {
             this.withAkkaProtocol = withAkkaProtocol;
 
-            addressA = addressATest.WithProtocol(string.Format("{0}.{1}", SchemeIdentifier, addressATest.Protocol));
-            addressB = addressBTest.WithProtocol(string.Format("{0}.{1}", SchemeIdentifier, addressBTest.Protocol));
+            addressA = addressATest.WithProtocol($"{SchemeIdentifier}.{addressATest.Protocol}");
+            addressB = addressBTest.WithProtocol($"{SchemeIdentifier}.{addressBTest.Protocol}");
             nonExistingAddress = new Address(SchemeIdentifier + ".test", "nosystem", "nohost", 0);
         }
 
@@ -94,9 +94,7 @@ public void Transport_must_associate_successfully_with_another_transport_of_its_
             transportA.Associate(addressB);
             ExpectMsgPf(DefaultTimeout, "Expect InboundAssociation from A", o =>
             {
-                var inbound = o as InboundAssociation;
-
-                if (inbound != null && inbound.Association.RemoteAddress == addressA)
+                if (o is InboundAssociation inbound && inbound.Association.RemoteAddress == addressA)
                     return inbound.Association;
 
                 return null;
@@ -136,8 +134,7 @@ public void Transport_must_successfully_send_PDUs()
             var associate = transportA.Associate(addressB);
             var handleB = ExpectMsgPf(DefaultTimeout, "Expect InboundAssociation from A", o =>
             {
-                var handle = o as InboundAssociation;
-                if (handle != null && handle.Association.RemoteAddress == addressA)
+                if (o is InboundAssociation handle && handle.Association.RemoteAddress == addressA)
                     return handle.Association;
 
                 return null;
@@ -157,9 +154,7 @@ public void Transport_must_successfully_send_PDUs()
             handleA.Write(payload);
             ExpectMsgPf(DefaultTimeout, "Expect InboundPayload from A", o =>
             {
-                var inboundPayload = o as InboundPayload;
-
-                if (inboundPayload != null && inboundPayload.Payload.Equals(pdu))
+                if (o is InboundPayload inboundPayload && inboundPayload.Payload.Equals(pdu))
                     return inboundPayload.Payload;
 
                 return null;
@@ -183,8 +178,7 @@ public void Transport_must_successfully_disassociate()
             var associate = transportA.Associate(addressB);
             var handleB = ExpectMsgPf(DefaultTimeout, "Expect InboundAssociation from A", o =>
             {
-                var handle = o as InboundAssociation;
-                if (handle != null && handle.Association.RemoteAddress == addressA)
+                if (o is InboundAssociation handle && handle.Association.RemoteAddress == addressA)
                     return handle.Association;
 
                 return null;
diff --git a/src/core/Akka.Remote.Tests/Transport/TestTransportSpec.cs b/src/core/Akka.Remote.Tests/Transport/TestTransportSpec.cs
index 0b4b8d323..810055317 100644
--- a/src/core/Akka.Remote.Tests/Transport/TestTransportSpec.cs
+++ b/src/core/Akka.Remote.Tests/Transport/TestTransportSpec.cs
@@ -130,8 +130,7 @@ public void TestTransport_should_emulate_sending_PDUs()
             var associate = transportA.Associate(addressB);
             var handleB = ExpectMsgPf<AssociationHandle>(DefaultTimeout, "Expect InboundAssociation from A", o =>
             {
-                var handle = o as InboundAssociation;
-                if (handle != null && handle.Association.RemoteAddress.Equals(addressA)) return handle.Association;
+                if (o is InboundAssociation handle && handle.Association.RemoteAddress.Equals(addressA)) return handle.Association;
                 return null;
             });
             handleB.ReadHandlerSource.SetResult(new ActorHandleEventListener(Self));
@@ -152,8 +151,7 @@ public void TestTransport_should_emulate_sending_PDUs()
             //assert
             ExpectMsgPf(DefaultTimeout, "Expect InboundPayload from A", o =>
             {
-                var payload = o as InboundPayload;
-                if (payload != null && payload.Payload.Equals(akkaPDU)) return akkaPDU;
+                if (o is InboundPayload payload && payload.Payload.Equals(akkaPDU)) return akkaPDU;
                 return null;
             });
 
@@ -187,8 +185,7 @@ public void TestTransport_should_emulate_disassociation()
             var associate = transportA.Associate(addressB);
             var handleB = ExpectMsgPf<AssociationHandle>(DefaultTimeout, "Expect InboundAssociation from A", o =>
             {
-                var handle = o as InboundAssociation;
-                if (handle != null && handle.Association.RemoteAddress.Equals(addressA)) return handle.Association;
+                if (o is InboundAssociation handle && handle.Association.RemoteAddress.Equals(addressA)) return handle.Association;
                 return null;
             });
             handleB.ReadHandlerSource.SetResult(new ActorHandleEventListener(Self));
diff --git a/src/core/Akka.Remote.Tests/UntrustedSpec.cs b/src/core/Akka.Remote.Tests/UntrustedSpec.cs
index 1b81b1175..807921ed8 100644
--- a/src/core/Akka.Remote.Tests/UntrustedSpec.cs
+++ b/src/core/Akka.Remote.Tests/UntrustedSpec.cs
@@ -232,7 +232,7 @@ protected override bool Receive(object message)
 
             protected override void PostStop()
             {
-                _testActor.Tell(string.Format("{0} stopped", Self.Path.Name));
+                _testActor.Tell($"{Self.Path.Name} stopped");
                 base.PostStop();
             }
         }
diff --git a/src/core/Akka.Remote/Endpoint.cs b/src/core/Akka.Remote/Endpoint.cs
index f06987dc6..1690c2349 100644
--- a/src/core/Akka.Remote/Endpoint.cs
+++ b/src/core/Akka.Remote/Endpoint.cs
@@ -148,7 +148,7 @@ public DefaultMessageDispatcher(ExtendedActorSystem system, IRemoteActorRefProvi
             {
                 if (_settings.LogReceive)
                 {
-                    var msgLog = string.Format("RemoteMessage: {0} to {1}<+{2} from {3}", payload, recipient, originalReceiver, sender);
+                    var msgLog = $"RemoteMessage: {payload} to {recipient}<+{originalReceiver} from {sender}";
                     _log.Debug("received remote-destined message {0}", msgLog);
                 }
                 if (_provider.Transport.Addresses.Contains(recipientAddress))
@@ -1310,7 +1310,7 @@ private IActorRef StartReadEndpoint(AkkaProtocolHandle handle)
                         EndpointReader.ReaderProps(LocalAddress, RemoteAddress, Transport, Settings, _codec, _msgDispatcher,
                             Inbound, (int)handle.HandshakeInfo.Uid, _receiveBuffers, _reliableDeliverySupervisor)
                             .WithDeploy(Deploy.Local)),
-                    string.Format("endpointReader-{0}-{1}", AddressUrlEncoder.Encode(RemoteAddress), _readerId.Next()));
+                    $"endpointReader-{AddressUrlEncoder.Encode(RemoteAddress)}-{_readerId.Next()}");
             Context.Watch(newReader);
             handle.ReadHandlerSource.SetResult(new ActorHandleEventListener(newReader));
             return newReader;
@@ -1447,11 +1447,7 @@ private bool WriteSend(EndpointManager.Send send)
                 if (pdu.Length > Transport.MaximumPayloadBytes)
                 {
                     var reason = new OversizedPayloadException(
-                        string.Format("Discarding oversized payload sent to {0}: max allowed size {1} bytes, actual size of encoded {2} was {3} bytes.",
-                            send.Recipient,
-                            Transport.MaximumPayloadBytes,
-                            send.Message.GetType(),
-                            pdu.Length));
+                        $"Discarding oversized payload sent to {send.Recipient}: max allowed size {Transport.MaximumPayloadBytes} bytes, actual size of encoded {send.Message.GetType()} was {pdu.Length} bytes.");
                     _log.Error(reason, "Transient association error (association remains live)");
                     return true;
                 }
@@ -1899,9 +1895,7 @@ private void Reading()
                 if (payload.Length > Transport.MaximumPayloadBytes)
                 {
                     var reason = new OversizedPayloadException(
-                        string.Format("Discarding oversized payload received: max allowed size {0} bytes, actual size {1} bytes.",
-                            Transport.MaximumPayloadBytes,
-                            payload.Length));
+                        $"Discarding oversized payload received: max allowed size {Transport.MaximumPayloadBytes} bytes, actual size {payload.Length} bytes.");
                     _log.Error(reason, "Transient error while reading from association (association remains live)");
                 }
                 else
diff --git a/src/core/Akka.Remote/EndpointManager.cs b/src/core/Akka.Remote/EndpointManager.cs
index 661cf4664..1b5573350 100644
--- a/src/core/Akka.Remote/EndpointManager.cs
+++ b/src/core/Akka.Remote/EndpointManager.cs
@@ -185,7 +185,7 @@ public Send(object message, RemoteActorRef recipient, IActorRef senderOption = n
             /// <returns>TBD</returns>
             public override string ToString()
             {
-                return string.Format("Remote message {0} -> {1}", SenderOption, Recipient);
+                return $"Remote message {SenderOption} -> {Recipient}";
             }
 
             private readonly SeqNo _seq;
diff --git a/src/core/Akka.Remote/RemoteActorRefProvider.cs b/src/core/Akka.Remote/RemoteActorRefProvider.cs
index e24674c6e..8ca4e30e9 100644
--- a/src/core/Akka.Remote/RemoteActorRefProvider.cs
+++ b/src/core/Akka.Remote/RemoteActorRefProvider.cs
@@ -788,9 +788,9 @@ public RemoteDeadLetterActorRef(IActorRefProvider provider, ActorPath actorPath,
 
             protected override void TellInternal(object message, IActorRef sender)
             {
-                var send = message as EndpointManager.Send;
                 var deadLetter = message as DeadLetter;
-                if (send != null)
+
+                if (message is EndpointManager.Send send)
                 {
                     if (send.Seq == null)
                     {
diff --git a/src/core/Akka.Remote/RemoteSystemDaemon.cs b/src/core/Akka.Remote/RemoteSystemDaemon.cs
index 7393d0aa5..9f3e271c6 100644
--- a/src/core/Akka.Remote/RemoteSystemDaemon.cs
+++ b/src/core/Akka.Remote/RemoteSystemDaemon.cs
@@ -123,7 +123,7 @@ protected override void TellInternal(object message, IActorRef sender)
             if (message is IDaemonMsg)
             {
                 Log.Debug("Received command [{0}] to RemoteSystemDaemon on [{1}]", message, Path.Address);
-                if (message is DaemonMsgCreate) HandleDaemonMsgCreate((DaemonMsgCreate)message);
+                if (message is DaemonMsgCreate daemonMsgCreate) HandleDaemonMsgCreate(daemonMsgCreate);
             }
             else if (message is ActorSelectionMessage sel)
             {
@@ -174,9 +174,8 @@ protected override void TellInternal(object message, IActorRef sender)
             }
             //Remote ActorSystem on another process / machine has died. 
             //Need to clean up any references to remote deployments here.
-            else if (message is AddressTerminated)
+            else if (message is AddressTerminated addressTerminated)
             {
-                var addressTerminated = (AddressTerminated)message;
                 //stop any remote actors that belong to this address
                 ForEachChild(@ref =>
                 {
diff --git a/src/core/Akka.Remote/RemoteWatcher.cs b/src/core/Akka.Remote/RemoteWatcher.cs
index 186b8c0d8..c61fdf6aa 100644
--- a/src/core/Akka.Remote/RemoteWatcher.cs
+++ b/src/core/Akka.Remote/RemoteWatcher.cs
@@ -432,22 +432,19 @@ protected override void OnReceive(object message)
         {
             if (message is HeartbeatTick) SendHeartbeat();
             else if (message is Heartbeat) ReceiveHeartbeat();
-            else if (message is HeartbeatRsp) ReceiveHeartbeatRsp(((HeartbeatRsp)message).AddressUid);
+            else if (message is HeartbeatRsp heartbeatRsp) ReceiveHeartbeatRsp(heartbeatRsp.AddressUid);
             else if (message is ReapUnreachableTick) ReapUnreachable();
-            else if (message is ExpectedFirstHeartbeat) TriggerFirstHeartbeat(((ExpectedFirstHeartbeat)message).From);
-            else if (message is WatchRemote)
+            else if (message is ExpectedFirstHeartbeat expectedFirstHeartbeat) TriggerFirstHeartbeat(expectedFirstHeartbeat.From);
+            else if (message is WatchRemote watchRemote)
             {
-                var watchRemote = (WatchRemote)message;
                 AddWatching(watchRemote.Watchee, watchRemote.Watcher);
             }
-            else if (message is UnwatchRemote)
+            else if (message is UnwatchRemote unwatchRemote)
             {
-                var unwatchRemote = (UnwatchRemote)message;
                 RemoveWatch(unwatchRemote.Watchee, unwatchRemote.Watcher);
             }
-            else if (message is Terminated)
+            else if (message is Terminated t)
             {
-                var t = (Terminated)message;
                 ProcessTerminated(t.ActorRef.AsInstanceOf<IInternalActorRef>(), t.ExistenceConfirmed, t.AddressTerminated);
             }
             // test purpose
@@ -460,7 +457,7 @@ protected override void OnReceive(object message)
                     list.AddRange(pair.Value.Select(wer => ((IActorRef)wee, (IActorRef)wer)));
                     return list;
                 }).ToArray());
-                Sender.Tell(new Stats(watchSet.Count(), WatchingNodes.Count, watchSet,
+                Sender.Tell(new Stats(watchSet.Count, WatchingNodes.Count, watchSet,
                     ImmutableHashSet.Create(WatchingNodes.ToArray())));
             }
             else
diff --git a/src/core/Akka.Remote/RemotingLifecycleEvent.cs b/src/core/Akka.Remote/RemotingLifecycleEvent.cs
index 731f8c871..726887af2 100644
--- a/src/core/Akka.Remote/RemotingLifecycleEvent.cs
+++ b/src/core/Akka.Remote/RemotingLifecycleEvent.cs
@@ -58,7 +58,7 @@ public abstract class AssociationEvent : RemotingLifecycleEvent
         public override string ToString()
         {
             var networkDirection = IsInbound ? "<-" : "->";
-            return string.Format("{0} [{1}] {2} {3}", EventName, LocalAddress, networkDirection, RemoteAddress);
+            return $"{EventName} [{LocalAddress}] {networkDirection} {RemoteAddress}";
         }
     }
 
@@ -196,7 +196,7 @@ public override LogLevel LogLevel()
         /// <returns>TBD</returns>
         public override string ToString()
         {
-            return string.Format("{0}: Error [{1}] [{2}]", base.ToString(), Cause.Message, Cause.StackTrace);
+            return $"{base.ToString()}: Error [{Cause.Message}] [{Cause.StackTrace}]";
         }
     }
 
@@ -234,8 +234,7 @@ public override LogLevel LogLevel()
         /// <returns>TBD</returns>
         public override string ToString()
         {
-            return string.Format("Remoting now listens on addresses: [{0}]",
-                ListenAddresses.Select(x => x.ToString()).Join(","));
+            return $"Remoting now listens on addresses: [{ListenAddresses.Select(x => x.ToString()).Join(",")}]";
         }
     }
 
@@ -291,7 +290,7 @@ public override LogLevel LogLevel()
         /// <returns>TBD</returns>
         public override string ToString()
         {
-            return string.Format("Remoting error: [{0}] [{1}]", Cause.Message, Cause.StackTrace);
+            return $"Remoting error: [{Cause.Message}] [{Cause.StackTrace}]";
         }
     }
 
@@ -385,7 +384,7 @@ public override LogLevel LogLevel()
         /// <returns>TBD</returns>
         public override string ToString()
         {
-            return string.Format("The remote system {0} has quarantined this system {1}.", RemoteAddress, LocalAddress);
+            return $"The remote system {RemoteAddress} has quarantined this system {LocalAddress}.";
         }
     }
 
diff --git a/src/core/Akka.Remote/Serialization/PrimitiveSerializers.cs b/src/core/Akka.Remote/Serialization/PrimitiveSerializers.cs
index 21c7a5665..c262055e0 100644
--- a/src/core/Akka.Remote/Serialization/PrimitiveSerializers.cs
+++ b/src/core/Akka.Remote/Serialization/PrimitiveSerializers.cs
@@ -29,10 +29,9 @@ public PrimitiveSerializers(ExtendedActorSystem system) : base(system)
         /// <inheritdoc />
         public override byte[] ToBinary(object obj)
         {
-            var str = obj as string;
-            if (str != null) return Encoding.UTF8.GetBytes(str);
-            if (obj is int) return BitConverter.GetBytes((int)obj);
-            if (obj is long) return BitConverter.GetBytes((long)obj);
+            if (obj is string str) return Encoding.UTF8.GetBytes(str);
+            if (obj is int i) return BitConverter.GetBytes(i);
+            if (obj is long l) return BitConverter.GetBytes(l);
 
             throw new ArgumentException($"Cannot serialize object of type [{obj.GetType().TypeQualifiedName()}]");
         }
diff --git a/src/core/Akka.Remote/Serialization/ProtobufSerializer.cs b/src/core/Akka.Remote/Serialization/ProtobufSerializer.cs
index b3cfa4228..180511c92 100644
--- a/src/core/Akka.Remote/Serialization/ProtobufSerializer.cs
+++ b/src/core/Akka.Remote/Serialization/ProtobufSerializer.cs
@@ -35,8 +35,7 @@ public ProtobufSerializer(ExtendedActorSystem system) : base(system)
         /// <inheritdoc />
         public override byte[] ToBinary(object obj)
         {
-            var message = obj as IMessage;
-            if (message != null)
+            if (obj is IMessage message)
             {
                 return message.ToByteArray();
             }
diff --git a/src/core/Akka.Remote/Serialization/SystemMessageSerializer.cs b/src/core/Akka.Remote/Serialization/SystemMessageSerializer.cs
index 5d0dde3f4..fc36f71a7 100644
--- a/src/core/Akka.Remote/Serialization/SystemMessageSerializer.cs
+++ b/src/core/Akka.Remote/Serialization/SystemMessageSerializer.cs
@@ -39,16 +39,16 @@ public SystemMessageSerializer(ExtendedActorSystem system) : base(system)
         /// <inheritdoc />
         public override byte[] ToBinary(object obj)
         {
-            if (obj is Create) return CreateToProto((Create)obj);
-            if (obj is Recreate) return RecreateToProto((Recreate)obj);
+            if (obj is Create create) return CreateToProto(create);
+            if (obj is Recreate recreate) return RecreateToProto(recreate);
             if (obj is Suspend) return EmptyBytes;
-            if (obj is Resume) return ResumeToProto((Resume)obj);
+            if (obj is Resume resume) return ResumeToProto(resume);
             if (obj is Terminate) return EmptyBytes;
-            if (obj is Supervise) return SuperviseToProto((Supervise)obj);
-            if (obj is Watch) return WatchToProto((Watch)obj);
-            if (obj is Unwatch) return UnwatchToProto((Unwatch)obj);
-            if (obj is Failed) return FailedToProto((Failed)obj);
-            if (obj is DeathWatchNotification) return DeathWatchNotificationToProto((DeathWatchNotification)obj);
+            if (obj is Supervise supervise) return SuperviseToProto(supervise);
+            if (obj is Watch watch) return WatchToProto(watch);
+            if (obj is Unwatch unwatch) return UnwatchToProto(unwatch);
+            if (obj is Failed failed) return FailedToProto(failed);
+            if (obj is DeathWatchNotification deathWatchNotification) return DeathWatchNotificationToProto(deathWatchNotification);
             if (obj is NoMessage) throw new ArgumentException("NoMessage should never be serialized or deserialized");
 
             throw new ArgumentException($"Cannot serialize object of type [{obj.GetType().TypeQualifiedName()}]");
diff --git a/src/core/Akka.Remote/Transport/AkkaPduCodec.cs b/src/core/Akka.Remote/Transport/AkkaPduCodec.cs
index bba9c376e..4fc4e9c23 100644
--- a/src/core/Akka.Remote/Transport/AkkaPduCodec.cs
+++ b/src/core/Akka.Remote/Transport/AkkaPduCodec.cs
@@ -484,7 +484,7 @@ private AcknowledgementInfo AckBuilder(Ack ack)
         {
             var ackAndEnvelope = new AckAndEnvelopeContainer();
             var envelope = new RemoteEnvelope() { Recipient = SerializeActorRef(recipient.Path.Address, recipient) };
-            if (senderOption != null && senderOption.Path != null) { envelope.Sender = SerializeActorRef(localAddress, senderOption); }
+            if (senderOption?.Path != null) { envelope.Sender = SerializeActorRef(localAddress, senderOption); }
             if (seqOption != null) { envelope.Seq = (ulong)seqOption.RawValue; } else envelope.Seq = SeqUndefined;
             if (ackOption != null) { ackAndEnvelope.Ack = AckBuilder(ackOption); }
             envelope.Message = serializedMessage;
diff --git a/src/core/Akka.Remote/Transport/AkkaProtocolTransport.cs b/src/core/Akka.Remote/Transport/AkkaProtocolTransport.cs
index 8d00793b9..c6009a8d0 100644
--- a/src/core/Akka.Remote/Transport/AkkaProtocolTransport.cs
+++ b/src/core/Akka.Remote/Transport/AkkaProtocolTransport.cs
@@ -130,8 +130,7 @@ protected override string ManagerName
             get
             {
                 if (string.IsNullOrEmpty(_managerName))
-                    _managerName = string.Format("akkaprotocolmanager.{0}.{1}", WrappedTransport.SchemeIdentifier,
-                        UniqueId.GetAndIncrement());
+                    _managerName = $"akkaprotocolmanager.{WrappedTransport.SchemeIdentifier}.{UniqueId.GetAndIncrement()}";
                 return _managerName;
             }
         }
@@ -263,7 +262,7 @@ protected override void Ready(object message)
 
         private string ActorNameFor(Address remoteAddress)
         {
-            return string.Format("akkaProtocol-{0}-{1}", AddressUrlEncoder.Encode(remoteAddress), NextId());
+            return $"akkaProtocol-{AddressUrlEncoder.Encode(remoteAddress)}-{NextId()}";
         }
 
         private void CreateOutboundStateActor(Address remoteAddress,
diff --git a/src/core/Akka.Remote/Transport/DotNetty/AkkaLoggingHandler.cs b/src/core/Akka.Remote/Transport/DotNetty/AkkaLoggingHandler.cs
index 70e2cb818..d28719297 100644
--- a/src/core/Akka.Remote/Transport/DotNetty/AkkaLoggingHandler.cs
+++ b/src/core/Akka.Remote/Transport/DotNetty/AkkaLoggingHandler.cs
@@ -135,13 +135,13 @@ protected string Format(IChannelHandlerContext ctx, string eventName)
         
         protected string Format(IChannelHandlerContext ctx, string eventName, object arg)
         {
-            if (arg is IByteBuffer)
+            if (arg is IByteBuffer iByteBuffer)
             {
-                return this.FormatByteBuffer(ctx, eventName, (IByteBuffer)arg);
+                return this.FormatByteBuffer(ctx, eventName, iByteBuffer);
             }
-            else if (arg is IByteBufferHolder)
+            else if (arg is IByteBufferHolder iByteBufferHolder)
             {
-                return this.FormatByteBufferHolder(ctx, eventName, (IByteBufferHolder)arg);
+                return this.FormatByteBufferHolder(ctx, eventName, iByteBufferHolder);
             }
             else
             {
diff --git a/src/core/Akka.Remote/Transport/ThrottleTransportAdapter.cs b/src/core/Akka.Remote/Transport/ThrottleTransportAdapter.cs
index 4215f20b2..dd8c7fd2a 100644
--- a/src/core/Akka.Remote/Transport/ThrottleTransportAdapter.cs
+++ b/src/core/Akka.Remote/Transport/ThrottleTransportAdapter.cs
@@ -95,7 +95,7 @@ protected override string ManagerName
         {
             get
             {
-                return string.Format("throttlermanager.${0}${1}", WrappedTransport.SchemeIdentifier, UniqueId.GetAndIncrement());
+                return $"throttlermanager.${WrappedTransport.SchemeIdentifier}${UniqueId.GetAndIncrement()}";
             }
         }
 
@@ -542,8 +542,7 @@ private Task<SetThrottleAck> AskModeWithDeathCompletion(IActorRef target, Thrott
             target.Tell(mode, promiseRef);
             return promiseRef.Result.ContinueWith(tr =>
             {
-                var t = tr.Result as Terminated;
-                if (t != null && t.ActorRef.Path.Equals(target.Path))
+                if (tr.Result is Terminated t && t.ActorRef.Path.Equals(target.Path))
                     return SetThrottleAck.Instance;
                 internalTarget.SendSystemMessage(new Unwatch(internalTarget, promiseRef));
                 return SetThrottleAck.Instance;
diff --git a/src/core/Akka.Remote/Transport/TransportAdapters.cs b/src/core/Akka.Remote/Transport/TransportAdapters.cs
index 9638df4c3..a51539cca 100644
--- a/src/core/Akka.Remote/Transport/TransportAdapters.cs
+++ b/src/core/Akka.Remote/Transport/TransportAdapters.cs
@@ -151,7 +151,7 @@ public SchemeAugmenter(string addedSchemeIdentifier)
         /// <returns>TBD</returns>
         public string AugmentScheme(string originalScheme)
         {
-            return string.Format("{0}.{1}", AddedSchemeIdentifier, originalScheme);
+            return $"{AddedSchemeIdentifier}.{originalScheme}";
         }
 
         /// <summary>
@@ -172,7 +172,7 @@ public Address AugmentScheme(Address address)
         /// <returns>TBD</returns>
         public string RemoveScheme(string scheme)
         {
-            if (scheme.StartsWith(string.Format("{0}.", AddedSchemeIdentifier)))
+            if (scheme.StartsWith($"{AddedSchemeIdentifier}."))
                 return scheme.Remove(0, AddedSchemeIdentifier.Length + 1);
             return scheme;
         }
diff --git a/src/core/Akka.Streams.Tests/Dsl/FlowMonitorSpec.cs b/src/core/Akka.Streams.Tests/Dsl/FlowMonitorSpec.cs
index 78a982b2c..4edf3601d 100644
--- a/src/core/Akka.Streams.Tests/Dsl/FlowMonitorSpec.cs
+++ b/src/core/Akka.Streams.Tests/Dsl/FlowMonitorSpec.cs
@@ -77,8 +77,7 @@ public void A_FlowMonitor_must_return_Failed_when_stream_fails_and_propagate_the
             source.SendError(ex);
             AwaitAssert(() =>
             {
-                var state = monitor.State as FlowMonitor.Failed;
-                if(state != null && ReferenceEquals(state.Cause, ex))
+                if(monitor.State is FlowMonitor.Failed state && ReferenceEquals(state.Cause, ex))
                     return;
 
                 throw new Exception();
@@ -121,8 +120,7 @@ public void A_FlowMonitor_must_return_Received_after_receiving_a_message()
             sink.RequestNext(message);
             AwaitAssert(() =>
             {
-                var state = monitor.State as FlowMonitor.Received<int>;
-                if (state != null && state.Message == 42)
+                if (monitor.State is FlowMonitor.Received<int> state && state.Message == 42)
                     return;
 
                 throw new Exception();
@@ -146,8 +144,7 @@ public void A_FlowMonitor_must_return_Received_after_receiving_a_StreamState_mes
             sink.RequestNext(message);
             AwaitAssert(() =>
             {
-                var state = monitor.State as FlowMonitor.Received<FlowMonitor.Received<string>>;
-                if (state != null && state.Message == message)
+                if (monitor.State is FlowMonitor.Received<FlowMonitor.Received<string>> state && state.Message == message)
                     return;
 
                 throw new Exception();
diff --git a/src/core/Akka.Streams.Tests/Dsl/GraphStageTimersSpec.cs b/src/core/Akka.Streams.Tests/Dsl/GraphStageTimersSpec.cs
index 9d35fa5a5..d95710327 100644
--- a/src/core/Akka.Streams.Tests/Dsl/GraphStageTimersSpec.cs
+++ b/src/core/Akka.Streams.Tests/Dsl/GraphStageTimersSpec.cs
@@ -201,8 +201,7 @@ public Tick(int n)
 
             public override bool Equals(object obj)
             {
-                var t = obj as Tick;
-                return t != null && Equals(t);
+                return obj is Tick t && Equals(t);
             }
 
             private bool Equals(Tick other) => N == other.N;
diff --git a/src/core/Akka.Streams.Tests/Implementation/StreamLayoutSpec.cs b/src/core/Akka.Streams.Tests/Implementation/StreamLayoutSpec.cs
index af8944509..e3e9ea53d 100644
--- a/src/core/Akka.Streams.Tests/Implementation/StreamLayoutSpec.cs
+++ b/src/core/Akka.Streams.Tests/Implementation/StreamLayoutSpec.cs
@@ -66,8 +66,7 @@ public TestPublisher(IModule owner, OutPort port)
 
             public void Subscribe(ISubscriber<object> subscriber)
             {
-                var sub = subscriber as TestSubscriber;
-                if (sub != null)
+                if (subscriber is TestSubscriber sub)
                 {
                     DownstreamModule = sub.Owner;
                     DownstreamPort = sub.Port;
@@ -93,8 +92,7 @@ public TestSubscriber(IModule owner, InPort port)
 
             public void OnSubscribe(ISubscription subscription)
             {
-                var publisher = subscription as TestPublisher;
-                if (publisher != null)
+                if (subscription is TestPublisher publisher)
                 {
                     UpstreamModule = publisher.Owner;
                     UpstreamPort = publisher.Port;
diff --git a/src/core/Akka.Streams/ActorMaterializer.cs b/src/core/Akka.Streams/ActorMaterializer.cs
index 5f1666b00..590fb2fb8 100644
--- a/src/core/Akka.Streams/ActorMaterializer.cs
+++ b/src/core/Akka.Streams/ActorMaterializer.cs
@@ -92,8 +92,8 @@ private static ActorSystem ActorSystemOf(IActorRefFactory context)
         {
             if (context is ExtendedActorSystem)
                 return (ActorSystem)context;
-            if (context is IActorContext)
-                return ((IActorContext)context).System;
+            if (context is IActorContext iActorContext)
+                return iActorContext.System;
             if (context == null)
                 throw new ArgumentNullException(nameof(context), "IActorRefFactory must be defined");
 
@@ -211,8 +211,7 @@ internal static class ActorMaterializerHelper
         internal static ActorMaterializer Downcast(IMaterializer materializer)
         {
             //FIXME this method is going to cause trouble for other Materializer implementations
-            var downcast = materializer as ActorMaterializer;
-            if (downcast != null)
+            if (materializer is ActorMaterializer downcast)
                 return downcast;
 
             throw new ArgumentException($"Expected {typeof(ActorMaterializer)} but got {materializer.GetType()}");
@@ -704,8 +703,8 @@ public override bool Equals(object obj)
                 return false;
             if (ReferenceEquals(obj, this))
                 return true;
-            if (obj is StreamSubscriptionTimeoutSettings)
-                return Equals((StreamSubscriptionTimeoutSettings) obj);
+            if (obj is StreamSubscriptionTimeoutSettings streamSubscriptionTimeoutSettings)
+                return Equals(streamSubscriptionTimeoutSettings);
 
             return false;
         }
diff --git a/src/core/Akka.Streams/Actors/ActorPublisher.cs b/src/core/Akka.Streams/Actors/ActorPublisher.cs
index b00b954d8..b5c7a3776 100644
--- a/src/core/Akka.Streams/Actors/ActorPublisher.cs
+++ b/src/core/Akka.Streams/Actors/ActorPublisher.cs
@@ -486,9 +486,8 @@ public void OnErrorThenStop(Exception cause)
         /// <returns>TBD</returns>
         protected internal override bool AroundReceive(Receive receive, object message)
         {
-            if (message is Request)
+            if (message is Request req)
             {
-                var req = (Request) message;
                 if (req.IsProcessed)
                 {
                     // it's an unstashed Request, demand is already handled
@@ -511,9 +510,8 @@ protected internal override bool AroundReceive(Receive receive, object message)
                     }
                 }
             }
-            else if (message is Subscribe<T>)
+            else if (message is Subscribe<T> sub)
             {
-                var sub = (Subscribe<T>) message;
                 var subscriber = sub.Subscriber;
                 switch (_lifecycleState)
                 {
diff --git a/src/core/Akka.Streams/Actors/ActorSubscriber.cs b/src/core/Akka.Streams/Actors/ActorSubscriber.cs
index 8cf836789..3a5e7eb31 100644
--- a/src/core/Akka.Streams/Actors/ActorSubscriber.cs
+++ b/src/core/Akka.Streams/Actors/ActorSubscriber.cs
@@ -161,9 +161,8 @@ protected internal override bool AroundReceive(Receive receive, object message)
                     Request(RequestStrategy.RequestDemand(RemainingRequested));
                 }
             }
-            else if (message is OnSubscribe)
+            else if (message is OnSubscribe onSubscribe)
             {
-                var onSubscribe = (OnSubscribe) message;
                 if (_subscription == null)
                 {
                     _subscription = onSubscribe.Subscription;
diff --git a/src/core/Akka.Streams/Attributes.cs b/src/core/Akka.Streams/Attributes.cs
index fd2aefec1..a2274f41c 100644
--- a/src/core/Akka.Streams/Attributes.cs
+++ b/src/core/Akka.Streams/Attributes.cs
@@ -328,7 +328,7 @@ public Attributes(params IAttribute[] attributes)
         /// INTERNAL API
         /// </summary>
         internal bool IsAsync
-            => _attributes.Count() > 0 && 
+            => _attributes.Any()&& 
                 _attributes.Any(
                     attr => attr is AsyncBoundary || 
                     attr is ActorAttributes.Dispatcher);
@@ -516,9 +516,8 @@ public static Attributes CreateName(string name)
         /// <returns>TBD</returns>
         public static string ExtractName(IModule module, string defaultIfNotFound)
         {
-            var copy = module as CopiedModule;
 
-            return copy != null
+            return module is CopiedModule copy
                 ? copy.Attributes.And(copy.CopyOf.Attributes).GetNameOrDefault(defaultIfNotFound)
                 : module.Attributes.GetNameOrDefault(defaultIfNotFound);
         }
diff --git a/src/core/Akka.Streams/Dsl/Internal/GraphImpl.cs b/src/core/Akka.Streams/Dsl/Internal/GraphImpl.cs
index 3dfb9566c..47e16f842 100644
--- a/src/core/Akka.Streams/Dsl/Internal/GraphImpl.cs
+++ b/src/core/Akka.Streams/Dsl/Internal/GraphImpl.cs
@@ -90,8 +90,7 @@ public static class ModuleExtractor
         /// <returns>TBD</returns>
         public static Option<IModule> Unapply<TShape, TMat>(IGraph<TShape, TMat> graph) where TShape : Shape
         {
-            var module = graph as IModule;
-            return module != null ? new Option<IModule>(module) : Option<IModule>.None;
+            return graph is IModule module ? new Option<IModule>(module) : Option<IModule>.None;
         }
     }
 }
diff --git a/src/core/Akka.Streams/Implementation/ActorMaterializerImpl.cs b/src/core/Akka.Streams/Implementation/ActorMaterializerImpl.cs
index 2fcb02c8e..7f2a06cd4 100644
--- a/src/core/Akka.Streams/Implementation/ActorMaterializerImpl.cs
+++ b/src/core/Akka.Streams/Implementation/ActorMaterializerImpl.cs
@@ -74,14 +74,11 @@ public override IActorRef ActorOf(MaterializationContext context, Props props)
         [InternalApi]
         protected IActorRef ActorOf(Props props, string name, string dispatcher)
         {
-            var localActorRef = Supervisor as LocalActorRef;
-            if (localActorRef != null)
+            if (Supervisor is LocalActorRef localActorRef)
                 return ((ActorCell) localActorRef.Underlying).AttachChild(props.WithDispatcher(dispatcher),
                     isSystemService: false, name: name);
 
-
-            var repointableActorRef = Supervisor as RepointableActorRef;
-            if (repointableActorRef != null)
+            if (Supervisor is RepointableActorRef repointableActorRef)
             {
                 if (repointableActorRef.IsStarted)
                     return ((ActorCell)repointableActorRef.Underlying).AttachChild(props.WithDispatcher(dispatcher), isSystemService: false, name: name);
@@ -305,16 +302,13 @@ public override ActorMaterializerSettings EffectiveSettings(Attributes attribute
         {
             return attributes.AttributeList.Aggregate(Settings, (settings, attribute) =>
             {
-                var buffer = attribute as Attributes.InputBuffer;
-                if (buffer != null)
+                if (attribute is Attributes.InputBuffer buffer)
                     return settings.WithInputBuffer(buffer.Initial, buffer.Max);
 
-                var dispatcher = attribute as ActorAttributes.Dispatcher;
-                if (dispatcher != null)
+                if (attribute is ActorAttributes.Dispatcher dispatcher)
                     return settings.WithDispatcher(dispatcher.Name);
-                
-                var strategy = attribute as ActorAttributes.SupervisionStrategy;
-                if (strategy != null)
+
+                if (attribute is ActorAttributes.SupervisionStrategy strategy)
                     return settings.WithSupervisionStrategy(strategy.Decider);
 
                 return settings;
diff --git a/src/core/Akka.Streams/Implementation/ActorProcessor.cs b/src/core/Akka.Streams/Implementation/ActorProcessor.cs
index c7be1247b..fc7664c05 100644
--- a/src/core/Akka.Streams/Implementation/ActorProcessor.cs
+++ b/src/core/Akka.Streams/Implementation/ActorProcessor.cs
@@ -294,10 +294,10 @@ protected virtual bool WaitingForUpstream(object message)
         {
             if (message is OnComplete)
                 OnComplete();
-            else if (message is OnSubscribe)
-                OnSubscribe(((OnSubscribe)message).Subscription);
-            else if (message is OnError)
-                OnError(((OnError)message).Cause);
+            else if (message is OnSubscribe onSubscribe)
+                OnSubscribe(onSubscribe.Subscription);
+            else if (message is OnError onError)
+                OnError(onError.Cause);
             else
                 return false;
             return true;
@@ -310,14 +310,14 @@ protected virtual bool WaitingForUpstream(object message)
         /// <returns>TBD</returns>
         protected virtual bool UpstreamRunning(object message)
         {
-            if (message is OnNext)
-                EnqueueInputElement(((OnNext)message).Element);
+            if (message is OnNext onNext)
+                EnqueueInputElement(onNext.Element);
             else if (message is OnComplete)
                 OnComplete();
-            else if (message is OnSubscribe)
-                ((OnSubscribe)message).Subscription.Cancel();
-            else if (message is OnError)
-                OnError(((OnError)message).Cause);
+            else if (message is OnSubscribe onSubscribe)
+                onSubscribe.Subscription.Cancel();
+            else if (message is OnError onError)
+                OnError(onError.Cause);
             else
                 return false;
             return true;
@@ -507,9 +507,9 @@ private void SubscribePending(IEnumerable<IUntypedSubscriber> subscribers)
         /// <returns>TBD</returns>
         protected bool WaitingExposedPublisher(object message)
         {
-            if (message is ExposedPublisher)
+            if (message is ExposedPublisher exposedPublisher)
             {
-                ExposedPublisher = ((ExposedPublisher)message).Publisher;
+                ExposedPublisher = exposedPublisher.Publisher;
                 SubReceive.Become(DownstreamRunning);
                 return true;
             }
@@ -526,9 +526,8 @@ protected bool DownstreamRunning(object message)
         {
             if (message is SubscribePending)
                 SubscribePending(ExposedPublisher.TakePendingSubscribers());
-            else if (message is RequestMore)
+            else if (message is RequestMore requestMore)
             {
-                var requestMore = (RequestMore)message;
                 if (requestMore.Demand < 1)
                     Error(ReactiveStreamsCompliance.NumberOfElementsInRequestMustBePositiveException);
                 else
diff --git a/src/core/Akka.Streams/Implementation/ActorRefBackpressureSinkStage.cs b/src/core/Akka.Streams/Implementation/ActorRefBackpressureSinkStage.cs
index a01c07f7e..28e8c767a 100644
--- a/src/core/Akka.Streams/Implementation/ActorRefBackpressureSinkStage.cs
+++ b/src/core/Akka.Streams/Implementation/ActorRefBackpressureSinkStage.cs
@@ -91,8 +91,7 @@ private void Receive((IActorRef, object) evt)
                     return;
                 }
 
-                var t = msg as Terminated;
-                if (t != null && Equals(t.ActorRef, _stage._actorRef))
+                if (msg is Terminated t && Equals(t.ActorRef, _stage._actorRef))
                     CompleteStage();
 
                 //ignore all other messages
diff --git a/src/core/Akka.Streams/Implementation/ActorRefSinkActor.cs b/src/core/Akka.Streams/Implementation/ActorRefSinkActor.cs
index f7f6538a2..9db7880aa 100644
--- a/src/core/Akka.Streams/Implementation/ActorRefSinkActor.cs
+++ b/src/core/Akka.Streams/Implementation/ActorRefSinkActor.cs
@@ -70,14 +70,12 @@ public ActorRefSinkActor(IActorRef @ref, int highWatermark, object onCompleteMes
         protected override bool Receive(object message)
         {
             Terminated terminated;
-            if (message is OnNext)
+            if (message is OnNext onNext)
             {
-                var onNext = (OnNext) message;
                 Ref.Tell(onNext.Element);
             }
-            else if (message is OnError)
+            else if (message is OnError onError)
             {
-                var onError = (OnError) message;
                 Ref.Tell(new Status.Failure(onError.Cause));
                 Context.Stop(Self);
             }
diff --git a/src/core/Akka.Streams/Implementation/Fusing/Fusing.cs b/src/core/Akka.Streams/Implementation/Fusing/Fusing.cs
index aa9653459..d21253dba 100644
--- a/src/core/Akka.Streams/Implementation/Fusing/Fusing.cs
+++ b/src/core/Akka.Streams/Implementation/Fusing/Fusing.cs
@@ -818,9 +818,9 @@ public Atomic AddModule(IModule module, ISet<IModule> group, Attributes inherite
 
             if (IsCopiedModuleWithGraphStageAndMaterializedValue(copy))
                 PushMaterializationSource((CopiedModule) copy);
-            else if (copy is GraphModule)
+            else if (copy is GraphModule graphModule)
             {
-                var mvids = ((GraphModule) copy).MaterializedValueIds;
+                var mvids = graphModule.MaterializedValueIds;
                 foreach (IModule mvid in mvids)
                 {
                     if (IsCopiedModuleWithGraphStageAndMaterializedValue(mvid))
@@ -899,10 +899,9 @@ public void Rewire(Shape oldShape, Shape newShape, int indent)
 
         private bool IsCopiedModuleWithGraphStageAndMaterializedValue(IModule module)
         {
-            var copiedModule = module as CopiedModule;
             GraphStageModule graphStageModule;
             Type stageType;
-            return copiedModule != null
+            return module is CopiedModule copiedModule
                 && (graphStageModule = copiedModule.CopyOf as GraphStageModule) != null
                 && (stageType = graphStageModule.Stage.GetType()).GetTypeInfo().IsGenericType
                 && stageType.GetGenericTypeDefinition() == typeof(MaterializedValueSource<>);
diff --git a/src/core/Akka.Streams/Implementation/Fusing/GraphAssembly.cs b/src/core/Akka.Streams/Implementation/Fusing/GraphAssembly.cs
index 196038e7c..ec344de71 100644
--- a/src/core/Akka.Streams/Implementation/Fusing/GraphAssembly.cs
+++ b/src/core/Akka.Streams/Implementation/Fusing/GraphAssembly.cs
@@ -202,9 +202,9 @@ public GraphAssembly(IGraphStageWithMaterializedValue<Shape, object>[] stages, A
                 }
 
                 var stage = Stages[i];
-                if (stage is IMaterializedValueSource)
+                if (stage is IMaterializedValueSource iMaterializedValueSource)
                 {
-                    var copy = ((IMaterializedValueSource) stage).CopySource();
+                    var copy = iMaterializedValueSource.CopySource();
                     register(copy);
                     stage = (IGraphStageWithMaterializedValue<Shape, object>)copy;
                 }
diff --git a/src/core/Akka.Streams/Implementation/Fusing/GraphStages.cs b/src/core/Akka.Streams/Implementation/Fusing/GraphStages.cs
index 4a0d04559..6e962f3ea 100644
--- a/src/core/Akka.Streams/Implementation/Fusing/GraphStages.cs
+++ b/src/core/Akka.Streams/Implementation/Fusing/GraphStages.cs
@@ -405,8 +405,8 @@ public FlowMonitor.IStreamState State
             get
             {
                 var value = Value;
-                if(value is T)
-                    return new FlowMonitor.Received<T>((T)value);
+                if(value is T t)
+                    return new FlowMonitor.Received<T>(t);
                 
                 return value as FlowMonitor.IStreamState;
             }
diff --git a/src/core/Akka.Streams/Implementation/Fusing/StreamOfStreams.cs b/src/core/Akka.Streams/Implementation/Fusing/StreamOfStreams.cs
index 87d087898..acf7061eb 100644
--- a/src/core/Akka.Streams/Implementation/Fusing/StreamOfStreams.cs
+++ b/src/core/Akka.Streams/Implementation/Fusing/StreamOfStreams.cs
@@ -1218,8 +1218,7 @@ internal static class SubSource
                 return;
             }
 
-            var pub = s.Module as PublisherSource<T>;
-            if (pub != null)
+            if (s.Module is PublisherSource<T> pub)
             {
                 NotUsed _;
                 pub.Create(default(MaterializationContext), out _).Subscribe(CancelingSubscriber<T>.Instance);
@@ -1267,8 +1266,8 @@ private void SetCallback(Action<IActorSubscriberMessage> callback)
                 }
                 else if (status is OnComplete)
                     CompleteStage();
-                else if (status is OnError)
-                    FailStage(((OnError) status).Cause);
+                else if (status is OnError onError)
+                    FailStage(onError.Cause);
                 else if (status is Action<IActorSubscriberMessage>)
                     throw new IllegalStateException("Substream Source cannot be materialized more than once");
             }
@@ -1279,10 +1278,10 @@ public override void PreStart()
                 {
                     if (msg is OnComplete)
                         CompleteStage();
-                    else if (msg is OnError)
-                        FailStage(((OnError) msg).Cause);
-                    else if (msg is OnNext)
-                        Push(_stage._out, (T) ((OnNext) msg).Element);
+                    else if (msg is OnError onError)
+                        FailStage(onError.Cause);
+                    else if (msg is OnNext onNext)
+                        Push(_stage._out, (T) onNext.Element);
                 });
                 SetCallback(ourOwnCallback);
             }
@@ -1344,9 +1343,8 @@ public void PushSubstream(T elem)
         public void CompleteSubstream()
         {
             var s = _status.Value;
-            var f = s as Action<IActorSubscriberMessage>;
 
-            if (f != null)
+            if (s is Action<IActorSubscriberMessage> f)
                 f(OnComplete.Instance);
             else if (!_status.CompareAndSet(null, OnComplete.Instance))
                 ((Action<IActorSubscriberMessage>) _status.Value)(OnComplete.Instance);
@@ -1359,10 +1357,9 @@ public void CompleteSubstream()
         public void FailSubstream(Exception ex)
         {
             var s = _status.Value;
-            var f = s as Action<IActorSubscriberMessage>;
             var failure = new OnError(ex);
 
-            if (f != null)
+            if (s is Action<IActorSubscriberMessage> f)
                 f(failure);
             else if (!_status.CompareAndSet(null, failure))
                 ((Action<IActorSubscriberMessage>) _status.Value)(failure);
diff --git a/src/core/Akka.Streams/Implementation/IO/TcpStages.cs b/src/core/Akka.Streams/Implementation/IO/TcpStages.cs
index a66884d04..79ba183db 100644
--- a/src/core/Akka.Streams/Implementation/IO/TcpStages.cs
+++ b/src/core/Akka.Streams/Implementation/IO/TcpStages.cs
@@ -114,9 +114,8 @@ private void Receive((IActorRef, object) args)
             {
                 var sender = args.Item1;
                 var msg = args.Item2;
-                if (msg is Tcp.Bound)
+                if (msg is Tcp.Bound bound)
                 {
-                    var bound = (Tcp.Bound)msg;
                     _listener = sender;
                     StageActor.Watch(_listener);
 
@@ -140,9 +139,8 @@ private void Receive((IActorRef, object) args)
                     _unbindPromise.TrySetResult(NotUsed.Instance);
                     FailStage(ex);
                 }
-                else if (msg is Tcp.Connected)
+                else if (msg is Tcp.Connected connected)
                 {
-                    var connected = (Tcp.Connected)msg;
                     Push(_stage._out, ConnectionFor(connected, sender));
                 }
                 else if (msg is Tcp.Unbind)
@@ -460,9 +458,8 @@ public override void PreStart()
             {
                 SetKeepGoing(true);
 
-                if (_role is Inbound)
+                if (_role is Inbound inbound)
                 {
-                    var inbound = (Inbound)_role;
                     SetHandler(_bytesOut, _readHandler);
                     _connection = inbound.Connection;
                     GetStageActor(Connected).Watch(_connection);
@@ -482,9 +479,8 @@ public override void PreStart()
             /// </summary>
             public override void PostStop()
             {
-                if (_role is Outbound)
+                if (_role is Outbound outbound)
                 {
-                    var outbound = (Outbound)_role;
                     // Fail if has not been completed with an address earlier
                     outbound.LocalAddressPromise.TrySetException(new StreamTcpException("Connection failed"));
                 }
@@ -499,12 +495,10 @@ private StageActorRef.Receive Connecting(Outbound outbound)
 
                     if (msg is Terminated)
                         FailStage(new StreamTcpException("The IO manager actor (TCP) has terminated. Stopping now."));
-                    else if (msg is Tcp.CommandFailed)
-                        FailStage(new StreamTcpException($"Tcp command {((Tcp.CommandFailed)msg).Cmd} failed"));
-                    else if (msg is Tcp.Connected)
+                    else if (msg is Tcp.CommandFailed commandFailed)
+                        FailStage(new StreamTcpException($"Tcp command {commandFailed.Cmd} failed"));
+                    else if (msg is Tcp.Connected connected)
                     {
-                        var connected = (Tcp.Connected)msg;
-
                         ((Outbound)_role).LocalAddressPromise.TrySetResult(connected.LocalAddress);
                         _connection = sender;
                         SetHandler(_bytesOut, _readHandler);
@@ -527,15 +521,14 @@ private void Connected((IActorRef, object) args)
                 var msg = args.Item2;
 
                 if (msg is Terminated) FailStage(new StreamTcpException("The connection actor has terminated. Stopping now."));
-                else if (msg is Tcp.CommandFailed) FailStage(new StreamTcpException($"Tcp command {((Tcp.CommandFailed)msg).Cmd} failed"));
-                else if (msg is Tcp.ErrorClosed) FailStage(new StreamTcpException($"The connection closed with error: {((Tcp.ErrorClosed)msg).Cause}"));
+                else if (msg is Tcp.CommandFailed commandFailed) FailStage(new StreamTcpException($"Tcp command {commandFailed.Cmd} failed"));
+                else if (msg is Tcp.ErrorClosed errorClosed) FailStage(new StreamTcpException($"The connection closed with error: {errorClosed.Cause}"));
                 else if (msg is Tcp.Aborted) FailStage(new StreamTcpException("The connection has been aborted"));
                 else if (msg is Tcp.Closed) CompleteStage();
                 else if (msg is Tcp.ConfirmedClosed) CompleteStage();
                 else if (msg is Tcp.PeerClosed) Complete(_bytesOut);
-                else if (msg is Tcp.Received)
+                else if (msg is Tcp.Received received)
                 {
-                    var received = (Tcp.Received)msg;
                     // Keep on reading even when closed. There is no "close-read-side" in TCP
                     if (IsClosed(_bytesOut)) _connection.Tell(Tcp.ResumeReading.Instance, StageActor.Ref);
                     else Push(_bytesOut, received.Data);
diff --git a/src/core/Akka.Streams/Implementation/Sources.cs b/src/core/Akka.Streams/Implementation/Sources.cs
index 41a480bf8..0a9d5373f 100644
--- a/src/core/Akka.Streams/Implementation/Sources.cs
+++ b/src/core/Akka.Streams/Implementation/Sources.cs
@@ -172,8 +172,7 @@ public override void PostStop()
             {
                 StopCallback(input =>
                 {
-                    var offer = input as Offer<TOut>;
-                    if (offer != null)
+                    if (input is Offer<TOut> offer)
                     {
                         var promise = offer.CompletionSource;
                         promise.NonBlockingTrySetException(new IllegalStateException("Stream is terminated. SourceQueue is detached."));
@@ -234,8 +233,7 @@ private Action<IInput> Callback()
                 return GetAsyncCallback<IInput>(
                     input =>
                     {
-                        var offer = input as Offer<TOut>;
-                        if (offer != null)
+                        if (input is Offer<TOut> offer)
                         {
                             if (_stage._maxBuffer != 0)
                             {
@@ -282,8 +280,7 @@ private Action<IInput> Callback()
                             }
                         }
 
-                        var completion = input as Completion;
-                        if (completion != null)
+                        if (input is Completion completion)
                         {
                             if (_stage._maxBuffer != 0 && _buffer.NonEmpty || _pendingOffer != null)
                                 _terminating = true;
@@ -294,8 +291,7 @@ private Action<IInput> Callback()
                             }
                         }
 
-                        var failure = input as Failure;
-                        if (failure != null)
+                        if (input is Failure failure)
                         {
                             _completion.SetException(failure.Ex);
                             FailStage(failure.Ex);
diff --git a/src/core/Akka.Streams/Implementation/StreamLayout.cs b/src/core/Akka.Streams/Implementation/StreamLayout.cs
index fe11dea92..d75d811b9 100644
--- a/src/core/Akka.Streams/Implementation/StreamLayout.cs
+++ b/src/core/Akka.Streams/Implementation/StreamLayout.cs
@@ -296,10 +296,10 @@ private static ImmutableHashSet<IModule> Atomics(IMaterializedValueNode node)
         {
             if (node is Ignore)
                 return ImmutableHashSet<IModule>.Empty;
-            if (node is Transform)
-                return Atomics(((Transform) node).Node);
-            if (node is Atomic)
-                return ImmutableHashSet.Create(((Atomic) node).Module);
+            if (node is Transform transform)
+                return Atomics(transform.Node);
+            if (node is Atomic atomic)
+                return ImmutableHashSet.Create(atomic.Module);
 
             Combine c;
             if ((c = node as Combine) != null)
@@ -324,9 +324,7 @@ public static bool Apply(StreamLayout.IMaterializedValueNode composition)
                 return false;
             if (composition is StreamLayout.Ignore)
                 return true;
-
-            var atomic = composition as StreamLayout.Atomic;
-            return atomic != null && Apply(atomic.Module);
+            return composition is StreamLayout.Atomic atomic && Apply(atomic.Module);
         }
 
         /// <summary>
@@ -338,16 +336,13 @@ public static bool Apply(IModule module)
         {
             if (module is AtomicModule || module is EmptyModule)
                 return true;
-            var copied = module as CopiedModule;
-            if (copied != null)
+
+            if (module is CopiedModule copied)
                 return Apply(copied.CopyOf);
 
-            var composite = module as CompositeModule;
-            if(composite != null)
+            if(module is CompositeModule composite)
                 return Apply(composite.MaterializedValueComputation);
-
-            var fused = module as FusedModule;
-            return fused != null && Apply(fused.MaterializedValueComputation);
+            return module is FusedModule fused && Apply(fused.MaterializedValueComputation);
         }
     }
 
@@ -744,8 +739,8 @@ public virtual IModule Wire(OutPort from, InPort to)
 
         private bool IsIgnorable(StreamLayout.IMaterializedValueNode computation)
         {
-            if (computation is StreamLayout.Atomic)
-                return IsIgnorable(((StreamLayout.Atomic) computation).Module);
+            if (computation is StreamLayout.Atomic atomic)
+                return IsIgnorable(atomic.Module);
 
             if (computation is StreamLayout.Combine || computation is StreamLayout.Transform)
                 return false;
@@ -756,9 +751,9 @@ private bool IsIgnorable(StreamLayout.IMaterializedValueNode computation)
         private bool IsIgnorable(IModule module)
         {
             if (module is AtomicModule || module is EmptyModule) return true;
-            if (module is CopiedModule) return IsIgnorable(((CopiedModule) module).CopyOf);
-            if (module is CompositeModule) return IsIgnorable(((CompositeModule) module).MaterializedValueComputation);
-            if (module is FusedModule) return IsIgnorable(((FusedModule) module).MaterializedValueComputation);
+            if (module is CopiedModule copiedModule) return IsIgnorable(copiedModule.CopyOf);
+            if (module is CompositeModule compositeModule) return IsIgnorable(compositeModule.MaterializedValueComputation);
+            if (module is FusedModule fusedModule) return IsIgnorable(fusedModule.MaterializedValueComputation);
 
             throw new NotSupportedException($"Module of type {module.GetType()} is not supported by this method");
         }
@@ -825,7 +820,7 @@ public virtual IModule Nest()
         /// <summary>
         /// TBD
         /// </summary>
-        public bool IsSealed => IsAtomic || IsCopied || IsFused || Attributes.AttributeList.Count() != 0;
+        public bool IsSealed => IsAtomic || IsCopied || IsFused || Attributes.AttributeList.Any();
 
         /// <summary>
         /// TBD
@@ -1596,8 +1591,7 @@ private void TrySubscribe(ISubscriber<T> subscriber)
                 return;
             }
 
-            var subscription = Value as ISubscription;
-            if (subscription != null)
+            if (Value is ISubscription subscription)
             {
                 if (CompareAndSet(subscription, new Both(subscriber)))
                     EstablishSubscription(subscriber, subscription);
@@ -1607,8 +1601,7 @@ private void TrySubscribe(ISubscriber<T> subscriber)
                 return;
             }
 
-            var publisher = Value as IPublisher<T>;
-            if (publisher != null)
+            if (Value is IPublisher<T> publisher)
             {
                 if (CompareAndSet(publisher, Inert.Instance))
                     publisher.Subscribe(subscriber);
@@ -1654,11 +1647,9 @@ private void TryOnSubscribe(object obj, ISubscription s)
                 return;
             }
 
-            var subscriber = Value as ISubscriber<T>;
-            if (subscriber != null)
+            if (Value is ISubscriber<T> subscriber)
             {
-                var subscription = obj as ISubscription;
-                if (subscription != null)
+                if (obj is ISubscription subscription)
                 {
                     if (CompareAndSet(subscriber, new Both(subscriber)))
                         EstablishSubscription(subscriber, subscription);
@@ -1667,9 +1658,7 @@ private void TryOnSubscribe(object obj, ISubscription s)
 
                     return;
                 }
-
-                var publisher = Value as IPublisher<T>;
-                if (publisher != null)
+                if (Value is IPublisher<T> publisher)
                 {
                     var inert = GetAndSet(Inert.Instance);
                     if (inert != Inert.Instance)
@@ -1727,8 +1716,7 @@ public void OnError(Exception cause)
                     return;
                 }
 
-                var subscription = Value as ISubscription;
-                if (subscription != null)
+                if (Value is ISubscription subscription)
                 {
                     if (!CompareAndSet(subscription, new ErrorPublisher<T>(ex, "failed-VirtualProcessor")))
                         continue;
@@ -1737,8 +1725,7 @@ public void OnError(Exception cause)
                     return;
                 }
 
-                var both = Value as Both;
-                if (both != null)
+                if (Value is Both both)
                 {
                     Value = Inert.Instance;
                     try
@@ -1755,8 +1742,7 @@ public void OnError(Exception cause)
                     return;
                 }
 
-                var subscriber = Value as ISubscriber<T>;
-                if (subscriber != null)
+                if (Value is ISubscriber<T> subscriber)
                 {
                     // spec violation
                     var inert = GetAndSet(Inert.Instance);
@@ -1786,8 +1772,7 @@ public void OnComplete()
                     return;
                 }
 
-                var subscription = Value as ISubscription;
-                if (subscription != null)
+                if (Value is ISubscription subscription)
                 {
                     if (!CompareAndSet(subscription, EmptyPublisher<T>.Instance))
                         continue;
@@ -1795,16 +1780,14 @@ public void OnComplete()
                     return;
                 }
 
-                var both = Value as Both;
-                if (both != null)
+                if (Value is Both both)
                 {
                     Value = Inert.Instance;
                     ReactiveStreamsCompliance.TryOnComplete(both.Subscriber);
                     return;
                 }
 
-                var subscriber = Value as ISubscriber<T>;
-                if (subscriber != null)
+                if (Value is ISubscriber<T> subscriber)
                 {
                     // spec violation
                     Value = Inert.Instance;
@@ -1839,8 +1822,7 @@ public void OnNext(T element)
                         break;
                     }
 
-                    var subscriber = Value as ISubscriber<T>;
-                    if (subscriber != null)
+                    if (Value is ISubscriber<T> subscriber)
                     {
                         try
                         {
@@ -1853,8 +1835,7 @@ public void OnNext(T element)
                         break;
                     }
 
-                    var both = Value as Both;
-                    if (both != null)
+                    if (Value is Both both)
                     {
                         try
                         {
@@ -1876,8 +1857,7 @@ public void OnNext(T element)
 
             while (true)
             {
-                var both = Value as Both;
-                if (both != null)
+                if (Value is Both both)
                 {
                     try
                     {
@@ -1892,8 +1872,7 @@ public void OnNext(T element)
                     }
                 }
 
-                var subscriber = Value as ISubscriber<T>;
-                if (subscriber != null)
+                if (Value is ISubscriber<T> subscriber)
                 {
                     // spec violation
                     var ex = new IllegalStateException(NoDemand);
@@ -1958,8 +1937,8 @@ public void Request(long n)
                 {
                     ReactiveStreamsCompliance.TryCancel(_real);
                     var value = _processor.GetAndSet(Inert.Instance);
-                    var both = value as Both;
-                    if (both != null)
+
+                    if (value is Both both)
                         ReactiveStreamsCompliance.RejectDueToNonPositiveDemand(both.Subscriber);
                     else if (value == Inert.Instance)
                     {
@@ -2062,8 +2041,7 @@ public void Subscribe(ISubscriber<T> subscriber)
                     return;
                 }
 
-                var publisher = Value as IPublisher<T>;
-                if (publisher != null)
+                if (Value is IPublisher<T> publisher)
                 {
                     if (CompareAndSet(publisher, Inert.Subscriber))
                     {
@@ -2104,8 +2082,7 @@ public void RegisterPublisher(IPublisher<T> publisher)
                     return;
                 }
 
-                var subscriber = Value as ISubscriber<T>;
-                if (subscriber != null)
+                if (Value is ISubscriber<T> subscriber)
                 {
                     Value = Inert.Instance;
                     publisher.Subscribe(subscriber);
@@ -2287,8 +2264,7 @@ public object Materialize()
                 foreach (var subMap in _subscribersStack)
                     foreach (var value in subMap.Values)
                     {
-                        var subscriber = value as IUntypedSubscriber;
-                        if (subscriber != null)
+                        if (value is IUntypedSubscriber subscriber)
                         {
                             var subscribedType = UntypedSubscriber.ToTyped(subscriber).GetType().GetSubscribedType();
                             var publisher = typeof(ErrorPublisher<>).Instantiate(subscribedType, ex, string.Empty);
@@ -2297,8 +2273,7 @@ public object Materialize()
                             continue;
                         }
 
-                        var virtualPublisher = value as IUntypedVirtualPublisher;
-                        if (virtualPublisher != null)
+                        if (value is IUntypedVirtualPublisher virtualPublisher)
                         {
                             var publishedType =
                                 UntypedVirtualPublisher.ToTyped(virtualPublisher).GetType().GetPublishedType();
@@ -2422,20 +2397,17 @@ protected virtual object MaterializeComposite(IModule composite, Attributes effe
             if (IsDebug)
                 Console.WriteLine($"{indent}{node}");
             object result;
-            if (node is StreamLayout.Atomic)
+            if (node is StreamLayout.Atomic atomic)
             {
-                var atomic = (StreamLayout.Atomic) node;
                 values.TryGetValue(atomic.Module, out result);
             }
-            else if (node is StreamLayout.Combine)
+            else if (node is StreamLayout.Combine combine)
             {
-                var combine = (StreamLayout.Combine) node;
                 result = combine.Combinator(ResolveMaterialized(combine.Left, values, spaces + 2),
                     ResolveMaterialized(combine.Right, values, spaces + 2));
             }
-            else if (node is StreamLayout.Transform)
+            else if (node is StreamLayout.Transform transform)
             {
-                var transform = (StreamLayout.Transform) node;
                 result = transform.Transformator(ResolveMaterialized(transform.Node, values, spaces + 2));
             }
             else
@@ -2488,15 +2460,13 @@ protected void AssignPort(OutPort outPort, IUntypedPublisher publisher)
 
         private void DoSubscribe(IUntypedPublisher publisher, object subscriberOrVirtual)
         {
-            var subscriber = subscriberOrVirtual as IUntypedSubscriber;
-            if (subscriber != null)
+            if (subscriberOrVirtual is IUntypedSubscriber subscriber)
             {
                 publisher.Subscribe(subscriber);
                 return;
             }
 
-            var virtualPublisher = subscriberOrVirtual as IUntypedVirtualPublisher;
-            if (virtualPublisher != null)
+            if (subscriberOrVirtual is IUntypedVirtualPublisher virtualPublisher)
             {
                 virtualPublisher.RegisterPublisher(UntypedPublisher.FromTyped(publisher));
                 return;
diff --git a/src/core/Akka.Streams/Implementation/UntypedVirtualPublisher.cs b/src/core/Akka.Streams/Implementation/UntypedVirtualPublisher.cs
index f6a76f2ba..dbc795b1c 100644
--- a/src/core/Akka.Streams/Implementation/UntypedVirtualPublisher.cs
+++ b/src/core/Akka.Streams/Implementation/UntypedVirtualPublisher.cs
@@ -78,8 +78,8 @@ public static UntypedVirtualPublisher FromTyped<T>(VirtualPublisher<T> publisher
         /// <returns>TBD</returns>
         public static object ToTyped(IUntypedVirtualPublisher untypedPublisher)
         {
-            if (untypedPublisher is UntypedVirtualPublisher)
-                return ((UntypedVirtualPublisher) untypedPublisher).Unwrap();
+            if (untypedPublisher is UntypedVirtualPublisher untypedVirtualPublisher)
+                return untypedVirtualPublisher.Unwrap();
             return untypedPublisher;
         }
 
diff --git a/src/core/Akka.TestKit.Tests/TestActorRefTests/Logger.cs b/src/core/Akka.TestKit.Tests/TestActorRefTests/Logger.cs
index fbbae4485..2b87a92f1 100644
--- a/src/core/Akka.TestKit.Tests/TestActorRefTests/Logger.cs
+++ b/src/core/Akka.TestKit.Tests/TestActorRefTests/Logger.cs
@@ -17,7 +17,7 @@ public class Logger : ActorBase
         protected override bool Receive(object message)
         {
             var warning = message as Warning;
-            if(warning != null && warning.Message is string)
+            if(warning?.Message is string)
             {
                 _count++;
                 _msg = (string)warning.Message;
diff --git a/src/core/Akka.TestKit.Tests/TestActorRefTests/TestActorRefSpec.cs b/src/core/Akka.TestKit.Tests/TestActorRefTests/TestActorRefSpec.cs
index c6a331708..a68f15629 100644
--- a/src/core/Akka.TestKit.Tests/TestActorRefTests/TestActorRefSpec.cs
+++ b/src/core/Akka.TestKit.Tests/TestActorRefTests/TestActorRefSpec.cs
@@ -106,7 +106,7 @@ public void TestActorRef_must_stop_when_sent_a_PoisonPill()
             var a = new TestActorRef<WorkerActor>(Sys, Props.Create<WorkerActor>(), null, "will-be-killed");
             Sys.ActorOf(Props.Create(() => new WatchAndForwardActor(a, TestActor)), "forwarder");
             a.Tell(PoisonPill.Instance);
-            ExpectMsg<WrappedTerminated>(w => w.Terminated.ActorRef == a, TimeSpan.FromSeconds(10), string.Format("that the terminated actor was the one killed, i.e. {0}", a.Path));
+            ExpectMsg<WrappedTerminated>(w => w.Terminated.ActorRef == a, TimeSpan.FromSeconds(10), $"that the terminated actor was the one killed, i.e. {a.Path}");
             var actorRef = (InternalTestActorRef)a.Ref;
             actorRef.IsTerminated.ShouldBe(true);
             AssertThread();
diff --git a/src/core/Akka.TestKit.Tests/TestActorRefTests/WatchAndForwardActor.cs b/src/core/Akka.TestKit.Tests/TestActorRefTests/WatchAndForwardActor.cs
index 40e47f097..cb453b761 100644
--- a/src/core/Akka.TestKit.Tests/TestActorRefTests/WatchAndForwardActor.cs
+++ b/src/core/Akka.TestKit.Tests/TestActorRefTests/WatchAndForwardActor.cs
@@ -21,8 +21,7 @@ public WatchAndForwardActor(IActorRef watchedActor, IActorRef forwardToActor)
 
         protected override bool Receive(object message)
         {
-            var terminated = message as Terminated;
-            if(terminated != null)
+            if(message is Terminated terminated)
                 _forwardToActor.Tell(new WrappedTerminated(terminated), Sender);
             else
                 _forwardToActor.Tell(message, Sender);
diff --git a/src/core/Akka.TestKit.Tests/TestActorRefTests/WorkerActor.cs b/src/core/Akka.TestKit.Tests/TestActorRefTests/WorkerActor.cs
index 09dd91e6f..aff224cf4 100644
--- a/src/core/Akka.TestKit.Tests/TestActorRefTests/WorkerActor.cs
+++ b/src/core/Akka.TestKit.Tests/TestActorRefTests/WorkerActor.cs
@@ -21,9 +21,9 @@ protected override bool ReceiveMessage(object message)
 
             }
             //TODO: case replyTo: Promise[_] â replyTo.asInstanceOf[Promise[Any]].success("complexReply")
-            if(message is IActorRef)
+            if(message is IActorRef iActorRef)
             {
-                ((IActorRef)message).Tell("complexReply", Self);
+                iActorRef.Tell("complexReply", Self);
                 return true;
             }
             return false;
diff --git a/src/core/Akka.TestKit.Tests/TestKitBaseTests/DilatedTests.cs b/src/core/Akka.TestKit.Tests/TestKitBaseTests/DilatedTests.cs
index a50ab3f95..46525e541 100644
--- a/src/core/Akka.TestKit.Tests/TestKitBaseTests/DilatedTests.cs
+++ b/src/core/Akka.TestKit.Tests/TestKitBaseTests/DilatedTests.cs
@@ -56,7 +56,7 @@ public void ExpectMsgAllOf_should_dilate_timeout()
             Intercept(() => ExpectMsgAllOf(TimeSpan.FromMilliseconds(Timeout), "1", "2"));
             var after = Now;
             var diff = (after - before).TotalMilliseconds;
-            Assert.True(Math.Abs(diff - ExpectedTimeout) <= DiffDelta, string.Format("Expected the timeout to be {0} but in fact it was {1}.", ExpectedTimeout, diff));
+            Assert.True(Math.Abs(diff - ExpectedTimeout) <= DiffDelta, $"Expected the timeout to be {ExpectedTimeout} but in fact it was {diff}.");
         }
 
         [Fact]
@@ -66,7 +66,7 @@ public void FishForMessage_should_dilate_timeout()
             Intercept(() => FishForMessage(_=>false, TimeSpan.FromMilliseconds(Timeout)));
             var after = Now;
             var diff = (after - before).TotalMilliseconds;
-            Assert.True(Math.Abs(diff - ExpectedTimeout) <= DiffDelta, string.Format("Expected the timeout to be {0} but in fact it was {1}.", ExpectedTimeout, diff));
+            Assert.True(Math.Abs(diff - ExpectedTimeout) <= DiffDelta, $"Expected the timeout to be {ExpectedTimeout} but in fact it was {diff}.");
         }
     }
 }
diff --git a/src/core/Akka.TestKit/EventFilter/DeadLettersFilter.cs b/src/core/Akka.TestKit/EventFilter/DeadLettersFilter.cs
index 611441780..b777c66ea 100644
--- a/src/core/Akka.TestKit/EventFilter/DeadLettersFilter.cs
+++ b/src/core/Akka.TestKit/EventFilter/DeadLettersFilter.cs
@@ -38,11 +38,9 @@ public DeadLettersFilter(IStringMatcher messageMatcher, IStringMatcher sourceMat
         /// <returns>TBD</returns>
         protected override bool IsMatch(LogEvent evt)
         {
-            var warning = evt as Warning;
-            if(warning != null)
+            if(evt is Warning warning)
             {
-                var deadLetter = warning.Message as DeadLetter;
-                if(deadLetter != null)
+                if(warning.Message is DeadLetter deadLetter)
                     if(_isMatch == null || _isMatch(deadLetter))
                         return InternalDoMatch(warning.LogSource, deadLetter.Message);
             }
diff --git a/src/core/Akka.TestKit/EventFilter/Internal/DebugFilter.cs b/src/core/Akka.TestKit/EventFilter/Internal/DebugFilter.cs
index 8ce5ed2d9..e4efb0fbc 100644
--- a/src/core/Akka.TestKit/EventFilter/Internal/DebugFilter.cs
+++ b/src/core/Akka.TestKit/EventFilter/Internal/DebugFilter.cs
@@ -32,8 +32,7 @@ public DebugFilter(IStringMatcher messageMatcher = null, IStringMatcher sourceMa
         /// <returns>TBD</returns>
         protected override bool IsMatch(LogEvent evt)
         {
-            var debug = evt as Debug;
-            if(debug != null)
+            if(evt is Debug debug)
             {
                 return InternalDoMatch(debug.LogSource, debug.Message);
             }
diff --git a/src/core/Akka.TestKit/EventFilter/Internal/ErrorFilter.cs b/src/core/Akka.TestKit/EventFilter/Internal/ErrorFilter.cs
index d9b3b3942..507a56bab 100644
--- a/src/core/Akka.TestKit/EventFilter/Internal/ErrorFilter.cs
+++ b/src/core/Akka.TestKit/EventFilter/Internal/ErrorFilter.cs
@@ -55,8 +55,7 @@ public ErrorFilter(Type exceptionType, IStringMatcher messageMatcher = null, ISt
         /// <returns>TBD</returns>
         protected override bool IsMatch(LogEvent evt)
         {
-            var error = evt as Error;
-            if(error != null)
+            if(evt is Error error)
             {
                 var logSource = error.LogSource;
                 var errorMessage = error.Message;
diff --git a/src/core/Akka.TestKit/EventFilter/Internal/EventFilterApplier.cs b/src/core/Akka.TestKit/EventFilter/Internal/EventFilterApplier.cs
index 2f7586a93..497f9721d 100644
--- a/src/core/Akka.TestKit/EventFilter/Internal/EventFilterApplier.cs
+++ b/src/core/Akka.TestKit/EventFilter/Internal/EventFilterApplier.cs
@@ -296,15 +296,15 @@ protected T Intercept<T>(Func<T> func, ActorSystem system, TimeSpan? timeout, in
                     {
                         var expectedNumberOfEvents = expectedOccurrences.Value;
                         if(actualNumberOfEvents < expectedNumberOfEvents)
-                            msg = string.Format("Timeout ({0}) while waiting for messages. Only received {1}/{2} messages that matched filter [{3}]", timeoutValue, actualNumberOfEvents, expectedNumberOfEvents, string.Join(",", _filters).Replace("{", "{{").Replace("}", "}}"));
+                            msg = $"Timeout ({timeoutValue}) while waiting for messages. Only received {actualNumberOfEvents}/{expectedNumberOfEvents} messages that matched filter [{string.Join(",", _filters).Replace("{", "{{").Replace("}", "}}")}]";
                         else
                         {
                             var tooMany = actualNumberOfEvents - expectedNumberOfEvents;
-                            msg = string.Format("Received {0} {1} too many. Expected {2} {3} but received {4} that matched filter [{5}]", tooMany, GetMessageString(tooMany), expectedNumberOfEvents, GetMessageString(expectedNumberOfEvents), actualNumberOfEvents, string.Join(",", _filters).Replace("{", "{{").Replace("}", "}}"));
+                            msg = $"Received {tooMany} {GetMessageString(tooMany)} too many. Expected {expectedNumberOfEvents} {GetMessageString(expectedNumberOfEvents)} but received {actualNumberOfEvents} that matched filter [{string.Join(",", _filters).Replace("{", "{{").Replace("}", "}}")}]";
                         }
                     }
                     else
-                        msg = string.Format("Timeout ({0}) while waiting for messages that matched filter [{1}]", timeoutValue, string.Join(",", _filters).Replace("{", "{{").Replace("}", "}}"));
+                        msg = $"Timeout ({timeoutValue}) while waiting for messages that matched filter [{string.Join(",", _filters).Replace("{", "{{").Replace("}", "}}")}]";
 
                     var assertionsProvider = system.HasExtension<TestKitAssertionsProvider>()
                         ? TestKitAssertionsExtension.For(system)
@@ -359,15 +359,15 @@ protected async Task<T> InterceptAsync<T>(Func<Task<T>> func, ActorSystem system
                     {
                         var expectedNumberOfEvents = expectedOccurrences.Value;
                         if(actualNumberOfEvents < expectedNumberOfEvents)
-                            msg = string.Format("Timeout ({0}) while waiting for messages. Only received {1}/{2} messages that matched filter [{3}]", timeoutValue, actualNumberOfEvents, expectedNumberOfEvents, string.Join(",", _filters));
+                            msg = $"Timeout ({timeoutValue}) while waiting for messages. Only received {actualNumberOfEvents}/{expectedNumberOfEvents} messages that matched filter [{string.Join(",", _filters)}]";
                         else
                         {
                             var tooMany = actualNumberOfEvents - expectedNumberOfEvents;
-                            msg = string.Format("Received {0} {1} too many. Expected {2} {3} but received {4} that matched filter [{5}]", tooMany, GetMessageString(tooMany), expectedNumberOfEvents, GetMessageString(expectedNumberOfEvents), actualNumberOfEvents, string.Join(",", _filters));
+                            msg = $"Received {tooMany} {GetMessageString(tooMany)} too many. Expected {expectedNumberOfEvents} {GetMessageString(expectedNumberOfEvents)} but received {actualNumberOfEvents} that matched filter [{string.Join(",", _filters)}]";
                         }
                     }
                     else
-                        msg = string.Format("Timeout ({0}) while waiting for messages that matched filter [{1}]", timeoutValue, _filters);
+                        msg = $"Timeout ({timeoutValue}) while waiting for messages that matched filter [{_filters}]";
 
                     var assertionsProvider = system.HasExtension<TestKitAssertionsProvider>()
                         ? TestKitAssertionsExtension.For(system)
diff --git a/src/core/Akka.TestKit/EventFilter/Internal/InfoFilter.cs b/src/core/Akka.TestKit/EventFilter/Internal/InfoFilter.cs
index 85662c788..79f88a1b0 100644
--- a/src/core/Akka.TestKit/EventFilter/Internal/InfoFilter.cs
+++ b/src/core/Akka.TestKit/EventFilter/Internal/InfoFilter.cs
@@ -32,8 +32,7 @@ public InfoFilter(IStringMatcher messageMatcher = null, IStringMatcher sourceMat
         /// <returns>TBD</returns>
         protected override bool IsMatch(LogEvent evt)
         {
-            var info = evt as Info;
-            if(info != null)
+            if(evt is Info info)
             {
                 return InternalDoMatch(info.LogSource, info.Message);
             }
diff --git a/src/core/Akka.TestKit/EventFilter/Internal/WarningFilter.cs b/src/core/Akka.TestKit/EventFilter/Internal/WarningFilter.cs
index 467d3b93d..4b0bd073c 100644
--- a/src/core/Akka.TestKit/EventFilter/Internal/WarningFilter.cs
+++ b/src/core/Akka.TestKit/EventFilter/Internal/WarningFilter.cs
@@ -32,8 +32,7 @@ public WarningFilter(IStringMatcher messageMatcher = null, IStringMatcher source
         /// <returns>TBD</returns>
         protected override bool IsMatch(LogEvent evt)
         {
-            var warning = evt as Warning;
-            if(warning != null)
+            if(evt is Warning warning)
             {
                 return InternalDoMatch(warning.LogSource, warning.Message);
             }
diff --git a/src/core/Akka.TestKit/EventFilter/TestEventListener.cs b/src/core/Akka.TestKit/EventFilter/TestEventListener.cs
index a959d8c9d..49b5cc76b 100644
--- a/src/core/Akka.TestKit/EventFilter/TestEventListener.cs
+++ b/src/core/Akka.TestKit/EventFilter/TestEventListener.cs
@@ -30,9 +30,8 @@ public class TestEventListener : DefaultLogger
         /// <returns>TBD</returns>
         protected override bool Receive(object message)
         {
-            if(message is InitializeLogger)
+            if(message is InitializeLogger initLogger)
             {
-                var initLogger = (InitializeLogger)message;
                 var bus = initLogger.LoggingBus;
                 var self = Context.Self;
                 bus.Subscribe(self, typeof(Mute));
@@ -41,37 +40,33 @@ protected override bool Receive(object message)
                 bus.Subscribe(self, typeof(UnhandledMessage));
                 Sender.Tell(new LoggerInitialized());
             }
-            else if(message is Mute)
+            else if(message is Mute mute)
             {
-                var mute = (Mute)message;
                 foreach(var filter in mute.Filters)
                 {
                     AddFilter(filter);
                 }
             }
-            else if(message is Unmute)
+            else if(message is Unmute unmute)
             {
-                var unmute = (Unmute)message;
                 foreach(var filter in unmute.Filters)
                 {
                     RemoveFilter(filter);
                 }
             }
-            else if(message is LogEvent)
+            else if(message is LogEvent logEvent)
             {
-                var logEvent = (LogEvent)message;
                 if(!ShouldFilter(logEvent))
                 {
                     Print(logEvent);
                 }
             }
-            else if(message is DeadLetter)
+            else if(message is DeadLetter deadLetter)
             {
-                HandleDeadLetter((DeadLetter)message);
+                HandleDeadLetter(deadLetter);
             }
-            else if(message is UnhandledMessage)
+            else if(message is UnhandledMessage un)
             {
-                var un = (UnhandledMessage) message;
                 var rcp = un.Recipient;
                 var warning = new Warning(rcp.Path.ToString(), rcp.GetType(), "Unhandled message from " + un.Sender + ": " + un.Message);
                 if(!ShouldFilter(warning))
diff --git a/src/core/Akka.TestKit/Internal/InternalTestActor.cs b/src/core/Akka.TestKit/Internal/InternalTestActor.cs
index bc7c6c6b9..df08ba3b3 100644
--- a/src/core/Akka.TestKit/Internal/InternalTestActor.cs
+++ b/src/core/Akka.TestKit/Internal/InternalTestActor.cs
@@ -39,33 +39,32 @@ public InternalTestActor(ITestActorQueue<MessageEnvelope> queue)
         protected override bool Receive(object message)
         {
             global::System.Diagnostics.Debug.WriteLine("TestActor received " + message);
-            var setIgnore = message as TestKit.TestActor.SetIgnore;
-            if(setIgnore != null)
+
+            if(message is TestKit.TestActor.SetIgnore setIgnore)
             {
                 _ignore = setIgnore.Ignore;
                 return true;
             }
-            var watch = message as TestKit.TestActor.Watch;
-            if(watch != null)
+
+            if(message is TestKit.TestActor.Watch watch)
             {
                 Context.Watch(watch.Actor);
                 return true;
             }
-            var unwatch = message as TestKit.TestActor.Unwatch;
-            if(unwatch != null)
+
+            if(message is TestKit.TestActor.Unwatch unwatch)
             {
                 Context.Unwatch(unwatch.Actor);
                 return true;
             }
-            var setAutoPilot = message as TestKit.TestActor.SetAutoPilot;
-            if(setAutoPilot != null)
+
+            if(message is TestKit.TestActor.SetAutoPilot setAutoPilot)
             {
                 _autoPilot = setAutoPilot.AutoPilot;
                 return true;
             }
-            
-            var spawn = message as TestKit.TestActor.Spawn;
-            if (spawn != null)
+
+            if (message is TestKit.TestActor.Spawn spawn)
             {
                 var actor = spawn.Apply(Context);
                 if (spawn._supervisorStrategy.HasValue)
diff --git a/src/core/Akka.TestKit/Internal/InternalTestActorRef.cs b/src/core/Akka.TestKit/Internal/InternalTestActorRef.cs
index 4c91fa8dd..58866b10d 100644
--- a/src/core/Akka.TestKit/Internal/InternalTestActorRef.cs
+++ b/src/core/Akka.TestKit/Internal/InternalTestActorRef.cs
@@ -172,21 +172,18 @@ public static InternalTestActorRef Create(ActorSystem system, Props props, IActo
 
             var dispatcher = system.Dispatchers.Lookup(props.Deploy.Dispatcher);
 
-            var supervisorLocal = supervisor as LocalActorRef;
-            if (supervisorLocal != null)
+            if (supervisor is LocalActorRef supervisorLocal)
             {
                 supervisorLocal.Cell.ReserveChild(name);
             }
             else
             {
-                var supervisorRep = supervisor as RepointableActorRef;
-                if (supervisorRep != null)
+                if (supervisor is RepointableActorRef supervisorRep)
                 {
                     var repUnderlying = supervisorRep.Underlying;
                     if (repUnderlying is UnstartedCell)
                         throw new IllegalStateException("Cannot attach a TestActor to an unstarted top-level actor, ensure that it is started by sending a message and observing the reply");
-                    var cellUnderlying = repUnderlying as ActorCell;
-                    if (cellUnderlying != null)
+                    if (repUnderlying is ActorCell cellUnderlying)
                     {
                         cellUnderlying.ReserveChild(name);
                     }
diff --git a/src/core/Akka.TestKit/TestKitBase_Expect.cs b/src/core/Akka.TestKit/TestKitBase_Expect.cs
index 54581346c..52f1ad483 100644
--- a/src/core/Akka.TestKit/TestKitBase_Expect.cs
+++ b/src/core/Akka.TestKit/TestKitBase_Expect.cs
@@ -176,7 +176,7 @@ public T ExpectMsg<T>(T expected, Func<T, T, bool> comparer, TimeSpan? timeout =
         /// <returns>TBD</returns>
         public Terminated ExpectTerminated(IActorRef target, TimeSpan? timeout = null, string hint = null)
         {
-            var msg = string.Format("Terminated {0}. {1}", target, hint ?? "");
+            var msg = $"Terminated {target}. {hint ?? ""}";
             return InternalExpectMsg<Terminated>(RemainingOrDilated(timeout), terminated =>
             {
                 _assertions.AssertEqual(target, terminated.ActorRef, msg);
@@ -316,7 +316,7 @@ public T ExpectMsgAnyOf<T>(params T[] messages)
         private T InternalExpectMsgAnyOf<T>(TimeSpan max, T[] messages)
         {
             var o = ReceiveOne(max);
-            _assertions.AssertTrue(o != null, string.Format("Timeout {0} during waiting for ExpectMsgAnyOf waiting for ({1})", max, StringFormat.SafeJoin(",", messages)));
+            _assertions.AssertTrue(o != null, $"Timeout {max} during waiting for ExpectMsgAnyOf waiting for ({StringFormat.SafeJoin(",", messages)})");
             _assertions.AssertTrue(messages.Contains((T)o), "ExpectMsgAnyOf found unexpected {0}", o);
 
             return (T)o;
@@ -377,7 +377,7 @@ private IReadOnlyCollection<T> InternalExpectMsgAllOf<T>(TimeSpan max, IReadOnly
             var receivedMessages = InternalReceiveN(messages.Count, max, shouldLog).ToList();
             var missing = messages.Where(m => !receivedMessages.Any(r => r is T && areEqual((T)r, m))).ToList();
             var unexpected = receivedMessages.Where(r => !messages.Any(m => r is T && areEqual((T)r, m))).ToList();
-            CheckMissingAndUnexpected(missing, unexpected, "not found", "found unexpected", shouldLog, string.Format("Expected {0} messages during {1}. Failed after {2}. ", messages.Count, max, Now-start));
+            CheckMissingAndUnexpected(missing, unexpected, "not found", "found unexpected", shouldLog, $"Expected {messages.Count} messages during {max}. Failed after {Now - start}. ");
             return receivedMessages.Cast<T>().ToList();
         }
 
diff --git a/src/core/Akka.TestKit/TestKitBase_Receive.cs b/src/core/Akka.TestKit/TestKitBase_Receive.cs
index b003168f8..99fccbbe0 100644
--- a/src/core/Akka.TestKit/TestKitBase_Receive.cs
+++ b/src/core/Akka.TestKit/TestKitBase_Receive.cs
@@ -303,9 +303,9 @@ private bool InternalTryReceiveOne(out MessageEnvelope envelope, TimeSpan? max,
                     break;
                 }
                 var message = envelope.Message;
-                var typedMessage = message as T;
                 var shouldStop = false;
-                if (typedMessage != null)
+
+                if (message is T typedMessage)
                 {
                     if (shouldIgnore(typedMessage))
                     {
diff --git a/src/core/Akka.Tests.Performance/Actor/ActorThroughputSpec.cs b/src/core/Akka.Tests.Performance/Actor/ActorThroughputSpec.cs
index 868dd51a7..7a2c5a2a8 100644
--- a/src/core/Akka.Tests.Performance/Actor/ActorThroughputSpec.cs
+++ b/src/core/Akka.Tests.Performance/Actor/ActorThroughputSpec.cs
@@ -80,19 +80,16 @@ public BenchmarkUntypedActor(Counter counter, long maxExpectedMessages, ManualRe
 
             protected override void OnReceive(object message)
             {
-                if (message is string)
+                if (message is string stringMessage)
                 {
-                    string stringMessage = (string)message;
                     IncrementAndCheck();
                 }
-                else if (message is int)
+                else if (message is int intMessage)
                 {
-                    int intMessage = (int)message;
                     IncrementAndCheck();
                 }
-                else if (message is SimpleData)
+                else if (message is SimpleData simpleDataMessage)
                 {
-                    SimpleData simpleDataMessage = (SimpleData)message;
                     if (simpleDataMessage.Age > 20)
                     {
                         IncrementAndCheck();
diff --git a/src/core/Akka.Tests.Shared.Internals/AkkaSpec.cs b/src/core/Akka.Tests.Shared.Internals/AkkaSpec.cs
index 078daeaef..d8ab1e8b7 100644
--- a/src/core/Akka.Tests.Shared.Internals/AkkaSpec.cs
+++ b/src/core/Akka.Tests.Shared.Internals/AkkaSpec.cs
@@ -124,11 +124,11 @@ protected T ExpectMsgPf<T>(TimeSpan? timeout, string hint, Func<object, T> funct
             var success = TryReceiveOne(out envelope, timeout);
 
             if(!success)
-                Assertions.Fail(string.Format("expected message of type {0} but timed out after {1}", typeof(T), GetTimeoutOrDefault(timeout)));
+                Assertions.Fail($"expected message of type {typeof(T)} but timed out after {GetTimeoutOrDefault(timeout)}");
             var message = envelope.Message;
-            Assertions.AssertTrue(message != null, string.Format("expected {0} but got null message", hint));
+            Assertions.AssertTrue(message != null, $"expected {hint} but got null message");
             //TODO: Check next line. 
-            Assertions.AssertTrue(function.GetMethodInfo().GetParameters().Any(x => x.ParameterType.IsInstanceOfType(message)), string.Format("expected {0} but got {1} instead", hint, message));
+            Assertions.AssertTrue(function.GetMethodInfo().GetParameters().Any(x => x.ParameterType.IsInstanceOfType(message)), $"expected {hint} but got {message} instead");
             return function.Invoke(message);
         }
 
@@ -136,7 +136,7 @@ protected T ExpectMsgPf<T>(string hint, Func<object, T> pf)
         {
             var t = ExpectMsg<T>();
             //TODO: Check if this really is needed:
-            Assertions.AssertTrue(pf.GetMethodInfo().GetParameters().Any(x => x.ParameterType.IsInstanceOfType(t)), string.Format("expected {0} but got {1} instead", hint, t));
+            Assertions.AssertTrue(pf.GetMethodInfo().GetParameters().Any(x => x.ParameterType.IsInstanceOfType(t)), $"expected {hint} but got {t} instead");
             return pf.Invoke(t);
         }
 
diff --git a/src/core/Akka.Tests.Shared.Internals/AkkaSpecExtensions.cs b/src/core/Akka.Tests.Shared.Internals/AkkaSpecExtensions.cs
index 957540559..87de6fd37 100644
--- a/src/core/Akka.Tests.Shared.Internals/AkkaSpecExtensions.cs
+++ b/src/core/Akka.Tests.Shared.Internals/AkkaSpecExtensions.cs
@@ -51,8 +51,8 @@ public static void ShouldHaveCount<T>(this IReadOnlyCollection<T> self, int expe
         /// <param name="other">TBD</param>
         public static void ShouldBe<T>(this IEnumerable<T> self, IEnumerable<T> other)
         {
-            var expected = string.Join(",", other.Select(i => string.Format("'{0}'", i)));
-            var actual = string.Join(",", self.Select(i => string.Format("'{0}'", i)));
+            var expected = string.Join(",", other.Select(i => $"'{i}'"));
+            var actual = string.Join(",", self.Select(i => $"'{i}'"));
 
             Assert.True(self.SequenceEqual(other), "Expected " + expected + " got " + actual);
         }
diff --git a/src/core/Akka.Tests/Actor/ActorRefSpec.cs b/src/core/Akka.Tests/Actor/ActorRefSpec.cs
index 0cb77f298..6f4207f2b 100644
--- a/src/core/Akka.Tests/Actor/ActorRefSpec.cs
+++ b/src/core/Akka.Tests/Actor/ActorRefSpec.cs
@@ -531,9 +531,8 @@ private class PoisonPilledActor : ActorBase
         {
             protected override bool Receive(object message)
             {
-                if (message is int)
+                if (message is int i)
                 {
-                    var i = (int)message;
                     string msg = null;
                     if (i == 0) msg = "zero";
                     else if (i == 5) msg = "five";
diff --git a/src/core/Akka.Tests/Actor/ActorSelectionSpec.cs b/src/core/Akka.Tests/Actor/ActorSelectionSpec.cs
index ae1265070..e988adf9c 100644
--- a/src/core/Akka.Tests/Actor/ActorSelectionSpec.cs
+++ b/src/core/Akka.Tests/Actor/ActorSelectionSpec.cs
@@ -76,12 +76,9 @@ private IActorRef AskNode(IActorRef node, IQuery query)
         {
             var result = node.Ask(query).Result;
 
-            var actorRef = result as IActorRef;
-            if (actorRef != null)
+            if (result is IActorRef actorRef)
                 return actorRef;
-
-            var selection = result as ActorSelection;
-            return selection != null ? Identify(selection) : null;
+            return result is ActorSelection selection ? Identify(selection) : null;
         }
 
         [Fact]
diff --git a/src/core/Akka.Tests/Actor/DeathWatchSpec.cs b/src/core/Akka.Tests/Actor/DeathWatchSpec.cs
index c9f8956df..c39e67817 100644
--- a/src/core/Akka.Tests/Actor/DeathWatchSpec.cs
+++ b/src/core/Akka.Tests/Actor/DeathWatchSpec.cs
@@ -399,8 +399,7 @@ public WatchAndForwardActor(IActorRef watchedActor, IActorRef forwardToActor)
 
             protected override bool Receive(object message)
             {
-                var terminated = message as Terminated;
-                if (terminated != null)
+                if (message is Terminated terminated)
                     _forwardToActor.Forward(new WrappedTerminated(terminated));
                 else
                     _forwardToActor.Forward(message);
diff --git a/src/core/Akka.Tests/Actor/RemotePathParsingSpec.cs b/src/core/Akka.Tests/Actor/RemotePathParsingSpec.cs
index b1924cdcf..800d101e1 100644
--- a/src/core/Akka.Tests/Actor/RemotePathParsingSpec.cs
+++ b/src/core/Akka.Tests/Actor/RemotePathParsingSpec.cs
@@ -50,8 +50,8 @@ public static Arbitrary<EndPoint> AllEndpoints()
 
         public static string ExtractHost(EndPoint endpoint)
         {
-            if (endpoint is IPEndPoint)
-                return ((IPEndPoint)endpoint).Address.ToString();
+            if (endpoint is IPEndPoint iPEndPoint)
+                return iPEndPoint.Address.ToString();
             return ((DnsEndPoint)endpoint).Host;
         }
 
diff --git a/src/core/Akka.Tests/Actor/Scheduler/TaskBasedScheduler_ActionScheduler_Schedule_Tests.cs b/src/core/Akka.Tests/Actor/Scheduler/TaskBasedScheduler_ActionScheduler_Schedule_Tests.cs
index 1af81c4a3..17e3d80de 100644
--- a/src/core/Akka.Tests/Actor/Scheduler/TaskBasedScheduler_ActionScheduler_Schedule_Tests.cs
+++ b/src/core/Akka.Tests/Actor/Scheduler/TaskBasedScheduler_ActionScheduler_Schedule_Tests.cs
@@ -58,9 +58,7 @@ public void ScheduleRepeatedly_in_milliseconds_Tests_and_verify_the_interval(int
                     var diffInMs = Math.Abs(diffBetweenMessages - interval);
                     var deviate = (diffInMs/interval);
                     deviate.Should(val => val < 0.1,
-                        string.Format(
-                            "Expected the interval between message {1} and {2} to deviate maximum 10% from {0}. It was {3} ms between the messages. It deviated {4}%",
-                            interval, a + 1, b + 1, diffBetweenMessages, deviate*100));
+                        $"Expected the interval between message {interval} and {a + 1} to deviate maximum 10% from {b + 1}. It was {diffBetweenMessages} ms between the messages. It deviated {deviate * 100}%");
                 };
                 validate(0, 1);
                 validate(1, 2);
diff --git a/src/core/Akka.Tests/Actor/Scheduler/TaskBasedScheduler_TellScheduler_Schedule_Tests.cs b/src/core/Akka.Tests/Actor/Scheduler/TaskBasedScheduler_TellScheduler_Schedule_Tests.cs
index c199259fa..93fa7aef6 100644
--- a/src/core/Akka.Tests/Actor/Scheduler/TaskBasedScheduler_TellScheduler_Schedule_Tests.cs
+++ b/src/core/Akka.Tests/Actor/Scheduler/TaskBasedScheduler_TellScheduler_Schedule_Tests.cs
@@ -58,9 +58,7 @@ public void ScheduleTellRepeatedly_in_milliseconds_Tests(int initialDelay, int i
                     var diffInMs = Math.Abs(diffBetweenMessages - interval);
                     var deviate = (diffInMs / interval);
                     deviate.Should(val => val < 0.1,
-                        string.Format(
-                            "Expected the interval between message {1} and {2} to deviate maximum 10% from {0}. It was {3} ms between the messages. It deviated {4}%",
-                            interval, a + 1, b + 1, diffBetweenMessages, deviate * 100));
+                        $"Expected the interval between message {interval} and {a + 1} to deviate maximum 10% from {b + 1}. It was {diffBetweenMessages} ms between the messages. It deviated {deviate * 100}%");
                 };
                 validate(0, 1);
                 validate(1, 2);
diff --git a/src/core/Akka.Tests/IO/TestUtils.cs b/src/core/Akka.Tests/IO/TestUtils.cs
index f047bdf12..1da6971cc 100644
--- a/src/core/Akka.Tests/IO/TestUtils.cs
+++ b/src/core/Akka.Tests/IO/TestUtils.cs
@@ -33,9 +33,7 @@ public static IEnumerable<IPEndPoint> TemporaryServerAddresses(int numberOfAddre
 
         public static bool Is(this EndPoint ep1, EndPoint ep2)
         {
-            var ip1 = ep1 as IPEndPoint;
-            var ip2 = ep2 as IPEndPoint;
-            return ip1 != null && ip2 != null && ip1.Port == ip2.Port && ip1.Address.MapToIPv4().Equals(ip2.Address.MapToIPv4());
+            return ep1 is IPEndPoint ip1 && ep2 is IPEndPoint ip2 && ip1.Port == ip2.Port && ip1.Address.MapToIPv4().Equals(ip2.Address.MapToIPv4());
         }
     }
 }
diff --git a/src/core/Akka.Tests/IO/UdpConnectedIntegrationSpec.cs b/src/core/Akka.Tests/IO/UdpConnectedIntegrationSpec.cs
index 35c6cecef..324399389 100644
--- a/src/core/Akka.Tests/IO/UdpConnectedIntegrationSpec.cs
+++ b/src/core/Akka.Tests/IO/UdpConnectedIntegrationSpec.cs
@@ -63,8 +63,7 @@ public void The_UDP_connection_oriented_implementation_must_be_able_to_send_and_
 
             var clientAddress = ExpectMsgPf(TimeSpan.FromSeconds(3), "", msg =>
             {
-                var received = msg as Udp.Received;
-                if (received != null)
+                if (msg is Udp.Received received)
                 {
                     received.Data.ShouldBe(data1);
                     return received.Sender;
@@ -89,8 +88,7 @@ public void The_UDP_connection_oriented_implementation_must_be_able_to_send_and_
 
             ExpectMsgPf(TimeSpan.FromSeconds(3), "", msg =>
             {
-                var received = msg as Udp.Received;
-                if (received != null)
+                if (msg is Udp.Received received)
                 {
                     received.Data.ShouldBe(data1);
                     Assert.True(received.Sender.Is(clientAddress));
diff --git a/src/core/Akka.Tests/Routing/ConfiguredLocalRoutingSpec.cs b/src/core/Akka.Tests/Routing/ConfiguredLocalRoutingSpec.cs
index a96533a9b..fc2e2efc8 100644
--- a/src/core/Akka.Tests/Routing/ConfiguredLocalRoutingSpec.cs
+++ b/src/core/Akka.Tests/Routing/ConfiguredLocalRoutingSpec.cs
@@ -132,8 +132,7 @@ private RouterConfig RouterConfig(IActorRef actor)
             var routedActor = (RoutedActorRef)actor;
             if (routedActor != null)
             {
-                var routedActorCell = routedActor.Underlying as RoutedActorCell;
-                if (routedActorCell != null)
+                if (routedActor.Underlying is RoutedActorCell routedActorCell)
                 {
                     return routedActorCell.RouterConfig;
                 }
diff --git a/src/core/Akka.Tests/Routing/ConsistentHashingRouterSpec.cs b/src/core/Akka.Tests/Routing/ConsistentHashingRouterSpec.cs
index d94962f9d..37ebd7a08 100644
--- a/src/core/Akka.Tests/Routing/ConsistentHashingRouterSpec.cs
+++ b/src/core/Akka.Tests/Routing/ConsistentHashingRouterSpec.cs
@@ -27,7 +27,7 @@ protected override void OnReceive(object message)
             {
                 if (message is ConsistentHashableEnvelope)
                 {
-                    Sender.Tell(string.Format("Unexpected envelope: {0}", message));
+                    Sender.Tell($"Unexpected envelope: {message}");
                 }
                 else
                 {
diff --git a/src/core/Akka.Tests/Serialization/SerializationSpec.cs b/src/core/Akka.Tests/Serialization/SerializationSpec.cs
index bcda82b77..45361a548 100644
--- a/src/core/Akka.Tests/Serialization/SerializationSpec.cs
+++ b/src/core/Akka.Tests/Serialization/SerializationSpec.cs
@@ -63,7 +63,7 @@ public override int GetHashCode()
 
             public override string ToString()
             {
-                return string.Format("<UntypedContainerMessage {0}>", Contents);
+                return $"<UntypedContainerMessage {Contents}>";
             }
         }
         public class ContainerMessage<T>
diff --git a/src/core/Akka.Tests/TestUtils/Supervisor.cs b/src/core/Akka.Tests/TestUtils/Supervisor.cs
index bcd640e40..a28a82bbb 100644
--- a/src/core/Akka.Tests/TestUtils/Supervisor.cs
+++ b/src/core/Akka.Tests/TestUtils/Supervisor.cs
@@ -29,15 +29,13 @@ protected override SupervisorStrategy SupervisorStrategy()
 
         protected override void OnReceive(object message)
         {
-            var props = message as Props;
-            if (props != null)
+            if (message is Props props)
             {
                 Sender.Tell(Context.ActorOf(props));
             }
             else
             {
-                var propsWithName = message as PropsWithName;
-                if (propsWithName != null)
+                if (message is PropsWithName propsWithName)
                 {
                     Sender.Tell(Context.ActorOf(propsWithName.Props, propsWithName.Name));
                 }
diff --git a/src/core/Akka/Actor/ActorBase.cs b/src/core/Akka/Actor/ActorBase.cs
index 251cfb761..420eed281 100644
--- a/src/core/Akka/Actor/ActorBase.cs
+++ b/src/core/Akka/Actor/ActorBase.cs
@@ -223,8 +223,7 @@ protected internal virtual bool AroundReceive(Receive receive, object message)
         /// </exception>
         protected virtual void Unhandled(object message)
         {
-            var terminatedMessage = message as Terminated;
-            if (terminatedMessage != null)
+            if (message is Terminated terminatedMessage)
             {
                 throw new DeathPactException(terminatedMessage.ActorRef);
             }
diff --git a/src/core/Akka/Actor/ActorCell.Children.cs b/src/core/Akka/Actor/ActorCell.Children.cs
index 0affbfe94..61bdafe9f 100644
--- a/src/core/Akka/Actor/ActorCell.Children.cs
+++ b/src/core/Akka/Actor/ActorCell.Children.cs
@@ -265,7 +265,7 @@ protected void SetTerminated()
             get
             {
                 var terminating = ChildrenContainer as TerminatingChildrenContainer;
-                return terminating != null && terminating.Reason is SuspendReason.IWaitingForChildren;
+                return terminating?.Reason is SuspendReason.IWaitingForChildren;
             }
         }
 
diff --git a/src/core/Akka/Actor/ActorCell.DeathWatch.cs b/src/core/Akka/Actor/ActorCell.DeathWatch.cs
index 887f922c3..b7b833d25 100644
--- a/src/core/Akka/Actor/ActorCell.DeathWatch.cs
+++ b/src/core/Akka/Actor/ActorCell.DeathWatch.cs
@@ -235,7 +235,7 @@ protected void AddWatcher(IActorRef watchee, IActorRef watcher)
                 {
                     _state = _state.AddWatchedBy(watcher);
 
-                    if (System.Settings.DebugLifecycle) Publish(new Debug(Self.Path.ToString(), Actor.GetType(), string.Format("now watched by {0}", watcher)));
+                    if (System.Settings.DebugLifecycle) Publish(new Debug(Self.Path.ToString(), Actor.GetType(), $"now watched by {watcher}"));
                 }, watcher);
             }
             else if (!watcheeSelf && watcherSelf)
@@ -244,7 +244,7 @@ protected void AddWatcher(IActorRef watchee, IActorRef watcher)
             }
             else
             {
-                Publish(new Warning(Self.Path.ToString(), Actor.GetType(), string.Format("BUG: illegal Watch({0},{1} for {2}", watchee, watcher, Self)));
+                Publish(new Warning(Self.Path.ToString(), Actor.GetType(), $"BUG: illegal Watch({watchee},{watcher} for {Self}"));
             }
         }
 
@@ -264,7 +264,7 @@ protected void RemWatcher(IActorRef watchee, IActorRef watcher)
                 {
                     _state = _state.RemoveWatchedBy(watcher);
 
-                    if (System.Settings.DebugLifecycle) Publish(new Debug(Self.Path.ToString(), Actor.GetType(), string.Format("no longer watched by {0}", watcher)));
+                    if (System.Settings.DebugLifecycle) Publish(new Debug(Self.Path.ToString(), Actor.GetType(), $"no longer watched by {watcher}"));
                 }, watcher);
             }
             else if (!watcheeSelf && watcherSelf)
@@ -273,7 +273,7 @@ protected void RemWatcher(IActorRef watchee, IActorRef watcher)
             }
             else
             {
-                Publish(new Warning(Self.Path.ToString(), Actor.GetType(), string.Format("BUG: illegal Unwatch({0},{1} for {2}", watchee, watcher, Self)));
+                Publish(new Warning(Self.Path.ToString(), Actor.GetType(), $"BUG: illegal Unwatch({watchee},{watcher} for {Self}"));
             }
         }
 
@@ -337,9 +337,7 @@ private static bool IsNonLocal(IActorRef @ref)
         {
             if (@ref == null)
                 return true;
-
-            var a = @ref as IInternalActorRef;
-            return a != null && !a.IsLocal;
+            return @ref is IInternalActorRef a && !a.IsLocal;
         }
 
         private bool HasNonLocalAddress()
diff --git a/src/core/Akka/Actor/ActorCell.FaultHandling.cs b/src/core/Akka/Actor/ActorCell.FaultHandling.cs
index 9a4ba126b..b386029a1 100644
--- a/src/core/Akka/Actor/ActorCell.FaultHandling.cs
+++ b/src/core/Akka/Actor/ActorCell.FaultHandling.cs
@@ -426,11 +426,8 @@ private void HandleChildTerminated(IActorRef child)
                 }
             }
 
-
-            // if the removal changed the state of the (terminating) children container,
-            // then we are continuing the previously suspended recreate/create/terminate action
-            var recreation = status as SuspendReason.Recreation;
-            if (recreation != null)
+            // if the removal changed the state of the (terminating) children container,            // then we are continuing the previously suspended recreate/create/terminate action
+            if (status is SuspendReason.Recreation recreation)
             {
                 FinishRecreate(recreation.Cause, _actor);
             }
diff --git a/src/core/Akka/Actor/ActorPath.cs b/src/core/Akka/Actor/ActorPath.cs
index db2a04889..62b7d5c54 100644
--- a/src/core/Akka/Actor/ActorPath.cs
+++ b/src/core/Akka/Actor/ActorPath.cs
@@ -89,8 +89,8 @@ public override bool Equals(object obj)
             {
                 if (ReferenceEquals(null, obj)) return false;
                 if (ReferenceEquals(this, obj)) return true;
-                var actorPath = obj as ActorPath;
-                if (actorPath != null) return Equals(actorPath);
+
+                if (obj is ActorPath actorPath) return Equals(actorPath);
                 return Equals(obj as Surrogate);
             }
 
@@ -724,11 +724,11 @@ public override int CompareTo(ActorPath other)
         private int InternalCompareTo(ActorPath left, ActorPath right)
         {
             if (ReferenceEquals(left, right)) return 0;
-            var leftRoot = left as RootActorPath;
-            if (leftRoot != null)
+
+            if (left is RootActorPath leftRoot)
                 return leftRoot.CompareTo(right);
-            var rightRoot = right as RootActorPath;
-            if (rightRoot != null)
+
+            if (right is RootActorPath rightRoot)
                 return -rightRoot.CompareTo(left);
             var nameCompareResult = Compare(left.Name, right.Name, StringComparison.Ordinal);
             if (nameCompareResult != 0)
diff --git a/src/core/Akka/Actor/ActorProducerPipeline.cs b/src/core/Akka/Actor/ActorProducerPipeline.cs
index d4ba7cada..c85928289 100644
--- a/src/core/Akka/Actor/ActorProducerPipeline.cs
+++ b/src/core/Akka/Actor/ActorProducerPipeline.cs
@@ -303,7 +303,7 @@ public void BeforeActorIncarnated(ActorBase actor, IActorContext context)
         private void LogException(ActorBase actor, Exception e, string errorMessageFormat, IActorProducerPlugin plugin)
         {
             var internalActor = (actor as IInternalActor);
-            var actorPath = internalActor != null && internalActor.ActorContext != null
+            var actorPath = internalActor?.ActorContext != null
                 ? internalActor.ActorContext.Self.Path.ToString()
                 : string.Empty;
 
diff --git a/src/core/Akka/Actor/BuiltInActors.cs b/src/core/Akka/Actor/BuiltInActors.cs
index ff3e11f7a..b11baca2c 100644
--- a/src/core/Akka/Actor/BuiltInActors.cs
+++ b/src/core/Akka/Actor/BuiltInActors.cs
@@ -43,8 +43,8 @@ protected override bool Receive(object message)
         {
             if(message is Terminated)
                 Context.Stop(Self);
-            else if(message is StopChild)
-                Context.Stop(((StopChild)message).Child);
+            else if(message is StopChild stopChild)
+                Context.Stop(stopChild.Child);
             else
                 Context.System.DeadLetters.Tell(new DeadLetter(message, Sender, Self), Sender);
             return true;
@@ -86,8 +86,7 @@ public SystemGuardianActor(IActorRef userGuardian)
         /// <returns>TBD</returns>
         protected override bool Receive(object message)
         {
-            var terminated = message as Terminated;
-            if(terminated != null)
+            if(message is Terminated terminated)
             {
                 var terminatedActor = terminated.ActorRef;
                 if(_userGuardian.Equals(terminatedActor))
@@ -118,9 +117,8 @@ protected override bool Receive(object message)
                 return true;
             }
             var sender = Sender;
-            
-            var registerTerminationHook = message as RegisterTerminationHook;
-            if(registerTerminationHook != null && !ReferenceEquals(sender, Context.System.DeadLetters))
+
+            if(message is RegisterTerminationHook registerTerminationHook && !ReferenceEquals(sender, Context.System.DeadLetters))
             {
                 _terminationHooks.Add(sender);
                 Context.Watch(sender);
@@ -132,16 +130,14 @@ protected override bool Receive(object message)
 
         private bool Terminating(object message)
         {
-            var terminated = message as Terminated;
-            if(terminated != null)
+            if(message is Terminated terminated)
             {
                 StopWhenAllTerminationHooksDone(terminated.ActorRef);
                 return true;
             }
             var sender = Sender;
 
-            var terminationHookDone = message as TerminationHookDone;
-            if(terminationHookDone != null)
+            if(message is TerminationHookDone terminationHookDone)
             {
                 StopWhenAllTerminationHooksDone(sender);
                 return true;
@@ -206,14 +202,14 @@ public DeadLetterActorRef(IActorRefProvider provider, ActorPath path, EventStrea
         protected override void TellInternal(object message, IActorRef sender)
         {
             if (message == null) throw new InvalidMessageException("Message is null");
-            var i = message as Identify;
-            if (i != null)
+
+            if (message is Identify i)
             {
                 sender.Tell(new ActorIdentity(i.MessageId, ActorRefs.Nobody));
                 return;
             }
-            var d = message as DeadLetter;
-            if (d != null)
+
+            if (message is DeadLetter d)
             {
                 if (!SpecialHandle(d.Message, d.Sender)) { _eventStream.Publish(d); }
                 return;
@@ -229,8 +225,7 @@ protected override void TellInternal(object message, IActorRef sender)
         /// <returns>TBD</returns>
         protected override bool SpecialHandle(object message, IActorRef sender)
         {
-            var w = message as Watch;
-            if (w != null)
+            if (message is Watch w)
             {
                 if (!w.Watchee.Equals(this) && !w.Watcher.Equals(this))
                 {
diff --git a/src/core/Akka/Actor/Cancellation/Cancelable.cs b/src/core/Akka/Actor/Cancellation/Cancelable.cs
index bfc1e73cb..f2556940f 100644
--- a/src/core/Akka/Actor/Cancellation/Cancelable.cs
+++ b/src/core/Akka/Actor/Cancellation/Cancelable.cs
@@ -216,10 +216,7 @@ protected virtual void Dispose(bool disposing)
                     if(disposing)
                     {
                         //Clean up managed resources
-                        if(_source != null)
-                        {
-                            _source.Dispose();
-                        }
+                        _source?.Dispose();
                     }
                     //Clean up unmanaged resources
                 }
diff --git a/src/core/Akka/Actor/ChildrenContainer/Internal/ChildrenContainerBase.cs b/src/core/Akka/Actor/ChildrenContainer/Internal/ChildrenContainerBase.cs
index f0ab0ec47..c64dcc161 100644
--- a/src/core/Akka/Actor/ChildrenContainer/Internal/ChildrenContainerBase.cs
+++ b/src/core/Akka/Actor/ChildrenContainer/Internal/ChildrenContainerBase.cs
@@ -164,8 +164,7 @@ public bool TryGetByRef(IActorRef actor, out ChildRestartStats childRestartStats
             if (InternalChildren.TryGetValue(actor.Path.Name, out var stats))
             {
                 //Since the actor exists, ChildRestartStats is the only valid ChildStats.
-                var crStats = stats as ChildRestartStats;
-                if (crStats != null && actor.Equals(crStats.Child))
+                if (stats is ChildRestartStats crStats && actor.Equals(crStats.Child))
                 {
                     childRestartStats = crStats;
                     return true;
@@ -195,8 +194,8 @@ protected void ChildStatsAppender(StringBuilder sb, KeyValuePair<string, IChildS
         {
             sb.Append('<');
             var childStats = kvp.Value;
-            var childRestartStats = childStats as ChildRestartStats;
-            if (childRestartStats != null)
+
+            if (childStats is ChildRestartStats childRestartStats)
             {
                 sb.Append(childRestartStats.Child.Path.ToStringWithUid()).Append(':');
                 sb.Append(childRestartStats.MaxNrOfRetriesCount).Append(" retries>");
diff --git a/src/core/Akka/Actor/Deployer.cs b/src/core/Akka/Actor/Deployer.cs
index b7cd7742d..76f88d5ff 100644
--- a/src/core/Akka/Actor/Deployer.cs
+++ b/src/core/Akka/Actor/Deployer.cs
@@ -134,7 +134,7 @@ private RouterConfig CreateRouterConfig(string routerTypeAlias, Config deploymen
             if (deployment.IsNullOrEmpty())
                 throw ConfigurationException.NullOrEmptyConfig<RouterConfig>();
 
-            var path = string.Format("akka.actor.router.type-mapping.{0}", routerTypeAlias);
+            var path = $"akka.actor.router.type-mapping.{routerTypeAlias}";
             var routerTypeName = _settings.Config.GetString(path, null);
 
             if(routerTypeName == null)
diff --git a/src/core/Akka/Actor/EmptyLocalActorRef.cs b/src/core/Akka/Actor/EmptyLocalActorRef.cs
index 52c1194ac..c6f8b3c57 100644
--- a/src/core/Akka/Actor/EmptyLocalActorRef.cs
+++ b/src/core/Akka/Actor/EmptyLocalActorRef.cs
@@ -59,8 +59,8 @@ public EmptyLocalActorRef(IActorRefProvider provider, ActorPath path, EventStrea
         protected override void TellInternal(object message, IActorRef sender)
         {
             if (message == null) throw new InvalidMessageException("Message is null");
-            var d = message as DeadLetter;
-            if (d != null) SpecialHandle(d.Message, d.Sender);
+
+            if (message is DeadLetter d) SpecialHandle(d.Message, d.Sender);
             else if (!SpecialHandle(message, sender))
             {
                 _eventStream.Publish(new DeadLetter(message, sender.IsNobody() ? _provider.DeadLetters : sender, this));
@@ -85,8 +85,7 @@ public override void SendSystemMessage(ISystemMessage message)
         /// <returns>TBD</returns>
         protected virtual bool SpecialHandle(object message, IActorRef sender)
         {
-            var watch = message as Watch;
-            if (watch != null)
+            if (message is Watch watch)
             {
                 if (watch.Watchee.Equals(this) && !watch.Watcher.Equals(this))
                 {
@@ -97,18 +96,15 @@ protected virtual bool SpecialHandle(object message, IActorRef sender)
             if (message is Unwatch)
                 return true;    //Just ignore
 
-            var identify = message as Identify;
-            if (identify != null)
+            if (message is Identify identify)
             {
                 sender.Tell(new ActorIdentity(identify.MessageId, null));
                 return true;
             }
 
-            var actorSelectionMessage = message as ActorSelectionMessage;
-            if (actorSelectionMessage != null)
+            if (message is ActorSelectionMessage actorSelectionMessage)
             {
-                var selectionIdentify = actorSelectionMessage.Message as Identify;
-                if (selectionIdentify != null)
+                if (actorSelectionMessage.Message is Identify selectionIdentify)
                 {
                     if (!actorSelectionMessage.WildCardFanOut)
                         sender.Tell(new ActorIdentity(selectionIdentify.MessageId, null));
@@ -120,8 +116,7 @@ protected virtual bool SpecialHandle(object message, IActorRef sender)
                 return true;
             }
 
-            var deadLetterSuppression = message as IDeadLetterSuppression;
-            if (deadLetterSuppression != null)
+            if (message is IDeadLetterSuppression deadLetterSuppression)
             {
                 _eventStream.Publish(new SuppressedDeadLetter(deadLetterSuppression, sender.IsNobody() ? _provider.DeadLetters : sender, this));
                 return true;
diff --git a/src/core/Akka/Actor/Futures.cs b/src/core/Akka/Actor/Futures.cs
index 0b7e91eb7..5ee32becb 100644
--- a/src/core/Akka/Actor/Futures.cs
+++ b/src/core/Akka/Actor/Futures.cs
@@ -197,10 +197,7 @@ internal static IActorRefProvider ResolveProvider(ICanTell self)
                     ctrList[i].Dispose();
                 }
 
-                if (timeoutCancellation != null)
-                {
-                    timeoutCancellation.Dispose();
-                }
+                timeoutCancellation?.Dispose();
             }
         }
     }
diff --git a/src/core/Akka/Actor/LocalActorRef.cs b/src/core/Akka/Actor/LocalActorRef.cs
index 10e4f298b..9abaa756b 100644
--- a/src/core/Akka/Actor/LocalActorRef.cs
+++ b/src/core/Akka/Actor/LocalActorRef.cs
@@ -217,8 +217,7 @@ public override IActorRef GetChild(IEnumerable<string> name)
             int index = 0;
             foreach (string element in name)
             {
-                var currentLocalActorRef = current as LocalActorRef;
-                if (currentLocalActorRef != null)
+                if (current is LocalActorRef currentLocalActorRef)
                 {
                     switch (element)
                     {
diff --git a/src/core/Akka/Actor/RepointableActorRef.cs b/src/core/Akka/Actor/RepointableActorRef.cs
index c0e3773a8..9c6baaa11 100644
--- a/src/core/Akka/Actor/RepointableActorRef.cs
+++ b/src/core/Akka/Actor/RepointableActorRef.cs
@@ -148,8 +148,7 @@ public void Point()
             if (underlying == null)
                 throw new IllegalStateException("Underlying cell is null");
 
-            var unstartedCell = underlying as UnstartedCell;
-            if (unstartedCell != null)
+            if (underlying is UnstartedCell unstartedCell)
             {
                 // The problem here was that if the real actor (which will start running
                 // at cell.start()) creates children in its constructor, then this may
@@ -295,9 +294,9 @@ public override IActorRef GetChild(IEnumerable<string> name)
                     var nameAndUid = ActorCell.SplitNameAndUid(next);
                     if (Lookup.TryGetChildStatsByName(nameAndUid.Name, out var stats))
                     {
-                        var crs = stats as ChildRestartStats;
                         var uid = nameAndUid.Uid;
-                        if (crs != null && (uid == ActorCell.UndefinedUid || uid == crs.Uid))
+
+                        if (stats is ChildRestartStats crs && (uid == ActorCell.UndefinedUid || uid == crs.Uid))
                         {
                             if (name.Skip(1).Any())
                                 return crs.Child.GetChild(name.Skip(1));
@@ -523,8 +522,8 @@ public bool TryGetChildStatsByName(string name, out IChildStats child)
         /// <param name="message">TBD</param>
         public void SendMessage(IActorRef sender, object message)
         {
-            if (message is ISystemMessage)
-                SendSystemMessage((ISystemMessage)message);
+            if (message is ISystemMessage iSystemMessage)
+                SendSystemMessage(iSystemMessage);
             else
                 SendMessage(message, sender);
         }
diff --git a/src/core/Akka/Actor/RootGuardianSupervisor.cs b/src/core/Akka/Actor/RootGuardianSupervisor.cs
index c5d45fb66..accf3bb8e 100644
--- a/src/core/Akka/Actor/RootGuardianSupervisor.cs
+++ b/src/core/Akka/Actor/RootGuardianSupervisor.cs
@@ -63,8 +63,7 @@ protected override void TellInternal(object message, IActorRef sender)
         /// <param name="systemMessage">TBD</param>
         public override void SendSystemMessage(ISystemMessage systemMessage)
         {
-            var failed = systemMessage as Failed;
-            if (failed != null)
+            if (systemMessage is Failed failed)
             {
                 var cause = failed.Cause;
                 var child = failed.Child;
@@ -73,14 +72,14 @@ public override void SendSystemMessage(ISystemMessage systemMessage)
                 ((IInternalActorRef)child).Stop();
                 return;
             }
-            var supervise = systemMessage as Supervise;
-            if (supervise != null)
+
+            if (systemMessage is Supervise supervise)
             {
                 // This comment comes from AKKA: TO DO register child in some map to keep track of it and enable shutdown after all dead
                 return;
             }
-            var deathWatchNotification = systemMessage as DeathWatchNotification;
-            if (deathWatchNotification != null)
+
+            if (systemMessage is DeathWatchNotification deathWatchNotification)
             {
                 Stop();
                 return;
diff --git a/src/core/Akka/Actor/Stash/IActorStash.cs b/src/core/Akka/Actor/Stash/IActorStash.cs
index 15be12d09..9a47f6a7f 100644
--- a/src/core/Akka/Actor/Stash/IActorStash.cs
+++ b/src/core/Akka/Actor/Stash/IActorStash.cs
@@ -48,8 +48,7 @@ public override bool CanBeAppliedTo(Type actorType)
         /// <param name="context">TBD</param>
         public override void AfterIncarnated(ActorBase actor, IActorContext context)
         {
-            var stashed = actor as IActorStash;
-            if (stashed != null && stashed.Stash == null)
+            if (actor is IActorStash stashed && stashed.Stash == null)
             {
                 stashed.Stash = context.CreateStash(actor.GetType());
             }
@@ -62,8 +61,7 @@ public override void AfterIncarnated(ActorBase actor, IActorContext context)
         /// <param name="context">TBD</param>
         public override void BeforeIncarnated(ActorBase actor, IActorContext context)
         {
-            var actorStash = actor as IActorStash;
-            if (actorStash != null)
+            if (actor is IActorStash actorStash)
             {
                 actorStash.Stash.UnstashAll();
             }
diff --git a/src/core/Akka/Actor/Stash/Internal/AbstractStash.cs b/src/core/Akka/Actor/Stash/Internal/AbstractStash.cs
index 4de6bf898..6a997d064 100644
--- a/src/core/Akka/Actor/Stash/Internal/AbstractStash.cs
+++ b/src/core/Akka/Actor/Stash/Internal/AbstractStash.cs
@@ -165,8 +165,8 @@ public void Prepend(IEnumerable<Envelope> envelopes)
         private void EnqueueFirst(Envelope msg)
         {
             Mailbox.EnqueueFirst(msg);
-            var terminatedMessage = msg.Message as Terminated;
-            if(terminatedMessage != null)
+
+            if(msg.Message is Terminated terminatedMessage)
             {
                 _actorCell.TerminatedQueuedFor(terminatedMessage.ActorRef, Option<object>.None);
             }
diff --git a/src/core/Akka/Actor/SupervisorStrategy.cs b/src/core/Akka/Actor/SupervisorStrategy.cs
index b3faecb02..a38d7e93d 100644
--- a/src/core/Akka/Actor/SupervisorStrategy.cs
+++ b/src/core/Akka/Actor/SupervisorStrategy.cs
@@ -144,7 +144,7 @@ protected virtual void LogFailure(IActorContext context, IActorRef child, Except
             {
                 var actorInitializationException = cause as ActorInitializationException;
                 string message;
-                if (actorInitializationException != null && actorInitializationException.InnerException != null)
+                if (actorInitializationException?.InnerException != null)
                     message = actorInitializationException.InnerException.Message;
                 else
                     message = cause.Message;
diff --git a/src/core/Akka/Configuration/ConfigurationFactory.cs b/src/core/Akka/Configuration/ConfigurationFactory.cs
index 220963ec7..54f06a39d 100644
--- a/src/core/Akka/Configuration/ConfigurationFactory.cs
+++ b/src/core/Akka/Configuration/ConfigurationFactory.cs
@@ -101,11 +101,10 @@ internal static Config FromResource(string resourceName)
         /// <returns>The configuration defined in the assembly that contains the instanced object.</returns>
         public static Config FromResource(string resourceName, object instanceInAssembly)
         {
-            var type = instanceInAssembly as Type;
-            if (type != null)
+            if (instanceInAssembly is Type type)
                 return FromResource(resourceName, type.GetTypeInfo().Assembly);
-            var assembly = instanceInAssembly as Assembly;
-            if (assembly != null)
+
+            if (instanceInAssembly is Assembly assembly)
                 return FromResource(resourceName, assembly);
             return FromResource(resourceName, instanceInAssembly.GetType().GetTypeInfo().Assembly);
         }
diff --git a/src/core/Akka/Configuration/Hocon/HoconValue.cs b/src/core/Akka/Configuration/Hocon/HoconValue.cs
index 0105c9721..027cd821b 100644
--- a/src/core/Akka/Configuration/Hocon/HoconValue.cs
+++ b/src/core/Akka/Configuration/Hocon/HoconValue.cs
@@ -101,10 +101,10 @@ public HoconObject GetObject()
         {
             //TODO: merge objects?
             IHoconElement raw = Values.FirstOrDefault();
-            var o = raw as HoconObject;
-            var sub = raw as IMightBeAHoconObject;
-            if (o != null) return o;
-            if (sub != null && sub.IsObject()) return sub.GetObject();
+
+            if (raw is HoconObject o) return o;
+
+            if (raw is IMightBeAHoconObject sub && sub.IsObject()) return sub.GetObject();
             return null;
         }
 
@@ -533,7 +533,7 @@ public virtual string ToString(int indent)
             }
             if (IsArray())
             {
-                return string.Format("[{0}]", string.Join(",", GetArray().Select(e => e.ToString(indent + 1))));
+                return $"[{string.Join(",", GetArray().Select(e => e.ToString(indent + 1)))}]";
             }
             return "<<unknown value>>";
         }
diff --git a/src/core/Akka/Dispatch/CachingConfig.cs b/src/core/Akka/Dispatch/CachingConfig.cs
index a662e27c9..da19ca1db 100644
--- a/src/core/Akka/Dispatch/CachingConfig.cs
+++ b/src/core/Akka/Dispatch/CachingConfig.cs
@@ -286,9 +286,9 @@ public override double GetDouble(string path, double @default = 0)
         public override string GetString(string path, string @default = null)
         {
             var pathEntry = GetPathEntry(path);
-            if (pathEntry is StringPathEntry)
+            if (pathEntry is StringPathEntry stringPathEntry)
             {
-                return ((StringPathEntry)pathEntry).Value;
+                return stringPathEntry.Value;
             }
             else
             {
diff --git a/src/core/Akka/Dispatch/Dispatchers.cs b/src/core/Akka/Dispatch/Dispatchers.cs
index 5043cf405..f9cf2fdf2 100644
--- a/src/core/Akka/Dispatch/Dispatchers.cs
+++ b/src/core/Akka/Dispatch/Dispatchers.cs
@@ -426,13 +426,13 @@ private Config Config(string id, Config appConfig)
             var simpleName = id.Substring(id.LastIndexOf('.') + 1);
             return IdConfig(id)
                 .WithFallback(appConfig)
-                .WithFallback(ConfigurationFactory.ParseString(string.Format("name: {0}", simpleName)))
+                .WithFallback(ConfigurationFactory.ParseString($"name: {simpleName}"))
                 .WithFallback(DefaultDispatcherConfig);
         }
 
         private Config IdConfig(string id)
         {
-            return ConfigurationFactory.ParseString(string.Format("id: {0}", id));
+            return ConfigurationFactory.ParseString($"id: {id}");
         }
 
 
diff --git a/src/core/Akka/Dispatch/Mailbox.cs b/src/core/Akka/Dispatch/Mailbox.cs
index 22833f51d..ada524919 100644
--- a/src/core/Akka/Dispatch/Mailbox.cs
+++ b/src/core/Akka/Dispatch/Mailbox.cs
@@ -465,10 +465,7 @@ public virtual void CleanUp()
                     dlm.SystemEnqueue(Actor.Self, msg);
                 }
 
-                if (MessageQueue != null) // needed for CallingThreadDispatcher, which never calls Mailbox.Run
-                {
-                    MessageQueue.CleanUp(Actor.Self, dlm.MessageQueue);
-                }
+                MessageQueue?.CleanUp(Actor.Self, dlm.MessageQueue);
             }
         }
 
diff --git a/src/core/Akka/Event/EventBusUnsubscriber.cs b/src/core/Akka/Event/EventBusUnsubscriber.cs
index ba332dd92..bdd274024 100644
--- a/src/core/Akka/Event/EventBusUnsubscriber.cs
+++ b/src/core/Akka/Event/EventBusUnsubscriber.cs
@@ -56,19 +56,19 @@ protected override bool Receive(object message)
             {
                 if (_debug)
                     _eventStream.Publish(new Debug(this.GetType().Name, GetType(),
-                       string.Format("watching {0} in order to unsubscribe from EventStream when it terminates", register.Actor)));
+                       $"watching {register.Actor} in order to unsubscribe from EventStream when it terminates"));
                 Context.Watch(register.Actor);
             }).With<UnregisterIfNoMoreSubscribedChannels>(unregister =>
             {
                 if (_debug)
                     _eventStream.Publish(new Debug(this.GetType().Name, GetType(),
-                        string.Format("unwatching {0} since has no subscriptions", unregister.Actor)));
+                        $"unwatching {unregister.Actor} since has no subscriptions"));
                 Context.Unwatch(unregister.Actor);
             }).With<Terminated>(terminated =>
             {
                 if (_debug)
                     _eventStream.Publish(new Debug(this.GetType().Name, GetType(),
-                        string.Format("unsubscribe {0} from {1}, because it was terminated", terminated.Actor , _eventStream )));
+                        $"unsubscribe {terminated.Actor} from {_eventStream}, because it was terminated"));
                 _eventStream.Unsubscribe(terminated.Actor);
             })
             .WasHandled;
@@ -81,7 +81,7 @@ protected override void PreStart()
         {
             if (_debug)
                 _eventStream.Publish(new Debug(this.GetType().Name, GetType(),
-                    string.Format("registering unsubscriber with {0}", _eventStream)));
+                    $"registering unsubscriber with {_eventStream}"));
             _eventStream.InitUnsubscriber(Self, _system);
         }
 
@@ -177,7 +177,7 @@ public static EventStreamUnsubscribersProvider Instance
         public void Start(ActorSystemImpl system, EventStream eventStream, bool debug)
         {
             system.SystemActorOf(Props.Create<EventStreamUnsubscriber>(eventStream, system, debug),
-                string.Format("EventStreamUnsubscriber-{0}", _unsubscribersCounter.IncrementAndGet()));
+                $"EventStreamUnsubscriber-{_unsubscribersCounter.IncrementAndGet()}");
         }
     }
 }
diff --git a/src/core/Akka/Event/EventStream.cs b/src/core/Akka/Event/EventStream.cs
index 13c37d212..f4b9e0f34 100644
--- a/src/core/Akka/Event/EventStream.cs
+++ b/src/core/Akka/Event/EventStream.cs
@@ -135,7 +135,7 @@ public bool InitUnsubscriber(IActorRef unsubscriber, ActorSystem system)
                     if (_debug)
                     {
                         Publish(new Debug(SimpleName(this), GetType(),
-                            string.Format("initialized unsubscriber to: {0}  registering {1} initial subscribers with it", unsubscriber, v.Value.Count)));
+                            $"initialized unsubscriber to: {unsubscriber}  registering {v.Value.Count} initial subscribers with it"));
 
                     }
                     v.Value.ForEach(RegisterWithUnsubscriber);
@@ -153,7 +153,7 @@ public bool InitUnsubscriber(IActorRef unsubscriber, ActorSystem system)
                 if (_debug)
                 {
                     Publish(new Debug(SimpleName(this), GetType(),
-                        string.Format("not using unsubscriber {0}, because already initialized with {1}", unsubscriber, presentUnsubscriber)));
+                        $"not using unsubscriber {unsubscriber}, because already initialized with {presentUnsubscriber}"));
 
                 }
             }).WasHandled;
diff --git a/src/core/Akka/Event/LoggingBus.cs b/src/core/Akka/Event/LoggingBus.cs
index 2282eb6b3..8a7bfeddc 100644
--- a/src/core/Akka/Event/LoggingBus.cs
+++ b/src/core/Akka/Event/LoggingBus.cs
@@ -169,10 +169,7 @@ internal void StopDefaultLoggers(ActorSystem system)
                 {
                     Unsubscribe(logger);
                     var internalActorRef = logger as IInternalActorRef;
-                    if (internalActorRef != null)
-                    {
-                        internalActorRef.Stop();
-                    }
+                    internalActorRef?.Stop();
                 }
             }
 
@@ -193,7 +190,7 @@ private void AddLogger(ActorSystemImpl system, Type loggerType, LogLevel logLeve
             catch (Exception ex) when (ex is TaskCanceledException || ex is AskTimeoutException)
             {
                 Publish(new Warning(loggingBusName, GetType(),
-                     string.Format("Logger {0} [{2}] did not respond within {1} to InitializeLogger(bus)", loggerName, timeout, loggerType.FullName)));
+                     $"Logger {loggerName} [{timeout}] did not respond within {loggerType.FullName} to InitializeLogger(bus)"));
             }
                 
             if (!(response is LoggerInitialized))
diff --git a/src/core/Akka/Event/StandardOutLogger.cs b/src/core/Akka/Event/StandardOutLogger.cs
index e99280d12..d5ffc6665 100644
--- a/src/core/Akka/Event/StandardOutLogger.cs
+++ b/src/core/Akka/Event/StandardOutLogger.cs
@@ -67,8 +67,7 @@ protected override void TellInternal(object message, IActorRef sender)
             if(message == null)
                 throw new ArgumentNullException(nameof(message), "The message to log must not be null.");
 
-            var logEvent = message as LogEvent;
-            if (logEvent != null)
+            if (message is LogEvent logEvent)
             {
                 PrintLogEvent(logEvent);
             }
diff --git a/src/core/Akka/Event/TraceLogger.cs b/src/core/Akka/Event/TraceLogger.cs
index 815922d53..2a9a3589a 100644
--- a/src/core/Akka/Event/TraceLogger.cs
+++ b/src/core/Akka/Event/TraceLogger.cs
@@ -41,7 +41,7 @@ protected override void OnReceive(object message)
                  .With<InitializeLogger>(m => Sender.Tell(new LoggerInitialized()))
                  .With<Error>(m => Trace.TraceError(m.ToString()))
                  .With<Warning>(m => Trace.TraceWarning(m.ToString()))
-                 .With<DeadLetter>(m => Trace.TraceWarning(string.Format("Deadletter - unable to send message {0} from {1} to {2}", m.Message, m.Sender, m.Sender), typeof(DeadLetter).ToString()))
+                 .With<DeadLetter>(m => Trace.TraceWarning($"Deadletter - unable to send message {m.Message} from {m.Sender} to {m.Sender}", typeof(DeadLetter).ToString()))
                  .With<UnhandledMessage>(m => Trace.TraceWarning("Unhandled message!"))
                  .Default(m =>
                  {
diff --git a/src/core/Akka/Helios.Concurrency.DedicatedThreadPool.cs b/src/core/Akka/Helios.Concurrency.DedicatedThreadPool.cs
index e6e5f21fa..46ce03e34 100644
--- a/src/core/Akka/Helios.Concurrency.DedicatedThreadPool.cs
+++ b/src/core/Akka/Helios.Concurrency.DedicatedThreadPool.cs
@@ -47,9 +47,9 @@ public DedicatedThreadPoolSettings(int numThreads, string name = null, TimeSpan?
             NumThreads = numThreads;
             DeadlockTimeout = deadlockTimeout;
             if (deadlockTimeout.HasValue && deadlockTimeout.Value.TotalMilliseconds <= 0)
-                throw new ArgumentOutOfRangeException("deadlockTimeout", string.Format("deadlockTimeout must be null or at least 1ms. Was {0}.", deadlockTimeout));
+                throw new ArgumentOutOfRangeException("deadlockTimeout", $"deadlockTimeout must be null or at least 1ms. Was {deadlockTimeout}.");
             if (numThreads <= 0)
-                throw new ArgumentOutOfRangeException("numThreads", string.Format("numThreads must be at least 1. Was {0}", numThreads));
+                throw new ArgumentOutOfRangeException("numThreads", $"numThreads must be at least 1. Was {numThreads}");
         }
 
         /// <summary>
@@ -349,7 +349,7 @@ public PoolWorker(DedicatedThreadPool pool, int workerId)
                 };
 
                 if (pool.Settings.Name != null)
-                    thread.Name = string.Format("{0}_{1}", pool.Settings.Name, workerId);
+                    thread.Name = $"{pool.Settings.Name}_{workerId}";
 
                 thread.Start();
             }
diff --git a/src/core/Akka/IO/InetAddressDnsResolver.cs b/src/core/Akka/IO/InetAddressDnsResolver.cs
index 91d4ed68b..4e0e477d0 100644
--- a/src/core/Akka/IO/InetAddressDnsResolver.cs
+++ b/src/core/Akka/IO/InetAddressDnsResolver.cs
@@ -43,8 +43,7 @@ public InetAddressDnsResolver(SimpleDnsCache cache, Config config)
         /// <returns>TBD</returns>
         protected override bool Receive(object message)
         {
-            var resolve = message as Dns.Resolve;
-            if (resolve != null)
+            if (message is Dns.Resolve resolve)
             {
                 var answer = _cache.Cached(resolve.Name);
                 if (answer == null)
diff --git a/src/core/Akka/IO/SimpleDnsManager.cs b/src/core/Akka/IO/SimpleDnsManager.cs
index c9a0db3be..cd25f2232 100644
--- a/src/core/Akka/IO/SimpleDnsManager.cs
+++ b/src/core/Akka/IO/SimpleDnsManager.cs
@@ -49,8 +49,7 @@ public SimpleDnsManager(DnsExt ext)
         /// <returns>TBD</returns>
         protected override bool Receive(object message)
         {
-            var r = message as Dns.Resolve;
-            if (r != null)
+            if (message is Dns.Resolve r)
             {
                 _log.Debug("Resolution request for {0} from {1}", r.Name, Sender);
                 _resolver.Forward(r);
diff --git a/src/core/Akka/IO/Tcp.cs b/src/core/Akka/IO/Tcp.cs
index f5efd617c..dd44784d8 100644
--- a/src/core/Akka/IO/Tcp.cs
+++ b/src/core/Akka/IO/Tcp.cs
@@ -410,12 +410,10 @@ public WriteCommand Prepend(IEnumerable<WriteCommand> writes)
             {
                 return writes.Reverse().Aggregate(this, (b, a) =>
                 {
-                    var simple = a as SimpleWriteCommand;
-                    if (simple != null)
+                    if (a is SimpleWriteCommand simple)
                         return b.Prepend(simple);
 
-                    var compound = a as CompoundWrite;
-                    if (compound != null)
+                    if (a is CompoundWrite compound)
                         return b.Prepend(compound);
 
                     throw new ArgumentException("The supplied WriteCommand is invalid. Only SimpleWriteCommand and CompoundWrite WriteCommands are supported.");
@@ -626,15 +624,13 @@ private IEnumerable<SimpleWriteCommand> Enumerable()
                 WriteCommand current = this;
                 while (current != null)
                 {
-                    var compound = current as CompoundWrite;
-                    if (compound != null)
+                    if (current is CompoundWrite compound)
                     {
                         current = compound.TailCommand;
                         yield return compound.Head;
                     }
 
-                    var simple = current as SimpleWriteCommand;
-                    if (simple != null)
+                    if (current is SimpleWriteCommand simple)
                     {
                         current = null;
                         yield return simple;
diff --git a/src/core/Akka/IO/TcpConnection.cs b/src/core/Akka/IO/TcpConnection.cs
index 5d87c6f61..eeea0b417 100644
--- a/src/core/Akka/IO/TcpConnection.cs
+++ b/src/core/Akka/IO/TcpConnection.cs
@@ -241,8 +241,8 @@ private Receive PeerSentEOF(ConnectionInfo info)
             return message =>
             {
                 if (handleWrite(message)) return true;
-                var cmd = message as CloseCommand;
-                if (cmd != null)
+
+                if (message is CloseCommand cmd)
                 {
                     HandleClose(info, Sender, cmd.Event);
                     return true;
diff --git a/src/core/Akka/IO/TcpListener.cs b/src/core/Akka/IO/TcpListener.cs
index 494fed3fd..3ba5f3558 100644
--- a/src/core/Akka/IO/TcpListener.cs
+++ b/src/core/Akka/IO/TcpListener.cs
@@ -96,8 +96,8 @@ protected override bool Receive(object message)
                     Self.Tell(saea);
                 return true;
             }
-            var resumeAccepting = message as Tcp.ResumeAccepting;
-            if (resumeAccepting != null)
+
+            if (message is Tcp.ResumeAccepting resumeAccepting)
             {
                 _acceptLimit = resumeAccepting.BatchSize;
                 _saeas = Accept(_acceptLimit).ToArray();
diff --git a/src/core/Akka/IO/TcpManager.cs b/src/core/Akka/IO/TcpManager.cs
index a2c77e6d8..dc8b3c74c 100644
--- a/src/core/Akka/IO/TcpManager.cs
+++ b/src/core/Akka/IO/TcpManager.cs
@@ -72,25 +72,23 @@ public TcpManager(TcpExt tcp)
         /// <returns>TBD</returns>
         protected override bool Receive(object message)
         {
-            var c = message as Connect;
-            if (c != null)
+            if (message is Connect c)
             {
                 var commander = Sender;
                 Context.ActorOf(Props.Create<TcpOutgoingConnection>(_tcp, commander, c));
                 return true;
             }
-            var b = message as Bind;
-            if (b != null)
+
+            if (message is Bind b)
             {
                 var commander = Sender;
                 Context.ActorOf(Props.Create<TcpListener>(_tcp, commander, b));
                 return true;
             }
-            var dl = message as DeadLetter;
-            if (dl != null)
+
+            if (message is DeadLetter dl)
             {
-                var completed = dl.Message as SocketCompleted;
-                if (completed != null)
+                if (dl.Message is SocketCompleted completed)
                 {
                     //TODO: release resources?
                 }
diff --git a/src/core/Akka/IO/TcpOutgoingConnection.cs b/src/core/Akka/IO/TcpOutgoingConnection.cs
index add58d207..b488bdb7f 100644
--- a/src/core/Akka/IO/TcpOutgoingConnection.cs
+++ b/src/core/Akka/IO/TcpOutgoingConnection.cs
@@ -123,8 +123,7 @@ private Receive Resolving(DnsEndPoint remoteAddress)
         {
             return message =>
             {
-                var resolved = message as Dns.Resolved;
-                if (resolved != null)
+                if (message is Dns.Resolved resolved)
                 {
                     if (resolved.Ipv4.Any() && resolved.Ipv6.Any()) // multiple addresses
                     {
diff --git a/src/core/Akka/IO/UdpManager.cs b/src/core/Akka/IO/UdpManager.cs
index 46eef5285..17f10dead 100644
--- a/src/core/Akka/IO/UdpManager.cs
+++ b/src/core/Akka/IO/UdpManager.cs
@@ -61,15 +61,14 @@ public UdpManager(UdpExt udp)
 
         protected override bool Receive(object message)
         {
-            var b = message as Udp.Bind;
-            if (b != null)
+            if (message is Udp.Bind b)
             {
                 var commander = Sender;
                 Context.ActorOf(Props.Create(() => new UdpListener(_udp, commander, b)));
                 return true;
             }
-            var s = message as Udp.SimpleSender;
-            if (s != null)
+
+            if (message is Udp.SimpleSender s)
             {
                 var commander = Sender;
                 Context.ActorOf(Props.Create(() => new UdpSender(_udp, commander, s.Options)));
diff --git a/src/core/Akka/Serialization/NewtonSoftJsonSerializer.cs b/src/core/Akka/Serialization/NewtonSoftJsonSerializer.cs
index 146e5136d..2c8f4f8dc 100644
--- a/src/core/Akka/Serialization/NewtonSoftJsonSerializer.cs
+++ b/src/core/Akka/Serialization/NewtonSoftJsonSerializer.cs
@@ -192,8 +192,7 @@ protected override JsonProperty CreateProperty(MemberInfo member, MemberSerializ
 
                 if (!prop.Writable)
                 {
-                    var property = member as PropertyInfo;
-                    if (property != null)
+                    if (member is PropertyInfo property)
                     {
                         var hasPrivateSetter = property.GetSetMethod(true) != null;
                         prop.Writable = hasPrivateSetter;
@@ -236,8 +235,7 @@ public override object FromBinary(byte[] bytes, Type type)
 
         private static object TranslateSurrogate(object deserializedValue, NewtonSoftJsonSerializer parent, Type type)
         {
-            var j = deserializedValue as JObject;
-            if (j != null)
+            if (deserializedValue is JObject j)
             {
                 //The JObject represents a special akka.net wrapper for primitives (int,float,decimal) to preserve correct type when deserializing
                 if (j["$"] != null)
@@ -249,10 +247,9 @@ private static object TranslateSurrogate(object deserializedValue, NewtonSoftJso
                 //The JObject is not of our concern, let Json.NET deserialize it.
                 return j.ToObject(type, parent._serializer);
             }
-            var surrogate = deserializedValue as ISurrogate;
 
             //The deserialized object is a surrogate, unwrap it
-            if (surrogate != null)
+            if (deserializedValue is ISurrogate surrogate)
             {
                 return surrogate.FromSurrogate(parent.system);
             }
@@ -343,8 +340,7 @@ public override void WriteJson(JsonWriter writer, object value, JsonSerializer s
                 }
                 else
                 {
-                    var value1 = value as ISurrogated;
-                    if (value1 != null)
+                    if (value is ISurrogated value1)
                     {
                         var surrogated = value1;
                         var surrogate = surrogated.ToSurrogate(_parent.system);
@@ -359,12 +355,12 @@ public override void WriteJson(JsonWriter writer, object value, JsonSerializer s
 
             private object GetString(object value)
             {
-                if (value is int)
-                    return "I" + ((int)value).ToString(NumberFormatInfo.InvariantInfo);
-                if (value is float)
-                    return "F" + ((float)value).ToString(NumberFormatInfo.InvariantInfo);
-                if (value is decimal)
-                    return "M" + ((decimal)value).ToString(NumberFormatInfo.InvariantInfo);
+                if (value is int i)
+                    return "I" + i.ToString(NumberFormatInfo.InvariantInfo);
+                if (value is float f)
+                    return "F" + f.ToString(NumberFormatInfo.InvariantInfo);
+                if (value is decimal d)
+                    return "M" + d.ToString(NumberFormatInfo.InvariantInfo);
                 throw new NotSupportedException();
             }
         }
diff --git a/src/core/Akka/Util/Result.cs b/src/core/Akka/Util/Result.cs
index d8cf9323a..9da91e379 100644
--- a/src/core/Akka/Util/Result.cs
+++ b/src/core/Akka/Util/Result.cs
@@ -65,7 +65,7 @@ public bool Equals(Result<T> other)
         /// <inheritdoc/>
         public override bool Equals(object obj)
         {
-            if (obj is Result<T>) return Equals((Result<T>) obj);
+            if (obj is Result<T> Ts) return Equals(Ts);
             return false;
         }
 
diff --git a/src/examples/Cluster/Roles/Samples.Cluster.Transformation/TransformationMessages.cs b/src/examples/Cluster/Roles/Samples.Cluster.Transformation/TransformationMessages.cs
index 55ab1aa8e..a56f13cc8 100644
--- a/src/examples/Cluster/Roles/Samples.Cluster.Transformation/TransformationMessages.cs
+++ b/src/examples/Cluster/Roles/Samples.Cluster.Transformation/TransformationMessages.cs
@@ -35,7 +35,7 @@ public TransformationResult(string text)
 
             public override string ToString()
             {
-                return string.Format("TransformationResult({0})", Text);
+                return $"TransformationResult({Text})";
             }
         }
 
@@ -53,7 +53,7 @@ public JobFailed(string reason, TransformationJob job)
 
             public override string ToString()
             {
-                return string.Format("JobFailed({0})", Reason);
+                return $"JobFailed({Reason})";
             }
         }
 
