Found the following rules to apply: UseMethodAnyRewriterR6, MergeSequentialChecksRewriterR2, NullChecksShouldNotBeUsedWithIsRewriterR3, SimplifyLinqRewriterR4, TypeCheckAndCastRewriterR5, UseNullPropagationRewriterR7, UsePatternMatchingRewriterR8, UseStringInterpolationRewriterR9, UseStringIsNullOrEmptyRewriterR10



Project: Microsoft.Health.Fhir.Api
    #1 Path: D:\a\1\s\src\Microsoft.Health.Fhir.Api\Features\Throttling\ThrottlingMiddleware.cs, Line: 265, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html



Project: Microsoft.Health.Fhir.Core
    #2 Path: D:\a\1\s\src\Microsoft.Health.Fhir.Core\Features\Operations\ConvertData\ContainerRegistryTemplateProvider.cs, Line: 137, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #3 Path: D:\a\1\s\src\Microsoft.Health.Fhir.Core\Features\Operations\Reindex\ReindexJobTask.cs, Line: 153, Message: ReSharper: ReplaceWithSingleCallToAny. / SonarQube "IEnumerable" LINQs should be simplified. See https://rules.sonarsource.com/csharp/RSPEC-2971
    #4 Path: D:\a\1\s\src\Microsoft.Health.Fhir.Core\Features\Operations\Reindex\ReindexJobTask.cs, Line: 157, Message: ReSharper: ReplaceWithSingleCallToAny. / SonarQube "IEnumerable" LINQs should be simplified. See https://rules.sonarsource.com/csharp/RSPEC-2971
    #5 Path: D:\a\1\s\src\Microsoft.Health.Fhir.Core\Features\Operations\Reindex\ReindexJobTask.cs, Line: 330, Message: ReSharper: ReplaceWithSingleCallToCount. / SonarQube "IEnumerable" LINQs should be simplified. See https://rules.sonarsource.com/csharp/RSPEC-2971
    #6 Path: D:\a\1\s\src\Microsoft.Health.Fhir.Core\Features\Operations\Reindex\ReindexJobTask.cs, Line: 378, Message: ReSharper: ReplaceWithSingleCallToAny. / SonarQube "IEnumerable" LINQs should be simplified. See https://rules.sonarsource.com/csharp/RSPEC-2971
    #7 Path: D:\a\1\s\src\Microsoft.Health.Fhir.Core\Features\Search\TypedElementSearchIndexer.cs, Line: 226, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html



Project: Microsoft.Health.Fhir.Stu3.Core
    #8 Path: D:\a\1\s\src\Microsoft.Health.Fhir.Shared.Core\Features\Search\SearchOptionsFactory.cs, Line: 438, Message: ReSharper: ReplaceWithSingleCallToAny. / SonarQube "IEnumerable" LINQs should be simplified. See https://rules.sonarsource.com/csharp/RSPEC-2971



Project: Microsoft.Health.Fhir.R4.Core
    #9 Path: D:\a\1\s\src\Microsoft.Health.Fhir.Shared.Core\Features\Search\SearchOptionsFactory.cs, Line: 438, Message: ReSharper: ReplaceWithSingleCallToAny. / SonarQube "IEnumerable" LINQs should be simplified. See https://rules.sonarsource.com/csharp/RSPEC-2971



Project: Microsoft.Health.Fhir.R4.Core.UnitTests
    #10 Path: D:\a\1\s\src\Microsoft.Health.Fhir.Shared.Core.UnitTests\Features\Operations\Reindex\ReindexJobTaskTests.cs, Line: 102, Message: ReSharper: ReplaceWithSingleCallToAny. / SonarQube "IEnumerable" LINQs should be simplified. See https://rules.sonarsource.com/csharp/RSPEC-2971
    #11 Path: D:\a\1\s\src\Microsoft.Health.Fhir.Shared.Core.UnitTests\Features\Operations\Reindex\ReindexUtilitiesTests.cs, Line: 76, Message: ReSharper: ReplaceWithSingleCallToCount. / SonarQube "IEnumerable" LINQs should be simplified. See https://rules.sonarsource.com/csharp/RSPEC-2971



Project: Microsoft.Health.Fhir.Stu3.Core.UnitTests
    #12 Path: D:\a\1\s\src\Microsoft.Health.Fhir.Shared.Core.UnitTests\Features\Operations\Reindex\ReindexJobTaskTests.cs, Line: 102, Message: ReSharper: ReplaceWithSingleCallToAny. / SonarQube "IEnumerable" LINQs should be simplified. See https://rules.sonarsource.com/csharp/RSPEC-2971
    #13 Path: D:\a\1\s\src\Microsoft.Health.Fhir.Shared.Core.UnitTests\Features\Operations\Reindex\ReindexUtilitiesTests.cs, Line: 76, Message: ReSharper: ReplaceWithSingleCallToCount. / SonarQube "IEnumerable" LINQs should be simplified. See https://rules.sonarsource.com/csharp/RSPEC-2971



Project: Microsoft.Health.Fhir.Stu3.Tests.E2E
    #14 Path: D:\a\1\s\test\Microsoft.Health.Fhir.Shared.Tests.E2E\Rest\Search\CustomSearchParamTests.cs, Line: 194, Message: ReSharper: ReplaceWithSingleCallToAny. / SonarQube "IEnumerable" LINQs should be simplified. See https://rules.sonarsource.com/csharp/RSPEC-2971
    #15 Path: D:\a\1\s\test\Microsoft.Health.Fhir.Shared.Tests.E2E\Rest\Search\SearchTestsBase.cs, Line: 131, Message: ReSharper: ReplaceWithSingleCallToFirstOrDefault. / SonarQube "IEnumerable" LINQs should be simplified. See https://rules.sonarsource.com/csharp/RSPEC-2971
    #16 Path: D:\a\1\s\test\Microsoft.Health.Fhir.Shared.Tests.E2E\Rest\Search\StringSearchTests.cs, Line: 39, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #17 Path: D:\a\1\s\test\Microsoft.Health.Fhir.Shared.Tests.E2E\Rest\Search\StringSearchTests.cs, Line: 74, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html



Project: Microsoft.Health.Fhir.R4.Tests.E2E
    #18 Path: D:\a\1\s\test\Microsoft.Health.Fhir.Shared.Tests.E2E\Rest\Search\CustomSearchParamTests.cs, Line: 194, Message: ReSharper: ReplaceWithSingleCallToAny. / SonarQube "IEnumerable" LINQs should be simplified. See https://rules.sonarsource.com/csharp/RSPEC-2971
    #19 Path: D:\a\1\s\test\Microsoft.Health.Fhir.Shared.Tests.E2E\Rest\Search\SearchTestsBase.cs, Line: 131, Message: ReSharper: ReplaceWithSingleCallToFirstOrDefault. / SonarQube "IEnumerable" LINQs should be simplified. See https://rules.sonarsource.com/csharp/RSPEC-2971
    #20 Path: D:\a\1\s\test\Microsoft.Health.Fhir.Shared.Tests.E2E\Rest\Search\StringSearchTests.cs, Line: 39, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #21 Path: D:\a\1\s\test\Microsoft.Health.Fhir.Shared.Tests.E2E\Rest\Search\StringSearchTests.cs, Line: 74, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html



Project: Microsoft.Health.Fhir.Azure
    #22 Path: D:\a\1\s\src\Microsoft.Health.Fhir.Azure\ContainerRegistry\AzureContainerRegistryAccessTokenProvider.cs, Line: 185, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html



Project: Microsoft.Health.Fhir.R5.Core
    #23 Path: D:\a\1\s\src\Microsoft.Health.Fhir.Shared.Core\Features\Search\SearchOptionsFactory.cs, Line: 438, Message: ReSharper: ReplaceWithSingleCallToAny. / SonarQube "IEnumerable" LINQs should be simplified. See https://rules.sonarsource.com/csharp/RSPEC-2971



Project: Microsoft.Health.Fhir.R5.Core.UnitTests
    #24 Path: D:\a\1\s\src\Microsoft.Health.Fhir.Shared.Core.UnitTests\Features\Operations\Reindex\ReindexJobTaskTests.cs, Line: 102, Message: ReSharper: ReplaceWithSingleCallToAny. / SonarQube "IEnumerable" LINQs should be simplified. See https://rules.sonarsource.com/csharp/RSPEC-2971
    #25 Path: D:\a\1\s\src\Microsoft.Health.Fhir.Shared.Core.UnitTests\Features\Operations\Reindex\ReindexUtilitiesTests.cs, Line: 76, Message: ReSharper: ReplaceWithSingleCallToCount. / SonarQube "IEnumerable" LINQs should be simplified. See https://rules.sonarsource.com/csharp/RSPEC-2971



Project: Microsoft.Health.Fhir.R5.Tests.E2E
    #26 Path: D:\a\1\s\test\Microsoft.Health.Fhir.Shared.Tests.E2E\Rest\Search\CustomSearchParamTests.cs, Line: 194, Message: ReSharper: ReplaceWithSingleCallToAny. / SonarQube "IEnumerable" LINQs should be simplified. See https://rules.sonarsource.com/csharp/RSPEC-2971
    #27 Path: D:\a\1\s\test\Microsoft.Health.Fhir.Shared.Tests.E2E\Rest\Search\SearchTestsBase.cs, Line: 131, Message: ReSharper: ReplaceWithSingleCallToFirstOrDefault. / SonarQube "IEnumerable" LINQs should be simplified. See https://rules.sonarsource.com/csharp/RSPEC-2971
    #28 Path: D:\a\1\s\test\Microsoft.Health.Fhir.Shared.Tests.E2E\Rest\Search\StringSearchTests.cs, Line: 39, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #29 Path: D:\a\1\s\test\Microsoft.Health.Fhir.Shared.Tests.E2E\Rest\Search\StringSearchTests.cs, Line: 74, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html



Project: Microsoft.Health.Fhir.R4.Client
    #30 Path: D:\a\1\s\src\Microsoft.Health.Fhir.Shared.Client\FhirClientExtensions.cs, Line: 24, Message: https://www.jetbrains.com/help/resharper/MergeSequentialChecks.html



Project: Microsoft.Health.Fhir.R5.Client
    #31 Path: D:\a\1\s\src\Microsoft.Health.Fhir.Shared.Client\FhirClientExtensions.cs, Line: 24, Message: https://www.jetbrains.com/help/resharper/MergeSequentialChecks.html



Project: Microsoft.Health.Fhir.Stu3.Client
    #32 Path: D:\a\1\s\src\Microsoft.Health.Fhir.Shared.Client\FhirClientExtensions.cs, Line: 24, Message: https://www.jetbrains.com/help/resharper/MergeSequentialChecks.html



--- Rules Summary ---
R4: 19
R9: 8
R2: 3
R7: 1
R8: 1

--- Summary ---
Fixed ReSharper issues: 29
Fixed SonarQube issues: 19
Total fixed issues: 32

Finished in: 46 s

######################################################################
Nr: 1 - TypeCheckAndCastRewriterR5
Filepath: D:\a\1\s\src\Microsoft.Health.Fhir.Shared.Api\Features\Formatters\FhirJsonOutputFormatter.cs
Description: Error: The created Syntax Tree is semantically incorrect.
------------------------------------------------------------------------
---- Original Tree ----
using System;
using System.Buffers;
using System.IO;
using System.Linq;
using System.Text;
using EnsureThat;
using Hl7.Fhir.Model;
using Hl7.Fhir.Serialization;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc.Formatters;
using Microsoft.Health.Fhir.Api.Features.ContentTypes;
using Microsoft.Health.Fhir.Api.Features.Resources.Bundle;
using Microsoft.Health.Fhir.Core.Extensions;
using Microsoft.Health.Fhir.Core.Features.Persistence;
using Microsoft.Health.Fhir.Core.Models;
using Microsoft.Health.Fhir.Shared.Core.Features.Search;
using Newtonsoft.Json;
using Task = System.Threading.Tasks.Task;

namespace Microsoft.Health.Fhir.Api.Features.Formatters
{
    internal class FhirJsonOutputFormatter : TextOutputFormatter
    {
        private readonly FhirJsonSerializer _fhirJsonSerializer;
        private readonly ResourceDeserializer _deserializer;
        private readonly IArrayPool<char> _charPool;
        private readonly BundleSerializer _bundleSerializer;

        public FhirJsonOutputFormatter(
            FhirJsonSerializer fhirJsonSerializer,
            ResourceDeserializer deserializer,
            ArrayPool<char> charPool,
            BundleSerializer bundleSerializer)
        {
            EnsureArg.IsNotNull(fhirJsonSerializer, nameof(fhirJsonSerializer));
            EnsureArg.IsNotNull(deserializer, nameof(deserializer));
            EnsureArg.IsNotNull(charPool, nameof(charPool));
            EnsureArg.IsNotNull(bundleSerializer, nameof(bundleSerializer));

            _fhirJsonSerializer = fhirJsonSerializer;
            _deserializer = deserializer;
            _charPool = new JsonArrayPool(charPool);
            _bundleSerializer = bundleSerializer;

            SupportedEncodings.Add(Encoding.UTF8);
            SupportedEncodings.Add(Encoding.Unicode);
            SupportedMediaTypes.Add(KnownContentTypes.JsonContentType);
            SupportedMediaTypes.Add(KnownMediaTypeHeaderValues.ApplicationJson);
            SupportedMediaTypes.Add(KnownMediaTypeHeaderValues.TextJson);
            SupportedMediaTypes.Add(KnownMediaTypeHeaderValues.ApplicationAnyJsonSyntax);
        }

        protected override bool CanWriteType(Type type)
        {
            EnsureArg.IsNotNull(type, nameof(type));

            return typeof(Resource).IsAssignableFrom(type) || typeof(RawResourceElement).IsAssignableFrom(type);
        }

        public override async Task WriteResponseBodyAsync(OutputFormatterWriteContext context, Encoding selectedEncoding)
        {
            EnsureArg.IsNotNull(context, nameof(context));
            EnsureArg.IsNotNull(selectedEncoding, nameof(selectedEncoding));

            context.HttpContext.AllowSynchronousIO();

            HttpResponse response = context.HttpContext.Response;

            var elementsSearchParameter = context.HttpContext.GetElementsOrDefault();
            var summarySearchParameter = context.HttpContext.GetSummaryTypeOrDefault();
            var pretty = context.HttpContext.GetPrettyOrDefault();
            Resource resource = null;

            if (context.Object is Hl7.Fhir.Model.Bundle)
            {
                var bundle = context.Object as Hl7.Fhir.Model.Bundle;
                resource = bundle;

                if (elementsSearchParameter?.Any() == true ||
                    summarySearchParameter != Hl7.Fhir.Rest.SummaryType.False ||
                    !bundle.Entry.All(x => x is RawBundleEntryComponent))
                {
                    // _elements is not supported for a raw resource, revert to using FhirJsonSerializer
                    foreach (var rawBundleEntryComponent in bundle.Entry)
                    {
                        if (rawBundleEntryComponent is RawBundleEntryComponent)
                        {
                            rawBundleEntryComponent.Resource = ((RawBundleEntryComponent)rawBundleEntryComponent).ResourceElement.ToPoco<Resource>(_deserializer);
                        }
                    }
                }
                else
                {
                    await _bundleSerializer.Serialize(context.Object as Hl7.Fhir.Model.Bundle, context.HttpContext.Response.Body, pretty);
                    return;
                }
            }
            else if (context.Object is RawResourceElement)
            {
                if ((elementsSearchParameter != null && elementsSearchParameter.Any()) ||
                    summarySearchParameter != Hl7.Fhir.Rest.SummaryType.False)
                {
                    // _elements is not supported for a raw resource, revert to using FhirJsonSerializer
                    resource = (context.Object as RawResourceElement).ToPoco<Resource>(_deserializer);
                }
                else
                {
                    await (context.Object as RawResourceElement).SerializeToStreamAsUtf8Json(context.HttpContext.Response.Body);
                    return;
                }
            }
            else
            {
                resource = (Resource)context.Object;
            }

            using (TextWriter textWriter = context.WriterFactory(response.Body, selectedEncoding))
            using (var jsonWriter = new JsonTextWriter(textWriter))
            {
                jsonWriter.ArrayPool = _charPool;

                if (pretty)
                {
                    jsonWriter.Formatting = Formatting.Indented;
                }

                _fhirJsonSerializer.Serialize(resource, jsonWriter, summarySearchParameter, elementsSearchParameter);
                await jsonWriter.FlushAsync();
            }
        }
    }
}

---- Transformed Tree ----
using System;
using System.Buffers;
using System.IO;
using System.Linq;
using System.Text;
using EnsureThat;
using Hl7.Fhir.Model;
using Hl7.Fhir.Serialization;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc.Formatters;
using Microsoft.Health.Fhir.Api.Features.ContentTypes;
using Microsoft.Health.Fhir.Api.Features.Resources.Bundle;
using Microsoft.Health.Fhir.Core.Extensions;
using Microsoft.Health.Fhir.Core.Features.Persistence;
using Microsoft.Health.Fhir.Core.Models;
using Microsoft.Health.Fhir.Shared.Core.Features.Search;
using Newtonsoft.Json;
using Task = System.Threading.Tasks.Task;

namespace Microsoft.Health.Fhir.Api.Features.Formatters
{
    internal class FhirJsonOutputFormatter : TextOutputFormatter
    {
        private readonly FhirJsonSerializer _fhirJsonSerializer;
        private readonly ResourceDeserializer _deserializer;
        private readonly IArrayPool<char> _charPool;
        private readonly BundleSerializer _bundleSerializer;

        public FhirJsonOutputFormatter(
            FhirJsonSerializer fhirJsonSerializer,
            ResourceDeserializer deserializer,
            ArrayPool<char> charPool,
            BundleSerializer bundleSerializer)
        {
            EnsureArg.IsNotNull(fhirJsonSerializer, nameof(fhirJsonSerializer));
            EnsureArg.IsNotNull(deserializer, nameof(deserializer));
            EnsureArg.IsNotNull(charPool, nameof(charPool));
            EnsureArg.IsNotNull(bundleSerializer, nameof(bundleSerializer));

            _fhirJsonSerializer = fhirJsonSerializer;
            _deserializer = deserializer;
            _charPool = new JsonArrayPool(charPool);
            _bundleSerializer = bundleSerializer;

            SupportedEncodings.Add(Encoding.UTF8);
            SupportedEncodings.Add(Encoding.Unicode);
            SupportedMediaTypes.Add(KnownContentTypes.JsonContentType);
            SupportedMediaTypes.Add(KnownMediaTypeHeaderValues.ApplicationJson);
            SupportedMediaTypes.Add(KnownMediaTypeHeaderValues.TextJson);
            SupportedMediaTypes.Add(KnownMediaTypeHeaderValues.ApplicationAnyJsonSyntax);
        }

        protected override bool CanWriteType(Type type)
        {
            EnsureArg.IsNotNull(type, nameof(type));

            return typeof(Resource).IsAssignableFrom(type) || typeof(RawResourceElement).IsAssignableFrom(type);
        }

        public override async Task WriteResponseBodyAsync(OutputFormatterWriteContext context, Encoding selectedEncoding)
        {
            EnsureArg.IsNotNull(context, nameof(context));
            EnsureArg.IsNotNull(selectedEncoding, nameof(selectedEncoding));

            context.HttpContext.AllowSynchronousIO();

            HttpResponse response = context.HttpContext.Response;

            var elementsSearchParameter = context.HttpContext.GetElementsOrDefault();
            var summarySearchParameter = context.HttpContext.GetSummaryTypeOrDefault();
            var pretty = context.HttpContext.GetPrettyOrDefault();
            Resource resource = null;

            if (context.Object is Hl7.Fhir.Model.Bundle)
            {
                var bundle = context.Object as Hl7.Fhir.Model.Bundle;
                resource = bundle;

                if (elementsSearchParameter?.Any() == true ||
                    summarySearchParameter != Hl7.Fhir.Rest.SummaryType.False ||
                    !bundle.Entry.All(x => x is RawBundleEntryComponent))
                {
                    // _elements is not supported for a raw resource, revert to using FhirJsonSerializer
                    foreach (var rawBundleEntryComponent in bundle.Entry)
                    {
                        if (rawBundleEntryComponent is RawBundleEntryComponent rawBundleEntryComponent)
                        {
                            rawBundleEntryComponent.Resource = rawBundleEntryComponent.ResourceElement.ToPoco<Resource>(_deserializer);
                        }
                    }
                }
                else
                {
                    await _bundleSerializer.Serialize(context.Object as Hl7.Fhir.Model.Bundle, context.HttpContext.Response.Body, pretty);
                    return;
                }
            }
            else if (context.Object is RawResourceElement)
            {
                if ((elementsSearchParameter != null && elementsSearchParameter.Any()) ||
                    summarySearchParameter != Hl7.Fhir.Rest.SummaryType.False)
                {
                    // _elements is not supported for a raw resource, revert to using FhirJsonSerializer
                    resource = (context.Object as RawResourceElement).ToPoco<Resource>(_deserializer);
                }
                else
                {
                    await (context.Object as RawResourceElement).SerializeToStreamAsUtf8Json(context.HttpContext.Response.Body);
                    return;
                }
            }
            else
            {
                resource = (Resource)context.Object;
            }

            using (TextWriter textWriter = context.WriterFactory(response.Body, selectedEncoding))
            using (var jsonWriter = new JsonTextWriter(textWriter))
            {
                jsonWriter.ArrayPool = _charPool;

                if (pretty)
                {
                    jsonWriter.Formatting = Formatting.Indented;
                }

                _fhirJsonSerializer.Serialize(resource, jsonWriter, summarySearchParameter, elementsSearchParameter);
                await jsonWriter.FlushAsync();
            }
        }
    }
}

---- Semantic diagnostics *before* transformation ----

---- Semantic diagnostics *after* transformation ----
D:\a\1\s\src\Microsoft.Health.Fhir.Shared.Api\Features\Formatters\FhirJsonOutputFormatter.cs(91,29): error CS0841: Cannot use local variable 'rawBundleEntryComponent' before it is declared,D:\a\1\s\src\Microsoft.Health.Fhir.Shared.Api\Features\Formatters\FhirJsonOutputFormatter.cs(91,80): error CS0136: A local or parameter named 'rawBundleEntryComponent' cannot be declared in this scope because that name is used in an enclosing local scope to define a local or parameter
######################################################################


######################################################################
Nr: 2 - TypeCheckAndCastRewriterR5
Filepath: D:\a\1\s\src\Microsoft.Health.Fhir.Shared.Api\Features\Formatters\FhirJsonOutputFormatter.cs
Description: Error: The created Syntax Tree is semantically incorrect.
------------------------------------------------------------------------
---- Original Tree ----
using System;
using System.Buffers;
using System.IO;
using System.Linq;
using System.Text;
using EnsureThat;
using Hl7.Fhir.Model;
using Hl7.Fhir.Serialization;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc.Formatters;
using Microsoft.Health.Fhir.Api.Features.ContentTypes;
using Microsoft.Health.Fhir.Api.Features.Resources.Bundle;
using Microsoft.Health.Fhir.Core.Extensions;
using Microsoft.Health.Fhir.Core.Features.Persistence;
using Microsoft.Health.Fhir.Core.Models;
using Microsoft.Health.Fhir.Shared.Core.Features.Search;
using Newtonsoft.Json;
using Task = System.Threading.Tasks.Task;

namespace Microsoft.Health.Fhir.Api.Features.Formatters
{
    internal class FhirJsonOutputFormatter : TextOutputFormatter
    {
        private readonly FhirJsonSerializer _fhirJsonSerializer;
        private readonly ResourceDeserializer _deserializer;
        private readonly IArrayPool<char> _charPool;
        private readonly BundleSerializer _bundleSerializer;

        public FhirJsonOutputFormatter(
            FhirJsonSerializer fhirJsonSerializer,
            ResourceDeserializer deserializer,
            ArrayPool<char> charPool,
            BundleSerializer bundleSerializer)
        {
            EnsureArg.IsNotNull(fhirJsonSerializer, nameof(fhirJsonSerializer));
            EnsureArg.IsNotNull(deserializer, nameof(deserializer));
            EnsureArg.IsNotNull(charPool, nameof(charPool));
            EnsureArg.IsNotNull(bundleSerializer, nameof(bundleSerializer));

            _fhirJsonSerializer = fhirJsonSerializer;
            _deserializer = deserializer;
            _charPool = new JsonArrayPool(charPool);
            _bundleSerializer = bundleSerializer;

            SupportedEncodings.Add(Encoding.UTF8);
            SupportedEncodings.Add(Encoding.Unicode);
            SupportedMediaTypes.Add(KnownContentTypes.JsonContentType);
            SupportedMediaTypes.Add(KnownMediaTypeHeaderValues.ApplicationJson);
            SupportedMediaTypes.Add(KnownMediaTypeHeaderValues.TextJson);
            SupportedMediaTypes.Add(KnownMediaTypeHeaderValues.ApplicationAnyJsonSyntax);
        }

        protected override bool CanWriteType(Type type)
        {
            EnsureArg.IsNotNull(type, nameof(type));

            return typeof(Resource).IsAssignableFrom(type) || typeof(RawResourceElement).IsAssignableFrom(type);
        }

        public override async Task WriteResponseBodyAsync(OutputFormatterWriteContext context, Encoding selectedEncoding)
        {
            EnsureArg.IsNotNull(context, nameof(context));
            EnsureArg.IsNotNull(selectedEncoding, nameof(selectedEncoding));

            context.HttpContext.AllowSynchronousIO();

            HttpResponse response = context.HttpContext.Response;

            var elementsSearchParameter = context.HttpContext.GetElementsOrDefault();
            var summarySearchParameter = context.HttpContext.GetSummaryTypeOrDefault();
            var pretty = context.HttpContext.GetPrettyOrDefault();
            Resource resource = null;

            if (context.Object is Hl7.Fhir.Model.Bundle)
            {
                var bundle = context.Object as Hl7.Fhir.Model.Bundle;
                resource = bundle;

                if (elementsSearchParameter?.Any() == true ||
                    summarySearchParameter != Hl7.Fhir.Rest.SummaryType.False ||
                    !bundle.Entry.All(x => x is RawBundleEntryComponent))
                {
                    // _elements is not supported for a raw resource, revert to using FhirJsonSerializer
                    foreach (var rawBundleEntryComponent in bundle.Entry)
                    {
                        if (rawBundleEntryComponent is RawBundleEntryComponent)
                        {
                            rawBundleEntryComponent.Resource = ((RawBundleEntryComponent)rawBundleEntryComponent).ResourceElement.ToPoco<Resource>(_deserializer);
                        }
                    }
                }
                else
                {
                    await _bundleSerializer.Serialize(context.Object as Hl7.Fhir.Model.Bundle, context.HttpContext.Response.Body, pretty);
                    return;
                }
            }
            else if (context.Object is RawResourceElement)
            {
                if ((elementsSearchParameter != null && elementsSearchParameter.Any()) ||
                    summarySearchParameter != Hl7.Fhir.Rest.SummaryType.False)
                {
                    // _elements is not supported for a raw resource, revert to using FhirJsonSerializer
                    resource = (context.Object as RawResourceElement).ToPoco<Resource>(_deserializer);
                }
                else
                {
                    await (context.Object as RawResourceElement).SerializeToStreamAsUtf8Json(context.HttpContext.Response.Body);
                    return;
                }
            }
            else
            {
                resource = (Resource)context.Object;
            }

            using (TextWriter textWriter = context.WriterFactory(response.Body, selectedEncoding))
            using (var jsonWriter = new JsonTextWriter(textWriter))
            {
                jsonWriter.ArrayPool = _charPool;

                if (pretty)
                {
                    jsonWriter.Formatting = Formatting.Indented;
                }

                _fhirJsonSerializer.Serialize(resource, jsonWriter, summarySearchParameter, elementsSearchParameter);
                await jsonWriter.FlushAsync();
            }
        }
    }
}

---- Transformed Tree ----
using System;
using System.Buffers;
using System.IO;
using System.Linq;
using System.Text;
using EnsureThat;
using Hl7.Fhir.Model;
using Hl7.Fhir.Serialization;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc.Formatters;
using Microsoft.Health.Fhir.Api.Features.ContentTypes;
using Microsoft.Health.Fhir.Api.Features.Resources.Bundle;
using Microsoft.Health.Fhir.Core.Extensions;
using Microsoft.Health.Fhir.Core.Features.Persistence;
using Microsoft.Health.Fhir.Core.Models;
using Microsoft.Health.Fhir.Shared.Core.Features.Search;
using Newtonsoft.Json;
using Task = System.Threading.Tasks.Task;

namespace Microsoft.Health.Fhir.Api.Features.Formatters
{
    internal class FhirJsonOutputFormatter : TextOutputFormatter
    {
        private readonly FhirJsonSerializer _fhirJsonSerializer;
        private readonly ResourceDeserializer _deserializer;
        private readonly IArrayPool<char> _charPool;
        private readonly BundleSerializer _bundleSerializer;

        public FhirJsonOutputFormatter(
            FhirJsonSerializer fhirJsonSerializer,
            ResourceDeserializer deserializer,
            ArrayPool<char> charPool,
            BundleSerializer bundleSerializer)
        {
            EnsureArg.IsNotNull(fhirJsonSerializer, nameof(fhirJsonSerializer));
            EnsureArg.IsNotNull(deserializer, nameof(deserializer));
            EnsureArg.IsNotNull(charPool, nameof(charPool));
            EnsureArg.IsNotNull(bundleSerializer, nameof(bundleSerializer));

            _fhirJsonSerializer = fhirJsonSerializer;
            _deserializer = deserializer;
            _charPool = new JsonArrayPool(charPool);
            _bundleSerializer = bundleSerializer;

            SupportedEncodings.Add(Encoding.UTF8);
            SupportedEncodings.Add(Encoding.Unicode);
            SupportedMediaTypes.Add(KnownContentTypes.JsonContentType);
            SupportedMediaTypes.Add(KnownMediaTypeHeaderValues.ApplicationJson);
            SupportedMediaTypes.Add(KnownMediaTypeHeaderValues.TextJson);
            SupportedMediaTypes.Add(KnownMediaTypeHeaderValues.ApplicationAnyJsonSyntax);
        }

        protected override bool CanWriteType(Type type)
        {
            EnsureArg.IsNotNull(type, nameof(type));

            return typeof(Resource).IsAssignableFrom(type) || typeof(RawResourceElement).IsAssignableFrom(type);
        }

        public override async Task WriteResponseBodyAsync(OutputFormatterWriteContext context, Encoding selectedEncoding)
        {
            EnsureArg.IsNotNull(context, nameof(context));
            EnsureArg.IsNotNull(selectedEncoding, nameof(selectedEncoding));

            context.HttpContext.AllowSynchronousIO();

            HttpResponse response = context.HttpContext.Response;

            var elementsSearchParameter = context.HttpContext.GetElementsOrDefault();
            var summarySearchParameter = context.HttpContext.GetSummaryTypeOrDefault();
            var pretty = context.HttpContext.GetPrettyOrDefault();
            Resource resource = null;

            if (context.Object is Hl7.Fhir.Model.Bundle)
            {
                var bundle = context.Object as Hl7.Fhir.Model.Bundle;
                resource = bundle;

                if (elementsSearchParameter?.Any() == true ||
                    summarySearchParameter != Hl7.Fhir.Rest.SummaryType.False ||
                    !bundle.Entry.All(x => x is RawBundleEntryComponent))
                {
                    // _elements is not supported for a raw resource, revert to using FhirJsonSerializer
                    foreach (var rawBundleEntryComponent in bundle.Entry)
                    {
                        if (rawBundleEntryComponent is RawBundleEntryComponent rawBundleEntryComponent)
                        {
                            rawBundleEntryComponent.Resource = rawBundleEntryComponent.ResourceElement.ToPoco<Resource>(_deserializer);
                        }
                    }
                }
                else
                {
                    await _bundleSerializer.Serialize(context.Object as Hl7.Fhir.Model.Bundle, context.HttpContext.Response.Body, pretty);
                    return;
                }
            }
            else if (context.Object is RawResourceElement)
            {
                if ((elementsSearchParameter != null && elementsSearchParameter.Any()) ||
                    summarySearchParameter != Hl7.Fhir.Rest.SummaryType.False)
                {
                    // _elements is not supported for a raw resource, revert to using FhirJsonSerializer
                    resource = (context.Object as RawResourceElement).ToPoco<Resource>(_deserializer);
                }
                else
                {
                    await (context.Object as RawResourceElement).SerializeToStreamAsUtf8Json(context.HttpContext.Response.Body);
                    return;
                }
            }
            else
            {
                resource = (Resource)context.Object;
            }

            using (TextWriter textWriter = context.WriterFactory(response.Body, selectedEncoding))
            using (var jsonWriter = new JsonTextWriter(textWriter))
            {
                jsonWriter.ArrayPool = _charPool;

                if (pretty)
                {
                    jsonWriter.Formatting = Formatting.Indented;
                }

                _fhirJsonSerializer.Serialize(resource, jsonWriter, summarySearchParameter, elementsSearchParameter);
                await jsonWriter.FlushAsync();
            }
        }
    }
}

---- Semantic diagnostics *before* transformation ----

---- Semantic diagnostics *after* transformation ----
D:\a\1\s\src\Microsoft.Health.Fhir.Shared.Api\Features\Formatters\FhirJsonOutputFormatter.cs(91,29): error CS0841: Cannot use local variable 'rawBundleEntryComponent' before it is declared,D:\a\1\s\src\Microsoft.Health.Fhir.Shared.Api\Features\Formatters\FhirJsonOutputFormatter.cs(91,80): error CS0136: A local or parameter named 'rawBundleEntryComponent' cannot be declared in this scope because that name is used in an enclosing local scope to define a local or parameter
######################################################################


######################################################################
Nr: 3 - UsePatternMatchingRewriterR8
Filepath: D:\a\1\s\test\Microsoft.Health.Fhir.Shared.Tests.E2E\Rest\Metric\MetricTests.cs
Description: Error: The created Syntax Tree is semantically incorrect.
------------------------------------------------------------------------
---- Original Tree ----
using System;
using System.Collections.Generic;
using System.Linq;
using System.Net.Http;
using System.Threading.Tasks;
using Microsoft.Health.Fhir.Api.Features.ApiNotifications;
using Microsoft.Health.Fhir.Core.Extensions;
using Microsoft.Health.Fhir.CosmosDb.Features.Metrics;
using Microsoft.Health.Fhir.CosmosDb.Features.Storage;
using Microsoft.Health.Fhir.Shared.Tests.E2E.Rest.Metric;
using Microsoft.Health.Fhir.Tests.Common;
using Microsoft.Health.Fhir.Tests.Common.FixtureParameters;
using Microsoft.Health.Fhir.Tests.E2E.Common;
using Microsoft.Health.Fhir.Tests.E2E.Rest.Audit;
using Microsoft.Health.Test.Utilities;
using Xunit;
using Task = System.Threading.Tasks.Task;

namespace Microsoft.Health.Fhir.Tests.E2E.Rest.Metric
{
    [HttpIntegrationFixtureArgumentSets(DataStore.CosmosDb, Format.Json)]
    public class MetricTests : IClassFixture<MetricTestFixture>, IAsyncLifetime
    {
        private readonly MetricTestFixture _fixture;
        private readonly TestFhirClient _client;

        private readonly MetricHandler _metricHandler;

        public MetricTests(MetricTestFixture fixture)
        {
            _fixture = fixture;
            _client = fixture.TestFhirClient;
            _metricHandler = _fixture?.MetricHandler;
        }

        public async Task InitializeAsync()
        {
            // Send an empty request to guarantee that there is a bearer token set and the call isn't recorded in the metric handler.
            await _client.HttpClient.SendAsync(new HttpRequestMessage(HttpMethod.Get, string.Empty));
        }

        public Task DisposeAsync()
        {
            return Task.CompletedTask;
        }

        [Fact]
        public async Task GivenAResource_WhenCreated_ThenCorrectNumberOfMetricNotificationsShouldBeEmitted()
        {
            _metricHandler?.ResetCount();

            await ExecuteAndValidate(
                async () =>
                {
                    var result = await _client.CreateAsync(Samples.GetDefaultObservation().ToPoco());
                    return result.Response;
                },
                (type: typeof(ApiResponseNotification), count: 1, resourceType: Samples.GetDefaultObservation().ToPoco().ResourceType.ToString()),
                (type: typeof(CosmosStorageRequestMetricsNotification), count: 1, resourceType: Samples.GetDefaultObservation().ToPoco().ResourceType.ToString()));
        }

        [Fact]
        public async Task GivenHealthCheckPath_WhenInvoked_MetricNotificationsNotEmitted()
        {
            _metricHandler?.ResetCount();

            await ExecuteAndValidate(
                () => _client.HttpClient.GetAsync("/health/check"),
                (type: typeof(ApiResponseNotification), count: 0, resourceType: (string)null),
                (type: typeof(CosmosStorageRequestMetricsNotification), count: 2, resourceType: (string)null));
        }

        [Trait(Traits.Category, Categories.Batch)]
        [Trait(Traits.Priority, Priority.One)]
        [Fact]
        public async Task GivenABatch_WhenInvokedAtCosmosDb_MetricNotificationsShouldBeEmitted()
        {
            _metricHandler?.ResetCount();

            await ExecuteAndValidate(
                () => _client.PostBundleAsync(Samples.GetDefaultBatch().ToPoco()),
                (type: typeof(ApiResponseNotification), count: 1, resourceType: Samples.GetDefaultBatch().ToPoco().ResourceType.ToString()),
                (type: typeof(CosmosStorageRequestMetricsNotification), count: 10, resourceType: Samples.GetDefaultBatch().ToPoco().ResourceType.ToString()));
        }

        [HttpIntegrationFixtureArgumentSets(DataStore.SqlServer, Format.Json)]
        [Trait(Traits.Category, Categories.Batch)]
        [Trait(Traits.Priority, Priority.One)]
        [Fact]
        public async Task GivenABatch_WhenInvokedAtSqlServer_MetricNotificationsShouldBeEmitted()
        {
            _metricHandler?.ResetCount();

            await ExecuteAndValidate(
                () => _client.PostBundleAsync(Samples.GetDefaultBatch().ToPoco()),
                (type: typeof(ApiResponseNotification), count: 1, resourceType: Samples.GetDefaultBatch().ToPoco().ResourceType.ToString()));
        }

        [HttpIntegrationFixtureArgumentSets(dataStores: DataStore.SqlServer)]
        [Trait(Traits.Category, Categories.Transaction)]
        [Trait(Traits.Priority, Priority.One)]
        [Fact]
        public async Task GivenATransaction_WhenInvoked_MetricNotificationsShouldBeEmitted()
        {
            _metricHandler?.ResetCount();

            var requestBundle = Samples.GetJsonSample("Bundle-TransactionWithValidBundleEntry").ToPoco<Hl7.Fhir.Model.Bundle>();

            await ExecuteAndValidate(
                () => _client.PostBundleAsync(requestBundle),
                (type: typeof(ApiResponseNotification), count: 1, resourceType: requestBundle.ResourceType.ToString()));
        }

        private async Task ExecuteAndValidate<T>(Func<Task<T>> action, params (Type type, int count, string resourceType)[] expectedNotifications)
        {
            if (!_fixture.IsUsingInProcTestServer)
            {
                // This test only works with the in-proc server with a customized metric handler.
                return;
            }

            var result = await action() as HttpResponseMessage;

            foreach ((Type type, int count, string resourceType) expectedNotification in expectedNotifications)
            {
                if (expectedNotification.count == 0)
                {
                    Assert.False(_metricHandler.NotificationMapping.TryGetValue(expectedNotification.type, out var _));
                    continue;
                }

                Assert.Equal(expectedNotification.count, _metricHandler.NotificationMapping[expectedNotification.type].Count);

                if (result != null && expectedNotification.type == typeof(CosmosStorageRequestMetricsNotification))
                {
                    result.Headers.TryGetValues(CosmosDbHeaders.RequestCharge, out IEnumerable<string> values);

                    Assert.NotNull(values);

                    Assert.Equal(expectedNotification.count, values.Count());

                    foreach (var notification in _metricHandler.NotificationMapping[expectedNotification.type])
                    {
                        var casted = notification as CosmosStorageRequestMetricsNotification;
                        Assert.Equal(expectedNotification.resourceType, casted.ResourceType);
                    }
                }

                if (result != null && expectedNotification.type == typeof(ApiResponseNotification))
                {
                    foreach (var notification in _metricHandler.NotificationMapping[expectedNotification.type])
                    {
                        var casted = notification as ApiResponseNotification;
                        Assert.Equal(expectedNotification.resourceType, casted.ResourceType);
                    }
                }
            }
        }
    }
}

---- Transformed Tree ----
using System;
using System.Collections.Generic;
using System.Linq;
using System.Net.Http;
using System.Threading.Tasks;
using Microsoft.Health.Fhir.Api.Features.ApiNotifications;
using Microsoft.Health.Fhir.Core.Extensions;
using Microsoft.Health.Fhir.CosmosDb.Features.Metrics;
using Microsoft.Health.Fhir.CosmosDb.Features.Storage;
using Microsoft.Health.Fhir.Shared.Tests.E2E.Rest.Metric;
using Microsoft.Health.Fhir.Tests.Common;
using Microsoft.Health.Fhir.Tests.Common.FixtureParameters;
using Microsoft.Health.Fhir.Tests.E2E.Common;
using Microsoft.Health.Fhir.Tests.E2E.Rest.Audit;
using Microsoft.Health.Test.Utilities;
using Xunit;
using Task = System.Threading.Tasks.Task;

namespace Microsoft.Health.Fhir.Tests.E2E.Rest.Metric
{
    [HttpIntegrationFixtureArgumentSets(DataStore.CosmosDb, Format.Json)]
    public class MetricTests : IClassFixture<MetricTestFixture>, IAsyncLifetime
    {
        private readonly MetricTestFixture _fixture;
        private readonly TestFhirClient _client;

        private readonly MetricHandler _metricHandler;

        public MetricTests(MetricTestFixture fixture)
        {
            _fixture = fixture;
            _client = fixture.TestFhirClient;
            _metricHandler = _fixture?.MetricHandler;
        }

        public async Task InitializeAsync()
        {
            // Send an empty request to guarantee that there is a bearer token set and the call isn't recorded in the metric handler.
            await _client.HttpClient.SendAsync(new HttpRequestMessage(HttpMethod.Get, string.Empty));
        }

        public Task DisposeAsync()
        {
            return Task.CompletedTask;
        }

        [Fact]
        public async Task GivenAResource_WhenCreated_ThenCorrectNumberOfMetricNotificationsShouldBeEmitted()
        {
            _metricHandler?.ResetCount();

            await ExecuteAndValidate(
                async () =>
                {
                    var result = await _client.CreateAsync(Samples.GetDefaultObservation().ToPoco());
                    return result.Response;
                },
                (type: typeof(ApiResponseNotification), count: 1, resourceType: Samples.GetDefaultObservation().ToPoco().ResourceType.ToString()),
                (type: typeof(CosmosStorageRequestMetricsNotification), count: 1, resourceType: Samples.GetDefaultObservation().ToPoco().ResourceType.ToString()));
        }

        [Fact]
        public async Task GivenHealthCheckPath_WhenInvoked_MetricNotificationsNotEmitted()
        {
            _metricHandler?.ResetCount();

            await ExecuteAndValidate(
                () => _client.HttpClient.GetAsync("/health/check"),
                (type: typeof(ApiResponseNotification), count: 0, resourceType: (string)null),
                (type: typeof(CosmosStorageRequestMetricsNotification), count: 2, resourceType: (string)null));
        }

        [Trait(Traits.Category, Categories.Batch)]
        [Trait(Traits.Priority, Priority.One)]
        [Fact]
        public async Task GivenABatch_WhenInvokedAtCosmosDb_MetricNotificationsShouldBeEmitted()
        {
            _metricHandler?.ResetCount();

            await ExecuteAndValidate(
                () => _client.PostBundleAsync(Samples.GetDefaultBatch().ToPoco()),
                (type: typeof(ApiResponseNotification), count: 1, resourceType: Samples.GetDefaultBatch().ToPoco().ResourceType.ToString()),
                (type: typeof(CosmosStorageRequestMetricsNotification), count: 10, resourceType: Samples.GetDefaultBatch().ToPoco().ResourceType.ToString()));
        }

        [HttpIntegrationFixtureArgumentSets(DataStore.SqlServer, Format.Json)]
        [Trait(Traits.Category, Categories.Batch)]
        [Trait(Traits.Priority, Priority.One)]
        [Fact]
        public async Task GivenABatch_WhenInvokedAtSqlServer_MetricNotificationsShouldBeEmitted()
        {
            _metricHandler?.ResetCount();

            await ExecuteAndValidate(
                () => _client.PostBundleAsync(Samples.GetDefaultBatch().ToPoco()),
                (type: typeof(ApiResponseNotification), count: 1, resourceType: Samples.GetDefaultBatch().ToPoco().ResourceType.ToString()));
        }

        [HttpIntegrationFixtureArgumentSets(dataStores: DataStore.SqlServer)]
        [Trait(Traits.Category, Categories.Transaction)]
        [Trait(Traits.Priority, Priority.One)]
        [Fact]
        public async Task GivenATransaction_WhenInvoked_MetricNotificationsShouldBeEmitted()
        {
            _metricHandler?.ResetCount();

            var requestBundle = Samples.GetJsonSample("Bundle-TransactionWithValidBundleEntry").ToPoco<Hl7.Fhir.Model.Bundle>();

            await ExecuteAndValidate(
                () => _client.PostBundleAsync(requestBundle),
                (type: typeof(ApiResponseNotification), count: 1, resourceType: requestBundle.ResourceType.ToString()));
        }

        private async Task ExecuteAndValidate<T>(Func<Task<T>> action, params (Type type, int count, string resourceType)[] expectedNotifications)
        {
            if (!_fixture.IsUsingInProcTestServer)
            {
                // This test only works with the in-proc server with a customized metric handler.
                return;
            }

            foreach ((Type type, int count, string resourceType) expectedNotification in expectedNotifications)
            {
                if (expectedNotification.count == 0)
                {
                    Assert.False(_metricHandler.NotificationMapping.TryGetValue(expectedNotification.type, out var _));
                    continue;
                }

                Assert.Equal(expectedNotification.count, _metricHandler.NotificationMapping[expectedNotification.type].Count);

                if (await action()is HttpResponseMessage result && expectedNotification.type == typeof(CosmosStorageRequestMetricsNotification))
                {
                    result.Headers.TryGetValues(CosmosDbHeaders.RequestCharge, out IEnumerable<string> values);

                    Assert.NotNull(values);

                    Assert.Equal(expectedNotification.count, values.Count());

                    foreach (var notification in _metricHandler.NotificationMapping[expectedNotification.type])
                    {
                        var casted = notification as CosmosStorageRequestMetricsNotification;
                        Assert.Equal(expectedNotification.resourceType, casted.ResourceType);
                    }
                }

                if (await action()is HttpResponseMessage result && expectedNotification.type == typeof(ApiResponseNotification))
                {
                    foreach (var notification in _metricHandler.NotificationMapping[expectedNotification.type])
                    {
                        var casted = notification as ApiResponseNotification;
                        Assert.Equal(expectedNotification.resourceType, casted.ResourceType);
                    }
                }
            }
        }
    }
}

---- Semantic diagnostics *before* transformation ----

---- Semantic diagnostics *after* transformation ----
D:\a\1\s\test\Microsoft.Health.Fhir.Shared.Tests.E2E\Rest\Metric\MetricTests.cs(152,58): error CS0128: A local variable or function named 'result' is already defined in this scope
######################################################################


######################################################################
Nr: 4 - UsePatternMatchingRewriterR8
Filepath: D:\a\1\s\test\Microsoft.Health.Fhir.Shared.Tests.E2E\Rest\Metric\MetricTests.cs
Description: Error: The created Syntax Tree is semantically incorrect.
------------------------------------------------------------------------
---- Original Tree ----
using System;
using System.Collections.Generic;
using System.Linq;
using System.Net.Http;
using System.Threading.Tasks;
using Microsoft.Health.Fhir.Api.Features.ApiNotifications;
using Microsoft.Health.Fhir.Core.Extensions;
using Microsoft.Health.Fhir.CosmosDb.Features.Metrics;
using Microsoft.Health.Fhir.CosmosDb.Features.Storage;
using Microsoft.Health.Fhir.Shared.Tests.E2E.Rest.Metric;
using Microsoft.Health.Fhir.Tests.Common;
using Microsoft.Health.Fhir.Tests.Common.FixtureParameters;
using Microsoft.Health.Fhir.Tests.E2E.Common;
using Microsoft.Health.Fhir.Tests.E2E.Rest.Audit;
using Microsoft.Health.Test.Utilities;
using Xunit;
using Task = System.Threading.Tasks.Task;

namespace Microsoft.Health.Fhir.Tests.E2E.Rest.Metric
{
    [HttpIntegrationFixtureArgumentSets(DataStore.CosmosDb, Format.Json)]
    public class MetricTests : IClassFixture<MetricTestFixture>, IAsyncLifetime
    {
        private readonly MetricTestFixture _fixture;
        private readonly TestFhirClient _client;

        private readonly MetricHandler _metricHandler;

        public MetricTests(MetricTestFixture fixture)
        {
            _fixture = fixture;
            _client = fixture.TestFhirClient;
            _metricHandler = _fixture?.MetricHandler;
        }

        public async Task InitializeAsync()
        {
            // Send an empty request to guarantee that there is a bearer token set and the call isn't recorded in the metric handler.
            await _client.HttpClient.SendAsync(new HttpRequestMessage(HttpMethod.Get, string.Empty));
        }

        public Task DisposeAsync()
        {
            return Task.CompletedTask;
        }

        [Fact]
        public async Task GivenAResource_WhenCreated_ThenCorrectNumberOfMetricNotificationsShouldBeEmitted()
        {
            _metricHandler?.ResetCount();

            await ExecuteAndValidate(
                async () =>
                {
                    var result = await _client.CreateAsync(Samples.GetDefaultObservation().ToPoco());
                    return result.Response;
                },
                (type: typeof(ApiResponseNotification), count: 1, resourceType: Samples.GetDefaultObservation().ToPoco().ResourceType.ToString()),
                (type: typeof(CosmosStorageRequestMetricsNotification), count: 1, resourceType: Samples.GetDefaultObservation().ToPoco().ResourceType.ToString()));
        }

        [Fact]
        public async Task GivenHealthCheckPath_WhenInvoked_MetricNotificationsNotEmitted()
        {
            _metricHandler?.ResetCount();

            await ExecuteAndValidate(
                () => _client.HttpClient.GetAsync("/health/check"),
                (type: typeof(ApiResponseNotification), count: 0, resourceType: (string)null),
                (type: typeof(CosmosStorageRequestMetricsNotification), count: 2, resourceType: (string)null));
        }

        [Trait(Traits.Category, Categories.Batch)]
        [Trait(Traits.Priority, Priority.One)]
        [Fact]
        public async Task GivenABatch_WhenInvokedAtCosmosDb_MetricNotificationsShouldBeEmitted()
        {
            _metricHandler?.ResetCount();

            await ExecuteAndValidate(
                () => _client.PostBundleAsync(Samples.GetDefaultBatch().ToPoco()),
                (type: typeof(ApiResponseNotification), count: 1, resourceType: Samples.GetDefaultBatch().ToPoco().ResourceType.ToString()),
                (type: typeof(CosmosStorageRequestMetricsNotification), count: 10, resourceType: Samples.GetDefaultBatch().ToPoco().ResourceType.ToString()));
        }

        [HttpIntegrationFixtureArgumentSets(DataStore.SqlServer, Format.Json)]
        [Trait(Traits.Category, Categories.Batch)]
        [Trait(Traits.Priority, Priority.One)]
        [Fact]
        public async Task GivenABatch_WhenInvokedAtSqlServer_MetricNotificationsShouldBeEmitted()
        {
            _metricHandler?.ResetCount();

            await ExecuteAndValidate(
                () => _client.PostBundleAsync(Samples.GetDefaultBatch().ToPoco()),
                (type: typeof(ApiResponseNotification), count: 1, resourceType: Samples.GetDefaultBatch().ToPoco().ResourceType.ToString()));
        }

        [HttpIntegrationFixtureArgumentSets(dataStores: DataStore.SqlServer)]
        [Trait(Traits.Category, Categories.Transaction)]
        [Trait(Traits.Priority, Priority.One)]
        [Fact]
        public async Task GivenATransaction_WhenInvoked_MetricNotificationsShouldBeEmitted()
        {
            _metricHandler?.ResetCount();

            var requestBundle = Samples.GetJsonSample("Bundle-TransactionWithValidBundleEntry").ToPoco<Hl7.Fhir.Model.Bundle>();

            await ExecuteAndValidate(
                () => _client.PostBundleAsync(requestBundle),
                (type: typeof(ApiResponseNotification), count: 1, resourceType: requestBundle.ResourceType.ToString()));
        }

        private async Task ExecuteAndValidate<T>(Func<Task<T>> action, params (Type type, int count, string resourceType)[] expectedNotifications)
        {
            if (!_fixture.IsUsingInProcTestServer)
            {
                // This test only works with the in-proc server with a customized metric handler.
                return;
            }

            var result = await action() as HttpResponseMessage;

            foreach ((Type type, int count, string resourceType) expectedNotification in expectedNotifications)
            {
                if (expectedNotification.count == 0)
                {
                    Assert.False(_metricHandler.NotificationMapping.TryGetValue(expectedNotification.type, out var _));
                    continue;
                }

                Assert.Equal(expectedNotification.count, _metricHandler.NotificationMapping[expectedNotification.type].Count);

                if (result != null && expectedNotification.type == typeof(CosmosStorageRequestMetricsNotification))
                {
                    result.Headers.TryGetValues(CosmosDbHeaders.RequestCharge, out IEnumerable<string> values);

                    Assert.NotNull(values);

                    Assert.Equal(expectedNotification.count, values.Count());

                    foreach (var notification in _metricHandler.NotificationMapping[expectedNotification.type])
                    {
                        var casted = notification as CosmosStorageRequestMetricsNotification;
                        Assert.Equal(expectedNotification.resourceType, casted.ResourceType);
                    }
                }

                if (result != null && expectedNotification.type == typeof(ApiResponseNotification))
                {
                    foreach (var notification in _metricHandler.NotificationMapping[expectedNotification.type])
                    {
                        var casted = notification as ApiResponseNotification;
                        Assert.Equal(expectedNotification.resourceType, casted.ResourceType);
                    }
                }
            }
        }
    }
}

---- Transformed Tree ----
using System;
using System.Collections.Generic;
using System.Linq;
using System.Net.Http;
using System.Threading.Tasks;
using Microsoft.Health.Fhir.Api.Features.ApiNotifications;
using Microsoft.Health.Fhir.Core.Extensions;
using Microsoft.Health.Fhir.CosmosDb.Features.Metrics;
using Microsoft.Health.Fhir.CosmosDb.Features.Storage;
using Microsoft.Health.Fhir.Shared.Tests.E2E.Rest.Metric;
using Microsoft.Health.Fhir.Tests.Common;
using Microsoft.Health.Fhir.Tests.Common.FixtureParameters;
using Microsoft.Health.Fhir.Tests.E2E.Common;
using Microsoft.Health.Fhir.Tests.E2E.Rest.Audit;
using Microsoft.Health.Test.Utilities;
using Xunit;
using Task = System.Threading.Tasks.Task;

namespace Microsoft.Health.Fhir.Tests.E2E.Rest.Metric
{
    [HttpIntegrationFixtureArgumentSets(DataStore.CosmosDb, Format.Json)]
    public class MetricTests : IClassFixture<MetricTestFixture>, IAsyncLifetime
    {
        private readonly MetricTestFixture _fixture;
        private readonly TestFhirClient _client;

        private readonly MetricHandler _metricHandler;

        public MetricTests(MetricTestFixture fixture)
        {
            _fixture = fixture;
            _client = fixture.TestFhirClient;
            _metricHandler = _fixture?.MetricHandler;
        }

        public async Task InitializeAsync()
        {
            // Send an empty request to guarantee that there is a bearer token set and the call isn't recorded in the metric handler.
            await _client.HttpClient.SendAsync(new HttpRequestMessage(HttpMethod.Get, string.Empty));
        }

        public Task DisposeAsync()
        {
            return Task.CompletedTask;
        }

        [Fact]
        public async Task GivenAResource_WhenCreated_ThenCorrectNumberOfMetricNotificationsShouldBeEmitted()
        {
            _metricHandler?.ResetCount();

            await ExecuteAndValidate(
                async () =>
                {
                    var result = await _client.CreateAsync(Samples.GetDefaultObservation().ToPoco());
                    return result.Response;
                },
                (type: typeof(ApiResponseNotification), count: 1, resourceType: Samples.GetDefaultObservation().ToPoco().ResourceType.ToString()),
                (type: typeof(CosmosStorageRequestMetricsNotification), count: 1, resourceType: Samples.GetDefaultObservation().ToPoco().ResourceType.ToString()));
        }

        [Fact]
        public async Task GivenHealthCheckPath_WhenInvoked_MetricNotificationsNotEmitted()
        {
            _metricHandler?.ResetCount();

            await ExecuteAndValidate(
                () => _client.HttpClient.GetAsync("/health/check"),
                (type: typeof(ApiResponseNotification), count: 0, resourceType: (string)null),
                (type: typeof(CosmosStorageRequestMetricsNotification), count: 2, resourceType: (string)null));
        }

        [Trait(Traits.Category, Categories.Batch)]
        [Trait(Traits.Priority, Priority.One)]
        [Fact]
        public async Task GivenABatch_WhenInvokedAtCosmosDb_MetricNotificationsShouldBeEmitted()
        {
            _metricHandler?.ResetCount();

            await ExecuteAndValidate(
                () => _client.PostBundleAsync(Samples.GetDefaultBatch().ToPoco()),
                (type: typeof(ApiResponseNotification), count: 1, resourceType: Samples.GetDefaultBatch().ToPoco().ResourceType.ToString()),
                (type: typeof(CosmosStorageRequestMetricsNotification), count: 10, resourceType: Samples.GetDefaultBatch().ToPoco().ResourceType.ToString()));
        }

        [HttpIntegrationFixtureArgumentSets(DataStore.SqlServer, Format.Json)]
        [Trait(Traits.Category, Categories.Batch)]
        [Trait(Traits.Priority, Priority.One)]
        [Fact]
        public async Task GivenABatch_WhenInvokedAtSqlServer_MetricNotificationsShouldBeEmitted()
        {
            _metricHandler?.ResetCount();

            await ExecuteAndValidate(
                () => _client.PostBundleAsync(Samples.GetDefaultBatch().ToPoco()),
                (type: typeof(ApiResponseNotification), count: 1, resourceType: Samples.GetDefaultBatch().ToPoco().ResourceType.ToString()));
        }

        [HttpIntegrationFixtureArgumentSets(dataStores: DataStore.SqlServer)]
        [Trait(Traits.Category, Categories.Transaction)]
        [Trait(Traits.Priority, Priority.One)]
        [Fact]
        public async Task GivenATransaction_WhenInvoked_MetricNotificationsShouldBeEmitted()
        {
            _metricHandler?.ResetCount();

            var requestBundle = Samples.GetJsonSample("Bundle-TransactionWithValidBundleEntry").ToPoco<Hl7.Fhir.Model.Bundle>();

            await ExecuteAndValidate(
                () => _client.PostBundleAsync(requestBundle),
                (type: typeof(ApiResponseNotification), count: 1, resourceType: requestBundle.ResourceType.ToString()));
        }

        private async Task ExecuteAndValidate<T>(Func<Task<T>> action, params (Type type, int count, string resourceType)[] expectedNotifications)
        {
            if (!_fixture.IsUsingInProcTestServer)
            {
                // This test only works with the in-proc server with a customized metric handler.
                return;
            }

            foreach ((Type type, int count, string resourceType) expectedNotification in expectedNotifications)
            {
                if (expectedNotification.count == 0)
                {
                    Assert.False(_metricHandler.NotificationMapping.TryGetValue(expectedNotification.type, out var _));
                    continue;
                }

                Assert.Equal(expectedNotification.count, _metricHandler.NotificationMapping[expectedNotification.type].Count);

                if (await action()is HttpResponseMessage result && expectedNotification.type == typeof(CosmosStorageRequestMetricsNotification))
                {
                    result.Headers.TryGetValues(CosmosDbHeaders.RequestCharge, out IEnumerable<string> values);

                    Assert.NotNull(values);

                    Assert.Equal(expectedNotification.count, values.Count());

                    foreach (var notification in _metricHandler.NotificationMapping[expectedNotification.type])
                    {
                        var casted = notification as CosmosStorageRequestMetricsNotification;
                        Assert.Equal(expectedNotification.resourceType, casted.ResourceType);
                    }
                }

                if (await action()is HttpResponseMessage result && expectedNotification.type == typeof(ApiResponseNotification))
                {
                    foreach (var notification in _metricHandler.NotificationMapping[expectedNotification.type])
                    {
                        var casted = notification as ApiResponseNotification;
                        Assert.Equal(expectedNotification.resourceType, casted.ResourceType);
                    }
                }
            }
        }
    }
}

---- Semantic diagnostics *before* transformation ----

---- Semantic diagnostics *after* transformation ----
D:\a\1\s\test\Microsoft.Health.Fhir.Shared.Tests.E2E\Rest\Metric\MetricTests.cs(152,58): error CS0128: A local variable or function named 'result' is already defined in this scope
######################################################################


######################################################################
Nr: 5 - TypeCheckAndCastRewriterR5
Filepath: D:\a\1\s\src\Microsoft.Health.Fhir.Shared.Api\Features\Formatters\FhirJsonOutputFormatter.cs
Description: Error: The created Syntax Tree is semantically incorrect.
------------------------------------------------------------------------
---- Original Tree ----
using System;
using System.Buffers;
using System.IO;
using System.Linq;
using System.Text;
using EnsureThat;
using Hl7.Fhir.Model;
using Hl7.Fhir.Serialization;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc.Formatters;
using Microsoft.Health.Fhir.Api.Features.ContentTypes;
using Microsoft.Health.Fhir.Api.Features.Resources.Bundle;
using Microsoft.Health.Fhir.Core.Extensions;
using Microsoft.Health.Fhir.Core.Features.Persistence;
using Microsoft.Health.Fhir.Core.Models;
using Microsoft.Health.Fhir.Shared.Core.Features.Search;
using Newtonsoft.Json;
using Task = System.Threading.Tasks.Task;

namespace Microsoft.Health.Fhir.Api.Features.Formatters
{
    internal class FhirJsonOutputFormatter : TextOutputFormatter
    {
        private readonly FhirJsonSerializer _fhirJsonSerializer;
        private readonly ResourceDeserializer _deserializer;
        private readonly IArrayPool<char> _charPool;
        private readonly BundleSerializer _bundleSerializer;

        public FhirJsonOutputFormatter(
            FhirJsonSerializer fhirJsonSerializer,
            ResourceDeserializer deserializer,
            ArrayPool<char> charPool,
            BundleSerializer bundleSerializer)
        {
            EnsureArg.IsNotNull(fhirJsonSerializer, nameof(fhirJsonSerializer));
            EnsureArg.IsNotNull(deserializer, nameof(deserializer));
            EnsureArg.IsNotNull(charPool, nameof(charPool));
            EnsureArg.IsNotNull(bundleSerializer, nameof(bundleSerializer));

            _fhirJsonSerializer = fhirJsonSerializer;
            _deserializer = deserializer;
            _charPool = new JsonArrayPool(charPool);
            _bundleSerializer = bundleSerializer;

            SupportedEncodings.Add(Encoding.UTF8);
            SupportedEncodings.Add(Encoding.Unicode);
            SupportedMediaTypes.Add(KnownContentTypes.JsonContentType);
            SupportedMediaTypes.Add(KnownMediaTypeHeaderValues.ApplicationJson);
            SupportedMediaTypes.Add(KnownMediaTypeHeaderValues.TextJson);
            SupportedMediaTypes.Add(KnownMediaTypeHeaderValues.ApplicationAnyJsonSyntax);
        }

        protected override bool CanWriteType(Type type)
        {
            EnsureArg.IsNotNull(type, nameof(type));

            return typeof(Resource).IsAssignableFrom(type) || typeof(RawResourceElement).IsAssignableFrom(type);
        }

        public override async Task WriteResponseBodyAsync(OutputFormatterWriteContext context, Encoding selectedEncoding)
        {
            EnsureArg.IsNotNull(context, nameof(context));
            EnsureArg.IsNotNull(selectedEncoding, nameof(selectedEncoding));

            context.HttpContext.AllowSynchronousIO();

            HttpResponse response = context.HttpContext.Response;

            var elementsSearchParameter = context.HttpContext.GetElementsOrDefault();
            var summarySearchParameter = context.HttpContext.GetSummaryTypeOrDefault();
            var pretty = context.HttpContext.GetPrettyOrDefault();
            Resource resource = null;

            if (context.Object is Hl7.Fhir.Model.Bundle)
            {
                var bundle = context.Object as Hl7.Fhir.Model.Bundle;
                resource = bundle;

                if (elementsSearchParameter?.Any() == true ||
                    summarySearchParameter != Hl7.Fhir.Rest.SummaryType.False ||
                    !bundle.Entry.All(x => x is RawBundleEntryComponent))
                {
                    // _elements is not supported for a raw resource, revert to using FhirJsonSerializer
                    foreach (var rawBundleEntryComponent in bundle.Entry)
                    {
                        if (rawBundleEntryComponent is RawBundleEntryComponent)
                        {
                            rawBundleEntryComponent.Resource = ((RawBundleEntryComponent)rawBundleEntryComponent).ResourceElement.ToPoco<Resource>(_deserializer);
                        }
                    }
                }
                else
                {
                    await _bundleSerializer.Serialize(context.Object as Hl7.Fhir.Model.Bundle, context.HttpContext.Response.Body, pretty);
                    return;
                }
            }
            else if (context.Object is RawResourceElement)
            {
                if ((elementsSearchParameter != null && elementsSearchParameter.Any()) ||
                    summarySearchParameter != Hl7.Fhir.Rest.SummaryType.False)
                {
                    // _elements is not supported for a raw resource, revert to using FhirJsonSerializer
                    resource = (context.Object as RawResourceElement).ToPoco<Resource>(_deserializer);
                }
                else
                {
                    await (context.Object as RawResourceElement).SerializeToStreamAsUtf8Json(context.HttpContext.Response.Body);
                    return;
                }
            }
            else
            {
                resource = (Resource)context.Object;
            }

            using (TextWriter textWriter = context.WriterFactory(response.Body, selectedEncoding))
            using (var jsonWriter = new JsonTextWriter(textWriter))
            {
                jsonWriter.ArrayPool = _charPool;

                if (pretty)
                {
                    jsonWriter.Formatting = Formatting.Indented;
                }

                _fhirJsonSerializer.Serialize(resource, jsonWriter, summarySearchParameter, elementsSearchParameter);
                await jsonWriter.FlushAsync();
            }
        }
    }
}

---- Transformed Tree ----
using System;
using System.Buffers;
using System.IO;
using System.Linq;
using System.Text;
using EnsureThat;
using Hl7.Fhir.Model;
using Hl7.Fhir.Serialization;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc.Formatters;
using Microsoft.Health.Fhir.Api.Features.ContentTypes;
using Microsoft.Health.Fhir.Api.Features.Resources.Bundle;
using Microsoft.Health.Fhir.Core.Extensions;
using Microsoft.Health.Fhir.Core.Features.Persistence;
using Microsoft.Health.Fhir.Core.Models;
using Microsoft.Health.Fhir.Shared.Core.Features.Search;
using Newtonsoft.Json;
using Task = System.Threading.Tasks.Task;

namespace Microsoft.Health.Fhir.Api.Features.Formatters
{
    internal class FhirJsonOutputFormatter : TextOutputFormatter
    {
        private readonly FhirJsonSerializer _fhirJsonSerializer;
        private readonly ResourceDeserializer _deserializer;
        private readonly IArrayPool<char> _charPool;
        private readonly BundleSerializer _bundleSerializer;

        public FhirJsonOutputFormatter(
            FhirJsonSerializer fhirJsonSerializer,
            ResourceDeserializer deserializer,
            ArrayPool<char> charPool,
            BundleSerializer bundleSerializer)
        {
            EnsureArg.IsNotNull(fhirJsonSerializer, nameof(fhirJsonSerializer));
            EnsureArg.IsNotNull(deserializer, nameof(deserializer));
            EnsureArg.IsNotNull(charPool, nameof(charPool));
            EnsureArg.IsNotNull(bundleSerializer, nameof(bundleSerializer));

            _fhirJsonSerializer = fhirJsonSerializer;
            _deserializer = deserializer;
            _charPool = new JsonArrayPool(charPool);
            _bundleSerializer = bundleSerializer;

            SupportedEncodings.Add(Encoding.UTF8);
            SupportedEncodings.Add(Encoding.Unicode);
            SupportedMediaTypes.Add(KnownContentTypes.JsonContentType);
            SupportedMediaTypes.Add(KnownMediaTypeHeaderValues.ApplicationJson);
            SupportedMediaTypes.Add(KnownMediaTypeHeaderValues.TextJson);
            SupportedMediaTypes.Add(KnownMediaTypeHeaderValues.ApplicationAnyJsonSyntax);
        }

        protected override bool CanWriteType(Type type)
        {
            EnsureArg.IsNotNull(type, nameof(type));

            return typeof(Resource).IsAssignableFrom(type) || typeof(RawResourceElement).IsAssignableFrom(type);
        }

        public override async Task WriteResponseBodyAsync(OutputFormatterWriteContext context, Encoding selectedEncoding)
        {
            EnsureArg.IsNotNull(context, nameof(context));
            EnsureArg.IsNotNull(selectedEncoding, nameof(selectedEncoding));

            context.HttpContext.AllowSynchronousIO();

            HttpResponse response = context.HttpContext.Response;

            var elementsSearchParameter = context.HttpContext.GetElementsOrDefault();
            var summarySearchParameter = context.HttpContext.GetSummaryTypeOrDefault();
            var pretty = context.HttpContext.GetPrettyOrDefault();
            Resource resource = null;

            if (context.Object is Hl7.Fhir.Model.Bundle)
            {
                var bundle = context.Object as Hl7.Fhir.Model.Bundle;
                resource = bundle;

                if (elementsSearchParameter?.Any() == true ||
                    summarySearchParameter != Hl7.Fhir.Rest.SummaryType.False ||
                    !bundle.Entry.All(x => x is RawBundleEntryComponent))
                {
                    // _elements is not supported for a raw resource, revert to using FhirJsonSerializer
                    foreach (var rawBundleEntryComponent in bundle.Entry)
                    {
                        if (rawBundleEntryComponent is RawBundleEntryComponent rawBundleEntryComponent)
                        {
                            rawBundleEntryComponent.Resource = rawBundleEntryComponent.ResourceElement.ToPoco<Resource>(_deserializer);
                        }
                    }
                }
                else
                {
                    await _bundleSerializer.Serialize(context.Object as Hl7.Fhir.Model.Bundle, context.HttpContext.Response.Body, pretty);
                    return;
                }
            }
            else if (context.Object is RawResourceElement)
            {
                if ((elementsSearchParameter != null && elementsSearchParameter.Any()) ||
                    summarySearchParameter != Hl7.Fhir.Rest.SummaryType.False)
                {
                    // _elements is not supported for a raw resource, revert to using FhirJsonSerializer
                    resource = (context.Object as RawResourceElement).ToPoco<Resource>(_deserializer);
                }
                else
                {
                    await (context.Object as RawResourceElement).SerializeToStreamAsUtf8Json(context.HttpContext.Response.Body);
                    return;
                }
            }
            else
            {
                resource = (Resource)context.Object;
            }

            using (TextWriter textWriter = context.WriterFactory(response.Body, selectedEncoding))
            using (var jsonWriter = new JsonTextWriter(textWriter))
            {
                jsonWriter.ArrayPool = _charPool;

                if (pretty)
                {
                    jsonWriter.Formatting = Formatting.Indented;
                }

                _fhirJsonSerializer.Serialize(resource, jsonWriter, summarySearchParameter, elementsSearchParameter);
                await jsonWriter.FlushAsync();
            }
        }
    }
}

---- Semantic diagnostics *before* transformation ----

---- Semantic diagnostics *after* transformation ----
D:\a\1\s\src\Microsoft.Health.Fhir.Shared.Api\Features\Formatters\FhirJsonOutputFormatter.cs(91,29): error CS0841: Cannot use local variable 'rawBundleEntryComponent' before it is declared,D:\a\1\s\src\Microsoft.Health.Fhir.Shared.Api\Features\Formatters\FhirJsonOutputFormatter.cs(91,80): error CS0136: A local or parameter named 'rawBundleEntryComponent' cannot be declared in this scope because that name is used in an enclosing local scope to define a local or parameter
######################################################################


######################################################################
Nr: 6 - UsePatternMatchingRewriterR8
Filepath: D:\a\1\s\test\Microsoft.Health.Fhir.Shared.Tests.E2E\Rest\Metric\MetricTests.cs
Description: Error: The created Syntax Tree is semantically incorrect.
------------------------------------------------------------------------
---- Original Tree ----
using System;
using System.Collections.Generic;
using System.Linq;
using System.Net.Http;
using System.Threading.Tasks;
using Microsoft.Health.Fhir.Api.Features.ApiNotifications;
using Microsoft.Health.Fhir.Core.Extensions;
using Microsoft.Health.Fhir.CosmosDb.Features.Metrics;
using Microsoft.Health.Fhir.CosmosDb.Features.Storage;
using Microsoft.Health.Fhir.Shared.Tests.E2E.Rest.Metric;
using Microsoft.Health.Fhir.Tests.Common;
using Microsoft.Health.Fhir.Tests.Common.FixtureParameters;
using Microsoft.Health.Fhir.Tests.E2E.Common;
using Microsoft.Health.Fhir.Tests.E2E.Rest.Audit;
using Microsoft.Health.Test.Utilities;
using Xunit;
using Task = System.Threading.Tasks.Task;

namespace Microsoft.Health.Fhir.Tests.E2E.Rest.Metric
{
    [HttpIntegrationFixtureArgumentSets(DataStore.CosmosDb, Format.Json)]
    public class MetricTests : IClassFixture<MetricTestFixture>, IAsyncLifetime
    {
        private readonly MetricTestFixture _fixture;
        private readonly TestFhirClient _client;

        private readonly MetricHandler _metricHandler;

        public MetricTests(MetricTestFixture fixture)
        {
            _fixture = fixture;
            _client = fixture.TestFhirClient;
            _metricHandler = _fixture?.MetricHandler;
        }

        public async Task InitializeAsync()
        {
            // Send an empty request to guarantee that there is a bearer token set and the call isn't recorded in the metric handler.
            await _client.HttpClient.SendAsync(new HttpRequestMessage(HttpMethod.Get, string.Empty));
        }

        public Task DisposeAsync()
        {
            return Task.CompletedTask;
        }

        [Fact]
        public async Task GivenAResource_WhenCreated_ThenCorrectNumberOfMetricNotificationsShouldBeEmitted()
        {
            _metricHandler?.ResetCount();

            await ExecuteAndValidate(
                async () =>
                {
                    var result = await _client.CreateAsync(Samples.GetDefaultObservation().ToPoco());
                    return result.Response;
                },
                (type: typeof(ApiResponseNotification), count: 1, resourceType: Samples.GetDefaultObservation().ToPoco().ResourceType.ToString()),
                (type: typeof(CosmosStorageRequestMetricsNotification), count: 1, resourceType: Samples.GetDefaultObservation().ToPoco().ResourceType.ToString()));
        }

        [Fact]
        public async Task GivenHealthCheckPath_WhenInvoked_MetricNotificationsNotEmitted()
        {
            _metricHandler?.ResetCount();

            await ExecuteAndValidate(
                () => _client.HttpClient.GetAsync("/health/check"),
                (type: typeof(ApiResponseNotification), count: 0, resourceType: (string)null),
                (type: typeof(CosmosStorageRequestMetricsNotification), count: 2, resourceType: (string)null));
        }

        [Trait(Traits.Category, Categories.Batch)]
        [Trait(Traits.Priority, Priority.One)]
        [Fact]
        public async Task GivenABatch_WhenInvokedAtCosmosDb_MetricNotificationsShouldBeEmitted()
        {
            _metricHandler?.ResetCount();

            await ExecuteAndValidate(
                () => _client.PostBundleAsync(Samples.GetDefaultBatch().ToPoco()),
                (type: typeof(ApiResponseNotification), count: 1, resourceType: Samples.GetDefaultBatch().ToPoco().ResourceType.ToString()),
                (type: typeof(CosmosStorageRequestMetricsNotification), count: 10, resourceType: Samples.GetDefaultBatch().ToPoco().ResourceType.ToString()));
        }

        [HttpIntegrationFixtureArgumentSets(DataStore.SqlServer, Format.Json)]
        [Trait(Traits.Category, Categories.Batch)]
        [Trait(Traits.Priority, Priority.One)]
        [Fact]
        public async Task GivenABatch_WhenInvokedAtSqlServer_MetricNotificationsShouldBeEmitted()
        {
            _metricHandler?.ResetCount();

            await ExecuteAndValidate(
                () => _client.PostBundleAsync(Samples.GetDefaultBatch().ToPoco()),
                (type: typeof(ApiResponseNotification), count: 1, resourceType: Samples.GetDefaultBatch().ToPoco().ResourceType.ToString()));
        }

        [HttpIntegrationFixtureArgumentSets(dataStores: DataStore.SqlServer)]
        [Trait(Traits.Category, Categories.Transaction)]
        [Trait(Traits.Priority, Priority.One)]
        [Fact]
        public async Task GivenATransaction_WhenInvoked_MetricNotificationsShouldBeEmitted()
        {
            _metricHandler?.ResetCount();

            var requestBundle = Samples.GetJsonSample("Bundle-TransactionWithValidBundleEntry").ToPoco<Hl7.Fhir.Model.Bundle>();

            await ExecuteAndValidate(
                () => _client.PostBundleAsync(requestBundle),
                (type: typeof(ApiResponseNotification), count: 1, resourceType: requestBundle.ResourceType.ToString()));
        }

        private async Task ExecuteAndValidate<T>(Func<Task<T>> action, params (Type type, int count, string resourceType)[] expectedNotifications)
        {
            if (!_fixture.IsUsingInProcTestServer)
            {
                // This test only works with the in-proc server with a customized metric handler.
                return;
            }

            var result = await action() as HttpResponseMessage;

            foreach ((Type type, int count, string resourceType) expectedNotification in expectedNotifications)
            {
                if (expectedNotification.count == 0)
                {
                    Assert.False(_metricHandler.NotificationMapping.TryGetValue(expectedNotification.type, out var _));
                    continue;
                }

                Assert.Equal(expectedNotification.count, _metricHandler.NotificationMapping[expectedNotification.type].Count);

                if (result != null && expectedNotification.type == typeof(CosmosStorageRequestMetricsNotification))
                {
                    result.Headers.TryGetValues(CosmosDbHeaders.RequestCharge, out IEnumerable<string> values);

                    Assert.NotNull(values);

                    Assert.Equal(expectedNotification.count, values.Count());

                    foreach (var notification in _metricHandler.NotificationMapping[expectedNotification.type])
                    {
                        var casted = notification as CosmosStorageRequestMetricsNotification;
                        Assert.Equal(expectedNotification.resourceType, casted.ResourceType);
                    }
                }

                if (result != null && expectedNotification.type == typeof(ApiResponseNotification))
                {
                    foreach (var notification in _metricHandler.NotificationMapping[expectedNotification.type])
                    {
                        var casted = notification as ApiResponseNotification;
                        Assert.Equal(expectedNotification.resourceType, casted.ResourceType);
                    }
                }
            }
        }
    }
}

---- Transformed Tree ----
using System;
using System.Collections.Generic;
using System.Linq;
using System.Net.Http;
using System.Threading.Tasks;
using Microsoft.Health.Fhir.Api.Features.ApiNotifications;
using Microsoft.Health.Fhir.Core.Extensions;
using Microsoft.Health.Fhir.CosmosDb.Features.Metrics;
using Microsoft.Health.Fhir.CosmosDb.Features.Storage;
using Microsoft.Health.Fhir.Shared.Tests.E2E.Rest.Metric;
using Microsoft.Health.Fhir.Tests.Common;
using Microsoft.Health.Fhir.Tests.Common.FixtureParameters;
using Microsoft.Health.Fhir.Tests.E2E.Common;
using Microsoft.Health.Fhir.Tests.E2E.Rest.Audit;
using Microsoft.Health.Test.Utilities;
using Xunit;
using Task = System.Threading.Tasks.Task;

namespace Microsoft.Health.Fhir.Tests.E2E.Rest.Metric
{
    [HttpIntegrationFixtureArgumentSets(DataStore.CosmosDb, Format.Json)]
    public class MetricTests : IClassFixture<MetricTestFixture>, IAsyncLifetime
    {
        private readonly MetricTestFixture _fixture;
        private readonly TestFhirClient _client;

        private readonly MetricHandler _metricHandler;

        public MetricTests(MetricTestFixture fixture)
        {
            _fixture = fixture;
            _client = fixture.TestFhirClient;
            _metricHandler = _fixture?.MetricHandler;
        }

        public async Task InitializeAsync()
        {
            // Send an empty request to guarantee that there is a bearer token set and the call isn't recorded in the metric handler.
            await _client.HttpClient.SendAsync(new HttpRequestMessage(HttpMethod.Get, string.Empty));
        }

        public Task DisposeAsync()
        {
            return Task.CompletedTask;
        }

        [Fact]
        public async Task GivenAResource_WhenCreated_ThenCorrectNumberOfMetricNotificationsShouldBeEmitted()
        {
            _metricHandler?.ResetCount();

            await ExecuteAndValidate(
                async () =>
                {
                    var result = await _client.CreateAsync(Samples.GetDefaultObservation().ToPoco());
                    return result.Response;
                },
                (type: typeof(ApiResponseNotification), count: 1, resourceType: Samples.GetDefaultObservation().ToPoco().ResourceType.ToString()),
                (type: typeof(CosmosStorageRequestMetricsNotification), count: 1, resourceType: Samples.GetDefaultObservation().ToPoco().ResourceType.ToString()));
        }

        [Fact]
        public async Task GivenHealthCheckPath_WhenInvoked_MetricNotificationsNotEmitted()
        {
            _metricHandler?.ResetCount();

            await ExecuteAndValidate(
                () => _client.HttpClient.GetAsync("/health/check"),
                (type: typeof(ApiResponseNotification), count: 0, resourceType: (string)null),
                (type: typeof(CosmosStorageRequestMetricsNotification), count: 2, resourceType: (string)null));
        }

        [Trait(Traits.Category, Categories.Batch)]
        [Trait(Traits.Priority, Priority.One)]
        [Fact]
        public async Task GivenABatch_WhenInvokedAtCosmosDb_MetricNotificationsShouldBeEmitted()
        {
            _metricHandler?.ResetCount();

            await ExecuteAndValidate(
                () => _client.PostBundleAsync(Samples.GetDefaultBatch().ToPoco()),
                (type: typeof(ApiResponseNotification), count: 1, resourceType: Samples.GetDefaultBatch().ToPoco().ResourceType.ToString()),
                (type: typeof(CosmosStorageRequestMetricsNotification), count: 10, resourceType: Samples.GetDefaultBatch().ToPoco().ResourceType.ToString()));
        }

        [HttpIntegrationFixtureArgumentSets(DataStore.SqlServer, Format.Json)]
        [Trait(Traits.Category, Categories.Batch)]
        [Trait(Traits.Priority, Priority.One)]
        [Fact]
        public async Task GivenABatch_WhenInvokedAtSqlServer_MetricNotificationsShouldBeEmitted()
        {
            _metricHandler?.ResetCount();

            await ExecuteAndValidate(
                () => _client.PostBundleAsync(Samples.GetDefaultBatch().ToPoco()),
                (type: typeof(ApiResponseNotification), count: 1, resourceType: Samples.GetDefaultBatch().ToPoco().ResourceType.ToString()));
        }

        [HttpIntegrationFixtureArgumentSets(dataStores: DataStore.SqlServer)]
        [Trait(Traits.Category, Categories.Transaction)]
        [Trait(Traits.Priority, Priority.One)]
        [Fact]
        public async Task GivenATransaction_WhenInvoked_MetricNotificationsShouldBeEmitted()
        {
            _metricHandler?.ResetCount();

            var requestBundle = Samples.GetJsonSample("Bundle-TransactionWithValidBundleEntry").ToPoco<Hl7.Fhir.Model.Bundle>();

            await ExecuteAndValidate(
                () => _client.PostBundleAsync(requestBundle),
                (type: typeof(ApiResponseNotification), count: 1, resourceType: requestBundle.ResourceType.ToString()));
        }

        private async Task ExecuteAndValidate<T>(Func<Task<T>> action, params (Type type, int count, string resourceType)[] expectedNotifications)
        {
            if (!_fixture.IsUsingInProcTestServer)
            {
                // This test only works with the in-proc server with a customized metric handler.
                return;
            }

            foreach ((Type type, int count, string resourceType) expectedNotification in expectedNotifications)
            {
                if (expectedNotification.count == 0)
                {
                    Assert.False(_metricHandler.NotificationMapping.TryGetValue(expectedNotification.type, out var _));
                    continue;
                }

                Assert.Equal(expectedNotification.count, _metricHandler.NotificationMapping[expectedNotification.type].Count);

                if (await action()is HttpResponseMessage result && expectedNotification.type == typeof(CosmosStorageRequestMetricsNotification))
                {
                    result.Headers.TryGetValues(CosmosDbHeaders.RequestCharge, out IEnumerable<string> values);

                    Assert.NotNull(values);

                    Assert.Equal(expectedNotification.count, values.Count());

                    foreach (var notification in _metricHandler.NotificationMapping[expectedNotification.type])
                    {
                        var casted = notification as CosmosStorageRequestMetricsNotification;
                        Assert.Equal(expectedNotification.resourceType, casted.ResourceType);
                    }
                }

                if (await action()is HttpResponseMessage result && expectedNotification.type == typeof(ApiResponseNotification))
                {
                    foreach (var notification in _metricHandler.NotificationMapping[expectedNotification.type])
                    {
                        var casted = notification as ApiResponseNotification;
                        Assert.Equal(expectedNotification.resourceType, casted.ResourceType);
                    }
                }
            }
        }
    }
}

---- Semantic diagnostics *before* transformation ----

---- Semantic diagnostics *after* transformation ----
D:\a\1\s\test\Microsoft.Health.Fhir.Shared.Tests.E2E\Rest\Metric\MetricTests.cs(152,58): error CS0128: A local variable or function named 'result' is already defined in this scope
######################################################################


