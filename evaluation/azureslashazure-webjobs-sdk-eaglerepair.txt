Found the following rules to apply: UseMethodAnyRewriterR6, MergeSequentialChecksRewriterR2, NullChecksShouldNotBeUsedWithIsRewriterR3, SimplifyLinqRewriterR4, TypeCheckAndCastRewriterR5, UseNullPropagationRewriterR7, UsePatternMatchingRewriterR8, UseStringInterpolationRewriterR9, UseStringIsNullOrEmptyRewriterR10



Project: WebJobs.Host
    #1 Path: D:\a\1\s\src\Microsoft.Azure.WebJobs.Host\Bindings\AttributeCloner.cs, Line: 313, Message: ReSharper: ReplaceWithSingleCallToCount. / SonarQube "IEnumerable" LINQs should be simplified. See https://rules.sonarsource.com/csharp/RSPEC-2971
    #2 Path: D:\a\1\s\src\Microsoft.Azure.WebJobs.Host\Bindings\BindingBase.cs, Line: 56, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #3 Path: D:\a\1\s\src\Microsoft.Azure.WebJobs.Host\Bindings\BindingDataPathHelper.cs, Line: 58, Message: ReSharper: Type check and casts can be merged. See https://www.jetbrains.com/help/resharper/MergeCastWithTypeCheck.html / SonarQube: Duplicate casts should not be made. See https://rules.sonarsource.com/csharp/RSPEC-3247
    #4 Path: D:\a\1\s\src\Microsoft.Azure.WebJobs.Host\Bindings\BindingProviders\FilteringBindingProvider.cs, Line: 61, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #5 Path: D:\a\1\s\src\Microsoft.Azure.WebJobs.Host\Bindings\BindingProviders\FilteringBindingProvider.cs, Line: 86, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #6 Path: D:\a\1\s\src\Microsoft.Azure.WebJobs.Host\Bindings\ConverterManager.cs, Line: 456, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #7 Path: D:\a\1\s\src\Microsoft.Azure.WebJobs.Host\Bindings\OpenType.cs, Line: 75, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #8 Path: D:\a\1\s\src\Microsoft.Azure.WebJobs.Host\Bindings\Path\BindingTemplateParser.cs, Line: 129, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #9 Path: D:\a\1\s\src\Microsoft.Azure.WebJobs.Host\Bindings\Path\BindingTemplateParser.cs, Line: 150, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #10 Path: D:\a\1\s\src\Microsoft.Azure.WebJobs.Host\Bindings\Path\BindingTemplateToken.cs, Line: 271, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #11 Path: D:\a\1\s\src\Microsoft.Azure.WebJobs.Host\Bindings\Runtime\Binder.cs, Line: 125, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #12 Path: D:\a\1\s\src\Microsoft.Azure.WebJobs.Host\Bindings\Runtime\Binder.cs, Line: 131, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #13 Path: D:\a\1\s\src\Microsoft.Azure.WebJobs.Host\Bindings\Runtime\Binder.cs, Line: 161, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #14 Path: D:\a\1\s\src\Microsoft.Azure.WebJobs.Host\Bindings\Runtime\RuntimeValueProvider.cs, Line: 46, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #15 Path: D:\a\1\s\src\Microsoft.Azure.WebJobs.Host\Bindings\TraceWriter\TraceWriterBinding.cs, Line: 103, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #16 Path: D:\a\1\s\src\Microsoft.Azure.WebJobs.Host\Diagnostics\ExceptionFormatter.cs, Line: 33, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #17 Path: D:\a\1\s\src\Microsoft.Azure.WebJobs.Host\Executors\FunctionExecutor.cs, Line: 1070, Message: ReSharper: Type check and casts can be merged. See https://www.jetbrains.com/help/resharper/MergeCastWithTypeCheck.html / SonarQube: Duplicate casts should not be made. See https://rules.sonarsource.com/csharp/RSPEC-3247
    #18 Path: D:\a\1\s\src\Microsoft.Azure.WebJobs.Host\Executors\FunctionExecutor.cs, Line: 294, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #19 Path: D:\a\1\s\src\Microsoft.Azure.WebJobs.Host\Executors\FunctionExecutor.cs, Line: 329, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #20 Path: D:\a\1\s\src\Microsoft.Azure.WebJobs.Host\Executors\FunctionExecutor.cs, Line: 333, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #21 Path: D:\a\1\s\src\Microsoft.Azure.WebJobs.Host\Executors\FunctionExecutor.cs, Line: 480, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #22 Path: D:\a\1\s\src\Microsoft.Azure.WebJobs.Host\Executors\FunctionExecutor.cs, Line: 497, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #23 Path: D:\a\1\s\src\Microsoft.Azure.WebJobs.Host\Executors\FunctionExecutor.cs, Line: 591, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #24 Path: D:\a\1\s\src\Microsoft.Azure.WebJobs.Host\Executors\FunctionExecutor.cs, Line: 642, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #25 Path: D:\a\1\s\src\Microsoft.Azure.WebJobs.Host\Executors\FunctionExecutor.cs, Line: 860, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #26 Path: D:\a\1\s\src\Microsoft.Azure.WebJobs.Host\Executors\FunctionExecutor.cs, Line: 931, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #27 Path: D:\a\1\s\src\Microsoft.Azure.WebJobs.Host\Executors\FunctionExecutor.cs, Line: 978, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #28 Path: D:\a\1\s\src\Microsoft.Azure.WebJobs.Host\Executors\FunctionInstanceWrapper.cs, Line: 54, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #29 Path: D:\a\1\s\src\Microsoft.Azure.WebJobs.Host\Executors\HostMessageExecutor.cs, Line: 42, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #30 Path: D:\a\1\s\src\Microsoft.Azure.WebJobs.Host\Executors\HostMessageExecutor.cs, Line: 50, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #31 Path: D:\a\1\s\src\Microsoft.Azure.WebJobs.Host\Extensions\JobHostMetadataProvider.cs, Line: 322, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #32 Path: D:\a\1\s\src\Microsoft.Azure.WebJobs.Host\Indexers\FunctionIndexer.cs, Line: 362, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #33 Path: D:\a\1\s\src\Microsoft.Azure.WebJobs.Host\JobHost.cs, Line: 243, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #34 Path: D:\a\1\s\src\Microsoft.Azure.WebJobs.Host\JobHost.cs, Line: 267, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #35 Path: D:\a\1\s\src\Microsoft.Azure.WebJobs.Host\JobHost.cs, Line: 272, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #36 Path: D:\a\1\s\src\Microsoft.Azure.WebJobs.Host\Listeners\HostListenerFactory.cs, Line: 51, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #37 Path: D:\a\1\s\src\Microsoft.Azure.WebJobs.Host\Listeners\ListenerFactoryListener.cs, Line: 86, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #38 Path: D:\a\1\s\src\Microsoft.Azure.WebJobs.Host\ObjectDictionaryConverter.cs, Line: 21, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #39 Path: D:\a\1\s\src\Microsoft.Azure.WebJobs.Host\ObjectDictionaryConverter.cs, Line: 28, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #40 Path: D:\a\1\s\src\Microsoft.Azure.WebJobs.Host\PropertyHelper.cs, Line: 326, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #41 Path: D:\a\1\s\src\Microsoft.Azure.WebJobs.Host\Singleton\SingletonListener.cs, Line: 103, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #42 Path: D:\a\1\s\src\Microsoft.Azure.WebJobs.Host\Singleton\SingletonListener.cs, Line: 77, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #43 Path: D:\a\1\s\src\Microsoft.Azure.WebJobs.Host\Singleton\SingletonListener.cs, Line: 93, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #44 Path: D:\a\1\s\src\Microsoft.Azure.WebJobs.Host\Singleton\SingletonManager.cs, Line: 104, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #45 Path: D:\a\1\s\src\Microsoft.Azure.WebJobs.Host\Triggers\StrategyTriggerBinding.cs, Line: 56, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #46 Path: D:\a\1\s\src\Microsoft.Azure.WebJobs.Host\TypeUtility.cs, Line: 129, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #47 Path: D:\a\1\s\src\Microsoft.Azure.WebJobs.Host\TypeUtility.cs, Line: 137, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #48 Path: D:\a\1\s\src\Microsoft.Azure.WebJobs.Host\WebjobsShutdownWatcher.cs, Line: 83, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #49 Path: D:\a\1\s\src\Microsoft.Azure.WebJobs.Protocols\JsonSerialization.cs, Line: 134, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #50 Path: D:\a\1\s\src\Microsoft.Azure.WebJobs.Protocols\JTokenExtensions.cs, Line: 46, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html



Project: WebJobs.Logging
    #51 Path: D:\a\1\s\src\Microsoft.Azure.WebJobs.Logging\FunctionId.cs, Line: 78, Message: ReSharper: Type check and casts can be merged. See https://www.jetbrains.com/help/resharper/MergeCastWithTypeCheck.html / SonarQube: Duplicate casts should not be made. See https://rules.sonarsource.com/csharp/RSPEC-3247



Project: WebJobs.Logging.ApplicationInsights
    #52 Path: D:\a\1\s\src\Microsoft.Azure.WebJobs.Logging.ApplicationInsights\Initializers\MetricSdkVersionTelemetryInitializer.cs, Line: 25, Message: https://www.jetbrains.com/help/resharper/MergeSequentialChecks.html



Project: WebJobs.Host.UnitTests
    #53 Path: D:\a\1\s\test\Microsoft.Azure.WebJobs.Host.UnitTests\Common\TypedCollectorTests.cs, Line: 179, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #54 Path: D:\a\1\s\test\Microsoft.Azure.WebJobs.Host.UnitTests\ConverterManagerTests.cs, Line: 185, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #55 Path: D:\a\1\s\test\Microsoft.Azure.WebJobs.Host.UnitTests\ConverterManagerTests.cs, Line: 186, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #56 Path: D:\a\1\s\test\Microsoft.Azure.WebJobs.Host.UnitTests\ConverterManagerTests.cs, Line: 209, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #57 Path: D:\a\1\s\test\Microsoft.Azure.WebJobs.Host.UnitTests\ConverterManagerTests.cs, Line: 210, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #58 Path: D:\a\1\s\test\Microsoft.Azure.WebJobs.Host.UnitTests\Executors\FunctionExecutorTests.cs, Line: 201, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #59 Path: D:\a\1\s\test\Microsoft.Azure.WebJobs.Host.UnitTests\Executors\FunctionExecutorTests.cs, Line: 296, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #60 Path: D:\a\1\s\test\Microsoft.Azure.WebJobs.Host.UnitTests\Executors\FunctionExecutorTests.cs, Line: 333, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #61 Path: D:\a\1\s\test\Microsoft.Azure.WebJobs.Host.UnitTests\Loggers\ApplicationInsightsConfigurationTests.cs, Line: 234, Message: ReSharper: Use '.Any()' to test whether this IEnumerable is empty or not. See ReSharper/UseMethodAny.0.html / SonarQube: "Any()" should be used to test for emptiness. See https://rules.sonarsource.com/csharp/RSPEC-1155
    #62 Path: D:\a\1\s\test\Microsoft.Azure.WebJobs.Host.UnitTests\Timers\TaskSeriesTimerTests.cs, Line: 838, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html



Project: WebJobs.Host.TestCommon
    #63 Path: D:\a\1\s\test\Microsoft.Azure.WebJobs.Host.TestCommon\ExceptionAssert.cs, Line: 74, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #64 Path: D:\a\1\s\test\Microsoft.Azure.WebJobs.Host.TestCommon\ExpectManualCompletionTaskFunctionInstanceLogger.cs, Line: 40, Message: https://www.jetbrains.com/help/resharper/MergeSequentialChecks.html
    #65 Path: D:\a\1\s\test\Microsoft.Azure.WebJobs.Host.TestCommon\TestHelpers.cs, Line: 305, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #66 Path: D:\a\1\s\test\Microsoft.Azure.WebJobs.Host.TestCommon\TestHelpers.cs, Line: 316, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html



Project: WebJobs.Host.FunctionalTests
    #67 Path: D:\a\1\s\test\Microsoft.Azure.WebJobs.Host.FunctionalTests\HostListenerFactoryTests.cs, Line: 109, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #68 Path: D:\a\1\s\test\Microsoft.Azure.WebJobs.Host.FunctionalTests\ILoggerTests.cs, Line: 40, Message: ReSharper: ReplaceWithSingleCallToSingle. / SonarQube "IEnumerable" LINQs should be simplified. See https://rules.sonarsource.com/csharp/RSPEC-2971
    #69 Path: D:\a\1\s\test\Microsoft.Azure.WebJobs.Host.FunctionalTests\ILoggerTests.cs, Line: 41, Message: ReSharper: ReplaceWithSingleCallToSingle. / SonarQube "IEnumerable" LINQs should be simplified. See https://rules.sonarsource.com/csharp/RSPEC-2971
    #70 Path: D:\a\1\s\test\Microsoft.Azure.WebJobs.Host.FunctionalTests\ILoggerTests.cs, Line: 72, Message: ReSharper: ReplaceWithSingleCallToSingle. / SonarQube "IEnumerable" LINQs should be simplified. See https://rules.sonarsource.com/csharp/RSPEC-2971
    #71 Path: D:\a\1\s\test\Microsoft.Azure.WebJobs.Host.FunctionalTests\JobHostTests.cs, Line: 739, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #72 Path: D:\a\1\s\test\Microsoft.Azure.WebJobs.Host.FunctionalTests\Singleton\SingletonManagerTests.cs, Line: 651, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #73 Path: D:\a\1\s\test\Microsoft.Azure.WebJobs.Host.FunctionalTests\TestDoubles\ExpectInstanceSuccessTaskFunctionInstanceLogger.cs, Line: 28, Message: https://www.jetbrains.com/help/resharper/MergeSequentialChecks.html



Project: WebJobs.Logging.FunctionalTests
    #74 Path: D:\a\1\s\test\Microsoft.Azure.WebJobs.Logging.FunctionalTests\InstanceCountLoggerBaseTests.cs, Line: 213, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html



Project: WebJobs.Host.EndToEndTests
    #75 Path: D:\a\1\s\test\Microsoft.Azure.WebJobs.Host.EndToEndTests\ApplicationInsights\ServiceBusRequestAndDependencyCollectionTests.cs, Line: 203, Message: ReSharper: ReplaceWithSingleCallToCount. / SonarQube "IEnumerable" LINQs should be simplified. See https://rules.sonarsource.com/csharp/RSPEC-2971
    #76 Path: D:\a\1\s\test\Microsoft.Azure.WebJobs.Host.EndToEndTests\AsyncChainEndToEndTests.cs, Line: 132, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #77 Path: D:\a\1\s\test\Microsoft.Azure.WebJobs.Host.EndToEndTests\AsyncChainEndToEndTests.cs, Line: 135, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #78 Path: D:\a\1\s\test\Microsoft.Azure.WebJobs.Host.EndToEndTests\AsyncChainEndToEndTests.cs, Line: 137, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #79 Path: D:\a\1\s\test\Microsoft.Azure.WebJobs.Host.EndToEndTests\AsyncChainEndToEndTests.cs, Line: 231, Message: ReSharper: ReplaceWithSingleCallToAny. / SonarQube "IEnumerable" LINQs should be simplified. See https://rules.sonarsource.com/csharp/RSPEC-2971
    #80 Path: D:\a\1\s\test\Microsoft.Azure.WebJobs.Host.EndToEndTests\AsyncChainEndToEndTests.cs, Line: 280, Message: ReSharper: ReplaceWithSingleCallToSingle. / SonarQube "IEnumerable" LINQs should be simplified. See https://rules.sonarsource.com/csharp/RSPEC-2971
    #81 Path: D:\a\1\s\test\Microsoft.Azure.WebJobs.Host.EndToEndTests\AsyncChainEndToEndTests.cs, Line: 322, Message: ReSharper: ReplaceWithSingleCallToSingle. / SonarQube "IEnumerable" LINQs should be simplified. See https://rules.sonarsource.com/csharp/RSPEC-2971
    #82 Path: D:\a\1\s\test\Microsoft.Azure.WebJobs.Host.EndToEndTests\AsyncChainEndToEndTests.cs, Line: 359, Message: ReSharper: ReplaceWithSingleCallToSingleOrDefault. / SonarQube "IEnumerable" LINQs should be simplified. See https://rules.sonarsource.com/csharp/RSPEC-2971
    #83 Path: D:\a\1\s\test\Microsoft.Azure.WebJobs.Host.EndToEndTests\AsyncChainEndToEndTests.cs, Line: 384, Message: ReSharper: ReplaceWithSingleCallToSingle. / SonarQube "IEnumerable" LINQs should be simplified. See https://rules.sonarsource.com/csharp/RSPEC-2971
    #84 Path: D:\a\1\s\test\Microsoft.Azure.WebJobs.Host.EndToEndTests\AsyncChainEndToEndTests.cs, Line: 526, Message: ReSharper: ReplaceWithSingleCallToSingle. / SonarQube "IEnumerable" LINQs should be simplified. See https://rules.sonarsource.com/csharp/RSPEC-2971
    #85 Path: D:\a\1\s\test\Microsoft.Azure.WebJobs.Host.EndToEndTests\AsyncChainEndToEndTests.cs, Line: 527, Message: ReSharper: ReplaceWithSingleCallToSingle. / SonarQube "IEnumerable" LINQs should be simplified. See https://rules.sonarsource.com/csharp/RSPEC-2971
    #86 Path: D:\a\1\s\test\Microsoft.Azure.WebJobs.Host.EndToEndTests\BlobBindingEndToEndTests.cs, Line: 324, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #87 Path: D:\a\1\s\test\Microsoft.Azure.WebJobs.Host.EndToEndTests\BlobBindingEndToEndTests.cs, Line: 814, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #88 Path: D:\a\1\s\test\Microsoft.Azure.WebJobs.Host.EndToEndTests\BlobTriggerEndToEndTests.cs, Line: 233, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #89 Path: D:\a\1\s\test\Microsoft.Azure.WebJobs.Host.EndToEndTests\ExtensionWithDispatchQueue.cs, Line: 135, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #90 Path: D:\a\1\s\test\Microsoft.Azure.WebJobs.Host.EndToEndTests\SingletonEndToEndTests.cs, Line: 366, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #91 Path: D:\a\1\s\test\Microsoft.Azure.WebJobs.Host.EndToEndTests\SingletonEndToEndTests.cs, Line: 378, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #92 Path: D:\a\1\s\test\Microsoft.Azure.WebJobs.Host.EndToEndTests\SingletonEndToEndTests.cs, Line: 435, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #93 Path: D:\a\1\s\test\Microsoft.Azure.WebJobs.Host.EndToEndTests\SingletonEndToEndTests.cs, Line: 874, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html



Project: WebJobs.Extensions.Storage
    #94 Path: D:\a\1\s\src\Microsoft.Azure.WebJobs.Extensions.Storage\Blobs\Bindings\BlobCommittedAction.cs, Line: 24, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #95 Path: D:\a\1\s\src\Microsoft.Azure.WebJobs.Extensions.Storage\Blobs\BlobPathSource.cs, Line: 46, Message: ReSharper: Use '.Any()' to test whether this IEnumerable is empty or not. See ReSharper/UseMethodAny.0.html / SonarQube: "Any()" should be used to test for emptiness. See https://rules.sonarsource.com/csharp/RSPEC-1155
    #96 Path: D:\a\1\s\src\Microsoft.Azure.WebJobs.Extensions.Storage\Blobs\Listeners\BlobLogListener.cs, Line: 172, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #97 Path: D:\a\1\s\src\Microsoft.Azure.WebJobs.Extensions.Storage\Blobs\ParameterizedBlobPathSource.cs, Line: 22, Message: ReSharper: Use '.Any()' to test whether this IEnumerable is empty or not. See ReSharper/UseMethodAny.0.html / SonarQube: "Any()" should be used to test for emptiness. See https://rules.sonarsource.com/csharp/RSPEC-1155
    #98 Path: D:\a\1\s\src\Microsoft.Azure.WebJobs.Extensions.Storage\Queues\Config\QueuesExtensionConfigProvider.cs, Line: 256, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #99 Path: D:\a\1\s\src\Microsoft.Azure.WebJobs.Extensions.Storage\Queues\Listeners\QueueListener.cs, Line: 148, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #100 Path: D:\a\1\s\src\Microsoft.Azure.WebJobs.Extensions.Storage\Queues\Listeners\QueueListener.cs, Line: 246, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #101 Path: D:\a\1\s\src\Microsoft.Azure.WebJobs.Extensions.Storage\Tables\TableEntityToPocoConverter.cs, Line: 47, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #102 Path: D:\a\1\s\src\Microsoft.Azure.WebJobs.Extensions.Storage\Tables\TableEntityToPocoConverter.cs, Line: 52, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #103 Path: D:\a\1\s\src\Microsoft.Azure.WebJobs.Extensions.Storage\Tables\TableEntityToPocoConverter.cs, Line: 57, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #104 Path: D:\a\1\s\src\Microsoft.Azure.WebJobs.Extensions.Storage\Tables\TableEntityToPocoConverter.cs, Line: 80, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #105 Path: D:\a\1\s\src\Microsoft.Azure.WebJobs.Extensions.Storage\Tables\TableFilterFormatter.cs, Line: 50, Message: ReSharper: Type check and casts can be merged. See https://www.jetbrains.com/help/resharper/MergeCastWithTypeCheck.html / SonarQube: Duplicate casts should not be made. See https://rules.sonarsource.com/csharp/RSPEC-3247
    #106 Path: D:\a\1\s\src\Microsoft.Azure.WebJobs.Extensions.Storage\Tables\TableFilterFormatter.cs, Line: 6, Message: ReSharper: Type check and casts can be merged. See https://www.jetbrains.com/help/resharper/MergeCastWithTypeCheck.html / SonarQube: Duplicate casts should not be made. See https://rules.sonarsource.com/csharp/RSPEC-3247
    #107 Path: D:\a\1\s\src\Microsoft.Azure.WebJobs.Host\Bindings\BindingDataPathHelper.cs, Line: 58, Message: ReSharper: Type check and casts can be merged. See https://www.jetbrains.com/help/resharper/MergeCastWithTypeCheck.html / SonarQube: Duplicate casts should not be made. See https://rules.sonarsource.com/csharp/RSPEC-3247
    #108 Path: D:\a\1\s\src\Microsoft.Azure.WebJobs.Host\PropertyHelper.cs, Line: 326, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #109 Path: D:\a\1\s\src\Microsoft.Azure.WebJobs.Host\TypeUtility.cs, Line: 129, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #110 Path: D:\a\1\s\src\Microsoft.Azure.WebJobs.Host\TypeUtility.cs, Line: 137, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #111 Path: D:\a\1\s\src\Microsoft.Azure.WebJobs.Protocols\JsonSerialization.cs, Line: 134, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html



Project: WebJobs.Host.Storage
    #112 Path: D:\a\1\s\src\Microsoft.Azure.WebJobs.Host.Storage\RuntimeStorageWebJobsBuilderExtensions.cs, Line: 57, Message: https://www.jetbrains.com/help/resharper/MergeSequentialChecks.html



Project: WebJobs.Extensions.Storage.UnitTests
    #113 Path: D:\a\1\s\test\Microsoft.Azure.Webjobs.Extensions.Storage.UnitTests\Blobs\AsyncResultExtensions.cs, Line: 29, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #114 Path: D:\a\1\s\test\Microsoft.Azure.Webjobs.Extensions.Storage.UnitTests\Blobs\Bindings\CompletedCancellableAsyncResult.cs, Line: 85, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #115 Path: D:\a\1\s\test\Microsoft.Azure.Webjobs.Extensions.Storage.UnitTests\Blobs\Bindings\CompletingCancellableAsyncResult.cs, Line: 102, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #116 Path: D:\a\1\s\test\Microsoft.Azure.Webjobs.Extensions.Storage.UnitTests\Blobs\Bindings\CompletingCancellableAsyncResult.cs, Line: 114, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #117 Path: D:\a\1\s\test\Microsoft.Azure.Webjobs.Extensions.Storage.UnitTests\Blobs\Bindings\CompletingCancellableAsyncResult.cs, Line: 96, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #118 Path: D:\a\1\s\test\Microsoft.Azure.Webjobs.Extensions.Storage.UnitTests\Blobs\Bindings\ReturnsThrowsOfCloudBlobStreamICancellableAsyncResultExtensions.cs, Line: 31, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #119 Path: D:\a\1\s\test\Microsoft.Azure.Webjobs.Extensions.Storage.UnitTests\Blobs\Bindings\SetupOfCloudBlobStreamIAsyncResultExtensions.cs, Line: 58, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #120 Path: D:\a\1\s\test\Microsoft.Azure.Webjobs.Extensions.Storage.UnitTests\Blobs\Bindings\SetupOfCloudBlobStreamICancellableAsyncResultExtensions.cs, Line: 59, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #121 Path: D:\a\1\s\test\Microsoft.Azure.Webjobs.Extensions.Storage.UnitTests\Blobs\Bindings\UncompletedCancellableAsyncResult.cs, Line: 74, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #122 Path: D:\a\1\s\test\Microsoft.Azure.Webjobs.Extensions.Storage.UnitTests\Blobs\Bindings\WatchableCloudBlobStreamTests.cs, Line: 646, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #123 Path: D:\a\1\s\test\Microsoft.Azure.Webjobs.Extensions.Storage.UnitTests\Blobs\CompletedAsyncResult.cs, Line: 68, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #124 Path: D:\a\1\s\test\Microsoft.Azure.Webjobs.Extensions.Storage.UnitTests\Blobs\CompletingAsyncResult.cs, Line: 75, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #125 Path: D:\a\1\s\test\Microsoft.Azure.Webjobs.Extensions.Storage.UnitTests\Blobs\CompletingAsyncResult.cs, Line: 81, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #126 Path: D:\a\1\s\test\Microsoft.Azure.Webjobs.Extensions.Storage.UnitTests\Blobs\CompletingAsyncResult.cs, Line: 93, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #127 Path: D:\a\1\s\test\Microsoft.Azure.Webjobs.Extensions.Storage.UnitTests\Blobs\SetupOfStreamIAsyncResultExtensions.cs, Line: 56, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #128 Path: D:\a\1\s\test\Microsoft.Azure.Webjobs.Extensions.Storage.UnitTests\Blobs\UncompletedAsyncResult.cs, Line: 68, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #129 Path: D:\a\1\s\test\Microsoft.Azure.Webjobs.Extensions.Storage.UnitTests\HostCallTests.cs, Line: 1457, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #130 Path: D:\a\1\s\test\Microsoft.Azure.Webjobs.Extensions.Storage.UnitTests\Queues\QueueListenerTests.cs, Line: 161, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #131 Path: D:\a\1\s\test\Microsoft.Azure.Webjobs.Extensions.Storage.UnitTests\Queues\QueueListenerTests.cs, Line: 190, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #132 Path: D:\a\1\s\test\Microsoft.Azure.Webjobs.Extensions.Storage.UnitTests\Queues\QueueListenerTests.cs, Line: 333, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #133 Path: D:\a\1\s\test\Microsoft.Azure.Webjobs.Extensions.Storage.UnitTests\Queues\QueueListenerTests.cs, Line: 337, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #134 Path: D:\a\1\s\test\Microsoft.Azure.Webjobs.Extensions.Storage.UnitTests\Queues\QueueListenerTests.cs, Line: 362, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #135 Path: D:\a\1\s\test\Microsoft.Azure.Webjobs.Extensions.Storage.UnitTests\Queues\QueueProcessorTests.cs, Line: 204, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #136 Path: D:\a\1\s\test\Microsoft.Azure.Webjobs.Extensions.Storage.UnitTests\Queues\QueueProcessorTests.cs, Line: 208, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html



Project: FakeAzureStorage
    #137 Path: D:\a\1\s\test\FakeStorage\Blob\MemoryBlobStore.cs, Line: 324, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html



--- Rules Summary ---
R9: 42
R7: 42
R8: 28
R4: 12
R5: 6
R2: 4
R6: 3

--- Summary ---
Fixed ReSharper issues: 133
Fixed SonarQube issues: 21
Total fixed issues: 137

Finished in: 19 s

######################################################################
Nr: 1 - UsePatternMatchingRewriterR8
Filepath: D:\a\1\s\src\Microsoft.Azure.WebJobs.Logging.ApplicationInsights\Initializers\WebJobsTelemetryInitializer.cs
Description: Error: The created Syntax Tree is semantically incorrect.
------------------------------------------------------------------------
---- Original Tree ----
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using Microsoft.ApplicationInsights.Channel;
using Microsoft.ApplicationInsights.DataContracts;
using Microsoft.ApplicationInsights.Extensibility;
using Microsoft.ApplicationInsights.Extensibility.Implementation;
using Microsoft.Extensions.Logging;

namespace Microsoft.Azure.WebJobs.Logging.ApplicationInsights
{
    internal class WebJobsTelemetryInitializer : ITelemetryInitializer
    {
        private const string ComputerNameKey = "COMPUTERNAME";
        private const string WebSiteInstanceIdKey = "WEBSITE_INSTANCE_ID";
        private const string ContainerNameKey = "CONTAINER_NAME";

        private static readonly string _roleInstanceName = GetRoleInstanceName();
        private readonly string _sdkVersion;

        public WebJobsTelemetryInitializer(ISdkVersionProvider versionProvider)
        {
            if (versionProvider == null)
            {
                throw new ArgumentNullException(nameof(versionProvider));
            }

            _sdkVersion = versionProvider.GetSdkVersion();
        }

        public void Initialize(ITelemetry telemetry)
        {
            if (telemetry == null)
            {
                return;
            }

            telemetry.Context.Cloud.RoleInstance = _roleInstanceName;

            RequestTelemetry request = telemetry as RequestTelemetry;

            // Zero out all IP addresses other than Requests
            if (request == null)
            {
                telemetry.Context.Location.Ip = LoggingConstants.ZeroIpAddress;
            }
            else
            {
                if (request.Context.Location.Ip == null)
                {
                    request.Context.Location.Ip = LoggingConstants.ZeroIpAddress;
                }
            }

            IDictionary<string, string> telemetryProps = telemetry.Context.Properties;

            // Apply our special scope properties
            IDictionary<string, object> scopeProps =
                DictionaryLoggerScope.GetMergedStateDictionary() ?? new Dictionary<string, object>();

            string invocationId = scopeProps.GetValueOrDefault<string>(ScopeKeys.FunctionInvocationId);
            if (invocationId != null)
            {
                telemetryProps[LogConstants.InvocationIdKey] = invocationId;
            }

            // this could be telemetry tracked in scope of function call - then we should apply the logger scope
            // or RequestTelemetry tracked by the WebJobs SDK or AppInsight SDK - then we should apply Activity.Tags
            if (request == null && scopeProps.Any())
            {
                telemetry.Context.Operation.Name = scopeProps.GetValueOrDefault<string>(ScopeKeys.FunctionName);

                // Apply Category and LogLevel to all telemetry
                string category = scopeProps.GetValueOrDefault<string>(LogConstants.CategoryNameKey);
                if (category != null)
                {
                    telemetryProps[LogConstants.CategoryNameKey] = category;
                }

                LogLevel? logLevel = scopeProps.GetValueOrDefault<LogLevel?>(LogConstants.LogLevelKey);
                if (logLevel != null)
                {
                    telemetryProps[LogConstants.LogLevelKey] = logLevel.Value.ToString();
                }

                int? eventId = scopeProps.GetValueOrDefault<int?>(LogConstants.EventIdKey);
                if (eventId != null && eventId.HasValue && eventId.Value != 0)
                {
                    telemetryProps[LogConstants.EventIdKey] = eventId.Value.ToString();
                }
            }
            // we may track traces/dependencies after function scope ends - we don't want to update those
            else if (request != null)
            {
                UpdateRequestProperties(request);

                Activity currentActivity = Activity.Current;
                if (currentActivity != null)
                {
                    foreach (var tag in currentActivity.Tags)
                    {
                        // Apply well-known tags and custom properties, 
                        // but ignore internal ai tags
                        if (!TryApplyProperty(request, tag) &&
                            !tag.Key.StartsWith("w3c_") &&
                            !tag.Key.StartsWith("ai_"))
                        {
                            request.Properties[tag.Key] = tag.Value;
                        }
                    }
                }
            }
        }

        private static string GetRoleInstanceName()
        {
            string instanceName = Environment.GetEnvironmentVariable(WebSiteInstanceIdKey);
            if (string.IsNullOrEmpty(instanceName))
            {
                instanceName = Environment.GetEnvironmentVariable(ComputerNameKey);
                if (string.IsNullOrEmpty(instanceName))
                {
                    instanceName = Environment.GetEnvironmentVariable(ContainerNameKey);
                }
            }

            return instanceName;
        }

        /// <summary>
        /// Changes properties of the RequestTelemetry to match what Functions expects.
        /// </summary>
        /// <param name="request">The RequestTelemetry to update.</param>
        private void UpdateRequestProperties(RequestTelemetry request)
        {
            request.Context.GetInternalContext().SdkVersion = _sdkVersion;

            // If the code hasn't been set, it's not an HttpRequest (could be auto-tracked SB, etc).
            // So we'll initialize it to 0
            if (string.IsNullOrEmpty(request.ResponseCode))
            {
                request.ResponseCode = "0";
            }

            // If the Url is not null, it's an actual HttpRequest, as opposed to a
            // Service Bus or other function invocation that we're tracking as a Request
            if (request.Url != null)
            {
                if (!request.Properties.ContainsKey(LogConstants.HttpMethodKey))
                {
                    // App Insights sets request.Name as 'VERB /path'. We want to extract the VERB. 
                    var verbEnd = request.Name.IndexOf(' ');
                    if (verbEnd > 0)
                    {
                        request.Properties.Add(LogConstants.HttpMethodKey, request.Name.Substring(0, verbEnd));
                    }
                }

                if (!request.Properties.ContainsKey(LogConstants.HttpPathKey))
                {
                    request.Properties.Add(LogConstants.HttpPathKey, request.Url.LocalPath);
                }

                // sanitize request Url - remove query string
                request.Url = new Uri(request.Url.GetLeftPart(UriPartial.Path));
            }
        }

        /// <summary>
        /// Tries to apply well-known properties from a KeyValuePair onto the RequestTelemetry.
        /// </summary>
        /// <param name="request">The request.</param>
        /// <param name="activityTag">Tag on the request activity.</param>
        /// <returns>True if the tag was applied. Otherwise, false.</returns>
        private bool TryApplyProperty(RequestTelemetry request, KeyValuePair<string, string> activityTag)
        {
            bool wasPropertySet = false;

            if (activityTag.Key == LogConstants.NameKey)
            {
                request.Context.Operation.Name = activityTag.Value;
                request.Name = activityTag.Value;

                wasPropertySet = true;
            }
            else if (activityTag.Key == LogConstants.SucceededKey &&
                bool.TryParse(activityTag.Value, out bool success))
            {
                // no matter what App Insights says about the response, we always
                // want to use the function's result for Succeeded
                request.Success = success;
                wasPropertySet = true;

                // Remove the Succeeded property if set
                if (request.Properties.ContainsKey(LogConstants.SucceededKey))
                {
                    request.Properties.Remove(LogConstants.SucceededKey);
                }
            }
            else if (activityTag.Key == LoggingConstants.ClientIpKey)
            {
                request.Context.Location.Ip = activityTag.Value;
                wasPropertySet = true;
            }

            return wasPropertySet;
        }
    }
}
---- Transformed Tree ----
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using Microsoft.ApplicationInsights.Channel;
using Microsoft.ApplicationInsights.DataContracts;
using Microsoft.ApplicationInsights.Extensibility;
using Microsoft.ApplicationInsights.Extensibility.Implementation;
using Microsoft.Extensions.Logging;

namespace Microsoft.Azure.WebJobs.Logging.ApplicationInsights
{
    internal class WebJobsTelemetryInitializer : ITelemetryInitializer
    {
        private const string ComputerNameKey = "COMPUTERNAME";
        private const string WebSiteInstanceIdKey = "WEBSITE_INSTANCE_ID";
        private const string ContainerNameKey = "CONTAINER_NAME";

        private static readonly string _roleInstanceName = GetRoleInstanceName();
        private readonly string _sdkVersion;

        public WebJobsTelemetryInitializer(ISdkVersionProvider versionProvider)
        {
            if (versionProvider == null)
            {
                throw new ArgumentNullException(nameof(versionProvider));
            }

            _sdkVersion = versionProvider.GetSdkVersion();
        }

        public void Initialize(ITelemetry telemetry)
        {
            if (telemetry == null)
            {
                return;
            }

            telemetry.Context.Cloud.RoleInstance = _roleInstanceName;

            // Zero out all IP addresses other than Requests
            if (request == null)
            {
                telemetry.Context.Location.Ip = LoggingConstants.ZeroIpAddress;
            }
            else
            {
                if (request.Context.Location.Ip == null)
                {
                    request.Context.Location.Ip = LoggingConstants.ZeroIpAddress;
                }
            }

            IDictionary<string, string> telemetryProps = telemetry.Context.Properties;

            // Apply our special scope properties
            IDictionary<string, object> scopeProps =
                DictionaryLoggerScope.GetMergedStateDictionary() ?? new Dictionary<string, object>();

            string invocationId = scopeProps.GetValueOrDefault<string>(ScopeKeys.FunctionInvocationId);
            if (invocationId != null)
            {
                telemetryProps[LogConstants.InvocationIdKey] = invocationId;
            }

            // this could be telemetry tracked in scope of function call - then we should apply the logger scope
            // or RequestTelemetry tracked by the WebJobs SDK or AppInsight SDK - then we should apply Activity.Tags
            if (request == null && scopeProps.Any())
            {
                telemetry.Context.Operation.Name = scopeProps.GetValueOrDefault<string>(ScopeKeys.FunctionName);

                // Apply Category and LogLevel to all telemetry
                string category = scopeProps.GetValueOrDefault<string>(LogConstants.CategoryNameKey);
                if (category != null)
                {
                    telemetryProps[LogConstants.CategoryNameKey] = category;
                }

                LogLevel? logLevel = scopeProps.GetValueOrDefault<LogLevel?>(LogConstants.LogLevelKey);
                if (logLevel != null)
                {
                    telemetryProps[LogConstants.LogLevelKey] = logLevel.Value.ToString();
                }

                int? eventId = scopeProps.GetValueOrDefault<int?>(LogConstants.EventIdKey);
                if (eventId != null && eventId.HasValue && eventId.Value != 0)
                {
                    telemetryProps[LogConstants.EventIdKey] = eventId.Value.ToString();
                }
            }
            // we may track traces/dependencies after function scope ends - we don't want to update those
            else if (telemetry is RequestTelemetry request)
            {
                UpdateRequestProperties(request);

                Activity currentActivity = Activity.Current;
                if (currentActivity != null)
                {
                    foreach (var tag in currentActivity.Tags)
                    {
                        // Apply well-known tags and custom properties, 
                        // but ignore internal ai tags
                        if (!TryApplyProperty(request, tag) &&
                            !tag.Key.StartsWith("w3c_") &&
                            !tag.Key.StartsWith("ai_"))
                        {
                            request.Properties[tag.Key] = tag.Value;
                        }
                    }
                }
            }
        }

        private static string GetRoleInstanceName()
        {
            string instanceName = Environment.GetEnvironmentVariable(WebSiteInstanceIdKey);
            if (string.IsNullOrEmpty(instanceName))
            {
                instanceName = Environment.GetEnvironmentVariable(ComputerNameKey);
                if (string.IsNullOrEmpty(instanceName))
                {
                    instanceName = Environment.GetEnvironmentVariable(ContainerNameKey);
                }
            }

            return instanceName;
        }

        /// <summary>
        /// Changes properties of the RequestTelemetry to match what Functions expects.
        /// </summary>
        /// <param name="request">The RequestTelemetry to update.</param>
        private void UpdateRequestProperties(RequestTelemetry request)
        {
            request.Context.GetInternalContext().SdkVersion = _sdkVersion;

            // If the code hasn't been set, it's not an HttpRequest (could be auto-tracked SB, etc).
            // So we'll initialize it to 0
            if (string.IsNullOrEmpty(request.ResponseCode))
            {
                request.ResponseCode = "0";
            }

            // If the Url is not null, it's an actual HttpRequest, as opposed to a
            // Service Bus or other function invocation that we're tracking as a Request
            if (request.Url != null)
            {
                if (!request.Properties.ContainsKey(LogConstants.HttpMethodKey))
                {
                    // App Insights sets request.Name as 'VERB /path'. We want to extract the VERB. 
                    var verbEnd = request.Name.IndexOf(' ');
                    if (verbEnd > 0)
                    {
                        request.Properties.Add(LogConstants.HttpMethodKey, request.Name.Substring(0, verbEnd));
                    }
                }

                if (!request.Properties.ContainsKey(LogConstants.HttpPathKey))
                {
                    request.Properties.Add(LogConstants.HttpPathKey, request.Url.LocalPath);
                }

                // sanitize request Url - remove query string
                request.Url = new Uri(request.Url.GetLeftPart(UriPartial.Path));
            }
        }

        /// <summary>
        /// Tries to apply well-known properties from a KeyValuePair onto the RequestTelemetry.
        /// </summary>
        /// <param name="request">The request.</param>
        /// <param name="activityTag">Tag on the request activity.</param>
        /// <returns>True if the tag was applied. Otherwise, false.</returns>
        private bool TryApplyProperty(RequestTelemetry request, KeyValuePair<string, string> activityTag)
        {
            bool wasPropertySet = false;

            if (activityTag.Key == LogConstants.NameKey)
            {
                request.Context.Operation.Name = activityTag.Value;
                request.Name = activityTag.Value;

                wasPropertySet = true;
            }
            else if (activityTag.Key == LogConstants.SucceededKey &&
                bool.TryParse(activityTag.Value, out bool success))
            {
                // no matter what App Insights says about the response, we always
                // want to use the function's result for Succeeded
                request.Success = success;
                wasPropertySet = true;

                // Remove the Succeeded property if set
                if (request.Properties.ContainsKey(LogConstants.SucceededKey))
                {
                    request.Properties.Remove(LogConstants.SucceededKey);
                }
            }
            else if (activityTag.Key == LoggingConstants.ClientIpKey)
            {
                request.Context.Location.Ip = activityTag.Value;
                wasPropertySet = true;
            }

            return wasPropertySet;
        }
    }
}
---- Semantic diagnostics *before* transformation ----

---- Semantic diagnostics *after* transformation ----
D:\a\1\s\src\Microsoft.Azure.WebJobs.Logging.ApplicationInsights\Initializers\WebJobsTelemetryInitializer.cs(45,17): error CS0103: The name 'request' does not exist in the current context,D:\a\1\s\src\Microsoft.Azure.WebJobs.Logging.ApplicationInsights\Initializers\WebJobsTelemetryInitializer.cs(51,21): error CS0103: The name 'request' does not exist in the current context,D:\a\1\s\src\Microsoft.Azure.WebJobs.Logging.ApplicationInsights\Initializers\WebJobsTelemetryInitializer.cs(53,21): error CS0103: The name 'request' does not exist in the current context,D:\a\1\s\src\Microsoft.Azure.WebJobs.Logging.ApplicationInsights\Initializers\WebJobsTelemetryInitializer.cs(71,17): error CS0103: The name 'request' does not exist in the current context
######################################################################


