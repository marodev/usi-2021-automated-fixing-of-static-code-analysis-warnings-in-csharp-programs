diff --git a/src/ADDomainServices/generated/runtime/Serialization/JsonSerializer.cs b/src/ADDomainServices/generated/runtime/Serialization/JsonSerializer.cs
index 5ad6ba0ed3..fe067cf9a8 100644
--- a/src/ADDomainServices/generated/runtime/Serialization/JsonSerializer.cs
+++ b/src/ADDomainServices/generated/runtime/Serialization/JsonSerializer.cs
@@ -312,7 +312,7 @@ namespace Microsoft.Azure.PowerShell.Cmdlets.ADDomainServices.Runtime.Json
                     default: return ReadArray((IEnumerable)value);
                 }
             }
-            else if (value is IEnumerable)
+            else if (value is IEnumerable iEnumerable)
             {
                 if (type.IsList && type.ElementType != null)
                 {
@@ -330,7 +330,7 @@ namespace Microsoft.Azure.PowerShell.Cmdlets.ADDomainServices.Runtime.Json
                     }
                 }
 
-                return ReadArray((IEnumerable)value);
+                return ReadArray(iEnumerable);
             }
             else
             {
diff --git a/src/Accounts/Accounts.Test/AzureRMProfileTests.cs b/src/Accounts/Accounts.Test/AzureRMProfileTests.cs
index 0ad30c46bb..e7f7ab43fa 100644
--- a/src/Accounts/Accounts.Test/AzureRMProfileTests.cs
+++ b/src/Accounts/Accounts.Test/AzureRMProfileTests.cs
@@ -410,7 +410,7 @@ namespace Microsoft.Azure.Commands.ResourceManager.Common.Test
             var subResults = new List<IAzureSubscription>(client.ListSubscriptions());
             Assert.Equal(7, subResults.Count);
             var tenantResults = client.ListTenants();
-            Assert.Equal(2, tenantResults.Count());
+            Assert.Equal(2, tenantResults.Count);
             tenantResults = client.ListTenants(DefaultTenant.ToString());
             Assert.Single(tenantResults);
             IAzureSubscription subValue;
diff --git a/src/Accounts/Accounts.Test/EnvironmentCmdletTests.cs b/src/Accounts/Accounts.Test/EnvironmentCmdletTests.cs
index 95841f88bb..df6060e8d5 100644
--- a/src/Accounts/Accounts.Test/EnvironmentCmdletTests.cs
+++ b/src/Accounts/Accounts.Test/EnvironmentCmdletTests.cs
@@ -555,7 +555,7 @@ namespace Microsoft.Azure.Commands.Profile.Test
             var profile = new AzureRmProfile();
             foreach (var env in AzureEnvironment.PublicEnvironments)
             {
-                Assert.True(profile.GetEnvironment(env.Key) != null, string.Format("Key: {0} produces null environment.  From profile {1}", env.Key, profile.ToString()));
+                Assert.True(profile.GetEnvironment(env.Key) != null, $"Key: {env.Key} produces null environment.  From profile {profile.ToString()}");
                 var cmdlet = new SetAzureRMEnvironmentCommand
                 {
                     CommandRuntime = commandRuntimeMock.Object,
@@ -567,7 +567,7 @@ namespace Microsoft.Azure.Commands.Profile.Test
                 cmdlet.InvokeBeginProcessing();
                 Assert.Throws<InvalidOperationException>(() => cmdlet.ExecuteCmdlet());
                 var environment = profile.GetEnvironment(env.Key);
-                Assert.True(environment != null, string.Format("Key: {0} produces null environment.  From profile {1}", env.Key, profile.ToString()));
+                Assert.True(environment != null, $"Key: {env.Key} produces null environment.  From profile {profile.ToString()}");
                 Assert.Equal(savedValue, environment.PublishSettingsFileUrl);
                 Assert.NotEqual(cmdlet.PublishSettingsFileUrl, environment.PublishSettingsFileUrl);
             }
diff --git a/src/Accounts/Accounts.Test/LoginCmdletTests.cs b/src/Accounts/Accounts.Test/LoginCmdletTests.cs
index 41bdf1baea..6fa3e5e3ba 100644
--- a/src/Accounts/Accounts.Test/LoginCmdletTests.cs
+++ b/src/Accounts/Accounts.Test/LoginCmdletTests.cs
@@ -84,7 +84,7 @@ namespace Microsoft.Azure.Commands.Profile.Test
             {
                 if(hv.Product.Name.Equals("PSVersion") && (!string.IsNullOrEmpty(hv.Product.Version)))
                 {
-                    psUserAgentString = string.Format("{0}-{1}", hv.Product.Name, hv.Product.Version);
+                    psUserAgentString = $"{hv.Product.Name}-{hv.Product.Version}";
                 }
             }
 
diff --git a/src/Accounts/Accounts.Test/Mocks/MockDataStore.cs b/src/Accounts/Accounts.Test/Mocks/MockDataStore.cs
index 5f03997356..c340cab59e 100644
--- a/src/Accounts/Accounts.Test/Mocks/MockDataStore.cs
+++ b/src/Accounts/Accounts.Test/Mocks/MockDataStore.cs
@@ -284,7 +284,7 @@ namespace Microsoft.WindowsAzure.Commands.Common.Test.Mocks
 
         public void AddCertificate(X509Certificate2 cert)
         {
-            if (cert != null && cert.Thumbprint != null)
+            if (cert?.Thumbprint != null)
             {
                 certStore[cert.Thumbprint] = cert;
             }
diff --git a/src/Accounts/Accounts/Account/DisconnectAzureRmAccount.cs b/src/Accounts/Accounts/Account/DisconnectAzureRmAccount.cs
index 2d101f9802..a266bfc2cb 100644
--- a/src/Accounts/Accounts/Account/DisconnectAzureRmAccount.cs
+++ b/src/Accounts/Accounts/Account/DisconnectAzureRmAccount.cs
@@ -80,8 +80,7 @@ namespace Microsoft.Azure.Commands.Profile
         {
             if (DefaultProfile != null && DefaultProfile.DefaultContext == null)
             {
-                WriteVerbose(string.Format("No accounts were found to disconnect from. Ending call to Disconnect-{0}Account.",
-                    ResourceManager.Common.AzureRMConstants.AzureRMPrefix));
+                WriteVerbose($"No accounts were found to disconnect from. Ending call to Disconnect-{ResourceManager.Common.AzureRMConstants.AzureRMPrefix}Account.");
                 WriteObject(null);
                 return;
             }
@@ -122,7 +121,7 @@ namespace Microsoft.Azure.Commands.Profile
             else
             {
 
-                if (ShouldProcess(string.Format("Log out principal '{0}'", azureAccount.Id), "log out"))
+                if (ShouldProcess($"Log out principal '{azureAccount.Id}'", "log out"))
                 {
                     if (GetContextModificationScope() == ContextModificationScope.CurrentUser)
                     {
@@ -133,7 +132,7 @@ namespace Microsoft.Azure.Commands.Profile
                     {
                         ModifyContext((localProfile, profileClient) =>
                        {
-                           var matchingContexts = localProfile.Contexts?.Values?.Where((c) => c != null && c.Account != null && string.Equals(c.Account.Id, azureAccount.Id, StringComparison.CurrentCultureIgnoreCase));
+                           var matchingContexts = localProfile.Contexts?.Values?.Where((c) => c?.Account != null && string.Equals(c.Account.Id, azureAccount.Id, StringComparison.CurrentCultureIgnoreCase));
                            foreach (var context in matchingContexts)
                            {
                                profileClient.TryRemoveContext(context);
diff --git a/src/Accounts/Accounts/AutoSave/EnableAzureRmContextAutosave.cs b/src/Accounts/Accounts/AutoSave/EnableAzureRmContextAutosave.cs
index b58008fa65..4219654fda 100644
--- a/src/Accounts/Accounts/AutoSave/EnableAzureRmContextAutosave.cs
+++ b/src/Accounts/Accounts/AutoSave/EnableAzureRmContextAutosave.cs
@@ -68,12 +68,12 @@ namespace Microsoft.Azure.Commands.Profile.Context
             string tokenPath = Path.Combine(session.TokenCacheDirectory, session.TokenCacheFile);
             if (!IsValidPath(contextPath))
             {
-                throw new PSInvalidOperationException(string.Format("'{0}' is not a valid path. You cannot enable context autosave without a valid context path", contextPath));
+                throw new PSInvalidOperationException($"'{contextPath}' is not a valid path. You cannot enable context autosave without a valid context path");
             }
 
             if (!IsValidPath(tokenPath))
             {
-                throw new PSInvalidOperationException(string.Format("'{0}' is not a valid path. You cannot enable context autosave without a valid token cache path", tokenPath));
+                throw new PSInvalidOperationException($"'{tokenPath}' is not a valid path. You cannot enable context autosave without a valid token cache path");
             }
 
             result = new ContextAutosaveSettings
diff --git a/src/Accounts/Accounts/AzureRmAlias/AliasHelper.cs b/src/Accounts/Accounts/AzureRmAlias/AliasHelper.cs
index b1b58e3e25..dec897d4d1 100644
--- a/src/Accounts/Accounts/AzureRmAlias/AliasHelper.cs
+++ b/src/Accounts/Accounts/AzureRmAlias/AliasHelper.cs
@@ -50,7 +50,7 @@ namespace Microsoft.Azure.Commands.Profile.AzureRmAlias
                 {
                     throw new PSInvalidOperationException(string.Format(Properties.Resources.ProfilePathNull, "PROFILE.CurrentUserAllHosts"));
                 }
-                userprofile = powershellProfile.Members.ToList().Where(a => a.Name.Equals("CurrentUserAllHosts")).First().Value.ToString();
+                userprofile = powershellProfile.Members.ToList().First(a => a.Name.Equals("CurrentUserAllHosts")).Value.ToString();
             }
 
             else if (Scope != null && Scope.Equals("LocalMachine"))
@@ -60,7 +60,7 @@ namespace Microsoft.Azure.Commands.Profile.AzureRmAlias
                 {
                     throw new PSInvalidOperationException(string.Format(Properties.Resources.ProfilePathNull, "PROFILE.AllUsersAllHosts"));
                 }
-                userprofile = powershellProfile.Members.ToList().Where(a => a.Name.Equals("AllUsersAllHosts")).First().Value.ToString();
+                userprofile = powershellProfile.Members.ToList().First(a => a.Name.Equals("AllUsersAllHosts")).Value.ToString();
             }
 
             return userprofile;
diff --git a/src/Accounts/Accounts/Common/AzureContextModificationCmdlet.cs b/src/Accounts/Accounts/Common/AzureContextModificationCmdlet.cs
index 599a4e7a0f..21aa856e45 100644
--- a/src/Accounts/Accounts/Common/AzureContextModificationCmdlet.cs
+++ b/src/Accounts/Accounts/Common/AzureContextModificationCmdlet.cs
@@ -168,7 +168,7 @@ namespace Microsoft.Azure.Commands.Profile.Common
             var result = false;
             var profile = DefaultProfile as AzureRmProfile;
             runtimeParameter = null;
-            if (profile != null && profile.Contexts != null && profile.Contexts.Any())
+            if (profile?.Contexts != null && profile.Contexts.Any())
             {
                 runtimeParameter =  new RuntimeDefinedParameter(
                     name, typeof(string),
@@ -195,7 +195,7 @@ namespace Microsoft.Azure.Commands.Profile.Common
             var result = false;
             var profile = DefaultProfile as AzureRmProfile;
             runtimeParameter = null;
-            if (profile != null && profile.Contexts != null && profile.Contexts.Any())
+            if (profile?.Contexts != null && profile.Contexts.Any())
             {
                 runtimeParameter = new RuntimeDefinedParameter(
                     name, typeof(string),
diff --git a/src/Accounts/Accounts/CommonModule/AzModule.cs b/src/Accounts/Accounts/CommonModule/AzModule.cs
index 136fefcafb..1724eaea50 100644
--- a/src/Accounts/Accounts/CommonModule/AzModule.cs
+++ b/src/Accounts/Accounts/CommonModule/AzModule.cs
@@ -157,8 +157,8 @@ namespace Microsoft.Azure.Commands.Common
         internal async Task OnResponseCreated(string id, CancellationToken cancellationToken, GetEventData getEventData, SignalDelegate signal, string processRecordId)
         {
             var data = EventDataConverter.ConvertFrom(getEventData());
-            var response = data?.ResponseMessage as HttpResponseMessage;
-            if (response != null)
+
+            if (data?.ResponseMessage is HttpResponseMessage response)
             {
                 AzurePSQoSEvent qos;
                 if (_telemetry.TryGetValue(processRecordId, out qos) && null != response?.Headers)
@@ -290,8 +290,8 @@ namespace Microsoft.Azure.Commands.Common
         internal async Task OnBeforeCall(string id, CancellationToken cancellationToken, GetEventData getEventData, SignalDelegate signal, string processRecordId)
         {
             var data = EventDataConverter.ConvertFrom(getEventData()); // also, we manually use our TypeConverter to return an appropriate type
-            var request = data?.RequestMessage as HttpRequestMessage;
-            if (request != null)
+
+            if (data?.RequestMessage is HttpRequestMessage request)
             {
                 AzurePSQoSEvent qos;
                 IEnumerable<string> headerValues;
diff --git a/src/Accounts/Accounts/Context/GetAzureRMContext.cs b/src/Accounts/Accounts/Context/GetAzureRMContext.cs
index cf1404ebd4..80b21dd8d2 100644
--- a/src/Accounts/Accounts/Context/GetAzureRMContext.cs
+++ b/src/Accounts/Accounts/Context/GetAzureRMContext.cs
@@ -95,7 +95,7 @@ namespace Microsoft.Azure.Commands.Profile
             if (this.ListAvailable.IsPresent)
             {
                 var profile = DefaultProfile as AzureRmProfile;
-                if (profile != null && profile.Contexts != null)
+                if (profile?.Contexts != null)
                 {
                     foreach (var context in profile.Contexts)
                     {
@@ -148,7 +148,7 @@ namespace Microsoft.Azure.Commands.Profile
         {
             var parameters = new RuntimeDefinedParameterDictionary();
             AzureRmProfile localProfile = DefaultProfile as AzureRmProfile;
-            if (localProfile != null && localProfile.Contexts != null && localProfile.Contexts.Count > 0)
+            if (localProfile?.Contexts != null && localProfile.Contexts.Count > 0)
             {
                 var nameParameter = new RuntimeDefinedParameter(
                 "Name", typeof(string),
diff --git a/src/Accounts/Accounts/Context/ImportAzureRMContext.cs b/src/Accounts/Accounts/Context/ImportAzureRMContext.cs
index ce4d32bbf5..fbc44df222 100644
--- a/src/Accounts/Accounts/Context/ImportAzureRMContext.cs
+++ b/src/Accounts/Accounts/Context/ImportAzureRMContext.cs
@@ -135,8 +135,7 @@ namespace Microsoft.Azure.Commands.Profile
                 else
                 {
                     var defaultContext = profile.DefaultContext;
-                    if (defaultContext != null &&
-                        defaultContext.Subscription != null &&
+                    if (defaultContext?.Subscription != null &&
                         defaultContext.Subscription.State != null &&
                         !defaultContext.Subscription.State.Equals(
                         "Enabled",
diff --git a/src/Accounts/Accounts/Context/RenameAzureRmContext.cs b/src/Accounts/Accounts/Context/RenameAzureRmContext.cs
index e46542af8d..2cfd8413a6 100644
--- a/src/Accounts/Accounts/Context/RenameAzureRmContext.cs
+++ b/src/Accounts/Accounts/Context/RenameAzureRmContext.cs
@@ -75,8 +75,7 @@ namespace Microsoft.Azure.Commands.Profile.Context
             if (!string.IsNullOrWhiteSpace(sourceName) && MyInvocation.BoundParameters.ContainsKey(TargetParameterName))
             {
                 var targetName = MyInvocation.BoundParameters[TargetParameterName] as string;
-                var defaultProfile = DefaultProfile as AzureRmProfile;
-                if (!string.IsNullOrWhiteSpace(sourceName) && !string.IsNullOrWhiteSpace(targetName) && defaultProfile != null && !string.Equals(sourceName, targetName, StringComparison.OrdinalIgnoreCase))
+                if (!string.IsNullOrWhiteSpace(sourceName) && !string.IsNullOrWhiteSpace(targetName) && DefaultProfile is AzureRmProfile defaultProfile && !string.Equals(sourceName, targetName, StringComparison.OrdinalIgnoreCase))
                 {
                     ConfirmAction(
                         Force.IsPresent, 
diff --git a/src/Accounts/Accounts/Context/SetAzureRMContext.cs b/src/Accounts/Accounts/Context/SetAzureRMContext.cs
index de880dc897..254c739305 100644
--- a/src/Accounts/Accounts/Context/SetAzureRMContext.cs
+++ b/src/Accounts/Accounts/Context/SetAzureRMContext.cs
@@ -138,8 +138,7 @@ namespace Microsoft.Azure.Commands.Profile
         private void CompleteContextProcessing(IProfileOperations profile)
         {
             var context = profile.DefaultContext;
-            if (context != null &&
-                context.Subscription != null &&
+            if (context?.Subscription != null &&
                 context.Subscription.State != null &&
                 !context.Subscription.State.Equals(
                 "Enabled",
diff --git a/src/Accounts/Accounts/Environment/AddAzureRMEnvironment.cs b/src/Accounts/Accounts/Environment/AddAzureRMEnvironment.cs
index d373d47709..45ef3c1590 100644
--- a/src/Accounts/Accounts/Environment/AddAzureRMEnvironment.cs
+++ b/src/Accounts/Accounts/Environment/AddAzureRMEnvironment.cs
@@ -270,9 +270,9 @@ namespace Microsoft.Azure.Commands.Profile
                                 SetEndpointIfProvided(newEnvironment, AzureEnvironment.Endpoint.GraphEndpointResourceId,
                                     metadataEndpoints.GraphEndpoint);
                                 SetEndpointIfProvided(newEnvironment, AzureEnvironment.Endpoint.AzureKeyVaultDnsSuffix,
-                                        AzureKeyVaultDnsSuffix ?? string.Format("vault.{0}", domain).ToLowerInvariant());
+                                        AzureKeyVaultDnsSuffix ?? $"vault.{domain}".ToLowerInvariant());
                                 SetEndpointIfProvided(newEnvironment, AzureEnvironment.Endpoint.AzureKeyVaultServiceEndpointResourceId,
-                                        AzureKeyVaultServiceEndpointResourceId ?? string.Format("https://vault.{0}", domain).ToLowerInvariant());
+                                        AzureKeyVaultServiceEndpointResourceId ?? $"https://vault.{domain}".ToLowerInvariant());
                                 SetEndpointIfProvided(newEnvironment, AzureEnvironment.Endpoint.StorageEndpointSuffix, StorageEndpoint ?? domain);
                                 newEnvironment.OnPremise = metadataEndpoints.authentication.LoginEndpoint.TrimEnd('/').EndsWith("/adfs", System.StringComparison.OrdinalIgnoreCase);
                             }
diff --git a/src/Accounts/Accounts/Environment/SetAzureRMEnvironment.cs b/src/Accounts/Accounts/Environment/SetAzureRMEnvironment.cs
index d27a74fe2e..7e9b8b7d4f 100644
--- a/src/Accounts/Accounts/Environment/SetAzureRMEnvironment.cs
+++ b/src/Accounts/Accounts/Environment/SetAzureRMEnvironment.cs
@@ -241,9 +241,9 @@ namespace Microsoft.Azure.Commands.Profile
                                 SetEndpointIfProvided(newEnvironment, AzureEnvironment.Endpoint.GraphEndpointResourceId,
                                     metadataEndpoints.GraphEndpoint);
                                 SetEndpointIfProvided(newEnvironment, AzureEnvironment.Endpoint.AzureKeyVaultDnsSuffix,
-                                        AzureKeyVaultDnsSuffix ?? string.Format("vault.{0}", domain).ToLowerInvariant());
+                                        AzureKeyVaultDnsSuffix ?? $"vault.{domain}".ToLowerInvariant());
                                 SetEndpointIfProvided(newEnvironment, AzureEnvironment.Endpoint.AzureKeyVaultServiceEndpointResourceId,
-                                        AzureKeyVaultServiceEndpointResourceId ?? string.Format("https://vault.{0}", domain).ToLowerInvariant());
+                                        AzureKeyVaultServiceEndpointResourceId ?? $"https://vault.{domain}".ToLowerInvariant());
                                 SetEndpointIfProvided(newEnvironment, AzureEnvironment.Endpoint.StorageEndpointSuffix, StorageEndpoint ?? domain);
                                 newEnvironment.OnPremise = metadataEndpoints.authentication.LoginEndpoint.TrimEnd('/').EndsWith("/adfs", System.StringComparison.OrdinalIgnoreCase);
                             }
diff --git a/src/Accounts/Accounts/Errors/ResolveError.cs b/src/Accounts/Accounts/Errors/ResolveError.cs
index 6a2b8603a6..105e1aea08 100644
--- a/src/Accounts/Accounts/Errors/ResolveError.cs
+++ b/src/Accounts/Accounts/Errors/ResolveError.cs
@@ -90,8 +90,8 @@ namespace Microsoft.Azure.Commands.Profile.Errors
         private IEnumerable<ErrorRecord> GetErrorVariable()
         {
             IEnumerable<ErrorRecord> result = null;
-            var errors = GetVariableValue("global:Error", null) as IEnumerable;
-            if (errors != null)
+
+            if (GetVariableValue("global:Error", null) is IEnumerable errors)
             {
                 result = errors.OfType<ErrorRecord>();
             }
@@ -116,21 +116,18 @@ namespace Microsoft.Azure.Commands.Profile.Errors
 
         private void HandleException(Exception exception, ErrorRecord record, bool inner = false)
         {
-            var aggregate = exception as AggregateException;
-            var hyakException = exception as Hyak.Common.CloudException;
-            var restException = exception as Microsoft.Rest.Azure.CloudException;
-            if (aggregate != null)
+            if (exception is AggregateException aggregate)
             {
                 foreach (var innerException in aggregate.InnerExceptions.Where(e => e!=null))
                 {
                     HandleException(innerException, record, true);
                 }
             }
-            else if (hyakException != null)
+            else if (exception is Hyak.Common.CloudException hyakException)
             {
                 WriteObject(new AzureRestExceptionRecord(hyakException, record, inner));
             }
-            else if (restException != null)
+            else if (exception is Microsoft.Rest.Azure.CloudException restException)
             {
                 WriteObject(new AzureRestExceptionRecord(restException, record, inner));
             }
diff --git a/src/Accounts/Accounts/Models/AzureRmProfileExtensions.cs b/src/Accounts/Accounts/Models/AzureRmProfileExtensions.cs
index 15f2530c7e..1bf86179c4 100644
--- a/src/Accounts/Accounts/Models/AzureRmProfileExtensions.cs
+++ b/src/Accounts/Accounts/Models/AzureRmProfileExtensions.cs
@@ -44,8 +44,7 @@ namespace Microsoft.Azure.Commands.ResourceManager.Common
                 throw new ArgumentNullException("newContext", Resources.ContextCannotBeNull);
             }
 
-            var rmProfile = profile as AzureRmProfile;
-            if (rmProfile != null)
+            if (profile is AzureRmProfile rmProfile)
             {
                 rmProfile.TrySetDefaultContext(name, newContext);
             }
diff --git a/src/Accounts/Accounts/Models/RMProfileClient.cs b/src/Accounts/Accounts/Models/RMProfileClient.cs
index 01638f0a80..f8c95998d5 100644
--- a/src/Accounts/Accounts/Models/RMProfileClient.cs
+++ b/src/Accounts/Accounts/Models/RMProfileClient.cs
@@ -175,7 +175,7 @@ namespace Microsoft.Azure.Commands.ResourceManager.Common
                                 { AzureAccount.AccountType.ManagedService, ProfileMessages.MSITenantDomainNotFound }
                             };
                             string typeMessage = typeMessageMap.ContainsKey(account.Type) ? typeMessageMap[account.Type] : string.Empty;
-                            throw new ArgumentNullException(string.Format("{0} {1}", baseMessage, typeMessage));
+                            throw new ArgumentNullException($"{baseMessage} {typeMessage}");
                         }
 
                         tenantId = tenant.Id;
@@ -620,7 +620,7 @@ namespace Microsoft.Azure.Commands.ResourceManager.Common
 
                 subscription = null;
 
-                if (accessToken != null && accessToken.TenantId != null)
+                if (accessToken?.TenantId != null)
                 {
                     tenant = new AzureTenant();
                     tenant.Id = accessToken.TenantId;
diff --git a/src/Accounts/Authentication.ResourceManager/AzureRmProfile.cs b/src/Accounts/Authentication.ResourceManager/AzureRmProfile.cs
index 1a36319644..7e6083867d 100644
--- a/src/Accounts/Authentication.ResourceManager/AzureRmProfile.cs
+++ b/src/Accounts/Authentication.ResourceManager/AzureRmProfile.cs
@@ -423,17 +423,17 @@ namespace Microsoft.Azure.Commands.Common.Authentication.Models
 
                 if (null != context.Tenant && context.Subscription != null && null != context.Account)
                 {
-                    name = string.Format("{0} ({1}) - {2} - {3}", context.Subscription.Name, context.Subscription.Id, context.Tenant.Id, context.Account.Id);
+                    name = $"{context.Subscription.Name} ({context.Subscription.Id}) - {context.Tenant.Id} - {context.Account.Id}";
                     result = true;
                 }
                 else if (context.Subscription != null && context.Account != null)
                 {
-                    name = string.Format("{0} ({1}) - {2}", context.Subscription.Name, context.Subscription.Id, context.Account.Id);
+                    name = $"{context.Subscription.Name} ({context.Subscription.Id}) - {context.Account.Id}";
                     result = true;
                 }
                 else if (context.Tenant != null && context.Account != null)
                 {
-                    name = string.Format("{0} - {1}", context.Tenant.Id, context.Account.Id);
+                    name = $"{context.Tenant.Id} - {context.Account.Id}";
                     result = true;
                 }
                 else
diff --git a/src/Accounts/Authentication.ResourceManager/AzureRmProfileConverter.cs b/src/Accounts/Authentication.ResourceManager/AzureRmProfileConverter.cs
index 255194fc61..5e764a3511 100644
--- a/src/Accounts/Authentication.ResourceManager/AzureRmProfileConverter.cs
+++ b/src/Accounts/Authentication.ResourceManager/AzureRmProfileConverter.cs
@@ -131,8 +131,7 @@ namespace Microsoft.Azure.Commands.ResourceManager.Common
 
         public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer)
         {
-            IAzureTokenCache cache = value as IAzureTokenCache;
-            if (cache != null)
+            if (value is IAzureTokenCache cache)
             {
                 if (_serializeCache)
                 {
diff --git a/src/Accounts/Authentication.ResourceManager/AzureRmServicePrincipalKeyStore.Netcore.cs b/src/Accounts/Authentication.ResourceManager/AzureRmServicePrincipalKeyStore.Netcore.cs
index 08795a5354..345bf391fb 100644
--- a/src/Accounts/Authentication.ResourceManager/AzureRmServicePrincipalKeyStore.Netcore.cs
+++ b/src/Accounts/Authentication.ResourceManager/AzureRmServicePrincipalKeyStore.Netcore.cs
@@ -41,7 +41,7 @@ namespace Microsoft.Azure.Commands.ResourceManager.Common
         public AzureRmServicePrincipalKeyStore(IAzureContextContainer profile)
         {
             _credentials = new Dictionary<string, SecureString>();
-            if (profile != null && profile.Accounts != null)
+            if (profile?.Accounts != null)
             {
                 foreach (var account in profile.Accounts)
                 {
diff --git a/src/Accounts/Authentication.ResourceManager/Common/PSObjectExtensions.cs b/src/Accounts/Authentication.ResourceManager/Common/PSObjectExtensions.cs
index 5af26b7cfb..16b421d802 100644
--- a/src/Accounts/Authentication.ResourceManager/Common/PSObjectExtensions.cs
+++ b/src/Accounts/Authentication.ResourceManager/Common/PSObjectExtensions.cs
@@ -34,7 +34,7 @@ namespace Microsoft.Azure.Commands.Profile.Common
         public static bool HasProperty(this PSObject source, string name)
         {
             bool result = false;
-            if (source != null && source.Properties != null)
+            if (source?.Properties != null)
             {
                 var props = source.Properties.Match(name);
                 result = props != null && props.Any();
@@ -53,7 +53,7 @@ namespace Microsoft.Azure.Commands.Profile.Common
         public static bool HasProperty<T>(this PSObject source, string name)
         {
             bool result = false;
-            if (source != null && source.Properties != null)
+            if (source?.Properties != null)
             {
                 var props = source.Properties.Match(name);
                 result = props != null && props.Any((p) => p.IsOfType<T>());
@@ -74,7 +74,7 @@ namespace Microsoft.Azure.Commands.Profile.Common
         {
             bool result = false;
             propertyValue = null;
-            if (source != null && source.Properties != null)
+            if (source?.Properties != null)
             {
                 var props = source.Properties.Match(name);
                 if (props != null)
@@ -100,7 +100,7 @@ namespace Microsoft.Azure.Commands.Profile.Common
         {
             bool result = false;
             propertyValue = default(T);
-            if (source != null && source.Properties != null)
+            if (source?.Properties != null)
             {
                 var props = source.Properties.Match(name);
                 if (props != null)
@@ -127,7 +127,7 @@ namespace Microsoft.Azure.Commands.Profile.Common
         public static T GetProperty<T>(this PSObject source, string name)
         {
             T propertyValue = default(T);
-            if (source != null && source.Properties != null)
+            if (source?.Properties != null)
             {
                 var props = source.Properties.Match(name);
                 if (props != null)
@@ -152,7 +152,7 @@ namespace Microsoft.Azure.Commands.Profile.Common
         public static object GetProperty(this PSObject source, string name)
         {
             object propertyValue = default(object);
-            if (source != null && source.Properties != null)
+            if (source?.Properties != null)
             {
                 var props = source.Properties.Match(name);
                 if (props != null)
@@ -193,11 +193,9 @@ namespace Microsoft.Azure.Commands.Profile.Common
                 {
                     foreach (var entry in table.Keys)
                     {
-                        var key = entry as string;
-                        if (key != null)
+                        if (entry is string key)
                         {
-                            string value = table[entry] as string;
-                            if (value != null)
+                            if (table[entry] is string value)
                             {
                                 dictionary[key] = value;
                             }
@@ -220,8 +218,7 @@ namespace Microsoft.Azure.Commands.Profile.Common
             {
                 foreach (var obj in array)
                 {
-                    var item = obj as string;
-                    if (item != null)
+                    if (obj is string item)
                     {
                         list.Add(item);
                     }
@@ -250,10 +247,9 @@ namespace Microsoft.Azure.Commands.Profile.Common
             {
                 result = true;
             }
-            else if (info!= null && info.Value != null)
+            else if (info?.Value != null)
             {
-                var psValue = info.Value as PSObject;
-                if (psValue != null)
+                if (info.Value is PSObject psValue)
                 {
                     if (typeof(T) == typeof(PSObject))
                     {
@@ -276,10 +272,9 @@ namespace Microsoft.Azure.Commands.Profile.Common
             {
                 result = (T)(info.Value);
             }
-            else if (info != null && info.Value != null)
+            else if (info?.Value != null)
             {
-                var psValue = info.Value as PSObject;
-                if (psValue != null)
+                if (info.Value is PSObject psValue)
                 {
                     if (typeof(T) == typeof(PSObject))
                     {
diff --git a/src/Accounts/Authentication.ResourceManager/ContextModelExtensions.cs b/src/Accounts/Authentication.ResourceManager/ContextModelExtensions.cs
index fee0ec08f2..8cf0292eef 100644
--- a/src/Accounts/Authentication.ResourceManager/ContextModelExtensions.cs
+++ b/src/Accounts/Authentication.ResourceManager/ContextModelExtensions.cs
@@ -25,8 +25,7 @@ namespace Microsoft.Azure.Commands.Common.Authentication.ResourceManager
     {
         public static bool HasTokenCache(this IAzureContextContainer container)
         {
-            return container != null 
-                && container.DefaultContext != null 
+            return container?.DefaultContext != null 
                 && container.DefaultContext.TokenCache != null 
                 && container.DefaultContext.TokenCache.CacheData != null 
                 && container.DefaultContext.TokenCache.CacheData.Length > 0;
@@ -34,7 +33,7 @@ namespace Microsoft.Azure.Commands.Common.Authentication.ResourceManager
 
         public static void SetTokenCache(this IAzureContextContainer container, IAzureTokenCache cache)
         {
-            if (container != null && container.DefaultContext != null)
+            if (container?.DefaultContext != null)
             {
                 container.DefaultContext.TokenCache = cache;
             }
diff --git a/src/Accounts/Authentication.ResourceManager/Models/AzureContextConverter.cs b/src/Accounts/Authentication.ResourceManager/Models/AzureContextConverter.cs
index d5872bdac1..7621455ce4 100644
--- a/src/Accounts/Authentication.ResourceManager/Models/AzureContextConverter.cs
+++ b/src/Accounts/Authentication.ResourceManager/Models/AzureContextConverter.cs
@@ -145,8 +145,8 @@ namespace Microsoft.Azure.Commands.Profile.Models
         object ConvertContextObject(PSObject source)
         {
             PSAzureProfile result = new PSAzureProfile();
-            var contextSource = source?.BaseObject as PSAzureContext;
-            if (contextSource != null)
+
+            if (source?.BaseObject is PSAzureContext contextSource)
             {
                 result.Context = contextSource;
             }
@@ -163,11 +163,9 @@ namespace Microsoft.Azure.Commands.Profile.Models
         {
             foreach (var key in source.Keys)
             {
-                var name = key as string;
-                if (name != null)
+                if (key is string name)
                 {
-                    var value = source[key] as PSObject;
-                    if (value != null)
+                    if (source[key] is PSObject value)
                     {
                         destination.Add(name, new PSAzureEnvironment(value));
                     }
diff --git a/src/Accounts/Authentication.ResourceManager/Models/PSAzureEnvironment.cs b/src/Accounts/Authentication.ResourceManager/Models/PSAzureEnvironment.cs
index 54c3e009d1..3ccfd4e7c6 100644
--- a/src/Accounts/Authentication.ResourceManager/Models/PSAzureEnvironment.cs
+++ b/src/Accounts/Authentication.ResourceManager/Models/PSAzureEnvironment.cs
@@ -388,8 +388,7 @@ namespace Microsoft.Azure.Commands.Profile.Models
         /// <returns>True if the instances are equivalent, false otherwise.</returns>
         public override bool Equals(object obj)
         {
-            var other = obj as PSAzureEnvironment;
-            if (other != null)
+            if (obj is PSAzureEnvironment other)
             {
                 return Name == other.Name && EnableAdfsAuthentication == other.EnableAdfsAuthentication
                        && ActiveDirectoryAuthority == other.ActiveDirectoryAuthority
diff --git a/src/Accounts/Authentication.ResourceManager/ProtectedFileProvider.cs b/src/Accounts/Authentication.ResourceManager/ProtectedFileProvider.cs
index a8aaa3f709..97f120d3c0 100644
--- a/src/Accounts/Authentication.ResourceManager/ProtectedFileProvider.cs
+++ b/src/Accounts/Authentication.ResourceManager/ProtectedFileProvider.cs
@@ -140,8 +140,7 @@ namespace Microsoft.Azure.Commands.Common.Authentication.ResourceManager
                 var stream = Interlocked.Exchange(ref _stream, null);
                 if (stream != null)
                 {
-                    FileStream file = stream as FileStream;
-                    if (file != null)
+                    if (stream is FileStream file)
                     {
                         file.Flush(true);
                     }
diff --git a/src/Accounts/Authentication.ResourceManager/Serialization/ModelConversionExtensions.cs b/src/Accounts/Authentication.ResourceManager/Serialization/ModelConversionExtensions.cs
index 64d8203187..7ba2fd5e1d 100644
--- a/src/Accounts/Authentication.ResourceManager/Serialization/ModelConversionExtensions.cs
+++ b/src/Accounts/Authentication.ResourceManager/Serialization/ModelConversionExtensions.cs
@@ -75,7 +75,7 @@ namespace Microsoft.Azure.Commands.ResourceManager.Common.Serialization
                 }
             }
 
-            return profile != null && profile.Context != null;
+            return profile?.Context != null;
             
         }
     }
diff --git a/src/Accounts/Authentication.Test/Cmdlets/ConnectAccount.cs b/src/Accounts/Authentication.Test/Cmdlets/ConnectAccount.cs
index 978a42435f..920834b2ed 100644
--- a/src/Accounts/Authentication.Test/Cmdlets/ConnectAccount.cs
+++ b/src/Accounts/Authentication.Test/Cmdlets/ConnectAccount.cs
@@ -256,11 +256,11 @@ namespace Common.Authentication.Test.Cmdlets
             {
                 if (subscriptionId != null)
                 {
-                    throw new PSInvalidOperationException(String.Format("The provided account {0} does not have access to subscription ID '{1}'. Please try logging in with different credentials or a different subscription ID.", account.Id, subscriptionId));
+                    throw new PSInvalidOperationException($"The provided account {account.Id} does not have access to subscription ID '{subscriptionId}'. Please try logging in with different credentials or a different subscription ID.");
                 }
                 else if (subscriptionName != null)
                 {
-                    throw new PSInvalidOperationException(String.Format("The provided account {0} does not have access to subscription name '{1}'. Please try logging in with different credentials or a different subscription name.", account.Id, subscriptionName));
+                    throw new PSInvalidOperationException($"The provided account {account.Id} does not have access to subscription name '{subscriptionName}'. Please try logging in with different credentials or a different subscription name.");
                 }
 
                 var newContext = new AzureContext(account, environment, newTenant);
@@ -585,7 +585,7 @@ namespace Common.Authentication.Test.Cmdlets
 
                 subscription = null;
 
-                if (accessToken != null && accessToken.TenantId != null)
+                if (accessToken?.TenantId != null)
                 {
                     tenant = new AzureTenant();
                     tenant.Id = accessToken.TenantId;
diff --git a/src/Accounts/Authentication.Test/LoginTests.cs b/src/Accounts/Authentication.Test/LoginTests.cs
index 386229bde7..e27162195b 100644
--- a/src/Accounts/Authentication.Test/LoginTests.cs
+++ b/src/Accounts/Authentication.Test/LoginTests.cs
@@ -111,12 +111,12 @@ namespace Common.Authentication.Test
             string tokenPath = Path.Combine(session.TokenCacheDirectory, session.TokenCacheFile);
             if (!IsValidPath(contextPath))
             {
-                throw new PSInvalidOperationException(string.Format("'{0}' is not a valid path. You cannot enable context autosave without a valid context path", contextPath));
+                throw new PSInvalidOperationException($"'{contextPath}' is not a valid path. You cannot enable context autosave without a valid context path");
             }
 
             if (!IsValidPath(tokenPath))
             {
-                throw new PSInvalidOperationException(string.Format("'{0}' is not a valid path. You cannot enable context autosave without a valid token cache path", tokenPath));
+                throw new PSInvalidOperationException($"'{tokenPath}' is not a valid path. You cannot enable context autosave without a valid token cache path");
             }
 
             result = new ContextAutosaveSettings
diff --git a/src/Accounts/Authentication.Test/LongRunningCmdletTests.cs b/src/Accounts/Authentication.Test/LongRunningCmdletTests.cs
index fb65aa8553..17f1bfb30b 100644
--- a/src/Accounts/Authentication.Test/LongRunningCmdletTests.cs
+++ b/src/Accounts/Authentication.Test/LongRunningCmdletTests.cs
@@ -267,7 +267,7 @@ namespace Common.Authentication.Test
             lock (lockObject)
             {
                 var job = sender as AzureLongRunningJob;
-                xunitLogger.Information(string.Format("[statechangedhandler]: previous state: '{0}', current state: '{1}'", args.PreviousJobStateInfo?.State, args.JobStateInfo?.State));
+                xunitLogger.Information($"[statechangedhandler]: previous state: '{args.PreviousJobStateInfo?.State}', current state: '{args.JobStateInfo?.State}'");
                 if (args.JobStateInfo.State == JobState.Completed || args.JobStateInfo.State == JobState.Failed || args.JobStateInfo.State == JobState.Stopped)
                 {
                     this.jobCompleted.Set();
@@ -276,10 +276,7 @@ namespace Common.Authentication.Test
                 {
                     if (args.JobStateInfo.State == JobState.Blocked)
                     {
-                        if (job != null)
-                        {
-                            job.TryStart();
-                        }
+                        job?.TryStart();
 
                     }
                 }
diff --git a/src/Accounts/Authentication.Test/Mocks/MockDataStore.cs b/src/Accounts/Authentication.Test/Mocks/MockDataStore.cs
index 9e0211515c..31d61808d0 100644
--- a/src/Accounts/Authentication.Test/Mocks/MockDataStore.cs
+++ b/src/Accounts/Authentication.Test/Mocks/MockDataStore.cs
@@ -278,7 +278,7 @@ namespace Microsoft.WindowsAzure.Commands.Common.Test.Mocks
 
         public void AddCertificate(X509Certificate2 cert)
         {
-            if (cert != null && cert.Thumbprint != null)
+            if (cert?.Thumbprint != null)
             {
                 certStore[cert.Thumbprint] = cert;
             }
diff --git a/src/Accounts/Authentication.Test/TelemetryTests.cs b/src/Accounts/Authentication.Test/TelemetryTests.cs
index 78211583cd..ed87f9a723 100644
--- a/src/Accounts/Authentication.Test/TelemetryTests.cs
+++ b/src/Accounts/Authentication.Test/TelemetryTests.cs
@@ -120,8 +120,8 @@ namespace Common.Authentication.Test
             string oldFileValue = null;
             var dataCollectionPath = Path.Combine(AzureSession.Instance.ProfileDirectory, AzurePSDataCollectionProfile.DefaultFileName);
             var oldDataStore = AzureSession.Instance.DataStore;
-            var memoryStore = oldDataStore as MemoryDataStore;
-            if (memoryStore != null)
+
+            if (oldDataStore is MemoryDataStore memoryStore)
             {
                 dataStore = memoryStore;
                 if (dataStore.VirtualStore.ContainsKey(dataCollectionPath))
diff --git a/src/Accounts/Authentication.Test/TestHttpOperationsFactory.cs b/src/Accounts/Authentication.Test/TestHttpOperationsFactory.cs
index b24ebdb9d4..7e4c4da1b2 100644
--- a/src/Accounts/Authentication.Test/TestHttpOperationsFactory.cs
+++ b/src/Accounts/Authentication.Test/TestHttpOperationsFactory.cs
@@ -90,7 +90,7 @@ namespace Microsoft.Azure.Commands.Common.Authentication.Test
             {
                 if (!_responses.ContainsKey(requestUri))
                 {
-                    throw new CloudException(string.Format("Unexpected request Uri '{0}'", requestUri));
+                    throw new CloudException($"Unexpected request Uri '{requestUri}'");
                 }
 
                 var output = _responses[requestUri];
diff --git a/src/Accounts/Authentication/Authentication/TokenCache/AdalTokenMigrator.cs b/src/Accounts/Authentication/Authentication/TokenCache/AdalTokenMigrator.cs
index 749de7a4bf..5f780a5af8 100644
--- a/src/Accounts/Authentication/Authentication/TokenCache/AdalTokenMigrator.cs
+++ b/src/Accounts/Authentication/Authentication/TokenCache/AdalTokenMigrator.cs
@@ -82,15 +82,15 @@ namespace Microsoft.Azure.Commands.Common.Authentication.Authentication.TokenCac
             {
                 try
                 {
-                    var accountEnvironment = string.Format("https://{0}/", account.Environment);
-                    var environment = AzureEnvironment.PublicEnvironments.Values.Where(e => e.ActiveDirectoryAuthority == accountEnvironment).FirstOrDefault();
+                    var accountEnvironment = $"https://{account.Environment}/";
+                    var environment = AzureEnvironment.PublicEnvironments.Values.FirstOrDefault(e => e.ActiveDirectoryAuthority == accountEnvironment);
                     if (environment == null)
                     {
                         // We cannot map the previous environment to one of the public environments
                         continue;
                     }
 
-                    var scopes = new string[] { string.Format("{0}{1}", environment.ActiveDirectoryServiceEndpointResourceId, ".default") };
+                    var scopes = new string[] { $"{environment.ActiveDirectoryServiceEndpointResourceId}{".default"}" };
 
                     try
                     {
diff --git a/src/Accounts/Authentication/Authentication/TokenCache/PowerShellTokenCacheProvider.cs b/src/Accounts/Authentication/Authentication/TokenCache/PowerShellTokenCacheProvider.cs
index 6d825d80a4..9f0ea18d45 100644
--- a/src/Accounts/Authentication/Authentication/TokenCache/PowerShellTokenCacheProvider.cs
+++ b/src/Accounts/Authentication/Authentication/TokenCache/PowerShellTokenCacheProvider.cs
@@ -64,7 +64,7 @@ namespace Microsoft.Azure.Commands.Common.Authentication
 
             try
             {
-                TracingAdapter.Information(string.Format("[AuthenticationClientFactory] Calling RemoveAsync - Account: '{0}'", account.Username));
+                TracingAdapter.Information($"[AuthenticationClientFactory] Calling RemoveAsync - Account: '{account.Username}'");
                 client.RemoveAsync(account)
                     .ConfigureAwait(false).GetAwaiter().GetResult();
             }
@@ -78,7 +78,7 @@ namespace Microsoft.Azure.Commands.Common.Authentication
 
         public IEnumerable<IAccount> ListAccounts(string authority = null)
         {
-            TracingAdapter.Information(string.Format("[AuthenticationClientFactory] Calling GetAccountsAsync on {0}", authority ?? "AzureCloud"));
+            TracingAdapter.Information($"[AuthenticationClientFactory] Calling GetAccountsAsync on {authority ?? "AzureCloud"}");
 
             return CreatePublicClient(authority: authority)
                     .GetAccountsAsync()
@@ -87,7 +87,7 @@ namespace Microsoft.Azure.Commands.Common.Authentication
 
         public List<IAccessToken> GetTenantTokensForAccount(IAccount account, IAzureEnvironment environment, Action<string> promptAction)
         {
-            TracingAdapter.Information(string.Format("[AuthenticationClientFactory] Attempting to acquire tenant tokens for account '{0}'.", account.Username));
+            TracingAdapter.Information($"[AuthenticationClientFactory] Attempting to acquire tenant tokens for account '{account.Username}'.");
             List<IAccessToken> result = new List<IAccessToken>();
             var azureAccount = new AzureAccount()
             {
@@ -122,7 +122,7 @@ namespace Microsoft.Azure.Commands.Common.Authentication
 
         public List<IAzureSubscription> GetSubscriptionsFromTenantToken(IAccount account, IAzureEnvironment environment, IAccessToken token, Action<string> promptAction)
         {
-            TracingAdapter.Information(string.Format("[AuthenticationClientFactory] Attempting to acquire subscriptions in tenant '{0}' for account '{1}'.", token.TenantId, account.Username));
+            TracingAdapter.Information($"[AuthenticationClientFactory] Attempting to acquire subscriptions in tenant '{token.TenantId}' for account '{account.Username}'.");
             List<IAzureSubscription> result = new List<IAzureSubscription>();
             var azureAccount = new AzureAccount()
             {
diff --git a/src/Accounts/Authentication/Factories/AuthenticationFactory.cs b/src/Accounts/Authentication/Factories/AuthenticationFactory.cs
index b7a959be73..035a4e3416 100644
--- a/src/Accounts/Authentication/Factories/AuthenticationFactory.cs
+++ b/src/Accounts/Authentication/Factories/AuthenticationFactory.cs
@@ -146,7 +146,7 @@ namespace Microsoft.Azure.Commands.Common.Authentication.Factories
                         throw;
                     }
 
-                    TracingAdapter.Information(string.Format("[AuthenticationFactory] Exception caught when calling TryAuthenticate, retrying authentication - Exception message: '{0}'", e.Message));
+                    TracingAdapter.Information($"[AuthenticationFactory] Exception caught when calling TryAuthenticate, retrying authentication - Exception message: '{e.Message}'");
                     continue;
                 }
 
@@ -158,8 +158,7 @@ namespace Microsoft.Azure.Commands.Common.Authentication.Factories
 
         private static bool IsTransientException(Exception e)
         {
-            var msalException = e.InnerException as MsalServiceException;
-            if(msalException != null)
+            if(e.InnerException is MsalServiceException msalException)
             {
                 return msalException.ErrorCode == MsalError.RequestTimeout ||
                     msalException.ErrorCode == MsalError.ServiceNotAvailable;
diff --git a/src/Accounts/Authentication/Factories/ClientFactory.cs b/src/Accounts/Authentication/Factories/ClientFactory.cs
index 6ee22462db..68e76b67f4 100644
--- a/src/Accounts/Authentication/Factories/ClientFactory.cs
+++ b/src/Accounts/Authentication/Factories/ClientFactory.cs
@@ -173,7 +173,7 @@ namespace Microsoft.Azure.Commands.Common.Authentication.Factories
 
             if (null == account)
             {
-                throw new AzPSArgumentException(string.Format("Account with name '{0}' does not exist.", subscription.GetAccount()), "accountName", ErrorKind.UserError);
+                throw new AzPSArgumentException($"Account with name '{subscription.GetAccount()}' does not exist.", "accountName", ErrorKind.UserError);
             }
 
             var environment = profile.Environments.FirstOrDefault((e) => string.Equals(e.Name, subscription.GetEnvironment(), StringComparison.OrdinalIgnoreCase));
@@ -403,12 +403,11 @@ namespace Microsoft.Azure.Commands.Common.Authentication.Factories
                 while (enumerator.MoveNext())
                 {
                     var handler = enumerator.Value;
-                    ICloneable cloneableHandler = handler as ICloneable;
-                    if (cloneableHandler != null)
+
+                    if (handler is ICloneable cloneableHandler)
                     {
                         var newHandler = cloneableHandler.Clone();
-                        DelegatingHandler convertedHandler = newHandler as DelegatingHandler;
-                        if (convertedHandler != null)
+                        if (newHandler is DelegatingHandler convertedHandler)
                         {
                             newHandlers.Add(convertedHandler);
                         }
diff --git a/src/Accounts/Authentication/Models/MemoryDataStore.cs b/src/Accounts/Authentication/Models/MemoryDataStore.cs
index 8bb0394154..c459ff1ae5 100644
--- a/src/Accounts/Authentication/Models/MemoryDataStore.cs
+++ b/src/Accounts/Authentication/Models/MemoryDataStore.cs
@@ -278,7 +278,7 @@ namespace Microsoft.Azure.Commands.Common.Authentication.Models
 
         public void AddCertificate(X509Certificate2 cert)
         {
-            if (cert != null && cert.Thumbprint != null)
+            if (cert?.Thumbprint != null)
             {
                 certStore[cert.Thumbprint] = cert;
             }
diff --git a/src/Accounts/Authentication/Utilities/HttpClientWithRetry.cs b/src/Accounts/Authentication/Utilities/HttpClientWithRetry.cs
index 21db2d9e6c..550a519441 100644
--- a/src/Accounts/Authentication/Utilities/HttpClientWithRetry.cs
+++ b/src/Accounts/Authentication/Utilities/HttpClientWithRetry.cs
@@ -54,10 +54,7 @@ namespace Microsoft.Azure.Commands.Common.Authentication
             var retry = _retry();
             do
             {
-                if (response != null)
-                {
-                    response.Dispose();
-                }
+                response?.Dispose();
                 await retry.WaitForRetry();
                 var sentRequest = CopyRequest(request);
                 response = await _client.SendAsync(sentRequest, token);
diff --git a/src/Accounts/Authenticators/AccessTokenAuthenticator.cs b/src/Accounts/Authenticators/AccessTokenAuthenticator.cs
index e12732e062..1800094e77 100644
--- a/src/Accounts/Authenticators/AccessTokenAuthenticator.cs
+++ b/src/Accounts/Authenticators/AccessTokenAuthenticator.cs
@@ -46,7 +46,7 @@ namespace Microsoft.Azure.PowerShell.Authenticators
                  resourceId.EqualsInsensitively(environment.GetEndpoint(AzureEnvironment.Endpoint.AzureKeyVaultServiceEndpointResourceId)))
                  && account.IsPropertySet(AzureAccount.Property.KeyVaultAccessToken))
             {
-                TracingAdapter.Information(string.Format("[AccessTokenAuthenticator] Creating KeyVault access token - Tenant: '{0}', ResourceId: '{1}', UserId: '{2}'", tenant, resourceId, account.Id));
+                TracingAdapter.Information($"[AccessTokenAuthenticator] Creating KeyVault access token - Tenant: '{tenant}', ResourceId: '{resourceId}', UserId: '{account.Id}'");
                 rawToken.AccessToken = account.GetProperty(AzureAccount.Property.KeyVaultAccessToken);
             }
             else if ((resourceId.EqualsInsensitively(environment.GraphEndpointResourceId) ||
@@ -55,7 +55,7 @@ namespace Microsoft.Azure.PowerShell.Authenticators
                       resourceId.EqualsInsensitively(environment.GetEndpoint(AzureEnvironment.Endpoint.GraphEndpointResourceId)))
                       && account.IsPropertySet(AzureAccount.Property.GraphAccessToken))
             {
-                TracingAdapter.Information(string.Format("[AccessTokenAuthenticator] Creating Graph access token - Tenant: '{0}', ResourceId: '{1}', UserId: '{2}'", tenant, resourceId, account.Id));
+                TracingAdapter.Information($"[AccessTokenAuthenticator] Creating Graph access token - Tenant: '{tenant}', ResourceId: '{resourceId}', UserId: '{account.Id}'");
                 rawToken.AccessToken = account.GetProperty(AzureAccount.Property.GraphAccessToken);
             }
             else if ((resourceId.EqualsInsensitively(environment.ActiveDirectoryServiceEndpointResourceId) ||
@@ -64,7 +64,7 @@ namespace Microsoft.Azure.PowerShell.Authenticators
                       resourceId.EqualsInsensitively(environment.GetEndpoint(AzureEnvironment.Endpoint.ActiveDirectoryServiceEndpointResourceId)))
                       && account.IsPropertySet(AzureAccount.Property.AccessToken))
             {
-                TracingAdapter.Information(string.Format("[AccessTokenAuthenticator] Creating access token - Tenant: '{0}', ResourceId: '{1}', UserId: '{2}'", tenant, resourceId, account.Id));
+                TracingAdapter.Information($"[AccessTokenAuthenticator] Creating access token - Tenant: '{tenant}', ResourceId: '{resourceId}', UserId: '{account.Id}'");
                 rawToken.AccessToken = account.GetAccessToken();
             }
             else
diff --git a/src/Accounts/Authenticators/DefaultAuthenticatorBuilder.cs b/src/Accounts/Authenticators/DefaultAuthenticatorBuilder.cs
index 3bd18de6af..c656ee792b 100644
--- a/src/Accounts/Authenticators/DefaultAuthenticatorBuilder.cs
+++ b/src/Accounts/Authenticators/DefaultAuthenticatorBuilder.cs
@@ -46,7 +46,7 @@ namespace Microsoft.Azure.PowerShell.Authenticators
             }
 
             IAuthenticator current;
-            for (current = Authenticator; current != null && current.Next != null; current = current.Next) ;
+            for (current = Authenticator; current?.Next != null; current = current.Next) ;
             current.Next = constructor();
             return true;
         }
diff --git a/src/Accounts/Authenticators/InteractiveUserAuthenticator.cs b/src/Accounts/Authenticators/InteractiveUserAuthenticator.cs
index 74dbdec7ab..d8136dae37 100644
--- a/src/Accounts/Authenticators/InteractiveUserAuthenticator.cs
+++ b/src/Accounts/Authenticators/InteractiveUserAuthenticator.cs
@@ -99,7 +99,7 @@ namespace Microsoft.Azure.PowerShell.Authenticators
                 }
                 catch (Exception ex)
                 {
-                    interactiveParameters.PromptAction(string.Format("Port {0} is taken with exception '{1}'; trying to connect to the next port.", port, ex.Message));
+                    interactiveParameters.PromptAction($"Port {port} is taken with exception '{ex.Message}'; trying to connect to the next port.");
                     listener?.Stop();
                 }
             }
diff --git a/src/Advisor/Advisor/Cmdlets/Utilities/RecommendationHelper.cs b/src/Advisor/Advisor/Cmdlets/Utilities/RecommendationHelper.cs
index d502e9aa85..a2d42c5985 100644
--- a/src/Advisor/Advisor/Cmdlets/Utilities/RecommendationHelper.cs
+++ b/src/Advisor/Advisor/Cmdlets/Utilities/RecommendationHelper.cs
@@ -1,4 +1,5 @@
-﻿// ----------------------------------------------------------------------------------
+﻿using System.Linq;
+// ----------------------------------------------------------------------------------
 //
 // Copyright Microsoft Corporation
 // Licensed under the Apache License, Version 2.0 (the "License");
@@ -44,7 +45,7 @@ namespace Microsoft.Azure.Commands.Advisor.Cmdlets.Utilities
         /// <returns>Filtered list of recommendations</returns>
         public static List<PsAzureAdvisorResourceRecommendationBase> RecommendationFilterByCategoryAndResource(IEnumerable<PsAzureAdvisorResourceRecommendationBase> recListTobeFiltered, string category, string resourceGroup)
         {
-            if (recListTobeFiltered == null || recListTobeFiltered.Count() == 0)
+            if (recListTobeFiltered == null || !recListTobeFiltered.Any())
             {
                 return null;
             }
diff --git a/src/Aks/Aks/Commands/NewAzureRmAks.cs b/src/Aks/Aks/Commands/NewAzureRmAks.cs
index 5b9f858737..1e0b2d772f 100644
--- a/src/Aks/Aks/Commands/NewAzureRmAks.cs
+++ b/src/Aks/Aks/Commands/NewAzureRmAks.cs
@@ -153,7 +153,7 @@ namespace Microsoft.Azure.Commands.Aks
                 try
                 {
                     process.StartInfo.FileName = "ssh-keygen";
-                    process.StartInfo.Arguments = String.Format("-f \"{0}\"", generateSshKeyPath);
+                    process.StartInfo.Arguments = $"-f \"{generateSshKeyPath}\"";
                     process.StartInfo.UseShellExecute = false;
                     process.StartInfo.RedirectStandardInput = true;
                     process.StartInfo.RedirectStandardError = true;
diff --git a/src/Aks/Aks/Commands/StopAzureRmAksDashboard.cs b/src/Aks/Aks/Commands/StopAzureRmAksDashboard.cs
index b449a2d59f..db15ca60a6 100644
--- a/src/Aks/Aks/Commands/StopAzureRmAksDashboard.cs
+++ b/src/Aks/Aks/Commands/StopAzureRmAksDashboard.cs
@@ -31,8 +31,7 @@ namespace Microsoft.Azure.Commands.Aks
 
             RunCmdLet(() =>
             {
-                var exitingJob = JobRepository.Jobs.FirstOrDefault(j => j.Name == "Kubectl-Tunnel") as KubeTunnelJob;
-                if (exitingJob != null)
+                if (JobRepository.Jobs.FirstOrDefault(j => j.Name == "Kubectl-Tunnel") is KubeTunnelJob exitingJob)
                 {
                     WriteVerbose(string.Format(Resources.StoppingExistingKubectlTunnelJobWithPid, exitingJob.Pid));
                     exitingJob.StopJob();
diff --git a/src/Aks/Aks/Utils/AddonUtils.cs b/src/Aks/Aks/Utils/AddonUtils.cs
index 6bbe07e27b..9732c3589e 100644
--- a/src/Aks/Aks/Utils/AddonUtils.cs
+++ b/src/Aks/Aks/Utils/AddonUtils.cs
@@ -25,7 +25,7 @@ namespace Microsoft.Azure.Commands.Aks.Utils
     {
         public static string TrimWorkspaceResourceId(string workspaceResourceId)
         {
-            return string.Format("/{0}", workspaceResourceId.Trim().Trim('/'));
+            return $"/{workspaceResourceId.Trim().Trim('/')}";
         }
 
         public static IDictionary<string, ManagedClusterAddonProfile> EnableAddonsProfile(
@@ -103,7 +103,7 @@ namespace Microsoft.Azure.Commands.Aks.Utils
                     desensitizedMessage: Resources.AddonVirtualNodeShouldWorkWithSubnetName);
             }
             string osType = "Linux";
-            string addonServiceName = string.Format("{0}{1}", Constants.AddOnUserReadNameToServiceNameMapper.GetValueOrDefault(Constants.AddOnNameVirtualNode, null), osType);
+            string addonServiceName = $"{Constants.AddOnUserReadNameToServiceNameMapper.GetValueOrDefault(Constants.AddOnNameVirtualNode, null)}{osType}";
             Dictionary<string, string> config = new Dictionary<string, string>
             {
                 { "SubnetName", subnetNameValue }
diff --git a/src/AlertsManagement/AlertsManagement/OutputModels/PSAggregatedCounts.cs b/src/AlertsManagement/AlertsManagement/OutputModels/PSAggregatedCounts.cs
index 460374d7a5..1f322448e4 100644
--- a/src/AlertsManagement/AlertsManagement/OutputModels/PSAggregatedCounts.cs
+++ b/src/AlertsManagement/AlertsManagement/OutputModels/PSAggregatedCounts.cs
@@ -46,16 +46,16 @@ namespace Microsoft.Azure.Commands.AlertsManagement.OutputModels
             {
                 foreach (var item in this.Content)
                 {
-                    output.Append(string.Format("{0} - {1}", item.Name, item.Count));
+                    output.Append($"{item.Name} - {item.Count}");
 
                     if (!string.IsNullOrWhiteSpace(item.Groupedby))
                     {
-                        output.Append(string.Format(" : Further grouped by {0}", item.Groupedby));
+                        output.Append($" : Further grouped by {item.Groupedby}");
 
                         foreach (var aggregation in item.Values)
                         {
                             output.AppendLine();
-                            output.Append(string.Format("{0} - {1}", aggregation.Name, aggregation.Count));
+                            output.Append($"{aggregation.Name} - {aggregation.Count}");
                         }
 
                         output.AppendLine();
diff --git a/src/AlertsManagement/AlertsManagement/OutputModels/PSAlertModificationItem.cs b/src/AlertsManagement/AlertsManagement/OutputModels/PSAlertModificationItem.cs
index 2f41a86bcd..70bffceab3 100644
--- a/src/AlertsManagement/AlertsManagement/OutputModels/PSAlertModificationItem.cs
+++ b/src/AlertsManagement/AlertsManagement/OutputModels/PSAlertModificationItem.cs
@@ -33,9 +33,9 @@ namespace Microsoft.Azure.Commands.AlertsManagement.OutputModels
             var output = new StringBuilder();
 
             output.AppendLine();
-            output.Append(string.Format("Event : {0}", Event));
-            output.Append(string.Format("at {0} by {1}.", ModifiedAt, ModifiedBy));
-            output.Append(string.Format("Comments : {0}", Comments));
+            output.Append($"Event : {Event}");
+            output.Append($"at {ModifiedAt} by {ModifiedBy}.");
+            output.Append($"Comments : {Comments}");
 
             return output.ToString();
         }
diff --git a/src/AlertsManagement/AlertsManagement/OutputModels/PSSmartGroupModificationEvent.cs b/src/AlertsManagement/AlertsManagement/OutputModels/PSSmartGroupModificationEvent.cs
index aff74298b3..a97e5a7fa7 100644
--- a/src/AlertsManagement/AlertsManagement/OutputModels/PSSmartGroupModificationEvent.cs
+++ b/src/AlertsManagement/AlertsManagement/OutputModels/PSSmartGroupModificationEvent.cs
@@ -33,9 +33,9 @@ namespace Microsoft.Azure.Commands.AlertsManagement.OutputModels
             var output = new StringBuilder();
 
             output.AppendLine();
-            output.Append(string.Format("Event : {0}", Event));
-            output.Append(string.Format("at {0} by {1}.", ModifiedAt, ModifiedBy));
-            output.Append(string.Format("Comments : {0}", Comments));
+            output.Append($"Event : {Event}");
+            output.Append($"at {ModifiedAt} by {ModifiedBy}.");
+            output.Append($"Comments : {Comments}");
 
             return output.ToString();
         }
diff --git a/src/AnalysisServices/AnalysisServices.Dataplane/Commands/Synchronize-AzureASInstance.cs b/src/AnalysisServices/AnalysisServices.Dataplane/Commands/Synchronize-AzureASInstance.cs
index 1aaf2247a6..6610f92528 100644
--- a/src/AnalysisServices/AnalysisServices.Dataplane/Commands/Synchronize-AzureASInstance.cs
+++ b/src/AnalysisServices/AnalysisServices.Dataplane/Commands/Synchronize-AzureASInstance.cs
@@ -87,14 +87,14 @@ namespace Microsoft.Azure.Commands.AnalysisServices.Dataplane
                 return;
             }
 
-            WriteProgress(new ProgressRecord(0, "Sync-AzAnalysisServicesInstance.", string.Format("Successfully authenticated for '{0}' environment.", DnsSafeHost)));
+            WriteProgress(new ProgressRecord(0, "Sync-AzAnalysisServicesInstance.", $"Successfully authenticated for '{DnsSafeHost}' environment."));
             correlationId = Guid.NewGuid();
-            Uri clusterBaseUri = new Uri(string.Format("{0}{1}{2}", Uri.UriSchemeHttps, Uri.SchemeDelimiter, DnsSafeHost));
+            Uri clusterBaseUri = new Uri($"{Uri.UriSchemeHttps}{Uri.SchemeDelimiter}{DnsSafeHost}");
             ScaleOutServerDatabaseSyncDetails syncResult = null;
 
             try
             {
-                WriteObject(string.Format("Sending sync request for database '{0}' to server '{1}'. Correlation Id: '{2}'.", Database, Instance, correlationId.ToString()));
+                WriteObject($"Sending sync request for database '{Database}' to server '{Instance}'. Correlation Id: '{correlationId.ToString()}'.");
                 syncResult = SynchronizeDatabaseAsync(clusterBaseUri, Database).GetAwaiter().GetResult();
             }
             catch (AggregateException aex)
@@ -115,7 +115,7 @@ namespace Microsoft.Azure.Commands.AnalysisServices.Dataplane
                     ServerName,
                     correlationId,
                     DateTime.Now.ToString(CultureInfo.InvariantCulture),
-                    string.Format("RootActivityId: {0}, Date Time UTC: {1}", syncRequestRootActivityId, syncRequestTimeStamp))));
+                    $"RootActivityId: {syncRequestRootActivityId}, Date Time UTC: {syncRequestTimeStamp}")));
             }
 
             if (syncResult.SyncState != DatabaseSyncState.Completed)
@@ -310,10 +310,7 @@ namespace Microsoft.Azure.Commands.AnalysisServices.Dataplane
                                 SyncState = DatabaseSyncState.Invalid
                             };
 
-                            response.Details = string.Format(
-                                "Http Error code: {0}. Message: {1}",
-                                message.StatusCode.ToString(),
-                                message.Content != null ? await message.Content.ReadAsStringAsync() : string.Empty);
+                            response.Details = $"Http Error code: {message.StatusCode.ToString()}. Message: {(message.Content != null ? await message.Content.ReadAsStringAsync() : string.Empty)}";
 
                             if (message.StatusCode >= (HttpStatusCode)400 && message.StatusCode <= (HttpStatusCode)499)
                             {
diff --git a/src/AnalysisServices/AnalysisServices.Dataplane/Models/AsAzureDataplaneCmdletBase.cs b/src/AnalysisServices/AnalysisServices.Dataplane/Models/AsAzureDataplaneCmdletBase.cs
index b428496a4c..fadbe5d2fe 100644
--- a/src/AnalysisServices/AnalysisServices.Dataplane/Models/AsAzureDataplaneCmdletBase.cs
+++ b/src/AnalysisServices/AnalysisServices.Dataplane/Models/AsAzureDataplaneCmdletBase.cs
@@ -147,7 +147,7 @@ namespace Microsoft.Azure.Commands.AnalysisServices.Dataplane.Models
                 throw new ArgumentNullException(nameof(httpClientProvider));
             }
 
-            var baseUri = new Uri(string.Format("{0}{1}{2}", Uri.UriSchemeHttps, Uri.SchemeDelimiter, hostUri));
+            var baseUri = new Uri($"{Uri.UriSchemeHttps}{Uri.SchemeDelimiter}{hostUri}");
             var credentials = AzureSession.Instance.AuthenticationFactory.GetServiceClientCredentials(context, AzureEnvironment.ExtendedEndpoint.AnalysisServicesEndpointResourceId);
             var handlers = AzureSession.Instance.ClientFactory.GetCustomHandlers();
             return AzureSession.Instance.ClientFactory.CreateCustomArmClient<AsAzureDataplaneClient>(baseUri, credentials, httpClientProvider, handlers);
diff --git a/src/AnalysisServices/AnalysisServices.Test/ScenarioTests/UrlDecodingRecordMatcher.cs b/src/AnalysisServices/AnalysisServices.Test/ScenarioTests/UrlDecodingRecordMatcher.cs
index 344db39230..7ad2925240 100644
--- a/src/AnalysisServices/AnalysisServices.Test/ScenarioTests/UrlDecodingRecordMatcher.cs
+++ b/src/AnalysisServices/AnalysisServices.Test/ScenarioTests/UrlDecodingRecordMatcher.cs
@@ -70,7 +70,7 @@ namespace Microsoft.Azure.Commands.DataLake.Test.ScenarioTests
             }
 
             var encodedPath = Convert.ToBase64String(Encoding.UTF8.GetBytes(path));
-            return string.Format("{0} {1}", request.Method, encodedPath);
+            return $"{request.Method} {encodedPath}";
         }
     }
 }
diff --git a/src/ApiManagement/ApiManagement.ServiceManagement.Test/ScenarioTests/TestsFixture.cs b/src/ApiManagement/ApiManagement.ServiceManagement.Test/ScenarioTests/TestsFixture.cs
index abbd326ea8..51ca3f2329 100644
--- a/src/ApiManagement/ApiManagement.ServiceManagement.Test/ScenarioTests/TestsFixture.cs
+++ b/src/ApiManagement/ApiManagement.ServiceManagement.Test/ScenarioTests/TestsFixture.cs
@@ -120,7 +120,7 @@ namespace Microsoft.Azure.Commands.ApiManagement.ServiceManagement.Test.Scenario
                 });
 
             var response = client.ApiManagementService.Get(resourceGroupName, apiServiceName);
-            ThrowIfTrue(!response.Name.Equals(apiServiceName), string.Format("ApiService name is not equal to {0}", apiServiceName));
+            ThrowIfTrue(!response.Name.Equals(apiServiceName), $"ApiService name is not equal to {apiServiceName}");
         }
     }
 }
\ No newline at end of file
diff --git a/src/ApiManagement/ApiManagement.ServiceManagement/ApiManagementClient.cs b/src/ApiManagement/ApiManagement.ServiceManagement/ApiManagementClient.cs
index 605ba1a737..9ab3a06718 100644
--- a/src/ApiManagement/ApiManagement.ServiceManagement/ApiManagementClient.cs
+++ b/src/ApiManagement/ApiManagement.ServiceManagement/ApiManagementClient.cs
@@ -714,7 +714,7 @@ namespace Microsoft.Azure.Commands.ApiManagement.ServiceManagement
                     context.ServiceName,
                     new Rest.Azure.OData.ODataQuery<ApiContract>
                     {
-                        Filter = string.Format("properties/displayName eq '{0}'", name)
+                        Filter = $"properties/displayName eq '{name}'"
                     }),
                 nextLink => Client.Api.ListByServiceNext(nextLink));
 
@@ -1703,7 +1703,7 @@ namespace Microsoft.Azure.Commands.ApiManagement.ServiceManagement
             var query = new Rest.Azure.OData.ODataQuery<ProductContract>();
             if (!string.IsNullOrWhiteSpace(title))
             {
-                query.Filter = string.Format("properties/displayName eq '{0}'", title);
+                query.Filter = $"properties/displayName eq '{title}'";
             }
 
             var results = ListPagedAndMap<PsApiManagementProduct, ProductContract>(
@@ -1766,7 +1766,7 @@ namespace Microsoft.Azure.Commands.ApiManagement.ServiceManagement
                         productContract.State = ProductState.Published;
                         break;
                     default:
-                        throw new ArgumentOutOfRangeException(string.Format("State '{0}' is not supported.", state));
+                        throw new ArgumentOutOfRangeException($"State '{state}' is not supported.");
                 }
             }
 
@@ -1808,7 +1808,7 @@ namespace Microsoft.Azure.Commands.ApiManagement.ServiceManagement
                         productUpdateParameters.State = ProductState.Published;
                         break;
                     default:
-                        throw new ArgumentOutOfRangeException(string.Format("State '{0}' is not supported.", state));
+                        throw new ArgumentOutOfRangeException($"State '{state}' is not supported.");
                 }
             }
 
@@ -1848,7 +1848,7 @@ namespace Microsoft.Azure.Commands.ApiManagement.ServiceManagement
         public IList<PsApiManagementSubscription> SubscriptionByScope(PsApiManagementContext context, string scope)
         {
             var query = new Rest.Azure.OData.ODataQuery<SubscriptionContract>();
-            query.Filter = string.Format("properties/scope eq '{0}'", scope);            
+            query.Filter = $"properties/scope eq '{scope}'";            
 
             var results = ListPagedAndMap<PsApiManagementSubscription, SubscriptionContract>(
                 () => Client.Subscription.List(context.ResourceGroupName, context.ServiceName, query),
@@ -1860,7 +1860,7 @@ namespace Microsoft.Azure.Commands.ApiManagement.ServiceManagement
         public IList<PsApiManagementSubscription> SubscriptionByProductAndUser(PsApiManagementContext context, string productId, string userId)
         {
             var query = new Rest.Azure.OData.ODataQuery<SubscriptionContract>();
-            query.Filter = string.Format("properties/scope eq '/products/{0}' and properties/ownerId eq '{1}'", productId, userId);
+            query.Filter = $"properties/scope eq '/products/{productId}' and properties/ownerId eq '{userId}'";
 
             var results = ListPagedAndMap<PsApiManagementSubscription, SubscriptionContract>(
                 () => Client.Subscription.List(context.ResourceGroupName, context.ServiceName, query),
@@ -2185,7 +2185,7 @@ namespace Microsoft.Azure.Commands.ApiManagement.ServiceManagement
             var query = new Rest.Azure.OData.ODataQuery<UserContract>();
             if (!string.IsNullOrEmpty(firstName))
             {
-                query.Filter = string.Format("firstName eq '{0}'", firstName);
+                query.Filter = $"firstName eq '{firstName}'";
                 isFirstCondition = false;
             }
 
@@ -2195,7 +2195,7 @@ namespace Microsoft.Azure.Commands.ApiManagement.ServiceManagement
                 {
                     query.Filter += "&";
                 }
-                query.Filter = string.Format("lastName eq '{0}'", lastName);
+                query.Filter = $"lastName eq '{lastName}'";
                 isFirstCondition = false;
             }
 
@@ -2205,7 +2205,7 @@ namespace Microsoft.Azure.Commands.ApiManagement.ServiceManagement
                 {
                     query.Filter += "&";
                 }
-                query.Filter = string.Format("email eq '{0}'", email);
+                query.Filter = $"email eq '{email}'";
                 isFirstCondition = false;
             }
 
@@ -2215,7 +2215,7 @@ namespace Microsoft.Azure.Commands.ApiManagement.ServiceManagement
                 {
                     query.Filter += "&";
                 }
-                query.Filter = string.Format("state eq '{0}'", state.Value.ToString().ToLowerInvariant());
+                query.Filter = $"state eq '{state.Value.ToString().ToLowerInvariant()}'";
             }
             return query;
         }
@@ -2262,7 +2262,7 @@ namespace Microsoft.Azure.Commands.ApiManagement.ServiceManagement
             var query = new Rest.Azure.OData.ODataQuery<GroupContract>();
             if (!string.IsNullOrEmpty(name))
             {
-                query.Filter = string.Format("name eq '{0}'", name);
+                query.Filter = $"name eq '{name}'";
             }
 
             IList<PsApiManagementGroup> results;
@@ -2864,7 +2864,7 @@ namespace Microsoft.Azure.Commands.ApiManagement.ServiceManagement
                    context.ServiceName,
                    new Rest.Azure.OData.ODataQuery<NamedValueContract>()
                    {
-                       Filter = string.Format("substringof('{0}',properties/displayName)", propertyName)
+                       Filter = $"substringof('{propertyName}',properties/displayName)"
                    }),
                nextLink => Client.NamedValue.ListByServiceNext(nextLink));
 
@@ -2879,7 +2879,7 @@ namespace Microsoft.Azure.Commands.ApiManagement.ServiceManagement
                     context.ServiceName,
                     new Rest.Azure.OData.ODataQuery<NamedValueContract>()
                     {
-                        Filter = string.Format("tags/any(t: t eq '{0}')", propertyTag)
+                        Filter = $"tags/any(t: t eq '{propertyTag}')"
                     }),
                 nextLink => Client.NamedValue.ListByServiceNext(nextLink));
 
@@ -3006,7 +3006,7 @@ namespace Microsoft.Azure.Commands.ApiManagement.ServiceManagement
                     context.ServiceName,
                      new Rest.Azure.OData.ODataQuery<OpenidConnectProviderContract>
                      {
-                         Filter = string.Format("substringof('{0}',properties/displayName)", openIdConnectProviderName)
+                         Filter = $"substringof('{openIdConnectProviderName}',properties/displayName)"
                      }),
                 nextLink => Client.OpenIdConnectProvider.ListByServiceNext(nextLink));
 
diff --git a/src/ApiManagement/ApiManagement.ServiceManagement/Commands/GetAzureApiManagementGateway.cs b/src/ApiManagement/ApiManagement.ServiceManagement/Commands/GetAzureApiManagementGateway.cs
index bf82f00a34..2aedd8aaa9 100644
--- a/src/ApiManagement/ApiManagement.ServiceManagement/Commands/GetAzureApiManagementGateway.cs
+++ b/src/ApiManagement/ApiManagement.ServiceManagement/Commands/GetAzureApiManagementGateway.cs
@@ -53,7 +53,7 @@ namespace Microsoft.Azure.Commands.ApiManagement.ServiceManagement.Commands
             }
             else
             {
-                throw new InvalidOperationException(string.Format("Parameter set name '{0}' is not supported.", ParameterSetName));
+                throw new InvalidOperationException($"Parameter set name '{ParameterSetName}' is not supported.");
             }
         }
     }
diff --git a/src/ApiManagement/ApiManagement.ServiceManagement/Commands/GetAzureApiManagementGatewayHostnameConfiguration.cs b/src/ApiManagement/ApiManagement.ServiceManagement/Commands/GetAzureApiManagementGatewayHostnameConfiguration.cs
index a9ab7554b4..17d886c2e2 100644
--- a/src/ApiManagement/ApiManagement.ServiceManagement/Commands/GetAzureApiManagementGatewayHostnameConfiguration.cs
+++ b/src/ApiManagement/ApiManagement.ServiceManagement/Commands/GetAzureApiManagementGatewayHostnameConfiguration.cs
@@ -74,7 +74,7 @@ namespace Microsoft.Azure.Commands.ApiManagement.ServiceManagement.Commands
             }
             else
             {
-                throw new InvalidOperationException(string.Format("Parameter set name '{0}' is not supported.", ParameterSetName));
+                throw new InvalidOperationException($"Parameter set name '{ParameterSetName}' is not supported.");
             }
         }
     }
diff --git a/src/ApiManagement/ApiManagement.ServiceManagement/Commands/GetAzureApiManagementGatewayKey.cs b/src/ApiManagement/ApiManagement.ServiceManagement/Commands/GetAzureApiManagementGatewayKey.cs
index 57331cbaac..c558f35dc4 100644
--- a/src/ApiManagement/ApiManagement.ServiceManagement/Commands/GetAzureApiManagementGatewayKey.cs
+++ b/src/ApiManagement/ApiManagement.ServiceManagement/Commands/GetAzureApiManagementGatewayKey.cs
@@ -53,7 +53,7 @@ namespace Microsoft.Azure.Commands.ApiManagement.ServiceManagement.Commands
             }
             else
             {
-                throw new InvalidOperationException(string.Format("Parameter set name '{0}' is not supported.", ParameterSetName));
+                throw new InvalidOperationException($"Parameter set name '{ParameterSetName}' is not supported.");
             }
         }
     }
diff --git a/src/ApiManagement/ApiManagement.ServiceManagement/Commands/GetAzureApiManagementGroup.cs b/src/ApiManagement/ApiManagement.ServiceManagement/Commands/GetAzureApiManagementGroup.cs
index cfc66aea1a..713a8b74ed 100644
--- a/src/ApiManagement/ApiManagement.ServiceManagement/Commands/GetAzureApiManagementGroup.cs
+++ b/src/ApiManagement/ApiManagement.ServiceManagement/Commands/GetAzureApiManagementGroup.cs
@@ -89,7 +89,7 @@ namespace Microsoft.Azure.Commands.ApiManagement.ServiceManagement.Commands
             }
             else
             {
-                throw new InvalidOperationException(string.Format("Parameter set name '{0}' is not supported.", ParameterSetName));
+                throw new InvalidOperationException($"Parameter set name '{ParameterSetName}' is not supported.");
             }
         }
     }
diff --git a/src/ApiManagement/ApiManagement.ServiceManagement/Commands/GetAzureApiManagementIdentityProvider.cs b/src/ApiManagement/ApiManagement.ServiceManagement/Commands/GetAzureApiManagementIdentityProvider.cs
index a8cf6136a5..b0c24a59e8 100644
--- a/src/ApiManagement/ApiManagement.ServiceManagement/Commands/GetAzureApiManagementIdentityProvider.cs
+++ b/src/ApiManagement/ApiManagement.ServiceManagement/Commands/GetAzureApiManagementIdentityProvider.cs
@@ -54,7 +54,7 @@ namespace Microsoft.Azure.Commands.ApiManagement.ServiceManagement.Commands
             }
             else
             {
-                throw new InvalidOperationException(string.Format("Parameter set name '{0}' is not supported.", ParameterSetName));
+                throw new InvalidOperationException($"Parameter set name '{ParameterSetName}' is not supported.");
             }
         }
     }
diff --git a/src/ApiManagement/ApiManagement.ServiceManagement/Commands/GetAzureApiManagementIdentityProviderClientSecret.cs b/src/ApiManagement/ApiManagement.ServiceManagement/Commands/GetAzureApiManagementIdentityProviderClientSecret.cs
index d19f57abc3..c1eea25f0c 100644
--- a/src/ApiManagement/ApiManagement.ServiceManagement/Commands/GetAzureApiManagementIdentityProviderClientSecret.cs
+++ b/src/ApiManagement/ApiManagement.ServiceManagement/Commands/GetAzureApiManagementIdentityProviderClientSecret.cs
@@ -48,7 +48,7 @@ namespace Microsoft.Azure.Commands.ApiManagement.ServiceManagement.Commands
             }
             else
             {
-                throw new InvalidOperationException(string.Format("Parameter set name '{0}' is not supported.", ParameterSetName));
+                throw new InvalidOperationException($"Parameter set name '{ParameterSetName}' is not supported.");
             }
         }
     }
diff --git a/src/ApiManagement/ApiManagement.ServiceManagement/Commands/GetAzureApiManagementLogger.cs b/src/ApiManagement/ApiManagement.ServiceManagement/Commands/GetAzureApiManagementLogger.cs
index d0dcfb9a42..9931721a76 100644
--- a/src/ApiManagement/ApiManagement.ServiceManagement/Commands/GetAzureApiManagementLogger.cs
+++ b/src/ApiManagement/ApiManagement.ServiceManagement/Commands/GetAzureApiManagementLogger.cs
@@ -53,7 +53,7 @@ namespace Microsoft.Azure.Commands.ApiManagement.ServiceManagement.Commands
             }
             else
             {
-                throw new InvalidOperationException(string.Format("Parameter set name '{0}' is not supported.", ParameterSetName));
+                throw new InvalidOperationException($"Parameter set name '{ParameterSetName}' is not supported.");
             }
         }
     }
diff --git a/src/ApiManagement/ApiManagement.ServiceManagement/Commands/GetAzureApiManagementNamedValue.cs b/src/ApiManagement/ApiManagement.ServiceManagement/Commands/GetAzureApiManagementNamedValue.cs
index 72c5493043..362ab66750 100644
--- a/src/ApiManagement/ApiManagement.ServiceManagement/Commands/GetAzureApiManagementNamedValue.cs
+++ b/src/ApiManagement/ApiManagement.ServiceManagement/Commands/GetAzureApiManagementNamedValue.cs
@@ -80,7 +80,7 @@ namespace Microsoft.Azure.Commands.ApiManagement.ServiceManagement.Commands
             }
             else
             {
-                throw new InvalidOperationException(string.Format("Parameter set name '{0}' is not supported.", ParameterSetName));
+                throw new InvalidOperationException($"Parameter set name '{ParameterSetName}' is not supported.");
             }
         }
     }
diff --git a/src/ApiManagement/ApiManagement.ServiceManagement/Commands/GetAzureApiManagementOpenIdConnectProvider.cs b/src/ApiManagement/ApiManagement.ServiceManagement/Commands/GetAzureApiManagementOpenIdConnectProvider.cs
index d602bcaa0d..c59eb17ba8 100644
--- a/src/ApiManagement/ApiManagement.ServiceManagement/Commands/GetAzureApiManagementOpenIdConnectProvider.cs
+++ b/src/ApiManagement/ApiManagement.ServiceManagement/Commands/GetAzureApiManagementOpenIdConnectProvider.cs
@@ -71,7 +71,7 @@ namespace Microsoft.Azure.Commands.ApiManagement.ServiceManagement.Commands
             }
             else
             {
-                throw new InvalidOperationException(string.Format("Parameter set name '{0}' is not supported.", ParameterSetName));
+                throw new InvalidOperationException($"Parameter set name '{ParameterSetName}' is not supported.");
             }
         }
     }
diff --git a/src/ApiManagement/ApiManagement.ServiceManagement/Commands/GetAzureApiManagementOperation.cs b/src/ApiManagement/ApiManagement.ServiceManagement/Commands/GetAzureApiManagementOperation.cs
index d4e62e2014..d1eef39cbe 100644
--- a/src/ApiManagement/ApiManagement.ServiceManagement/Commands/GetAzureApiManagementOperation.cs
+++ b/src/ApiManagement/ApiManagement.ServiceManagement/Commands/GetAzureApiManagementOperation.cs
@@ -86,7 +86,7 @@ namespace Microsoft.Azure.Commands.ApiManagement.ServiceManagement.Commands
             }
             else
             {
-                throw new InvalidOperationException(string.Format("Parameter set name '{0}' is not supported.", ParameterSetName));
+                throw new InvalidOperationException($"Parameter set name '{ParameterSetName}' is not supported.");
             }
         }
     }
diff --git a/src/ApiManagement/ApiManagement.ServiceManagement/Commands/GetAzureApiManagementPolicy.cs b/src/ApiManagement/ApiManagement.ServiceManagement/Commands/GetAzureApiManagementPolicy.cs
index aab86ae1f4..0af5c0436a 100644
--- a/src/ApiManagement/ApiManagement.ServiceManagement/Commands/GetAzureApiManagementPolicy.cs
+++ b/src/ApiManagement/ApiManagement.ServiceManagement/Commands/GetAzureApiManagementPolicy.cs
@@ -144,7 +144,7 @@ namespace Microsoft.Azure.Commands.ApiManagement.ServiceManagement.Commands
                     policyContent = Client.PolicyGetOperationLevel(Context, apiId, OperationId, format);
                     break;
                 default:
-                    throw new InvalidOperationException(string.Format("Parameter set name '{0}' is not supported.", ParameterSetName));
+                    throw new InvalidOperationException($"Parameter set name '{ParameterSetName}' is not supported.");
             }
 
             if (policyContent == null)
diff --git a/src/ApiManagement/ApiManagement.ServiceManagement/Commands/GetAzureApiManagementProduct.cs b/src/ApiManagement/ApiManagement.ServiceManagement/Commands/GetAzureApiManagementProduct.cs
index bb2e60071b..c4bd35c3c2 100644
--- a/src/ApiManagement/ApiManagement.ServiceManagement/Commands/GetAzureApiManagementProduct.cs
+++ b/src/ApiManagement/ApiManagement.ServiceManagement/Commands/GetAzureApiManagementProduct.cs
@@ -81,7 +81,7 @@ namespace Microsoft.Azure.Commands.ApiManagement.ServiceManagement.Commands
             }
             else
             {
-                throw new InvalidOperationException(string.Format("Parameter set name '{0}' is not supported.", ParameterSetName));
+                throw new InvalidOperationException($"Parameter set name '{ParameterSetName}' is not supported.");
             }
         }
     }
diff --git a/src/ApiManagement/ApiManagement.ServiceManagement/Commands/GetAzureApiManagementSubscription.cs b/src/ApiManagement/ApiManagement.ServiceManagement/Commands/GetAzureApiManagementSubscription.cs
index 949382c52a..2dacc6c9a9 100644
--- a/src/ApiManagement/ApiManagement.ServiceManagement/Commands/GetAzureApiManagementSubscription.cs
+++ b/src/ApiManagement/ApiManagement.ServiceManagement/Commands/GetAzureApiManagementSubscription.cs
@@ -112,7 +112,7 @@ namespace Microsoft.Azure.Commands.ApiManagement.ServiceManagement.Commands
             }
             else
             {
-                throw new InvalidOperationException(string.Format("Parameter set name '{0}' is not supported.", ParameterSetName));
+                throw new InvalidOperationException($"Parameter set name '{ParameterSetName}' is not supported.");
             }
         }
     }
diff --git a/src/ApiManagement/ApiManagement.ServiceManagement/Commands/GetAzureApiManagementSubscriptionKey.cs b/src/ApiManagement/ApiManagement.ServiceManagement/Commands/GetAzureApiManagementSubscriptionKey.cs
index bcb1daeef1..d156e19c25 100644
--- a/src/ApiManagement/ApiManagement.ServiceManagement/Commands/GetAzureApiManagementSubscriptionKey.cs
+++ b/src/ApiManagement/ApiManagement.ServiceManagement/Commands/GetAzureApiManagementSubscriptionKey.cs
@@ -52,7 +52,7 @@ namespace Microsoft.Azure.Commands.ApiManagement.ServiceManagement.Commands
             }
             else
             {
-                throw new InvalidOperationException(string.Format("Parameter set name '{0}' is not supported.", ParameterSetName));
+                throw new InvalidOperationException($"Parameter set name '{ParameterSetName}' is not supported.");
             }
         }
     }
diff --git a/src/ApiManagement/ApiManagement.ServiceManagement/Commands/ImportAzureApiManagementApi.cs b/src/ApiManagement/ApiManagement.ServiceManagement/Commands/ImportAzureApiManagementApi.cs
index 48e15d5d54..f3af252c2d 100644
--- a/src/ApiManagement/ApiManagement.ServiceManagement/Commands/ImportAzureApiManagementApi.cs
+++ b/src/ApiManagement/ApiManagement.ServiceManagement/Commands/ImportAzureApiManagementApi.cs
@@ -181,7 +181,7 @@ namespace Microsoft.Azure.Commands.ApiManagement.ServiceManagement.Commands
             }
             else
             {
-                throw new InvalidOperationException(string.Format("ParameterSetName '{0}' not supported", ParameterSetName));
+                throw new InvalidOperationException($"ParameterSetName '{ParameterSetName}' not supported");
             }
 
             var api = Client.ApiById(Context.ResourceGroupName, Context.ServiceName, apiId);
diff --git a/src/ApiManagement/ApiManagement.ServiceManagement/Commands/NewAzureApiManagementApi.cs b/src/ApiManagement/ApiManagement.ServiceManagement/Commands/NewAzureApiManagementApi.cs
index f10f258986..b8caac4d51 100644
--- a/src/ApiManagement/ApiManagement.ServiceManagement/Commands/NewAzureApiManagementApi.cs
+++ b/src/ApiManagement/ApiManagement.ServiceManagement/Commands/NewAzureApiManagementApi.cs
@@ -193,7 +193,7 @@ namespace Microsoft.Azure.Commands.ApiManagement.ServiceManagement.Commands
                             new ProgressRecord(
                                 0,
                                 "New-AzApiManagementApi",
-                                string.Format("... Added to product {0}", productId))
+                                $"... Added to product {productId}")
                             );
                     }
                     catch (Exception ex)
@@ -202,7 +202,7 @@ namespace Microsoft.Azure.Commands.ApiManagement.ServiceManagement.Commands
                             new ProgressRecord(
                                 0,
                                 "New-AzApiManagementApi",
-                                string.Format("... Failed to add to product {0} due to: {1}", productId, ex))
+                                $"... Failed to add to product {productId} due to: {ex}")
                             );
                     }
                 }
diff --git a/src/ApiManagement/ApiManagement.ServiceManagement/Commands/NewAzureApiManagementCertificate.cs b/src/ApiManagement/ApiManagement.ServiceManagement/Commands/NewAzureApiManagementCertificate.cs
index 8a2d0838e9..021c0d905c 100644
--- a/src/ApiManagement/ApiManagement.ServiceManagement/Commands/NewAzureApiManagementCertificate.cs
+++ b/src/ApiManagement/ApiManagement.ServiceManagement/Commands/NewAzureApiManagementCertificate.cs
@@ -88,7 +88,7 @@ namespace Microsoft.Azure.Commands.ApiManagement.ServiceManagement.Commands
             }
             else
             {
-                throw new InvalidOperationException(string.Format("Parameter set name '{0}' is not supported.", ParameterSetName));
+                throw new InvalidOperationException($"Parameter set name '{ParameterSetName}' is not supported.");
             }
 
             // check for valid certificate file/bytes
diff --git a/src/ApiManagement/ApiManagement.ServiceManagement/Commands/RemoveAzureApiManagementPolicy.cs b/src/ApiManagement/ApiManagement.ServiceManagement/Commands/RemoveAzureApiManagementPolicy.cs
index b6aa2a09c5..08b266b1e7 100644
--- a/src/ApiManagement/ApiManagement.ServiceManagement/Commands/RemoveAzureApiManagementPolicy.cs
+++ b/src/ApiManagement/ApiManagement.ServiceManagement/Commands/RemoveAzureApiManagementPolicy.cs
@@ -102,7 +102,7 @@ namespace Microsoft.Azure.Commands.ApiManagement.ServiceManagement.Commands
                     Client.PolicyRemoveOperationLevel(Context, ApiId, OperationId);
                     break;
                 default:
-                    throw new InvalidOperationException(string.Format("Parameter set name '{0}' is not supported.", ParameterSetName));
+                    throw new InvalidOperationException($"Parameter set name '{ParameterSetName}' is not supported.");
             }
 
             if (PassThru)
diff --git a/src/ApiManagement/ApiManagement.ServiceManagement/Commands/SetAzureApiManagementCertificate.cs b/src/ApiManagement/ApiManagement.ServiceManagement/Commands/SetAzureApiManagementCertificate.cs
index ec00f6b8a8..38ca11d006 100644
--- a/src/ApiManagement/ApiManagement.ServiceManagement/Commands/SetAzureApiManagementCertificate.cs
+++ b/src/ApiManagement/ApiManagement.ServiceManagement/Commands/SetAzureApiManagementCertificate.cs
@@ -98,7 +98,7 @@ namespace Microsoft.Azure.Commands.ApiManagement.ServiceManagement.Commands
             }
             else
             {
-                throw new InvalidOperationException(string.Format("Parameter set name '{0}' is not supported.", ParameterSetName));
+                throw new InvalidOperationException($"Parameter set name '{ParameterSetName}' is not supported.");
             }
 
             // check for valid certificate file/bytes
diff --git a/src/ApiManagement/ApiManagement.ServiceManagement/Commands/SetAzureApiManagementPolicy.cs b/src/ApiManagement/ApiManagement.ServiceManagement/Commands/SetAzureApiManagementPolicy.cs
index cdcd923733..6f6e43da17 100644
--- a/src/ApiManagement/ApiManagement.ServiceManagement/Commands/SetAzureApiManagementPolicy.cs
+++ b/src/ApiManagement/ApiManagement.ServiceManagement/Commands/SetAzureApiManagementPolicy.cs
@@ -165,7 +165,7 @@ namespace Microsoft.Azure.Commands.ApiManagement.ServiceManagement.Commands
                     Client.PolicySetOperationLevel(Context, policyContent, apiId, OperationId, contentFormat);
                     break;
                 default:
-                    throw new InvalidOperationException(string.Format("Parameter set name '{0}' is not supported.", ParameterSetName));
+                    throw new InvalidOperationException($"Parameter set name '{ParameterSetName}' is not supported.");
             }
 
             if (PassThru)
diff --git a/src/AppConfiguration/generated/runtime/Serialization/JsonSerializer.cs b/src/AppConfiguration/generated/runtime/Serialization/JsonSerializer.cs
index f3cb08feca..db85be713b 100644
--- a/src/AppConfiguration/generated/runtime/Serialization/JsonSerializer.cs
+++ b/src/AppConfiguration/generated/runtime/Serialization/JsonSerializer.cs
@@ -312,7 +312,7 @@ namespace Microsoft.Azure.PowerShell.Cmdlets.AppConfiguration.Runtime.Json
                     default: return ReadArray((IEnumerable)value);
                 }
             }
-            else if (value is IEnumerable)
+            else if (value is IEnumerable iEnumerable)
             {
                 if (type.IsList && type.ElementType != null)
                 {
@@ -330,7 +330,7 @@ namespace Microsoft.Azure.PowerShell.Cmdlets.AppConfiguration.Runtime.Json
                     }
                 }
 
-                return ReadArray((IEnumerable)value);
+                return ReadArray(iEnumerable);
             }
             else
             {
diff --git a/src/Attestation/Attestation.Test/ScenarioTests/AttestationController.cs b/src/Attestation/Attestation.Test/ScenarioTests/AttestationController.cs
index 21bd6571db..a3d3e11b0e 100644
--- a/src/Attestation/Attestation.Test/ScenarioTests/AttestationController.cs
+++ b/src/Attestation/Attestation.Test/ScenarioTests/AttestationController.cs
@@ -45,7 +45,7 @@ namespace Microsoft.Azure.Commands.Attestation.Test
             var callingClassType = sf.GetMethod().ReflectedType?.ToString();
             var mockName = sf.GetMethod().Name;
 
-            logger.Information(string.Format("Test method entered: {0}.{1}", callingClassType, mockName));
+            logger.Information($"Test method entered: {callingClassType}.{mockName}");
             _helper.TracingInterceptor = logger;
 
             RunPowerShellTestWorkflow(
@@ -64,7 +64,7 @@ namespace Microsoft.Azure.Commands.Attestation.Test
             var callingClassType = sf.GetMethod().ReflectedType?.ToString();
             var mockName = sf.GetMethod().Name;
 
-            logger.Information(string.Format("Test method entered: {0}.{1}", callingClassType, mockName));
+            logger.Information($"Test method entered: {callingClassType}.{mockName}");
             _helper.TracingInterceptor = logger;
 
             RunPowerShellTestWorkflow(
diff --git a/src/Attestation/Attestation/Models/JwksHelper.cs b/src/Attestation/Attestation/Models/JwksHelper.cs
index de9f9705f4..25987621bc 100644
--- a/src/Attestation/Attestation/Models/JwksHelper.cs
+++ b/src/Attestation/Attestation/Models/JwksHelper.cs
@@ -54,8 +54,8 @@ namespace Microsoft.Azure.Commands.Attestation.Models
         private static X509Certificate2Collection GetX509CertificateFromPEM(string pemString, string section)
         {
             X509Certificate2Collection certificateCollection = new X509Certificate2Collection();
-            var header = String.Format("-----BEGIN {0}-----", section);
-            var footer = String.Format("-----END {0}-----", section);
+            var header = $"-----BEGIN {section}-----";
+            var footer = $"-----END {section}-----";
 
             var start = 0;
             var lengthOfSection = 0;
diff --git a/src/Automation/Automation.Test/ScenarioTests/RunbookJobTests.cs b/src/Automation/Automation.Test/ScenarioTests/RunbookJobTests.cs
index 75dca6dc41..da695586b1 100644
--- a/src/Automation/Automation.Test/ScenarioTests/RunbookJobTests.cs
+++ b/src/Automation/Automation.Test/ScenarioTests/RunbookJobTests.cs
@@ -40,7 +40,7 @@ namespace Commands.Automation.Test
         public void TestImportRunbookPowerShell()
         {
             string runbookPath = Path.Combine("ScenarioTests", "Resources", "RB-PowerShellScriptTutorial.ps1");
-            TestRunner.RunTestScript(string.Format("Test-ImportRunbookPowerShell -Name TestRunbook-PowerShellScript -RunbookPath {0}", runbookPath));
+            TestRunner.RunTestScript($"Test-ImportRunbookPowerShell -Name TestRunbook-PowerShellScript -RunbookPath {runbookPath}");
         }
 
         [Fact]
@@ -49,7 +49,7 @@ namespace Commands.Automation.Test
         public void TestImportAndDeleteRunbookGraphical()
         {
             string runbookPath = Path.Combine("ScenarioTests", "Resources", "RB-GraphTutorial.graphrunbook");
-            TestRunner.RunTestScript(string.Format("Test-ImportAndDeleteRunbookGraphical -Name TestRunbook-Grapical -RunbookPath {0}", runbookPath));
+            TestRunner.RunTestScript($"Test-ImportAndDeleteRunbookGraphical -Name TestRunbook-Grapical -RunbookPath {runbookPath}");
         }
 
         [Fact(Skip = "Failed output record causes JSON convert exception in Travis run.")]
@@ -58,7 +58,7 @@ namespace Commands.Automation.Test
         public void TestCreateJobAndGetOutputPowerShellScript()
         {
             string runbookPath = Path.Combine("ScenarioTests", "Resources", "RB-PowerShellScriptTutorial.ps1");
-            TestRunner.RunTestScript(string.Format("Test-CreateJobAndGetOutputPowerShellScript -Name TestRunbook-PSScript-JobAndOutput -RunbookPath {0}", runbookPath));
+            TestRunner.RunTestScript($"Test-CreateJobAndGetOutputPowerShellScript -Name TestRunbook-PSScript-JobAndOutput -RunbookPath {runbookPath}");
         }
     }
 }
diff --git a/src/Automation/Automation/Common/AutomationPSClientSoftwareUpdateConfiguration.cs b/src/Automation/Automation/Common/AutomationPSClientSoftwareUpdateConfiguration.cs
index f19d1eb277..218bab2196 100644
--- a/src/Automation/Automation/Common/AutomationPSClientSoftwareUpdateConfiguration.cs
+++ b/src/Automation/Automation/Common/AutomationPSClientSoftwareUpdateConfiguration.cs
@@ -31,7 +31,7 @@ namespace Microsoft.Azure.Commands.Automation.Common
             {
                 var updateConfig = configuration.UpdateConfiguration;
                 IList<Sdk.AzureQueryProperties> azureQueries = null;
-                if (updateConfig != null && updateConfig.Targets != null && updateConfig.Targets.AzureQueries != null)
+                if (updateConfig?.Targets != null && updateConfig.Targets.AzureQueries != null)
                 {
                     azureQueries = new List<Sdk.AzureQueryProperties>();
 
@@ -63,7 +63,7 @@ namespace Microsoft.Azure.Commands.Automation.Common
                 }
 
                 IList<Sdk.NonAzureQueryProperties> nonAzureQueries = null;
-                if (updateConfig != null && updateConfig.Targets != null && updateConfig.Targets.NonAzureQueries != null)
+                if (updateConfig?.Targets != null && updateConfig.Targets.NonAzureQueries != null)
                 {
                     nonAzureQueries = new List<Sdk.NonAzureQueryProperties>();
                     foreach (var query in updateConfig.Targets.NonAzureQueries)
diff --git a/src/Automation/Automation/Model/UpdateManagement/SoftwareUpdateConfiguration.cs b/src/Automation/Automation/Model/UpdateManagement/SoftwareUpdateConfiguration.cs
index 9395d6cb84..2f62da49c6 100644
--- a/src/Automation/Automation/Model/UpdateManagement/SoftwareUpdateConfiguration.cs
+++ b/src/Automation/Automation/Model/UpdateManagement/SoftwareUpdateConfiguration.cs
@@ -100,7 +100,7 @@ namespace Microsoft.Azure.Commands.Automation.Model.UpdateManagement
                 foreach (var query in suc.UpdateConfiguration.Targets.AzureQueries)
                 {
                     var tags = new Dictionary<string, List<string>>();
-                    if(query!= null && query.TagSettings!= null && query.TagSettings.Tags != null)
+                    if(query?.TagSettings != null && query.TagSettings.Tags != null)
                     {
                         foreach (var tag in query.TagSettings.Tags)
                         {
diff --git a/src/Batch/Batch.Test/BatchTestHelpers.cs b/src/Batch/Batch.Test/BatchTestHelpers.cs
index a13f19761c..3f0e652446 100644
--- a/src/Batch/Batch.Test/BatchTestHelpers.cs
+++ b/src/Batch/Batch.Test/BatchTestHelpers.cs
@@ -59,11 +59,11 @@ namespace Microsoft.Azure.Commands.Batch.Test
             BatchAccountIdentity identity = null)
         {
             string tenantUrlEnding = "batch-test.windows-int.net";
-            string endpoint = string.Format("{0}.{1}", accountName, tenantUrlEnding);
+            string endpoint = $"{accountName}.{tenantUrlEnding}";
             string subscription = Guid.Empty.ToString();
             string resourceGroup = resourceGroupName;
 
-            string id = string.Format("id/subscriptions/{0}/resourceGroups/{1}/providers/Microsoft.Batch/batchAccounts/abc", subscription, resourceGroup);
+            string id = $"id/subscriptions/{subscription}/resourceGroups/{resourceGroup}/providers/Microsoft.Batch/batchAccounts/abc";
 
             machineFamilyQuotas = machineFamilyQuotas ?? new List<VirtualMachineFamilyCoreQuota> { new VirtualMachineFamilyCoreQuota("foo", 55 ) };
 
@@ -248,9 +248,7 @@ namespace Microsoft.Azure.Commands.Batch.Test
         {
             RequestInterceptor interceptor = new RequestInterceptor((baseRequest) =>
             {
-                FileGetFromTaskBatchRequest fileRequest = baseRequest as FileGetFromTaskBatchRequest;
-
-                if (fileRequest != null)
+                if (baseRequest is FileGetFromTaskBatchRequest fileRequest)
                 {
                     fileRequest.ServiceRequestFunc = (cancellationToken) =>
                     {
@@ -290,9 +288,7 @@ namespace Microsoft.Azure.Commands.Batch.Test
         {
             RequestInterceptor interceptor = new RequestInterceptor((baseRequest) =>
             {
-                FileGetFromComputeNodeBatchRequest fileRequest = baseRequest as FileGetFromComputeNodeBatchRequest;
-
-                if (fileRequest != null)
+                if (baseRequest is FileGetFromComputeNodeBatchRequest fileRequest)
                 {
                     fileRequest.ServiceRequestFunc = (cancellationToken) =>
                     {
@@ -327,9 +323,7 @@ namespace Microsoft.Azure.Commands.Batch.Test
         {
             RequestInterceptor interceptor = new RequestInterceptor(baseRequest =>
             {
-                var request = baseRequest as T;
-
-                if (request != null)
+                if (baseRequest is T request)
                 {
                     assertAction(request);
                 }
diff --git a/src/Batch/Batch.Test/Models/BatchAccountContextTest.cs b/src/Batch/Batch.Test/Models/BatchAccountContextTest.cs
index 28f23f1972..5f7b1a9de4 100644
--- a/src/Batch/Batch.Test/Models/BatchAccountContextTest.cs
+++ b/src/Batch/Batch.Test/Models/BatchAccountContextTest.cs
@@ -34,13 +34,13 @@ namespace Microsoft.Azure.Commands.BatchManager.Test
         {
             string account = "account";
             string tenantUrlEnding = "batch-test.windows-int.net";
-            string endpoint = string.Format("{0}.{1}", account, tenantUrlEnding);
+            string endpoint = $"{account}.{tenantUrlEnding}";
             string subscription = "00000000-0000-0000-0000-000000000000";
             string resourceGroup = "resourceGroup";
-            string id = string.Format("id/subscriptions/{0}/resourceGroups/{1}/providers/Microsoft.Batch/batchAccounts/abc", subscription, resourceGroup);
+            string id = $"id/subscriptions/{subscription}/resourceGroups/{resourceGroup}/providers/Microsoft.Batch/batchAccounts/abc";
             PoolAllocationMode allocationMode = PoolAllocationMode.UserSubscription;
             KeyVaultReference keyVault = new KeyVaultReference(
-                string.Format("/subscriptions{0}/resourceGroups/{1}/providers/Microsoft.KeyVault/vaults/foo", subscription, resourceGroup),
+                $"/subscriptions{subscription}/resourceGroups/{resourceGroup}/providers/Microsoft.KeyVault/vaults/foo",
                 "https://foo.vaults.azure.com");
 
             BatchAccount resource = new BatchAccount(
@@ -63,7 +63,7 @@ namespace Microsoft.Azure.Commands.BatchManager.Test
             Assert.Equal(resource.Location, context.Location);
             Assert.Equal(resource.ProvisioningState.ToString(), context.State);
             Assert.Equal(account, context.AccountName);
-            Assert.Equal(string.Format("https://{0}", endpoint), context.TaskTenantUrl);
+            Assert.Equal($"https://{endpoint}", context.TaskTenantUrl);
             Assert.Equal(subscription, context.Subscription);
             Assert.Equal(resourceGroup, context.ResourceGroupName);
             Assert.Equal(allocationMode, context.PoolAllocationMode);
diff --git a/src/Batch/Batch.Test/ScenarioTests/BatchApplicationPackageTests.cs b/src/Batch/Batch.Test/ScenarioTests/BatchApplicationPackageTests.cs
index df8eaaf6c7..0efb30f315 100644
--- a/src/Batch/Batch.Test/ScenarioTests/BatchApplicationPackageTests.cs
+++ b/src/Batch/Batch.Test/ScenarioTests/BatchApplicationPackageTests.cs
@@ -46,7 +46,7 @@ namespace Microsoft.Azure.Commands.Batch.Test.ScenarioTests
                 {
                     return new string[]
                     {
-                        string.Format(string.Format("Test-UploadApplicationPackage '{0}' '{1}' '{2}'", id, version, filePath))
+                        string.Format($"Test-UploadApplicationPackage '{id}' '{version}' '{filePath}'")
                     };
                 },
                 () =>
@@ -77,7 +77,7 @@ namespace Microsoft.Azure.Commands.Batch.Test.ScenarioTests
                 {
                     return new string[]
                     {
-                        string.Format(string.Format("Test-UpdateApplicationPackage '{0}' '{1}' '{2}'", id, version, filePath))
+                        string.Format($"Test-UpdateApplicationPackage '{id}' '{version}' '{filePath}'")
                     };
                 },
                 () =>
@@ -109,7 +109,7 @@ namespace Microsoft.Azure.Commands.Batch.Test.ScenarioTests
                 {
                     return new string[]
                     {
-                        string.Format(string.Format("Test-CreatePoolWithApplicationPackage '{0}' '{1}' '{2}'", id, version, poolId))
+                        string.Format($"Test-CreatePoolWithApplicationPackage '{id}' '{version}' '{poolId}'")
                     };
                 },
                 () =>
@@ -139,7 +139,7 @@ namespace Microsoft.Azure.Commands.Batch.Test.ScenarioTests
                 {
                     return new string[]
                     {
-                        string.Format("Test-UpdatePoolWithApplicationPackage '{0}' '{1}' '{2}'", id, version, poolId)
+                        $"Test-UpdatePoolWithApplicationPackage '{id}' '{version}' '{poolId}'"
                     };
                 },
                 () =>
diff --git a/src/Batch/Batch.Test/ScenarioTests/CertificateTests.cs b/src/Batch/Batch.Test/ScenarioTests/CertificateTests.cs
index 438f7f0f85..0489fd2185 100644
--- a/src/Batch/Batch.Test/ScenarioTests/CertificateTests.cs
+++ b/src/Batch/Batch.Test/ScenarioTests/CertificateTests.cs
@@ -48,7 +48,7 @@ namespace Microsoft.Azure.Commands.Batch.Test.ScenarioTests
             string poolId = "certPool";
             controller.RunPsTestWorkflow(
                 _logger,
-                () => { return new string[] { string.Format("Test-TestCancelCertificateDelete '{0}' '{1}'", BatchTestHelpers.TestCertificateAlgorithm, thumbprint) }; },
+                () => { return new string[] { $"Test-TestCancelCertificateDelete '{BatchTestHelpers.TestCertificateAlgorithm}' '{thumbprint}'" }; },
                 () =>
                 {
                     context = new ScenarioTestContext();
diff --git a/src/Batch/Batch.Test/ScenarioTests/ComputeNodeTests.cs b/src/Batch/Batch.Test/ScenarioTests/ComputeNodeTests.cs
index c2358c4547..0ddcf391ad 100644
--- a/src/Batch/Batch.Test/ScenarioTests/ComputeNodeTests.cs
+++ b/src/Batch/Batch.Test/ScenarioTests/ComputeNodeTests.cs
@@ -40,7 +40,7 @@ namespace Microsoft.Azure.Commands.Batch.Test.ScenarioTests
             string removeNodePoolId = "removenodepool";
             controller.RunPsTestWorkflow(
                 _logger,
-                () => { return new string[] { string.Format("Test-RemoveComputeNodes '{0}'", removeNodePoolId) }; },
+                () => { return new string[] { $"Test-RemoveComputeNodes '{removeNodePoolId}'" }; },
                 () =>
                 {
                     context = new ScenarioTestContext();
@@ -65,7 +65,7 @@ namespace Microsoft.Azure.Commands.Batch.Test.ScenarioTests
             string computeNodeId2 = null;
             controller.RunPsTestWorkflow(
                 _logger,
-                () => { return new string[] { string.Format("Test-RebootAndReimageComputeNode '{0}' '{1}' '{2}'", poolId, computeNodeId, computeNodeId2) }; },
+                () => { return new string[] { $"Test-RebootAndReimageComputeNode '{poolId}' '{computeNodeId}' '{computeNodeId2}'" }; },
                 () =>
                 {
                     context = new ScenarioTestContext();
@@ -88,7 +88,7 @@ namespace Microsoft.Azure.Commands.Batch.Test.ScenarioTests
             string computeNodeId = null;
             controller.RunPsTestWorkflow(
                 _logger,
-                () => { return new string[] { string.Format("Test-DisableAndEnableComputeNodeScheduling '{0}' '{1}'", poolId, computeNodeId) }; },
+                () => { return new string[] { $"Test-DisableAndEnableComputeNodeScheduling '{poolId}' '{computeNodeId}'" }; },
                 () =>
                 {
                     context = new ScenarioTestContext();
@@ -110,7 +110,7 @@ namespace Microsoft.Azure.Commands.Batch.Test.ScenarioTests
 
             controller.RunPsTestWorkflow(
                 _logger,
-                () => { return new string[] { string.Format("Test-GetRemoteLoginSettings '{0}' '{1}'", iaasPoolId, computeNodeId) }; },
+                () => { return new string[] { $"Test-GetRemoteLoginSettings '{iaasPoolId}' '{computeNodeId}'" }; },
                 () =>
                 {
                     context = new ScenarioTestContext();
diff --git a/src/Batch/Batch.Test/ScenarioTests/ComputeNodeUserTests.cs b/src/Batch/Batch.Test/ScenarioTests/ComputeNodeUserTests.cs
index fb6baa399f..53a0ed9f66 100644
--- a/src/Batch/Batch.Test/ScenarioTests/ComputeNodeUserTests.cs
+++ b/src/Batch/Batch.Test/ScenarioTests/ComputeNodeUserTests.cs
@@ -39,7 +39,7 @@ namespace Microsoft.Azure.Commands.Batch.Test.ScenarioTests
             string computeNodeId = null;
             controller.RunPsTestWorkflow(
                 _logger,
-                () => { return new string[] { string.Format("Test-ComputeNodeUserEndToEnd '{0}' '{1}'", poolId, computeNodeId) }; },
+                () => { return new string[] { $"Test-ComputeNodeUserEndToEnd '{poolId}' '{computeNodeId}'" }; },
                 () =>
                 {
                     context = new ScenarioTestContext();
diff --git a/src/Batch/Batch.Test/ScenarioTests/FileTests.cs b/src/Batch/Batch.Test/ScenarioTests/FileTests.cs
index 09b1eca2f8..ed93f47ed7 100644
--- a/src/Batch/Batch.Test/ScenarioTests/FileTests.cs
+++ b/src/Batch/Batch.Test/ScenarioTests/FileTests.cs
@@ -42,17 +42,17 @@ namespace Microsoft.Azure.Commands.Batch.Test.ScenarioTests
             string jobId = "nodeFileContentByTask";
             string taskId = "testTask";
             string fileName = "testFile.txt";
-            string nodeFilePath = string.Format("wd\\{0}", fileName);
+            string nodeFilePath = $"wd\\{fileName}";
             string fileContents = "test file contents";
             BatchAccountContext context = null;
             controller.RunPsTestWorkflow(
                 _logger,
-                () => { return new string[] { string.Format("Test-GetNodeFileContentByTask '{0}' '{1}' '{2}' '{3}'", jobId, taskId, nodeFilePath, fileContents) }; },
+                () => { return new string[] { $"Test-GetNodeFileContentByTask '{jobId}' '{taskId}' '{nodeFilePath}' '{fileContents}'" }; },
                 () =>
                 {
                     context = new ScenarioTestContext();
                     ScenarioTestHelpers.CreateTestJob(controller, context, jobId);
-                    ScenarioTestHelpers.CreateTestTask(controller, context, jobId, taskId, string.Format("cmd /c echo {0} > {1}", fileContents, fileName));
+                    ScenarioTestHelpers.CreateTestTask(controller, context, jobId, taskId, $"cmd /c echo {fileContents} > {fileName}");
                     ScenarioTestHelpers.WaitForTaskCompletion(controller, context, jobId, taskId);
                 },
                 () =>
@@ -73,7 +73,7 @@ namespace Microsoft.Azure.Commands.Batch.Test.ScenarioTests
             string computeNodeId = null;
             controller.RunPsTestWorkflow(
                 _logger,
-            () => { return new string[] { string.Format("Test-GetNodeFileContentByComputeNode '{0}' '{1}' '{2}' '{3}'", poolId, computeNodeId, startTaskStdOutName, startTaskStdOutContent) }; },
+            () => { return new string[] { $"Test-GetNodeFileContentByComputeNode '{poolId}' '{computeNodeId}' '{startTaskStdOutName}' '{startTaskStdOutContent}'" }; },
             () =>
             {
                 context = new ScenarioTestContext();
@@ -93,7 +93,7 @@ namespace Microsoft.Azure.Commands.Batch.Test.ScenarioTests
             string computeNodeId = null;
             controller.RunPsTestWorkflow(
                 _logger,
-            () => { return new string[] { string.Format("Test-GetRDPFile '{0}' '{1}'", poolId, computeNodeId) }; },
+            () => { return new string[] { $"Test-GetRDPFile '{poolId}' '{computeNodeId}'" }; },
             () =>
             {
                 context = new ScenarioTestContext();
@@ -113,15 +113,15 @@ namespace Microsoft.Azure.Commands.Batch.Test.ScenarioTests
             string jobId = "deletetaskFile";
             string taskId = "task1";
             string fileName = "testFile.txt";
-            string filePath = string.Format("wd\\{0}", fileName);
+            string filePath = $"wd\\{fileName}";
             controller.RunPsTestWorkflow(
                 _logger,
-                () => { return new string[] { string.Format("Test-DeleteNodeFileByTask '{0}' '{1}' '{2}'", jobId, taskId, filePath) }; },
+                () => { return new string[] { $"Test-DeleteNodeFileByTask '{jobId}' '{taskId}' '{filePath}'" }; },
                 () =>
                 {
                     context = new ScenarioTestContext();
                     ScenarioTestHelpers.CreateTestJob(controller, context, jobId);
-                    ScenarioTestHelpers.CreateTestTask(controller, context, jobId, taskId, string.Format("cmd /c echo \"test\" > {0}", fileName));
+                    ScenarioTestHelpers.CreateTestTask(controller, context, jobId, taskId, $"cmd /c echo \"test\" > {fileName}");
                     ScenarioTestHelpers.WaitForTaskCompletion(controller, context, jobId, taskId);
                 },
                 () =>
@@ -142,15 +142,15 @@ namespace Microsoft.Azure.Commands.Batch.Test.ScenarioTests
             string taskId = "task1";
             string computeNodeId = null;
             string fileName = "testFile.txt";
-            string filePath = string.Format("workitems\\{0}\\job-1\\{1}\\wd\\{2}", jobId, taskId, fileName);
+            string filePath = $"workitems\\{jobId}\\job-1\\{taskId}\\wd\\{fileName}";
             controller.RunPsTestWorkflow(
                 _logger,
-                () => { return new string[] { string.Format("Test-DeleteNodeFileByComputeNode '{0}' '{1}' '{2}'", poolId, computeNodeId, filePath) }; },
+                () => { return new string[] { $"Test-DeleteNodeFileByComputeNode '{poolId}' '{computeNodeId}' '{filePath}'" }; },
                 () =>
                 {
                     context = new ScenarioTestContext();
                     ScenarioTestHelpers.CreateTestJob(controller, context, jobId);
-                    ScenarioTestHelpers.CreateTestTask(controller, context, jobId, taskId, string.Format("cmd /c echo \"test\" > {0}", fileName));
+                    ScenarioTestHelpers.CreateTestTask(controller, context, jobId, taskId, $"cmd /c echo \"test\" > {fileName}");
                     ScenarioTestHelpers.WaitForTaskCompletion(controller, context, jobId, taskId);
                     computeNodeId = ScenarioTestHelpers.GetTaskComputeNodeId(controller, context, jobId, taskId);
                 },
diff --git a/src/Batch/Batch.Test/ScenarioTests/JobScheduleTests.cs b/src/Batch/Batch.Test/ScenarioTests/JobScheduleTests.cs
index 14c2a063cd..289dd741dd 100644
--- a/src/Batch/Batch.Test/ScenarioTests/JobScheduleTests.cs
+++ b/src/Batch/Batch.Test/ScenarioTests/JobScheduleTests.cs
@@ -47,7 +47,7 @@ namespace Microsoft.Azure.Commands.Batch.Test.ScenarioTests
             BatchAccountContext context = null;
             controller.RunPsTestWorkflow(
                 _logger,
-                () => { return new string[] { string.Format("Test-DisableEnableTerminateJobSchedule '{0}'", jobScheduleId) }; },
+                () => { return new string[] { $"Test-DisableEnableTerminateJobSchedule '{jobScheduleId}'" }; },
                 () =>
                 {
                     context = new ScenarioTestContext();
diff --git a/src/Batch/Batch.Test/ScenarioTests/JobTests.cs b/src/Batch/Batch.Test/ScenarioTests/JobTests.cs
index dd0120cdf4..75d7eb1a06 100644
--- a/src/Batch/Batch.Test/ScenarioTests/JobTests.cs
+++ b/src/Batch/Batch.Test/ScenarioTests/JobTests.cs
@@ -48,7 +48,7 @@ namespace Microsoft.Azure.Commands.Batch.Test.ScenarioTests
             BatchAccountContext context = null;
             controller.RunPsTestWorkflow(
                 _logger, 
-                () => { return new string[] { string.Format("Test-DisableEnableTerminateJob '{0}'", jobId) }; },
+                () => { return new string[] { $"Test-DisableEnableTerminateJob '{jobId}'" }; },
                 () =>
                 {
                     context = new ScenarioTestContext();
@@ -73,7 +73,7 @@ namespace Microsoft.Azure.Commands.Batch.Test.ScenarioTests
             PSCloudJob completedJob = null;
             controller.RunPsTestWorkflow(
                 _logger,
-                () => { return new string[] { string.Format("IfJobSetsAutoFailure-ItCompletesWhenAnyTaskFails '{0}' '{1}'", jobId, taskId) }; },
+                () => { return new string[] { $"IfJobSetsAutoFailure-ItCompletesWhenAnyTaskFails '{jobId}' '{taskId}'" }; },
                 null,
                 () =>
                 {
diff --git a/src/Batch/Batch.Test/ScenarioTests/PoolTests.cs b/src/Batch/Batch.Test/ScenarioTests/PoolTests.cs
index 41f2b47486..e3fb02ccfa 100644
--- a/src/Batch/Batch.Test/ScenarioTests/PoolTests.cs
+++ b/src/Batch/Batch.Test/ScenarioTests/PoolTests.cs
@@ -49,7 +49,7 @@ namespace Microsoft.Azure.Commands.Batch.Test.ScenarioTests
             string poolId = "resizePool";
             controller.RunPsTestWorkflow(
                 _logger,
-                () => { return new string[] { string.Format("Test-ResizeAndStopResizePool '{0}'", poolId) }; },
+                () => { return new string[] { $"Test-ResizeAndStopResizePool '{poolId}'" }; },
                 () =>
                 {
                     context = new ScenarioTestContext();
@@ -72,7 +72,7 @@ namespace Microsoft.Azure.Commands.Batch.Test.ScenarioTests
             string poolId = "autoscalePool";
             controller.RunPsTestWorkflow(
                 _logger,
-                () => { return new string[] { string.Format("Test-AutoScaleActions '{0}'", poolId) }; },
+                () => { return new string[] { $"Test-AutoScaleActions '{poolId}'" }; },
                 () =>
                 {
                     context = new ScenarioTestContext();
diff --git a/src/Batch/Batch.Test/ScenarioTests/TaskTests.cs b/src/Batch/Batch.Test/ScenarioTests/TaskTests.cs
index b79a1b7127..41939a75fe 100644
--- a/src/Batch/Batch.Test/ScenarioTests/TaskTests.cs
+++ b/src/Batch/Batch.Test/ScenarioTests/TaskTests.cs
@@ -38,7 +38,7 @@ namespace Microsoft.Azure.Commands.Batch.Test.ScenarioTests
             BatchAccountContext context = null;
             controller.RunPsTestWorkflow(
                 _logger,
-                () => { return new string[] { string.Format("Test-TaskCRUD '{0}'", jobId) }; },
+                () => { return new string[] { $"Test-TaskCRUD '{jobId}'" }; },
                 () =>
                 {
                     context = new ScenarioTestContext();
@@ -61,7 +61,7 @@ namespace Microsoft.Azure.Commands.Batch.Test.ScenarioTests
             BatchAccountContext context = null;
             controller.RunPsTestWorkflow(
                 _logger,
-                () => { return new string[] { string.Format("Test-CreateTaskCollection '{0}'", jobId) }; },
+                () => { return new string[] { $"Test-CreateTaskCollection '{jobId}'" }; },
                 () =>
                 {
                     context = new ScenarioTestContext();
@@ -86,7 +86,7 @@ namespace Microsoft.Azure.Commands.Batch.Test.ScenarioTests
             string taskId2 = "testTask2";
             controller.RunPsTestWorkflow(
                 _logger,
-                () => { return new string[] { string.Format("Test-TerminateTask '{0}' '{1}' '{2}'", jobId, taskId1, taskId2) }; },
+                () => { return new string[] { $"Test-TerminateTask '{jobId}' '{taskId1}' '{taskId2}'" }; },
                 () =>
                 {
                     context = new ScenarioTestContext();
@@ -114,7 +114,7 @@ namespace Microsoft.Azure.Commands.Batch.Test.ScenarioTests
             BatchAccountContext context = null;
             controller.RunPsTestWorkflow(
                 _logger,
-                () => { return new string[] { string.Format("Test-ListAllSubtasks '{0}' '{1}' '{2}'", jobId, taskId, numInstances) }; },
+                () => { return new string[] { $"Test-ListAllSubtasks '{jobId}' '{taskId}' '{numInstances}'" }; },
                 () =>
                 {
                     context = new ScenarioTestContext();
diff --git a/src/Batch/Batch/BatchCmdletBase.cs b/src/Batch/Batch/BatchCmdletBase.cs
index bd7d1ccf62..11c2c954e5 100644
--- a/src/Batch/Batch/BatchCmdletBase.cs
+++ b/src/Batch/Batch/BatchCmdletBase.cs
@@ -124,8 +124,7 @@ namespace Microsoft.Azure.Commands.Batch
 
                 if (detailsToken != null)
                 {
-                    var details = detailsToken as JArray;
-                    if (details != null && details.Count > 1)
+                    if (detailsToken is JArray details && details.Count > 1)
                     {
                         // for now, 2nd entry in array is the one we're interested in. Need a better way of identifying the
                         // detailed error message
diff --git a/src/Batch/Batch/Models/BatchClient.Files.cs b/src/Batch/Batch/Models/BatchClient.Files.cs
index f9cb95397b..6bcde02efb 100644
--- a/src/Batch/Batch/Models/BatchClient.Files.cs
+++ b/src/Batch/Batch/Models/BatchClient.Files.cs
@@ -231,14 +231,12 @@ namespace Microsoft.Azure.Commands.Batch.Models
             // TODO: Update this to use the new built in support in the C# SDK when we update the C# SDK to 6.x or later
             Protocol.RequestInterceptor interceptor = new Protocol.RequestInterceptor(baseRequest =>
             {
-                var fromTaskRequest = baseRequest as BatchRequests.FileGetFromTaskBatchRequest;
-                if (fromTaskRequest != null && byteRange != null)
+                if (baseRequest is BatchRequests.FileGetFromTaskBatchRequest fromTaskRequest && byteRange != null)
                 {
                     fromTaskRequest.Options.OcpRange = $"bytes={byteRange.Start}-{byteRange.End}";
                 }
 
-                var fromNodeRequest = baseRequest as BatchRequests.FileGetFromComputeNodeBatchRequest;
-                if (fromNodeRequest != null && byteRange != null)
+                if (baseRequest is BatchRequests.FileGetFromComputeNodeBatchRequest fromNodeRequest && byteRange != null)
                 {
                     fromNodeRequest.Options.OcpRange = $"bytes={byteRange.Start}-{byteRange.End}";
                 }
diff --git a/src/Blockchain/generated/runtime/Serialization/JsonSerializer.cs b/src/Blockchain/generated/runtime/Serialization/JsonSerializer.cs
index 48c85c8aee..d321177302 100644
--- a/src/Blockchain/generated/runtime/Serialization/JsonSerializer.cs
+++ b/src/Blockchain/generated/runtime/Serialization/JsonSerializer.cs
@@ -312,7 +312,7 @@ namespace Microsoft.Azure.PowerShell.Cmdlets.Blockchain.Runtime.Json
                     default: return ReadArray((IEnumerable)value);
                 }
             }
-            else if (value is IEnumerable)
+            else if (value is IEnumerable iEnumerable)
             {
                 if (type.IsList && type.ElementType != null)
                 {
@@ -330,7 +330,7 @@ namespace Microsoft.Azure.PowerShell.Cmdlets.Blockchain.Runtime.Json
                     }
                 }
 
-                return ReadArray((IEnumerable)value);
+                return ReadArray(iEnumerable);
             }
             else
             {
diff --git a/src/Blueprint/Blueprint/Cmdlets/BlueprintCmdletBase.cs b/src/Blueprint/Blueprint/Cmdlets/BlueprintCmdletBase.cs
index 261961ab64..1f81891ca0 100644
--- a/src/Blueprint/Blueprint/Cmdlets/BlueprintCmdletBase.cs
+++ b/src/Blueprint/Blueprint/Cmdlets/BlueprintCmdletBase.cs
@@ -106,7 +106,7 @@ namespace Microsoft.Azure.Commands.Blueprint.Cmdlets
         {
             var aggEx = ex as AggregateException;
 
-            if (aggEx != null && aggEx.InnerExceptions != null)
+            if (aggEx?.InnerExceptions != null)
             {
                 foreach (var e in aggEx.Flatten().InnerExceptions)
                 {
diff --git a/src/Blueprint/Blueprint/Cmdlets/BlueprintDefinition/BlueprintDefinitionCmdletBase.cs b/src/Blueprint/Blueprint/Cmdlets/BlueprintDefinition/BlueprintDefinitionCmdletBase.cs
index bd0b7b3723..6ddb67a172 100644
--- a/src/Blueprint/Blueprint/Cmdlets/BlueprintDefinition/BlueprintDefinitionCmdletBase.cs
+++ b/src/Blueprint/Blueprint/Cmdlets/BlueprintDefinition/BlueprintDefinitionCmdletBase.cs
@@ -87,7 +87,7 @@ namespace Microsoft.Azure.Commands.Blueprint.Cmdlets
                 // If we can't find the given subscription in the tenant, show error message.
                 if (statusCode == HttpStatusCode.NotFound)
                 {
-                    CloudException cex = new CloudException(string.Format("Subscription Id '{0}' could not be found in current tenant.", subscriptionId));
+                    CloudException cex = new CloudException($"Subscription Id '{subscriptionId}' could not be found in current tenant.");
                     throw cex;
                 }
 
diff --git a/src/BotService/generated/runtime/Serialization/JsonSerializer.cs b/src/BotService/generated/runtime/Serialization/JsonSerializer.cs
index 20707c956e..68e212c2be 100644
--- a/src/BotService/generated/runtime/Serialization/JsonSerializer.cs
+++ b/src/BotService/generated/runtime/Serialization/JsonSerializer.cs
@@ -312,7 +312,7 @@ namespace Microsoft.Azure.PowerShell.Cmdlets.BotService.Runtime.Json
                     default: return ReadArray((IEnumerable)value);
                 }
             }
-            else if (value is IEnumerable)
+            else if (value is IEnumerable iEnumerable)
             {
                 if (type.IsList && type.ElementType != null)
                 {
@@ -330,7 +330,7 @@ namespace Microsoft.Azure.PowerShell.Cmdlets.BotService.Runtime.Json
                     }
                 }
 
-                return ReadArray((IEnumerable)value);
+                return ReadArray(iEnumerable);
             }
             else
             {
diff --git a/src/Cdn/Cdn/CustomDomain/DisableAzureRmCdnCustomDomainHttps.cs b/src/Cdn/Cdn/CustomDomain/DisableAzureRmCdnCustomDomainHttps.cs
index e03bd8584e..da19aa8c4d 100644
--- a/src/Cdn/Cdn/CustomDomain/DisableAzureRmCdnCustomDomainHttps.cs
+++ b/src/Cdn/Cdn/CustomDomain/DisableAzureRmCdnCustomDomainHttps.cs
@@ -92,7 +92,7 @@ namespace Microsoft.Azure.Commands.Cdn.CustomDomain
             }
 
             ConfirmAction(MyInvocation.InvocationName,
-                String.Format("{0} ({1})", existingCustomDomain.Name, existingCustomDomain.HostName),
+                $"{existingCustomDomain.Name} ({existingCustomDomain.HostName})",
                 () => CdnManagementClient.CustomDomains.DisableCustomHttps(
                     ResourceGroupName,
                     ProfileName,
diff --git a/src/Cdn/Cdn/CustomDomain/EnableAzureRmCdnCustomDomainHttps.cs b/src/Cdn/Cdn/CustomDomain/EnableAzureRmCdnCustomDomainHttps.cs
index 994175d418..66a694fb38 100644
--- a/src/Cdn/Cdn/CustomDomain/EnableAzureRmCdnCustomDomainHttps.cs
+++ b/src/Cdn/Cdn/CustomDomain/EnableAzureRmCdnCustomDomainHttps.cs
@@ -126,7 +126,7 @@ namespace Microsoft.Azure.Commands.Cdn.CustomDomain
             }
 
             ConfirmAction(MyInvocation.InvocationName,
-                String.Format("{0} ({1})", existingCustomDomain.Name, existingCustomDomain.HostName),
+                $"{existingCustomDomain.Name} ({existingCustomDomain.HostName})",
                 () => CdnManagementClient.CustomDomains.EnableCustomHttps(
                     ResourceGroupName,
                     ProfileName,
diff --git a/src/Cdn/Cdn/CustomDomain/RemoveAzureRmCdnCustomDomain.cs b/src/Cdn/Cdn/CustomDomain/RemoveAzureRmCdnCustomDomain.cs
index a1984a9b82..dfa80dd70e 100644
--- a/src/Cdn/Cdn/CustomDomain/RemoveAzureRmCdnCustomDomain.cs
+++ b/src/Cdn/Cdn/CustomDomain/RemoveAzureRmCdnCustomDomain.cs
@@ -77,7 +77,7 @@ namespace Microsoft.Azure.Commands.Cdn.CustomDomain
             }
 
             ConfirmAction(MyInvocation.InvocationName,
-                String.Format("{0} ({1})", existingCustomDomain.Name, existingCustomDomain.HostName),
+                $"{existingCustomDomain.Name} ({existingCustomDomain.HostName})",
                 () => CdnManagementClient.CustomDomains.Delete(
                     ResourceGroupName,
                     ProfileName,
diff --git a/src/Cdn/Cdn/Endpoint/NewAzureRmCdnEndpoint.cs b/src/Cdn/Cdn/Endpoint/NewAzureRmCdnEndpoint.cs
index fe6167c3da..377056137c 100644
--- a/src/Cdn/Cdn/Endpoint/NewAzureRmCdnEndpoint.cs
+++ b/src/Cdn/Cdn/Endpoint/NewAzureRmCdnEndpoint.cs
@@ -225,8 +225,7 @@ namespace Microsoft.Azure.Commands.Cdn.Endpoint
             }
             catch (ErrorResponseException e)
             {
-                throw new PSArgumentException(string.Format("Error response received.Error Message: '{0}'",
-                                     e.Response.Content));
+                throw new PSArgumentException($"Error response received.Error Message: '{e.Response.Content}'");
             }
         }
 
diff --git a/src/Cdn/Cdn/Endpoint/SetAzureRmCdnEndpoint.cs b/src/Cdn/Cdn/Endpoint/SetAzureRmCdnEndpoint.cs
index 8c4cb27ab8..7678bd96bc 100644
--- a/src/Cdn/Cdn/Endpoint/SetAzureRmCdnEndpoint.cs
+++ b/src/Cdn/Cdn/Endpoint/SetAzureRmCdnEndpoint.cs
@@ -67,8 +67,7 @@ namespace Microsoft.Azure.Commands.Cdn.Endpoint
             }
             catch (ErrorResponseException e)
             {
-                throw new PSArgumentException(string.Format("Error response received.Error Message: '{0}'",
-                                     e.Response.Content));
+                throw new PSArgumentException($"Error response received.Error Message: '{e.Response.Content}'");
             }
         }
     }
diff --git a/src/Cdn/Cdn/Helpers/ModelExtensions.cs b/src/Cdn/Cdn/Helpers/ModelExtensions.cs
index 531d66c517..8b9bd0c12d 100644
--- a/src/Cdn/Cdn/Helpers/ModelExtensions.cs
+++ b/src/Cdn/Cdn/Helpers/ModelExtensions.cs
@@ -885,9 +885,7 @@ namespace Microsoft.Azure.Commands.Cdn.Helpers
                 case "RemoteAddress":
                     if (condition.Operator != "Any" && condition.Operator != "IPMatch" && condition.Operator != "GeoMatch")
                     {
-                        throw new PSArgumentException(string.Format(
-                                "Invalid Operator {0} found for {1} match variable. Valid operators are IPMatch, Any, GeoMatch", condition.Operator, condition.MatchVariable
-                                ));
+                        throw new PSArgumentException($"Invalid Operator {condition.Operator} found for {condition.MatchVariable} match variable. Valid operators are IPMatch, Any, GeoMatch");
                     }
                     break;
                 case "QueryString":
@@ -900,9 +898,7 @@ namespace Microsoft.Azure.Commands.Cdn.Helpers
                         condition.Operator != "BeginsWith" && condition.Operator != "EndsWith" && condition.Operator != "LessThan" &&
                         condition.Operator != "LessThanOrEqual" && condition.Operator != "GreaterThan" && condition.Operator != "GreaterThanOrEqual")
                     {
-                        throw new PSArgumentException(string.Format(
-                                "Invalid Operator {0} found for {1} match condition. Valid operators are Any, Equal, Contains, BeginsWith, EndsWith, LessThan, LessThanOrEqual, GreaterThan, GreaterThanOrEqual.", condition.Operator, condition.MatchVariable
-                                ));
+                        throw new PSArgumentException($"Invalid Operator {condition.Operator} found for {condition.MatchVariable} match condition. Valid operators are Any, Equal, Contains, BeginsWith, EndsWith, LessThan, LessThanOrEqual, GreaterThan, GreaterThanOrEqual.");
                     }
                     break;
                 case "RequestHeader":
@@ -910,17 +906,13 @@ namespace Microsoft.Azure.Commands.Cdn.Helpers
                 case "Cookies":
                     if (condition.Selector == null)
                     {
-                        throw new PSArgumentException(string.Format(
-                                "Selector is requried for {0} match condition", condition.MatchVariable
-                                ));
+                        throw new PSArgumentException($"Selector is requried for {condition.MatchVariable} match condition");
                     }
                     if (condition.Operator != "Any" && condition.Operator != "Equal" && condition.Operator != "Contains" &&
                         condition.Operator != "BeginsWith" && condition.Operator != "EndsWith" && condition.Operator != "LessThan" &&
                         condition.Operator != "LessThanOrEqual" && condition.Operator != "GreaterThan" && condition.Operator != "GreaterThanOrEqual")
                     {
-                        throw new PSArgumentException(string.Format(
-                                "Invalid Operator {0} found for {1} match condition. Valid operators are Any, Equal, Contains, BeginsWith, EndsWith, LessThan, LessThanOrEqual, GreaterThan, GreaterThanOrEqual.",
-                                condition.Operator, condition.MatchVariable));
+                        throw new PSArgumentException($"Invalid Operator {condition.Operator} found for {condition.MatchVariable} match condition. Valid operators are Any, Equal, Contains, BeginsWith, EndsWith, LessThan, LessThanOrEqual, GreaterThan, GreaterThanOrEqual.");
                     }
                     break;
                 case "RequestScheme":
@@ -929,9 +921,7 @@ namespace Microsoft.Azure.Commands.Cdn.Helpers
                 case "HttpVersion":
                     if (condition.Operator !="Equal")
                     {
-                        throw new PSArgumentException(string.Format(
-                                "Invalid Operator {0} found for {1} match condition. Valid operator is Equal", condition.Operator, condition.MatchVariable
-                                ));
+                        throw new PSArgumentException($"Invalid Operator {condition.Operator} found for {condition.MatchVariable} match condition. Valid operator is Equal");
                     }
                     break;
                 default:
diff --git a/src/Cdn/Cdn/Origin/NewAzCdnOrigin.cs b/src/Cdn/Cdn/Origin/NewAzCdnOrigin.cs
index d76fcbdf8b..8dce39baa0 100644
--- a/src/Cdn/Cdn/Origin/NewAzCdnOrigin.cs
+++ b/src/Cdn/Cdn/Origin/NewAzCdnOrigin.cs
@@ -142,8 +142,7 @@ namespace Microsoft.Azure.Commands.Cdn.Origin
             }
             catch (Management.Cdn.Models.ErrorResponseException e)
             {
-                throw new PSArgumentException(string.Format("Error response received.Error Message: '{0}'",
-                                     e.Response.Content));
+                throw new PSArgumentException($"Error response received.Error Message: '{e.Response.Content}'");
             }
         }
     }
diff --git a/src/Cdn/Cdn/Origin/RemoveAzCdnOrigin.cs b/src/Cdn/Cdn/Origin/RemoveAzCdnOrigin.cs
index 5e3006859c..4d413fce20 100644
--- a/src/Cdn/Cdn/Origin/RemoveAzCdnOrigin.cs
+++ b/src/Cdn/Cdn/Origin/RemoveAzCdnOrigin.cs
@@ -95,8 +95,7 @@ namespace Microsoft.Azure.Commands.Cdn.Origin
             }
             catch (Microsoft.Azure.Management.Cdn.Models.ErrorResponseException e)
             {
-                throw new PSArgumentException(string.Format("Error response received.Error Message: '{0}'",
-                                     e.Response.Content));
+                throw new PSArgumentException($"Error response received.Error Message: '{e.Response.Content}'");
             }
         }
     }
diff --git a/src/Cdn/Cdn/Origin/SetAzureRmCdnOrigin.cs b/src/Cdn/Cdn/Origin/SetAzureRmCdnOrigin.cs
index a5dc71ef17..ce28417bac 100644
--- a/src/Cdn/Cdn/Origin/SetAzureRmCdnOrigin.cs
+++ b/src/Cdn/Cdn/Origin/SetAzureRmCdnOrigin.cs
@@ -113,7 +113,7 @@ namespace Microsoft.Azure.Commands.Cdn.Origin
 
             }
             ConfirmAction(MyInvocation.InvocationName,
-               string.Format("{0} ({1})", OriginName, HostName),
+               $"{OriginName} ({HostName})",
                SetOrigin);
         }
 
@@ -142,8 +142,7 @@ namespace Microsoft.Azure.Commands.Cdn.Origin
             }
             catch (Microsoft.Azure.Management.Cdn.Models.ErrorResponseException e)
             {
-                throw new PSArgumentException(string.Format("Error response received.Error Message: '{0}'",
-                                     e.Response.Content));
+                throw new PSArgumentException($"Error response received.Error Message: '{e.Response.Content}'");
             }
         }
     }
diff --git a/src/Cdn/Cdn/OriginGroups/GetAzCdnOriginGroup.cs b/src/Cdn/Cdn/OriginGroups/GetAzCdnOriginGroup.cs
index 86661f7021..eea0845f5a 100644
--- a/src/Cdn/Cdn/OriginGroups/GetAzCdnOriginGroup.cs
+++ b/src/Cdn/Cdn/OriginGroups/GetAzCdnOriginGroup.cs
@@ -66,8 +66,7 @@ namespace Microsoft.Azure.Commands.Cdn.OriginGroups
             }
             catch (Management.Cdn.Models.ErrorResponseException e)
             {
-                throw new PSArgumentException(string.Format("Error response received.Error Message: '{0}'",
-                                     e.Response.Content));
+                throw new PSArgumentException($"Error response received.Error Message: '{e.Response.Content}'");
             }
         }
     }
diff --git a/src/Cdn/Cdn/OriginGroups/NewAzCdnOriginGroup.cs b/src/Cdn/Cdn/OriginGroups/NewAzCdnOriginGroup.cs
index 045166b46a..1c0f5348d1 100644
--- a/src/Cdn/Cdn/OriginGroups/NewAzCdnOriginGroup.cs
+++ b/src/Cdn/Cdn/OriginGroups/NewAzCdnOriginGroup.cs
@@ -143,8 +143,7 @@ namespace Microsoft.Azure.Commands.Cdn.OriginGroups
             }
             catch (Management.Cdn.Models.ErrorResponseException e)
             {
-                throw new PSArgumentException(string.Format("Error response received.Error Message: '{0}'",
-                                     e.Response.Content));
+                throw new PSArgumentException($"Error response received.Error Message: '{e.Response.Content}'");
             }
         }
     }
diff --git a/src/Cdn/Cdn/OriginGroups/RmAzCdnOriginGroup.cs b/src/Cdn/Cdn/OriginGroups/RmAzCdnOriginGroup.cs
index f9387648b3..6801a55d00 100644
--- a/src/Cdn/Cdn/OriginGroups/RmAzCdnOriginGroup.cs
+++ b/src/Cdn/Cdn/OriginGroups/RmAzCdnOriginGroup.cs
@@ -92,8 +92,7 @@ namespace Microsoft.Azure.Commands.Cdn.OriginGroups
             }
             catch (Management.Cdn.Models.ErrorResponseException e)
             {
-                throw new PSArgumentException(string.Format("Error response received.Error Message: '{0}'",
-                                     e.Response.Content));
+                throw new PSArgumentException($"Error response received.Error Message: '{e.Response.Content}'");
             }
         }
     }
diff --git a/src/Cdn/Cdn/OriginGroups/SetAzCdnOriginGroup.cs b/src/Cdn/Cdn/OriginGroups/SetAzCdnOriginGroup.cs
index 91f41d95dc..932836cf5b 100644
--- a/src/Cdn/Cdn/OriginGroups/SetAzCdnOriginGroup.cs
+++ b/src/Cdn/Cdn/OriginGroups/SetAzCdnOriginGroup.cs
@@ -143,8 +143,7 @@ namespace Microsoft.Azure.Commands.Cdn.OriginGroups
             }
             catch (ErrorResponseException e)
             {
-                throw new PSArgumentException(string.Format("Error response received.Error Message: '{0}'",
-                                     e.Response.Content));
+                throw new PSArgumentException($"Error response received.Error Message: '{e.Response.Content}'");
             }
         }
     }
diff --git a/src/Cdn/Cdn/Profile/RemoveAzureRmCdnProfile.cs b/src/Cdn/Cdn/Profile/RemoveAzureRmCdnProfile.cs
index 0c3a9f67f4..8f75c7365b 100644
--- a/src/Cdn/Cdn/Profile/RemoveAzureRmCdnProfile.cs
+++ b/src/Cdn/Cdn/Profile/RemoveAzureRmCdnProfile.cs
@@ -87,7 +87,7 @@ namespace Microsoft.Azure.Commands.Cdn.Profile
         private bool ContainsEndpoints()
         {
             var existingEndpoints = CdnManagementClient.Endpoints.ListByProfile(ResourceGroupName, ProfileName);
-            if(existingEndpoints.Count() > 0)
+            if(existingEndpoints.Any())
             {
                 return true;
             }
diff --git a/src/CloudService/generated/runtime/Serialization/JsonSerializer.cs b/src/CloudService/generated/runtime/Serialization/JsonSerializer.cs
index cff51a284b..45b2bb52f5 100644
--- a/src/CloudService/generated/runtime/Serialization/JsonSerializer.cs
+++ b/src/CloudService/generated/runtime/Serialization/JsonSerializer.cs
@@ -312,7 +312,7 @@ namespace Microsoft.Azure.PowerShell.Cmdlets.CloudService.Runtime.Json
                     default: return ReadArray((IEnumerable)value);
                 }
             }
-            else if (value is IEnumerable)
+            else if (value is IEnumerable iEnumerable)
             {
                 if (type.IsList && type.ElementType != null)
                 {
@@ -330,7 +330,7 @@ namespace Microsoft.Azure.PowerShell.Cmdlets.CloudService.Runtime.Json
                     }
                 }
 
-                return ReadArray((IEnumerable)value);
+                return ReadArray(iEnumerable);
             }
             else
             {
diff --git a/src/CognitiveServices/CognitiveServices/CognitiveServicesAccount/CognitiveServicesAccountBaseCmdlet.cs b/src/CognitiveServices/CognitiveServices/CognitiveServicesAccount/CognitiveServicesAccountBaseCmdlet.cs
index 4bfb246bfd..18f9790557 100644
--- a/src/CognitiveServices/CognitiveServices/CognitiveServicesAccount/CognitiveServicesAccountBaseCmdlet.cs
+++ b/src/CognitiveServices/CognitiveServices/CognitiveServicesAccount/CognitiveServicesAccountBaseCmdlet.cs
@@ -107,10 +107,7 @@ namespace Microsoft.Azure.Commands.Management.CognitiveServices
             IEnumerable<CognitiveServicesModels.CognitiveServicesAccount> cognitiveServicesAccounts)
         {
             List<PSCognitiveServicesAccount> output = new List<PSCognitiveServicesAccount>();
-            if (cognitiveServicesAccounts != null)
-            {
-                cognitiveServicesAccounts.ForEach(cognitiveServicesAccount => output.Add(PSCognitiveServicesAccount.Create(cognitiveServicesAccount)));
-            }
+            cognitiveServicesAccounts?.ForEach(cognitiveServicesAccount => output.Add(PSCognitiveServicesAccount.Create(cognitiveServicesAccount)));
 
             WriteObject(output, true);
         }
diff --git a/src/CognitiveServices/CognitiveServices/CognitiveServicesAccount/RemoveAzureCognitiveServicesAccountNetworkRule.cs b/src/CognitiveServices/CognitiveServices/CognitiveServicesAccount/RemoveAzureCognitiveServicesAccountNetworkRule.cs
index 8c707413af..b0a1073488 100644
--- a/src/CognitiveServices/CognitiveServices/CognitiveServicesAccount/RemoveAzureCognitiveServicesAccountNetworkRule.cs
+++ b/src/CognitiveServices/CognitiveServices/CognitiveServicesAccount/RemoveAzureCognitiveServicesAccountNetworkRule.cs
@@ -119,7 +119,7 @@ namespace Microsoft.Azure.Commands.Management.CognitiveServices
                         {
                             VirtualNetworkRule rule = new VirtualNetworkRule(s);
                             if (!RemoveNetworkRule(accountACL.VirtualNetworkRules, rule))
-                                throw new ArgumentOutOfRangeException("VirtualNetworkResourceId", String.Format("Can't remove VirtualNetworkRule with specific ResourceId since not exist: {0}", rule.Id));
+                                throw new ArgumentOutOfRangeException("VirtualNetworkResourceId", $"Can't remove VirtualNetworkRule with specific ResourceId since not exist: {rule.Id}");
                         }
                         break;
                     case IpRuleStringParameterSet:
@@ -129,7 +129,7 @@ namespace Microsoft.Azure.Commands.Management.CognitiveServices
                         {
                             IpRule rule = new IpRule(s);
                             if (!RemoveIpRule(accountACL.IpRules, rule))
-                                throw new ArgumentOutOfRangeException("IPAddressOrRange", String.Format("Can't remove IpRule with specific IPAddressOrRange since not exist: {0}", rule.Value));
+                                throw new ArgumentOutOfRangeException("IPAddressOrRange", $"Can't remove IpRule with specific IPAddressOrRange since not exist: {rule.Value}");
                         }
                         break;
                     case NetworkRuleObjectParameterSet:
@@ -138,7 +138,7 @@ namespace Microsoft.Azure.Commands.Management.CognitiveServices
                         foreach (PSVirtualNetworkRule rule in VirtualNetworkRule)
                         {
                             if (!RemoveNetworkRule(accountACL.VirtualNetworkRules, rule.ToVirtualNetworkRule()))
-                                throw new ArgumentOutOfRangeException("VirtualNetworkRule", String.Format("Can't remove VirtualNetworkRule with specific ResourceId since not exist: {0}", rule.Id));
+                                throw new ArgumentOutOfRangeException("VirtualNetworkRule", $"Can't remove VirtualNetworkRule with specific ResourceId since not exist: {rule.Id}");
                         }
                         break;
                     case IpRuleObjectParameterSet:
@@ -147,7 +147,7 @@ namespace Microsoft.Azure.Commands.Management.CognitiveServices
                         foreach (PSIpRule rule in IpRule)
                         {
                             if (!RemoveIpRule(accountACL.IpRules, rule.ToIpRule()))
-                                throw new ArgumentOutOfRangeException("IPRule", String.Format("Can't remove IpRule with specific IPAddressOrRange since not exist: {0}", rule.IpAddress));
+                                throw new ArgumentOutOfRangeException("IPRule", $"Can't remove IpRule with specific IPAddressOrRange since not exist: {rule.IpAddress}");
                         }
                         break;
                 }
diff --git a/src/Communication/generated/runtime/Serialization/JsonSerializer.cs b/src/Communication/generated/runtime/Serialization/JsonSerializer.cs
index dc6faf5c14..f35619e8e8 100644
--- a/src/Communication/generated/runtime/Serialization/JsonSerializer.cs
+++ b/src/Communication/generated/runtime/Serialization/JsonSerializer.cs
@@ -312,7 +312,7 @@ namespace Microsoft.Azure.PowerShell.Cmdlets.Communication.Runtime.Json
                     default: return ReadArray((IEnumerable)value);
                 }
             }
-            else if (value is IEnumerable)
+            else if (value is IEnumerable iEnumerable)
             {
                 if (type.IsList && type.ElementType != null)
                 {
@@ -330,7 +330,7 @@ namespace Microsoft.Azure.PowerShell.Cmdlets.Communication.Runtime.Json
                     }
                 }
 
-                return ReadArray((IEnumerable)value);
+                return ReadArray(iEnumerable);
             }
             else
             {
diff --git a/src/Compute/Compute.Test/ScenarioTests/RunnerTests.cs b/src/Compute/Compute.Test/ScenarioTests/RunnerTests.cs
index d6c14949ce..57ed80083e 100644
--- a/src/Compute/Compute.Test/ScenarioTests/RunnerTests.cs
+++ b/src/Compute/Compute.Test/ScenarioTests/RunnerTests.cs
@@ -67,7 +67,7 @@ namespace Microsoft.Azure.Commands.Compute.Test.ScenarioTests
             {
                 if (entry.Key != "AADClientId" && entry.Key != "ApplicationSecret")
                 {
-                    str += string.Format("{0}={1};", entry.Key, entry.Value);
+                    str += $"{entry.Key}={entry.Value};";
                 }
             }
 
diff --git a/src/Compute/Compute/Common/DiagnosticsHelper.cs b/src/Compute/Compute/Common/DiagnosticsHelper.cs
index d3533268e3..1352c010f0 100644
--- a/src/Compute/Compute/Common/DiagnosticsHelper.cs
+++ b/src/Compute/Compute/Common/DiagnosticsHelper.cs
@@ -290,8 +290,7 @@ namespace Microsoft.Azure.Commands.Compute.Common
             }
             else
             {
-                var resourceIdValue = metricsObject[MetricsResourceIdAttr] as JValue;
-                if (resourceIdValue != null && !resourceIdValue.Value.Equals(resourceId))
+                if (metricsObject[MetricsResourceIdAttr] is JValue resourceIdValue && !resourceIdValue.Value.Equals(resourceId))
                 {
                     cmdlet.WriteWarning(Properties.Resources.DiagnosticsExtensionMetricsResourceIdNotMatch);
                 }
@@ -616,7 +615,7 @@ namespace Microsoft.Azure.Commands.Compute.Common
             {
                 // We can get the value from PrivateConfig
             }
-            else if (defaultContext != null && defaultContext.Environment != null)
+            else if (defaultContext?.Environment != null)
             {
                 // Get value from default azure environment. Default to use https
                 Uri blobEndpoint = defaultContext.Environment.GetStorageBlobEndpoint(storageAccountName);
diff --git a/src/Compute/Compute/Common/Utils.cs b/src/Compute/Compute/Common/Utils.cs
index 4708771c42..3c08eb7055 100644
--- a/src/Compute/Compute/Common/Utils.cs
+++ b/src/Compute/Compute/Common/Utils.cs
@@ -136,14 +136,14 @@ namespace Microsoft.Azure.Commands.Compute.Common
             }
 
             var sizeFound = ValidSizesForAccelNet.Where(x => x.ToLower().Equals(size.ToLower()));
-            if (sizeFound == null || sizeFound.Count() <= 0)
+            if (sizeFound == null || !sizeFound.Any())
             {
                 return false;
             }
 
             var fourCoreSize = FourCoreSizesForAccelNet.Where(x => x.ToLower().Equals(size.ToLower()));
 
-            if (fourCoreSize == null || fourCoreSize.Count() == 0)
+            if (fourCoreSize == null || !fourCoreSize.Any())
             {
                 var locationToUse = String.IsNullOrWhiteSpace(location)? defaultLocation : location;
                 //Check if the vm has enough cores
diff --git a/src/Compute/Compute/Disk/RemoveDiskAccessCommand.cs b/src/Compute/Compute/Disk/RemoveDiskAccessCommand.cs
index d5bbe3a852..216cc45600 100644
--- a/src/Compute/Compute/Disk/RemoveDiskAccessCommand.cs
+++ b/src/Compute/Compute/Disk/RemoveDiskAccessCommand.cs
@@ -91,7 +91,7 @@ namespace Microsoft.Azure.Commands.Compute.Automation
                         EndTime = DateTime.Now
                     };
 
-                    if (result != null && result.Request != null && result.Request.RequestUri != null)
+                    if (result?.Request != null && result.Request.RequestUri != null)
                     {
                         output.Name = GetOperationIdFromUrlString(result.Request.RequestUri.ToString());
                     }
diff --git a/src/Compute/Compute/Extension/AEM/AEMHelper.cs b/src/Compute/Compute/Extension/AEM/AEMHelper.cs
index 06315a24a9..d5f4b03753 100644
--- a/src/Compute/Compute/Extension/AEM/AEMHelper.cs
+++ b/src/Compute/Compute/Extension/AEM/AEMHelper.cs
@@ -759,7 +759,7 @@ namespace Microsoft.Azure.Commands.Compute.Extension.AEM
                 var set = Properties["cfg"].FirstOrDefault((tok) =>
                 {
                     JValue jval = (tok["key"] as JValue);
-                    if (jval != null && jval.Value != null)
+                    if (jval?.Value != null)
                     {
                         return jval.Value.Equals(PropertyName);
                     }
@@ -823,7 +823,7 @@ namespace Microsoft.Azure.Commands.Compute.Extension.AEM
             var set = Properties["cfg"].FirstOrDefault((tok) =>
             {
                 JValue jvaltok = (tok["key"] as JValue);
-                if (jvaltok != null && jvaltok.Value != null)
+                if (jvaltok?.Value != null)
                 {
                     return jvaltok.Value.Equals(PropertyName);
                 }
@@ -837,7 +837,7 @@ namespace Microsoft.Azure.Commands.Compute.Extension.AEM
             }
 
             JValue jval = (set["value"] as JValue);
-            if (jval != null && jval.Value != null)
+            if (jval?.Value != null)
             {
                 result = (set["value"] as JValue).Value<T>();
                 return true;
@@ -932,7 +932,7 @@ namespace Microsoft.Azure.Commands.Compute.Extension.AEM
                         query.FilterString = FilterString;
                         var results = table.ExecuteQuerySegmentedAsync(query, token: null)
                             .ConfigureAwait(false).GetAwaiter().GetResult();
-                        if (results.Count() > 0)
+                        if (results.Any())
                         {
                             tableExists = true;
                             break;
@@ -1001,7 +1001,7 @@ namespace Microsoft.Azure.Commands.Compute.Extension.AEM
                     {
                         var results = perfCounterTable.ExecuteQuerySegmentedAsync(new TableQuery() { FilterString = query }, token: null)
                             .ConfigureAwait(false).GetAwaiter().GetResult();
-                        if (results.Count() > 0)
+                        if (results.Any())
                         {
                             tableExists &= true;
                             break;
diff --git a/src/Compute/Compute/Extension/AEM/TestAzureRmVMAEMExtension.cs b/src/Compute/Compute/Extension/AEM/TestAzureRmVMAEMExtension.cs
index 2979b84160..b07e4b7fe8 100644
--- a/src/Compute/Compute/Extension/AEM/TestAzureRmVMAEMExtension.cs
+++ b/src/Compute/Compute/Extension/AEM/TestAzureRmVMAEMExtension.cs
@@ -652,7 +652,7 @@ namespace Microsoft.Azure.Commands.Compute
 
                     var extStatuses = AEMHelper.GetAEMExtensionStatus(selectedVM, selectedVMStatus, this.OSType);
                     InstanceViewStatus aemStatus = null;
-                    if (extStatuses != null && extStatuses.Statuses != null)
+                    if (extStatuses?.Statuses != null)
                     {
                         aemStatus = extStatuses.Statuses.FirstOrDefault(stat => Regex.Match(stat.Message, "deploymentId=(\\S*) roleInstance=(\\S*)").Success);
                     }
diff --git a/src/Compute/Compute/Extension/AzureDiskEncryption/DisableAzureDiskEncryption.cs b/src/Compute/Compute/Extension/AzureDiskEncryption/DisableAzureDiskEncryption.cs
index dee126c835..0127a70256 100644
--- a/src/Compute/Compute/Extension/AzureDiskEncryption/DisableAzureDiskEncryption.cs
+++ b/src/Compute/Compute/Extension/AzureDiskEncryption/DisableAzureDiskEncryption.cs
@@ -126,8 +126,7 @@ namespace Microsoft.Azure.Commands.Compute.Extension.AzureDiskEncryption
 
         private bool IsVmModelEncryptionSet(VirtualMachine vm)
         {
-            return (vm != null &&
-                vm.StorageProfile != null &&
+            return (vm?.StorageProfile != null &&
                 vm.StorageProfile.OsDisk != null &&
                 vm.StorageProfile.OsDisk.EncryptionSettings != null);
         }
diff --git a/src/Compute/Compute/Extension/AzureDiskEncryption/GetAzureDiskEncryptionStatus.cs b/src/Compute/Compute/Extension/AzureDiskEncryption/GetAzureDiskEncryptionStatus.cs
index 86c32444ea..3dd35d4b5f 100644
--- a/src/Compute/Compute/Extension/AzureDiskEncryption/GetAzureDiskEncryptionStatus.cs
+++ b/src/Compute/Compute/Extension/AzureDiskEncryption/GetAzureDiskEncryptionStatus.cs
@@ -174,8 +174,7 @@ namespace Microsoft.Azure.Commands.Compute.Extension.AzureDiskEncryption
                 case OperatingSystemTypes.Windows:
                     DiskEncryptionSettings osEncryptionSettings = GetOsVolumeEncryptionSettingsDualPass(vmParameters);
 
-                    if (osEncryptionSettings != null
-                        && osEncryptionSettings.DiskEncryptionKey != null
+                    if (osEncryptionSettings?.DiskEncryptionKey != null
                         && !string.IsNullOrEmpty(osEncryptionSettings.DiskEncryptionKey.SecretUrl)
                         && osEncryptionSettings.Enabled == true)
                     {
@@ -492,7 +491,7 @@ namespace Microsoft.Azure.Commands.Compute.Extension.AzureDiskEncryption
             }
             foreach (InstanceViewStatus ivs in vm.InstanceView.Statuses)
             {
-                if (ivs != null && ivs.Code != null && ivs.Code.StartsWith("PowerState/"))
+                if (ivs?.Code != null && ivs.Code.StartsWith("PowerState/"))
                     lastCode = ivs.Code;
             }
 
diff --git a/src/Compute/Compute/Extension/AzureDiskEncryption/SetAzureDiskEncryptionExtension.cs b/src/Compute/Compute/Extension/AzureDiskEncryption/SetAzureDiskEncryptionExtension.cs
index 2548b4a247..0397c6f5d7 100644
--- a/src/Compute/Compute/Extension/AzureDiskEncryption/SetAzureDiskEncryptionExtension.cs
+++ b/src/Compute/Compute/Extension/AzureDiskEncryption/SetAzureDiskEncryptionExtension.cs
@@ -539,11 +539,10 @@ namespace Microsoft.Azure.Commands.Compute.Extension.AzureDiskEncryption
                 vmConfig.ResourceGroupName = ResourceGroupName;
                 vmConfig.VMName = VMName;
                 vmConfig.VirtualMachineExtensionType = VirtualMachineExtensionType;
-                string tag = string.Format("{0}{1}", "AzureEnc", Guid.NewGuid().ToString());
+                string tag = $"{"AzureEnc"}{Guid.NewGuid().ToString()}";
                 // this would create shapshot only for Linux box. and we should wait for the snapshot found.
                 azureBackupExtensionUtil.CreateSnapshotForDisks(vmConfig, tag, this);
-                WriteWarning(string.Format("one snapshot for disks are created with tag,{0}, you can use {1}-{2} to remove it.", tag, VerbsCommon.Remove,
-    ProfileNouns.AzureVMBackup));
+                WriteWarning($"one snapshot for disks are created with tag,{tag}, you can use {VerbsCommon.Remove}-{ProfileNouns.AzureVMBackup} to remove it.");
             }
             catch (AzureVMBackupException e)
             {
diff --git a/src/Compute/Compute/Extension/AzureVMBackup/AzureVMBackupExtensionUtil.cs b/src/Compute/Compute/Extension/AzureVMBackup/AzureVMBackupExtensionUtil.cs
index cf931b993f..24ea9c2a47 100644
--- a/src/Compute/Compute/Extension/AzureVMBackup/AzureVMBackupExtensionUtil.cs
+++ b/src/Compute/Compute/Extension/AzureVMBackup/AzureVMBackupExtensionUtil.cs
@@ -130,7 +130,7 @@ namespace Microsoft.Azure.Commands.Compute.Extension.AzureVMBackup
             var result = matcher.Match(id);
             if (!result.Success || result.Groups == null || result.Groups.Count < 3)
             {
-                throw new InvalidOperationException(string.Format("Cannot find resource group name and storage account name from resource identity {0}", id));
+                throw new InvalidOperationException($"Cannot find resource group name and storage account name from resource identity {id}");
             }
 
             return result.Groups[2].Value;
diff --git a/src/Compute/Compute/Extension/DSC/ConfigurationParsingHelper.cs b/src/Compute/Compute/Extension/DSC/ConfigurationParsingHelper.cs
index 32c23e113a..8f0ca7c2be 100644
--- a/src/Compute/Compute/Extension/DSC/ConfigurationParsingHelper.cs
+++ b/src/Compute/Compute/Extension/DSC/ConfigurationParsingHelper.cs
@@ -47,8 +47,7 @@ namespace Microsoft.WindowsAzure.Commands.Common.Extensions.DSC.Publish
                 ast.CommandElements.Where(x => IsParameterName(x, parameterName)).OfType<CommandParameterAst>();
             foreach (var commandElementAst in commandElement)
             {
-                var arrayLiteralAst = commandElementAst.Argument as ArrayLiteralAst;
-                if (arrayLiteralAst != null)
+                if (commandElementAst.Argument is ArrayLiteralAst arrayLiteralAst)
                 {
                     parameters.AddRange(arrayLiteralAst.Elements.OfType<StringConstantExpressionAst>().Select(x => x.Value));
                 }
diff --git a/src/Compute/Compute/Extension/DSC/DscExtensionCmdletCommonBase.cs b/src/Compute/Compute/Extension/DSC/DscExtensionCmdletCommonBase.cs
index b8822536d8..9d4c2e8b3c 100644
--- a/src/Compute/Compute/Extension/DSC/DscExtensionCmdletCommonBase.cs
+++ b/src/Compute/Compute/Extension/DSC/DscExtensionCmdletCommonBase.cs
@@ -28,7 +28,7 @@ namespace Microsoft.Azure.Commands.Compute.Extension.DSC
             StorageCredentials credentials = null;
             var storageClient = GetStorageClient(cmdlet);
 
-            if (storageClient != null && storageClient.StorageAccounts != null)
+            if (storageClient?.StorageAccounts != null)
             {
                 var keys = storageClient.StorageAccounts.ListKeys(resourceGroupName, storageAccountName);
 
diff --git a/src/Compute/Compute/Extension/DSC/GetAzureVMDscExtensionStatusCommand.cs b/src/Compute/Compute/Extension/DSC/GetAzureVMDscExtensionStatusCommand.cs
index 3fd54e7ece..ffd1d11e8a 100644
--- a/src/Compute/Compute/Extension/DSC/GetAzureVMDscExtensionStatusCommand.cs
+++ b/src/Compute/Compute/Extension/DSC/GetAzureVMDscExtensionStatusCommand.cs
@@ -91,7 +91,7 @@ namespace Microsoft.Azure.Commands.Compute.Extension.DSC
             }
 
             var result = VirtualMachineExtensionClient.GetWithInstanceView(resourceGroup, virtualMachineName, Name);
-            if (result != null && result.Body != null)
+            if (result?.Body != null)
             {
                 WriteObject(GetDscExtensionStatusContext(result.Body, resourceGroup, virtualMachineName));
             }
diff --git a/src/Compute/Compute/Extension/SqlServer/GetAzureVMSqlServerExtensionCommand.cs b/src/Compute/Compute/Extension/SqlServer/GetAzureVMSqlServerExtensionCommand.cs
index 86a428898a..c31b782dd5 100644
--- a/src/Compute/Compute/Extension/SqlServer/GetAzureVMSqlServerExtensionCommand.cs
+++ b/src/Compute/Compute/Extension/SqlServer/GetAzureVMSqlServerExtensionCommand.cs
@@ -84,7 +84,7 @@ namespace Microsoft.Azure.Commands.Compute
                 VirtualMachine vm = ComputeClient.ComputeManagementClient.VirtualMachines.Get(this.ResourceGroupName, this.VMName);
                 if (vm != null)
                 {
-                    VirtualMachineExtension virtualMachineExtension = vm.Resources.Where(x => x.Publisher.Equals(VirtualMachineSqlServerExtensionContext.ExtensionPublishedNamespace)).FirstOrDefault();
+                    VirtualMachineExtension virtualMachineExtension = vm.Resources.FirstOrDefault(x => x.Publisher.Equals(VirtualMachineSqlServerExtensionContext.ExtensionPublishedNamespace));
                     if (virtualMachineExtension != null)
                     {
                         this.Name = virtualMachineExtension.Name;
diff --git a/src/Compute/Compute/Extension/SqlServer/SetAzureVMSqlServerExtensionCommand.cs b/src/Compute/Compute/Extension/SqlServer/SetAzureVMSqlServerExtensionCommand.cs
index 71997d4437..b1d25bf50a 100644
--- a/src/Compute/Compute/Extension/SqlServer/SetAzureVMSqlServerExtensionCommand.cs
+++ b/src/Compute/Compute/Extension/SqlServer/SetAzureVMSqlServerExtensionCommand.cs
@@ -106,9 +106,9 @@ namespace Microsoft.Azure.Commands.Compute
 
 
             VirtualMachine vm = ComputeClient.ComputeManagementClient.VirtualMachines.Get(this.ResourceGroupName, this.VMName);
-            if (vm != null && vm.Resources != null)
+            if (vm?.Resources != null)
             {
-                VirtualMachineExtension extension = vm.Resources.Where(x => x.Publisher.Equals(VirtualMachineSqlServerExtensionContext.ExtensionPublishedNamespace)).FirstOrDefault();
+                VirtualMachineExtension extension = vm.Resources.FirstOrDefault(x => x.Publisher.Equals(VirtualMachineSqlServerExtensionContext.ExtensionPublishedNamespace));
                 if (extension != null)
                 {
                     this.Name = extension.Name;
diff --git a/src/Compute/Compute/Extension/VmssDiskEncryption/DisableAzureVmssDiskEncryption.cs b/src/Compute/Compute/Extension/VmssDiskEncryption/DisableAzureVmssDiskEncryption.cs
index 618bf723d0..ec02d6b4fb 100644
--- a/src/Compute/Compute/Extension/VmssDiskEncryption/DisableAzureVmssDiskEncryption.cs
+++ b/src/Compute/Compute/Extension/VmssDiskEncryption/DisableAzureVmssDiskEncryption.cs
@@ -148,7 +148,7 @@ namespace Microsoft.Azure.Commands.Compute.Extension.AzureDiskEncryption
                     if (!extensionFound)
                     {
                         ThrowTerminatingError(new ErrorRecord(
-                            new ArgumentException(string.Format("Extension, {0},  is not installed in the VM Scale Set.", this.ExtensionName)),
+                            new ArgumentException($"Extension, {this.ExtensionName},  is not installed in the VM Scale Set."),
                             "InvalidArgument",
                             ErrorCategory.InvalidArgument,
                             null));
diff --git a/src/Compute/Compute/Extension/VmssDiskEncryption/GetAzureVmssDiskEncryptionStatus.cs b/src/Compute/Compute/Extension/VmssDiskEncryption/GetAzureVmssDiskEncryptionStatus.cs
index 422a84ec2c..a390e43587 100644
--- a/src/Compute/Compute/Extension/VmssDiskEncryption/GetAzureVmssDiskEncryptionStatus.cs
+++ b/src/Compute/Compute/Extension/VmssDiskEncryption/GetAzureVmssDiskEncryptionStatus.cs
@@ -186,7 +186,7 @@ namespace Microsoft.Azure.Commands.Compute.Extension.AzureDiskEncryption
                 {
                     if (psResult.EncryptionEnabled) break;
                     VirtualMachineScaleSetVMInstanceView vmiv = this.VirtualMachineScaleSetVMsClient.GetInstanceView(rgName, vmssName, pageItem.InstanceId);
-                    if (vmiv != null && vmiv.Disks != null)
+                    if (vmiv?.Disks != null)
                     {
                         foreach (DiskInstanceView div in vmiv.Disks)
                         {
@@ -194,7 +194,7 @@ namespace Microsoft.Azure.Commands.Compute.Extension.AzureDiskEncryption
                             bool isEncrypted = false;
                             foreach (InstanceViewStatus ivs in div.Statuses)
                             {
-                                if (ivs != null && ivs.Code != null && ivs.Code.StartsWith("EncryptionState"))
+                                if (ivs?.Code != null && ivs.Code.StartsWith("EncryptionState"))
                                 {
                                     if (!psResult.EncryptionEnabled)
                                     {
diff --git a/src/Compute/Compute/Extension/VmssDiskEncryption/GetAzureVmssVMDiskEncryptionStatus.cs b/src/Compute/Compute/Extension/VmssDiskEncryption/GetAzureVmssVMDiskEncryptionStatus.cs
index c4282b787d..8a1ee3b0c0 100644
--- a/src/Compute/Compute/Extension/VmssDiskEncryption/GetAzureVmssVMDiskEncryptionStatus.cs
+++ b/src/Compute/Compute/Extension/VmssDiskEncryption/GetAzureVmssVMDiskEncryptionStatus.cs
@@ -127,10 +127,10 @@ namespace Microsoft.Azure.Commands.Compute.Extension.AzureDiskEncryption
             }
 
             psResult.Extension = null;
-            psResult.DiskEncryptionStatus = string.Format("The Extension, {0}, is not installed.", this.ExtensionName);
+            psResult.DiskEncryptionStatus = $"The Extension, {this.ExtensionName}, is not installed.";
 
             // replace defaults with extension and status data for the instance if found 
-            if (vmssVMInstanceView != null && vmssVMInstanceView.Extensions != null)
+            if (vmssVMInstanceView?.Extensions != null)
             {
                 psResult.Extension = vmssVMInstanceView.Extensions.DefaultIfEmpty(null).FirstOrDefault(e => e.Name.Equals(this.ExtensionName));
                 if (psResult.Extension != null
diff --git a/src/Compute/Compute/Generated/ComputeAutomationBaseCmdlet.cs b/src/Compute/Compute/Generated/ComputeAutomationBaseCmdlet.cs
index 6e625c8873..126fe4e02d 100644
--- a/src/Compute/Compute/Generated/ComputeAutomationBaseCmdlet.cs
+++ b/src/Compute/Compute/Generated/ComputeAutomationBaseCmdlet.cs
@@ -272,8 +272,7 @@ namespace Microsoft.Azure.Commands.Compute.Automation
             {
                 Object childObject = property.GetValue(obj, null);
 
-                var isJObject = childObject as Newtonsoft.Json.Linq.JObject;
-                if (isJObject != null)
+                if (childObject is Newtonsoft.Json.Linq.JObject isJObject)
                 {
                     var objStringValue = Newtonsoft.Json.JsonConvert.SerializeObject(childObject);
 
@@ -292,8 +291,7 @@ namespace Microsoft.Azure.Commands.Compute.Automation
                 }
                 else
                 {
-                    var elem = childObject as IList;
-                    if (elem != null)
+                    if (childObject is IList elem)
                     {
                         if (elem.Count != 0)
                         {
@@ -326,8 +324,7 @@ namespace Microsoft.Azure.Commands.Compute.Automation
                         }
                         else
                         {
-                            var isDictionary = childObject as IDictionary;
-                            if (isDictionary != null)
+                            if (childObject is IDictionary isDictionary)
                             {
                                 tupleList.Add(MakeTuple(property.Name, Newtonsoft.Json.JsonConvert.SerializeObject(childObject), depth));
                                 max = Math.Max(max, depth * 2 + property.Name.Length);
diff --git a/src/Compute/Compute/Generated/DedicatedHost/DedicatedHostDeleteMethod.cs b/src/Compute/Compute/Generated/DedicatedHost/DedicatedHostDeleteMethod.cs
index 0cdea4acdd..9d1bb54efe 100644
--- a/src/Compute/Compute/Generated/DedicatedHost/DedicatedHostDeleteMethod.cs
+++ b/src/Compute/Compute/Generated/DedicatedHost/DedicatedHostDeleteMethod.cs
@@ -71,7 +71,7 @@ namespace Microsoft.Azure.Commands.Compute.Automation
                         EndTime = DateTime.Now
                     };
 
-                    if (result != null && result.Request != null && result.Request.RequestUri != null)
+                    if (result?.Request != null && result.Request.RequestUri != null)
                     {
                         output.Name = GetOperationIdFromUrlString(result.Request.RequestUri.ToString());
                     }
diff --git a/src/Compute/Compute/Generated/DedicatedHostGroup/DedicatedHostGroupDeleteMethod.cs b/src/Compute/Compute/Generated/DedicatedHostGroup/DedicatedHostGroupDeleteMethod.cs
index d537be2326..f4d06db053 100644
--- a/src/Compute/Compute/Generated/DedicatedHostGroup/DedicatedHostGroupDeleteMethod.cs
+++ b/src/Compute/Compute/Generated/DedicatedHostGroup/DedicatedHostGroupDeleteMethod.cs
@@ -67,7 +67,7 @@ namespace Microsoft.Azure.Commands.Compute.Automation
                         EndTime = DateTime.Now
                     };
 
-                    if (result != null && result.Request != null && result.Request.RequestUri != null)
+                    if (result?.Request != null && result.Request.RequestUri != null)
                     {
                         output.Name = GetOperationIdFromUrlString(result.Request.RequestUri.ToString());
                     }
diff --git a/src/Compute/Compute/Generated/Disk/DiskDeleteMethod.cs b/src/Compute/Compute/Generated/Disk/DiskDeleteMethod.cs
index 37e335cb2e..47848534f1 100644
--- a/src/Compute/Compute/Generated/Disk/DiskDeleteMethod.cs
+++ b/src/Compute/Compute/Generated/Disk/DiskDeleteMethod.cs
@@ -56,7 +56,7 @@ namespace Microsoft.Azure.Commands.Compute.Automation
                         EndTime = DateTime.Now
                     };
 
-                    if (result != null && result.Request != null && result.Request.RequestUri != null)
+                    if (result?.Request != null && result.Request.RequestUri != null)
                     {
                         output.Name = GetOperationIdFromUrlString(result.Request.RequestUri.ToString());
                     }
diff --git a/src/Compute/Compute/Generated/Disk/DiskRevokeAccessMethod.cs b/src/Compute/Compute/Generated/Disk/DiskRevokeAccessMethod.cs
index 2b0f95aaa9..c70fbe2466 100644
--- a/src/Compute/Compute/Generated/Disk/DiskRevokeAccessMethod.cs
+++ b/src/Compute/Compute/Generated/Disk/DiskRevokeAccessMethod.cs
@@ -53,7 +53,7 @@ namespace Microsoft.Azure.Commands.Compute.Automation
                         EndTime = DateTime.Now
                     };
 
-                    if (result != null && result.Request != null && result.Request.RequestUri != null)
+                    if (result?.Request != null && result.Request.RequestUri != null)
                     {
                         output.Name = GetOperationIdFromUrlString(result.Request.RequestUri.ToString());
                     }
diff --git a/src/Compute/Compute/Generated/DiskEncryptionSet/DiskEncryptionSetDeleteMethod.cs b/src/Compute/Compute/Generated/DiskEncryptionSet/DiskEncryptionSetDeleteMethod.cs
index 4f007ca6cf..42e507992c 100644
--- a/src/Compute/Compute/Generated/DiskEncryptionSet/DiskEncryptionSetDeleteMethod.cs
+++ b/src/Compute/Compute/Generated/DiskEncryptionSet/DiskEncryptionSetDeleteMethod.cs
@@ -71,7 +71,7 @@ namespace Microsoft.Azure.Commands.Compute.Automation
                         EndTime = DateTime.Now
                     };
 
-                    if (result != null && result.Request != null && result.Request.RequestUri != null)
+                    if (result?.Request != null && result.Request.RequestUri != null)
                     {
                         output.Name = GetOperationIdFromUrlString(result.Request.RequestUri.ToString());
                     }
diff --git a/src/Compute/Compute/Generated/Gallery/GalleryDeleteMethod.cs b/src/Compute/Compute/Generated/Gallery/GalleryDeleteMethod.cs
index 212f8500e9..ef6eb6ca20 100644
--- a/src/Compute/Compute/Generated/Gallery/GalleryDeleteMethod.cs
+++ b/src/Compute/Compute/Generated/Gallery/GalleryDeleteMethod.cs
@@ -71,7 +71,7 @@ namespace Microsoft.Azure.Commands.Compute.Automation
                         EndTime = DateTime.Now
                     };
 
-                    if (result != null && result.Request != null && result.Request.RequestUri != null)
+                    if (result?.Request != null && result.Request.RequestUri != null)
                     {
                         output.Name = GetOperationIdFromUrlString(result.Request.RequestUri.ToString());
                     }
diff --git a/src/Compute/Compute/Generated/GalleryImage/GalleryImageDeleteMethod.cs b/src/Compute/Compute/Generated/GalleryImage/GalleryImageDeleteMethod.cs
index 674ae65fdb..2cd1dd9e36 100644
--- a/src/Compute/Compute/Generated/GalleryImage/GalleryImageDeleteMethod.cs
+++ b/src/Compute/Compute/Generated/GalleryImage/GalleryImageDeleteMethod.cs
@@ -75,7 +75,7 @@ namespace Microsoft.Azure.Commands.Compute.Automation
                         EndTime = DateTime.Now
                     };
 
-                    if (result != null && result.Request != null && result.Request.RequestUri != null)
+                    if (result?.Request != null && result.Request.RequestUri != null)
                     {
                         output.Name = GetOperationIdFromUrlString(result.Request.RequestUri.ToString());
                     }
diff --git a/src/Compute/Compute/Generated/GalleryImageVersion/GalleryImageVersionDeleteMethod.cs b/src/Compute/Compute/Generated/GalleryImageVersion/GalleryImageVersionDeleteMethod.cs
index fa753e9e30..3561a3ba76 100644
--- a/src/Compute/Compute/Generated/GalleryImageVersion/GalleryImageVersionDeleteMethod.cs
+++ b/src/Compute/Compute/Generated/GalleryImageVersion/GalleryImageVersionDeleteMethod.cs
@@ -79,7 +79,7 @@ namespace Microsoft.Azure.Commands.Compute.Automation
                         EndTime = DateTime.Now
                     };
 
-                    if (result != null && result.Request != null && result.Request.RequestUri != null)
+                    if (result?.Request != null && result.Request.RequestUri != null)
                     {
                         output.Name = GetOperationIdFromUrlString(result.Request.RequestUri.ToString());
                     }
diff --git a/src/Compute/Compute/Generated/Image/ImageDeleteMethod.cs b/src/Compute/Compute/Generated/Image/ImageDeleteMethod.cs
index e8a256e205..d0492cd961 100644
--- a/src/Compute/Compute/Generated/Image/ImageDeleteMethod.cs
+++ b/src/Compute/Compute/Generated/Image/ImageDeleteMethod.cs
@@ -56,7 +56,7 @@ namespace Microsoft.Azure.Commands.Compute.Automation
                         EndTime = DateTime.Now
                     };
 
-                    if (result != null && result.Request != null && result.Request.RequestUri != null)
+                    if (result?.Request != null && result.Request.RequestUri != null)
                     {
                         output.Name = GetOperationIdFromUrlString(result.Request.RequestUri.ToString());
                     }
diff --git a/src/Compute/Compute/Generated/ProximityPlacementGroup/ProximityPlacementGroupDeleteMethod.cs b/src/Compute/Compute/Generated/ProximityPlacementGroup/ProximityPlacementGroupDeleteMethod.cs
index b71b8a39fe..dc800649bb 100644
--- a/src/Compute/Compute/Generated/ProximityPlacementGroup/ProximityPlacementGroupDeleteMethod.cs
+++ b/src/Compute/Compute/Generated/ProximityPlacementGroup/ProximityPlacementGroupDeleteMethod.cs
@@ -70,7 +70,7 @@ namespace Microsoft.Azure.Commands.Compute.Automation
                         EndTime = DateTime.Now
                     };
 
-                    if (result != null && result.Request != null && result.Request.RequestUri != null)
+                    if (result?.Request != null && result.Request.RequestUri != null)
                     {
                         output.Name = GetOperationIdFromUrlString(result.Request.RequestUri.ToString());
                     }
diff --git a/src/Compute/Compute/Generated/ResourceSku/ResourceSkuListMethod.cs b/src/Compute/Compute/Generated/ResourceSku/ResourceSkuListMethod.cs
index 14b44c6af4..8397978a9f 100644
--- a/src/Compute/Compute/Generated/ResourceSku/ResourceSkuListMethod.cs
+++ b/src/Compute/Compute/Generated/ResourceSku/ResourceSkuListMethod.cs
@@ -52,7 +52,7 @@ namespace Microsoft.Azure.Commands.Compute.Automation
                 Microsoft.Rest.Azure.IPage<ResourceSku> result;
                 if (this.IsParameterBound(c => c.Location))
                 {
-                    string filter = String.Format("location eq '{0}'", this.Location);
+                    string filter = $"location eq '{this.Location}'";
                     result = ResourceSkusClient.List(filter);
                 }
                 else
diff --git a/src/Compute/Compute/Generated/Snapshot/SnapshotCreateOrUpdateMethod.cs b/src/Compute/Compute/Generated/Snapshot/SnapshotCreateOrUpdateMethod.cs
index 1d0586d361..b46728f850 100644
--- a/src/Compute/Compute/Generated/Snapshot/SnapshotCreateOrUpdateMethod.cs
+++ b/src/Compute/Compute/Generated/Snapshot/SnapshotCreateOrUpdateMethod.cs
@@ -53,7 +53,7 @@ namespace Microsoft.Azure.Commands.Compute.Automation
                 
                 if (existingResource != null)
                 {
-                    throw new Exception(string.Format("A Snapshot with name '{0}' in resource group '{1}' already exists. Please use Update-AzSnapshot to update an existing Snapshot.", this.SnapshotName, this.ResourceGroupName));
+                    throw new Exception($"A Snapshot with name '{this.SnapshotName}' in resource group '{this.ResourceGroupName}' already exists. Please use Update-AzSnapshot to update an existing Snapshot.");
                 }
 
                 if (ShouldProcess(this.SnapshotName, VerbsCommon.New))
diff --git a/src/Compute/Compute/Generated/Snapshot/SnapshotDeleteMethod.cs b/src/Compute/Compute/Generated/Snapshot/SnapshotDeleteMethod.cs
index 1239a6e9ba..a31b629da6 100644
--- a/src/Compute/Compute/Generated/Snapshot/SnapshotDeleteMethod.cs
+++ b/src/Compute/Compute/Generated/Snapshot/SnapshotDeleteMethod.cs
@@ -56,7 +56,7 @@ namespace Microsoft.Azure.Commands.Compute.Automation
                         EndTime = DateTime.Now
                     };
 
-                    if (result != null && result.Request != null && result.Request.RequestUri != null)
+                    if (result?.Request != null && result.Request.RequestUri != null)
                     {
                         output.Name = GetOperationIdFromUrlString(result.Request.RequestUri.ToString());
                     }
diff --git a/src/Compute/Compute/Generated/Snapshot/SnapshotRevokeAccessMethod.cs b/src/Compute/Compute/Generated/Snapshot/SnapshotRevokeAccessMethod.cs
index d72a94150f..e24bf70b60 100644
--- a/src/Compute/Compute/Generated/Snapshot/SnapshotRevokeAccessMethod.cs
+++ b/src/Compute/Compute/Generated/Snapshot/SnapshotRevokeAccessMethod.cs
@@ -53,7 +53,7 @@ namespace Microsoft.Azure.Commands.Compute.Automation
                         EndTime = DateTime.Now
                     };
 
-                    if (result != null && result.Request != null && result.Request.RequestUri != null)
+                    if (result?.Request != null && result.Request.RequestUri != null)
                     {
                         output.Name = GetOperationIdFromUrlString(result.Request.RequestUri.ToString());
                     }
diff --git a/src/Compute/Compute/Generated/VirtualMachine/VirtualMachineConvertToManagedDisksMethod.cs b/src/Compute/Compute/Generated/VirtualMachine/VirtualMachineConvertToManagedDisksMethod.cs
index e941a58631..080d35ea20 100644
--- a/src/Compute/Compute/Generated/VirtualMachine/VirtualMachineConvertToManagedDisksMethod.cs
+++ b/src/Compute/Compute/Generated/VirtualMachine/VirtualMachineConvertToManagedDisksMethod.cs
@@ -53,7 +53,7 @@ namespace Microsoft.Azure.Commands.Compute.Automation
                         EndTime = DateTime.Now
                     };
 
-                    if (result != null && result.Request != null && result.Request.RequestUri != null)
+                    if (result?.Request != null && result.Request.RequestUri != null)
                     {
                         output.Name = GetOperationIdFromUrlString(result.Request.RequestUri.ToString());
                     }
diff --git a/src/Compute/Compute/Generated/VirtualMachine/VirtualMachineReimageMethod.cs b/src/Compute/Compute/Generated/VirtualMachine/VirtualMachineReimageMethod.cs
index b5c435dedb..fc94ba195a 100644
--- a/src/Compute/Compute/Generated/VirtualMachine/VirtualMachineReimageMethod.cs
+++ b/src/Compute/Compute/Generated/VirtualMachine/VirtualMachineReimageMethod.cs
@@ -54,7 +54,7 @@ namespace Microsoft.Azure.Commands.Compute.Automation
                         EndTime = DateTime.Now
                     };
 
-                    if (result != null && result.Request != null && result.Request.RequestUri != null)
+                    if (result?.Request != null && result.Request.RequestUri != null)
                     {
                         output.Name = GetOperationIdFromUrlString(result.Request.RequestUri.ToString());
                     }
diff --git a/src/Compute/Compute/Generated/VirtualMachineScaleSet/VirtualMachineScaleSetDeallocateMethod.cs b/src/Compute/Compute/Generated/VirtualMachineScaleSet/VirtualMachineScaleSetDeallocateMethod.cs
index e2bf7a2436..1b6144da3a 100644
--- a/src/Compute/Compute/Generated/VirtualMachineScaleSet/VirtualMachineScaleSetDeallocateMethod.cs
+++ b/src/Compute/Compute/Generated/VirtualMachineScaleSet/VirtualMachineScaleSetDeallocateMethod.cs
@@ -67,7 +67,7 @@ namespace Microsoft.Azure.Commands.Compute.Automation
                         EndTime = DateTime.Now
                     };
 
-                    if (result != null && result.Request != null && result.Request.RequestUri != null)
+                    if (result?.Request != null && result.Request.RequestUri != null)
                     {
                         output.Name = GetOperationIdFromUrlString(result.Request.RequestUri.ToString());
                     }
diff --git a/src/Compute/Compute/Generated/VirtualMachineScaleSet/VirtualMachineScaleSetDeleteInstancesMethod.cs b/src/Compute/Compute/Generated/VirtualMachineScaleSet/VirtualMachineScaleSetDeleteInstancesMethod.cs
index 18533f0dff..7a7fe87493 100644
--- a/src/Compute/Compute/Generated/VirtualMachineScaleSet/VirtualMachineScaleSetDeleteInstancesMethod.cs
+++ b/src/Compute/Compute/Generated/VirtualMachineScaleSet/VirtualMachineScaleSetDeleteInstancesMethod.cs
@@ -66,7 +66,7 @@ namespace Microsoft.Azure.Commands.Compute.Automation
                         EndTime = DateTime.Now
                     };
 
-                    if (result != null && result.Request != null && result.Request.RequestUri != null)
+                    if (result?.Request != null && result.Request.RequestUri != null)
                     {
                         output.Name = GetOperationIdFromUrlString(result.Request.RequestUri.ToString());
                     }
diff --git a/src/Compute/Compute/Generated/VirtualMachineScaleSet/VirtualMachineScaleSetReimageMethod.cs b/src/Compute/Compute/Generated/VirtualMachineScaleSet/VirtualMachineScaleSetReimageMethod.cs
index 8676f3a58b..a6b225f522 100644
--- a/src/Compute/Compute/Generated/VirtualMachineScaleSet/VirtualMachineScaleSetReimageMethod.cs
+++ b/src/Compute/Compute/Generated/VirtualMachineScaleSet/VirtualMachineScaleSetReimageMethod.cs
@@ -74,7 +74,7 @@ namespace Microsoft.Azure.Commands.Compute.Automation
                         EndTime = DateTime.Now
                     };
 
-                    if (result != null && result.Request != null && result.Request.RequestUri != null)
+                    if (result?.Request != null && result.Request.RequestUri != null)
                     {
                         output.Name = GetOperationIdFromUrlString(result.Request.RequestUri.ToString());
                     }
diff --git a/src/Compute/Compute/Generated/VirtualMachineScaleSet/VirtualMachineScaleSetRestartMethod.cs b/src/Compute/Compute/Generated/VirtualMachineScaleSet/VirtualMachineScaleSetRestartMethod.cs
index 8518cace6b..f562f1c61e 100644
--- a/src/Compute/Compute/Generated/VirtualMachineScaleSet/VirtualMachineScaleSetRestartMethod.cs
+++ b/src/Compute/Compute/Generated/VirtualMachineScaleSet/VirtualMachineScaleSetRestartMethod.cs
@@ -54,7 +54,7 @@ namespace Microsoft.Azure.Commands.Compute.Automation
                         EndTime = DateTime.Now
                     };
 
-                    if (result != null && result.Request != null && result.Request.RequestUri != null)
+                    if (result?.Request != null && result.Request.RequestUri != null)
                     {
                         output.Name = GetOperationIdFromUrlString(result.Request.RequestUri.ToString());
                     }
diff --git a/src/Compute/Compute/Generated/VirtualMachineScaleSet/VirtualMachineScaleSetSetOrchestrationServiceStateMethod.cs b/src/Compute/Compute/Generated/VirtualMachineScaleSet/VirtualMachineScaleSetSetOrchestrationServiceStateMethod.cs
index ed9ea31979..f7c419cdf5 100644
--- a/src/Compute/Compute/Generated/VirtualMachineScaleSet/VirtualMachineScaleSetSetOrchestrationServiceStateMethod.cs
+++ b/src/Compute/Compute/Generated/VirtualMachineScaleSet/VirtualMachineScaleSetSetOrchestrationServiceStateMethod.cs
@@ -72,7 +72,7 @@ namespace Microsoft.Azure.Commands.Compute.Automation
                         EndTime = DateTime.Now
                     };
 
-                    if (result != null && result.Request != null && result.Request.RequestUri != null)
+                    if (result?.Request != null && result.Request.RequestUri != null)
                     {
                         output.Name = GetOperationIdFromUrlString(result.Request.RequestUri.ToString());
                     }
diff --git a/src/Compute/Compute/Generated/VirtualMachineScaleSet/VirtualMachineScaleSetStartMethod.cs b/src/Compute/Compute/Generated/VirtualMachineScaleSet/VirtualMachineScaleSetStartMethod.cs
index 9bc8499efc..22f7321b44 100644
--- a/src/Compute/Compute/Generated/VirtualMachineScaleSet/VirtualMachineScaleSetStartMethod.cs
+++ b/src/Compute/Compute/Generated/VirtualMachineScaleSet/VirtualMachineScaleSetStartMethod.cs
@@ -54,7 +54,7 @@ namespace Microsoft.Azure.Commands.Compute.Automation
                         EndTime = DateTime.Now
                     };
 
-                    if (result != null && result.Request != null && result.Request.RequestUri != null)
+                    if (result?.Request != null && result.Request.RequestUri != null)
                     {
                         output.Name = GetOperationIdFromUrlString(result.Request.RequestUri.ToString());
                     }
diff --git a/src/Compute/Compute/Generated/VirtualMachineScaleSet/VirtualMachineScaleSetUpdateInstancesMethod.cs b/src/Compute/Compute/Generated/VirtualMachineScaleSet/VirtualMachineScaleSetUpdateInstancesMethod.cs
index 91a1d4860b..b83b45d16e 100644
--- a/src/Compute/Compute/Generated/VirtualMachineScaleSet/VirtualMachineScaleSetUpdateInstancesMethod.cs
+++ b/src/Compute/Compute/Generated/VirtualMachineScaleSet/VirtualMachineScaleSetUpdateInstancesMethod.cs
@@ -54,7 +54,7 @@ namespace Microsoft.Azure.Commands.Compute.Automation
                         EndTime = DateTime.Now
                     };
 
-                    if (result != null && result.Request != null && result.Request.RequestUri != null)
+                    if (result?.Request != null && result.Request.RequestUri != null)
                     {
                         output.Name = GetOperationIdFromUrlString(result.Request.RequestUri.ToString());
                     }
diff --git a/src/Compute/Compute/Generated/VirtualMachineScaleSetRollingUpgrade/VirtualMachineScaleSetRollingUpgradeCancelMethod.cs b/src/Compute/Compute/Generated/VirtualMachineScaleSetRollingUpgrade/VirtualMachineScaleSetRollingUpgradeCancelMethod.cs
index 25c21791fb..8f0060a647 100644
--- a/src/Compute/Compute/Generated/VirtualMachineScaleSetRollingUpgrade/VirtualMachineScaleSetRollingUpgradeCancelMethod.cs
+++ b/src/Compute/Compute/Generated/VirtualMachineScaleSetRollingUpgrade/VirtualMachineScaleSetRollingUpgradeCancelMethod.cs
@@ -56,7 +56,7 @@ namespace Microsoft.Azure.Commands.Compute.Automation
                         EndTime = DateTime.Now
                     };
 
-                    if (result != null && result.Request != null && result.Request.RequestUri != null)
+                    if (result?.Request != null && result.Request.RequestUri != null)
                     {
                         output.Name = GetOperationIdFromUrlString(result.Request.RequestUri.ToString());
                     }
diff --git a/src/Compute/Compute/Generated/VirtualMachineScaleSetRollingUpgrade/VirtualMachineScaleSetRollingUpgradeStartOSUpgradeMethod.cs b/src/Compute/Compute/Generated/VirtualMachineScaleSetRollingUpgrade/VirtualMachineScaleSetRollingUpgradeStartOSUpgradeMethod.cs
index cf4f69efff..c76810b52f 100644
--- a/src/Compute/Compute/Generated/VirtualMachineScaleSetRollingUpgrade/VirtualMachineScaleSetRollingUpgradeStartOSUpgradeMethod.cs
+++ b/src/Compute/Compute/Generated/VirtualMachineScaleSetRollingUpgrade/VirtualMachineScaleSetRollingUpgradeStartOSUpgradeMethod.cs
@@ -53,7 +53,7 @@ namespace Microsoft.Azure.Commands.Compute.Automation
                         EndTime = DateTime.Now
                     };
 
-                    if (result != null && result.Request != null && result.Request.RequestUri != null)
+                    if (result?.Request != null && result.Request.RequestUri != null)
                     {
                         output.Name = GetOperationIdFromUrlString(result.Request.RequestUri.ToString());
                     }
diff --git a/src/Compute/Compute/Generated/VirtualMachineScaleSetVM/VirtualMachineScaleSetVMReimageMethod.cs b/src/Compute/Compute/Generated/VirtualMachineScaleSetVM/VirtualMachineScaleSetVMReimageMethod.cs
index 40e0b9f034..42cda9c83c 100644
--- a/src/Compute/Compute/Generated/VirtualMachineScaleSetVM/VirtualMachineScaleSetVMReimageMethod.cs
+++ b/src/Compute/Compute/Generated/VirtualMachineScaleSetVM/VirtualMachineScaleSetVMReimageMethod.cs
@@ -75,7 +75,7 @@ namespace Microsoft.Azure.Commands.Compute.Automation
                         EndTime = DateTime.Now
                     };
 
-                    if (result != null && result.Request != null && result.Request.RequestUri != null)
+                    if (result?.Request != null && result.Request.RequestUri != null)
                     {
                         output.Name = GetOperationIdFromUrlString(result.Request.RequestUri.ToString());
                     }
diff --git a/src/Compute/Compute/Manual/RemoveAzureRmVmssVMDataDiskCommand.cs b/src/Compute/Compute/Manual/RemoveAzureRmVmssVMDataDiskCommand.cs
index 9f5dcca9ea..5953c0ff8c 100644
--- a/src/Compute/Compute/Manual/RemoveAzureRmVmssVMDataDiskCommand.cs
+++ b/src/Compute/Compute/Manual/RemoveAzureRmVmssVMDataDiskCommand.cs
@@ -43,7 +43,7 @@ namespace Microsoft.Azure.Commands.Compute.Automation
         {
             var storageProfile = this.VirtualMachineScaleSetVM.StorageProfile;
 
-            if (storageProfile != null && storageProfile.DataDisks != null)
+            if (storageProfile?.DataDisks != null)
             {
                 var disks = storageProfile.DataDisks.ToList();
                 disks.RemoveAll(d => d.Lun == this.Lun);
diff --git a/src/Compute/Compute/Manual/VirtualMachineScaleSetRollingUpgrade/VirtualMachineScaleSetRollingExtensionStartUpgrade.cs b/src/Compute/Compute/Manual/VirtualMachineScaleSetRollingUpgrade/VirtualMachineScaleSetRollingExtensionStartUpgrade.cs
index b305f6dafe..c77e92712f 100644
--- a/src/Compute/Compute/Manual/VirtualMachineScaleSetRollingUpgrade/VirtualMachineScaleSetRollingExtensionStartUpgrade.cs
+++ b/src/Compute/Compute/Manual/VirtualMachineScaleSetRollingUpgrade/VirtualMachineScaleSetRollingExtensionStartUpgrade.cs
@@ -90,7 +90,7 @@ namespace Microsoft.Azure.Commands.Compute.Automation
                     EndTime = DateTime.Now
                 };
 
-                if (result != null && result.Request != null && result.Request.RequestUri != null)
+                if (result?.Request != null && result.Request.RequestUri != null)
                 {
                     output.Name = GetOperationIdFromUrlString(result.Request.RequestUri.ToString());
                 }
diff --git a/src/Compute/Compute/Models/PSSyncOutputEvents.cs b/src/Compute/Compute/Models/PSSyncOutputEvents.cs
index 972b31072a..1531832bf3 100644
--- a/src/Compute/Compute/Models/PSSyncOutputEvents.cs
+++ b/src/Compute/Compute/Models/PSSyncOutputEvents.cs
@@ -108,7 +108,7 @@ namespace Microsoft.Azure.Commands.Compute.Models
         private void LogMessage(string format, params object[] parameters)
         {
             var message = String.Format(format, parameters);
-            var verboseMessage = String.Format("Write-Host '{0}'", message);
+            var verboseMessage = $"Write-Host '{message}'";
             using (var ps = System.Management.Automation.PowerShell.Create())
             {
                 ps.Runspace = runspace;
@@ -231,7 +231,7 @@ namespace Microsoft.Azure.Commands.Compute.Models
         private void LogDebug(string format, params object[] parameters)
         {
             var message = String.Format(format, parameters);
-            var debugMessage = String.Format("Write-Debug -Message '{0}'", message);
+            var debugMessage = $"Write-Debug -Message '{message}'";
             using (var ps = System.Management.Automation.PowerShell.Create())
             {
                 ps.Runspace = runspace;
diff --git a/src/Compute/Compute/Strategies/ComputeRp/VirtualMachineStrategy.cs b/src/Compute/Compute/Strategies/ComputeRp/VirtualMachineStrategy.cs
index e75fc7353d..992bb72743 100644
--- a/src/Compute/Compute/Strategies/ComputeRp/VirtualMachineStrategy.cs
+++ b/src/Compute/Compute/Strategies/ComputeRp/VirtualMachineStrategy.cs
@@ -34,7 +34,7 @@ namespace Microsoft.Azure.Commands.Compute.Strategies.ComputeRp
                 createOrUpdateAsync: (o, p) => o.CreateOrUpdateAsync(
                     p.ResourceGroupName, p.Name, p.Model, p.CancellationToken),
                 createTime: c =>
-                    c != null && c.OsProfile != null && c.OsProfile.WindowsConfiguration != null
+c?.OsProfile != null && c.OsProfile.WindowsConfiguration != null
                         ? 240
                         : 120);
 
diff --git a/src/Compute/Compute/Sync/Download/Downloader.cs b/src/Compute/Compute/Sync/Download/Downloader.cs
index 435ad3fafa..eba7365bc3 100644
--- a/src/Compute/Compute/Sync/Download/Downloader.cs
+++ b/src/Compute/Compute/Sync/Download/Downloader.cs
@@ -56,7 +56,7 @@ namespace Microsoft.WindowsAzure.Commands.Sync.Download
             {
                 if (File.Exists(parameters.LocalFilePath))
                 {
-                    var message = String.Format("File already exists, you can use Overwrite option to delete it:'{0}'", parameters.LocalFilePath);
+                    var message = $"File already exists, you can use Overwrite option to delete it:'{parameters.LocalFilePath}'";
                     throw new ArgumentException(message);
                 }
             }
@@ -74,7 +74,7 @@ namespace Microsoft.WindowsAzure.Commands.Sync.Download
             var bufferManager = BufferManager.CreateBufferManager(Int32.MaxValue, 20 * megaByte);
             var downloadStatus = new ProgressStatus(0, ranges.Sum(r => r.Length), new ComputeStats());
 
-            Trace.WriteLine(String.Format("Total Data:{0}", ranges.Sum(r => r.Length)));
+            Trace.WriteLine($"Total Data:{ranges.Sum(r => r.Length)}");
 
             Program.SyncOutput.WriteVerboseWithTimestamp("Downloading the blob: {0}", parameters.BlobUri.BlobName);
 
@@ -98,7 +98,7 @@ namespace Microsoft.WindowsAzure.Commands.Sync.Download
 
                                             lock (fileStreamLock)
                                             {
-                                                Trace.WriteLine(String.Format("Range:{0}", r));
+                                                Trace.WriteLine($"Range:{r}");
                                                 fileStream.Seek(r.StartIndex, SeekOrigin.Begin);
                                                 fileStream.Write(buffer, 0, (int)r.Length);
                                                 fileStream.Flush();
@@ -129,7 +129,7 @@ namespace Microsoft.WindowsAzure.Commands.Sync.Download
                 DriveInfo info = new DriveInfo(destination);
                 if (info.AvailableFreeSpace < blobLength)
                 {
-                    string message = String.Format("Insufficient disk space: Blob's size is {0}, however available space is {1}.", blobLength, info.AvailableFreeSpace);
+                    string message = $"Insufficient disk space: Blob's size is {blobLength}, however available space is {info.AvailableFreeSpace}.";
                     throw new ArgumentOutOfRangeException(message);
                 }
             }
diff --git a/src/Compute/Compute/Sync/Upload/BlobCreatorBase.cs b/src/Compute/Compute/Sync/Upload/BlobCreatorBase.cs
index 26cf0c737d..f98ba20ed2 100644
--- a/src/Compute/Compute/Sync/Upload/BlobCreatorBase.cs
+++ b/src/Compute/Compute/Sync/Upload/BlobCreatorBase.cs
@@ -100,7 +100,7 @@ namespace Microsoft.WindowsAzure.Commands.Sync.Upload
                 {
                     var lengthString = stream.Length.ToString("N0", CultureInfo.CurrentCulture);
                     var expectedLengthString = FourTeraByte.ToString("N0", CultureInfo.CurrentCulture);
-                    string message = String.Format("VHD size is too large ('{0}'), maximum allowed size is '{1}'.", lengthString, expectedLengthString);
+                    string message = $"VHD size is too large ('{lengthString}'), maximum allowed size is '{expectedLengthString}'.";
                     throw new InvalidOperationException(message);
                 }
             }
@@ -167,9 +167,9 @@ namespace Microsoft.WindowsAzure.Commands.Sync.Upload
         public static void AssertIfValidhVhd(FileInfo vhdFile)
         {
             var vhdValidationResults = VhdValidator.Validate(VhdValidationType.IsVhd, vhdFile.FullName);
-            if (vhdValidationResults.Count(r => r.ErrorCode != 0) != 0)
+            if (vhdValidationResults.Any(r => r.ErrorCode != 0))
             {
-                string message = String.Format("'{0}' is not a valid VHD file.", vhdFile.FullName);
+                string message = $"'{vhdFile.FullName}' is not a valid VHD file.";
                 throw new InvalidOperationException(message, vhdValidationResults[0].Error);
             }
         }
@@ -330,9 +330,7 @@ namespace Microsoft.WindowsAzure.Commands.Sync.Upload
 
             if (String.Compare(systemInformation.MachineName, Environment.MachineName, CultureInfo.InvariantCulture, CompareOptions.IgnoreCase) != 0)
             {
-                var message = String.Format("An upload is already in progress on machine {0} with process id {1}",
-                                            systemInformation.MachineName,
-                                            systemInformation.CsUploadProcessId);
+                var message = $"An upload is already in progress on machine {systemInformation.MachineName} with process id {systemInformation.CsUploadProcessId}";
 
                 throw new InvalidOperationException(message);
             }
@@ -350,50 +348,38 @@ namespace Microsoft.WindowsAzure.Commands.Sync.Upload
             var fileMetaDataMessages = new List<string>();
             if (blobFileMetaData.VhdSize != localFileMetaData.VhdSize)
             {
-                var message = String.Format("Logical size of VHD file in blob storage ({0}) and local VHD file ({1}) does not match ",
-                                            blobFileMetaData.VhdSize,
-                                            localFileMetaData.VhdSize);
+                var message = $"Logical size of VHD file in blob storage ({blobFileMetaData.VhdSize}) and local VHD file ({localFileMetaData.VhdSize}) does not match ";
                 fileMetaDataMessages.Add(message);
             }
 
             if (blobFileMetaData.Size != localFileMetaData.Size)
             {
-                var message = String.Format("Size of VHD file in blob storage ({0}) and local VHD file ({1}) does not match ",
-                                            blobFileMetaData.Size,
-                                            localFileMetaData.Size);
+                var message = $"Size of VHD file in blob storage ({blobFileMetaData.Size}) and local VHD file ({localFileMetaData.Size}) does not match ";
                 fileMetaDataMessages.Add(message);
             }
 
             if (!blobFileMetaData.MD5Hash.SequenceEqual(localFileMetaData.MD5Hash))
             {
-                var message = String.Format("MD5 hash of VHD file in blob storage ({0}) and local VHD file ({1}) does not match ",
-                                            blobFileMetaData.MD5Hash.ToString(","),
-                                            localFileMetaData.MD5Hash.ToString(","));
+                var message = $"MD5 hash of VHD file in blob storage ({blobFileMetaData.MD5Hash.ToString(",")}) and local VHD file ({localFileMetaData.MD5Hash.ToString(",")}) does not match ";
                 fileMetaDataMessages.Add(message);
             }
 
 
             if (DateTime.Compare(blobFileMetaData.LastModifiedDateUtc, localFileMetaData.LastModifiedDateUtc) != 0)
             {
-                var message = String.Format("Last modified date of VHD file in blob storage ({0}) and local VHD file ({1}) does not match ",
-                                            blobFileMetaData.LastModifiedDateUtc,
-                                            localFileMetaData.LastModifiedDateUtc);
+                var message = $"Last modified date of VHD file in blob storage ({blobFileMetaData.LastModifiedDateUtc}) and local VHD file ({localFileMetaData.LastModifiedDateUtc}) does not match ";
                 fileMetaDataMessages.Add(message);
             }
 
             if (blobFileMetaData.FileFullName != localFileMetaData.FileFullName)
             {
-                var message = String.Format("Full name of VHD file in blob storage ({0}) and local VHD file ({1}) does not match ",
-                                            blobFileMetaData.FileFullName,
-                                            localFileMetaData.FileFullName);
+                var message = $"Full name of VHD file in blob storage ({blobFileMetaData.FileFullName}) and local VHD file ({localFileMetaData.FileFullName}) does not match ";
                 fileMetaDataMessages.Add(message);
             }
 
             if (blobFileMetaData.CreatedDateUtc != localFileMetaData.CreatedDateUtc)
             {
-                var message = String.Format("Full name of VHD file in blob storage ({0}) and local VHD file ({1}) does not match ",
-                                            blobFileMetaData.CreatedDateUtc,
-                                            localFileMetaData.CreatedDateUtc);
+                var message = $"Full name of VHD file in blob storage ({blobFileMetaData.CreatedDateUtc}) and local VHD file ({localFileMetaData.CreatedDateUtc}) does not match ";
                 fileMetaDataMessages.Add(message);
             }
             return fileMetaDataMessages;
diff --git a/src/Compute/Compute/Sync/Upload/ExtensionMethods.cs b/src/Compute/Compute/Sync/Upload/ExtensionMethods.cs
index 6204d703dc..d2d6fde1df 100644
--- a/src/Compute/Compute/Sync/Upload/ExtensionMethods.cs
+++ b/src/Compute/Compute/Sync/Upload/ExtensionMethods.cs
@@ -112,7 +112,7 @@ namespace Microsoft.WindowsAzure.Commands.Sync.Upload
             var blobToUpload = listBlobItems.FirstOrDefault(b => b.Uri == blob.Uri);
             if (blobToUpload is CloudBlockBlob)
             {
-                var message = String.Format(" CsUpload is expecting a page blob, however a block blob was found: '{0}'.", blob.Uri);
+                var message = $" CsUpload is expecting a page blob, however a block blob was found: '{blob.Uri}'.";
                 throw new InvalidOperationException(message);
             }
             return blobToUpload != null;
@@ -124,7 +124,7 @@ namespace Microsoft.WindowsAzure.Commands.Sync.Upload
             var blobToUpload = listBlobItems.FirstOrDefault(b => b.Uri == blob.Uri);
             if (blobToUpload is CloudBlockBlob)
             {
-                var message = String.Format(" CsUpload is expecting a page blob, however a block blob was found: '{0}'.", blob.Uri);
+                var message = $" CsUpload is expecting a page blob, however a block blob was found: '{blob.Uri}'.";
                 throw new InvalidOperationException(message);
             }
             return blobToUpload != null;
@@ -187,7 +187,7 @@ namespace Microsoft.WindowsAzure.Commands.Sync.Upload
 
             if (result == null)
             {
-                var message = String.Format("There is no parent VHD file with with the id '{0}'", uniqueId);
+                var message = $"There is no parent VHD file with with the id '{uniqueId}'";
                 throw new InvalidOperationException(message);
             }
 
diff --git a/src/Compute/Compute/Sync/Upload/PatchingBlobCreator.cs b/src/Compute/Compute/Sync/Upload/PatchingBlobCreator.cs
index 694bb7124f..f360601f52 100644
--- a/src/Compute/Compute/Sync/Upload/PatchingBlobCreator.cs
+++ b/src/Compute/Compute/Sync/Upload/PatchingBlobCreator.cs
@@ -50,7 +50,7 @@ namespace Microsoft.WindowsAzure.Commands.Sync.Upload
 
             if (!baseBlob.Exists())
             {
-                throw new InvalidOperationException(String.Format("Base image to patch doesn't exist in blob storage: {0}", baseVhdBlobUri.Uri));
+                throw new InvalidOperationException($"Base image to patch doesn't exist in blob storage: {baseVhdBlobUri.Uri}");
             }
             var blobVhdFooter = baseBlob.GetVhdFooter();
 
@@ -69,9 +69,7 @@ namespace Microsoft.WindowsAzure.Commands.Sync.Upload
             var md5Hash = baseBlob.GetBlobMd5Hash();
             if (!md5Hash.SequenceEqual(fileMetaData.MD5Hash))
             {
-                var message = String.Format("Patching cannot proceed, MD5 hash of base image in blob storage ({0}) and base VHD file ({1}) does not match ",
-                                            baseBlob.Uri,
-                                            localBaseVhdPath);
+                var message = $"Patching cannot proceed, MD5 hash of base image in blob storage ({baseBlob.Uri}) and base VHD file ({localBaseVhdPath}) does not match ";
                 throw new InvalidOperationException(message);
             }
 
@@ -128,8 +126,7 @@ namespace Microsoft.WindowsAzure.Commands.Sync.Upload
                     else
                     {
                         throw new ApplicationException(
-                            string.Format("Cannot copy source '{0}' to destination '{1}', copy state is '{2}'", source.Uri,
-                                          destinationBlob.Uri, destinationBlob.CopyState));
+                            $"Cannot copy source '{source.Uri}' to destination '{destinationBlob.Uri}', copy state is '{destinationBlob.CopyState}'");
                     }
                     destinationBlob.FetchAttributesAsync().ConfigureAwait(false).GetAwaiter().GetResult();
                 }
@@ -152,10 +149,7 @@ namespace Microsoft.WindowsAzure.Commands.Sync.Upload
                 }
                 else
                 {
-                    var message = String.Format("Cannot find the local base image for '{0}' in neither of the locations '{1}', '{2}'.",
-                                                baseBlob.Uri,
-                                                localBaseVhdPath.AbsolutePath,
-                                                localBaseVhdPath.RelativePath);
+                    var message = $"Cannot find the local base image for '{baseBlob.Uri}' in neither of the locations '{localBaseVhdPath.AbsolutePath}', '{localBaseVhdPath.RelativePath}'.";
                     throw new InvalidOperationException(message);
                 }
             }
diff --git a/src/Compute/Compute/VhdManagement/Async/AsyncMachine.cs b/src/Compute/Compute/VhdManagement/Async/AsyncMachine.cs
index 1095a4a2a9..ef620e9006 100644
--- a/src/Compute/Compute/VhdManagement/Async/AsyncMachine.cs
+++ b/src/Compute/Compute/VhdManagement/Async/AsyncMachine.cs
@@ -821,7 +821,7 @@ namespace Microsoft.WindowsAzure.Commands.Tools.Common.General
                 IEnumerator<CompletionPort> enumerator = this.Enumerator;
 
                 // It should never happen that this callback is called for CompletionPort with single operation
-                if (enumerator != null && enumerator.Current != null && enumerator.Current.IsSingleOperation)
+                if (enumerator?.Current != null && enumerator.Current.IsSingleOperation)
                 {
                     throw new InvalidOperationException("CompletionPort.SingleOperation was used.");
                 }
diff --git a/src/Compute/Compute/VhdManagement/Model/AttributeHelper.cs b/src/Compute/Compute/VhdManagement/Model/AttributeHelper.cs
index 967992db0a..db7af59b87 100644
--- a/src/Compute/Compute/VhdManagement/Model/AttributeHelper.cs
+++ b/src/Compute/Compute/VhdManagement/Model/AttributeHelper.cs
@@ -30,9 +30,9 @@ namespace Microsoft.WindowsAzure.Commands.Tools.Vhd.Model
         public VhdEntityAttribute GetEntityAttribute()
         {
             var attributes = type.GetCustomAttributes(typeof(VhdEntityAttribute), false);
-            if (attributes.Count() == 0)
+            if (!attributes.Any())
             {
-                throw new InvalidOperationException(String.Format("Entity must have the attribute:{0}", typeof(VhdEntityAttribute).Name));
+                throw new InvalidOperationException($"Entity must have the attribute:{typeof(VhdEntityAttribute).Name}");
             }
             return (VhdEntityAttribute)attributes.ElementAt(0);
         }
@@ -58,8 +58,7 @@ namespace Microsoft.WindowsAzure.Commands.Tools.Vhd.Model
 
             var attributes = from p in type.GetProperties(BindingFlags.Instance | BindingFlags.Public)
                              let vhdPropertyAttributes = p.GetCustomAttributes(typeof(VhdPropertyAttribute), false)
-                             let exists = vhdPropertyAttributes.Count() > 0
-                             where p.Name == propertyName
+                             let exists = vhdPropertyAttributes.Any()                             where p.Name == propertyName
                              select (VhdPropertyAttribute)(vhdPropertyAttributes.ElementAt(0));
             return attributes.FirstOrDefault();
         }
@@ -85,8 +84,7 @@ namespace Microsoft.WindowsAzure.Commands.Tools.Vhd.Model
 
             var attributes = from p in type.GetProperties(BindingFlags.Instance | BindingFlags.Public)
                              let vhdPropertyAttributes = p.GetCustomAttributes(typeof(VhdPropertyAttribute), false)
-                             let exists = vhdPropertyAttributes.Count() > 0
-                             where p.Name == propertyName
+                             let exists = vhdPropertyAttributes.Any()                             where p.Name == propertyName
                              select (VhdPropertyAttribute)(vhdPropertyAttributes.ElementAt(0));
             return attributes.FirstOrDefault();
         }
diff --git a/src/Compute/Compute/VhdManagement/Model/DiskGeometry.cs b/src/Compute/Compute/VhdManagement/Model/DiskGeometry.cs
index 517b055ed6..0d7fefb8eb 100644
--- a/src/Compute/Compute/VhdManagement/Model/DiskGeometry.cs
+++ b/src/Compute/Compute/VhdManagement/Model/DiskGeometry.cs
@@ -92,7 +92,7 @@ namespace Microsoft.WindowsAzure.Commands.Tools.Vhd.Model
 
         public override string ToString()
         {
-            return String.Format("Cylinder:{0}, Heads:{1}, Sector:{2}", Cylinder, Heads, Sectors);
+            return $"Cylinder:{Cylinder}, Heads:{Heads}, Sector:{Sectors}";
         }
 
         public override bool Equals(object obj)
diff --git a/src/Compute/Compute/VhdManagement/Model/IndexRange.cs b/src/Compute/Compute/VhdManagement/Model/IndexRange.cs
index c1b6869a8d..54d469948c 100644
--- a/src/Compute/Compute/VhdManagement/Model/IndexRange.cs
+++ b/src/Compute/Compute/VhdManagement/Model/IndexRange.cs
@@ -197,13 +197,12 @@ namespace Microsoft.WindowsAzure.Commands.Tools.Vhd.Model
 
         public override string ToString()
         {
-            return String.Format("[{0},{1}]", StartIndex, EndIndex);
+            return $"[{StartIndex},{EndIndex}]";
         }
 
         public override bool Equals(object obj)
         {
-            var range = obj as IndexRange;
-            return range != null && comparer.Equals(this, range);
+            return obj is IndexRange range && comparer.Equals(this, range);
         }
 
         public override int GetHashCode()
diff --git a/src/Compute/Compute/VhdManagement/Model/Persistence/DiskTypeFactory.cs b/src/Compute/Compute/VhdManagement/Model/Persistence/DiskTypeFactory.cs
index 55b52edc1f..5f5eed8f2f 100644
--- a/src/Compute/Compute/VhdManagement/Model/Persistence/DiskTypeFactory.cs
+++ b/src/Compute/Compute/VhdManagement/Model/Persistence/DiskTypeFactory.cs
@@ -27,7 +27,7 @@ namespace Microsoft.WindowsAzure.Commands.Tools.Vhd.Model.Persistence
                 case 3: return DiskType.Dynamic;
                 case 4: return DiskType.Differencing;
                 default:
-                    throw new VhdParsingException(String.Format("Unsupported format: DiskType is {0}", diskType));
+                    throw new VhdParsingException($"Unsupported format: DiskType is {diskType}");
             }
         }
     }
diff --git a/src/Compute/Compute/VhdManagement/Model/Persistence/SectorFactory.cs b/src/Compute/Compute/VhdManagement/Model/Persistence/SectorFactory.cs
index f800a9b4b5..1b4371bc91 100644
--- a/src/Compute/Compute/VhdManagement/Model/Persistence/SectorFactory.cs
+++ b/src/Compute/Compute/VhdManagement/Model/Persistence/SectorFactory.cs
@@ -33,7 +33,7 @@ namespace Microsoft.WindowsAzure.Commands.Tools.Vhd.Model.Persistence
             long totalSectors = blockArg.SectorCount;
             if (sector > totalSectors)
             {
-                string message = String.Format("TotalSectors: {0}, Requested Sector:{1}", totalSectors, sector);
+                string message = $"TotalSectors: {totalSectors}, Requested Sector:{sector}";
                 throw new ArgumentOutOfRangeException("sector", message);
             }
             if (!blockFactory.HasData(block))
diff --git a/src/Compute/Compute/VhdManagement/Model/Persistence/VhdDataReader.cs b/src/Compute/Compute/VhdManagement/Model/Persistence/VhdDataReader.cs
index 421c8cf612..e840d76893 100644
--- a/src/Compute/Compute/VhdManagement/Model/Persistence/VhdDataReader.cs
+++ b/src/Compute/Compute/VhdManagement/Model/Persistence/VhdDataReader.cs
@@ -59,7 +59,7 @@ namespace Microsoft.WindowsAzure.Commands.Tools.Vhd.Model.Persistence
         {
             if (m_buffer != null && (numBytes < 0 || numBytes > m_buffer.Length))
             {
-                throw new ArgumentOutOfRangeException("numBytes", String.Format("Expected (0-16) however found: {0}", numBytes));
+                throw new ArgumentOutOfRangeException("numBytes", $"Expected (0-16) however found: {numBytes}");
             }
             int bytesRead = 0;
             int n = 0;
diff --git a/src/Compute/Compute/VhdManagement/Model/Persistence/VhdFooterFactory.cs b/src/Compute/Compute/VhdManagement/Model/Persistence/VhdFooterFactory.cs
index 57bbfee4ab..a3d2f5c6c6 100644
--- a/src/Compute/Compute/VhdManagement/Model/Persistence/VhdFooterFactory.cs
+++ b/src/Compute/Compute/VhdManagement/Model/Persistence/VhdFooterFactory.cs
@@ -471,7 +471,7 @@ namespace Microsoft.WindowsAzure.Commands.Tools.Vhd.Model.Persistence
             // be a multiple of 512 bytes also.
             var streamLength = dataReader.Size;
             if (streamLength == 0 || streamLength < VhdConstants.VHD_FOOTER_SIZE || streamLength % VhdConstants.VHD_PAGE_SIZE != 0)
-                throw new VhdParsingException(String.Format("Invalid file Size: {0}", streamLength));
+                throw new VhdParsingException($"Invalid file Size: {streamLength}");
         }
 
         private VhdFileFormatVersion ReadVhdFileFormatVersion(VhdPropertyAttribute attribute)
@@ -484,7 +484,7 @@ namespace Microsoft.WindowsAzure.Commands.Tools.Vhd.Model.Persistence
         {
             var formatVersion = new VhdFileFormatVersion(version);
             if (!formatVersion.IsSupported())
-                throw new VhdParsingException(String.Format("Invalid file format version: {0}", formatVersion.Data));
+                throw new VhdParsingException($"Invalid file format version: {formatVersion.Data}");
             return formatVersion;
         }
 
@@ -509,7 +509,7 @@ namespace Microsoft.WindowsAzure.Commands.Tools.Vhd.Model.Persistence
         {
             var vhdCookie = new VhdCookie(VhdCookieType.Footer, cookie);
             if (!vhdCookie.IsValid())
-                throw new VhdParsingException(String.Format("Invalid Vhd footer cookie:{0}", vhdCookie.StringData));
+                throw new VhdParsingException($"Invalid Vhd footer cookie:{vhdCookie.StringData}");
             return vhdCookie;
         }
 
diff --git a/src/Compute/Compute/VhdManagement/Model/Persistence/VhdHeaderFactory.cs b/src/Compute/Compute/VhdManagement/Model/Persistence/VhdHeaderFactory.cs
index 16b1267b7a..812353a4b4 100644
--- a/src/Compute/Compute/VhdManagement/Model/Persistence/VhdHeaderFactory.cs
+++ b/src/Compute/Compute/VhdManagement/Model/Persistence/VhdHeaderFactory.cs
@@ -390,7 +390,7 @@ namespace Microsoft.WindowsAzure.Commands.Tools.Vhd.Model.Persistence
             var cookie = dataReader.ReadBytes(headerOffset + attribute.Offset, attribute.Size);
             var vhdCookie = new VhdCookie(VhdCookieType.Header, cookie);
             if (!vhdCookie.IsValid())
-                throw new VhdParsingException(String.Format("unsupported format, Cookie:{0}", vhdCookie));
+                throw new VhdParsingException($"unsupported format, Cookie:{vhdCookie}");
             return vhdCookie;
         }
 
@@ -404,7 +404,7 @@ namespace Microsoft.WindowsAzure.Commands.Tools.Vhd.Model.Persistence
             var value = dataReader.EndReadBytes(result);
             var vhdCookie = new VhdCookie(VhdCookieType.Header, value);
             if (!vhdCookie.IsValid())
-                throw new VhdParsingException(String.Format("unsupported format, Cookie:{0}", vhdCookie));
+                throw new VhdParsingException($"unsupported format, Cookie:{vhdCookie}");
             return vhdCookie;
         }
 
diff --git a/src/Compute/Compute/VhdManagement/Model/Persistence/VhdParentLocatorFactory.cs b/src/Compute/Compute/VhdManagement/Model/Persistence/VhdParentLocatorFactory.cs
index 13d2bb7808..bb3203c4db 100644
--- a/src/Compute/Compute/VhdManagement/Model/Persistence/VhdParentLocatorFactory.cs
+++ b/src/Compute/Compute/VhdManagement/Model/Persistence/VhdParentLocatorFactory.cs
@@ -99,7 +99,7 @@ namespace Microsoft.WindowsAzure.Commands.Tools.Vhd.Model.Persistence
                     return String.Empty;
                 case PlatformCode.Wi2R:
                 case PlatformCode.Wi2K:
-                    throw new VhdParsingException(String.Format("Deprecated PlatformCode:{0}", locator.PlatformCode));
+                    throw new VhdParsingException($"Deprecated PlatformCode:{locator.PlatformCode}");
                 case PlatformCode.W2Ru:
                     //TODO: Add differencing disks path name, this is relative path
                     return Encoding.Unicode.GetString(fileLocator);
@@ -107,7 +107,7 @@ namespace Microsoft.WindowsAzure.Commands.Tools.Vhd.Model.Persistence
                     return Encoding.Unicode.GetString(fileLocator);
                 case PlatformCode.Mac:
                     //TODO: Mac OS alias stored as a blob?
-                    throw new NotImplementedException(String.Format("PlatformCode: {0}", locator.PlatformCode));
+                    throw new NotImplementedException($"PlatformCode: {locator.PlatformCode}");
                 case PlatformCode.MacX:
                     return Encoding.UTF8.GetString(fileLocator);
             }
diff --git a/src/Compute/Compute/VhdManagement/Model/VhdFile.cs b/src/Compute/Compute/VhdManagement/Model/VhdFile.cs
index 81b4acb7c4..7858e4decb 100644
--- a/src/Compute/Compute/VhdManagement/Model/VhdFile.cs
+++ b/src/Compute/Compute/VhdManagement/Model/VhdFile.cs
@@ -65,7 +65,7 @@ namespace Microsoft.WindowsAzure.Commands.Tools.Vhd.Model
                 case DiskType.Differencing:
                     return new DifferencingDiskBlockFactory(this);
                 default:
-                    throw new InvalidOperationException(String.Format("Unsupported DiskType:{0}", this.DiskType));
+                    throw new InvalidOperationException($"Unsupported DiskType:{this.DiskType}");
             }
         }
 
@@ -95,10 +95,7 @@ namespace Microsoft.WindowsAzure.Commands.Tools.Vhd.Model
                 {
                     this.reader.Close();
                 }
-                if (Parent != null)
-                {
-                    Parent.Dispose();
-                }
+                Parent?.Dispose();
                 disposed = true;
             }
         }
diff --git a/src/Compute/Compute/VhdManagement/Model/VhdTimeStamp.cs b/src/Compute/Compute/VhdManagement/Model/VhdTimeStamp.cs
index b3f7d1702a..a614d247f2 100644
--- a/src/Compute/Compute/VhdManagement/Model/VhdTimeStamp.cs
+++ b/src/Compute/Compute/VhdManagement/Model/VhdTimeStamp.cs
@@ -25,7 +25,7 @@ namespace Microsoft.WindowsAzure.Commands.Tools.Vhd.Model
         {
             if (dateTime < VhdBaseTime)
             {
-                var message = String.Format("DateTime must be after Base Vhd Time: {0}", VhdBaseTime);
+                var message = $"DateTime must be after Base Vhd Time: {VhdBaseTime}";
                 throw new ArgumentOutOfRangeException("dateTime", message);
             }
 
diff --git a/src/Compute/Compute/VirtualMachine/Config/RemoveAzureVMDataDiskCommand.cs b/src/Compute/Compute/VirtualMachine/Config/RemoveAzureVMDataDiskCommand.cs
index ed3e402705..c8f69cbb7b 100644
--- a/src/Compute/Compute/VirtualMachine/Config/RemoveAzureVMDataDiskCommand.cs
+++ b/src/Compute/Compute/VirtualMachine/Config/RemoveAzureVMDataDiskCommand.cs
@@ -48,7 +48,7 @@ namespace Microsoft.Azure.Commands.Compute
             {
                 var storageProfile = this.VM.StorageProfile;
 
-                if (storageProfile != null && storageProfile.DataDisks != null)
+                if (storageProfile?.DataDisks != null)
                 {
                     var disks = storageProfile.DataDisks.ToList();
                     var comp = StringComparison.OrdinalIgnoreCase;
diff --git a/src/Compute/Compute/VirtualMachine/Config/RemoveAzureVMNetworkInterfaceCommand.cs b/src/Compute/Compute/VirtualMachine/Config/RemoveAzureVMNetworkInterfaceCommand.cs
index fba1ca0064..8d0938b184 100644
--- a/src/Compute/Compute/VirtualMachine/Config/RemoveAzureVMNetworkInterfaceCommand.cs
+++ b/src/Compute/Compute/VirtualMachine/Config/RemoveAzureVMNetworkInterfaceCommand.cs
@@ -59,8 +59,7 @@ namespace Microsoft.Azure.Commands.Compute
                 {
                     foreach (var id in this.NetworkInterfaceIDs)
                     {
-                        if (networkProfile != null &&
-                            networkProfile.NetworkInterfaces != null &&
+                        if (networkProfile?.NetworkInterfaces != null &&
                             networkProfile.NetworkInterfaces.Any(nic =>
                                 string.Equals(nic.Id, id, StringComparison.OrdinalIgnoreCase)))
                         {
diff --git a/src/Compute/Compute/VirtualMachine/Config/RemoveAzureVMSecretCommand.cs b/src/Compute/Compute/VirtualMachine/Config/RemoveAzureVMSecretCommand.cs
index cd2c8e1ea0..334b9b008a 100644
--- a/src/Compute/Compute/VirtualMachine/Config/RemoveAzureVMSecretCommand.cs
+++ b/src/Compute/Compute/VirtualMachine/Config/RemoveAzureVMSecretCommand.cs
@@ -46,7 +46,7 @@ namespace Microsoft.Azure.Commands.Compute
             {
                 var osProfile = this.VM.OSProfile;
 
-                if (osProfile != null && osProfile.Secrets != null)
+                if (osProfile?.Secrets != null)
                 {
                     var secrets = osProfile.Secrets.ToList();
                     var comp = StringComparison.OrdinalIgnoreCase;
diff --git a/src/Compute/Compute/VirtualMachine/Config/SetAzureVMDataDiskCommand.cs b/src/Compute/Compute/VirtualMachine/Config/SetAzureVMDataDiskCommand.cs
index c69dd364ba..68fa3bc109 100644
--- a/src/Compute/Compute/VirtualMachine/Config/SetAzureVMDataDiskCommand.cs
+++ b/src/Compute/Compute/VirtualMachine/Config/SetAzureVMDataDiskCommand.cs
@@ -163,7 +163,7 @@ namespace Microsoft.Azure.Commands.Compute
         private void ThrowDataDiskNotExistError()
         {
             var missingDisk = (this.ParameterSetName.Equals(LunParameterSet))
-                   ? string.Format("LUN # {0}", this.Lun)
+                   ? $"LUN # {this.Lun}"
                    : "Name: " + this.Name;
 
             ThrowTerminatingError
diff --git a/src/Compute/Compute/VirtualMachine/Operation/GetAzureVMCommand.cs b/src/Compute/Compute/VirtualMachine/Operation/GetAzureVMCommand.cs
index fee5f3904a..c7d8b4ca00 100644
--- a/src/Compute/Compute/VirtualMachine/Operation/GetAzureVMCommand.cs
+++ b/src/Compute/Compute/VirtualMachine/Operation/GetAzureVMCommand.cs
@@ -221,7 +221,7 @@ namespace Microsoft.Azure.Commands.Compute
                         else
                         {
                             var psstate = state.ToPSVirtualMachineInstanceView(psItem.ResourceGroupName, psItem.Name);
-                            if (psstate != null && psstate.Statuses != null && psstate.Statuses.Count > 1)
+                            if (psstate?.Statuses != null && psstate.Statuses.Count > 1)
                             {
                                 psItem.PowerState = psstate.Statuses[1].DisplayStatus;
                             }
diff --git a/src/Compute/Compute/VirtualMachine/Operation/NewAzureVMCommand.cs b/src/Compute/Compute/VirtualMachine/Operation/NewAzureVMCommand.cs
index 73878c0792..bfcf615f0a 100644
--- a/src/Compute/Compute/VirtualMachine/Operation/NewAzureVMCommand.cs
+++ b/src/Compute/Compute/VirtualMachine/Operation/NewAzureVMCommand.cs
@@ -320,8 +320,8 @@ namespace Microsoft.Azure.Commands.Compute
                     if (_defaultLocation == null)
                     {
                         var vmResourceType = _resourceClient.Providers.GetAsync("Microsoft.Compute").ConfigureAwait(false).GetAwaiter().GetResult()
-                        .ResourceTypes.Where(a => String.Equals(a.ResourceType, "virtualMachines", StringComparison.OrdinalIgnoreCase))
-                                      .FirstOrDefault();
+                        .ResourceTypes.FirstOrDefault(a => String.Equals(a.ResourceType, "virtualMachines", StringComparison.OrdinalIgnoreCase))
+;
                         if (vmResourceType != null)
                         {
                             var availableLocations = vmResourceType.Locations.Select(a => a.ToLower().Replace(" ", ""));
@@ -498,18 +498,13 @@ namespace Microsoft.Azure.Commands.Compute
                     {
                         throw new ArgumentOutOfRangeException(
                             "filePath",
-                            string.Format("Given vhd file '{0}' is a corrupted fixed vhd", filePath));
+                            $"Given vhd file '{filePath}' is a corrupted fixed vhd");
                     }
                 }
                 var storageAccount = storageClient.StorageAccounts.GetProperties(ResourceGroupName, Name);
                 // BlobUri destinationUri = null;
                 BlobUri.TryParseUri(
-                    new Uri(string.Format(
-                        "{0}{1}/{2}{3}",
-                        storageAccount.PrimaryEndpoints.Blob,
-                        ResourceGroupName.ToLower(),
-                        Name.ToLower(),
-                        ".vhd")),
+                    new Uri($"{storageAccount.PrimaryEndpoints.Blob}{ResourceGroupName.ToLower()}/{Name.ToLower()}{".vhd"}"),
                     out parameters.DestinationUri);
                 if (parameters.DestinationUri?.Uri == null)
                 {
@@ -722,7 +717,7 @@ namespace Microsoft.Azure.Commands.Compute
                 {
                     Version result;
                     return (Version.TryParse(ver.Name, out result))
-                        ? string.Format("{0}.{1}", result.Major, result.Minor)
+                        ? $"{result.Major}.{result.Minor}"
                         : VirtualMachineBGInfoExtensionContext.ExtensionDefaultVersion;
                 });
             }
@@ -815,10 +810,10 @@ namespace Microsoft.Azure.Commands.Compute
         private StorageAccount TryToChooseExistingStandardStorageAccount(StorageManagementClient client)
         {
             var storageAccountList = client.StorageAccounts.ListByResourceGroup(this.ResourceGroupName);
-            if (storageAccountList == null || storageAccountList.Count() == 0)
+            if (storageAccountList == null || !storageAccountList.Any())
             {
                 storageAccountList = client.StorageAccounts.List().Where(e => e.Location.Canonicalize().Equals(this.Location.Canonicalize()));
-                if (storageAccountList == null || storageAccountList.Count() == 0)
+                if (storageAccountList == null || !storageAccountList.Any())
                 {
                     return null;
                 }
diff --git a/src/Compute/Compute/VirtualMachine/VirtualMachineBaseCmdlet.cs b/src/Compute/Compute/VirtualMachine/VirtualMachineBaseCmdlet.cs
index fc81c33dfc..a857b1ca9a 100644
--- a/src/Compute/Compute/VirtualMachine/VirtualMachineBaseCmdlet.cs
+++ b/src/Compute/Compute/VirtualMachine/VirtualMachineBaseCmdlet.cs
@@ -101,8 +101,7 @@ namespace Microsoft.Azure.Commands.Compute
             {
                 Object childObject = property.GetValue(obj, null);
 
-                var isJObject = childObject as JObject;
-                if (isJObject != null)
+                if (childObject is JObject isJObject)
                 {
                     var objStringValue = JsonConvert.SerializeObject(childObject);
 
@@ -121,8 +120,7 @@ namespace Microsoft.Azure.Commands.Compute
                 }
                 else
                 {
-                    var elem = childObject as IList;
-                    if (elem != null)
+                    if (childObject is IList elem)
                     {
                         if (elem.Count != 0)
                         {
@@ -179,8 +177,7 @@ namespace Microsoft.Azure.Commands.Compute
                         }
                         else
                         {
-                            var isDictionary = childObject as IDictionary;
-                            if (isDictionary != null)
+                            if (childObject is IDictionary isDictionary)
                             {
                                 tupleList.Add(MakeTuple(property.Name, JsonConvert.SerializeObject(childObject), depth));
                                 max = Math.Max(max, depth * 2 + property.Name.Length);
diff --git a/src/Confluent/generated/runtime/Serialization/JsonSerializer.cs b/src/Confluent/generated/runtime/Serialization/JsonSerializer.cs
index b47f73c0e6..d0284c34b2 100644
--- a/src/Confluent/generated/runtime/Serialization/JsonSerializer.cs
+++ b/src/Confluent/generated/runtime/Serialization/JsonSerializer.cs
@@ -312,7 +312,7 @@ namespace Microsoft.Azure.PowerShell.Cmdlets.Confluent.Runtime.Json
                     default: return ReadArray((IEnumerable)value);
                 }
             }
-            else if (value is IEnumerable)
+            else if (value is IEnumerable iEnumerable)
             {
                 if (type.IsList && type.ElementType != null)
                 {
@@ -330,7 +330,7 @@ namespace Microsoft.Azure.PowerShell.Cmdlets.Confluent.Runtime.Json
                     }
                 }
 
-                return ReadArray((IEnumerable)value);
+                return ReadArray(iEnumerable);
             }
             else
             {
diff --git a/src/ConnectedKubernetes/generated/runtime/Serialization/JsonSerializer.cs b/src/ConnectedKubernetes/generated/runtime/Serialization/JsonSerializer.cs
index d878af4f01..8c10af3faf 100644
--- a/src/ConnectedKubernetes/generated/runtime/Serialization/JsonSerializer.cs
+++ b/src/ConnectedKubernetes/generated/runtime/Serialization/JsonSerializer.cs
@@ -312,7 +312,7 @@ namespace Microsoft.Azure.PowerShell.Cmdlets.ConnectedKubernetes.Runtime.Json
                     default: return ReadArray((IEnumerable)value);
                 }
             }
-            else if (value is IEnumerable)
+            else if (value is IEnumerable iEnumerable)
             {
                 if (type.IsList && type.ElementType != null)
                 {
@@ -330,7 +330,7 @@ namespace Microsoft.Azure.PowerShell.Cmdlets.ConnectedKubernetes.Runtime.Json
                     }
                 }
 
-                return ReadArray((IEnumerable)value);
+                return ReadArray(iEnumerable);
             }
             else
             {
diff --git a/src/ConnectedMachine/generated/runtime/Serialization/JsonSerializer.cs b/src/ConnectedMachine/generated/runtime/Serialization/JsonSerializer.cs
index cc3d119d60..77529d58e6 100644
--- a/src/ConnectedMachine/generated/runtime/Serialization/JsonSerializer.cs
+++ b/src/ConnectedMachine/generated/runtime/Serialization/JsonSerializer.cs
@@ -312,7 +312,7 @@ namespace Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Runtime.Json
                     default: return ReadArray((IEnumerable)value);
                 }
             }
-            else if (value is IEnumerable)
+            else if (value is IEnumerable iEnumerable)
             {
                 if (type.IsList && type.ElementType != null)
                 {
@@ -330,7 +330,7 @@ namespace Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Runtime.Json
                     }
                 }
 
-                return ReadArray((IEnumerable)value);
+                return ReadArray(iEnumerable);
             }
             else
             {
diff --git a/src/ContainerRegistry/ContainerRegistry/Commands/ConnectAzureContainerRegistry.cs b/src/ContainerRegistry/ContainerRegistry/Commands/ConnectAzureContainerRegistry.cs
index fe46610e6b..a5c3483790 100644
--- a/src/ContainerRegistry/ContainerRegistry/Commands/ConnectAzureContainerRegistry.cs
+++ b/src/ContainerRegistry/ContainerRegistry/Commands/ConnectAzureContainerRegistry.cs
@@ -58,7 +58,7 @@ namespace Microsoft.Azure.Commands.ContainerRegistry
                 this.Password = this.RegistryDataPlaneClient.GetRefreshToken();
             }
 
-            string LoginScript = string.Format("'{2}' | docker login {0} -u {1} --password-stdin", this.RegistryDataPlaneClient.GetEndPoint(), this.UserName, this.Password);
+            string LoginScript = $"'{this.RegistryDataPlaneClient.GetEndPoint()}' | docker login {this.UserName} -u {this.Password} --password-stdin";
             WriteObject(this.ExecuteScript<object>(LoginScript));
         }
     }
diff --git a/src/ContainerRegistry/ContainerRegistry/Commands/RemoveAzureContainerRegistryManifest.cs b/src/ContainerRegistry/ContainerRegistry/Commands/RemoveAzureContainerRegistryManifest.cs
index 442c00f315..4c02948bf4 100644
--- a/src/ContainerRegistry/ContainerRegistry/Commands/RemoveAzureContainerRegistryManifest.cs
+++ b/src/ContainerRegistry/ContainerRegistry/Commands/RemoveAzureContainerRegistryManifest.cs
@@ -37,14 +37,14 @@ namespace Microsoft.Azure.Commands.ContainerRegistry.Commands
         {
             if (ParameterSetName.Equals(ByManifestParameterSet))
             {
-                if (this.ShouldProcess(string.Format("Delete manitest {0}@{1} under {2}", this.RepositoryName, this.Manifest, this.RegistryName)))
+                if (this.ShouldProcess($"Delete manitest {this.RepositoryName}@{this.Manifest} under {this.RegistryName}"))
                 {
                     WriteObject(this.RegistryDataPlaneClient.RemoveManifest(this.RepositoryName, this.Manifest));
                 }  
             }
             else if (ParameterSetName.Equals(ByTagParameterSet))
             {
-                if (this.ShouldProcess(string.Format("Delete manitest for {0}：{1} under {2}", this.RepositoryName, this.Tag, this.RegistryName)))
+                if (this.ShouldProcess($"Delete manitest for {this.RepositoryName}：{this.Tag} under {this.RegistryName}"))
                 {
                     WriteObject(this.RegistryDataPlaneClient.RemoveManifestByTag(this.RepositoryName, this.Tag));
                 }
diff --git a/src/ContainerRegistry/ContainerRegistry/Commands/RemoveAzureContainerRegistryRepository.cs b/src/ContainerRegistry/ContainerRegistry/Commands/RemoveAzureContainerRegistryRepository.cs
index ce9bf8e615..5ebd9c9531 100644
--- a/src/ContainerRegistry/ContainerRegistry/Commands/RemoveAzureContainerRegistryRepository.cs
+++ b/src/ContainerRegistry/ContainerRegistry/Commands/RemoveAzureContainerRegistryRepository.cs
@@ -27,7 +27,7 @@ namespace Microsoft.Azure.Commands.ContainerRegistry.Commands
 
         public override void ExecuteChildCmdlet()
         {
-            if (this.ShouldProcess(string.Format("Delete {0} under {1}", this.Name, this.RegistryName)))
+            if (this.ShouldProcess($"Delete {this.Name} under {this.RegistryName}"))
             {
                 WriteObject(this.RegistryDataPlaneClient.RemoveRepository(this.Name));
             }
diff --git a/src/ContainerRegistry/ContainerRegistry/Commands/RemoveContainerRegistryTag.cs b/src/ContainerRegistry/ContainerRegistry/Commands/RemoveContainerRegistryTag.cs
index 2b817a1941..50a7f4c624 100644
--- a/src/ContainerRegistry/ContainerRegistry/Commands/RemoveContainerRegistryTag.cs
+++ b/src/ContainerRegistry/ContainerRegistry/Commands/RemoveContainerRegistryTag.cs
@@ -30,7 +30,7 @@ namespace Microsoft.Azure.Commands.ContainerRegistry.Commands
 
         public override void ExecuteChildCmdlet()
         {
-            if (this.ShouldProcess(string.Format("Untag {0}:{1} under {2}", this.RepositoryName, this.Name, this.RegistryName)))
+            if (this.ShouldProcess($"Untag {this.RepositoryName}:{this.Name} under {this.RegistryName}"))
             {
                 WriteObject(this.RegistryDataPlaneClient.RemoveTag(this.RepositoryName, this.Name));
             }
diff --git a/src/ContainerRegistry/ContainerRegistry/Commands/UpdateAzureContainerRegistryCredential.cs b/src/ContainerRegistry/ContainerRegistry/Commands/UpdateAzureContainerRegistryCredential.cs
index 3f8275627c..09b2b804e8 100644
--- a/src/ContainerRegistry/ContainerRegistry/Commands/UpdateAzureContainerRegistryCredential.cs
+++ b/src/ContainerRegistry/ContainerRegistry/Commands/UpdateAzureContainerRegistryCredential.cs
@@ -66,7 +66,7 @@ namespace Microsoft.Azure.Commands.ContainerRegistry
                 Name = registryName;
             }
 
-            if (ShouldProcess(Name, string.Format("Update Container Registry Credential '{0}'", PasswordName)))
+            if (ShouldProcess(Name, $"Update Container Registry Credential '{PasswordName}'"))
             {
                 var credentials = RegistryClient.RegenerateRegistryCredential(ResourceGroupName, Name, PasswordName);
                 WriteObject(new PSContainerRegistryCredential(credentials));
diff --git a/src/ContainerRegistry/ContainerRegistry/Commands/UpdateAzureContainerRegistryManifest.cs b/src/ContainerRegistry/ContainerRegistry/Commands/UpdateAzureContainerRegistryManifest.cs
index 4022d02978..1a003e1786 100644
--- a/src/ContainerRegistry/ContainerRegistry/Commands/UpdateAzureContainerRegistryManifest.cs
+++ b/src/ContainerRegistry/ContainerRegistry/Commands/UpdateAzureContainerRegistryManifest.cs
@@ -56,14 +56,14 @@ namespace Microsoft.Azure.Commands.ContainerRegistry.Commands
             PSChangeableAttribute attribute = new PSChangeableAttribute(DeleteEnabled, WriteEnabled, ListEnabled, ReadEnabled);
             if (ParameterSetName.Equals(ByManifestParameterSet))
             {
-                if (this.ShouldProcess(string.Format("Update manitest {0}@{1} under {2}", this.RepositoryName, this.Manifest, this.RegistryName)))
+                if (this.ShouldProcess($"Update manitest {this.RepositoryName}@{this.Manifest} under {this.RegistryName}"))
                 {
                     WriteObject(this.RegistryDataPlaneClient.UpdateManifest(this.RepositoryName, this.Manifest, attribute));
                 }
             }
             else if (ParameterSetName.Equals(ByTagParameterSet))
             {
-                if (this.ShouldProcess(string.Format("Update manitest for {0}:{1} under {2}", this.RepositoryName, this.Tag, this.RegistryName)))
+                if (this.ShouldProcess($"Update manitest for {this.RepositoryName}:{this.Tag} under {this.RegistryName}"))
                 {
                     WriteObject(this.RegistryDataPlaneClient.UpdateManifestByTag(this.RepositoryName, this.Tag, attribute));
                 }
diff --git a/src/ContainerRegistry/ContainerRegistry/Commands/UpdateAzureContainerRegistryRepository.cs b/src/ContainerRegistry/ContainerRegistry/Commands/UpdateAzureContainerRegistryRepository.cs
index 11489f7bb0..22e6133982 100644
--- a/src/ContainerRegistry/ContainerRegistry/Commands/UpdateAzureContainerRegistryRepository.cs
+++ b/src/ContainerRegistry/ContainerRegistry/Commands/UpdateAzureContainerRegistryRepository.cs
@@ -44,7 +44,7 @@ namespace Microsoft.Azure.Commands.ContainerRegistry.Commands
 
         public override void ExecuteChildCmdlet()
         {
-            if (this.ShouldProcess(string.Format("Update {0} under {1}", this.Name, this.RegistryName)))
+            if (this.ShouldProcess($"Update {this.Name} under {this.RegistryName}"))
             {
                 WriteObject(this.RegistryDataPlaneClient.UpdateRepository(this.Name, new PSChangeableAttribute(DeleteEnabled, WriteEnabled, ListEnabled, ReadEnabled)));
             }
diff --git a/src/ContainerRegistry/ContainerRegistry/Commands/UpdateAzureContainerRegistryTag.cs b/src/ContainerRegistry/ContainerRegistry/Commands/UpdateAzureContainerRegistryTag.cs
index a657e0635d..6cecec97e7 100644
--- a/src/ContainerRegistry/ContainerRegistry/Commands/UpdateAzureContainerRegistryTag.cs
+++ b/src/ContainerRegistry/ContainerRegistry/Commands/UpdateAzureContainerRegistryTag.cs
@@ -49,7 +49,7 @@ namespace Microsoft.Azure.Commands.ContainerRegistry.Commands
         public override void ExecuteChildCmdlet()
         {
             PSChangeableAttribute attribute = new PSChangeableAttribute(DeleteEnabled, WriteEnabled, ListEnabled, ReadEnabled);
-            if (this.ShouldProcess(string.Format("Update {0}:{1} under {2}", this.RepositoryName, this.Name, this.RegistryName)))
+            if (this.ShouldProcess($"Update {this.RepositoryName}:{this.Name} under {this.RegistryName}"))
             {
                 WriteObject(this.RegistryDataPlaneClient.UpdateTag(this.RepositoryName, this.Name, attribute));
             }
diff --git a/src/ContainerRegistry/ContainerRegistry/DataPlaneOperations/ContainerRegistryDataPlaneOperationBase.cs b/src/ContainerRegistry/ContainerRegistry/DataPlaneOperations/ContainerRegistryDataPlaneOperationBase.cs
index 3ffdf8f532..6b5ae575a5 100644
--- a/src/ContainerRegistry/ContainerRegistry/DataPlaneOperations/ContainerRegistryDataPlaneOperationBase.cs
+++ b/src/ContainerRegistry/ContainerRegistry/DataPlaneOperations/ContainerRegistryDataPlaneOperationBase.cs
@@ -24,7 +24,7 @@ namespace Microsoft.Azure.Commands.ContainerRegistry.DataPlaneOperations
         {
             get
             {
-                return String.Format("{0}:{1}:{2}", Resource, Name, Permission);
+                return $"{Resource}:{Name}:{Permission}";
             }
             set
             {
diff --git a/src/ContainerRegistry/ContainerRegistry/DataPlaneOperations/ContainerRegistryRepositoryListOperation.cs b/src/ContainerRegistry/ContainerRegistry/DataPlaneOperations/ContainerRegistryRepositoryListOperation.cs
index 4a4d6c5579..6927e47f3f 100644
--- a/src/ContainerRegistry/ContainerRegistry/DataPlaneOperations/ContainerRegistryRepositoryListOperation.cs
+++ b/src/ContainerRegistry/ContainerRegistry/DataPlaneOperations/ContainerRegistryRepositoryListOperation.cs
@@ -80,7 +80,7 @@ namespace Microsoft.Azure.Commands.ContainerRegistry.DataPlaneOperations
                     }
                     catch
                     {
-                        throw new PSInvalidOperationException(string.Format("Invalid next link: {0}", nextLink));
+                        throw new PSInvalidOperationException($"Invalid next link: {nextLink}");
                     }
                 }
             }
diff --git a/src/ContainerRegistry/ContainerRegistry/Models/ContainerRegistryDataPlaneClient.cs b/src/ContainerRegistry/ContainerRegistry/Models/ContainerRegistryDataPlaneClient.cs
index 4695bb476e..41dbb78b48 100644
--- a/src/ContainerRegistry/ContainerRegistry/Models/ContainerRegistryDataPlaneClient.cs
+++ b/src/ContainerRegistry/ContainerRegistry/Models/ContainerRegistryDataPlaneClient.cs
@@ -86,7 +86,7 @@ namespace Microsoft.Azure.Commands.ContainerRegistry
                 }
                 catch
                 {
-                    throw new InvalidOperationException(string.Format("Invalud token for {0}", key));
+                    throw new InvalidOperationException($"Invalud token for {key}");
                 }
 
                 cache.Set(key, value);
diff --git a/src/ContainerRegistry/ContainerRegistry/Models/PSAcrManifest.cs b/src/ContainerRegistry/ContainerRegistry/Models/PSAcrManifest.cs
index be4cc78542..86263a09ea 100644
--- a/src/ContainerRegistry/ContainerRegistry/Models/PSAcrManifest.cs
+++ b/src/ContainerRegistry/ContainerRegistry/Models/PSAcrManifest.cs
@@ -31,7 +31,7 @@ namespace Microsoft.Azure.Commands.ContainerRegistry.Models
         {
             Registry = manifest?.Registry;
             ImageName = manifest?.Registry;
-            if (manifest != null && manifest.ManifestsAttributes != null)
+            if (manifest?.ManifestsAttributes != null)
             {
                 ManifestsAttributes = manifest.ManifestsAttributes.Select(x => new PSManifestAttributeBase(x)).ToList();
             }
diff --git a/src/ContainerRegistry/ContainerRegistry/Models/PSTagList.cs b/src/ContainerRegistry/ContainerRegistry/Models/PSTagList.cs
index 81ae3f1f08..2c9148ed53 100644
--- a/src/ContainerRegistry/ContainerRegistry/Models/PSTagList.cs
+++ b/src/ContainerRegistry/ContainerRegistry/Models/PSTagList.cs
@@ -35,7 +35,7 @@ namespace Microsoft.Azure.Commands.ContainerRegistry.Models
         {
             Registry = tag?.Registry;
             ImageName = tag?.ImageName;
-            if (tag != null && tag.Tags != null)
+            if (tag?.Tags != null)
             {
                 Tags = tag.Tags.Select(x => new PSTagAttributeBase(x)).ToList();
             }
diff --git a/src/CostManagement/generated/runtime/Serialization/JsonSerializer.cs b/src/CostManagement/generated/runtime/Serialization/JsonSerializer.cs
index 5a0e0ab2a4..0525cc8d53 100644
--- a/src/CostManagement/generated/runtime/Serialization/JsonSerializer.cs
+++ b/src/CostManagement/generated/runtime/Serialization/JsonSerializer.cs
@@ -312,7 +312,7 @@ namespace Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Runtime.Json
                     default: return ReadArray((IEnumerable)value);
                 }
             }
-            else if (value is IEnumerable)
+            else if (value is IEnumerable iEnumerable)
             {
                 if (type.IsList && type.ElementType != null)
                 {
@@ -330,7 +330,7 @@ namespace Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Runtime.Json
                     }
                 }
 
-                return ReadArray((IEnumerable)value);
+                return ReadArray(iEnumerable);
             }
             else
             {
diff --git a/src/CustomProviders/generated/runtime/Serialization/JsonSerializer.cs b/src/CustomProviders/generated/runtime/Serialization/JsonSerializer.cs
index ffa7aba89f..0b9ccbfc6b 100644
--- a/src/CustomProviders/generated/runtime/Serialization/JsonSerializer.cs
+++ b/src/CustomProviders/generated/runtime/Serialization/JsonSerializer.cs
@@ -312,7 +312,7 @@ namespace Microsoft.Azure.PowerShell.Cmdlets.CustomProviders.Runtime.Json
                     default: return ReadArray((IEnumerable)value);
                 }
             }
-            else if (value is IEnumerable)
+            else if (value is IEnumerable iEnumerable)
             {
                 if (type.IsList && type.ElementType != null)
                 {
@@ -330,7 +330,7 @@ namespace Microsoft.Azure.PowerShell.Cmdlets.CustomProviders.Runtime.Json
                     }
                 }
 
-                return ReadArray((IEnumerable)value);
+                return ReadArray(iEnumerable);
             }
             else
             {
diff --git a/src/DataBoxEdge/DataBoxEdge/Common/Cmdlets/Bandwidth/DataBoxEdgeBandwidthScheduleNewCmdletBase.cs b/src/DataBoxEdge/DataBoxEdge/Common/Cmdlets/Bandwidth/DataBoxEdgeBandwidthScheduleNewCmdletBase.cs
index 6d2c9fc3cb..373d9d00ef 100644
--- a/src/DataBoxEdge/DataBoxEdge/Common/Cmdlets/Bandwidth/DataBoxEdgeBandwidthScheduleNewCmdletBase.cs
+++ b/src/DataBoxEdge/DataBoxEdge/Common/Cmdlets/Bandwidth/DataBoxEdgeBandwidthScheduleNewCmdletBase.cs
@@ -95,8 +95,7 @@ namespace Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Common.Cmdlets.Bandwidt
 
         private string GetResourceNotFoundMessage()
         {
-            return string.Format("'{0}'{1}{2}'.",
-                HelpMessageBandwidthSchedule.ObjectName, Constants.ResourceAlreadyExists, this.Name);
+            return $"'{HelpMessageBandwidthSchedule.ObjectName}'{Constants.ResourceAlreadyExists}{this.Name}'.";
         }
 
         private bool DoesResourceExists()
@@ -148,8 +147,7 @@ namespace Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Common.Cmdlets.Bandwidt
         public override void ExecuteCmdlet()
         {
             if (this.ShouldProcess(this.Name,
-                string.Format("Creating a new '{0}' in device '{1}' with name '{2}'.",
-                    HelpMessageBandwidthSchedule.ObjectName, this.DeviceName, this.Name)))
+                $"Creating a new '{HelpMessageBandwidthSchedule.ObjectName}' in device '{this.DeviceName}' with name '{this.Name}'."))
             {
                 DoesResourceExists();
                 var results = new List<PSResourceModel>
diff --git a/src/DataBoxEdge/DataBoxEdge/Common/Cmdlets/Bandwidth/DataBoxEdgeBandwidthScheduleRemoveCmdletBase.cs b/src/DataBoxEdge/DataBoxEdge/Common/Cmdlets/Bandwidth/DataBoxEdgeBandwidthScheduleRemoveCmdletBase.cs
index 5e9285f027..eb36d12312 100644
--- a/src/DataBoxEdge/DataBoxEdge/Common/Cmdlets/Bandwidth/DataBoxEdgeBandwidthScheduleRemoveCmdletBase.cs
+++ b/src/DataBoxEdge/DataBoxEdge/Common/Cmdlets/Bandwidth/DataBoxEdgeBandwidthScheduleRemoveCmdletBase.cs
@@ -103,8 +103,7 @@ namespace Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Common.Cmdlets.Bandwidt
             }
 
             if (this.ShouldProcess(this.Name,
-                string.Format("Removing '{0}' in device '{1}' with name '{2}'.",
-                    HelpMessageBandwidthSchedule.ObjectName, this.DeviceName, this.Name)))
+                $"Removing '{HelpMessageBandwidthSchedule.ObjectName}' in device '{this.DeviceName}' with name '{this.Name}'."))
             {
                 Remove();
                 if (this.PassThru.IsPresent)
diff --git a/src/DataBoxEdge/DataBoxEdge/Common/Cmdlets/Bandwidth/DataBoxEdgeBandwidthScheduleSetCmdletBase.cs b/src/DataBoxEdge/DataBoxEdge/Common/Cmdlets/Bandwidth/DataBoxEdgeBandwidthScheduleSetCmdletBase.cs
index 8a3d6628ca..f34ec7034f 100644
--- a/src/DataBoxEdge/DataBoxEdge/Common/Cmdlets/Bandwidth/DataBoxEdgeBandwidthScheduleSetCmdletBase.cs
+++ b/src/DataBoxEdge/DataBoxEdge/Common/Cmdlets/Bandwidth/DataBoxEdgeBandwidthScheduleSetCmdletBase.cs
@@ -197,8 +197,7 @@ namespace Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Common.Cmdlets.Bandwidt
             }
 
             if (this.ShouldProcess(this.Name,
-                string.Format("Updating '{0}' in device '{1}' with name '{2}'.",
-                    HelpMessageBandwidthSchedule.ObjectName, this.DeviceName, this.Name)))
+                $"Updating '{HelpMessageBandwidthSchedule.ObjectName}' in device '{this.DeviceName}' with name '{this.Name}'."))
             {
                 var result = UpdateResourceModel();
                 WriteObject(result);
diff --git a/src/DataBoxEdge/DataBoxEdge/Common/Cmdlets/Devices/DataBoxEdgeDeviceNewCmdletBase.cs b/src/DataBoxEdge/DataBoxEdge/Common/Cmdlets/Devices/DataBoxEdgeDeviceNewCmdletBase.cs
index 97b8a7a12f..d550255987 100644
--- a/src/DataBoxEdge/DataBoxEdge/Common/Cmdlets/Devices/DataBoxEdgeDeviceNewCmdletBase.cs
+++ b/src/DataBoxEdge/DataBoxEdge/Common/Cmdlets/Devices/DataBoxEdgeDeviceNewCmdletBase.cs
@@ -73,8 +73,7 @@ namespace Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Common.Cmdlets.Devices
 
         private string GetResourceNotFoundMessage()
         {
-            return string.Format("'{0}'{1}{2}'.",
-                HelpMessageDevice.ObjectName, Constants.ResourceAlreadyExists, this.Name);
+            return $"'{HelpMessageDevice.ObjectName}'{Constants.ResourceAlreadyExists}{this.Name}'.";
         }
 
         private bool DoesResourceExists()
@@ -114,8 +113,7 @@ namespace Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Common.Cmdlets.Devices
         public override void ExecuteCmdlet()
         {
             if (this.ShouldProcess(this.Name,
-                string.Format("Creating '{0}' with name '{1}'.",
-                    HelpMessageDevice.ObjectName, this.Name)))
+                $"Creating '{HelpMessageDevice.ObjectName}' with name '{this.Name}'."))
             {
                 DoesResourceExists();
                 var results = new List<PSResourceModel>
diff --git a/src/DataBoxEdge/DataBoxEdge/Common/Cmdlets/Devices/DataBoxEdgeDeviceRemoveCmdletBase.cs b/src/DataBoxEdge/DataBoxEdge/Common/Cmdlets/Devices/DataBoxEdgeDeviceRemoveCmdletBase.cs
index b14f2fdc88..f7ea5298d8 100644
--- a/src/DataBoxEdge/DataBoxEdge/Common/Cmdlets/Devices/DataBoxEdgeDeviceRemoveCmdletBase.cs
+++ b/src/DataBoxEdge/DataBoxEdge/Common/Cmdlets/Devices/DataBoxEdgeDeviceRemoveCmdletBase.cs
@@ -91,8 +91,7 @@ namespace Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Common.Cmdlets.Devices
             }
 
             if (this.ShouldProcess(this.Name,
-                string.Format("Removing '{0}' with name '{1}'.",
-                    HelpMessageDevice.ObjectName, this.Name)))
+                $"Removing '{HelpMessageDevice.ObjectName}' with name '{this.Name}'."))
             {
                 var removed = Remove();
                 if (this.PassThru.IsPresent)
diff --git a/src/DataBoxEdge/DataBoxEdge/Common/Cmdlets/EdgeStorageAccounts/DataBoxEdgeStorageAccountNewCmdlet.cs b/src/DataBoxEdge/DataBoxEdge/Common/Cmdlets/EdgeStorageAccounts/DataBoxEdgeStorageAccountNewCmdlet.cs
index a3e2ac9f27..5fc07274e1 100644
--- a/src/DataBoxEdge/DataBoxEdge/Common/Cmdlets/EdgeStorageAccounts/DataBoxEdgeStorageAccountNewCmdlet.cs
+++ b/src/DataBoxEdge/DataBoxEdge/Common/Cmdlets/EdgeStorageAccounts/DataBoxEdgeStorageAccountNewCmdlet.cs
@@ -81,8 +81,7 @@ namespace Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Common.Cmdlets.EdgeStor
 
         private string GetResourceAlreadyExistMessage()
         {
-            return string.Format("'{0}'{1}{2}'.",
-                HelpMessageEdgeStorageAccount.ObjectName, Constants.ResourceAlreadyExists, this.Name);
+            return $"'{HelpMessageEdgeStorageAccount.ObjectName}'{Constants.ResourceAlreadyExists}{this.Name}'.";
         }
 
         private bool DoesResourceExists()
@@ -129,8 +128,7 @@ namespace Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Common.Cmdlets.EdgeStor
         public override void ExecuteCmdlet()
         {
             if (this.ShouldProcess(this.Name,
-                string.Format("Creating '{0}' in device '{1}' with name '{2}'.",
-                    HelpMessageEdgeStorageAccount.ObjectName, this.DeviceName, this.Name)))
+                $"Creating '{HelpMessageEdgeStorageAccount.ObjectName}' in device '{this.DeviceName}' with name '{this.Name}'."))
             {
                 DoesResourceExists();
                 var results = new List<PSDataBoxEdgeStorageAccount>()
diff --git a/src/DataBoxEdge/DataBoxEdge/Common/Cmdlets/EdgeStorageAccounts/DataBoxEdgeStorageAccountRemoveCmdlet.cs b/src/DataBoxEdge/DataBoxEdge/Common/Cmdlets/EdgeStorageAccounts/DataBoxEdgeStorageAccountRemoveCmdlet.cs
index 7e136ecc62..f8b1399727 100644
--- a/src/DataBoxEdge/DataBoxEdge/Common/Cmdlets/EdgeStorageAccounts/DataBoxEdgeStorageAccountRemoveCmdlet.cs
+++ b/src/DataBoxEdge/DataBoxEdge/Common/Cmdlets/EdgeStorageAccounts/DataBoxEdgeStorageAccountRemoveCmdlet.cs
@@ -108,8 +108,7 @@ namespace Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Common.Cmdlets.EdgeStor
             }
 
             if (this.ShouldProcess(this.Name,
-                string.Format("Removing '{0}' in device '{1}' with name '{2}'.",
-                    HelpMessageEdgeStorageAccount.ObjectName, this.DeviceName, this.Name)))
+                $"Removing '{HelpMessageEdgeStorageAccount.ObjectName}' in device '{this.DeviceName}' with name '{this.Name}'."))
             {
                 var removed = Remove();
                 if (this.PassThru.IsPresent)
diff --git a/src/DataBoxEdge/DataBoxEdge/Common/Cmdlets/EdgeStorageContainers/DataBoxEdgeStorageContainerNewCmdlet.cs b/src/DataBoxEdge/DataBoxEdge/Common/Cmdlets/EdgeStorageContainers/DataBoxEdgeStorageContainerNewCmdlet.cs
index 56dd4c2c37..04bf9a62e0 100644
--- a/src/DataBoxEdge/DataBoxEdge/Common/Cmdlets/EdgeStorageContainers/DataBoxEdgeStorageContainerNewCmdlet.cs
+++ b/src/DataBoxEdge/DataBoxEdge/Common/Cmdlets/EdgeStorageContainers/DataBoxEdgeStorageContainerNewCmdlet.cs
@@ -86,8 +86,7 @@ namespace Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Common.Cmdlets.EdgeStor
 
         private string GetResourceAlreadyExistMessage()
         {
-            return string.Format("'{0}'{1}{2}'.",
-                HelpMessageEdgeStorageContainer.ObjectName, Constants.ResourceAlreadyExists, this.Name);
+            return $"'{HelpMessageEdgeStorageContainer.ObjectName}'{Constants.ResourceAlreadyExists}{this.Name}'.";
         }
 
         private bool DoesResourceExists()
@@ -132,8 +131,7 @@ namespace Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Common.Cmdlets.EdgeStor
         public override void ExecuteCmdlet()
         {
             if (this.ShouldProcess(this.Name,
-                string.Format("Creating '{0}' in device '{1}' with name '{2}'.",
-                    HelpMessageEdgeStorageContainer.ObjectName, this.DeviceName, this.Name)))
+                $"Creating '{HelpMessageEdgeStorageContainer.ObjectName}' in device '{this.DeviceName}' with name '{this.Name}'."))
             {
                 DoesResourceExists();
                 var results = new List<PSDataBoxEdgeStorageContainer>()
diff --git a/src/DataBoxEdge/DataBoxEdge/Common/Cmdlets/EdgeStorageContainers/DataBoxEdgeStorageContainerRemoveCmdlet.cs b/src/DataBoxEdge/DataBoxEdge/Common/Cmdlets/EdgeStorageContainers/DataBoxEdgeStorageContainerRemoveCmdlet.cs
index 56a9800c40..96115c38fd 100644
--- a/src/DataBoxEdge/DataBoxEdge/Common/Cmdlets/EdgeStorageContainers/DataBoxEdgeStorageContainerRemoveCmdlet.cs
+++ b/src/DataBoxEdge/DataBoxEdge/Common/Cmdlets/EdgeStorageContainers/DataBoxEdgeStorageContainerRemoveCmdlet.cs
@@ -117,8 +117,7 @@ namespace Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Common.Cmdlets.EdgeStor
             }
 
             if (this.ShouldProcess(this.Name,
-                string.Format("Removing '{0}' in device '{1}' with name '{2}'.",
-                    HelpMessageEdgeStorageContainer.ObjectName, this.DeviceName, this.Name)))
+                $"Removing '{HelpMessageEdgeStorageContainer.ObjectName}' in device '{this.DeviceName}' with name '{this.Name}'."))
             {
                 var removed = Remove();
                 if (this.PassThru.IsPresent)
diff --git a/src/DataBoxEdge/DataBoxEdge/Common/Cmdlets/Orders/DataBoxEdgeOrderNewCmdlet.cs b/src/DataBoxEdge/DataBoxEdge/Common/Cmdlets/Orders/DataBoxEdgeOrderNewCmdlet.cs
index f4efada635..a50872158a 100644
--- a/src/DataBoxEdge/DataBoxEdge/Common/Cmdlets/Orders/DataBoxEdgeOrderNewCmdlet.cs
+++ b/src/DataBoxEdge/DataBoxEdge/Common/Cmdlets/Orders/DataBoxEdgeOrderNewCmdlet.cs
@@ -123,8 +123,7 @@ namespace Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Common.Cmdlets.Orders
 
         private string GetResourceAlreadyExistMessage()
         {
-            return string.Format("'{0}'{1}{2}'.",
-                HelpMessageOrder.ObjectName, Constants.ResourceAlreadyExists, this.DeviceName);
+            return $"'{HelpMessageOrder.ObjectName}'{Constants.ResourceAlreadyExists}{this.DeviceName}'.";
         }
 
         private bool DoesResourceExists()
@@ -173,8 +172,7 @@ namespace Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Common.Cmdlets.Orders
         {
             _operations = this.DataBoxEdgeManagementClient.Orders;
             if (this.ShouldProcess(this.DeviceName,
-                string.Format("Creating '{0}' with name '{1}'.",
-                    HelpMessageOrder.ObjectName, this.DeviceName)))
+                $"Creating '{HelpMessageOrder.ObjectName}' with name '{this.DeviceName}'."))
             {
                 DoesResourceExists();
                 var results = new List<PSResourceModel>
diff --git a/src/DataBoxEdge/DataBoxEdge/Common/Cmdlets/Orders/DataBoxEdgeOrderRemoveCmdlet.cs b/src/DataBoxEdge/DataBoxEdge/Common/Cmdlets/Orders/DataBoxEdgeOrderRemoveCmdlet.cs
index 5ac79c515c..a903db4267 100644
--- a/src/DataBoxEdge/DataBoxEdge/Common/Cmdlets/Orders/DataBoxEdgeOrderRemoveCmdlet.cs
+++ b/src/DataBoxEdge/DataBoxEdge/Common/Cmdlets/Orders/DataBoxEdgeOrderRemoveCmdlet.cs
@@ -97,8 +97,7 @@ namespace Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Common.Cmdlets.Orders
             }
 
             if (this.ShouldProcess(this.DeviceName,
-                string.Format("Removing '{0}' for device '{1}'.",
-                    HelpMessageOrder.ObjectName, this.DeviceName)))
+                $"Removing '{HelpMessageOrder.ObjectName}' for device '{this.DeviceName}'."))
             {
                 var removed = Remove();
                 if (this.PassThru.IsPresent)
diff --git a/src/DataBoxEdge/DataBoxEdge/Common/Cmdlets/Roles/DataBoxEdgeRoleNewCmdletBase.cs b/src/DataBoxEdge/DataBoxEdge/Common/Cmdlets/Roles/DataBoxEdgeRoleNewCmdletBase.cs
index ece1f34393..63f0a8fe98 100644
--- a/src/DataBoxEdge/DataBoxEdge/Common/Cmdlets/Roles/DataBoxEdgeRoleNewCmdletBase.cs
+++ b/src/DataBoxEdge/DataBoxEdge/Common/Cmdlets/Roles/DataBoxEdgeRoleNewCmdletBase.cs
@@ -153,8 +153,7 @@ namespace Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Common.Cmdlets.Roles
 
         private string GetResourceNotFoundMessage()
         {
-            return string.Format("'{0}'{1}{2}'.",
-                HelpMessageRoles.ObjectName, Constants.ResourceAlreadyExists, this.Name);
+            return $"'{HelpMessageRoles.ObjectName}'{Constants.ResourceAlreadyExists}{this.Name}'.";
         }
 
         private bool DoesResourceExists()
@@ -179,8 +178,7 @@ namespace Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Common.Cmdlets.Roles
 
         private string GetConnectionString(string hostName, string deviceId, string sharedAccessKey)
         {
-            return string.Format("HostName={0};DeviceId={1};SharedAccessKey={2}",
-                hostName, deviceId, sharedAccessKey);
+            return $"HostName={hostName};DeviceId={deviceId};SharedAccessKey={sharedAccessKey}";
         }
 
 
@@ -311,16 +309,12 @@ namespace Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Common.Cmdlets.Roles
             if (!ConnectionString.IsPresent && !DeviceProperty.IsPresent)
             {
                 throw new Exception(
-                    string.Format(
-                        "Please select one of -'{0}' or -'{1}'",
-                        nameof(this.ConnectionString),
-                        nameof(this.DeviceProperty)));
+                    $"Please select one of -'{nameof(this.ConnectionString)}' or -'{nameof(this.DeviceProperty)}'");
             }
 
 
             if (this.ShouldProcess(this.Name,
-                string.Format("Creating '{0}' in device '{1}' with name '{2}'.",
-                    HelpMessageRoles.ObjectName, this.DeviceName, this.Name)))
+                $"Creating '{HelpMessageRoles.ObjectName}' in device '{this.DeviceName}' with name '{this.Name}'."))
             {
                 DoesResourceExists();
                 var results = new List<PSResourceModel>()
diff --git a/src/DataBoxEdge/DataBoxEdge/Common/Cmdlets/Roles/DataBoxEdgeRoleRemoveCmdletBase.cs b/src/DataBoxEdge/DataBoxEdge/Common/Cmdlets/Roles/DataBoxEdgeRoleRemoveCmdletBase.cs
index 4ce6d5650f..09fed537f3 100644
--- a/src/DataBoxEdge/DataBoxEdge/Common/Cmdlets/Roles/DataBoxEdgeRoleRemoveCmdletBase.cs
+++ b/src/DataBoxEdge/DataBoxEdge/Common/Cmdlets/Roles/DataBoxEdgeRoleRemoveCmdletBase.cs
@@ -97,8 +97,7 @@ namespace Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Common.Cmdlets.Roles
             }
 
             if (this.ShouldProcess(this.Name,
-                string.Format("Removing '{0}' in device '{1}' with name '{2}'.",
-                    HelpMessageRoles.ObjectName, this.DeviceName, this.Name)))
+                $"Removing '{HelpMessageRoles.ObjectName}' in device '{this.DeviceName}' with name '{this.Name}'."))
             {
                 var removed = Remove();
                 if (this.PassThru.IsPresent)
diff --git a/src/DataBoxEdge/DataBoxEdge/Common/Cmdlets/Share/DataBoxEdgeShareInvokeCmdlet.cs b/src/DataBoxEdge/DataBoxEdge/Common/Cmdlets/Share/DataBoxEdgeShareInvokeCmdlet.cs
index bfcb74f13a..0c2dde03af 100644
--- a/src/DataBoxEdge/DataBoxEdge/Common/Cmdlets/Share/DataBoxEdgeShareInvokeCmdlet.cs
+++ b/src/DataBoxEdge/DataBoxEdge/Common/Cmdlets/Share/DataBoxEdgeShareInvokeCmdlet.cs
@@ -111,8 +111,7 @@ namespace Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Common.Cmdlets.Share
             }
 
             if (this.ShouldProcess(this.Name,
-                string.Format("Invoking '{0}' in device '{1}' with name '{2}'.",
-                    HelpMessageShare.ObjectName, this.DeviceName, this.Name)))
+                $"Invoking '{HelpMessageShare.ObjectName}' in device '{this.DeviceName}' with name '{this.Name}'."))
             {
                 var refreshed = ShareRefreshData();
                 if (this.PassThru.IsPresent)
diff --git a/src/DataBoxEdge/DataBoxEdge/Common/Cmdlets/Share/DataBoxEdgeShareNewCmdletBase.cs b/src/DataBoxEdge/DataBoxEdge/Common/Cmdlets/Share/DataBoxEdgeShareNewCmdletBase.cs
index bda03e9490..58bbac85a4 100644
--- a/src/DataBoxEdge/DataBoxEdge/Common/Cmdlets/Share/DataBoxEdgeShareNewCmdletBase.cs
+++ b/src/DataBoxEdge/DataBoxEdge/Common/Cmdlets/Share/DataBoxEdgeShareNewCmdletBase.cs
@@ -154,8 +154,7 @@ namespace Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Common.Cmdlets.Share
 
         private string GetResourceAlreadyExistMessage()
         {
-            return string.Format("'{0}'{1}{2}'.",
-                HelpMessageShare.ObjectName, Constants.ResourceAlreadyExists, this.Name);
+            return $"'{HelpMessageShare.ObjectName}'{Constants.ResourceAlreadyExists}{this.Name}'.";
         }
 
         private bool DoesResourceExists()
@@ -262,8 +261,7 @@ namespace Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Common.Cmdlets.Share
             }
 
             if (this.ShouldProcess(this.Name,
-                string.Format("Creating '{0}' in device '{1}' with name '{2}'.",
-                    HelpMessageShare.ObjectName, this.DeviceName, this.Name)))
+                $"Creating '{HelpMessageShare.ObjectName}' in device '{this.DeviceName}' with name '{this.Name}'."))
             {
                 DoesResourceExists();
                 var results = new List<PSResourceModel>()
diff --git a/src/DataBoxEdge/DataBoxEdge/Common/Cmdlets/Share/DataBoxEdgeShareRemoveCmdletBase.cs b/src/DataBoxEdge/DataBoxEdge/Common/Cmdlets/Share/DataBoxEdgeShareRemoveCmdletBase.cs
index a944f27836..9d7a7e3846 100644
--- a/src/DataBoxEdge/DataBoxEdge/Common/Cmdlets/Share/DataBoxEdgeShareRemoveCmdletBase.cs
+++ b/src/DataBoxEdge/DataBoxEdge/Common/Cmdlets/Share/DataBoxEdgeShareRemoveCmdletBase.cs
@@ -109,8 +109,7 @@ namespace Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Common.Cmdlets.Share
             }
 
             if (this.ShouldProcess(this.Name,
-                string.Format("Removing '{0}' in device '{1}' with name '{2}'.",
-                    HelpMessageShare.ObjectName, this.DeviceName, this.Name)))
+                $"Removing '{HelpMessageShare.ObjectName}' in device '{this.DeviceName}' with name '{this.Name}'."))
             {
                 var removed = Remove();
                 if (this.PassThru.IsPresent)
diff --git a/src/DataBoxEdge/DataBoxEdge/Common/Cmdlets/Share/DataBoxEdgeShareSetCmdletBase.cs b/src/DataBoxEdge/DataBoxEdge/Common/Cmdlets/Share/DataBoxEdgeShareSetCmdletBase.cs
index 0cc9902b88..82679e30ea 100644
--- a/src/DataBoxEdge/DataBoxEdge/Common/Cmdlets/Share/DataBoxEdgeShareSetCmdletBase.cs
+++ b/src/DataBoxEdge/DataBoxEdge/Common/Cmdlets/Share/DataBoxEdgeShareSetCmdletBase.cs
@@ -200,8 +200,7 @@ namespace Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Common.Cmdlets.Share
             }
 
             if (this.ShouldProcess(this.Name,
-                string.Format("Updating '{0}' in device '{1}' with name '{2}'.",
-                    HelpMessageShare.ObjectName, this.DeviceName, this.Name)))
+                $"Updating '{HelpMessageShare.ObjectName}' in device '{this.DeviceName}' with name '{this.Name}'."))
             {
                 share = SharesOperationsExtensions.CreateOrUpdate(
                     DataBoxEdgeManagementClient.Shares,
diff --git a/src/DataBoxEdge/DataBoxEdge/Common/Cmdlets/StorageAccountCredential/DataBoxEdgeStorageAccountCredentialNewCmdletBase.cs b/src/DataBoxEdge/DataBoxEdge/Common/Cmdlets/StorageAccountCredential/DataBoxEdgeStorageAccountCredentialNewCmdletBase.cs
index 7b35be81d0..631212b82a 100644
--- a/src/DataBoxEdge/DataBoxEdge/Common/Cmdlets/StorageAccountCredential/DataBoxEdgeStorageAccountCredentialNewCmdletBase.cs
+++ b/src/DataBoxEdge/DataBoxEdge/Common/Cmdlets/StorageAccountCredential/DataBoxEdgeStorageAccountCredentialNewCmdletBase.cs
@@ -91,8 +91,7 @@ namespace Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Common.Cmdlets.StorageA
 
         private string GetResourceNotFoundMessage()
         {
-            return string.Format("'{0}'{1}{2}'.",
-                HelpMessageStorageAccountCredential.ObjectName, Constants.ResourceAlreadyExists, this.Name);
+            return $"'{HelpMessageStorageAccountCredential.ObjectName}'{Constants.ResourceAlreadyExists}{this.Name}'.";
         }
 
         private bool DoesResourceExists()
@@ -160,8 +159,7 @@ namespace Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Common.Cmdlets.StorageA
         public override void ExecuteCmdlet()
         {
             if (this.ShouldProcess(this.Name,
-                string.Format("Creating '{0}' in device '{1}' with name '{2}'.",
-                    HelpMessageStorageAccountCredential.ObjectName, this.DeviceName, this.Name)))
+                $"Creating '{HelpMessageStorageAccountCredential.ObjectName}' in device '{this.DeviceName}' with name '{this.Name}'."))
             {
                 DoesResourceExists();
                 var results = new List<PSResourceModel>()
diff --git a/src/DataBoxEdge/DataBoxEdge/Common/Cmdlets/StorageAccountCredential/DataBoxEdgeStorageAccountCredentialRemoveCmdletBase.cs b/src/DataBoxEdge/DataBoxEdge/Common/Cmdlets/StorageAccountCredential/DataBoxEdgeStorageAccountCredentialRemoveCmdletBase.cs
index ff52f15f62..0f48709bfc 100644
--- a/src/DataBoxEdge/DataBoxEdge/Common/Cmdlets/StorageAccountCredential/DataBoxEdgeStorageAccountCredentialRemoveCmdletBase.cs
+++ b/src/DataBoxEdge/DataBoxEdge/Common/Cmdlets/StorageAccountCredential/DataBoxEdgeStorageAccountCredentialRemoveCmdletBase.cs
@@ -106,8 +106,7 @@ namespace Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Common.Cmdlets.StorageA
             }
 
             if (this.ShouldProcess(this.Name,
-                string.Format("Removing '{0}' in device '{1}' with name '{2}'.",
-                    HelpMessageStorageAccountCredential.ObjectName, this.DeviceName, this.Name)))
+                $"Removing '{HelpMessageStorageAccountCredential.ObjectName}' in device '{this.DeviceName}' with name '{this.Name}'."))
             {
                 var removed = Remove();
                 if (this.PassThru.IsPresent)
diff --git a/src/DataBoxEdge/DataBoxEdge/Common/Cmdlets/Triggers/DataBoxEdgeTriggerNewCmdlet.cs b/src/DataBoxEdge/DataBoxEdge/Common/Cmdlets/Triggers/DataBoxEdgeTriggerNewCmdlet.cs
index 9b07f2d8a1..519fe0a5cc 100644
--- a/src/DataBoxEdge/DataBoxEdge/Common/Cmdlets/Triggers/DataBoxEdgeTriggerNewCmdlet.cs
+++ b/src/DataBoxEdge/DataBoxEdge/Common/Cmdlets/Triggers/DataBoxEdgeTriggerNewCmdlet.cs
@@ -170,8 +170,7 @@ namespace Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Common.Cmdlets.Triggers
 
         private string GetResourceFoundMessage()
         {
-            return string.Format("'{0}'{1}{2}'.",
-                HelpMessageTrigger.ObjectName, Constants.ResourceAlreadyExists, this.Name);
+            return $"'{HelpMessageTrigger.ObjectName}'{Constants.ResourceAlreadyExists}{this.Name}'.";
         }
 
         private bool DoesResourceExists()
@@ -231,8 +230,7 @@ namespace Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Common.Cmdlets.Triggers
             }
 
             if (this.ShouldProcess(this.Name,
-                string.Format("Creating '{0}' in device '{1}' with name '{2}'.",
-                    HelpMessageTrigger.ObjectName, this.DeviceName, this.Name)))
+                $"Creating '{HelpMessageTrigger.ObjectName}' in device '{this.DeviceName}' with name '{this.Name}'."))
             {
                 DoesResourceExists();
                 var results = new List<PSResourceModel>()
diff --git a/src/DataBoxEdge/DataBoxEdge/Common/Cmdlets/Triggers/DataBoxEdgeTriggerRemoveCmdlet.cs b/src/DataBoxEdge/DataBoxEdge/Common/Cmdlets/Triggers/DataBoxEdgeTriggerRemoveCmdlet.cs
index 76f5ac1620..05090851e6 100644
--- a/src/DataBoxEdge/DataBoxEdge/Common/Cmdlets/Triggers/DataBoxEdgeTriggerRemoveCmdlet.cs
+++ b/src/DataBoxEdge/DataBoxEdge/Common/Cmdlets/Triggers/DataBoxEdgeTriggerRemoveCmdlet.cs
@@ -108,8 +108,7 @@ namespace Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Common.Cmdlets.Triggers
             }
 
             if (this.ShouldProcess(this.Name,
-                string.Format("Removing '{0}' in device '{1}' with name '{2}'.",
-                    HelpMessageTrigger.ObjectName, this.DeviceName, this.Name)))
+                $"Removing '{HelpMessageTrigger.ObjectName}' in device '{this.DeviceName}' with name '{this.Name}'."))
             {
                 var removed = Remove();
                 if (this.PassThru.IsPresent)
diff --git a/src/DataBoxEdge/DataBoxEdge/Common/Cmdlets/Users/DataBoxEdgeUserNewCmdletBase.cs b/src/DataBoxEdge/DataBoxEdge/Common/Cmdlets/Users/DataBoxEdgeUserNewCmdletBase.cs
index 39c2ed2eb0..03806a983d 100644
--- a/src/DataBoxEdge/DataBoxEdge/Common/Cmdlets/Users/DataBoxEdgeUserNewCmdletBase.cs
+++ b/src/DataBoxEdge/DataBoxEdge/Common/Cmdlets/Users/DataBoxEdgeUserNewCmdletBase.cs
@@ -93,8 +93,7 @@ namespace Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Common.Cmdlets.Users
 
         private string GetResourceAlreadyExistMessage()
         {
-            return string.Format("'{0}'{1}{2}'.",
-                HelpMessageUsers.ObjectName, Constants.ResourceAlreadyExists, this.Name);
+            return $"'{HelpMessageUsers.ObjectName}'{Constants.ResourceAlreadyExists}{this.Name}'.";
         }
 
         private bool DoesResourceExists()
@@ -159,8 +158,7 @@ namespace Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Common.Cmdlets.Users
         public override void ExecuteCmdlet()
         {
             if (this.ShouldProcess(this.Name,
-                string.Format("Removing '{0}' in device '{1}' with name '{2}'.",
-                    HelpMessageUsers.ObjectName, this.DeviceName, this.Name)))
+                $"Removing '{HelpMessageUsers.ObjectName}' in device '{this.DeviceName}' with name '{this.Name}'."))
             {
                 DoesResourceExists();
 
diff --git a/src/DataBoxEdge/DataBoxEdge/Common/Cmdlets/Users/DataBoxEdgeUserRemoveCmdletBase.cs b/src/DataBoxEdge/DataBoxEdge/Common/Cmdlets/Users/DataBoxEdgeUserRemoveCmdletBase.cs
index 2694d8577a..4aab092b96 100644
--- a/src/DataBoxEdge/DataBoxEdge/Common/Cmdlets/Users/DataBoxEdgeUserRemoveCmdletBase.cs
+++ b/src/DataBoxEdge/DataBoxEdge/Common/Cmdlets/Users/DataBoxEdgeUserRemoveCmdletBase.cs
@@ -106,8 +106,7 @@ namespace Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Common.Cmdlets.Users
             }
 
             if (this.ShouldProcess(this.Name,
-                string.Format("Removing '{0}' in device '{1}' with name '{2}'.",
-                    HelpMessageUsers.ObjectName, this.DeviceName, this.Name)))
+                $"Removing '{HelpMessageUsers.ObjectName}' in device '{this.DeviceName}' with name '{this.Name}'."))
             {
                 var removed = Remove();
                 if (this.PassThru.IsPresent)
diff --git a/src/DataBoxEdge/DataBoxEdge/Common/Cmdlets/Users/DataBoxEdgeUserSetCmdletBase.cs b/src/DataBoxEdge/DataBoxEdge/Common/Cmdlets/Users/DataBoxEdgeUserSetCmdletBase.cs
index 73284f0a0e..d01b5d7d5e 100644
--- a/src/DataBoxEdge/DataBoxEdge/Common/Cmdlets/Users/DataBoxEdgeUserSetCmdletBase.cs
+++ b/src/DataBoxEdge/DataBoxEdge/Common/Cmdlets/Users/DataBoxEdgeUserSetCmdletBase.cs
@@ -138,8 +138,7 @@ namespace Microsoft.Azure.PowerShell.Cmdlets.DataBoxEdge.Common.Cmdlets.Users
             }
 
             if (this.ShouldProcess(this.Name,
-                string.Format("Updating '{0}' in device '{1}' with name '{2}'.",
-                    HelpMessageUsers.ObjectName, this.DeviceName, this.Name)))
+                $"Updating '{HelpMessageUsers.ObjectName}' in device '{this.DeviceName}' with name '{this.Name}'."))
             {
                 var results = new List<PSDataBoxEdgeUser>()
                 {
diff --git a/src/DataFactory/DataFactories/DataFactoryBaseCmdlet.cs b/src/DataFactory/DataFactories/DataFactoryBaseCmdlet.cs
index 39b5e8d410..c0d75897ad 100644
--- a/src/DataFactory/DataFactories/DataFactoryBaseCmdlet.cs
+++ b/src/DataFactory/DataFactories/DataFactoryBaseCmdlet.cs
@@ -53,15 +53,15 @@ namespace Microsoft.Azure.Commands.DataFactories
 
         protected override void WriteExceptionError(Exception exception)
         {
-            if (exception is CloudException)
+            if (exception is CloudException cloudException)
             {
                 // Override the default error message into a formatted message which contains Request Id
-                exception = ((CloudException)exception).CreateFormattedException();
+                exception = cloudException.CreateFormattedException();
             }
-            else if (exception is ArgumentOutOfRangeException)
+            else if (exception is ArgumentOutOfRangeException argumentOutOfRangeException)
             {
                 // Add resource naming rules page link into a formatted message
-                exception = ((ArgumentOutOfRangeException)exception).CreateFormattedException();
+                exception = argumentOutOfRangeException.CreateFormattedException();
             }
 
             base.WriteExceptionError(exception);
diff --git a/src/DataFactory/DataFactories/Models/DataFactoryClient.DataFactories.cs b/src/DataFactory/DataFactories/Models/DataFactoryClient.DataFactories.cs
index 81dbf6ba76..72dd6dcfbd 100644
--- a/src/DataFactory/DataFactories/Models/DataFactoryClient.DataFactories.cs
+++ b/src/DataFactory/DataFactories/Models/DataFactoryClient.DataFactories.cs
@@ -49,7 +49,7 @@ namespace Microsoft.Azure.Commands.DataFactories
             }
             filterOptions.NextLink = response != null ? response.NextLink : null;
 
-            if (response != null && response.DataFactories != null)
+            if (response?.DataFactories != null)
             {
                 response.DataFactories.ForEach(
                     df => dataFactories.Add(new PSDataFactory(df) { ResourceGroupName = filterOptions.ResourceGroupName }));
diff --git a/src/DataFactory/DataFactories/Models/DataFactoryClient.DataSlices.cs b/src/DataFactory/DataFactories/Models/DataFactoryClient.DataSlices.cs
index 31ab89ffcb..610e03cc6e 100644
--- a/src/DataFactory/DataFactories/Models/DataFactoryClient.DataSlices.cs
+++ b/src/DataFactory/DataFactories/Models/DataFactoryClient.DataSlices.cs
@@ -50,7 +50,7 @@ namespace Microsoft.Azure.Commands.DataFactories
             }
             filterOptions.NextLink = response?.NextLink;
 
-            if (response != null && response.DataSliceRuns != null)
+            if (response?.DataSliceRuns != null)
             {
                 foreach (var run in response.DataSliceRuns)
                 {
@@ -90,7 +90,7 @@ namespace Microsoft.Azure.Commands.DataFactories
             }
             filterOptions.NextLink = response?.NextLink;
 
-            if (response != null && response.DataSlices != null)
+            if (response?.DataSlices != null)
             {
                 foreach (var dataSlice in response.DataSlices)
                 {
diff --git a/src/DataFactory/DataFactories/Models/DataFactoryClient.Datasets.cs b/src/DataFactory/DataFactories/Models/DataFactoryClient.Datasets.cs
index b07f74ccc5..dd0531cbe0 100644
--- a/src/DataFactory/DataFactories/Models/DataFactoryClient.Datasets.cs
+++ b/src/DataFactory/DataFactories/Models/DataFactoryClient.Datasets.cs
@@ -70,7 +70,7 @@ namespace Microsoft.Azure.Commands.DataFactories
             }
             filterOptions.NextLink = response != null ? response.NextLink : null;
 
-            if (response != null && response.Datasets != null)
+            if (response?.Datasets != null)
             {
                 foreach (var dataset in response.Datasets)
                 {
diff --git a/src/DataFactory/DataFactories/Models/DataFactoryClient.Hubs.cs b/src/DataFactory/DataFactories/Models/DataFactoryClient.Hubs.cs
index 97eb088d2f..a95b1cbe6a 100644
--- a/src/DataFactory/DataFactories/Models/DataFactoryClient.Hubs.cs
+++ b/src/DataFactory/DataFactories/Models/DataFactoryClient.Hubs.cs
@@ -130,7 +130,7 @@ namespace Microsoft.Azure.Commands.DataFactories
             }
             filterOptions.NextLink = response != null ? response.NextLink : null;
 
-            if (response != null && response.Hubs != null)
+            if (response?.Hubs != null)
             {
                 foreach (var hub in response.Hubs)
                 {
diff --git a/src/DataFactory/DataFactories/Models/DataFactoryClient.LinkedServices.cs b/src/DataFactory/DataFactories/Models/DataFactoryClient.LinkedServices.cs
index 02500a913e..0aeaf94488 100644
--- a/src/DataFactory/DataFactories/Models/DataFactoryClient.LinkedServices.cs
+++ b/src/DataFactory/DataFactories/Models/DataFactoryClient.LinkedServices.cs
@@ -73,7 +73,7 @@ namespace Microsoft.Azure.Commands.DataFactories
             }
             filterOptions.NextLink = response != null ? response.NextLink : null;
 
-            if (response != null && response.LinkedServices != null)
+            if (response?.LinkedServices != null)
             {
                 foreach (var linkedService in response.LinkedServices)
                 {
diff --git a/src/DataFactory/DataFactories/Models/DataFactoryClient.Pipelines.cs b/src/DataFactory/DataFactories/Models/DataFactoryClient.Pipelines.cs
index 47e2f79fc5..36b2876ecb 100644
--- a/src/DataFactory/DataFactories/Models/DataFactoryClient.Pipelines.cs
+++ b/src/DataFactory/DataFactories/Models/DataFactoryClient.Pipelines.cs
@@ -82,7 +82,7 @@ namespace Microsoft.Azure.Commands.DataFactories
             }
             filterOptions.NextLink = response != null ? response.NextLink : null;
 
-            if (response != null && response.Pipelines != null)
+            if (response?.Pipelines != null)
             {
                 foreach (var pipeline in response.Pipelines)
                 {
diff --git a/src/DataFactory/DataFactoryV2/DataFactories/SetAzureDataFactoryCommand.cs b/src/DataFactory/DataFactoryV2/DataFactories/SetAzureDataFactoryCommand.cs
index 45810e421b..a9a3adc52e 100644
--- a/src/DataFactory/DataFactoryV2/DataFactories/SetAzureDataFactoryCommand.cs
+++ b/src/DataFactory/DataFactoryV2/DataFactories/SetAzureDataFactoryCommand.cs
@@ -490,16 +490,14 @@ namespace Microsoft.Azure.Commands.DataFactoryV2
                     this.RepositoryName = this.RepositoryName ?? InputObject.RepoConfiguration.RepositoryName;
                     this.RootFolder = this.RootFolder ?? InputObject.RepoConfiguration.RootFolder;
 
-                    var factoryVSTSConfiguration = InputObject.RepoConfiguration as FactoryVSTSConfiguration;
-                    if (factoryVSTSConfiguration != null)
+                    if (InputObject.RepoConfiguration is FactoryVSTSConfiguration factoryVSTSConfiguration)
                     {
                         this.ProjectName = this.ProjectName ?? factoryVSTSConfiguration.ProjectName;
                         this.TenantId = this.TenantId ?? factoryVSTSConfiguration.TenantId;
                     }
                     else
                     {
-                        var factoryGitHubConfiguration = InputObject.RepoConfiguration as FactoryGitHubConfiguration;
-                        if (factoryGitHubConfiguration != null)
+                        if (InputObject.RepoConfiguration is FactoryGitHubConfiguration factoryGitHubConfiguration)
                         {
                             this.HostName = this.HostName ?? factoryGitHubConfiguration.HostName;
                         }
diff --git a/src/DataFactory/DataFactoryV2/DataFactoryBaseCmdlet.cs b/src/DataFactory/DataFactoryV2/DataFactoryBaseCmdlet.cs
index dbd679c9fd..371ab4fb13 100644
--- a/src/DataFactory/DataFactoryV2/DataFactoryBaseCmdlet.cs
+++ b/src/DataFactory/DataFactoryV2/DataFactoryBaseCmdlet.cs
@@ -42,8 +42,7 @@ namespace Microsoft.Azure.Commands.DataFactoryV2
 
         protected override void WriteExceptionError(Exception exception)
         {
-            var castErrorException = exception as CloudException;
-            if (castErrorException != null)
+            if (exception is CloudException castErrorException)
             {
                 if (castErrorException.Body == null && !string.IsNullOrWhiteSpace(castErrorException.Response.Content))
                 {
@@ -56,8 +55,7 @@ namespace Microsoft.Azure.Commands.DataFactoryV2
             }
             else 
             {
-                var castArgException = exception as ArgumentOutOfRangeException;
-                if (castArgException != null)
+                if (exception is ArgumentOutOfRangeException castArgException)
                 {
                     // Add resource naming rules page link into a formatted message
                     exception = castArgException.CreateFormattedException();
@@ -70,7 +68,7 @@ namespace Microsoft.Azure.Commands.DataFactoryV2
                 else
                 {
                     var castAggrException = exception as AggregateException;
-                    if (castAggrException != null && castAggrException.InnerExceptions != null)
+                    if (castAggrException?.InnerExceptions != null)
                     {
                         foreach (Exception innerEx in castAggrException.InnerExceptions)
                         {
diff --git a/src/DataFactory/DataFactoryV2/IntegrationRuntimes/GetAzureDataFactoryIntegrationRuntimeNodeCommand.cs b/src/DataFactory/DataFactoryV2/IntegrationRuntimes/GetAzureDataFactoryIntegrationRuntimeNodeCommand.cs
index 0c2582b3c4..d04d8da7ce 100644
--- a/src/DataFactory/DataFactoryV2/IntegrationRuntimes/GetAzureDataFactoryIntegrationRuntimeNodeCommand.cs
+++ b/src/DataFactory/DataFactoryV2/IntegrationRuntimes/GetAzureDataFactoryIntegrationRuntimeNodeCommand.cs
@@ -42,8 +42,7 @@ namespace Microsoft.Azure.Commands.DataFactoryV2
             var status = DataFactoryClient.GetIntegrationRuntimeStatusAsync(ResourceGroupName, DataFactoryName,
                 IntegrationRuntimeName).ConfigureAwait(false).GetAwaiter().GetResult();
 
-            var managedStatus = status as PSManagedIntegrationRuntimeStatus;
-            if (managedStatus != null)
+            if (status is PSManagedIntegrationRuntimeStatus managedStatus)
             {
                 if (IpAddress.IsPresent)
                 {
@@ -71,8 +70,7 @@ namespace Microsoft.Azure.Commands.DataFactoryV2
                 WriteObject(new PSManagedIntegrationRuntimeNode(ResourceGroupName, DataFactoryName, IntegrationRuntimeName, Name, node));                
             }
 
-            var selfHostedStatus = status as PSSelfHostedIntegrationRuntimeStatus;
-            if (selfHostedStatus != null)
+            if (status is PSSelfHostedIntegrationRuntimeStatus selfHostedStatus)
             {
                 var node = selfHostedStatus.Nodes.FirstOrDefault(n => n.NodeName == Name);
                 if (node == null)
diff --git a/src/DataFactory/DataFactoryV2/IntegrationRuntimes/SetAzureDataFactoryIntegrationRuntimeCommand.cs b/src/DataFactory/DataFactoryV2/IntegrationRuntimes/SetAzureDataFactoryIntegrationRuntimeCommand.cs
index 3e369198c5..949b3e6f21 100644
--- a/src/DataFactory/DataFactoryV2/IntegrationRuntimes/SetAzureDataFactoryIntegrationRuntimeCommand.cs
+++ b/src/DataFactory/DataFactoryV2/IntegrationRuntimes/SetAzureDataFactoryIntegrationRuntimeCommand.cs
@@ -577,8 +577,7 @@ namespace Microsoft.Azure.Commands.DataFactoryV2
 
             if (!string.IsNullOrWhiteSpace(SharedIntegrationRuntimeResourceId))
             {
-                var selfHostedIr = resource.Properties as SelfHostedIntegrationRuntime;
-                if (selfHostedIr != null)
+                if (resource.Properties is SelfHostedIntegrationRuntime selfHostedIr)
                 {
                     selfHostedIr.LinkedInfo = new LinkedIntegrationRuntimeRbacAuthorization(SharedIntegrationRuntimeResourceId);
                 }
@@ -597,8 +596,7 @@ namespace Microsoft.Azure.Commands.DataFactoryV2
                 resource.Properties.Description = Description;
             }
 
-            var managedIr = resource.Properties as ManagedIntegrationRuntime;
-            if (managedIr != null)
+            if (resource.Properties is ManagedIntegrationRuntime managedIr)
             {
                 HandleManagedIntegrationRuntime(managedIr);
             }
diff --git a/src/DataFactory/DataFactoryV2/Models/DataFactoryClient.LinkedServices.cs b/src/DataFactory/DataFactoryV2/Models/DataFactoryClient.LinkedServices.cs
index ed4686a1f5..a6ef5c9169 100644
--- a/src/DataFactory/DataFactoryV2/Models/DataFactoryClient.LinkedServices.cs
+++ b/src/DataFactory/DataFactoryV2/Models/DataFactoryClient.LinkedServices.cs
@@ -43,7 +43,7 @@ namespace Microsoft.Azure.Commands.DataFactoryV2
             }
             catch (Exception ex)
             {
-                throw new ArgumentException(string.Format("Json is not valid. Details: '{0}'", ex));
+                throw new ArgumentException($"Json is not valid. Details: '{ex}'");
             }
 
             // If create or update failed, the current behavior is to throw
diff --git a/src/DataFactory/DataFactoryV2/Models/DataFactoryClient.Pipelines.cs b/src/DataFactory/DataFactoryV2/Models/DataFactoryClient.Pipelines.cs
index fff91d7d6e..5788c40432 100644
--- a/src/DataFactory/DataFactoryV2/Models/DataFactoryClient.Pipelines.cs
+++ b/src/DataFactory/DataFactoryV2/Models/DataFactoryClient.Pipelines.cs
@@ -43,7 +43,7 @@ namespace Microsoft.Azure.Commands.DataFactoryV2
             }
             catch (Exception ex)
             {
-                throw new ArgumentException(string.Format("Json is not valid. Details: '{0}'", ex));
+                throw new ArgumentException($"Json is not valid. Details: '{ex}'");
             }
 
             PipelineResource response =
diff --git a/src/DataFactory/DataFactoryV2/Models/DataFactoryClient.Trigger.cs b/src/DataFactory/DataFactoryV2/Models/DataFactoryClient.Trigger.cs
index 874d91bbb3..e6d48d467d 100644
--- a/src/DataFactory/DataFactoryV2/Models/DataFactoryClient.Trigger.cs
+++ b/src/DataFactory/DataFactoryV2/Models/DataFactoryClient.Trigger.cs
@@ -146,7 +146,7 @@ namespace Microsoft.Azure.Commands.DataFactoryV2
             }
             catch (Exception ex)
             {
-                throw new ArgumentException(string.Format("Json is not valid. Details: '{0}'", ex));
+                throw new ArgumentException($"Json is not valid. Details: '{ex}'");
             }
 
             // If create or update failed, the current behavior is to throw
diff --git a/src/DataLakeAnalytics/DataLakeAnalytics.Test/ScenarioTests/AdlaAliasTests.cs b/src/DataLakeAnalytics/DataLakeAnalytics.Test/ScenarioTests/AdlaAliasTests.cs
index a0b04865c1..a595f3c8b3 100644
--- a/src/DataLakeAnalytics/DataLakeAnalytics.Test/ScenarioTests/AdlaAliasTests.cs
+++ b/src/DataLakeAnalytics/DataLakeAnalytics.Test/ScenarioTests/AdlaAliasTests.cs
@@ -34,9 +34,7 @@ namespace Microsoft.Azure.Commands.DataLakeAnalytics.Test.ScenarioTests
         {
             AdlaTestsBase.NewInstance.RunPsTest(true,
                 _logger,
-                string.Format(
-                    "Test-DataLakeAnalyticsAccount -blobAccountKey -location '{0}'",
-                    AdlaTestsBase.ResourceGroupLocation));
+                $"Test-DataLakeAnalyticsAccount -blobAccountKey -location '{AdlaTestsBase.ResourceGroupLocation}'");
         }
 
         [Fact]
@@ -45,9 +43,7 @@ namespace Microsoft.Azure.Commands.DataLakeAnalytics.Test.ScenarioTests
         {
             AdlaTestsBase.NewInstance.RunPsTest(false,
                 _logger,
-                string.Format(
-                    "Test-DataLakeAnalyticsAccountTiers -location '{0}'",
-                    AdlaTestsBase.ResourceGroupLocation));
+                $"Test-DataLakeAnalyticsAccountTiers -location '{AdlaTestsBase.ResourceGroupLocation}'");
         }
 
         [Fact]
@@ -56,9 +52,7 @@ namespace Microsoft.Azure.Commands.DataLakeAnalytics.Test.ScenarioTests
         {
             AdlaTestsBase.NewInstance.RunPsTest(false,
                 _logger,
-                string.Format(
-                    "Test-DataLakeAnalyticsFirewall -location '{0}'",
-                    AdlaTestsBase.ResourceGroupLocation));
+                $"Test-DataLakeAnalyticsFirewall -location '{AdlaTestsBase.ResourceGroupLocation}'");
         }
 
         [Fact]
@@ -67,9 +61,7 @@ namespace Microsoft.Azure.Commands.DataLakeAnalytics.Test.ScenarioTests
         {
             AdlaTestsBase.NewInstance.RunPsTest(false,
                 _logger,
-                string.Format(
-                    "Test-DataLakeAnalyticsComputePolicy -location '{0}'",
-                    AdlaTestsBase.ResourceGroupLocation));
+                $"Test-DataLakeAnalyticsComputePolicy -location '{AdlaTestsBase.ResourceGroupLocation}'");
         }
 
 #if NETSTANDARD
@@ -82,9 +74,7 @@ namespace Microsoft.Azure.Commands.DataLakeAnalytics.Test.ScenarioTests
         {
             AdlaTestsBase.NewInstance.RunPsTest(false,
                 _logger,
-                string.Format(
-                    "Test-DataLakeAnalyticsCatalog -location '{0}'",
-                    AdlaTestsBase.ResourceGroupLocation));
+                $"Test-DataLakeAnalyticsCatalog -location '{AdlaTestsBase.ResourceGroupLocation}'");
         }
 
         [Fact]
@@ -93,9 +83,7 @@ namespace Microsoft.Azure.Commands.DataLakeAnalytics.Test.ScenarioTests
         {
             AdlaTestsBase.NewInstance.RunPsTest(false,
                 _logger,
-                string.Format(
-                    "Test-DataLakeAnalyticsJob -location '{0}'",
-                    AdlaTestsBase.ResourceGroupLocation));
+                $"Test-DataLakeAnalyticsJob -location '{AdlaTestsBase.ResourceGroupLocation}'");
         }
 
         [Fact]
@@ -104,9 +92,7 @@ namespace Microsoft.Azure.Commands.DataLakeAnalytics.Test.ScenarioTests
         {
             AdlaTestsBase.NewInstance.RunPsTest(false,
                 _logger,
-                string.Format(
-                    "Test-DataLakeAnalyticsJobRelationships -location '{0}'",
-                    AdlaTestsBase.ResourceGroupLocation));
+                $"Test-DataLakeAnalyticsJobRelationships -location '{AdlaTestsBase.ResourceGroupLocation}'");
         }
 
         [Fact]
@@ -115,9 +101,7 @@ namespace Microsoft.Azure.Commands.DataLakeAnalytics.Test.ScenarioTests
         {
             AdlaTestsBase.NewInstance.RunPsTest(false,
                 _logger,
-                string.Format(
-                    "Test-NegativeDataLakeAnalyticsAccount -location '{0}'",
-                    AdlaTestsBase.ResourceGroupLocation));
+                $"Test-NegativeDataLakeAnalyticsAccount -location '{AdlaTestsBase.ResourceGroupLocation}'");
         }
 
         [Fact]
@@ -126,9 +110,7 @@ namespace Microsoft.Azure.Commands.DataLakeAnalytics.Test.ScenarioTests
         {
             AdlaTestsBase.NewInstance.RunPsTest(false,
                 _logger,
-                string.Format(
-                    "Test-NegativeDataLakeAnalyticsJob -location '{0}'",
-                    AdlaTestsBase.ResourceGroupLocation));
+                $"Test-NegativeDataLakeAnalyticsJob -location '{AdlaTestsBase.ResourceGroupLocation}'");
         }
     }
 }
diff --git a/src/DataLakeAnalytics/DataLakeAnalytics.Test/ScenarioTests/AdlaTests.cs b/src/DataLakeAnalytics/DataLakeAnalytics.Test/ScenarioTests/AdlaTests.cs
index 41ace18237..463338ece4 100644
--- a/src/DataLakeAnalytics/DataLakeAnalytics.Test/ScenarioTests/AdlaTests.cs
+++ b/src/DataLakeAnalytics/DataLakeAnalytics.Test/ScenarioTests/AdlaTests.cs
@@ -34,9 +34,7 @@ namespace Microsoft.Azure.Commands.DataLakeAnalytics.Test.ScenarioTests
         {
             AdlaTestsBase.NewInstance.RunPsTest(true,
                 _logger,
-                string.Format(
-                    "Test-DataLakeAnalyticsAccount -blobAccountKey -location '{0}'",
-                    AdlaTestsBase.ResourceGroupLocation));
+                $"Test-DataLakeAnalyticsAccount -blobAccountKey -location '{AdlaTestsBase.ResourceGroupLocation}'");
         }
 
         [Fact]
@@ -45,9 +43,7 @@ namespace Microsoft.Azure.Commands.DataLakeAnalytics.Test.ScenarioTests
         {
             AdlaTestsBase.NewInstance.RunPsTest(false,
                 _logger,
-                string.Format(
-                    "Test-DataLakeAnalyticsAccountTiers -location '{0}'",
-                    AdlaTestsBase.ResourceGroupLocation));
+                $"Test-DataLakeAnalyticsAccountTiers -location '{AdlaTestsBase.ResourceGroupLocation}'");
         }
 
         [Fact]
@@ -56,9 +52,7 @@ namespace Microsoft.Azure.Commands.DataLakeAnalytics.Test.ScenarioTests
         {
             AdlaTestsBase.NewInstance.RunPsTest(false,
                 _logger,
-                string.Format(
-                    "Test-DataLakeAnalyticsFirewall -location '{0}'",
-                    AdlaTestsBase.ResourceGroupLocation));
+                $"Test-DataLakeAnalyticsFirewall -location '{AdlaTestsBase.ResourceGroupLocation}'");
         }
 
         [Fact]
@@ -67,9 +61,7 @@ namespace Microsoft.Azure.Commands.DataLakeAnalytics.Test.ScenarioTests
         {
             AdlaTestsBase.NewInstance.RunPsTest(false,
                 _logger,
-                string.Format(
-                    "Test-DataLakeAnalyticsComputePolicy -location '{0}'",
-                    AdlaTestsBase.ResourceGroupLocation));
+                $"Test-DataLakeAnalyticsComputePolicy -location '{AdlaTestsBase.ResourceGroupLocation}'");
         }
 
 #if NETSTANDARD
@@ -82,9 +74,7 @@ namespace Microsoft.Azure.Commands.DataLakeAnalytics.Test.ScenarioTests
         {
             AdlaTestsBase.NewInstance.RunPsTest(false,
                 _logger,
-                string.Format(
-                    "Test-DataLakeAnalyticsCatalog -location '{0}'",
-                    AdlaTestsBase.ResourceGroupLocation));
+                $"Test-DataLakeAnalyticsCatalog -location '{AdlaTestsBase.ResourceGroupLocation}'");
         }
 
         [Fact]
@@ -93,9 +83,7 @@ namespace Microsoft.Azure.Commands.DataLakeAnalytics.Test.ScenarioTests
         {
             AdlaTestsBase.NewInstance.RunPsTest(false,
                 _logger,
-                string.Format(
-                    "Test-DataLakeAnalyticsJob -location '{0}'",
-                    AdlaTestsBase.ResourceGroupLocation));
+                $"Test-DataLakeAnalyticsJob -location '{AdlaTestsBase.ResourceGroupLocation}'");
         }
 
         [Fact]
@@ -104,9 +92,7 @@ namespace Microsoft.Azure.Commands.DataLakeAnalytics.Test.ScenarioTests
         {
             AdlaTestsBase.NewInstance.RunPsTest(false,
                 _logger,
-                string.Format(
-                    "Test-DataLakeAnalyticsJobRelationships -location '{0}'",
-                    AdlaTestsBase.ResourceGroupLocation));
+                $"Test-DataLakeAnalyticsJobRelationships -location '{AdlaTestsBase.ResourceGroupLocation}'");
         }
 
         [Fact]
@@ -115,9 +101,7 @@ namespace Microsoft.Azure.Commands.DataLakeAnalytics.Test.ScenarioTests
         {
             AdlaTestsBase.NewInstance.RunPsTest(false,
                 _logger,
-                string.Format(
-                    "Test-NegativeDataLakeAnalyticsAccount -location '{0}'",
-                    AdlaTestsBase.ResourceGroupLocation));
+                $"Test-NegativeDataLakeAnalyticsAccount -location '{AdlaTestsBase.ResourceGroupLocation}'");
         }
 
         [Fact]
@@ -126,9 +110,7 @@ namespace Microsoft.Azure.Commands.DataLakeAnalytics.Test.ScenarioTests
         {
             AdlaTestsBase.NewInstance.RunPsTest(false,
                 _logger,
-                string.Format(
-                    "Test-NegativeDataLakeAnalyticsJob -location '{0}'",
-                    AdlaTestsBase.ResourceGroupLocation));
+                $"Test-NegativeDataLakeAnalyticsJob -location '{AdlaTestsBase.ResourceGroupLocation}'");
         }
     }
 }
diff --git a/src/DataLakeAnalytics/DataLakeAnalytics.Test/ScenarioTests/AdlaTestsBase.cs b/src/DataLakeAnalytics/DataLakeAnalytics.Test/ScenarioTests/AdlaTestsBase.cs
index 2f0122e799..a05d0d4668 100644
--- a/src/DataLakeAnalytics/DataLakeAnalytics.Test/ScenarioTests/AdlaTestsBase.cs
+++ b/src/DataLakeAnalytics/DataLakeAnalytics.Test/ScenarioTests/AdlaTestsBase.cs
@@ -134,7 +134,7 @@ namespace Microsoft.Azure.Commands.DataLakeAnalytics.Test.ScenarioTests
                         if (psScripts[i].Contains("-blobAccountKey") && createWasbAccount)
                         {
                             psScripts[i] = psScripts[i].Replace("-blobAccountKey",
-                                string.Format("-blobAccountName {0} -blobAccountKey '{1}'", AzureBlobStoreName, AzureBlobStoreAccessKey));
+                                $"-blobAccountName {AzureBlobStoreName} -blobAccountKey '{AzureBlobStoreAccessKey}'");
                         }
                     }
 
@@ -224,7 +224,7 @@ namespace Microsoft.Azure.Commands.DataLakeAnalytics.Test.ScenarioTests
             NewResourceManagementClient.ResourceGroups.CreateOrUpdateWithHttpMessagesAsync(resourceGroupName, new ResourceGroup { Location = location }).Wait();
             var newlyCreatedGroup = NewResourceManagementClient.ResourceGroups.GetWithHttpMessagesAsync(resourceGroupName).Result;
             ThrowIfTrue(newlyCreatedGroup == null, "resourceManagementClient.ResourceGroups.Get returned null.");
-            ThrowIfTrue(!resourceGroupName.Equals(newlyCreatedGroup?.Body.Name), string.Format("resourceGroupName is not equal to {0}", resourceGroupName));
+            ThrowIfTrue(!resourceGroupName.Equals(newlyCreatedGroup?.Body.Name), $"resourceGroupName is not equal to {resourceGroupName}");
         }
 
         public string TryCreateStorageAccount(string resourceGroupName, string storageAccountName, string label, string description, string location, out string storageAccountSuffix)
diff --git a/src/DataLakeAnalytics/DataLakeAnalytics/Commands/GetAzureRmDataLakeAnalyticsJob.cs b/src/DataLakeAnalytics/DataLakeAnalytics/Commands/GetAzureRmDataLakeAnalyticsJob.cs
index d78d41f2af..28e2170ab4 100644
--- a/src/DataLakeAnalytics/DataLakeAnalytics/Commands/GetAzureRmDataLakeAnalyticsJob.cs
+++ b/src/DataLakeAnalytics/DataLakeAnalytics/Commands/GetAzureRmDataLakeAnalyticsJob.cs
@@ -141,51 +141,51 @@ namespace Microsoft.Azure.Commands.DataLakeAnalytics
                 if (!string.IsNullOrEmpty(Submitter))
                 {
                     // TODO: replace with the wildcard substitution.
-                    filter.Add(string.Format("submitter eq '{0}'", Submitter));
+                    filter.Add($"submitter eq '{Submitter}'");
                 }
 
                 // due to issue: https://github.com/Azure/autorest/issues/975,
                 // date time offsets must be explicitly escaped before being passed to the filter
                 if (SubmittedAfter.HasValue)
                 {
-                    filter.Add(string.Format("submitTime ge datetimeoffset'{0}'", Uri.EscapeDataString(SubmittedAfter.Value.ToString("O"))));
+                    filter.Add($"submitTime ge datetimeoffset'{Uri.EscapeDataString(SubmittedAfter.Value.ToString("O"))}'");
                 }
 
                 // due to issue: https://github.com/Azure/autorest/issues/975,
                 // date time offsets must be explicitly escaped before being passed to the filter
                 if (SubmittedBefore.HasValue)
                 {
-                    filter.Add(string.Format("submitTime lt datetimeoffset'{0}'", Uri.EscapeDataString(SubmittedBefore.Value.ToString("O"))));
+                    filter.Add($"submitTime lt datetimeoffset'{Uri.EscapeDataString(SubmittedBefore.Value.ToString("O"))}'");
                 }
 
                 if (!string.IsNullOrEmpty(Name))
                 {
                     // TODO: replace with the wildcard substitution.
-                    filter.Add(string.Format("name eq '{0}'", Name));
+                    filter.Add($"name eq '{Name}'");
                 }
 
                 if (State != null && State.Length > 0)
                 {
                     filter.Add("(" +
                                string.Join(" or ",
-                                   State.Select(state => string.Format("state eq '{0}'", state)).ToArray()) + ")");
+                                   State.Select(state => $"state eq '{state}'").ToArray()) + ")");
                 }
 
                 if (Result != null && Result.Length > 0)
                 {
                     filter.Add("(" +
                                string.Join(" or ",
-                                   Result.Select(result => string.Format("result eq '{0}'", result)).ToArray()) + ")");
+                                   Result.Select(result => $"result eq '{result}'").ToArray()) + ")");
                 }
 
                 if (PipelineId.HasValue)
                 {
-                    filter.Add(string.Format("related/pipelineId eq guid'{0}'", PipelineId.Value));
+                    filter.Add($"related/pipelineId eq guid'{PipelineId.Value}'");
                 }
 
                 if (RecurrenceId.HasValue)
                 {
-                    filter.Add(string.Format("related/recurrenceId eq guid'{0}'", RecurrenceId.Value));
+                    filter.Add($"related/recurrenceId eq guid'{RecurrenceId.Value}'");
                 }
 
                 var filterString = string.Join(" and ", filter.ToArray());
diff --git a/src/DataLakeAnalytics/DataLakeAnalytics/Commands/NewAzureRmDataLakeAnalyticsCatalogCredential.cs b/src/DataLakeAnalytics/DataLakeAnalytics/Commands/NewAzureRmDataLakeAnalyticsCatalogCredential.cs
index 72cbb3f54c..2be09d24a8 100644
--- a/src/DataLakeAnalytics/DataLakeAnalytics/Commands/NewAzureRmDataLakeAnalyticsCatalogCredential.cs
+++ b/src/DataLakeAnalytics/DataLakeAnalytics/Commands/NewAzureRmDataLakeAnalyticsCatalogCredential.cs
@@ -75,7 +75,7 @@ namespace Microsoft.Azure.Commands.DataLakeAnalytics
                 WriteWarning(string.Format(Resources.NoPortSpecified, Uri));
             }
 
-            var toUse = Uri ?? new Uri(string.Format("https://{0}:{1}", DatabaseHost, Port));
+            var toUse = Uri ?? new Uri($"https://{DatabaseHost}:{Port}");
             ConfirmAction(
                 string.Format(Resources.NewDataLakeCatalogCredential, CredentialName, DatabaseName), 
                 CredentialName, () =>
diff --git a/src/DataLakeAnalytics/DataLakeAnalytics/Commands/SetAzureRmDataLakeAnalyticsCatalogCredential.cs b/src/DataLakeAnalytics/DataLakeAnalytics/Commands/SetAzureRmDataLakeAnalyticsCatalogCredential.cs
index a8ba384e41..0120fabe79 100644
--- a/src/DataLakeAnalytics/DataLakeAnalytics/Commands/SetAzureRmDataLakeAnalyticsCatalogCredential.cs
+++ b/src/DataLakeAnalytics/DataLakeAnalytics/Commands/SetAzureRmDataLakeAnalyticsCatalogCredential.cs
@@ -83,7 +83,7 @@ namespace Microsoft.Azure.Commands.DataLakeAnalytics
                 WriteWarning(string.Format(Resources.NoPortSpecified, Uri));
             }
 
-            var toUse = Uri ?? new Uri(string.Format("https://{0}:{1}", DatabaseHost, Port));
+            var toUse = Uri ?? new Uri($"https://{DatabaseHost}:{Port}");
             ConfirmAction(
                 string.Format(Resources.SetDataLakeCatalogCredential, CredentialName, DatabaseName),
                 CredentialName, () =>
diff --git a/src/DataLakeAnalytics/DataLakeAnalytics/Commands/SubmitAzureRmDataLakeAnalyticsJob.cs b/src/DataLakeAnalytics/DataLakeAnalytics/Commands/SubmitAzureRmDataLakeAnalyticsJob.cs
index 88cf893c94..4d593c1a32 100644
--- a/src/DataLakeAnalytics/DataLakeAnalytics/Commands/SubmitAzureRmDataLakeAnalyticsJob.cs
+++ b/src/DataLakeAnalytics/DataLakeAnalytics/Commands/SubmitAzureRmDataLakeAnalyticsJob.cs
@@ -416,112 +416,76 @@ namespace Microsoft.Azure.Commands.DataLakeAnalytics
                     
                     if (paramType.Equals(typeof(byte)))
                     {
-                        paramBuilder.Append(string.Format("DECLARE @{0} byte = {1};\n", 
-                            paramVar,
-                            paramValue));
+                        paramBuilder.Append($"DECLARE @{paramVar} byte = {paramValue};\n");
                     }
                     else if (paramType.Equals(typeof(sbyte)))
                     {
-                        paramBuilder.Append(string.Format("DECLARE @{0} sbyte = {1};\n",
-                            paramVar,
-                            paramValue));
+                        paramBuilder.Append($"DECLARE @{paramVar} sbyte = {paramValue};\n");
                     }
                     else if (paramType.Equals(typeof(int)))
                     {
-                        paramBuilder.Append(string.Format("DECLARE @{0} int = {1};\n",
-                            paramVar,
-                            paramValue));
+                        paramBuilder.Append($"DECLARE @{paramVar} int = {paramValue};\n");
                     }
                     else if (paramType.Equals(typeof(uint)))
                     {
-                        paramBuilder.Append(string.Format("DECLARE @{0} uint = {1};\n",
-                            paramVar,
-                            paramValue));
+                        paramBuilder.Append($"DECLARE @{paramVar} uint = {paramValue};\n");
                     }
                     else if (paramType.Equals(typeof(long)))
                     {
-                        paramBuilder.Append(string.Format("DECLARE @{0} long = {1};\n",
-                            paramVar,
-                            paramValue));
+                        paramBuilder.Append($"DECLARE @{paramVar} long = {paramValue};\n");
                     }
                     else if (paramType.Equals(typeof(ulong)))
                     {
-                        paramBuilder.Append(string.Format("DECLARE @{0} ulong = {1};\n",
-                            paramVar,
-                            paramValue));
+                        paramBuilder.Append($"DECLARE @{paramVar} ulong = {paramValue};\n");
                     }
                     else if (paramType.Equals(typeof(float)))
                     {
-                        paramBuilder.Append(string.Format("DECLARE @{0} float = {1};\n",
-                            paramVar,
-                            paramValue));
+                        paramBuilder.Append($"DECLARE @{paramVar} float = {paramValue};\n");
                     }
                     else if (paramType.Equals(typeof(double)))
                     {
-                        paramBuilder.Append(string.Format("DECLARE @{0} double = {1};\n",
-                            paramVar,
-                            paramValue));
+                        paramBuilder.Append($"DECLARE @{paramVar} double = {paramValue};\n");
                     }
                     else if (paramType.Equals(typeof(decimal)))
                     {
-                        paramBuilder.Append(string.Format("DECLARE @{0} decimal = {1};\n",
-                            paramVar,
-                            paramValue));
+                        paramBuilder.Append($"DECLARE @{paramVar} decimal = {paramValue};\n");
                     }
                     else if (paramType.Equals(typeof(short)))
                     {
-                        paramBuilder.Append(string.Format("DECLARE @{0} short = {1};\n",
-                            paramVar,
-                            paramValue));
+                        paramBuilder.Append($"DECLARE @{paramVar} short = {paramValue};\n");
                     }
                     else if (paramType.Equals(typeof(ushort)))
                     {
-                        paramBuilder.Append(string.Format("DECLARE @{0} ushort = {1};\n",
-                            paramVar,
-                            paramValue));
+                        paramBuilder.Append($"DECLARE @{paramVar} ushort = {paramValue};\n");
                     }
                     else if (paramType.Equals(typeof(char)))
                     {
-                        paramBuilder.Append(string.Format("DECLARE @{0} char = '{1}';\n",
-                            paramVar,
-                            paramValue));
+                        paramBuilder.Append($"DECLARE @{paramVar} char = '{paramValue}';\n");
                     }
                     else if (paramType.Equals(typeof(string)))
                     {
-                        paramBuilder.Append(string.Format("DECLARE @{0} string = \"{1}\";\n",
-                            paramVar,
-                            paramValue));
+                        paramBuilder.Append($"DECLARE @{paramVar} string = \"{paramValue}\";\n");
                     }
                     else if (paramType.Equals(typeof(DateTime)))
                     {
                         DateTime datetime = (DateTime)param.Value;
 
-                        paramBuilder.Append(string.Format("DECLARE @{0} DateTime = new DateTime({1}, {2}, {3}, {4}, {5}, {6}, {7});\n",
-                            paramVar,
-                            datetime.Year,
-                            datetime.Month,
-                            datetime.Day,
-                            datetime.Hour,
-                            datetime.Minute,
-                            datetime.Second,
-                            datetime.Millisecond));
+                        paramBuilder.Append($"DECLARE @{paramVar} DateTime = new DateTime({datetime.Year}, {datetime.Month}, {datetime.Day}, {datetime.Hour}, {datetime.Minute}, {datetime.Second}, {datetime.Millisecond});\n");
                     }
                     else if (paramType.Equals(typeof(bool)))
                     {
                         if ((bool)param.Value)
                         {
-                            paramBuilder.Append(string.Format("DECLARE @{0} bool = true;\n", paramVar));
+                            paramBuilder.Append($"DECLARE @{paramVar} bool = true;\n");
                         }
                         else
                         {
-                            paramBuilder.Append(string.Format("DECLARE @{0} bool = false;\n", paramVar));
+                            paramBuilder.Append($"DECLARE @{paramVar} bool = false;\n");
                         }
                     }
                     else if (paramType.Equals(typeof(Guid)))
                     {
-                        paramBuilder.Append(string.Format("DECLARE @{0} Guid = new Guid(\"{1}\");\n",
-                            paramVar,
-                            paramValue));
+                        paramBuilder.Append($"DECLARE @{paramVar} Guid = new Guid(\"{paramValue}\");\n");
                     }
                     else if (paramType.Equals(typeof(byte[])))
                     {
@@ -532,7 +496,7 @@ namespace Microsoft.Azure.Commands.DataLakeAnalytics
                         {
                             foreach (byte b in byteArray)
                             {
-                                byteArrayBuilder.Append(string.Format("\n  {0},", b.ToString()));
+                                byteArrayBuilder.Append($"\n  {b.ToString()},");
                             }
 
                             byteArrayBuilder.Append("\n};\n");
diff --git a/src/DataLakeAnalytics/DataLakeAnalytics/Models/DataLakeAnalyticsClient.cs b/src/DataLakeAnalytics/DataLakeAnalytics/Models/DataLakeAnalyticsClient.cs
index d41897d16b..df4d1b7e7c 100644
--- a/src/DataLakeAnalytics/DataLakeAnalytics/Models/DataLakeAnalyticsClient.cs
+++ b/src/DataLakeAnalytics/DataLakeAnalytics/Models/DataLakeAnalyticsClient.cs
@@ -1479,7 +1479,7 @@ namespace Microsoft.Azure.Commands.DataLakeAnalytics.Models
             if (!value.Contains("*"))
             {
                 // no wildcards, return an equal
-                return string.Format("{0} eq '{1}'", propertyName, value);
+                return $"{propertyName} eq '{value}'";
             }
 
             var subStrings = value.Split('*');
@@ -1491,13 +1491,13 @@ namespace Microsoft.Azure.Commands.DataLakeAnalytics.Models
             if(string.IsNullOrEmpty(subStrings[0]))
             {
                 // only ends with required
-                return string.Format("endswith({0},'{1}')", propertyName, subStrings[1]);
+                return $"endswith({propertyName},'{subStrings[1]}')";
             }
 
             if(string.IsNullOrEmpty(subStrings[1]))
             {
                 // only starts with
-                return string.Format("startswith({0},'{1}')", propertyName, subStrings[0]);
+                return $"startswith({propertyName},'{subStrings[0]}')";
             }
 
 
diff --git a/src/DataLakeStore/DataLakeStore.Test/ScenarioTests/AdlsAliasTests.cs b/src/DataLakeStore/DataLakeStore.Test/ScenarioTests/AdlsAliasTests.cs
index 601fdf54d2..dd4a840d23 100644
--- a/src/DataLakeStore/DataLakeStore.Test/ScenarioTests/AdlsAliasTests.cs
+++ b/src/DataLakeStore/DataLakeStore.Test/ScenarioTests/AdlsAliasTests.cs
@@ -36,35 +36,35 @@ namespace Microsoft.Azure.Commands.DataLakeStore.Test.ScenarioTests
         [Trait(Category.AcceptanceType, Category.CheckIn)]
         public void TestAdlsAccount()
         {
-            NewInstance.RunPsTest(_logger, string.Format("Test-DataLakeStoreAccount -location '{0}'", AdlsTestsBase.ResourceGroupLocation));
+            NewInstance.RunPsTest(_logger, $"Test-DataLakeStoreAccount -location '{AdlsTestsBase.ResourceGroupLocation}'");
         }
 
         [Fact]
         [Trait(Category.AcceptanceType, Category.CheckIn)]
         public void TestAdlsAccountTiers()
         {
-            NewInstance.RunPsTest(_logger, string.Format("Test-DataLakeStoreAccountTiers -location '{0}'", AdlsTestsBase.ResourceGroupLocation));
+            NewInstance.RunPsTest(_logger, $"Test-DataLakeStoreAccountTiers -location '{AdlsTestsBase.ResourceGroupLocation}'");
         }
 
         [Fact]
         [Trait(Category.AcceptanceType, Category.CheckIn)]
         public void TestAdlsFirewallRules()
         {
-            NewInstance.RunPsTest(_logger, string.Format("Test-DataLakeStoreFirewall -location '{0}'", AdlsTestsBase.ResourceGroupLocation));
+            NewInstance.RunPsTest(_logger, $"Test-DataLakeStoreFirewall -location '{AdlsTestsBase.ResourceGroupLocation}'");
         }
 
         [Fact]
         [Trait(Category.AcceptanceType, Category.CheckIn)]
         public void TestAdlsVirtualNetworkRules()
         {
-            NewInstance.RunPsTest(_logger, string.Format("Test-DataLakeStoreVirtualNetwork -location '{0}'", AdlsTestsBase.ResourceGroupLocation));
+            NewInstance.RunPsTest(_logger, $"Test-DataLakeStoreVirtualNetwork -location '{AdlsTestsBase.ResourceGroupLocation}'");
         }
 
         [Fact]
         [Trait(Category.AcceptanceType, Category.CheckIn)]
         public void TestAdlsTrustedIdProvider()
         {
-            NewInstance.RunPsTest(_logger, string.Format("Test-DataLakeStoreTrustedIdProvider -location '{0}'", AdlsTestsBase.ResourceGroupLocation));
+            NewInstance.RunPsTest(_logger, $"Test-DataLakeStoreTrustedIdProvider -location '{AdlsTestsBase.ResourceGroupLocation}'");
         }
 
         [Fact]
@@ -73,28 +73,28 @@ namespace Microsoft.Azure.Commands.DataLakeStore.Test.ScenarioTests
         {
             var workingPath = Path.GetDirectoryName(new Uri(Assembly.GetExecutingAssembly().CodeBase).AbsolutePath);
             var testLocation = Path.Combine(workingPath, "ScenarioTests", (this.GetType().Name + ".ps1"));
-            NewInstance.RunPsTest(_logger, string.Format("Test-DataLakeStoreFileSystem -fileToCopy '{0}' -location '{1}'", testLocation, AdlsTestsBase.TestFileSystemResourceGroupLocation));
+            NewInstance.RunPsTest(_logger, $"Test-DataLakeStoreFileSystem -fileToCopy '{testLocation}' -location '{AdlsTestsBase.TestFileSystemResourceGroupLocation}'");
         }
 
         [Fact]
         [Trait(Category.AcceptanceType, Category.CheckIn)]
         public void TestAdlsFileSystemPermissions()
         {
-            NewInstance.RunPsTest(_logger, string.Format("Test-DataLakeStoreFileSystemPermissions -location '{0}'", AdlsTestsBase.TestFileSystemPermissionResourceGroupLocation));
+            NewInstance.RunPsTest(_logger, $"Test-DataLakeStoreFileSystemPermissions -location '{AdlsTestsBase.TestFileSystemPermissionResourceGroupLocation}'");
         }
 
         [Fact]
         [Trait(Category.AcceptanceType, Category.CheckIn)]
         public void TestNegativeAdlsAccount()
         {
-            NewInstance.RunPsTest(_logger, string.Format("Test-NegativeDataLakeStoreAccount -location '{0}'", AdlsTestsBase.ResourceGroupLocation));
+            NewInstance.RunPsTest(_logger, $"Test-NegativeDataLakeStoreAccount -location '{AdlsTestsBase.ResourceGroupLocation}'");
         }
 
         [Fact]
         [Trait(Category.AcceptanceType, Category.CheckIn)]
         public void TestAdlsEnumerateAndRestoreDeletedItem()
         {
-            NewInstance.RunPsTest(_logger, string.Format("Test-AdlsEnumerateAndRestoreDeletedItem -location '{0}'", AdlsTestsBase.ResourceGroupLocation));
+            NewInstance.RunPsTest(_logger, $"Test-AdlsEnumerateAndRestoreDeletedItem -location '{AdlsTestsBase.ResourceGroupLocation}'");
         }
     }
 }
diff --git a/src/DataLakeStore/DataLakeStore.Test/ScenarioTests/AdlsTests.cs b/src/DataLakeStore/DataLakeStore.Test/ScenarioTests/AdlsTests.cs
index ca2f6720df..b163072f4d 100644
--- a/src/DataLakeStore/DataLakeStore.Test/ScenarioTests/AdlsTests.cs
+++ b/src/DataLakeStore/DataLakeStore.Test/ScenarioTests/AdlsTests.cs
@@ -35,35 +35,35 @@ namespace Microsoft.Azure.Commands.DataLakeStore.Test.ScenarioTests
         [Trait(Category.AcceptanceType, Category.CheckIn)]
         public void TestAdlsFirewallRules()
         {
-            NewInstance.RunPsTest(_logger, string.Format("Test-DataLakeStoreFirewall -location '{0}'", AdlsTestsBase.ResourceGroupLocation));
+            NewInstance.RunPsTest(_logger, $"Test-DataLakeStoreFirewall -location '{AdlsTestsBase.ResourceGroupLocation}'");
         }
 
         [Fact]
         [Trait(Category.AcceptanceType, Category.CheckIn)]
         public void TestAdlsVirtualNetworkRules()
         {
-            NewInstance.RunPsTest(_logger, string.Format("Test-DataLakeStoreVirtualNetwork -location '{0}'", AdlsTestsBase.ResourceGroupLocation));
+            NewInstance.RunPsTest(_logger, $"Test-DataLakeStoreVirtualNetwork -location '{AdlsTestsBase.ResourceGroupLocation}'");
         }
 
         [Fact]
         [Trait(Category.AcceptanceType, Category.CheckIn)]
         public void TestAdlsTrustedIdProvider()
         {
-            NewInstance.RunPsTest(_logger, string.Format("Test-DataLakeStoreTrustedIdProvider -location '{0}'", AdlsTestsBase.ResourceGroupLocation));
+            NewInstance.RunPsTest(_logger, $"Test-DataLakeStoreTrustedIdProvider -location '{AdlsTestsBase.ResourceGroupLocation}'");
         }
 
         [Fact]
         [Trait(Category.AcceptanceType, Category.CheckIn)]
         public void TestAdlsAccount()
         {
-            NewInstance.RunPsTest(_logger, string.Format("Test-DataLakeStoreAccount -location '{0}'", AdlsTestsBase.ResourceGroupLocation));
+            NewInstance.RunPsTest(_logger, $"Test-DataLakeStoreAccount -location '{AdlsTestsBase.ResourceGroupLocation}'");
         }
 
         [Fact]
         [Trait(Category.AcceptanceType, Category.CheckIn)]
         public void TestAdlsAccountTiers()
         {
-            NewInstance.RunPsTest(_logger, string.Format("Test-DataLakeStoreAccountTiers -location '{0}'", AdlsTestsBase.ResourceGroupLocation));
+            NewInstance.RunPsTest(_logger, $"Test-DataLakeStoreAccountTiers -location '{AdlsTestsBase.ResourceGroupLocation}'");
         }
 
         [Fact]
@@ -72,28 +72,28 @@ namespace Microsoft.Azure.Commands.DataLakeStore.Test.ScenarioTests
         {
             var workingPath = Path.GetDirectoryName(new Uri(Assembly.GetExecutingAssembly().CodeBase).AbsolutePath);
             var testLocation = Path.Combine(workingPath, "ScenarioTests", (this.GetType().Name + ".ps1"));
-            NewInstance.RunPsTest(_logger, string.Format("Test-DataLakeStoreFileSystem -fileToCopy '{0}' -location '{1}'", testLocation, AdlsTestsBase.TestFileSystemResourceGroupLocation));
+            NewInstance.RunPsTest(_logger, $"Test-DataLakeStoreFileSystem -fileToCopy '{testLocation}' -location '{AdlsTestsBase.TestFileSystemResourceGroupLocation}'");
         }
 
         [Fact]
         [Trait(Category.AcceptanceType, Category.CheckIn)]
         public void TestAdlsFileSystemPermissions()
         {
-            NewInstance.RunPsTest(_logger, string.Format("Test-DataLakeStoreFileSystemPermissions -location '{0}'", AdlsTestsBase.TestFileSystemPermissionResourceGroupLocation));
+            NewInstance.RunPsTest(_logger, $"Test-DataLakeStoreFileSystemPermissions -location '{AdlsTestsBase.TestFileSystemPermissionResourceGroupLocation}'");
         }
 
         [Fact]
         [Trait(Category.AcceptanceType, Category.CheckIn)]
         public void TestNegativeAdlsAccount()
         {
-            NewInstance.RunPsTest(_logger, string.Format("Test-NegativeDataLakeStoreAccount -location '{0}'", AdlsTestsBase.ResourceGroupLocation));
+            NewInstance.RunPsTest(_logger, $"Test-NegativeDataLakeStoreAccount -location '{AdlsTestsBase.ResourceGroupLocation}'");
         }
 
         [Fact]
         [Trait(Category.AcceptanceType, Category.CheckIn)]
         public void TestAdlsEnumerateAndRestoreDeletedItem()
         {
-            NewInstance.RunPsTest(_logger, string.Format("Test-EnumerateAndRestoreDataLakeStoreDeletedItem -location '{0}'", AdlsTestsBase.ResourceGroupLocation));
+            NewInstance.RunPsTest(_logger, $"Test-EnumerateAndRestoreDataLakeStoreDeletedItem -location '{AdlsTestsBase.ResourceGroupLocation}'");
         }
     }
 }
diff --git a/src/DataLakeStore/DataLakeStore.Test/ScenarioTests/UrlDecodingRecordMatcher.cs b/src/DataLakeStore/DataLakeStore.Test/ScenarioTests/UrlDecodingRecordMatcher.cs
index b7a769bb43..47c73b3270 100644
--- a/src/DataLakeStore/DataLakeStore.Test/ScenarioTests/UrlDecodingRecordMatcher.cs
+++ b/src/DataLakeStore/DataLakeStore.Test/ScenarioTests/UrlDecodingRecordMatcher.cs
@@ -67,7 +67,7 @@ namespace Microsoft.Azure.Commands.DataLake.Test.ScenarioTests
             }
 
             var encodedPath = Convert.ToBase64String(Encoding.UTF8.GetBytes(path));
-            return string.Format("{0} {1}", request.Method, encodedPath);
+            return $"{request.Method} {encodedPath}";
         }
 
         public override string GetMatchingKey(RecordEntry recordEntry)
@@ -97,12 +97,12 @@ namespace Microsoft.Azure.Commands.DataLake.Test.ScenarioTests
                 encodedPath = Convert.ToBase64String(Encoding.UTF8.GetBytes(path));
             }
 
-            return string.Format("{0} {1}", recordEntry.RequestMethod, encodedPath);
+            return $"{recordEntry.RequestMethod} {encodedPath}";
         }
         protected string RemoveOrReplaceLeaseIdOrFilessesionID(string requestUri)
         {
-            var removedLeaseid = Regex.Replace(requestUri, @"([\?&])leaseid=[^&]+", string.Format("$1leaseid={0}", "const"));
-            return Regex.Replace(removedLeaseid, @"([\?&])filesessionid=[^&]+", string.Format("$1filesessionid={0}", "const"));
+            var removedLeaseid = Regex.Replace(requestUri, @"([\?&])leaseid=[^&]+", $"$1leaseid={"const"}");
+            return Regex.Replace(removedLeaseid, @"([\?&])filesessionid=[^&]+", $"$1filesessionid={"const"}");
         }
     }
 }
diff --git a/src/DataLakeStore/DataLakeStore/DataPlaneCommands/RestoreAzureRmDataLakeStoreDeletedItem.cs b/src/DataLakeStore/DataLakeStore/DataPlaneCommands/RestoreAzureRmDataLakeStoreDeletedItem.cs
index 8c1c17912b..354a529906 100644
--- a/src/DataLakeStore/DataLakeStore/DataPlaneCommands/RestoreAzureRmDataLakeStoreDeletedItem.cs
+++ b/src/DataLakeStore/DataLakeStore/DataPlaneCommands/RestoreAzureRmDataLakeStoreDeletedItem.cs
@@ -102,14 +102,14 @@ namespace Microsoft.Azure.Commands.DataLakeStore
         {
             if (ParameterSetName == DefaultParameterSet)
             {
-                if (Force.IsPresent || ShouldContinue(string.Format("From - {0}\nTo   - {1}\nType - {2}", Path, Destination, Type), "Restore user data ?"))
+                if (Force.IsPresent || ShouldContinue($"From - {Path}\nTo   - {Destination}\nType - {Type}", "Restore user data ?"))
                 {
                     DataLakeStoreFileSystemClient.RestoreDeletedItem(Account, Path, Destination, Type, RestoreAction, CmdletCancellationToken);
                 }
             }
             else if(ParameterSetName == InputObjectParameterSet)
             {
-                if (Force.IsPresent || ShouldContinue(string.Format("From - {0}\nTo   - {1}\nType - {2}", DeletedItem.TrashDirPath, DeletedItem.OriginalPath, DeletedItem.Type == DataLakeStoreEnums.FileType.FILE ? "file" : "folder"), "Restore user data ?"))
+                if (Force.IsPresent || ShouldContinue($"From - {DeletedItem.TrashDirPath}\nTo   - {DeletedItem.OriginalPath}\nType - {(DeletedItem.Type == DataLakeStoreEnums.FileType.FILE ? "file" : "folder")}", "Restore user data ?"))
                 {
                     DataLakeStoreFileSystemClient.RestoreDeletedItem(Account, DeletedItem.TrashDirPath, DeletedItem.OriginalPath, (DeletedItem.Type == DataLakeStoreEnums.FileType.FILE ? "file" : "folder"), RestoreAction, CmdletCancellationToken);
                 }
diff --git a/src/DataLakeStore/DataLakeStore/DataPlaneModels/DataLakeStoreFileSystemClient.cs b/src/DataLakeStore/DataLakeStore/DataPlaneModels/DataLakeStoreFileSystemClient.cs
index c6c41bd705..2dd673e3d6 100644
--- a/src/DataLakeStore/DataLakeStore/DataPlaneModels/DataLakeStoreFileSystemClient.cs
+++ b/src/DataLakeStore/DataLakeStore/DataPlaneModels/DataLakeStoreFileSystemClient.cs
@@ -668,8 +668,7 @@ namespace Microsoft.Azure.Commands.DataLakeStore.Models
         {
             var client = AdlsClientFactory.GetAdlsClient(accountName, _context);
             var progress = new ProgressRecord(_uniqueActivityIdGenerator.Next(0, 10000000),
-                string.Format("Copying Folder: {0}{1}. Enumerating the source and preparing the copy.",
-                sourcePath, recursive ? " recursively" : string.Empty), "Copy in progress...")
+                $"Copying Folder: {sourcePath}{(recursive ? " recursively" : string.Empty)}. Enumerating the source and preparing the copy.", "Copy in progress...")
             {
                 PercentComplete = 0
             };
diff --git a/src/DataLakeStore/DataLakeStore/DataPlaneModels/DataLakeStoreFileSystemCmdletBase.cs b/src/DataLakeStore/DataLakeStore/DataPlaneModels/DataLakeStoreFileSystemCmdletBase.cs
index 48223a60af..6194030e10 100644
--- a/src/DataLakeStore/DataLakeStore/DataPlaneModels/DataLakeStoreFileSystemCmdletBase.cs
+++ b/src/DataLakeStore/DataLakeStore/DataPlaneModels/DataLakeStoreFileSystemCmdletBase.cs
@@ -96,8 +96,7 @@ namespace Microsoft.Azure.Commands.DataLakeStore.Models
             if (UsingByteEncoding(encoding))
             {
                 // first attempt to convert it directly into a byte array	
-                var byteArray = content as byte[];
-                if (byteArray != null)
+                if (content is byte[] byteArray)
                 {
                     return byteArray;
                 }
diff --git a/src/DataLakeStore/DataLakeStore/DataPlaneModels/DataLakeStoreItemAce.cs b/src/DataLakeStore/DataLakeStore/DataPlaneModels/DataLakeStoreItemAce.cs
index a60f3203d3..1a68721bdd 100644
--- a/src/DataLakeStore/DataLakeStore/DataPlaneModels/DataLakeStoreItemAce.cs
+++ b/src/DataLakeStore/DataLakeStore/DataPlaneModels/DataLakeStoreItemAce.cs
@@ -155,7 +155,7 @@ namespace Microsoft.Azure.Commands.DataLakeStore.Models
             string toReturn = string.Empty;
             foreach(var item in aces)
             {
-                toReturn += string.Format("{0},", includePermission ? item.Entry : item.NoPermissionEntry);
+                toReturn += $"{(includePermission ? item.Entry : item.NoPermissionEntry)},";
             }
 
             return toReturn.TrimEnd(',').ToLowerInvariant();
diff --git a/src/DataLakeStore/DataLakeStore/DataPlaneModels/EncodingUtils.cs b/src/DataLakeStore/DataLakeStore/DataPlaneModels/EncodingUtils.cs
index 370320c662..e1bd2fdac5 100644
--- a/src/DataLakeStore/DataLakeStore/DataPlaneModels/EncodingUtils.cs
+++ b/src/DataLakeStore/DataLakeStore/DataPlaneModels/EncodingUtils.cs
@@ -26,8 +26,7 @@ namespace Microsoft.Azure.Commands.DataLakeStore.Models
     {
         public override object Transform(EngineIntrinsics engineIntrinsics, object inputData)
         {
-            string encodingName = inputData as string;
-            if (encodingName != null)
+            if (inputData is string encodingName)
             {
                 encodingName = encodingName.ToLower();
                 switch (encodingName)
diff --git a/src/DataLakeStore/DataLakeStore/Models/DataLakeStoreTraceLogger.cs b/src/DataLakeStore/DataLakeStore/Models/DataLakeStoreTraceLogger.cs
index a620570c58..dc31be15c4 100644
--- a/src/DataLakeStore/DataLakeStore/Models/DataLakeStoreTraceLogger.cs
+++ b/src/DataLakeStore/DataLakeStore/Models/DataLakeStoreTraceLogger.cs
@@ -166,10 +166,7 @@ namespace Microsoft.Azure.Commands.DataLakeStore.Models
                 TextListener.Dispose();
             }
 
-            if(TraceStream != null)
-            {
-                TraceStream.Dispose();
-            }
+            TraceStream?.Dispose();
 
             Trace.AutoFlush = PreviousAutoFlush;
             AzureSession.Instance.AuthenticationTraceSourceLevel = PreviousAdalSourceLevel;
diff --git a/src/DataLakeStore/DataLakeStore/Models/DataLakeStoreTracingInterceptor.cs b/src/DataLakeStore/DataLakeStore/Models/DataLakeStoreTracingInterceptor.cs
index 69468901c0..95b5b1be87 100644
--- a/src/DataLakeStore/DataLakeStore/Models/DataLakeStoreTracingInterceptor.cs
+++ b/src/DataLakeStore/DataLakeStore/Models/DataLakeStoreTracingInterceptor.cs
@@ -44,7 +44,7 @@ namespace Microsoft.Azure.Commands.DataLakeStore.Models
 
         public void EnterMethod(string invocationId, object instance, string method, IDictionary<string, object> parameters)
         {
-            Logger.LogDebug("Enter {0}.{1} parameters:{2}, invocationId={3}", instance, method, string.Join(";", parameters.Select(p => string.Format("{0}={1}", p.Key, p.Value))), invocationId);
+            Logger.LogDebug("Enter {0}.{1} parameters:{2}, invocationId={3}", instance, method, string.Join(";", parameters.Select(p => $"{p.Key}={p.Value}")), invocationId);
         }
 
         public void SendRequest(string invocationId, HttpRequestMessage request)
@@ -88,28 +88,12 @@ namespace Microsoft.Azure.Commands.DataLakeStore.Models
     {
         public static string ToLogMessage(this HttpRequestMessage request)
         {
-            return string.Format(
-                "Send {0} request to {1}, headers:{2}",
-                request.Method,
-                request.RequestUri,
-                string.Join(
-                    ";",
-                    request.Headers.Where(kv => kv.Key.StartsWith("x-ms-"))
-                        .Select(h => string.Format("{0}:{1}", h.Key, string.Join(";", h.Value)))));
+            return $"Send {request.Method} request to {request.RequestUri}, headers:{string.Join(";", request.Headers.Where(kv => kv.Key.StartsWith("x-ms-")).Select(h => string.Format("{0}:{1}", h.Key, string.Join(";", h.Value))))}";
         }
 
         public static string ToLogMessage(this HttpResponseMessage response, bool getError = false)
         {
-            return string.Format(
-                "Received response for {0} {1} statusCode:{2}, headers:{3}{4}",
-                response.RequestMessage.Method,
-                response.RequestMessage.RequestUri,
-                response.StatusCode,
-                string.Join(
-                    ";",
-                    response.Headers.Where(kv => kv.Key.StartsWith("x-ms-"))
-                        .Select(h => string.Format("{0}:{1}", h.Key, string.Join(";", h.Value)))),
-                getError ? string.Format(", Error:{0}", response.Content.ReadAsStringAsync().Result) : string.Empty);
+            return $"Received response for {response.RequestMessage.Method} {response.RequestMessage.RequestUri} statusCode:{response.StatusCode}, headers:{string.Join(";", response.Headers.Where(kv => kv.Key.StartsWith("x-ms-")).Select(h => string.Format("{0}:{1}", h.Key, string.Join(";", h.Value))))}{(getError ? string.Format(", Error:{0}", response.Content.ReadAsStringAsync().Result) : string.Empty)}";
         }
     }
 }
diff --git a/src/DataMigration/DataMigration/Cmdlets/GetDataMigrationTask.cs b/src/DataMigration/DataMigration/Cmdlets/GetDataMigrationTask.cs
index 4add08853a..12a407cab7 100644
--- a/src/DataMigration/DataMigration/Cmdlets/GetDataMigrationTask.cs
+++ b/src/DataMigration/DataMigration/Cmdlets/GetDataMigrationTask.cs
@@ -193,7 +193,7 @@ namespace Microsoft.Azure.Commands.DataMigration.Cmdlets
                     }
                     else
                     {
-                        expandFilter = string.Format("output($filter= ResultType eq '{0}')", ResultType.ToString());
+                        expandFilter = $"output($filter= ResultType eq '{ResultType.ToString()}')";
                     }
                 }
                 else
diff --git a/src/DataMigration/DataMigration/Common/PagingExtensions.cs b/src/DataMigration/DataMigration/Common/PagingExtensions.cs
index d863568a1a..7e73114be8 100644
--- a/src/DataMigration/DataMigration/Common/PagingExtensions.cs
+++ b/src/DataMigration/DataMigration/Common/PagingExtensions.cs
@@ -108,10 +108,7 @@ namespace Microsoft.Azure.Commands.DataMigration.Common
 
                 public void Dispose()
                 {
-                    if (e != null)
-                    {
-                        e.Dispose();
-                    }
+                    e?.Dispose();
                     e = null;
                 }
 
diff --git a/src/DataMigration/DataMigration/Models/DatabaseInfo/MongoDbConnectionInfo.cs b/src/DataMigration/DataMigration/Models/DatabaseInfo/MongoDbConnectionInfo.cs
index ea33ffeebe..142e6b661a 100644
--- a/src/DataMigration/DataMigration/Models/DatabaseInfo/MongoDbConnectionInfo.cs
+++ b/src/DataMigration/DataMigration/Models/DatabaseInfo/MongoDbConnectionInfo.cs
@@ -50,9 +50,9 @@ namespace Microsoft.Azure.Commands.DataMigration.Models
         private void AssembleMongoDbConnectionString()
         {
             string usernamePassword = string.IsNullOrWhiteSpace(this.UserName) ? "" : 
-                string.Format("{0}:{1}@", this.UserName, this.Password);
-            this.ConnectionString = string.Format("mongodb://{0}{1}", usernamePassword, this.ServerName);
-            string portString = this.Port == null ? "": string.Format(":{0}", this.Port);
+                $"{this.UserName}:{this.Password}@";
+            this.ConnectionString = $"mongodb://{usernamePassword}{this.ServerName}";
+            string portString = this.Port == null ? "": $":{this.Port}";
             this.ConnectionString += portString;
             this.ConnectionString += this.UseSSL == true ? "/?ssl=true" : "/?ssl=false";
         }
diff --git a/src/Databricks/generated/runtime/Serialization/JsonSerializer.cs b/src/Databricks/generated/runtime/Serialization/JsonSerializer.cs
index 6909a6d365..3d5415cc46 100644
--- a/src/Databricks/generated/runtime/Serialization/JsonSerializer.cs
+++ b/src/Databricks/generated/runtime/Serialization/JsonSerializer.cs
@@ -312,7 +312,7 @@ namespace Microsoft.Azure.PowerShell.Cmdlets.Databricks.Runtime.Json
                     default: return ReadArray((IEnumerable)value);
                 }
             }
-            else if (value is IEnumerable)
+            else if (value is IEnumerable iEnumerable)
             {
                 if (type.IsList && type.ElementType != null)
                 {
@@ -330,7 +330,7 @@ namespace Microsoft.Azure.PowerShell.Cmdlets.Databricks.Runtime.Json
                     }
                 }
 
-                return ReadArray((IEnumerable)value);
+                return ReadArray(iEnumerable);
             }
             else
             {
diff --git a/src/DedicatedHsm/generated/runtime/Serialization/JsonSerializer.cs b/src/DedicatedHsm/generated/runtime/Serialization/JsonSerializer.cs
index 5f2a37f454..6028b27871 100644
--- a/src/DedicatedHsm/generated/runtime/Serialization/JsonSerializer.cs
+++ b/src/DedicatedHsm/generated/runtime/Serialization/JsonSerializer.cs
@@ -312,7 +312,7 @@ namespace Microsoft.Azure.PowerShell.Cmdlets.DedicatedHsm.Runtime.Json
                     default: return ReadArray((IEnumerable)value);
                 }
             }
-            else if (value is IEnumerable)
+            else if (value is IEnumerable iEnumerable)
             {
                 if (type.IsList && type.ElementType != null)
                 {
@@ -330,7 +330,7 @@ namespace Microsoft.Azure.PowerShell.Cmdlets.DedicatedHsm.Runtime.Json
                     }
                 }
 
-                return ReadArray((IEnumerable)value);
+                return ReadArray(iEnumerable);
             }
             else
             {
diff --git a/src/DeploymentManager/DeploymentManager/Commands/RolloutCmdletBase.cs b/src/DeploymentManager/DeploymentManager/Commands/RolloutCmdletBase.cs
index efb7c6b265..9ce0b8ef14 100644
--- a/src/DeploymentManager/DeploymentManager/Commands/RolloutCmdletBase.cs
+++ b/src/DeploymentManager/DeploymentManager/Commands/RolloutCmdletBase.cs
@@ -73,15 +73,13 @@ namespace Microsoft.Azure.Commands.DeploymentManager.Commands
             {
                 StringBuilder sb = new StringBuilder();
 
-                var rolloutOperationInfo = operationInfo as PSRolloutOperationInfo;
-                if (rolloutOperationInfo != null)
+                if (operationInfo is PSRolloutOperationInfo rolloutOperationInfo)
                 {
                     sb.AppendFormatWithLeftIndentAndNewLine(indentFactorForDetails, $"Retry Attempt: {rolloutOperationInfo.RetryAttempt}");
                     sb.AppendFormatWithLeftIndentAndNewLine(indentFactorForDetails, $"Skip Succeeded: {rolloutOperationInfo.SkipSucceededOnRetry}");
                 }
 
-                var stepOperationInfo = operationInfo as PSStepOperationInfo;
-                if (stepOperationInfo != null)
+                if (operationInfo is PSStepOperationInfo stepOperationInfo)
                 {
                     sb.AppendFormatWithLeftIndentAndNewLineIfNotNull(indentFactorForDetails, "DeploymentName", stepOperationInfo.DeploymentName);
                     sb.AppendFormatWithLeftIndentAndNewLineIfNotNull(indentFactorForDetails, "CorrelationId", stepOperationInfo.CorrelationId);
@@ -161,7 +159,7 @@ namespace Microsoft.Azure.Commands.DeploymentManager.Commands
         private void PrintDetails(PSRollout rollout)
         {
             var sb = new StringBuilder();
-            if (rollout != null && rollout.Services != null)
+            if (rollout?.Services != null)
             {
                 this.PrintServices(rollout.Services);
             }
@@ -320,7 +318,7 @@ namespace Microsoft.Azure.Commands.DeploymentManager.Commands
         private static string FormatErrorInfo(PSBaseOperationInfo operationInfo, int indentFactor)
         {
             StringBuilder sb = new StringBuilder();
-            if (operationInfo != null && operationInfo.Error != null)
+            if (operationInfo?.Error != null)
             {
                 sb.AppendFormatWithLeftIndentAndNewLineIfNotNull(
                     indentFactor,
diff --git a/src/DesktopVirtualization/generated/runtime/Serialization/JsonSerializer.cs b/src/DesktopVirtualization/generated/runtime/Serialization/JsonSerializer.cs
index e9204e34af..625a1f4a86 100644
--- a/src/DesktopVirtualization/generated/runtime/Serialization/JsonSerializer.cs
+++ b/src/DesktopVirtualization/generated/runtime/Serialization/JsonSerializer.cs
@@ -312,7 +312,7 @@ namespace Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualization.Runtime.Json
                     default: return ReadArray((IEnumerable)value);
                 }
             }
-            else if (value is IEnumerable)
+            else if (value is IEnumerable iEnumerable)
             {
                 if (type.IsList && type.ElementType != null)
                 {
@@ -330,7 +330,7 @@ namespace Microsoft.Azure.PowerShell.Cmdlets.DesktopVirtualization.Runtime.Json
                     }
                 }
 
-                return ReadArray((IEnumerable)value);
+                return ReadArray(iEnumerable);
             }
             else
             {
diff --git a/src/DeviceProvisioningServices/DeviceProvisioningServices/Common/IotDpsUtils.cs b/src/DeviceProvisioningServices/DeviceProvisioningServices/Common/IotDpsUtils.cs
index d919a13097..5387ce57bf 100644
--- a/src/DeviceProvisioningServices/DeviceProvisioningServices/Common/IotDpsUtils.cs
+++ b/src/DeviceProvisioningServices/DeviceProvisioningServices/Common/IotDpsUtils.cs
@@ -209,9 +209,9 @@ namespace Microsoft.Azure.Commands.Management.DeviceProvisioningServices
         public static SharedAccessSignatureAuthorizationRuleAccessRightsDescription GetPolicy(IEnumerable<SharedAccessSignatureAuthorizationRuleAccessRightsDescription> authorizationPolicies, PSAccessRightsDescription accessRight)
         {
             SharedAccessSignatureAuthorizationRuleAccessRightsDescription policy;
-            policy = authorizationPolicies.Where(p => p.Rights.Contains(accessRight.ToString())).FirstOrDefault();
+            policy = authorizationPolicies.FirstOrDefault(p => p.Rights.Contains(accessRight.ToString()));
             if (policy == null)
-                throw new UnauthorizedAccessException(string.Format("Missing shared access policy for {0} permission.", accessRight.ToString()));
+                throw new UnauthorizedAccessException($"Missing shared access policy for {accessRight.ToString()} permission.");
             return policy;
         }
 
diff --git a/src/DigitalTwins/generated/runtime/Serialization/JsonSerializer.cs b/src/DigitalTwins/generated/runtime/Serialization/JsonSerializer.cs
index c867bb1b8b..c6f1eec770 100644
--- a/src/DigitalTwins/generated/runtime/Serialization/JsonSerializer.cs
+++ b/src/DigitalTwins/generated/runtime/Serialization/JsonSerializer.cs
@@ -312,7 +312,7 @@ namespace Microsoft.Azure.PowerShell.Cmdlets.DigitalTwins.Runtime.Json
                     default: return ReadArray((IEnumerable)value);
                 }
             }
-            else if (value is IEnumerable)
+            else if (value is IEnumerable iEnumerable)
             {
                 if (type.IsList && type.ElementType != null)
                 {
@@ -330,7 +330,7 @@ namespace Microsoft.Azure.PowerShell.Cmdlets.DigitalTwins.Runtime.Json
                     }
                 }
 
-                return ReadArray((IEnumerable)value);
+                return ReadArray(iEnumerable);
             }
             else
             {
diff --git a/src/Dns/Dns/Models/DnsClient.cs b/src/Dns/Dns/Models/DnsClient.cs
index cf20078bda..4c2acb986c 100644
--- a/src/Dns/Dns/Models/DnsClient.cs
+++ b/src/Dns/Dns/Models/DnsClient.cs
@@ -128,7 +128,7 @@ namespace Microsoft.Azure.Commands.Dns.Models
             IPage<Zone> getResponse = null;
             do
             {
-                if (getResponse != null && getResponse.NextPageLink != null)
+                if (getResponse?.NextPageLink != null)
                 {
                     getResponse = this.DnsManagementClient.Zones.ListByResourceGroupNext(getResponse.NextPageLink);
                 }
@@ -138,7 +138,7 @@ namespace Microsoft.Azure.Commands.Dns.Models
                 }
 
                 results.AddRange(getResponse.Select(ToDnsZone));
-            } while (getResponse != null && getResponse.NextPageLink != null);
+            } while (getResponse?.NextPageLink != null);
 
             return results;
         }
@@ -149,7 +149,7 @@ namespace Microsoft.Azure.Commands.Dns.Models
             IPage<Zone> getResponse = null;
             do
             {
-                if (getResponse != null && getResponse.NextPageLink != null)
+                if (getResponse?.NextPageLink != null)
                 {
                     getResponse = this.DnsManagementClient.Zones.ListNext(getResponse.NextPageLink);
                 }
@@ -159,7 +159,7 @@ namespace Microsoft.Azure.Commands.Dns.Models
                 }
 
                 results.AddRange(getResponse.Select(ToDnsZone));
-            } while (getResponse != null && getResponse.NextPageLink != null);
+            } while (getResponse?.NextPageLink != null);
 
             return results;
         }
@@ -367,7 +367,7 @@ namespace Microsoft.Azure.Commands.Dns.Models
             IPage<RecordSet> listResponse = null;
             do
             {
-                if (listResponse != null && listResponse.NextPageLink != null)
+                if (listResponse?.NextPageLink != null)
                 {
                     listResponse = this.DnsManagementClient.RecordSets.ListByTypeNext(listResponse.NextPageLink);
                 }
@@ -381,7 +381,7 @@ namespace Microsoft.Azure.Commands.Dns.Models
 
                 results.AddRange(listResponse.Select(recordSet => GetPowerShellRecordSet(zoneName, resourceGroupName, recordSet)));
 
-            } while (listResponse != null && listResponse.NextPageLink != null);
+            } while (listResponse?.NextPageLink != null);
 
             return results;
         }
@@ -393,7 +393,7 @@ namespace Microsoft.Azure.Commands.Dns.Models
             IPage<RecordSet> listResponse = null;
             do
             {
-                if (listResponse != null && listResponse.NextPageLink != null)
+                if (listResponse?.NextPageLink != null)
                 {
                     listResponse = this.DnsManagementClient.RecordSets.ListByDnsZoneNext(listResponse.NextPageLink);
                 }
@@ -405,7 +405,7 @@ namespace Microsoft.Azure.Commands.Dns.Models
                 }
 
                 results.AddRange(listResponse.Select(recordSet => GetPowerShellRecordSet(zoneName, resourceGroupName, recordSet)));
-            } while (listResponse != null && listResponse.NextPageLink != null);
+            } while (listResponse?.NextPageLink != null);
 
             return results;
         }
@@ -531,7 +531,7 @@ namespace Microsoft.Azure.Commands.Dns.Models
                 return parts[rgIndex + 1];
             }
 
-            throw new FormatException(string.Format("Unable to extract resource group name from {0} ", id));
+            throw new FormatException($"Unable to extract resource group name from {id} ");
         }
     }
 }
diff --git a/src/Dns/Dns/Models/DnsRecordSet.cs b/src/Dns/Dns/Models/DnsRecordSet.cs
index ce5840aacf..95f03214c7 100644
--- a/src/Dns/Dns/Models/DnsRecordSet.cs
+++ b/src/Dns/Dns/Models/DnsRecordSet.cs
@@ -449,7 +449,7 @@ namespace Microsoft.Azure.Commands.Dns
 
         public override string ToString()
         {
-            return string.Format("[{0},{1}]", Preference, Exchange);
+            return $"[{Preference},{Exchange}]";
         }
 
         internal override object ToMamlRecord()
@@ -498,7 +498,7 @@ namespace Microsoft.Azure.Commands.Dns
 
         public override string ToString()
         {
-            return string.Format("[{0},{1},{2},{3}]", Priority, Weight, Port, Target);
+            return $"[{Priority},{Weight},{Port},{Target}]";
         }
 
         internal override object ToMamlRecord()
@@ -570,7 +570,7 @@ namespace Microsoft.Azure.Commands.Dns
 
         public override string ToString()
         {
-            return string.Format("[{0},{1},{2},{3},{4},{5}]", Host, Email, RefreshTime, RetryTime, ExpireTime, MinimumTtl);
+            return $"[{Host},{Email},{RefreshTime},{RetryTime},{ExpireTime},{MinimumTtl}]";
         }
 
         internal override object ToMamlRecord()
diff --git a/src/Dns/Dns/Records/GetAzureDnsRecordSet.cs b/src/Dns/Dns/Records/GetAzureDnsRecordSet.cs
index d605b69e36..5a9eea26dd 100644
--- a/src/Dns/Dns/Records/GetAzureDnsRecordSet.cs
+++ b/src/Dns/Dns/Records/GetAzureDnsRecordSet.cs
@@ -69,7 +69,7 @@ namespace Microsoft.Azure.Commands.Dns
             if (zoneName != null && zoneName.EndsWith("."))
             {
                 zoneName = zoneName.TrimEnd('.');
-                this.WriteWarning(string.Format("Modifying zone name to remove terminating '.'.  Zone name used is \"{0}\".", zoneName));
+                this.WriteWarning($"Modifying zone name to remove terminating '.'.  Zone name used is \"{zoneName}\".");
             }
 
             if (this.Name != null)
diff --git a/src/Dns/Dns/Records/NewAzureDnsRecordSet.cs b/src/Dns/Dns/Records/NewAzureDnsRecordSet.cs
index 71c359320e..cc8c2a8799 100644
--- a/src/Dns/Dns/Records/NewAzureDnsRecordSet.cs
+++ b/src/Dns/Dns/Records/NewAzureDnsRecordSet.cs
@@ -114,7 +114,7 @@ namespace Microsoft.Azure.Commands.Dns
             if (zoneName != null && zoneName.EndsWith("."))
             {
                 zoneName = zoneName.TrimEnd('.');
-                this.WriteWarning(string.Format("Modifying zone name to remove terminating '.'.  Zone name used is \"{0}\".", zoneName));
+                this.WriteWarning($"Modifying zone name to remove terminating '.'.  Zone name used is \"{zoneName}\".");
             }
 
             if (this.DnsRecords == null && string.IsNullOrEmpty(this.TargetResourceId))
diff --git a/src/Dns/Dns/Records/RemoveAzureDnsRecordSet.cs b/src/Dns/Dns/Records/RemoveAzureDnsRecordSet.cs
index 7ac5755d31..90930ca8d5 100644
--- a/src/Dns/Dns/Records/RemoveAzureDnsRecordSet.cs
+++ b/src/Dns/Dns/Records/RemoveAzureDnsRecordSet.cs
@@ -70,7 +70,7 @@ namespace Microsoft.Azure.Commands.Dns
                 if (this.Name.EndsWith("."))
                 {
                     this.Name = this.Name.TrimEnd('.');
-                    this.WriteWarning(string.Format("Modifying recordset name to remove terminating '.'.  Recordset name used is \"{0}\".", this.Name));
+                    this.WriteWarning($"Modifying recordset name to remove terminating '.'.  Recordset name used is \"{this.Name}\".");
                 }
 
                 recordSetToDelete = new DnsRecordSet
@@ -87,7 +87,7 @@ namespace Microsoft.Azure.Commands.Dns
                 if (this.Name.EndsWith("."))
                 {
                     this.Name = this.Name.TrimEnd('.');
-                    this.WriteWarning(string.Format("Modifying recordset name to remove terminating '.'.  Recordset name used is \"{0}\".", this.Name));
+                    this.WriteWarning($"Modifying recordset name to remove terminating '.'.  Recordset name used is \"{this.Name}\".");
                 }
 
                 recordSetToDelete = new DnsRecordSet
@@ -112,7 +112,7 @@ namespace Microsoft.Azure.Commands.Dns
             if (recordSetToDelete.ZoneName != null && recordSetToDelete.ZoneName.EndsWith("."))
             {
                 recordSetToDelete.ZoneName = recordSetToDelete.ZoneName.TrimEnd('.');
-                this.WriteWarning(string.Format("Modifying zone name to remove terminating '.'.  Zone name used is \"{0}\".", recordSetToDelete.ZoneName));
+                this.WriteWarning($"Modifying zone name to remove terminating '.'.  Zone name used is \"{recordSetToDelete.ZoneName}\".");
             }
 
             bool overwrite = this.Overwrite.IsPresent || this.ParameterSetName != "Object";
diff --git a/src/Dns/Dns/Records/SetAzureDnsRecordSet.cs b/src/Dns/Dns/Records/SetAzureDnsRecordSet.cs
index 96bba88185..5182239319 100644
--- a/src/Dns/Dns/Records/SetAzureDnsRecordSet.cs
+++ b/src/Dns/Dns/Records/SetAzureDnsRecordSet.cs
@@ -42,7 +42,7 @@ namespace Microsoft.Azure.Commands.Dns
                     if (recordSetToUpdate.ZoneName != null && recordSetToUpdate.ZoneName.EndsWith("."))
                     {
                         recordSetToUpdate.ZoneName = recordSetToUpdate.ZoneName.TrimEnd('.');
-                        this.WriteWarning(string.Format("Modifying zone name to remove terminating '.'.  Zone name used is \"{0}\".", recordSetToUpdate.ZoneName));
+                        this.WriteWarning($"Modifying zone name to remove terminating '.'.  Zone name used is \"{recordSetToUpdate.ZoneName}\".");
                     }
 
             ConfirmAction(
diff --git a/src/Dns/Dns/Zones/GetAzureDnsZone.cs b/src/Dns/Dns/Zones/GetAzureDnsZone.cs
index 3377a6b84d..13b5356d57 100644
--- a/src/Dns/Dns/Zones/GetAzureDnsZone.cs
+++ b/src/Dns/Dns/Zones/GetAzureDnsZone.cs
@@ -42,7 +42,7 @@ namespace Microsoft.Azure.Commands.Dns
                 if (this.Name.EndsWith("."))
                 {
                     this.Name = this.Name.TrimEnd('.');
-                    this.WriteWarning(string.Format("Modifying zone name to remove terminating '.'.  Zone name used is \"{0}\".", this.Name));
+                    this.WriteWarning($"Modifying zone name to remove terminating '.'.  Zone name used is \"{this.Name}\".");
                 }
 
                 this.WriteObject(this.DnsClient.GetDnsZone(this.Name, this.ResourceGroupName));
diff --git a/src/Dns/Dns/Zones/NewAzureDnsZone.cs b/src/Dns/Dns/Zones/NewAzureDnsZone.cs
index 597ae7548d..2e0de9879b 100644
--- a/src/Dns/Dns/Zones/NewAzureDnsZone.cs
+++ b/src/Dns/Dns/Zones/NewAzureDnsZone.cs
@@ -86,7 +86,7 @@ namespace Microsoft.Azure.Commands.Dns
             if (this.Name.EndsWith("."))
             {
                 this.Name = this.Name.TrimEnd('.');
-                this.WriteWarning(string.Format("Modifying zone name to remove terminating '.'.  Zone name used is \"{0}\".", this.Name));
+                this.WriteWarning($"Modifying zone name to remove terminating '.'.  Zone name used is \"{this.Name}\".");
             }
 
             base.ConfirmAction(
diff --git a/src/Dns/Dns/Zones/RemoveAzureDnsZone.cs b/src/Dns/Dns/Zones/RemoveAzureDnsZone.cs
index ce35125587..b8f23d05af 100644
--- a/src/Dns/Dns/Zones/RemoveAzureDnsZone.cs
+++ b/src/Dns/Dns/Zones/RemoveAzureDnsZone.cs
@@ -55,7 +55,7 @@ namespace Microsoft.Azure.Commands.Dns
             if (!string.IsNullOrEmpty(this.Name) && this.Name.EndsWith("."))
             {
                 this.Name = this.Name.TrimEnd('.');
-                this.WriteWarning(string.Format("Modifying zone name to remove terminating '.'.  Zone name used is \"{0}\".", this.Name));
+                this.WriteWarning($"Modifying zone name to remove terminating '.'.  Zone name used is \"{this.Name}\".");
             }
 
             // There is a bug in sdk where it doesn't handle non existing zones on delete. Hence, handling the condition in powershell
@@ -73,7 +73,7 @@ namespace Microsoft.Azure.Commands.Dns
                 if (zoneToDelete.Name != null && zoneToDelete.Name.EndsWith("."))
                 {
                     zoneToDelete.Name = zoneToDelete.Name.TrimEnd('.');
-                    this.WriteWarning(string.Format("Modifying zone name to remove terminating '.'.  Zone name used is \"{0}\".", zoneToDelete.Name));
+                    this.WriteWarning($"Modifying zone name to remove terminating '.'.  Zone name used is \"{zoneToDelete.Name}\".");
                 }
 
                 ConfirmAction(
diff --git a/src/Dns/Dns/Zones/SetAzureDnsZone.cs b/src/Dns/Dns/Zones/SetAzureDnsZone.cs
index 4979d3d2b5..b34329e071 100644
--- a/src/Dns/Dns/Zones/SetAzureDnsZone.cs
+++ b/src/Dns/Dns/Zones/SetAzureDnsZone.cs
@@ -83,7 +83,7 @@ namespace Microsoft.Azure.Commands.Dns
                 if (this.Name.EndsWith("."))
                 {
                     this.Name = this.Name.TrimEnd('.');
-                    this.WriteWarning(string.Format("Modifying zone name to remove terminating '.'.  Zone name used is \"{0}\".", this.Name));
+                    this.WriteWarning($"Modifying zone name to remove terminating '.'.  Zone name used is \"{this.Name}\".");
                 }
 
                 zoneToUpdate = this.DnsClient.GetDnsZone(this.Name, this.ResourceGroupName);
@@ -130,7 +130,7 @@ namespace Microsoft.Azure.Commands.Dns
             if (zoneToUpdate.Name != null && zoneToUpdate.Name.EndsWith("."))
             {
                 zoneToUpdate.Name = zoneToUpdate.Name.TrimEnd('.');
-                this.WriteWarning(string.Format("Modifying zone name to remove terminating '.'.  Zone name used is \"{0}\".", zoneToUpdate.Name));
+                this.WriteWarning($"Modifying zone name to remove terminating '.'.  Zone name used is \"{zoneToUpdate.Name}\".");
             }
             ConfirmAction(
                 ProjectResources.Progress_Modifying,
diff --git a/src/EventGrid/EventGrid/EventSubscription/UpdateAzureEventGridSubscription.cs b/src/EventGrid/EventGrid/EventSubscription/UpdateAzureEventGridSubscription.cs
index b8ec1bdb5c..77f0914d85 100644
--- a/src/EventGrid/EventGrid/EventSubscription/UpdateAzureEventGridSubscription.cs
+++ b/src/EventGrid/EventGrid/EventSubscription/UpdateAzureEventGridSubscription.cs
@@ -674,8 +674,7 @@ namespace Microsoft.Azure.Commands.EventGrid
 
                 if (string.Equals(this.EndpointType, EventGridConstants.Webhook, StringComparison.OrdinalIgnoreCase))
                 {
-                    WebHookEventSubscriptionDestination dest = existingEventSubscription.Destination as WebHookEventSubscriptionDestination;
-                    if (dest != null)
+                    if (existingEventSubscription.Destination is WebHookEventSubscriptionDestination dest)
                     {
                         maxEventsPerBatch = this.IsParameterBound(c => c.MaxEventsPerBatch) ? (int?)this.MaxEventsPerBatch : dest.MaxEventsPerBatch.HasValue ? dest.MaxEventsPerBatch : null;
                         preferredBatchSizeInKiloByte = this.IsParameterBound(c => c.PreferredBatchSizeInKiloByte) ? (int?)this.PreferredBatchSizeInKiloByte : dest.PreferredBatchSizeInKilobytes.HasValue ? dest.PreferredBatchSizeInKilobytes : null;
diff --git a/src/EventGrid/EventGrid/Utilities/EventGridClient.cs b/src/EventGrid/EventGrid/Utilities/EventGridClient.cs
index ae64dfc3fd..c6773811d4 100644
--- a/src/EventGrid/EventGrid/Utilities/EventGridClient.cs
+++ b/src/EventGrid/EventGrid/Utilities/EventGridClient.cs
@@ -592,7 +592,7 @@ namespace Microsoft.Azure.Commands.EventGrid
 
             eventSubscription.Filter = filter;
 
-            if (advancedFilter != null && advancedFilter.Count() > 0)
+            if (advancedFilter != null && advancedFilter.Any())
             {
                 this.UpdatedAdvancedFilterParameters(advancedFilter, eventSubscription.Filter);
             }
@@ -731,7 +731,7 @@ namespace Microsoft.Azure.Commands.EventGrid
                 eventSubscriptionUpdateParameters.DeadLetterDestination = this.GetStorageBlobDeadLetterDestinationFromEndPoint(deadLetterEndpoint);
             }
 
-            if (advancedFilter != null && advancedFilter.Count() > 0)
+            if (advancedFilter != null && advancedFilter.Any())
             {
                 this.UpdatedAdvancedFilterParameters(advancedFilter, eventSubscriptionUpdateParameters.Filter);
             }
diff --git a/src/EventHub/EventHub/Cmdlets/Clusters/NewAzureEventHubCluster.cs b/src/EventHub/EventHub/Cmdlets/Clusters/NewAzureEventHubCluster.cs
index b9e6010b2e..42e7a2217b 100644
--- a/src/EventHub/EventHub/Cmdlets/Clusters/NewAzureEventHubCluster.cs
+++ b/src/EventHub/EventHub/Cmdlets/Clusters/NewAzureEventHubCluster.cs
@@ -84,7 +84,7 @@ namespace Microsoft.Azure.Commands.EventHub.Commands.EventHub
                 cluster.Name = Name; 
             }
 
-            if (ShouldProcess(target:cluster.Name, action:string.Format("Create cluster {0} in ResourveGroup - {1}",cluster.Name,ResourceGroupName)))
+            if (ShouldProcess(target:cluster.Name, action:$"Create cluster {cluster.Name} in ResourveGroup - {ResourceGroupName}"))
             {
                 try
                 {
diff --git a/src/EventHub/EventHub/Cmdlets/Clusters/RemoveAzureEventHubCluster.cs b/src/EventHub/EventHub/Cmdlets/Clusters/RemoveAzureEventHubCluster.cs
index 5804c6747e..df94034bf9 100644
--- a/src/EventHub/EventHub/Cmdlets/Clusters/RemoveAzureEventHubCluster.cs
+++ b/src/EventHub/EventHub/Cmdlets/Clusters/RemoveAzureEventHubCluster.cs
@@ -64,7 +64,7 @@ namespace Microsoft.Azure.Commands.EventHub.Commands.EventHub
             }
 
             // delete a Cluster 
-            if(ShouldProcess(target:Name, action:string.Format("Removing cluster {0} from Resourgroup - {1}",Name,ResourceGroupName)))
+            if(ShouldProcess(target:Name, action:$"Removing cluster {Name} from Resourgroup - {ResourceGroupName}"))
             {
                 try
                 {
diff --git a/src/EventHub/EventHub/Cmdlets/Clusters/SetAzureEventHubCluster.cs b/src/EventHub/EventHub/Cmdlets/Clusters/SetAzureEventHubCluster.cs
index ffd2a8c001..d76d331249 100644
--- a/src/EventHub/EventHub/Cmdlets/Clusters/SetAzureEventHubCluster.cs
+++ b/src/EventHub/EventHub/Cmdlets/Clusters/SetAzureEventHubCluster.cs
@@ -96,7 +96,7 @@ namespace Microsoft.Azure.Commands.EventHub.Commands.EventHub
                 }
             }
 
-            if (ShouldProcess(target: cluster.Name, action: string.Format("Update cluster {0} in ResourceGroup {1}", cluster.Name, ResourceGroupName)))
+            if (ShouldProcess(target: cluster.Name, action: $"Update cluster {cluster.Name} in ResourceGroup {ResourceGroupName}"))
             {
                 try
                 {
diff --git a/src/EventHub/EventHub/Cmdlets/NetworkRuleSet/AddAzureEventHubIPRule.cs b/src/EventHub/EventHub/Cmdlets/NetworkRuleSet/AddAzureEventHubIPRule.cs
index 25cce278a0..f314026c76 100644
--- a/src/EventHub/EventHub/Cmdlets/NetworkRuleSet/AddAzureEventHubIPRule.cs
+++ b/src/EventHub/EventHub/Cmdlets/NetworkRuleSet/AddAzureEventHubIPRule.cs
@@ -56,7 +56,7 @@ namespace Microsoft.Azure.Commands.EventHub.Commands.EventHub
             PSNetworkRuleSetAttributes networkRuleSet = Client.GetNetworkRuleSet(ResourceGroupName, Name);
             if (!networkRuleSet.IpRules.Contains(new PSNWRuleSetIpRulesAttributes { IpMask = IpMask }))
             {
-                if (ShouldProcess(target: Name, action: string.Format("Adding IP rule for NetworkRuleSet of {0} in Resourcegroup {1}", Name, ResourceGroupName)))
+                if (ShouldProcess(target: Name, action: $"Adding IP rule for NetworkRuleSet of {Name} in Resourcegroup {ResourceGroupName}"))
                 {
                     try
                     {
diff --git a/src/EventHub/EventHub/Cmdlets/NetworkRuleSet/AddAzureEventHubVirtualNetworkrule.cs b/src/EventHub/EventHub/Cmdlets/NetworkRuleSet/AddAzureEventHubVirtualNetworkrule.cs
index a451b325d0..eaeaed899f 100644
--- a/src/EventHub/EventHub/Cmdlets/NetworkRuleSet/AddAzureEventHubVirtualNetworkrule.cs
+++ b/src/EventHub/EventHub/Cmdlets/NetworkRuleSet/AddAzureEventHubVirtualNetworkrule.cs
@@ -54,7 +54,7 @@ namespace Microsoft.Azure.Commands.EventHub.Commands.NetworkruleSet
             PSNetworkRuleSetAttributes networkRuleSet = Client.GetNetworkRuleSet(ResourceGroupName, Name);
             if (!networkRuleSet.VirtualNetworkRules.Contains(new PSNWRuleSetVirtualNetworkRulesAttributes { Subnet = new PSSubnetAttributes { Id = SubnetId }, IgnoreMissingVnetServiceEndpoint = IgnoreMissingVnetServiceEndpoint }))
             {
-                if (ShouldProcess(target: Name, action: string.Format("Adding VirtualNetworkRule for NetworkRuleSet of {0} in Resourcegroup {1}", Name, ResourceGroupName)))
+                if (ShouldProcess(target: Name, action: $"Adding VirtualNetworkRule for NetworkRuleSet of {Name} in Resourcegroup {ResourceGroupName}"))
                 {
                     try
                     {
diff --git a/src/EventHub/EventHub/Cmdlets/NetworkRuleSet/RemoveAzureEventHubIPRule.cs b/src/EventHub/EventHub/Cmdlets/NetworkRuleSet/RemoveAzureEventHubIPRule.cs
index 91ce42cb27..a43218b854 100644
--- a/src/EventHub/EventHub/Cmdlets/NetworkRuleSet/RemoveAzureEventHubIPRule.cs
+++ b/src/EventHub/EventHub/Cmdlets/NetworkRuleSet/RemoveAzureEventHubIPRule.cs
@@ -77,7 +77,7 @@ namespace Microsoft.Azure.Commands.EventHub.Commands.NetworkruleSet
 
             if (Toremove != null)
             {
-                if (ShouldProcess(target: Name, action: string.Format("Removing IP rule for NetworkRuleSet of {0} in Resourcegroup {1}", Name, ResourceGroupName)))
+                if (ShouldProcess(target: Name, action: $"Removing IP rule for NetworkRuleSet of {Name} in Resourcegroup {ResourceGroupName}"))
                 {
                     try
                     {
diff --git a/src/EventHub/EventHub/Cmdlets/NetworkRuleSet/RemoveAzureEventHubNetworkRuleSet.cs b/src/EventHub/EventHub/Cmdlets/NetworkRuleSet/RemoveAzureEventHubNetworkRuleSet.cs
index 3621a21216..51c82a8c1a 100644
--- a/src/EventHub/EventHub/Cmdlets/NetworkRuleSet/RemoveAzureEventHubNetworkRuleSet.cs
+++ b/src/EventHub/EventHub/Cmdlets/NetworkRuleSet/RemoveAzureEventHubNetworkRuleSet.cs
@@ -65,7 +65,7 @@ namespace Microsoft.Azure.Commands.EventHub.Commands.NetworkruleSet
             }
 
             // delete a Ip Filter Rule 
-            if (ShouldProcess(target:Name, action:string.Format("Delete NetwrokruleSet for Namespace {0} of ResourceGroup {1}", Name,ResourceGroupName)))
+            if (ShouldProcess(target:Name, action:$"Delete NetwrokruleSet for Namespace {Name} of ResourceGroup {ResourceGroupName}"))
             {
                 try
                 {
diff --git a/src/EventHub/EventHub/Cmdlets/NetworkRuleSet/RemoveAzureEventHubVirtualNetworkrule.cs b/src/EventHub/EventHub/Cmdlets/NetworkRuleSet/RemoveAzureEventHubVirtualNetworkrule.cs
index 9e76359b5c..37b3f5d6d1 100644
--- a/src/EventHub/EventHub/Cmdlets/NetworkRuleSet/RemoveAzureEventHubVirtualNetworkrule.cs
+++ b/src/EventHub/EventHub/Cmdlets/NetworkRuleSet/RemoveAzureEventHubVirtualNetworkrule.cs
@@ -78,7 +78,7 @@ namespace Microsoft.Azure.Commands.EventHub.Commands.NetworkruleSet
 
             if (Toremove != null)
             {
-                if (ShouldProcess(target: Name, action: string.Format("Removeing VirtualNetworkRule for NetworkRuleSet of {0} in Resourcegroup {1}", Name, ResourceGroupName)))
+                if (ShouldProcess(target: Name, action: $"Removeing VirtualNetworkRule for NetworkRuleSet of {Name} in Resourcegroup {ResourceGroupName}"))
                 {
                     try
                     {
diff --git a/src/EventHub/EventHub/Cmdlets/NetworkRuleSet/SetAzureEventHubNetworkrule.cs b/src/EventHub/EventHub/Cmdlets/NetworkRuleSet/SetAzureEventHubNetworkrule.cs
index 42335d01a1..a84fa76491 100644
--- a/src/EventHub/EventHub/Cmdlets/NetworkRuleSet/SetAzureEventHubNetworkrule.cs
+++ b/src/EventHub/EventHub/Cmdlets/NetworkRuleSet/SetAzureEventHubNetworkrule.cs
@@ -70,7 +70,7 @@ namespace Microsoft.Azure.Commands.EventHub.Commands.NetworkruleSet
         {
             // Update the NetworlruleSet 
             
-            if (ShouldProcess(target: Name, action: string.Format("Update NetworkruleSet for {0} Namespace in {1} ResourceGroup", Name, ResourceGroupName)))
+            if (ShouldProcess(target: Name, action: $"Update NetworkruleSet for {Name} Namespace in {ResourceGroupName} ResourceGroup"))
             {
                 try
                 {
diff --git a/src/EventHub/EventHub/Utilities/EventHubsClient.cs b/src/EventHub/EventHub/Utilities/EventHubsClient.cs
index 33c8bf3fa7..62a87adb30 100644
--- a/src/EventHub/EventHub/Utilities/EventHubsClient.cs
+++ b/src/EventHub/EventHub/Utilities/EventHubsClient.cs
@@ -262,7 +262,7 @@ namespace Microsoft.Azure.Commands.Eventhub
 
             parameter.Sku = tempSku;
 
-            if (tags != null && tags.Count() > 0)
+            if (tags != null && tags.Any())
             {
                 parameter.Tags = new Dictionary<string, string>(tags);
             }
diff --git a/src/FrontDoor/FrontDoor/Cmdlets/NewFrontDoor.cs b/src/FrontDoor/FrontDoor/Cmdlets/NewFrontDoor.cs
index 55add54608..68cf46639e 100644
--- a/src/FrontDoor/FrontDoor/Cmdlets/NewFrontDoor.cs
+++ b/src/FrontDoor/FrontDoor/Cmdlets/NewFrontDoor.cs
@@ -105,7 +105,7 @@ namespace Microsoft.Azure.Commands.FrontDoor.Cmdlets
             var existingProfile = FrontDoorManagementClient.FrontDoors.ListByResourceGroup(ResourceGroupName)
                 .Where(p => p.Name.ToLower() == Name.ToLower());
 
-            if (existingProfile.Count() != 0)
+            if (existingProfile.Any())
             {
                 throw new PSArgumentException(string.Format(Resources.Error_CreateExistingFrontDoor,
                                 Name,
diff --git a/src/FrontDoor/FrontDoor/Cmdlets/NewFrontDoorBackendPoolObject.cs b/src/FrontDoor/FrontDoor/Cmdlets/NewFrontDoorBackendPoolObject.cs
index 70e74fb746..78a25227da 100644
--- a/src/FrontDoor/FrontDoor/Cmdlets/NewFrontDoorBackendPoolObject.cs
+++ b/src/FrontDoor/FrontDoor/Cmdlets/NewFrontDoorBackendPoolObject.cs
@@ -70,10 +70,8 @@ namespace Microsoft.Azure.Commands.FrontDoor.Cmdlets
         public override void ExecuteCmdlet()
         {
             string subid = DefaultContext.Subscription.Id;
-            string LoadBalancingSettingsId = string.Format("/subscriptions/{0}/resourceGroups/{1}/providers/Microsoft.Network/frontDoors/{2}/LoadBalancingSettings/{3}",
-                  subid, ResourceGroupName, FrontDoorName, LoadBalancingSettingsName);
-            string HealthProbeSettingsId = string.Format("/subscriptions/{0}/resourceGroups/{1}/providers/Microsoft.Network/frontDoors/{2}/HealthProbeSettings/{3}",
-                  subid, ResourceGroupName, FrontDoorName, HealthProbeSettingsName);
+            string LoadBalancingSettingsId = $"/subscriptions/{subid}/resourceGroups/{ResourceGroupName}/providers/Microsoft.Network/frontDoors/{FrontDoorName}/LoadBalancingSettings/{LoadBalancingSettingsName}";
+            string HealthProbeSettingsId = $"/subscriptions/{subid}/resourceGroups/{ResourceGroupName}/providers/Microsoft.Network/frontDoors/{FrontDoorName}/HealthProbeSettings/{HealthProbeSettingsName}";
             var backendPool = new PSBackendPool
             {
                 Name = Name,
diff --git a/src/FrontDoor/FrontDoor/Cmdlets/NewFrontDoorRoutingRuleObject.cs b/src/FrontDoor/FrontDoor/Cmdlets/NewFrontDoorRoutingRuleObject.cs
index 2c96e08085..e73760e9b4 100644
--- a/src/FrontDoor/FrontDoor/Cmdlets/NewFrontDoorRoutingRuleObject.cs
+++ b/src/FrontDoor/FrontDoor/Cmdlets/NewFrontDoorRoutingRuleObject.cs
@@ -157,12 +157,9 @@ namespace Microsoft.Azure.Commands.FrontDoor.Cmdlets
         public override void ExecuteCmdlet()
         {
             string subid = DefaultContext.Subscription.Id;
-            List<string> FrontendEndpointIds = FrontendEndpointName?.Select(x => string.Format("/subscriptions/{0}/resourceGroups/{1}/providers/Microsoft.Network/frontDoors/{2}/FrontendEndpoints/{3}",
-                subid, ResourceGroupName, FrontDoorName, x)).ToList();
-            string BackendPoolId = string.Format("/subscriptions/{0}/resourceGroups/{1}/providers/Microsoft.Network/frontDoors/{2}/BackendPools/{3}",
-                subid, ResourceGroupName, FrontDoorName, BackendPoolName);
-            string RulesEngineId = string.Format("/subscriptions/{0}/resourceGroups/{1}/providers/Microsoft.Network/frontDoors/{2}/RulesEngines/{3}",
-                subid, ResourceGroupName, FrontDoorName, RulesEngineName);
+            List<string> FrontendEndpointIds = FrontendEndpointName?.Select(x => $"/subscriptions/{subid}/resourceGroups/{ResourceGroupName}/providers/Microsoft.Network/frontDoors/{FrontDoorName}/FrontendEndpoints/{x}").ToList();
+            string BackendPoolId = $"/subscriptions/{subid}/resourceGroups/{ResourceGroupName}/providers/Microsoft.Network/frontDoors/{FrontDoorName}/BackendPools/{BackendPoolName}";
+            string RulesEngineId = $"/subscriptions/{subid}/resourceGroups/{ResourceGroupName}/providers/Microsoft.Network/frontDoors/{FrontDoorName}/RulesEngines/{RulesEngineName}";
 
             var RoutingRule = new PSRoutingRule
             {
diff --git a/src/FrontDoor/FrontDoor/Cmdlets/NewFrontDoorRulesEngineActionObject.cs b/src/FrontDoor/FrontDoor/Cmdlets/NewFrontDoorRulesEngineActionObject.cs
index 44bbce0812..e5d020e8ef 100644
--- a/src/FrontDoor/FrontDoor/Cmdlets/NewFrontDoorRulesEngineActionObject.cs
+++ b/src/FrontDoor/FrontDoor/Cmdlets/NewFrontDoorRulesEngineActionObject.cs
@@ -91,8 +91,7 @@ namespace Microsoft.Azure.Commands.FrontDoor.Cmdlets
 
             if (ParameterSetName == FieldsWithForwardingParameterSet)
             {
-                string BackendPoolId = string.Format("/subscriptions/{0}/resourceGroups/{1}/providers/Microsoft.Network/frontDoors/{2}/BackendPools/{3}",
-                  DefaultContext.Subscription.Id, ResourceGroupName, FrontDoorName, BackendPoolName);
+                string BackendPoolId = $"/subscriptions/{DefaultContext.Subscription.Id}/resourceGroups/{ResourceGroupName}/providers/Microsoft.Network/frontDoors/{FrontDoorName}/BackendPools/{BackendPoolName}";
 
                 action.RouteConfigurationOverride = new PSForwardingConfiguration
                 {
diff --git a/src/FrontDoor/FrontDoor/Cmdlets/NewFrontDoorWafPolicy.cs b/src/FrontDoor/FrontDoor/Cmdlets/NewFrontDoorWafPolicy.cs
index cd1ff3aedf..3bb2b5efe7 100644
--- a/src/FrontDoor/FrontDoor/Cmdlets/NewFrontDoorWafPolicy.cs
+++ b/src/FrontDoor/FrontDoor/Cmdlets/NewFrontDoorWafPolicy.cs
@@ -103,7 +103,7 @@ namespace Microsoft.Azure.Commands.FrontDoor.Cmdlets
             var existingPolicy = FrontDoorManagementClient.Policies.List(ResourceGroupName)
                 .Where(p => p.Name.ToLower() == Name.ToLower());
 
-            if (existingPolicy.Count() != 0)
+            if (existingPolicy.Any())
             {
                 throw new PSArgumentException(string.Format(Resources.Error_CreateExistingWebApplicationFirewallPolicy,
                     Name,
diff --git a/src/FrontDoor/FrontDoor/Helpers/ModelExtensions.cs b/src/FrontDoor/FrontDoor/Helpers/ModelExtensions.cs
index 59b55c0039..557bbd7c71 100644
--- a/src/FrontDoor/FrontDoor/Helpers/ModelExtensions.cs
+++ b/src/FrontDoor/FrontDoor/Helpers/ModelExtensions.cs
@@ -733,14 +733,10 @@ namespace Microsoft.Azure.Commands.FrontDoor.Helpers
             HashSet<string> routingRuleIds = new HashSet<string>();
             foreach (var routingRule in frontDoor.RoutingRules)
             {
-                string id = string.Format("/subscriptions/{0}/resourceGroups/{1}/providers/Microsoft.Network/frontDoors/{2}/RoutingRules/{3}",
-                   subId, resourceGroup, frontDoor.Name, routingRule.Name).ToLower();
+                string id = $"/subscriptions/{subId}/resourceGroups/{resourceGroup}/providers/Microsoft.Network/frontDoors/{frontDoor.Name}/RoutingRules/{routingRule.Name}".ToLower();
                 if (routingRuleIds.FirstOrDefault(x => x.Equals(id)) != null)
                 {
-                    throw new PSArgumentException(string.Format(
-                            "Routingrule name need to be identical. {0}",
-                            routingRule.Name
-                            ));
+                    throw new PSArgumentException($"Routingrule name need to be identical. {routingRule.Name}");
                 }
                 routingRuleIds.Add(id);
             }
@@ -748,14 +744,10 @@ namespace Microsoft.Azure.Commands.FrontDoor.Helpers
             HashSet<string> healthProbeSettingIds = new HashSet<string>();
             foreach (var hpSetting in frontDoor.HealthProbeSettings)
             {
-                string id = string.Format("/subscriptions/{0}/resourceGroups/{1}/providers/Microsoft.Network/frontDoors/{2}/HealthProbeSettings/{3}",
-                        subId, resourceGroup, frontDoor.Name, hpSetting.Name).ToLower();
+                string id = $"/subscriptions/{subId}/resourceGroups/{resourceGroup}/providers/Microsoft.Network/frontDoors/{frontDoor.Name}/HealthProbeSettings/{hpSetting.Name}".ToLower();
                 if (healthProbeSettingIds.FirstOrDefault(x => x.Equals(id)) != null)
                 {
-                    throw new PSArgumentException(string.Format(
-                            "HealthProbeSettings name need to be identical. {0}",
-                            hpSetting.Name
-                            ));
+                    throw new PSArgumentException($"HealthProbeSettings name need to be identical. {hpSetting.Name}");
                 }
                 healthProbeSettingIds.Add(id);
             }
@@ -763,14 +755,10 @@ namespace Microsoft.Azure.Commands.FrontDoor.Helpers
             HashSet<string> loadBalancingSettingIds = new HashSet<string>();
             foreach (var lbSetting in frontDoor.LoadBalancingSettings)
             {
-                string id = string.Format("/subscriptions/{0}/resourceGroups/{1}/providers/Microsoft.Network/frontDoors/{2}/LoadBalancingSettings/{3}",
-                        subId, resourceGroup, frontDoor.Name, lbSetting.Name).ToLower();
+                string id = $"/subscriptions/{subId}/resourceGroups/{resourceGroup}/providers/Microsoft.Network/frontDoors/{frontDoor.Name}/LoadBalancingSettings/{lbSetting.Name}".ToLower();
                 if (loadBalancingSettingIds.FirstOrDefault(x => x.Equals(id)) != null)
                 {
-                    throw new PSArgumentException(string.Format(
-                            "LoadBalancingSettings name need to be identical. {0}",
-                            lbSetting.Name
-                            ));
+                    throw new PSArgumentException($"LoadBalancingSettings name need to be identical. {lbSetting.Name}");
                 }
                 loadBalancingSettingIds.Add(id);
             }
@@ -778,14 +766,10 @@ namespace Microsoft.Azure.Commands.FrontDoor.Helpers
             HashSet<string> frontendEndpointIds = new HashSet<string>();
             foreach (var frontendEndpoint in frontDoor.FrontendEndpoints)
             {
-                string id = string.Format("/subscriptions/{0}/resourceGroups/{1}/providers/Microsoft.Network/frontDoors/{2}/FrontendEndpoints/{3}",
-                        subId, resourceGroup, frontDoor.Name, frontendEndpoint.Name).ToLower();
+                string id = $"/subscriptions/{subId}/resourceGroups/{resourceGroup}/providers/Microsoft.Network/frontDoors/{frontDoor.Name}/FrontendEndpoints/{frontendEndpoint.Name}".ToLower();
                 if (frontendEndpointIds.FirstOrDefault(x => x.Equals(id)) != null)
                 {
-                    throw new PSArgumentException(string.Format(
-                            "FrontendEndpoint name need to be identical. {0}",
-                            frontendEndpoint.Name
-                            ));
+                    throw new PSArgumentException($"FrontendEndpoint name need to be identical. {frontendEndpoint.Name}");
                 }
                 frontendEndpointIds.Add(id.ToLower());
             }
@@ -793,14 +777,10 @@ namespace Microsoft.Azure.Commands.FrontDoor.Helpers
             HashSet<string> backendPoolIds = new HashSet<string>();
             foreach (var backendPool in frontDoor.BackendPools)
             {
-                string id = string.Format("/subscriptions/{0}/resourceGroups/{1}/providers/Microsoft.Network/frontDoors/{2}/BackendPools/{3}",
-                        subId, resourceGroup, frontDoor.Name, backendPool.Name).ToLower();
+                string id = $"/subscriptions/{subId}/resourceGroups/{resourceGroup}/providers/Microsoft.Network/frontDoors/{frontDoor.Name}/BackendPools/{backendPool.Name}".ToLower();
                 if (backendPoolIds.FirstOrDefault(x => x.Equals(id)) != null)
                 {
-                    throw new PSArgumentException(string.Format(
-                            "BackendPool name need to be identical. {0}",
-                            backendPool.Name
-                            ));
+                    throw new PSArgumentException($"BackendPool name need to be identical. {backendPool.Name}");
                 }
                 backendPoolIds.Add(id.ToLower());
             }
@@ -813,10 +793,7 @@ namespace Microsoft.Azure.Commands.FrontDoor.Helpers
                 {
                     if (frontendEndpointIds.FirstOrDefault(x => x.Equals(id.ToLower())) == null)
                     {
-                        throw new PSArgumentException(string.Format(
-                                "Invalid FrontendEndpointId {0} in {1}. Target doesn't exist",
-                                id, routingRule.Name
-                                ));
+                        throw new PSArgumentException($"Invalid FrontendEndpointId {id} in {routingRule.Name}. Target doesn't exist");
                     }
                 }
 
@@ -825,10 +802,7 @@ namespace Microsoft.Azure.Commands.FrontDoor.Helpers
                     var forwardingConfiguration = routingRule.RouteConfiguration as PSForwardingConfiguration;
                     if (backendPoolIds.FirstOrDefault(x => x.Equals(forwardingConfiguration.BackendPoolId.ToLower())) == null)
                     {
-                        throw new PSArgumentException(string.Format(
-                                "Invalid BackendPollId {0} in {1}. Target doesn't exist",
-                                forwardingConfiguration.BackendPoolId, routingRule.Name
-                                ));
+                        throw new PSArgumentException($"Invalid BackendPollId {forwardingConfiguration.BackendPoolId} in {routingRule.Name}. Target doesn't exist");
                     }
                 }
             }
@@ -837,18 +811,12 @@ namespace Microsoft.Azure.Commands.FrontDoor.Helpers
             {
                 if (healthProbeSettingIds.FirstOrDefault(x => x.Equals(backendPool.HealthProbeSettingRef.ToLower())) == null)
                 {
-                    throw new PSArgumentException(string.Format(
-                            "Invalid HealthProbeSetting {0} in {1}. Target doesn't exist",
-                            backendPool.HealthProbeSettingRef, backendPool.Name
-                            ));
+                    throw new PSArgumentException($"Invalid HealthProbeSetting {backendPool.HealthProbeSettingRef} in {backendPool.Name}. Target doesn't exist");
                 }
 
                 if (loadBalancingSettingIds.FirstOrDefault(x => x.Equals(backendPool.LoadBalancingSettingRef.ToLower())) == null)
                 {
-                    throw new PSArgumentException(string.Format(
-                            "Invalid HealthProbeSetting {0} in {1}. Target doesn't exist",
-                            backendPool.LoadBalancingSettingRef, backendPool.Name
-                            ));
+                    throw new PSArgumentException($"Invalid HealthProbeSetting {backendPool.LoadBalancingSettingRef} in {backendPool.Name}. Target doesn't exist");
                 }
             }
 
diff --git a/src/Functions/generated/runtime/Serialization/JsonSerializer.cs b/src/Functions/generated/runtime/Serialization/JsonSerializer.cs
index 83f505f96a..82f937ce99 100644
--- a/src/Functions/generated/runtime/Serialization/JsonSerializer.cs
+++ b/src/Functions/generated/runtime/Serialization/JsonSerializer.cs
@@ -312,7 +312,7 @@ namespace Microsoft.Azure.PowerShell.Cmdlets.Functions.Runtime.Json
                     default: return ReadArray((IEnumerable)value);
                 }
             }
-            else if (value is IEnumerable)
+            else if (value is IEnumerable iEnumerable)
             {
                 if (type.IsList && type.ElementType != null)
                 {
@@ -330,7 +330,7 @@ namespace Microsoft.Azure.PowerShell.Cmdlets.Functions.Runtime.Json
                     }
                 }
 
-                return ReadArray((IEnumerable)value);
+                return ReadArray(iEnumerable);
             }
             else
             {
diff --git a/src/GuestConfiguration/GuestConfiguration/Cmdlets/GetAzVMGuestPolicyStatus.cs b/src/GuestConfiguration/GuestConfiguration/Cmdlets/GetAzVMGuestPolicyStatus.cs
index 6ec9fbfe92..a47942e180 100644
--- a/src/GuestConfiguration/GuestConfiguration/Cmdlets/GetAzVMGuestPolicyStatus.cs
+++ b/src/GuestConfiguration/GuestConfiguration/Cmdlets/GetAzVMGuestPolicyStatus.cs
@@ -1,4 +1,5 @@
-﻿// ----------------------------------------------------------------------------------
+﻿using System.Linq;
+// ----------------------------------------------------------------------------------
 //
 // Copyright Microsoft Corporation
 // Licensed under the Apache License, Version 2.0 (the "License");
@@ -67,7 +68,7 @@ namespace Microsoft.Azure.Commands.GuestConfiguration.Cmdlets
                     var gcrpAssignments = GetAllGCRPAssignments(ResourceGroupName, VMName);
 
                     gcPolicyAssignmentReports = GetPolicyStatusesDetailedByInitiativeName(ResourceGroupName, VMName, InitiativeName, gcrpAssignments);
-                    if(gcPolicyAssignmentReports == null || gcPolicyAssignmentReports.Count() > 0)
+                    if(gcPolicyAssignmentReports == null || gcPolicyAssignmentReports.Any())
                     {
                         WriteObject(gcPolicyAssignmentReports, true);
                     }                        
@@ -79,7 +80,7 @@ namespace Microsoft.Azure.Commands.GuestConfiguration.Cmdlets
 
                     gcPolicyAssignmentReports = GetPolicyStatusesDetailedByInitiativeId(ResourceGroupName, VMName, InitiativeId, gcrpAssignments);
 
-                    if (gcPolicyAssignmentReports == null || gcPolicyAssignmentReports.Count() > 0)
+                    if (gcPolicyAssignmentReports == null || gcPolicyAssignmentReports.Any())
                     {
                         WriteObject(gcPolicyAssignmentReports, true);
                     }                   
@@ -98,7 +99,7 @@ namespace Microsoft.Azure.Commands.GuestConfiguration.Cmdlets
                     gcrpAssignments = GetAllGCRPAssignments(ResourceGroupName, VMName);
 
                     gcPolicyAssignmentReports = GetPolicyStatusesDetailed(ResourceGroupName, VMName, gcrpAssignments);
-                    if (gcPolicyAssignmentReports == null || gcPolicyAssignmentReports.Count() > 0)
+                    if (gcPolicyAssignmentReports == null || gcPolicyAssignmentReports.Any())
                     {
                         WriteObject(gcPolicyAssignmentReports, true);
                     }
diff --git a/src/GuestConfiguration/GuestConfiguration/Cmdlets/GetAzVMGuestPolicyStatusHistory.cs b/src/GuestConfiguration/GuestConfiguration/Cmdlets/GetAzVMGuestPolicyStatusHistory.cs
index d0c9614b0f..252d7c1e62 100644
--- a/src/GuestConfiguration/GuestConfiguration/Cmdlets/GetAzVMGuestPolicyStatusHistory.cs
+++ b/src/GuestConfiguration/GuestConfiguration/Cmdlets/GetAzVMGuestPolicyStatusHistory.cs
@@ -1,4 +1,5 @@
-﻿// ----------------------------------------------------------------------------------
+﻿using System.Linq;
+// ----------------------------------------------------------------------------------
 //
 // Copyright Microsoft Corporation
 // Licensed under the Apache License, Version 2.0 (the "License");
@@ -66,7 +67,7 @@ namespace Microsoft.Azure.Commands.GuestConfiguration.Cmdlets
                 // Process results for cmdlet
                 case ParameterSetNames.InitiativeNameScope:                 
                     policyStatuses = GetPolicyStatusHistory(ResourceGroupName, VMName, gcrpAssignments, InitiativeName, ShowOnlyChange.IsPresent);
-                    if (policyStatuses == null || policyStatuses.Count() > 0)
+                    if (policyStatuses == null || policyStatuses.Any())
                     {
                         WriteObject(policyStatuses, true);
                     }
@@ -82,7 +83,7 @@ namespace Microsoft.Azure.Commands.GuestConfiguration.Cmdlets
                         policyStatuses = GetPolicyStatusHistory(ResourceGroupName, VMName, gcrpAssignments, null, ShowOnlyChange.IsPresent);
                     }
 
-                    if (policyStatuses == null || policyStatuses.Count() > 0)
+                    if (policyStatuses == null || policyStatuses.Any())
                     {
                         WriteObject(policyStatuses, true);
                     }
diff --git a/src/GuestConfiguration/GuestConfiguration/Common/GuestConfigurationCmdletBase.cs b/src/GuestConfiguration/GuestConfiguration/Common/GuestConfigurationCmdletBase.cs
index 52d5f9734c..47f47bdb8f 100644
--- a/src/GuestConfiguration/GuestConfiguration/Common/GuestConfigurationCmdletBase.cs
+++ b/src/GuestConfiguration/GuestConfiguration/Common/GuestConfigurationCmdletBase.cs
@@ -14,6 +14,7 @@
 
 using Microsoft.Azure.Management.Internal.ResourceManager.Version2018_05_01;
 using Microsoft.Azure.Management.Internal.ResourceManager.Version2018_05_01.Models;
+using System.Linq;
 
 namespace Microsoft.Azure.Commands.GuestConfiguration.Common
 {
@@ -106,7 +107,7 @@ namespace Microsoft.Azure.Commands.GuestConfiguration.Common
             var gcPolicyAssignmentReportList = new List<PolicyStatusDetailed>();
             var gcPolicySetDefinitions = GetAllGuestConfigPolicySetDefinitions();
 
-            if (gcPolicySetDefinitions == null || gcPolicySetDefinitions.Count() == 0)
+            if (gcPolicySetDefinitions == null || !gcPolicySetDefinitions.Any())
             {
                 return null;
             }
@@ -114,7 +115,7 @@ namespace Microsoft.Azure.Commands.GuestConfiguration.Common
             foreach (var gcPolicySetDefinition in gcPolicySetDefinitions)
             {
                 var gcAssignmentReports = GetPolicyStatusesDetailedByInitiativeId(resourceGroupName, vmName, gcPolicySetDefinition.Id, gcrpAssignments);
-                if (gcAssignmentReports != null && gcAssignmentReports.Count() > 0)
+                if (gcAssignmentReports != null && gcAssignmentReports.Any())
                 {
                     gcPolicyAssignmentReportList.AddRange(gcAssignmentReports);
                 }
@@ -183,7 +184,7 @@ namespace Microsoft.Azure.Commands.GuestConfiguration.Common
             var gcPolicyAssignments = GetPolicyStatuses(resourceGroupName, vmName, gcrpAssignments, initiativeName);
             var gcPolicyAssignmentReportList = new List<PolicyStatusDetailed>();
 
-            if (gcPolicyAssignments.Count() > 0)
+            if (gcPolicyAssignments.Any())
             {
                 var gcPolicyAssignmentsArray = gcPolicyAssignments.ToArray();
 
@@ -227,7 +228,7 @@ namespace Microsoft.Azure.Commands.GuestConfiguration.Common
 
                     PolicyStatusDetailed policyDetailed = new PolicyStatusDetailed(gcrpReport, gcPolicyAssignment);
                     QueryOptions queryOptions = new QueryOptions();
-                    queryOptions.Filter = string.Format("PolicySetDefinitionName eq '{0}' and contains(ResourceId,'{1}')", gcPolicyAssignment.PolicySetDefinitionName, vmName);
+                    queryOptions.Filter = $"PolicySetDefinitionName eq '{gcPolicyAssignment.PolicySetDefinitionName}' and contains(ResourceId,'{vmName}')";
                     queryOptions.OrderBy = "Timestamp desc";
                     queryOptions.Top = 1;
                     PolicyStatesQueryResults policyDbResults= PolicyInsightsClient.PolicyStates.ListQueryResultsForResourceGroup("latest", DefaultContext.Subscription.Id, resourceGroupName, queryOptions);
@@ -353,7 +354,7 @@ namespace Microsoft.Azure.Commands.GuestConfiguration.Common
 
         private string GetPolicySetCategory(PolicySetDefinition initiativeDefinition)
         {
-            if (initiativeDefinition != null && initiativeDefinition.Metadata != null)
+            if (initiativeDefinition?.Metadata != null)
             {
                 var categoryMetadata = JObject.Parse(initiativeDefinition.Metadata.ToString());
                 var categoryMetadataDictionary = categoryMetadata.ToObject<Dictionary<string, object>>();
@@ -369,7 +370,7 @@ namespace Microsoft.Azure.Commands.GuestConfiguration.Common
         private IEnumerable<PolicySetDefinition> GetAllGuestConfigPolicySetDefinitions()
         {
             var policySetDefinitions = PolicyClient.PolicySetDefinitions.List();
-            if (policySetDefinitions == null || policySetDefinitions.Count() == 0)
+            if (policySetDefinitions == null || !policySetDefinitions.Any())
             {
                 return null;
             }
@@ -472,9 +473,9 @@ namespace Microsoft.Azure.Commands.GuestConfiguration.Common
 
                         if (!string.IsNullOrEmpty(guestConfigurationAssignmentNameInPolicy) && gcrp_AssignmentName_Assignment_Map.ContainsKey(guestConfigurationAssignmentNameInPolicy))
                         {
-                            var assignments = PolicyClient.PolicyAssignments.ListForResourceGroup(resourceGroupName, string.Format("policyDefinitionId eq '{0}'", policySetDefinition.Id));                            
+                            var assignments = PolicyClient.PolicyAssignments.ListForResourceGroup(resourceGroupName, $"policyDefinitionId eq '{policySetDefinition.Id}'");                            
                             var gcrpAsgnment = gcrp_AssignmentName_Assignment_Map[guestConfigurationAssignmentNameInPolicy];
-                            if (gcrpAsgnment != null && assignments.Count() > 0)
+                            if (gcrpAsgnment != null && assignments.Any())
                             {
                                 gcPolicyAssignmentsList.Add(new PolicyData(gcrpAsgnment, policyDef.DisplayName, policySetDefinition.Name));
                             }
diff --git a/src/GuestConfiguration/GuestConfiguration/Models/PolicyStatus.cs b/src/GuestConfiguration/GuestConfiguration/Models/PolicyStatus.cs
index 95f4d6f6fd..1d9d889b67 100644
--- a/src/GuestConfiguration/GuestConfiguration/Models/PolicyStatus.cs
+++ b/src/GuestConfiguration/GuestConfiguration/Models/PolicyStatus.cs
@@ -35,7 +35,7 @@ namespace Microsoft.Azure.Commands.GuestConfiguration.Models
                 this.ComplianceStatus = gcPolicyAssignment.ComplianceStatus; // Initially, gcrpReport can be null. So use status from assignment.
             }
 
-            if (gcrpReport != null && gcrpReport.Properties != null)
+            if (gcrpReport?.Properties != null)
             {
                 this.ReportId = gcrpReport.Id;
                 this.StartTime = gcrpReport.Properties.StartTime;
diff --git a/src/GuestConfiguration/GuestConfiguration/Models/PolicyStatusDetailed.cs b/src/GuestConfiguration/GuestConfiguration/Models/PolicyStatusDetailed.cs
index 6a199e7be7..00f727f18a 100644
--- a/src/GuestConfiguration/GuestConfiguration/Models/PolicyStatusDetailed.cs
+++ b/src/GuestConfiguration/GuestConfiguration/Models/PolicyStatusDetailed.cs
@@ -30,7 +30,7 @@ namespace Microsoft.Azure.Commands.GuestConfiguration.Models
         {
             this.ComplianceReasons = new List<ComplianceReasonDetails>();
 
-            if (gcrpReport != null && gcrpReport.Properties != null )
+            if (gcrpReport?.Properties != null )
             {
                 if (gcrpReport.Properties.Details != null)
                 {
diff --git a/src/HDInsight/HDInsight.Test/UnitTests/ScriptActionTests.cs b/src/HDInsight/HDInsight.Test/UnitTests/ScriptActionTests.cs
index 80b458f94e..dedacf2a54 100644
--- a/src/HDInsight/HDInsight.Test/UnitTests/ScriptActionTests.cs
+++ b/src/HDInsight/HDInsight.Test/UnitTests/ScriptActionTests.cs
@@ -324,11 +324,7 @@ namespace Microsoft.Azure.Commands.HDInsight.Test
 
         private static bool CompareScriptActions(AzureHDInsightRuntimeScriptAction scriptA, AzureHDInsightRuntimeScriptAction scriptB)
         {
-            return scriptA.Name == scriptB.Name
-                && scriptA.Parameters == scriptB.Parameters
-                && scriptA.NodeTypes.Count() == scriptB.NodeTypes.Count()
-                && scriptA.NodeTypes.Zip(scriptB.NodeTypes, (nodeA, nodeB) => nodeA == nodeB).All(x => x)
-                && scriptA.Uri == scriptB.Uri;
+            return scriptA.Name == scriptB.Name && scriptA.Parameters == scriptB.Parameters && scriptA.NodeTypes.Count() == scriptB.NodeTypes.Count() && scriptA.NodeTypes.Zip(scriptB.NodeTypes, (nodeA, nodeB) => nodeA == nodeB).All(x => x) && scriptA.Uri == scriptB.Uri;
         }
 
         private static bool CompareScriptActionDetails(AzureHDInsightRuntimeScriptActionDetail scriptA, AzureHDInsightRuntimeScriptActionDetail scriptB)
diff --git a/src/HDInsight/HDInsight/ClusterCreateHelper.cs b/src/HDInsight/HDInsight/ClusterCreateHelper.cs
index f773600253..2c86828786 100644
--- a/src/HDInsight/HDInsight/ClusterCreateHelper.cs
+++ b/src/HDInsight/HDInsight/ClusterCreateHelper.cs
@@ -51,7 +51,7 @@ namespace Microsoft.Azure.Commands.HDInsight.Models
 
             if (!storageAccountName.Contains("."))
             {
-                storageAccountName = string.Format("{0}.{1}", storageAccountName, defaultAzureDataLakeStoreFileSystemEndpointSuffix);
+                storageAccountName = $"{storageAccountName}.{defaultAzureDataLakeStoreFileSystemEndpointSuffix}";
             }
 
             // Get existing core configs.
@@ -87,7 +87,7 @@ namespace Microsoft.Azure.Commands.HDInsight.Models
                 {Constants.DataLakeConfigurations.ApplicationIdKey, applicationId.ToString()},
                 {
                     // Converting the Tenant ID to URI as RP expects this to be URI.
-                    Constants.DataLakeConfigurations.TenantIdKey, string.Format("{0}{1}", cloudAadAuthority, aadTenantId)
+                    Constants.DataLakeConfigurations.TenantIdKey, $"{cloudAadAuthority}{aadTenantId}"
                 },
                 {Constants.DataLakeConfigurations.CertificateKey, Convert.ToBase64String(certificateFileBytes)},
                 {Constants.DataLakeConfigurations.CertificatePasswordKey, certificatePassword},
@@ -211,7 +211,7 @@ namespace Microsoft.Azure.Commands.HDInsight.Models
                 return null;
             }
 
-            VirtualNetworkProfile vnetProfile = new VirtualNetworkProfile(virtualNetworkId, string.Format("{0}/subnets/{1}", virtualNetworkId, subnetName));
+            VirtualNetworkProfile vnetProfile = new VirtualNetworkProfile(virtualNetworkId, $"{virtualNetworkId}/subnets/{subnetName}");
             return vnetProfile;
         }
 
diff --git a/src/HDInsight/HDInsight/HDInsightCmdletBase.cs b/src/HDInsight/HDInsight/HDInsightCmdletBase.cs
index ecdae63be7..1634f66c8c 100644
--- a/src/HDInsight/HDInsight/HDInsightCmdletBase.cs
+++ b/src/HDInsight/HDInsight/HDInsightCmdletBase.cs
@@ -60,8 +60,7 @@ namespace Microsoft.Azure.Commands.HDInsight.Commands
             var cluster = HDInsightManagementClient.GetCluster(resourceGroupName, clusterName);
             if (cluster.First() == null)
             {
-                throw new NullReferenceException(string.Format("Could not find cluster {0} in resource group {1}",
-                    clusterName, resourceGroupName));
+                throw new NullReferenceException($"Could not find cluster {clusterName} in resource group {resourceGroupName}");
             }
             var azurecluster = new AzureHDInsightCluster(cluster.First());
             var state = azurecluster.ClusterState;
@@ -70,17 +69,14 @@ namespace Microsoft.Azure.Commands.HDInsight.Commands
                   state.Equals("Operational", StringComparison.OrdinalIgnoreCase)))
             {
                 throw new NotSupportedException(
-                    string.Format("The cluster {0} is in the {1} state and canot be used at this time.", clusterName,
-                        state));
+                    $"The cluster {clusterName} is in the {state} state and canot be used at this time.");
             }
 
             var httpEndpoint = azurecluster.HttpEndpoint;
             if (httpEndpoint == null)
             {
                 throw new NotSupportedException(
-                    string.Format(
-                        "Cannot use cluster {0} because HTTP is not enabled on it. Please use the {1} cmdlet to HTTP and try again.",
-                        azurecluster.Name, "Grant-" + Constants.CommandNames.AzureHDInsightHttpServicesAccess));
+                    $"Cannot use cluster {azurecluster.Name} because HTTP is not enabled on it. Please use the {"Grant-" + Constants.CommandNames.AzureHDInsightHttpServicesAccess} cmdlet to HTTP and try again.");
             }
             return httpEndpoint;
         }
@@ -96,7 +92,7 @@ namespace Microsoft.Azure.Commands.HDInsight.Commands
             }
             catch
             {
-                throw new CloudException(string.Format("Could not find resource group for cluster {0}.", clusterName));
+                throw new CloudException($"Could not find resource group for cluster {clusterName}.");
             }
         }
 
@@ -106,7 +102,7 @@ namespace Microsoft.Azure.Commands.HDInsight.Commands
 
             if (result == null || result.Count == 0)
             {
-                throw new CloudException(string.Format("Couldn't find cluster {0}", clusterName));
+                throw new CloudException($"Couldn't find cluster {clusterName}");
             }
 
             var cluster = result.FirstOrDefault();
@@ -121,7 +117,7 @@ namespace Microsoft.Azure.Commands.HDInsight.Commands
 
             if (DefaultStorageAccount == null)
             {
-                throw new CloudException(string.Format("Couldn't find storage information for cluster {0}", clusterName));
+                throw new CloudException($"Couldn't find storage information for cluster {clusterName}");
             }
 
             return DefaultStorageAccount;
diff --git a/src/HDInsight/HDInsight/JobCommands/GetAzureHDInsightJobOutputCommand.cs b/src/HDInsight/HDInsight/JobCommands/GetAzureHDInsightJobOutputCommand.cs
index 95fd1ec688..1292691723 100644
--- a/src/HDInsight/HDInsight/JobCommands/GetAzureHDInsightJobOutputCommand.cs
+++ b/src/HDInsight/HDInsight/JobCommands/GetAzureHDInsightJobOutputCommand.cs
@@ -174,9 +174,7 @@ namespace Microsoft.Azure.Commands.HDInsight
             {
                 var DefaultStorageAccount = GetDefaultStorageAccount(resourceGroupName, clusterName);
 
-                var wasbAccount = DefaultStorageAccount as AzureHDInsightWASBDefaultStorageAccount;
-
-                if (wasbAccount != null)
+                if (DefaultStorageAccount is AzureHDInsightWASBDefaultStorageAccount wasbAccount)
                 {
                     DefaultContainer = wasbAccount.StorageContainerName;
                     DefaultStorageAccountName = wasbAccount.StorageAccountName;
diff --git a/src/HDInsight/HDInsight/JobCommands/InvokeHiveCommand.cs b/src/HDInsight/HDInsight/JobCommands/InvokeHiveCommand.cs
index 22dfa623c0..241752e900 100644
--- a/src/HDInsight/HDInsight/JobCommands/InvokeHiveCommand.cs
+++ b/src/HDInsight/HDInsight/JobCommands/InvokeHiveCommand.cs
@@ -137,7 +137,7 @@ namespace Microsoft.Azure.Commands.HDInsight
 
             var jobCreationResult = startJobCommand.SubmitJob();
             var jobid = jobCreationResult.JobSubmissionJsonResponse.Id;
-            WriteObject(string.Format("Submitted Hive query with jobDetails Id : {0}", jobid));
+            WriteObject($"Submitted Hive query with jobDetails Id : {jobid}");
 
             //wait for job to complete
             WriteProgress(new ProgressRecord(0, "Waiting for job to complete", "In Progress"));
diff --git a/src/HDInsight/HDInsight/JobCommands/StartAzureHDInsightJobCommand.cs b/src/HDInsight/HDInsight/JobCommands/StartAzureHDInsightJobCommand.cs
index c512099c6f..3adfa2c884 100644
--- a/src/HDInsight/HDInsight/JobCommands/StartAzureHDInsightJobCommand.cs
+++ b/src/HDInsight/HDInsight/JobCommands/StartAzureHDInsightJobCommand.cs
@@ -97,29 +97,23 @@ namespace Microsoft.Azure.Commands.HDInsight
         {
             JobSubmissionResponse jobCreationResults;
 
-            var azureMapReduceJobDefinition = JobDefinition as AzureHDInsightMapReduceJobDefinition;
-            var azureHiveJobDefinition = JobDefinition as AzureHDInsightHiveJobDefinition;
-            var azurePigJobDefinition = JobDefinition as AzureHDInsightPigJobDefinition;
-            var azureStreamingJobDefinition = JobDefinition as AzureHDInsightStreamingMapReduceJobDefinition;
-            var azureSqoopJobDefinition = JobDefinition as AzureHDInsightSqoopJobDefinition;
-
-            if (azureMapReduceJobDefinition != null)
+            if (JobDefinition is AzureHDInsightMapReduceJobDefinition azureMapReduceJobDefinition)
             {
                 jobCreationResults = HDInsightJobClient.SubmitMRJob(azureMapReduceJobDefinition);
             }
-            else if (azureHiveJobDefinition != null)
+            else if (JobDefinition is AzureHDInsightHiveJobDefinition azureHiveJobDefinition)
             {
                 jobCreationResults = HDInsightJobClient.SubmitHiveJob(azureHiveJobDefinition);
             }
-            else if (azurePigJobDefinition != null)
+            else if (JobDefinition is AzureHDInsightPigJobDefinition azurePigJobDefinition)
             {
                 jobCreationResults = HDInsightJobClient.SubmitPigJob(azurePigJobDefinition);
             }
-            else if (azureStreamingJobDefinition != null)
+            else if (JobDefinition is AzureHDInsightStreamingMapReduceJobDefinition azureStreamingJobDefinition)
             {
                 jobCreationResults = HDInsightJobClient.SubmitStreamingJob(azureStreamingJobDefinition);
             }
-            else if (azureSqoopJobDefinition != null)
+            else if (JobDefinition is AzureHDInsightSqoopJobDefinition azureSqoopJobDefinition)
             {
                 jobCreationResults = HDInsightJobClient.SubmitSqoopJob(azureSqoopJobDefinition);
             }
diff --git a/src/HDInsight/HDInsight/JobCommands/UseAzureHDInsightClusterCommand.cs b/src/HDInsight/HDInsight/JobCommands/UseAzureHDInsightClusterCommand.cs
index a7c1f96e20..fd5fbf3070 100644
--- a/src/HDInsight/HDInsight/JobCommands/UseAzureHDInsightClusterCommand.cs
+++ b/src/HDInsight/HDInsight/JobCommands/UseAzureHDInsightClusterCommand.cs
@@ -77,8 +77,7 @@ namespace Microsoft.Azure.Commands.HDInsight
             SessionState.PSVariable.Set(ClusterCred, HttpCredential);
             SessionState.PSVariable.Set(CurrentResourceGroup, ResourceGroupName);
 
-            WriteObject(string.Format("Successfully connected to cluster {0} in resource group {1}", ClusterName,
-                ResourceGroupName));
+            WriteObject($"Successfully connected to cluster {ClusterName} in resource group {ResourceGroupName}");
         }
     }
 }
diff --git a/src/HPCCache/HPCCache.Test/Fixtures/StorageAccountFixture.cs b/src/HPCCache/HPCCache.Test/Fixtures/StorageAccountFixture.cs
index 4159c636d3..224401e3da 100644
--- a/src/HPCCache/HPCCache.Test/Fixtures/StorageAccountFixture.cs
+++ b/src/HPCCache/HPCCache.Test/Fixtures/StorageAccountFixture.cs
@@ -108,10 +108,7 @@
         {
             if (this.storageAccountsCache.TryGetValue(storageAccountName + suffix, out StorageAccount storageAccount))
             {
-                if (testOutputHelper != null)
-                {
-                    testOutputHelper.WriteLine($"Using existing storage account {storageAccountName + suffix}");
-                }
+                testOutputHelper?.WriteLine($"Using existing storage account {storageAccountName + suffix}");
 
                 return storageAccount;
             }
@@ -126,10 +123,7 @@
 
             if (waitForPermissions && HttpMockServer.Mode == HttpRecorderMode.Record)
             {
-                if (testOutputHelper != null)
-                {
-                    testOutputHelper.WriteLine($"Sleeping {sleep.ToString()} seconds while permissions propagates.");
-                }
+                testOutputHelper?.WriteLine($"Sleeping {sleep.ToString()} seconds while permissions propagates.");
                 TestUtilities.Wait(new TimeSpan(0, 0, sleep));
             }
 
@@ -157,10 +151,7 @@
         {
             if (this.blobContainersCache.TryGetValue(containerName + suffix, out BlobContainer blobContainer))
             {
-                if (testOutputHelper != null)
-                {
-                    testOutputHelper.WriteLine($"Using existing blob container {containerName + suffix}");
-                }
+                testOutputHelper?.WriteLine($"Using existing blob container {containerName + suffix}");
 
                 return blobContainer;
             }
@@ -261,10 +252,7 @@
 
                 // string role2 = "Storage Blob Data Contributor";
                 // context.AddRoleAssignment(context, storageAccount.Id, role2, TestUtilities.GenerateGuid().ToString());
-                if (testOutputHelper != null)
-                {
-                    testOutputHelper.WriteLine($"Added {role1} role to storage account {storageAccount.Name}.");
-                }
+                testOutputHelper?.WriteLine($"Added {role1} role to storage account {storageAccount.Name}.");
             }
             catch (Exception)
             {
diff --git a/src/HPCCache/HPCCache.Test/Helper/CacheHelper.cs b/src/HPCCache/HPCCache.Test/Helper/CacheHelper.cs
index 616835d917..bd7b795e89 100644
--- a/src/HPCCache/HPCCache.Test/Helper/CacheHelper.cs
+++ b/src/HPCCache/HPCCache.Test/Helper/CacheHelper.cs
@@ -215,7 +215,7 @@ namespace Microsoft.Azure.Commands.HPCCache.Test.Helper
                     if (operation == this.GetCacheProvisioningState
                         && string.Equals(currentState, "Failed", StringComparison.OrdinalIgnoreCase))
                     {
-                        throw new Exception(string.Format("Cache {0} failed to deploy.", name));
+                        throw new Exception($"Cache {name} failed to deploy.");
                     }
 
                     await Task.Delay(new TimeSpan(0, 0, polling_delay));
@@ -380,10 +380,7 @@ namespace Microsoft.Azure.Commands.HPCCache.Test.Helper
                 while (!string.Equals(currentState, state))
                 {
                     currentState = this.GetStorageTarget(cacheName, storageTargetName).ProvisioningState;
-                    if (testOutputHelper != null)
-                    {
-                        testOutputHelper.WriteLine($"Waiting for successful deploy of storage target {storageTargetName}, current state is {currentState}");
-                    }
+                    testOutputHelper?.WriteLine($"Waiting for successful deploy of storage target {storageTargetName}, current state is {currentState}");
 
                     if (string.Equals(currentState, "Failed"))
                     {
diff --git a/src/HPCCache/HPCCache.Test/ScenarioTests/HPCCacheController.cs b/src/HPCCache/HPCCache.Test/ScenarioTests/HPCCacheController.cs
index b82ccf7e83..a7b7f47f24 100644
--- a/src/HPCCache/HPCCache.Test/ScenarioTests/HPCCacheController.cs
+++ b/src/HPCCache/HPCCache.Test/ScenarioTests/HPCCacheController.cs
@@ -75,14 +75,14 @@ namespace Microsoft.Azure.Commands.HPCCache.Test.ScenarioTests
             var callingClassType = sf.GetMethod().ReflectedType?.ToString();
             var mockName = sf.GetMethod().Name;
 
-            logger.Information(string.Format("Test method entered: {0}.{1}", callingClassType, mockName));
+            logger.Information($"Test method entered: {callingClassType}.{mockName}");
             this.RunPsTestWorkflow(
                 logger,
                 () => scripts,
                 null,
                 callingClassType,
                 mockName);
-            logger.Information(string.Format("Test method finished: {0}.{1}", callingClassType, mockName));
+            logger.Information($"Test method finished: {callingClassType}.{mockName}");
         }
 
         /// <summary>
diff --git a/src/HPCCache/HPCCache.Test/ScenarioTests/HpcCacheStorageTargetTest.cs b/src/HPCCache/HPCCache.Test/ScenarioTests/HpcCacheStorageTargetTest.cs
index cb5dbf5b24..b50dab6916 100644
--- a/src/HPCCache/HPCCache.Test/ScenarioTests/HpcCacheStorageTargetTest.cs
+++ b/src/HPCCache/HPCCache.Test/ScenarioTests/HpcCacheStorageTargetTest.cs
@@ -70,12 +70,7 @@ namespace Microsoft.Azure.Commands.HPCCache.Test.ScenarioTests
         {
             var scripts = new string[]
             {
-                string.Format(
-                    "{0} {1} {2} {3}",
-                    "Test-GetAzHPCCacheStorageTargetByNameAndResourceGroup",
-                    this.fixture.ResourceGroup.Name,
-                    this.fixture.Cache.Name,
-                    this.storageAccountFixture.StorageTarget.Name),
+                $"{"Test-GetAzHPCCacheStorageTargetByNameAndResourceGroup"} {this.fixture.ResourceGroup.Name} {this.fixture.Cache.Name} {this.storageAccountFixture.StorageTarget.Name}",
             };
             HpcCacheController.NewInstance.RunPsTest(this.logger, scripts);
         }
@@ -89,12 +84,7 @@ namespace Microsoft.Azure.Commands.HPCCache.Test.ScenarioTests
         {
             var scripts = new string[]
             {
-                string.Format(
-                    "{0} {1} {2} {3}",
-                    "Test-SetStorageTarget",
-                    this.fixture.ResourceGroup.Name,
-                    this.fixture.Cache.Name,
-                    this.storageAccountFixture.StorageTarget.Name),
+                $"{"Test-SetStorageTarget"} {this.fixture.ResourceGroup.Name} {this.fixture.Cache.Name} {this.storageAccountFixture.StorageTarget.Name}",
             };
             HpcCacheController.NewInstance.RunPsTest(this.logger, scripts);
         }
@@ -108,12 +98,7 @@ namespace Microsoft.Azure.Commands.HPCCache.Test.ScenarioTests
         {
             var scripts = new string[]
             {
-                string.Format(
-                    "{0} {1} {2} {3}",
-                    "Test-New-Get-Remove-StorageTarget",
-                    this.fixture.ResourceGroup.Name,
-                    this.fixture.Cache.Name,
-                    this.fixture.SubscriptionID),
+                $"{"Test-New-Get-Remove-StorageTarget"} {this.fixture.ResourceGroup.Name} {this.fixture.Cache.Name} {this.fixture.SubscriptionID}",
             };
             HpcCacheController.NewInstance.RunPsTest(this.logger, scripts);
         }
diff --git a/src/HPCCache/HPCCache.Test/ScenarioTests/HpcCacheTest.cs b/src/HPCCache/HPCCache.Test/ScenarioTests/HpcCacheTest.cs
index 41f9b3aad5..c787353860 100644
--- a/src/HPCCache/HPCCache.Test/ScenarioTests/HpcCacheTest.cs
+++ b/src/HPCCache/HPCCache.Test/ScenarioTests/HpcCacheTest.cs
@@ -63,11 +63,7 @@ namespace Microsoft.Azure.Commands.HPCCache.Test.ScenarioTests
         {
             var scripts = new string[]
             {
-                string.Format(
-                    "{0} {1} {2}",
-                    "Test-GetAzHPCCacheByNameAndResourceGroup",
-                    this.fixture.ResourceGroup.Name,
-                    this.fixture.Cache.Name),
+                $"{"Test-GetAzHPCCacheByNameAndResourceGroup"} {this.fixture.ResourceGroup.Name} {this.fixture.Cache.Name}",
             };
             HpcCacheController.NewInstance.RunPsTest(this.logger, scripts);
         }
@@ -81,11 +77,7 @@ namespace Microsoft.Azure.Commands.HPCCache.Test.ScenarioTests
         {
             var scripts = new string[]
             {
-                string.Format(
-                    "{0} {1} {2}",
-                    "Test-FlushCache",
-                    this.fixture.ResourceGroup.Name,
-                    this.fixture.Cache.Name),
+                $"{"Test-FlushCache"} {this.fixture.ResourceGroup.Name} {this.fixture.Cache.Name}",
             };
             HpcCacheController.NewInstance.RunPsTest(this.logger, scripts);
         }
@@ -99,11 +91,7 @@ namespace Microsoft.Azure.Commands.HPCCache.Test.ScenarioTests
         {
             var scripts = new string[]
             {
-                string.Format(
-                    "{0} {1} {2}",
-                    "Test-Stop-Start-Cache",
-                    this.fixture.ResourceGroup.Name,
-                    this.fixture.Cache.Name),
+                $"{"Test-Stop-Start-Cache"} {this.fixture.ResourceGroup.Name} {this.fixture.Cache.Name}",
             };
             HpcCacheController.NewInstance.RunPsTest(this.logger, scripts);
         }
@@ -118,14 +106,7 @@ namespace Microsoft.Azure.Commands.HPCCache.Test.ScenarioTests
         {
             var scripts = new string[]
             {
-                string.Format(
-                    "{0} {1} {2} {3} {4} {5}",
-                    "Test-NewCache-RemoveCache",
-                    this.fixture.ResourceGroup.Name,
-                    this.fixture.SubscriptionID,
-                    this.fixture.ResourceGroup.Location,
-                    this.fixture.VirtualNetwork.Name,
-                    this.fixture.SubNet.Name)
+                $"{"Test-NewCache-RemoveCache"} {this.fixture.ResourceGroup.Name} {this.fixture.SubscriptionID} {this.fixture.ResourceGroup.Location} {this.fixture.VirtualNetwork.Name} {this.fixture.SubNet.Name}"
             };
             HpcCacheController.NewInstance.RunPsTest(this.logger, scripts);
         }
@@ -139,11 +120,7 @@ namespace Microsoft.Azure.Commands.HPCCache.Test.ScenarioTests
         {
             var scripts = new string[]
             {
-                string.Format(
-                    "{0} {1} {2}",
-                    "Test-SetCache",
-                    this.fixture.ResourceGroup.Name,
-                    this.fixture.Cache.Name),
+                $"{"Test-SetCache"} {this.fixture.ResourceGroup.Name} {this.fixture.Cache.Name}",
             };
             HpcCacheController.NewInstance.RunPsTest(this.logger, scripts);
         }
@@ -157,9 +134,7 @@ namespace Microsoft.Azure.Commands.HPCCache.Test.ScenarioTests
         {
             var scripts = new string[]
             {
-                string.Format(
-                    "{0}",
-                    "Test-GetUsageModel"),
+                $"{"Test-GetUsageModel"}",
             };
             HpcCacheController.NewInstance.RunPsTest(this.logger, scripts);
         }
@@ -173,9 +148,7 @@ namespace Microsoft.Azure.Commands.HPCCache.Test.ScenarioTests
         {
             var scripts = new string[]
             {
-                string.Format(
-                    "{0}",
-                    "Test-GetSku"),
+                $"{"Test-GetSku"}",
             };
             HpcCacheController.NewInstance.RunPsTest(this.logger, scripts);
         }
diff --git a/src/HPCCache/HPCCache.Test/Utilities/HpcCacheTestEnvironmentUtilities.cs b/src/HPCCache/HPCCache.Test/Utilities/HpcCacheTestEnvironmentUtilities.cs
index 50433ccced..0320e540f9 100644
--- a/src/HPCCache/HPCCache.Test/Utilities/HpcCacheTestEnvironmentUtilities.cs
+++ b/src/HPCCache/HPCCache.Test/Utilities/HpcCacheTestEnvironmentUtilities.cs
@@ -206,8 +206,7 @@ namespace Microsoft.Azure.Commands.HPCCache.Test.Utilities
                         if (string.IsNullOrEmpty(value))
                         {
                             throw new KeyNotFoundException(
-                                string.Format(
-                                    "Value for key '{0}' was not found in environment variable '{1}'.", key, EnvironmentVariableName));
+                                $"Value for key '{key}' was not found in environment variable '{EnvironmentVariableName}'.");
                         }
 
                         return value;
diff --git a/src/HPCCache/HPCCache.Test/Utilities/StorageCacheTestUtilities.cs b/src/HPCCache/HPCCache.Test/Utilities/StorageCacheTestUtilities.cs
index ad70b84024..48ff7f5660 100644
--- a/src/HPCCache/HPCCache.Test/Utilities/StorageCacheTestUtilities.cs
+++ b/src/HPCCache/HPCCache.Test/Utilities/StorageCacheTestUtilities.cs
@@ -36,7 +36,7 @@ namespace Microsoft.Azure.Commands.HPCCache.Test.Utilities
         {
             StringBuilder sb = new StringBuilder(DateTime.Now.ToString("MMdd"));
             var firstFour = Guid.NewGuid().ToString().Substring(0, 4);
-            sb.Append(string.Format("x{0}", firstFour));
+            sb.Append($"x{firstFour}");
             return sb.ToString();
         }
 
@@ -58,7 +58,7 @@ namespace Microsoft.Azure.Commands.HPCCache.Test.Utilities
             }
             catch (KeyNotFoundException e)
             {
-                throw new KeyNotFoundException(string.Format("Generated name not found for calling method: {0}", methodName), e);
+                throw new KeyNotFoundException($"Generated name not found for calling method: {methodName}", e);
             }
         }
 
diff --git a/src/HPCCache/HPCCache/Commands/GetAzHpcCache.cs b/src/HPCCache/HPCCache/Commands/GetAzHpcCache.cs
index 87e97c28d7..a04b13c6d2 100644
--- a/src/HPCCache/HPCCache/Commands/GetAzHpcCache.cs
+++ b/src/HPCCache/HPCCache/Commands/GetAzHpcCache.cs
@@ -58,7 +58,7 @@ namespace Microsoft.Azure.Commands.HPCCache
                     }
                     catch (CloudErrorException ex)
                     {
-                        throw new CloudException(string.Format("Exception: {0}", ex.Body.Error.Message));
+                        throw new CloudException($"Exception: {ex.Body.Error.Message}");
                     }
                 }
                 else
diff --git a/src/HPCCache/HPCCache/Commands/GetAzHpcCacheStorageTarget.cs b/src/HPCCache/HPCCache/Commands/GetAzHpcCacheStorageTarget.cs
index b5dd2e1282..85eeead6de 100644
--- a/src/HPCCache/HPCCache/Commands/GetAzHpcCacheStorageTarget.cs
+++ b/src/HPCCache/HPCCache/Commands/GetAzHpcCacheStorageTarget.cs
@@ -95,7 +95,7 @@ namespace Microsoft.Azure.Commands.HPCCache
                         }
                         catch (CloudErrorException ex)
                         {
-                            throw new CloudException(string.Format("Exception: {0}", ex.Body.Error.Message));
+                            throw new CloudException($"Exception: {ex.Body.Error.Message}");
                         }
                     }
                     else
diff --git a/src/HPCCache/HPCCache/Commands/NewAzHpcCache.cs b/src/HPCCache/HPCCache/Commands/NewAzHpcCache.cs
index 6feb2673fd..64e866b1c4 100644
--- a/src/HPCCache/HPCCache/Commands/NewAzHpcCache.cs
+++ b/src/HPCCache/HPCCache/Commands/NewAzHpcCache.cs
@@ -94,7 +94,7 @@ namespace Microsoft.Azure.Commands.HPCCache
             try
             {
                 var cacheExists = this.HpcCacheClient.Caches.Get(this.ResourceGroupName, this.Name);
-                throw new CloudException(string.Format("Cache name {0} already exists", this.Name));
+                throw new CloudException($"Cache name {this.Name} already exists");
             }
             catch (CloudErrorException ex)
             {
@@ -117,7 +117,7 @@ namespace Microsoft.Azure.Commands.HPCCache
                 }
                 catch (CloudErrorException ex)
                 {
-                    throw new CloudException(string.Format("Exception: {0}", ex.Body.Error.Message));
+                    throw new CloudException($"Exception: {ex.Body.Error.Message}");
                 }
             }
         }
diff --git a/src/HPCCache/HPCCache/Commands/RemoveAzHpcCache.cs b/src/HPCCache/HPCCache/Commands/RemoveAzHpcCache.cs
index 7e10538111..e31236bcfb 100644
--- a/src/HPCCache/HPCCache/Commands/RemoveAzHpcCache.cs
+++ b/src/HPCCache/HPCCache/Commands/RemoveAzHpcCache.cs
@@ -85,7 +85,7 @@ namespace Microsoft.Azure.Commands.HPCCache
                     }
                     catch (CloudErrorException ex)
                     {
-                        throw new CloudException(string.Format("Exception: {0}", ex.Body.Error.Message));
+                        throw new CloudException($"Exception: {ex.Body.Error.Message}");
                     }
                 });
         }
diff --git a/src/HPCCache/HPCCache/Commands/RemoveAzHpcCacheStorageTarget.cs b/src/HPCCache/HPCCache/Commands/RemoveAzHpcCacheStorageTarget.cs
index 67f1d0909f..4787a81232 100644
--- a/src/HPCCache/HPCCache/Commands/RemoveAzHpcCacheStorageTarget.cs
+++ b/src/HPCCache/HPCCache/Commands/RemoveAzHpcCacheStorageTarget.cs
@@ -92,7 +92,7 @@ namespace Microsoft.Azure.Commands.HPCCache
                     }
                     catch (CloudErrorException ex)
                     {
-                        throw new CloudException(string.Format("Exception: {0}", ex.Body.Error.Message));
+                        throw new CloudException($"Exception: {ex.Body.Error.Message}");
                     }
                 });
         }
diff --git a/src/HPCCache/HPCCache/Commands/SetAzHpcCache.cs b/src/HPCCache/HPCCache/Commands/SetAzHpcCache.cs
index dd56d0c155..c38fc457f9 100644
--- a/src/HPCCache/HPCCache/Commands/SetAzHpcCache.cs
+++ b/src/HPCCache/HPCCache/Commands/SetAzHpcCache.cs
@@ -108,7 +108,7 @@ namespace Microsoft.Azure.Commands.HPCCache
                 }
                 catch (CloudErrorException ex)
                 {
-                    throw new CloudException(string.Format("Exception: {0}", ex.Body.Error.Message));
+                    throw new CloudException($"Exception: {ex.Body.Error.Message}");
                 }
             }
         }
diff --git a/src/HPCCache/HPCCache/Commands/SetAzHpcStorageTarget.cs b/src/HPCCache/HPCCache/Commands/SetAzHpcStorageTarget.cs
index d19c5d903c..f878325250 100644
--- a/src/HPCCache/HPCCache/Commands/SetAzHpcStorageTarget.cs
+++ b/src/HPCCache/HPCCache/Commands/SetAzHpcStorageTarget.cs
@@ -130,7 +130,7 @@ namespace Microsoft.Azure.Commands.HPCCache
 
                         if (storageT == null)
                         {
-                            throw new CloudException(string.Format("Storage target {0} does not exists.", this.Name));
+                            throw new CloudException($"Storage target {this.Name} does not exists.");
                         }
 
                         this.storageTarget = this.CLFS.IsPresent ? this.CreateClfsStorageTargetParameters(storageT) : this.CreateNfsStorageTargetParameters(storageT);
diff --git a/src/HPCCache/HPCCache/Commands/StartAzHpcCache.cs b/src/HPCCache/HPCCache/Commands/StartAzHpcCache.cs
index c27588f5f3..057df5ac26 100644
--- a/src/HPCCache/HPCCache/Commands/StartAzHpcCache.cs
+++ b/src/HPCCache/HPCCache/Commands/StartAzHpcCache.cs
@@ -131,7 +131,7 @@ namespace Microsoft.Azure.Commands.HPCCache
             }
             catch (CloudErrorException ex)
             {
-                throw new CloudException(string.Format("Exception: {0}", ex.Body.Error.Message));
+                throw new CloudException($"Exception: {ex.Body.Error.Message}");
             }
         }
     }
diff --git a/src/HPCCache/HPCCache/Commands/StopAzHpcCache.cs b/src/HPCCache/HPCCache/Commands/StopAzHpcCache.cs
index 8db138b440..54417ab0d5 100644
--- a/src/HPCCache/HPCCache/Commands/StopAzHpcCache.cs
+++ b/src/HPCCache/HPCCache/Commands/StopAzHpcCache.cs
@@ -126,7 +126,7 @@ namespace Microsoft.Azure.Commands.HPCCache
             }
             catch (CloudErrorException ex)
             {
-                throw new CloudException(string.Format("Exception: {0}", ex.Body.Error.Message));
+                throw new CloudException($"Exception: {ex.Body.Error.Message}");
             }
         }
     }
diff --git a/src/HPCCache/HPCCache/Commands/UpdateAzHpcCache.cs b/src/HPCCache/HPCCache/Commands/UpdateAzHpcCache.cs
index 43ce6da445..a34206001e 100644
--- a/src/HPCCache/HPCCache/Commands/UpdateAzHpcCache.cs
+++ b/src/HPCCache/HPCCache/Commands/UpdateAzHpcCache.cs
@@ -160,7 +160,7 @@ namespace Microsoft.Azure.Commands.HPCCache
                 }
                 catch (CloudErrorException ex)
                 {
-                    throw new CloudException(string.Format("Exception: {0}", ex.Body.Error.Message));
+                    throw new CloudException($"Exception: {ex.Body.Error.Message}");
                 }
             }
         }
@@ -190,7 +190,7 @@ namespace Microsoft.Azure.Commands.HPCCache
             }
             catch (CloudErrorException ex)
             {
-                throw new CloudException(string.Format("Exception: {0}", ex.Body.Error.Message));
+                throw new CloudException($"Exception: {ex.Body.Error.Message}");
             }
         }
     }
diff --git a/src/HanaOnAzure/generated/runtime/Serialization/JsonSerializer.cs b/src/HanaOnAzure/generated/runtime/Serialization/JsonSerializer.cs
index 75496757fa..3cd23c7b75 100644
--- a/src/HanaOnAzure/generated/runtime/Serialization/JsonSerializer.cs
+++ b/src/HanaOnAzure/generated/runtime/Serialization/JsonSerializer.cs
@@ -312,7 +312,7 @@ namespace Microsoft.Azure.PowerShell.Cmdlets.HanaOnAzure.Runtime.Json
                     default: return ReadArray((IEnumerable)value);
                 }
             }
-            else if (value is IEnumerable)
+            else if (value is IEnumerable iEnumerable)
             {
                 if (type.IsList && type.ElementType != null)
                 {
@@ -330,7 +330,7 @@ namespace Microsoft.Azure.PowerShell.Cmdlets.HanaOnAzure.Runtime.Json
                     }
                 }
 
-                return ReadArray((IEnumerable)value);
+                return ReadArray(iEnumerable);
             }
             else
             {
diff --git a/src/HealthBot/generated/runtime/Serialization/JsonSerializer.cs b/src/HealthBot/generated/runtime/Serialization/JsonSerializer.cs
index 8b7651500b..46a3e514e1 100644
--- a/src/HealthBot/generated/runtime/Serialization/JsonSerializer.cs
+++ b/src/HealthBot/generated/runtime/Serialization/JsonSerializer.cs
@@ -312,7 +312,7 @@ namespace Microsoft.Azure.PowerShell.Cmdlets.HealthBot.Runtime.Json
                     default: return ReadArray((IEnumerable)value);
                 }
             }
-            else if (value is IEnumerable)
+            else if (value is IEnumerable iEnumerable)
             {
                 if (type.IsList && type.ElementType != null)
                 {
@@ -330,7 +330,7 @@ namespace Microsoft.Azure.PowerShell.Cmdlets.HealthBot.Runtime.Json
                     }
                 }
 
-                return ReadArray((IEnumerable)value);
+                return ReadArray(iEnumerable);
             }
             else
             {
diff --git a/src/ImageBuilder/generated/runtime/Serialization/JsonSerializer.cs b/src/ImageBuilder/generated/runtime/Serialization/JsonSerializer.cs
index d6e300301b..154a7026aa 100644
--- a/src/ImageBuilder/generated/runtime/Serialization/JsonSerializer.cs
+++ b/src/ImageBuilder/generated/runtime/Serialization/JsonSerializer.cs
@@ -312,7 +312,7 @@ namespace Microsoft.Azure.PowerShell.Cmdlets.ImageBuilder.Runtime.Json
                     default: return ReadArray((IEnumerable)value);
                 }
             }
-            else if (value is IEnumerable)
+            else if (value is IEnumerable iEnumerable)
             {
                 if (type.IsList && type.ElementType != null)
                 {
@@ -330,7 +330,7 @@ namespace Microsoft.Azure.PowerShell.Cmdlets.ImageBuilder.Runtime.Json
                     }
                 }
 
-                return ReadArray((IEnumerable)value);
+                return ReadArray(iEnumerable);
             }
             else
             {
diff --git a/src/ImportExport/generated/runtime/Serialization/JsonSerializer.cs b/src/ImportExport/generated/runtime/Serialization/JsonSerializer.cs
index d76367482d..370ae7af34 100644
--- a/src/ImportExport/generated/runtime/Serialization/JsonSerializer.cs
+++ b/src/ImportExport/generated/runtime/Serialization/JsonSerializer.cs
@@ -312,7 +312,7 @@ namespace Microsoft.Azure.PowerShell.Cmdlets.ImportExport.Runtime.Json
                     default: return ReadArray((IEnumerable)value);
                 }
             }
-            else if (value is IEnumerable)
+            else if (value is IEnumerable iEnumerable)
             {
                 if (type.IsList && type.ElementType != null)
                 {
@@ -330,7 +330,7 @@ namespace Microsoft.Azure.PowerShell.Cmdlets.ImportExport.Runtime.Json
                     }
                 }
 
-                return ReadArray((IEnumerable)value);
+                return ReadArray(iEnumerable);
             }
             else
             {
diff --git a/src/IotHub/IotHub/Common/IotHubUtils.cs b/src/IotHub/IotHub/Common/IotHubUtils.cs
index 3e1d2c0fce..8ea9d36d41 100644
--- a/src/IotHub/IotHub/Common/IotHubUtils.cs
+++ b/src/IotHub/IotHub/Common/IotHubUtils.cs
@@ -71,68 +71,68 @@ namespace Microsoft.Azure.Commands.Management.IotHub.Common
         public static SharedAccessSignatureAuthorizationRule GetPolicy(IEnumerable<SharedAccessSignatureAuthorizationRule> authorizationPolicies, PSAccessRights accessRights)
         {
             SharedAccessSignatureAuthorizationRule policy;
-            policy = authorizationPolicies.Where(p => p.Rights.Equals(AccessRights.RegistryReadRegistryWriteServiceConnectDeviceConnect)).FirstOrDefault();
+            policy = authorizationPolicies.FirstOrDefault(p => p.Rights.Equals(AccessRights.RegistryReadRegistryWriteServiceConnectDeviceConnect));
             if (policy == null)
             {
                 switch (accessRights)
                 {
                     case PSAccessRights.RegistryRead:
                         if (policy == null && authorizationPolicies.Any(p => p.Rights.Equals(AccessRights.RegistryReadServiceConnectDeviceConnect)))
-                            policy = authorizationPolicies.Where(p => p.Rights.Equals(AccessRights.RegistryReadServiceConnectDeviceConnect)).FirstOrDefault();
+                            policy = authorizationPolicies.FirstOrDefault(p => p.Rights.Equals(AccessRights.RegistryReadServiceConnectDeviceConnect));
                         if (policy == null && authorizationPolicies.Any(p => p.Rights.Equals(AccessRights.RegistryReadDeviceConnect)))
-                            policy = authorizationPolicies.Where(p => p.Rights.Equals(AccessRights.RegistryReadDeviceConnect)).FirstOrDefault();
+                            policy = authorizationPolicies.FirstOrDefault(p => p.Rights.Equals(AccessRights.RegistryReadDeviceConnect));
                         if (policy == null && authorizationPolicies.Any(p => p.Rights.Equals(AccessRights.RegistryReadServiceConnect)))
-                            policy = authorizationPolicies.Where(p => p.Rights.Equals(AccessRights.RegistryReadServiceConnect)).FirstOrDefault();
+                            policy = authorizationPolicies.FirstOrDefault(p => p.Rights.Equals(AccessRights.RegistryReadServiceConnect));
                         if (policy == null && authorizationPolicies.Any(p => p.Rights.Equals(AccessRights.RegistryRead)))
-                            policy = authorizationPolicies.Where(p => p.Rights.Equals(AccessRights.RegistryRead)).FirstOrDefault();
+                            policy = authorizationPolicies.FirstOrDefault(p => p.Rights.Equals(AccessRights.RegistryRead));
                         break;
                     case PSAccessRights.RegistryWrite:
                         if (policy == null && authorizationPolicies.Any(p => p.Rights.Equals(AccessRights.RegistryWriteServiceConnectDeviceConnect)))
-                            policy = authorizationPolicies.Where(p => p.Rights.Equals(AccessRights.RegistryWriteServiceConnectDeviceConnect)).FirstOrDefault();
+                            policy = authorizationPolicies.FirstOrDefault(p => p.Rights.Equals(AccessRights.RegistryWriteServiceConnectDeviceConnect));
                         if (policy == null && authorizationPolicies.Any(p => p.Rights.Equals(AccessRights.RegistryReadRegistryWriteDeviceConnect)))
-                            policy = authorizationPolicies.Where(p => p.Rights.Equals(AccessRights.RegistryReadRegistryWriteDeviceConnect)).FirstOrDefault();
+                            policy = authorizationPolicies.FirstOrDefault(p => p.Rights.Equals(AccessRights.RegistryReadRegistryWriteDeviceConnect));
                         if (policy == null && authorizationPolicies.Any(p => p.Rights.Equals(AccessRights.RegistryReadRegistryWriteServiceConnect)))
-                            policy = authorizationPolicies.Where(p => p.Rights.Equals(AccessRights.RegistryReadRegistryWriteServiceConnect)).FirstOrDefault();
+                            policy = authorizationPolicies.FirstOrDefault(p => p.Rights.Equals(AccessRights.RegistryReadRegistryWriteServiceConnect));
                         if (policy == null && authorizationPolicies.Any(p => p.Rights.Equals(AccessRights.RegistryWriteDeviceConnect)))
-                            policy = authorizationPolicies.Where(p => p.Rights.Equals(AccessRights.RegistryWriteDeviceConnect)).FirstOrDefault();
+                            policy = authorizationPolicies.FirstOrDefault(p => p.Rights.Equals(AccessRights.RegistryWriteDeviceConnect));
                         if (policy == null && authorizationPolicies.Any(p => p.Rights.Equals(AccessRights.RegistryWriteServiceConnect)))
-                            policy = authorizationPolicies.Where(p => p.Rights.Equals(AccessRights.RegistryWriteServiceConnect)).FirstOrDefault();
+                            policy = authorizationPolicies.FirstOrDefault(p => p.Rights.Equals(AccessRights.RegistryWriteServiceConnect));
                         if (policy == null && authorizationPolicies.Any(p => p.Rights.Equals(AccessRights.RegistryReadRegistryWrite)))
-                            policy = authorizationPolicies.Where(p => p.Rights.Equals(AccessRights.RegistryReadRegistryWrite)).FirstOrDefault();
+                            policy = authorizationPolicies.FirstOrDefault(p => p.Rights.Equals(AccessRights.RegistryReadRegistryWrite));
                         if (policy == null && authorizationPolicies.Any(p => p.Rights.Equals(AccessRights.RegistryWrite)))
-                            policy = authorizationPolicies.Where(p => p.Rights.Equals(AccessRights.RegistryWrite)).FirstOrDefault();
+                            policy = authorizationPolicies.FirstOrDefault(p => p.Rights.Equals(AccessRights.RegistryWrite));
                         break;
                     case PSAccessRights.ServiceConnect:
                         if (policy == null && authorizationPolicies.Any(p => p.Rights.Equals(AccessRights.RegistryWriteServiceConnectDeviceConnect)))
-                            policy = authorizationPolicies.Where(p => p.Rights.Equals(AccessRights.RegistryWriteServiceConnectDeviceConnect)).FirstOrDefault();
+                            policy = authorizationPolicies.FirstOrDefault(p => p.Rights.Equals(AccessRights.RegistryWriteServiceConnectDeviceConnect));
                         if (policy == null && authorizationPolicies.Any(p => p.Rights.Equals(AccessRights.RegistryReadServiceConnectDeviceConnect)))
-                            policy = authorizationPolicies.Where(p => p.Rights.Equals(AccessRights.RegistryReadServiceConnectDeviceConnect)).FirstOrDefault();
+                            policy = authorizationPolicies.FirstOrDefault(p => p.Rights.Equals(AccessRights.RegistryReadServiceConnectDeviceConnect));
                         if (policy == null && authorizationPolicies.Any(p => p.Rights.Equals(AccessRights.RegistryReadRegistryWriteServiceConnect)))
-                            policy = authorizationPolicies.Where(p => p.Rights.Equals(AccessRights.RegistryReadRegistryWriteServiceConnect)).FirstOrDefault();
+                            policy = authorizationPolicies.FirstOrDefault(p => p.Rights.Equals(AccessRights.RegistryReadRegistryWriteServiceConnect));
                         if (policy == null && authorizationPolicies.Any(p => p.Rights.Equals(AccessRights.ServiceConnectDeviceConnect)))
-                            policy = authorizationPolicies.Where(p => p.Rights.Equals(AccessRights.ServiceConnectDeviceConnect)).FirstOrDefault();
+                            policy = authorizationPolicies.FirstOrDefault(p => p.Rights.Equals(AccessRights.ServiceConnectDeviceConnect));
                         if (policy == null && authorizationPolicies.Any(p => p.Rights.Equals(AccessRights.RegistryWriteServiceConnect)))
-                            policy = authorizationPolicies.Where(p => p.Rights.Equals(AccessRights.RegistryWriteServiceConnect)).FirstOrDefault();
+                            policy = authorizationPolicies.FirstOrDefault(p => p.Rights.Equals(AccessRights.RegistryWriteServiceConnect));
                         if (policy == null && authorizationPolicies.Any(p => p.Rights.Equals(AccessRights.RegistryReadServiceConnect)))
-                            policy = authorizationPolicies.Where(p => p.Rights.Equals(AccessRights.RegistryReadServiceConnect)).FirstOrDefault();
+                            policy = authorizationPolicies.FirstOrDefault(p => p.Rights.Equals(AccessRights.RegistryReadServiceConnect));
                         if (policy == null && authorizationPolicies.Any(p => p.Rights.Equals(AccessRights.ServiceConnect)))
-                            policy = authorizationPolicies.Where(p => p.Rights.Equals(AccessRights.ServiceConnect)).FirstOrDefault();
+                            policy = authorizationPolicies.FirstOrDefault(p => p.Rights.Equals(AccessRights.ServiceConnect));
                         break;
                     case PSAccessRights.DeviceConnect:
                         if (policy == null && authorizationPolicies.Any(p => p.Rights.Equals(AccessRights.RegistryWriteServiceConnectDeviceConnect)))
-                            policy = authorizationPolicies.Where(p => p.Rights.Equals(AccessRights.RegistryWriteServiceConnectDeviceConnect)).FirstOrDefault();
+                            policy = authorizationPolicies.FirstOrDefault(p => p.Rights.Equals(AccessRights.RegistryWriteServiceConnectDeviceConnect));
                         if (policy == null && authorizationPolicies.Any(p => p.Rights.Equals(AccessRights.RegistryReadServiceConnectDeviceConnect)))
-                            policy = authorizationPolicies.Where(p => p.Rights.Equals(AccessRights.RegistryReadServiceConnectDeviceConnect)).FirstOrDefault();
+                            policy = authorizationPolicies.FirstOrDefault(p => p.Rights.Equals(AccessRights.RegistryReadServiceConnectDeviceConnect));
                         if (policy == null && authorizationPolicies.Any(p => p.Rights.Equals(AccessRights.RegistryReadRegistryWriteDeviceConnect)))
-                            policy = authorizationPolicies.Where(p => p.Rights.Equals(AccessRights.RegistryReadRegistryWriteDeviceConnect)).FirstOrDefault();
+                            policy = authorizationPolicies.FirstOrDefault(p => p.Rights.Equals(AccessRights.RegistryReadRegistryWriteDeviceConnect));
                         if (policy == null && authorizationPolicies.Any(p => p.Rights.Equals(AccessRights.ServiceConnectDeviceConnect)))
-                            policy = authorizationPolicies.Where(p => p.Rights.Equals(AccessRights.ServiceConnectDeviceConnect)).FirstOrDefault();
+                            policy = authorizationPolicies.FirstOrDefault(p => p.Rights.Equals(AccessRights.ServiceConnectDeviceConnect));
                         if (policy == null && authorizationPolicies.Any(p => p.Rights.Equals(AccessRights.RegistryWriteDeviceConnect)))
-                            policy = authorizationPolicies.Where(p => p.Rights.Equals(AccessRights.RegistryWriteDeviceConnect)).FirstOrDefault();
+                            policy = authorizationPolicies.FirstOrDefault(p => p.Rights.Equals(AccessRights.RegistryWriteDeviceConnect));
                         if (policy == null && authorizationPolicies.Any(p => p.Rights.Equals(AccessRights.RegistryReadDeviceConnect)))
-                            policy = authorizationPolicies.Where(p => p.Rights.Equals(AccessRights.RegistryReadDeviceConnect)).FirstOrDefault();
+                            policy = authorizationPolicies.FirstOrDefault(p => p.Rights.Equals(AccessRights.RegistryReadDeviceConnect));
                         if (policy == null && authorizationPolicies.Any(p => p.Rights.Equals(AccessRights.DeviceConnect)))
-                            policy = authorizationPolicies.Where(p => p.Rights.Equals(AccessRights.DeviceConnect)).FirstOrDefault();
+                            policy = authorizationPolicies.FirstOrDefault(p => p.Rights.Equals(AccessRights.DeviceConnect));
                         break;
                 }
             }
@@ -410,12 +410,12 @@ namespace Microsoft.Azure.Commands.Management.IotHub.Common
                 case PSEndpointType.ServiceBusTopic:
                     r = new Regex(@"(.*?)sb://(?<resourceType>\S+).servicebus.windows.net(.*?)EntityPath=(?<name>\S+)", RegexOptions.IgnoreCase);
                     Match match1 = r.Match(connectionString);
-                    azureResource = match1.Success ? string.Format("{0}/{1}", match1.Groups["resourceType"].Value, match1.Groups["name"].Value) : null;
+                    azureResource = match1.Success ? $"{match1.Groups["resourceType"].Value}/{match1.Groups["name"].Value}" : null;
                     break;
                 case PSEndpointType.AzureStorageContainer:
                     r = new Regex(@"(.*?)AccountName=(?<resourceType>\S+);AccountKey=(.*?)", RegexOptions.IgnoreCase);
                     Match match2 = r.Match(connectionString);
-                    azureResource = match2.Success ? string.Format("{0}/{1}", match2.Groups["resourceType"].Value, containerName) : null;
+                    azureResource = match2.Success ? $"{match2.Groups["resourceType"].Value}/{containerName}" : null;
                     break;
             }
 
diff --git a/src/IotHub/IotHub/IotHub/DataPlane/Configuration/InvokeAzIotHubConfigurationMetricsQuery.cs b/src/IotHub/IotHub/IotHub/DataPlane/Configuration/InvokeAzIotHubConfigurationMetricsQuery.cs
index 329f8b4e7f..35315c711f 100644
--- a/src/IotHub/IotHub/IotHub/DataPlane/Configuration/InvokeAzIotHubConfigurationMetricsQuery.cs
+++ b/src/IotHub/IotHub/IotHub/DataPlane/Configuration/InvokeAzIotHubConfigurationMetricsQuery.cs
@@ -127,7 +127,7 @@ namespace Microsoft.Azure.Commands.Management.IotHub
                     }
                     else
                     {
-                        throw new ArgumentException(string.Format("The metric '{0}' is not defined in the configuration '{1}'", this.MetricName, this.Name));
+                        throw new ArgumentException($"The metric '{this.MetricName}' is not defined in the configuration '{this.Name}'");
                     }
                 }
                 else
diff --git a/src/IotHub/IotHub/IotHub/DataPlane/Deployment/InvokeAzIotHubDeploymentMetricQuery.cs b/src/IotHub/IotHub/IotHub/DataPlane/Deployment/InvokeAzIotHubDeploymentMetricQuery.cs
index 518feb6dd4..174fd5ef0c 100644
--- a/src/IotHub/IotHub/IotHub/DataPlane/Deployment/InvokeAzIotHubDeploymentMetricQuery.cs
+++ b/src/IotHub/IotHub/IotHub/DataPlane/Deployment/InvokeAzIotHubDeploymentMetricQuery.cs
@@ -138,7 +138,7 @@ namespace Microsoft.Azure.Commands.Management.IotHub
                     }
                     else
                     {
-                        throw new ArgumentException(string.Format("The metric '{0}' is not defined in the deployment '{1}'", this.MetricName, this.Name));
+                        throw new ArgumentException($"The metric '{this.MetricName}' is not defined in the deployment '{this.Name}'");
                     }
                 }
                 else
diff --git a/src/IotHub/IotHub/IotHub/DataPlane/Device/GetAzIotHubDeviceConnectionString.cs b/src/IotHub/IotHub/IotHub/DataPlane/Device/GetAzIotHubDeviceConnectionString.cs
index fd69477af2..d84a1d5540 100644
--- a/src/IotHub/IotHub/IotHub/DataPlane/Device/GetAzIotHubDeviceConnectionString.cs
+++ b/src/IotHub/IotHub/IotHub/DataPlane/Device/GetAzIotHubDeviceConnectionString.cs
@@ -114,7 +114,7 @@ namespace Microsoft.Azure.Commands.Management.IotHub
             switch (device.Authentication.Type)
             {
                 case Devices.AuthenticationType.Sas:
-                    key = string.Format("SharedAccessKey={0}", this.KeyType.Equals(PSKeyType.primary) ? device.Authentication.SymmetricKey.PrimaryKey : device.Authentication.SymmetricKey.SecondaryKey);
+                    key = $"SharedAccessKey={(this.KeyType.Equals(PSKeyType.primary) ? device.Authentication.SymmetricKey.PrimaryKey : device.Authentication.SymmetricKey.SecondaryKey)}";
                     break;
                 case Devices.AuthenticationType.SelfSigned:
                 case Devices.AuthenticationType.CertificateAuthority:
diff --git a/src/IotHub/IotHub/IotHub/DataPlane/Module/GetAzIotHubModuleConnectionString.cs b/src/IotHub/IotHub/IotHub/DataPlane/Module/GetAzIotHubModuleConnectionString.cs
index 65ff8a8fdc..8320ea10cd 100644
--- a/src/IotHub/IotHub/IotHub/DataPlane/Module/GetAzIotHubModuleConnectionString.cs
+++ b/src/IotHub/IotHub/IotHub/DataPlane/Module/GetAzIotHubModuleConnectionString.cs
@@ -123,7 +123,7 @@ namespace Microsoft.Azure.Commands.Management.IotHub
             switch (module.Authentication.Type)
             {
                 case Devices.AuthenticationType.Sas:
-                    key = string.Format("SharedAccessKey={0}", this.KeyType.Equals(PSKeyType.primary) ? module.Authentication.SymmetricKey.PrimaryKey : module.Authentication.SymmetricKey.SecondaryKey);
+                    key = $"SharedAccessKey={(this.KeyType.Equals(PSKeyType.primary) ? module.Authentication.SymmetricKey.PrimaryKey : module.Authentication.SymmetricKey.SecondaryKey)}";
                     break;
                 case Devices.AuthenticationType.SelfSigned:
                 case Devices.AuthenticationType.CertificateAuthority:
diff --git a/src/IotHub/IotHub/IotHub/DataPlane/NewAzIotHubSasToken.cs b/src/IotHub/IotHub/IotHub/DataPlane/NewAzIotHubSasToken.cs
index 8e3bd50329..d55dbf17bd 100644
--- a/src/IotHub/IotHub/IotHub/DataPlane/NewAzIotHubSasToken.cs
+++ b/src/IotHub/IotHub/IotHub/DataPlane/NewAzIotHubSasToken.cs
@@ -126,7 +126,7 @@ namespace Microsoft.Azure.Commands.Management.IotHub
                         {
                             if (module.Authentication.Type.Equals(Devices.AuthenticationType.Sas))
                             {
-                                resourceUri = string.Format("{0}/devices/{1}/modules/{2}", iotHubDescription.Properties.HostName, this.DeviceId, this.ModuleId);
+                                resourceUri = $"{iotHubDescription.Properties.HostName}/devices/{this.DeviceId}/modules/{this.ModuleId}";
                                 key = this.KeyType.Equals(PSKeyType.primary) ? module.Authentication.SymmetricKey.PrimaryKey : module.Authentication.SymmetricKey.SecondaryKey;
                             }
                             else
@@ -146,7 +146,7 @@ namespace Microsoft.Azure.Commands.Management.IotHub
                         {
                             if (device.Authentication.Type.Equals(Devices.AuthenticationType.Sas))
                             {
-                                resourceUri = string.Format("{0}/devices/{1}", iotHubDescription.Properties.HostName, this.DeviceId);
+                                resourceUri = $"{iotHubDescription.Properties.HostName}/devices/{this.DeviceId}";
                                 key = this.KeyType.Equals(PSKeyType.primary) ? device.Authentication.SymmetricKey.PrimaryKey : device.Authentication.SymmetricKey.SecondaryKey;
                             }
                             else
diff --git a/src/KeyVault/KeyVault.Test/ScenarioTests/KeyVaultManagementController.cs b/src/KeyVault/KeyVault.Test/ScenarioTests/KeyVaultManagementController.cs
index 508167ae59..c2792e35d0 100644
--- a/src/KeyVault/KeyVault.Test/ScenarioTests/KeyVaultManagementController.cs
+++ b/src/KeyVault/KeyVault.Test/ScenarioTests/KeyVaultManagementController.cs
@@ -58,7 +58,7 @@ namespace Microsoft.Azure.Commands.KeyVault.Test
             var callingClassType = sf.GetMethod().ReflectedType?.ToString();
             var mockName = sf.GetMethod().Name;
 
-            logger.Information(string.Format("Test method entered: {0}.{1}", callingClassType, mockName));
+            logger.Information($"Test method entered: {callingClassType}.{mockName}");
             RunPsTestWorkflow(
                 logger,
                 () => scripts,
@@ -66,7 +66,7 @@ namespace Microsoft.Azure.Commands.KeyVault.Test
                 null,
                 callingClassType,
                 mockName);
-            logger.Information(string.Format("Test method finished: {0}.{1}", callingClassType, mockName));
+            logger.Information($"Test method finished: {callingClassType}.{mockName}");
         }
 
 
diff --git a/src/KeyVault/KeyVault.Test/ScenarioTests/KeyVaultManagementTests.cs b/src/KeyVault/KeyVault.Test/ScenarioTests/KeyVaultManagementTests.cs
index 921f6f2af2..5c77db62d5 100644
--- a/src/KeyVault/KeyVault.Test/ScenarioTests/KeyVaultManagementTests.cs
+++ b/src/KeyVault/KeyVault.Test/ScenarioTests/KeyVaultManagementTests.cs
@@ -154,7 +154,7 @@ namespace Microsoft.Azure.Commands.KeyVault.Test.ScenarioTests
                 () =>
                 {
                     var objId = GetUserObjectId(controller, upn);
-                    return new[] { string.Format("{0} {1} {2} {3}", "Test-SetRemoveAccessPolicyByObjectId", _data.PreCreatedVault, _data.ResourceGroupName, objId) };
+                    return new[] { $"{"Test-SetRemoveAccessPolicyByObjectId"} {_data.PreCreatedVault} {_data.ResourceGroupName} {objId}" };
                 },
                 null,
                 MethodBase.GetCurrentMethod().ReflectedType?.ToString(),
@@ -171,7 +171,7 @@ namespace Microsoft.Azure.Commands.KeyVault.Test.ScenarioTests
                 _logger,
                 () =>
                 {
-                    return new[] { string.Format("{0} {1} {2} {3}", "Test-SetRemoveAccessPolicyByUPN", _data.PreCreatedVault, _data.ResourceGroupName, upn) };
+                    return new[] { $"{"Test-SetRemoveAccessPolicyByUPN"} {_data.PreCreatedVault} {_data.ResourceGroupName} {upn}" };
                 },
                 null,
                 MethodBase.GetCurrentMethod().ReflectedType?.ToString(),
@@ -192,7 +192,7 @@ namespace Microsoft.Azure.Commands.KeyVault.Test.ScenarioTests
                 () =>
                 {
                     var objId = GetUserObjectId(controller, upn);
-                    return new[] { string.Format("{0} {1} {2} {3} {4}", "Test-SetRemoveAccessPolicyByCompoundId", _data.PreCreatedVault, _data.ResourceGroupName, appId, objId) };
+                    return new[] { $"{"Test-SetRemoveAccessPolicyByCompoundId"} {_data.PreCreatedVault} {_data.ResourceGroupName} {appId} {objId}" };
                 },
                 null,
                 MethodBase.GetCurrentMethod().ReflectedType?.ToString(),
@@ -215,7 +215,7 @@ namespace Microsoft.Azure.Commands.KeyVault.Test.ScenarioTests
                 () =>
                 {
                     var objId = GetUserObjectId(controller, upn);
-                    return new[] { string.Format("{0} {1} {2} {3} {4} {5}", "Test-RemoveAccessPolicyWithCompoundIdPolicies", _data.PreCreatedVault, _data.ResourceGroupName, appId1, appId2, objId) };
+                    return new[] { $"{"Test-RemoveAccessPolicyWithCompoundIdPolicies"} {_data.PreCreatedVault} {_data.ResourceGroupName} {appId1} {appId2} {objId}" };
                 },
                 null,
                 MethodBase.GetCurrentMethod().ReflectedType?.ToString(),
@@ -236,7 +236,7 @@ namespace Microsoft.Azure.Commands.KeyVault.Test.ScenarioTests
                 () =>
                 {
                     var objId = GetUserObjectId(controller, upn);
-                    return new[] { string.Format("{0} {1} {2} {3} {4}", "Test-SetCompoundIdAccessPolicy", _data.PreCreatedVault, _data.ResourceGroupName, appId, objId) };
+                    return new[] { $"{"Test-SetCompoundIdAccessPolicy"} {_data.PreCreatedVault} {_data.ResourceGroupName} {appId} {objId}" };
                 },
                 null,
                 MethodBase.GetCurrentMethod().ReflectedType?.ToString(),
@@ -259,10 +259,7 @@ namespace Microsoft.Azure.Commands.KeyVault.Test.ScenarioTests
             {
                 app = CreateNewAdApp(controller);
                 principal = CreateNewAdServicePrincipal(controller, app.AppId);
-                return new[] { string.Format("{0} {1} {2} {3}", "Test-SetRemoveAccessPolicyBySPN",
-                    _data.PreCreatedVault,
-                    _data.ResourceGroupName,
-                    principal.ServicePrincipalNames.Where(s => s.StartsWith("http")).FirstOrDefault()) };
+                return new[] { $"{"Test-SetRemoveAccessPolicyBySPN"} {_data.PreCreatedVault} {_data.ResourceGroupName} {principal.ServicePrincipalNames.FirstOrDefault(s => s.StartsWith("http"))}" };
             },
             // cleanup
             () =>
@@ -289,7 +286,7 @@ namespace Microsoft.Azure.Commands.KeyVault.Test.ScenarioTests
                 {
 
                     var objId = GetUserObjectId(controller, upn);
-                    return new[] { string.Format("{0} {1} {2} {3}", "Test-ModifyAccessPolicy", _data.PreCreatedVault, _data.ResourceGroupName, objId) };
+                    return new[] { $"{"Test-ModifyAccessPolicy"} {_data.PreCreatedVault} {_data.ResourceGroupName} {objId}" };
                 },
                 null,
                 MethodBase.GetCurrentMethod().ReflectedType?.ToString(),
@@ -307,7 +304,7 @@ namespace Microsoft.Azure.Commands.KeyVault.Test.ScenarioTests
                 _logger,
                 () =>
                 {
-                    return new[] { string.Format("{0} {1} {2} {3}", "Test-ModifyAccessPolicyEnabledForDeployment", _data.PreCreatedVault, _data.ResourceGroupName, upn) };
+                    return new[] { $"{"Test-ModifyAccessPolicyEnabledForDeployment"} {_data.PreCreatedVault} {_data.ResourceGroupName} {upn}" };
                 },
                 null,
                 MethodBase.GetCurrentMethod().ReflectedType?.ToString(),
@@ -326,7 +323,7 @@ namespace Microsoft.Azure.Commands.KeyVault.Test.ScenarioTests
                 _logger,
                 () =>
                 {
-                    return new[] { string.Format("{0} {1} {2} {3}", "Test-ModifyAccessPolicyEnabledForTemplateDeployment", _data.PreCreatedVault, _data.ResourceGroupName, upn) };
+                    return new[] { $"{"Test-ModifyAccessPolicyEnabledForTemplateDeployment"} {_data.PreCreatedVault} {_data.ResourceGroupName} {upn}" };
                 },
                 null,
                 MethodBase.GetCurrentMethod().ReflectedType?.ToString(),
@@ -344,7 +341,7 @@ namespace Microsoft.Azure.Commands.KeyVault.Test.ScenarioTests
                 _logger,
                 () =>
                 {
-                    return new[] { string.Format("{0} {1} {2} {3}", "Test-ModifyAccessPolicyEnabledForDiskEncryption", _data.PreCreatedVault, _data.ResourceGroupName, upn) };
+                    return new[] { $"{"Test-ModifyAccessPolicyEnabledForDiskEncryption"} {_data.PreCreatedVault} {_data.ResourceGroupName} {upn}" };
                 },
                 null,
                 MethodBase.GetCurrentMethod().ReflectedType?.ToString(),
@@ -381,7 +378,7 @@ namespace Microsoft.Azure.Commands.KeyVault.Test.ScenarioTests
                 () =>
                 {
                     var objId = GetUserObjectId(controller, upn);
-                    return new[] { string.Format("{0} {1} {2} {3}", "Test-RemoveNonExistentAccessPolicyDoesNotThrow", _data.PreCreatedVault, _data.ResourceGroupName, objId) };
+                    return new[] { $"{"Test-RemoveNonExistentAccessPolicyDoesNotThrow"} {_data.PreCreatedVault} {_data.ResourceGroupName} {objId}" };
                 },
                 null,
                 MethodBase.GetCurrentMethod().ReflectedType?.ToString(),
@@ -398,7 +395,7 @@ namespace Microsoft.Azure.Commands.KeyVault.Test.ScenarioTests
         {
             KeyVaultManagementController.NewInstance.RunPsTestWorkflow(
                  _logger,
-                () => { return new[] { string.Format("{0} {1} {2}", "Test-CreateDeleteVaultWithPiping", _data.ResourceGroupName, _data.Location) }; },
+                () => { return new[] { $"{"Test-CreateDeleteVaultWithPiping"} {_data.ResourceGroupName} {_data.Location}" }; },
                 null,
                 MethodBase.GetCurrentMethod().ReflectedType?.ToString(),
                 MethodBase.GetCurrentMethod().Name
@@ -425,7 +422,7 @@ namespace Microsoft.Azure.Commands.KeyVault.Test.ScenarioTests
         private Application CreateNewAdApp(KeyVaultManagementController controllerAdmin)
         {
             var appName = TestUtilities.GenerateName("adApplication");
-            var url = string.Format("http://{0}/home", appName);
+            var url = $"http://{appName}/home";
             var appParam = new ApplicationCreateParameters
             {
                 AvailableToOtherTenants = false,
diff --git a/src/KeyVault/KeyVault/Commands/SetAzureKeyVaultAccessPolicy.cs b/src/KeyVault/KeyVault/Commands/SetAzureKeyVaultAccessPolicy.cs
index 437e7a6fa5..0e91351e47 100644
--- a/src/KeyVault/KeyVault/Commands/SetAzureKeyVaultAccessPolicy.cs
+++ b/src/KeyVault/KeyVault/Commands/SetAzureKeyVaultAccessPolicy.cs
@@ -538,16 +538,16 @@ namespace Microsoft.Azure.Commands.KeyVault
 
                         //New policy will have permission arrays that are either from cmdlet input
                         //or if that's null, then from the old policy for this object ID if one existed
-                        var keys = PermissionsToKeys ?? (existingPolicy != null && existingPolicy.PermissionsToKeys != null ?
+                        var keys = PermissionsToKeys ?? (existingPolicy?.PermissionsToKeys != null ?
                             existingPolicy.PermissionsToKeys.ToArray() : null);
 
-                        var secrets = PermissionsToSecrets ?? (existingPolicy != null && existingPolicy.PermissionsToSecrets != null ?
+                        var secrets = PermissionsToSecrets ?? (existingPolicy?.PermissionsToSecrets != null ?
                             existingPolicy.PermissionsToSecrets.ToArray() : null);
 
-                        var certificates = PermissionsToCertificates ?? (existingPolicy != null && existingPolicy.PermissionsToCertificates != null ?
+                        var certificates = PermissionsToCertificates ?? (existingPolicy?.PermissionsToCertificates != null ?
                             existingPolicy.PermissionsToCertificates.ToArray() : null);
 
-                        var managedStorage = PermissionsToStorage ?? (existingPolicy != null && existingPolicy.PermissionsToStorage != null ?
+                        var managedStorage = PermissionsToStorage ?? (existingPolicy?.PermissionsToStorage != null ?
                             existingPolicy.PermissionsToStorage.ToArray() : null);
 
                         //Remove old policies for this policy identity and add a new one with the right permissions, iff there were some non-empty permissions
diff --git a/src/KeyVault/KeyVault/Commands/UpdateAzureKeyVault.cs b/src/KeyVault/KeyVault/Commands/UpdateAzureKeyVault.cs
index 596b5fe0da..ff51f5cc7e 100644
--- a/src/KeyVault/KeyVault/Commands/UpdateAzureKeyVault.cs
+++ b/src/KeyVault/KeyVault/Commands/UpdateAzureKeyVault.cs
@@ -87,10 +87,10 @@ namespace Microsoft.Azure.Commands.KeyVault
 
             if (existingResource == null)
             {
-                throw new Exception(string.Format("A key vault with name '{0}' in resource group '{1}' does not exist. Please use New-AzKeyVault to create a key vault with these properties.", this.VaultName, this.ResourceGroupName));
+                throw new Exception($"A key vault with name '{this.VaultName}' in resource group '{this.ResourceGroupName}' does not exist. Please use New-AzKeyVault to create a key vault with these properties.");
             }
 
-            if (this.ShouldProcess(this.VaultName, string.Format("Updating key vault '{0}' in resource group '{1}'.", this.VaultName, this.ResourceGroupName)))
+            if (this.ShouldProcess(this.VaultName, $"Updating key vault '{this.VaultName}' in resource group '{this.ResourceGroupName}'."))
             {
                 var result = KeyVaultManagementClient.UpdateVault(
                     existingResource,
diff --git a/src/KeyVault/KeyVault/Models/KeyVaultCmdletBase.cs b/src/KeyVault/KeyVault/Models/KeyVaultCmdletBase.cs
index fb9d8afdde..a4a5c32524 100644
--- a/src/KeyVault/KeyVault/Models/KeyVaultCmdletBase.cs
+++ b/src/KeyVault/KeyVault/Models/KeyVaultCmdletBase.cs
@@ -73,7 +73,7 @@ namespace Microsoft.Azure.Commands.KeyVault.Models
         {
             // caller is responsible for parameter validation
             var currentPath = CurrentPath();
-            var filename = string.Format("{0}\\{1}-{2}-{3}", currentPath, vaultName, entityName, DateTime.UtcNow.Subtract(EpochDate).TotalSeconds);
+            var filename = $"{currentPath}\\{vaultName}-{entityName}-{DateTime.UtcNow.Subtract(EpochDate).TotalSeconds}";
 
             return filename;
         }
diff --git a/src/KeyVault/KeyVault/Models/PSKeyVaultCertificate.cs b/src/KeyVault/KeyVault/Models/PSKeyVaultCertificate.cs
index aba04bd9ba..f66335bc2e 100644
--- a/src/KeyVault/KeyVault/Models/PSKeyVaultCertificate.cs
+++ b/src/KeyVault/KeyVault/Models/PSKeyVaultCertificate.cs
@@ -143,7 +143,7 @@ namespace Microsoft.Azure.Commands.KeyVault.Models
 
         internal static List<PSKeyVaultCertificate> FromCertificateBundles(IEnumerable<CertificateBundle> certificateBundles)
         {
-            if (certificateBundles == null || certificateBundles.Count() == 0)
+            if (certificateBundles == null || !certificateBundles.Any())
             {
                 return null;
             }
diff --git a/src/KeyVault/KeyVault/Models/PSKeyVaultCertificateAdministratorDetails.cs b/src/KeyVault/KeyVault/Models/PSKeyVaultCertificateAdministratorDetails.cs
index 2a66563aee..23d27dd9e8 100644
--- a/src/KeyVault/KeyVault/Models/PSKeyVaultCertificateAdministratorDetails.cs
+++ b/src/KeyVault/KeyVault/Models/PSKeyVaultCertificateAdministratorDetails.cs
@@ -55,7 +55,7 @@ namespace Microsoft.Azure.Commands.KeyVault.Models
 
         internal static List<PSKeyVaultCertificateAdministratorDetails> FromAdministratorDetails(IEnumerable<AdministratorDetails> administratorDetails)
         {
-            if (administratorDetails == null || administratorDetails.Count() == 0)
+            if (administratorDetails == null || !administratorDetails.Any())
             {
                 return null;
             }
@@ -65,7 +65,7 @@ namespace Microsoft.Azure.Commands.KeyVault.Models
 
         internal static List<AdministratorDetails> ToAdministratorDetails(IEnumerable<PSKeyVaultCertificateAdministratorDetails> administratorDetails)
         {
-            if (administratorDetails == null || administratorDetails.Count() == 0)
+            if (administratorDetails == null || !administratorDetails.Any())
             {
                 return null;
             }
diff --git a/src/KeyVault/KeyVault/Models/PSKeyVaultCertificateContact.cs b/src/KeyVault/KeyVault/Models/PSKeyVaultCertificateContact.cs
index 0026e1c4fe..155514f8c8 100644
--- a/src/KeyVault/KeyVault/Models/PSKeyVaultCertificateContact.cs
+++ b/src/KeyVault/KeyVault/Models/PSKeyVaultCertificateContact.cs
@@ -36,7 +36,7 @@ namespace Microsoft.Azure.Commands.KeyVault.Models
         {
             var result = new List<PSKeyVaultCertificateContact>();
 
-            if (contacts != null && contacts.ContactList != null)
+            if (contacts?.ContactList != null)
             {
                 foreach (var contact in contacts.ContactList)
                 {
diff --git a/src/KeyVault/KeyVault/Models/PfxWebKeyConverter.cs b/src/KeyVault/KeyVault/Models/PfxWebKeyConverter.cs
index 5f73a7ac36..17e3a948b4 100644
--- a/src/KeyVault/KeyVault/Models/PfxWebKeyConverter.cs
+++ b/src/KeyVault/KeyVault/Models/PfxWebKeyConverter.cs
@@ -91,12 +91,10 @@ namespace Microsoft.Azure.Commands.KeyVault.Models
             if (!certificate.HasPrivateKey)
                 throw new ArgumentException(string.Format(KeyVaultProperties.Resources.InvalidKeyBlob, "pfx"));
 
-            var rsaKey = certificate.PrivateKey as RSA;
-            if (rsaKey != null)
+            if (certificate.PrivateKey is RSA rsaKey)
                 return CreateTrack2SdkJWK(rsaKey);
 
-            var ecKey = certificate.PrivateKey as ECDsa;
-            if(ecKey != null)
+            if(certificate.PrivateKey is ECDsa ecKey)
                 return CreateTrack2SdkJWK(ecKey);
 
             // to do: support converting oct to jsonwebKey
diff --git a/src/KeyVault/KeyVault/SecurityDomain/Models/Base64UrlEncoder.cs b/src/KeyVault/KeyVault/SecurityDomain/Models/Base64UrlEncoder.cs
index f3c0405d11..5bbe2cdb5f 100644
--- a/src/KeyVault/KeyVault/SecurityDomain/Models/Base64UrlEncoder.cs
+++ b/src/KeyVault/KeyVault/SecurityDomain/Models/Base64UrlEncoder.cs
@@ -106,7 +106,7 @@ namespace Microsoft.Azure.Commands.KeyVault.SecurityDomain.Models
                     str += base64PadCharacter;
                     break;
                 default:
-                    throw new Exception(string.Format("Unable to decode: '{0}' as Base64url encoded", str));
+                    throw new Exception($"Unable to decode: '{str}' as Base64url encoded");
             }
 
             return Convert.FromBase64String(str);
diff --git a/src/KubernetesConfiguration/generated/runtime/Serialization/JsonSerializer.cs b/src/KubernetesConfiguration/generated/runtime/Serialization/JsonSerializer.cs
index 236a02b29f..78b5c6820f 100644
--- a/src/KubernetesConfiguration/generated/runtime/Serialization/JsonSerializer.cs
+++ b/src/KubernetesConfiguration/generated/runtime/Serialization/JsonSerializer.cs
@@ -312,7 +312,7 @@ namespace Microsoft.Azure.PowerShell.Cmdlets.KubernetesConfiguration.Runtime.Jso
                     default: return ReadArray((IEnumerable)value);
                 }
             }
-            else if (value is IEnumerable)
+            else if (value is IEnumerable iEnumerable)
             {
                 if (type.IsList && type.ElementType != null)
                 {
@@ -330,7 +330,7 @@ namespace Microsoft.Azure.PowerShell.Cmdlets.KubernetesConfiguration.Runtime.Jso
                     }
                 }
 
-                return ReadArray((IEnumerable)value);
+                return ReadArray(iEnumerable);
             }
             else
             {
diff --git a/src/Kusto/generated/runtime/Serialization/JsonSerializer.cs b/src/Kusto/generated/runtime/Serialization/JsonSerializer.cs
index 28b2c9424e..ee9a29a26f 100644
--- a/src/Kusto/generated/runtime/Serialization/JsonSerializer.cs
+++ b/src/Kusto/generated/runtime/Serialization/JsonSerializer.cs
@@ -312,7 +312,7 @@ namespace Microsoft.Azure.PowerShell.Cmdlets.Kusto.Runtime.Json
                     default: return ReadArray((IEnumerable)value);
                 }
             }
-            else if (value is IEnumerable)
+            else if (value is IEnumerable iEnumerable)
             {
                 if (type.IsList && type.ElementType != null)
                 {
@@ -330,7 +330,7 @@ namespace Microsoft.Azure.PowerShell.Cmdlets.Kusto.Runtime.Json
                     }
                 }
 
-                return ReadArray((IEnumerable)value);
+                return ReadArray(iEnumerable);
             }
             else
             {
diff --git a/src/LogicApp/LogicApp/Utilities/CmdletHelper.cs b/src/LogicApp/LogicApp/Utilities/CmdletHelper.cs
index 194f172711..c578022822 100644
--- a/src/LogicApp/LogicApp/Utilities/CmdletHelper.cs
+++ b/src/LogicApp/LogicApp/Utilities/CmdletHelper.cs
@@ -1,4 +1,5 @@
-﻿// ----------------------------------------------------------------------------------
+﻿using System.Linq;
+// ----------------------------------------------------------------------------------
 //
 // Copyright Microsoft Corporation
 // Licensed under the Apache License, Version 2.0 (the "License");
@@ -179,7 +180,7 @@ namespace Microsoft.Azure.Commands.LogicApp.Utilities
             {
                 var validateresult = arr.Where(item => (((object[])item).Length != 2));
 
-                if (validateresult != null && validateresult.Count() > 0)
+                if (validateresult != null && validateresult.Any())
                 {
                     throw new PSArgumentException(Properties.Resource.InvalidBusinessIdentity, "BusinessIdentities");
                 }
@@ -190,7 +191,7 @@ namespace Microsoft.Azure.Commands.LogicApp.Utilities
                     Value = ((object[])item)[1].ToString()
                 }).ToList();
             }
-            else if (arr != null && arr is Array)
+            else if (arr is Array)
             {
                 if (arr.Count() != 2)
                 {
diff --git a/src/LogicApp/LogicApp/Utilities/IntegrationAccountGeneratedControlNumberOperations.cs b/src/LogicApp/LogicApp/Utilities/IntegrationAccountGeneratedControlNumberOperations.cs
index 1a716b2999..49df1e98c2 100644
--- a/src/LogicApp/LogicApp/Utilities/IntegrationAccountGeneratedControlNumberOperations.cs
+++ b/src/LogicApp/LogicApp/Utilities/IntegrationAccountGeneratedControlNumberOperations.cs
@@ -145,8 +145,7 @@ namespace Microsoft.Azure.Commands.LogicApp.Utilities
         /// <exception cref="PSInvalidOperationException">If the session content is not in the expected format.</exception>
         private static IntegrationAccountControlNumber SessionContentToIntegrationAccountControlNumber(object sessionContent, string integrationAccountAgreementName, string controlNumber = null)
         {
-            var content = sessionContent as JObject;
-            if (content != null)
+            if (sessionContent is JObject content)
             {
                 try
                 {
diff --git a/src/MachineLearning/MachineLearning/Cmdlets/MachineLearningCmdletBase.cs b/src/MachineLearning/MachineLearning/Cmdlets/MachineLearningCmdletBase.cs
index ea1e0024a7..04251e180d 100644
--- a/src/MachineLearning/MachineLearning/Cmdlets/MachineLearningCmdletBase.cs
+++ b/src/MachineLearning/MachineLearning/Cmdlets/MachineLearningCmdletBase.cs
@@ -298,9 +298,9 @@ namespace Microsoft.Azure.Commands.MachineLearning
         /// <param name="ex">Exception object.</param>
         private bool IsFatalException(Exception ex)
         {
-            if (ex is AggregateException)
+            if (ex is AggregateException aggregateException)
             {
-                return ((AggregateException)ex).Flatten().InnerExceptions.Any(exception => this.IsFatalException(exception));
+                return aggregateException.Flatten().InnerExceptions.Any(exception => this.IsFatalException(exception));
             }
 
             if (ex.InnerException != null && this.IsFatalException(ex.InnerException))
diff --git a/src/Maintenance/Maintenance/MaintenanceAutomationBaseCmdlet.cs b/src/Maintenance/Maintenance/MaintenanceAutomationBaseCmdlet.cs
index 4d23881a6c..8324f7540c 100644
--- a/src/Maintenance/Maintenance/MaintenanceAutomationBaseCmdlet.cs
+++ b/src/Maintenance/Maintenance/MaintenanceAutomationBaseCmdlet.cs
@@ -152,8 +152,7 @@ namespace Microsoft.Azure.Commands.Maintenance
             {
                 Object childObject = property.GetValue(obj, null);
 
-                var isJObject = childObject as Newtonsoft.Json.Linq.JObject;
-                if (isJObject != null)
+                if (childObject is Newtonsoft.Json.Linq.JObject isJObject)
                 {
                     var objStringValue = Newtonsoft.Json.JsonConvert.SerializeObject(childObject);
 
@@ -172,8 +171,7 @@ namespace Microsoft.Azure.Commands.Maintenance
                 }
                 else
                 {
-                    var elem = childObject as IList;
-                    if (elem != null)
+                    if (childObject is IList elem)
                     {
                         if (elem.Count != 0)
                         {
@@ -206,8 +204,7 @@ namespace Microsoft.Azure.Commands.Maintenance
                         }
                         else
                         {
-                            var isDictionary = childObject as IDictionary;
-                            if (isDictionary != null)
+                            if (childObject is IDictionary isDictionary)
                             {
                                 tupleList.Add(MakeTuple(property.Name, Newtonsoft.Json.JsonConvert.SerializeObject(childObject), depth));
                                 max = Math.Max(max, depth * 2 + property.Name.Length);
diff --git a/src/Maps/Maps/MapsAccount/MapsAccountBaseCmdlet.cs b/src/Maps/Maps/MapsAccount/MapsAccountBaseCmdlet.cs
index b2a97df77f..7500b1c377 100644
--- a/src/Maps/Maps/MapsAccount/MapsAccountBaseCmdlet.cs
+++ b/src/Maps/Maps/MapsAccount/MapsAccountBaseCmdlet.cs
@@ -100,11 +100,7 @@ namespace Microsoft.Azure.Commands.Maps.MapsAccount
             IEnumerable<Management.Maps.Models.MapsAccount> mapsAccounts)
         {
             List<Models.PSMapsAccount> output = new List<Models.PSMapsAccount>();
-            if (mapsAccounts != null)
-            {
-                mapsAccounts.ForEach(
-                    mapsAccount => output.Add(Models.PSMapsAccount.Create(mapsAccount)));
-            }
+            mapsAccounts?.ForEach(mapsAccount => output.Add(Models.PSMapsAccount.Create(mapsAccount)));
 
             WriteObject(output, true);
         }
diff --git a/src/MariaDb/generated/runtime/Serialization/JsonSerializer.cs b/src/MariaDb/generated/runtime/Serialization/JsonSerializer.cs
index e121386be2..bd73a0559f 100644
--- a/src/MariaDb/generated/runtime/Serialization/JsonSerializer.cs
+++ b/src/MariaDb/generated/runtime/Serialization/JsonSerializer.cs
@@ -312,7 +312,7 @@ namespace Microsoft.Azure.PowerShell.Cmdlets.MariaDb.Runtime.Json
                     default: return ReadArray((IEnumerable)value);
                 }
             }
-            else if (value is IEnumerable)
+            else if (value is IEnumerable iEnumerable)
             {
                 if (type.IsList && type.ElementType != null)
                 {
@@ -330,7 +330,7 @@ namespace Microsoft.Azure.PowerShell.Cmdlets.MariaDb.Runtime.Json
                     }
                 }
 
-                return ReadArray((IEnumerable)value);
+                return ReadArray(iEnumerable);
             }
             else
             {
diff --git a/src/Migrate/generated/runtime/Serialization/JsonSerializer.cs b/src/Migrate/generated/runtime/Serialization/JsonSerializer.cs
index 760fad131f..4f5de44c35 100644
--- a/src/Migrate/generated/runtime/Serialization/JsonSerializer.cs
+++ b/src/Migrate/generated/runtime/Serialization/JsonSerializer.cs
@@ -312,7 +312,7 @@ namespace Microsoft.Azure.PowerShell.Cmdlets.Migrate.Runtime.Json
                     default: return ReadArray((IEnumerable)value);
                 }
             }
-            else if (value is IEnumerable)
+            else if (value is IEnumerable iEnumerable)
             {
                 if (type.IsList && type.ElementType != null)
                 {
@@ -330,7 +330,7 @@ namespace Microsoft.Azure.PowerShell.Cmdlets.Migrate.Runtime.Json
                     }
                 }
 
-                return ReadArray((IEnumerable)value);
+                return ReadArray(iEnumerable);
             }
             else
             {
diff --git a/src/Monitor/Monitor.Test/Diagnostics/SetDiagnosticSettingCommandTests.cs b/src/Monitor/Monitor.Test/Diagnostics/SetDiagnosticSettingCommandTests.cs
index 603aeab747..1eca8a78d5 100644
--- a/src/Monitor/Monitor.Test/Diagnostics/SetDiagnosticSettingCommandTests.cs
+++ b/src/Monitor/Monitor.Test/Diagnostics/SetDiagnosticSettingCommandTests.cs
@@ -359,7 +359,7 @@ namespace Microsoft.Azure.Commands.Insights.Test.Diagnostics
             }
             else
             {
-                Assert.True(expectedSettings.Logs.Count == actualSettings.Logs.Count, string.Format("Expected: {0}, Actual: {1}, no the same number of Log settings {2}", expectedSettings.Logs.Count, actualSettings.Logs.Count, suffix));
+                Assert.True(expectedSettings.Logs.Count == actualSettings.Logs.Count, $"Expected: {expectedSettings.Logs.Count}, Actual: {actualSettings.Logs.Count}, no the same number of Log settings {suffix}");
                 for (int i = 0; i < expectedSettings.Logs.Count; i++)
                 {
                     var expected = expectedSettings.Logs[i];
@@ -376,7 +376,7 @@ namespace Microsoft.Azure.Commands.Insights.Test.Diagnostics
             }
             else
             {
-                Assert.True(expectedSettings.Metrics.Count == actualSettings.Metrics.Count, string.Format("Expected: {0}, Actual: {1}, no the same number of Metric settings {2}", expectedSettings.Metrics.Count, actualSettings.Metrics.Count, suffix));
+                Assert.True(expectedSettings.Metrics.Count == actualSettings.Metrics.Count, $"Expected: {expectedSettings.Metrics.Count}, Actual: {actualSettings.Metrics.Count}, no the same number of Metric settings {suffix}");
                 for (int i = 0; i < expectedSettings.Metrics.Count; i++)
                 {
                     var expected = expectedSettings.Metrics[i];
diff --git a/src/Monitor/Monitor.Test/Utilities.cs b/src/Monitor/Monitor.Test/Utilities.cs
index 1b6815beea..a31b8a077a 100644
--- a/src/Monitor/Monitor.Test/Utilities.cs
+++ b/src/Monitor/Monitor.Test/Utilities.cs
@@ -117,7 +117,7 @@ namespace Microsoft.Azure.Commands.Insights.Test
 
             List<EventData> events = Utilities.CreateListOfFakeEvents(numRecords);
             var x = JsonConvert.SerializeObject(events);
-            x = string.Concat("{", string.Format("\"value\":{0},\"nextLink\":\"{1}\"", x, Utilities.ContinuationToken), "}");
+            x = string.Concat("{", $"\"value\":{x},\"nextLink\":\"{Utilities.ContinuationToken}\"", "}");
 
             return new AzureOperationResponse<IPage<EventData>>()
             {
@@ -193,8 +193,8 @@ namespace Microsoft.Azure.Commands.Insights.Test
         {
             if (!string.IsNullOrWhiteSpace(field))
             {
-                var condition = string.Format("and {0} eq '{1}'", field, value);
-                Assert.True(filter.Filter.Contains(condition), string.Format("Filter: {0} does not contain required condition: {1}", filter, condition));
+                var condition = $"and {field} eq '{value}'";
+                Assert.True(filter.Filter.Contains(condition), $"Filter: {filter} does not contain required condition: {condition}");
             }
         }
 
@@ -272,8 +272,7 @@ namespace Microsoft.Azure.Commands.Insights.Test
             VerifyDetailedOutput(cmdlet: cmdlet);
 
             // Calling with maxEvents (Note: # of returned objects is not testable here, only the call is being tested)
-            var cmdLetLogs = cmdlet as GetAzureRmLogCommand;
-            if (cmdLetLogs != null)
+            if (cmdlet is GetAzureRmLogCommand cmdLetLogs)
             {
                 cmdLetLogs.Caller = null;
                 cmdLetLogs.Status = null;
@@ -390,8 +389,7 @@ namespace Microsoft.Azure.Commands.Insights.Test
             Assert.Equal(expectedResourceGroup, resourceGroup);
             Assert.Null(nameOrTargetUri);
 
-            var typedCmdlet = cmdlet as GetAzureRmAlertRuleCommand;
-            if (typedCmdlet != null)
+            if (cmdlet is GetAzureRmAlertRuleCommand typedCmdlet)
             {
                 // Calling with Name
                 typedCmdlet.Name = Name;
diff --git a/src/Monitor/Monitor/ActionGroups/RemoveAzureRmActionGroupCommand.cs b/src/Monitor/Monitor/ActionGroups/RemoveAzureRmActionGroupCommand.cs
index f11d9c14f1..b56b2662b5 100644
--- a/src/Monitor/Monitor/ActionGroups/RemoveAzureRmActionGroupCommand.cs
+++ b/src/Monitor/Monitor/ActionGroups/RemoveAzureRmActionGroupCommand.cs
@@ -72,7 +72,7 @@ namespace Microsoft.Azure.Commands.Insights.ActionGroups
         protected override void ProcessRecordInternal()
         {
             if (ShouldProcess(
-                target: string.Format("Delete action group: {0} from resource group: {1}", this.Name, this.ResourceGroupName),
+                target: $"Delete action group: {this.Name} from resource group: {this.ResourceGroupName}",
                 action: "Delete action group"))
             {
                 if (ParameterSetName == ByInputObject)
diff --git a/src/Monitor/Monitor/ActionGroups/SetAzureRmActionGroupCommand.cs b/src/Monitor/Monitor/ActionGroups/SetAzureRmActionGroupCommand.cs
index e9774f3c4e..13a00c8179 100644
--- a/src/Monitor/Monitor/ActionGroups/SetAzureRmActionGroupCommand.cs
+++ b/src/Monitor/Monitor/ActionGroups/SetAzureRmActionGroupCommand.cs
@@ -108,7 +108,7 @@ namespace Microsoft.Azure.Commands.Insights.ActionGroups
         {
             if (
                 ShouldProcess(
-                    target: string.Format("Add/update action group: {0} from resource group: {1}", this.Name, this.ResourceGroupName),
+                    target: $"Add/update action group: {this.Name} from resource group: {this.ResourceGroupName}",
                     action: "Add/update action group"))
             {
                 if (ParameterSetName == ByInputObject)
diff --git a/src/Monitor/Monitor/ActivityLogAlert/DisableAzureRmActivityLogAlertCommand.cs b/src/Monitor/Monitor/ActivityLogAlert/DisableAzureRmActivityLogAlertCommand.cs
index 64981a5ba9..4854b044d9 100644
--- a/src/Monitor/Monitor/ActivityLogAlert/DisableAzureRmActivityLogAlertCommand.cs
+++ b/src/Monitor/Monitor/ActivityLogAlert/DisableAzureRmActivityLogAlertCommand.cs
@@ -70,7 +70,7 @@ namespace Microsoft.Azure.Commands.Insights.ActivityLogAlert
         protected override void ProcessRecordInternal()
         {
             if (ShouldProcess(
-                    target: string.Format("Patch activity logs alert: {0} from resource group: {1}", this.Name, this.ResourceGroupName),
+                    target: $"Patch activity logs alert: {this.Name} from resource group: {this.ResourceGroupName}",
                     action: "Patch activity logs alert"))
             {
                 string resourceGroupName = this.ResourceGroupName;
diff --git a/src/Monitor/Monitor/ActivityLogAlert/EnableAzureRmActivityLogAlertCommand.cs b/src/Monitor/Monitor/ActivityLogAlert/EnableAzureRmActivityLogAlertCommand.cs
index b3af8757aa..f83610e74c 100644
--- a/src/Monitor/Monitor/ActivityLogAlert/EnableAzureRmActivityLogAlertCommand.cs
+++ b/src/Monitor/Monitor/ActivityLogAlert/EnableAzureRmActivityLogAlertCommand.cs
@@ -70,7 +70,7 @@ namespace Microsoft.Azure.Commands.Insights.ActivityLogAlert
         protected override void ProcessRecordInternal()
         {
             if (ShouldProcess(
-                    target: string.Format("Patch activity logs alert: {0} from resource group: {1}", this.Name, this.ResourceGroupName),
+                    target: $"Patch activity logs alert: {this.Name} from resource group: {this.ResourceGroupName}",
                     action: "Patch activity logs alert"))
             {
                 string resourceGroupName = this.ResourceGroupName;
diff --git a/src/Monitor/Monitor/ActivityLogAlert/RemoveAzureRmActivityLogAlertCommand.cs b/src/Monitor/Monitor/ActivityLogAlert/RemoveAzureRmActivityLogAlertCommand.cs
index 05a4b076d9..a7bbffc68f 100644
--- a/src/Monitor/Monitor/ActivityLogAlert/RemoveAzureRmActivityLogAlertCommand.cs
+++ b/src/Monitor/Monitor/ActivityLogAlert/RemoveAzureRmActivityLogAlertCommand.cs
@@ -68,7 +68,7 @@ namespace Microsoft.Azure.Commands.Insights.ActivityLogAlert
         protected override void ProcessRecordInternal()
         {
             if (ShouldProcess(
-                    target: string.Format("Delete activity logs alert: {0} from resource group: {1}", this.Name, this.ResourceGroupName),
+                    target: $"Delete activity logs alert: {this.Name} from resource group: {this.ResourceGroupName}",
                     action: "Delete activity logs alert"))
             {
                 string resourceGroupName = this.ResourceGroupName;
diff --git a/src/Monitor/Monitor/ActivityLogAlert/SetAzureRmActivityLogAlertCommand.cs b/src/Monitor/Monitor/ActivityLogAlert/SetAzureRmActivityLogAlertCommand.cs
index f58dcb0d69..deb890a41e 100644
--- a/src/Monitor/Monitor/ActivityLogAlert/SetAzureRmActivityLogAlertCommand.cs
+++ b/src/Monitor/Monitor/ActivityLogAlert/SetAzureRmActivityLogAlertCommand.cs
@@ -133,7 +133,7 @@ namespace Microsoft.Azure.Commands.Insights.ActivityLogAlert
         protected override void ProcessRecordInternal()
         {
             if (ShouldProcess(
-                    target: string.Format("Create/update an activity logs alert: {0} from resource group: {1}", this.Name, this.ResourceGroupName),
+                    target: $"Create/update an activity logs alert: {this.Name} from resource group: {this.ResourceGroupName}",
                     action: "Create/update an activity logs alert"))
             {
                 string resourceGroupName = this.ResourceGroupName;
diff --git a/src/Monitor/Monitor/Alerts/AddAzureRmAlertRuleCommandBase.cs b/src/Monitor/Monitor/Alerts/AddAzureRmAlertRuleCommandBase.cs
index dc1ee74c8e..c849759525 100644
--- a/src/Monitor/Monitor/Alerts/AddAzureRmAlertRuleCommandBase.cs
+++ b/src/Monitor/Monitor/Alerts/AddAzureRmAlertRuleCommandBase.cs
@@ -81,7 +81,7 @@ namespace Microsoft.Azure.Commands.Insights.Alerts
         protected override void ProcessRecordInternal()
         {
             if (ShouldProcess(
-                    target: string.Format("Create/update an alert rule: {0} from resource group: {1}", this.Name, this.ResourceGroupName),
+                    target: $"Create/update an alert rule: {this.Name} from resource group: {this.ResourceGroupName}",
                     action: "Create/update an alert rule"))
             {
                 AlertRuleResource parameters = this.CreateSdkCallParameters();
diff --git a/src/Monitor/Monitor/Alerts/AddAzureRmMetricAlertRuleV2Command.cs b/src/Monitor/Monitor/Alerts/AddAzureRmMetricAlertRuleV2Command.cs
index f9f4b208d7..67aac33fa4 100644
--- a/src/Monitor/Monitor/Alerts/AddAzureRmMetricAlertRuleV2Command.cs
+++ b/src/Monitor/Monitor/Alerts/AddAzureRmMetricAlertRuleV2Command.cs
@@ -243,7 +243,7 @@ namespace Microsoft.Azure.Commands.Insights.Alerts
                     actions: actions
                 );
                 if (ShouldProcess(
-                    target: string.Format("Create/update an alert rule: {0} from resource group: {1}", this.Name, this.ResourceGroupName),
+                    target: $"Create/update an alert rule: {this.Name} from resource group: {this.ResourceGroupName}",
                     action: "Create/update an alert rule"))
                 {
                     var result = this.MonitorManagementClient.MetricAlerts.CreateOrUpdateAsync(resourceGroupName: this.ResourceGroupName, ruleName: this.Name, parameters: metricAlertResource).Result;
diff --git a/src/Monitor/Monitor/Alerts/GetAzureRmAlertRuleCommand.cs b/src/Monitor/Monitor/Alerts/GetAzureRmAlertRuleCommand.cs
index 87c1fa1689..9e53d0e158 100644
--- a/src/Monitor/Monitor/Alerts/GetAzureRmAlertRuleCommand.cs
+++ b/src/Monitor/Monitor/Alerts/GetAzureRmAlertRuleCommand.cs
@@ -72,36 +72,29 @@ namespace Microsoft.Azure.Commands.Insights.Alerts
 
         private static string ExtractTargetResourceId(RuleDataSource alertRuleSource)
         {
-            var source = alertRuleSource as RuleMetricDataSource;
-            if (source != null)
+            if (alertRuleSource is RuleMetricDataSource source)
             {
                 return source.ResourceUri;
             }
 
-            var source1 = alertRuleSource as RuleManagementEventDataSource;
-
             // The types above are the only ones supported. The string.Empty is just a prevention
-            return source1 != null ? source1.ResourceUri : string.Empty;
+            return alertRuleSource is RuleManagementEventDataSource source1 ? source1.ResourceUri : string.Empty;
         }
 
         private static string ExtractTargetResourceId(AlertRuleResource alertRuleResource)
         {
-            var cond = alertRuleResource.Condition as LocationThresholdRuleCondition;
-            if (cond != null)
+            if (alertRuleResource.Condition is LocationThresholdRuleCondition cond)
             {
                 return ExtractTargetResourceId(cond.DataSource);
             }
 
-            var cond1 = alertRuleResource.Condition as ManagementEventRuleCondition;
-            if (cond1 != null)
+            if (alertRuleResource.Condition is ManagementEventRuleCondition cond1)
             {
                 return ExtractTargetResourceId(cond1.DataSource);
             }
 
-            var cond2 = alertRuleResource.Condition as ThresholdRuleCondition;
-
             // The types above are the only supported types. The string.Empty is a prevention only
-            return cond2 != null ? ExtractTargetResourceId(cond2.DataSource) : string.Empty;
+            return alertRuleResource.Condition is ThresholdRuleCondition cond2 ? ExtractTargetResourceId(cond2.DataSource) : string.Empty;
         }
 
         /// <summary>
diff --git a/src/Monitor/Monitor/Alerts/NewAzureRmMetricAlertRuleV2CriteriaCommand.cs b/src/Monitor/Monitor/Alerts/NewAzureRmMetricAlertRuleV2CriteriaCommand.cs
index 3f93801fc0..09d512c223 100644
--- a/src/Monitor/Monitor/Alerts/NewAzureRmMetricAlertRuleV2CriteriaCommand.cs
+++ b/src/Monitor/Monitor/Alerts/NewAzureRmMetricAlertRuleV2CriteriaCommand.cs
@@ -161,11 +161,11 @@ namespace Microsoft.Azure.Commands.Insights.Alerts
             {
                 foreach (var dimension in this.DimensionSelection)
                 {
-                    if (dimension.IncludeValues != null && dimension.IncludeValues.Count() > 0)
+                    if (dimension.IncludeValues != null && dimension.IncludeValues.Any())
                     {
                         metricDimensions.Add(new MetricDimension(dimension.Dimension, "Include", dimension.IncludeValues));
                     }
-                    if (dimension.ExcludeValues != null && dimension.ExcludeValues.Count() > 0)
+                    if (dimension.ExcludeValues != null && dimension.ExcludeValues.Any())
                     {
                         metricDimensions.Add(new MetricDimension(dimension.Dimension, "Exclude", dimension.ExcludeValues));
                     }
diff --git a/src/Monitor/Monitor/Alerts/RemoveAzureRmAlertRuleCommand.cs b/src/Monitor/Monitor/Alerts/RemoveAzureRmAlertRuleCommand.cs
index 78289ee68d..16ab77845d 100644
--- a/src/Monitor/Monitor/Alerts/RemoveAzureRmAlertRuleCommand.cs
+++ b/src/Monitor/Monitor/Alerts/RemoveAzureRmAlertRuleCommand.cs
@@ -52,7 +52,7 @@ namespace Microsoft.Azure.Commands.Insights.Alerts
         protected override void ProcessRecordInternal()
         {
             if (ShouldProcess(
-                target: string.Format("Remove an alert rule: {0} from resource group: {1}", this.Name, this.ResourceGroupName),
+                target: $"Remove an alert rule: {this.Name} from resource group: {this.ResourceGroupName}",
                 action: "Remove an alert rule"))
             {
                 var result = this.MonitorManagementClient.AlertRules.DeleteWithHttpMessagesAsync(resourceGroupName: this.ResourceGroupName, ruleName: this.Name).Result;
diff --git a/src/Monitor/Monitor/Alerts/RemoveAzureRmMetricAlertRuleV2Command.cs b/src/Monitor/Monitor/Alerts/RemoveAzureRmMetricAlertRuleV2Command.cs
index 2d1d8dcb80..8d440e2bb7 100644
--- a/src/Monitor/Monitor/Alerts/RemoveAzureRmMetricAlertRuleV2Command.cs
+++ b/src/Monitor/Monitor/Alerts/RemoveAzureRmMetricAlertRuleV2Command.cs
@@ -86,7 +86,7 @@ namespace Microsoft.Azure.Commands.Insights.Alerts
             }
             
             if (ShouldProcess(
-                target: string.Format("Remove an alert rule: {0} from resource group: {1}", Name, ResourceGroupName),
+                target: $"Remove an alert rule: {Name} from resource group: {ResourceGroupName}",
                 action: "Remove an alert rule"))
             {
                 var result = this.MonitorManagementClient.MetricAlerts.DeleteWithHttpMessagesAsync(resourceGroupName: ResourceGroupName, ruleName: Name).Result;
diff --git a/src/Monitor/Monitor/Autoscale/AddAzureRmAutoscaleSettingCommand.cs b/src/Monitor/Monitor/Autoscale/AddAzureRmAutoscaleSettingCommand.cs
index c2ca236252..a313db9a41 100644
--- a/src/Monitor/Monitor/Autoscale/AddAzureRmAutoscaleSettingCommand.cs
+++ b/src/Monitor/Monitor/Autoscale/AddAzureRmAutoscaleSettingCommand.cs
@@ -107,7 +107,7 @@ namespace Microsoft.Azure.Commands.Insights.Autoscale
         protected override void ProcessRecordInternal()
         {
             if (ShouldProcess(
-                target: string.Format("Create/update an autoscale setting: {0} from resource group: {1}", this.Name, this.ResourceGroupName),
+                target: $"Create/update an autoscale setting: {this.Name} from resource group: {this.ResourceGroupName}",
                 action: "Create/update an autoscale setting"))
             {
                 AutoscaleSettingResource parameters = this.CreateAutoscaleSettingResource();
diff --git a/src/Monitor/Monitor/Autoscale/RemoveAzureRmAutoscaleSettingCommand.cs b/src/Monitor/Monitor/Autoscale/RemoveAzureRmAutoscaleSettingCommand.cs
index 7dbc73831c..95974670ab 100644
--- a/src/Monitor/Monitor/Autoscale/RemoveAzureRmAutoscaleSettingCommand.cs
+++ b/src/Monitor/Monitor/Autoscale/RemoveAzureRmAutoscaleSettingCommand.cs
@@ -52,7 +52,7 @@ namespace Microsoft.Azure.Commands.Insights.Autoscale
         protected override void ProcessRecordInternal()
         {
             if (ShouldProcess(
-                target: string.Format("Remove an autoscale setting: {0} from resource group: {1}", this.Name, this.ResourceGroupName),
+                target: $"Remove an autoscale setting: {this.Name} from resource group: {this.ResourceGroupName}",
                 action: "Remove an autoscale setting"))
             {
                 var result = this.MonitorManagementClient.AutoscaleSettings.DeleteWithHttpMessagesAsync(resourceGroupName: this.ResourceGroupName, autoscaleSettingName: this.Name).Result;
diff --git a/src/Monitor/Monitor/DataCollectionRules/NewAzureRmDataCollectionRuleAssociationCommand.cs b/src/Monitor/Monitor/DataCollectionRules/NewAzureRmDataCollectionRuleAssociationCommand.cs
index 2b9057bca7..a086c2a30c 100644
--- a/src/Monitor/Monitor/DataCollectionRules/NewAzureRmDataCollectionRuleAssociationCommand.cs
+++ b/src/Monitor/Monitor/DataCollectionRules/NewAzureRmDataCollectionRuleAssociationCommand.cs
@@ -100,8 +100,7 @@ namespace Microsoft.Azure.Commands.Insights.DataCollectionRules
             var dcrResourceId = new ResourceIdentifier(RuleId);
 
             if (ShouldProcess(
-                    target: string.Format("Name '{0}' in data collection rule '{1}' in resource group '{2}'",
-                                          AssociationName, dcrResourceId.ResourceName, dcrResourceId.ResourceGroupName),
+                    target: $"Name '{AssociationName}' in data collection rule '{dcrResourceId.ResourceName}' in resource group '{dcrResourceId.ResourceGroupName}'",
                     action: "Create a data collection rule association"))
             {
                 var dcraResponse = MonitorManagementClient.DataCollectionRuleAssociations.Create(
diff --git a/src/Monitor/Monitor/DataCollectionRules/NewAzureRmDataCollectionRuleCommand.cs b/src/Monitor/Monitor/DataCollectionRules/NewAzureRmDataCollectionRuleCommand.cs
index 3cfa6e2946..e455f9988a 100644
--- a/src/Monitor/Monitor/DataCollectionRules/NewAzureRmDataCollectionRuleCommand.cs
+++ b/src/Monitor/Monitor/DataCollectionRules/NewAzureRmDataCollectionRuleCommand.cs
@@ -116,7 +116,7 @@ namespace Microsoft.Azure.Commands.Insights.DataCollectionRules
             if (Tag != null) dcr.Tags = TagsConversionHelper.CreateTagDictionary(Tag, validate: true);
 
             if (ShouldProcess(
-                    target: string.Format("Data collection rule '{0}' in resource group '{1}'", RuleName, ResourceGroupName),
+                    target: $"Data collection rule '{RuleName}' in resource group '{ResourceGroupName}'",
                     action: "Create a data collection rule"))
             {
                 var dcrResponse = MonitorManagementClient.DataCollectionRules.Create(resourceGroupName: ResourceGroupName, dataCollectionRuleName: RuleName, body: dcr);
diff --git a/src/Monitor/Monitor/DataCollectionRules/RemoveAzureRmDataCollectionRuleAssociationCommand.cs b/src/Monitor/Monitor/DataCollectionRules/RemoveAzureRmDataCollectionRuleAssociationCommand.cs
index aba298e9ce..ca0cf91ee2 100644
--- a/src/Monitor/Monitor/DataCollectionRules/RemoveAzureRmDataCollectionRuleAssociationCommand.cs
+++ b/src/Monitor/Monitor/DataCollectionRules/RemoveAzureRmDataCollectionRuleAssociationCommand.cs
@@ -96,7 +96,7 @@ namespace Microsoft.Azure.Commands.Insights.DataCollectionRules
             }
 
             if (ShouldProcess(
-                    target: string.Format("Data collection rule association '{0}' from resource '{1}'", this.AssociationName, this.TargetResourceId),
+                    target: $"Data collection rule association '{this.AssociationName}' from resource '{this.TargetResourceId}'",
                     action: "Delete a data collection rule association"))
             {
                 this.MonitorManagementClient.DataCollectionRuleAssociations.DeleteWithHttpMessagesAsync(
diff --git a/src/Monitor/Monitor/DataCollectionRules/RemoveAzureRmDataCollectionRuleCommand.cs b/src/Monitor/Monitor/DataCollectionRules/RemoveAzureRmDataCollectionRuleCommand.cs
index cd3ed98b25..24a04fa925 100644
--- a/src/Monitor/Monitor/DataCollectionRules/RemoveAzureRmDataCollectionRuleCommand.cs
+++ b/src/Monitor/Monitor/DataCollectionRules/RemoveAzureRmDataCollectionRuleCommand.cs
@@ -94,7 +94,7 @@ namespace Microsoft.Azure.Commands.Insights.DataCollectionRules
             }
 
             if (ShouldProcess(
-                    target: string.Format("Data collection rule '{0}' from resource group '{1}'", this.RuleName, this.ResourceGroupName),
+                    target: $"Data collection rule '{this.RuleName}' from resource group '{this.ResourceGroupName}'",
                     action: "Delete a data collection rule"))
             {
                 this.MonitorManagementClient.DataCollectionRules.DeleteWithHttpMessagesAsync(
diff --git a/src/Monitor/Monitor/DataCollectionRules/SetAzureRmDataCollectionRuleCommand.cs b/src/Monitor/Monitor/DataCollectionRules/SetAzureRmDataCollectionRuleCommand.cs
index e528ddb14b..820b04ff8f 100644
--- a/src/Monitor/Monitor/DataCollectionRules/SetAzureRmDataCollectionRuleCommand.cs
+++ b/src/Monitor/Monitor/DataCollectionRules/SetAzureRmDataCollectionRuleCommand.cs
@@ -150,7 +150,7 @@ namespace Microsoft.Azure.Commands.Insights.DataCollectionRules
             if (Tag != null) Dcr.Tags = TagsConversionHelper.CreateTagDictionary(Tag, validate: true);
 
             if (ShouldProcess(
-                        target: string.Format("Data collection rule '{0}' in resource group '{1}'", RuleName, ResourceGroupName),
+                        target: $"Data collection rule '{RuleName}' in resource group '{ResourceGroupName}'",
                         action: "Update a data collection rule"))
             {
                 var dcrResponse = this.MonitorManagementClient.DataCollectionRules.Create(
diff --git a/src/Monitor/Monitor/DataCollectionRules/UpdateAzureRmDataCollectionRuleCommand.cs b/src/Monitor/Monitor/DataCollectionRules/UpdateAzureRmDataCollectionRuleCommand.cs
index d8a9f24299..0a79373f5e 100644
--- a/src/Monitor/Monitor/DataCollectionRules/UpdateAzureRmDataCollectionRuleCommand.cs
+++ b/src/Monitor/Monitor/DataCollectionRules/UpdateAzureRmDataCollectionRuleCommand.cs
@@ -104,7 +104,7 @@ namespace Microsoft.Azure.Commands.Insights.DataCollectionRules
                 resourceForUpdate.Tags = TagsConversionHelper.CreateTagDictionary(Tag, validate: true);
 
             if (ShouldProcess(
-                        target: string.Format("Data collection rule '{0}' in resource group '{1}'", RuleName, ResourceGroupName),
+                        target: $"Data collection rule '{RuleName}' in resource group '{ResourceGroupName}'",
                         action: "Update a data collection rule"))
             {
                 var dcrRespone = this.MonitorManagementClient.DataCollectionRules.Update(
diff --git a/src/Monitor/Monitor/Diagnostics/RemoveAzureRmDiagnosticSettingCommand.cs b/src/Monitor/Monitor/Diagnostics/RemoveAzureRmDiagnosticSettingCommand.cs
index edfd79c4c2..afce873622 100644
--- a/src/Monitor/Monitor/Diagnostics/RemoveAzureRmDiagnosticSettingCommand.cs
+++ b/src/Monitor/Monitor/Diagnostics/RemoveAzureRmDiagnosticSettingCommand.cs
@@ -125,7 +125,7 @@ namespace Microsoft.Azure.Commands.Insights.Diagnostics
             }
 
             if (ShouldProcess(
-                target: string.Format("Remove a diagnostic setting for resource Id: {0}", this.ResourceId),
+                target: $"Remove a diagnostic setting for resource Id: {this.ResourceId}",
                 action: "Remove a diagnostic setting"))
             {
                 WriteDebugWithTimestamp("Removing named diagnostic setting: {0}", this.Name);
diff --git a/src/Monitor/Monitor/Diagnostics/SetAzureRmDiagnosticSettingCommand.cs b/src/Monitor/Monitor/Diagnostics/SetAzureRmDiagnosticSettingCommand.cs
index 50c1409e5c..60675a2a13 100644
--- a/src/Monitor/Monitor/Diagnostics/SetAzureRmDiagnosticSettingCommand.cs
+++ b/src/Monitor/Monitor/Diagnostics/SetAzureRmDiagnosticSettingCommand.cs
@@ -182,7 +182,7 @@ namespace Microsoft.Azure.Commands.Insights.Diagnostics
         protected override void ProcessRecordInternal()
         {
             if (ShouldProcess(
-                target: string.Format("Create/update a diagnostic setting for resource Id: {0}", this.ResourceId),
+                target: $"Create/update a diagnostic setting for resource Id: {this.ResourceId}",
                 action: "Create/update a diagnostic setting"))
             {
                 DiagnosticSettingsResource properties;
@@ -282,8 +282,8 @@ namespace Microsoft.Azure.Commands.Insights.Diagnostics
                     catch (AggregateException ex)
                     {
                         WriteDebugWithTimestamp("Aggregate exception {0}", ex.ToString());
-                        ErrorResponseException ex1 = ex.InnerException as ErrorResponseException;
-                        if (ex1 != null && ex1.Response.StatusCode == System.Net.HttpStatusCode.NotFound)
+
+                        if (ex.InnerException is ErrorResponseException ex1 && ex1.Response.StatusCode == System.Net.HttpStatusCode.NotFound)
                         {
                             WriteDebugWithTimestamp("Inner exception is NotFound");
                             properties = new DiagnosticSettingsResource();
diff --git a/src/Monitor/Monitor/LogProfiles/AddAzureRmLogProfileCommand.cs b/src/Monitor/Monitor/LogProfiles/AddAzureRmLogProfileCommand.cs
index 9fa5546021..bd995582e3 100644
--- a/src/Monitor/Monitor/LogProfiles/AddAzureRmLogProfileCommand.cs
+++ b/src/Monitor/Monitor/LogProfiles/AddAzureRmLogProfileCommand.cs
@@ -77,7 +77,7 @@ namespace Microsoft.Azure.Commands.Insights.LogProfiles
         protected override void ProcessRecordInternal()
         {
             if (ShouldProcess(
-                target: string.Format("Create/update a log profile: {0}", this.Name),
+                target: $"Create/update a log profile: {this.Name}",
                 action: "Create/update a log profile"))
             {
                 var putParameters = new LogProfileResource()
diff --git a/src/Monitor/Monitor/LogProfiles/RemoveAzureRmLogProfileCommand.cs b/src/Monitor/Monitor/LogProfiles/RemoveAzureRmLogProfileCommand.cs
index bdf9901877..a6d4440c33 100644
--- a/src/Monitor/Monitor/LogProfiles/RemoveAzureRmLogProfileCommand.cs
+++ b/src/Monitor/Monitor/LogProfiles/RemoveAzureRmLogProfileCommand.cs
@@ -41,7 +41,7 @@ namespace Microsoft.Azure.Commands.Insights.LogProfiles
         protected override void ProcessRecordInternal()
         {
             if (ShouldProcess(
-                target: string.Format("Remove a log profile: {0}", this.Name),
+                target: $"Remove a log profile: {this.Name}",
                 action: "Remove a log profile"))
             {
                 Rest.Azure.AzureOperationResponse result = this.MonitorManagementClient.LogProfiles.DeleteWithHttpMessagesAsync(logProfileName: this.Name, cancellationToken: CancellationToken.None).Result;
diff --git a/src/Monitor/Monitor/LogsCmdletBase.cs b/src/Monitor/Monitor/LogsCmdletBase.cs
index 7631cb3606..b6e7c507f0 100644
--- a/src/Monitor/Monitor/LogsCmdletBase.cs
+++ b/src/Monitor/Monitor/LogsCmdletBase.cs
@@ -89,7 +89,7 @@ namespace Microsoft.Azure.Commands.Insights
         /// <returns></returns>
         protected string AddConditionIfPResent(string currentQueryFilter, string name, string value)
         {
-            return !string.IsNullOrWhiteSpace(value) ? string.Format("{0} and {1} eq '{2}'", currentQueryFilter, name, value) : currentQueryFilter;
+            return !string.IsNullOrWhiteSpace(value) ? $"{currentQueryFilter} and {name} eq '{value}'" : currentQueryFilter;
         }
 
         /// <summary>
@@ -225,9 +225,9 @@ namespace Microsoft.Azure.Commands.Insights
                 WriteDebug("Following continuation token");
                 response = this.MonitorManagementClient.ActivityLogs.ListNextAsync(nextPageLink: nextLink, cancellationToken: CancellationToken.None).Result;
                 enumerator = response.GetEnumerator();
-                WriteDebug(string.Format("Merging records with {0} records", records.Count));
+                WriteDebug($"Merging records with {records.Count} records");
                 enumerator.ExtractCollectionFromResult(fullDetails: fullDetails, records: records, keepTheRecord: this.KeepTheRecord);
-                WriteDebug(string.Format("Merged records. Now with {0} records", records.Count));
+                WriteDebug($"Merged records. Now with {records.Count} records");
                 nextLink = response.NextPageLink;
             }
 
diff --git a/src/Monitor/Monitor/Metrics/GetAzureRmMetricCommand.cs b/src/Monitor/Monitor/Metrics/GetAzureRmMetricCommand.cs
index 2e2020a832..868af746f4 100644
--- a/src/Monitor/Monitor/Metrics/GetAzureRmMetricCommand.cs
+++ b/src/Monitor/Monitor/Metrics/GetAzureRmMetricCommand.cs
@@ -152,7 +152,7 @@ namespace Microsoft.Azure.Commands.Insights.Metrics
             {
                 timegrain = null;
             }
-            string metricNames = (this.MetricName != null && this.MetricName.Count() > 0) ? string.Join(",", this.MetricName) : null;
+            string metricNames = (this.MetricName != null && this.MetricName.Any()) ? string.Join(",", this.MetricName) : null;
             string aggregation = this.AggregationType.HasValue ? this.AggregationType.Value.ToString() : null;
             int? top = (this.Top == default(int?)) ? null : this.Top;
             string orderBy = (this.OrderBy == default(string)) ? null : this.OrderBy;
@@ -172,7 +172,7 @@ namespace Microsoft.Azure.Commands.Insights.Metrics
                 metricnamespace: metricnamespace);
 
             // If fullDetails is present full details of the records are displayed, otherwise only a summary of the records is displayed
-            var result = (records != null && records.Value != null)? (records.Value.Select(e => fullDetails ? new PSMetric(e) : new PSMetricNoDetails(e)).ToArray()) : null;
+            var result = (records?.Value != null)? (records.Value.Select(e => fullDetails ? new PSMetric(e) : new PSMetricNoDetails(e)).ToArray()) : null;
 
             WriteObject(sendToPipeline: result, enumerateCollection: true);
         }
diff --git a/src/Monitor/Monitor/Metrics/GetAzureRmMetricDefinitionCommand.cs b/src/Monitor/Monitor/Metrics/GetAzureRmMetricDefinitionCommand.cs
index d304455f35..a19445f466 100644
--- a/src/Monitor/Monitor/Metrics/GetAzureRmMetricDefinitionCommand.cs
+++ b/src/Monitor/Monitor/Metrics/GetAzureRmMetricDefinitionCommand.cs
@@ -72,7 +72,7 @@ namespace Microsoft.Azure.Commands.Insights.Metrics
             // Get metricDefintions and filter the response to return metricDefinitions for only the specified metric names
             var records = this.MonitorManagementClient.MetricDefinitions.List(resourceUri: this.ResourceId, metricnamespace: this.MetricNamespace);
 
-            if (this.MetricName != null && this.MetricName.Count() > 0)
+            if (this.MetricName != null && this.MetricName.Any())
             {
                 records = records.Where(m => this.MetricName.Any(x => x.Equals(m.Name.Value)));
             }
diff --git a/src/Monitor/Monitor/MonitorCmdletBase.cs b/src/Monitor/Monitor/MonitorCmdletBase.cs
index 338777d20e..5cd91ce6cf 100644
--- a/src/Monitor/Monitor/MonitorCmdletBase.cs
+++ b/src/Monitor/Monitor/MonitorCmdletBase.cs
@@ -109,8 +109,7 @@ namespace Microsoft.Azure.Commands.Insights
                 if (exTemp is RestException)
                 {
                     // All the following Exceptions have the same structure, but their common ancestor does not contain Body nor Response
-                    var cloudException = exTemp as CloudException;
-                    if (cloudException != null)
+                    if (exTemp is CloudException cloudException)
                     {
                         message = cloudException.Body.Message;
                         code = cloudException.Body.Code;
@@ -120,8 +119,7 @@ namespace Microsoft.Azure.Commands.Insights
                     else
                     {
                         // New model to report errors (from Swagger Spec)
-                        var errorResponse = exTemp as Microsoft.Azure.Management.Monitor.Models.ErrorResponseException;
-                        if (errorResponse != null)
+                        if (exTemp is Microsoft.Azure.Management.Monitor.Models.ErrorResponseException errorResponse)
                         {
                             message = errorResponse.Body.Message;
                             code = errorResponse.Body.Code;
diff --git a/src/Monitor/Monitor/OutputClasses/CustomPrinter.cs b/src/Monitor/Monitor/OutputClasses/CustomPrinter.cs
index f76cd5850f..9c5bbfba3b 100644
--- a/src/Monitor/Monitor/OutputClasses/CustomPrinter.cs
+++ b/src/Monitor/Monitor/OutputClasses/CustomPrinter.cs
@@ -57,9 +57,8 @@ namespace Microsoft.Azure.Commands.Insights.OutputClasses
             }
 
             //Handles the basic types
-            if (obj is TimeSpan)
+            if (obj is TimeSpan objAsTimeSpan)
             {
-                TimeSpan objAsTimeSpan = (TimeSpan)obj;
                 sb.Append(currentIndent);
                 sb.Append(name);
                 sb.Append(" : ");
@@ -77,15 +76,13 @@ namespace Microsoft.Azure.Commands.Insights.OutputClasses
 
             string nextIndent = currentIndent + "    ";
 
-            ICollection objAsCollection = obj as ICollection;
-
             propName = propName.Replace(':', ' ');
             if (!string.IsNullOrWhiteSpace(propName))
             {
                 sb.AppendLine(propName);
             }
 
-            if (objAsCollection != null)
+            if (obj is ICollection objAsCollection)
             {
                 foreach (object item in objAsCollection)
                 {
diff --git a/src/Monitor/Monitor/OutputClasses/PSDictionaryElement.cs b/src/Monitor/Monitor/OutputClasses/PSDictionaryElement.cs
index ab6d0daa3b..aa36de7c4a 100644
--- a/src/Monitor/Monitor/OutputClasses/PSDictionaryElement.cs
+++ b/src/Monitor/Monitor/OutputClasses/PSDictionaryElement.cs
@@ -49,7 +49,7 @@ namespace Microsoft.Azure.Commands.Insights.OutputClasses
                 foreach (var keyValuePair in this.Content)
                 {
                     output.AppendLine();
-                    output.Append(string.Format("{0, -15}: {1}", keyValuePair.Key, keyValuePair.Value));
+                    output.Append($"{keyValuePair.Key,  -15}: {keyValuePair.Value}");
                 }
             }
             return output.ToString();
diff --git a/src/Monitor/Monitor/OutputClasses/PSPrivateEndpointConnection.cs b/src/Monitor/Monitor/OutputClasses/PSPrivateEndpointConnection.cs
index d82f065ebd..ddc8a60085 100644
--- a/src/Monitor/Monitor/OutputClasses/PSPrivateEndpointConnection.cs
+++ b/src/Monitor/Monitor/OutputClasses/PSPrivateEndpointConnection.cs
@@ -88,10 +88,7 @@ namespace Microsoft.Azure.Commands.Insights.OutputClasses
         /// </exception>
         public virtual void Validate()
         {
-            if (PrivateLinkServiceConnectionState != null)
-            {
-                PrivateLinkServiceConnectionState.Validate();
-            }
+            PrivateLinkServiceConnectionState?.Validate();
         }
     }
 }
diff --git a/src/Monitor/Monitor/OutputClasses/PSToStringExtensions.cs b/src/Monitor/Monitor/OutputClasses/PSToStringExtensions.cs
index 7bf6907335..a85fb272e1 100644
--- a/src/Monitor/Monitor/OutputClasses/PSToStringExtensions.cs
+++ b/src/Monitor/Monitor/OutputClasses/PSToStringExtensions.cs
@@ -157,23 +157,22 @@ namespace Microsoft.Azure.Commands.Insights.OutputClasses
                 foreach (var action in actions)
                 {
                     output.AppendLine();
-                    RuleEmailAction eMailAction = action as RuleEmailAction;
-                    if (eMailAction != null)
+
+                    if (action is RuleEmailAction eMailAction)
                     {
                         output.AddSpacesInFront(indentationTabs).AppendLine("SendToServiceOwners : " + eMailAction.SendToServiceOwners);
                         output.AddSpacesInFront(indentationTabs).Append("E-mails             : " + eMailAction.CustomEmails.ToString(indentationTabs: indentationTabs + 1));
                     }
                     else
                     {
-                        RuleWebhookAction webhookAction = action as RuleWebhookAction;
-                        if (webhookAction != null)
+                        if (action is RuleWebhookAction webhookAction)
                         {
                             output.AddSpacesInFront(indentationTabs).AppendLine("ServiceUri : " + webhookAction.ServiceUri);
                             output.AddSpacesInFront(indentationTabs).Append("Properties : " + webhookAction.Properties.ToString(indentationTabs: indentationTabs + 1));
                         }
                         else
                         {
-                            output.AddSpacesInFront(indentationTabs).AppendLine(string.Format("Unsupported rule type <{0}>", action));
+                            output.AddSpacesInFront(indentationTabs).AppendLine($"Unsupported rule type <{action}>");
                         }
                     }
                 }
@@ -472,7 +471,7 @@ namespace Microsoft.Azure.Commands.Insights.OutputClasses
         public static string ToString(this IDictionary<string, string> dictionary, int indentationTabs)
         {
             var output = new StringBuilder();
-            dictionary.ForEach(notification => output.AddSpacesInFront(indentationTabs).AppendLine(string.Format("{0}: {1}", notification.Key, notification.Value)));
+            dictionary.ForEach(notification => output.AddSpacesInFront(indentationTabs).AppendLine($"{notification.Key}: {notification.Value}"));
 
             return output.ToString();
         }
diff --git a/src/Monitor/Monitor/PrivateLinkScopes/NewAzureInsightsPrivateLinkScope.cs b/src/Monitor/Monitor/PrivateLinkScopes/NewAzureInsightsPrivateLinkScope.cs
index 0433b5f9eb..d4d58d750a 100644
--- a/src/Monitor/Monitor/PrivateLinkScopes/NewAzureInsightsPrivateLinkScope.cs
+++ b/src/Monitor/Monitor/PrivateLinkScopes/NewAzureInsightsPrivateLinkScope.cs
@@ -51,7 +51,7 @@ namespace Microsoft.Azure.Commands.Insights.PrivateLinkScopes
 
             if (existingScope != null)
             {
-                throw new PSInvalidOperationException(string.Format("A Private Link Scope with name: '{0}' in resource group: '{1}' already exists. Please use Update-AzInsightsPrivateLinkScope to update an existing scope.", this.Name, this.ResourceGroupName));
+                throw new PSInvalidOperationException($"A Private Link Scope with name: '{this.Name}' in resource group: '{this.ResourceGroupName}' already exists. Please use Update-AzInsightsPrivateLinkScope to update an existing scope.");
             }
 
             AzureMonitorPrivateLinkScope payLoad = new AzureMonitorPrivateLinkScope(this.Location);
@@ -61,7 +61,7 @@ namespace Microsoft.Azure.Commands.Insights.PrivateLinkScopes
                 payLoad.Tags = this.Tags.ToDictionary(s => s.Split(':')[0], s => s.Split(':')[1]);
             }
 
-            if (ShouldProcess(this.Name, string.Format("create scope: {0} under resource group: {1}", this.Name, this.ResourceGroupName)))
+            if (ShouldProcess(this.Name, $"create scope: {this.Name} under resource group: {this.ResourceGroupName}"))
             {
                 var response = this.MonitorManagementClient
                                    .PrivateLinkScopes
diff --git a/src/Monitor/Monitor/PrivateLinkScopes/NewAzureInsightsPrivateLinkScopedResource.cs b/src/Monitor/Monitor/PrivateLinkScopes/NewAzureInsightsPrivateLinkScopedResource.cs
index 76c6cd94a0..95addfe488 100644
--- a/src/Monitor/Monitor/PrivateLinkScopes/NewAzureInsightsPrivateLinkScopedResource.cs
+++ b/src/Monitor/Monitor/PrivateLinkScopes/NewAzureInsightsPrivateLinkScopedResource.cs
@@ -47,10 +47,10 @@ namespace Microsoft.Azure.Commands.Insights.PrivateLinkScopes
 
             if (existingScopedResource != null)
             {
-                throw new PSInvalidOperationException(string.Format("A scoped resource with name: '{0}' in scope: {1}, resource group: '{2}' already exists. Please use Update-AzInsightsPrivateLinkScopeScopedResource to update an existing scoped resource.", this.Name, this.ScopeName, this.ResourceGroupName));
+                throw new PSInvalidOperationException($"A scoped resource with name: '{this.Name}' in scope: {this.ScopeName}, resource group: '{this.ResourceGroupName}' already exists. Please use Update-AzInsightsPrivateLinkScopeScopedResource to update an existing scoped resource.");
             }
 
-            if (ShouldProcess(this.Name, string.Format("create scoped resource: {0} from scope: {1} under resource group: {2}", this.Name, this.ScopeName, this.ResourceGroupName)))
+            if (ShouldProcess(this.Name, $"create scoped resource: {this.Name} from scope: {this.ScopeName} under resource group: {this.ResourceGroupName}"))
             {
                 var response = this.MonitorManagementClient
                                        .PrivateLinkScopedResources
diff --git a/src/Monitor/Monitor/PrivateLinkScopes/RemoveAzureInsightsPrivateLinkScope.cs b/src/Monitor/Monitor/PrivateLinkScopes/RemoveAzureInsightsPrivateLinkScope.cs
index e4d9f45837..02e9cdc159 100644
--- a/src/Monitor/Monitor/PrivateLinkScopes/RemoveAzureInsightsPrivateLinkScope.cs
+++ b/src/Monitor/Monitor/PrivateLinkScopes/RemoveAzureInsightsPrivateLinkScope.cs
@@ -78,7 +78,7 @@ namespace Microsoft.Azure.Commands.Insights.PrivateLinkScopes
                 this.Name = identifier.ResourceName;
             }
             
-            if (ShouldProcess(this.Name, string.Format("delete scope: {0} from resource group: {1}", this.Name, this.ResourceGroupName)))
+            if (ShouldProcess(this.Name, $"delete scope: {this.Name} from resource group: {this.ResourceGroupName}"))
             {
                 var response = this.MonitorManagementClient
                                    .PrivateLinkScopes
diff --git a/src/Monitor/Monitor/PrivateLinkScopes/RemoveAzureInsightsPrivateLinkScopedResource.cs b/src/Monitor/Monitor/PrivateLinkScopes/RemoveAzureInsightsPrivateLinkScopedResource.cs
index e2071597db..6382b71517 100644
--- a/src/Monitor/Monitor/PrivateLinkScopes/RemoveAzureInsightsPrivateLinkScopedResource.cs
+++ b/src/Monitor/Monitor/PrivateLinkScopes/RemoveAzureInsightsPrivateLinkScopedResource.cs
@@ -91,7 +91,7 @@ namespace Microsoft.Azure.Commands.Insights.PrivateLinkScopes
                 this.Name = identifier.ResourceName;
             }
 
-            if (ShouldProcess(this.Name, string.Format("delete scoped resource: {0} from scope: {1} under resource group: {2}", this.Name, this.ScopeName, this.ResourceGroupName)))
+            if (ShouldProcess(this.Name, $"delete scoped resource: {this.Name} from scope: {this.ScopeName} under resource group: {this.ResourceGroupName}"))
             {
                 var response = this.MonitorManagementClient
                                        .PrivateLinkScopedResources
diff --git a/src/Monitor/Monitor/PrivateLinkScopes/UpdateAzureInsightsPrivateLinkScope.cs b/src/Monitor/Monitor/PrivateLinkScopes/UpdateAzureInsightsPrivateLinkScope.cs
index fcabd6ffa6..651dda580f 100644
--- a/src/Monitor/Monitor/PrivateLinkScopes/UpdateAzureInsightsPrivateLinkScope.cs
+++ b/src/Monitor/Monitor/PrivateLinkScopes/UpdateAzureInsightsPrivateLinkScope.cs
@@ -65,7 +65,7 @@ namespace Microsoft.Azure.Commands.Insights.PrivateLinkScopes
                 this.Name = identifier.ResourceName;
             }
 
-            if (ShouldProcess(this.Name, string.Format("update scope: {0} under resource group: {1}", this.Name, this.ResourceGroupName)))
+            if (ShouldProcess(this.Name, $"update scope: {this.Name} under resource group: {this.ResourceGroupName}"))
             {
                 var response = this.MonitorManagementClient
                                    .PrivateLinkScopes
diff --git a/src/Monitor/Monitor/ScheduledQueryRules/NewScheduledQueryRuleCommand.cs b/src/Monitor/Monitor/ScheduledQueryRules/NewScheduledQueryRuleCommand.cs
index 61ba9a3dde..c2d325f67f 100644
--- a/src/Monitor/Monitor/ScheduledQueryRules/NewScheduledQueryRuleCommand.cs
+++ b/src/Monitor/Monitor/ScheduledQueryRules/NewScheduledQueryRuleCommand.cs
@@ -114,8 +114,7 @@ namespace Microsoft.Azure.Commands.Insights.ScheduledQueryRules
 
                 parameters.Validate();
                 if (this.ShouldProcess(this.Name,
-                    string.Format("Creating Log Alert Rule '{0}' in resource group {1}", this.Name,
-                        this.ResourceGroupName)))
+                    $"Creating Log Alert Rule '{this.Name}' in resource group {this.ResourceGroupName}"))
                 {
 
                     var result = this.MonitorManagementClient.ScheduledQueryRules
diff --git a/src/Monitor/Monitor/ScheduledQueryRules/RemoveScheduledQueryRuleCommand.cs b/src/Monitor/Monitor/ScheduledQueryRules/RemoveScheduledQueryRuleCommand.cs
index f5a05588ba..7868c11123 100644
--- a/src/Monitor/Monitor/ScheduledQueryRules/RemoveScheduledQueryRuleCommand.cs
+++ b/src/Monitor/Monitor/ScheduledQueryRules/RemoveScheduledQueryRuleCommand.cs
@@ -85,8 +85,7 @@ namespace Microsoft.Azure.Commands.Insights.ScheduledQueryRules
             }
 
             if (this.ShouldProcess(this.Name,
-                string.Format("Deleting Log Alert Rule '{0}' in resource group {1}", this.Name,
-                    this.ResourceGroupName)))
+                $"Deleting Log Alert Rule '{this.Name}' in resource group {this.ResourceGroupName}"))
             {
                 try
                 {
diff --git a/src/Monitor/Monitor/ScheduledQueryRules/SetScheduledQueryRuleCommand.cs b/src/Monitor/Monitor/ScheduledQueryRules/SetScheduledQueryRuleCommand.cs
index 162dc0eed8..4b23aa196a 100644
--- a/src/Monitor/Monitor/ScheduledQueryRules/SetScheduledQueryRuleCommand.cs
+++ b/src/Monitor/Monitor/ScheduledQueryRules/SetScheduledQueryRuleCommand.cs
@@ -170,7 +170,7 @@ namespace Microsoft.Azure.Commands.Insights.ScheduledQueryRules
 
             try
             {
-                if (ShouldProcess(this.Name, string.Format("Updating Log Alert Rule '{0}' in resource group '{1}'.", this.Name, this.ResourceGroupName)))
+                if (ShouldProcess(this.Name, $"Updating Log Alert Rule '{this.Name}' in resource group '{this.ResourceGroupName}'."))
                 {
                     requestBody.Validate();
 
diff --git a/src/Monitor/Monitor/ScheduledQueryRules/UpdateScheduledQueryRuleCommand.cs b/src/Monitor/Monitor/ScheduledQueryRules/UpdateScheduledQueryRuleCommand.cs
index 0a6ea076a5..1b26a40cb0 100644
--- a/src/Monitor/Monitor/ScheduledQueryRules/UpdateScheduledQueryRuleCommand.cs
+++ b/src/Monitor/Monitor/ScheduledQueryRules/UpdateScheduledQueryRuleCommand.cs
@@ -113,8 +113,7 @@ namespace Microsoft.Azure.Commands.Insights.ScheduledQueryRules
             LogSearchRuleResourcePatch parameters = new LogSearchRuleResourcePatch(resource.Tags, this.Enabled ? "true" : "false");
 
             if (ShouldProcess(this.Name,
-                string.Format("Updating Log Alert Rule '{0}' in resource group '{1}'.", this.Name,
-                    this.ResourceGroupName)))
+                $"Updating Log Alert Rule '{this.Name}' in resource group '{this.ResourceGroupName}'."))
             {
                 try
                 {
diff --git a/src/Monitor/Monitor/TransitionalClasses/TransitionHelpers.cs b/src/Monitor/Monitor/TransitionalClasses/TransitionHelpers.cs
index 5ea3395117..72137d7d52 100644
--- a/src/Monitor/Monitor/TransitionalClasses/TransitionHelpers.cs
+++ b/src/Monitor/Monitor/TransitionalClasses/TransitionHelpers.cs
@@ -31,8 +31,7 @@ namespace Microsoft.Azure.Commands.Insights.TransitionalClasses
 
         static public RuleAction ToMirrorNamespace(Management.Monitor.Management.Models.RuleAction ruleAction)
         {
-            var emailAction = ruleAction as Management.Monitor.Management.Models.RuleEmailAction;
-            if (emailAction != null)
+            if (ruleAction is Management.Monitor.Management.Models.RuleEmailAction emailAction)
             {
                 return new RuleEmailAction(
                     sendToServiceOwners: emailAction.SendToServiceOwners,
@@ -40,8 +39,7 @@ namespace Microsoft.Azure.Commands.Insights.TransitionalClasses
             }
             else
             {
-                var webhookAction = ruleAction as Management.Monitor.Management.Models.RuleWebhookAction;
-                if (webhookAction != null)
+                if (ruleAction is Management.Monitor.Management.Models.RuleWebhookAction webhookAction)
                 {
                     return new RuleWebhookAction(
                         serviceUri: webhookAction.ServiceUri,
@@ -54,15 +52,13 @@ namespace Microsoft.Azure.Commands.Insights.TransitionalClasses
 
         static public Management.Monitor.Management.Models.RuleAction ToMirrorNamespace(RuleAction ruleAction)
         {
-            var ruleAction1 = ruleAction as RuleEmailAction;
-            if (ruleAction1 != null)
+            if (ruleAction is RuleEmailAction ruleAction1)
             {
                 return new Management.Monitor.Management.Models.RuleEmailAction(ruleEmailAction: ruleAction1);
             }
             else
             {
-                var ruleAction2 = ruleAction as RuleWebhookAction;
-                if (ruleAction2 != null)
+                if (ruleAction is RuleWebhookAction ruleAction2)
                 {
                     return new Management.Monitor.Management.Models.RuleWebhookAction(ruleWebhookAction: ruleAction2);
                 }
@@ -73,8 +69,7 @@ namespace Microsoft.Azure.Commands.Insights.TransitionalClasses
 
         static public RuleCondition ToMirrorNamespace(Management.Monitor.Management.Models.RuleCondition ruleCondition)
         {
-            var thresholdCondition = ruleCondition as Management.Monitor.Management.Models.ThresholdRuleCondition;
-            if (thresholdCondition != null)
+            if (ruleCondition is Management.Monitor.Management.Models.ThresholdRuleCondition thresholdCondition)
             {
                 return new ThresholdRuleCondition(
                     operatorProperty: ConvertNamespace(thresholdCondition.OperatorProperty),
@@ -85,8 +80,7 @@ namespace Microsoft.Azure.Commands.Insights.TransitionalClasses
             }
             else
             {
-                var locationCondition = ruleCondition as Management.Monitor.Management.Models.LocationThresholdRuleCondition;
-                if (locationCondition != null)
+                if (ruleCondition is Management.Monitor.Management.Models.LocationThresholdRuleCondition locationCondition)
                 {
                     return new LocationThresholdRuleCondition(
                         failedLocationCount: locationCondition.FailedLocationCount,
@@ -100,8 +94,7 @@ namespace Microsoft.Azure.Commands.Insights.TransitionalClasses
 
         static public Management.Monitor.Management.Models.RuleCondition ToMirrorNamespace(RuleCondition ruleCondition)
         {
-            var thresholdCondition = ruleCondition as ThresholdRuleCondition;
-            if (thresholdCondition != null)
+            if (ruleCondition is ThresholdRuleCondition thresholdCondition)
             {
                 return new Management.Monitor.Management.Models.ThresholdRuleCondition
                 {
@@ -114,8 +107,7 @@ namespace Microsoft.Azure.Commands.Insights.TransitionalClasses
             }
             else
             {
-                var locationCondition = ruleCondition as LocationThresholdRuleCondition;
-                if (locationCondition != null)
+                if (ruleCondition is LocationThresholdRuleCondition locationCondition)
                 {
                     return new Management.Monitor.Management.Models.LocationThresholdRuleCondition
                     {
@@ -136,8 +128,7 @@ namespace Microsoft.Azure.Commands.Insights.TransitionalClasses
                 return null;
             }
 
-            var metricDataSource = ruleDataSource as Management.Monitor.Management.Models.RuleMetricDataSource;
-            if (metricDataSource != null)
+            if (ruleDataSource is Management.Monitor.Management.Models.RuleMetricDataSource metricDataSource)
             {
                 return new RuleMetricDataSource(
                     resourceUri: metricDataSource.ResourceUri,
@@ -159,8 +150,7 @@ namespace Microsoft.Azure.Commands.Insights.TransitionalClasses
                 return null;
             }
 
-            var metricDataSource = ruleDataSource as RuleMetricDataSource;
-            if (metricDataSource != null)
+            if (ruleDataSource is RuleMetricDataSource metricDataSource)
             {
                 return new Management.Monitor.Management.Models.RuleMetricDataSource
                 {
diff --git a/src/Monitor/Monitor/Utilities.cs b/src/Monitor/Monitor/Utilities.cs
index 3e4444e35d..31ac99d462 100644
--- a/src/Monitor/Monitor/Utilities.cs
+++ b/src/Monitor/Monitor/Utilities.cs
@@ -62,7 +62,7 @@ namespace Microsoft.Azure.Commands.Insights
             Uri tempUri;
             if (!Uri.TryCreate(uri, UriKind.RelativeOrAbsolute, out tempUri))
             {
-                throw new ArgumentException(string.Format("Invalid {0}: {1}", argName, uri));
+                throw new ArgumentException($"Invalid {argName}: {uri}");
             }
         }
 
diff --git a/src/MonitoringSolutions/generated/runtime/Serialization/JsonSerializer.cs b/src/MonitoringSolutions/generated/runtime/Serialization/JsonSerializer.cs
index 596b212c92..1491ca4f76 100644
--- a/src/MonitoringSolutions/generated/runtime/Serialization/JsonSerializer.cs
+++ b/src/MonitoringSolutions/generated/runtime/Serialization/JsonSerializer.cs
@@ -312,7 +312,7 @@ namespace Microsoft.Azure.PowerShell.Cmdlets.MonitoringSolutions.Runtime.Json
                     default: return ReadArray((IEnumerable)value);
                 }
             }
-            else if (value is IEnumerable)
+            else if (value is IEnumerable iEnumerable)
             {
                 if (type.IsList && type.ElementType != null)
                 {
@@ -330,7 +330,7 @@ namespace Microsoft.Azure.PowerShell.Cmdlets.MonitoringSolutions.Runtime.Json
                     }
                 }
 
-                return ReadArray((IEnumerable)value);
+                return ReadArray(iEnumerable);
             }
             else
             {
diff --git a/src/MySql/generated/runtime/Serialization/JsonSerializer.cs b/src/MySql/generated/runtime/Serialization/JsonSerializer.cs
index fd7d38fa60..c729b17c41 100644
--- a/src/MySql/generated/runtime/Serialization/JsonSerializer.cs
+++ b/src/MySql/generated/runtime/Serialization/JsonSerializer.cs
@@ -312,7 +312,7 @@ namespace Microsoft.Azure.PowerShell.Cmdlets.MySql.Runtime.Json
                     default: return ReadArray((IEnumerable)value);
                 }
             }
-            else if (value is IEnumerable)
+            else if (value is IEnumerable iEnumerable)
             {
                 if (type.IsList && type.ElementType != null)
                 {
@@ -330,7 +330,7 @@ namespace Microsoft.Azure.PowerShell.Cmdlets.MySql.Runtime.Json
                     }
                 }
 
-                return ReadArray((IEnumerable)value);
+                return ReadArray(iEnumerable);
             }
             else
             {
diff --git a/src/Network/Network.Test/ScenarioTests/ApplicationGatewayTests.cs b/src/Network/Network.Test/ScenarioTests/ApplicationGatewayTests.cs
index 2d98c4c3c1..442312810c 100644
--- a/src/Network/Network.Test/ScenarioTests/ApplicationGatewayTests.cs
+++ b/src/Network/Network.Test/ScenarioTests/ApplicationGatewayTests.cs
@@ -49,7 +49,7 @@ namespace Commands.Network.Test.ScenarioTests
         [Trait(Category.Owner, NrpTeamAlias.nvadev)]
         public void TestApplicationGatewayCRUD()
         {
-            TestRunner.RunTestScript(string.Format("Test-ApplicationGatewayCRUD -baseDir '{0}'", AppDomain.CurrentDomain.BaseDirectory));
+            TestRunner.RunTestScript($"Test-ApplicationGatewayCRUD -baseDir '{AppDomain.CurrentDomain.BaseDirectory}'");
         }
 
         [Fact]
@@ -57,7 +57,7 @@ namespace Commands.Network.Test.ScenarioTests
         [Trait(Category.Owner, NrpTeamAlias.nvadev)]
         public void TestApplicationGatewayCRUD2()
         {
-            TestRunner.RunTestScript(string.Format("Test-ApplicationGatewayCRUD2 -baseDir '{0}'", AppDomain.CurrentDomain.BaseDirectory));
+            TestRunner.RunTestScript($"Test-ApplicationGatewayCRUD2 -baseDir '{AppDomain.CurrentDomain.BaseDirectory}'");
         }
 
         [Fact]
@@ -65,7 +65,7 @@ namespace Commands.Network.Test.ScenarioTests
         [Trait(Category.Owner, NrpTeamAlias.nvadev)]
         public void TestApplicationGatewayCRUD3()
         {
-            TestRunner.RunTestScript(string.Format("Test-ApplicationGatewayCRUD3 -baseDir '{0}'", AppDomain.CurrentDomain.BaseDirectory));
+            TestRunner.RunTestScript($"Test-ApplicationGatewayCRUD3 -baseDir '{AppDomain.CurrentDomain.BaseDirectory}'");
         }
 
         [Fact]
@@ -89,7 +89,7 @@ namespace Commands.Network.Test.ScenarioTests
                     HttpMockServer.Variables["spn"] = servicePrincipal;
                 }
             }
-            TestRunner.RunTestScript(string.Format("Test-KeyVaultIntegrationTest -baseDir '{0}' -spn '{1}'", AppDomain.CurrentDomain.BaseDirectory, servicePrincipal));
+            TestRunner.RunTestScript($"Test-KeyVaultIntegrationTest -baseDir '{AppDomain.CurrentDomain.BaseDirectory}' -spn '{servicePrincipal}'");
         }
 
         [Fact]
@@ -97,7 +97,7 @@ namespace Commands.Network.Test.ScenarioTests
         [Trait(Category.Owner, NrpTeamAlias.nvadev)]
         public void TestApplicationGatewayCRUDSubItems()
         {
-            TestRunner.RunTestScript(string.Format("Test-ApplicationGatewayCRUDSubItems -baseDir '{0}'", AppDomain.CurrentDomain.BaseDirectory));
+            TestRunner.RunTestScript($"Test-ApplicationGatewayCRUDSubItems -baseDir '{AppDomain.CurrentDomain.BaseDirectory}'");
         }
 
         [Fact]
@@ -105,7 +105,7 @@ namespace Commands.Network.Test.ScenarioTests
         [Trait(Category.Owner, NrpTeamAlias.nvadev)]
         public void TestApplicationGatewayCRUDSubItems2()
         {
-            TestRunner.RunTestScript(string.Format("Test-ApplicationGatewayCRUDSubItems2 -baseDir '{0}'", AppDomain.CurrentDomain.BaseDirectory));
+            TestRunner.RunTestScript($"Test-ApplicationGatewayCRUDSubItems2 -baseDir '{AppDomain.CurrentDomain.BaseDirectory}'");
         }
 
         [Fact]
@@ -121,7 +121,7 @@ namespace Commands.Network.Test.ScenarioTests
         [Trait(Category.Owner, NrpTeamAlias.nvadev_subset1)]
         public void TestApplicationGatewayCRUDRewriteRuleSet()
         {
-            TestRunner.RunTestScript(string.Format("Test-ApplicationGatewayCRUDRewriteRuleSet -baseDir '{0}'", AppDomain.CurrentDomain.BaseDirectory));
+            TestRunner.RunTestScript($"Test-ApplicationGatewayCRUDRewriteRuleSet -baseDir '{AppDomain.CurrentDomain.BaseDirectory}'");
         }
 
         [Fact]
@@ -129,7 +129,7 @@ namespace Commands.Network.Test.ScenarioTests
         [Trait(Category.Owner, NrpTeamAlias.nvadev_subset1)]
         public void TestApplicationGatewayCRUDRewriteRuleSetWithConditions()
         {
-            TestRunner.RunTestScript(string.Format("Test-ApplicationGatewayCRUDRewriteRuleSetWithConditions -baseDir '{0}'", AppDomain.CurrentDomain.BaseDirectory));
+            TestRunner.RunTestScript($"Test-ApplicationGatewayCRUDRewriteRuleSetWithConditions -baseDir '{AppDomain.CurrentDomain.BaseDirectory}'");
         }
 
         [Fact]
@@ -137,7 +137,7 @@ namespace Commands.Network.Test.ScenarioTests
         [Trait(Category.Owner, NrpTeamAlias.nvadev_subset1)]
         public void TestTopLevelWafResourceWithApplicationGateway()
         {
-            TestRunner.RunTestScript(string.Format("Test-ApplicationGatewayTopLevelFirewallPolicy -baseDir '{0}'", AppDomain.CurrentDomain.BaseDirectory));
+            TestRunner.RunTestScript($"Test-ApplicationGatewayTopLevelFirewallPolicy -baseDir '{AppDomain.CurrentDomain.BaseDirectory}'");
         }
 
         [Fact]
@@ -145,7 +145,7 @@ namespace Commands.Network.Test.ScenarioTests
         [Trait(Category.Owner, NrpTeamAlias.nvadev_subset1)]
         public void TestApplicationGatewayWithFirewallPolicy()
         {
-            TestRunner.RunTestScript(string.Format("Test-ApplicationGatewayWithFirewallPolicy -baseDir '{0}'", AppDomain.CurrentDomain.BaseDirectory));
+            TestRunner.RunTestScript($"Test-ApplicationGatewayWithFirewallPolicy -baseDir '{AppDomain.CurrentDomain.BaseDirectory}'");
         }
 
         [Fact]
@@ -153,7 +153,7 @@ namespace Commands.Network.Test.ScenarioTests
         [Trait(Category.Owner, NrpTeamAlias.nvadev_subset1)]
         public void TestApplicationGatewayCRUDRewriteRuleSetUrlConfiguration()
         {
-            TestRunner.RunTestScript(string.Format("Test-ApplicationGatewayCRUDRewriteRuleSetWithUrlConfiguration -baseDir '{0}'", AppDomain.CurrentDomain.BaseDirectory));
+            TestRunner.RunTestScript($"Test-ApplicationGatewayCRUDRewriteRuleSetWithUrlConfiguration -baseDir '{AppDomain.CurrentDomain.BaseDirectory}'");
         }
 
         [Fact]
@@ -161,7 +161,7 @@ namespace Commands.Network.Test.ScenarioTests
         [Trait(Category.Owner, NrpTeamAlias.nvadev_subset1)]
         public void TestApplicationGatewayWithListenerHostNames()
         {
-            TestRunner.RunTestScript(string.Format("Test-ApplicationGatewayWithListenerHostNames -baseDir '{0}'", AppDomain.CurrentDomain.BaseDirectory));
+            TestRunner.RunTestScript($"Test-ApplicationGatewayWithListenerHostNames -baseDir '{AppDomain.CurrentDomain.BaseDirectory}'");
         }
 
         [Fact]
@@ -169,7 +169,7 @@ namespace Commands.Network.Test.ScenarioTests
         [Trait(Category.Owner, NrpTeamAlias.nvadev_subset1)]
         public void TestApplicationGatewayWithPrivateLinkConfiguration()
         {
-            TestRunner.RunTestScript(string.Format("Test-ApplicationGatewayWithPrivateLinkConfiguration -baseDir '{0}'", AppDomain.CurrentDomain.BaseDirectory));
+            TestRunner.RunTestScript($"Test-ApplicationGatewayWithPrivateLinkConfiguration -baseDir '{AppDomain.CurrentDomain.BaseDirectory}'");
         }
 
         [Fact]
@@ -177,7 +177,7 @@ namespace Commands.Network.Test.ScenarioTests
         [Trait(Category.Owner, NrpTeamAlias.nvadev_subset1)]
         public void TestApplicationGatewayPrivateEndpointConnectionsWorkFlows()
         {
-            TestRunner.RunTestScript(string.Format("Test-ApplicationGatewayPrivateEndpointWorkFlows -baseDir '{0}'", AppDomain.CurrentDomain.BaseDirectory));
+            TestRunner.RunTestScript($"Test-ApplicationGatewayPrivateEndpointWorkFlows -baseDir '{AppDomain.CurrentDomain.BaseDirectory}'");
         }
 
         [Fact]
@@ -185,7 +185,7 @@ namespace Commands.Network.Test.ScenarioTests
         [Trait(Category.Owner, NrpTeamAlias.nvadev_subset1)]
         public void TestApplicationGatewayCRUDWithMutualAuthentication()
         {
-            TestRunner.RunTestScript(string.Format("Test-ApplicationGatewayCRUDWithMutualAuthentication -baseDir '{0}'", AppDomain.CurrentDomain.BaseDirectory));
+            TestRunner.RunTestScript($"Test-ApplicationGatewayCRUDWithMutualAuthentication -baseDir '{AppDomain.CurrentDomain.BaseDirectory}'");
         }
     }
 }
diff --git a/src/Network/Network.Test/ScenarioTests/AzureFirewallPolicyTests.cs b/src/Network/Network.Test/ScenarioTests/AzureFirewallPolicyTests.cs
index d9036cb00e..5c1333f729 100644
--- a/src/Network/Network.Test/ScenarioTests/AzureFirewallPolicyTests.cs
+++ b/src/Network/Network.Test/ScenarioTests/AzureFirewallPolicyTests.cs
@@ -106,7 +106,7 @@ namespace Commands.Network.Test.ScenarioTests
                     HttpMockServer.Variables["spn"] = servicePrincipal;
                 }
             }
-            TestRunner.RunTestScript(string.Format("Test-AzureFirewallPolicyPremiumFeatures -baseDir '{0}' -spn '{1}'", AppDomain.CurrentDomain.BaseDirectory, servicePrincipal));
+            TestRunner.RunTestScript($"Test-AzureFirewallPolicyPremiumFeatures -baseDir '{AppDomain.CurrentDomain.BaseDirectory}' -spn '{servicePrincipal}'");
         }
 
         [Fact]
diff --git a/src/Network/Network.Test/ScenarioTests/NetworkInterfaceTestsGenerated.cs b/src/Network/Network.Test/ScenarioTests/NetworkInterfaceTestsGenerated.cs
index 4bc03f32a7..8cc4577213 100644
--- a/src/Network/Network.Test/ScenarioTests/NetworkInterfaceTestsGenerated.cs
+++ b/src/Network/Network.Test/ScenarioTests/NetworkInterfaceTestsGenerated.cs
@@ -74,7 +74,7 @@ namespace Commands.Network.Test.ScenarioTests
         [Trait(Category.Owner, NrpTeamAlias.sdnnrp)]
         public void TestNetworkInterfaceGetEffectiveRouteTable()
         {
-            TestRunner.RunTestScript(string.Format("Test-NetworkInterfaceGetEffectiveRouteTable -baseDir '{0}'", System.AppDomain.CurrentDomain.BaseDirectory));
+            TestRunner.RunTestScript($"Test-NetworkInterfaceGetEffectiveRouteTable -baseDir '{System.AppDomain.CurrentDomain.BaseDirectory}'");
         }
     }
 }
diff --git a/src/Network/Network.Test/ScenarioTests/VirtualNetworkGatewayTests.cs b/src/Network/Network.Test/ScenarioTests/VirtualNetworkGatewayTests.cs
index 473889cf9f..e25d139fd2 100644
--- a/src/Network/Network.Test/ScenarioTests/VirtualNetworkGatewayTests.cs
+++ b/src/Network/Network.Test/ScenarioTests/VirtualNetworkGatewayTests.cs
@@ -80,8 +80,7 @@ namespace Commands.Network.Test.ScenarioTests
         [Trait(Category.Owner, NrpTeamAlias.brooklynft_subset3)]
         public void TestVirtualNetworkGatewayP2SVpnProfile()
         {
-            TestRunner.RunTestScript(string.Format(
-                "Test-VirtualNetworkGatewayGenerateVpnProfile -baseDir '{0}'", AppDomain.CurrentDomain.BaseDirectory));
+            TestRunner.RunTestScript($"Test-VirtualNetworkGatewayGenerateVpnProfile -baseDir '{AppDomain.CurrentDomain.BaseDirectory}'");
         }
 
         [Fact]
diff --git a/src/Network/Network/ApplicationGateway/ApplicationGatewayChildResourceHelper.cs b/src/Network/Network/ApplicationGateway/ApplicationGatewayChildResourceHelper.cs
index 726b0f4784..e1a8fcac03 100644
--- a/src/Network/Network/ApplicationGateway/ApplicationGatewayChildResourceHelper.cs
+++ b/src/Network/Network/ApplicationGateway/ApplicationGatewayChildResourceHelper.cs
@@ -48,7 +48,7 @@ namespace Microsoft.Azure.Commands.Network
             startIndex--;
             string orignalString = id.Substring(startIndex, endIndex - startIndex + 1);
 
-            return id.Replace(orignalString, string.Format("/{0}/", resourceValue));
+            return id.Replace(orignalString, $"/{resourceValue}/");
         }
 
         private static bool IsResourceReference(Type t)
diff --git a/src/Network/Network/BYOIP/CustomIpPrefix/NewAzureCustomIpPrefixCommand.cs b/src/Network/Network/BYOIP/CustomIpPrefix/NewAzureCustomIpPrefixCommand.cs
index 63afddc725..d6f7859a6d 100644
--- a/src/Network/Network/BYOIP/CustomIpPrefix/NewAzureCustomIpPrefixCommand.cs
+++ b/src/Network/Network/BYOIP/CustomIpPrefix/NewAzureCustomIpPrefixCommand.cs
@@ -79,7 +79,7 @@ namespace Microsoft.Azure.Commands.Network
 
             if (resourceExists)
             {
-                throw new System.Exception(string.Format("A CustomIpPrefix with name '{0}' in resource group '{1}' already exists. Please use Set-AzCustomIpPrefix to update an existing CustomIpPrefix.", this.Name, this.ResourceGroupName));
+                throw new System.Exception($"A CustomIpPrefix with name '{this.Name}' in resource group '{this.ResourceGroupName}' already exists. Please use Set-AzCustomIpPrefix to update an existing CustomIpPrefix.");
             }
 
             var psModel = CreateCustomIpPrefix();
diff --git a/src/Network/Network/Common/NetworkClient.cs b/src/Network/Network/Common/NetworkClient.cs
index 88e1346751..8a71d429c0 100644
--- a/src/Network/Network/Common/NetworkClient.cs
+++ b/src/Network/Network/Common/NetworkClient.cs
@@ -147,7 +147,7 @@ namespace Microsoft.Azure.Commands.Network
             url = url.Replace("{resourceGroupName}", Uri.EscapeDataString(resourceGroupName));
             url = url.Replace("{virtualNetworkGatewayName}", Uri.EscapeDataString(virtualNetworkGatewayName));
             url = url.Replace("{subscriptionId}", Uri.EscapeDataString(NetworkManagementClient.SubscriptionId));
-            url += "?" + string.Join("&", string.Format("api-version={0}", Uri.EscapeDataString(apiVersion)));
+            url += "?" + string.Join("&", $"api-version={Uri.EscapeDataString(apiVersion)}");
 
             // Create HTTP transport objects
             HttpRequestMessage httpRequest = new HttpRequestMessage();
@@ -179,8 +179,7 @@ namespace Microsoft.Azure.Commands.Network
             if ((int)statusCode != 202)
             {
                 string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
-                throw new Exception(string.Format("Get-AzVpnClientPackage Operation returned an invalid status code '{0}' with Exception:{1}",
-                    statusCode, string.IsNullOrEmpty(responseContent) ? "NotAvailable" : responseContent));
+                throw new Exception($"Get-AzVpnClientPackage Operation returned an invalid status code '{statusCode}' with Exception:{(string.IsNullOrEmpty(responseContent) ? "NotAvailable" : responseContent)}");
             }
 
             // Create Result
@@ -301,7 +300,7 @@ namespace Microsoft.Azure.Commands.Network
             url = url.Replace("{resourceGroupName}", Uri.EscapeDataString(resourceGroupName));
             url = url.Replace("{virtualNetworkGatewayName}", Uri.EscapeDataString(virtualNetworkGatewayName));
             url = url.Replace("{subscriptionId}", Uri.EscapeDataString(NetworkManagementClient.SubscriptionId));
-            url += "?" + string.Join("&", string.Format("api-version={0}", Uri.EscapeDataString(apiVersion)));
+            url += "?" + string.Join("&", $"api-version={Uri.EscapeDataString(apiVersion)}");
 
             // Create HTTP transport objects
             HttpRequestMessage httpRequest = new HttpRequestMessage();
@@ -333,8 +332,7 @@ namespace Microsoft.Azure.Commands.Network
             if ((int)statusCode != 202)
             {
                 string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
-                throw new Exception(string.Format("Get-AzVpnClientPackage Operation returned an invalid status code '{0}' with Exception:{1}",
-                    statusCode, string.IsNullOrEmpty(responseContent) ? "NotAvailable" : responseContent));
+                throw new Exception($"Get-AzVpnClientPackage Operation returned an invalid status code '{statusCode}' with Exception:{(string.IsNullOrEmpty(responseContent) ? "NotAvailable" : responseContent)}");
             }
 
             // Create Result
@@ -444,7 +442,7 @@ namespace Microsoft.Azure.Commands.Network
             url = url.Replace("{resourceGroupName}", Uri.EscapeDataString(resourceGroupName));
             url = url.Replace("{virtualNetworkGatewayName}", Uri.EscapeDataString(virtualNetworkGatewayName));
             url = url.Replace("{subscriptionId}", Uri.EscapeDataString(NetworkManagementClient.SubscriptionId));
-            url += "?" + string.Join("&", string.Format("api-version={0}", Uri.EscapeDataString(apiVersion)));
+            url += "?" + string.Join("&", $"api-version={Uri.EscapeDataString(apiVersion)}");
 
             // Create HTTP transport objects
             HttpRequestMessage httpRequest = new HttpRequestMessage();
@@ -472,8 +470,7 @@ namespace Microsoft.Azure.Commands.Network
             if ((int)statusCode != 202)
             {
                 string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
-                throw new Exception(string.Format("Get-AzVpnClientPackage Operation returned an invalid status code '{0}' with Exception:{1}",
-                    statusCode, string.IsNullOrEmpty(responseContent) ? "NotAvailable" : responseContent));
+                throw new Exception($"Get-AzVpnClientPackage Operation returned an invalid status code '{statusCode}' with Exception:{(string.IsNullOrEmpty(responseContent) ? "NotAvailable" : responseContent)}");
             }
 
             // Create Result
@@ -562,7 +559,7 @@ namespace Microsoft.Azure.Commands.Network
             url = url.Replace("{resourceGroupName}", Uri.EscapeDataString(resourceGroupName));
             url = url.Replace("{virtualWanName}", Uri.EscapeDataString(virtualWanName));
             url = url.Replace("{subscriptionId}", Uri.EscapeDataString(NetworkManagementClient.SubscriptionId));
-            url += "?" + string.Join("&", string.Format("api-version={0}", Uri.EscapeDataString(apiVersion)));
+            url += "?" + string.Join("&", $"api-version={Uri.EscapeDataString(apiVersion)}");
 
             AzureOperationResponse<string> result = await this.ExecuteOperationWithHttpMessagesAsync(resourceGroupName, virtualWanName, null, url, apiVersion, null, cancellationToken).ConfigureAwait(false);
             return result.Body;
@@ -585,7 +582,7 @@ namespace Microsoft.Azure.Commands.Network
             url = url.Replace("{resourceGroupName}", Uri.EscapeDataString(resourceGroupName));
             url = url.Replace("{virtualWanName}", Uri.EscapeDataString(virtualWanName));
             url = url.Replace("{subscriptionId}", Uri.EscapeDataString(NetworkManagementClient.SubscriptionId));
-            url += "?" + string.Join("&", string.Format("api-version={0}", Uri.EscapeDataString(apiVersion)));
+            url += "?" + string.Join("&", $"api-version={Uri.EscapeDataString(apiVersion)}");
 
             if (parameters == null)
             {
@@ -614,7 +611,7 @@ namespace Microsoft.Azure.Commands.Network
             url = url.Replace("{resourceGroupName}", Uri.EscapeDataString(resourceGroupName));
             url = url.Replace("{p2sVpnGatewayName}", Uri.EscapeDataString(p2sVpnGatewayName));
             url = url.Replace("{subscriptionId}", Uri.EscapeDataString(NetworkManagementClient.SubscriptionId));
-            url += "?" + string.Join("&", string.Format("api-version={0}", Uri.EscapeDataString(apiVersion)));
+            url += "?" + string.Join("&", $"api-version={Uri.EscapeDataString(apiVersion)}");
 
             AzureOperationResponse<string> result = await this.ExecuteOperationWithHttpMessagesAsync(resourceGroupName, p2sVpnGatewayName, null, url, apiVersion, null, cancellationToken).ConfigureAwait(false);
             return result.Body;
@@ -637,7 +634,7 @@ namespace Microsoft.Azure.Commands.Network
             url = url.Replace("{resourceGroupName}", Uri.EscapeDataString(resourceGroupName));
             url = url.Replace("{p2sVpnGatewayName}", Uri.EscapeDataString(p2sVpnGatewayName));
             url = url.Replace("{subscriptionId}", Uri.EscapeDataString(NetworkManagementClient.SubscriptionId));
-            url += "?" + string.Join("&", string.Format("api-version={0}", Uri.EscapeDataString(apiVersion)));
+            url += "?" + string.Join("&", $"api-version={Uri.EscapeDataString(apiVersion)}");
 
             if (parameters == null)
             {
@@ -665,7 +662,7 @@ namespace Microsoft.Azure.Commands.Network
             url = url.Replace("{resourceGroupName}", Uri.EscapeDataString(resourceGroupName));
             url = url.Replace("{p2sVpnGatewayName}", Uri.EscapeDataString(p2sVpnGatewayName));
             url = url.Replace("{subscriptionId}", Uri.EscapeDataString(NetworkManagementClient.SubscriptionId));
-            url += "?" + string.Join("&", string.Format("api-version={0}", Uri.EscapeDataString(apiVersion)));
+            url += "?" + string.Join("&", $"api-version={Uri.EscapeDataString(apiVersion)}");
 
             if (parameters == null)
             {
@@ -747,8 +744,7 @@ namespace Microsoft.Azure.Commands.Network
             if ((int)statusCode != 202)
             {
                 string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
-                throw new Exception(string.Format("Operation returned an invalid status code '{0}' with Exception:{1}",
-                    statusCode, string.IsNullOrEmpty(responseContent) ? "NotAvailable" : responseContent));
+                throw new Exception($"Operation returned an invalid status code '{statusCode}' with Exception:{(string.IsNullOrEmpty(responseContent) ? "NotAvailable" : responseContent)}");
             }
 
             // Create Result
diff --git a/src/Network/Network/Common/NetworkCloudException.cs b/src/Network/Network/Common/NetworkCloudException.cs
index 5e08878edb..3e867541a8 100644
--- a/src/Network/Network/Common/NetworkCloudException.cs
+++ b/src/Network/Network/Common/NetworkCloudException.cs
@@ -94,7 +94,7 @@ namespace Microsoft.Azure.Commands.Network.Common
                     for (int i = 0, l = cloudException.Body.Details.Count; i < l; i++)
                     {
                         var details = cloudException.Body.Details[i];
-                        string index = l == 1 ? string.Empty : string.Format("{0}. ", i + 1);
+                        string index = l == 1 ? string.Empty : $"{i + 1}. ";
 
                         if (!string.IsNullOrEmpty(details.Code))
                         {
diff --git a/src/Network/Network/Cortex/P2SVpnGateway/ResetAzureP2SVpnGatewayCommand.cs b/src/Network/Network/Cortex/P2SVpnGateway/ResetAzureP2SVpnGatewayCommand.cs
index 990934e61f..c08aaa9437 100644
--- a/src/Network/Network/Cortex/P2SVpnGateway/ResetAzureP2SVpnGatewayCommand.cs
+++ b/src/Network/Network/Cortex/P2SVpnGateway/ResetAzureP2SVpnGatewayCommand.cs
@@ -93,7 +93,7 @@ namespace Microsoft.Azure.Commands.Network
                 throw new PSArgumentException(Properties.Resources.P2SVpnGatewayNotFound);
             }
 
-            string shouldProcessMessage = string.Format("Execute {0}P2sVpnGateway for ResourceGroupName {1} P2SVpnGateway {2}", ResourceManager.Common.AzureRMConstants.AzureRMPrefix, this.ResourceGroupName, this.Name);
+            string shouldProcessMessage = $"Execute {ResourceManager.Common.AzureRMConstants.AzureRMPrefix}P2sVpnGateway for ResourceGroupName {this.ResourceGroupName} P2SVpnGateway {this.Name}";
             if (ShouldProcess(shouldProcessMessage, VerbsCommon.Reset))
             {
                 this.P2SVpnGatewayClient.Reset(this.ResourceGroupName, this.Name);
diff --git a/src/Network/Network/Cortex/VpnConnection/NewAzureRmVpnConnectionCommand.cs b/src/Network/Network/Cortex/VpnConnection/NewAzureRmVpnConnectionCommand.cs
index f3716ddeb5..3b8633a155 100644
--- a/src/Network/Network/Cortex/VpnConnection/NewAzureRmVpnConnectionCommand.cs
+++ b/src/Network/Network/Cortex/VpnConnection/NewAzureRmVpnConnectionCommand.cs
@@ -324,7 +324,7 @@ namespace Microsoft.Azure.Commands.Network
                     this.CreateOrUpdateVpnGateway(this.ResourceGroupName, this.ParentResourceName, parentVpnGateway, parentVpnGateway.Tag);
 
                     var createdOrUpdatedVpnGateway = this.GetVpnGateway(this.ResourceGroupName, this.ParentResourceName);
-                    connectionToReturn = createdOrUpdatedVpnGateway.Connections.Where(connection => connection.Name.Equals(this.Name, StringComparison.OrdinalIgnoreCase)).FirstOrDefault();
+                    connectionToReturn = createdOrUpdatedVpnGateway.Connections.FirstOrDefault(connection => connection.Name.Equals(this.Name, StringComparison.OrdinalIgnoreCase));
                 });
 
             return connectionToReturn;
diff --git a/src/Network/Network/Cortex/VpnConnection/UpdateAzureRmVpnConnectionCommand.cs b/src/Network/Network/Cortex/VpnConnection/UpdateAzureRmVpnConnectionCommand.cs
index dcb63c625c..93df9442f7 100644
--- a/src/Network/Network/Cortex/VpnConnection/UpdateAzureRmVpnConnectionCommand.cs
+++ b/src/Network/Network/Cortex/VpnConnection/UpdateAzureRmVpnConnectionCommand.cs
@@ -240,7 +240,7 @@ namespace Microsoft.Azure.Commands.Network.Cortex.VpnGateway
                         this.CreateOrUpdateVpnGateway(this.ResourceGroupName, this.ParentResourceName, parentGateway, parentGateway.Tag);
 
                         var createdOrUpdatedVpnGateway = this.GetVpnGateway(this.ResourceGroupName, this.ParentResourceName);
-                        WriteObject(createdOrUpdatedVpnGateway.Connections.Where(connection => connection.Name.Equals(this.Name, StringComparison.OrdinalIgnoreCase)).FirstOrDefault());
+                        WriteObject(createdOrUpdatedVpnGateway.Connections.FirstOrDefault(connection => connection.Name.Equals(this.Name, StringComparison.OrdinalIgnoreCase)));
                     });
         }
     }
diff --git a/src/Network/Network/Cortex/VpnGateway/ResetAzureVpnGatewayCommand.cs b/src/Network/Network/Cortex/VpnGateway/ResetAzureVpnGatewayCommand.cs
index 2c011bd0ef..3508ff12ed 100644
--- a/src/Network/Network/Cortex/VpnGateway/ResetAzureVpnGatewayCommand.cs
+++ b/src/Network/Network/Cortex/VpnGateway/ResetAzureVpnGatewayCommand.cs
@@ -92,7 +92,7 @@ namespace Microsoft.Azure.Commands.Network
             {
                 throw new PSArgumentException(Properties.Resources.VpnGatewayNotFound);
             }
-            string shouldProcessMessage = string.Format("Execute {0}VpnGateway for ResourceGroupName {1} VpnGateway {2}", ResourceManager.Common.AzureRMConstants.AzureRMPrefix, this.ResourceGroupName, this.Name);
+            string shouldProcessMessage = $"Execute {ResourceManager.Common.AzureRMConstants.AzureRMPrefix}VpnGateway for ResourceGroupName {this.ResourceGroupName} VpnGateway {this.Name}";
             if (ShouldProcess(shouldProcessMessage, VerbsCommon.Reset))
             {
                 this.VpnGatewayClient.Reset(this.ResourceGroupName, this.Name);
diff --git a/src/Network/Network/Cortex/VpnGatewayNatRule/NewAzureRmVpnGatewayNatRuleCommand.cs b/src/Network/Network/Cortex/VpnGatewayNatRule/NewAzureRmVpnGatewayNatRuleCommand.cs
index 8bb332cdad..67a7017ccb 100644
--- a/src/Network/Network/Cortex/VpnGatewayNatRule/NewAzureRmVpnGatewayNatRuleCommand.cs
+++ b/src/Network/Network/Cortex/VpnGatewayNatRule/NewAzureRmVpnGatewayNatRuleCommand.cs
@@ -208,7 +208,7 @@ namespace Microsoft.Azure.Commands.Network
                     this.CreateOrUpdateVpnGateway(this.ResourceGroupName, this.ParentResourceName, parentVpnGateway, parentVpnGateway.Tag);
 
                     var createdOrUpdatedVpnGateway = this.GetVpnGateway(this.ResourceGroupName, this.ParentResourceName);
-                    natRuleToReturn = createdOrUpdatedVpnGateway.NatRules.Where(natRule => natRule.Name.Equals(this.Name, StringComparison.OrdinalIgnoreCase)).FirstOrDefault();
+                    natRuleToReturn = createdOrUpdatedVpnGateway.NatRules.FirstOrDefault(natRule => natRule.Name.Equals(this.Name, StringComparison.OrdinalIgnoreCase));
                 });
 
             return natRuleToReturn;
diff --git a/src/Network/Network/Cortex/VpnGatewayNatRule/UpdateAzureRmVpnGatewayNatRuleCommand.cs b/src/Network/Network/Cortex/VpnGatewayNatRule/UpdateAzureRmVpnGatewayNatRuleCommand.cs
index 344bd36490..67ebae5db3 100644
--- a/src/Network/Network/Cortex/VpnGatewayNatRule/UpdateAzureRmVpnGatewayNatRuleCommand.cs
+++ b/src/Network/Network/Cortex/VpnGatewayNatRule/UpdateAzureRmVpnGatewayNatRuleCommand.cs
@@ -205,7 +205,7 @@ namespace Microsoft.Azure.Commands.Network.Cortex.VpnGateway
                         this.CreateOrUpdateVpnGateway(this.ResourceGroupName, this.ParentResourceName, parentGateway, parentGateway.Tag);
 
                         var createdOrUpdatedVpnGateway = this.GetVpnGateway(this.ResourceGroupName, this.ParentResourceName);
-                        WriteObject(createdOrUpdatedVpnGateway.NatRules.Where(natRule => natRule.Name.Equals(this.Name, StringComparison.OrdinalIgnoreCase)).FirstOrDefault());
+                        WriteObject(createdOrUpdatedVpnGateway.NatRules.FirstOrDefault(natRule => natRule.Name.Equals(this.Name, StringComparison.OrdinalIgnoreCase)));
                     });
         }
     }
diff --git a/src/Network/Network/Cortex/VpnServerConfiguration/UpdateAzureRmVpnServerConfigurationCommand.cs b/src/Network/Network/Cortex/VpnServerConfiguration/UpdateAzureRmVpnServerConfigurationCommand.cs
index 769bfe0d5d..21901f4b88 100644
--- a/src/Network/Network/Cortex/VpnServerConfiguration/UpdateAzureRmVpnServerConfigurationCommand.cs
+++ b/src/Network/Network/Cortex/VpnServerConfiguration/UpdateAzureRmVpnServerConfigurationCommand.cs
@@ -1,4 +1,5 @@
-﻿// ----------------------------------------------------------------------------------
+﻿using System.Linq;
+// ----------------------------------------------------------------------------------
 //
 // Copyright Microsoft Corporation
 // Licensed under the Apache License, Version 2.0 (the "License");
@@ -346,12 +347,12 @@ namespace Microsoft.Azure.Commands.Network
             // VpnAuthenticationType = Radius related validations.
             if (vpnServerConfigurationToUpdate.VpnAuthenticationTypes.Contains(MNM.VpnAuthenticationType.Radius))
             {
-                if ((this.RadiusServerList != null && this.RadiusServerList.Count() > 0) && (this.RadiusServerAddress != null || this.RadiusServerSecret != null))
+                if ((this.RadiusServerList != null && this.RadiusServerList.Any()) && (this.RadiusServerAddress != null || this.RadiusServerSecret != null))
                 {
                     throw new ArgumentException("Cannot configure both singular radius server and multiple radius servers at the same time.");
                 }
 
-                if (RadiusServerList != null && this.RadiusServerList.Count() > 0)
+                if (RadiusServerList != null && this.RadiusServerList.Any())
                 {
                     vpnServerConfigurationToUpdate.RadiusServers = this.RadiusServerList.ToList();
                     vpnServerConfigurationToUpdate.RadiusServerAddress = null;
diff --git a/src/Network/Network/ExpressRouteCrossConnection/CrossConnectionPeering/AzureRMExpressRouteCrossConnectionPeeringBase.cs b/src/Network/Network/ExpressRouteCrossConnection/CrossConnectionPeering/AzureRMExpressRouteCrossConnectionPeeringBase.cs
index e565326349..e36d3c37eb 100644
--- a/src/Network/Network/ExpressRouteCrossConnection/CrossConnectionPeering/AzureRMExpressRouteCrossConnectionPeeringBase.cs
+++ b/src/Network/Network/ExpressRouteCrossConnection/CrossConnectionPeering/AzureRMExpressRouteCrossConnectionPeeringBase.cs
@@ -14,6 +14,7 @@
 
 using Microsoft.Azure.Commands.ResourceManager.Common.Tags;
 using Microsoft.Azure.Management.Network;
+using System.Linq;
 
 namespace Microsoft.Azure.Commands.Network
 {
@@ -125,7 +126,7 @@ namespace Microsoft.Azure.Commands.Network
 
         public void ConstructMicrosoftConfig(PSExpressRouteCrossConnectionPeering peering)
         {
-            if (MicrosoftConfigAdvertisedPublicPrefix != null && MicrosoftConfigAdvertisedPublicPrefix.Count() > 0)
+            if (MicrosoftConfigAdvertisedPublicPrefix != null && MicrosoftConfigAdvertisedPublicPrefix.Any())
             {
                 if (PeerAddressType == IPv6)
                 {
diff --git a/src/Network/Network/FirewallPolicy/ManagedRules/AzureApplicationGatewayFirewallPolicyManagedRules.cs b/src/Network/Network/FirewallPolicy/ManagedRules/AzureApplicationGatewayFirewallPolicyManagedRules.cs
index 6aab16238d..a842faf878 100644
--- a/src/Network/Network/FirewallPolicy/ManagedRules/AzureApplicationGatewayFirewallPolicyManagedRules.cs
+++ b/src/Network/Network/FirewallPolicy/ManagedRules/AzureApplicationGatewayFirewallPolicyManagedRules.cs
@@ -46,7 +46,7 @@ namespace Microsoft.Azure.Commands.Network
                 ManagedRuleSets = this.ManagedRuleSet?.ToList()
             };
 
-            if (this.ManagedRuleSet == null || this.ManagedRuleSet.Count() == 0)
+            if (this.ManagedRuleSet == null || !this.ManagedRuleSet.Any())
             {
                 managedRules.ManagedRuleSets = new List<PSApplicationGatewayFirewallPolicyManagedRuleSet>()
                 {
diff --git a/src/Network/Network/Generated/LoadBalancer/BackendAddressPool/AddAzureRmLoadBalancerBackendAddressPoolConfigCommand.cs b/src/Network/Network/Generated/LoadBalancer/BackendAddressPool/AddAzureRmLoadBalancerBackendAddressPoolConfigCommand.cs
index b610727f7d..33acd300b8 100644
--- a/src/Network/Network/Generated/LoadBalancer/BackendAddressPool/AddAzureRmLoadBalancerBackendAddressPoolConfigCommand.cs
+++ b/src/Network/Network/Generated/LoadBalancer/BackendAddressPool/AddAzureRmLoadBalancerBackendAddressPoolConfigCommand.cs
@@ -67,13 +67,7 @@ namespace Microsoft.Azure.Commands.Network
             var vBackendAddressPools = new PSBackendAddressPool();
 
             vBackendAddressPools.Name = this.Name;
-            var generatedId = string.Format(
-                "/subscriptions/{0}/resourceGroups/{1}/providers/Microsoft.Network/loadBalancers/{2}/{3}/{4}",
-                this.NetworkClient.NetworkManagementClient.SubscriptionId,
-                this.LoadBalancer.ResourceGroupName,
-                this.LoadBalancer.Name,
-                "BackendAddressPools",
-                this.Name);
+            var generatedId = $"/subscriptions/{this.NetworkClient.NetworkManagementClient.SubscriptionId}/resourceGroups/{this.LoadBalancer.ResourceGroupName}/providers/Microsoft.Network/loadBalancers/{this.LoadBalancer.Name}/{"BackendAddressPools"}/{this.Name}";
             vBackendAddressPools.Id = generatedId;
 
             this.LoadBalancer.BackendAddressPools.Add(vBackendAddressPools);
diff --git a/src/Network/Network/Generated/LoadBalancer/BackendAddressPool/NewAzureRmLoadBalancerBackendAddressPoolConfigCommand.cs b/src/Network/Network/Generated/LoadBalancer/BackendAddressPool/NewAzureRmLoadBalancerBackendAddressPoolConfigCommand.cs
index f1b1e6cc22..d453850960 100644
--- a/src/Network/Network/Generated/LoadBalancer/BackendAddressPool/NewAzureRmLoadBalancerBackendAddressPoolConfigCommand.cs
+++ b/src/Network/Network/Generated/LoadBalancer/BackendAddressPool/NewAzureRmLoadBalancerBackendAddressPoolConfigCommand.cs
@@ -48,13 +48,7 @@ namespace Microsoft.Azure.Commands.Network
             var vBackendAddressPools = new PSBackendAddressPool();
 
             vBackendAddressPools.Name = this.Name;
-            var generatedId = string.Format(
-                "/subscriptions/{0}/resourceGroups/{1}/providers/Microsoft.Network/loadBalancers/{2}/{3}/{4}",
-                this.NetworkClient.NetworkManagementClient.SubscriptionId,
-                Microsoft.Azure.Commands.Network.Properties.Resources.ResourceGroupNotSet,
-                Microsoft.Azure.Commands.Network.Properties.Resources.LoadBalancerNameNotSet,
-                "BackendAddressPools",
-                this.Name);
+            var generatedId = $"/subscriptions/{this.NetworkClient.NetworkManagementClient.SubscriptionId}/resourceGroups/{Microsoft.Azure.Commands.Network.Properties.Resources.ResourceGroupNotSet}/providers/Microsoft.Network/loadBalancers/{Microsoft.Azure.Commands.Network.Properties.Resources.LoadBalancerNameNotSet}/{"BackendAddressPools"}/{this.Name}";
             vBackendAddressPools.Id = generatedId;
 
             WriteObject(vBackendAddressPools, true);
diff --git a/src/Network/Network/Generated/LoadBalancer/FrontendIPConfiguration/AddAzureRmLoadBalancerFrontendIpConfigCommand.cs b/src/Network/Network/Generated/LoadBalancer/FrontendIPConfiguration/AddAzureRmLoadBalancerFrontendIpConfigCommand.cs
index 6ab1ca8c55..8bccb56bc4 100644
--- a/src/Network/Network/Generated/LoadBalancer/FrontendIPConfiguration/AddAzureRmLoadBalancerFrontendIpConfigCommand.cs
+++ b/src/Network/Network/Generated/LoadBalancer/FrontendIPConfiguration/AddAzureRmLoadBalancerFrontendIpConfigCommand.cs
@@ -208,13 +208,7 @@ namespace Microsoft.Azure.Commands.Network
                 }
                 vFrontendIpConfigurations.PublicIPPrefix.Id = this.PublicIpAddressPrefixId;
             }
-            var generatedId = string.Format(
-                "/subscriptions/{0}/resourceGroups/{1}/providers/Microsoft.Network/loadBalancers/{2}/{3}/{4}",
-                this.NetworkClient.NetworkManagementClient.SubscriptionId,
-                this.LoadBalancer.ResourceGroupName,
-                this.LoadBalancer.Name,
-                "FrontendIpConfigurations",
-                this.Name);
+            var generatedId = $"/subscriptions/{this.NetworkClient.NetworkManagementClient.SubscriptionId}/resourceGroups/{this.LoadBalancer.ResourceGroupName}/providers/Microsoft.Network/loadBalancers/{this.LoadBalancer.Name}/{"FrontendIpConfigurations"}/{this.Name}";
             vFrontendIpConfigurations.Id = generatedId;
 
             this.LoadBalancer.FrontendIpConfigurations.Add(vFrontendIpConfigurations);
diff --git a/src/Network/Network/Generated/LoadBalancer/FrontendIPConfiguration/NewAzureRmLoadBalancerFrontendIpConfigCommand.cs b/src/Network/Network/Generated/LoadBalancer/FrontendIPConfiguration/NewAzureRmLoadBalancerFrontendIpConfigCommand.cs
index a8f211c743..10b9bd6646 100644
--- a/src/Network/Network/Generated/LoadBalancer/FrontendIPConfiguration/NewAzureRmLoadBalancerFrontendIpConfigCommand.cs
+++ b/src/Network/Network/Generated/LoadBalancer/FrontendIPConfiguration/NewAzureRmLoadBalancerFrontendIpConfigCommand.cs
@@ -192,13 +192,7 @@ namespace Microsoft.Azure.Commands.Network
                 }
                 vFrontendIpConfigurations.PublicIPPrefix.Id = this.PublicIpAddressPrefixId;
             }
-            var generatedId = string.Format(
-                "/subscriptions/{0}/resourceGroups/{1}/providers/Microsoft.Network/loadBalancers/{2}/{3}/{4}",
-                this.NetworkClient.NetworkManagementClient.SubscriptionId,
-                Microsoft.Azure.Commands.Network.Properties.Resources.ResourceGroupNotSet,
-                Microsoft.Azure.Commands.Network.Properties.Resources.LoadBalancerNameNotSet,
-                "FrontendIpConfigurations",
-                this.Name);
+            var generatedId = $"/subscriptions/{this.NetworkClient.NetworkManagementClient.SubscriptionId}/resourceGroups/{Microsoft.Azure.Commands.Network.Properties.Resources.ResourceGroupNotSet}/providers/Microsoft.Network/loadBalancers/{Microsoft.Azure.Commands.Network.Properties.Resources.LoadBalancerNameNotSet}/{"FrontendIpConfigurations"}/{this.Name}";
             vFrontendIpConfigurations.Id = generatedId;
 
             WriteObject(vFrontendIpConfigurations, true);
diff --git a/src/Network/Network/Generated/LoadBalancer/InboundNatPool/AddAzureRmLoadBalancerInboundNatPoolConfigCommand.cs b/src/Network/Network/Generated/LoadBalancer/InboundNatPool/AddAzureRmLoadBalancerInboundNatPoolConfigCommand.cs
index fdcf5b5fb8..556e973efc 100644
--- a/src/Network/Network/Generated/LoadBalancer/InboundNatPool/AddAzureRmLoadBalancerInboundNatPoolConfigCommand.cs
+++ b/src/Network/Network/Generated/LoadBalancer/InboundNatPool/AddAzureRmLoadBalancerInboundNatPoolConfigCommand.cs
@@ -152,13 +152,7 @@ namespace Microsoft.Azure.Commands.Network
                 }
                 vInboundNatPools.FrontendIPConfiguration.Id = this.FrontendIpConfigurationId;
             }
-            var generatedId = string.Format(
-                "/subscriptions/{0}/resourceGroups/{1}/providers/Microsoft.Network/loadBalancers/{2}/{3}/{4}",
-                this.NetworkClient.NetworkManagementClient.SubscriptionId,
-                this.LoadBalancer.ResourceGroupName,
-                this.LoadBalancer.Name,
-                "InboundNatPools",
-                this.Name);
+            var generatedId = $"/subscriptions/{this.NetworkClient.NetworkManagementClient.SubscriptionId}/resourceGroups/{this.LoadBalancer.ResourceGroupName}/providers/Microsoft.Network/loadBalancers/{this.LoadBalancer.Name}/{"InboundNatPools"}/{this.Name}";
             vInboundNatPools.Id = generatedId;
 
             this.LoadBalancer.InboundNatPools.Add(vInboundNatPools);
diff --git a/src/Network/Network/Generated/LoadBalancer/InboundNatPool/NewAzureRmLoadBalancerInboundNatPoolConfigCommand.cs b/src/Network/Network/Generated/LoadBalancer/InboundNatPool/NewAzureRmLoadBalancerInboundNatPoolConfigCommand.cs
index 6ac6280fd6..deb0228fa1 100644
--- a/src/Network/Network/Generated/LoadBalancer/InboundNatPool/NewAzureRmLoadBalancerInboundNatPoolConfigCommand.cs
+++ b/src/Network/Network/Generated/LoadBalancer/InboundNatPool/NewAzureRmLoadBalancerInboundNatPoolConfigCommand.cs
@@ -132,13 +132,7 @@ namespace Microsoft.Azure.Commands.Network
                 }
                 vInboundNatPools.FrontendIPConfiguration.Id = this.FrontendIpConfigurationId;
             }
-            var generatedId = string.Format(
-                "/subscriptions/{0}/resourceGroups/{1}/providers/Microsoft.Network/loadBalancers/{2}/{3}/{4}",
-                this.NetworkClient.NetworkManagementClient.SubscriptionId,
-                Microsoft.Azure.Commands.Network.Properties.Resources.ResourceGroupNotSet,
-                Microsoft.Azure.Commands.Network.Properties.Resources.LoadBalancerNameNotSet,
-                "InboundNatPools",
-                this.Name);
+            var generatedId = $"/subscriptions/{this.NetworkClient.NetworkManagementClient.SubscriptionId}/resourceGroups/{Microsoft.Azure.Commands.Network.Properties.Resources.ResourceGroupNotSet}/providers/Microsoft.Network/loadBalancers/{Microsoft.Azure.Commands.Network.Properties.Resources.LoadBalancerNameNotSet}/{"InboundNatPools"}/{this.Name}";
             vInboundNatPools.Id = generatedId;
 
             WriteObject(vInboundNatPools, true);
diff --git a/src/Network/Network/Generated/LoadBalancer/InboundNatRule/AddAzureRmLoadBalancerInboundNatRuleConfigCommand.cs b/src/Network/Network/Generated/LoadBalancer/InboundNatRule/AddAzureRmLoadBalancerInboundNatRuleConfigCommand.cs
index 569d91f19f..24ccc3b819 100644
--- a/src/Network/Network/Generated/LoadBalancer/InboundNatRule/AddAzureRmLoadBalancerInboundNatRuleConfigCommand.cs
+++ b/src/Network/Network/Generated/LoadBalancer/InboundNatRule/AddAzureRmLoadBalancerInboundNatRuleConfigCommand.cs
@@ -145,13 +145,7 @@ namespace Microsoft.Azure.Commands.Network
                 }
                 vInboundNatRules.FrontendIPConfiguration.Id = this.FrontendIpConfigurationId;
             }
-            var generatedId = string.Format(
-                "/subscriptions/{0}/resourceGroups/{1}/providers/Microsoft.Network/loadBalancers/{2}/{3}/{4}",
-                this.NetworkClient.NetworkManagementClient.SubscriptionId,
-                this.LoadBalancer.ResourceGroupName,
-                this.LoadBalancer.Name,
-                "InboundNatRules",
-                this.Name);
+            var generatedId = $"/subscriptions/{this.NetworkClient.NetworkManagementClient.SubscriptionId}/resourceGroups/{this.LoadBalancer.ResourceGroupName}/providers/Microsoft.Network/loadBalancers/{this.LoadBalancer.Name}/{"InboundNatRules"}/{this.Name}";
             vInboundNatRules.Id = generatedId;
 
             this.LoadBalancer.InboundNatRules.Add(vInboundNatRules);
diff --git a/src/Network/Network/Generated/LoadBalancer/InboundNatRule/NewAzureRmLoadBalancerInboundNatRuleConfigCommand.cs b/src/Network/Network/Generated/LoadBalancer/InboundNatRule/NewAzureRmLoadBalancerInboundNatRuleConfigCommand.cs
index 0843493cbc..a46acfaa0e 100644
--- a/src/Network/Network/Generated/LoadBalancer/InboundNatRule/NewAzureRmLoadBalancerInboundNatRuleConfigCommand.cs
+++ b/src/Network/Network/Generated/LoadBalancer/InboundNatRule/NewAzureRmLoadBalancerInboundNatRuleConfigCommand.cs
@@ -125,13 +125,7 @@ namespace Microsoft.Azure.Commands.Network
                 }
                 vInboundNatRules.FrontendIPConfiguration.Id = this.FrontendIpConfigurationId;
             }
-            var generatedId = string.Format(
-                "/subscriptions/{0}/resourceGroups/{1}/providers/Microsoft.Network/loadBalancers/{2}/{3}/{4}",
-                this.NetworkClient.NetworkManagementClient.SubscriptionId,
-                Microsoft.Azure.Commands.Network.Properties.Resources.ResourceGroupNotSet,
-                Microsoft.Azure.Commands.Network.Properties.Resources.LoadBalancerNameNotSet,
-                "InboundNatRules",
-                this.Name);
+            var generatedId = $"/subscriptions/{this.NetworkClient.NetworkManagementClient.SubscriptionId}/resourceGroups/{Microsoft.Azure.Commands.Network.Properties.Resources.ResourceGroupNotSet}/providers/Microsoft.Network/loadBalancers/{Microsoft.Azure.Commands.Network.Properties.Resources.LoadBalancerNameNotSet}/{"InboundNatRules"}/{this.Name}";
             vInboundNatRules.Id = generatedId;
 
             WriteObject(vInboundNatRules, true);
diff --git a/src/Network/Network/Generated/LoadBalancer/LoadBalancerRule/AddAzureRmLoadBalancerRuleConfigCommand.cs b/src/Network/Network/Generated/LoadBalancer/LoadBalancerRule/AddAzureRmLoadBalancerRuleConfigCommand.cs
index f46861c592..57a85e03e8 100644
--- a/src/Network/Network/Generated/LoadBalancer/LoadBalancerRule/AddAzureRmLoadBalancerRuleConfigCommand.cs
+++ b/src/Network/Network/Generated/LoadBalancer/LoadBalancerRule/AddAzureRmLoadBalancerRuleConfigCommand.cs
@@ -217,13 +217,7 @@ namespace Microsoft.Azure.Commands.Network
                 }
                 vLoadBalancingRules.Probe.Id = this.ProbeId;
             }
-            var generatedId = string.Format(
-                "/subscriptions/{0}/resourceGroups/{1}/providers/Microsoft.Network/loadBalancers/{2}/{3}/{4}",
-                this.NetworkClient.NetworkManagementClient.SubscriptionId,
-                this.LoadBalancer.ResourceGroupName,
-                this.LoadBalancer.Name,
-                "LoadBalancingRules",
-                this.Name);
+            var generatedId = $"/subscriptions/{this.NetworkClient.NetworkManagementClient.SubscriptionId}/resourceGroups/{this.LoadBalancer.ResourceGroupName}/providers/Microsoft.Network/loadBalancers/{this.LoadBalancer.Name}/{"LoadBalancingRules"}/{this.Name}";
             vLoadBalancingRules.Id = generatedId;
 
             this.LoadBalancer.LoadBalancingRules.Add(vLoadBalancingRules);
diff --git a/src/Network/Network/Generated/LoadBalancer/LoadBalancerRule/NewAzureRmLoadBalancerRuleConfigCommand.cs b/src/Network/Network/Generated/LoadBalancer/LoadBalancerRule/NewAzureRmLoadBalancerRuleConfigCommand.cs
index a165cef446..8ba2004866 100644
--- a/src/Network/Network/Generated/LoadBalancer/LoadBalancerRule/NewAzureRmLoadBalancerRuleConfigCommand.cs
+++ b/src/Network/Network/Generated/LoadBalancer/LoadBalancerRule/NewAzureRmLoadBalancerRuleConfigCommand.cs
@@ -197,13 +197,7 @@ namespace Microsoft.Azure.Commands.Network
                 }
                 vLoadBalancingRules.Probe.Id = this.ProbeId;
             }
-            var generatedId = string.Format(
-                "/subscriptions/{0}/resourceGroups/{1}/providers/Microsoft.Network/loadBalancers/{2}/{3}/{4}",
-                this.NetworkClient.NetworkManagementClient.SubscriptionId,
-                Microsoft.Azure.Commands.Network.Properties.Resources.ResourceGroupNotSet,
-                Microsoft.Azure.Commands.Network.Properties.Resources.LoadBalancerNameNotSet,
-                "LoadBalancingRules",
-                this.Name);
+            var generatedId = $"/subscriptions/{this.NetworkClient.NetworkManagementClient.SubscriptionId}/resourceGroups/{Microsoft.Azure.Commands.Network.Properties.Resources.ResourceGroupNotSet}/providers/Microsoft.Network/loadBalancers/{Microsoft.Azure.Commands.Network.Properties.Resources.LoadBalancerNameNotSet}/{"LoadBalancingRules"}/{this.Name}";
             vLoadBalancingRules.Id = generatedId;
 
             WriteObject(vLoadBalancingRules, true);
diff --git a/src/Network/Network/Generated/LoadBalancer/OutboundRule/AddAzureRmLoadBalancerOutboundRuleConfigCommand.cs b/src/Network/Network/Generated/LoadBalancer/OutboundRule/AddAzureRmLoadBalancerOutboundRuleConfigCommand.cs
index ae40a9cf8d..98137964b9 100644
--- a/src/Network/Network/Generated/LoadBalancer/OutboundRule/AddAzureRmLoadBalancerOutboundRuleConfigCommand.cs
+++ b/src/Network/Network/Generated/LoadBalancer/OutboundRule/AddAzureRmLoadBalancerOutboundRuleConfigCommand.cs
@@ -150,13 +150,7 @@ namespace Microsoft.Azure.Commands.Network
                 }
                 vOutboundRules.BackendAddressPool.Id = this.BackendAddressPoolId;
             }
-            var generatedId = string.Format(
-                "/subscriptions/{0}/resourceGroups/{1}/providers/Microsoft.Network/loadBalancers/{2}/{3}/{4}",
-                this.NetworkClient.NetworkManagementClient.SubscriptionId,
-                this.LoadBalancer.ResourceGroupName,
-                this.LoadBalancer.Name,
-                "OutboundRules",
-                this.Name);
+            var generatedId = $"/subscriptions/{this.NetworkClient.NetworkManagementClient.SubscriptionId}/resourceGroups/{this.LoadBalancer.ResourceGroupName}/providers/Microsoft.Network/loadBalancers/{this.LoadBalancer.Name}/{"OutboundRules"}/{this.Name}";
             vOutboundRules.Id = generatedId;
 
             this.LoadBalancer.OutboundRules.Add(vOutboundRules);
diff --git a/src/Network/Network/Generated/LoadBalancer/OutboundRule/NewAzureRmLoadBalancerOutboundRuleConfigCommand.cs b/src/Network/Network/Generated/LoadBalancer/OutboundRule/NewAzureRmLoadBalancerOutboundRuleConfigCommand.cs
index 3df7479449..aade07d5c9 100644
--- a/src/Network/Network/Generated/LoadBalancer/OutboundRule/NewAzureRmLoadBalancerOutboundRuleConfigCommand.cs
+++ b/src/Network/Network/Generated/LoadBalancer/OutboundRule/NewAzureRmLoadBalancerOutboundRuleConfigCommand.cs
@@ -130,13 +130,7 @@ namespace Microsoft.Azure.Commands.Network
                 }
                 vOutboundRules.BackendAddressPool.Id = this.BackendAddressPoolId;
             }
-            var generatedId = string.Format(
-                "/subscriptions/{0}/resourceGroups/{1}/providers/Microsoft.Network/loadBalancers/{2}/{3}/{4}",
-                this.NetworkClient.NetworkManagementClient.SubscriptionId,
-                Microsoft.Azure.Commands.Network.Properties.Resources.ResourceGroupNotSet,
-                Microsoft.Azure.Commands.Network.Properties.Resources.LoadBalancerNameNotSet,
-                "OutboundRules",
-                this.Name);
+            var generatedId = $"/subscriptions/{this.NetworkClient.NetworkManagementClient.SubscriptionId}/resourceGroups/{Microsoft.Azure.Commands.Network.Properties.Resources.ResourceGroupNotSet}/providers/Microsoft.Network/loadBalancers/{Microsoft.Azure.Commands.Network.Properties.Resources.LoadBalancerNameNotSet}/{"OutboundRules"}/{this.Name}";
             vOutboundRules.Id = generatedId;
 
             WriteObject(vOutboundRules, true);
diff --git a/src/Network/Network/Generated/LoadBalancer/Probe/AddAzureRmLoadBalancerProbeConfigCommand.cs b/src/Network/Network/Generated/LoadBalancer/Probe/AddAzureRmLoadBalancerProbeConfigCommand.cs
index 781dfcd1d9..0d1bd60e4b 100644
--- a/src/Network/Network/Generated/LoadBalancer/Probe/AddAzureRmLoadBalancerProbeConfigCommand.cs
+++ b/src/Network/Network/Generated/LoadBalancer/Probe/AddAzureRmLoadBalancerProbeConfigCommand.cs
@@ -109,13 +109,7 @@ namespace Microsoft.Azure.Commands.Network
             vProbes.NumberOfProbes = this.ProbeCount;
             vProbes.RequestPath = this.RequestPath;
             vProbes.Name = this.Name;
-            var generatedId = string.Format(
-                "/subscriptions/{0}/resourceGroups/{1}/providers/Microsoft.Network/loadBalancers/{2}/{3}/{4}",
-                this.NetworkClient.NetworkManagementClient.SubscriptionId,
-                this.LoadBalancer.ResourceGroupName,
-                this.LoadBalancer.Name,
-                "Probes",
-                this.Name);
+            var generatedId = $"/subscriptions/{this.NetworkClient.NetworkManagementClient.SubscriptionId}/resourceGroups/{this.LoadBalancer.ResourceGroupName}/providers/Microsoft.Network/loadBalancers/{this.LoadBalancer.Name}/{"Probes"}/{this.Name}";
             vProbes.Id = generatedId;
 
             this.LoadBalancer.Probes.Add(vProbes);
diff --git a/src/Network/Network/Generated/LoadBalancer/Probe/NewAzureRmLoadBalancerProbeConfigCommand.cs b/src/Network/Network/Generated/LoadBalancer/Probe/NewAzureRmLoadBalancerProbeConfigCommand.cs
index 11c6a42d7f..c7b5ff24b6 100644
--- a/src/Network/Network/Generated/LoadBalancer/Probe/NewAzureRmLoadBalancerProbeConfigCommand.cs
+++ b/src/Network/Network/Generated/LoadBalancer/Probe/NewAzureRmLoadBalancerProbeConfigCommand.cs
@@ -89,13 +89,7 @@ namespace Microsoft.Azure.Commands.Network
             vProbes.NumberOfProbes = this.ProbeCount;
             vProbes.RequestPath = this.RequestPath;
             vProbes.Name = this.Name;
-            var generatedId = string.Format(
-                "/subscriptions/{0}/resourceGroups/{1}/providers/Microsoft.Network/loadBalancers/{2}/{3}/{4}",
-                this.NetworkClient.NetworkManagementClient.SubscriptionId,
-                Microsoft.Azure.Commands.Network.Properties.Resources.ResourceGroupNotSet,
-                Microsoft.Azure.Commands.Network.Properties.Resources.LoadBalancerNameNotSet,
-                "Probes",
-                this.Name);
+            var generatedId = $"/subscriptions/{this.NetworkClient.NetworkManagementClient.SubscriptionId}/resourceGroups/{Microsoft.Azure.Commands.Network.Properties.Resources.ResourceGroupNotSet}/providers/Microsoft.Network/loadBalancers/{Microsoft.Azure.Commands.Network.Properties.Resources.LoadBalancerNameNotSet}/{"Probes"}/{this.Name}";
             vProbes.Id = generatedId;
 
             WriteObject(vProbes, true);
diff --git a/src/Network/Network/Models/AzureFirewall/PSAzureFirewall.cs b/src/Network/Network/Models/AzureFirewall/PSAzureFirewall.cs
index 5bc5d89ef7..ad7f842639 100644
--- a/src/Network/Network/Models/AzureFirewall/PSAzureFirewall.cs
+++ b/src/Network/Network/Models/AzureFirewall/PSAzureFirewall.cs
@@ -137,7 +137,7 @@ namespace Microsoft.Azure.Commands.Network.Models
                 throw new ArgumentNullException(nameof(virtualNetwork), "Virtual Network cannot be null!");
             }
 
-            if (publicIpAddresses == null || publicIpAddresses.Count() == 0)
+            if (publicIpAddresses == null || !publicIpAddresses.Any())
             {
                 throw new ArgumentNullException(nameof(publicIpAddresses), "Public IP Addresses cannot be null or empty!");
             }
@@ -384,7 +384,7 @@ namespace Microsoft.Azure.Commands.Network.Models
             IPAddress ipVal;
             if (!IPAddress.TryParse(ipAddress, out ipVal) || ipVal.AddressFamily != System.Net.Sockets.AddressFamily.InterNetwork)
             {
-                throw new PSArgumentException(String.Format("\'{0}\' is not a valid private range ip address", ipAddress));
+                throw new PSArgumentException($"\'{ipAddress}\' is not a valid private range ip address");
             }
         }
 
@@ -392,7 +392,7 @@ namespace Microsoft.Azure.Commands.Network.Models
         {
             var split = ipAddress.Split('/');
             if (split.Length != 2)
-                throw new PSArgumentException(String.Format("\'{0}\' is not a valid private range ip address", ipAddress));
+                throw new PSArgumentException($"\'{ipAddress}\' is not a valid private range ip address");
 
             // validate the ip
             ValidateSingleIpAddress(split[0]);
@@ -400,14 +400,14 @@ namespace Microsoft.Azure.Commands.Network.Models
             // validate mask
             var bit = 0;
             if (!Int32.TryParse(split[1], out bit) || bit < 0 || bit > 32)
-                throw new PSArgumentException(String.Format("\'{0}\' is not a valid private range ip address, subnet mask should between 0 and 32", ipAddress));
+                throw new PSArgumentException($"\'{ipAddress}\' is not a valid private range ip address, subnet mask should between 0 and 32");
 
             // validated that unmasked bits are 0
             var splittedIp = split[0].Split('.');
             var ip = Int32.Parse(splittedIp[0]) << 24;
             ip = ip + Int32.Parse(splittedIp[1]) << 16 + Int32.Parse(splittedIp[2]) << 8 + Int32.Parse(splittedIp[3]);
             if (ip << bit != 0)
-                throw new PSArgumentException(String.Format("\'{0}\' is not a valid private range ip address, bits not covered by subnet mask should be all 0", ipAddress));
+                throw new PSArgumentException($"\'{ipAddress}\' is not a valid private range ip address, bits not covered by subnet mask should be all 0");
         }
 
         #endregion
@@ -436,8 +436,7 @@ namespace Microsoft.Azure.Commands.Network.Models
                 {
                     if (rule?.DestinationFqdns != null && rule.DestinationFqdns.Any())
                     {
-                        throw new PSArgumentException(string.Format("Found FQDNs {0} in network rule collection {1} rule {2} without DNS proxy being enabled or requirement setting disabled",
-                            rule.DestinationFqdns, netRuleCollection.Name, rule.Name));
+                        throw new PSArgumentException($"Found FQDNs {rule.DestinationFqdns} in network rule collection {netRuleCollection.Name} rule {rule.Name} without DNS proxy being enabled or requirement setting disabled");
                     }
                 }
             }
diff --git a/src/Network/Network/Models/AzureFirewall/PSAzureFirewallThreatIntelWhitelist.cs b/src/Network/Network/Models/AzureFirewall/PSAzureFirewallThreatIntelWhitelist.cs
index 291f4635f0..34c5bfbb02 100644
--- a/src/Network/Network/Models/AzureFirewall/PSAzureFirewallThreatIntelWhitelist.cs
+++ b/src/Network/Network/Models/AzureFirewall/PSAzureFirewallThreatIntelWhitelist.cs
@@ -58,7 +58,7 @@ namespace Microsoft.Azure.Commands.Network.Models
             {
                 if (!matchingRegEx.IsMatch(fqdn))
                 {
-                    throw new PSArgumentException(String.Format("\'{0}\' is not a valid threat intel whitelist FQDN", fqdn));
+                    throw new PSArgumentException($"\'{fqdn}\' is not a valid threat intel whitelist FQDN");
                 }
             }
         }
@@ -73,7 +73,7 @@ namespace Microsoft.Azure.Commands.Network.Models
                 IPAddress ipVal;
                 if (!IPAddress.TryParse(ip, out ipVal) || ipVal.AddressFamily != System.Net.Sockets.AddressFamily.InterNetwork)
                 {
-                    throw new PSArgumentException(String.Format("\'{0}\' is not a valid threat intel whitelist Ip Address", ip));
+                    throw new PSArgumentException($"\'{ip}\' is not a valid threat intel whitelist Ip Address");
                 }
             }
         }
diff --git a/src/Network/Network/Models/AzureFirewallPolicy/PSAzureFirewallPolicyThreatIntelWhitelist.cs b/src/Network/Network/Models/AzureFirewallPolicy/PSAzureFirewallPolicyThreatIntelWhitelist.cs
index 7900bf0465..ff595f5c52 100644
--- a/src/Network/Network/Models/AzureFirewallPolicy/PSAzureFirewallPolicyThreatIntelWhitelist.cs
+++ b/src/Network/Network/Models/AzureFirewallPolicy/PSAzureFirewallPolicyThreatIntelWhitelist.cs
@@ -58,7 +58,7 @@ namespace Microsoft.Azure.Commands.Network.Models
             {
                 if (!matchingRegEx.IsMatch(fqdn))
                 {
-                    throw new PSArgumentException(String.Format("\'{0}\' is not a valid threat intel whitelist FQDN", fqdn));
+                    throw new PSArgumentException($"\'{fqdn}\' is not a valid threat intel whitelist FQDN");
                 }
             }
         }
@@ -73,7 +73,7 @@ namespace Microsoft.Azure.Commands.Network.Models
                 IPAddress ipVal;
                 if (!IPAddress.TryParse(ip, out ipVal) || ipVal.AddressFamily != System.Net.Sockets.AddressFamily.InterNetwork)
                 {
-                    throw new PSArgumentException(String.Format("\'{0}\' is not a valid threat intel whitelist Ip Address", ip));
+                    throw new PSArgumentException($"\'{ip}\' is not a valid threat intel whitelist Ip Address");
                 }
             }
         }
diff --git a/src/Network/Network/Models/PSTrafficAnalyticsProperties.cs b/src/Network/Network/Models/PSTrafficAnalyticsProperties.cs
index 31e5241f4e..0f7494865b 100644
--- a/src/Network/Network/Models/PSTrafficAnalyticsProperties.cs
+++ b/src/Network/Network/Models/PSTrafficAnalyticsProperties.cs
@@ -42,10 +42,7 @@ namespace Microsoft.Azure.Commands.Network.Models
             {
                 throw new ValidationException(ValidationRules.CannotBeNull, "NetworkWatcherFlowAnalyticsConfiguration");
             }
-            if (NetworkWatcherFlowAnalyticsConfiguration != null)
-            {
-                NetworkWatcherFlowAnalyticsConfiguration.Validate();
-            }
+            NetworkWatcherFlowAnalyticsConfiguration?.Validate();
         }
     }
 }
diff --git a/src/Network/Network/NetworkProfile/ContainerNetworkInterfaceConfiguration/NewAzureNetworkProfileContainerNetworkInterfaceConfigCommand.cs b/src/Network/Network/NetworkProfile/ContainerNetworkInterfaceConfiguration/NewAzureNetworkProfileContainerNetworkInterfaceConfigCommand.cs
index 94c939c446..6c5d5e6352 100644
--- a/src/Network/Network/NetworkProfile/ContainerNetworkInterfaceConfiguration/NewAzureNetworkProfileContainerNetworkInterfaceConfigCommand.cs
+++ b/src/Network/Network/NetworkProfile/ContainerNetworkInterfaceConfiguration/NewAzureNetworkProfileContainerNetworkInterfaceConfigCommand.cs
@@ -34,13 +34,7 @@ namespace Microsoft.Azure.Commands.Network
             vContainerNetworkInterfaceConfigurations.IpConfigurations = this.IpConfiguration == null ? 
                 new List<PSIPConfigurationProfile>() : 
                 new List<PSIPConfigurationProfile>(this.IpConfiguration);
-            var generatedId = string.Format(
-                "/subscriptions/{0}/resourceGroups/{1}/providers/Microsoft.Network/networkProfiles/{2}/{3}/{4}",
-                this.NetworkClient.NetworkManagementClient.SubscriptionId,
-                Microsoft.Azure.Commands.Network.Properties.Resources.ResourceGroupNotSet,
-                Microsoft.Azure.Commands.Network.Properties.Resources.NetworkProfileNameNotSet,
-                "ContainerNetworkInterfaceConfigurations",
-                this.Name);
+            var generatedId = $"/subscriptions/{this.NetworkClient.NetworkManagementClient.SubscriptionId}/resourceGroups/{Microsoft.Azure.Commands.Network.Properties.Resources.ResourceGroupNotSet}/providers/Microsoft.Network/networkProfiles/{Microsoft.Azure.Commands.Network.Properties.Resources.NetworkProfileNameNotSet}/{"ContainerNetworkInterfaceConfigurations"}/{this.Name}";
             vContainerNetworkInterfaceConfigurations.Id = generatedId;
 
             WriteObject(vContainerNetworkInterfaceConfigurations, true);
diff --git a/src/Network/Network/NetworkProfile/IpConfigurationProfile/NewAzureNetworkProfileContainerNetworkInterfaceConfigIpConfigCommand.cs b/src/Network/Network/NetworkProfile/IpConfigurationProfile/NewAzureNetworkProfileContainerNetworkInterfaceConfigIpConfigCommand.cs
index 8bf8046c85..2f8fed31c2 100644
--- a/src/Network/Network/NetworkProfile/IpConfigurationProfile/NewAzureNetworkProfileContainerNetworkInterfaceConfigIpConfigCommand.cs
+++ b/src/Network/Network/NetworkProfile/IpConfigurationProfile/NewAzureNetworkProfileContainerNetworkInterfaceConfigIpConfigCommand.cs
@@ -44,15 +44,7 @@ namespace Microsoft.Azure.Commands.Network
             vContainerNetworkInterfaceConfigurationIpConfigurationProfiles.Name = this.Name;
             vContainerNetworkInterfaceConfigurationIpConfigurationProfiles.Subnet = this.Subnet;
 
-            var generatedId = string.Format(
-                "/subscriptions/{0}/resourceGroups/{1}/providers/Microsoft.Network/networkProfiles/{2}/{3}/{4}/{5}/{6}",
-                this.NetworkClient.NetworkManagementClient.SubscriptionId,
-                Microsoft.Azure.Commands.Network.Properties.Resources.ResourceGroupNotSet,
-                Microsoft.Azure.Commands.Network.Properties.Resources.NetworkProfileNameNotSet,
-                "containerNetworkInterfaceConfigurations",
-                Microsoft.Azure.Commands.Network.Properties.Resources.ContainerNetworkInterfaceConfigurationNameNotSet,
-                "ipConfigurations",
-                this.Name);
+            var generatedId = $"/subscriptions/{this.NetworkClient.NetworkManagementClient.SubscriptionId}/resourceGroups/{Microsoft.Azure.Commands.Network.Properties.Resources.ResourceGroupNotSet}/providers/Microsoft.Network/networkProfiles/{Microsoft.Azure.Commands.Network.Properties.Resources.NetworkProfileNameNotSet}/{"containerNetworkInterfaceConfigurations"}/{Microsoft.Azure.Commands.Network.Properties.Resources.ContainerNetworkInterfaceConfigurationNameNotSet}/{"ipConfigurations"}/{this.Name}";
             vContainerNetworkInterfaceConfigurationIpConfigurationProfiles.Id = generatedId;
 
             WriteObject(vContainerNetworkInterfaceConfigurationIpConfigurationProfiles, true);
diff --git a/src/Network/Network/NetworkWatcher/ConnectionMonitor/ConnectionMonitorBaseCmdlet.cs b/src/Network/Network/NetworkWatcher/ConnectionMonitor/ConnectionMonitorBaseCmdlet.cs
index 774f403938..23e23fef25 100644
--- a/src/Network/Network/NetworkWatcher/ConnectionMonitor/ConnectionMonitorBaseCmdlet.cs
+++ b/src/Network/Network/NetworkWatcher/ConnectionMonitor/ConnectionMonitorBaseCmdlet.cs
@@ -646,7 +646,7 @@ namespace Microsoft.Azure.Commands.Network
                     };
                 }
 
-                if (connectionMonitor.TestConfigurations.Count(x => x.Name == cmTestConfiguration.Name) == 0)
+                if (!connectionMonitor.TestConfigurations.Any(x => x.Name == cmTestConfiguration.Name))
                 {
                     connectionMonitor.TestConfigurations.Add(cmTestConfiguration);
                 }
@@ -963,7 +963,7 @@ namespace Microsoft.Azure.Commands.Network
                     }
                 }
 
-                if (connectionMonitor.Endpoints.Count(x => x.Name == sourceEndpoint.Name) == 0)
+                if (!connectionMonitor.Endpoints.Any(x => x.Name == sourceEndpoint.Name))
                 {
                     connectionMonitor.Endpoints.Add(cmSourceEndpoint);
                 }
@@ -1041,7 +1041,7 @@ namespace Microsoft.Azure.Commands.Network
                     }
                 }
 
-                if (connectionMonitor.Endpoints.Count(x => x.Name == destinationEndpoint.Name) == 0)
+                if (!connectionMonitor.Endpoints.Any(x => x.Name == destinationEndpoint.Name))
                 {
                     connectionMonitor.Endpoints.Add(cmDestinationEndpoint);
                 }
diff --git a/src/Network/Network/PrivateLinkService/Models/PrivateEndpointConnection.cs b/src/Network/Network/PrivateLinkService/Models/PrivateEndpointConnection.cs
index 0233073711..0d455d2864 100644
--- a/src/Network/Network/PrivateLinkService/Models/PrivateEndpointConnection.cs
+++ b/src/Network/Network/PrivateLinkService/Models/PrivateEndpointConnection.cs
@@ -89,10 +89,7 @@ namespace Microsoft.Azure.Commands.Network.PrivateLinkService.Models
         /// </exception>
         public virtual void Validate()
         {
-            if (PrivateLinkServiceConnectionState != null)
-            {
-                PrivateLinkServiceConnectionState.Validate();
-            }
+            PrivateLinkServiceConnectionState?.Validate();
         }
     }
 }
diff --git a/src/Network/Network/VirtualNetworkGateway/ChildResourceHelp.cs b/src/Network/Network/VirtualNetworkGateway/ChildResourceHelp.cs
index 48cfb8de84..dac1ea7807 100644
--- a/src/Network/Network/VirtualNetworkGateway/ChildResourceHelp.cs
+++ b/src/Network/Network/VirtualNetworkGateway/ChildResourceHelp.cs
@@ -69,7 +69,7 @@ namespace Microsoft.Azure.Commands.Network
             startIndex--;
             string orignalString = id.Substring(startIndex, endIndex - startIndex + 1);
 
-            return id.Replace(orignalString, string.Format("/{0}/", resourceValue));
+            return id.Replace(orignalString, $"/{resourceValue}/");
         }
 
         public static void NormalizeChildResourcesId(PSVirtualNetworkGateway virtualNetworkGateway)
diff --git a/src/Network/Network/VirtualNetworkGateway/NewAzureVpnClientConfigurationCommand.cs b/src/Network/Network/VirtualNetworkGateway/NewAzureVpnClientConfigurationCommand.cs
index 0087ae4394..5fcbee33e2 100644
--- a/src/Network/Network/VirtualNetworkGateway/NewAzureVpnClientConfigurationCommand.cs
+++ b/src/Network/Network/VirtualNetworkGateway/NewAzureVpnClientConfigurationCommand.cs
@@ -79,7 +79,7 @@ namespace Microsoft.Azure.Commands.Network
         public override void Execute()
         {
             base.Execute();
-            string shouldProcessMessage = string.Format("Execute AzureRmVpnClientConfiguration for ResourceGroupName {0} VirtualNetworkGateway {1}", ResourceGroupName, Name);
+            string shouldProcessMessage = $"Execute AzureRmVpnClientConfiguration for ResourceGroupName {ResourceGroupName} VirtualNetworkGateway {Name}";
             if (ShouldProcess(shouldProcessMessage, VerbsCommon.New))
             {
                 PSVpnClientParameters vpnClientParams = new PSVpnClientParameters();
diff --git a/src/Network/Network/VirtualNetworkGateway/SetAzureVpnClientIpsecParametersCommand.cs b/src/Network/Network/VirtualNetworkGateway/SetAzureVpnClientIpsecParametersCommand.cs
index 5ff6ea9c36..b9d97f704b 100644
--- a/src/Network/Network/VirtualNetworkGateway/SetAzureVpnClientIpsecParametersCommand.cs
+++ b/src/Network/Network/VirtualNetworkGateway/SetAzureVpnClientIpsecParametersCommand.cs
@@ -87,7 +87,7 @@ namespace Microsoft.Azure.Commands.Network
             // Map to the sdk object
             var vpnClientIPsecParametersModel = NetworkResourceManagerProfile.Mapper.Map<MNM.VpnClientIPsecParameters>(this.VpnClientIPsecParameter);
 
-            string shouldProcessMessage = string.Format("Execute Set-AzVpnClientIpsecParameters for ResourceGroupName {0} VirtualNetworkGateway {1}", this.ResourceGroupName, this.VirtualNetworkGatewayName);
+            string shouldProcessMessage = $"Execute Set-AzVpnClientIpsecParameters for ResourceGroupName {this.ResourceGroupName} VirtualNetworkGateway {this.VirtualNetworkGatewayName}";
             if (ShouldProcess(shouldProcessMessage, VerbsCommon.Set))
             {
                 var vpnClientIpsecParameters = this.VirtualNetworkGatewayClient.SetVpnclientIpsecParameters(this.ResourceGroupName, this.VirtualNetworkGatewayName, vpnClientIPsecParametersModel);
diff --git a/src/Network/Network/VirtualNetworkGateway/UpdateAzureVirtualNetworkGatewayCommand.cs b/src/Network/Network/VirtualNetworkGateway/UpdateAzureVirtualNetworkGatewayCommand.cs
index 2572cb92c0..edffe567a9 100644
--- a/src/Network/Network/VirtualNetworkGateway/UpdateAzureVirtualNetworkGatewayCommand.cs
+++ b/src/Network/Network/VirtualNetworkGateway/UpdateAzureVirtualNetworkGatewayCommand.cs
@@ -427,7 +427,7 @@ namespace Microsoft.Azure.Commands.Network
                 TagsConversionHelper.CreateTagDictionary(this.Tag, validate: true) :
                 TagsConversionHelper.CreateTagDictionary(this.VirtualNetworkGateway.Tag, validate: true);
 
-            string shouldProcessMessage = string.Format("Execute AzureRmVirtualNetworkGateway for ResourceGroupName {0} VirtualNetworkGateway {1}", this.VirtualNetworkGateway.ResourceGroupName, this.VirtualNetworkGateway.Name);
+            string shouldProcessMessage = $"Execute AzureRmVirtualNetworkGateway for ResourceGroupName {this.VirtualNetworkGateway.ResourceGroupName} VirtualNetworkGateway {this.VirtualNetworkGateway.Name}";
             if (ShouldProcess(shouldProcessMessage, VerbsCommon.Set))
             {
                 this.VirtualNetworkGatewayClient.CreateOrUpdate(this.VirtualNetworkGateway.ResourceGroupName,
diff --git a/src/NotificationHubs/NotificationHubs/NotificationHubsManagementClient.cs b/src/NotificationHubs/NotificationHubs/NotificationHubsManagementClient.cs
index 810be4794c..7fd56e0a7f 100644
--- a/src/NotificationHubs/NotificationHubs/NotificationHubsManagementClient.cs
+++ b/src/NotificationHubs/NotificationHubs/NotificationHubsManagementClient.cs
@@ -113,7 +113,7 @@ namespace Microsoft.Azure.Commands.NotificationHubs
                 parameter.Critical = critical;
             }
 
-            if (tags != null && tags.Count() > 0)
+            if (tags != null && tags.Any())
             {
                 parameter.Tags = new Dictionary<string, string>(tags);
             }
diff --git a/src/OperationalInsights/OperationalInsights/Client/OperationalInsightsClient.Clusters.cs b/src/OperationalInsights/OperationalInsights/Client/OperationalInsightsClient.Clusters.cs
index 75e1831e85..25da21e692 100644
--- a/src/OperationalInsights/OperationalInsights/Client/OperationalInsightsClient.Clusters.cs
+++ b/src/OperationalInsights/OperationalInsights/Client/OperationalInsightsClient.Clusters.cs
@@ -69,7 +69,7 @@ namespace Microsoft.Azure.Commands.OperationalInsights.Client
 
             if (existingCluster != null)
             {
-                throw new PSInvalidOperationException(string.Format("cluster: '{0}' already exists in '{1}'. Please use Update-AzOperationalInsightsCluster for updating.", clusterName, resourceGroupName));
+                throw new PSInvalidOperationException($"cluster: '{clusterName}' already exists in '{resourceGroupName}'. Please use Update-AzOperationalInsightsCluster for updating.");
             }
 
             return new PSCluster(this.OperationalInsightsManagementClient.Clusters.CreateOrUpdate(resourceGroupName, clusterName, parameters.getCluster()));
diff --git a/src/OperationalInsights/OperationalInsights/Client/OperationalInsightsClient.DataSources.cs b/src/OperationalInsights/OperationalInsights/Client/OperationalInsightsClient.DataSources.cs
index dc40099a10..3b28f109ee 100644
--- a/src/OperationalInsights/OperationalInsights/Client/OperationalInsightsClient.DataSources.cs
+++ b/src/OperationalInsights/OperationalInsights/Client/OperationalInsightsClient.DataSources.cs
@@ -47,10 +47,7 @@ namespace Microsoft.Azure.Commands.OperationalInsights.Client
 
             while (null != response)
             {
-                if (response != null)
-                {
-                    response.ForEach(ds => dataSources.Add(new PSDataSource(ds, resourceGroupName, workspaceName)));
-                }
+                response?.ForEach(ds => dataSources.Add(new PSDataSource(ds, resourceGroupName, workspaceName)));
                 if (!string.IsNullOrEmpty(response.NextPageLink))
                 {
                     response = OperationalInsightsManagementClient.DataSources.ListByWorkspaceNext(response.NextPageLink);
diff --git a/src/OperationalInsights/OperationalInsights/Client/OperationalInsightsClient.Search.cs b/src/OperationalInsights/OperationalInsights/Client/OperationalInsightsClient.Search.cs
index 9f07807ca8..4291b53a50 100644
--- a/src/OperationalInsights/OperationalInsights/Client/OperationalInsightsClient.Search.cs
+++ b/src/OperationalInsights/OperationalInsights/Client/OperationalInsightsClient.Search.cs
@@ -70,7 +70,7 @@ namespace Microsoft.Azure.Commands.OperationalInsights.Client
             HttpStatusCode status = HttpStatusCode.Ambiguous;
             Action createSavedSearch = () =>
             {
-                if (ETag != null && ETag != "")
+                if (!string.IsNullOrEmpty(ETag))
                 {
                     properties.ETag = ETag;
                 }
@@ -80,7 +80,7 @@ namespace Microsoft.Azure.Commands.OperationalInsights.Client
 
             Action updateSavedSearch = () =>
             {
-                if (ETag != null && ETag != "")
+                if (!string.IsNullOrEmpty(ETag))
                 {
                     properties.ETag = ETag;
                 }
diff --git a/src/OperationalInsights/OperationalInsights/Client/OperationalInsightsClient.StorageInsights.cs b/src/OperationalInsights/OperationalInsights/Client/OperationalInsightsClient.StorageInsights.cs
index a618d77263..76d536f8b7 100644
--- a/src/OperationalInsights/OperationalInsights/Client/OperationalInsightsClient.StorageInsights.cs
+++ b/src/OperationalInsights/OperationalInsights/Client/OperationalInsightsClient.StorageInsights.cs
@@ -40,10 +40,7 @@ namespace Microsoft.Azure.Commands.OperationalInsights.Client
 
             var response = OperationalInsightsManagementClient.StorageInsightConfigs.ListByWorkspace(resourceGroupName, workspaceName);
 
-            if (response != null)
-            {
-                response.ForEach(si => storageInsights.Add(new PSStorageInsight(si, resourceGroupName, workspaceName)));
-            }
+            response?.ForEach(si => storageInsights.Add(new PSStorageInsight(si, resourceGroupName, workspaceName)));
 
             return storageInsights;
         }
diff --git a/src/OperationalInsights/OperationalInsights/Client/OperationalInsightsClient.Workspaces.cs b/src/OperationalInsights/OperationalInsights/Client/OperationalInsightsClient.Workspaces.cs
index bda0d2a4d9..d2ed5148e6 100644
--- a/src/OperationalInsights/OperationalInsights/Client/OperationalInsightsClient.Workspaces.cs
+++ b/src/OperationalInsights/OperationalInsights/Client/OperationalInsightsClient.Workspaces.cs
@@ -44,10 +44,7 @@ namespace Microsoft.Azure.Commands.OperationalInsights.Client
             List<PSManagementGroup> managementGroups = new List<PSManagementGroup>();
 
             var response = OperationalInsightsManagementClient.ManagementGroups.List(resourceGroupName, workspaceName);
-            if (response != null)
-            {
-                response.ForEach(mg => managementGroups.Add(new PSManagementGroup(mg)));
-            }
+            response?.ForEach(mg => managementGroups.Add(new PSManagementGroup(mg)));
 
             return managementGroups;
         }
@@ -57,10 +54,7 @@ namespace Microsoft.Azure.Commands.OperationalInsights.Client
             List<PSUsageMetric> usageMetrics = new List<PSUsageMetric>();
 
             var response = OperationalInsightsManagementClient.Usages.List(resourceGroupName, workspaceName);
-            if (response != null)
-            {
-                response.ForEach(um => usageMetrics.Add(new PSUsageMetric(um)));
-            }
+            response?.ForEach(um => usageMetrics.Add(new PSUsageMetric(um)));
 
             return usageMetrics;
         }
@@ -321,7 +315,7 @@ namespace Microsoft.Azure.Commands.OperationalInsights.Client
 
             if (existingResource != null)
             {
-                throw new PSInvalidOperationException(string.Format("Linked Storage Accounts for workpsace: '{0}' under resource group: '{1}' already exists. Please use Update-AzOperationalInsightsLinkedStorageAccount for updating.", workspaceName, resourceGroupName));
+                throw new PSInvalidOperationException($"Linked Storage Accounts for workpsace: '{workspaceName}' under resource group: '{resourceGroupName}' already exists. Please use Update-AzOperationalInsightsLinkedStorageAccount for updating.");
             }
 
             return new PSLinkedStorageAccountsResource(CreateOrUpdateLinkedStorageAccount(resourceGroupName, workspaceName, dataSourceType, storageAccountIds));
@@ -348,10 +342,7 @@ namespace Microsoft.Azure.Commands.OperationalInsights.Client
             List<PSIntelligencePack> intelligencePacks = new List<PSIntelligencePack>();
 
             var listResponse = OperationalInsightsManagementClient.IntelligencePacks.List(resourceGroupName, workspaceName);
-            if (listResponse != null)
-            {
-                listResponse.ForEach(ip => intelligencePacks.Add(new PSIntelligencePack(ip.Name, ip.Enabled.Value)));
-            }
+            listResponse?.ForEach(ip => intelligencePacks.Add(new PSIntelligencePack(ip.Name, ip.Enabled.Value)));
 
             return intelligencePacks;
         }
diff --git a/src/OperationalInsights/OperationalInsights/Clusters/NewAzureOperationalInsightsClusterCommand.cs b/src/OperationalInsights/OperationalInsights/Clusters/NewAzureOperationalInsightsClusterCommand.cs
index a4846aa5c3..8ec4e55765 100644
--- a/src/OperationalInsights/OperationalInsights/Clusters/NewAzureOperationalInsightsClusterCommand.cs
+++ b/src/OperationalInsights/OperationalInsights/Clusters/NewAzureOperationalInsightsClusterCommand.cs
@@ -77,7 +77,7 @@ namespace Microsoft.Azure.Commands.OperationalInsights.Clusters
             };
 
             if (ShouldProcess(this.ClusterName,
-                string.Format("create cluster: {0} in resource group: {1}", this.ClusterName, this.ResourceGroupName)))
+                $"create cluster: {this.ClusterName} in resource group: {this.ResourceGroupName}"))
             {
                 WriteObject(this.OperationalInsightsClient.CreatePSCluster(this.ResourceGroupName, this.ClusterName, parameters));
             }
diff --git a/src/OperationalInsights/OperationalInsights/Clusters/RemoveAzureOperationalInsightsClusterCommand.cs b/src/OperationalInsights/OperationalInsights/Clusters/RemoveAzureOperationalInsightsClusterCommand.cs
index 3f6b4f79df..8afeb7f364 100644
--- a/src/OperationalInsights/OperationalInsights/Clusters/RemoveAzureOperationalInsightsClusterCommand.cs
+++ b/src/OperationalInsights/OperationalInsights/Clusters/RemoveAzureOperationalInsightsClusterCommand.cs
@@ -38,7 +38,7 @@ namespace Microsoft.Azure.Commands.OperationalInsights.Clusters
         public override void ExecuteCmdlet()
         {
             if (ShouldProcess(this.ClusterName,
-                string.Format("delete cluster: {0} in resource group: {1}", this.ClusterName, this.ResourceGroupName)))
+                $"delete cluster: {this.ClusterName} in resource group: {this.ResourceGroupName}"))
             {
                 HttpStatusCode response = this.OperationalInsightsClient.DeletePSCluster(this.ResourceGroupName, this.ClusterName);
                 WriteObject(true);
diff --git a/src/OperationalInsights/OperationalInsights/Clusters/UpdateAzureOperationalInsightsClusterCommand.cs b/src/OperationalInsights/OperationalInsights/Clusters/UpdateAzureOperationalInsightsClusterCommand.cs
index 33501c87be..7fe8fd552e 100644
--- a/src/OperationalInsights/OperationalInsights/Clusters/UpdateAzureOperationalInsightsClusterCommand.cs
+++ b/src/OperationalInsights/OperationalInsights/Clusters/UpdateAzureOperationalInsightsClusterCommand.cs
@@ -78,7 +78,7 @@ namespace Microsoft.Azure.Commands.OperationalInsights.Clusters
             };
 
             if (ShouldProcess(this.ClusterName,
-                string.Format("update cluster: {0} in resource group: {1}", this.ClusterName, this.ResourceGroupName)))
+                $"update cluster: {this.ClusterName} in resource group: {this.ResourceGroupName}"))
             {
                 WriteObject(this.OperationalInsightsClient.UpdatePSCluster(this.ResourceGroupName, this.ClusterName, parameters));
             }
diff --git a/src/OperationalInsights/OperationalInsights/OperationalInsightsBaseCmdlet.cs b/src/OperationalInsights/OperationalInsights/OperationalInsightsBaseCmdlet.cs
index 3acf032a03..083cfc1f0f 100644
--- a/src/OperationalInsights/OperationalInsights/OperationalInsightsBaseCmdlet.cs
+++ b/src/OperationalInsights/OperationalInsights/OperationalInsightsBaseCmdlet.cs
@@ -46,8 +46,7 @@ namespace Microsoft.Azure.Commands.OperationalInsights
         protected override void WriteExceptionError(Exception exception)
         {
             // Override the default error message into a formatted message which contains Request Id
-            Rest.Azure.CloudException cloudException = exception as Rest.Azure.CloudException;
-            if (cloudException != null)
+            if (exception is Rest.Azure.CloudException cloudException)
             {
                 exception = cloudException.CreateFormattedException();
             }
diff --git a/src/OperationalInsights/OperationalInsights/Workspaces/NewAzureOperationalInsightsLinkedStorageAccountCommand.cs b/src/OperationalInsights/OperationalInsights/Workspaces/NewAzureOperationalInsightsLinkedStorageAccountCommand.cs
index fb8c90805b..63a0d6bbb2 100644
--- a/src/OperationalInsights/OperationalInsights/Workspaces/NewAzureOperationalInsightsLinkedStorageAccountCommand.cs
+++ b/src/OperationalInsights/OperationalInsights/Workspaces/NewAzureOperationalInsightsLinkedStorageAccountCommand.cs
@@ -53,7 +53,7 @@ namespace Microsoft.Azure.Commands.OperationalInsights
         public override void ExecuteCmdlet()
         {
             if (ShouldProcess(this.WorkspaceName,
-                string.Format("create linked storage accounts type: {0} for workspace: {1}", this.DataSourceType, this.WorkspaceName)))
+                $"create linked storage accounts type: {this.DataSourceType} for workspace: {this.WorkspaceName}"))
             {
                 WriteObject(this.OperationalInsightsClient.CreateLinkedStorageAccount(this.ResourceGroupName, this.WorkspaceName, this.DataSourceType, this.StorageAccountId));
             }
diff --git a/src/OperationalInsights/OperationalInsights/Workspaces/RemoveAzureOperationalInsightsLinkedServiceCommand.cs b/src/OperationalInsights/OperationalInsights/Workspaces/RemoveAzureOperationalInsightsLinkedServiceCommand.cs
index f3b2998834..47d6a9de13 100644
--- a/src/OperationalInsights/OperationalInsights/Workspaces/RemoveAzureOperationalInsightsLinkedServiceCommand.cs
+++ b/src/OperationalInsights/OperationalInsights/Workspaces/RemoveAzureOperationalInsightsLinkedServiceCommand.cs
@@ -43,7 +43,7 @@ namespace Microsoft.Azure.Commands.OperationalInsights.Clusters
         public override void ExecuteCmdlet()
         {
             if (ShouldProcess(this.LinkedServiceName,
-                string.Format("delete linked service: {0} in for workspace: {1}", this.LinkedServiceName, this.WorkspaceName)))
+                $"delete linked service: {this.LinkedServiceName} in for workspace: {this.WorkspaceName}"))
             {
                 HttpStatusCode response = this.OperationalInsightsClient.DeletePSLinkedService(this.ResourceGroupName, this.WorkspaceName, this.LinkedServiceName);
                 WriteObject(true);
diff --git a/src/OperationalInsights/OperationalInsights/Workspaces/SetAzureOperationalInsightsLinkedServiceCommand.cs b/src/OperationalInsights/OperationalInsights/Workspaces/SetAzureOperationalInsightsLinkedServiceCommand.cs
index 8abf1af27e..ea832e9a3e 100644
--- a/src/OperationalInsights/OperationalInsights/Workspaces/SetAzureOperationalInsightsLinkedServiceCommand.cs
+++ b/src/OperationalInsights/OperationalInsights/Workspaces/SetAzureOperationalInsightsLinkedServiceCommand.cs
@@ -66,7 +66,7 @@ namespace Microsoft.Azure.Commands.OperationalInsights.Clusters
             };
 
             if (ShouldProcess(this.LinkedServiceName,
-                string.Format("Set linked service: {0} for workspace: {1}", this.LinkedServiceName, this.WorkspaceName)))
+                $"Set linked service: {this.LinkedServiceName} for workspace: {this.WorkspaceName}"))
             {
                 WriteObject(this.OperationalInsightsClient.SetPSLinkedService(this.ResourceGroupName, this.WorkspaceName, this.LinkedServiceName, parameters));
             }
diff --git a/src/OperationalInsights/OperationalInsights/Workspaces/SetAzureOperationalInsightsLinkedStorageAccountCommand.cs b/src/OperationalInsights/OperationalInsights/Workspaces/SetAzureOperationalInsightsLinkedStorageAccountCommand.cs
index 808e17b48c..bbce0db5cc 100644
--- a/src/OperationalInsights/OperationalInsights/Workspaces/SetAzureOperationalInsightsLinkedStorageAccountCommand.cs
+++ b/src/OperationalInsights/OperationalInsights/Workspaces/SetAzureOperationalInsightsLinkedStorageAccountCommand.cs
@@ -55,7 +55,7 @@ namespace Microsoft.Azure.Commands.OperationalInsights
         public override void ExecuteCmdlet()
         {
             if (ShouldProcess(this.WorkspaceName,
-                string.Format("update linked storage accounts type: {0} for workspace: {1}", this.DataSourceType, this.WorkspaceName)))
+                $"update linked storage accounts type: {this.DataSourceType} for workspace: {this.WorkspaceName}"))
             {
                 PSLinkedStorageAccountsResource resource = this.OperationalInsightsClient.UpdateLinkedStorageAccount(this.ResourceGroupName, this.WorkspaceName, this.DataSourceType, this.StorageAccountId);
                 WriteObject(resource);
diff --git a/src/Portal/generated/runtime/Serialization/JsonSerializer.cs b/src/Portal/generated/runtime/Serialization/JsonSerializer.cs
index 8ce721c34d..697f2996ed 100644
--- a/src/Portal/generated/runtime/Serialization/JsonSerializer.cs
+++ b/src/Portal/generated/runtime/Serialization/JsonSerializer.cs
@@ -312,7 +312,7 @@ namespace Microsoft.Azure.PowerShell.Cmdlets.Portal.Runtime.Json
                     default: return ReadArray((IEnumerable)value);
                 }
             }
-            else if (value is IEnumerable)
+            else if (value is IEnumerable iEnumerable)
             {
                 if (type.IsList && type.ElementType != null)
                 {
@@ -330,7 +330,7 @@ namespace Microsoft.Azure.PowerShell.Cmdlets.Portal.Runtime.Json
                     }
                 }
 
-                return ReadArray((IEnumerable)value);
+                return ReadArray(iEnumerable);
             }
             else
             {
diff --git a/src/PostgreSql/generated/runtime/Serialization/JsonSerializer.cs b/src/PostgreSql/generated/runtime/Serialization/JsonSerializer.cs
index 1806a6731c..5f01336fc6 100644
--- a/src/PostgreSql/generated/runtime/Serialization/JsonSerializer.cs
+++ b/src/PostgreSql/generated/runtime/Serialization/JsonSerializer.cs
@@ -312,7 +312,7 @@ namespace Microsoft.Azure.PowerShell.Cmdlets.PostgreSql.Runtime.Json
                     default: return ReadArray((IEnumerable)value);
                 }
             }
-            else if (value is IEnumerable)
+            else if (value is IEnumerable iEnumerable)
             {
                 if (type.IsList && type.ElementType != null)
                 {
@@ -330,7 +330,7 @@ namespace Microsoft.Azure.PowerShell.Cmdlets.PostgreSql.Runtime.Json
                     }
                 }
 
-                return ReadArray((IEnumerable)value);
+                return ReadArray(iEnumerable);
             }
             else
             {
diff --git a/src/PowerBIEmbedded/PowerBI.Test/ScenarioTests/UrlDecodingRecordMatcher.cs b/src/PowerBIEmbedded/PowerBI.Test/ScenarioTests/UrlDecodingRecordMatcher.cs
index 344db39230..7ad2925240 100644
--- a/src/PowerBIEmbedded/PowerBI.Test/ScenarioTests/UrlDecodingRecordMatcher.cs
+++ b/src/PowerBIEmbedded/PowerBI.Test/ScenarioTests/UrlDecodingRecordMatcher.cs
@@ -70,7 +70,7 @@ namespace Microsoft.Azure.Commands.DataLake.Test.ScenarioTests
             }
 
             var encodedPath = Convert.ToBase64String(Encoding.UTF8.GetBytes(path));
-            return string.Format("{0} {1}", request.Method, encodedPath);
+            return $"{request.Method} {encodedPath}";
         }
     }
 }
diff --git a/src/PrivateDns/PrivateDns/Models/PrivateDnsClient.cs b/src/PrivateDns/PrivateDns/Models/PrivateDnsClient.cs
index c2f63e669e..df5f1dcfa1 100644
--- a/src/PrivateDns/PrivateDns/Models/PrivateDnsClient.cs
+++ b/src/PrivateDns/PrivateDns/Models/PrivateDnsClient.cs
@@ -507,7 +507,7 @@ namespace Microsoft.Azure.Commands.PrivateDns.Models
             IPage<RecordSet> listResponse = null;
             do
             {
-                if (listResponse != null && listResponse.NextPageLink != null)
+                if (listResponse?.NextPageLink != null)
                 {
                     listResponse = this.PrivateDnsManagementClient.RecordSets.ListNext(listResponse.NextPageLink);
                 }
diff --git a/src/RecoveryServices/RecoveryServices.Backup.Helpers/Conversions/ConversionHelpers.cs b/src/RecoveryServices/RecoveryServices.Backup.Helpers/Conversions/ConversionHelpers.cs
index 6d9e0c641b..270d5b0033 100644
--- a/src/RecoveryServices/RecoveryServices.Backup.Helpers/Conversions/ConversionHelpers.cs
+++ b/src/RecoveryServices/RecoveryServices.Backup.Helpers/Conversions/ConversionHelpers.cs
@@ -34,8 +34,7 @@ namespace Microsoft.Azure.Commands.RecoveryServices.Backup.Helpers
         {
             ContainerBase containerModel = null;
 
-            if (protectionContainer != null &&
-                protectionContainer.Properties != null)
+            if (protectionContainer?.Properties != null)
             {
                 if (protectionContainer.Properties.GetType().IsSubclassOf(typeof(ServiceClientModel.IaaSVMContainer)))
                 {
@@ -73,8 +72,7 @@ namespace Microsoft.Azure.Commands.RecoveryServices.Backup.Helpers
         {
             BackupEngineBase backupEngineModel = null;
 
-            if (backupEngine != null &&
-                backupEngine.Properties != null)
+            if (backupEngine?.Properties != null)
             {
                 string friendlyName = backupEngine.Properties.FriendlyName;
                 string backupManagementType =
@@ -420,8 +418,7 @@ namespace Microsoft.Azure.Commands.RecoveryServices.Backup.Helpers
         {
             ItemBase itemModel = null;
 
-            if (protectedItem != null &&
-                protectedItem.Properties != null)
+            if (protectedItem?.Properties != null)
             {
                 if (protectedItem.Properties.GetType().IsSubclassOf(typeof(ServiceClientModel.AzureIaaSVMProtectedItem)))
                 {
@@ -575,8 +572,7 @@ namespace Microsoft.Azure.Commands.RecoveryServices.Backup.Helpers
         {
             ProtectableItemBase itemModel = null;
 
-            if (protectableItem != null &&
-                protectableItem.Properties != null)
+            if (protectableItem?.Properties != null)
             {
                 if (protectableItem.Properties.GetType().IsSubclassOf(typeof(ServiceClientModel.AzureVmWorkloadProtectableItem)))
                 {
diff --git a/src/RecoveryServices/RecoveryServices.Backup.Models/AzureDbModels/AzureDbPolicy.cs b/src/RecoveryServices/RecoveryServices.Backup.Models/AzureDbModels/AzureDbPolicy.cs
index 1d75427d9a..45e1098127 100644
--- a/src/RecoveryServices/RecoveryServices.Backup.Models/AzureDbModels/AzureDbPolicy.cs
+++ b/src/RecoveryServices/RecoveryServices.Backup.Models/AzureDbModels/AzureDbPolicy.cs
@@ -69,24 +69,12 @@ namespace Microsoft.Azure.Commands.RecoveryServices.Backup.Cmdlets.Models
             base.Validate();
 
             FullBackupSchedulePolicy.Validate();
-            if (DifferentialBackupSchedulePolicy != null)
-            {
-                DifferentialBackupSchedulePolicy.Validate();
-            }
-            if (LogBackupSchedulePolicy != null)
-            {
-                LogBackupSchedulePolicy.Validate();
-            }
+            DifferentialBackupSchedulePolicy?.Validate();
+            LogBackupSchedulePolicy?.Validate();
 
             FullBackupRetentionPolicy.Validate();
-            if (DifferentialBackupRetentionPolicy != null)
-            {
-                DifferentialBackupRetentionPolicy.Validate();
-            }
-            if (LogBackupRetentionPolicy != null)
-            {
-                LogBackupRetentionPolicy.Validate();
-            }
+            DifferentialBackupRetentionPolicy?.Validate();
+            LogBackupRetentionPolicy?.Validate();
         }
     }
 
diff --git a/src/RecoveryServices/RecoveryServices.Backup.Models/CommonModels/PolicyRetentionObjects.cs b/src/RecoveryServices/RecoveryServices.Backup.Models/CommonModels/PolicyRetentionObjects.cs
index 85bb72fb08..3bdc96fef3 100644
--- a/src/RecoveryServices/RecoveryServices.Backup.Models/CommonModels/PolicyRetentionObjects.cs
+++ b/src/RecoveryServices/RecoveryServices.Backup.Models/CommonModels/PolicyRetentionObjects.cs
@@ -31,9 +31,7 @@ namespace Microsoft.Azure.Commands.RecoveryServices.Backup.Cmdlets.Models
 
         public override string ToString()
         {
-            return string.Format("RetentionDurationType: {0}, Retention Count : {1}",
-                        RetentionDurationType.ToString(),
-                        RetentionCount);
+            return $"RetentionDurationType: {RetentionDurationType.ToString()}, Retention Count : {RetentionCount}";
         }
 
         public override void Validate()
@@ -228,7 +226,7 @@ namespace Microsoft.Azure.Commands.RecoveryServices.Backup.Cmdlets.Models
 
         public override string ToString()
         {
-            return string.Format("RetentionTimes: {0}", TraceUtils.GetString(RetentionTimes));
+            return $"RetentionTimes: {TraceUtils.GetString(RetentionTimes)}";
         }
     }
 
@@ -261,7 +259,7 @@ namespace Microsoft.Azure.Commands.RecoveryServices.Backup.Cmdlets.Models
 
         public override string ToString()
         {
-            return string.Format("DurationCountInDays: {0}, {1}", DurationCountInDays, base.ToString());
+            return $"DurationCountInDays: {DurationCountInDays}, {base.ToString()}";
         }
     }
 
@@ -303,8 +301,7 @@ namespace Microsoft.Azure.Commands.RecoveryServices.Backup.Cmdlets.Models
 
         public override string ToString()
         {
-            return string.Format("DurationCountInWeeks: {0}, DaysOfTheWeek: {1}, {2}",
-                                  DurationCountInWeeks, TraceUtils.GetString(DaysOfTheWeek), base.ToString());
+            return $"DurationCountInWeeks: {DurationCountInWeeks}, DaysOfTheWeek: {TraceUtils.GetString(DaysOfTheWeek)}, {base.ToString()}";
         }
     }
 
@@ -517,7 +514,7 @@ namespace Microsoft.Azure.Commands.RecoveryServices.Backup.Cmdlets.Models
 
         public override string ToString()
         {
-            return string.Format("DaysOfTheMonth:{0}", TraceUtils.GetString(DaysOfTheMonth));
+            return $"DaysOfTheMonth:{TraceUtils.GetString(DaysOfTheMonth)}";
         }
     }
 
@@ -538,14 +535,12 @@ namespace Microsoft.Azure.Commands.RecoveryServices.Backup.Cmdlets.Models
 
         public void Validate()
         {
-            if (DaysOfTheWeek == null || DaysOfTheWeek.Count == 0 ||
-                DaysOfTheWeek.Count != DaysOfTheWeek.Distinct().Count())
+            if (DaysOfTheWeek == null || DaysOfTheWeek.Count == 0 || DaysOfTheWeek.Count != DaysOfTheWeek.Distinct().Count())
             {
                 throw new ArgumentException(Resources.InvalidDaysOfWeekInMonthlyYearlyRetentionPolicyException);
             }
 
-            if (WeeksOfTheMonth == null || WeeksOfTheMonth.Count == 0 ||
-                WeeksOfTheMonth.Count != WeeksOfTheMonth.Distinct().Count())
+            if (WeeksOfTheMonth == null || WeeksOfTheMonth.Count == 0 || WeeksOfTheMonth.Count != WeeksOfTheMonth.Distinct().Count())
             {
                 throw new ArgumentException(Resources.InvalidWeeksOfMonthInMonthlyYearlyRetentionPolicyException);
             }
@@ -553,9 +548,7 @@ namespace Microsoft.Azure.Commands.RecoveryServices.Backup.Cmdlets.Models
 
         public override string ToString()
         {
-            return string.Format("DaysOfTheWeek:{0}, WeeksOfTheMonth:{1}",
-                                  TraceUtils.GetString(DaysOfTheWeek),
-                                  TraceUtils.GetString(WeeksOfTheMonth));
+            return $"DaysOfTheWeek:{TraceUtils.GetString(DaysOfTheWeek)}, WeeksOfTheMonth:{TraceUtils.GetString(WeeksOfTheMonth)}";
         }
     }
 
@@ -589,7 +582,7 @@ namespace Microsoft.Azure.Commands.RecoveryServices.Backup.Cmdlets.Models
 
         public override string ToString()
         {
-            return string.Format("Date:{0}, IsLast:{1}", Date, IsLast);
+            return $"Date:{Date}, IsLast:{IsLast}";
         }
     }
 
diff --git a/src/RecoveryServices/RecoveryServices.Backup.Models/CommonModels/PolicyScheduleObjects.cs b/src/RecoveryServices/RecoveryServices.Backup.Models/CommonModels/PolicyScheduleObjects.cs
index e89a703b42..0125363853 100644
--- a/src/RecoveryServices/RecoveryServices.Backup.Models/CommonModels/PolicyScheduleObjects.cs
+++ b/src/RecoveryServices/RecoveryServices.Backup.Models/CommonModels/PolicyScheduleObjects.cs
@@ -58,8 +58,7 @@ namespace Microsoft.Azure.Commands.RecoveryServices.Backup.Cmdlets.Models
 
             if (ScheduleRunFrequency == ScheduleRunType.Weekly)
             {
-                if (ScheduleRunDays == null || ScheduleRunDays.Count == 0 ||
-                    ScheduleRunDays.Count != ScheduleRunDays.Distinct().Count())
+                if (ScheduleRunDays == null || ScheduleRunDays.Count == 0 || ScheduleRunDays.Count != ScheduleRunDays.Distinct().Count())
                 {
                     throw new ArgumentException(Resources.InvalidScheduleRunDaysInScheduleException);
                 }
@@ -68,10 +67,7 @@ namespace Microsoft.Azure.Commands.RecoveryServices.Backup.Cmdlets.Models
 
         public override string ToString()
         {
-            return string.Format("scheduleRunType:{0}, ScheduleRunDays:{1}, ScheduleRunTimes:{2}",
-                                  ScheduleRunFrequency,
-                                  TraceUtils.GetString(ScheduleRunDays),
-                                  TraceUtils.GetString(ScheduleRunTimes));
+            return $"scheduleRunType:{ScheduleRunFrequency}, ScheduleRunDays:{TraceUtils.GetString(ScheduleRunDays)}, ScheduleRunTimes:{TraceUtils.GetString(ScheduleRunTimes)}";
         }
     }
 
diff --git a/src/RecoveryServices/RecoveryServices.Backup.Providers/Providers/IaasVmPsBackupProvider.cs b/src/RecoveryServices/RecoveryServices.Backup.Providers/Providers/IaasVmPsBackupProvider.cs
index 348576f51f..8a013cb6c7 100644
--- a/src/RecoveryServices/RecoveryServices.Backup.Providers/Providers/IaasVmPsBackupProvider.cs
+++ b/src/RecoveryServices/RecoveryServices.Backup.Providers/Providers/IaasVmPsBackupProvider.cs
@@ -555,7 +555,7 @@ namespace Microsoft.Azure.Commands.RecoveryServices.Backup.Cmdlets.ProviderModel
                     vaultName: vaultName,
                     resourceGroupName: resourceGroupName));
 
-            if (response != null && response.Status != null &&
+            if (response?.Status != null &&
                    response.Properties != null && ((OperationStatusProvisionILRExtendedInfo)
                    response.Properties).RecoveryTarget != null)
             {
@@ -632,7 +632,7 @@ namespace Microsoft.Azure.Commands.RecoveryServices.Backup.Cmdlets.ProviderModel
                     vaultName: vaultName,
                     resourceGroupName: resourceGroupName));
 
-            if (response != null && response.Status != null)
+            if (response?.Status != null)
             {
                 Logger.Instance.WriteDebug("Completed the call with status code" + response.Status.ToString());
             }
@@ -1273,8 +1273,8 @@ namespace Microsoft.Azure.Commands.RecoveryServices.Backup.Cmdlets.ProviderModel
                 resourceGroupName: resourceGroupName);
 
             Logger.Instance.WriteDebug(string.Format(Resources.ContainerCountAfterFilter,
-                protectableItemList.Count()));
-            if (protectableItemList.Count() == 0)
+                protectableItemList.Count));
+            if (!protectableItemList.Any())
             {
                 //Container is not discovered
                 Logger.Instance.WriteDebug(Resources.ContainerNotDiscovered);
diff --git a/src/RecoveryServices/RecoveryServices.Backup.ServiceClientAdapter/QueryBuilder.cs b/src/RecoveryServices/RecoveryServices.Backup.ServiceClientAdapter/QueryBuilder.cs
index 219994fdcc..8ff59a935d 100644
--- a/src/RecoveryServices/RecoveryServices.Backup.ServiceClientAdapter/QueryBuilder.cs
+++ b/src/RecoveryServices/RecoveryServices.Backup.ServiceClientAdapter/QueryBuilder.cs
@@ -64,10 +64,7 @@ namespace Microsoft.Azure.Commands.RecoveryServices.Backup.Cmdlets.ServiceClient
                         {
                             var dateTime = (DateTime)property.GetValue(queryObject);
                             DateTimeFormatInfo dateFormat = new CultureInfo("en-US").DateTimeFormat;
-                            rightHandSide = string.Format(
-                                "'{0}'",
-                                dateTime.ToUniversalTime().ToString(
-                                    "yyyy-MM-dd hh:mm:ss tt", dateFormat));
+                            rightHandSide = $"'{dateTime.ToUniversalTime().ToString("yyyy-MM-dd hh:mm:ss tt", dateFormat)}'";
                         }
                         else
                         {
@@ -77,18 +74,18 @@ namespace Microsoft.Azure.Commands.RecoveryServices.Backup.Cmdlets.ServiceClient
                     else if (genericArguments.Any(type => type.IsEnum))
                     {
                         rightHandSide = (property.GetValue(queryObject) != null) ?
-                        string.Format("'{0}'", property.GetValue(queryObject).ToString()) : null;
+                        $"'{property.GetValue(queryObject).ToString()}'" : null;
                     }
                     else if (genericArguments.Any(type => type == typeof(bool)))
                     {
                         rightHandSide = (property.GetValue(queryObject) != null) ?
-                        string.Format("'{0}'", property.GetValue(queryObject).ToString()) : null;
+                        $"'{property.GetValue(queryObject).ToString()}'" : null;
                     }
                 }
                 else
                 {
                     rightHandSide = (property.GetValue(queryObject) != null) ?
-                        string.Format("'{0}'", property.GetValue(queryObject).ToString()) : null;
+                        $"'{property.GetValue(queryObject).ToString()}'" : null;
                 }
 
                 if (!string.IsNullOrEmpty(rightHandSide))
diff --git a/src/RecoveryServices/RecoveryServices.Backup.ServiceClientAdapter/StringExtensions.cs b/src/RecoveryServices/RecoveryServices.Backup.ServiceClientAdapter/StringExtensions.cs
index 4734dde313..31b04c35c5 100644
--- a/src/RecoveryServices/RecoveryServices.Backup.ServiceClientAdapter/StringExtensions.cs
+++ b/src/RecoveryServices/RecoveryServices.Backup.ServiceClientAdapter/StringExtensions.cs
@@ -27,7 +27,7 @@ namespace Microsoft.Azure.Commands.RecoveryServices.Backup.Cmdlets.ServiceClient
         public static string ToCamelCase(this string str)
         {
             return string.IsNullOrEmpty(str) ?
-                str : string.Format("{0}{1}", char.ToLower(str[0]), str.Substring(1));
+                str : $"{char.ToLower(str[0])}{str.Substring(1)}";
         }
     }
 }
diff --git a/src/RecoveryServices/RecoveryServices.Backup/Cmdlets/Item/EnableAzureRmRecoveryServicesBackupProtection.cs b/src/RecoveryServices/RecoveryServices.Backup/Cmdlets/Item/EnableAzureRmRecoveryServicesBackupProtection.cs
index 006e278add..d5cef9a7e6 100644
--- a/src/RecoveryServices/RecoveryServices.Backup/Cmdlets/Item/EnableAzureRmRecoveryServicesBackupProtection.cs
+++ b/src/RecoveryServices/RecoveryServices.Backup/Cmdlets/Item/EnableAzureRmRecoveryServicesBackupProtection.cs
@@ -178,7 +178,7 @@ namespace Microsoft.Azure.Commands.RecoveryServices.Backup.Cmdlets
                                 resourceGroupName: resourceGroupName);
                         WriteDebug("Successfully got response from service");
                         List<ProtectableItemBase> itemModels = ConversionHelpers.GetProtectableItemModelList(protectableItems);
-                        for (int protitemindex = 0; protitemindex < itemModels.Count(); protitemindex++)
+                        for (int protitemindex = 0; protitemindex < itemModels.Count; protitemindex++)
                         {
                             if (string.Compare(((AzureWorkloadProtectableItem)itemModels[protitemindex]).Name,
                                 ProtectableItem.Name) == 0 &&
diff --git a/src/RecoveryServices/RecoveryServices.Backup/Cmdlets/Jobs/WaitAzureRmRecoveryServicesBackupJob.cs b/src/RecoveryServices/RecoveryServices.Backup/Cmdlets/Jobs/WaitAzureRmRecoveryServicesBackupJob.cs
index aedb32a651..c80cf2d550 100644
--- a/src/RecoveryServices/RecoveryServices.Backup/Cmdlets/Jobs/WaitAzureRmRecoveryServicesBackupJob.cs
+++ b/src/RecoveryServices/RecoveryServices.Backup/Cmdlets/Jobs/WaitAzureRmRecoveryServicesBackupJob.cs
@@ -166,9 +166,9 @@ namespace Microsoft.Azure.Commands.RecoveryServices.Backup.Cmdlets
         /// <returns></returns>
         private bool GetCastedObjFromPSObj<T>(object obj, out object castedJob) where T : class
         {
-            if (obj is PSObject)
+            if (obj is PSObject pSObject)
             {
-                obj = ((PSObject)obj).ImmediateBaseObject;
+                obj = pSObject.ImmediateBaseObject;
             }
 
             castedJob = obj as T;
diff --git a/src/RecoveryServices/RecoveryServices.Backup/Cmdlets/RecoveryPoint/GetAzureRmRecoveryServicesBackupRecoveryPoint.cs b/src/RecoveryServices/RecoveryServices.Backup/Cmdlets/RecoveryPoint/GetAzureRmRecoveryServicesBackupRecoveryPoint.cs
index e7fc032a11..d77ae69858 100644
--- a/src/RecoveryServices/RecoveryServices.Backup/Cmdlets/RecoveryPoint/GetAzureRmRecoveryServicesBackupRecoveryPoint.cs
+++ b/src/RecoveryServices/RecoveryServices.Backup/Cmdlets/RecoveryPoint/GetAzureRmRecoveryServicesBackupRecoveryPoint.cs
@@ -178,7 +178,7 @@ namespace Microsoft.Azure.Commands.RecoveryServices.Backup.Cmdlets
                         providerManager.GetProviderInstance(Item.ContainerType, Item.BackupManagementType);
                     var rpList = psBackupProvider.ListRecoveryPoints();
 
-                    WriteDebug(string.Format("RPCount in Response = {0}", rpList.Count));
+                    WriteDebug($"RPCount in Response = {rpList.Count}");
                     WriteObject(rpList, enumerateCollection: true);
                 }
                 else if (ParameterSetName == RecoveryPointIdParameterSet)
diff --git a/src/RecoveryServices/RecoveryServices.Backup/Cmdlets/Restore/GetAzureRmRecoveryServicesBackupWorkloadRecoveryConfig.cs b/src/RecoveryServices/RecoveryServices.Backup/Cmdlets/Restore/GetAzureRmRecoveryServicesBackupWorkloadRecoveryConfig.cs
index 3fa73a3415..4679507eb0 100644
--- a/src/RecoveryServices/RecoveryServices.Backup/Cmdlets/Restore/GetAzureRmRecoveryServicesBackupWorkloadRecoveryConfig.cs
+++ b/src/RecoveryServices/RecoveryServices.Backup/Cmdlets/Restore/GetAzureRmRecoveryServicesBackupWorkloadRecoveryConfig.cs
@@ -274,7 +274,7 @@ namespace Microsoft.Azure.Commands.RecoveryServices.Backup.Cmdlets
                 dataDirectoryPaths => string.Compare(dataDirectoryPaths.Type,
                 type, true) == 0);
             List<string> pathParts = new List<string>(path.Split(new string[] { "\\" }, StringSplitOptions.None));
-            int len = pathParts.Count();
+            int len = pathParts.Count;
             List<string> fileNameParts = new List<string>(pathParts[len - 1].Split(new string[] { "." }, StringSplitOptions.None));
             string newFileName = "";
             if (fileNameParts.Count == 2)
diff --git a/src/RecoveryServices/RecoveryServices.SiteRecovery/Common/AsrCmdletBase.cs b/src/RecoveryServices/RecoveryServices.SiteRecovery/Common/AsrCmdletBase.cs
index 5eb144e88d..cf3a1efb73 100644
--- a/src/RecoveryServices/RecoveryServices.SiteRecovery/Common/AsrCmdletBase.cs
+++ b/src/RecoveryServices/RecoveryServices.SiteRecovery/Common/AsrCmdletBase.cs
@@ -114,9 +114,7 @@ namespace Microsoft.Azure.Commands.RecoveryServices.SiteRecovery
                                      this.recoveryServicesClient.ClientRequestId +
                                      "\n";
             }
-
-            var cloudException = ex as CloudException;
-            if ((cloudException != null) &&
+            if ((ex is CloudException cloudException) &&
                 (cloudException.Body != null) &&
                 (cloudException.Response != null))
             {
@@ -257,9 +255,7 @@ namespace Microsoft.Azure.Commands.RecoveryServices.SiteRecovery
             if (replicationProvider != Constants.HyperVReplica2012)
             {
                 throw new Exception(
-                    string.Format(
-                        "Call using ID based parameter {0} is not supported for this provider. Please use its corresponding full object parameter instead",
-                        paramName));
+                    $"Call using ID based parameter {paramName} is not supported for this provider. Please use its corresponding full object parameter instead");
             }
 
             this.WriteWarningWithTimestamp(
diff --git a/src/RecoveryServices/RecoveryServices.SiteRecovery/Common/PSAsrClient.cs b/src/RecoveryServices/RecoveryServices.SiteRecovery/Common/PSAsrClient.cs
index 8eef9b067a..edf29db318 100644
--- a/src/RecoveryServices/RecoveryServices.SiteRecovery/Common/PSAsrClient.cs
+++ b/src/RecoveryServices/RecoveryServices.SiteRecovery/Common/PSAsrClient.cs
@@ -517,10 +517,7 @@ namespace Microsoft.Azure.Commands.RecoveryServices.SiteRecovery
             }
             finally
             {
-                if (sw != null)
-                {
-                    sw.Close();
-                }
+                sw?.Close();
             }
 
             return xmlString;
diff --git a/src/RecoveryServices/RecoveryServices.SiteRecovery/Models/PSEvent.cs b/src/RecoveryServices/RecoveryServices.SiteRecovery/Models/PSEvent.cs
index 64c191ea6a..fec99022ce 100644
--- a/src/RecoveryServices/RecoveryServices.SiteRecovery/Models/PSEvent.cs
+++ b/src/RecoveryServices/RecoveryServices.SiteRecovery/Models/PSEvent.cs
@@ -150,9 +150,9 @@ namespace Microsoft.Azure.Commands.RecoveryServices.SiteRecovery
         private ASREventSpecificDetails TranslateEventSpecificDetails(
             EventSpecificDetails eventSpecificDetails)
         {
-            if (eventSpecificDetails is JobStatusEventDetails)
+            if (eventSpecificDetails is JobStatusEventDetails jobStatusEventDetails)
             {
-                return new ASRJobStatusEventDetails((JobStatusEventDetails) eventSpecificDetails);
+                return new ASRJobStatusEventDetails(jobStatusEventDetails);
             }
             return null;
         }
@@ -166,25 +166,25 @@ namespace Microsoft.Azure.Commands.RecoveryServices.SiteRecovery
             EventProviderSpecificDetails eventSpecificDetails)
         {
             ASREventProviderSpecificDetails eventProviderDetails = null;
-            if (eventSpecificDetails is HyperVReplicaAzureEventDetails)
+            if (eventSpecificDetails is HyperVReplicaAzureEventDetails hyperVReplicaAzureEventDetails)
             {
                 eventProviderDetails = new ASRHyperVReplicaAzureEventDetails(
-                    (HyperVReplicaAzureEventDetails) eventSpecificDetails);
+hyperVReplicaAzureEventDetails);
             }
-            else if (eventSpecificDetails is InMageAzureV2EventDetails)
+            else if (eventSpecificDetails is InMageAzureV2EventDetails inMageAzureV2EventDetails)
             {
                 eventProviderDetails = new ASRInMageAzureV2EventDetails(
-                    (InMageAzureV2EventDetails) eventSpecificDetails);
+inMageAzureV2EventDetails);
             }
-            else if(eventSpecificDetails is HyperVReplica2012EventDetails)
+            else if(eventSpecificDetails is HyperVReplica2012EventDetails hyperVReplica2012EventDetails)
             {
                 eventProviderDetails = new ASRHyperVReplica2012EventDetails(
-                    (HyperVReplica2012EventDetails) eventSpecificDetails);
+hyperVReplica2012EventDetails);
             }
-            else if(eventSpecificDetails is HyperVReplica2012R2EventDetails)
+            else if(eventSpecificDetails is HyperVReplica2012R2EventDetails hyperVReplica2012R2EventDetails)
             {
                 eventProviderDetails = new ASRHyperVReplica2012R2EventDetails(
-                    (HyperVReplica2012R2EventDetails) eventSpecificDetails);
+hyperVReplica2012R2EventDetails);
             }
             return eventProviderDetails;
         }
diff --git a/src/RecoveryServices/RecoveryServices.SiteRecovery/Models/PSRecoveryPlanObjects.cs b/src/RecoveryServices/RecoveryServices.SiteRecovery/Models/PSRecoveryPlanObjects.cs
index d0d04e7c77..3387a30726 100644
--- a/src/RecoveryServices/RecoveryServices.SiteRecovery/Models/PSRecoveryPlanObjects.cs
+++ b/src/RecoveryServices/RecoveryServices.SiteRecovery/Models/PSRecoveryPlanObjects.cs
@@ -395,9 +395,8 @@ namespace Microsoft.Azure.Commands.RecoveryServices.SiteRecovery
                 this.ProviderSpecificDetails = new List<ASRRecoveryPlanA2ADetails>();
                 foreach (var providerSpecificDetails in recoveryPlan.Properties.ProviderSpecificDetails)
                 {
-                    if (providerSpecificDetails is RecoveryPlanA2ADetails)
+                    if (providerSpecificDetails is RecoveryPlanA2ADetails a2aProviderDetails)
                     {
-                        var a2aProviderDetails = (RecoveryPlanA2ADetails)providerSpecificDetails;
                         var psd = new ASRRecoveryPlanA2ADetails(
                             a2aProviderDetails.PrimaryZone,
                             a2aProviderDetails.RecoveryZone);
diff --git a/src/RecoveryServices/RecoveryServices.SiteRecovery/RecoveryPlan/NewAzureRmRecoveryServicesAsrRecoveryPlan.cs b/src/RecoveryServices/RecoveryServices.SiteRecovery/RecoveryPlan/NewAzureRmRecoveryServicesAsrRecoveryPlan.cs
index 2f8dd32954..a2732a967b 100644
--- a/src/RecoveryServices/RecoveryServices.SiteRecovery/RecoveryPlan/NewAzureRmRecoveryServicesAsrRecoveryPlan.cs
+++ b/src/RecoveryServices/RecoveryServices.SiteRecovery/RecoveryPlan/NewAzureRmRecoveryServicesAsrRecoveryPlan.cs
@@ -375,9 +375,8 @@ namespace Microsoft.Azure.Commands.RecoveryServices.SiteRecovery
                     new List<RecoveryPlanProviderSpecificInput>();
                 foreach (var providerSpecificDetails in recoveryPlan.Properties.ProviderSpecificDetails)
                 {
-                    if (providerSpecificDetails is RecoveryPlanA2ADetails)
+                    if (providerSpecificDetails is RecoveryPlanA2ADetails a2aProviderDetails)
                     {
-                        var a2aProviderDetails = (RecoveryPlanA2ADetails)providerSpecificDetails;
                         var psd = new RecoveryPlanA2AInput
                         {
                             RecoveryZone = a2aProviderDetails.RecoveryZone,
diff --git a/src/RecoveryServices/RecoveryServices.SiteRecovery/ReplicationProtectedItem/SetAzureRmRecoveryServicesAsrReplicationProtectedItem.cs b/src/RecoveryServices/RecoveryServices.SiteRecovery/ReplicationProtectedItem/SetAzureRmRecoveryServicesAsrReplicationProtectedItem.cs
index c939966ea1..bf6a970623 100644
--- a/src/RecoveryServices/RecoveryServices.SiteRecovery/ReplicationProtectedItem/SetAzureRmRecoveryServicesAsrReplicationProtectedItem.cs
+++ b/src/RecoveryServices/RecoveryServices.SiteRecovery/ReplicationProtectedItem/SetAzureRmRecoveryServicesAsrReplicationProtectedItem.cs
@@ -617,8 +617,7 @@ namespace Microsoft.Azure.Commands.RecoveryServices.SiteRecovery
                             this.KeyEncryptionVaultId)
                     };
 
-                    if (this.ASRVMNicConfiguration != null &&
-                        this.ASRVMNicConfiguration.Count() > 0)
+                    if (this.ASRVMNicConfiguration != null && this.ASRVMNicConfiguration.Any())
                     {
                         var recoveryNetworkIds = new HashSet<string>();
                         var tfoNetworkIds = new HashSet<string>();
@@ -640,13 +639,13 @@ namespace Microsoft.Azure.Commands.RecoveryServices.SiteRecovery
                                 }
                             });
 
-                        if (recoveryNetworkIds.Count() > 1)
+                        if (recoveryNetworkIds.Count > 1)
                         {
                             this.WriteWarning(Resources.RecoveryNetworkIdConflictInASRVMNics);
                             return;
                         }
 
-                        if (tfoNetworkIds.Count() > 1)
+                        if (tfoNetworkIds.Count > 1)
                         {
                             this.WriteWarning(Resources.TfoNetworkIdConflictInASRVMNics);
                             return;
@@ -734,7 +733,7 @@ namespace Microsoft.Azure.Commands.RecoveryServices.SiteRecovery
             {
                 // If VM NICs list provided along with UpdateNic then only the NICs list is
                 // honored.
-                if (this.ASRVMNicConfiguration != null && this.ASRVMNicConfiguration.Count() > 0)
+                if (this.ASRVMNicConfiguration != null && this.ASRVMNicConfiguration.Any())
                 {
                     var vmNicIds = vmNicList.Select(nic => nic.NicId);
 
diff --git a/src/RecoveryServices/RecoveryServices.SiteRecovery/Utilities/Utilities.cs b/src/RecoveryServices/RecoveryServices.SiteRecovery/Utilities/Utilities.cs
index 7555b9cf63..d54c5d9215 100644
--- a/src/RecoveryServices/RecoveryServices.SiteRecovery/Utilities/Utilities.cs
+++ b/src/RecoveryServices/RecoveryServices.SiteRecovery/Utilities/Utilities.cs
@@ -259,8 +259,7 @@ namespace Microsoft.Azure.Commands.RecoveryServices.SiteRecovery
                 if (propValue != null)
                 {
                     // IList is the only one we are handling
-                    var elems = propValue as IList;
-                    if ((elems != null) &&
+                    if ((propValue is IList elems) &&
                         (elems.Count != 0))
                     {
                         var itemCount = 0;
@@ -403,10 +402,7 @@ namespace Microsoft.Azure.Commands.RecoveryServices.SiteRecovery
             catch (Exception ex)
             {
                 throw new Exception(
-                    string.Format(
-                        "Invalid resource Id - {0}. Exception - {1} ",
-                        data,
-                        ex));
+                    $"Invalid resource Id - {data}. Exception - {ex} ");
             }
         }
 
diff --git a/src/RecoveryServices/RecoveryServices/Common/PSRecoveryServicesVaultExtendedInfoClient.cs b/src/RecoveryServices/RecoveryServices/Common/PSRecoveryServicesVaultExtendedInfoClient.cs
index e787c8299b..fe4456f52f 100644
--- a/src/RecoveryServices/RecoveryServices/Common/PSRecoveryServicesVaultExtendedInfoClient.cs
+++ b/src/RecoveryServices/RecoveryServices/Common/PSRecoveryServicesVaultExtendedInfoClient.cs
@@ -91,10 +91,7 @@ namespace Microsoft.Azure.Commands.RecoveryServices
             string resourceType = string.Empty;
             Utilities.GetResourceProviderNamespaceAndType(vault.ID, out resourceProviderNamespace, out resourceType);
 
-            Logger.Instance.WriteDebug(string.Format(
-                "GenerateVaultCredential resourceProviderNamespace = {0}, resourceType = {1}",
-                resourceProviderNamespace,
-                resourceType));
+            Logger.Instance.WriteDebug($"GenerateVaultCredential resourceProviderNamespace = {resourceProviderNamespace}, resourceType = {resourceType}");
 
             // Update vault settings with the working vault to generate file
             Utilities.UpdateCurrentVaultContext(new ASRVaultCreds()
@@ -147,7 +144,7 @@ namespace Microsoft.Azure.Commands.RecoveryServices
             {
                 CloudException cloudException = exception as CloudException;
 
-                if (cloudException != null && cloudException.Response != null
+                if (cloudException?.Response != null
                     && !string.IsNullOrEmpty(cloudException.Response.Content))
                 {
                     rpError.Error error = JsonConvert.DeserializeObject<rpError.Error>(
diff --git a/src/RecoveryServices/RecoveryServices/Common/RecoveryServicesCmdletBase.cs b/src/RecoveryServices/RecoveryServices/Common/RecoveryServicesCmdletBase.cs
index 3243285102..e669154640 100644
--- a/src/RecoveryServices/RecoveryServices/Common/RecoveryServicesCmdletBase.cs
+++ b/src/RecoveryServices/RecoveryServices/Common/RecoveryServicesCmdletBase.cs
@@ -70,8 +70,7 @@ namespace Microsoft.Azure.Commands.RecoveryServices
                 clientRequestIdMsg = "ClientRequestId: " + this.recoveryServicesClient.ClientRequestId + "\n";
             }
 
-            CloudException cloudException = ex as CloudException;
-            if (cloudException != null)
+            if (ex is CloudException cloudException)
             {
                 ARMError error = null;
                 try
diff --git a/src/RecoveryServices/RecoveryServices/Utilities/CertUtils.cs b/src/RecoveryServices/RecoveryServices/Utilities/CertUtils.cs
index c77b6d9493..0a0df9c8ab 100644
--- a/src/RecoveryServices/RecoveryServices/Utilities/CertUtils.cs
+++ b/src/RecoveryServices/RecoveryServices/Utilities/CertUtils.cs
@@ -208,7 +208,7 @@ namespace Microsoft.Azure.Commands.RecoveryServices
             {
                 dateString = string.Empty;
             }
-            return string.Format("{0}{1}-{2}-vaultcredentials", prefix, subscriptionId, dateString);
+            return $"{prefix}{subscriptionId}-{dateString}-vaultcredentials";
         }
 
         /// <summary>
diff --git a/src/RecoveryServices/RecoveryServices/Vault/GetAzureRMRecoveryServicesVaultSettingsFile.cs b/src/RecoveryServices/RecoveryServices/Vault/GetAzureRMRecoveryServicesVaultSettingsFile.cs
index 68b58b8a70..0c50a1e6a7 100644
--- a/src/RecoveryServices/RecoveryServices/Vault/GetAzureRMRecoveryServicesVaultSettingsFile.cs
+++ b/src/RecoveryServices/RecoveryServices/Vault/GetAzureRMRecoveryServicesVaultSettingsFile.cs
@@ -247,7 +247,7 @@ namespace Microsoft.Azure.Commands.RecoveryServices
 
                 var dateString = DateTime.Now.ToString("M-d-yyyy");
 
-                var friendlyName = string.Format("{0}{1}-{2}-vaultcredentials", Vault.Name, subscriptionId, dateString);
+                var friendlyName = $"{Vault.Name}{subscriptionId}-{dateString}-vaultcredentials";
 
                 vaultCertificateResponse = RecoveryServicesClient.GetRecoveryServicesClient.VaultCertificates.CreateWithHttpMessagesAsync(
                     Vault.ResourceGroupName,
@@ -318,7 +318,7 @@ namespace Microsoft.Azure.Commands.RecoveryServices
 
                 var dateString = DateTime.Now.ToString("M-d-yyyy");
 
-                var friendlyName = string.Format("{0}{1}-{2}-vaultcredentials", Vault.Name, subscriptionId, dateString);
+                var friendlyName = $"{Vault.Name}{subscriptionId}-{dateString}-vaultcredentials";
                 var vaultCertificateResponse = RecoveryServicesClient.GetRecoveryServicesClient.VaultCertificates.CreateWithHttpMessagesAsync(
                     Vault.ResourceGroupName,
                     Vault.Name,
@@ -453,11 +453,11 @@ namespace Microsoft.Azure.Commands.RecoveryServices
 
             if (string.IsNullOrEmpty(SiteIdentifier) || string.IsNullOrEmpty(SiteFriendlyName))
             {
-                fileName = string.Format("{0}_{1}.VaultCredentials", Vault.Name, DateTime.UtcNow.ToString(format));
+                fileName = $"{Vault.Name}_{DateTime.UtcNow.ToString(format)}.VaultCredentials";
             }
             else
             {
-                fileName = string.Format("{0}_{1}_{2}.VaultCredentials", SiteFriendlyName, Vault.Name, DateTime.UtcNow.ToString(format));
+                fileName = $"{SiteFriendlyName}_{Vault.Name}_{DateTime.UtcNow.ToString(format)}.VaultCredentials";
             }
 
             return fileName;
@@ -621,10 +621,7 @@ namespace Microsoft.Azure.Commands.RecoveryServices
 
                     Utilities.GetResourceProviderNamespaceAndType(Vault.ID, out resourceProviderNamespace, out resourceType);
 
-                    Logger.Instance.WriteDebug(string.Format(
-                        "GenerateVaultCredential resourceProviderNamespace = {0}, resourceType = {1}",
-                        resourceProviderNamespace,
-                        resourceType));
+                    Logger.Instance.WriteDebug($"GenerateVaultCredential resourceProviderNamespace = {resourceProviderNamespace}, resourceType = {resourceType}");
 
                     // Update vault settings with the working vault to generate file
                     Utilities.UpdateCurrentVaultContext(new ASRVaultCreds
diff --git a/src/RedisEnterpriseCache/generated/runtime/Serialization/JsonSerializer.cs b/src/RedisEnterpriseCache/generated/runtime/Serialization/JsonSerializer.cs
index 8cc7499bb3..1e85154bbd 100644
--- a/src/RedisEnterpriseCache/generated/runtime/Serialization/JsonSerializer.cs
+++ b/src/RedisEnterpriseCache/generated/runtime/Serialization/JsonSerializer.cs
@@ -312,7 +312,7 @@ namespace Microsoft.Azure.PowerShell.Cmdlets.RedisEnterpriseCache.Runtime.Json
                     default: return ReadArray((IEnumerable)value);
                 }
             }
-            else if (value is IEnumerable)
+            else if (value is IEnumerable iEnumerable)
             {
                 if (type.IsList && type.ElementType != null)
                 {
@@ -330,7 +330,7 @@ namespace Microsoft.Azure.PowerShell.Cmdlets.RedisEnterpriseCache.Runtime.Json
                     }
                 }
 
-                return ReadArray((IEnumerable)value);
+                return ReadArray(iEnumerable);
             }
             else
             {
diff --git a/src/Relay/Relay/Cmdlets/HybridConnections/NewAzureRelayHybridConnections.cs b/src/Relay/Relay/Cmdlets/HybridConnections/NewAzureRelayHybridConnections.cs
index ecb4e86667..ae00015d31 100644
--- a/src/Relay/Relay/Cmdlets/HybridConnections/NewAzureRelayHybridConnections.cs
+++ b/src/Relay/Relay/Cmdlets/HybridConnections/NewAzureRelayHybridConnections.cs
@@ -88,7 +88,7 @@ namespace Microsoft.Azure.Commands.Relay.Commands.HybridConnection
 
             }
 
-            if(ShouldProcess(target: Name, action:string.Format("Creating new HybridConnections:{0} under NameSpace:{1} ", Name, Namespace)))
+            if(ShouldProcess(target: Name, action:$"Creating new HybridConnections:{Name} under NameSpace:{Namespace} "))
             {
                 WriteObject(Client.CreateOrUpdateHybridConnections(ResourceGroupName, Namespace, Name, hybridConnections));
             }
diff --git a/src/Relay/Relay/Cmdlets/Namespace/NewAzureRelayNamespace.cs b/src/Relay/Relay/Cmdlets/Namespace/NewAzureRelayNamespace.cs
index 8d7dcecb0d..8a825c351f 100644
--- a/src/Relay/Relay/Cmdlets/Namespace/NewAzureRelayNamespace.cs
+++ b/src/Relay/Relay/Cmdlets/Namespace/NewAzureRelayNamespace.cs
@@ -79,7 +79,7 @@ namespace Microsoft.Azure.Commands.Relay.Commands.Namespace
         {
             // Create a new Relay namespaces
             Dictionary<string, string> tagDictionary = TagsConversionHelper.CreateTagDictionary(Tag, validate: true);
-            if (ShouldProcess(target: Name, action: string.Format("Create a new Relay-Namespace:{0} under Resource Group:{1}", Name, ResourceGroupName)))
+            if (ShouldProcess(target: Name, action: $"Create a new Relay-Namespace:{Name} under Resource Group:{ResourceGroupName}"))
             {
                 WriteObject(Client.BeginCreateNamespace(ResourceGroupName, Name, Location, tagDictionary));
             }
diff --git a/src/Relay/Relay/Cmdlets/WcfRelay/NewAzureWcfRelay.cs b/src/Relay/Relay/Cmdlets/WcfRelay/NewAzureWcfRelay.cs
index 4598b65aac..5f2979e90e 100644
--- a/src/Relay/Relay/Cmdlets/WcfRelay/NewAzureWcfRelay.cs
+++ b/src/Relay/Relay/Cmdlets/WcfRelay/NewAzureWcfRelay.cs
@@ -107,7 +107,7 @@ namespace Microsoft.Azure.Commands.Relay.Commands.WcfRelay
 
             }
 
-            if(ShouldProcess(target: Name, action:string.Format("Creating new WcfRelay:{0} under NameSpace:{1} ", Name, Namespace)))
+            if(ShouldProcess(target: Name, action:$"Creating new WcfRelay:{Name} under NameSpace:{Namespace} "))
             {
                 WriteObject(Client.CreateOrUpdateWcfRelay(ResourceGroupName, Namespace, Name, wcfRelay));
             }
diff --git a/src/Relay/Relay/Utilities/RelayClient.cs b/src/Relay/Relay/Utilities/RelayClient.cs
index 4b62ba663f..1dbed777c6 100644
--- a/src/Relay/Relay/Utilities/RelayClient.cs
+++ b/src/Relay/Relay/Utilities/RelayClient.cs
@@ -103,7 +103,7 @@ namespace Microsoft.Azure.Commands.Relay
             var parameter = new RelayUpdateParameters();
                        
 
-            if (relaynamespace.Tags != null && relaynamespace.Tags.Count() > 0)
+            if (relaynamespace.Tags != null && relaynamespace.Tags.Any())
             {
                 parameter.Tags = new Dictionary<string, string>(relaynamespace.Tags);
             }
diff --git a/src/Reservations/Reservations/Cmdlets/MergeReservation.cs b/src/Reservations/Reservations/Cmdlets/MergeReservation.cs
index 2d4758b5a3..6a46a739e4 100644
--- a/src/Reservations/Reservations/Cmdlets/MergeReservation.cs
+++ b/src/Reservations/Reservations/Cmdlets/MergeReservation.cs
@@ -53,7 +53,7 @@ namespace Microsoft.Azure.Commands.Reservations.Cmdlets
 
         private string CreateResourceId(Guid reservationOrderId, Guid reservationId)
         {
-            return string.Format("/providers/Microsoft.Capacity/reservationOrders/{0}/reservations/{1}", reservationOrderId, reservationId);
+            return $"/providers/Microsoft.Capacity/reservationOrders/{reservationOrderId}/reservations/{reservationId}";
         }
     }
 }
diff --git a/src/Reservations/Reservations/Cmdlets/SplitReservation.cs b/src/Reservations/Reservations/Cmdlets/SplitReservation.cs
index e76a158757..bccf4a7646 100644
--- a/src/Reservations/Reservations/Cmdlets/SplitReservation.cs
+++ b/src/Reservations/Reservations/Cmdlets/SplitReservation.cs
@@ -60,7 +60,7 @@ namespace Microsoft.Azure.Commands.Reservations.Cmdlets
 
         private string CreateResourceId(Guid reservationOrderId, Guid reservationId)
         {
-            return string.Format("/providers/Microsoft.Capacity/reservationOrders/{0}/reservations/{1}", reservationOrderId, reservationId);
+            return $"/providers/Microsoft.Capacity/reservationOrders/{reservationOrderId}/reservations/{reservationId}";
         }
     }
 }
diff --git a/src/ResourceGraph/ResourceGraph.Autorest/generated/runtime/Serialization/JsonSerializer.cs b/src/ResourceGraph/ResourceGraph.Autorest/generated/runtime/Serialization/JsonSerializer.cs
index 9ebf82e74d..dcc9d08e8c 100644
--- a/src/ResourceGraph/ResourceGraph.Autorest/generated/runtime/Serialization/JsonSerializer.cs
+++ b/src/ResourceGraph/ResourceGraph.Autorest/generated/runtime/Serialization/JsonSerializer.cs
@@ -312,7 +312,7 @@ namespace Microsoft.Azure.PowerShell.Cmdlets.ResourceGraph.Runtime.Json
                     default: return ReadArray((IEnumerable)value);
                 }
             }
-            else if (value is IEnumerable)
+            else if (value is IEnumerable iEnumerable)
             {
                 if (type.IsList && type.ElementType != null)
                 {
@@ -330,7 +330,7 @@ namespace Microsoft.Azure.PowerShell.Cmdlets.ResourceGraph.Runtime.Json
                     }
                 }
 
-                return ReadArray((IEnumerable)value);
+                return ReadArray(iEnumerable);
             }
             else
             {
diff --git a/src/ResourceGraph/ResourceGraph/Cmdlets/SearchAzureRmGraph.cs b/src/ResourceGraph/ResourceGraph/Cmdlets/SearchAzureRmGraph.cs
index 083e2b7e74..b5001e769f 100644
--- a/src/ResourceGraph/ResourceGraph/Cmdlets/SearchAzureRmGraph.cs
+++ b/src/ResourceGraph/ResourceGraph/Cmdlets/SearchAzureRmGraph.cs
@@ -190,8 +190,7 @@ namespace Microsoft.Azure.Commands.ResourceGraph.Cmdlets
                 var aggregateEx = ex as AggregateException;
                 if (aggregateEx?.InnerException != null && aggregateEx.InnerExceptions.Count == 1)
                 {
-                    var errorResponseEx = aggregateEx.InnerException as ErrorResponseException;
-                    if (errorResponseEx != null)
+                    if (aggregateEx.InnerException is ErrorResponseException errorResponseEx)
                     {
                         var errorRecord = new ErrorRecord(
                             errorResponseEx, errorResponseEx.Body.Error.Code,
@@ -250,7 +249,7 @@ namespace Microsoft.Azure.Commands.ResourceGraph.Cmdlets
                 }
             }
 
-            return queryExtensionToIncludeNames != null && queryExtensionToIncludeNames.Length > 0;
+            return !string.IsNullOrEmpty(queryExtensionToIncludeNames);
         }
 
         /// <summary>
diff --git a/src/ResourceMover/generated/runtime/Serialization/JsonSerializer.cs b/src/ResourceMover/generated/runtime/Serialization/JsonSerializer.cs
index 1b2bab99a4..730333752c 100644
--- a/src/ResourceMover/generated/runtime/Serialization/JsonSerializer.cs
+++ b/src/ResourceMover/generated/runtime/Serialization/JsonSerializer.cs
@@ -312,7 +312,7 @@ namespace Microsoft.Azure.PowerShell.Cmdlets.ResourceMover.Runtime.Json
                     default: return ReadArray((IEnumerable)value);
                 }
             }
-            else if (value is IEnumerable)
+            else if (value is IEnumerable iEnumerable)
             {
                 if (type.IsList && type.ElementType != null)
                 {
@@ -330,7 +330,7 @@ namespace Microsoft.Azure.PowerShell.Cmdlets.ResourceMover.Runtime.Json
                     }
                 }
 
-                return ReadArray((IEnumerable)value);
+                return ReadArray(iEnumerable);
             }
             else
             {
diff --git a/src/Resources/ResourceManager/Components/ApiVersionHelper.cs b/src/Resources/ResourceManager/Components/ApiVersionHelper.cs
index 4e76b2b4f2..24737fb931 100644
--- a/src/Resources/ResourceManager/Components/ApiVersionHelper.cs
+++ b/src/Resources/ResourceManager/Components/ApiVersionHelper.cs
@@ -114,7 +114,7 @@ namespace Microsoft.Azure.Commands.ResourceManager.Cmdlets.Components
 
             var resourceCollectionId = defaultSubscription == null
                 ? "/providers"
-                : string.Format("/subscriptions/{0}/providers", defaultSubscription.Id);
+                : $"/subscriptions/{defaultSubscription.Id}/providers";
 
             var providers = PaginatedResponseHelper.Enumerate(
                 getFirstPage: () => resourceManagerClient
@@ -243,7 +243,7 @@ namespace Microsoft.Azure.Commands.ResourceManager.Cmdlets.Components
             /// <param name="resourceType">The resource type.</param>
             internal static string GetCacheKey(string environmentName, string providerNamespace, string resourceType)
             {
-                return string.Format("{0}/{1}/{2}", environmentName.CoalesceEnumerable(), providerNamespace.CoalesceString(), resourceType.CoalesceString()).ToUpperInvariant();
+                return $"{environmentName.CoalesceEnumerable()}/{providerNamespace.CoalesceString()}/{resourceType.CoalesceString()}".ToUpperInvariant();
             }
         }
     }
diff --git a/src/Resources/ResourceManager/Components/LongRunningOperationHelper.cs b/src/Resources/ResourceManager/Components/LongRunningOperationHelper.cs
index 5ead27ff9a..f2a5f38fa9 100644
--- a/src/Resources/ResourceManager/Components/LongRunningOperationHelper.cs
+++ b/src/Resources/ResourceManager/Components/LongRunningOperationHelper.cs
@@ -132,7 +132,7 @@ namespace Microsoft.Azure.Commands.ResourceManager.Cmdlets.Components
                 {
                     this.FailedResult(
                         operationResult,
-                        string.Format("The operation failed because the resource provider returned an unexpected HTTP status code of: '{0}'.", (int)operationResult.HttpStatusCode));
+                        $"The operation failed because the resource provider returned an unexpected HTTP status code of: '{(int)operationResult.HttpStatusCode}'.");
                 }
             }
 
@@ -147,7 +147,7 @@ namespace Microsoft.Azure.Commands.ResourceManager.Cmdlets.Components
             {
                 this.FailedResult(
                     operationResult,
-                    string.Format("The operation failed because the resource provider returned an unexpected HTTP status code of: '{0}'.", (int)operationResult.HttpStatusCode));
+                    $"The operation failed because the resource provider returned an unexpected HTTP status code of: '{(int)operationResult.HttpStatusCode}'.");
             }
 
             return this.IsResourceCreateOrUpdate
@@ -199,7 +199,7 @@ namespace Microsoft.Azure.Commands.ResourceManager.Cmdlets.Components
                     {
                         this.FailedResult(
                             operationResult,
-                            string.Format("The operation failed because resource is in the: '{0}' state. Please check the logs for more details.", provisioningStateJToken));
+                            $"The operation failed because resource is in the: '{provisioningStateJToken}' state. Please check the logs for more details.");
                     }
                 }
                 else
diff --git a/src/Resources/ResourceManager/Components/ResourceIdUtility.cs b/src/Resources/ResourceManager/Components/ResourceIdUtility.cs
index c54653ad06..67c12b1683 100644
--- a/src/Resources/ResourceManager/Components/ResourceIdUtility.cs
+++ b/src/Resources/ResourceManager/Components/ResourceIdUtility.cs
@@ -109,7 +109,7 @@ namespace Microsoft.Azure.Commands.ResourceManager.Cmdlets.Components
                 throw new InvalidOperationException("A resource group cannot be specified without a subscription.");
             }
 
-            return string.Format("/subscriptions/{0}/resourceGroups", Uri.EscapeDataString(subscriptionId.Value.ToString()));
+            return $"/subscriptions/{Uri.EscapeDataString(subscriptionId.Value.ToString())}/resourceGroups";
         }
 
         /// <summary>
@@ -141,7 +141,7 @@ namespace Microsoft.Azure.Commands.ResourceManager.Cmdlets.Components
                 .Cast<object>()
                 .ToArray();
 
-            return string.Format("/subscriptions/{0}/resourceGroups/{1}/providers/{2}/{3}/{4}/{5}", parameteValues);
+            return $"/subscriptions/{parameteValues}/resourceGroups/";
         }
 
         /// <summary>
@@ -411,7 +411,7 @@ namespace Microsoft.Azure.Commands.ResourceManager.Cmdlets.Components
             return getResourceName
                 ? segmentString
                 : includeProviderNamespace
-                    ? string.Format("{0}/{1}", providerNamespace, segmentString)
+                    ? $"{providerNamespace}/{segmentString}"
                     : segmentString;
         }
 
@@ -444,7 +444,7 @@ namespace Microsoft.Azure.Commands.ResourceManager.Cmdlets.Components
         /// <param name="selectLastSegment">When set to true, gets the last segment (default) otherwise gets the first one.</param>
         private static string GetSubstringAfterSegment(string resourceId, string segmentName, bool selectLastSegment = true)
         {
-            var segment = string.Format("/{0}/", segmentName.Trim('/').ToUpperInvariant());
+            var segment = $"/{segmentName.Trim('/').ToUpperInvariant()}/";
 
             var index = selectLastSegment
                 ? resourceId.LastIndexOf(segment, StringComparison.InvariantCultureIgnoreCase)
diff --git a/src/Resources/ResourceManager/Extensions/PsObjectExtensions.cs b/src/Resources/ResourceManager/Extensions/PsObjectExtensions.cs
index 3acb825090..d462bb8735 100644
--- a/src/Resources/ResourceManager/Extensions/PsObjectExtensions.cs
+++ b/src/Resources/ResourceManager/Extensions/PsObjectExtensions.cs
@@ -65,8 +65,7 @@ namespace Microsoft.Azure.Commands.ResourceManager.Cmdlets.Extensions
                 return null;
             }
 
-            var valueAsPsObject = value as PSObject;
-            if (valueAsPsObject != null)
+            if (value is PSObject valueAsPsObject)
             {
                 JObject obj = new JObject();
                 if (valueAsPsObject.BaseObject != null && valueAsPsObject.BaseObject is IDictionary)
@@ -100,8 +99,7 @@ namespace Microsoft.Azure.Commands.ResourceManager.Cmdlets.Extensions
                 return obj;
             }
 
-            var valueAsDictionary = value as IDictionary;
-            if (valueAsDictionary != null)
+            if (value is IDictionary valueAsDictionary)
             {
                 JObject obj = new JObject();
                 var dictionaryEntries = valueAsDictionary is IDictionary<string, object>
@@ -120,8 +118,7 @@ namespace Microsoft.Azure.Commands.ResourceManager.Cmdlets.Extensions
                 return obj;
             }
 
-            var valueAsIList = value as IList;
-            if (valueAsIList != null)
+            if (value is IList valueAsIList)
             {
                 var tmpList = new List<JToken>();
                 foreach (var v in valueAsIList)
diff --git a/src/Resources/ResourceManager/Handlers/RetryHandler.cs b/src/Resources/ResourceManager/Handlers/RetryHandler.cs
index 4c66f0900b..f4f13b2898 100644
--- a/src/Resources/ResourceManager/Handlers/RetryHandler.cs
+++ b/src/Resources/ResourceManager/Handlers/RetryHandler.cs
@@ -81,10 +81,7 @@ namespace Microsoft.Azure.Commands.ResourceManager.Cmdlets.Handlers
                     }
                 }
 
-                if (response != null)
-                {
-                    response.Dispose();
-                }
+                response?.Dispose();
 
                 await Task.Delay(delay: RetryHandler.GetDelay(attempt), cancellationToken: cancellationToken)
                     .ConfigureAwait(continueOnCapturedContext: false);
diff --git a/src/Resources/ResourceManager/Implementation/CmdletBase/DeploymentScriptCmdletBase.cs b/src/Resources/ResourceManager/Implementation/CmdletBase/DeploymentScriptCmdletBase.cs
index 64e55a060b..f674178152 100644
--- a/src/Resources/ResourceManager/Implementation/CmdletBase/DeploymentScriptCmdletBase.cs
+++ b/src/Resources/ResourceManager/Implementation/CmdletBase/DeploymentScriptCmdletBase.cs
@@ -54,7 +54,7 @@ namespace Microsoft.Azure.Commands.ResourceManager.Cmdlets.Implementation
         {
             var aggEx = ex as AggregateException;
 
-            if (aggEx != null && aggEx.InnerExceptions != null)
+            if (aggEx?.InnerExceptions != null)
             {
                 foreach (var e in aggEx.Flatten().InnerExceptions)
                 {
diff --git a/src/Resources/ResourceManager/Implementation/CmdletBase/ResourceWithParameterCmdletBase.cs b/src/Resources/ResourceManager/Implementation/CmdletBase/ResourceWithParameterCmdletBase.cs
index b4125c3e6d..9884393c47 100644
--- a/src/Resources/ResourceManager/Implementation/CmdletBase/ResourceWithParameterCmdletBase.cs
+++ b/src/Resources/ResourceManager/Implementation/CmdletBase/ResourceWithParameterCmdletBase.cs
@@ -332,8 +332,7 @@ namespace Microsoft.Azure.Commands.ResourceManager.Cmdlets.Implementation
                 foreach (var parameterKey in templateParameterObject.Keys)
                 {
                     // Let default behavior of a value parameter if not a KeyVault reference Hashtable
-                    var hashtableParameter = templateParameterObject[parameterKey] as Hashtable;
-                    if (hashtableParameter != null && hashtableParameter.ContainsKey("reference"))
+                    if (templateParameterObject[parameterKey] is Hashtable hashtableParameter && hashtableParameter.ContainsKey("reference"))
                     {
                         prameterObject[parameterKey] = templateParameterObject[parameterKey];
                     }
diff --git a/src/Resources/ResourceManager/Implementation/CmdletBase/TemplateSpecCmdletBase.cs b/src/Resources/ResourceManager/Implementation/CmdletBase/TemplateSpecCmdletBase.cs
index c282e366ae..1840baebbc 100644
--- a/src/Resources/ResourceManager/Implementation/CmdletBase/TemplateSpecCmdletBase.cs
+++ b/src/Resources/ResourceManager/Implementation/CmdletBase/TemplateSpecCmdletBase.cs
@@ -48,7 +48,7 @@ namespace Microsoft.Azure.Commands.ResourceManager.Cmdlets.Implementation
         {
             var aggEx = ex as AggregateException;
 
-            if (aggEx != null && aggEx.InnerExceptions != null)
+            if (aggEx?.InnerExceptions != null)
             {
                 foreach (var e in aggEx.Flatten().InnerExceptions)
                 {
diff --git a/src/Resources/ResourceManager/Implementation/Features/GetAzureProviderFeatureCmdlet.cs b/src/Resources/ResourceManager/Implementation/Features/GetAzureProviderFeatureCmdlet.cs
index b1a62b76d1..b34caa9780 100644
--- a/src/Resources/ResourceManager/Implementation/Features/GetAzureProviderFeatureCmdlet.cs
+++ b/src/Resources/ResourceManager/Implementation/Features/GetAzureProviderFeatureCmdlet.cs
@@ -72,7 +72,7 @@ namespace Microsoft.Azure.Commands.ResourceManager.Cmdlets.Implementation
                     break;
 
                 default:
-                    throw new ApplicationException(string.Format("Unknown parameter set encountered: '{0}'", this.ParameterSetName));
+                    throw new ApplicationException($"Unknown parameter set encountered: '{this.ParameterSetName}'");
             }
         }
     }
diff --git a/src/Resources/ResourceManager/Implementation/Lock/NewAzureResourceLockCmdlet.cs b/src/Resources/ResourceManager/Implementation/Lock/NewAzureResourceLockCmdlet.cs
index 21ca959c0b..ba969f102c 100644
--- a/src/Resources/ResourceManager/Implementation/Lock/NewAzureResourceLockCmdlet.cs
+++ b/src/Resources/ResourceManager/Implementation/Lock/NewAzureResourceLockCmdlet.cs
@@ -88,7 +88,7 @@ namespace Microsoft.Azure.Commands.ResourceManager.Cmdlets.Implementation
                           resourceId: resourceId,
                           apiVersion: this.LockApiVersion);
 
-                    var activity = string.Format("PUT {0}", managementUri.PathAndQuery);
+                    var activity = $"PUT {managementUri.PathAndQuery}";
                     var result = this.GetLongRunningOperationTracker(activityName: activity, isResourceCreateOrUpdate: true)
                         .WaitOnOperation(operationResult: operationResult);
 
diff --git a/src/Resources/ResourceManager/Implementation/Lock/RemoveAzureResourceLockCmdlet.cs b/src/Resources/ResourceManager/Implementation/Lock/RemoveAzureResourceLockCmdlet.cs
index b720add40a..72fc92e333 100644
--- a/src/Resources/ResourceManager/Implementation/Lock/RemoveAzureResourceLockCmdlet.cs
+++ b/src/Resources/ResourceManager/Implementation/Lock/RemoveAzureResourceLockCmdlet.cs
@@ -49,7 +49,7 @@ namespace Microsoft.Azure.Commands.ResourceManager.Cmdlets.Implementation
             var resourceId = this.GetResourceId(this.LockName);
             this.ConfirmAction(
                 this.Force,
-                string.Format("Are you sure you want to delete the following lock: {0}", resourceId),
+                $"Are you sure you want to delete the following lock: {resourceId}",
                 "Deleting the lock...",
                 resourceId,
                 () =>
@@ -63,7 +63,7 @@ namespace Microsoft.Azure.Commands.ResourceManager.Cmdlets.Implementation
 
                     if (operationResult.HttpStatusCode == System.Net.HttpStatusCode.NoContent)
                     {
-                        throw new PSInvalidOperationException(string.Format("The resource lock '{0}' could not be found.", resourceId));
+                        throw new PSInvalidOperationException($"The resource lock '{resourceId}' could not be found.");
                     }
 
                     var managementUri = this.GetResourcesClient()
@@ -71,7 +71,7 @@ namespace Microsoft.Azure.Commands.ResourceManager.Cmdlets.Implementation
                             resourceId: resourceId,
                             apiVersion: this.LockApiVersion);
 
-                    var activity = string.Format("DELETE {0}", managementUri.PathAndQuery);
+                    var activity = $"DELETE {managementUri.PathAndQuery}";
 
                     var result = this.GetLongRunningOperationTracker(activityName: activity, isResourceCreateOrUpdate: false)
                         .WaitOnOperation(operationResult: operationResult);
diff --git a/src/Resources/ResourceManager/Implementation/Lock/ResourceLockManagementCmdletBase.cs b/src/Resources/ResourceManager/Implementation/Lock/ResourceLockManagementCmdletBase.cs
index 6090060a2e..92316f0538 100644
--- a/src/Resources/ResourceManager/Implementation/Lock/ResourceLockManagementCmdletBase.cs
+++ b/src/Resources/ResourceManager/Implementation/Lock/ResourceLockManagementCmdletBase.cs
@@ -126,7 +126,7 @@ namespace Microsoft.Azure.Commands.ResourceManager.Cmdlets.Implementation
                     return this.LockId;
                 }
 
-                throw new InvalidOperationException(string.Format("The Id '{0}' does not belong to a lock.", this.LockId));
+                throw new InvalidOperationException($"The Id '{this.LockId}' does not belong to a lock.");
             }
 
             return !string.IsNullOrWhiteSpace(this.Scope)
diff --git a/src/Resources/ResourceManager/Implementation/ManagedApplications/GetAzureManagedApplication.cs b/src/Resources/ResourceManager/Implementation/ManagedApplications/GetAzureManagedApplication.cs
index 94409dd3e3..a3c8e12326 100644
--- a/src/Resources/ResourceManager/Implementation/ManagedApplications/GetAzureManagedApplication.cs
+++ b/src/Resources/ResourceManager/Implementation/ManagedApplications/GetAzureManagedApplication.cs
@@ -131,24 +131,15 @@ namespace Microsoft.Azure.Commands.ResourceManager.Cmdlets.Implementation
             var subscriptionId = DefaultContext.Subscription.Id;
             if (string.IsNullOrEmpty(this.Name) && string.IsNullOrEmpty(this.ResourceGroupName))
             {
-                return string.Format("/subscriptions/{0}/providers/{1}",
-                    subscriptionId.ToString(),
-                    Constants.MicrosoftApplicationType);
+                return $"/subscriptions/{subscriptionId.ToString()}/providers/{Constants.MicrosoftApplicationType}";
             }
             else if (string.IsNullOrEmpty(this.Name) && !string.IsNullOrEmpty(this.ResourceGroupName))
             {
-                return string.Format("/subscriptions/{0}/resourcegroups/{1}/providers/{2}",
-                    subscriptionId.ToString(),
-                    this.ResourceGroupName,
-                    Constants.MicrosoftApplicationType);
+                return $"/subscriptions/{subscriptionId.ToString()}/resourcegroups/{this.ResourceGroupName}/providers/{Constants.MicrosoftApplicationType}";
             }
             else if (!string.IsNullOrEmpty(this.Name) && !string.IsNullOrEmpty(this.ResourceGroupName))
             {
-                return string.Format("/subscriptions/{0}/resourcegroups/{1}/providers/{2}/{3}",
-                    subscriptionId.ToString(),
-                    this.ResourceGroupName,
-                    Constants.MicrosoftApplicationType,
-                    this.Name);
+                return $"/subscriptions/{subscriptionId.ToString()}/resourcegroups/{this.ResourceGroupName}/providers/{Constants.MicrosoftApplicationType}/{this.Name}";
             }
             return this.Id;
         }
diff --git a/src/Resources/ResourceManager/Implementation/ManagedApplications/GetAzureManagedApplicationDefinition.cs b/src/Resources/ResourceManager/Implementation/ManagedApplications/GetAzureManagedApplicationDefinition.cs
index 009e38e3b5..eb77261c2b 100644
--- a/src/Resources/ResourceManager/Implementation/ManagedApplications/GetAzureManagedApplicationDefinition.cs
+++ b/src/Resources/ResourceManager/Implementation/ManagedApplications/GetAzureManagedApplicationDefinition.cs
@@ -126,18 +126,11 @@ namespace Microsoft.Azure.Commands.ResourceManager.Cmdlets.Implementation
             var subscriptionId = DefaultContext.Subscription.Id;
             if(string.IsNullOrEmpty(this.Name) && !string.IsNullOrEmpty(this.ResourceGroupName))
             {
-                return string.Format("/subscriptions/{0}/resourcegroups/{1}/providers/{2}",
-                    subscriptionId.ToString(),
-                    this.ResourceGroupName,
-                    Constants.MicrosoftApplicationDefinitionType);
+                return $"/subscriptions/{subscriptionId.ToString()}/resourcegroups/{this.ResourceGroupName}/providers/{Constants.MicrosoftApplicationDefinitionType}";
             }
             else if (!string.IsNullOrEmpty(this.Name) && !string.IsNullOrEmpty(this.ResourceGroupName))
             {
-                return string.Format("/subscriptions/{0}/resourcegroups/{1}/providers/{2}/{3}",
-                    subscriptionId.ToString(),
-                    this.ResourceGroupName,
-                    Constants.MicrosoftApplicationDefinitionType,
-                    this.Name);
+                return $"/subscriptions/{subscriptionId.ToString()}/resourcegroups/{this.ResourceGroupName}/providers/{Constants.MicrosoftApplicationDefinitionType}/{this.Name}";
             }
             return this.Id;
         }
diff --git a/src/Resources/ResourceManager/Implementation/ManagedApplications/NewAzureManagedApplication.cs b/src/Resources/ResourceManager/Implementation/ManagedApplications/NewAzureManagedApplication.cs
index f16a5712ed..17fe530467 100644
--- a/src/Resources/ResourceManager/Implementation/ManagedApplications/NewAzureManagedApplication.cs
+++ b/src/Resources/ResourceManager/Implementation/ManagedApplications/NewAzureManagedApplication.cs
@@ -125,7 +125,7 @@ namespace Microsoft.Azure.Commands.ResourceManager.Cmdlets.Implementation
                       apiVersion: apiVersion,
                       odataQuery: null);
 
-                var activity = string.Format("PUT {0}", managementUri.PathAndQuery);
+                var activity = $"PUT {managementUri.PathAndQuery}";
                 var result = this.GetLongRunningOperationTracker(activityName: activity, isResourceCreateOrUpdate: true)
                     .WaitOnOperation(operationResult: operationResult);
 
@@ -139,11 +139,7 @@ namespace Microsoft.Azure.Commands.ResourceManager.Cmdlets.Implementation
         private string GetResourceId()
         {
             var subscriptionId = DefaultContext.Subscription.Id;
-            return string.Format("/subscriptions/{0}/resourcegroups/{1}/providers/{2}/{3}",
-                subscriptionId.ToString(),
-                this.ResourceGroupName,
-                Constants.MicrosoftApplicationType,
-                this.Name);
+            return $"/subscriptions/{subscriptionId.ToString()}/resourcegroups/{this.ResourceGroupName}/providers/{Constants.MicrosoftApplicationType}/{this.Name}";
         }
 
         /// <summary>
@@ -159,7 +155,7 @@ namespace Microsoft.Azure.Commands.ResourceManager.Cmdlets.Implementation
                 Kind = this.Kind,
                 Properties = new ApplicationProperties
                 {
-                    ManagedResourceGroupId = string.Format("/subscriptions/{0}/resourcegroups/{1}", Guid.Parse(DefaultContext.Subscription.Id), this.ManagedResourceGroupName),
+                    ManagedResourceGroupId = $"/subscriptions/{Guid.Parse(DefaultContext.Subscription.Id)}/resourcegroups/{this.ManagedResourceGroupName}",
                     ApplicationDefinitionId =this.ManagedApplicationDefinitionId ?? null,
                     Parameters = this.Parameter == null ? null : JObject.Parse(this.GetObjectFromParameter(this.Parameter).ToString())
                 },
diff --git a/src/Resources/ResourceManager/Implementation/ManagedApplications/NewAzureManagedApplicationDefinition.cs b/src/Resources/ResourceManager/Implementation/ManagedApplications/NewAzureManagedApplicationDefinition.cs
index 9fd7a8e6c3..e99c8fe33d 100644
--- a/src/Resources/ResourceManager/Implementation/ManagedApplications/NewAzureManagedApplicationDefinition.cs
+++ b/src/Resources/ResourceManager/Implementation/ManagedApplications/NewAzureManagedApplicationDefinition.cs
@@ -147,7 +147,7 @@ namespace Microsoft.Azure.Commands.ResourceManager.Cmdlets.Implementation
                       apiVersion: apiVersion,
                       odataQuery: null);
 
-                var activity = string.Format("PUT {0}", managementUri.PathAndQuery);
+                var activity = $"PUT {managementUri.PathAndQuery}";
                 var result = this.GetLongRunningOperationTracker(activityName: activity, isResourceCreateOrUpdate: true)
                     .WaitOnOperation(operationResult: operationResult);
                 this.WriteObject(this.GetOutputObjects("ManagedApplicationDefinitionId", JObject.Parse(result)), enumerateCollection: true);
@@ -160,11 +160,7 @@ namespace Microsoft.Azure.Commands.ResourceManager.Cmdlets.Implementation
         private string GetResourceId()
         {
             var subscriptionId = DefaultContext.Subscription.Id;
-            return string.Format("/subscriptions/{0}/resourcegroups/{1}/providers/{2}/{3}",
-                subscriptionId.ToString(),
-                this.ResourceGroupName,
-                Constants.MicrosoftApplicationDefinitionType,
-                this.Name);
+            return $"/subscriptions/{subscriptionId.ToString()}/resourcegroups/{this.ResourceGroupName}/providers/{Constants.MicrosoftApplicationDefinitionType}/{this.Name}";
         }
 
         /// <summary>
diff --git a/src/Resources/ResourceManager/Implementation/ManagedApplications/RemoveAzureManagedApplication.cs b/src/Resources/ResourceManager/Implementation/ManagedApplications/RemoveAzureManagedApplication.cs
index 18ecda2e7e..051b1268bf 100644
--- a/src/Resources/ResourceManager/Implementation/ManagedApplications/RemoveAzureManagedApplication.cs
+++ b/src/Resources/ResourceManager/Implementation/ManagedApplications/RemoveAzureManagedApplication.cs
@@ -84,7 +84,7 @@ namespace Microsoft.Azure.Commands.ResourceManager.Cmdlets.Implementation
 
             this.ConfirmAction(
                 this.Force,
-                string.Format("Are you sure you want to delete the following managed application: {0}", resourceId),
+                $"Are you sure you want to delete the following managed application: {resourceId}",
                 "Deleting the managed application...",
                 resourceId,
                 () =>
@@ -103,7 +103,7 @@ namespace Microsoft.Azure.Commands.ResourceManager.Cmdlets.Implementation
                             apiVersion: apiVersion,
                             odataQuery: null);
 
-                    var activity = string.Format("DELETE {0}", managementUri.PathAndQuery);
+                    var activity = $"DELETE {managementUri.PathAndQuery}";
 
                     this.GetLongRunningOperationTracker(activityName: activity, isResourceCreateOrUpdate: false)
                         .WaitOnOperation(operationResult: operationResult);
@@ -118,11 +118,7 @@ namespace Microsoft.Azure.Commands.ResourceManager.Cmdlets.Implementation
         protected string GetResourceId()
         {
             var subscriptionId = DefaultContext.Subscription.Id;
-            return string.Format("/subscriptions/{0}/resourcegroups/{1}/providers/{2}/{3}",
-                subscriptionId.ToString(),
-                this.ResourceGroupName,
-                Constants.MicrosoftApplicationType,
-                this.Name);
+            return $"/subscriptions/{subscriptionId.ToString()}/resourcegroups/{this.ResourceGroupName}/providers/{Constants.MicrosoftApplicationType}/{this.Name}";
         }
     }
 }
diff --git a/src/Resources/ResourceManager/Implementation/ManagedApplications/RemoveAzureManagedApplicationDefinition.cs b/src/Resources/ResourceManager/Implementation/ManagedApplications/RemoveAzureManagedApplicationDefinition.cs
index 3d3c76d58e..24e2261d9e 100644
--- a/src/Resources/ResourceManager/Implementation/ManagedApplications/RemoveAzureManagedApplicationDefinition.cs
+++ b/src/Resources/ResourceManager/Implementation/ManagedApplications/RemoveAzureManagedApplicationDefinition.cs
@@ -84,7 +84,7 @@ namespace Microsoft.Azure.Commands.ResourceManager.Cmdlets.Implementation
 
             this.ConfirmAction(
                 this.Force,
-                string.Format("Are you sure you want to delete the following managed application definition: {0}", resourceId),
+                $"Are you sure you want to delete the following managed application definition: {resourceId}",
                 "Deleting the managed application definition...",
                 resourceId,
                 () =>
@@ -103,7 +103,7 @@ namespace Microsoft.Azure.Commands.ResourceManager.Cmdlets.Implementation
                             apiVersion: apiVersion,
                             odataQuery: null);
 
-                    var activity = string.Format("DELETE {0}", managementUri.PathAndQuery);
+                    var activity = $"DELETE {managementUri.PathAndQuery}";
 
                     this.GetLongRunningOperationTracker(activityName: activity, isResourceCreateOrUpdate: false)
                         .WaitOnOperation(operationResult: operationResult);
@@ -118,11 +118,7 @@ namespace Microsoft.Azure.Commands.ResourceManager.Cmdlets.Implementation
         protected string GetResourceId()
         {
             var subscriptionId = DefaultContext.Subscription.Id;
-            return string.Format("/subscriptions/{0}/resourcegroups/{1}/providers/{2}/{3}",
-                subscriptionId.ToString(),
-                this.ResourceGroupName,
-                Constants.MicrosoftApplicationDefinitionType,
-                this.Name);
+            return $"/subscriptions/{subscriptionId.ToString()}/resourcegroups/{this.ResourceGroupName}/providers/{Constants.MicrosoftApplicationDefinitionType}/{this.Name}";
         }
     }
 }
diff --git a/src/Resources/ResourceManager/Implementation/ManagedApplications/SetAzureManagedApplication.cs b/src/Resources/ResourceManager/Implementation/ManagedApplications/SetAzureManagedApplication.cs
index e6766a060e..425f4dd2e1 100644
--- a/src/Resources/ResourceManager/Implementation/ManagedApplications/SetAzureManagedApplication.cs
+++ b/src/Resources/ResourceManager/Implementation/ManagedApplications/SetAzureManagedApplication.cs
@@ -148,7 +148,7 @@ namespace Microsoft.Azure.Commands.ResourceManager.Cmdlets.Implementation
                       apiVersion: apiVersion,
                       odataQuery: null);
 
-                var activity = string.Format("PUT {0}", managementUri.PathAndQuery);
+                var activity = $"PUT {managementUri.PathAndQuery}";
                 var result = this.GetLongRunningOperationTracker(activityName: activity, isResourceCreateOrUpdate: true)
                     .WaitOnOperation(operationResult: operationResult);
 
@@ -162,11 +162,7 @@ namespace Microsoft.Azure.Commands.ResourceManager.Cmdlets.Implementation
         private string GetResourceId()
         {
             var subscriptionId = DefaultContext.Subscription.Id;
-            return string.Format("/subscriptions/{0}/resourcegroups/{1}/providers/{2}/{3}",
-                subscriptionId.ToString(),
-                this.ResourceGroupName,
-                Constants.MicrosoftApplicationType,
-                this.Name);
+            return $"/subscriptions/{subscriptionId.ToString()}/resourcegroups/{this.ResourceGroupName}/providers/{Constants.MicrosoftApplicationType}/{this.Name}";
         }
 
         /// <summary>
@@ -231,7 +227,7 @@ namespace Microsoft.Azure.Commands.ResourceManager.Cmdlets.Implementation
                 {
                     ManagedResourceGroupId = string.IsNullOrEmpty(this.ManagedResourceGroupName)
                         ? resource.Properties["managedResourceGroupId"].ToString()
-                        : string.Format("/subscriptions/{0}/resourcegroups/{1}", Guid.Parse(DefaultContext.Subscription.Id), this.ManagedResourceGroupName),
+                        : $"/subscriptions/{Guid.Parse(DefaultContext.Subscription.Id)}/resourcegroups/{this.ManagedResourceGroupName}",
                     ApplicationDefinitionId =this.ManagedApplicationDefinitionId ?? resource.Properties["applicationDefinitionId"].ToString(),
                     Parameters = this.Parameter == null 
                     ? (resource.Properties["parameters"] != null ? JObject.Parse(resource.Properties["parameters"].ToString()) : null)
diff --git a/src/Resources/ResourceManager/Implementation/ManagedApplications/SetAzureManagedApplicationDefinition.cs b/src/Resources/ResourceManager/Implementation/ManagedApplications/SetAzureManagedApplicationDefinition.cs
index 9cdbea4819..1babf91b14 100644
--- a/src/Resources/ResourceManager/Implementation/ManagedApplications/SetAzureManagedApplicationDefinition.cs
+++ b/src/Resources/ResourceManager/Implementation/ManagedApplications/SetAzureManagedApplicationDefinition.cs
@@ -130,7 +130,7 @@ namespace Microsoft.Azure.Commands.ResourceManager.Cmdlets.Implementation
                       apiVersion: apiVersion,
                       odataQuery: null);
 
-                var activity = string.Format("PUT {0}", managementUri.PathAndQuery);
+                var activity = $"PUT {managementUri.PathAndQuery}";
                 var result = this.GetLongRunningOperationTracker(activityName: activity, isResourceCreateOrUpdate: true)
                     .WaitOnOperation(operationResult: operationResult);
                 this.WriteObject(this.GetOutputObjects("ManagedApplicationDefinitionId", JObject.Parse(result)), enumerateCollection: true);
@@ -143,10 +143,7 @@ namespace Microsoft.Azure.Commands.ResourceManager.Cmdlets.Implementation
         private string GetResourceId()
         {
             var subscriptionId = DefaultContext.Subscription.Id;
-            return string.Format("/subscriptions/{0}/providers/{1}/{2}",
-                subscriptionId.ToString(),
-                Constants.MicrosoftApplicationDefinitionType,
-                this.Name);
+            return $"/subscriptions/{subscriptionId.ToString()}/providers/{Constants.MicrosoftApplicationDefinitionType}/{this.Name}";
         }
 
         /// <summary>
diff --git a/src/Resources/ResourceManager/Implementation/Policy/NewAzurePolicyAssignment.cs b/src/Resources/ResourceManager/Implementation/Policy/NewAzurePolicyAssignment.cs
index 414bc25e18..4cf69150a4 100644
--- a/src/Resources/ResourceManager/Implementation/Policy/NewAzurePolicyAssignment.cs
+++ b/src/Resources/ResourceManager/Implementation/Policy/NewAzurePolicyAssignment.cs
@@ -173,7 +173,7 @@ namespace Microsoft.Azure.Commands.ResourceManager.Cmdlets.Implementation
                   apiVersion: apiVersion,
                   odataQuery: null);
 
-            var activity = string.Format("PUT {0}", managementUri.PathAndQuery);
+            var activity = $"PUT {managementUri.PathAndQuery}";
             var result = this.GetLongRunningOperationTracker(activityName: activity, isResourceCreateOrUpdate: true)
                 .WaitOnOperation(operationResult: operationResult);
 
@@ -238,13 +238,12 @@ namespace Microsoft.Azure.Commands.ResourceManager.Cmdlets.Implementation
             {
                 foreach (var param in parameters.Properties)
                 {
-                    var paramValue = param.Value as PSObject;
-                    if (paramValue != null)
+                    if (param.Value is PSObject paramValue)
                     {
                         var type = paramValue.Properties["type"];
                         var typeString = type != null ? type.Value.ToString() : string.Empty;
                         var description = paramValue.GetPSObjectProperty("metadata.description");
-                        var helpString = description != null ? description.ToString() : string.Format("The {0} policy parameter.", param.Name);
+                        var helpString = description != null ? description.ToString() : $"The {param.Name} policy parameter.";
                         var dp = new RuntimeDefinedParameter
                         {
                             Name = param.Name,
diff --git a/src/Resources/ResourceManager/Implementation/Policy/NewAzurePolicyDefinition.cs b/src/Resources/ResourceManager/Implementation/Policy/NewAzurePolicyDefinition.cs
index 27f21801bb..33478ee83e 100644
--- a/src/Resources/ResourceManager/Implementation/Policy/NewAzurePolicyDefinition.cs
+++ b/src/Resources/ResourceManager/Implementation/Policy/NewAzurePolicyDefinition.cs
@@ -119,7 +119,7 @@ namespace Microsoft.Azure.Commands.ResourceManager.Cmdlets.Implementation
                   apiVersion: apiVersion,
                   odataQuery: null);
 
-            var activity = string.Format("PUT {0}", managementUri.PathAndQuery);
+            var activity = $"PUT {managementUri.PathAndQuery}";
             var result = this.GetLongRunningOperationTracker(activityName: activity, isResourceCreateOrUpdate: true)
                 .WaitOnOperation(operationResult: operationResult);
             this.WriteObject(this.GetOutputPolicyDefinitions(JObject.Parse(result)), enumerateCollection: true);
diff --git a/src/Resources/ResourceManager/Implementation/Policy/NewAzurePolicySetDefinition.cs b/src/Resources/ResourceManager/Implementation/Policy/NewAzurePolicySetDefinition.cs
index 03b2ab2fae..af49529714 100644
--- a/src/Resources/ResourceManager/Implementation/Policy/NewAzurePolicySetDefinition.cs
+++ b/src/Resources/ResourceManager/Implementation/Policy/NewAzurePolicySetDefinition.cs
@@ -120,7 +120,7 @@ namespace Microsoft.Azure.Commands.ResourceManager.Cmdlets.Implementation
                       apiVersion: apiVersion,
                       odataQuery: null);
 
-                var activity = string.Format("PUT {0}", managementUri.PathAndQuery);
+                var activity = $"PUT {managementUri.PathAndQuery}";
                 var result = this.GetLongRunningOperationTracker(activityName: activity, isResourceCreateOrUpdate: true)
                     .WaitOnOperation(operationResult: operationResult);
 
diff --git a/src/Resources/ResourceManager/Implementation/Policy/PolicyCmdletBase.cs b/src/Resources/ResourceManager/Implementation/Policy/PolicyCmdletBase.cs
index 1a9cef1632..14755c83d9 100644
--- a/src/Resources/ResourceManager/Implementation/Policy/PolicyCmdletBase.cs
+++ b/src/Resources/ResourceManager/Implementation/Policy/PolicyCmdletBase.cs
@@ -1,4 +1,5 @@
-﻿// ----------------------------------------------------------------------------------
+﻿using System.Linq;
+// ----------------------------------------------------------------------------------
 //
 // Copyright Microsoft Corporation
 // Licensed under the Apache License, Version 2.0 (the "License");
@@ -366,7 +367,7 @@ namespace Microsoft.Azure.Commands.ResourceManager.Cmdlets.Implementation
 
             // Load dynamic parameters
             var parameters = PowerShellUtilities.GetUsedDynamicParameters(AsJobDynamicParameters, MyInvocation);
-            if (parameters.Count() > 0)
+            if (parameters.Any())
             {
                 return MyInvocation.BoundParameters.ToJObjectWithValue(parameters.Select(p => p.Name));
             }
diff --git a/src/Resources/ResourceManager/Implementation/Policy/RemoveAzurePolicyAssignment.cs b/src/Resources/ResourceManager/Implementation/Policy/RemoveAzurePolicyAssignment.cs
index 3980e7a67f..7a76a40863 100644
--- a/src/Resources/ResourceManager/Implementation/Policy/RemoveAzurePolicyAssignment.cs
+++ b/src/Resources/ResourceManager/Implementation/Policy/RemoveAzurePolicyAssignment.cs
@@ -90,7 +90,7 @@ namespace Microsoft.Azure.Commands.ResourceManager.Cmdlets.Implementation
                             apiVersion: apiVersion,
                             odataQuery: null);
 
-                    var activity = string.Format("DELETE {0}", managementUri.PathAndQuery);
+                    var activity = $"DELETE {managementUri.PathAndQuery}";
 
                     this.GetLongRunningOperationTracker(activityName: activity, isResourceCreateOrUpdate: false)
                         .WaitOnOperation(operationResult: operationResult);
diff --git a/src/Resources/ResourceManager/Implementation/Policy/RemoveAzurePolicyDefinition.cs b/src/Resources/ResourceManager/Implementation/Policy/RemoveAzurePolicyDefinition.cs
index b5cba53d2f..69375dd522 100644
--- a/src/Resources/ResourceManager/Implementation/Policy/RemoveAzurePolicyDefinition.cs
+++ b/src/Resources/ResourceManager/Implementation/Policy/RemoveAzurePolicyDefinition.cs
@@ -89,7 +89,7 @@ namespace Microsoft.Azure.Commands.ResourceManager.Cmdlets.Implementation
 
             this.ConfirmAction(
                 this.Force,
-                string.Format("Are you sure you want to delete the following policy definition: {0}", resourceId),
+                $"Are you sure you want to delete the following policy definition: {resourceId}",
                 "Deleting the policy definition...",
                 resourceId,
                 () =>
@@ -108,7 +108,7 @@ namespace Microsoft.Azure.Commands.ResourceManager.Cmdlets.Implementation
                             apiVersion: apiVersion,
                             odataQuery: null);
 
-                    var activity = string.Format("DELETE {0}", managementUri.PathAndQuery);
+                    var activity = $"DELETE {managementUri.PathAndQuery}";
 
                     this.GetLongRunningOperationTracker(activityName: activity, isResourceCreateOrUpdate: false)
                         .WaitOnOperation(operationResult: operationResult);
diff --git a/src/Resources/ResourceManager/Implementation/Policy/RemoveAzurePolicySetDefinition.cs b/src/Resources/ResourceManager/Implementation/Policy/RemoveAzurePolicySetDefinition.cs
index 3849349e48..b1a134f30b 100644
--- a/src/Resources/ResourceManager/Implementation/Policy/RemoveAzurePolicySetDefinition.cs
+++ b/src/Resources/ResourceManager/Implementation/Policy/RemoveAzurePolicySetDefinition.cs
@@ -89,7 +89,7 @@ namespace Microsoft.Azure.Commands.ResourceManager.Cmdlets.Implementation
 
             this.ConfirmAction(
                 this.Force,
-                string.Format("Are you sure you want to delete the following policy set definition: {0}", resourceId),
+                $"Are you sure you want to delete the following policy set definition: {resourceId}",
                 "Deleting the policy set definition...",
                 resourceId,
                 () =>
@@ -108,7 +108,7 @@ namespace Microsoft.Azure.Commands.ResourceManager.Cmdlets.Implementation
                             apiVersion: apiVersion,
                             odataQuery: null);
 
-                    var activity = string.Format("DELETE {0}", managementUri.PathAndQuery);
+                    var activity = $"DELETE {managementUri.PathAndQuery}";
 
                     this.GetLongRunningOperationTracker(activityName: activity, isResourceCreateOrUpdate: false)
                         .WaitOnOperation(operationResult: operationResult);
diff --git a/src/Resources/ResourceManager/Implementation/Policy/SetAzurePolicyAssignment.cs b/src/Resources/ResourceManager/Implementation/Policy/SetAzurePolicyAssignment.cs
index 9031c61106..73cfceaee3 100644
--- a/src/Resources/ResourceManager/Implementation/Policy/SetAzurePolicyAssignment.cs
+++ b/src/Resources/ResourceManager/Implementation/Policy/SetAzurePolicyAssignment.cs
@@ -154,7 +154,7 @@ namespace Microsoft.Azure.Commands.ResourceManager.Cmdlets.Implementation
                   apiVersion: apiVersion,
                   odataQuery: null);
 
-            var activity = string.Format("PUT {0}", managementUri.PathAndQuery);
+            var activity = $"PUT {managementUri.PathAndQuery}";
             var result = this.GetLongRunningOperationTracker(activityName: activity, isResourceCreateOrUpdate: true)
                 .WaitOnOperation(operationResult: operationResult);
 
diff --git a/src/Resources/ResourceManager/Implementation/Policy/SetAzurePolicyDefinition.cs b/src/Resources/ResourceManager/Implementation/Policy/SetAzurePolicyDefinition.cs
index e605f321de..11b819bc4f 100644
--- a/src/Resources/ResourceManager/Implementation/Policy/SetAzurePolicyDefinition.cs
+++ b/src/Resources/ResourceManager/Implementation/Policy/SetAzurePolicyDefinition.cs
@@ -134,7 +134,7 @@ namespace Microsoft.Azure.Commands.ResourceManager.Cmdlets.Implementation
                   apiVersion: apiVersion,
                   odataQuery: null);
 
-            var activity = string.Format("PUT {0}", managementUri.PathAndQuery);
+            var activity = $"PUT {managementUri.PathAndQuery}";
             var result = this.GetLongRunningOperationTracker(activityName: activity, isResourceCreateOrUpdate: true)
                 .WaitOnOperation(operationResult: operationResult);
 
diff --git a/src/Resources/ResourceManager/Implementation/Policy/SetAzurePolicySetDefinition.cs b/src/Resources/ResourceManager/Implementation/Policy/SetAzurePolicySetDefinition.cs
index c5ac5db631..9a43d43507 100644
--- a/src/Resources/ResourceManager/Implementation/Policy/SetAzurePolicySetDefinition.cs
+++ b/src/Resources/ResourceManager/Implementation/Policy/SetAzurePolicySetDefinition.cs
@@ -134,7 +134,7 @@ namespace Microsoft.Azure.Commands.ResourceManager.Cmdlets.Implementation
                       apiVersion: apiVersion,
                       odataQuery: null);
 
-                var activity = string.Format("PUT {0}", managementUri.PathAndQuery);
+                var activity = $"PUT {managementUri.PathAndQuery}";
                 var result = this.GetLongRunningOperationTracker(activityName: activity, isResourceCreateOrUpdate: true)
                     .WaitOnOperation(operationResult: operationResult);
 
diff --git a/src/Resources/ResourceManager/Implementation/Resource/GetAzureResourceCmdlet.cs b/src/Resources/ResourceManager/Implementation/Resource/GetAzureResourceCmdlet.cs
index 976fcc8426..4cb92dbc24 100644
--- a/src/Resources/ResourceManager/Implementation/Resource/GetAzureResourceCmdlet.cs
+++ b/src/Resources/ResourceManager/Implementation/Resource/GetAzureResourceCmdlet.cs
@@ -195,15 +195,15 @@ namespace Microsoft.Azure.Commands.ResourceManager.Cmdlets.Implementation
             {
                 result = result.Where(r => r.Tags != null &&
                                            r.Tags.Keys != null &&
-                                           r.Tags.Keys.Where(k => string.Equals(k, this.TagName, StringComparison.OrdinalIgnoreCase))
-                                                      .Any());
+                                           r.Tags.Keys.Any(k => string.Equals(k, this.TagName, StringComparison.OrdinalIgnoreCase))
+);
             }
             else if (!string.IsNullOrEmpty(this.TagValue))
             {
                 result = result.Where(r => r.Tags != null &&
                                            r.Tags.Values != null &&
-                                           r.Tags.Values.Where(v => string.Equals(v, this.TagValue, StringComparison.OrdinalIgnoreCase))
-                                                        .Any());
+                                           r.Tags.Values.Any(v => string.Equals(v, this.TagValue, StringComparison.OrdinalIgnoreCase))
+);
             }
 
             WriteObject(result, true);
@@ -217,15 +217,9 @@ namespace Microsoft.Azure.Commands.ResourceManager.Cmdlets.Implementation
         private bool ShouldConstructResourceId(out string resourceId)
         {
             resourceId = null;
-            if (this.IsParameterBound(c => c.Name) && !ContainsWildcard(Name) &&
-                this.IsParameterBound(c => c.ResourceGroupName) && !ContainsWildcard(ResourceGroupName) &&
-                this.IsParameterBound(c => c.ResourceType) && ResourceType.Split('/').Count() == 2)
+            if (this.IsParameterBound(c => c.Name) && !ContainsWildcard(Name) && this.IsParameterBound(c => c.ResourceGroupName) && !ContainsWildcard(ResourceGroupName) && this.IsParameterBound(c => c.ResourceType) && ResourceType.Split('/').Count() == 2)
             {
-                resourceId = string.Format("/subscriptions/{0}/resourceGroups/{1}/providers/{2}/{3}",
-                                            DefaultContext.Subscription.Id,
-                                            ResourceGroupName,
-                                            ResourceType,
-                                            Name);
+                resourceId = $"/subscriptions/{DefaultContext.Subscription.Id}/resourceGroups/{ResourceGroupName}/providers/{ResourceType}/{Name}";
 
                 this.DefaultApiVersion = DetermineApiVersion(resourceId).Result;
 
diff --git a/src/Resources/ResourceManager/Implementation/Resource/InvokeAzureResourceActionCmdlet.cs b/src/Resources/ResourceManager/Implementation/Resource/InvokeAzureResourceActionCmdlet.cs
index 82a21954e4..7412248d88 100644
--- a/src/Resources/ResourceManager/Implementation/Resource/InvokeAzureResourceActionCmdlet.cs
+++ b/src/Resources/ResourceManager/Implementation/Resource/InvokeAzureResourceActionCmdlet.cs
@@ -79,7 +79,7 @@ namespace Microsoft.Azure.Commands.ResourceManager.Cmdlets.Implementation
                             action: this.Action,
                             odataQuery: this.ODataQuery);
 
-                    var activity = string.Format("POST {0}", managementUri.PathAndQuery);
+                    var activity = $"POST {managementUri.PathAndQuery}";
                     var resultString = this.GetLongRunningOperationTracker(activityName: activity, isResourceCreateOrUpdate: false)
                         .WaitOnOperation(operationResult: operationResult);
 
diff --git a/src/Resources/ResourceManager/Implementation/Resource/MoveAzureResourceCmdlet.cs b/src/Resources/ResourceManager/Implementation/Resource/MoveAzureResourceCmdlet.cs
index 3b04eea05a..13086d3f77 100644
--- a/src/Resources/ResourceManager/Implementation/Resource/MoveAzureResourceCmdlet.cs
+++ b/src/Resources/ResourceManager/Implementation/Resource/MoveAzureResourceCmdlet.cs
@@ -114,7 +114,7 @@ namespace Microsoft.Azure.Commands.ResourceManager.Cmdlets.Implementation
             else if (count > 1)
             {
                 throw new InvalidOperationException(
-                    string.Format("The resources being moved must all reside in the same resource group. The resources: {0}", resourceIdsToUse.ConcatStrings(", ")));
+                    $"The resources being moved must all reside in the same resource group. The resources: {resourceIdsToUse.ConcatStrings(", ")}");
             }
 
             var sourceResourceGroup = sourceResourceGroups.Single();
@@ -127,10 +127,7 @@ namespace Microsoft.Azure.Commands.ResourceManager.Cmdlets.Implementation
 
             this.ConfirmAction(
                 this.Force,
-                string.Format(
-                    "Are you sure you want to move these resources to the resource group '{0}' the resources: {1}",
-                    destinationResourceGroup,
-                    Environment.NewLine.AsArray().Concat(resourceIdsToUse).ConcatStrings(Environment.NewLine)),
+                $"Are you sure you want to move these resources to the resource group '{destinationResourceGroup}' the resources: {Environment.NewLine.AsArray().Concat(resourceIdsToUse).ConcatStrings(Environment.NewLine)}",
                 "Moving the resources.",
                 destinationResourceGroup,
                 () =>
@@ -162,7 +159,7 @@ namespace Microsoft.Azure.Commands.ResourceManager.Cmdlets.Implementation
                         apiVersion: apiVersion,
                         action: Constants.MoveResources);
 
-                    var activity = string.Format("POST {0}", managementUri.PathAndQuery);
+                    var activity = $"POST {managementUri.PathAndQuery}";
 
                     var result = this
                         .GetLongRunningOperationTracker(
diff --git a/src/Resources/ResourceManager/Implementation/Resource/NewAzureResourceCmdlet.cs b/src/Resources/ResourceManager/Implementation/Resource/NewAzureResourceCmdlet.cs
index 94a6fea868..89345eaba0 100644
--- a/src/Resources/ResourceManager/Implementation/Resource/NewAzureResourceCmdlet.cs
+++ b/src/Resources/ResourceManager/Implementation/Resource/NewAzureResourceCmdlet.cs
@@ -119,7 +119,7 @@ namespace Microsoft.Azure.Commands.ResourceManager.Cmdlets.Implementation
                           apiVersion: apiVersion,
                           odataQuery: this.ODataQuery);
 
-                    var activity = string.Format("PUT {0}", managementUri.PathAndQuery);
+                    var activity = $"PUT {managementUri.PathAndQuery}";
                     var result = this.GetLongRunningOperationTracker(activityName: activity, isResourceCreateOrUpdate: true)
                         .WaitOnOperation(operationResult: operationResult);
 
diff --git a/src/Resources/ResourceManager/Implementation/Resource/RemoveAzureResourceCmdlet.cs b/src/Resources/ResourceManager/Implementation/Resource/RemoveAzureResourceCmdlet.cs
index ff1423c360..a01880a983 100644
--- a/src/Resources/ResourceManager/Implementation/Resource/RemoveAzureResourceCmdlet.cs
+++ b/src/Resources/ResourceManager/Implementation/Resource/RemoveAzureResourceCmdlet.cs
@@ -36,7 +36,7 @@ namespace Microsoft.Azure.Commands.ResourceManager.Cmdlets.Implementation
 
             this.ConfirmAction(
                 this.Force,
-                string.Format("Are you sure you want to delete the following resource: {0}", resourceId),
+                $"Are you sure you want to delete the following resource: {resourceId}",
                 "Deleting the resource...",
                 resourceId,
                 () =>
@@ -57,7 +57,7 @@ namespace Microsoft.Azure.Commands.ResourceManager.Cmdlets.Implementation
                             apiVersion: apiVersion,
                             odataQuery: this.ODataQuery);
 
-                    var activity = string.Format("DELETE {0}", managementUri.PathAndQuery);
+                    var activity = $"DELETE {managementUri.PathAndQuery}";
 
                     this.GetLongRunningOperationTracker(activityName: activity, isResourceCreateOrUpdate: false)
                         .WaitOnOperation(operationResult: operationResult);
diff --git a/src/Resources/ResourceManager/Implementation/Resource/SetAzureResourceCmdlet.cs b/src/Resources/ResourceManager/Implementation/Resource/SetAzureResourceCmdlet.cs
index 1b664ef7b2..40b8b9844d 100644
--- a/src/Resources/ResourceManager/Implementation/Resource/SetAzureResourceCmdlet.cs
+++ b/src/Resources/ResourceManager/Implementation/Resource/SetAzureResourceCmdlet.cs
@@ -136,7 +136,7 @@ namespace Microsoft.Azure.Commands.ResourceManager.Cmdlets.Implementation
                             apiVersion: apiVersion,
                             odataQuery: this.ODataQuery);
 
-                    var activity = string.Format("{0} {1}", this.ShouldUsePatchSemantics() ? "PATCH" : "PUT", managementUri.PathAndQuery);
+                    var activity = $"{(this.ShouldUsePatchSemantics() ? "PATCH" : "PUT")} {managementUri.PathAndQuery}";
                     var result = this.GetLongRunningOperationTracker(activityName: activity, isResourceCreateOrUpdate: true)
                         .WaitOnOperation(operationResult: operationResult);
 
diff --git a/src/Resources/ResourceManager/Implementation/ResourceGroups/ExportAzureResourceGroupCmdlet.cs b/src/Resources/ResourceManager/Implementation/ResourceGroups/ExportAzureResourceGroupCmdlet.cs
index eb109ae4dc..615edec458 100644
--- a/src/Resources/ResourceManager/Implementation/ResourceGroups/ExportAzureResourceGroupCmdlet.cs
+++ b/src/Resources/ResourceManager/Implementation/ResourceGroups/ExportAzureResourceGroupCmdlet.cs
@@ -127,10 +127,10 @@ namespace Microsoft.Azure.Commands.ResourceManager.Cmdlets.Implementation
 
                     if(error != null)
                     {
-                        WriteWarning(string.Format("{0} : {1}", error.Code, error.Message));
+                        WriteWarning($"{error.Code} : {error.Message}");
                         foreach (var detail in error.Details)
                         {
-                            WriteWarning(string.Format("{0} : {1}", detail.Code, detail.Message));
+                            WriteWarning($"{detail.Code} : {detail.Message}");
                         }
                     }
                 }
@@ -157,7 +157,7 @@ namespace Microsoft.Azure.Commands.ResourceManager.Cmdlets.Implementation
                             apiVersion: apiVersion,
                             action: Constants.ExportTemplate);
 
-                    var activity = string.Format("POST {0}", managementUri.PathAndQuery);
+                    var activity = $"POST {managementUri.PathAndQuery}";
                     var resultString = this.GetLongRunningOperationTracker(activityName: activity,
                         isResourceCreateOrUpdate: false)
                         .WaitOnOperation(operationResult: operationResult);
@@ -169,10 +169,10 @@ namespace Microsoft.Azure.Commands.ResourceManager.Cmdlets.Implementation
                     {
                         if (JObject.Parse(resultString)["error"].TryConvertTo(out ExtendedErrorInfo error))
                         {
-                            WriteWarning(string.Format("{0} : {1}", error.Code, error.Message));
+                            WriteWarning($"{error.Code} : {error.Message}");
                             foreach (var detail in error.Details)
                             {
-                                WriteWarning(string.Format("{0} : {1}", detail.Code, detail.Message));
+                                WriteWarning($"{detail.Code} : {detail.Message}");
                             }
                         }
                     }
diff --git a/src/Resources/ResourceManager/RestClients/ResourceManagerRestRestClient.cs b/src/Resources/ResourceManager/RestClients/ResourceManagerRestRestClient.cs
index b583d41e5e..42c3d7a0a5 100644
--- a/src/Resources/ResourceManager/RestClients/ResourceManagerRestRestClient.cs
+++ b/src/Resources/ResourceManager/RestClients/ResourceManagerRestRestClient.cs
@@ -88,8 +88,8 @@ namespace Microsoft.Azure.Commands.ResourceManager.Cmdlets.RestClients
             var requestUri = this.GetResourceManagementRequestUri(
                 resourceId: string.Empty,
                 action: "resources",
-                top: top == null ? null : string.Format("$top={0}", top.Value),
-                odataQuery: string.IsNullOrWhiteSpace(filter) ? null : string.Format("$filter={0}", filter),
+                top: top == null ? null : $"$top={top.Value}",
+                odataQuery: string.IsNullOrWhiteSpace(filter) ? null : $"$filter={filter}",
                 apiVersion: apiVersion);
 
             return this.SendRequestAsync<ResponseWithContinuation<TType[]>>(
@@ -122,8 +122,8 @@ namespace Microsoft.Azure.Commands.ResourceManager.Cmdlets.RestClients
             var requestUri = this.GetResourceManagementRequestUri(
                 resourceId: resourceId,
                 action: "resources",
-                top: top == null ? null : string.Format("$top={0}", top.Value),
-                odataQuery: string.IsNullOrWhiteSpace(filter) ? null : string.Format("$filter={0}", filter),
+                top: top == null ? null : $"$top={top.Value}",
+                odataQuery: string.IsNullOrWhiteSpace(filter) ? null : $"$filter={filter}",
                 apiVersion: apiVersion);
 
             return this.SendRequestAsync<ResponseWithContinuation<TType[]>>(
@@ -158,8 +158,8 @@ namespace Microsoft.Azure.Commands.ResourceManager.Cmdlets.RestClients
             var requestUri = this.GetResourceManagementRequestUri(
                 resourceId: resourceId,
                 action: "resources",
-                top: top == null ? null : string.Format("$top={0}", top.Value),
-                odataQuery: string.IsNullOrWhiteSpace(filter) ? null : string.Format("$filter={0}", filter),
+                top: top == null ? null : $"$top={top.Value}",
+                odataQuery: string.IsNullOrWhiteSpace(filter) ? null : $"$filter={filter}",
                 apiVersion: apiVersion);
 
             return this.SendRequestAsync<ResponseWithContinuation<TType[]>>(
@@ -447,7 +447,7 @@ namespace Microsoft.Azure.Commands.ResourceManager.Cmdlets.RestClients
             {
                 top,
                 odataQuery,
-                string.Format("api-version={0}", apiVersion)
+                $"api-version={apiVersion}"
             };
 
             var queryString = parts.Where(part => !string.IsNullOrWhiteSpace(part)).ConcatStrings("&");
diff --git a/src/Resources/ResourceManager/SdkClient/ResourceManagerSdkClient.cs b/src/Resources/ResourceManager/SdkClient/ResourceManagerSdkClient.cs
index c1ce8cace0..3d4d5827a9 100644
--- a/src/Resources/ResourceManager/SdkClient/ResourceManagerSdkClient.cs
+++ b/src/Resources/ResourceManager/SdkClient/ResourceManagerSdkClient.cs
@@ -1736,14 +1736,14 @@ namespace Microsoft.Azure.Commands.ResourceManager.Cmdlets.SdkClient
             foreach (var provider in providers)
             {
                 var resourceType = provider.ResourceTypes
-                                           .Where(t => string.Equals(string.Format("{0}/{1}", provider.NamespaceProperty, t.ResourceType), resourceIdentifier.ResourceType, StringComparison.OrdinalIgnoreCase))
-                                           .FirstOrDefault();
+                                           .FirstOrDefault(t => string.Equals($"{provider.NamespaceProperty}/{t.ResourceType}", resourceIdentifier.ResourceType, StringComparison.OrdinalIgnoreCase))
+;
                 if (resourceType == null)
                 {
                     string topLevelResourceType = ResourceTypeUtility.GetTopLevelResourceTypeWithProvider(resourceIdentifier.ResourceType);
                     resourceType = provider.ResourceTypes
-                                               .Where(t => string.Equals(t.ResourceType, topLevelResourceType, StringComparison.OrdinalIgnoreCase))
-                                               .FirstOrDefault();
+                                               .FirstOrDefault(t => string.Equals(t.ResourceType, topLevelResourceType, StringComparison.OrdinalIgnoreCase))
+;
                 }
                 if (resourceType != null)
                 {
diff --git a/src/Resources/ResourceManager/SdkExtensions/ResourcesExtensions.cs b/src/Resources/ResourceManager/SdkExtensions/ResourcesExtensions.cs
index e1d5b7ef97..171461d649 100644
--- a/src/Resources/ResourceManager/SdkExtensions/ResourcesExtensions.cs
+++ b/src/Resources/ResourceManager/SdkExtensions/ResourcesExtensions.cs
@@ -185,8 +185,8 @@ namespace Microsoft.Azure.Commands.ResourceManager.Cmdlets.SdkExtensions
             StringBuilder result = new StringBuilder();
 
             result.AppendLine();
-            result.AppendLine(string.Format("{0, -15}: {1}", "Uri", templateLink.Uri));
-            result.AppendLine(string.Format("{0, -15}: {1}", "ContentVersion", templateLink.ContentVersion));
+            result.AppendLine($"{"Uri",  -15}: {templateLink.Uri}");
+            result.AppendLine($"{"ContentVersion",  -15}: {templateLink.ContentVersion}");
 
             return result.ToString();
         }
diff --git a/src/Resources/Resources.Test/Features/GetAzureProviderFeatureCmdletTests.cs b/src/Resources/Resources.Test/Features/GetAzureProviderFeatureCmdletTests.cs
index 644fd5073d..bbff34b68e 100644
--- a/src/Resources/Resources.Test/Features/GetAzureProviderFeatureCmdletTests.cs
+++ b/src/Resources/Resources.Test/Features/GetAzureProviderFeatureCmdletTests.cs
@@ -171,7 +171,7 @@ namespace Microsoft.Azure.Commands.Resources.Test
               {
                   Assert.IsType<PSProviderFeature[]>(obj);
                   var features = (PSProviderFeature[])obj;
-                  Assert.Equal(listResult.Count(), features.Length);
+                  Assert.Equal(listResult.Count, features.Length);
               });
 
             this.cmdlet.ExecuteCmdlet();
diff --git a/src/Resources/Resources.Test/Mocks/MockDataStore.cs b/src/Resources/Resources.Test/Mocks/MockDataStore.cs
index aac436a99c..276a225676 100644
--- a/src/Resources/Resources.Test/Mocks/MockDataStore.cs
+++ b/src/Resources/Resources.Test/Mocks/MockDataStore.cs
@@ -287,7 +287,7 @@ namespace Microsoft.Azure.Commands.Resources.Test
 
         public void AddCertificate(X509Certificate2 cert)
         {
-            if (cert != null && cert.Thumbprint != null)
+            if (cert?.Thumbprint != null)
             {
                 certStore[cert.Thumbprint] = cert;
             }
diff --git a/src/Resources/Resources.Test/Models.ResourceGroups/ResourceClientTests.cs b/src/Resources/Resources.Test/Models.ResourceGroups/ResourceClientTests.cs
index 52c1a5d924..66862294fb 100644
--- a/src/Resources/Resources.Test/Models.ResourceGroups/ResourceClientTests.cs
+++ b/src/Resources/Resources.Test/Models.ResourceGroups/ResourceClientTests.cs
@@ -505,18 +505,15 @@ namespace Microsoft.Azure.Commands.Resources.Test.Models
                     Assert.Equal("Succeeded", result.ProvisioningState);
                     progressLoggerMock.Verify(
                         f =>
-                            f(string.Format("Resource {0} '{1}' provisioning status is {2}", "Microsoft.Website",
-                                resourceName, "Accepted".ToLower())),
+                            f($"Resource {"Microsoft.Website"} '{resourceName}' provisioning status is {"Accepted".ToLower()}"),
                         Times.Once());
                     progressLoggerMock.Verify(
                         f =>
-                            f(string.Format("Resource {0} '{1}' provisioning status is {2}", "Microsoft.Website",
-                                resourceName, "Running".ToLower())),
+                            f($"Resource {"Microsoft.Website"} '{resourceName}' provisioning status is {"Running".ToLower()}"),
                         Times.Once());
                     progressLoggerMock.Verify(
                         f =>
-                            f(string.Format("Resource {0} '{1}' provisioning status is {2}", "Microsoft.Website",
-                                resourceName, "Succeeded".ToLower())),
+                            f($"Resource {"Microsoft.Website"} '{resourceName}' provisioning status is {"Succeeded".ToLower()}"),
                         Times.Once());
                 });
         }
@@ -575,7 +572,7 @@ namespace Microsoft.Azure.Commands.Resources.Test.Models
                             };
                         }
 
-                        throw new CloudException(String.Format("Deployment '{0}' could not be found.", getDeploymentName));
+                        throw new CloudException($"Deployment '{getDeploymentName}' could not be found.");
                     });
 
             deploymentsMock.Setup(f => f.BeginCreateOrUpdateWithHttpMessagesAsync(
@@ -671,14 +668,14 @@ namespace Microsoft.Azure.Commands.Resources.Test.Models
                             };
                         }
 
-                        throw new CloudException(String.Format("Deployment '{0}' could not be found.", getDeploymentName));
+                        throw new CloudException($"Deployment '{getDeploymentName}' could not be found.");
                     });
 
             Microsoft.Azure.Commands.ResourceManager.Cmdlets.SdkModels.PSResourceGroupDeployment result = resourcesClient.ExecuteResourceGroupDeployment(parameters);
             Assert.Equal(deploymentName, result.DeploymentName);
             Assert.Equal("Succeeded", result.ProvisioningState);
             progressLoggerMock.Verify(
-                f => f(string.Format("Resource {0} '{1}' provisioning status is {2}", "Microsoft.Website", resourceName, "Succeeded".ToLower())),
+                f => f($"Resource {"Microsoft.Website"} '{resourceName}' provisioning status is {"Succeeded".ToLower()}"),
                 Times.Once());
         }
 
@@ -784,10 +781,7 @@ namespace Microsoft.Azure.Commands.Resources.Test.Models
             Assert.NotNull(deploymentFromGet.Properties.Template);
 
             progressLoggerMock.Verify(
-                f => f(string.Format("Resource {0} '{1}' provisioning status is {2}",
-                        "Microsoft.Website",
-                        resourceName,
-                        "Succeeded".ToLower())),
+                f => f($"Resource {"Microsoft.Website"} '{resourceName}' provisioning status is {"Succeeded".ToLower()}"),
                 Times.Once());
         }
 
@@ -865,10 +859,7 @@ namespace Microsoft.Azure.Commands.Resources.Test.Models
             Assert.NotNull(deploymentFromGet.Properties.Template);
 
             errorLoggerMock.Verify(
-                f => f(string.Format("Resource {0} '{1}' failed with message '{2}'",
-                        "Microsoft.Website",
-                        resourceName,
-                        "{\"Code\":\"Conflict\"}")),
+                f => f($"Resource {"Microsoft.Website"} '{resourceName}' failed with message '{"{\"Code\":\"Conflict\"}"}'"),
                 Times.Once());
         }
 
diff --git a/src/Resources/Resources.Test/ScenarioTests/ActiveDirectoryTests.cs b/src/Resources/Resources.Test/ScenarioTests/ActiveDirectoryTests.cs
index 154bfb08bf..811a7469a6 100644
--- a/src/Resources/Resources.Test/ScenarioTests/ActiveDirectoryTests.cs
+++ b/src/Resources/Resources.Test/ScenarioTests/ActiveDirectoryTests.cs
@@ -189,11 +189,7 @@ namespace Microsoft.Azure.Commands.Resources.Test.ScenarioTests
                     newUser = CreateNewAdUser(controllerAdmin);
                     newGroup = CreateNewAdGroup(controllerAdmin);
 
-                    string memberUrl = string.Format(
-                        "{0}{1}/directoryObjects/{2}",
-                        controllerAdmin.GraphClient.BaseUri.AbsoluteUri,
-                        controllerAdmin.GraphClient.TenantID,
-                        newUser.ObjectId);
+                    string memberUrl = $"{controllerAdmin.GraphClient.BaseUri.AbsoluteUri}{controllerAdmin.GraphClient.TenantID}/directoryObjects/{newUser.ObjectId}";
 
                     controllerAdmin.GraphClient.Groups.AddMember(newGroup.ObjectId, new GroupAddMemberParameters(memberUrl));
 
@@ -697,7 +693,7 @@ namespace Microsoft.Azure.Commands.Resources.Test.ScenarioTests
         private Application CreateNewAdApp(ResourcesController controllerAdmin)
         {
             var appName = TestUtilities.GenerateName("adApplication");
-            var url = string.Format("http://{0}/home", appName);
+            var url = $"http://{appName}/home";
             var appParam = new ApplicationCreateParameters
             {
                 AvailableToOtherTenants = false,
diff --git a/src/Resources/Resources.Test/ScenarioTests/RoleAssignmentTests.cs b/src/Resources/Resources.Test/ScenarioTests/RoleAssignmentTests.cs
index 545f27880a..c4cbeae265 100644
--- a/src/Resources/Resources.Test/ScenarioTests/RoleAssignmentTests.cs
+++ b/src/Resources/Resources.Test/ScenarioTests/RoleAssignmentTests.cs
@@ -269,12 +269,7 @@ namespace Microsoft.Azure.Commands.Resources.Test.ScenarioTests
 
                         return new[]
                         {
-                        string.Format(
-                            "CreateRoleAssignment '{0}' '{1}' '{2}' '{3}'",
-                                roleAssignmentId,
-                                newUserObjectId,
-                                roleDefinitionName,
-                                resourceGroup.Name)
+                        $"CreateRoleAssignment '{roleAssignmentId}' '{newUserObjectId}' '{roleDefinitionName}' '{resourceGroup.Name}'"
                         };
                     },
                     // cleanup
@@ -294,10 +289,7 @@ namespace Microsoft.Azure.Commands.Resources.Test.ScenarioTests
 
                         return new[]
                         {
-                        string.Format(
-                            "Test-RaUserPermissions '{0}' '{1}'",
-                            resourceGroup.Name,
-                            userPermission)
+                        $"Test-RaUserPermissions '{resourceGroup.Name}' '{userPermission}'"
                         };
                     },
                     // cleanup
diff --git a/src/Resources/Resources/ActiveDirectory/Cmdlets/AddAzureADGroupMemberCommand.cs b/src/Resources/Resources/ActiveDirectory/Cmdlets/AddAzureADGroupMemberCommand.cs
index 65ee58fa0e..cc2ac89e9f 100644
--- a/src/Resources/Resources/ActiveDirectory/Cmdlets/AddAzureADGroupMemberCommand.cs
+++ b/src/Resources/Resources/ActiveDirectory/Cmdlets/AddAzureADGroupMemberCommand.cs
@@ -84,13 +84,10 @@ namespace Microsoft.Azure.Commands.ActiveDirectory
                 {
                     var groupAddMemberParams = new GroupAddMemberParameters()
                     {
-                        Url = string.Format("{0}{1}/directoryObjects/{2}",
-                                            AzureEnvironmentConstants.AzureGraphEndpoint,
-                                            AzureRmProfileProvider.Instance.Profile.DefaultContext.Tenant.Id,
-                                            memberObjectId)
+                        Url = $"{AzureEnvironmentConstants.AzureGraphEndpoint}{AzureRmProfileProvider.Instance.Profile.DefaultContext.Tenant.Id}/directoryObjects/{memberObjectId}"
                     };
 
-                    if (ShouldProcess(target: memberObjectId.ToString(), action: string.Format("Adding user with object id '{0}' to group with object id '{1}'.", memberObjectId, TargetGroupObjectId)))
+                    if (ShouldProcess(target: memberObjectId.ToString(), action: $"Adding user with object id '{memberObjectId}' to group with object id '{TargetGroupObjectId}'."))
                     {
                         ActiveDirectoryClient.AddGroupMember(TargetGroupObjectId.ToString(), groupAddMemberParams);
                     }
diff --git a/src/Resources/Resources/ActiveDirectory/Cmdlets/NewAzureADAppCredentialCommand.cs b/src/Resources/Resources/ActiveDirectory/Cmdlets/NewAzureADAppCredentialCommand.cs
index 571488a1b1..91573872f2 100644
--- a/src/Resources/Resources/ActiveDirectory/Cmdlets/NewAzureADAppCredentialCommand.cs
+++ b/src/Resources/Resources/ActiveDirectory/Cmdlets/NewAzureADAppCredentialCommand.cs
@@ -116,7 +116,7 @@ namespace Microsoft.Azure.Commands.ActiveDirectory
                         KeyId = KeyId == default(Guid) ? Guid.NewGuid().ToString() : KeyId.ToString(),
                         Value = decodedPassword
                     };
-                    if (ShouldProcess(target: ObjectId, action: string.Format("Adding a new password to application with objectId {0}", ObjectId)))
+                    if (ShouldProcess(target: ObjectId, action: $"Adding a new password to application with objectId {ObjectId}"))
                     {
                         WriteObject(ActiveDirectoryClient.CreateAppPasswordCredential(ObjectId, passwordCredential));
                     }
@@ -133,7 +133,7 @@ namespace Microsoft.Azure.Commands.ActiveDirectory
                         Type = "AsymmetricX509Cert",
                         Usage = "Verify"
                     };
-                    if (ShouldProcess(target: ObjectId, action: string.Format("Adding a new certificate to application with objectId {0}", ObjectId)))
+                    if (ShouldProcess(target: ObjectId, action: $"Adding a new certificate to application with objectId {ObjectId}"))
                     {
                         WriteObject(ActiveDirectoryClient.CreateAppKeyCredential(ObjectId, keyCredential));
                     }
diff --git a/src/Resources/Resources/ActiveDirectory/Cmdlets/NewAzureADApplicationCommand.cs b/src/Resources/Resources/ActiveDirectory/Cmdlets/NewAzureADApplicationCommand.cs
index 188539bb14..34f9ce0883 100644
--- a/src/Resources/Resources/ActiveDirectory/Cmdlets/NewAzureADApplicationCommand.cs
+++ b/src/Resources/Resources/ActiveDirectory/Cmdlets/NewAzureADApplicationCommand.cs
@@ -183,7 +183,7 @@ namespace Microsoft.Azure.Commands.ActiveDirectory
 
             ExecutionBlock(() =>
             {
-                if (ShouldProcess(target: createParameters.DisplayName, action: string.Format("Adding a new application with display name '{0}'", createParameters.DisplayName)))
+                if (ShouldProcess(target: createParameters.DisplayName, action: $"Adding a new application with display name '{createParameters.DisplayName}'"))
                 {
                     WriteObject(ActiveDirectoryClient.CreateApplication(createParameters));
                 }
diff --git a/src/Resources/Resources/ActiveDirectory/Cmdlets/NewAzureADGroupCommand.cs b/src/Resources/Resources/ActiveDirectory/Cmdlets/NewAzureADGroupCommand.cs
index 808b8663b6..cf7e54e469 100644
--- a/src/Resources/Resources/ActiveDirectory/Cmdlets/NewAzureADGroupCommand.cs
+++ b/src/Resources/Resources/ActiveDirectory/Cmdlets/NewAzureADGroupCommand.cs
@@ -50,7 +50,7 @@ namespace Microsoft.Azure.Commands.ActiveDirectory
 
             ExecutionBlock(() =>
             {
-                if (ShouldProcess(target: DisplayName, action: string.Format("Creating a new AD group with display name '{0}'", DisplayName)))
+                if (ShouldProcess(target: DisplayName, action: $"Creating a new AD group with display name '{DisplayName}'"))
                 {
                     WriteObject(ActiveDirectoryClient.CreateGroup(groupCreateParams));
                 }
diff --git a/src/Resources/Resources/ActiveDirectory/Cmdlets/NewAzureADServicePrincipalCommand.cs b/src/Resources/Resources/ActiveDirectory/Cmdlets/NewAzureADServicePrincipalCommand.cs
index 9f53a371b0..4f9383bff2 100644
--- a/src/Resources/Resources/ActiveDirectory/Cmdlets/NewAzureADServicePrincipalCommand.cs
+++ b/src/Resources/Resources/ActiveDirectory/Cmdlets/NewAzureADServicePrincipalCommand.cs
@@ -227,7 +227,7 @@ namespace Microsoft.Azure.Commands.ActiveDirectory
                         appParameters.KeyCredentials = KeyCredential;
                     }
 
-                    if (ShouldProcess(target: appParameters.DisplayName, action: string.Format("Adding a new application for with display name '{0}'", appParameters.DisplayName)))
+                    if (ShouldProcess(target: appParameters.DisplayName, action: $"Adding a new application for with display name '{appParameters.DisplayName}'"))
                     {
                         var application = ActiveDirectoryClient.CreateApplication(appParameters);
                         ApplicationId = application.ApplicationId;
@@ -240,7 +240,7 @@ namespace Microsoft.Azure.Commands.ActiveDirectory
                     AccountEnabled = true
                 };
 
-                if (ShouldProcess(target: createParameters.ApplicationId.ToString(), action: string.Format("Adding a new service principal to be associated with an application having AppId '{0}'", createParameters.ApplicationId)))
+                if (ShouldProcess(target: createParameters.ApplicationId.ToString(), action: $"Adding a new service principal to be associated with an application having AppId '{createParameters.ApplicationId}'"))
                 {
                     var servicePrincipal = ActiveDirectoryClient.CreateServicePrincipal(createParameters);
                     WriteObject(servicePrincipal);
@@ -267,7 +267,7 @@ namespace Microsoft.Azure.Commands.ActiveDirectory
             if (!this.IsParameterBound(c => c.DisplayName))
             {
                 DisplayName = "azure-powershell-" + StartDate.ToString("MM-dd-yyyy-HH-mm-ss");
-                WriteVerbose(string.Format("No display name provided - using the default display name of '{0}'", DisplayName));
+                WriteVerbose($"No display name provided - using the default display name of '{DisplayName}'");
             }
 
             var identifierUri = "http://" + DisplayName;
@@ -299,11 +299,11 @@ namespace Microsoft.Azure.Commands.ActiveDirectory
                     }
                 };
 
-                if (ShouldProcess(target: appParameters.DisplayName, action: string.Format("Adding a new application for with display name '{0}'", appParameters.DisplayName)))
+                if (ShouldProcess(target: appParameters.DisplayName, action: $"Adding a new application for with display name '{appParameters.DisplayName}'"))
                 {
                     var application = ActiveDirectoryClient.CreateApplication(appParameters);
                     ApplicationId = application.ApplicationId;
-                    WriteVerbose(string.Format("No application id provided - created new AD application with application id '{0}'", ApplicationId));
+                    WriteVerbose($"No application id provided - created new AD application with application id '{ApplicationId}'");
                     printPassword = true;
                 }
             }
@@ -321,8 +321,8 @@ namespace Microsoft.Azure.Commands.ActiveDirectory
             {
                 if (!this.IsParameterBound(c => c.Scope))
                 {
-                    Scope = string.Format("/subscriptions/{0}", subscriptionId);
-                    WriteVerbose(string.Format("No scope provided - using the default scope '{0}'", Scope));
+                    Scope = $"/subscriptions/{subscriptionId}";
+                    WriteVerbose($"No scope provided - using the default scope '{Scope}'");
                 }
 
                 AuthorizationClient.ValidateScope(Scope, true);
@@ -330,7 +330,7 @@ namespace Microsoft.Azure.Commands.ActiveDirectory
                 if (!this.IsParameterBound(c => c.Role))
                 {
                     Role = "Contributor";
-                    WriteVerbose(string.Format("No role provided - using the default role '{0}'", Role));
+                    WriteVerbose($"No role provided - using the default role '{Role}'");
                 }
 
                 shouldProcessMessage = string.Format("Adding a new service principal to be associated with an application " +
@@ -355,7 +355,7 @@ namespace Microsoft.Azure.Commands.ActiveDirectory
                     return;
                 }
 
-                WriteWarning(string.Format("Assigning role '{0}' over scope '{1}' to the new service principal.", this.Role, this.Scope));
+                WriteWarning($"Assigning role '{this.Role}' over scope '{this.Scope}' to the new service principal.");
                 FilterRoleAssignmentsOptions parameters = new FilterRoleAssignmentsOptions()
                 {
                     Scope = this.Scope,
@@ -381,7 +381,7 @@ namespace Microsoft.Azure.Commands.ActiveDirectory
                         var ra = PoliciesClient.FilterRoleAssignments(parameters, subscriptionId);
                         if (ra != null)
                         {
-                            WriteVerbose(string.Format("Role assignment with role '{0}' and scope '{1}' successfully created for the created service principal.", this.Role, this.Scope));
+                            WriteVerbose($"Role assignment with role '{this.Role}' and scope '{this.Scope}' successfully created for the created service principal.");
                             break;
                         }
                     }
diff --git a/src/Resources/Resources/ActiveDirectory/Cmdlets/NewAzureADSpCredentialCommand.cs b/src/Resources/Resources/ActiveDirectory/Cmdlets/NewAzureADSpCredentialCommand.cs
index b1a51a1748..0cc6e940a1 100644
--- a/src/Resources/Resources/ActiveDirectory/Cmdlets/NewAzureADSpCredentialCommand.cs
+++ b/src/Resources/Resources/ActiveDirectory/Cmdlets/NewAzureADSpCredentialCommand.cs
@@ -104,7 +104,7 @@ namespace Microsoft.Azure.Commands.ActiveDirectory
                         Usage = "Verify"
                     };
 
-                    if (ShouldProcess(target: ObjectId, action: string.Format("Adding a new caertificate to service principal with objectId {0}", ObjectId)))
+                    if (ShouldProcess(target: ObjectId, action: $"Adding a new caertificate to service principal with objectId {ObjectId}"))
                     {
                         WriteObject(ActiveDirectoryClient.CreateSpKeyCredential(ObjectId, keyCredential));
                     }
@@ -123,7 +123,7 @@ namespace Microsoft.Azure.Commands.ActiveDirectory
                         KeyId = KeyId == default(Guid) ? Guid.NewGuid().ToString() : KeyId.ToString(),
                         Value = decodedPassword
                     };
-                    if (ShouldProcess(target: ObjectId, action: string.Format("Adding a new password to service principal with objectId {0}", ObjectId)))
+                    if (ShouldProcess(target: ObjectId, action: $"Adding a new password to service principal with objectId {ObjectId}"))
                     {
                         var spCred = new PSADCredentialWrapper(ActiveDirectoryClient.CreateSpPasswordCredential(ObjectId, passwordCredential));
                         spCred.Secret = Password;
diff --git a/src/Resources/Resources/ActiveDirectory/Cmdlets/NewAzureADUserCommand.cs b/src/Resources/Resources/ActiveDirectory/Cmdlets/NewAzureADUserCommand.cs
index 82e6cd6801..c3eaccb42b 100644
--- a/src/Resources/Resources/ActiveDirectory/Cmdlets/NewAzureADUserCommand.cs
+++ b/src/Resources/Resources/ActiveDirectory/Cmdlets/NewAzureADUserCommand.cs
@@ -72,7 +72,7 @@ namespace Microsoft.Azure.Commands.ActiveDirectory
 
             ExecutionBlock(() =>
             {
-                if (ShouldProcess(target: UserPrincipalName, action: string.Format("Adding a new user with UPN '{0}'", UserPrincipalName)))
+                if (ShouldProcess(target: UserPrincipalName, action: $"Adding a new user with UPN '{UserPrincipalName}'"))
                 {
                     WriteObject(ActiveDirectoryClient.CreateUser(userCreateparameters));
                 }
diff --git a/src/Resources/Resources/ActiveDirectory/Cmdlets/RemoveAzureADGroupMemberCommand.cs b/src/Resources/Resources/ActiveDirectory/Cmdlets/RemoveAzureADGroupMemberCommand.cs
index be074b57a7..8cd82fe1e5 100644
--- a/src/Resources/Resources/ActiveDirectory/Cmdlets/RemoveAzureADGroupMemberCommand.cs
+++ b/src/Resources/Resources/ActiveDirectory/Cmdlets/RemoveAzureADGroupMemberCommand.cs
@@ -83,7 +83,7 @@ namespace Microsoft.Azure.Commands.ActiveDirectory
 
                 foreach (var memberObjectId in MemberObjectId)
                 {
-                    if (ShouldProcess(target: memberObjectId, action: string.Format("Removing user with object id '{0}' from group with object id '{1}'.", memberObjectId, GroupObjectId)))
+                    if (ShouldProcess(target: memberObjectId, action: $"Removing user with object id '{memberObjectId}' from group with object id '{GroupObjectId}'."))
                     {
                         ActiveDirectoryClient.RemoveGroupMember(GroupObjectId, memberObjectId);
                     }
diff --git a/src/Resources/Resources/ActiveDirectory/Cmdlets/RemoveAzureADServicePrincipalCommand.cs b/src/Resources/Resources/ActiveDirectory/Cmdlets/RemoveAzureADServicePrincipalCommand.cs
index 7d9f919752..756845cead 100644
--- a/src/Resources/Resources/ActiveDirectory/Cmdlets/RemoveAzureADServicePrincipalCommand.cs
+++ b/src/Resources/Resources/ActiveDirectory/Cmdlets/RemoveAzureADServicePrincipalCommand.cs
@@ -92,7 +92,7 @@ namespace Microsoft.Azure.Commands.ActiveDirectory
 
                     if (result == null || !result.Any())
                     {
-                        throw new ArgumentException(string.Format("Could not find a service principal with the name {0}.", ServicePrincipalName));
+                        throw new ArgumentException($"Could not find a service principal with the name {ServicePrincipalName}.");
                     }
 
                     ObjectId = result.Select(s => s.Id).FirstOrDefault();
diff --git a/src/Resources/Resources/ActiveDirectory/Cmdlets/UpdateAzureADApplicationCommand.cs b/src/Resources/Resources/ActiveDirectory/Cmdlets/UpdateAzureADApplicationCommand.cs
index a73241fc6c..afa2d8f5db 100644
--- a/src/Resources/Resources/ActiveDirectory/Cmdlets/UpdateAzureADApplicationCommand.cs
+++ b/src/Resources/Resources/ActiveDirectory/Cmdlets/UpdateAzureADApplicationCommand.cs
@@ -105,7 +105,7 @@ namespace Microsoft.Azure.Commands.ActiveDirectory
                     AvailableToOtherTenants = this.IsParameterBound(c => c.AvailableToOtherTenants) ? AvailableToOtherTenants : (bool?)null
                 };
 
-                if (ShouldProcess(target: ObjectId, action: string.Format("Updating an application with object id '{0}'", ObjectId)))
+                if (ShouldProcess(target: ObjectId, action: $"Updating an application with object id '{ObjectId}'"))
                 {
                     ActiveDirectoryClient.UpdateApplication(ObjectId, parameters);
                     WriteObject(ActiveDirectoryClient.GetApplication(ObjectId));
diff --git a/src/Resources/Resources/ActiveDirectory/Cmdlets/UpdateAzureADServicePrincipalCommand.cs b/src/Resources/Resources/ActiveDirectory/Cmdlets/UpdateAzureADServicePrincipalCommand.cs
index e9469db3fa..08036a0ff6 100644
--- a/src/Resources/Resources/ActiveDirectory/Cmdlets/UpdateAzureADServicePrincipalCommand.cs
+++ b/src/Resources/Resources/ActiveDirectory/Cmdlets/UpdateAzureADServicePrincipalCommand.cs
@@ -109,7 +109,7 @@ namespace Microsoft.Azure.Commands.ActiveDirectory
                     PasswordCredentials = PasswordCredential
                 };
 
-                if (ShouldProcess(target: sp.Id, action: string.Format("Updating properties on application associated with a service principal with object id '{0}'", sp.Id)))
+                if (ShouldProcess(target: sp.Id, action: $"Updating properties on application associated with a service principal with object id '{sp.Id}'"))
                 {
                     ActiveDirectoryClient.UpdateApplication(applicationObjectId, parameters);
                     WriteObject(ActiveDirectoryClient.FilterServicePrincipals(new ADObjectFilterOptions() { Id = applicationObjectId }).FirstOrDefault());
@@ -123,7 +123,7 @@ namespace Microsoft.Azure.Commands.ActiveDirectory
             var app = ActiveDirectoryClient.GetApplicationWithFilters(odataQueryFilter).SingleOrDefault();
             if (app == null)
             {
-                throw new InvalidOperationException(String.Format("Application with AppId '{0}' does not exist.", applicationId));
+                throw new InvalidOperationException($"Application with AppId '{applicationId}' does not exist.");
             }
             return app.ObjectId;
         }
diff --git a/src/Resources/Resources/ActiveDirectory/Cmdlets/UpdateAzureADUserCommand.cs b/src/Resources/Resources/ActiveDirectory/Cmdlets/UpdateAzureADUserCommand.cs
index af7fad176d..3e81b0748d 100644
--- a/src/Resources/Resources/ActiveDirectory/Cmdlets/UpdateAzureADUserCommand.cs
+++ b/src/Resources/Resources/ActiveDirectory/Cmdlets/UpdateAzureADUserCommand.cs
@@ -109,7 +109,7 @@ namespace Microsoft.Azure.Commands.ActiveDirectory
                     UPNOrObjectId = ObjectId;
                 }
 
-                if (ShouldProcess(target: UPNOrObjectId, action: string.Format("Updating properties for user with upn or object id '{0}'", UPNOrObjectId)))
+                if (ShouldProcess(target: UPNOrObjectId, action: $"Updating properties for user with upn or object id '{UPNOrObjectId}'"))
                 {
                     WriteObject(ActiveDirectoryClient.UpdateUser(UPNOrObjectId, userUpdateParameters));
                 }
diff --git a/src/Resources/Resources/ActiveDirectory/Models/ActiveDirectoryClient.cs b/src/Resources/Resources/ActiveDirectory/Models/ActiveDirectoryClient.cs
index 51bd397c58..4d5c08d91e 100644
--- a/src/Resources/Resources/ActiveDirectory/Models/ActiveDirectoryClient.cs
+++ b/src/Resources/Resources/ActiveDirectory/Models/ActiveDirectoryClient.cs
@@ -300,7 +300,7 @@ namespace Microsoft.Azure.Commands.ActiveDirectory
                 throw new InvalidOperationException(string.Format(ProjectResources.MultipleGroupsWithDisplayNameFound, displayName));
             }
 
-            if (group.Count() == 0)
+            if (!group.Any())
             {
                 throw new InvalidOperationException(string.Format(ProjectResources.GroupWithDisplayNameDoesntExist, displayName));
             }
@@ -315,8 +315,7 @@ namespace Microsoft.Azure.Commands.ActiveDirectory
                 try
                 {
                     // use GetObjectsByObjectId to handle Redirects in the CSP scenario
-                    PSADGroup group = this.GetObjectsByObjectId(new List<string> { options.Id }).FirstOrDefault() as PSADGroup;
-                    if (group != null)
+                    if (this.GetObjectsByObjectId(new List<string> { options.Id }).FirstOrDefault() is PSADGroup group)
                     {
                         return new List<PSADGroup> { group };
                     }
@@ -391,7 +390,7 @@ namespace Microsoft.Azure.Commands.ActiveDirectory
 
         public string GetObjectId(ADObjectFilterOptions options)
         {
-            if (options != null && options.Id != null)
+            if (options?.Id != null)
             {
                 return options.Id;
             }
diff --git a/src/Resources/Resources/Gallery/ItemOperations.cs b/src/Resources/Resources/Gallery/ItemOperations.cs
index 3e7d861dd8..0d6935224b 100644
--- a/src/Resources/Resources/Gallery/ItemOperations.cs
+++ b/src/Resources/Resources/Gallery/ItemOperations.cs
@@ -494,18 +494,12 @@ namespace Microsoft.Azure.Commands.Resources.Models.Gallery
                 }
                 finally
                 {
-                    if (httpResponse != null)
-                    {
-                        httpResponse.Dispose();
-                    }
+                    httpResponse?.Dispose();
                 }
             }
             finally
             {
-                if (httpRequest != null)
-                {
-                    httpRequest.Dispose();
-                }
+                httpRequest?.Dispose();
             }
         }
 
@@ -544,7 +538,7 @@ namespace Microsoft.Azure.Commands.Resources.Models.Gallery
             queryParameters.Add("api-version=2015-04-01");
             queryParameters.Add("includePreview=true");
             List<string> odataFilter = new List<string>();
-            if (parameters != null && parameters.Filter != null)
+            if (parameters?.Filter != null)
             {
                 odataFilter.Add(Uri.EscapeDataString(parameters.Filter));
             }
@@ -552,7 +546,7 @@ namespace Microsoft.Azure.Commands.Resources.Models.Gallery
             {
                 queryParameters.Add("$filter=" + string.Join(null, odataFilter));
             }
-            if (parameters != null && parameters.Top != null)
+            if (parameters?.Top != null)
             {
                 queryParameters.Add("$top=" + Uri.EscapeDataString(parameters.Top.Value.ToString()));
             }
@@ -980,18 +974,12 @@ namespace Microsoft.Azure.Commands.Resources.Models.Gallery
                 }
                 finally
                 {
-                    if (httpResponse != null)
-                    {
-                        httpResponse.Dispose();
-                    }
+                    httpResponse?.Dispose();
                 }
             }
             finally
             {
-                if (httpRequest != null)
-                {
-                    httpRequest.Dispose();
-                }
+                httpRequest?.Dispose();
             }
         }
     }
diff --git a/src/Resources/Resources/Models.Authorization/AuthorizationClientExtensions.cs b/src/Resources/Resources/Models.Authorization/AuthorizationClientExtensions.cs
index b9bd6e7cd7..57c99ca8aa 100644
--- a/src/Resources/Resources/Models.Authorization/AuthorizationClientExtensions.cs
+++ b/src/Resources/Resources/Models.Authorization/AuthorizationClientExtensions.cs
@@ -257,7 +257,7 @@ namespace Microsoft.Azure.Commands.Resources.Models.Authorization
                 PSRoleDefinition roleDefinition = roleDefinitions.SingleOrDefault(r => r.Id == assignment.RoleDefinitionId) ??
                     new PSRoleDefinition() { Id = assignment.RoleDefinitionId };
                 bool delegationFlag = assignment.CanDelegate.HasValue ? (bool)assignment.CanDelegate : false;
-                if (adObject is PSADUser)
+                if (adObject is PSADUser pSADUser)
                 {
                     psAssignments.Add(new PSRoleAssignment()
                     {
@@ -266,7 +266,7 @@ namespace Microsoft.Azure.Commands.Resources.Models.Authorization
                         RoleDefinitionId = roleDefinition.Id,
                         RoleDefinitionName = roleDefinition.Name,
                         Scope = assignment.Scope,
-                        SignInName = ((PSADUser)adObject).UserPrincipalName,
+                        SignInName = pSADUser.UserPrincipalName,
                         ObjectId = adObject.Id,
                         ObjectType = adObject.Type,
                         CanDelegate = delegationFlag,
diff --git a/src/Resources/Resources/Models.ResourceGroups/PSDeploymentEventData.cs b/src/Resources/Resources/Models.ResourceGroups/PSDeploymentEventData.cs
index e12bb92939..dd04efbc3e 100644
--- a/src/Resources/Resources/Models.ResourceGroups/PSDeploymentEventData.cs
+++ b/src/Resources/Resources/Models.ResourceGroups/PSDeploymentEventData.cs
@@ -70,7 +70,7 @@ namespace Microsoft.Azure.Commands.Resources.Models
                     output.AppendLine();
                     foreach (var keyValuePair in Claims)
                     {
-                        output.AppendLine(string.Format("{0, -15}: {1}", keyValuePair.Key, keyValuePair.Value));
+                        output.AppendLine($"{keyValuePair.Key,  -15}: {keyValuePair.Value}");
                     }
                 }
                 return output.ToString();
@@ -89,7 +89,7 @@ namespace Microsoft.Azure.Commands.Resources.Models
                     output.AppendLine();
                     foreach (var keyValuePair in Properties)
                     {
-                        output.AppendLine(string.Format("{0, -15}: {1}", keyValuePair.Key, keyValuePair.Value));
+                        output.AppendLine($"{keyValuePair.Key,  -15}: {keyValuePair.Value}");
                     }
                 }
                 return output.ToString();
diff --git a/src/Resources/Resources/Models.ResourceGroups/ResourceClient.cs b/src/Resources/Resources/Models.ResourceGroups/ResourceClient.cs
index cf134221e1..d38dafacdb 100644
--- a/src/Resources/Resources/Models.ResourceGroups/ResourceClient.cs
+++ b/src/Resources/Resources/Models.ResourceGroups/ResourceClient.cs
@@ -202,10 +202,7 @@ namespace Microsoft.Azure.Commands.Resources.Models
 
                     List<string> detailedMessage = ParseDetailErrorMessage(operation.Properties.StatusMessage.ToString());
 
-                    if (detailedMessage != null)
-                    {
-                        detailedMessage.ForEach(s => WriteError(s));
-                    }
+                    detailedMessage?.ForEach(s => WriteError(s));
                 }
             }
         }
@@ -253,7 +250,7 @@ namespace Microsoft.Azure.Commands.Resources.Models
 
             do
             {
-                WriteVerbose(string.Format("Checking deployment status in {0} seconds.", counter / 1000));
+                WriteVerbose($"Checking deployment status in {counter / 1000} seconds.");
                 TestMockSupport.Delay(counter);
 
                 if (job != null)
diff --git a/src/Resources/Resources/Models.ResourceGroups/ResourcesExtensions.cs b/src/Resources/Resources/Models.ResourceGroups/ResourcesExtensions.cs
index a4c071b7e9..653ce30cd2 100644
--- a/src/Resources/Resources/Models.ResourceGroups/ResourcesExtensions.cs
+++ b/src/Resources/Resources/Models.ResourceGroups/ResourcesExtensions.cs
@@ -87,8 +87,8 @@ namespace Microsoft.Azure.Commands.Resources.Models
             var result = new StringBuilder();
 
             result.AppendLine();
-            result.AppendLine(string.Format("{0, -15}: {1}", "Uri", templateLink.Uri));
-            result.AppendLine(string.Format("{0, -15}: {1}", "ContentVersion", templateLink.ContentVersion));
+            result.AppendLine($"{"Uri",  -15}: {templateLink.Uri}");
+            result.AppendLine($"{"ContentVersion",  -15}: {templateLink.ContentVersion}");
 
             return result.ToString();
         }
diff --git a/src/Resources/Resources/RoleAssignments/NewAzureRoleAssignmentCommand.cs b/src/Resources/Resources/RoleAssignments/NewAzureRoleAssignmentCommand.cs
index bfd6a60fbc..37fe6627db 100644
--- a/src/Resources/Resources/RoleAssignments/NewAzureRoleAssignmentCommand.cs
+++ b/src/Resources/Resources/RoleAssignments/NewAzureRoleAssignmentCommand.cs
@@ -235,7 +235,7 @@ namespace Microsoft.Azure.Commands.Resources
                 string fileName = this.TryResolvePath(InputFile);
                 if (!(new FileInfo(fileName)).Exists)
                 {
-                    throw new PSArgumentException(string.Format("File {0} does not exist", fileName));
+                    throw new PSArgumentException($"File {fileName} does not exist");
                 }
 
                 try
diff --git a/src/Resources/Resources/RoleAssignments/SetAzureRoleAssignmentCommand.cs b/src/Resources/Resources/RoleAssignments/SetAzureRoleAssignmentCommand.cs
index 78a51b5126..72b051a0cb 100644
--- a/src/Resources/Resources/RoleAssignments/SetAzureRoleAssignmentCommand.cs
+++ b/src/Resources/Resources/RoleAssignments/SetAzureRoleAssignmentCommand.cs
@@ -55,7 +55,7 @@ namespace Microsoft.Azure.Commands.Resources
                 string fileName = this.TryResolvePath(InputFile);
                 if (!(new FileInfo(fileName)).Exists)
                 {
-                    throw new PSArgumentException(string.Format("File {0} does not exist", fileName));
+                    throw new PSArgumentException($"File {fileName} does not exist");
                 }
 
                 try
diff --git a/src/Resources/Resources/RoleDefinitions/NewAzureRoleDefinitionCommand.cs b/src/Resources/Resources/RoleDefinitions/NewAzureRoleDefinitionCommand.cs
index d26f4eb8e3..696212af02 100644
--- a/src/Resources/Resources/RoleDefinitions/NewAzureRoleDefinitionCommand.cs
+++ b/src/Resources/Resources/RoleDefinitions/NewAzureRoleDefinitionCommand.cs
@@ -47,7 +47,7 @@ namespace Microsoft.Azure.Commands.Resources
                 string fileName = this.TryResolvePath(InputFile);
                 if (!(new FileInfo(fileName)).Exists)
                 {
-                    throw new PSArgumentException(string.Format("File {0} does not exist", fileName));
+                    throw new PSArgumentException($"File {fileName} does not exist");
                 }
 
                 try
diff --git a/src/Resources/Resources/RoleDefinitions/SetAzureRoleDefinitionCommand.cs b/src/Resources/Resources/RoleDefinitions/SetAzureRoleDefinitionCommand.cs
index 1d4bda2feb..f74d382f44 100644
--- a/src/Resources/Resources/RoleDefinitions/SetAzureRoleDefinitionCommand.cs
+++ b/src/Resources/Resources/RoleDefinitions/SetAzureRoleDefinitionCommand.cs
@@ -44,7 +44,7 @@ namespace Microsoft.Azure.Commands.Resources
                 string fileName = this.TryResolvePath(InputFile);
                 if (!(new FileInfo(fileName)).Exists)
                 {
-                    throw new PSArgumentException(string.Format("File {0} does not exist", fileName));
+                    throw new PSArgumentException($"File {fileName} does not exist");
                 }
 
                 try
diff --git a/src/Resources/Tags/Client/TagsClient.cs b/src/Resources/Tags/Client/TagsClient.cs
index c6708797ce..9d07694786 100644
--- a/src/Resources/Tags/Client/TagsClient.cs
+++ b/src/Resources/Tags/Client/TagsClient.cs
@@ -114,10 +114,7 @@ namespace Microsoft.Azure.Commands.Tags.Client
         {
             ResourceManagementClient.Tags.CreateOrUpdate(tag);
 
-            if (values != null)
-            {
-                values.ForEach(v => ResourceManagementClient.Tags.CreateOrUpdateValue(tag, v));
-            }
+            values?.ForEach(v => ResourceManagementClient.Tags.CreateOrUpdateValue(tag, v));
 
             return GetTag(tag);
         }
diff --git a/src/Search/Search/SearchService/SearchServiceBaseCmdlet.cs b/src/Search/Search/SearchService/SearchServiceBaseCmdlet.cs
index d805f549f4..e6380c4a51 100644
--- a/src/Search/Search/SearchService/SearchServiceBaseCmdlet.cs
+++ b/src/Search/Search/SearchService/SearchServiceBaseCmdlet.cs
@@ -94,10 +94,7 @@ namespace Microsoft.Azure.Commands.Management.Search
         protected void WriteSearchServiceList(IEnumerable<Azure.Management.Search.Models.SearchService> searchServices)
         {
             var output = new List<PSSearchService>();
-            if (searchServices != null)
-            {
-                searchServices.ForEach(svc => output.Add(PSSearchService.Create(svc)));
-            }
+            searchServices?.ForEach(svc => output.Add(PSSearchService.Create(svc)));
 
             WriteObject(output, true);
         }
@@ -121,10 +118,7 @@ namespace Microsoft.Azure.Commands.Management.Search
         protected void WriteQueryKeyList(IEnumerable<QueryKey> queryKeys)
         {
             var output = new List<PSSearchQueryKey>();
-            if (queryKeys != null)
-            {
-                queryKeys.ForEach(key => output.Add(PSSearchQueryKey.Create(key)));
-            }
+            queryKeys?.ForEach(key => output.Add(PSSearchQueryKey.Create(key)));
 
             WriteObject(output, true);
         }
diff --git a/src/Security/Security/Models/ExternalSecuritySolutions/PSSecurityExternalSecuritySolutionConverters.cs b/src/Security/Security/Models/ExternalSecuritySolutions/PSSecurityExternalSecuritySolutionConverters.cs
index 1931c710bc..4681b1d83e 100644
--- a/src/Security/Security/Models/ExternalSecuritySolutions/PSSecurityExternalSecuritySolutionConverters.cs
+++ b/src/Security/Security/Models/ExternalSecuritySolutions/PSSecurityExternalSecuritySolutionConverters.cs
@@ -22,23 +22,17 @@ namespace Microsoft.Azure.Commands.Security.Models.ExternalSecuritySolutions
     {
         public static PSSecurityExternalSecuritySolution ConvertToPSType(this ExternalSecuritySolution value)
         {
-            var convertedAadValue = value as AadExternalSecuritySolution;
-
-            if (convertedAadValue != null)
+            if (value is AadExternalSecuritySolution convertedAadValue)
             {
                 return convertedAadValue.ConvertToPSType();
             }
 
-            var convertedAtaValue = value as AtaExternalSecuritySolution;
-
-            if (convertedAtaValue != null)
+            if (value is AtaExternalSecuritySolution convertedAtaValue)
             {
                 return convertedAtaValue.ConvertToPSType();
             }
 
-            var convertedCefValue = value as CefExternalSecuritySolution;
-
-            if (convertedCefValue != null)
+            if (value is CefExternalSecuritySolution convertedCefValue)
             {
                 return convertedCefValue.ConvertToPSType();
             }
diff --git a/src/SecurityInsights/SecurityInsights/Cmdlets/Actions/UpdateAlertRuleActions.cs b/src/SecurityInsights/SecurityInsights/Cmdlets/Actions/UpdateAlertRuleActions.cs
index 4a28a0fe3d..67ff918e3e 100644
--- a/src/SecurityInsights/SecurityInsights/Cmdlets/Actions/UpdateAlertRuleActions.cs
+++ b/src/SecurityInsights/SecurityInsights/Cmdlets/Actions/UpdateAlertRuleActions.cs
@@ -99,7 +99,7 @@ namespace Microsoft.Azure.Commands.SecurityInsights.Cmdlets.Actions
 
             if (alertRuleAction == null)
             {
-                throw new Exception(string.Format("An Alert Rule Action with ActionId '{0}' for Alert Rule '{1}' in resource group '{2}' under workspace '{3}' does not exist. Please use New-AzSentinelAlertRuleAction to create an Alert Rule Action with these properties.", this.ActionId, this.AlertRuleId, this.ResourceGroupName, this.WorkspaceName));
+                throw new Exception($"An Alert Rule Action with ActionId '{this.ActionId}' for Alert Rule '{this.AlertRuleId}' in resource group '{this.ResourceGroupName}' under workspace '{this.WorkspaceName}' does not exist. Please use New-AzSentinelAlertRuleAction to create an Alert Rule Action with these properties.");
             }
 
             PSSentinelActionRequest updateAlertRuleAction = new PSSentinelActionRequest
@@ -108,7 +108,7 @@ namespace Microsoft.Azure.Commands.SecurityInsights.Cmdlets.Actions
                 TriggerUri = this.TriggerUri
             };
             
-            if (this.ShouldProcess(this.ActionId, string.Format("Updating Action '{0}' for Alert Rule '{1}' in resource group '{2}' under workspace '{3}'.", this.ActionId, this.AlertRuleId, this.ResourceGroupName, this.WorkspaceName)))
+            if (this.ShouldProcess(this.ActionId, $"Updating Action '{this.ActionId}' for Alert Rule '{this.AlertRuleId}' in resource group '{this.ResourceGroupName}' under workspace '{this.WorkspaceName}'."))
             {
                 var result = this.SecurityInsightsClient.AlertRules.CreateOrUpdateAction(this.ResourceGroupName, this.WorkspaceName, this.AlertRuleId, this.ActionId, updateAlertRuleAction.CreatePSType()).ConvertToPSType();
                 WriteObject(result);
diff --git a/src/SecurityInsights/SecurityInsights/Cmdlets/AlertRules/UpdateAlertRules.cs b/src/SecurityInsights/SecurityInsights/Cmdlets/AlertRules/UpdateAlertRules.cs
index 777cfa73b0..2c36639067 100644
--- a/src/SecurityInsights/SecurityInsights/Cmdlets/AlertRules/UpdateAlertRules.cs
+++ b/src/SecurityInsights/SecurityInsights/Cmdlets/AlertRules/UpdateAlertRules.cs
@@ -157,7 +157,7 @@ namespace Microsoft.Azure.Commands.SecurityInsights.Cmdlets.Actions
 
             if (alertRule == null)
             {
-                throw new Exception(string.Format("An Alert Rule with AlertRuleId '{0}' in resource group '{1}' under workspace '{2}' does not exist. Please use New-AzSentinelAlertRule to create an Alert Rule Action with these properties.", this.AlertRuleId, this.ResourceGroupName, this.WorkspaceName));
+                throw new Exception($"An Alert Rule with AlertRuleId '{this.AlertRuleId}' in resource group '{this.ResourceGroupName}' under workspace '{this.WorkspaceName}' does not exist. Please use New-AzSentinelAlertRule to create an Alert Rule Action with these properties.");
             }
 
             if(alertRule.Kind == "Fusion") 
@@ -252,7 +252,7 @@ namespace Microsoft.Azure.Commands.SecurityInsights.Cmdlets.Actions
                 var alertule = convertedScheduledAlertRule;
             };
 
-            if (this.ShouldProcess(this.AlertRuleId, string.Format("Updating Alert Rule '{0}' in resource group '{1}' under workspace '{2}'.", this.AlertRuleId, this.ResourceGroupName, this.WorkspaceName)))
+            if (this.ShouldProcess(this.AlertRuleId, $"Updating Alert Rule '{this.AlertRuleId}' in resource group '{this.ResourceGroupName}' under workspace '{this.WorkspaceName}'."))
             {
                 var result = this.SecurityInsightsClient.AlertRules.CreateOrUpdate(this.ResourceGroupName, this.WorkspaceName, this.AlertRuleId, alertRule.CreatePSStype()).ConvertToPSType();
                 WriteObject(result);
diff --git a/src/SecurityInsights/SecurityInsights/Cmdlets/Bookmarks/UpdateBookmarks.cs b/src/SecurityInsights/SecurityInsights/Cmdlets/Bookmarks/UpdateBookmarks.cs
index e43d111bb5..64a141db0e 100644
--- a/src/SecurityInsights/SecurityInsights/Cmdlets/Bookmarks/UpdateBookmarks.cs
+++ b/src/SecurityInsights/SecurityInsights/Cmdlets/Bookmarks/UpdateBookmarks.cs
@@ -96,7 +96,7 @@ namespace Microsoft.Azure.Commands.SecurityInsights.Cmdlets.Bookmarks
 
             if (bookmark == null)
             {
-                throw new Exception(string.Format("A Bookmark with BookmarkId '{0}' in resource group '{1}' under parent workspace '{2}' does not exist. Please use New-AzSentinelBookmark to create a Bookmark with these properties.", this.BookmarkId, this.ResourceGroupName, this.WorkspaceName));
+                throw new Exception($"A Bookmark with BookmarkId '{this.BookmarkId}' in resource group '{this.ResourceGroupName}' under parent workspace '{this.WorkspaceName}' does not exist. Please use New-AzSentinelBookmark to create a Bookmark with these properties.");
             }
 
             var updatedbookmark = new PSSentinelBookmark();
@@ -109,7 +109,7 @@ namespace Microsoft.Azure.Commands.SecurityInsights.Cmdlets.Bookmarks
             updatedbookmark.QueryResult = this.IsParameterBound(c => c.QueryResult) ? this.QueryResult : bookmark.QueryResult;
             
 
-            if (this.ShouldProcess(this.BookmarkId, string.Format("Updating BookmarkID '{0}' in resource group '{1}' under workspace '{2}'.", this.BookmarkId, this.ResourceGroupName, this.WorkspaceName)))
+            if (this.ShouldProcess(this.BookmarkId, $"Updating BookmarkID '{this.BookmarkId}' in resource group '{this.ResourceGroupName}' under workspace '{this.WorkspaceName}'."))
             {
                 var result = this.SecurityInsightsClient.Bookmarks.CreateOrUpdate(this.ResourceGroupName, this.WorkspaceName, this.BookmarkId, updatedbookmark.CreatePSType()).ConvertToPSType();
                 WriteObject(result);
diff --git a/src/SecurityInsights/SecurityInsights/Cmdlets/DataConnectors/UpdateDataConnectors.cs b/src/SecurityInsights/SecurityInsights/Cmdlets/DataConnectors/UpdateDataConnectors.cs
index a024a3c5be..ee565cf06d 100644
--- a/src/SecurityInsights/SecurityInsights/Cmdlets/DataConnectors/UpdateDataConnectors.cs
+++ b/src/SecurityInsights/SecurityInsights/Cmdlets/DataConnectors/UpdateDataConnectors.cs
@@ -118,7 +118,7 @@ namespace Microsoft.Azure.Commands.SecurityInsights.Cmdlets.DataConnectors
 
             if (dataConnector == null)
             {
-                throw new Exception(string.Format("A Data Connector with DataConnectorId '{0}' in resource group '{1}' under workspace '{2}' does not exist. Please use New-AzSentinelDataConnector to create a Data Connector with these properties.", this.DataConnectorId, this.ResourceGroupName, this.WorkspaceName));
+                throw new Exception($"A Data Connector with DataConnectorId '{this.DataConnectorId}' in resource group '{this.ResourceGroupName}' under workspace '{this.WorkspaceName}' does not exist. Please use New-AzSentinelDataConnector to create a Data Connector with these properties.");
             }
 
             if(dataConnector.Kind == "AzureActiveDirectory") 
@@ -205,7 +205,7 @@ namespace Microsoft.Azure.Commands.SecurityInsights.Cmdlets.DataConnectors
             };
 
 
-            if (this.ShouldProcess(this.DataConnectorId, string.Format("Updating Data Connector '{0}' in resource group '{1}' under workspace '{2}'.", this.DataConnectorId, this.ResourceGroupName, this.WorkspaceName)))
+            if (this.ShouldProcess(this.DataConnectorId, $"Updating Data Connector '{this.DataConnectorId}' in resource group '{this.ResourceGroupName}' under workspace '{this.WorkspaceName}'."))
             {
                 var result = this.SecurityInsightsClient.DataConnectors.CreateOrUpdate(this.ResourceGroupName, this.WorkspaceName, this.DataConnectorId, dataConnector.CreatePSType()).ConvertToPSType();
                 WriteObject(result);
diff --git a/src/SecurityInsights/SecurityInsights/Cmdlets/Incidents/UpdateIncidents.cs b/src/SecurityInsights/SecurityInsights/Cmdlets/Incidents/UpdateIncidents.cs
index 89c96a4e8b..1e18b94aec 100644
--- a/src/SecurityInsights/SecurityInsights/Cmdlets/Incidents/UpdateIncidents.cs
+++ b/src/SecurityInsights/SecurityInsights/Cmdlets/Incidents/UpdateIncidents.cs
@@ -109,7 +109,7 @@ namespace Microsoft.Azure.Commands.SecurityInsights.Cmdlets.Incidents
 
             if (incident == null)
             {
-                throw new Exception(string.Format("An Incident with IncidentID '{0}' in resource group '{1}' under parent workspace '{2}' does not exist. Please use New-AzSentinelBookmark to create a Bookmark with these properties.", this.IncidentID, this.ResourceGroupName, this.WorkspaceName));
+                throw new Exception($"An Incident with IncidentID '{this.IncidentID}' in resource group '{this.ResourceGroupName}' under parent workspace '{this.WorkspaceName}' does not exist. Please use New-AzSentinelBookmark to create a Bookmark with these properties.");
             }
 
             incident.Etag = incident.Etag;
@@ -123,7 +123,7 @@ namespace Microsoft.Azure.Commands.SecurityInsights.Cmdlets.Incidents
             incident.Status = this.IsParameterBound(c => c.Status) ? this.Status : incident.Status;
             incident.Title = this.IsParameterBound(c => c.Title) ? this.Title : incident.Title;
 
-            if (this.ShouldProcess(this.IncidentID, string.Format("Updating IncidentID '{0}' in resource group '{1}' under workspace '{2}'.", this.IncidentID, this.ResourceGroupName, this.WorkspaceName)))
+            if (this.ShouldProcess(this.IncidentID, $"Updating IncidentID '{this.IncidentID}' in resource group '{this.ResourceGroupName}' under workspace '{this.WorkspaceName}'."))
             {
                 var result = this.SecurityInsightsClient.Incidents.CreateOrUpdate(this.ResourceGroupName, this.WorkspaceName, this.IncidentID, incident.CreatePSType()).ConvertToPSType();
                 WriteObject(result);
diff --git a/src/SecurityInsights/SecurityInsights/Models/AlertRuleTemplates/PSSentinelAlertRuleTemplatesConvertors.cs b/src/SecurityInsights/SecurityInsights/Models/AlertRuleTemplates/PSSentinelAlertRuleTemplatesConvertors.cs
index b8ea98739b..4c689dea85 100644
--- a/src/SecurityInsights/SecurityInsights/Models/AlertRuleTemplates/PSSentinelAlertRuleTemplatesConvertors.cs
+++ b/src/SecurityInsights/SecurityInsights/Models/AlertRuleTemplates/PSSentinelAlertRuleTemplatesConvertors.cs
@@ -24,23 +24,17 @@ namespace Microsoft.Azure.Commands.SecurityInsights.Models.AlertRuleTemplates
 
         public static PSSentinelAlertRuleTemplate ConvertToPSType(this AlertRuleTemplate value)
         {
-            var convertedFusionValue = value as FusionAlertRuleTemplate;
-
-            if (convertedFusionValue != null)
+            if (value is FusionAlertRuleTemplate convertedFusionValue)
             {
                 return convertedFusionValue.ConvertToPSType();
             }
 
-            var convertedMicrosoftSecurityIncidentCreationValue = value as MicrosoftSecurityIncidentCreationAlertRuleTemplate;
-
-            if (convertedMicrosoftSecurityIncidentCreationValue != null)
+            if (value is MicrosoftSecurityIncidentCreationAlertRuleTemplate convertedMicrosoftSecurityIncidentCreationValue)
             {
                 return convertedMicrosoftSecurityIncidentCreationValue.ConvertToPSType();
             }
 
-            var convertedScheduledValue = value as ScheduledAlertRuleTemplate;
-
-            if (convertedScheduledValue != null)
+            if (value is ScheduledAlertRuleTemplate convertedScheduledValue)
             {
                 return convertedScheduledValue.ConvertToPSType();
             }
diff --git a/src/SecurityInsights/SecurityInsights/Models/AlertRules/PSSentinelAlertRulesConvertors.cs b/src/SecurityInsights/SecurityInsights/Models/AlertRules/PSSentinelAlertRulesConvertors.cs
index 4fa4ba3153..d6b644bfb1 100644
--- a/src/SecurityInsights/SecurityInsights/Models/AlertRules/PSSentinelAlertRulesConvertors.cs
+++ b/src/SecurityInsights/SecurityInsights/Models/AlertRules/PSSentinelAlertRulesConvertors.cs
@@ -24,23 +24,17 @@ namespace Microsoft.Azure.Commands.SecurityInsights.Models.AlertRules
 
         public static PSSentinelAlertRule ConvertToPSType(this AlertRule value)
         {
-            var convertedFusionValue = value as FusionAlertRule;
-
-            if (convertedFusionValue != null)
+            if (value is FusionAlertRule convertedFusionValue)
             {
                 return convertedFusionValue.ConvertToPSType();
             }
 
-            var convertedMicrosoftSecurityIncidentCreationValue = value as MicrosoftSecurityIncidentCreationAlertRule;
-
-            if (convertedMicrosoftSecurityIncidentCreationValue != null)
+            if (value is MicrosoftSecurityIncidentCreationAlertRule convertedMicrosoftSecurityIncidentCreationValue)
             {
                 return convertedMicrosoftSecurityIncidentCreationValue.ConvertToPSType();
             }
 
-            var convertedScheduledValue = value as ScheduledAlertRule;
-
-            if (convertedScheduledValue != null)
+            if (value is ScheduledAlertRule convertedScheduledValue)
             {
                 return convertedScheduledValue.ConvertToPSType();
             }
@@ -126,23 +120,17 @@ namespace Microsoft.Azure.Commands.SecurityInsights.Models.AlertRules
 
         public static AlertRule CreatePSStype(this PSSentinelAlertRule value)
         {
-            var convertedFusionValue = value as PSSentinelFusionAlertRule;
-
-            if (convertedFusionValue != null)
+            if (value is PSSentinelFusionAlertRule convertedFusionValue)
             {
                 return convertedFusionValue.CreatePSType();
             }
 
-            var convertedMicrosoftSecurityIncidentCreationValue = value as PSSentinelMicrosoftSecurityIncidentCreationRule;
-
-            if (convertedMicrosoftSecurityIncidentCreationValue != null)
+            if (value is PSSentinelMicrosoftSecurityIncidentCreationRule convertedMicrosoftSecurityIncidentCreationValue)
             {
                 return convertedMicrosoftSecurityIncidentCreationValue.CreatePSType();
             }
 
-            var convertedScheduledValue = value as PSSentinelScheduledAlertRule;
-
-            if (convertedScheduledValue != null)
+            if (value is PSSentinelScheduledAlertRule convertedScheduledValue)
             {
                 return convertedScheduledValue.CreatePSType();
             }
diff --git a/src/SecurityInsights/SecurityInsights/Models/DataConnectors/PSSentinelDataConnectorConvertors.cs b/src/SecurityInsights/SecurityInsights/Models/DataConnectors/PSSentinelDataConnectorConvertors.cs
index ef3e9635f8..9a046e722e 100644
--- a/src/SecurityInsights/SecurityInsights/Models/DataConnectors/PSSentinelDataConnectorConvertors.cs
+++ b/src/SecurityInsights/SecurityInsights/Models/DataConnectors/PSSentinelDataConnectorConvertors.cs
@@ -24,58 +24,42 @@ namespace Microsoft.Azure.Commands.SecurityInsights.Models.DataConnectors
 
         public static PSSentinelDataConnector ConvertToPSType(this DataConnector value)
         {
-            var convertedAADValue = value as AADDataConnector;
-
-            if (convertedAADValue != null)
+            if (value is AADDataConnector convertedAADValue)
             {
                 return convertedAADValue.ConvertToPSType();
             }
 
-            var convertedAATPValue = value as AATPDataConnector;
-
-            if (convertedAATPValue != null)
+            if (value is AATPDataConnector convertedAATPValue)
             {
                 return convertedAATPValue.ConvertToPSType();
             }
 
-            var convertedASCValue = value as ASCDataConnector;
-
-            if (convertedASCValue != null)
+            if (value is ASCDataConnector convertedASCValue)
             {
                 return convertedASCValue.ConvertToPSType();
             }
 
-            var convertedAWSValue = value as AwsCloudTrailDataConnector;
-
-            if (convertedAWSValue != null)
+            if (value is AwsCloudTrailDataConnector convertedAWSValue)
             {
                 return convertedAWSValue.ConvertToPSType();
             }
 
-            var convertedMCASValue = value as MCASDataConnector;
-
-            if (convertedMCASValue != null)
+            if (value is MCASDataConnector convertedMCASValue)
             {
                 return convertedMCASValue.ConvertToPSType();
             }
 
-            var convertedMDATPValue = value as MDATPDataConnector;
-
-            if (convertedMDATPValue != null)
+            if (value is MDATPDataConnector convertedMDATPValue)
             {
                 return convertedMDATPValue.ConvertToPSType();
             }
 
-            var convertedOfficeValue = value as OfficeDataConnector;
-
-            if (convertedOfficeValue != null)
+            if (value is OfficeDataConnector convertedOfficeValue)
             {
                 return convertedOfficeValue.ConvertToPSType();
             }
 
-            var convertedTIValue = value as TIDataConnector;
-
-            if (convertedTIValue != null)
+            if (value is TIDataConnector convertedTIValue)
             {
                 return convertedTIValue.ConvertToPSType();
             }
@@ -289,58 +273,42 @@ namespace Microsoft.Azure.Commands.SecurityInsights.Models.DataConnectors
 
         public static DataConnector CreatePSType(this PSSentinelDataConnector value)
         {
-            var convertedAADValue = value as PSSentinelDataConnectorAAD;
-
-            if (convertedAADValue != null)
+            if (value is PSSentinelDataConnectorAAD convertedAADValue)
             {
                 return convertedAADValue.CreatePSType();
             }
 
-            var convertedAATPValue = value as PSSentinelDataConnectorAATP;
-
-            if (convertedAATPValue != null)
+            if (value is PSSentinelDataConnectorAATP convertedAATPValue)
             {
                 return convertedAATPValue.CreatePSType();
             }
 
-            var convertedASCValue = value as PSSentinelDataConnectorASC;
-
-            if (convertedASCValue != null)
+            if (value is PSSentinelDataConnectorASC convertedASCValue)
             {
                 return convertedASCValue.CreatePSType();
             }
 
-            var convertedAWSValue = value as PSSentinelDataConnectorAWS;
-
-            if (convertedAWSValue != null)
+            if (value is PSSentinelDataConnectorAWS convertedAWSValue)
             {
                 return convertedAWSValue.CreatePSType();
             }
 
-            var convertedMCASValue = value as PSSentinelDataConnectorMCAS;
-
-            if (convertedMCASValue != null)
+            if (value is PSSentinelDataConnectorMCAS convertedMCASValue)
             {
                 return convertedMCASValue.CreatePSType();
             }
 
-            var convertedMDATPValue = value as PSSentinelDataConnectorMDATP;
-
-            if (convertedMDATPValue != null)
+            if (value is PSSentinelDataConnectorMDATP convertedMDATPValue)
             {
                 return convertedMDATPValue.CreatePSType();
             }
 
-            var convertedOfficeValue = value as PSSentinelDataConnectorOffice;
-
-            if (convertedOfficeValue != null)
+            if (value is PSSentinelDataConnectorOffice convertedOfficeValue)
             {
                 return convertedOfficeValue.CreatePSType();
             }
 
-            var convertedTIValue = value as PSSentinelDataConnectorTI;
-
-            if (convertedTIValue != null)
+            if (value is PSSentinelDataConnectorTI convertedTIValue)
             {
                 return convertedTIValue.CreatePSType();
             }
diff --git a/src/ServiceBus/ServiceBus/Cmdlets/NetworkRuleSet/AddAzureServiceBusVirtualNetworkrule.cs b/src/ServiceBus/ServiceBus/Cmdlets/NetworkRuleSet/AddAzureServiceBusVirtualNetworkrule.cs
index 5821bd58dc..3f8416d9f2 100644
--- a/src/ServiceBus/ServiceBus/Cmdlets/NetworkRuleSet/AddAzureServiceBusVirtualNetworkrule.cs
+++ b/src/ServiceBus/ServiceBus/Cmdlets/NetworkRuleSet/AddAzureServiceBusVirtualNetworkrule.cs
@@ -54,7 +54,7 @@ namespace Microsoft.Azure.Commands.ServiceBus.Commands.NetworkruleSet
             PSNetworkRuleSetAttributes networkRuleSet = Client.GetNetworkRuleSet(ResourceGroupName, Name);
             if (!networkRuleSet.VirtualNetworkRules.Contains(new PSNWRuleSetVirtualNetworkRulesAttributes { Subnet = new PSSubnetAttributes { Id = SubnetId }, IgnoreMissingVnetServiceEndpoint = IgnoreMissingVnetServiceEndpoint }))
             {
-                if (ShouldProcess(target: Name, action: string.Format("Adding VirtualNetworkRule for NetworkRuleSet of {0} in Resourcegroup {1}", Name, ResourceGroupName)))
+                if (ShouldProcess(target: Name, action: $"Adding VirtualNetworkRule for NetworkRuleSet of {Name} in Resourcegroup {ResourceGroupName}"))
                 {
                     try
                     {
diff --git a/src/ServiceBus/ServiceBus/Cmdlets/NetworkRuleSet/AddAzureServicebusIPRule.cs b/src/ServiceBus/ServiceBus/Cmdlets/NetworkRuleSet/AddAzureServicebusIPRule.cs
index 852742758c..10ce8709a7 100644
--- a/src/ServiceBus/ServiceBus/Cmdlets/NetworkRuleSet/AddAzureServicebusIPRule.cs
+++ b/src/ServiceBus/ServiceBus/Cmdlets/NetworkRuleSet/AddAzureServicebusIPRule.cs
@@ -56,7 +56,7 @@ namespace Microsoft.Azure.Commands.ServiceBus.Commands.ServiceBus
             PSNetworkRuleSetAttributes networkRuleSet = Client.GetNetworkRuleSet(ResourceGroupName, Name);
             if (!networkRuleSet.IpRules.Contains(new PSNWRuleSetIpRulesAttributes { IpMask = IpMask }))
             {
-                if (ShouldProcess(target: Name, action: string.Format("Adding IP rule for NetworkRuleSet of {0} in Resourcegroup {1}", Name, ResourceGroupName)))
+                if (ShouldProcess(target: Name, action: $"Adding IP rule for NetworkRuleSet of {Name} in Resourcegroup {ResourceGroupName}"))
                 {
                     try
                     {
diff --git a/src/ServiceBus/ServiceBus/Cmdlets/NetworkRuleSet/RemoveAzureEventHubVirtualNetworkrule.cs b/src/ServiceBus/ServiceBus/Cmdlets/NetworkRuleSet/RemoveAzureEventHubVirtualNetworkrule.cs
index 479daf70a0..f25e1f2545 100644
--- a/src/ServiceBus/ServiceBus/Cmdlets/NetworkRuleSet/RemoveAzureEventHubVirtualNetworkrule.cs
+++ b/src/ServiceBus/ServiceBus/Cmdlets/NetworkRuleSet/RemoveAzureEventHubVirtualNetworkrule.cs
@@ -79,7 +79,7 @@ namespace Microsoft.Azure.Commands.ServiceBus.Commands.NetworkruleSet
 
             if (Toremove != null)
             {
-                if (ShouldProcess(target: Name, action: string.Format("Removeing VirtualNetworkRule for NetworkRuleSet of {0} in Resourcegroup {1}", Name, ResourceGroupName)))
+                if (ShouldProcess(target: Name, action: $"Removeing VirtualNetworkRule for NetworkRuleSet of {Name} in Resourcegroup {ResourceGroupName}"))
                 {
                     try
                     {
diff --git a/src/ServiceBus/ServiceBus/Cmdlets/NetworkRuleSet/RemoveAzureServiceBusIPRule.cs b/src/ServiceBus/ServiceBus/Cmdlets/NetworkRuleSet/RemoveAzureServiceBusIPRule.cs
index 15234af88d..72a840d1fe 100644
--- a/src/ServiceBus/ServiceBus/Cmdlets/NetworkRuleSet/RemoveAzureServiceBusIPRule.cs
+++ b/src/ServiceBus/ServiceBus/Cmdlets/NetworkRuleSet/RemoveAzureServiceBusIPRule.cs
@@ -78,7 +78,7 @@ namespace Microsoft.Azure.Commands.ServiceBus.Commands.NetworkruleSet
 
             if (Toremove != null)
             {
-                if (ShouldProcess(target: Name, action: string.Format("Removing IP rule for NetworkRuleSet of {0} in Resourcegroup {1}", Name, ResourceGroupName)))
+                if (ShouldProcess(target: Name, action: $"Removing IP rule for NetworkRuleSet of {Name} in Resourcegroup {ResourceGroupName}"))
                 {
                     try
                     {
diff --git a/src/ServiceBus/ServiceBus/Cmdlets/NetworkRuleSet/RemoveAzureServiceBusNetworkRuleSet.cs b/src/ServiceBus/ServiceBus/Cmdlets/NetworkRuleSet/RemoveAzureServiceBusNetworkRuleSet.cs
index afb653c6ac..41229dceae 100644
--- a/src/ServiceBus/ServiceBus/Cmdlets/NetworkRuleSet/RemoveAzureServiceBusNetworkRuleSet.cs
+++ b/src/ServiceBus/ServiceBus/Cmdlets/NetworkRuleSet/RemoveAzureServiceBusNetworkRuleSet.cs
@@ -65,7 +65,7 @@ namespace Microsoft.Azure.Commands.ServiceBus.Commands.NetworkruleSet
             }
 
             // delete a Ip Filter Rule 
-            if (ShouldProcess(target:Name, action:string.Format("Delete NetworkruleSet for Namespace {0} of ResourceGroup {1}", Name,ResourceGroupName)))
+            if (ShouldProcess(target:Name, action:$"Delete NetworkruleSet for Namespace {Name} of ResourceGroup {ResourceGroupName}"))
             {
                 try
                 {
diff --git a/src/ServiceBus/ServiceBus/Cmdlets/NetworkRuleSet/SetAzureServiceBusNetworkrule.cs b/src/ServiceBus/ServiceBus/Cmdlets/NetworkRuleSet/SetAzureServiceBusNetworkrule.cs
index e2ec67fc84..0152f7b8f2 100644
--- a/src/ServiceBus/ServiceBus/Cmdlets/NetworkRuleSet/SetAzureServiceBusNetworkrule.cs
+++ b/src/ServiceBus/ServiceBus/Cmdlets/NetworkRuleSet/SetAzureServiceBusNetworkrule.cs
@@ -66,7 +66,7 @@ namespace Microsoft.Azure.Commands.ServiceBus.Commands.NetworkruleSet
         {
             // Update the NetworlruleSet 
             
-            if (ShouldProcess(target: Name, action: string.Format("Update NetworkruleSet for {0} Namespace in {1} ResourceGroup", Name, ResourceGroupName)))
+            if (ShouldProcess(target: Name, action: $"Update NetworkruleSet for {Name} Namespace in {ResourceGroupName} ResourceGroup"))
             {
                 try
                 {
diff --git a/src/ServiceFabric/ServiceFabric.Test/ScenarioTests/TestServiceFabric.cs b/src/ServiceFabric/ServiceFabric.Test/ScenarioTests/TestServiceFabric.cs
index 9ea8bdd626..3a258ed93b 100644
--- a/src/ServiceFabric/ServiceFabric.Test/ScenarioTests/TestServiceFabric.cs
+++ b/src/ServiceFabric/ServiceFabric.Test/ScenarioTests/TestServiceFabric.cs
@@ -176,14 +176,14 @@ namespace Microsoft.Azure.Commands.ServiceFabric.Test.ScenarioTests
             string windowsTemplateDirectory = Path.Combine(assemblyFolder, Constants.WindowsTemplateRelativePath);
             var templateFilePath = Path.Combine(windowsTemplateDirectory, Constants.TemplateFileName);
             var parameterFilePath = Path.Combine(windowsTemplateDirectory, Constants.ParameterFileName);
-            Assert.True(File.Exists(templateFilePath), string.Format("file not found: {0}", templateFilePath));
-            Assert.True(File.Exists(parameterFilePath), string.Format("file not found: {0}", parameterFilePath));
+            Assert.True(File.Exists(templateFilePath), $"file not found: {templateFilePath}");
+            Assert.True(File.Exists(parameterFilePath), $"file not found: {parameterFilePath}");
 
             string linuxTemplateDirectory = Path.Combine(assemblyFolder, Constants.LinuxTemplateRelativePath);
             templateFilePath = Path.Combine(linuxTemplateDirectory, Constants.TemplateFileName);
             parameterFilePath = Path.Combine(linuxTemplateDirectory, Constants.ParameterFileName);
-            Assert.True(File.Exists(templateFilePath), string.Format("file not found: {0}", templateFilePath));
-            Assert.True(File.Exists(parameterFilePath), string.Format("file not found: {0}", parameterFilePath));
+            Assert.True(File.Exists(templateFilePath), $"file not found: {templateFilePath}");
+            Assert.True(File.Exists(parameterFilePath), $"file not found: {parameterFilePath}");
         }
     }
 }
diff --git a/src/ServiceFabric/ServiceFabric/Commands/AddAzureRmServiceFabricNode.cs b/src/ServiceFabric/ServiceFabric/Commands/AddAzureRmServiceFabricNode.cs
index 11a47bef4d..bf2b6e36d2 100644
--- a/src/ServiceFabric/ServiceFabric/Commands/AddAzureRmServiceFabricNode.cs
+++ b/src/ServiceFabric/ServiceFabric/Commands/AddAzureRmServiceFabricNode.cs
@@ -45,7 +45,7 @@ namespace Microsoft.Azure.Commands.ServiceFabric.Commands
                 throw new PSArgumentException(this.Number.ToString());
             }
 
-            if (ShouldProcess(target: this.Name, action: string.Format("Add {0} nodes to {1}", this.Number, this.NodeType)))
+            if (ShouldProcess(target: this.Name, action: $"Add {this.Number} nodes to {this.NodeType}"))
             {
                 base.ExecuteCmdlet();
             }
diff --git a/src/ServiceFabric/ServiceFabric/Commands/AddAzureRmServiceFabricNodeType.cs b/src/ServiceFabric/ServiceFabric/Commands/AddAzureRmServiceFabricNodeType.cs
index 2833c61960..dc1bef3e07 100644
--- a/src/ServiceFabric/ServiceFabric/Commands/AddAzureRmServiceFabricNodeType.cs
+++ b/src/ServiceFabric/ServiceFabric/Commands/AddAzureRmServiceFabricNodeType.cs
@@ -120,7 +120,7 @@ namespace Microsoft.Azure.Commands.ServiceFabric.Commands
                         string.Join(" / ", skusSupportGoldDurability)));
             }
 
-            if (ShouldProcess(target: this.NodeType, action: string.Format("Add an new node type {0}", this.NodeType)))
+            if (ShouldProcess(target: this.NodeType, action: $"Add an new node type {this.NodeType}"))
             {
                 var cluster = GetCurrentCluster();
                 this.diagnosticsStorageName = cluster.DiagnosticsStorageAccountConfig.StorageAccountName;
@@ -255,14 +255,14 @@ namespace Microsoft.Azure.Commands.ServiceFabric.Commands
                     {
                         if (string.Equals(GetClusterIdFromExtension(sfExtension), clusterId, StringComparison.OrdinalIgnoreCase))
                         {
-                            WriteVerboseWithTimestamp(string.Format("GetProfiles: Found vmss {0} that corresponds to cluster id {1}", vmss.Id, clusterId));
+                            WriteVerboseWithTimestamp($"GetProfiles: Found vmss {vmss.Id} that corresponds to cluster id {clusterId}");
                             osProfile = vmss.VirtualMachineProfile.OsProfile;
                             existingStorageProfile = vmss.VirtualMachineProfile.StorageProfile;
                             existingNetworkProfile = vmss.VirtualMachineProfile.NetworkProfile;
 
                             if (existingStorageProfile == null || existingNetworkProfile == null)
                             {
-                                WriteVerboseWithTimestamp(string.Format("GetProfiles: Unable to get storageProfile and/or NetworkProfile from vmss id: {0}", vmss.Id));
+                                WriteVerboseWithTimestamp($"GetProfiles: Unable to get storageProfile and/or NetworkProfile from vmss id: {vmss.Id}");
                                 continue;
                             }
 
@@ -286,12 +286,12 @@ namespace Microsoft.Azure.Commands.ServiceFabric.Commands
             storageProfile = GetStorageProfile(existingStorageProfile);
             networkProfile = CreateNetworkResource(existingNetworkProfile.NetworkInterfaceConfigurations.FirstOrDefault());
 
-            existingFabricExtension.Name = string.Format("{0}_ServiceFabricNode", this.NodeType);
+            existingFabricExtension.Name = $"{this.NodeType}_ServiceFabricNode";
             existingFabricExtension = GetFabricExtension(existingFabricExtension);
 
             if (diagnosticsVmExt != null)
             {
-                diagnosticsVmExt.Name = string.Format("{0}_VMDiagnosticsVmExt", this.NodeType);
+                diagnosticsVmExt.Name = $"{this.NodeType}_VMDiagnosticsVmExt";
                 diagnosticsVmExt = GetDiagnosticsExtension(diagnosticsVmExt);
                 vmExtProfile = new VirtualMachineScaleSetExtensionProfile()
                 {
diff --git a/src/ServiceFabric/ServiceFabric/Commands/GetAzServiceFabricApplication.cs b/src/ServiceFabric/ServiceFabric/Commands/GetAzServiceFabricApplication.cs
index 61c5df5eba..7c8474b96c 100644
--- a/src/ServiceFabric/ServiceFabric/Commands/GetAzServiceFabricApplication.cs
+++ b/src/ServiceFabric/ServiceFabric/Commands/GetAzServiceFabricApplication.cs
@@ -103,7 +103,7 @@ namespace Microsoft.Azure.Commands.ServiceFabric.Commands
             if (!appRId.ResourceType.EndsWith(Constants.applicationProvider)
                 || !clusterRId.ResourceType.EndsWith(Constants.clusterProvider))
             {
-                throw new PSArgumentException(string.Format("invalid resource id {0}", this.ResourceId));
+                throw new PSArgumentException($"invalid resource id {this.ResourceId}");
             }
 
             this.ClusterName = clusterRId.ResourceName;
diff --git a/src/ServiceFabric/ServiceFabric/Commands/GetAzServiceFabricApplicationType.cs b/src/ServiceFabric/ServiceFabric/Commands/GetAzServiceFabricApplicationType.cs
index 390d6cc9c4..0c9727426a 100644
--- a/src/ServiceFabric/ServiceFabric/Commands/GetAzServiceFabricApplicationType.cs
+++ b/src/ServiceFabric/ServiceFabric/Commands/GetAzServiceFabricApplicationType.cs
@@ -103,7 +103,7 @@ namespace Microsoft.Azure.Commands.ServiceFabric.Commands
             if (!appTypeRId.ResourceType.EndsWith(Constants.applicationTypeProvider)
                 || !clusterRId.ResourceType.EndsWith(Constants.clusterProvider))
             {
-                throw new PSArgumentException(string.Format("invalid resource id {0}", this.ResourceId));
+                throw new PSArgumentException($"invalid resource id {this.ResourceId}");
             }
 
             this.ClusterName = clusterRId.ResourceName;
diff --git a/src/ServiceFabric/ServiceFabric/Commands/GetAzServiceFabricApplicationTypeVersion.cs b/src/ServiceFabric/ServiceFabric/Commands/GetAzServiceFabricApplicationTypeVersion.cs
index 0113c61a77..8b3a8bd832 100644
--- a/src/ServiceFabric/ServiceFabric/Commands/GetAzServiceFabricApplicationTypeVersion.cs
+++ b/src/ServiceFabric/ServiceFabric/Commands/GetAzServiceFabricApplicationTypeVersion.cs
@@ -113,7 +113,7 @@ namespace Microsoft.Azure.Commands.ServiceFabric.Commands
                 || !appTypeRId.ResourceType.EndsWith(Constants.applicationTypeProvider)
                 || !clusterRId.ResourceType.EndsWith(Constants.clusterProvider))
             {
-                throw new PSArgumentException(string.Format("invalid resource id {0}", this.ResourceId));
+                throw new PSArgumentException($"invalid resource id {this.ResourceId}");
             }
 
             this.ClusterName = clusterRId.ResourceName;
diff --git a/src/ServiceFabric/ServiceFabric/Commands/GetAzServiceFabricService.cs b/src/ServiceFabric/ServiceFabric/Commands/GetAzServiceFabricService.cs
index e719a9bc39..205e857486 100644
--- a/src/ServiceFabric/ServiceFabric/Commands/GetAzServiceFabricService.cs
+++ b/src/ServiceFabric/ServiceFabric/Commands/GetAzServiceFabricService.cs
@@ -112,7 +112,7 @@ namespace Microsoft.Azure.Commands.ServiceFabric.Commands
                 || !appRId.ResourceType.EndsWith(Constants.applicationProvider)
                 || !clusterRId.ResourceType.EndsWith(Constants.clusterProvider))
             {
-                throw new PSArgumentException(string.Format("invalid resource id {0}", this.ResourceId));
+                throw new PSArgumentException($"invalid resource id {this.ResourceId}");
             }
 
             this.ApplicationName = appRId.ResourceName;
diff --git a/src/ServiceFabric/ServiceFabric/Commands/ManagedClusters/AddAzServiceFabricManagedClusterClientCertificate.cs b/src/ServiceFabric/ServiceFabric/Commands/ManagedClusters/AddAzServiceFabricManagedClusterClientCertificate.cs
index 654c1ea2bb..08199950d3 100644
--- a/src/ServiceFabric/ServiceFabric/Commands/ManagedClusters/AddAzServiceFabricManagedClusterClientCertificate.cs
+++ b/src/ServiceFabric/ServiceFabric/Commands/ManagedClusters/AddAzServiceFabricManagedClusterClientCertificate.cs
@@ -99,8 +99,7 @@ namespace Microsoft.Azure.Commands.ServiceFabric.Commands
         public override void ExecuteCmdlet()
         {
             this.SetParams();
-            if (ShouldProcess(target: this.Name, action: string.Format("Add client cert '{0}' to cluster: {1}.",
-                (ParameterSetName == ClientCertByTpByName || ParameterSetName == ClientCertByTpByObj) ? this.Thumbprint : this.CommonName, this.Name)))
+            if (ShouldProcess(target: this.Name, action: $"Add client cert '{((ParameterSetName == ClientCertByTpByName || ParameterSetName == ClientCertByTpByObj) ? this.Thumbprint : this.CommonName)}' to cluster: {this.Name}."))
             {
                 try
                 {
diff --git a/src/ServiceFabric/ServiceFabric/Commands/ManagedClusters/AddAzServiceFabricManagedNodeTypeVMExtension.cs b/src/ServiceFabric/ServiceFabric/Commands/ManagedClusters/AddAzServiceFabricManagedNodeTypeVMExtension.cs
index b5dd14b0bd..5b6b8db2e5 100644
--- a/src/ServiceFabric/ServiceFabric/Commands/ManagedClusters/AddAzServiceFabricManagedNodeTypeVMExtension.cs
+++ b/src/ServiceFabric/ServiceFabric/Commands/ManagedClusters/AddAzServiceFabricManagedNodeTypeVMExtension.cs
@@ -93,7 +93,7 @@ namespace Microsoft.Azure.Commands.ServiceFabric.Commands
         public override void ExecuteCmdlet()
         {
             this.SetParams();
-            if (ShouldProcess(target: this.Name, action: string.Format("Add Extenions {0} with type {1} to node type {2}", this.Name, this.Type, this.NodeTypeName)))
+            if (ShouldProcess(target: this.Name, action: $"Add Extenions {this.Name} with type {this.Type} to node type {this.NodeTypeName}"))
             {
                 try
                 {
diff --git a/src/ServiceFabric/ServiceFabric/Commands/ManagedClusters/AddAzServiceFabricManagedNodeTypeVMSecret.cs b/src/ServiceFabric/ServiceFabric/Commands/ManagedClusters/AddAzServiceFabricManagedNodeTypeVMSecret.cs
index e2de8cc38c..63ee92d2ef 100644
--- a/src/ServiceFabric/ServiceFabric/Commands/ManagedClusters/AddAzServiceFabricManagedNodeTypeVMSecret.cs
+++ b/src/ServiceFabric/ServiceFabric/Commands/ManagedClusters/AddAzServiceFabricManagedNodeTypeVMSecret.cs
@@ -76,7 +76,7 @@ namespace Microsoft.Azure.Commands.ServiceFabric.Commands
         public override void ExecuteCmdlet()
         {
             this.SetParams();
-            if (ShouldProcess(target: this.Name, action: string.Format("Add Secret to node type {0}", this.Name)))
+            if (ShouldProcess(target: this.Name, action: $"Add Secret to node type {this.Name}"))
             {
                 try
                 {
diff --git a/src/ServiceFabric/ServiceFabric/Commands/ManagedClusters/NewAzServiceFabricManagedCluster.cs b/src/ServiceFabric/ServiceFabric/Commands/ManagedClusters/NewAzServiceFabricManagedCluster.cs
index dddf05d88a..2289507526 100644
--- a/src/ServiceFabric/ServiceFabric/Commands/ManagedClusters/NewAzServiceFabricManagedCluster.cs
+++ b/src/ServiceFabric/ServiceFabric/Commands/ManagedClusters/NewAzServiceFabricManagedCluster.cs
@@ -136,14 +136,14 @@ namespace Microsoft.Azure.Commands.ServiceFabric.Commands
 
         public override void ExecuteCmdlet()
         {
-            if (ShouldProcess(target: this.Name, action: string.Format("Create new managed cluster {0} in resource group {1}", this.Name, this.ResourceGroupName)))
+            if (ShouldProcess(target: this.Name, action: $"Create new managed cluster {this.Name} in resource group {this.ResourceGroupName}"))
             {
                 try
                 {
                     ManagedCluster cluster = SafeGetResource(() => this.SFRPClient.ManagedClusters.Get(this.ResourceGroupName, this.Name));
                     if (cluster != null)
                     {
-                        WriteError(new ErrorRecord(new InvalidOperationException(string.Format("Cluster '{0}' already exists.", this.Name)),
+                        WriteError(new ErrorRecord(new InvalidOperationException($"Cluster '{this.Name}' already exists."),
                             "ResourceAlreadyExists", ErrorCategory.InvalidOperation, null));
                     }
                     else
@@ -152,7 +152,7 @@ namespace Microsoft.Azure.Commands.ServiceFabric.Commands
                         var rg = SafeGetResource(() => this.ResourcesClient.ResourceGroups.Get(this.ResourceGroupName));
                         if (rg == null)
                         {
-                            WriteVerboseWithTimestamp(string.Format("Creating resource group {0} on {1}", this.ResourceGroupName, this.Location));
+                            WriteVerboseWithTimestamp($"Creating resource group {this.ResourceGroupName} on {this.Location}");
                             this.ResourcesClient.ResourceGroups.CreateOrUpdate(this.ResourceGroupName, new ResourceGroup(this.Location));
                         }
 
diff --git a/src/ServiceFabric/ServiceFabric/Commands/ManagedClusters/NewAzServiceFabricManagedNodeType.cs b/src/ServiceFabric/ServiceFabric/Commands/ManagedClusters/NewAzServiceFabricManagedNodeType.cs
index af19c5a55c..c568ae4c49 100644
--- a/src/ServiceFabric/ServiceFabric/Commands/ManagedClusters/NewAzServiceFabricManagedNodeType.cs
+++ b/src/ServiceFabric/ServiceFabric/Commands/ManagedClusters/NewAzServiceFabricManagedNodeType.cs
@@ -100,14 +100,14 @@ namespace Microsoft.Azure.Commands.ServiceFabric.Commands
 
         public override void ExecuteCmdlet()
         {
-            if (ShouldProcess(target: this.Name, action: string.Format("Create new node type {0} in cluster: {1}", this.Name, this.ClusterName)))
+            if (ShouldProcess(target: this.Name, action: $"Create new node type {this.Name} in cluster: {this.ClusterName}"))
             {
                 try
                 {
                     NodeType nodeType = SafeGetResource(() => this.SFRPClient.NodeTypes.Get(this.ResourceGroupName, this.ClusterName, this.Name));
                     if (nodeType != null)
                     {
-                        WriteError(new ErrorRecord(new InvalidOperationException(string.Format("Node type '{0}' already exists.", this.Name)),
+                        WriteError(new ErrorRecord(new InvalidOperationException($"Node type '{this.Name}' already exists."),
                             "ResourceAlreadyExists", ErrorCategory.InvalidOperation, null));
                     }
                     else
diff --git a/src/ServiceFabric/ServiceFabric/Commands/ManagedClusters/RemoveAzServiceFabricManagedCluster.cs b/src/ServiceFabric/ServiceFabric/Commands/ManagedClusters/RemoveAzServiceFabricManagedCluster.cs
index 3819b6a23a..0ed5c5205e 100644
--- a/src/ServiceFabric/ServiceFabric/Commands/ManagedClusters/RemoveAzServiceFabricManagedCluster.cs
+++ b/src/ServiceFabric/ServiceFabric/Commands/ManagedClusters/RemoveAzServiceFabricManagedCluster.cs
@@ -62,7 +62,7 @@ namespace Microsoft.Azure.Commands.ServiceFabric.Commands
         public override void ExecuteCmdlet()
         {
             this.SetParams();
-            if (ShouldProcess(target: this.ResourceGroupName, action: string.Format("Remove cluster {0} in resource group {1}.", this.Name, this.ResourceGroupName)))
+            if (ShouldProcess(target: this.ResourceGroupName, action: $"Remove cluster {this.Name} in resource group {this.ResourceGroupName}."))
             {
                 try
                 {
diff --git a/src/ServiceFabric/ServiceFabric/Commands/ManagedClusters/RemoveAzServiceFabricManagedClusterClientCertificate.cs b/src/ServiceFabric/ServiceFabric/Commands/ManagedClusters/RemoveAzServiceFabricManagedClusterClientCertificate.cs
index 9fd8af5499..7ccdfc8683 100644
--- a/src/ServiceFabric/ServiceFabric/Commands/ManagedClusters/RemoveAzServiceFabricManagedClusterClientCertificate.cs
+++ b/src/ServiceFabric/ServiceFabric/Commands/ManagedClusters/RemoveAzServiceFabricManagedClusterClientCertificate.cs
@@ -86,8 +86,7 @@ namespace Microsoft.Azure.Commands.ServiceFabric.Commands
         public override void ExecuteCmdlet()
         {
             this.SetParams();
-            if (ShouldProcess(target: this.Name, action: string.Format("Remove client cert '{0}' from cluster {1}",
-                (ParameterSetName == ClientCertByTpByName || ParameterSetName == ClientCertByTpByObj) ? this.Thumbprint : this.CommonName, this.Name)))
+            if (ShouldProcess(target: this.Name, action: $"Remove client cert '{((ParameterSetName == ClientCertByTpByName || ParameterSetName == ClientCertByTpByObj) ? this.Thumbprint : this.CommonName)}' from cluster {this.Name}"))
             {
                 try
                 {
@@ -118,7 +117,7 @@ namespace Microsoft.Azure.Commands.ServiceFabric.Commands
         {
             ManagedCluster currentCluster = this.SFRPClient.ManagedClusters.Get(this.ResourceGroupName, this.Name);
 
-            if (currentCluster.Clients == null || currentCluster.Clients.Count() == 0)
+            if (currentCluster.Clients == null || !currentCluster.Clients.Any())
             {
                 throw new InvalidOperationException("The cluster has no client certifices registered.");
             }
@@ -140,9 +139,7 @@ namespace Microsoft.Azure.Commands.ServiceFabric.Commands
 
             if(initialSize == currentCluster.Clients.Count())
             {
-                throw new InvalidOperationException(string.Format(
-                    "Client certificate '{0}' is not registered on the cluster.",
-                    (ParameterSetName == ClientCertByCnByObj || ParameterSetName == ClientCertByTpByObj) ? this.Thumbprint : this.CommonName));
+                throw new InvalidOperationException($"Client certificate '{((ParameterSetName == ClientCertByCnByObj || ParameterSetName == ClientCertByTpByObj) ? this.Thumbprint : this.CommonName)}' is not registered on the cluster.");
             }
 
             return currentCluster;
diff --git a/src/ServiceFabric/ServiceFabric/Commands/ManagedClusters/RemoveAzServiceFabricManagedNodeType.cs b/src/ServiceFabric/ServiceFabric/Commands/ManagedClusters/RemoveAzServiceFabricManagedNodeType.cs
index 673cb2e5c6..2b29f9db3c 100644
--- a/src/ServiceFabric/ServiceFabric/Commands/ManagedClusters/RemoveAzServiceFabricManagedNodeType.cs
+++ b/src/ServiceFabric/ServiceFabric/Commands/ManagedClusters/RemoveAzServiceFabricManagedNodeType.cs
@@ -107,7 +107,7 @@ namespace Microsoft.Azure.Commands.ServiceFabric.Commands
                     case DeleteNodeByName:
                     case DeleteNodeByObj:
                     case DeleteNodeById:
-                        if (ShouldProcess(target: this.Name, action: string.Format("Delete node(s) {0}, from node type {1} on cluster {2}", string.Join(", ", this.NodeName), this.Name, this.ClusterName)))
+                        if (ShouldProcess(target: this.Name, action: $"Delete node(s) {string.Join(", ", this.NodeName)}, from node type {this.Name} on cluster {this.ClusterName}"))
                         {
 
                             var actionParams = new NodeTypeActionParameters(nodes: this.NodeName, force: this.ForceRemoveNode.IsPresent);
@@ -125,7 +125,7 @@ namespace Microsoft.Azure.Commands.ServiceFabric.Commands
                     case DeleteNodeTypeByName:
                     case DeleteNodeTypeByObj:
                     case DeleteNodeTypeById:
-                        if (ShouldProcess(target: this.Name, action: string.Format("Remove node type: {0} on cluster {1}, resource group {2}", this.Name, this.ClusterName, this.ResourceGroupName)))
+                        if (ShouldProcess(target: this.Name, action: $"Remove node type: {this.Name} on cluster {this.ClusterName}, resource group {this.ResourceGroupName}"))
                         {
                             var beginRequestResponse = this.SFRPClient.NodeTypes.BeginDeleteWithHttpMessagesAsync(
                                     this.ResourceGroupName,
diff --git a/src/ServiceFabric/ServiceFabric/Commands/ManagedClusters/RemoveAzServiceFabricManagedNodeTypeVMExtension.cs b/src/ServiceFabric/ServiceFabric/Commands/ManagedClusters/RemoveAzServiceFabricManagedNodeTypeVMExtension.cs
index 14a4214e70..57a5b4f342 100644
--- a/src/ServiceFabric/ServiceFabric/Commands/ManagedClusters/RemoveAzServiceFabricManagedNodeTypeVMExtension.cs
+++ b/src/ServiceFabric/ServiceFabric/Commands/ManagedClusters/RemoveAzServiceFabricManagedNodeTypeVMExtension.cs
@@ -72,7 +72,7 @@ namespace Microsoft.Azure.Commands.ServiceFabric.Commands
         public override void ExecuteCmdlet()
         {
             this.SetParams();
-            if (ShouldProcess(target: this.Name, action: string.Format("Remove Extenions {0} from node type {1}", this.Name, this.NodeTypeName)))
+            if (ShouldProcess(target: this.Name, action: $"Remove Extenions {this.Name} from node type {this.NodeTypeName}"))
             {
                 try
                 {
@@ -109,7 +109,7 @@ namespace Microsoft.Azure.Commands.ServiceFabric.Commands
                 currentNodeType.VmExtensions = currentNodeType.VmExtensions.Where(ext => !string.Equals(ext.Name, this.Name, StringComparison.OrdinalIgnoreCase)).ToList();
                 if (originalLength == currentNodeType.VmExtensions.Count())
                 {
-                    throw new ArgumentException(string.Format("extension with name {0} not found", this.Name));
+                    throw new ArgumentException($"extension with name {this.Name} not found");
                 }
             }
 
diff --git a/src/ServiceFabric/ServiceFabric/Commands/ManagedClusters/RestartAzServiceFabricManagedNodeType.cs b/src/ServiceFabric/ServiceFabric/Commands/ManagedClusters/RestartAzServiceFabricManagedNodeType.cs
index 1f83ce8988..bb710302b8 100644
--- a/src/ServiceFabric/ServiceFabric/Commands/ManagedClusters/RestartAzServiceFabricManagedNodeType.cs
+++ b/src/ServiceFabric/ServiceFabric/Commands/ManagedClusters/RestartAzServiceFabricManagedNodeType.cs
@@ -64,7 +64,7 @@ namespace Microsoft.Azure.Commands.ServiceFabric.Commands
 
         public override void ExecuteCmdlet()
         {
-            if (ShouldProcess(target: this.Name, action: string.Format("Restart node(s) {0}, from node type {1} on cluster {2}", string.Join(", ", this.NodeName), this.Name, this.ClusterName)))
+            if (ShouldProcess(target: this.Name, action: $"Restart node(s) {string.Join(", ", this.NodeName)}, from node type {this.Name} on cluster {this.ClusterName}"))
             {
                 try
                 {
diff --git a/src/ServiceFabric/ServiceFabric/Commands/ManagedClusters/SetAzServiceFabricManagedCluster.cs b/src/ServiceFabric/ServiceFabric/Commands/ManagedClusters/SetAzServiceFabricManagedCluster.cs
index d9b0ec9ce0..5ce830f6ad 100644
--- a/src/ServiceFabric/ServiceFabric/Commands/ManagedClusters/SetAzServiceFabricManagedCluster.cs
+++ b/src/ServiceFabric/ServiceFabric/Commands/ManagedClusters/SetAzServiceFabricManagedCluster.cs
@@ -90,7 +90,7 @@ namespace Microsoft.Azure.Commands.ServiceFabric.Commands
         public override void ExecuteCmdlet()
         {
             this.SetParams();
-            if (ShouldProcess(target: this.Name, action: string.Format("Update cluster {0} on resource group: {1}", this.Name, this.ResourceGroupName)))
+            if (ShouldProcess(target: this.Name, action: $"Update cluster {this.Name} on resource group: {this.ResourceGroupName}"))
             {
                 try
                 {
diff --git a/src/ServiceFabric/ServiceFabric/Commands/ManagedClusters/SetAzServiceFabricManagedNodeType.cs b/src/ServiceFabric/ServiceFabric/Commands/ManagedClusters/SetAzServiceFabricManagedNodeType.cs
index cadd61b008..b0913c0549 100644
--- a/src/ServiceFabric/ServiceFabric/Commands/ManagedClusters/SetAzServiceFabricManagedNodeType.cs
+++ b/src/ServiceFabric/ServiceFabric/Commands/ManagedClusters/SetAzServiceFabricManagedNodeType.cs
@@ -147,7 +147,7 @@ namespace Microsoft.Azure.Commands.ServiceFabric.Commands
                     case ReimageByName:
                     case ReimageById:
                     case ReimageByObj:
-                        if (ShouldProcess(target: this.Name, action: string.Format("Reimage node(s) {0}, from node type {1} on cluster {2}", string.Join(", ", this.NodeName), this.Name, this.ClusterName)))
+                        if (ShouldProcess(target: this.Name, action: $"Reimage node(s) {string.Join(", ", this.NodeName)}, from node type {this.Name} on cluster {this.ClusterName}"))
                         {
 
                             var actionParams = new NodeTypeActionParameters(nodes: this.NodeName, force: this.ForceReimage.IsPresent);
@@ -177,7 +177,7 @@ namespace Microsoft.Azure.Commands.ServiceFabric.Commands
                         throw new ArgumentException("Invalid parameter set", ParameterSetName);
                 }
 
-                if (ShouldProcess(target: this.Name, action: string.Format("Update node type name {0}, cluster: {1}", this.Name, this.ClusterName)))
+                if (ShouldProcess(target: this.Name, action: $"Update node type name {this.Name}, cluster: {this.ClusterName}"))
                 {
                     var beginRequestResponse = this.SFRPClient.NodeTypes.BeginCreateOrUpdateWithHttpMessagesAsync(this.ResourceGroupName, this.ClusterName, this.Name, updatedNodeTypeParams)
                         .GetAwaiter().GetResult();
diff --git a/src/ServiceFabric/ServiceFabric/Commands/NewAzServiceFabricApplication.cs b/src/ServiceFabric/ServiceFabric/Commands/NewAzServiceFabricApplication.cs
index cab9ed0c26..93b306ae29 100644
--- a/src/ServiceFabric/ServiceFabric/Commands/NewAzServiceFabricApplication.cs
+++ b/src/ServiceFabric/ServiceFabric/Commands/NewAzServiceFabricApplication.cs
@@ -95,7 +95,7 @@ namespace Microsoft.Azure.Commands.ServiceFabric.Commands
 
         public override void ExecuteCmdlet()
         {
-            if (ShouldProcess(target: this.ResourceGroupName, action: string.Format("Create new application. name {0}, typename: {1}, version {2}", this.Name, this.ApplicationTypeName, this.ApplicationTypeVersion)))
+            if (ShouldProcess(target: this.ResourceGroupName, action: $"Create new application. name {this.Name}, typename: {this.ApplicationTypeName}, version {this.ApplicationTypeVersion}"))
             {
                 try
                 {
@@ -127,11 +127,11 @@ namespace Microsoft.Azure.Commands.ServiceFabric.Commands
 
             if (app != null)
             {
-                WriteVerbose(string.Format("Application '{0}' already exists.", this.Name));
+                WriteVerbose($"Application '{this.Name}' already exists.");
                 return app;
             }
 
-            WriteVerbose(string.Format("Creating application '{0}'", this.Name));
+            WriteVerbose($"Creating application '{this.Name}'");
             long? minNodes = null;
             if (this.IsParameterBound(c => c.MinimumNodeCount))
             {
@@ -158,7 +158,7 @@ namespace Microsoft.Azure.Commands.ServiceFabric.Commands
                     this.ClusterName,
                     this.Name,
                     appParams),
-                () => string.Format("Provisioning state: {0}", GetAppProvisioningStatus() ?? "Not found"));
+                () => $"Provisioning state: {GetAppProvisioningStatus() ?? "Not found"}");
         }
 
         protected string GetAppProvisioningStatus()
diff --git a/src/ServiceFabric/ServiceFabric/Commands/NewAzServiceFabricApplicationType.cs b/src/ServiceFabric/ServiceFabric/Commands/NewAzServiceFabricApplicationType.cs
index 3b33475024..41c855ad1d 100644
--- a/src/ServiceFabric/ServiceFabric/Commands/NewAzServiceFabricApplicationType.cs
+++ b/src/ServiceFabric/ServiceFabric/Commands/NewAzServiceFabricApplicationType.cs
@@ -42,7 +42,7 @@ namespace Microsoft.Azure.Commands.ServiceFabric.Commands
 
         public override void ExecuteCmdlet()
         {
-            if (ShouldProcess(target: this.ResourceGroupName, action: string.Format("Create new application type {0}", this.Name)))
+            if (ShouldProcess(target: this.ResourceGroupName, action: $"Create new application type {this.Name}"))
             {
                 try
                 {
diff --git a/src/ServiceFabric/ServiceFabric/Commands/NewAzServiceFabricApplicationTypeVersion.cs b/src/ServiceFabric/ServiceFabric/Commands/NewAzServiceFabricApplicationTypeVersion.cs
index bbdb356bf3..c397a84fce 100644
--- a/src/ServiceFabric/ServiceFabric/Commands/NewAzServiceFabricApplicationTypeVersion.cs
+++ b/src/ServiceFabric/ServiceFabric/Commands/NewAzServiceFabricApplicationTypeVersion.cs
@@ -62,7 +62,7 @@ namespace Microsoft.Azure.Commands.ServiceFabric.Commands
 
         public override void ExecuteCmdlet()
         {
-            if (ShouldProcess(target: this.ResourceGroupName, action: string.Format("Create new application type version. typename: {0}, version {1}", this.Name, this.Version)))
+            if (ShouldProcess(target: this.ResourceGroupName, action: $"Create new application type version. typename: {this.Name}, version {this.Version}"))
             {
                 try
                 {
diff --git a/src/ServiceFabric/ServiceFabric/Commands/NewAzServiceFabricService.cs b/src/ServiceFabric/ServiceFabric/Commands/NewAzServiceFabricService.cs
index bd17dea067..008c5b087a 100644
--- a/src/ServiceFabric/ServiceFabric/Commands/NewAzServiceFabricService.cs
+++ b/src/ServiceFabric/ServiceFabric/Commands/NewAzServiceFabricService.cs
@@ -257,13 +257,13 @@ namespace Microsoft.Azure.Commands.ServiceFabric.Commands
 
         public override void ExecuteCmdlet()
         {
-            if (ShouldProcess(target: this.ResourceGroupName, action: string.Format("Create new Service. name {0} in application: {1}, cluster {2}", this.Name, this.ApplicationName, this.ClusterName)))
+            if (ShouldProcess(target: this.ResourceGroupName, action: $"Create new Service. name {this.Name} in application: {this.ApplicationName}, cluster {this.ClusterName}"))
             {
                 try
                 {
                     if (!this.Name.StartsWith(this.ApplicationName))
                     {
-                        throw new PSInvalidOperationException(string.Format("Invalid service name, the application name must be a prefix of the service name, for example: '{0}'", $"{this.ApplicationName}~{this.Name}"));
+                        throw new PSInvalidOperationException($"Invalid service name, the application name must be a prefix of the service name, for example: '{$"{this.ApplicationName}~{this.Name}"}'");
                     }
 
                     var service = CreateService();
@@ -289,11 +289,11 @@ namespace Microsoft.Azure.Commands.ServiceFabric.Commands
 
             if (service != null)
             {
-                WriteVerbose(string.Format("Service '{0}' already exists.", this.Name));
+                WriteVerbose($"Service '{this.Name}' already exists.");
                 return service;
             }
 
-            WriteVerbose(string.Format("Creating service '{0}'", this.Name));
+            WriteVerbose($"Creating service '{this.Name}'");
 
             var assemblyFolder = Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location);
             if (RunningTest)
@@ -308,7 +308,7 @@ namespace Microsoft.Azure.Commands.ServiceFabric.Commands
             var deployment = CreateBasicDeployment(DeploymentMode.Incremental, serviceTemplateFile, serviceParameterFile);
             SetParameters(deployment.Properties.Template as JObject, deployment.Properties.Parameters as JObject);
 
-            var deploymentName = Regex.Replace(string.Format("AzPSService-{0}", this.Name), @"[^-\w\._\(\)]", "");
+            var deploymentName = Regex.Replace($"AzPSService-{this.Name}", @"[^-\w\._\(\)]", "");
             var validateResult = this.ResourceManagerClient.Deployments.Validate(
                 ResourceGroupName,
                 deploymentName,
@@ -469,7 +469,7 @@ namespace Microsoft.Azure.Commands.ServiceFabric.Commands
 
         private ServiceResource WaitForDeployment(Deployment deployment, string deploymentName)
         {
-            var progress = new ProgressRecord(0, string.Format("Request for {0} in progress", typeof(ServiceResource).Name), "Starting...");
+            var progress = new ProgressRecord(0, $"Request for {typeof(ServiceResource).Name} in progress", "Starting...");
             WriteProgress(progress);
             var token = new CancellationTokenSource();
             DeploymentExtended deploymentDetail = null;
@@ -492,7 +492,7 @@ namespace Microsoft.Azure.Commands.ServiceFabric.Commands
             {
                 if (!RunningTest)
                 {
-                    string progressMessage = string.Format("Provisioning State: {0}", GetServiceProvisioningStatus());
+                    string progressMessage = $"Provisioning State: {GetServiceProvisioningStatus()}";
                     WriteVerboseWithTimestamp(progressMessage);
                     progress.StatusDescription = progressMessage;
                     WriteProgress(progress);
diff --git a/src/ServiceFabric/ServiceFabric/Commands/NewAzureRmServiceFabricCluster.cs b/src/ServiceFabric/ServiceFabric/Commands/NewAzureRmServiceFabricCluster.cs
index 80d449e750..364eaea2a1 100644
--- a/src/ServiceFabric/ServiceFabric/Commands/NewAzureRmServiceFabricCluster.cs
+++ b/src/ServiceFabric/ServiceFabric/Commands/NewAzureRmServiceFabricCluster.cs
@@ -273,7 +273,7 @@ namespace Microsoft.Azure.Commands.ServiceFabric.Commands
         {
             base.ExecuteCmdlet();
 
-            if (ShouldProcess(target:  this.ResourceGroupName, action: string.Format("Create new cluster {0}", this.Name ?? this.ResourceGroupName)))
+            if (ShouldProcess(target:  this.ResourceGroupName, action: $"Create new cluster {this.Name ?? this.ResourceGroupName}"))
             {
                 switch (ParameterSetName)
                 {
@@ -690,7 +690,7 @@ namespace Microsoft.Azure.Commands.ServiceFabric.Commands
             }
             else
             {
-                return string.Format("AzurePSDeployment-{0}", DateTime.Now.ToString("MMddHHmmss"));
+                return $"AzurePSDeployment-{DateTime.Now.ToString("MMddHHmmss")}";
             }
         }
 
diff --git a/src/ServiceFabric/ServiceFabric/Commands/ProxyResourceCmdletBase.cs b/src/ServiceFabric/ServiceFabric/Commands/ProxyResourceCmdletBase.cs
index 5fdfba3808..77f6736d9d 100644
--- a/src/ServiceFabric/ServiceFabric/Commands/ProxyResourceCmdletBase.cs
+++ b/src/ServiceFabric/ServiceFabric/Commands/ProxyResourceCmdletBase.cs
@@ -44,11 +44,11 @@ namespace Microsoft.Azure.Commands.ServiceFabric.Commands
 
             if (appType != null)
             {
-                WriteVerbose(string.Format("application type '{0}' already exists.", applicationTypeName));
+                WriteVerbose($"application type '{applicationTypeName}' already exists.");
                 return appType;
             }
 
-            WriteVerbose(string.Format("Creating app type '{0}'.", applicationTypeName));
+            WriteVerbose($"Creating app type '{applicationTypeName}'.");
             return this.SFRPClient.ApplicationTypes.CreateOrUpdate(this.ResourceGroupName, this.ClusterName, applicationTypeName, new ApplicationTypeResource());
         }
 
@@ -64,12 +64,12 @@ namespace Microsoft.Azure.Commands.ServiceFabric.Commands
 
             if (appTypeVersion != null)
             {
-                WriteVerbose(string.Format("application type version '{0}':{1} already exists.", applicationTypeName, typeVersion));
+                WriteVerbose($"application type version '{applicationTypeName}':{typeVersion} already exists.");
                 if (appTypeVersion.ProvisioningState == "Failed")
                 {
-                    string resourceMessage = string.Format("ApplicationTypeVersion {0}:{1}", applicationTypeName, typeVersion);
+                    string resourceMessage = $"ApplicationTypeVersion {applicationTypeName}:{typeVersion}";
                     ConfirmAction(force,
-                        string.Format("{0} already exits but provisioning is in Failed state. Do you want to recreate the resource?", resourceMessage),
+                        $"{resourceMessage} already exits but provisioning is in Failed state. Do you want to recreate the resource?",
                         "Recreating application type version.",
                         resourceMessage,
                         () =>
@@ -85,7 +85,7 @@ namespace Microsoft.Azure.Commands.ServiceFabric.Commands
             
             if (appTypeVersion.ProvisioningState == "Failed")
             {
-                throw new PSInvalidOperationException(string.Format("ApplicationTypeVersion {0}:{1} is in provisioning state {2}", applicationTypeName, typeVersion, appTypeVersion.ProvisioningState));
+                throw new PSInvalidOperationException($"ApplicationTypeVersion {applicationTypeName}:{typeVersion} is in provisioning state {appTypeVersion.ProvisioningState}");
             }
 
             return appTypeVersion;
@@ -93,7 +93,7 @@ namespace Microsoft.Azure.Commands.ServiceFabric.Commands
 
         private ApplicationTypeVersionResource CreateOrUpdateApplicationTypeVersion(string applicationTypeName, string typeVersion, string packageUrl, Hashtable defaultParameters)
         {
-            WriteVerbose(string.Format("Creating app type version '{0}':{1}.", applicationTypeName, typeVersion));
+            WriteVerbose($"Creating app type version '{applicationTypeName}':{typeVersion}.");
             ApplicationTypeVersionResource appTypeVersionParams = new ApplicationTypeVersionResource(
                     packageUrl,
                     name: this.ClusterName,
@@ -107,7 +107,7 @@ namespace Microsoft.Azure.Commands.ServiceFabric.Commands
                     applicationTypeName,
                     typeVersion,
                     appTypeVersionParams),
-                () => string.Format("Provisioning state: {0}", GetAppTypeVersionProvisioningStatus(applicationTypeName, typeVersion) ?? "Not found"));
+                () => $"Provisioning state: {GetAppTypeVersionProvisioningStatus(applicationTypeName, typeVersion) ?? "Not found"}");
         }
 
         protected string GetAppTypeVersionProvisioningStatus(string applicationTypeName, string version)
diff --git a/src/ServiceFabric/ServiceFabric/Commands/RemoveAzServiceFabricApplication.cs b/src/ServiceFabric/ServiceFabric/Commands/RemoveAzServiceFabricApplication.cs
index 627f32dafd..16021cbbcd 100644
--- a/src/ServiceFabric/ServiceFabric/Commands/RemoveAzServiceFabricApplication.cs
+++ b/src/ServiceFabric/ServiceFabric/Commands/RemoveAzServiceFabricApplication.cs
@@ -85,8 +85,8 @@ namespace Microsoft.Azure.Commands.ServiceFabric.Commands
                     throw new PSArgumentException("Invalid ParameterSetName");
             }
 
-            var resourceMessage = string.Format("Application '{0}' in resource group '{1}', cluster name {2}", this.Name, this.ResourceGroupName, this.ClusterName);
-            if (ShouldProcess(target: this.ResourceGroupName, action: string.Format("Remove {0}", resourceMessage)))
+            var resourceMessage = $"Application '{this.Name}' in resource group '{this.ResourceGroupName}', cluster name {this.ClusterName}";
+            if (ShouldProcess(target: this.ResourceGroupName, action: $"Remove {resourceMessage}"))
             {
                 ConfirmAction(Force.IsPresent,
                     "Do you want to remove the application? This will remove all services under this resource",
@@ -120,7 +120,7 @@ namespace Microsoft.Azure.Commands.ServiceFabric.Commands
             if (!appRId.ResourceType.EndsWith(Constants.applicationProvider)
                 || !clusterRId.ResourceType.EndsWith(Constants.clusterProvider))
             {
-                throw new PSArgumentException(string.Format("invalid resource id {0}", this.ResourceId));
+                throw new PSArgumentException($"invalid resource id {this.ResourceId}");
             }
 
             this.ClusterName = clusterRId.ResourceName;
diff --git a/src/ServiceFabric/ServiceFabric/Commands/RemoveAzServiceFabricApplicationType.cs b/src/ServiceFabric/ServiceFabric/Commands/RemoveAzServiceFabricApplicationType.cs
index 75a267aaec..a72bd9c3a0 100644
--- a/src/ServiceFabric/ServiceFabric/Commands/RemoveAzServiceFabricApplicationType.cs
+++ b/src/ServiceFabric/ServiceFabric/Commands/RemoveAzServiceFabricApplicationType.cs
@@ -85,8 +85,8 @@ namespace Microsoft.Azure.Commands.ServiceFabric.Commands
                     throw new PSArgumentException("Invalid ParameterSetName");
             }
             
-            var resourceMessage = string.Format("ApplicationType '{0}' in resource group '{1}', cluster name {2}", this.Name, this.ResourceGroupName, this.ClusterName);
-            if (ShouldProcess(target: this.ResourceGroupName, action: string.Format("Remove {0}", resourceMessage)))
+            var resourceMessage = $"ApplicationType '{this.Name}' in resource group '{this.ResourceGroupName}', cluster name {this.ClusterName}";
+            if (ShouldProcess(target: this.ResourceGroupName, action: $"Remove {resourceMessage}"))
             {
                 ConfirmAction(Force.IsPresent,
                     "Do you want to remove the application type? This will remove all type versions under this resource. Please remove all applications under this resource before running this command.",
@@ -120,7 +120,7 @@ namespace Microsoft.Azure.Commands.ServiceFabric.Commands
             if (!appTypeRId.ResourceType.EndsWith(Constants.applicationTypeProvider)
                 || !clusterRId.ResourceType.EndsWith(Constants.clusterProvider))
             {
-                throw new PSArgumentException(string.Format("invalid resource id {0}", this.ResourceId));
+                throw new PSArgumentException($"invalid resource id {this.ResourceId}");
             }
 
             this.ClusterName = clusterRId.ResourceName;
diff --git a/src/ServiceFabric/ServiceFabric/Commands/RemoveAzServiceFabricApplicationTypeVersion.cs b/src/ServiceFabric/ServiceFabric/Commands/RemoveAzServiceFabricApplicationTypeVersion.cs
index 0f4490a07c..81be69dddc 100644
--- a/src/ServiceFabric/ServiceFabric/Commands/RemoveAzServiceFabricApplicationTypeVersion.cs
+++ b/src/ServiceFabric/ServiceFabric/Commands/RemoveAzServiceFabricApplicationTypeVersion.cs
@@ -89,8 +89,8 @@ namespace Microsoft.Azure.Commands.ServiceFabric.Commands
                     throw new PSArgumentException("Invalid ParameterSetName");
             }
 
-            var resourceMessage = string.Format("ApplicationType '{0}' in resource group '{1}', cluster name {2}", this.Name, this.ResourceGroupName, this.ClusterName);
-            if (ShouldProcess(target: this.ResourceGroupName, action: string.Format("Remove {0}", resourceMessage)))
+            var resourceMessage = $"ApplicationType '{this.Name}' in resource group '{this.ResourceGroupName}', cluster name {this.ClusterName}";
+            if (ShouldProcess(target: this.ResourceGroupName, action: $"Remove {resourceMessage}"))
             {
                 ConfirmAction(Force.IsPresent,
                     "Do you want to remove the application type version? Please remove all applications under this resource before running this command.",
@@ -126,7 +126,7 @@ namespace Microsoft.Azure.Commands.ServiceFabric.Commands
                 || !appTypeRId.ResourceType.EndsWith(Constants.applicationTypeProvider)
                 || !clusterRId.ResourceType.EndsWith(Constants.clusterProvider))
             {
-                throw new PSArgumentException(string.Format("invalid resource id {0}", this.ResourceId));
+                throw new PSArgumentException($"invalid resource id {this.ResourceId}");
             }
             
             this.ClusterName = clusterRId.ResourceName;
diff --git a/src/ServiceFabric/ServiceFabric/Commands/RemoveAzServiceFabricService.cs b/src/ServiceFabric/ServiceFabric/Commands/RemoveAzServiceFabricService.cs
index c78353185b..7e8a20a23a 100644
--- a/src/ServiceFabric/ServiceFabric/Commands/RemoveAzServiceFabricService.cs
+++ b/src/ServiceFabric/ServiceFabric/Commands/RemoveAzServiceFabricService.cs
@@ -89,8 +89,8 @@ namespace Microsoft.Azure.Commands.ServiceFabric.Commands
                     throw new PSArgumentException("Invalid ParameterSetName");
             }
 
-            var resourceMessage = string.Format("Service '{0}' in application {1} in resource group '{2}', cluster name {3}", this.Name, this.ApplicationName, this.ResourceGroupName, this.ClusterName);
-            if (ShouldProcess(target: this.ResourceGroupName, action: string.Format("Remove {0}", resourceMessage)))
+            var resourceMessage = $"Service '{this.Name}' in application {this.ApplicationName} in resource group '{this.ResourceGroupName}', cluster name {this.ClusterName}";
+            if (ShouldProcess(target: this.ResourceGroupName, action: $"Remove {resourceMessage}"))
             {
                 ConfirmAction(Force.IsPresent,
                     "Do you want to remove the service?",
@@ -126,7 +126,7 @@ namespace Microsoft.Azure.Commands.ServiceFabric.Commands
                 || !appRId.ResourceType.EndsWith(Constants.applicationProvider)
                 || !clusterRId.ResourceType.EndsWith(Constants.clusterProvider))
             {
-                throw new PSArgumentException(string.Format("invalid resource id {0}", this.ResourceId));
+                throw new PSArgumentException($"invalid resource id {this.ResourceId}");
             }
 
             this.ApplicationName = appRId.ResourceName;
diff --git a/src/ServiceFabric/ServiceFabric/Commands/RemoveAzureRmServiceFabricNode.cs b/src/ServiceFabric/ServiceFabric/Commands/RemoveAzureRmServiceFabricNode.cs
index d7123b8443..e1b45d2646 100644
--- a/src/ServiceFabric/ServiceFabric/Commands/RemoveAzureRmServiceFabricNode.cs
+++ b/src/ServiceFabric/ServiceFabric/Commands/RemoveAzureRmServiceFabricNode.cs
@@ -49,7 +49,7 @@ namespace Microsoft.Azure.Commands.ServiceFabric.Commands
 
         public override void ExecuteCmdlet()
         {
-            if (ShouldProcess(target: this.Name, action: string.Format("Remove {0} nodes from {1}", -toRemoveNode, this.NodeType)))
+            if (ShouldProcess(target: this.Name, action: $"Remove {-toRemoveNode} nodes from {this.NodeType}"))
             {
                 base.ExecuteCmdlet();
             }
diff --git a/src/ServiceFabric/ServiceFabric/Commands/RemoveAzureRmServiceFabricNodeType.cs b/src/ServiceFabric/ServiceFabric/Commands/RemoveAzureRmServiceFabricNodeType.cs
index 047761c2eb..5e4b61fa3e 100644
--- a/src/ServiceFabric/ServiceFabric/Commands/RemoveAzureRmServiceFabricNodeType.cs
+++ b/src/ServiceFabric/ServiceFabric/Commands/RemoveAzureRmServiceFabricNodeType.cs
@@ -80,7 +80,7 @@ namespace Microsoft.Azure.Commands.ServiceFabric.Commands
                         this.NodeType));
             }
 
-            if (ShouldProcess(target: this.NodeType, action: string.Format("Remove a nodetype {0} ", this.NodeType)))
+            if (ShouldProcess(target: this.NodeType, action: $"Remove a nodetype {this.NodeType} "))
             {
                 if (vmssExists)
                 {
diff --git a/src/ServiceFabric/ServiceFabric/Commands/ServiceFabricClusterCertificateCmdlet.cs b/src/ServiceFabric/ServiceFabric/Commands/ServiceFabricClusterCertificateCmdlet.cs
index ce22dd4d99..4fd7ab57c3 100644
--- a/src/ServiceFabric/ServiceFabric/Commands/ServiceFabricClusterCertificateCmdlet.cs
+++ b/src/ServiceFabric/ServiceFabric/Commands/ServiceFabricClusterCertificateCmdlet.cs
@@ -244,7 +244,7 @@ namespace Microsoft.Azure.Commands.ServiceFabric.Commands
                 IssuerParameters = new IssuerParameters() { Name = Constants.SelfSignedIssuerName }
             };
 
-            WriteVerboseWithTimestamp(string.Format("Begin to create self signed certificate {0}", this.keyVaultCertificateName));
+            WriteVerboseWithTimestamp($"Begin to create self signed certificate {this.keyVaultCertificateName}");
 
             CertificateOperation operation;
             try
@@ -262,7 +262,7 @@ namespace Microsoft.Azure.Commands.ServiceFabric.Commands
             {
                 operation = this.KeyVaultClient.GetCertificateOperationAsync(keyVaultUrl, this.keyVaultCertificateName).Result;
                 System.Threading.Thread.Sleep(TimeSpan.FromSeconds(WriteVerboseIntervalInSec));
-                WriteVerboseWithTimestamp(string.Format("Creating self signed certificate {0} with status {1}", this.keyVaultCertificateName, operation.Status));
+                WriteVerboseWithTimestamp($"Creating self signed certificate {this.keyVaultCertificateName} with status {operation.Status}");
             }
 
             if (retry < 0)
@@ -296,7 +296,7 @@ namespace Microsoft.Azure.Commands.ServiceFabric.Commands
             certificateBundle = this.KeyVaultClient.GetCertificateAsync(keyVaultUrl, this.keyVaultCertificateName).Result;
             thumbprint = BitConverter.ToString(certificateBundle.X509Thumbprint).Replace("-", "");
 
-            WriteVerboseWithTimestamp(string.Format("Self signed certificate created: {0}", certificateBundle.Id));
+            WriteVerboseWithTimestamp($"Self signed certificate created: {certificateBundle.Id}");
 
             if (!string.IsNullOrEmpty(this.CertificateOutputFolder))
             {
@@ -460,7 +460,7 @@ namespace Microsoft.Azure.Commands.ServiceFabric.Commands
                             continue;
                         }
 
-                        WriteVerboseWithTimestamp(string.Format("Found VMSS: {0}, id: {1} for cluster {2}", vmss.Name, vmss.Id, clusterId));
+                        WriteVerboseWithTimestamp($"Found VMSS: {vmss.Name}, id: {vmss.Id} for cluster {clusterId}");
 
                         var extConfig = (JObject)sfExt.Settings;
 
@@ -528,7 +528,7 @@ namespace Microsoft.Azure.Commands.ServiceFabric.Commands
             } while (!string.IsNullOrEmpty(vmssPages.NextPageLink) &&
                      (vmssPages = this.ComputeClient.VirtualMachineScaleSets.ListNext(vmssPages.NextPageLink)) != null);
 
-            if (allTasks.Count() == 0)
+            if (!allTasks.Any())
             {
                 throw new ItemNotFoundException(string.Format(ServiceFabricProperties.Resources.NoVmssFoundForCluster, this.ResourceGroupName, clusterId));
             }
@@ -542,9 +542,9 @@ namespace Microsoft.Azure.Commands.ServiceFabric.Commands
             pfxOutputPath = null;
             if (vault == null)
             {
-                WriteVerboseWithTimestamp(string.Format("Creating Azure Key Vault {0}", this.KeyVaultName));
+                WriteVerboseWithTimestamp($"Creating Azure Key Vault {this.KeyVaultName}");
                 vault = CreateKeyVault(this.Name, this.KeyVaultName, this.KeyVaultResourceGroupLocation, this.KeyVaultResourceGroupName);
-                WriteVerboseWithTimestamp(string.Format("Key Vault is created: {0}", vault.Id));
+                WriteVerboseWithTimestamp($"Key Vault is created: {vault.Id}");
             }
 
             this.keyVaultCertificateName = CreateDefaultCertificateName(this.ResourceGroupName);
@@ -583,7 +583,7 @@ namespace Microsoft.Azure.Commands.ServiceFabric.Commands
                 }
             }
 
-            return string.Format("{0}{1}", sb.ToString(), DateTime.Now.ToString("yyyyMMddHHmmss"));
+            return $"{sb.ToString()}{DateTime.Now.ToString("yyyyMMddHHmmss")}";
         }
 
         protected static string CreateDefaultKeyVaultName(string resourceGroupName)
diff --git a/src/ServiceFabric/ServiceFabric/Commands/ServiceFabricCmdletBase.cs b/src/ServiceFabric/ServiceFabric/Commands/ServiceFabricCmdletBase.cs
index 1a26407778..6a3004b7f1 100644
--- a/src/ServiceFabric/ServiceFabric/Commands/ServiceFabricCmdletBase.cs
+++ b/src/ServiceFabric/ServiceFabric/Commands/ServiceFabricCmdletBase.cs
@@ -181,7 +181,7 @@ namespace Microsoft.Azure.Commands.ServiceFabric.Commands
                     {
                         if (string.Equals(GetClusterIdFromExtension(sfExtension), clusterId, StringComparison.OrdinalIgnoreCase))
                         {
-                            WriteVerboseWithTimestamp(string.Format("GetVmss: Found vmss {0} that corresponds to cluster id {1}", vmss.Id, clusterId));
+                            WriteVerboseWithTimestamp($"GetVmss: Found vmss {vmss.Id} that corresponds to cluster id {clusterId}");
                             string nodeTypeRef = GetNodeTypeRefFromExtension(sfExtension);
                             if (string.Equals(nodeTypeRef, name, StringComparison.OrdinalIgnoreCase))
                             {
@@ -425,14 +425,14 @@ namespace Microsoft.Azure.Commands.ServiceFabric.Commands
             collection.Import(pfxFilePath, clearPassword, flag);
 
             var clearBytes = collection.Export(contentType, clearPassword);
-            if (clearBytes == null || clearBytes.Count() == 0)
+            if (clearBytes == null || !clearBytes.Any())
             {
                 throw new PSArgumentException("Invalid pfx");
             }
 
             var fileContentEncoded = Convert.ToBase64String(clearBytes);
 
-            WriteVerboseWithTimestamp(string.Format("Importing certificate to Azure KeyVault {0}", certificateName));
+            WriteVerboseWithTimestamp($"Importing certificate to Azure KeyVault {certificateName}");
             var certificateBundle = this.KeyVaultClient.ImportCertificateAsync(
                 CreateVaultUri(keyVaultName).ToString(),
                 certificateName,
@@ -447,7 +447,7 @@ namespace Microsoft.Azure.Commands.ServiceFabric.Commands
                 }
                 ).GetAwaiter().GetResult();
 
-            WriteVerboseWithTimestamp(string.Format("Certificate imported Azure KeyVault {0}", certificateBundle.Id));
+            WriteVerboseWithTimestamp($"Certificate imported Azure KeyVault {certificateBundle.Id}");
 
             return certificateBundle;
         }
@@ -460,7 +460,7 @@ namespace Microsoft.Azure.Commands.ServiceFabric.Commands
             {
                 var user = GraphClient.Users.List(
                     new Rest.Azure.OData.ODataQuery<User>(
-                        string.Format("$filter=userPrincipalName eq '{0}'", DefaultContext.Account.Id)
+                        $"$filter=userPrincipalName eq '{DefaultContext.Account.Id}'"
                         )).FirstOrDefault();
 
                 return user?.ObjectId;
@@ -469,7 +469,7 @@ namespace Microsoft.Azure.Commands.ServiceFabric.Commands
             {
                 var user = GraphClient.ServicePrincipals.List(
                     new Rest.Azure.OData.ODataQuery<ServicePrincipal>(
-                        string.Format("$filter=servicePrincipalNames/any(c: c eq '{0}')", DefaultContext.Account.Id))
+                        $"$filter=servicePrincipalNames/any(c: c eq '{DefaultContext.Account.Id}')")
                     ).FirstOrDefault();
 
                 return user?.ObjectId;
@@ -532,7 +532,7 @@ namespace Microsoft.Azure.Commands.ServiceFabric.Commands
 
         protected T StartRequestAndWait<T>(Func<Task<AzureOperationResponse<T>>> requestAction, Func<string> getResourceCurrentStatus) where T : class
         {
-            var progress = new ProgressRecord(0, string.Format("Request for {0} in progress", typeof(T).Name), "Starting...");
+            var progress = new ProgressRecord(0, $"Request for {typeof(T).Name} in progress", "Starting...");
             WriteProgress(progress);
             AzureOperationResponse<T> beginRequestResponse = null;
             AzureOperationResponse<T> result = null;
@@ -562,10 +562,7 @@ namespace Microsoft.Azure.Commands.ServiceFabric.Commands
                     {
                         if (!correlationPrinted && beginRequestResponse != null)
                         {
-                            WriteVerboseWithTimestamp(string.Format(
-                                "Beging request ARM correlationId: '{0}' response: '{1}'",
-                                beginRequestResponse.RequestId,
-                                beginRequestResponse.Response.StatusCode));
+                            WriteVerboseWithTimestamp($"Beging request ARM correlationId: '{beginRequestResponse.RequestId}' response: '{beginRequestResponse.Response.StatusCode}'");
                             correlationPrinted = true;
                         }
 
@@ -581,10 +578,7 @@ namespace Microsoft.Azure.Commands.ServiceFabric.Commands
                     string errorMessage = "Begin request operation failed";
                     if (beginRequestResponse != null)
                     {
-                        errorMessage = string.Format(
-                            "Operation Failed. Begin request with ARM correlationId: '{0}' response: '{1}'",
-                            beginRequestResponse.RequestId,
-                            beginRequestResponse.Response.StatusCode);
+                        errorMessage = $"Operation Failed. Begin request with ARM correlationId: '{beginRequestResponse.RequestId}' response: '{beginRequestResponse.Response.StatusCode}'";
                         
                     }
 
diff --git a/src/ServiceFabric/ServiceFabric/Commands/ServiceFabricCommonCmdletBase.cs b/src/ServiceFabric/ServiceFabric/Commands/ServiceFabricCommonCmdletBase.cs
index 915c6d9df5..2648a676e3 100644
--- a/src/ServiceFabric/ServiceFabric/Commands/ServiceFabricCommonCmdletBase.cs
+++ b/src/ServiceFabric/ServiceFabric/Commands/ServiceFabricCommonCmdletBase.cs
@@ -84,7 +84,7 @@ namespace Microsoft.Azure.Commands.ServiceFabric.Commands
             ResourceIdentifier rId = new ResourceIdentifier(resourceId);
             if (!rId.ResourceType.EndsWith(resourceType, StringComparison.OrdinalIgnoreCase))
             {
-                throw new PSArgumentException(string.Format("Invalid resource id {0}", resourceId));
+                throw new PSArgumentException($"Invalid resource id {resourceId}");
             }
 
             resourceGroup = rId.ResourceGroupName;
@@ -183,9 +183,7 @@ namespace Microsoft.Azure.Commands.ServiceFabric.Commands
         {
             var progress = new ProgressRecord(0, "Request in progress", "Getting Status...");
             WriteProgress(progress);
-            WriteVerboseWithTimestamp(string.Format("Beging request ARM correlationId: '{0}' response: '{1}'",
-                                        beginRequestResponse.RequestId,
-                                        beginRequestResponse.Response.StatusCode));
+            WriteVerboseWithTimestamp($"Beging request ARM correlationId: '{beginRequestResponse.RequestId}' response: '{beginRequestResponse.Response.StatusCode}'");
 
             AzureOperationResponse<T> result = null;
             var tokenSource = new CancellationTokenSource();
@@ -363,9 +361,8 @@ namespace Microsoft.Azure.Commands.ServiceFabric.Commands
                 exception = exception.InnerException;
             }
 
-            if (exception is CloudException)
+            if (exception is CloudException cloudException)
             {
-                var cloudException = (CloudException)exception;
                 if (cloudException.Body != null)
                 {
                     var cloudErrorMessage = GetCloudErrorMessage(cloudException.Body);
@@ -374,9 +371,8 @@ namespace Microsoft.Azure.Commands.ServiceFabric.Commands
                         new ErrorRecord(ex, string.Empty, ErrorCategory.NotSpecified, null));
                 }
             }
-            else if (exception is ErrorModelException)
+            else if (exception is ErrorModelException errorModelException)
             {
-                var errorModelException = (ErrorModelException)exception;
                 if (errorModelException.Body != null)
                 {
                     var cloudErrorMessage = GetErrorModelErrorMessage(errorModelException.Body);
@@ -438,11 +434,7 @@ namespace Microsoft.Azure.Commands.ServiceFabric.Commands
                 return string.Empty;
             }
 
-            var message = string.Format(
-                "Code: {0}, Message: {1}{2}",
-                error.Error.Code,
-                error.Error.Message,
-                Environment.NewLine);
+            var message = $"Code: {error.Error.Code}, Message: {error.Error.Message}{Environment.NewLine}";
 
             return message;
         }
diff --git a/src/ServiceFabric/ServiceFabric/Commands/SetAzureRmServiceFabricSetting.cs b/src/ServiceFabric/ServiceFabric/Commands/SetAzureRmServiceFabricSetting.cs
index 1dd7ebe459..cbafded0b4 100644
--- a/src/ServiceFabric/ServiceFabric/Commands/SetAzureRmServiceFabricSetting.cs
+++ b/src/ServiceFabric/ServiceFabric/Commands/SetAzureRmServiceFabricSetting.cs
@@ -45,7 +45,7 @@ namespace Microsoft.Azure.Commands.ServiceFabric.Commands
 
             var fabricSettings = DictionaryToFabricSettings(settings);
 
-            if (ShouldProcess(target: this.Name, action: string.Format("Set fabric settings of {0} ", this.Name)))
+            if (ShouldProcess(target: this.Name, action: $"Set fabric settings of {this.Name} "))
             {
                 cluster = SendPatchRequest(new ClusterUpdateParameters()
                 {
diff --git a/src/ServiceFabric/ServiceFabric/Commands/SetAzureRmServiceFabricUpgradeType.cs b/src/ServiceFabric/ServiceFabric/Commands/SetAzureRmServiceFabricUpgradeType.cs
index 699cfad2ff..a878a39cf2 100644
--- a/src/ServiceFabric/ServiceFabric/Commands/SetAzureRmServiceFabricUpgradeType.cs
+++ b/src/ServiceFabric/ServiceFabric/Commands/SetAzureRmServiceFabricUpgradeType.cs
@@ -68,7 +68,7 @@ namespace Microsoft.Azure.Commands.ServiceFabric.Commands
 
             patchRequest.UpgradeMode = UpgradeMode.ToString();
 
-            if (ShouldProcess(target: this.Name, action: string.Format("Set fabric upgrade type to {0} ", this.UpgradeMode)))
+            if (ShouldProcess(target: this.Name, action: $"Set fabric upgrade type to {this.UpgradeMode} "))
             {
                 var cluster = SendPatchRequest(patchRequest);
                 WriteObject(cluster, true);
diff --git a/src/ServiceFabric/ServiceFabric/Commands/UpdateAzServiceFabricApplication.cs b/src/ServiceFabric/ServiceFabric/Commands/UpdateAzServiceFabricApplication.cs
index 00ad06cf3c..579664c815 100644
--- a/src/ServiceFabric/ServiceFabric/Commands/UpdateAzServiceFabricApplication.cs
+++ b/src/ServiceFabric/ServiceFabric/Commands/UpdateAzServiceFabricApplication.cs
@@ -211,7 +211,7 @@ namespace Microsoft.Azure.Commands.ServiceFabric.Commands
                     throw new PSArgumentException("Invalid ParameterSetName");
             }
 
-            if (ShouldProcess(target: this.ResourceGroupName, action: string.Format("Update application '{0}'" , this.Name)))
+            if (ShouldProcess(target: this.ResourceGroupName, action: $"Update application '{this.Name}'"))
             {
                 try
                 {
@@ -221,7 +221,7 @@ namespace Microsoft.Azure.Commands.ServiceFabric.Commands
 
                         if (currentApp.TypeVersion.Equals(this.ApplicationTypeVersion))
                         {
-                            throw new PSInvalidOperationException(string.Format("The application '{0}' is alrady running with type version '{1}'.", currentApp.Name, currentApp.TypeVersion));
+                            throw new PSInvalidOperationException($"The application '{currentApp.Name}' is alrady running with type version '{currentApp.TypeVersion}'.");
                         }
 
                         var appTypeVersion = SafeGetResource(() =>
@@ -235,12 +235,10 @@ namespace Microsoft.Azure.Commands.ServiceFabric.Commands
                         if (appTypeVersion == null)
                         {
                             throw new PSArgumentException(
-                                string.Format("Application type version {0}:{1} not found. Create the type version before runnig this command.",
-                                currentApp.TypeName,
-                                this.ApplicationTypeVersion));
+                                $"Application type version {currentApp.TypeName}:{this.ApplicationTypeVersion} not found. Create the type version before runnig this command.");
                         }
 
-                        WriteVerbose(string.Format("Updating application to version {0}", this.ApplicationTypeVersion));
+                        WriteVerbose($"Updating application to version {this.ApplicationTypeVersion}");
                     }
 
                     var app = UpdateApplication();
@@ -256,7 +254,7 @@ namespace Microsoft.Azure.Commands.ServiceFabric.Commands
 
         private ApplicationResource UpdateApplication()
         {
-            WriteVerbose(string.Format("Updating application '{0}'", this.Name));
+            WriteVerbose($"Updating application '{this.Name}'");
             if (ParameterSetName == ByInputObject)
             {
                 return StartUpdate(this.InputObject);
@@ -296,7 +294,7 @@ namespace Microsoft.Azure.Commands.ServiceFabric.Commands
             //TODO: use BeginUpdateWithHttpMessagesAsync (Patch) once fix is deployed in SFRP
             return StartRequestAndWait<ApplicationResource>(
                 () => this.SFRPClient.Applications.BeginCreateOrUpdateWithHttpMessagesAsync(this.ResourceGroupName, this.ClusterName, this.Name, appResource),
-                () => string.Format("Provisioning state: {0}", GetAppProvisioningStatus() ?? "Not found"));
+                () => $"Provisioning state: {GetAppProvisioningStatus() ?? "Not found"}");
         }
 
         private ApplicationUpgradePolicy SetUpgradePolicy(ApplicationUpgradePolicy currentPolicy)
@@ -459,7 +457,7 @@ namespace Microsoft.Azure.Commands.ServiceFabric.Commands
             if (!appRId.ResourceType.EndsWith(Constants.applicationProvider)
                 || !clusterRId.ResourceType.EndsWith(Constants.clusterProvider))
             {
-                throw new PSArgumentException(string.Format("invalid resource id {0}", this.ResourceId));
+                throw new PSArgumentException($"invalid resource id {this.ResourceId}");
             }
 
             this.ClusterName = clusterRId.ResourceName;
diff --git a/src/ServiceFabric/ServiceFabric/Commands/UpdateAzureRmServiceFabricDurability.cs b/src/ServiceFabric/ServiceFabric/Commands/UpdateAzureRmServiceFabricDurability.cs
index ba6f25bdf5..89d5fa5434 100644
--- a/src/ServiceFabric/ServiceFabric/Commands/UpdateAzureRmServiceFabricDurability.cs
+++ b/src/ServiceFabric/ServiceFabric/Commands/UpdateAzureRmServiceFabricDurability.cs
@@ -118,7 +118,7 @@ namespace Microsoft.Azure.Commands.ServiceFabric.Commands
             ((JObject)ext.Settings)["durabilityLevel"] = this.DurabilityLevel.ToString();
             ((JObject)ext.Settings)["enableParallelJobs"] = true;
 
-            if (ShouldProcess(target: this.Name, action: string.Format("Update fabric durability level to {0} of {1}", this.DurabilityLevel, this.NodeType)))
+            if (ShouldProcess(target: this.Name, action: $"Update fabric durability level to {this.DurabilityLevel} of {this.NodeType}"))
             {
                 var vmssTask = ComputeClient.VirtualMachineScaleSets.CreateOrUpdateAsync(
                     ResourceGroupName,
diff --git a/src/ServiceFabric/ServiceFabric/Commands/UpdateAzureRmServiceFabricReliability.cs b/src/ServiceFabric/ServiceFabric/Commands/UpdateAzureRmServiceFabricReliability.cs
index bb0fa7fb50..34c9ddcace 100644
--- a/src/ServiceFabric/ServiceFabric/Commands/UpdateAzureRmServiceFabricReliability.cs
+++ b/src/ServiceFabric/ServiceFabric/Commands/UpdateAzureRmServiceFabricReliability.cs
@@ -80,7 +80,7 @@ namespace Microsoft.Azure.Commands.ServiceFabric.Commands
                 throw new PSInvalidOperationException(ServiceFabricProperties.Resources.SkuCapacityIsNull);
             }
 
-            if (ShouldProcess(target: this.Name, action: string.Format("Update fabric reliability level to {0}", this.ReliabilityLevel)))
+            if (ShouldProcess(target: this.Name, action: $"Update fabric reliability level to {this.ReliabilityLevel}"))
             {
                 if ((int)this.ReliabilityLevel >= (int)oldReliabilityLevel)
                 {
diff --git a/src/ServiceFabric/ServiceFabric/Models/PSDeploymentExtended.cs b/src/ServiceFabric/ServiceFabric/Models/PSDeploymentExtended.cs
index 0cd7e51f80..3bebab5b60 100644
--- a/src/ServiceFabric/ServiceFabric/Models/PSDeploymentExtended.cs
+++ b/src/ServiceFabric/ServiceFabric/Models/PSDeploymentExtended.cs
@@ -29,12 +29,12 @@ namespace Microsoft.Azure.Commands.ServiceFabric.Models
         {
             const string spaces = "";
             var sb = new StringBuilder();
-            sb.AppendLine(string.Format("{0}{1} : {2}", spaces, "Name",this.Name));
-            sb.AppendLine(string.Format("{0}{1} : {2}", spaces, "Id", this.Id));
-            sb.AppendLine(string.Format("{0}{1} : {2}", spaces, "CorrelationId", this.Properties.CorrelationId));
-            sb.AppendLine(string.Format("{0}{1} : {2}", spaces, "Mode", this.Properties.Mode));
-            sb.AppendLine(string.Format("{0}{1} : {2}", spaces, "ProvisioningState", this.Properties.ProvisioningState));
-            sb.AppendLine(string.Format("{0}{1} : {2}", spaces, "Timestamp", this.Properties.Timestamp));
+            sb.AppendLine($"{spaces}{"Name"} : {this.Name}");
+            sb.AppendLine($"{spaces}{"Id"} : {this.Id}");
+            sb.AppendLine($"{spaces}{"CorrelationId"} : {this.Properties.CorrelationId}");
+            sb.AppendLine($"{spaces}{"Mode"} : {this.Properties.Mode}");
+            sb.AppendLine($"{spaces}{"ProvisioningState"} : {this.Properties.ProvisioningState}");
+            sb.AppendLine($"{spaces}{"Timestamp"} : {this.Properties.Timestamp}");
             return sb.ToString();
 
         }
diff --git a/src/ServiceFabric/ServiceFabric/Models/PSDeploymentResult.cs b/src/ServiceFabric/ServiceFabric/Models/PSDeploymentResult.cs
index f4ef227b81..ca45fc928e 100644
--- a/src/ServiceFabric/ServiceFabric/Models/PSDeploymentResult.cs
+++ b/src/ServiceFabric/ServiceFabric/Models/PSDeploymentResult.cs
@@ -69,10 +69,10 @@ namespace Microsoft.Azure.Commands.ServiceFabric.Models
                 }
                 else
                 {
-                    sb.AppendLine(string.Format("The {0} key vault and certificate detail:", i));
+                    sb.AppendLine($"The {i} key vault and certificate detail:");
                 }
 
-                sb.Append(string.Format("{0}", certificate));
+                sb.Append($"{certificate}");
 
                 i++;
             }
diff --git a/src/ServiceFabric/ServiceFabric/Models/PSKeyVault.cs b/src/ServiceFabric/ServiceFabric/Models/PSKeyVault.cs
index a61b792de1..a1d9d7b2c2 100644
--- a/src/ServiceFabric/ServiceFabric/Models/PSKeyVault.cs
+++ b/src/ServiceFabric/ServiceFabric/Models/PSKeyVault.cs
@@ -40,23 +40,22 @@ namespace Microsoft.Azure.Commands.ServiceFabric.Models
             var sb = new StringBuilder();
 
             const string spaces = "    ";
-            sb.AppendLine(string.Format("{0} {1} : {2}", "", "KeyVaultId", this.KeyVaultId));
-            sb.AppendLine(string.Format("{0} {1} : {2}", "", "KeyVaultName", this.KeyVaultName));
-            sb.AppendLine(string.Format("{0} {1} : {2}", "", "KeyVaultCertificateId", this.KeyVaultCertificateId));
-            sb.AppendLine(string.Format("{0} {1} : {2}", "", "SecretIdentifier", this.SecretIdentifier));
+            sb.AppendLine($"{""} {"KeyVaultId"} : {this.KeyVaultId}");
+            sb.AppendLine($"{""} {"KeyVaultName"} : {this.KeyVaultName}");
+            sb.AppendLine($"{""} {"KeyVaultCertificateId"} : {this.KeyVaultCertificateId}");
+            sb.AppendLine($"{""} {"SecretIdentifier"} : {this.SecretIdentifier}");
 
-            sb.AppendLine(string.Format("{0} {1} :", "", "Certificate:"));
+            sb.AppendLine($"{""} {"Certificate:"} :");
             if (Certificate != null)
             {
-                sb.AppendLine(string.Format("{0} {1} : {2}", spaces, "SubjectName", Certificate.SubjectName.Name));
-                sb.AppendLine(string.Format("{0} {1} : {2}", spaces, "IssuerName", Certificate.IssuerName.Name));
-                sb.AppendLine(string.Format("{0} {1} : {2}", spaces, "NotBefore", Certificate.NotBefore));
-                sb.AppendLine(string.Format("{0} {1} : {2}", spaces, "NotAfter", Certificate.NotAfter));
+                sb.AppendLine($"{spaces} {"SubjectName"} : {Certificate.SubjectName.Name}");
+                sb.AppendLine($"{spaces} {"IssuerName"} : {Certificate.IssuerName.Name}");
+                sb.AppendLine($"{spaces} {"NotBefore"} : {Certificate.NotBefore}");
+                sb.AppendLine($"{spaces} {"NotAfter"} : {Certificate.NotAfter}");
             }
 
-            sb.AppendLine(string.Format("{0} {1} : {2}", "", "CertificateThumbprint", this.CertificateThumbprint));
-            sb.AppendLine(string.Format("{0} {1} : {2}", "", "CertificateSavedLocalPath", string.IsNullOrWhiteSpace(
-                this.CertificateSavedLocalPath) ? "Not saved" : this.CertificateSavedLocalPath));
+            sb.AppendLine($"{""} {"CertificateThumbprint"} : {this.CertificateThumbprint}");
+            sb.AppendLine($"{""} {"CertificateSavedLocalPath"} : {(string.IsNullOrWhiteSpace(this.CertificateSavedLocalPath) ? "Not saved" : this.CertificateSavedLocalPath)}");
 
             return sb.ToString();
         }
diff --git a/src/SpringCloud/generated/runtime/Serialization/JsonSerializer.cs b/src/SpringCloud/generated/runtime/Serialization/JsonSerializer.cs
index b205b5cc89..672cecdfba 100644
--- a/src/SpringCloud/generated/runtime/Serialization/JsonSerializer.cs
+++ b/src/SpringCloud/generated/runtime/Serialization/JsonSerializer.cs
@@ -312,7 +312,7 @@ namespace Microsoft.Azure.PowerShell.Cmdlets.SpringCloud.Runtime.Json
                     default: return ReadArray((IEnumerable)value);
                 }
             }
-            else if (value is IEnumerable)
+            else if (value is IEnumerable iEnumerable)
             {
                 if (type.IsList && type.ElementType != null)
                 {
@@ -330,7 +330,7 @@ namespace Microsoft.Azure.PowerShell.Cmdlets.SpringCloud.Runtime.Json
                     }
                 }
 
-                return ReadArray((IEnumerable)value);
+                return ReadArray(iEnumerable);
             }
             else
             {
diff --git a/src/Sql/Sql.LegacySdk/Generated/AuditingPolicyOperations.cs b/src/Sql/Sql.LegacySdk/Generated/AuditingPolicyOperations.cs
index 9ec3db22d1..2fb594b4b1 100644
--- a/src/Sql/Sql.LegacySdk/Generated/AuditingPolicyOperations.cs
+++ b/src/Sql/Sql.LegacySdk/Generated/AuditingPolicyOperations.cs
@@ -296,18 +296,12 @@ namespace Microsoft.Azure.Management.Sql.LegacySdk
                 }
                 finally
                 {
-                    if (httpResponse != null)
-                    {
-                        httpResponse.Dispose();
-                    }
+                    httpResponse?.Dispose();
                 }
             }
             finally
             {
-                if (httpRequest != null)
-                {
-                    httpRequest.Dispose();
-                }
+                httpRequest?.Dispose();
             }
         }
         
@@ -526,18 +520,12 @@ namespace Microsoft.Azure.Management.Sql.LegacySdk
                 }
                 finally
                 {
-                    if (httpResponse != null)
-                    {
-                        httpResponse.Dispose();
-                    }
+                    httpResponse?.Dispose();
                 }
             }
             finally
             {
-                if (httpRequest != null)
-                {
-                    httpRequest.Dispose();
-                }
+                httpRequest?.Dispose();
             }
         }
         
@@ -831,18 +819,12 @@ namespace Microsoft.Azure.Management.Sql.LegacySdk
                 }
                 finally
                 {
-                    if (httpResponse != null)
-                    {
-                        httpResponse.Dispose();
-                    }
+                    httpResponse?.Dispose();
                 }
             }
             finally
             {
-                if (httpRequest != null)
-                {
-                    httpRequest.Dispose();
-                }
+                httpRequest?.Dispose();
             }
         }
         
@@ -1118,18 +1100,12 @@ namespace Microsoft.Azure.Management.Sql.LegacySdk
                 }
                 finally
                 {
-                    if (httpResponse != null)
-                    {
-                        httpResponse.Dispose();
-                    }
+                    httpResponse?.Dispose();
                 }
             }
             finally
             {
-                if (httpRequest != null)
-                {
-                    httpRequest.Dispose();
-                }
+                httpRequest?.Dispose();
             }
         }
     }
diff --git a/src/Sql/Sql.LegacySdk/Generated/BlobAuditingOperations.cs b/src/Sql/Sql.LegacySdk/Generated/BlobAuditingOperations.cs
index 309f925c8a..d2804791f1 100644
--- a/src/Sql/Sql.LegacySdk/Generated/BlobAuditingOperations.cs
+++ b/src/Sql/Sql.LegacySdk/Generated/BlobAuditingOperations.cs
@@ -274,18 +274,12 @@ namespace Microsoft.Azure.Management.Sql.LegacySdk
                 }
                 finally
                 {
-                    if (httpResponse != null)
-                    {
-                        httpResponse.Dispose();
-                    }
+                    httpResponse?.Dispose();
                 }
             }
             finally
             {
-                if (httpRequest != null)
-                {
-                    httpRequest.Dispose();
-                }
+                httpRequest?.Dispose();
             }
         }
         
@@ -505,18 +499,12 @@ namespace Microsoft.Azure.Management.Sql.LegacySdk
                 }
                 finally
                 {
-                    if (httpResponse != null)
-                    {
-                        httpResponse.Dispose();
-                    }
+                    httpResponse?.Dispose();
                 }
             }
             finally
             {
-                if (httpRequest != null)
-                {
-                    httpRequest.Dispose();
-                }
+                httpRequest?.Dispose();
             }
         }
         
@@ -778,18 +766,12 @@ namespace Microsoft.Azure.Management.Sql.LegacySdk
                 }
                 finally
                 {
-                    if (httpResponse != null)
-                    {
-                        httpResponse.Dispose();
-                    }
+                    httpResponse?.Dispose();
                 }
             }
             finally
             {
-                if (httpRequest != null)
-                {
-                    httpRequest.Dispose();
-                }
+                httpRequest?.Dispose();
             }
         }
         
@@ -974,18 +956,12 @@ namespace Microsoft.Azure.Management.Sql.LegacySdk
                 }
                 finally
                 {
-                    if (httpResponse != null)
-                    {
-                        httpResponse.Dispose();
-                    }
+                    httpResponse?.Dispose();
                 }
             }
             finally
             {
-                if (httpRequest != null)
-                {
-                    httpRequest.Dispose();
-                }
+                httpRequest?.Dispose();
             }
         }
         
@@ -1236,18 +1212,12 @@ namespace Microsoft.Azure.Management.Sql.LegacySdk
                 }
                 finally
                 {
-                    if (httpResponse != null)
-                    {
-                        httpResponse.Dispose();
-                    }
+                    httpResponse?.Dispose();
                 }
             }
             finally
             {
-                if (httpRequest != null)
-                {
-                    httpRequest.Dispose();
-                }
+                httpRequest?.Dispose();
             }
         }
     }
diff --git a/src/Sql/Sql.LegacySdk/Generated/CapabilitiesOperations.cs b/src/Sql/Sql.LegacySdk/Generated/CapabilitiesOperations.cs
index 6a03263785..999b8dff6f 100644
--- a/src/Sql/Sql.LegacySdk/Generated/CapabilitiesOperations.cs
+++ b/src/Sql/Sql.LegacySdk/Generated/CapabilitiesOperations.cs
@@ -325,18 +325,12 @@ namespace Microsoft.Azure.Management.Sql.LegacySdk
                 }
                 finally
                 {
-                    if (httpResponse != null)
-                    {
-                        httpResponse.Dispose();
-                    }
+                    httpResponse?.Dispose();
                 }
             }
             finally
             {
-                if (httpRequest != null)
-                {
-                    httpRequest.Dispose();
-                }
+                httpRequest?.Dispose();
             }
         }
     }
diff --git a/src/Sql/Sql.LegacySdk/Generated/DataMaskingOperations.cs b/src/Sql/Sql.LegacySdk/Generated/DataMaskingOperations.cs
index 88c1f80f85..8893326bb4 100644
--- a/src/Sql/Sql.LegacySdk/Generated/DataMaskingOperations.cs
+++ b/src/Sql/Sql.LegacySdk/Generated/DataMaskingOperations.cs
@@ -249,18 +249,12 @@ namespace Microsoft.Azure.Management.Sql.LegacySdk
                 }
                 finally
                 {
-                    if (httpResponse != null)
-                    {
-                        httpResponse.Dispose();
-                    }
+                    httpResponse?.Dispose();
                 }
             }
             finally
             {
-                if (httpRequest != null)
-                {
-                    httpRequest.Dispose();
-                }
+                httpRequest?.Dispose();
             }
         }
         
@@ -502,18 +496,12 @@ namespace Microsoft.Azure.Management.Sql.LegacySdk
                 }
                 finally
                 {
-                    if (httpResponse != null)
-                    {
-                        httpResponse.Dispose();
-                    }
+                    httpResponse?.Dispose();
                 }
             }
             finally
             {
-                if (httpRequest != null)
-                {
-                    httpRequest.Dispose();
-                }
+                httpRequest?.Dispose();
             }
         }
         
@@ -670,18 +658,12 @@ namespace Microsoft.Azure.Management.Sql.LegacySdk
                 }
                 finally
                 {
-                    if (httpResponse != null)
-                    {
-                        httpResponse.Dispose();
-                    }
+                    httpResponse?.Dispose();
                 }
             }
             finally
             {
-                if (httpRequest != null)
-                {
-                    httpRequest.Dispose();
-                }
+                httpRequest?.Dispose();
             }
         }
         
@@ -905,18 +887,12 @@ namespace Microsoft.Azure.Management.Sql.LegacySdk
                 }
                 finally
                 {
-                    if (httpResponse != null)
-                    {
-                        httpResponse.Dispose();
-                    }
+                    httpResponse?.Dispose();
                 }
             }
             finally
             {
-                if (httpRequest != null)
-                {
-                    httpRequest.Dispose();
-                }
+                httpRequest?.Dispose();
             }
         }
         
@@ -1210,18 +1186,12 @@ namespace Microsoft.Azure.Management.Sql.LegacySdk
                 }
                 finally
                 {
-                    if (httpResponse != null)
-                    {
-                        httpResponse.Dispose();
-                    }
+                    httpResponse?.Dispose();
                 }
             }
             finally
             {
-                if (httpRequest != null)
-                {
-                    httpRequest.Dispose();
-                }
+                httpRequest?.Dispose();
             }
         }
     }
diff --git a/src/Sql/Sql.LegacySdk/Generated/DataSyncOperations.cs b/src/Sql/Sql.LegacySdk/Generated/DataSyncOperations.cs
index d3a9f772d5..d5b65425be 100644
--- a/src/Sql/Sql.LegacySdk/Generated/DataSyncOperations.cs
+++ b/src/Sql/Sql.LegacySdk/Generated/DataSyncOperations.cs
@@ -384,18 +384,12 @@ namespace Microsoft.Azure.Management.Sql.LegacySdk
                 }
                 finally
                 {
-                    if (httpResponse != null)
-                    {
-                        httpResponse.Dispose();
-                    }
+                    httpResponse?.Dispose();
                 }
             }
             finally
             {
-                if (httpRequest != null)
-                {
-                    httpRequest.Dispose();
-                }
+                httpRequest?.Dispose();
             }
         }
         
@@ -863,18 +857,12 @@ namespace Microsoft.Azure.Management.Sql.LegacySdk
                 }
                 finally
                 {
-                    if (httpResponse != null)
-                    {
-                        httpResponse.Dispose();
-                    }
+                    httpResponse?.Dispose();
                 }
             }
             finally
             {
-                if (httpRequest != null)
-                {
-                    httpRequest.Dispose();
-                }
+                httpRequest?.Dispose();
             }
         }
         
@@ -1256,18 +1244,12 @@ namespace Microsoft.Azure.Management.Sql.LegacySdk
                 }
                 finally
                 {
-                    if (httpResponse != null)
-                    {
-                        httpResponse.Dispose();
-                    }
+                    httpResponse?.Dispose();
                 }
             }
             finally
             {
-                if (httpRequest != null)
-                {
-                    httpRequest.Dispose();
-                }
+                httpRequest?.Dispose();
             }
         }
         
@@ -1467,18 +1449,12 @@ namespace Microsoft.Azure.Management.Sql.LegacySdk
                 }
                 finally
                 {
-                    if (httpResponse != null)
-                    {
-                        httpResponse.Dispose();
-                    }
+                    httpResponse?.Dispose();
                 }
             }
             finally
             {
-                if (httpRequest != null)
-                {
-                    httpRequest.Dispose();
-                }
+                httpRequest?.Dispose();
             }
         }
         
@@ -1687,18 +1663,12 @@ namespace Microsoft.Azure.Management.Sql.LegacySdk
                 }
                 finally
                 {
-                    if (httpResponse != null)
-                    {
-                        httpResponse.Dispose();
-                    }
+                    httpResponse?.Dispose();
                 }
             }
             finally
             {
-                if (httpRequest != null)
-                {
-                    httpRequest.Dispose();
-                }
+                httpRequest?.Dispose();
             }
         }
         
@@ -1917,18 +1887,12 @@ namespace Microsoft.Azure.Management.Sql.LegacySdk
                 }
                 finally
                 {
-                    if (httpResponse != null)
-                    {
-                        httpResponse.Dispose();
-                    }
+                    httpResponse?.Dispose();
                 }
             }
             finally
             {
-                if (httpRequest != null)
-                {
-                    httpRequest.Dispose();
-                }
+                httpRequest?.Dispose();
             }
         }
         
@@ -2135,18 +2099,12 @@ namespace Microsoft.Azure.Management.Sql.LegacySdk
                 }
                 finally
                 {
-                    if (httpResponse != null)
-                    {
-                        httpResponse.Dispose();
-                    }
+                    httpResponse?.Dispose();
                 }
             }
             finally
             {
-                if (httpRequest != null)
-                {
-                    httpRequest.Dispose();
-                }
+                httpRequest?.Dispose();
             }
         }
         
@@ -2363,18 +2321,12 @@ namespace Microsoft.Azure.Management.Sql.LegacySdk
                 }
                 finally
                 {
-                    if (httpResponse != null)
-                    {
-                        httpResponse.Dispose();
-                    }
+                    httpResponse?.Dispose();
                 }
             }
             finally
             {
-                if (httpRequest != null)
-                {
-                    httpRequest.Dispose();
-                }
+                httpRequest?.Dispose();
             }
         }
         
@@ -2839,18 +2791,12 @@ namespace Microsoft.Azure.Management.Sql.LegacySdk
                 }
                 finally
                 {
-                    if (httpResponse != null)
-                    {
-                        httpResponse.Dispose();
-                    }
+                    httpResponse?.Dispose();
                 }
             }
             finally
             {
-                if (httpRequest != null)
-                {
-                    httpRequest.Dispose();
-                }
+                httpRequest?.Dispose();
             }
         }
         
@@ -3228,18 +3174,12 @@ namespace Microsoft.Azure.Management.Sql.LegacySdk
                 }
                 finally
                 {
-                    if (httpResponse != null)
-                    {
-                        httpResponse.Dispose();
-                    }
+                    httpResponse?.Dispose();
                 }
             }
             finally
             {
-                if (httpRequest != null)
-                {
-                    httpRequest.Dispose();
-                }
+                httpRequest?.Dispose();
             }
         }
         
@@ -3646,18 +3586,12 @@ namespace Microsoft.Azure.Management.Sql.LegacySdk
                 }
                 finally
                 {
-                    if (httpResponse != null)
-                    {
-                        httpResponse.Dispose();
-                    }
+                    httpResponse?.Dispose();
                 }
             }
             finally
             {
-                if (httpRequest != null)
-                {
-                    httpRequest.Dispose();
-                }
+                httpRequest?.Dispose();
             }
         }
         
@@ -4129,18 +4063,12 @@ namespace Microsoft.Azure.Management.Sql.LegacySdk
                 }
                 finally
                 {
-                    if (httpResponse != null)
-                    {
-                        httpResponse.Dispose();
-                    }
+                    httpResponse?.Dispose();
                 }
             }
             finally
             {
-                if (httpRequest != null)
-                {
-                    httpRequest.Dispose();
-                }
+                httpRequest?.Dispose();
             }
         }
         
@@ -4437,18 +4365,12 @@ namespace Microsoft.Azure.Management.Sql.LegacySdk
                 }
                 finally
                 {
-                    if (httpResponse != null)
-                    {
-                        httpResponse.Dispose();
-                    }
+                    httpResponse?.Dispose();
                 }
             }
             finally
             {
-                if (httpRequest != null)
-                {
-                    httpRequest.Dispose();
-                }
+                httpRequest?.Dispose();
             }
         }
         
@@ -4697,18 +4619,12 @@ namespace Microsoft.Azure.Management.Sql.LegacySdk
                 }
                 finally
                 {
-                    if (httpResponse != null)
-                    {
-                        httpResponse.Dispose();
-                    }
+                    httpResponse?.Dispose();
                 }
             }
             finally
             {
-                if (httpRequest != null)
-                {
-                    httpRequest.Dispose();
-                }
+                httpRequest?.Dispose();
             }
         }
         
@@ -4852,18 +4768,12 @@ namespace Microsoft.Azure.Management.Sql.LegacySdk
                 }
                 finally
                 {
-                    if (httpResponse != null)
-                    {
-                        httpResponse.Dispose();
-                    }
+                    httpResponse?.Dispose();
                 }
             }
             finally
             {
-                if (httpRequest != null)
-                {
-                    httpRequest.Dispose();
-                }
+                httpRequest?.Dispose();
             }
         }
         
@@ -5007,18 +4917,12 @@ namespace Microsoft.Azure.Management.Sql.LegacySdk
                 }
                 finally
                 {
-                    if (httpResponse != null)
-                    {
-                        httpResponse.Dispose();
-                    }
+                    httpResponse?.Dispose();
                 }
             }
             finally
             {
-                if (httpRequest != null)
-                {
-                    httpRequest.Dispose();
-                }
+                httpRequest?.Dispose();
             }
         }
         
@@ -5162,18 +5066,12 @@ namespace Microsoft.Azure.Management.Sql.LegacySdk
                 }
                 finally
                 {
-                    if (httpResponse != null)
-                    {
-                        httpResponse.Dispose();
-                    }
+                    httpResponse?.Dispose();
                 }
             }
             finally
             {
-                if (httpRequest != null)
-                {
-                    httpRequest.Dispose();
-                }
+                httpRequest?.Dispose();
             }
         }
         
@@ -5314,18 +5212,12 @@ namespace Microsoft.Azure.Management.Sql.LegacySdk
                 }
                 finally
                 {
-                    if (httpResponse != null)
-                    {
-                        httpResponse.Dispose();
-                    }
+                    httpResponse?.Dispose();
                 }
             }
             finally
             {
-                if (httpRequest != null)
-                {
-                    httpRequest.Dispose();
-                }
+                httpRequest?.Dispose();
             }
         }
         
@@ -5465,18 +5357,12 @@ namespace Microsoft.Azure.Management.Sql.LegacySdk
                 }
                 finally
                 {
-                    if (httpResponse != null)
-                    {
-                        httpResponse.Dispose();
-                    }
+                    httpResponse?.Dispose();
                 }
             }
             finally
             {
-                if (httpRequest != null)
-                {
-                    httpRequest.Dispose();
-                }
+                httpRequest?.Dispose();
             }
         }
         
@@ -5726,18 +5612,12 @@ namespace Microsoft.Azure.Management.Sql.LegacySdk
                 }
                 finally
                 {
-                    if (httpResponse != null)
-                    {
-                        httpResponse.Dispose();
-                    }
+                    httpResponse?.Dispose();
                 }
             }
             finally
             {
-                if (httpRequest != null)
-                {
-                    httpRequest.Dispose();
-                }
+                httpRequest?.Dispose();
             }
         }
         
@@ -6058,18 +5938,12 @@ namespace Microsoft.Azure.Management.Sql.LegacySdk
                 }
                 finally
                 {
-                    if (httpResponse != null)
-                    {
-                        httpResponse.Dispose();
-                    }
+                    httpResponse?.Dispose();
                 }
             }
             finally
             {
-                if (httpRequest != null)
-                {
-                    httpRequest.Dispose();
-                }
+                httpRequest?.Dispose();
             }
         }
         
@@ -6353,18 +6227,12 @@ namespace Microsoft.Azure.Management.Sql.LegacySdk
                 }
                 finally
                 {
-                    if (httpResponse != null)
-                    {
-                        httpResponse.Dispose();
-                    }
+                    httpResponse?.Dispose();
                 }
             }
             finally
             {
-                if (httpRequest != null)
-                {
-                    httpRequest.Dispose();
-                }
+                httpRequest?.Dispose();
             }
         }
         
@@ -6647,18 +6515,12 @@ namespace Microsoft.Azure.Management.Sql.LegacySdk
                 }
                 finally
                 {
-                    if (httpResponse != null)
-                    {
-                        httpResponse.Dispose();
-                    }
+                    httpResponse?.Dispose();
                 }
             }
             finally
             {
-                if (httpRequest != null)
-                {
-                    httpRequest.Dispose();
-                }
+                httpRequest?.Dispose();
             }
         }
         
@@ -6952,18 +6814,12 @@ namespace Microsoft.Azure.Management.Sql.LegacySdk
                 }
                 finally
                 {
-                    if (httpResponse != null)
-                    {
-                        httpResponse.Dispose();
-                    }
+                    httpResponse?.Dispose();
                 }
             }
             finally
             {
-                if (httpRequest != null)
-                {
-                    httpRequest.Dispose();
-                }
+                httpRequest?.Dispose();
             }
         }
         
@@ -7256,18 +7112,12 @@ namespace Microsoft.Azure.Management.Sql.LegacySdk
                 }
                 finally
                 {
-                    if (httpResponse != null)
-                    {
-                        httpResponse.Dispose();
-                    }
+                    httpResponse?.Dispose();
                 }
             }
             finally
             {
-                if (httpRequest != null)
-                {
-                    httpRequest.Dispose();
-                }
+                httpRequest?.Dispose();
             }
         }
         
@@ -7512,18 +7362,12 @@ namespace Microsoft.Azure.Management.Sql.LegacySdk
                 }
                 finally
                 {
-                    if (httpResponse != null)
-                    {
-                        httpResponse.Dispose();
-                    }
+                    httpResponse?.Dispose();
                 }
             }
             finally
             {
-                if (httpRequest != null)
-                {
-                    httpRequest.Dispose();
-                }
+                httpRequest?.Dispose();
             }
         }
         
@@ -7899,18 +7743,12 @@ namespace Microsoft.Azure.Management.Sql.LegacySdk
                 }
                 finally
                 {
-                    if (httpResponse != null)
-                    {
-                        httpResponse.Dispose();
-                    }
+                    httpResponse?.Dispose();
                 }
             }
             finally
             {
-                if (httpRequest != null)
-                {
-                    httpRequest.Dispose();
-                }
+                httpRequest?.Dispose();
             }
         }
         
@@ -8157,18 +7995,12 @@ namespace Microsoft.Azure.Management.Sql.LegacySdk
                 }
                 finally
                 {
-                    if (httpResponse != null)
-                    {
-                        httpResponse.Dispose();
-                    }
+                    httpResponse?.Dispose();
                 }
             }
             finally
             {
-                if (httpRequest != null)
-                {
-                    httpRequest.Dispose();
-                }
+                httpRequest?.Dispose();
             }
         }
         
@@ -8427,18 +8259,12 @@ namespace Microsoft.Azure.Management.Sql.LegacySdk
                 }
                 finally
                 {
-                    if (httpResponse != null)
-                    {
-                        httpResponse.Dispose();
-                    }
+                    httpResponse?.Dispose();
                 }
             }
             finally
             {
-                if (httpRequest != null)
-                {
-                    httpRequest.Dispose();
-                }
+                httpRequest?.Dispose();
             }
         }
         
@@ -8757,18 +8583,12 @@ namespace Microsoft.Azure.Management.Sql.LegacySdk
                 }
                 finally
                 {
-                    if (httpResponse != null)
-                    {
-                        httpResponse.Dispose();
-                    }
+                    httpResponse?.Dispose();
                 }
             }
             finally
             {
-                if (httpRequest != null)
-                {
-                    httpRequest.Dispose();
-                }
+                httpRequest?.Dispose();
             }
         }
         
@@ -9005,18 +8825,12 @@ namespace Microsoft.Azure.Management.Sql.LegacySdk
                 }
                 finally
                 {
-                    if (httpResponse != null)
-                    {
-                        httpResponse.Dispose();
-                    }
+                    httpResponse?.Dispose();
                 }
             }
             finally
             {
-                if (httpRequest != null)
-                {
-                    httpRequest.Dispose();
-                }
+                httpRequest?.Dispose();
             }
         }
         
@@ -9297,18 +9111,12 @@ namespace Microsoft.Azure.Management.Sql.LegacySdk
                 }
                 finally
                 {
-                    if (httpResponse != null)
-                    {
-                        httpResponse.Dispose();
-                    }
+                    httpResponse?.Dispose();
                 }
             }
             finally
             {
-                if (httpRequest != null)
-                {
-                    httpRequest.Dispose();
-                }
+                httpRequest?.Dispose();
             }
         }
         
@@ -9464,18 +9272,12 @@ namespace Microsoft.Azure.Management.Sql.LegacySdk
                 }
                 finally
                 {
-                    if (httpResponse != null)
-                    {
-                        httpResponse.Dispose();
-                    }
+                    httpResponse?.Dispose();
                 }
             }
             finally
             {
-                if (httpRequest != null)
-                {
-                    httpRequest.Dispose();
-                }
+                httpRequest?.Dispose();
             }
         }
         
@@ -9631,18 +9433,12 @@ namespace Microsoft.Azure.Management.Sql.LegacySdk
                 }
                 finally
                 {
-                    if (httpResponse != null)
-                    {
-                        httpResponse.Dispose();
-                    }
+                    httpResponse?.Dispose();
                 }
             }
             finally
             {
-                if (httpRequest != null)
-                {
-                    httpRequest.Dispose();
-                }
+                httpRequest?.Dispose();
             }
         }
         
diff --git a/src/Sql/Sql.LegacySdk/Generated/DatabaseActivationOperations.cs b/src/Sql/Sql.LegacySdk/Generated/DatabaseActivationOperations.cs
index c3e382fc31..18af544fda 100644
--- a/src/Sql/Sql.LegacySdk/Generated/DatabaseActivationOperations.cs
+++ b/src/Sql/Sql.LegacySdk/Generated/DatabaseActivationOperations.cs
@@ -1114,18 +1114,12 @@ namespace Microsoft.Azure.Management.Sql.LegacySdk
                 }
                 finally
                 {
-                    if (httpResponse != null)
-                    {
-                        httpResponse.Dispose();
-                    }
+                    httpResponse?.Dispose();
                 }
             }
             finally
             {
-                if (httpRequest != null)
-                {
-                    httpRequest.Dispose();
-                }
+                httpRequest?.Dispose();
             }
         }
         
@@ -2178,18 +2172,12 @@ namespace Microsoft.Azure.Management.Sql.LegacySdk
                 }
                 finally
                 {
-                    if (httpResponse != null)
-                    {
-                        httpResponse.Dispose();
-                    }
+                    httpResponse?.Dispose();
                 }
             }
             finally
             {
-                if (httpRequest != null)
-                {
-                    httpRequest.Dispose();
-                }
+                httpRequest?.Dispose();
             }
         }
         
@@ -3184,18 +3172,12 @@ namespace Microsoft.Azure.Management.Sql.LegacySdk
                 }
                 finally
                 {
-                    if (httpResponse != null)
-                    {
-                        httpResponse.Dispose();
-                    }
+                    httpResponse?.Dispose();
                 }
             }
             finally
             {
-                if (httpRequest != null)
-                {
-                    httpRequest.Dispose();
-                }
+                httpRequest?.Dispose();
             }
         }
         
diff --git a/src/Sql/Sql.LegacySdk/Generated/DatabaseAdvisorOperations.cs b/src/Sql/Sql.LegacySdk/Generated/DatabaseAdvisorOperations.cs
index 8d7320a346..a3455f9a73 100644
--- a/src/Sql/Sql.LegacySdk/Generated/DatabaseAdvisorOperations.cs
+++ b/src/Sql/Sql.LegacySdk/Generated/DatabaseAdvisorOperations.cs
@@ -708,18 +708,12 @@ namespace Microsoft.Azure.Management.Sql.LegacySdk
                 }
                 finally
                 {
-                    if (httpResponse != null)
-                    {
-                        httpResponse.Dispose();
-                    }
+                    httpResponse?.Dispose();
                 }
             }
             finally
             {
-                if (httpRequest != null)
-                {
-                    httpRequest.Dispose();
-                }
+                httpRequest?.Dispose();
             }
         }
         
@@ -1364,18 +1358,12 @@ namespace Microsoft.Azure.Management.Sql.LegacySdk
                 }
                 finally
                 {
-                    if (httpResponse != null)
-                    {
-                        httpResponse.Dispose();
-                    }
+                    httpResponse?.Dispose();
                 }
             }
             finally
             {
-                if (httpRequest != null)
-                {
-                    httpRequest.Dispose();
-                }
+                httpRequest?.Dispose();
             }
         }
         
@@ -2082,18 +2070,12 @@ namespace Microsoft.Azure.Management.Sql.LegacySdk
                 }
                 finally
                 {
-                    if (httpResponse != null)
-                    {
-                        httpResponse.Dispose();
-                    }
+                    httpResponse?.Dispose();
                 }
             }
             finally
             {
-                if (httpRequest != null)
-                {
-                    httpRequest.Dispose();
-                }
+                httpRequest?.Dispose();
             }
         }
     }
diff --git a/src/Sql/Sql.LegacySdk/Generated/DatabaseBackupOperations.cs b/src/Sql/Sql.LegacySdk/Generated/DatabaseBackupOperations.cs
index d43277eb95..95d9dbb8d3 100644
--- a/src/Sql/Sql.LegacySdk/Generated/DatabaseBackupOperations.cs
+++ b/src/Sql/Sql.LegacySdk/Generated/DatabaseBackupOperations.cs
@@ -368,18 +368,12 @@ namespace Microsoft.Azure.Management.Sql.LegacySdk
                 }
                 finally
                 {
-                    if (httpResponse != null)
-                    {
-                        httpResponse.Dispose();
-                    }
+                    httpResponse?.Dispose();
                 }
             }
             finally
             {
-                if (httpRequest != null)
-                {
-                    httpRequest.Dispose();
-                }
+                httpRequest?.Dispose();
             }
         }
         
@@ -708,18 +702,12 @@ namespace Microsoft.Azure.Management.Sql.LegacySdk
                 }
                 finally
                 {
-                    if (httpResponse != null)
-                    {
-                        httpResponse.Dispose();
-                    }
+                    httpResponse?.Dispose();
                 }
             }
             finally
             {
-                if (httpRequest != null)
-                {
-                    httpRequest.Dispose();
-                }
+                httpRequest?.Dispose();
             }
         }
         
@@ -1180,18 +1168,12 @@ namespace Microsoft.Azure.Management.Sql.LegacySdk
                 }
                 finally
                 {
-                    if (httpResponse != null)
-                    {
-                        httpResponse.Dispose();
-                    }
+                    httpResponse?.Dispose();
                 }
             }
             finally
             {
-                if (httpRequest != null)
-                {
-                    httpRequest.Dispose();
-                }
+                httpRequest?.Dispose();
             }
         }
         
@@ -1407,18 +1389,12 @@ namespace Microsoft.Azure.Management.Sql.LegacySdk
                 }
                 finally
                 {
-                    if (httpResponse != null)
-                    {
-                        httpResponse.Dispose();
-                    }
+                    httpResponse?.Dispose();
                 }
             }
             finally
             {
-                if (httpRequest != null)
-                {
-                    httpRequest.Dispose();
-                }
+                httpRequest?.Dispose();
             }
         }
         
@@ -1619,18 +1595,12 @@ namespace Microsoft.Azure.Management.Sql.LegacySdk
                 }
                 finally
                 {
-                    if (httpResponse != null)
-                    {
-                        httpResponse.Dispose();
-                    }
+                    httpResponse?.Dispose();
                 }
             }
             finally
             {
-                if (httpRequest != null)
-                {
-                    httpRequest.Dispose();
-                }
+                httpRequest?.Dispose();
             }
         }
         
@@ -1863,18 +1833,12 @@ namespace Microsoft.Azure.Management.Sql.LegacySdk
                 }
                 finally
                 {
-                    if (httpResponse != null)
-                    {
-                        httpResponse.Dispose();
-                    }
+                    httpResponse?.Dispose();
                 }
             }
             finally
             {
-                if (httpRequest != null)
-                {
-                    httpRequest.Dispose();
-                }
+                httpRequest?.Dispose();
             }
         }
         
@@ -2082,18 +2046,12 @@ namespace Microsoft.Azure.Management.Sql.LegacySdk
                 }
                 finally
                 {
-                    if (httpResponse != null)
-                    {
-                        httpResponse.Dispose();
-                    }
+                    httpResponse?.Dispose();
                 }
             }
             finally
             {
-                if (httpRequest != null)
-                {
-                    httpRequest.Dispose();
-                }
+                httpRequest?.Dispose();
             }
         }
         
@@ -2360,18 +2318,12 @@ namespace Microsoft.Azure.Management.Sql.LegacySdk
                 }
                 finally
                 {
-                    if (httpResponse != null)
-                    {
-                        httpResponse.Dispose();
-                    }
+                    httpResponse?.Dispose();
                 }
             }
             finally
             {
-                if (httpRequest != null)
-                {
-                    httpRequest.Dispose();
-                }
+                httpRequest?.Dispose();
             }
         }
         
@@ -2609,18 +2561,12 @@ namespace Microsoft.Azure.Management.Sql.LegacySdk
                 }
                 finally
                 {
-                    if (httpResponse != null)
-                    {
-                        httpResponse.Dispose();
-                    }
+                    httpResponse?.Dispose();
                 }
             }
             finally
             {
-                if (httpRequest != null)
-                {
-                    httpRequest.Dispose();
-                }
+                httpRequest?.Dispose();
             }
         }
         
@@ -2848,18 +2794,12 @@ namespace Microsoft.Azure.Management.Sql.LegacySdk
                 }
                 finally
                 {
-                    if (httpResponse != null)
-                    {
-                        httpResponse.Dispose();
-                    }
+                    httpResponse?.Dispose();
                 }
             }
             finally
             {
-                if (httpRequest != null)
-                {
-                    httpRequest.Dispose();
-                }
+                httpRequest?.Dispose();
             }
         }
         
@@ -3080,18 +3020,12 @@ namespace Microsoft.Azure.Management.Sql.LegacySdk
                 }
                 finally
                 {
-                    if (httpResponse != null)
-                    {
-                        httpResponse.Dispose();
-                    }
+                    httpResponse?.Dispose();
                 }
             }
             finally
             {
-                if (httpRequest != null)
-                {
-                    httpRequest.Dispose();
-                }
+                httpRequest?.Dispose();
             }
         }
         
@@ -3322,18 +3256,12 @@ namespace Microsoft.Azure.Management.Sql.LegacySdk
                 }
                 finally
                 {
-                    if (httpResponse != null)
-                    {
-                        httpResponse.Dispose();
-                    }
+                    httpResponse?.Dispose();
                 }
             }
             finally
             {
-                if (httpRequest != null)
-                {
-                    httpRequest.Dispose();
-                }
+                httpRequest?.Dispose();
             }
         }
         
@@ -3597,18 +3525,12 @@ namespace Microsoft.Azure.Management.Sql.LegacySdk
                 }
                 finally
                 {
-                    if (httpResponse != null)
-                    {
-                        httpResponse.Dispose();
-                    }
+                    httpResponse?.Dispose();
                 }
             }
             finally
             {
-                if (httpRequest != null)
-                {
-                    httpRequest.Dispose();
-                }
+                httpRequest?.Dispose();
             }
         }
         
@@ -3833,18 +3755,12 @@ namespace Microsoft.Azure.Management.Sql.LegacySdk
                 }
                 finally
                 {
-                    if (httpResponse != null)
-                    {
-                        httpResponse.Dispose();
-                    }
+                    httpResponse?.Dispose();
                 }
             }
             finally
             {
-                if (httpRequest != null)
-                {
-                    httpRequest.Dispose();
-                }
+                httpRequest?.Dispose();
             }
         }
         
@@ -4079,18 +3995,12 @@ namespace Microsoft.Azure.Management.Sql.LegacySdk
                 }
                 finally
                 {
-                    if (httpResponse != null)
-                    {
-                        httpResponse.Dispose();
-                    }
+                    httpResponse?.Dispose();
                 }
             }
             finally
             {
-                if (httpRequest != null)
-                {
-                    httpRequest.Dispose();
-                }
+                httpRequest?.Dispose();
             }
         }
         
@@ -4329,18 +4239,12 @@ namespace Microsoft.Azure.Management.Sql.LegacySdk
                 }
                 finally
                 {
-                    if (httpResponse != null)
-                    {
-                        httpResponse.Dispose();
-                    }
+                    httpResponse?.Dispose();
                 }
             }
             finally
             {
-                if (httpRequest != null)
-                {
-                    httpRequest.Dispose();
-                }
+                httpRequest?.Dispose();
             }
         }
     }
diff --git a/src/Sql/Sql.LegacySdk/Generated/DatabaseOperations.cs b/src/Sql/Sql.LegacySdk/Generated/DatabaseOperations.cs
index f06eb6e8f9..ae807e4c0a 100644
--- a/src/Sql/Sql.LegacySdk/Generated/DatabaseOperations.cs
+++ b/src/Sql/Sql.LegacySdk/Generated/DatabaseOperations.cs
@@ -1218,18 +1218,12 @@ namespace Microsoft.Azure.Management.Sql.LegacySdk
                 }
                 finally
                 {
-                    if (httpResponse != null)
-                    {
-                        httpResponse.Dispose();
-                    }
+                    httpResponse?.Dispose();
                 }
             }
             finally
             {
-                if (httpRequest != null)
-                {
-                    httpRequest.Dispose();
-                }
+                httpRequest?.Dispose();
             }
         }
         
@@ -1459,18 +1453,12 @@ namespace Microsoft.Azure.Management.Sql.LegacySdk
                 }
                 finally
                 {
-                    if (httpResponse != null)
-                    {
-                        httpResponse.Dispose();
-                    }
+                    httpResponse?.Dispose();
                 }
             }
             finally
             {
-                if (httpRequest != null)
-                {
-                    httpRequest.Dispose();
-                }
+                httpRequest?.Dispose();
             }
         }
         
@@ -2483,18 +2471,12 @@ namespace Microsoft.Azure.Management.Sql.LegacySdk
                 }
                 finally
                 {
-                    if (httpResponse != null)
-                    {
-                        httpResponse.Dispose();
-                    }
+                    httpResponse?.Dispose();
                 }
             }
             finally
             {
-                if (httpRequest != null)
-                {
-                    httpRequest.Dispose();
-                }
+                httpRequest?.Dispose();
             }
         }
         
@@ -3519,18 +3501,12 @@ namespace Microsoft.Azure.Management.Sql.LegacySdk
                 }
                 finally
                 {
-                    if (httpResponse != null)
-                    {
-                        httpResponse.Dispose();
-                    }
+                    httpResponse?.Dispose();
                 }
             }
             finally
             {
-                if (httpRequest != null)
-                {
-                    httpRequest.Dispose();
-                }
+                httpRequest?.Dispose();
             }
         }
         
@@ -4528,18 +4504,12 @@ namespace Microsoft.Azure.Management.Sql.LegacySdk
                 }
                 finally
                 {
-                    if (httpResponse != null)
-                    {
-                        httpResponse.Dispose();
-                    }
+                    httpResponse?.Dispose();
                 }
             }
             finally
             {
-                if (httpRequest != null)
-                {
-                    httpRequest.Dispose();
-                }
+                httpRequest?.Dispose();
             }
         }
         
@@ -5562,18 +5532,12 @@ namespace Microsoft.Azure.Management.Sql.LegacySdk
                 }
                 finally
                 {
-                    if (httpResponse != null)
-                    {
-                        httpResponse.Dispose();
-                    }
+                    httpResponse?.Dispose();
                 }
             }
             finally
             {
-                if (httpRequest != null)
-                {
-                    httpRequest.Dispose();
-                }
+                httpRequest?.Dispose();
             }
         }
         
@@ -6584,18 +6548,12 @@ namespace Microsoft.Azure.Management.Sql.LegacySdk
                 }
                 finally
                 {
-                    if (httpResponse != null)
-                    {
-                        httpResponse.Dispose();
-                    }
+                    httpResponse?.Dispose();
                 }
             }
             finally
             {
-                if (httpRequest != null)
-                {
-                    httpRequest.Dispose();
-                }
+                httpRequest?.Dispose();
             }
         }
         
@@ -7616,18 +7574,12 @@ namespace Microsoft.Azure.Management.Sql.LegacySdk
                 }
                 finally
                 {
-                    if (httpResponse != null)
-                    {
-                        httpResponse.Dispose();
-                    }
+                    httpResponse?.Dispose();
                 }
             }
             finally
             {
-                if (httpRequest != null)
-                {
-                    httpRequest.Dispose();
-                }
+                httpRequest?.Dispose();
             }
         }
         
@@ -7840,18 +7792,12 @@ namespace Microsoft.Azure.Management.Sql.LegacySdk
                 }
                 finally
                 {
-                    if (httpResponse != null)
-                    {
-                        httpResponse.Dispose();
-                    }
+                    httpResponse?.Dispose();
                 }
             }
             finally
             {
-                if (httpRequest != null)
-                {
-                    httpRequest.Dispose();
-                }
+                httpRequest?.Dispose();
             }
         }
     }
diff --git a/src/Sql/Sql.LegacySdk/Generated/DatabaseRecommendedActionOperations.cs b/src/Sql/Sql.LegacySdk/Generated/DatabaseRecommendedActionOperations.cs
index 1424de98a5..e531ebbbf5 100644
--- a/src/Sql/Sql.LegacySdk/Generated/DatabaseRecommendedActionOperations.cs
+++ b/src/Sql/Sql.LegacySdk/Generated/DatabaseRecommendedActionOperations.cs
@@ -619,18 +619,12 @@ namespace Microsoft.Azure.Management.Sql.LegacySdk
                 }
                 finally
                 {
-                    if (httpResponse != null)
-                    {
-                        httpResponse.Dispose();
-                    }
+                    httpResponse?.Dispose();
                 }
             }
             finally
             {
-                if (httpRequest != null)
-                {
-                    httpRequest.Dispose();
-                }
+                httpRequest?.Dispose();
             }
         }
         
@@ -1184,18 +1178,12 @@ namespace Microsoft.Azure.Management.Sql.LegacySdk
                 }
                 finally
                 {
-                    if (httpResponse != null)
-                    {
-                        httpResponse.Dispose();
-                    }
+                    httpResponse?.Dispose();
                 }
             }
             finally
             {
-                if (httpRequest != null)
-                {
-                    httpRequest.Dispose();
-                }
+                httpRequest?.Dispose();
             }
         }
         
@@ -1826,18 +1814,12 @@ namespace Microsoft.Azure.Management.Sql.LegacySdk
                 }
                 finally
                 {
-                    if (httpResponse != null)
-                    {
-                        httpResponse.Dispose();
-                    }
+                    httpResponse?.Dispose();
                 }
             }
             finally
             {
-                if (httpRequest != null)
-                {
-                    httpRequest.Dispose();
-                }
+                httpRequest?.Dispose();
             }
         }
     }
diff --git a/src/Sql/Sql.LegacySdk/Generated/ElasticPoolAdvisorOperations.cs b/src/Sql/Sql.LegacySdk/Generated/ElasticPoolAdvisorOperations.cs
index 2a0623fd17..ffd43c5a5a 100644
--- a/src/Sql/Sql.LegacySdk/Generated/ElasticPoolAdvisorOperations.cs
+++ b/src/Sql/Sql.LegacySdk/Generated/ElasticPoolAdvisorOperations.cs
@@ -709,18 +709,12 @@ namespace Microsoft.Azure.Management.Sql.LegacySdk
                 }
                 finally
                 {
-                    if (httpResponse != null)
-                    {
-                        httpResponse.Dispose();
-                    }
+                    httpResponse?.Dispose();
                 }
             }
             finally
             {
-                if (httpRequest != null)
-                {
-                    httpRequest.Dispose();
-                }
+                httpRequest?.Dispose();
             }
         }
         
@@ -1365,18 +1359,12 @@ namespace Microsoft.Azure.Management.Sql.LegacySdk
                 }
                 finally
                 {
-                    if (httpResponse != null)
-                    {
-                        httpResponse.Dispose();
-                    }
+                    httpResponse?.Dispose();
                 }
             }
             finally
             {
-                if (httpRequest != null)
-                {
-                    httpRequest.Dispose();
-                }
+                httpRequest?.Dispose();
             }
         }
         
@@ -2083,18 +2071,12 @@ namespace Microsoft.Azure.Management.Sql.LegacySdk
                 }
                 finally
                 {
-                    if (httpResponse != null)
-                    {
-                        httpResponse.Dispose();
-                    }
+                    httpResponse?.Dispose();
                 }
             }
             finally
             {
-                if (httpRequest != null)
-                {
-                    httpRequest.Dispose();
-                }
+                httpRequest?.Dispose();
             }
         }
     }
diff --git a/src/Sql/Sql.LegacySdk/Generated/ElasticPoolOperations.cs b/src/Sql/Sql.LegacySdk/Generated/ElasticPoolOperations.cs
index e0c177c4dc..fc95363559 100644
--- a/src/Sql/Sql.LegacySdk/Generated/ElasticPoolOperations.cs
+++ b/src/Sql/Sql.LegacySdk/Generated/ElasticPoolOperations.cs
@@ -427,18 +427,12 @@ namespace Microsoft.Azure.Management.Sql.LegacySdk
                 }
                 finally
                 {
-                    if (httpResponse != null)
-                    {
-                        httpResponse.Dispose();
-                    }
+                    httpResponse?.Dispose();
                 }
             }
             finally
             {
-                if (httpRequest != null)
-                {
-                    httpRequest.Dispose();
-                }
+                httpRequest?.Dispose();
             }
         }
         
@@ -669,18 +663,12 @@ namespace Microsoft.Azure.Management.Sql.LegacySdk
                 }
                 finally
                 {
-                    if (httpResponse != null)
-                    {
-                        httpResponse.Dispose();
-                    }
+                    httpResponse?.Dispose();
                 }
             }
             finally
             {
-                if (httpRequest != null)
-                {
-                    httpRequest.Dispose();
-                }
+                httpRequest?.Dispose();
             }
         }
         
@@ -938,18 +926,12 @@ namespace Microsoft.Azure.Management.Sql.LegacySdk
                 }
                 finally
                 {
-                    if (httpResponse != null)
-                    {
-                        httpResponse.Dispose();
-                    }
+                    httpResponse?.Dispose();
                 }
             }
             finally
             {
-                if (httpRequest != null)
-                {
-                    httpRequest.Dispose();
-                }
+                httpRequest?.Dispose();
             }
         }
         
@@ -1974,18 +1956,12 @@ namespace Microsoft.Azure.Management.Sql.LegacySdk
                 }
                 finally
                 {
-                    if (httpResponse != null)
-                    {
-                        httpResponse.Dispose();
-                    }
+                    httpResponse?.Dispose();
                 }
             }
             finally
             {
-                if (httpRequest != null)
-                {
-                    httpRequest.Dispose();
-                }
+                httpRequest?.Dispose();
             }
         }
         
@@ -2228,18 +2204,12 @@ namespace Microsoft.Azure.Management.Sql.LegacySdk
                 }
                 finally
                 {
-                    if (httpResponse != null)
-                    {
-                        httpResponse.Dispose();
-                    }
+                    httpResponse?.Dispose();
                 }
             }
             finally
             {
-                if (httpRequest != null)
-                {
-                    httpRequest.Dispose();
-                }
+                httpRequest?.Dispose();
             }
         }
         
@@ -2494,18 +2464,12 @@ namespace Microsoft.Azure.Management.Sql.LegacySdk
                 }
                 finally
                 {
-                    if (httpResponse != null)
-                    {
-                        httpResponse.Dispose();
-                    }
+                    httpResponse?.Dispose();
                 }
             }
             finally
             {
-                if (httpRequest != null)
-                {
-                    httpRequest.Dispose();
-                }
+                httpRequest?.Dispose();
             }
         }
         
@@ -2835,18 +2799,12 @@ namespace Microsoft.Azure.Management.Sql.LegacySdk
                 }
                 finally
                 {
-                    if (httpResponse != null)
-                    {
-                        httpResponse.Dispose();
-                    }
+                    httpResponse?.Dispose();
                 }
             }
             finally
             {
-                if (httpRequest != null)
-                {
-                    httpRequest.Dispose();
-                }
+                httpRequest?.Dispose();
             }
         }
         
@@ -3169,18 +3127,12 @@ namespace Microsoft.Azure.Management.Sql.LegacySdk
                 }
                 finally
                 {
-                    if (httpResponse != null)
-                    {
-                        httpResponse.Dispose();
-                    }
+                    httpResponse?.Dispose();
                 }
             }
             finally
             {
-                if (httpRequest != null)
-                {
-                    httpRequest.Dispose();
-                }
+                httpRequest?.Dispose();
             }
         }
         
@@ -4203,18 +4155,12 @@ namespace Microsoft.Azure.Management.Sql.LegacySdk
                 }
                 finally
                 {
-                    if (httpResponse != null)
-                    {
-                        httpResponse.Dispose();
-                    }
+                    httpResponse?.Dispose();
                 }
             }
             finally
             {
-                if (httpRequest != null)
-                {
-                    httpRequest.Dispose();
-                }
+                httpRequest?.Dispose();
             }
         }
     }
diff --git a/src/Sql/Sql.LegacySdk/Generated/ElasticPoolRecommendedActionOperations.cs b/src/Sql/Sql.LegacySdk/Generated/ElasticPoolRecommendedActionOperations.cs
index 4b49fc6ddf..f418c39ddd 100644
--- a/src/Sql/Sql.LegacySdk/Generated/ElasticPoolRecommendedActionOperations.cs
+++ b/src/Sql/Sql.LegacySdk/Generated/ElasticPoolRecommendedActionOperations.cs
@@ -619,18 +619,12 @@ namespace Microsoft.Azure.Management.Sql.LegacySdk
                 }
                 finally
                 {
-                    if (httpResponse != null)
-                    {
-                        httpResponse.Dispose();
-                    }
+                    httpResponse?.Dispose();
                 }
             }
             finally
             {
-                if (httpRequest != null)
-                {
-                    httpRequest.Dispose();
-                }
+                httpRequest?.Dispose();
             }
         }
         
@@ -1184,18 +1178,12 @@ namespace Microsoft.Azure.Management.Sql.LegacySdk
                 }
                 finally
                 {
-                    if (httpResponse != null)
-                    {
-                        httpResponse.Dispose();
-                    }
+                    httpResponse?.Dispose();
                 }
             }
             finally
             {
-                if (httpRequest != null)
-                {
-                    httpRequest.Dispose();
-                }
+                httpRequest?.Dispose();
             }
         }
         
@@ -1826,18 +1814,12 @@ namespace Microsoft.Azure.Management.Sql.LegacySdk
                 }
                 finally
                 {
-                    if (httpResponse != null)
-                    {
-                        httpResponse.Dispose();
-                    }
+                    httpResponse?.Dispose();
                 }
             }
             finally
             {
-                if (httpRequest != null)
-                {
-                    httpRequest.Dispose();
-                }
+                httpRequest?.Dispose();
             }
         }
     }
diff --git a/src/Sql/Sql.LegacySdk/Generated/FailoverGroupOperations.cs b/src/Sql/Sql.LegacySdk/Generated/FailoverGroupOperations.cs
index e630838a4e..7772d82f5b 100644
--- a/src/Sql/Sql.LegacySdk/Generated/FailoverGroupOperations.cs
+++ b/src/Sql/Sql.LegacySdk/Generated/FailoverGroupOperations.cs
@@ -513,18 +513,12 @@ namespace Microsoft.Azure.Management.Sql.LegacySdk
                 }
                 finally
                 {
-                    if (httpResponse != null)
-                    {
-                        httpResponse.Dispose();
-                    }
+                    httpResponse?.Dispose();
                 }
             }
             finally
             {
-                if (httpRequest != null)
-                {
-                    httpRequest.Dispose();
-                }
+                httpRequest?.Dispose();
             }
         }
         
@@ -726,18 +720,12 @@ namespace Microsoft.Azure.Management.Sql.LegacySdk
                 }
                 finally
                 {
-                    if (httpResponse != null)
-                    {
-                        httpResponse.Dispose();
-                    }
+                    httpResponse?.Dispose();
                 }
             }
             finally
             {
-                if (httpRequest != null)
-                {
-                    httpRequest.Dispose();
-                }
+                httpRequest?.Dispose();
             }
         }
         
@@ -894,18 +882,12 @@ namespace Microsoft.Azure.Management.Sql.LegacySdk
                 }
                 finally
                 {
-                    if (httpResponse != null)
-                    {
-                        httpResponse.Dispose();
-                    }
+                    httpResponse?.Dispose();
                 }
             }
             finally
             {
-                if (httpRequest != null)
-                {
-                    httpRequest.Dispose();
-                }
+                httpRequest?.Dispose();
             }
         }
         
@@ -1062,18 +1044,12 @@ namespace Microsoft.Azure.Management.Sql.LegacySdk
                 }
                 finally
                 {
-                    if (httpResponse != null)
-                    {
-                        httpResponse.Dispose();
-                    }
+                    httpResponse?.Dispose();
                 }
             }
             finally
             {
-                if (httpRequest != null)
-                {
-                    httpRequest.Dispose();
-                }
+                httpRequest?.Dispose();
             }
         }
         
@@ -1494,18 +1470,12 @@ namespace Microsoft.Azure.Management.Sql.LegacySdk
                 }
                 finally
                 {
-                    if (httpResponse != null)
-                    {
-                        httpResponse.Dispose();
-                    }
+                    httpResponse?.Dispose();
                 }
             }
             finally
             {
-                if (httpRequest != null)
-                {
-                    httpRequest.Dispose();
-                }
+                httpRequest?.Dispose();
             }
         }
         
@@ -2127,18 +2097,12 @@ namespace Microsoft.Azure.Management.Sql.LegacySdk
                 }
                 finally
                 {
-                    if (httpResponse != null)
-                    {
-                        httpResponse.Dispose();
-                    }
+                    httpResponse?.Dispose();
                 }
             }
             finally
             {
-                if (httpRequest != null)
-                {
-                    httpRequest.Dispose();
-                }
+                httpRequest?.Dispose();
             }
         }
         
@@ -2284,18 +2248,12 @@ namespace Microsoft.Azure.Management.Sql.LegacySdk
                 }
                 finally
                 {
-                    if (httpResponse != null)
-                    {
-                        httpResponse.Dispose();
-                    }
+                    httpResponse?.Dispose();
                 }
             }
             finally
             {
-                if (httpRequest != null)
-                {
-                    httpRequest.Dispose();
-                }
+                httpRequest?.Dispose();
             }
         }
         
@@ -2441,18 +2399,12 @@ namespace Microsoft.Azure.Management.Sql.LegacySdk
                 }
                 finally
                 {
-                    if (httpResponse != null)
-                    {
-                        httpResponse.Dispose();
-                    }
+                    httpResponse?.Dispose();
                 }
             }
             finally
             {
-                if (httpRequest != null)
-                {
-                    httpRequest.Dispose();
-                }
+                httpRequest?.Dispose();
             }
         }
         
@@ -2736,18 +2688,12 @@ namespace Microsoft.Azure.Management.Sql.LegacySdk
                 }
                 finally
                 {
-                    if (httpResponse != null)
-                    {
-                        httpResponse.Dispose();
-                    }
+                    httpResponse?.Dispose();
                 }
             }
             finally
             {
-                if (httpRequest != null)
-                {
-                    httpRequest.Dispose();
-                }
+                httpRequest?.Dispose();
             }
         }
         
@@ -3031,18 +2977,12 @@ namespace Microsoft.Azure.Management.Sql.LegacySdk
                 }
                 finally
                 {
-                    if (httpResponse != null)
-                    {
-                        httpResponse.Dispose();
-                    }
+                    httpResponse?.Dispose();
                 }
             }
             finally
             {
-                if (httpRequest != null)
-                {
-                    httpRequest.Dispose();
-                }
+                httpRequest?.Dispose();
             }
         }
         
@@ -3337,18 +3277,12 @@ namespace Microsoft.Azure.Management.Sql.LegacySdk
                 }
                 finally
                 {
-                    if (httpResponse != null)
-                    {
-                        httpResponse.Dispose();
-                    }
+                    httpResponse?.Dispose();
                 }
             }
             finally
             {
-                if (httpRequest != null)
-                {
-                    httpRequest.Dispose();
-                }
+                httpRequest?.Dispose();
             }
         }
         
diff --git a/src/Sql/Sql.LegacySdk/Generated/FirewallRuleOperations.cs b/src/Sql/Sql.LegacySdk/Generated/FirewallRuleOperations.cs
index 6a3b176f70..6ba298c0a2 100644
--- a/src/Sql/Sql.LegacySdk/Generated/FirewallRuleOperations.cs
+++ b/src/Sql/Sql.LegacySdk/Generated/FirewallRuleOperations.cs
@@ -320,18 +320,12 @@ namespace Microsoft.Azure.Management.Sql.LegacySdk
                 }
                 finally
                 {
-                    if (httpResponse != null)
-                    {
-                        httpResponse.Dispose();
-                    }
+                    httpResponse?.Dispose();
                 }
             }
             finally
             {
-                if (httpRequest != null)
-                {
-                    httpRequest.Dispose();
-                }
+                httpRequest?.Dispose();
             }
         }
         
@@ -477,18 +471,12 @@ namespace Microsoft.Azure.Management.Sql.LegacySdk
                 }
                 finally
                 {
-                    if (httpResponse != null)
-                    {
-                        httpResponse.Dispose();
-                    }
+                    httpResponse?.Dispose();
                 }
             }
             finally
             {
-                if (httpRequest != null)
-                {
-                    httpRequest.Dispose();
-                }
+                httpRequest?.Dispose();
             }
         }
         
@@ -710,18 +698,12 @@ namespace Microsoft.Azure.Management.Sql.LegacySdk
                 }
                 finally
                 {
-                    if (httpResponse != null)
-                    {
-                        httpResponse.Dispose();
-                    }
+                    httpResponse?.Dispose();
                 }
             }
             finally
             {
-                if (httpRequest != null)
-                {
-                    httpRequest.Dispose();
-                }
+                httpRequest?.Dispose();
             }
         }
         
@@ -941,18 +923,12 @@ namespace Microsoft.Azure.Management.Sql.LegacySdk
                 }
                 finally
                 {
-                    if (httpResponse != null)
-                    {
-                        httpResponse.Dispose();
-                    }
+                    httpResponse?.Dispose();
                 }
             }
             finally
             {
-                if (httpRequest != null)
-                {
-                    httpRequest.Dispose();
-                }
+                httpRequest?.Dispose();
             }
         }
     }
diff --git a/src/Sql/Sql.LegacySdk/Generated/ImportExportOperations.cs b/src/Sql/Sql.LegacySdk/Generated/ImportExportOperations.cs
index 29e39ebe43..21eaad5fd4 100644
--- a/src/Sql/Sql.LegacySdk/Generated/ImportExportOperations.cs
+++ b/src/Sql/Sql.LegacySdk/Generated/ImportExportOperations.cs
@@ -308,18 +308,12 @@ namespace Microsoft.Azure.Management.Sql.LegacySdk
                 }
                 finally
                 {
-                    if (httpResponse != null)
-                    {
-                        httpResponse.Dispose();
-                    }
+                    httpResponse?.Dispose();
                 }
             }
             finally
             {
-                if (httpRequest != null)
-                {
-                    httpRequest.Dispose();
-                }
+                httpRequest?.Dispose();
             }
         }
         
@@ -631,18 +625,12 @@ namespace Microsoft.Azure.Management.Sql.LegacySdk
                 }
                 finally
                 {
-                    if (httpResponse != null)
-                    {
-                        httpResponse.Dispose();
-                    }
+                    httpResponse?.Dispose();
                 }
             }
             finally
             {
-                if (httpRequest != null)
-                {
-                    httpRequest.Dispose();
-                }
+                httpRequest?.Dispose();
             }
         }
         
@@ -895,18 +883,12 @@ namespace Microsoft.Azure.Management.Sql.LegacySdk
                 }
                 finally
                 {
-                    if (httpResponse != null)
-                    {
-                        httpResponse.Dispose();
-                    }
+                    httpResponse?.Dispose();
                 }
             }
             finally
             {
-                if (httpRequest != null)
-                {
-                    httpRequest.Dispose();
-                }
+                httpRequest?.Dispose();
             }
         }
         
@@ -1174,18 +1156,12 @@ namespace Microsoft.Azure.Management.Sql.LegacySdk
                 }
                 finally
                 {
-                    if (httpResponse != null)
-                    {
-                        httpResponse.Dispose();
-                    }
+                    httpResponse?.Dispose();
                 }
             }
             finally
             {
-                if (httpRequest != null)
-                {
-                    httpRequest.Dispose();
-                }
+                httpRequest?.Dispose();
             }
         }
     }
diff --git a/src/Sql/Sql.LegacySdk/Generated/JobAccountOperations.cs b/src/Sql/Sql.LegacySdk/Generated/JobAccountOperations.cs
index a32b9bdd43..375e9c9ef6 100644
--- a/src/Sql/Sql.LegacySdk/Generated/JobAccountOperations.cs
+++ b/src/Sql/Sql.LegacySdk/Generated/JobAccountOperations.cs
@@ -370,18 +370,12 @@ namespace Microsoft.Azure.Management.Sql.LegacySdk
                 }
                 finally
                 {
-                    if (httpResponse != null)
-                    {
-                        httpResponse.Dispose();
-                    }
+                    httpResponse?.Dispose();
                 }
             }
             finally
             {
-                if (httpRequest != null)
-                {
-                    httpRequest.Dispose();
-                }
+                httpRequest?.Dispose();
             }
         }
         
@@ -582,18 +576,12 @@ namespace Microsoft.Azure.Management.Sql.LegacySdk
                 }
                 finally
                 {
-                    if (httpResponse != null)
-                    {
-                        httpResponse.Dispose();
-                    }
+                    httpResponse?.Dispose();
                 }
             }
             finally
             {
-                if (httpRequest != null)
-                {
-                    httpRequest.Dispose();
-                }
+                httpRequest?.Dispose();
             }
         }
         
@@ -971,18 +959,12 @@ namespace Microsoft.Azure.Management.Sql.LegacySdk
                 }
                 finally
                 {
-                    if (httpResponse != null)
-                    {
-                        httpResponse.Dispose();
-                    }
+                    httpResponse?.Dispose();
                 }
             }
             finally
             {
-                if (httpRequest != null)
-                {
-                    httpRequest.Dispose();
-                }
+                httpRequest?.Dispose();
             }
         }
         
@@ -1187,18 +1169,12 @@ namespace Microsoft.Azure.Management.Sql.LegacySdk
                 }
                 finally
                 {
-                    if (httpResponse != null)
-                    {
-                        httpResponse.Dispose();
-                    }
+                    httpResponse?.Dispose();
                 }
             }
             finally
             {
-                if (httpRequest != null)
-                {
-                    httpRequest.Dispose();
-                }
+                httpRequest?.Dispose();
             }
         }
         
@@ -1411,18 +1387,12 @@ namespace Microsoft.Azure.Management.Sql.LegacySdk
                 }
                 finally
                 {
-                    if (httpResponse != null)
-                    {
-                        httpResponse.Dispose();
-                    }
+                    httpResponse?.Dispose();
                 }
             }
             finally
             {
-                if (httpRequest != null)
-                {
-                    httpRequest.Dispose();
-                }
+                httpRequest?.Dispose();
             }
         }
     }
diff --git a/src/Sql/Sql.LegacySdk/Generated/RecommendedElasticPoolOperations.cs b/src/Sql/Sql.LegacySdk/Generated/RecommendedElasticPoolOperations.cs
index eb0412699b..32751ad26d 100644
--- a/src/Sql/Sql.LegacySdk/Generated/RecommendedElasticPoolOperations.cs
+++ b/src/Sql/Sql.LegacySdk/Generated/RecommendedElasticPoolOperations.cs
@@ -1223,18 +1223,12 @@ namespace Microsoft.Azure.Management.Sql.LegacySdk
                 }
                 finally
                 {
-                    if (httpResponse != null)
-                    {
-                        httpResponse.Dispose();
-                    }
+                    httpResponse?.Dispose();
                 }
             }
             finally
             {
-                if (httpRequest != null)
-                {
-                    httpRequest.Dispose();
-                }
+                httpRequest?.Dispose();
             }
         }
         
@@ -2259,18 +2253,12 @@ namespace Microsoft.Azure.Management.Sql.LegacySdk
                 }
                 finally
                 {
-                    if (httpResponse != null)
-                    {
-                        httpResponse.Dispose();
-                    }
+                    httpResponse?.Dispose();
                 }
             }
             finally
             {
-                if (httpRequest != null)
-                {
-                    httpRequest.Dispose();
-                }
+                httpRequest?.Dispose();
             }
         }
         
@@ -3432,18 +3420,12 @@ namespace Microsoft.Azure.Management.Sql.LegacySdk
                 }
                 finally
                 {
-                    if (httpResponse != null)
-                    {
-                        httpResponse.Dispose();
-                    }
+                    httpResponse?.Dispose();
                 }
             }
             finally
             {
-                if (httpRequest != null)
-                {
-                    httpRequest.Dispose();
-                }
+                httpRequest?.Dispose();
             }
         }
         
@@ -4466,18 +4448,12 @@ namespace Microsoft.Azure.Management.Sql.LegacySdk
                 }
                 finally
                 {
-                    if (httpResponse != null)
-                    {
-                        httpResponse.Dispose();
-                    }
+                    httpResponse?.Dispose();
                 }
             }
             finally
             {
-                if (httpRequest != null)
-                {
-                    httpRequest.Dispose();
-                }
+                httpRequest?.Dispose();
             }
         }
         
@@ -5649,18 +5625,12 @@ namespace Microsoft.Azure.Management.Sql.LegacySdk
                 }
                 finally
                 {
-                    if (httpResponse != null)
-                    {
-                        httpResponse.Dispose();
-                    }
+                    httpResponse?.Dispose();
                 }
             }
             finally
             {
-                if (httpRequest != null)
-                {
-                    httpRequest.Dispose();
-                }
+                httpRequest?.Dispose();
             }
         }
         
@@ -5852,18 +5822,12 @@ namespace Microsoft.Azure.Management.Sql.LegacySdk
                 }
                 finally
                 {
-                    if (httpResponse != null)
-                    {
-                        httpResponse.Dispose();
-                    }
+                    httpResponse?.Dispose();
                 }
             }
             finally
             {
-                if (httpRequest != null)
-                {
-                    httpRequest.Dispose();
-                }
+                httpRequest?.Dispose();
             }
         }
     }
diff --git a/src/Sql/Sql.LegacySdk/Generated/RecommendedIndexOperations.cs b/src/Sql/Sql.LegacySdk/Generated/RecommendedIndexOperations.cs
index 7167935cfe..14948bf49a 100644
--- a/src/Sql/Sql.LegacySdk/Generated/RecommendedIndexOperations.cs
+++ b/src/Sql/Sql.LegacySdk/Generated/RecommendedIndexOperations.cs
@@ -448,18 +448,12 @@ namespace Microsoft.Azure.Management.Sql.LegacySdk
                 }
                 finally
                 {
-                    if (httpResponse != null)
-                    {
-                        httpResponse.Dispose();
-                    }
+                    httpResponse?.Dispose();
                 }
             }
             finally
             {
-                if (httpRequest != null)
-                {
-                    httpRequest.Dispose();
-                }
+                httpRequest?.Dispose();
             }
         }
         
@@ -922,18 +916,12 @@ namespace Microsoft.Azure.Management.Sql.LegacySdk
                 }
                 finally
                 {
-                    if (httpResponse != null)
-                    {
-                        httpResponse.Dispose();
-                    }
+                    httpResponse?.Dispose();
                 }
             }
             finally
             {
-                if (httpRequest != null)
-                {
-                    httpRequest.Dispose();
-                }
+                httpRequest?.Dispose();
             }
         }
     }
diff --git a/src/Sql/Sql.LegacySdk/Generated/ReplicationLinkOperations.cs b/src/Sql/Sql.LegacySdk/Generated/ReplicationLinkOperations.cs
index 113c6aa0ca..a6fcf5dcbf 100644
--- a/src/Sql/Sql.LegacySdk/Generated/ReplicationLinkOperations.cs
+++ b/src/Sql/Sql.LegacySdk/Generated/ReplicationLinkOperations.cs
@@ -231,18 +231,12 @@ namespace Microsoft.Azure.Management.Sql.LegacySdk
                 }
                 finally
                 {
-                    if (httpResponse != null)
-                    {
-                        httpResponse.Dispose();
-                    }
+                    httpResponse?.Dispose();
                 }
             }
             finally
             {
-                if (httpRequest != null)
-                {
-                    httpRequest.Dispose();
-                }
+                httpRequest?.Dispose();
             }
         }
         
@@ -413,18 +407,12 @@ namespace Microsoft.Azure.Management.Sql.LegacySdk
                 }
                 finally
                 {
-                    if (httpResponse != null)
-                    {
-                        httpResponse.Dispose();
-                    }
+                    httpResponse?.Dispose();
                 }
             }
             finally
             {
-                if (httpRequest != null)
-                {
-                    httpRequest.Dispose();
-                }
+                httpRequest?.Dispose();
             }
         }
         
@@ -581,18 +569,12 @@ namespace Microsoft.Azure.Management.Sql.LegacySdk
                 }
                 finally
                 {
-                    if (httpResponse != null)
-                    {
-                        httpResponse.Dispose();
-                    }
+                    httpResponse?.Dispose();
                 }
             }
             finally
             {
-                if (httpRequest != null)
-                {
-                    httpRequest.Dispose();
-                }
+                httpRequest?.Dispose();
             }
         }
         
@@ -1035,18 +1017,12 @@ namespace Microsoft.Azure.Management.Sql.LegacySdk
                 }
                 finally
                 {
-                    if (httpResponse != null)
-                    {
-                        httpResponse.Dispose();
-                    }
+                    httpResponse?.Dispose();
                 }
             }
             finally
             {
-                if (httpRequest != null)
-                {
-                    httpRequest.Dispose();
-                }
+                httpRequest?.Dispose();
             }
         }
         
@@ -1150,18 +1126,12 @@ namespace Microsoft.Azure.Management.Sql.LegacySdk
                 }
                 finally
                 {
-                    if (httpResponse != null)
-                    {
-                        httpResponse.Dispose();
-                    }
+                    httpResponse?.Dispose();
                 }
             }
             finally
             {
-                if (httpRequest != null)
-                {
-                    httpRequest.Dispose();
-                }
+                httpRequest?.Dispose();
             }
         }
         
@@ -1434,18 +1404,12 @@ namespace Microsoft.Azure.Management.Sql.LegacySdk
                 }
                 finally
                 {
-                    if (httpResponse != null)
-                    {
-                        httpResponse.Dispose();
-                    }
+                    httpResponse?.Dispose();
                 }
             }
             finally
             {
-                if (httpRequest != null)
-                {
-                    httpRequest.Dispose();
-                }
+                httpRequest?.Dispose();
             }
         }
     }
diff --git a/src/Sql/Sql.LegacySdk/Generated/SecureConnectionPolicyOperations.cs b/src/Sql/Sql.LegacySdk/Generated/SecureConnectionPolicyOperations.cs
index 8dc9afc4a2..b51b4c01d4 100644
--- a/src/Sql/Sql.LegacySdk/Generated/SecureConnectionPolicyOperations.cs
+++ b/src/Sql/Sql.LegacySdk/Generated/SecureConnectionPolicyOperations.cs
@@ -242,18 +242,12 @@ namespace Microsoft.Azure.Management.Sql.LegacySdk
                 }
                 finally
                 {
-                    if (httpResponse != null)
-                    {
-                        httpResponse.Dispose();
-                    }
+                    httpResponse?.Dispose();
                 }
             }
             finally
             {
-                if (httpRequest != null)
-                {
-                    httpRequest.Dispose();
-                }
+                httpRequest?.Dispose();
             }
         }
         
@@ -484,18 +478,12 @@ namespace Microsoft.Azure.Management.Sql.LegacySdk
                 }
                 finally
                 {
-                    if (httpResponse != null)
-                    {
-                        httpResponse.Dispose();
-                    }
+                    httpResponse?.Dispose();
                 }
             }
             finally
             {
-                if (httpRequest != null)
-                {
-                    httpRequest.Dispose();
-                }
+                httpRequest?.Dispose();
             }
         }
     }
diff --git a/src/Sql/Sql.LegacySdk/Generated/SecurityAlertPolicyOperations.cs b/src/Sql/Sql.LegacySdk/Generated/SecurityAlertPolicyOperations.cs
index 2c5adef4da..fc5d2b7ed3 100644
--- a/src/Sql/Sql.LegacySdk/Generated/SecurityAlertPolicyOperations.cs
+++ b/src/Sql/Sql.LegacySdk/Generated/SecurityAlertPolicyOperations.cs
@@ -269,18 +269,12 @@ namespace Microsoft.Azure.Management.Sql.LegacySdk
                 }
                 finally
                 {
-                    if (httpResponse != null)
-                    {
-                        httpResponse.Dispose();
-                    }
+                    httpResponse?.Dispose();
                 }
             }
             finally
             {
-                if (httpRequest != null)
-                {
-                    httpRequest.Dispose();
-                }
+                httpRequest?.Dispose();
             }
         }
         
@@ -480,18 +474,12 @@ namespace Microsoft.Azure.Management.Sql.LegacySdk
                 }
                 finally
                 {
-                    if (httpResponse != null)
-                    {
-                        httpResponse.Dispose();
-                    }
+                    httpResponse?.Dispose();
                 }
             }
             finally
             {
-                if (httpRequest != null)
-                {
-                    httpRequest.Dispose();
-                }
+                httpRequest?.Dispose();
             }
         }
         
@@ -751,18 +739,12 @@ namespace Microsoft.Azure.Management.Sql.LegacySdk
                 }
                 finally
                 {
-                    if (httpResponse != null)
-                    {
-                        httpResponse.Dispose();
-                    }
+                    httpResponse?.Dispose();
                 }
             }
             finally
             {
-                if (httpRequest != null)
-                {
-                    httpRequest.Dispose();
-                }
+                httpRequest?.Dispose();
             }
         }
         
@@ -947,18 +929,12 @@ namespace Microsoft.Azure.Management.Sql.LegacySdk
                 }
                 finally
                 {
-                    if (httpResponse != null)
-                    {
-                        httpResponse.Dispose();
-                    }
+                    httpResponse?.Dispose();
                 }
             }
             finally
             {
-                if (httpRequest != null)
-                {
-                    httpRequest.Dispose();
-                }
+                httpRequest?.Dispose();
             }
         }
         
@@ -1207,18 +1183,12 @@ namespace Microsoft.Azure.Management.Sql.LegacySdk
                 }
                 finally
                 {
-                    if (httpResponse != null)
-                    {
-                        httpResponse.Dispose();
-                    }
+                    httpResponse?.Dispose();
                 }
             }
             finally
             {
-                if (httpRequest != null)
-                {
-                    httpRequest.Dispose();
-                }
+                httpRequest?.Dispose();
             }
         }
     }
diff --git a/src/Sql/Sql.LegacySdk/Generated/ServerAdministratorOperations.cs b/src/Sql/Sql.LegacySdk/Generated/ServerAdministratorOperations.cs
index 3855357a5e..6390d44c71 100644
--- a/src/Sql/Sql.LegacySdk/Generated/ServerAdministratorOperations.cs
+++ b/src/Sql/Sql.LegacySdk/Generated/ServerAdministratorOperations.cs
@@ -387,18 +387,12 @@ namespace Microsoft.Azure.Management.Sql.LegacySdk
                 }
                 finally
                 {
-                    if (httpResponse != null)
-                    {
-                        httpResponse.Dispose();
-                    }
+                    httpResponse?.Dispose();
                 }
             }
             finally
             {
-                if (httpRequest != null)
-                {
-                    httpRequest.Dispose();
-                }
+                httpRequest?.Dispose();
             }
         }
         
@@ -601,18 +595,12 @@ namespace Microsoft.Azure.Management.Sql.LegacySdk
                 }
                 finally
                 {
-                    if (httpResponse != null)
-                    {
-                        httpResponse.Dispose();
-                    }
+                    httpResponse?.Dispose();
                 }
             }
             finally
             {
-                if (httpRequest != null)
-                {
-                    httpRequest.Dispose();
-                }
+                httpRequest?.Dispose();
             }
         }
         
@@ -1015,18 +1003,12 @@ namespace Microsoft.Azure.Management.Sql.LegacySdk
                 }
                 finally
                 {
-                    if (httpResponse != null)
-                    {
-                        httpResponse.Dispose();
-                    }
+                    httpResponse?.Dispose();
                 }
             }
             finally
             {
-                if (httpRequest != null)
-                {
-                    httpRequest.Dispose();
-                }
+                httpRequest?.Dispose();
             }
         }
         
@@ -1172,18 +1154,12 @@ namespace Microsoft.Azure.Management.Sql.LegacySdk
                 }
                 finally
                 {
-                    if (httpResponse != null)
-                    {
-                        httpResponse.Dispose();
-                    }
+                    httpResponse?.Dispose();
                 }
             }
             finally
             {
-                if (httpRequest != null)
-                {
-                    httpRequest.Dispose();
-                }
+                httpRequest?.Dispose();
             }
         }
         
@@ -1406,18 +1382,12 @@ namespace Microsoft.Azure.Management.Sql.LegacySdk
                 }
                 finally
                 {
-                    if (httpResponse != null)
-                    {
-                        httpResponse.Dispose();
-                    }
+                    httpResponse?.Dispose();
                 }
             }
             finally
             {
-                if (httpRequest != null)
-                {
-                    httpRequest.Dispose();
-                }
+                httpRequest?.Dispose();
             }
         }
         
@@ -1652,18 +1622,12 @@ namespace Microsoft.Azure.Management.Sql.LegacySdk
                 }
                 finally
                 {
-                    if (httpResponse != null)
-                    {
-                        httpResponse.Dispose();
-                    }
+                    httpResponse?.Dispose();
                 }
             }
             finally
             {
-                if (httpRequest != null)
-                {
-                    httpRequest.Dispose();
-                }
+                httpRequest?.Dispose();
             }
         }
     }
diff --git a/src/Sql/Sql.LegacySdk/Generated/ServerAdvisorOperations.cs b/src/Sql/Sql.LegacySdk/Generated/ServerAdvisorOperations.cs
index a98d8419ed..489291ca47 100644
--- a/src/Sql/Sql.LegacySdk/Generated/ServerAdvisorOperations.cs
+++ b/src/Sql/Sql.LegacySdk/Generated/ServerAdvisorOperations.cs
@@ -698,18 +698,12 @@ namespace Microsoft.Azure.Management.Sql.LegacySdk
                 }
                 finally
                 {
-                    if (httpResponse != null)
-                    {
-                        httpResponse.Dispose();
-                    }
+                    httpResponse?.Dispose();
                 }
             }
             finally
             {
-                if (httpRequest != null)
-                {
-                    httpRequest.Dispose();
-                }
+                httpRequest?.Dispose();
             }
         }
         
@@ -1344,18 +1338,12 @@ namespace Microsoft.Azure.Management.Sql.LegacySdk
                 }
                 finally
                 {
-                    if (httpResponse != null)
-                    {
-                        httpResponse.Dispose();
-                    }
+                    httpResponse?.Dispose();
                 }
             }
             finally
             {
-                if (httpRequest != null)
-                {
-                    httpRequest.Dispose();
-                }
+                httpRequest?.Dispose();
             }
         }
         
@@ -2052,18 +2040,12 @@ namespace Microsoft.Azure.Management.Sql.LegacySdk
                 }
                 finally
                 {
-                    if (httpResponse != null)
-                    {
-                        httpResponse.Dispose();
-                    }
+                    httpResponse?.Dispose();
                 }
             }
             finally
             {
-                if (httpRequest != null)
-                {
-                    httpRequest.Dispose();
-                }
+                httpRequest?.Dispose();
             }
         }
     }
diff --git a/src/Sql/Sql.LegacySdk/Generated/ServerCommunicationLinkOperations.cs b/src/Sql/Sql.LegacySdk/Generated/ServerCommunicationLinkOperations.cs
index c9ea265d28..17e58f5cf3 100644
--- a/src/Sql/Sql.LegacySdk/Generated/ServerCommunicationLinkOperations.cs
+++ b/src/Sql/Sql.LegacySdk/Generated/ServerCommunicationLinkOperations.cs
@@ -373,18 +373,12 @@ namespace Microsoft.Azure.Management.Sql.LegacySdk
                 }
                 finally
                 {
-                    if (httpResponse != null)
-                    {
-                        httpResponse.Dispose();
-                    }
+                    httpResponse?.Dispose();
                 }
             }
             finally
             {
-                if (httpRequest != null)
-                {
-                    httpRequest.Dispose();
-                }
+                httpRequest?.Dispose();
             }
         }
         
@@ -614,18 +608,12 @@ namespace Microsoft.Azure.Management.Sql.LegacySdk
                 }
                 finally
                 {
-                    if (httpResponse != null)
-                    {
-                        httpResponse.Dispose();
-                    }
+                    httpResponse?.Dispose();
                 }
             }
             finally
             {
-                if (httpRequest != null)
-                {
-                    httpRequest.Dispose();
-                }
+                httpRequest?.Dispose();
             }
         }
         
@@ -847,18 +835,12 @@ namespace Microsoft.Azure.Management.Sql.LegacySdk
                 }
                 finally
                 {
-                    if (httpResponse != null)
-                    {
-                        httpResponse.Dispose();
-                    }
+                    httpResponse?.Dispose();
                 }
             }
             finally
             {
-                if (httpRequest != null)
-                {
-                    httpRequest.Dispose();
-                }
+                httpRequest?.Dispose();
             }
         }
         
@@ -1067,18 +1049,12 @@ namespace Microsoft.Azure.Management.Sql.LegacySdk
                 }
                 finally
                 {
-                    if (httpResponse != null)
-                    {
-                        httpResponse.Dispose();
-                    }
+                    httpResponse?.Dispose();
                 }
             }
             finally
             {
-                if (httpRequest != null)
-                {
-                    httpRequest.Dispose();
-                }
+                httpRequest?.Dispose();
             }
         }
         
@@ -1298,18 +1274,12 @@ namespace Microsoft.Azure.Management.Sql.LegacySdk
                 }
                 finally
                 {
-                    if (httpResponse != null)
-                    {
-                        httpResponse.Dispose();
-                    }
+                    httpResponse?.Dispose();
                 }
             }
             finally
             {
-                if (httpRequest != null)
-                {
-                    httpRequest.Dispose();
-                }
+                httpRequest?.Dispose();
             }
         }
     }
diff --git a/src/Sql/Sql.LegacySdk/Generated/ServerDisasterRecoveryConfigurationOperations.cs b/src/Sql/Sql.LegacySdk/Generated/ServerDisasterRecoveryConfigurationOperations.cs
index 20e9f1746c..150219a82e 100644
--- a/src/Sql/Sql.LegacySdk/Generated/ServerDisasterRecoveryConfigurationOperations.cs
+++ b/src/Sql/Sql.LegacySdk/Generated/ServerDisasterRecoveryConfigurationOperations.cs
@@ -298,18 +298,12 @@ namespace Microsoft.Azure.Management.Sql.LegacySdk
                 }
                 finally
                 {
-                    if (httpResponse != null)
-                    {
-                        httpResponse.Dispose();
-                    }
+                    httpResponse?.Dispose();
                 }
             }
             finally
             {
-                if (httpRequest != null)
-                {
-                    httpRequest.Dispose();
-                }
+                httpRequest?.Dispose();
             }
         }
         
@@ -540,18 +534,12 @@ namespace Microsoft.Azure.Management.Sql.LegacySdk
                 }
                 finally
                 {
-                    if (httpResponse != null)
-                    {
-                        httpResponse.Dispose();
-                    }
+                    httpResponse?.Dispose();
                 }
             }
             finally
             {
-                if (httpRequest != null)
-                {
-                    httpRequest.Dispose();
-                }
+                httpRequest?.Dispose();
             }
         }
         
@@ -699,18 +687,12 @@ namespace Microsoft.Azure.Management.Sql.LegacySdk
                 }
                 finally
                 {
-                    if (httpResponse != null)
-                    {
-                        httpResponse.Dispose();
-                    }
+                    httpResponse?.Dispose();
                 }
             }
             finally
             {
-                if (httpRequest != null)
-                {
-                    httpRequest.Dispose();
-                }
+                httpRequest?.Dispose();
             }
         }
         
@@ -858,18 +840,12 @@ namespace Microsoft.Azure.Management.Sql.LegacySdk
                 }
                 finally
                 {
-                    if (httpResponse != null)
-                    {
-                        httpResponse.Dispose();
-                    }
+                    httpResponse?.Dispose();
                 }
             }
             finally
             {
-                if (httpRequest != null)
-                {
-                    httpRequest.Dispose();
-                }
+                httpRequest?.Dispose();
             }
         }
         
@@ -1121,18 +1097,12 @@ namespace Microsoft.Azure.Management.Sql.LegacySdk
                 }
                 finally
                 {
-                    if (httpResponse != null)
-                    {
-                        httpResponse.Dispose();
-                    }
+                    httpResponse?.Dispose();
                 }
             }
             finally
             {
-                if (httpRequest != null)
-                {
-                    httpRequest.Dispose();
-                }
+                httpRequest?.Dispose();
             }
         }
         
@@ -1240,18 +1210,12 @@ namespace Microsoft.Azure.Management.Sql.LegacySdk
                 }
                 finally
                 {
-                    if (httpResponse != null)
-                    {
-                        httpResponse.Dispose();
-                    }
+                    httpResponse?.Dispose();
                 }
             }
             finally
             {
-                if (httpRequest != null)
-                {
-                    httpRequest.Dispose();
-                }
+                httpRequest?.Dispose();
             }
         }
         
@@ -1500,18 +1464,12 @@ namespace Microsoft.Azure.Management.Sql.LegacySdk
                 }
                 finally
                 {
-                    if (httpResponse != null)
-                    {
-                        httpResponse.Dispose();
-                    }
+                    httpResponse?.Dispose();
                 }
             }
             finally
             {
-                if (httpRequest != null)
-                {
-                    httpRequest.Dispose();
-                }
+                httpRequest?.Dispose();
             }
         }
     }
diff --git a/src/Sql/Sql.LegacySdk/Generated/ServerKeyOperations.cs b/src/Sql/Sql.LegacySdk/Generated/ServerKeyOperations.cs
index 3058d17c7a..3acbcea3e4 100644
--- a/src/Sql/Sql.LegacySdk/Generated/ServerKeyOperations.cs
+++ b/src/Sql/Sql.LegacySdk/Generated/ServerKeyOperations.cs
@@ -391,18 +391,12 @@ namespace Microsoft.Azure.Management.Sql.LegacySdk
                 }
                 finally
                 {
-                    if (httpResponse != null)
-                    {
-                        httpResponse.Dispose();
-                    }
+                    httpResponse?.Dispose();
                 }
             }
             finally
             {
-                if (httpRequest != null)
-                {
-                    httpRequest.Dispose();
-                }
+                httpRequest?.Dispose();
             }
         }
         
@@ -616,18 +610,12 @@ namespace Microsoft.Azure.Management.Sql.LegacySdk
                 }
                 finally
                 {
-                    if (httpResponse != null)
-                    {
-                        httpResponse.Dispose();
-                    }
+                    httpResponse?.Dispose();
                 }
             }
             finally
             {
-                if (httpRequest != null)
-                {
-                    httpRequest.Dispose();
-                }
+                httpRequest?.Dispose();
             }
         }
         
@@ -1024,18 +1012,12 @@ namespace Microsoft.Azure.Management.Sql.LegacySdk
                 }
                 finally
                 {
-                    if (httpResponse != null)
-                    {
-                        httpResponse.Dispose();
-                    }
+                    httpResponse?.Dispose();
                 }
             }
             finally
             {
-                if (httpRequest != null)
-                {
-                    httpRequest.Dispose();
-                }
+                httpRequest?.Dispose();
             }
         }
         
@@ -1271,18 +1253,12 @@ namespace Microsoft.Azure.Management.Sql.LegacySdk
                 }
                 finally
                 {
-                    if (httpResponse != null)
-                    {
-                        httpResponse.Dispose();
-                    }
+                    httpResponse?.Dispose();
                 }
             }
             finally
             {
-                if (httpRequest != null)
-                {
-                    httpRequest.Dispose();
-                }
+                httpRequest?.Dispose();
             }
         }
         
@@ -1440,18 +1416,12 @@ namespace Microsoft.Azure.Management.Sql.LegacySdk
                 }
                 finally
                 {
-                    if (httpResponse != null)
-                    {
-                        httpResponse.Dispose();
-                    }
+                    httpResponse?.Dispose();
                 }
             }
             finally
             {
-                if (httpRequest != null)
-                {
-                    httpRequest.Dispose();
-                }
+                httpRequest?.Dispose();
             }
         }
         
@@ -1684,18 +1654,12 @@ namespace Microsoft.Azure.Management.Sql.LegacySdk
                 }
                 finally
                 {
-                    if (httpResponse != null)
-                    {
-                        httpResponse.Dispose();
-                    }
+                    httpResponse?.Dispose();
                 }
             }
             finally
             {
-                if (httpRequest != null)
-                {
-                    httpRequest.Dispose();
-                }
+                httpRequest?.Dispose();
             }
         }
     }
diff --git a/src/Sql/Sql.LegacySdk/Generated/ServerOperations.cs b/src/Sql/Sql.LegacySdk/Generated/ServerOperations.cs
index 492e906968..4ba3dc77e2 100644
--- a/src/Sql/Sql.LegacySdk/Generated/ServerOperations.cs
+++ b/src/Sql/Sql.LegacySdk/Generated/ServerOperations.cs
@@ -346,18 +346,12 @@ namespace Microsoft.Azure.Management.Sql.LegacySdk
                 }
                 finally
                 {
-                    if (httpResponse != null)
-                    {
-                        httpResponse.Dispose();
-                    }
+                    httpResponse?.Dispose();
                 }
             }
             finally
             {
-                if (httpRequest != null)
-                {
-                    httpRequest.Dispose();
-                }
+                httpRequest?.Dispose();
             }
         }
         
@@ -492,18 +486,12 @@ namespace Microsoft.Azure.Management.Sql.LegacySdk
                 }
                 finally
                 {
-                    if (httpResponse != null)
-                    {
-                        httpResponse.Dispose();
-                    }
+                    httpResponse?.Dispose();
                 }
             }
             finally
             {
-                if (httpRequest != null)
-                {
-                    httpRequest.Dispose();
-                }
+                httpRequest?.Dispose();
             }
         }
         
@@ -728,18 +716,12 @@ namespace Microsoft.Azure.Management.Sql.LegacySdk
                 }
                 finally
                 {
-                    if (httpResponse != null)
-                    {
-                        httpResponse.Dispose();
-                    }
+                    httpResponse?.Dispose();
                 }
             }
             finally
             {
-                if (httpRequest != null)
-                {
-                    httpRequest.Dispose();
-                }
+                httpRequest?.Dispose();
             }
         }
         
@@ -962,18 +944,12 @@ namespace Microsoft.Azure.Management.Sql.LegacySdk
                 }
                 finally
                 {
-                    if (httpResponse != null)
-                    {
-                        httpResponse.Dispose();
-                    }
+                    httpResponse?.Dispose();
                 }
             }
             finally
             {
-                if (httpRequest != null)
-                {
-                    httpRequest.Dispose();
-                }
+                httpRequest?.Dispose();
             }
         }
         
@@ -1176,18 +1152,12 @@ namespace Microsoft.Azure.Management.Sql.LegacySdk
                 }
                 finally
                 {
-                    if (httpResponse != null)
-                    {
-                        httpResponse.Dispose();
-                    }
+                    httpResponse?.Dispose();
                 }
             }
             finally
             {
-                if (httpRequest != null)
-                {
-                    httpRequest.Dispose();
-                }
+                httpRequest?.Dispose();
             }
         }
     }
diff --git a/src/Sql/Sql.LegacySdk/Generated/ServerRecommendedActionOperations.cs b/src/Sql/Sql.LegacySdk/Generated/ServerRecommendedActionOperations.cs
index c15c667f7c..2745e62e3c 100644
--- a/src/Sql/Sql.LegacySdk/Generated/ServerRecommendedActionOperations.cs
+++ b/src/Sql/Sql.LegacySdk/Generated/ServerRecommendedActionOperations.cs
@@ -609,18 +609,12 @@ namespace Microsoft.Azure.Management.Sql.LegacySdk
                 }
                 finally
                 {
-                    if (httpResponse != null)
-                    {
-                        httpResponse.Dispose();
-                    }
+                    httpResponse?.Dispose();
                 }
             }
             finally
             {
-                if (httpRequest != null)
-                {
-                    httpRequest.Dispose();
-                }
+                httpRequest?.Dispose();
             }
         }
         
@@ -1164,18 +1158,12 @@ namespace Microsoft.Azure.Management.Sql.LegacySdk
                 }
                 finally
                 {
-                    if (httpResponse != null)
-                    {
-                        httpResponse.Dispose();
-                    }
+                    httpResponse?.Dispose();
                 }
             }
             finally
             {
-                if (httpRequest != null)
-                {
-                    httpRequest.Dispose();
-                }
+                httpRequest?.Dispose();
             }
         }
         
@@ -1796,18 +1784,12 @@ namespace Microsoft.Azure.Management.Sql.LegacySdk
                 }
                 finally
                 {
-                    if (httpResponse != null)
-                    {
-                        httpResponse.Dispose();
-                    }
+                    httpResponse?.Dispose();
                 }
             }
             finally
             {
-                if (httpRequest != null)
-                {
-                    httpRequest.Dispose();
-                }
+                httpRequest?.Dispose();
             }
         }
     }
diff --git a/src/Sql/Sql.LegacySdk/Generated/ServerUpgradeOperations.cs b/src/Sql/Sql.LegacySdk/Generated/ServerUpgradeOperations.cs
index db3ea44602..1ee5709109 100644
--- a/src/Sql/Sql.LegacySdk/Generated/ServerUpgradeOperations.cs
+++ b/src/Sql/Sql.LegacySdk/Generated/ServerUpgradeOperations.cs
@@ -197,18 +197,12 @@ namespace Microsoft.Azure.Management.Sql.LegacySdk
                 }
                 finally
                 {
-                    if (httpResponse != null)
-                    {
-                        httpResponse.Dispose();
-                    }
+                    httpResponse?.Dispose();
                 }
             }
             finally
             {
-                if (httpRequest != null)
-                {
-                    httpRequest.Dispose();
-                }
+                httpRequest?.Dispose();
             }
         }
         
@@ -373,18 +367,12 @@ namespace Microsoft.Azure.Management.Sql.LegacySdk
                 }
                 finally
                 {
-                    if (httpResponse != null)
-                    {
-                        httpResponse.Dispose();
-                    }
+                    httpResponse?.Dispose();
                 }
             }
             finally
             {
-                if (httpRequest != null)
-                {
-                    httpRequest.Dispose();
-                }
+                httpRequest?.Dispose();
             }
         }
         
@@ -637,18 +625,12 @@ namespace Microsoft.Azure.Management.Sql.LegacySdk
                 }
                 finally
                 {
-                    if (httpResponse != null)
-                    {
-                        httpResponse.Dispose();
-                    }
+                    httpResponse?.Dispose();
                 }
             }
             finally
             {
-                if (httpRequest != null)
-                {
-                    httpRequest.Dispose();
-                }
+                httpRequest?.Dispose();
             }
         }
     }
diff --git a/src/Sql/Sql.LegacySdk/Generated/ServiceObjectiveOperations.cs b/src/Sql/Sql.LegacySdk/Generated/ServiceObjectiveOperations.cs
index f9c0ad2fef..c5aa0b1564 100644
--- a/src/Sql/Sql.LegacySdk/Generated/ServiceObjectiveOperations.cs
+++ b/src/Sql/Sql.LegacySdk/Generated/ServiceObjectiveOperations.cs
@@ -302,18 +302,12 @@ namespace Microsoft.Azure.Management.Sql.LegacySdk
                 }
                 finally
                 {
-                    if (httpResponse != null)
-                    {
-                        httpResponse.Dispose();
-                    }
+                    httpResponse?.Dispose();
                 }
             }
             finally
             {
-                if (httpRequest != null)
-                {
-                    httpRequest.Dispose();
-                }
+                httpRequest?.Dispose();
             }
         }
         
@@ -555,18 +549,12 @@ namespace Microsoft.Azure.Management.Sql.LegacySdk
                 }
                 finally
                 {
-                    if (httpResponse != null)
-                    {
-                        httpResponse.Dispose();
-                    }
+                    httpResponse?.Dispose();
                 }
             }
             finally
             {
-                if (httpRequest != null)
-                {
-                    httpRequest.Dispose();
-                }
+                httpRequest?.Dispose();
             }
         }
     }
diff --git a/src/Sql/Sql.LegacySdk/Generated/ServiceTierAdvisorOperations.cs b/src/Sql/Sql.LegacySdk/Generated/ServiceTierAdvisorOperations.cs
index 502c1f50af..378c4d8a03 100644
--- a/src/Sql/Sql.LegacySdk/Generated/ServiceTierAdvisorOperations.cs
+++ b/src/Sql/Sql.LegacySdk/Generated/ServiceTierAdvisorOperations.cs
@@ -470,18 +470,12 @@ namespace Microsoft.Azure.Management.Sql.LegacySdk
                 }
                 finally
                 {
-                    if (httpResponse != null)
-                    {
-                        httpResponse.Dispose();
-                    }
+                    httpResponse?.Dispose();
                 }
             }
             finally
             {
-                if (httpRequest != null)
-                {
-                    httpRequest.Dispose();
-                }
+                httpRequest?.Dispose();
             }
         }
         
@@ -892,18 +886,12 @@ namespace Microsoft.Azure.Management.Sql.LegacySdk
                 }
                 finally
                 {
-                    if (httpResponse != null)
-                    {
-                        httpResponse.Dispose();
-                    }
+                    httpResponse?.Dispose();
                 }
             }
             finally
             {
-                if (httpRequest != null)
-                {
-                    httpRequest.Dispose();
-                }
+                httpRequest?.Dispose();
             }
         }
     }
diff --git a/src/Sql/Sql.LegacySdk/Generated/SqlManagementClient.cs b/src/Sql/Sql.LegacySdk/Generated/SqlManagementClient.cs
index 310a858f1f..27cd03cc66 100644
--- a/src/Sql/Sql.LegacySdk/Generated/SqlManagementClient.cs
+++ b/src/Sql/Sql.LegacySdk/Generated/SqlManagementClient.cs
@@ -856,18 +856,12 @@ namespace Microsoft.Azure.Management.Sql.LegacySdk
                 }
                 finally
                 {
-                    if (httpResponse != null)
-                    {
-                        httpResponse.Dispose();
-                    }
+                    httpResponse?.Dispose();
                 }
             }
             finally
             {
-                if (httpRequest != null)
-                {
-                    httpRequest.Dispose();
-                }
+                httpRequest?.Dispose();
             }
         }
     }
diff --git a/src/Sql/Sql.LegacySdk/Generated/TransparentDataEncryptionOperations.cs b/src/Sql/Sql.LegacySdk/Generated/TransparentDataEncryptionOperations.cs
index 09567e1b59..a0a6c2e33b 100644
--- a/src/Sql/Sql.LegacySdk/Generated/TransparentDataEncryptionOperations.cs
+++ b/src/Sql/Sql.LegacySdk/Generated/TransparentDataEncryptionOperations.cs
@@ -376,18 +376,12 @@ namespace Microsoft.Azure.Management.Sql.LegacySdk
                 }
                 finally
                 {
-                    if (httpResponse != null)
-                    {
-                        httpResponse.Dispose();
-                    }
+                    httpResponse?.Dispose();
                 }
             }
             finally
             {
-                if (httpRequest != null)
-                {
-                    httpRequest.Dispose();
-                }
+                httpRequest?.Dispose();
             }
         }
         
@@ -638,18 +632,12 @@ namespace Microsoft.Azure.Management.Sql.LegacySdk
                 }
                 finally
                 {
-                    if (httpResponse != null)
-                    {
-                        httpResponse.Dispose();
-                    }
+                    httpResponse?.Dispose();
                 }
             }
             finally
             {
-                if (httpRequest != null)
-                {
-                    httpRequest.Dispose();
-                }
+                httpRequest?.Dispose();
             }
         }
         
@@ -946,18 +934,12 @@ namespace Microsoft.Azure.Management.Sql.LegacySdk
                 }
                 finally
                 {
-                    if (httpResponse != null)
-                    {
-                        httpResponse.Dispose();
-                    }
+                    httpResponse?.Dispose();
                 }
             }
             finally
             {
-                if (httpRequest != null)
-                {
-                    httpRequest.Dispose();
-                }
+                httpRequest?.Dispose();
             }
         }
         
@@ -1187,18 +1169,12 @@ namespace Microsoft.Azure.Management.Sql.LegacySdk
                 }
                 finally
                 {
-                    if (httpResponse != null)
-                    {
-                        httpResponse.Dispose();
-                    }
+                    httpResponse?.Dispose();
                 }
             }
             finally
             {
-                if (httpRequest != null)
-                {
-                    httpRequest.Dispose();
-                }
+                httpRequest?.Dispose();
             }
         }
         
@@ -1419,18 +1395,12 @@ namespace Microsoft.Azure.Management.Sql.LegacySdk
                 }
                 finally
                 {
-                    if (httpResponse != null)
-                    {
-                        httpResponse.Dispose();
-                    }
+                    httpResponse?.Dispose();
                 }
             }
             finally
             {
-                if (httpRequest != null)
-                {
-                    httpRequest.Dispose();
-                }
+                httpRequest?.Dispose();
             }
         }
         
@@ -1663,18 +1633,12 @@ namespace Microsoft.Azure.Management.Sql.LegacySdk
                 }
                 finally
                 {
-                    if (httpResponse != null)
-                    {
-                        httpResponse.Dispose();
-                    }
+                    httpResponse?.Dispose();
                 }
             }
             finally
             {
-                if (httpRequest != null)
-                {
-                    httpRequest.Dispose();
-                }
+                httpRequest?.Dispose();
             }
         }
         
@@ -1902,18 +1866,12 @@ namespace Microsoft.Azure.Management.Sql.LegacySdk
                 }
                 finally
                 {
-                    if (httpResponse != null)
-                    {
-                        httpResponse.Dispose();
-                    }
+                    httpResponse?.Dispose();
                 }
             }
             finally
             {
-                if (httpRequest != null)
-                {
-                    httpRequest.Dispose();
-                }
+                httpRequest?.Dispose();
             }
         }
     }
diff --git a/src/Sql/Sql/Auditing/Services/SqlAuditAdapter.cs b/src/Sql/Sql/Auditing/Services/SqlAuditAdapter.cs
index 918de61d88..1cd80a253f 100644
--- a/src/Sql/Sql/Auditing/Services/SqlAuditAdapter.cs
+++ b/src/Sql/Sql/Auditing/Services/SqlAuditAdapter.cs
@@ -372,7 +372,7 @@ namespace Microsoft.Azure.Commands.Sql.Auditing.Services
         /// </summary>
         private string GetStorageAccountEndpoint(string storageAccountName)
         {
-            return string.Format("https://{0}.blob.{1}", storageAccountName, Context.Environment.GetEndpoint(AzureEnvironment.Endpoint.StorageEndpointSuffix));
+            return $"https://{storageAccountName}.blob.{Context.Environment.GetEndpoint(AzureEnvironment.Endpoint.StorageEndpointSuffix)}";
         }
 
         internal void PersistAuditChanges(AuditModelType model)
@@ -792,16 +792,13 @@ namespace Microsoft.Azure.Commands.Sql.Auditing.Services
         private AuditActionGroups[] ExtractAuditActionGroups(IEnumerable<string> auditActionsAndGroups)
         {
             var groups = new List<AuditActionGroups>();
-            if (auditActionsAndGroups != null)
-            {
-                auditActionsAndGroups.ForEach(item =>
-                {
-                    if (Enum.TryParse(item, true, out AuditActionGroups group))
-                    {
-                        groups.Add(group);
-                    }
-                });
-            }
+            auditActionsAndGroups?.ForEach(item =>
+{
+    if (Enum.TryParse(item, true, out AuditActionGroups group))
+    {
+        groups.Add(group);
+    }
+});
 
             return groups.ToArray();
         }
@@ -918,16 +915,13 @@ namespace Microsoft.Azure.Commands.Sql.Auditing.Services
         private string[] ExtractAuditActions(IEnumerable<string> auditActionsAndGroups)
         {
             var actions = new List<string>();
-            if (auditActionsAndGroups != null)
-            {
-                auditActionsAndGroups.ForEach(item =>
-                {
-                    if (!Enum.TryParse(item, true, out AuditActionGroups group))
-                    {
-                        actions.Add(item);
-                    }
-                });
-            }
+            auditActionsAndGroups?.ForEach(item =>
+{
+    if (!Enum.TryParse(item, true, out AuditActionGroups group))
+    {
+        actions.Add(item);
+    }
+});
 
             return actions.ToArray();
         }
diff --git a/src/Sql/Sql/Common/AzureSqlCmdletBase.cs b/src/Sql/Sql/Common/AzureSqlCmdletBase.cs
index 9fd407faef..c748625171 100644
--- a/src/Sql/Sql/Common/AzureSqlCmdletBase.cs
+++ b/src/Sql/Sql/Common/AzureSqlCmdletBase.cs
@@ -40,7 +40,7 @@ namespace Microsoft.Azure.Commands.Sql.Common
             {
                 if (!string.IsNullOrEmpty(databaseName))
                 {
-                    return string.Format("{0}.{1}", serverName, databaseName);
+                    return $"{serverName}.{databaseName}";
                 }
                 return serverName;
             }
diff --git a/src/Sql/Sql/Common/TdeKeyHelper.cs b/src/Sql/Sql/Common/TdeKeyHelper.cs
index 6ecbc60f12..1ad2a28162 100644
--- a/src/Sql/Sql/Common/TdeKeyHelper.cs
+++ b/src/Sql/Sql/Common/TdeKeyHelper.cs
@@ -56,7 +56,7 @@ namespace Microsoft.Azure.Commands.Sql.Common
             string key = uri.Segments[2].TrimEnd('/');
             string version = uri.Segments.Last();
 
-            return String.Format("{0}_{1}_{2}", vault, key, version);
+            return $"{vault}_{key}_{version}";
         }
     }
 }
diff --git a/src/Sql/Sql/Data Masking/Services/SqlDataMaskingAdapter.cs b/src/Sql/Sql/Data Masking/Services/SqlDataMaskingAdapter.cs
index 1db3ede15d..48e906d1f1 100644
--- a/src/Sql/Sql/Data Masking/Services/SqlDataMaskingAdapter.cs	
+++ b/src/Sql/Sql/Data Masking/Services/SqlDataMaskingAdapter.cs	
@@ -139,7 +139,7 @@ namespace Microsoft.Azure.Commands.Sql.DataMasking.Services
 
         private string ExtractDataMaskingRuleId(DatabaseDataMaskingRuleModel model)
         {
-            var baseId = string.Format("{0}_{1}_{2}", model.SchemaName, model.TableName, model.ColumnName);
+            var baseId = $"{model.SchemaName}_{model.TableName}_{model.ColumnName}";
             Regex rgx = new Regex("[/\\\\#+=<>*%&:?.]");
             return rgx.Replace(baseId, "");
         }
diff --git a/src/Sql/Sql/Data Sync/Cmdlet/NewAzureSqlSyncAgent.cs b/src/Sql/Sql/Data Sync/Cmdlet/NewAzureSqlSyncAgent.cs
index e321433ba0..230d3e741d 100644
--- a/src/Sql/Sql/Data Sync/Cmdlet/NewAzureSqlSyncAgent.cs	
+++ b/src/Sql/Sql/Data Sync/Cmdlet/NewAzureSqlSyncAgent.cs	
@@ -151,8 +151,7 @@ namespace Microsoft.Azure.Commands.Sql.DataSync.Cmdlet
                     this.SyncDatabaseServerName = this.ServerName;
                 }
                 // "/subscriptions/{id}/" will be added in AzureSqlDataSyncCommunicator
-                this.syncDatabaseId = string.Format("resourceGroups/{0}/providers/Microsoft.Sql/servers/{1}/databases/{2}",
-                    this.SyncDatabaseResourceGroupName, this.SyncDatabaseServerName, this.SyncDatabaseName);
+                this.syncDatabaseId = $"resourceGroups/{this.SyncDatabaseResourceGroupName}/providers/Microsoft.Sql/servers/{this.SyncDatabaseServerName}/databases/{this.SyncDatabaseName}";
             }
 
             newEntity.Add(newModel);
diff --git a/src/Sql/Sql/Data Sync/Cmdlet/NewAzureSqlSyncGroup.cs b/src/Sql/Sql/Data Sync/Cmdlet/NewAzureSqlSyncGroup.cs
index daa35d17cd..d6e1ac60ff 100644
--- a/src/Sql/Sql/Data Sync/Cmdlet/NewAzureSqlSyncGroup.cs	
+++ b/src/Sql/Sql/Data Sync/Cmdlet/NewAzureSqlSyncGroup.cs	
@@ -165,8 +165,7 @@ namespace Microsoft.Azure.Commands.Sql.DataSync.Cmdlet
                 && MyInvocation.BoundParameters.ContainsKey("SyncDatabaseServerName") 
                 && MyInvocation.BoundParameters.ContainsKey("SyncDatabaseName"))
             {
-                this.syncDatabaseId = string.Format("resourceGroups/{0}/providers/Microsoft.Sql/servers/{1}/databases/{2}",
-                    this.SyncDatabaseResourceGroupName, this.SyncDatabaseServerName, this.SyncDatabaseName);
+                this.syncDatabaseId = $"resourceGroups/{this.SyncDatabaseResourceGroupName}/providers/Microsoft.Sql/servers/{this.SyncDatabaseServerName}/databases/{this.SyncDatabaseName}";
             }
 
             // if schema file is specified
diff --git a/src/Sql/Sql/Data Sync/Cmdlet/NewAzureSqlSyncMember.cs b/src/Sql/Sql/Data Sync/Cmdlet/NewAzureSqlSyncMember.cs
index 0a14f3a585..9f01b76722 100644
--- a/src/Sql/Sql/Data Sync/Cmdlet/NewAzureSqlSyncMember.cs	
+++ b/src/Sql/Sql/Data Sync/Cmdlet/NewAzureSqlSyncMember.cs	
@@ -246,7 +246,7 @@ namespace Microsoft.Azure.Commands.Sql.DataSync.Cmdlet
                 else
                 {
                     // "/subscriptions/{id}/" will be added in AzureSqlDataSyncCommunicator
-                    this.syncAgentId = string.Format("resourceGroups/{0}/providers/Microsoft.Sql/servers/{1}/syncAgents/{2}", this.SyncAgentResourceGroupName, this.SyncAgentServerName, this.SyncAgentName);
+                    this.syncAgentId = $"resourceGroups/{this.SyncAgentResourceGroupName}/providers/Microsoft.Sql/servers/{this.SyncAgentServerName}/syncAgents/{this.SyncAgentName}";
                 }
             }
             newEntity.Add(newModel);
diff --git a/src/Sql/Sql/Data Sync/Model/AzureSqlSyncGroupSchemaTableModel.cs b/src/Sql/Sql/Data Sync/Model/AzureSqlSyncGroupSchemaTableModel.cs
index b16b90cfa8..b344b91571 100644
--- a/src/Sql/Sql/Data Sync/Model/AzureSqlSyncGroupSchemaTableModel.cs	
+++ b/src/Sql/Sql/Data Sync/Model/AzureSqlSyncGroupSchemaTableModel.cs	
@@ -47,7 +47,7 @@ namespace Microsoft.Azure.Commands.Sql.DataSync.Model
         /// <param name="table">sync group schema table</param>
         public AzureSqlSyncGroupSchemaTableModel(SyncGroupSchemaTable table)
         {
-            if (table != null && table.Columns != null)
+            if (table?.Columns != null)
             {
                 Columns = new List<AzureSqlSyncGroupSchemaColumnModel>();
                 foreach (var column in table.Columns)
diff --git a/src/Sql/Sql/Data Sync/Services/AzureSqlDataSyncCommunicator.cs b/src/Sql/Sql/Data Sync/Services/AzureSqlDataSyncCommunicator.cs
index a498f2d089..02d76e66da 100644
--- a/src/Sql/Sql/Data Sync/Services/AzureSqlDataSyncCommunicator.cs	
+++ b/src/Sql/Sql/Data Sync/Services/AzureSqlDataSyncCommunicator.cs	
@@ -111,7 +111,7 @@ namespace Microsoft.Azure.Commands.Sql.DataSync.Services
         public Management.Sql.Models.SyncGroup CreateSyncGroup(string resourceGroupName, string serverName, string databaseName, string syncDatabaseId, string syncGroupName, Management.Sql.Models.SyncGroup parameters)
         {
             Management.Sql.SqlManagementClient client = GetCurrentSqlClient();
-            parameters.SyncDatabaseId = syncDatabaseId == null ? null : string.Format("/subscriptions/{0}/{1}", Subscription.Id, syncDatabaseId);            
+            parameters.SyncDatabaseId = syncDatabaseId == null ? null : $"/subscriptions/{Subscription.Id}/{syncDatabaseId}";            
             return client.SyncGroups.CreateOrUpdate(resourceGroupName, serverName, databaseName, syncGroupName, parameters);
         }
 
@@ -204,7 +204,7 @@ namespace Microsoft.Azure.Commands.Sql.DataSync.Services
             Management.Sql.SqlManagementClient client = GetCurrentSqlClient();
             if (syncAgentId != null)
             {
-                parameters.SyncAgentId = string.Format("/subscriptions/{0}/{1}", Subscription.Id, syncAgentId);
+                parameters.SyncAgentId = $"/subscriptions/{Subscription.Id}/{syncAgentId}";
             }
             return client.SyncMembers.CreateOrUpdate(resourceGroupName, serverName, databaseName, syncGroupName, syncMemberName, parameters);
         }
@@ -249,7 +249,7 @@ namespace Microsoft.Azure.Commands.Sql.DataSync.Services
             Management.Sql.LegacySdk.SqlManagementClient client = GetLegacySqlClient();
             if (syncDatabaseId != null)
             {
-                parameters.Properties.SyncDatabaseId = string.Format("/subscriptions/{0}/{1}", client.Credentials.SubscriptionId, syncDatabaseId);
+                parameters.Properties.SyncDatabaseId = $"/subscriptions/{client.Credentials.SubscriptionId}/{syncDatabaseId}";
             }     
             return client.DataSync.CreateOrUpdateSyncAgent(resourceGroupName, serverName, syncAgentName, parameters).SyncAgent;
         }
diff --git a/src/Sql/Sql/DataClassification/Model/SensitivityClassificationModel.cs b/src/Sql/Sql/DataClassification/Model/SensitivityClassificationModel.cs
index ee49d5eba3..467c82d347 100644
--- a/src/Sql/Sql/DataClassification/Model/SensitivityClassificationModel.cs
+++ b/src/Sql/Sql/DataClassification/Model/SensitivityClassificationModel.cs
@@ -56,10 +56,10 @@ namespace Microsoft.Azure.Commands.Sql.DataClassification.Model
 
 
             int existingLabelsIndex = 0;
-            int existingLabelsCount = existingLabels.Count();
+            int existingLabelsCount = existingLabels.Count;
 
             int newLabelsIndex = 0;
-            int newLabelsCount = newLabels.Count();
+            int newLabelsCount = newLabels.Count;
 
             while (existingLabelsIndex < existingLabelsCount && newLabelsIndex < newLabelsCount)
             {
diff --git a/src/Sql/Sql/Elastic Jobs/Services/AzureSqlElasticJobAdapter.cs b/src/Sql/Sql/Elastic Jobs/Services/AzureSqlElasticJobAdapter.cs
index dee2e42c14..93a36b7e4c 100644
--- a/src/Sql/Sql/Elastic Jobs/Services/AzureSqlElasticJobAdapter.cs	
+++ b/src/Sql/Sql/Elastic Jobs/Services/AzureSqlElasticJobAdapter.cs	
@@ -58,11 +58,7 @@ namespace Microsoft.Azure.Commands.Sql.ElasticJobs.Services
         public AzureSqlElasticJobAgentModel UpsertAgent(AzureSqlElasticJobAgentModel model)
         {
             // Construct database id
-            string databaseId = string.Format("/subscriptions/{0}/resourceGroups/{1}/providers/Microsoft.Sql/servers/{2}/databases/{3}",
-                AzureSqlElasticJobCommunicator.Subscription.Id,
-                model.ResourceGroupName,
-                model.ServerName,
-                model.DatabaseName);
+            string databaseId = $"/subscriptions/{AzureSqlElasticJobCommunicator.Subscription.Id}/resourceGroups/{model.ResourceGroupName}/providers/Microsoft.Sql/servers/{model.ServerName}/databases/{model.DatabaseName}";
 
             // Set agent params
             var param = new JobAgent
diff --git a/src/Sql/Sql/Elastic Pools/Services/AzureSqlElasticPoolAdapter.cs b/src/Sql/Sql/Elastic Pools/Services/AzureSqlElasticPoolAdapter.cs
index 9d50967e9f..e966c2d904 100644
--- a/src/Sql/Sql/Elastic Pools/Services/AzureSqlElasticPoolAdapter.cs	
+++ b/src/Sql/Sql/Elastic Pools/Services/AzureSqlElasticPoolAdapter.cs	
@@ -439,7 +439,7 @@ namespace Microsoft.Azure.Commands.Sql.ElasticPool.Services
                 return null;
             }
 
-            return SqlSkuUtils.GetVcoreSkuPrefix(tier) ?? string.Format("{0}Pool", tier);
+            return SqlSkuUtils.GetVcoreSkuPrefix(tier) ?? $"{tier}Pool";
         }
     }
 }
diff --git a/src/Sql/Sql/InstanceActiveDirectoryAdministrator/Services/AzureSqlInstanceActiveDirectoryAdministratorAdapter.cs b/src/Sql/Sql/InstanceActiveDirectoryAdministrator/Services/AzureSqlInstanceActiveDirectoryAdministratorAdapter.cs
index e8cd8c6fdb..9678a23910 100644
--- a/src/Sql/Sql/InstanceActiveDirectoryAdministrator/Services/AzureSqlInstanceActiveDirectoryAdministratorAdapter.cs
+++ b/src/Sql/Sql/InstanceActiveDirectoryAdministrator/Services/AzureSqlInstanceActiveDirectoryAdministratorAdapter.cs
@@ -258,7 +258,7 @@ namespace Microsoft.Azure.Commands.Sql.InstanceActiveDirectoryAdministrator.Serv
             var userList = ActiveDirectoryClient.FilterUsers(filter).Where(gr => string.Equals(gr.DisplayName, displayName, StringComparison.OrdinalIgnoreCase));
 
             // No user was found. Check if the display name is a UPN
-            if (userList == null || userList.Count() == 0)
+            if (userList == null || !userList.Any())
             {
                 // Check if the display name is the UPN
                 filter = new ADObjectFilterOptions()
@@ -272,7 +272,7 @@ namespace Microsoft.Azure.Commands.Sql.InstanceActiveDirectoryAdministrator.Serv
             }
 
             // No user was found. Check if the display name is a guest user. 
-            if (userList == null || userList.Count() == 0)
+            if (userList == null || !userList.Any())
             {
                 // Check if the display name is the UPN
                 filter = new ADObjectFilterOptions()
@@ -286,7 +286,7 @@ namespace Microsoft.Azure.Commands.Sql.InstanceActiveDirectoryAdministrator.Serv
             }
 
             // No user was found
-            if (userList == null || userList.Count() == 0)
+            if (userList == null || !userList.Any())
             {
                 throw new ArgumentException(string.Format(Microsoft.Azure.Commands.Sql.Properties.Resources.ADObjectNotFound, displayName));
             }
diff --git a/src/Sql/Sql/Location Capabilities/Cmdlet/GetAzureSqlCapability.cs b/src/Sql/Sql/Location Capabilities/Cmdlet/GetAzureSqlCapability.cs
index fda6458c99..d01e760669 100644
--- a/src/Sql/Sql/Location Capabilities/Cmdlet/GetAzureSqlCapability.cs	
+++ b/src/Sql/Sql/Location Capabilities/Cmdlet/GetAzureSqlCapability.cs	
@@ -207,7 +207,7 @@ namespace Microsoft.Azure.Commands.Sql.Location_Capabilities.Cmdlet
         /// <returns>The formatted string containing the server version information</returns>
         private string GetVersionInformation(ServerVersionCapabilityModel version)
         {
-            return string.Format("Version: {0} ({1})", version.ServerVersionName, version.Status);
+            return $"Version: {version.ServerVersionName} ({version.Status})";
         }
 
         /// <summary>
@@ -218,7 +218,7 @@ namespace Microsoft.Azure.Commands.Sql.Location_Capabilities.Cmdlet
         /// <returns>The formatted string containing the edition information</returns>
         private string GetEditionInformation(string baseString, EditionCapabilityModel edition)
         {
-            return string.Format("{0} -> Edition: {1} ({2})", baseString, edition.EditionName, edition.Status);
+            return $"{baseString} -> Edition: {edition.EditionName} ({edition.Status})";
         }
 
         /// <summary>
@@ -229,7 +229,7 @@ namespace Microsoft.Azure.Commands.Sql.Location_Capabilities.Cmdlet
         /// <returns>The formatted string containing the service objective information</returns>
         private string GetServiceObjectiveInformation(string baseString, ServiceObjectiveCapabilityModel objective)
         {
-            return string.Format("{0} -> Service Objective: {1} ({2})", baseString, objective.ServiceObjectiveName, objective.Status);
+            return $"{baseString} -> Service Objective: {objective.ServiceObjectiveName} ({objective.Status})";
         }
 
         /// <summary>
diff --git a/src/Sql/Sql/ManagedDatabase Backup/Cmdlet/AzureSqlManagedDatabaseBackupCmdletBase.cs b/src/Sql/Sql/ManagedDatabase Backup/Cmdlet/AzureSqlManagedDatabaseBackupCmdletBase.cs
index 1b7e341476..5559e14f69 100644
--- a/src/Sql/Sql/ManagedDatabase Backup/Cmdlet/AzureSqlManagedDatabaseBackupCmdletBase.cs	
+++ b/src/Sql/Sql/ManagedDatabase Backup/Cmdlet/AzureSqlManagedDatabaseBackupCmdletBase.cs	
@@ -129,9 +129,9 @@ namespace Microsoft.Azure.Commands.Sql.ManagedDatabaseBackup.Cmdlet
                 this.ResourceGroupName = InputObject.ResourceGroupName;
                 this.InstanceName = InputObject.ManagedInstanceName;
                 this.DatabaseName = InputObject.Name;
-                if (InputObject is AzureSqlDeletedManagedDatabaseBackupModel)
+                if (InputObject is AzureSqlDeletedManagedDatabaseBackupModel azureSqlDeletedManagedDatabaseBackupModel)
                 {
-                    this.DeletionDate = ((AzureSqlDeletedManagedDatabaseBackupModel)InputObject).DeletionDate;
+                    this.DeletionDate = azureSqlDeletedManagedDatabaseBackupModel.DeletionDate;
                 }
             }
             else if (!string.IsNullOrEmpty(ResourceId))
diff --git a/src/Sql/Sql/ManagedDatabase/Cmdlet/RestoreAzureSqlManagedDatabase.cs b/src/Sql/Sql/ManagedDatabase/Cmdlet/RestoreAzureSqlManagedDatabase.cs
index bc8c03336b..1fee667bcb 100644
--- a/src/Sql/Sql/ManagedDatabase/Cmdlet/RestoreAzureSqlManagedDatabase.cs
+++ b/src/Sql/Sql/ManagedDatabase/Cmdlet/RestoreAzureSqlManagedDatabase.cs
@@ -430,7 +430,7 @@ namespace Microsoft.Azure.Commands.Sql.ManagedDatabase.Cmdlet
             if (SubscriptionId != null && !Guid.TryParse(SubscriptionId, out Guid _))
             {
                 throw new PSArgumentException(
-                    string.Format("The provided subscription ID {0} is not a valid Guid.", SubscriptionId),
+                    $"The provided subscription ID {SubscriptionId} is not a valid Guid.",
                     "SubscriptionId");
             }
 
diff --git a/src/Sql/Sql/ManagedDatabase/Services/AzureSqlManagedDatabaseCommunicator.cs b/src/Sql/Sql/ManagedDatabase/Services/AzureSqlManagedDatabaseCommunicator.cs
index 627b3b9800..326917f916 100644
--- a/src/Sql/Sql/ManagedDatabase/Services/AzureSqlManagedDatabaseCommunicator.cs
+++ b/src/Sql/Sql/ManagedDatabase/Services/AzureSqlManagedDatabaseCommunicator.cs
@@ -118,7 +118,7 @@ namespace Microsoft.Azure.Commands.Sql.ManagedDatabase.Services
                 }
             };
 
-            GenericResource database = GetCurrentResourcesClient().Resources.CreateOrUpdate(resourceGroupName, "Microsoft.Sql", string.Format("managedInstances/{0}", managedInstanceName), "databases", managedDatabaseName, "2017-03-01-preview", resource);
+            GenericResource database = GetCurrentResourcesClient().Resources.CreateOrUpdate(resourceGroupName, "Microsoft.Sql", $"managedInstances/{managedInstanceName}", "databases", managedDatabaseName, "2017-03-01-preview", resource);
 
             if (database != null)
             {
diff --git a/src/Sql/Sql/ManagedInstance/Services/AzureSqlManagedInstanceAdapter.cs b/src/Sql/Sql/ManagedInstance/Services/AzureSqlManagedInstanceAdapter.cs
index 053b79a87c..800fac0170 100644
--- a/src/Sql/Sql/ManagedInstance/Services/AzureSqlManagedInstanceAdapter.cs
+++ b/src/Sql/Sql/ManagedInstance/Services/AzureSqlManagedInstanceAdapter.cs
@@ -136,8 +136,7 @@ namespace Microsoft.Azure.Commands.Sql.ManagedInstance.Adapter
                 TimezoneId = model.TimezoneId,
                 DnsZonePartner = model.DnsZonePartner,
                 InstancePoolId = model.InstancePoolName != null ?
-                    string.Format("/subscriptions/{0}/resourceGroups/{1}/providers/Microsoft.Sql/instancePools/{2}",
-                        Context.Subscription.Id, model.ResourceGroupName, model.InstancePoolName): null,
+                    $"/subscriptions/{Context.Subscription.Id}/resourceGroups/{model.ResourceGroupName}/providers/Microsoft.Sql/instancePools/{model.InstancePoolName}": null,
                 MinimalTlsVersion = model.MinimalTlsVersion,
                 StorageAccountType = MapExternalBackupStorageRedundancyToInternal(model.BackupStorageRedundancy),
                 MaintenanceConfigurationId = model.MaintenanceConfigurationId
diff --git a/src/Sql/Sql/ServerActiveDirectoryAdministrator/Services/AzureSqlServerActiveDirectoryAdministratorAdapter.cs b/src/Sql/Sql/ServerActiveDirectoryAdministrator/Services/AzureSqlServerActiveDirectoryAdministratorAdapter.cs
index c125770ac5..71ad2b1add 100644
--- a/src/Sql/Sql/ServerActiveDirectoryAdministrator/Services/AzureSqlServerActiveDirectoryAdministratorAdapter.cs
+++ b/src/Sql/Sql/ServerActiveDirectoryAdministrator/Services/AzureSqlServerActiveDirectoryAdministratorAdapter.cs
@@ -260,7 +260,7 @@ namespace Microsoft.Azure.Commands.Sql.ServerActiveDirectoryAdministrator.Servic
             var userList = ActiveDirectoryClient.FilterUsers(filter).Where(gr => string.Equals(gr.DisplayName, displayName, StringComparison.OrdinalIgnoreCase));
 
             // No user was found. Check if the display name is a UPN
-            if (userList == null || userList.Count() == 0)
+            if (userList == null || !userList.Any())
             {
                 // Check if the display name is the UPN
                 filter = new ADObjectFilterOptions()
@@ -274,7 +274,7 @@ namespace Microsoft.Azure.Commands.Sql.ServerActiveDirectoryAdministrator.Servic
             }
 
             // No user was found. Check if the display name is a guest user. 
-            if (userList == null || userList.Count() == 0)
+            if (userList == null || !userList.Any())
             {
                 // Check if the display name is the UPN
                 filter = new ADObjectFilterOptions()
@@ -288,7 +288,7 @@ namespace Microsoft.Azure.Commands.Sql.ServerActiveDirectoryAdministrator.Servic
             }
 
             // No user was found
-            if (userList == null || userList.Count() == 0)
+            if (userList == null || !userList.Any())
             {
                 throw new ArgumentException(string.Format(Microsoft.Azure.Commands.Sql.Properties.Resources.ADObjectNotFound, displayName));
             }
diff --git a/src/Sql/Sql/ServerDisasterRecoveryConfiguration/Cmdlet/NewAzureSqlServerDisasterRecoveryConfiguration.cs b/src/Sql/Sql/ServerDisasterRecoveryConfiguration/Cmdlet/NewAzureSqlServerDisasterRecoveryConfiguration.cs
index 0131a32d7e..b7fad4349e 100644
--- a/src/Sql/Sql/ServerDisasterRecoveryConfiguration/Cmdlet/NewAzureSqlServerDisasterRecoveryConfiguration.cs
+++ b/src/Sql/Sql/ServerDisasterRecoveryConfiguration/Cmdlet/NewAzureSqlServerDisasterRecoveryConfiguration.cs
@@ -125,8 +125,7 @@ namespace Microsoft.Azure.Commands.Sql.ServerDisasterRecoveryConfiguration.Cmdle
         /// <returns>The input entity</returns>
         protected override IEnumerable<AzureSqlServerDisasterRecoveryConfigurationModel> PersistChanges(IEnumerable<AzureSqlServerDisasterRecoveryConfigurationModel> entity)
         {
-            string partnerServerId = string.Format("/subscriptions/{0}/resourceGroups/{1}/providers/Microsoft.Sql/servers/{2}",
-                    DefaultContext.Subscription.Id, PartnerResourceGroupName, PartnerServerName);
+            string partnerServerId = $"/subscriptions/{DefaultContext.Subscription.Id}/resourceGroups/{PartnerResourceGroupName}/providers/Microsoft.Sql/servers/{PartnerServerName}";
 
             return new List<AzureSqlServerDisasterRecoveryConfigurationModel>() {
                 ModelAdapter.CreateServerDisasterRecoveryConfiguration(this.ResourceGroupName, this.ServerName, partnerServerId, entity.First())
diff --git a/src/Sql/Sql/Services/Util.cs b/src/Sql/Sql/Services/Util.cs
index 913a98cfcb..ea3e206795 100644
--- a/src/Sql/Sql/Services/Util.cs
+++ b/src/Sql/Sql/Services/Util.cs
@@ -87,9 +87,7 @@ namespace Microsoft.Azure.Commands.Sql.Services
             }
 
             var emailRegex =
-                new Regex(string.Format("{0}{1}",
-                    @"^(?("")("".+?(?<!\\)""@)|(([0-9a-z]((\.(?!\.))|[-!#\$%&'\*\+/=\?\^`\{\}\|~\w])*)(?<=[0-9a-z])@))",
-                    @"(?(\[)(\[(\d{1,3}\.){3}\d{1,3}\])|(([0-9a-z][-\w]*[0-9a-z]*\.)+[a-z0-9][\-a-z0-9]{0,22}[a-z0-9]))$"));
+                new Regex($"{@"^(?("")("".+?(?<!\\)""@)|(([0-9a-z]((\.(?!\.))|[-!#\$%&'\*\+/=\?\^`\{\}\|~\w])*)(?<=[0-9a-z])@))"}{@"(?(\[)(\[(\d{1,3}\.){3}\d{1,3}\])|(([0-9a-z][-\w]*[0-9a-z]*\.)+[a-z0-9][\-a-z0-9]{0,22}[a-z0-9]))$"}");
             return !emailAddresses.Any(e => !emailRegex.IsMatch(e.ToLower()));
         }
 
diff --git a/src/Sql/Sql/ThreatDetection/Services/SqlThreatDetectionAdapter.cs b/src/Sql/Sql/ThreatDetection/Services/SqlThreatDetectionAdapter.cs
index 90c587c33f..2ddebfdd1e 100644
--- a/src/Sql/Sql/ThreatDetection/Services/SqlThreatDetectionAdapter.cs
+++ b/src/Sql/Sql/ThreatDetection/Services/SqlThreatDetectionAdapter.cs
@@ -346,7 +346,7 @@ namespace Microsoft.Azure.Commands.Sql.ThreatDetection.Services
                 throw new Exception(string.Format(Properties.Resources.NoStorageAccountWhenConfiguringThreatDetectionPolicy));
             }
 
-            properties.StorageEndpoint = string.Format("https://{0}.blob.{1}", model.StorageAccountName, storageEndpointSuffix);
+            properties.StorageEndpoint = $"https://{model.StorageAccountName}.blob.{storageEndpointSuffix}";
             properties.StorageAccountAccessKey = AzureCommunicator.GetStorageKeys(model.StorageAccountName)[StorageKeyKind.Primary];
         }
     }
diff --git a/src/Sql/Sql/VulnerabilityAssessment/Services/VulnerabilityAssessmentEndpointsCommunicator.cs b/src/Sql/Sql/VulnerabilityAssessment/Services/VulnerabilityAssessmentEndpointsCommunicator.cs
index 8b65900281..0c2081b216 100644
--- a/src/Sql/Sql/VulnerabilityAssessment/Services/VulnerabilityAssessmentEndpointsCommunicator.cs
+++ b/src/Sql/Sql/VulnerabilityAssessment/Services/VulnerabilityAssessmentEndpointsCommunicator.cs
@@ -321,7 +321,7 @@ namespace Microsoft.Azure.Commands.Sql.VulnerabilityAssessment.Services
             return new StorageContainerInfo
             {
                 StorageAccountAccessKey = key,
-                StorageContainerPath = string.Format("{0}{1}", storageAccountBlobPrimaryEndpoints, containerName)
+                StorageContainerPath = $"{storageAccountBlobPrimaryEndpoints}{containerName}"
             };
         }
 
diff --git a/src/SqlVirtualMachine/SqlVirtualMachine/Common/AzureSqlVirtualMachineCmdletBase.cs b/src/SqlVirtualMachine/SqlVirtualMachine/Common/AzureSqlVirtualMachineCmdletBase.cs
index 3abf71f90b..0559bbc2e7 100644
--- a/src/SqlVirtualMachine/SqlVirtualMachine/Common/AzureSqlVirtualMachineCmdletBase.cs
+++ b/src/SqlVirtualMachine/SqlVirtualMachine/Common/AzureSqlVirtualMachineCmdletBase.cs
@@ -36,8 +36,7 @@ namespace Microsoft.Azure.Commands.SqlVirtualMachine.Common
         /// <returns></returns>
         protected virtual string GetResourceId(M model)
         {
-            var resource = model as IEnumerable<object>;
-            if (resource != null)
+            if (model is IEnumerable<object> resource)
             {
                 var resourceIdProperty = resource.GetType().GetProperty("ResourceId");
                 var resourceIdValue = resourceIdProperty != null ? resourceIdProperty.GetValue(resource) : null;
diff --git a/src/StackEdge/StackEdge/Common/Cmdlets/BandwidthSchedules/StackEdgeBandwidthScheduleNewCmdletBase.cs b/src/StackEdge/StackEdge/Common/Cmdlets/BandwidthSchedules/StackEdgeBandwidthScheduleNewCmdletBase.cs
index 6102a5c731..c19e55f39a 100644
--- a/src/StackEdge/StackEdge/Common/Cmdlets/BandwidthSchedules/StackEdgeBandwidthScheduleNewCmdletBase.cs
+++ b/src/StackEdge/StackEdge/Common/Cmdlets/BandwidthSchedules/StackEdgeBandwidthScheduleNewCmdletBase.cs
@@ -97,8 +97,7 @@ namespace Microsoft.Azure.PowerShell.Cmdlets.StackEdge.Common.Cmdlets.Bandwidth
 
         private string GetResourceNotFoundMessage()
         {
-            return string.Format("'{0}'{1}{2}'.",
-                HelpMessageBandwidthSchedule.ObjectName, Constants.ResourceAlreadyExists, this.Name);
+            return $"'{HelpMessageBandwidthSchedule.ObjectName}'{Constants.ResourceAlreadyExists}{this.Name}'.";
         }
 
         private bool DoesResourceExists()
@@ -148,8 +147,7 @@ namespace Microsoft.Azure.PowerShell.Cmdlets.StackEdge.Common.Cmdlets.Bandwidth
         public override void ExecuteCmdlet()
         {
             if (this.ShouldProcess(this.Name,
-                string.Format("Creating a new '{0}' in device '{1}' with name '{2}'.",
-                    HelpMessageBandwidthSchedule.ObjectName, this.DeviceName, this.Name)))
+                $"Creating a new '{HelpMessageBandwidthSchedule.ObjectName}' in device '{this.DeviceName}' with name '{this.Name}'."))
             {
                 DoesResourceExists();
                 var results = new List<PSStackEdgeBandWidthSchedule>
diff --git a/src/StackEdge/StackEdge/Common/Cmdlets/BandwidthSchedules/StackEdgeBandwidthScheduleRemoveCmdletBase.cs b/src/StackEdge/StackEdge/Common/Cmdlets/BandwidthSchedules/StackEdgeBandwidthScheduleRemoveCmdletBase.cs
index 6c4f6102dc..5673b4d701 100644
--- a/src/StackEdge/StackEdge/Common/Cmdlets/BandwidthSchedules/StackEdgeBandwidthScheduleRemoveCmdletBase.cs
+++ b/src/StackEdge/StackEdge/Common/Cmdlets/BandwidthSchedules/StackEdgeBandwidthScheduleRemoveCmdletBase.cs
@@ -109,8 +109,7 @@ namespace Microsoft.Azure.PowerShell.Cmdlets.StackEdge.Common.Cmdlets.Bandwidth
             }
 
             if (this.ShouldProcess(this.Name,
-                string.Format("Removing '{0}' in device '{1}' with name '{2}'.",
-                    HelpMessageBandwidthSchedule.ObjectName, this.DeviceName, this.Name)))
+                $"Removing '{HelpMessageBandwidthSchedule.ObjectName}' in device '{this.DeviceName}' with name '{this.Name}'."))
             {
                 Remove();
                 if (this.PassThru.IsPresent)
diff --git a/src/StackEdge/StackEdge/Common/Cmdlets/BandwidthSchedules/StackEdgeBandwidthScheduleSetCmdletBase.cs b/src/StackEdge/StackEdge/Common/Cmdlets/BandwidthSchedules/StackEdgeBandwidthScheduleSetCmdletBase.cs
index e09443089d..ea847cf612 100644
--- a/src/StackEdge/StackEdge/Common/Cmdlets/BandwidthSchedules/StackEdgeBandwidthScheduleSetCmdletBase.cs
+++ b/src/StackEdge/StackEdge/Common/Cmdlets/BandwidthSchedules/StackEdgeBandwidthScheduleSetCmdletBase.cs
@@ -227,8 +227,7 @@ namespace Microsoft.Azure.PowerShell.Cmdlets.StackEdge.Common.Cmdlets.Bandwidth
             }
 
             if (this.ShouldProcess(this.Name,
-                string.Format("Updating '{0}' in device '{1}' with name '{2}'.",
-                    HelpMessageBandwidthSchedule.ObjectName, this.DeviceName, this.Name)))
+                $"Updating '{HelpMessageBandwidthSchedule.ObjectName}' in device '{this.DeviceName}' with name '{this.Name}'."))
             {
                 var result = UpdateResourceModel();
                 WriteObject(result);
diff --git a/src/StackEdge/StackEdge/Common/Cmdlets/Devices/StackEdgeDeviceNewCmdletBase.cs b/src/StackEdge/StackEdge/Common/Cmdlets/Devices/StackEdgeDeviceNewCmdletBase.cs
index 5fc99b0966..a989db26ed 100644
--- a/src/StackEdge/StackEdge/Common/Cmdlets/Devices/StackEdgeDeviceNewCmdletBase.cs
+++ b/src/StackEdge/StackEdge/Common/Cmdlets/Devices/StackEdgeDeviceNewCmdletBase.cs
@@ -72,8 +72,7 @@ namespace Microsoft.Azure.PowerShell.Cmdlets.StackEdge.Common.Cmdlets.Devices
 
         private string GetResourceNotFoundMessage()
         {
-            return string.Format("'{0}'{1}{2}'.",
-                HelpMessageDevice.ObjectName, Constants.ResourceAlreadyExists, this.Name);
+            return $"'{HelpMessageDevice.ObjectName}'{Constants.ResourceAlreadyExists}{this.Name}'.";
         }
 
         private bool DoesResourceExists()
@@ -111,8 +110,7 @@ namespace Microsoft.Azure.PowerShell.Cmdlets.StackEdge.Common.Cmdlets.Devices
         public override void ExecuteCmdlet()
         {
             if (this.ShouldProcess(this.Name,
-                string.Format("Creating '{0}' with name '{1}'.",
-                    HelpMessageDevice.ObjectName, this.Name)))
+                $"Creating '{HelpMessageDevice.ObjectName}' with name '{this.Name}'."))
             {
                 DoesResourceExists();
                 var results = new List<PSStackEdgeDevice>
diff --git a/src/StackEdge/StackEdge/Common/Cmdlets/Devices/StackEdgeDeviceRemoveCmdletBase.cs b/src/StackEdge/StackEdge/Common/Cmdlets/Devices/StackEdgeDeviceRemoveCmdletBase.cs
index cbd957b37e..5c8b339e7d 100644
--- a/src/StackEdge/StackEdge/Common/Cmdlets/Devices/StackEdgeDeviceRemoveCmdletBase.cs
+++ b/src/StackEdge/StackEdge/Common/Cmdlets/Devices/StackEdgeDeviceRemoveCmdletBase.cs
@@ -95,8 +95,7 @@ namespace Microsoft.Azure.PowerShell.Cmdlets.StackEdge.Common.Cmdlets.Devices
             }
 
             if (this.ShouldProcess(this.Name,
-                string.Format("Removing '{0}' with name '{1}'.",
-                    HelpMessageDevice.ObjectName, this.Name)))
+                $"Removing '{HelpMessageDevice.ObjectName}' with name '{this.Name}'."))
             {
                 var removed = Remove();
                 if (this.PassThru.IsPresent)
diff --git a/src/StackEdge/StackEdge/Common/Cmdlets/EdgeStorageAccounts/StackEdgeStorageAccountNewCmdlet.cs b/src/StackEdge/StackEdge/Common/Cmdlets/EdgeStorageAccounts/StackEdgeStorageAccountNewCmdlet.cs
index 154ee5029a..f33bcb3f3a 100644
--- a/src/StackEdge/StackEdge/Common/Cmdlets/EdgeStorageAccounts/StackEdgeStorageAccountNewCmdlet.cs
+++ b/src/StackEdge/StackEdge/Common/Cmdlets/EdgeStorageAccounts/StackEdgeStorageAccountNewCmdlet.cs
@@ -82,8 +82,7 @@ namespace Microsoft.Azure.PowerShell.Cmdlets.StackEdge.Common.Cmdlets.EdgeStorag
 
         private string GetResourceAlreadyExistMessage()
         {
-            return string.Format("'{0}'{1}{2}'.",
-                HelpMessageEdgeStorageAccount.ObjectName, Constants.ResourceAlreadyExists, this.Name);
+            return $"'{HelpMessageEdgeStorageAccount.ObjectName}'{Constants.ResourceAlreadyExists}{this.Name}'.";
         }
 
         private bool DoesResourceExists()
@@ -130,8 +129,7 @@ namespace Microsoft.Azure.PowerShell.Cmdlets.StackEdge.Common.Cmdlets.EdgeStorag
         public override void ExecuteCmdlet()
         {
             if (this.ShouldProcess(this.Name,
-                string.Format("Creating '{0}' in device '{1}' with name '{2}'.",
-                    HelpMessageEdgeStorageAccount.ObjectName, this.DeviceName, this.Name)))
+                $"Creating '{HelpMessageEdgeStorageAccount.ObjectName}' in device '{this.DeviceName}' with name '{this.Name}'."))
             {
                 DoesResourceExists();
                 var results = new List<PSStackEdgeStorageAccount>()
diff --git a/src/StackEdge/StackEdge/Common/Cmdlets/EdgeStorageAccounts/StackEdgeStorageAccountRemoveCmdlet.cs b/src/StackEdge/StackEdge/Common/Cmdlets/EdgeStorageAccounts/StackEdgeStorageAccountRemoveCmdlet.cs
index 2381a4a01e..c11229a2c4 100644
--- a/src/StackEdge/StackEdge/Common/Cmdlets/EdgeStorageAccounts/StackEdgeStorageAccountRemoveCmdlet.cs
+++ b/src/StackEdge/StackEdge/Common/Cmdlets/EdgeStorageAccounts/StackEdgeStorageAccountRemoveCmdlet.cs
@@ -110,8 +110,7 @@ namespace Microsoft.Azure.PowerShell.Cmdlets.StackEdge.Common.Cmdlets.EdgeStorag
             }
 
             if (this.ShouldProcess(this.Name,
-                string.Format("Removing '{0}' in device '{1}' with name '{2}'.",
-                    HelpMessageEdgeStorageAccount.ObjectName, this.DeviceName, this.Name)))
+                $"Removing '{HelpMessageEdgeStorageAccount.ObjectName}' in device '{this.DeviceName}' with name '{this.Name}'."))
             {
                 var removed = Remove();
                 if (this.PassThru.IsPresent)
diff --git a/src/StackEdge/StackEdge/Common/Cmdlets/EdgeStorageContainers/StackEdgeStorageContainerNewCmdlet.cs b/src/StackEdge/StackEdge/Common/Cmdlets/EdgeStorageContainers/StackEdgeStorageContainerNewCmdlet.cs
index fb900582a2..c3d75cc2c7 100644
--- a/src/StackEdge/StackEdge/Common/Cmdlets/EdgeStorageContainers/StackEdgeStorageContainerNewCmdlet.cs
+++ b/src/StackEdge/StackEdge/Common/Cmdlets/EdgeStorageContainers/StackEdgeStorageContainerNewCmdlet.cs
@@ -87,8 +87,7 @@ namespace Microsoft.Azure.PowerShell.Cmdlets.StackEdge.Common.Cmdlets.EdgeStorag
 
         private string GetResourceAlreadyExistMessage()
         {
-            return string.Format("'{0}'{1}{2}'.",
-                HelpMessageEdgeStorageContainer.ObjectName, Constants.ResourceAlreadyExists, this.Name);
+            return $"'{HelpMessageEdgeStorageContainer.ObjectName}'{Constants.ResourceAlreadyExists}{this.Name}'.";
         }
 
         private bool DoesResourceExists()
@@ -133,8 +132,7 @@ namespace Microsoft.Azure.PowerShell.Cmdlets.StackEdge.Common.Cmdlets.EdgeStorag
         public override void ExecuteCmdlet()
         {
             if (this.ShouldProcess(this.Name,
-                string.Format("Creating '{0}' in device '{1}' with name '{2}'.",
-                    HelpMessageEdgeStorageContainer.ObjectName, this.DeviceName, this.Name)))
+                $"Creating '{HelpMessageEdgeStorageContainer.ObjectName}' in device '{this.DeviceName}' with name '{this.Name}'."))
             {
                 DoesResourceExists();
                 var results = new List<PSStackEdgeStorageContainer>()
diff --git a/src/StackEdge/StackEdge/Common/Cmdlets/EdgeStorageContainers/StackEdgeStorageContainerRemoveCmdlet.cs b/src/StackEdge/StackEdge/Common/Cmdlets/EdgeStorageContainers/StackEdgeStorageContainerRemoveCmdlet.cs
index c73a3f88dc..cf9571537e 100644
--- a/src/StackEdge/StackEdge/Common/Cmdlets/EdgeStorageContainers/StackEdgeStorageContainerRemoveCmdlet.cs
+++ b/src/StackEdge/StackEdge/Common/Cmdlets/EdgeStorageContainers/StackEdgeStorageContainerRemoveCmdlet.cs
@@ -119,8 +119,7 @@ namespace Microsoft.Azure.PowerShell.Cmdlets.StackEdge.Common.Cmdlets.EdgeStorag
             }
 
             if (this.ShouldProcess(this.Name,
-                string.Format("Removing '{0}' in device '{1}' with name '{2}'.",
-                    HelpMessageEdgeStorageContainer.ObjectName, this.DeviceName, this.Name)))
+                $"Removing '{HelpMessageEdgeStorageContainer.ObjectName}' in device '{this.DeviceName}' with name '{this.Name}'."))
             {
                 var removed = Remove();
                 if (this.PassThru.IsPresent)
diff --git a/src/StackEdge/StackEdge/Common/Cmdlets/Orders/StackEdgeOrderNewCmdlet.cs b/src/StackEdge/StackEdge/Common/Cmdlets/Orders/StackEdgeOrderNewCmdlet.cs
index 265f02d03e..c0e607c048 100644
--- a/src/StackEdge/StackEdge/Common/Cmdlets/Orders/StackEdgeOrderNewCmdlet.cs
+++ b/src/StackEdge/StackEdge/Common/Cmdlets/Orders/StackEdgeOrderNewCmdlet.cs
@@ -121,8 +121,7 @@ namespace Microsoft.Azure.PowerShell.Cmdlets.StackEdge.Common.Cmdlets.Orders
 
         private string GetResourceAlreadyExistMessage()
         {
-            return string.Format("'{0}'{1}{2}'.",
-                HelpMessageOrder.ObjectName, Constants.ResourceAlreadyExists, this.DeviceName);
+            return $"'{HelpMessageOrder.ObjectName}'{Constants.ResourceAlreadyExists}{this.DeviceName}'.";
         }
 
         private bool DoesResourceExists()
@@ -170,8 +169,7 @@ namespace Microsoft.Azure.PowerShell.Cmdlets.StackEdge.Common.Cmdlets.Orders
         public override void ExecuteCmdlet()
         {
             if (this.ShouldProcess(this.DeviceName,
-                string.Format("Creating '{0}' with name '{1}'.",
-                    HelpMessageOrder.ObjectName, this.DeviceName)))
+                $"Creating '{HelpMessageOrder.ObjectName}' with name '{this.DeviceName}'."))
             {
                 DoesResourceExists();
                 var results = new List<PSStackEdgeOrder>
diff --git a/src/StackEdge/StackEdge/Common/Cmdlets/Orders/StackEdgeOrderRemoveCmdlet.cs b/src/StackEdge/StackEdge/Common/Cmdlets/Orders/StackEdgeOrderRemoveCmdlet.cs
index b1441f0c6d..4886e9fbb8 100644
--- a/src/StackEdge/StackEdge/Common/Cmdlets/Orders/StackEdgeOrderRemoveCmdlet.cs
+++ b/src/StackEdge/StackEdge/Common/Cmdlets/Orders/StackEdgeOrderRemoveCmdlet.cs
@@ -95,8 +95,7 @@ namespace Microsoft.Azure.PowerShell.Cmdlets.StackEdge.Common.Cmdlets.Orders
             }
 
             if (this.ShouldProcess(this.DeviceName,
-                string.Format("Removing '{0}' for device '{1}'.",
-                    HelpMessageOrder.ObjectName, this.DeviceName)))
+                $"Removing '{HelpMessageOrder.ObjectName}' for device '{this.DeviceName}'."))
             {
                 var removed = Remove();
                 if (this.PassThru.IsPresent)
diff --git a/src/StackEdge/StackEdge/Common/Cmdlets/Roles/StackEdgeRoleNewCmdletBase.cs b/src/StackEdge/StackEdge/Common/Cmdlets/Roles/StackEdgeRoleNewCmdletBase.cs
index 6c3bdcd810..652969e5eb 100644
--- a/src/StackEdge/StackEdge/Common/Cmdlets/Roles/StackEdgeRoleNewCmdletBase.cs
+++ b/src/StackEdge/StackEdge/Common/Cmdlets/Roles/StackEdgeRoleNewCmdletBase.cs
@@ -155,8 +155,7 @@ namespace Microsoft.Azure.PowerShell.Cmdlets.StackEdge.Common.Cmdlets.Roles
 
         private string GetResourceNotFoundMessage()
         {
-            return string.Format("'{0}'{1}{2}'.",
-                HelpMessageRoles.ObjectName, Constants.ResourceAlreadyExists, this.Name);
+            return $"'{HelpMessageRoles.ObjectName}'{Constants.ResourceAlreadyExists}{this.Name}'.";
         }
 
         private bool DoesResourceExists()
@@ -181,8 +180,7 @@ namespace Microsoft.Azure.PowerShell.Cmdlets.StackEdge.Common.Cmdlets.Roles
 
         private string GetConnectionString(string hostName, string deviceId, string sharedAccessKey)
         {
-            return string.Format("HostName={0};DeviceId={1};SharedAccessKey={2}",
-                hostName, deviceId, sharedAccessKey);
+            return $"HostName={hostName};DeviceId={deviceId};SharedAccessKey={sharedAccessKey}";
         }
 
         public static IoTRole GetIoTRoleObject(
@@ -329,8 +327,7 @@ namespace Microsoft.Azure.PowerShell.Cmdlets.StackEdge.Common.Cmdlets.Roles
 
 
             if (this.ShouldProcess(this.Name,
-                string.Format("Creating '{0}' in device '{1}' with name '{2}'.",
-                    HelpMessageRoles.ObjectName, this.DeviceName, this.Name)))
+                $"Creating '{HelpMessageRoles.ObjectName}' in device '{this.DeviceName}' with name '{this.Name}'."))
             {
                 DoesResourceExists();
                 var results = new List<PSStackEdgeRole>()
diff --git a/src/StackEdge/StackEdge/Common/Cmdlets/Roles/StackEdgeRoleRemoveCmdletBase.cs b/src/StackEdge/StackEdge/Common/Cmdlets/Roles/StackEdgeRoleRemoveCmdletBase.cs
index 4ed2a0428e..8a0fded6f8 100644
--- a/src/StackEdge/StackEdge/Common/Cmdlets/Roles/StackEdgeRoleRemoveCmdletBase.cs
+++ b/src/StackEdge/StackEdge/Common/Cmdlets/Roles/StackEdgeRoleRemoveCmdletBase.cs
@@ -106,8 +106,7 @@ namespace Microsoft.Azure.PowerShell.Cmdlets.StackEdge.Common.Cmdlets.Roles
             }
 
             if (this.ShouldProcess(this.Name,
-                string.Format("Removing '{0}' in device '{1}' with name '{2}'.",
-                    HelpMessageRoles.ObjectName, this.DeviceName, this.Name)))
+                $"Removing '{HelpMessageRoles.ObjectName}' in device '{this.DeviceName}' with name '{this.Name}'."))
             {
                 var removed = Remove();
                 if (this.PassThru.IsPresent)
diff --git a/src/StackEdge/StackEdge/Common/Cmdlets/Shares/StackEdgeShareInvokeCmdlet.cs b/src/StackEdge/StackEdge/Common/Cmdlets/Shares/StackEdgeShareInvokeCmdlet.cs
index 51917d4a2f..f951899b97 100644
--- a/src/StackEdge/StackEdge/Common/Cmdlets/Shares/StackEdgeShareInvokeCmdlet.cs
+++ b/src/StackEdge/StackEdge/Common/Cmdlets/Shares/StackEdgeShareInvokeCmdlet.cs
@@ -111,8 +111,7 @@ namespace Microsoft.Azure.PowerShell.Cmdlets.StackEdge.Common.Cmdlets.Shares
             }
 
             if (this.ShouldProcess(this.Name,
-                string.Format("Invoking '{0}' in device '{1}' with name '{2}'.",
-                    HelpMessageShare.ObjectName, this.DeviceName, this.Name)))
+                $"Invoking '{HelpMessageShare.ObjectName}' in device '{this.DeviceName}' with name '{this.Name}'."))
             {
                 var refreshed = ShareRefreshData();
                 if (this.PassThru.IsPresent)
diff --git a/src/StackEdge/StackEdge/Common/Cmdlets/Shares/StackEdgeShareNewCmdletBase.cs b/src/StackEdge/StackEdge/Common/Cmdlets/Shares/StackEdgeShareNewCmdletBase.cs
index 65f8c375b0..ccc8ab26fa 100644
--- a/src/StackEdge/StackEdge/Common/Cmdlets/Shares/StackEdgeShareNewCmdletBase.cs
+++ b/src/StackEdge/StackEdge/Common/Cmdlets/Shares/StackEdgeShareNewCmdletBase.cs
@@ -155,8 +155,7 @@ namespace Microsoft.Azure.PowerShell.Cmdlets.StackEdge.Common.Cmdlets.Shares
 
         private string GetResourceAlreadyExistMessage()
         {
-            return string.Format("'{0}'{1}{2}'.",
-                HelpMessageShare.ObjectName, Constants.ResourceAlreadyExists, this.Name);
+            return $"'{HelpMessageShare.ObjectName}'{Constants.ResourceAlreadyExists}{this.Name}'.";
         }
 
         private bool DoesResourceExists()
@@ -262,8 +261,7 @@ namespace Microsoft.Azure.PowerShell.Cmdlets.StackEdge.Common.Cmdlets.Shares
             }
 
             if (this.ShouldProcess(this.Name,
-                string.Format("Creating '{0}' in device '{1}' with name '{2}'.",
-                    HelpMessageShare.ObjectName, this.DeviceName, this.Name)))
+                $"Creating '{HelpMessageShare.ObjectName}' in device '{this.DeviceName}' with name '{this.Name}'."))
             {
                 DoesResourceExists();
                 var results = new List<PSStackEdgeShare>()
diff --git a/src/StackEdge/StackEdge/Common/Cmdlets/Shares/StackEdgeShareRemoveCmdletBase.cs b/src/StackEdge/StackEdge/Common/Cmdlets/Shares/StackEdgeShareRemoveCmdletBase.cs
index 48b62233d4..8e51929e32 100644
--- a/src/StackEdge/StackEdge/Common/Cmdlets/Shares/StackEdgeShareRemoveCmdletBase.cs
+++ b/src/StackEdge/StackEdge/Common/Cmdlets/Shares/StackEdgeShareRemoveCmdletBase.cs
@@ -110,8 +110,7 @@ namespace Microsoft.Azure.PowerShell.Cmdlets.StackEdge.Common.Cmdlets.Shares
             }
 
             if (this.ShouldProcess(this.Name,
-                string.Format("Removing '{0}' in device '{1}' with name '{2}'.",
-                    HelpMessageShare.ObjectName, this.DeviceName, this.Name)))
+                $"Removing '{HelpMessageShare.ObjectName}' in device '{this.DeviceName}' with name '{this.Name}'."))
             {
                 var removed = Remove();
                 if (this.PassThru.IsPresent)
diff --git a/src/StackEdge/StackEdge/Common/Cmdlets/Shares/StackEdgeShareSetCmdletBase.cs b/src/StackEdge/StackEdge/Common/Cmdlets/Shares/StackEdgeShareSetCmdletBase.cs
index 6bf27c3af7..ef81147a28 100644
--- a/src/StackEdge/StackEdge/Common/Cmdlets/Shares/StackEdgeShareSetCmdletBase.cs
+++ b/src/StackEdge/StackEdge/Common/Cmdlets/Shares/StackEdgeShareSetCmdletBase.cs
@@ -205,8 +205,7 @@ namespace Microsoft.Azure.PowerShell.Cmdlets.StackEdge.Common.Cmdlets.Shares
             }
 
             if (this.ShouldProcess(this.Name,
-                string.Format("Updating '{0}' in device '{1}' with name '{2}'.",
-                    HelpMessageShare.ObjectName, this.DeviceName, this.Name)))
+                $"Updating '{HelpMessageShare.ObjectName}' in device '{this.DeviceName}' with name '{this.Name}'."))
             {
                 share = this.StackEdgeManagementClient.Shares.CreateOrUpdate(
                     this.DeviceName,
diff --git a/src/StackEdge/StackEdge/Common/Cmdlets/StorageAccountCredentials/StackEdgeStorageAccountCredentialNewCmdletBase.cs b/src/StackEdge/StackEdge/Common/Cmdlets/StorageAccountCredentials/StackEdgeStorageAccountCredentialNewCmdletBase.cs
index 4156b8f6e1..783cbbb9a0 100644
--- a/src/StackEdge/StackEdge/Common/Cmdlets/StorageAccountCredentials/StackEdgeStorageAccountCredentialNewCmdletBase.cs
+++ b/src/StackEdge/StackEdge/Common/Cmdlets/StorageAccountCredentials/StackEdgeStorageAccountCredentialNewCmdletBase.cs
@@ -93,8 +93,7 @@ namespace Microsoft.Azure.PowerShell.Cmdlets.StackEdge.Common.Cmdlets.StorageAcc
 
         private string GetResourceNotFoundMessage()
         {
-            return string.Format("'{0}'{1}{2}'.",
-                HelpMessageStorageAccountCredential.ObjectName, Constants.ResourceAlreadyExists, this.Name);
+            return $"'{HelpMessageStorageAccountCredential.ObjectName}'{Constants.ResourceAlreadyExists}{this.Name}'.";
         }
 
         private bool DoesResourceExists()
@@ -161,8 +160,7 @@ namespace Microsoft.Azure.PowerShell.Cmdlets.StackEdge.Common.Cmdlets.StorageAcc
         public override void ExecuteCmdlet()
         {
             if (this.ShouldProcess(this.Name,
-                string.Format("Creating '{0}' in device '{1}' with name '{2}'.",
-                    HelpMessageStorageAccountCredential.ObjectName, this.DeviceName, this.Name)))
+                $"Creating '{HelpMessageStorageAccountCredential.ObjectName}' in device '{this.DeviceName}' with name '{this.Name}'."))
             {
                 DoesResourceExists();
                 var results = new List<PSStackEdgeStorageAccountCredential>()
diff --git a/src/StackEdge/StackEdge/Common/Cmdlets/StorageAccountCredentials/StackEdgeStorageAccountCredentialRemoveCmdletBase.cs b/src/StackEdge/StackEdge/Common/Cmdlets/StorageAccountCredentials/StackEdgeStorageAccountCredentialRemoveCmdletBase.cs
index 4c0f846bcb..3877ccd871 100644
--- a/src/StackEdge/StackEdge/Common/Cmdlets/StorageAccountCredentials/StackEdgeStorageAccountCredentialRemoveCmdletBase.cs
+++ b/src/StackEdge/StackEdge/Common/Cmdlets/StorageAccountCredentials/StackEdgeStorageAccountCredentialRemoveCmdletBase.cs
@@ -111,8 +111,7 @@ namespace Microsoft.Azure.PowerShell.Cmdlets.StackEdge.Common.Cmdlets.StorageAcc
             }
 
             if (this.ShouldProcess(this.Name,
-                string.Format("Removing '{0}' in device '{1}' with name '{2}'.",
-                    HelpMessageStorageAccountCredential.ObjectName, this.DeviceName, this.Name)))
+                $"Removing '{HelpMessageStorageAccountCredential.ObjectName}' in device '{this.DeviceName}' with name '{this.Name}'."))
             {
                 var removed = Remove();
                 if (this.PassThru.IsPresent)
diff --git a/src/StackEdge/StackEdge/Common/Cmdlets/Triggers/StackEdgeTriggerNewCmdlet.cs b/src/StackEdge/StackEdge/Common/Cmdlets/Triggers/StackEdgeTriggerNewCmdlet.cs
index 9960e37afb..33b8ce6393 100644
--- a/src/StackEdge/StackEdge/Common/Cmdlets/Triggers/StackEdgeTriggerNewCmdlet.cs
+++ b/src/StackEdge/StackEdge/Common/Cmdlets/Triggers/StackEdgeTriggerNewCmdlet.cs
@@ -173,8 +173,7 @@ namespace Microsoft.Azure.PowerShell.Cmdlets.StackEdge.Common.Cmdlets.Triggers
 
         private string GetResourceFoundMessage()
         {
-            return string.Format("'{0}'{1}{2}'.",
-                HelpMessageTrigger.ObjectName, Constants.ResourceAlreadyExists, this.Name);
+            return $"'{HelpMessageTrigger.ObjectName}'{Constants.ResourceAlreadyExists}{this.Name}'.";
         }
 
         private bool DoesResourceExists()
@@ -234,8 +233,7 @@ namespace Microsoft.Azure.PowerShell.Cmdlets.StackEdge.Common.Cmdlets.Triggers
             }
 
             if (this.ShouldProcess(this.Name,
-                string.Format("Creating '{0}' in device '{1}' with name '{2}'.",
-                    HelpMessageTrigger.ObjectName, this.DeviceName, this.Name)))
+                $"Creating '{HelpMessageTrigger.ObjectName}' in device '{this.DeviceName}' with name '{this.Name}'."))
             {
                 DoesResourceExists();
                 var results = new List<PSStackEdgeTrigger>()
diff --git a/src/StackEdge/StackEdge/Common/Cmdlets/Triggers/StackEdgeTriggerRemoveCmdlet.cs b/src/StackEdge/StackEdge/Common/Cmdlets/Triggers/StackEdgeTriggerRemoveCmdlet.cs
index b6edeae74e..7a27df9811 100644
--- a/src/StackEdge/StackEdge/Common/Cmdlets/Triggers/StackEdgeTriggerRemoveCmdlet.cs
+++ b/src/StackEdge/StackEdge/Common/Cmdlets/Triggers/StackEdgeTriggerRemoveCmdlet.cs
@@ -111,8 +111,7 @@ namespace Microsoft.Azure.PowerShell.Cmdlets.StackEdge.Common.Cmdlets.Triggers
             }
 
             if (this.ShouldProcess(this.Name,
-                string.Format("Removing '{0}' in device '{1}' with name '{2}'.",
-                    HelpMessageTrigger.ObjectName, this.DeviceName, this.Name)))
+                $"Removing '{HelpMessageTrigger.ObjectName}' in device '{this.DeviceName}' with name '{this.Name}'."))
             {
                 var removed = Remove();
                 if (this.PassThru.IsPresent)
diff --git a/src/StackEdge/StackEdge/Common/Cmdlets/Users/StackEdgeUserNewCmdletBase.cs b/src/StackEdge/StackEdge/Common/Cmdlets/Users/StackEdgeUserNewCmdletBase.cs
index 6b29433118..695b0b99a0 100644
--- a/src/StackEdge/StackEdge/Common/Cmdlets/Users/StackEdgeUserNewCmdletBase.cs
+++ b/src/StackEdge/StackEdge/Common/Cmdlets/Users/StackEdgeUserNewCmdletBase.cs
@@ -95,8 +95,7 @@ namespace Microsoft.Azure.PowerShell.Cmdlets.StackEdge.Common.Cmdlets.Users
 
         private string GetResourceAlreadyExistMessage()
         {
-            return string.Format("'{0}'{1}{2}'.",
-                HelpMessageUsers.ObjectName, Constants.ResourceAlreadyExists, this.Name);
+            return $"'{HelpMessageUsers.ObjectName}'{Constants.ResourceAlreadyExists}{this.Name}'.";
         }
 
         private bool DoesResourceExists()
@@ -161,8 +160,7 @@ namespace Microsoft.Azure.PowerShell.Cmdlets.StackEdge.Common.Cmdlets.Users
         public override void ExecuteCmdlet()
         {
             if (this.ShouldProcess(this.Name,
-                string.Format("Removing '{0}' in device '{1}' with name '{2}'.",
-                    HelpMessageUsers.ObjectName, this.DeviceName, this.Name)))
+                $"Removing '{HelpMessageUsers.ObjectName}' in device '{this.DeviceName}' with name '{this.Name}'."))
             {
                 DoesResourceExists();
 
diff --git a/src/StackEdge/StackEdge/Common/Cmdlets/Users/StackEdgeUserRemoveCmdletBase.cs b/src/StackEdge/StackEdge/Common/Cmdlets/Users/StackEdgeUserRemoveCmdletBase.cs
index c904b2b0e0..7ed10ad2b5 100644
--- a/src/StackEdge/StackEdge/Common/Cmdlets/Users/StackEdgeUserRemoveCmdletBase.cs
+++ b/src/StackEdge/StackEdge/Common/Cmdlets/Users/StackEdgeUserRemoveCmdletBase.cs
@@ -109,8 +109,7 @@ namespace Microsoft.Azure.PowerShell.Cmdlets.StackEdge.Common.Cmdlets.Users
             }
 
             if (this.ShouldProcess(this.Name,
-                string.Format("Removing '{0}' in device '{1}' with name '{2}'.",
-                    HelpMessageUsers.ObjectName, this.DeviceName, this.Name)))
+                $"Removing '{HelpMessageUsers.ObjectName}' in device '{this.DeviceName}' with name '{this.Name}'."))
             {
                 var removed = Remove();
                 if (this.PassThru.IsPresent)
diff --git a/src/StackEdge/StackEdge/Common/Cmdlets/Users/StackEdgeUserSetCmdletBase.cs b/src/StackEdge/StackEdge/Common/Cmdlets/Users/StackEdgeUserSetCmdletBase.cs
index 3aa4b99eca..183d6429e4 100644
--- a/src/StackEdge/StackEdge/Common/Cmdlets/Users/StackEdgeUserSetCmdletBase.cs
+++ b/src/StackEdge/StackEdge/Common/Cmdlets/Users/StackEdgeUserSetCmdletBase.cs
@@ -144,8 +144,7 @@ namespace Microsoft.Azure.PowerShell.Cmdlets.StackEdge.Common.Cmdlets.Users
             }
 
             if (this.ShouldProcess(this.Name,
-                string.Format("Updating '{0}' in device '{1}' with name '{2}'.",
-                    HelpMessageUsers.ObjectName, this.DeviceName, this.Name)))
+                $"Updating '{HelpMessageUsers.ObjectName}' in device '{this.DeviceName}' with name '{this.Name}'."))
             {
                 var results = new List<PSStackEdgeUser>()
                 {
diff --git a/src/Storage/Storage.Management/Blob/LockAzureStorageContainerImmutabilityPolicy.cs b/src/Storage/Storage.Management/Blob/LockAzureStorageContainerImmutabilityPolicy.cs
index eb8ef0b632..e21844cca3 100644
--- a/src/Storage/Storage.Management/Blob/LockAzureStorageContainerImmutabilityPolicy.cs
+++ b/src/Storage/Storage.Management/Blob/LockAzureStorageContainerImmutabilityPolicy.cs
@@ -146,7 +146,7 @@ namespace Microsoft.Azure.Commands.Management.Storage
                         break;
                 }
 
-                if (Force || ShouldContinue(string.Format("Lock ImmutabilityPolicy in container '{0}' with Etag {1}", this.ContainerName, this.Etag), ""))
+                if (Force || ShouldContinue($"Lock ImmutabilityPolicy in container '{this.ContainerName}' with Etag {this.Etag}", ""))
                 {
                     ImmutabilityPolicy policy = this.StorageClient.BlobContainers.LockImmutabilityPolicy(
                                                     this.ResourceGroupName,
diff --git a/src/Storage/Storage.Management/Blob/RemoveAzureStorageContainer.cs b/src/Storage/Storage.Management/Blob/RemoveAzureStorageContainer.cs
index 3afbfb98ea..15413b7398 100644
--- a/src/Storage/Storage.Management/Blob/RemoveAzureStorageContainer.cs
+++ b/src/Storage/Storage.Management/Blob/RemoveAzureStorageContainer.cs
@@ -115,7 +115,7 @@ namespace Microsoft.Azure.Commands.Management.Storage
                     default:
                         break;
                 }
-                if (Force.IsPresent || ShouldContinue(String.Format("Remove container and all blobs in it: {0}", this.Name), ""))
+                if (Force.IsPresent || ShouldContinue($"Remove container and all blobs in it: {this.Name}", ""))
                 {
                     this.StorageClient.BlobContainers.Delete(
                        this.ResourceGroupName,
diff --git a/src/Storage/Storage.Management/File/RemoveAzureStorageShare.cs b/src/Storage/Storage.Management/File/RemoveAzureStorageShare.cs
index f6dc280908..4ec44cfec7 100644
--- a/src/Storage/Storage.Management/File/RemoveAzureStorageShare.cs
+++ b/src/Storage/Storage.Management/File/RemoveAzureStorageShare.cs
@@ -128,7 +128,7 @@ namespace Microsoft.Azure.Commands.Management.Storage
                     default:
                         break;
                 }
-                if (Force.IsPresent || ShouldContinue(String.Format("Remove Share and all files in it: {0}", this.Name), ""))
+                if (Force.IsPresent || ShouldContinue($"Remove Share and all files in it: {this.Name}", ""))
                 {
                     this.StorageClient.FileShares.Delete(
                        this.ResourceGroupName,
diff --git a/src/Storage/Storage.Management/File/RestoreAzureStorageShare.cs b/src/Storage/Storage.Management/File/RestoreAzureStorageShare.cs
index a0f9ce0631..a72fd83e9d 100644
--- a/src/Storage/Storage.Management/File/RestoreAzureStorageShare.cs
+++ b/src/Storage/Storage.Management/File/RestoreAzureStorageShare.cs
@@ -107,7 +107,7 @@ namespace Microsoft.Azure.Commands.Management.Storage
                 case ShareObjectParameterSet:
                     if(InputObject.Deleted != true)
                     {
-                        throw new ArithmeticException(string.Format("The input share {0} is not deleted, so can't restore.", this.InputObject.Name));
+                        throw new ArithmeticException($"The input share {this.InputObject.Name} is not deleted, so can't restore.");
                     }
                     this.ResourceGroupName = InputObject.ResourceGroupName;
                     this.StorageAccountName = InputObject.StorageAccountName;
diff --git a/src/Storage/Storage.Management/StorageAccount/AddAzureStorageAccountNetworkRule.cs b/src/Storage/Storage.Management/StorageAccount/AddAzureStorageAccountNetworkRule.cs
index 44712b0311..d03bd2b1be 100644
--- a/src/Storage/Storage.Management/StorageAccount/AddAzureStorageAccountNetworkRule.cs
+++ b/src/Storage/Storage.Management/StorageAccount/AddAzureStorageAccountNetworkRule.cs
@@ -156,7 +156,7 @@ namespace Microsoft.Azure.Commands.Management.Storage
                                 if (originRule.VirtualNetworkResourceId.Equals(s, System.StringComparison.InvariantCultureIgnoreCase))
                                 {
                                     ruleExist = true;
-                                    WriteDebug(string.Format("Skip add VirtualNetworkRule as it already exist: {0}", s));
+                                    WriteDebug($"Skip add VirtualNetworkRule as it already exist: {s}");
                                     break;
                                 }
                             }
@@ -179,7 +179,7 @@ namespace Microsoft.Azure.Commands.Management.Storage
                                 if (originRule.IPAddressOrRange.Equals(s, System.StringComparison.InvariantCultureIgnoreCase))
                                 {
                                     ruleExist = true;
-                                    WriteDebug(string.Format("Skip add IPAddressOrRange as it already exist: {0}", s));
+                                    WriteDebug($"Skip add IPAddressOrRange as it already exist: {s}");
                                     break;
                                 }
                             }
@@ -203,7 +203,7 @@ namespace Microsoft.Azure.Commands.Management.Storage
                             && originRule.ResourceId.Equals(this.ResourceId, System.StringComparison.InvariantCultureIgnoreCase))
                             {
                                 ResourceAccessruleExist = true;
-                                WriteDebug(string.Format("Skip add ResourceAccessRule as it already exist, TenantId: {0}, ResourceId: {1}", this.TenantId, this.ResourceId));
+                                WriteDebug($"Skip add ResourceAccessRule as it already exist, TenantId: {this.TenantId}, ResourceId: {this.ResourceId}");
                                 break;
                             }
                         }
@@ -225,7 +225,7 @@ namespace Microsoft.Azure.Commands.Management.Storage
                                 if (originRule.VirtualNetworkResourceId.Equals(rule.VirtualNetworkResourceId, System.StringComparison.InvariantCultureIgnoreCase))
                                 {
                                     ruleExist = true;
-                                    WriteDebug(string.Format("Skip add IPAddressOrRange as it already exist: {0}", rule.VirtualNetworkResourceId));
+                                    WriteDebug($"Skip add IPAddressOrRange as it already exist: {rule.VirtualNetworkResourceId}");
                                     break;
                                 }
                             }
@@ -250,7 +250,7 @@ namespace Microsoft.Azure.Commands.Management.Storage
                                 && originRule.ResourceId.Equals(rule.ResourceId, System.StringComparison.InvariantCultureIgnoreCase))
                                 {
                                     ruleExist = true;
-                                    WriteDebug(string.Format("Skip add ResourceAccessRule as it already exist, TenantId: {0}, ResourceId: {1}", rule.TenantId, rule.ResourceId));
+                                    WriteDebug($"Skip add ResourceAccessRule as it already exist, TenantId: {rule.TenantId}, ResourceId: {rule.ResourceId}");
                                     break;
                                 }
                             }
@@ -273,7 +273,7 @@ namespace Microsoft.Azure.Commands.Management.Storage
                                 if (originRule.IPAddressOrRange.Equals(rule.IPAddressOrRange, System.StringComparison.InvariantCultureIgnoreCase))
                                 {
                                     ruleExist = true;
-                                    WriteDebug(string.Format("Skip add IPAddressOrRange as it already exist: {0}", rule.IPAddressOrRange));
+                                    WriteDebug($"Skip add IPAddressOrRange as it already exist: {rule.IPAddressOrRange}");
                                     break;
                                 }
                             }
diff --git a/src/Storage/Storage.Management/StorageAccount/RemoveAzureStorageAccount.cs b/src/Storage/Storage.Management/StorageAccount/RemoveAzureStorageAccount.cs
index d3302b8c36..b168ed42c7 100644
--- a/src/Storage/Storage.Management/StorageAccount/RemoveAzureStorageAccount.cs
+++ b/src/Storage/Storage.Management/StorageAccount/RemoveAzureStorageAccount.cs
@@ -54,7 +54,7 @@ namespace Microsoft.Azure.Commands.Management.Storage
 
             if (ShouldProcess(this.Name, "Remove Storage Account"))
             {
-                if (this.Force || ShouldContinue(string.Format("Remove Storage Account '{0}' and all content in it", this.Name), ""))
+                if (this.Force || ShouldContinue($"Remove Storage Account '{this.Name}' and all content in it", ""))
                 {
                     this.StorageClient.StorageAccounts.Delete(
                     this.ResourceGroupName,
diff --git a/src/Storage/Storage.Management/StorageAccount/RemoveAzureStorageAccountNetworkRule.cs b/src/Storage/Storage.Management/StorageAccount/RemoveAzureStorageAccountNetworkRule.cs
index ee4956c43c..4c347059e7 100644
--- a/src/Storage/Storage.Management/StorageAccount/RemoveAzureStorageAccountNetworkRule.cs
+++ b/src/Storage/Storage.Management/StorageAccount/RemoveAzureStorageAccountNetworkRule.cs
@@ -151,7 +151,7 @@ namespace Microsoft.Azure.Commands.Management.Storage
                         {
                             VirtualNetworkRule rule = new VirtualNetworkRule(s);
                             if (!RemoveNetworkRule(storageACL.VirtualNetworkRules, rule))
-                                throw new ArgumentOutOfRangeException("VirtualNetworkResourceId", String.Format("Can't remove VirtualNetworkRule with specific ResourceId since not exist: {0}", rule.VirtualNetworkResourceId));
+                                throw new ArgumentOutOfRangeException("VirtualNetworkResourceId", $"Can't remove VirtualNetworkRule with specific ResourceId since not exist: {rule.VirtualNetworkResourceId}");
                         }
                         break;
                     case IpRuleStringParameterSet:
@@ -161,7 +161,7 @@ namespace Microsoft.Azure.Commands.Management.Storage
                         {
                             IPRule rule = new IPRule(s);
                             if (!RemoveIpRule(storageACL.IpRules, rule))
-                                throw new ArgumentOutOfRangeException("IPAddressOrRange", String.Format("Can't remove IpRule with specific IPAddressOrRange since not exist: {0}", rule.IPAddressOrRange));
+                                throw new ArgumentOutOfRangeException("IPAddressOrRange", $"Can't remove IpRule with specific IPAddressOrRange since not exist: {rule.IPAddressOrRange}");
                         }
                         break;
                     case ResourceAccessRuleStringParameterSet:
@@ -171,7 +171,7 @@ namespace Microsoft.Azure.Commands.Management.Storage
                         }
                         ResourceAccessRule resourceaccessrule = new ResourceAccessRule(this.TenantId, this.ResourceId);
                         if (!RemoveResourceAccessRule(storageACL.ResourceAccessRules, resourceaccessrule))
-                                throw new ArgumentOutOfRangeException("TenantId, ResourceId", String.Format("Can't remove ResourceAccessRule since not exist, TenantId: {0}, ResourceId : {1}", resourceaccessrule.TenantId, resourceaccessrule.ResourceId));
+                                throw new ArgumentOutOfRangeException("TenantId, ResourceId", $"Can't remove ResourceAccessRule since not exist, TenantId: {resourceaccessrule.TenantId}, ResourceId : {resourceaccessrule.ResourceId}");
                         
                         break;
                     case NetworkRuleObjectParameterSet:
@@ -180,7 +180,7 @@ namespace Microsoft.Azure.Commands.Management.Storage
                         foreach (PSVirtualNetworkRule rule in VirtualNetworkRule)
                         {
                             if (!RemoveNetworkRule(storageACL.VirtualNetworkRules, PSNetworkRuleSet.ParseStorageNetworkRuleVirtualNetworkRule(rule)))
-                                throw new ArgumentOutOfRangeException("VirtualNetworkRule", String.Format("Can't remove VirtualNetworkRule with specific ResourceId since not exist: {0}", rule.VirtualNetworkResourceId));
+                                throw new ArgumentOutOfRangeException("VirtualNetworkRule", $"Can't remove VirtualNetworkRule with specific ResourceId since not exist: {rule.VirtualNetworkResourceId}");
                         }
                         break;
                     case IpRuleObjectParameterSet:
@@ -189,7 +189,7 @@ namespace Microsoft.Azure.Commands.Management.Storage
                         foreach (PSIpRule rule in IPRule)
                         {
                             if (!RemoveIpRule(storageACL.IpRules, PSNetworkRuleSet.ParseStorageNetworkRuleIPRule(rule)))
-                                throw new ArgumentOutOfRangeException("IPRule", String.Format("Can't remove IpRule with specific IPAddressOrRange since not exist: {0}", rule.IPAddressOrRange));
+                                throw new ArgumentOutOfRangeException("IPRule", $"Can't remove IpRule with specific IPAddressOrRange since not exist: {rule.IPAddressOrRange}");
                         }
                         break;
                     case ResourceAccessRuleObjectParameterSet:
@@ -200,7 +200,7 @@ namespace Microsoft.Azure.Commands.Management.Storage
                         foreach (PSResourceAccessRule rule in this.ResourceAccessRule)
                         {
                             if (!RemoveResourceAccessRule(storageACL.ResourceAccessRules, PSNetworkRuleSet.ParseStorageResourceAccessRule(rule)))
-                                throw new ArgumentOutOfRangeException("ResourceAccessRule", String.Format("Can't remove ResourceAccessRule since not exist, TenantId: {0}, ResourceId : {1}", rule.TenantId, rule.ResourceId));
+                                throw new ArgumentOutOfRangeException("ResourceAccessRule", $"Can't remove ResourceAccessRule since not exist, TenantId: {rule.TenantId}, ResourceId : {rule.ResourceId}");
                         }
                         break;
                 }
diff --git a/src/Storage/Storage.Management/StorageAccount/RestoreAzStorageBlobRange.cs b/src/Storage/Storage.Management/StorageAccount/RestoreAzStorageBlobRange.cs
index b8e3a9473b..ba2aa2a373 100644
--- a/src/Storage/Storage.Management/StorageAccount/RestoreAzStorageBlobRange.cs
+++ b/src/Storage/Storage.Management/StorageAccount/RestoreAzStorageBlobRange.cs
@@ -130,7 +130,7 @@ namespace Microsoft.Azure.Commands.Management.Storage
 
                     AzureOperationResponse<BlobRestoreStatus> response = beginTask.Result;
 
-                    WriteWarning(string.Format("Restore blob ranges with Id '{0}' started. Restore blob ranges time to complete is dependent on the size of the restore.", response.Body is null ? "" : response.Body.RestoreId));
+                    WriteWarning($"Restore blob ranges with Id '{(response.Body is null ? "" : response.Body.RestoreId)}' started. Restore blob ranges time to complete is dependent on the size of the restore.");
 
                     Task<AzureOperationResponse<BlobRestoreStatus>> waitTask = ((StorageManagementClient)this.StorageClient).GetPostOrDeleteOperationResultAsync(response, null, new System.Threading.CancellationToken());
                     try
@@ -139,7 +139,7 @@ namespace Microsoft.Azure.Commands.Management.Storage
                     }
                     catch (System.AggregateException ex) when (ex.InnerException is CloudException)
                     {
-                        throw new InvalidJobStateException(string.Format("Blob ranges restore failed with information: '{0}'.", ((CloudException)ex.InnerException).Response.Content));
+                        throw new InvalidJobStateException($"Blob ranges restore failed with information: '{((CloudException)ex.InnerException).Response.Content}'.");
                     }
 
                     AzureOperationResponse<BlobRestoreStatus> result = waitTask.Result;
diff --git a/src/Storage/Storage.Test/Blob/StorageBlobTestBase.cs b/src/Storage/Storage.Test/Blob/StorageBlobTestBase.cs
index de81caa45d..978d5f34ef 100644
--- a/src/Storage/Storage.Test/Blob/StorageBlobTestBase.cs
+++ b/src/Storage/Storage.Test/Blob/StorageBlobTestBase.cs
@@ -151,7 +151,7 @@ namespace Microsoft.WindowsAzure.Commands.Storage.Test.Blob
 
             for(int i = 0; i < count; i++)
             {
-                uri = string.Format("{0}/{1}/{2}{3}", endPoint, containerName, prefix, i);
+                uri = $"{endPoint}/{containerName}/{prefix}{i}";
                 CloudBlockBlob blob = new CloudBlockBlob(new Uri(uri));
                 blobList.Add(blob);
             }
diff --git a/src/Storage/Storage.Test/Common/Cmdlet/NewAzureStorageContextTest.cs b/src/Storage/Storage.Test/Common/Cmdlet/NewAzureStorageContextTest.cs
index e4bb308bf2..06bcb0828b 100644
--- a/src/Storage/Storage.Test/Common/Cmdlet/NewAzureStorageContextTest.cs
+++ b/src/Storage/Storage.Test/Common/Cmdlet/NewAzureStorageContextTest.cs
@@ -115,7 +115,7 @@ namespace Microsoft.WindowsAzure.Commands.Storage.Test.Common.Cmdlet
             string connectionString = String.Format("BlobEndpoint={0};QueueEndpoint={0};TableEndpoint={0};SharedAccessSignature={1}", endpoint, sasToken);
             CloudStorageAccount account = command.GetStorageAccountByConnectionString(connectionString);
             AzureStorageContext context = new AzureStorageContext(account);
-            connectionString = String.Format("BlobEndpoint={0};SharedAccessSignature={1}", endpoint, sasToken);
+            connectionString = $"BlobEndpoint={endpoint};SharedAccessSignature={sasToken}";
             account = command.GetStorageAccountByConnectionString(connectionString);
             context = new AzureStorageContext(account);
         }
diff --git a/src/Storage/Storage.Test/Common/NameUtilTest.cs b/src/Storage/Storage.Test/Common/NameUtilTest.cs
index 9ba458b30a..adbadcf09a 100644
--- a/src/Storage/Storage.Test/Common/NameUtilTest.cs
+++ b/src/Storage/Storage.Test/Common/NameUtilTest.cs
@@ -225,7 +225,7 @@ namespace Microsoft.WindowsAzure.Commands.Storage.Test.Common
         {
             foreach (string name in names)
             {
-                string message = String.Format("'{0}' {1} should be {2}", name, validator.Method.Name, isValid);
+                string message = $"'{name}' {validator.Method.Name} should be {isValid}";
                 Assert.AreEqual(isValid, validator(name), message);
             }
         }
diff --git a/src/Storage/Storage.Test/Common/PSServicePropertiesTest.cs b/src/Storage/Storage.Test/Common/PSServicePropertiesTest.cs
index 41e11958ca..44b8a29892 100644
--- a/src/Storage/Storage.Test/Common/PSServicePropertiesTest.cs
+++ b/src/Storage/Storage.Test/Common/PSServicePropertiesTest.cs
@@ -92,38 +92,38 @@ namespace Microsoft.WindowsAzure.Commands.Storage.Test.Common
         /// </summary>
         static private void CompareServiceProperties(PSSeriviceProperties pSSeriviceProperties, ServiceProperties serviceProperties)
         {
-            if ((pSSeriviceProperties != null && pSSeriviceProperties.HourMetrics != null) || (serviceProperties != null && serviceProperties.HourMetrics != null))
+            if ((pSSeriviceProperties?.HourMetrics != null) || (serviceProperties?.HourMetrics != null))
             {
                 Assert.AreEqual(serviceProperties.HourMetrics.Version, pSSeriviceProperties.HourMetrics.Version);
                 Assert.AreEqual(serviceProperties.HourMetrics.MetricsLevel, pSSeriviceProperties.HourMetrics.MetricsLevel);
                 Assert.AreEqual(serviceProperties.HourMetrics.RetentionDays, pSSeriviceProperties.HourMetrics.RetentionDays);
             }
-            if ((pSSeriviceProperties != null && pSSeriviceProperties.MinuteMetrics != null) || (serviceProperties != null && serviceProperties.MinuteMetrics != null))
+            if ((pSSeriviceProperties?.MinuteMetrics != null) || (serviceProperties?.MinuteMetrics != null))
             {
                 Assert.AreEqual(serviceProperties.MinuteMetrics.Version, pSSeriviceProperties.MinuteMetrics.Version);
                 Assert.AreEqual(serviceProperties.MinuteMetrics.MetricsLevel, pSSeriviceProperties.MinuteMetrics.MetricsLevel);
                 Assert.AreEqual(serviceProperties.MinuteMetrics.RetentionDays, pSSeriviceProperties.MinuteMetrics.RetentionDays);
             }
-            if ((pSSeriviceProperties != null && pSSeriviceProperties.Logging != null) || (serviceProperties != null && serviceProperties.Logging != null))
+            if ((pSSeriviceProperties?.Logging != null) || (serviceProperties?.Logging != null))
             {
                 Assert.AreEqual(serviceProperties.Logging.Version, pSSeriviceProperties.Logging.Version);
                 Assert.AreEqual(serviceProperties.Logging.LoggingOperations, pSSeriviceProperties.Logging.LoggingOperations);
                 Assert.AreEqual(serviceProperties.Logging.RetentionDays, pSSeriviceProperties.Logging.RetentionDays);
             }
-            if ((pSSeriviceProperties != null && pSSeriviceProperties.Cors != null) || (serviceProperties != null && serviceProperties.Cors != null))
+            if ((pSSeriviceProperties?.Cors != null) || (serviceProperties?.Cors != null))
             {
                 CompareCors(pSSeriviceProperties.Cors, serviceProperties.Cors);
             }
-            if ((pSSeriviceProperties != null && pSSeriviceProperties.DefaultServiceVersion != null) || (serviceProperties != null && serviceProperties.DefaultServiceVersion != null))
+            if ((pSSeriviceProperties?.DefaultServiceVersion != null) || (serviceProperties?.DefaultServiceVersion != null))
             {
                 Assert.AreEqual(serviceProperties.DefaultServiceVersion, pSSeriviceProperties.DefaultServiceVersion);
             }
-            if ((pSSeriviceProperties != null && pSSeriviceProperties.DeleteRetentionPolicy != null) || (serviceProperties != null && serviceProperties.DeleteRetentionPolicy != null))
+            if ((pSSeriviceProperties?.DeleteRetentionPolicy != null) || (serviceProperties?.DeleteRetentionPolicy != null))
             {
                 Assert.AreEqual(serviceProperties.DeleteRetentionPolicy.Enabled, pSSeriviceProperties.DeleteRetentionPolicy.Enabled);
                 Assert.AreEqual(serviceProperties.DeleteRetentionPolicy.RetentionDays, pSSeriviceProperties.DeleteRetentionPolicy.RetentionDays);
             }
-            if ((pSSeriviceProperties != null && pSSeriviceProperties.StaticWebsite != null) || (serviceProperties != null && serviceProperties.StaticWebsite != null))
+            if ((pSSeriviceProperties?.StaticWebsite != null) || (serviceProperties?.StaticWebsite != null))
             {
                 Assert.AreEqual(serviceProperties.StaticWebsite.Enabled, pSSeriviceProperties.StaticWebsite.Enabled);
                 Assert.AreEqual(serviceProperties.StaticWebsite.IndexDocument, pSSeriviceProperties.StaticWebsite.IndexDocument);
@@ -162,7 +162,7 @@ namespace Microsoft.WindowsAzure.Commands.Storage.Test.Common
                     }
                     else
                     {
-                        throw new InvalidOperationException(string.Format("Can't parse {0} to CorsHttpMethods.", method));
+                        throw new InvalidOperationException($"Can't parse {method} to CorsHttpMethods.");
                     }
                 }
 
diff --git a/src/Storage/Storage.Test/File/Cmdlet/GetAzureStorageFileTest.cs b/src/Storage/Storage.Test/File/Cmdlet/GetAzureStorageFileTest.cs
index fbaf70829f..60cd9ca26d 100644
--- a/src/Storage/Storage.Test/File/Cmdlet/GetAzureStorageFileTest.cs
+++ b/src/Storage/Storage.Test/File/Cmdlet/GetAzureStorageFileTest.cs
@@ -32,8 +32,8 @@ namespace Microsoft.WindowsAzure.Management.Storage.Test.File.Cmdlet
         public void GetFileFromRootTest_ShareNameParameterSet()
         {
             var share = this.MockChannel.GetShareReference(ShareName);
-            var listItems = Enumerable.Range(0, 10).Select(x => share.GetRootDirectoryReference().GetFileReference(string.Format("file{0}", x))).Cast<IListFileItem>()
-                .Concat(Enumerable.Range(0, 5).Select(x => share.GetRootDirectoryReference().GetDirectoryReference(string.Format("dir{0}", x)))).ToArray();
+            var listItems = Enumerable.Range(0, 10).Select(x => share.GetRootDirectoryReference().GetFileReference($"file{x}")).Cast<IListFileItem>()
+                .Concat(Enumerable.Range(0, 5).Select(x => share.GetRootDirectoryReference().GetDirectoryReference($"dir{x}"))).ToArray();
 
             this.ListFilesAndAssertResults(
                 () => this.CmdletInstance.RunCmdlet(
@@ -46,8 +46,8 @@ namespace Microsoft.WindowsAzure.Management.Storage.Test.File.Cmdlet
         public void GetFileFromRootTest_ShareParameterSet()
         {
             var share = this.MockChannel.GetShareReference(ShareName);
-            var listItems = Enumerable.Range(0, 10).Select(x => share.GetRootDirectoryReference().GetFileReference(string.Format("file{0}", x))).Cast<IListFileItem>()
-                .Concat(Enumerable.Range(0, 5).Select(x => share.GetRootDirectoryReference().GetDirectoryReference(string.Format("dir{0}", x)))).ToArray();
+            var listItems = Enumerable.Range(0, 10).Select(x => share.GetRootDirectoryReference().GetFileReference($"file{x}")).Cast<IListFileItem>()
+                .Concat(Enumerable.Range(0, 5).Select(x => share.GetRootDirectoryReference().GetDirectoryReference($"dir{x}"))).ToArray();
 
             this.ListFilesAndAssertResults(
                 () => this.CmdletInstance.RunCmdlet(
@@ -61,8 +61,8 @@ namespace Microsoft.WindowsAzure.Management.Storage.Test.File.Cmdlet
         {
             var share = this.MockChannel.GetShareReference(ShareName);
             var dir = share.GetRootDirectoryReference().GetDirectoryReference("dir");
-            var listItems = Enumerable.Range(0, 10).Select(x => dir.GetFileReference(string.Format("file{0}", x))).Cast<IListFileItem>()
-                .Concat(Enumerable.Range(0, 5).Select(x => dir.GetDirectoryReference(string.Format("dir{0}", x)))).ToArray();
+            var listItems = Enumerable.Range(0, 10).Select(x => dir.GetFileReference($"file{x}")).Cast<IListFileItem>()
+                .Concat(Enumerable.Range(0, 5).Select(x => dir.GetDirectoryReference($"dir{x}"))).ToArray();
 
             this.ListFilesAndAssertResults(
                 () => this.CmdletInstance.RunCmdlet(
diff --git a/src/Storage/Storage.Test/File/Cmdlet/NewAzureStorageDirectoryTest.cs b/src/Storage/Storage.Test/File/Cmdlet/NewAzureStorageDirectoryTest.cs
index 02e8b429f6..37e960c51e 100644
--- a/src/Storage/Storage.Test/File/Cmdlet/NewAzureStorageDirectoryTest.cs
+++ b/src/Storage/Storage.Test/File/Cmdlet/NewAzureStorageDirectoryTest.cs
@@ -101,11 +101,11 @@ namespace Microsoft.WindowsAzure.Management.Storage.Test.File.Cmdlet
             }
             catch (TargetInvocationException exception)
             {
-                Trace.WriteLine(string.Format("Creating a directory with name '{0}'", directoryName));
+                Trace.WriteLine($"Creating a directory with name '{directoryName}'");
                 if (exception.InnerException != null)
                 {
                     Trace.WriteLine(string.Format("Exception:"));
-                    Trace.WriteLine(string.Format("{0}: {1}", exception.InnerException.GetType(), exception.InnerException.Message));
+                    Trace.WriteLine($"{exception.InnerException.GetType()}: {exception.InnerException.Message}");
                     if (exception.InnerException.GetType().ToString().Contains(expectedErrorId))
                     {
                         return;
diff --git a/src/Storage/Storage.Test/File/Cmdlet/NewAzureStorageShareTest.cs b/src/Storage/Storage.Test/File/Cmdlet/NewAzureStorageShareTest.cs
index 0fa02ef931..ab4936b74d 100644
--- a/src/Storage/Storage.Test/File/Cmdlet/NewAzureStorageShareTest.cs
+++ b/src/Storage/Storage.Test/File/Cmdlet/NewAzureStorageShareTest.cs
@@ -96,11 +96,11 @@ namespace Microsoft.WindowsAzure.Management.Storage.Test.File.Cmdlet
             }
             catch (TargetInvocationException exception)
             {
-                Trace.WriteLine(string.Format("Creating a share with name '{0}'", name));
+                Trace.WriteLine($"Creating a share with name '{name}'");
                 if (exception.InnerException != null)
                 {
                     Trace.WriteLine(string.Format("Exception:"));
-                    Trace.WriteLine(string.Format("{0}: {1}", exception.InnerException.GetType(), exception.InnerException.Message));
+                    Trace.WriteLine($"{exception.InnerException.GetType()}: {exception.InnerException.Message}");
                     if (exception.InnerException.GetType().ToString().Contains(expectedErrorId))
                     {
                         return;
diff --git a/src/Storage/Storage.Test/File/FileAssertUtil.cs b/src/Storage/Storage.Test/File/FileAssertUtil.cs
index e4c6cd8e49..79e5f26ed2 100644
--- a/src/Storage/Storage.Test/File/FileAssertUtil.cs
+++ b/src/Storage/Storage.Test/File/FileAssertUtil.cs
@@ -52,14 +52,14 @@ namespace Microsoft.WindowsAzure.Management.Storage.Test.File
             {
                 string name;
                 List<string> expectList;
-                if (item is CloudFile)
+                if (item is CloudFile cloudFile)
                 {
-                    name = ((CloudFile)item).Name;
+                    name = cloudFile.Name;
                     expectList = fileItems;
                 }
-                else if (item is CloudFileDirectory)
+                else if (item is CloudFileDirectory cloudFileDirectory)
                 {
-                    name = ((CloudFileDirectory)item).Name;
+                    name = cloudFileDirectory.Name;
                     expectList = directoryItems;
                 }
                 else
diff --git a/src/Storage/Storage.Test/File/PSCmdletReflectionHelper.cs b/src/Storage/Storage.Test/File/PSCmdletReflectionHelper.cs
index 5df5b2d942..c85cc7e5ed 100644
--- a/src/Storage/Storage.Test/File/PSCmdletReflectionHelper.cs
+++ b/src/Storage/Storage.Test/File/PSCmdletReflectionHelper.cs
@@ -65,10 +65,7 @@ namespace Microsoft.WindowsAzure.Management.Storage.Test.File
             }
             catch
             {
-                if (ps != null)
-                {
-                    ps.Dispose();
-                }
+                ps?.Dispose();
 
                 throw;
             }
diff --git a/src/Storage/Storage.Test/Service/MockStorageBlobManagement.cs b/src/Storage/Storage.Test/Service/MockStorageBlobManagement.cs
index b9b0b38e3a..a6fc8bc78b 100644
--- a/src/Storage/Storage.Test/Service/MockStorageBlobManagement.cs
+++ b/src/Storage/Storage.Test/Service/MockStorageBlobManagement.cs
@@ -153,7 +153,7 @@ namespace Microsoft.WindowsAzure.Commands.Storage.Test.Service
         /// <returns>A CloudBlobContainer in local memory</returns>
         public CloudBlobContainer GetContainerReference(string name)
         {
-            Uri containerUri = new Uri(String.Format("{0}{1}/", BlobEndPoint, name));
+            Uri containerUri = new Uri($"{BlobEndPoint}{name}/");
             string testName = "testaccount";
             Guid guid = Guid.NewGuid();
             string testKey = Convert.ToBase64String(guid.ToByteArray());
diff --git a/src/Storage/Storage.Test/Service/MockStorageQueueManagement.cs b/src/Storage/Storage.Test/Service/MockStorageQueueManagement.cs
index 39c25ac5d7..856155f3fd 100644
--- a/src/Storage/Storage.Test/Service/MockStorageQueueManagement.cs
+++ b/src/Storage/Storage.Test/Service/MockStorageQueueManagement.cs
@@ -84,7 +84,7 @@ namespace Microsoft.WindowsAzure.Commands.Storage.Test.Service
         /// <returns>Cloud Queue object</returns>
         public CloudQueue GetQueueReference(string name)
         {
-            Uri queueUri = new Uri(String.Format("{0}{1}", QueueEndPoint, name));
+            Uri queueUri = new Uri($"{QueueEndPoint}{name}");
             return new CloudQueue(queueUri);
         }
 
diff --git a/src/Storage/Storage.Test/Service/MockStorageTableManagement.cs b/src/Storage/Storage.Test/Service/MockStorageTableManagement.cs
index cc1ca1769b..cc788abf50 100644
--- a/src/Storage/Storage.Test/Service/MockStorageTableManagement.cs
+++ b/src/Storage/Storage.Test/Service/MockStorageTableManagement.cs
@@ -98,7 +98,7 @@ namespace Microsoft.WindowsAzure.Commands.Storage.Test.Service
         /// <returns>Cloud table object</returns>
         public CloudTable GetTableReference(string name)
         {
-            Uri tableUri = new Uri(String.Format("{0}{1}", TableEndPoint, name));
+            Uri tableUri = new Uri($"{TableEndPoint}{name}");
             CloudTableClient tableClient = new CloudTableClient(new Uri(TableEndPoint), null);
             return new CloudTable(tableUri);
         }
diff --git a/src/Storage/Storage/Blob/Cmdlet/CopyAzureStorageBlob.cs b/src/Storage/Storage/Blob/Cmdlet/CopyAzureStorageBlob.cs
index d37c2d153d..6858773eed 100644
--- a/src/Storage/Storage/Blob/Cmdlet/CopyAzureStorageBlob.cs
+++ b/src/Storage/Storage/Blob/Cmdlet/CopyAzureStorageBlob.cs
@@ -290,7 +290,7 @@ namespace Microsoft.WindowsAzure.Commands.Storage.Blob.Cmdlet
             Track2Models.BlobType srcBlobType = Util.GetBlobType(srcCloudBlob, true).Value;
             if (srcBlobType != Track2Models.BlobType.Block)
             {
-                throw new ArgumentException(string.Format("The cmdlet currently only support souce blob and destination blob are both block blob. The source blob type is {0}.", srcBlobType));
+                throw new ArgumentException($"The cmdlet currently only support souce blob and destination blob are both block blob. The source blob type is {srcBlobType}.");
             }
 
             if (srcCloudBlob is BlobClient)
@@ -311,7 +311,7 @@ namespace Microsoft.WindowsAzure.Commands.Storage.Blob.Cmdlet
             Track2Models.BlobType srcBlobType = Util.GetBlobType(new BlobBaseClient(new Uri(srcUri), ClientOptions), true).Value;
             if (srcBlobType != Track2Models.BlobType.Block)
             {
-                throw new ArgumentException(string.Format("The cmdlet currently only support souce blob and destination blob are both block blob. The source blob type is {0}.", srcBlobType));
+                throw new ArgumentException($"The cmdlet currently only support souce blob and destination blob are both block blob. The source blob type is {srcBlobType}.");
             }
 
             BlobBaseClient destBlob = this.GetDestBlob(destChannel, destContainer, destBlobName, srcBlobType);
@@ -355,7 +355,7 @@ namespace Microsoft.WindowsAzure.Commands.Storage.Blob.Cmdlet
                 Track2Models.BlobProperties srcProperties = srcBlockblob.GetProperties(cancellationToken: this.CmdletCancellationToken).Value;
 
                 //Prepare progress handler
-                string activity = String.Format("Copy Blob {0} to {1}", srcBlockblob.Name, destBlob.Name);
+                string activity = $"Copy Blob {srcBlockblob.Name} to {destBlob.Name}";
                 string status = "Prepare to Copy Blob";
                 ProgressRecord pr = new ProgressRecord(OutputStream.GetProgressId(taskId), activity, status);
                 IProgress<long> progressHandler = new Progress<long>((finishedBytes) =>
@@ -364,7 +364,7 @@ namespace Microsoft.WindowsAzure.Commands.Storage.Blob.Cmdlet
                     {
                         // Size of the source file might be 0, when it is, directly treat the progress as 100 percent.
                         pr.PercentComplete = 0 == srcProperties.ContentLength ? 100 : (int)(finishedBytes * 100 / srcProperties.ContentLength);
-                        pr.StatusDescription = string.Format("Percent: {0}%.", pr.PercentComplete);
+                        pr.StatusDescription = $"Percent: {pr.PercentComplete}%.";
                         Console.WriteLine(finishedBytes);
                         this.OutputStream.WriteProgress(pr);
                     }
@@ -418,7 +418,7 @@ namespace Microsoft.WindowsAzure.Commands.Storage.Blob.Cmdlet
                     case Track2Models.BlobType.Page:
                     case Track2Models.BlobType.Append:
                     default:
-                        throw new ArgumentException(string.Format("The cmdlet currently only support souce blob and destination blob are both block blob. The dest blob type is {0}.", destBlobType));
+                        throw new ArgumentException($"The cmdlet currently only support souce blob and destination blob are both block blob. The dest blob type is {destBlobType}.");
                 }
 
                 OutputStream.WriteObject(taskId, new AzureStorageBlob(destBlob, destChannel.StorageContext, null, options: ClientOptions));
diff --git a/src/Storage/Storage/Blob/Cmdlet/GetAzureStorageContainer.cs b/src/Storage/Storage/Blob/Cmdlet/GetAzureStorageContainer.cs
index bbb6a05c3e..605913436e 100644
--- a/src/Storage/Storage/Blob/Cmdlet/GetAzureStorageContainer.cs
+++ b/src/Storage/Storage/Blob/Cmdlet/GetAzureStorageContainer.cs
@@ -211,7 +211,7 @@ namespace Microsoft.WindowsAzure.Commands.Storage.Blob.Cmdlet
             {
                 // Write warning when user SAS credential since get container ACL will fail
                 AzureStorageContext storageContext = this.GetCmdletStorageContext();
-                if (storageContext != null && storageContext.StorageAccount != null && storageContext.StorageAccount.Credentials != null && storageContext.StorageAccount.Credentials.IsSAS)
+                if (storageContext?.StorageAccount != null && storageContext.StorageAccount.Credentials != null && storageContext.StorageAccount.Credentials.IsSAS)
                 {
                     WriteWarning("Get container permission will fail with SAS token credentials, it needs storage Account key credentials.");
                 }
diff --git a/src/Storage/Storage/Blob/Cmdlet/RemoveAzureStorageContainer.cs b/src/Storage/Storage/Blob/Cmdlet/RemoveAzureStorageContainer.cs
index 96e8f86979..b3db5f3fd7 100644
--- a/src/Storage/Storage/Blob/Cmdlet/RemoveAzureStorageContainer.cs
+++ b/src/Storage/Storage/Blob/Cmdlet/RemoveAzureStorageContainer.cs
@@ -90,7 +90,7 @@ namespace Microsoft.WindowsAzure.Commands.Storage.Blob.Cmdlet
             string result = string.Empty;
             bool removed = false;
 
-            if (force || ContainerIsEmpty(container) || OutputStream.ConfirmAsync(String.Format("Remove container and all content in it: {0}", name)).Result)
+            if (force || ContainerIsEmpty(container) || OutputStream.ConfirmAsync($"Remove container and all content in it: {name}").Result)
             {
                 await localChannel.DeleteContainerAsync(container, accessCondition, requestOptions, OperationContext, CmdletCancellationToken).ConfigureAwait(false);
                 result = String.Format(Resources.RemoveContainerSuccessfully, name);
diff --git a/src/Storage/Storage/Blob/Cmdlet/SetAzureStorageBlobContent.cs b/src/Storage/Storage/Blob/Cmdlet/SetAzureStorageBlobContent.cs
index 7bae226cff..e6fa61fe7a 100644
--- a/src/Storage/Storage/Blob/Cmdlet/SetAzureStorageBlobContent.cs
+++ b/src/Storage/Storage/Blob/Cmdlet/SetAzureStorageBlobContent.cs
@@ -479,7 +479,7 @@ namespace Microsoft.WindowsAzure.Commands.Storage.Blob
                         {
                             if (fileSize % 512 != 0)
                             {
-                                throw new ArgumentException(String.Format("File size {0} Bytes is invalid for PageBlob, must be a multiple of 512 bytes.", fileSize.ToString()));
+                                throw new ArgumentException($"File size {fileSize.ToString()} Bytes is invalid for PageBlob, must be a multiple of 512 bytes.");
                             }
                             pageblobClient = GetTrack2PageBlobClient(blob, localChannel.StorageContext, options);
                             outputBlobClient = pageblobClient;
@@ -573,10 +573,9 @@ namespace Microsoft.WindowsAzure.Commands.Storage.Blob
         /// <param name="data">User data</param>
         protected override void OnTaskSuccessful(DataMovementUserData data)
         {
-            StorageBlob.CloudBlob blob = data.Data as StorageBlob.CloudBlob;
             IStorageBlobManagement localChannel = data.Channel;
 
-            if (blob != null)
+            if (data.Data is StorageBlob.CloudBlob blob)
             {
                 AccessCondition accessCondition = null;
                 StorageBlob.BlobRequestOptions requestOptions = RequestOptions;
diff --git a/src/Storage/Storage/Blob/Cmdlet/StartAzureStorageBlobIncrementalCopy.cs b/src/Storage/Storage/Blob/Cmdlet/StartAzureStorageBlobIncrementalCopy.cs
index 9643e6586e..28f3c6594f 100644
--- a/src/Storage/Storage/Blob/Cmdlet/StartAzureStorageBlobIncrementalCopy.cs
+++ b/src/Storage/Storage/Blob/Cmdlet/StartAzureStorageBlobIncrementalCopy.cs
@@ -458,7 +458,7 @@ namespace Microsoft.WindowsAzure.Commands.Storage.Blob.Cmdlet
         {
             if (blob.Properties.BlobType != BlobType.PageBlob && blob.IsSnapshot == true)
             {
-                throw new ArgumentException(String.Format("Blob {0} with Type {1} is not supported as incremental copy source, only page blob snapshot is supported as incremental copy source.", blob.Name, blob.Properties.BlobType));
+                throw new ArgumentException($"Blob {blob.Name} with Type {blob.Properties.BlobType} is not supported as incremental copy source, only page blob snapshot is supported as incremental copy source.");
             }
             return (CloudPageBlob)blob;
         }
diff --git a/src/Storage/Storage/Blob/StorageCloudBlobCmdletBase.cs b/src/Storage/Storage/Blob/StorageCloudBlobCmdletBase.cs
index d8da32cde2..a4f027a287 100644
--- a/src/Storage/Storage/Blob/StorageCloudBlobCmdletBase.cs
+++ b/src/Storage/Storage/Blob/StorageCloudBlobCmdletBase.cs
@@ -388,12 +388,12 @@ namespace Microsoft.WindowsAzure.Commands.Storage
             if ((pageBlobTier != null)
                 && (type != BlobType.PageBlob))
             {
-                throw new ArgumentOutOfRangeException("BlobType, PageBlobTier", String.Format("PremiumPageBlobTier can only be set to Page Blob. The Current BlobType is: {0}", type));
+                throw new ArgumentOutOfRangeException("BlobType, PageBlobTier", $"PremiumPageBlobTier can only be set to Page Blob. The Current BlobType is: {type}");
             }
             if ((standardBlobTier != null || rehydratePriority != null)
                 && (type != BlobType.BlockBlob))
             {
-                throw new ArgumentOutOfRangeException("BlobType, StandardBlobTier/RehydratePriority", String.Format("StandardBlobTier and RehydratePriority can only be set to Block Blob. The Current BlobType is: {0}", type));
+                throw new ArgumentOutOfRangeException("BlobType, StandardBlobTier/RehydratePriority", $"StandardBlobTier and RehydratePriority can only be set to Block Blob. The Current BlobType is: {type}");
             }
         }
 
@@ -488,7 +488,7 @@ namespace Microsoft.WindowsAzure.Commands.Storage
             catch (RequestFailedException e) when (e.Status == 404)
             {
                 // TODO: through exception that the item not exist
-                throw new ArgumentException(string.Format("The Item in File System {0} on path {1} does not exist.", fileSystem.Name, path));
+                throw new ArgumentException($"The Item in File System {fileSystem.Name} on path {path} does not exist.");
             }
         }
 
diff --git a/src/Storage/Storage/Common/BlobToFileNameResolver.cs b/src/Storage/Storage/Common/BlobToFileNameResolver.cs
index 15c0dd2b3e..6a33f526e0 100644
--- a/src/Storage/Storage/Common/BlobToFileNameResolver.cs
+++ b/src/Storage/Storage/Common/BlobToFileNameResolver.cs
@@ -182,11 +182,7 @@ namespace Microsoft.WindowsAzure.Commands.Storage.Common
                 string extension = Path.GetExtension(fileName);
                 string timeStamp = string.Format("{0:u}", snapshotTime.Value);
 
-                resultName = string.Format(
-                    "{0} ({1}){2}",
-                    pathAndFileNameNoExt,
-                    timeStamp.Replace(":", string.Empty).TrimEnd(new char[] { 'Z' }),
-                    extension);
+                resultName = $"{pathAndFileNameNoExt} ({timeStamp.Replace(":", string.Empty).TrimEnd(new char[]{'Z'})}){extension}";
             }
 
             return resultName;
@@ -293,7 +289,7 @@ namespace Microsoft.WindowsAzure.Commands.Storage.Common
 
             Func<string, string, int, string> construct = delegate (string fileName, string extension, int count)
             {
-                string postfixString = string.Format(" ({0})", count);
+                string postfixString = $" ({count})";
 
                 // TODO - trimLength could be be larger than pathAndFilename.Length, what do we do in this case?
                 int trimLength = (fileName.Length + postfixString.Length + extension.Length) - maxFileNameLength;
@@ -303,7 +299,7 @@ namespace Microsoft.WindowsAzure.Commands.Storage.Common
                     fileName = fileName.Remove(fileName.Length - trimLength);
                 }
 
-                return string.Format("{0}{1}{2}", fileName, postfixString, extension);
+                return $"{fileName}{postfixString}{extension}";
             };
 
             return ResolveFileNameConflict(baseFileName, conflict, construct);
diff --git a/src/Storage/Storage/Common/InvalidCloudBlob.cs b/src/Storage/Storage/Common/InvalidCloudBlob.cs
index 1a73cffafd..af56bf56db 100644
--- a/src/Storage/Storage/Common/InvalidCloudBlob.cs
+++ b/src/Storage/Storage/Common/InvalidCloudBlob.cs
@@ -38,7 +38,7 @@ namespace Microsoft.WindowsAzure.Commands.Common.Storage.ResourceModel
             {
                 blobUri = blobUri.Replace(credentials.SASSignature, "[Sig]");
             }
-            exception = new InvalidOperationException(string.Format("Only support run action on this blob with 'BlobBaseClient', not support with 'ICloudBlob'. Blob Uri: {0}.", blobUri));
+            exception = new InvalidOperationException($"Only support run action on this blob with 'BlobBaseClient', not support with 'ICloudBlob'. Blob Uri: {blobUri}.");
         }
         private InvalidOperationException exception;
 
diff --git a/src/Storage/Storage/Common/StorageCloudCmdletBase.cs b/src/Storage/Storage/Common/StorageCloudCmdletBase.cs
index 6823d50dc0..4d856f05b0 100644
--- a/src/Storage/Storage/Common/StorageCloudCmdletBase.cs
+++ b/src/Storage/Storage/Common/StorageCloudCmdletBase.cs
@@ -442,13 +442,13 @@ namespace Microsoft.WindowsAzure.Commands.Storage.Common
         {
             Debug.Assert(e != null, Resources.ExceptionCannotEmpty);
 
-            if (e is StorageException)
+            if (e is StorageException storageException)
             {
-                e = ((StorageException)e).RepackStorageException();
+                e = storageException.RepackStorageException();
             }
-            else if (e is AzureStorageFileException)
+            else if (e is AzureStorageFileException azureStorageFileException)
             {
-                WriteError(((AzureStorageFileException)e).GetErrorRecord());
+                WriteError(azureStorageFileException.GetErrorRecord());
                 return;
             }
 
diff --git a/src/Storage/Storage/Common/StorageExceptionUtil.cs b/src/Storage/Storage/Common/StorageExceptionUtil.cs
index b86224c5a9..ae36620bc3 100644
--- a/src/Storage/Storage/Common/StorageExceptionUtil.cs
+++ b/src/Storage/Storage/Common/StorageExceptionUtil.cs
@@ -72,18 +72,11 @@ namespace Microsoft.WindowsAzure.Commands.Storage.Common
             if (null != e.RequestInformation &&
                 null != e.RequestInformation.HttpStatusMessage)
             {
-                String msg = string.Format(
-                    "{0} HTTP Status Code: {1} - HTTP Error Message: {2}",
-                    e.Message,
-                    e.RequestInformation.HttpStatusCode,
-                    e.RequestInformation.HttpStatusMessage);
+                String msg = $"{e.Message} HTTP Status Code: {e.RequestInformation.HttpStatusCode} - HTTP Error Message: {e.RequestInformation.HttpStatusMessage}";
 
                 if (e.RequestInformation.ExtendedErrorInformation != null)
                 {
-                    String extendErrorInfo = String.Format(
-                        "\nErrorCode: {0}\nErrorMessage: {1}",
-                        e.RequestInformation.ExtendedErrorInformation.ErrorCode,
-                        e.RequestInformation.ExtendedErrorInformation.ErrorMessage);
+                    String extendErrorInfo = $"\nErrorCode: {e.RequestInformation.ExtendedErrorInformation.ErrorCode}\nErrorMessage: {e.RequestInformation.ExtendedErrorInformation.ErrorMessage}";
 
                     if (e.RequestInformation.ExtendedErrorInformation.AdditionalDetails != null
                         && e.RequestInformation.ExtendedErrorInformation.AdditionalDetails.Count > 0)
@@ -91,7 +84,7 @@ namespace Microsoft.WindowsAzure.Commands.Storage.Common
                         string additionalDetails = string.Empty;
                         foreach (var key in e.RequestInformation.ExtendedErrorInformation.AdditionalDetails)
                         {
-                            additionalDetails += String.Format("\n{0}: {1}", key.Key, key.Value);
+                            additionalDetails += $"\n{key.Key}: {key.Value}";
                         }
                         extendErrorInfo += additionalDetails;
                     }
@@ -99,12 +92,7 @@ namespace Microsoft.WindowsAzure.Commands.Storage.Common
                 }
                 else
                 {
-                    String errorInfo = String.Format(
-                        "\nErrorCode: {0}\nErrorMessage: {1}\nRequestId: {2}\nTime: {3}",
-                        e.RequestInformation.ErrorCode,
-                        e.RequestInformation.HttpStatusMessage,
-                        e.RequestInformation.ServiceRequestID,
-                        e.RequestInformation.RequestDate);
+                    String errorInfo = $"\nErrorCode: {e.RequestInformation.ErrorCode}\nErrorMessage: {e.RequestInformation.HttpStatusMessage}\nRequestId: {e.RequestInformation.ServiceRequestID}\nTime: {e.RequestInformation.RequestDate}";
                     msg += errorInfo;
                 }
                 e = new StorageException(e.RequestInformation, msg, e);
diff --git a/src/Storage/Storage/Common/TaskOutputStream.cs b/src/Storage/Storage/Common/TaskOutputStream.cs
index 6b0d88a1f3..4a85cf47d6 100644
--- a/src/Storage/Storage/Common/TaskOutputStream.cs
+++ b/src/Storage/Storage/Common/TaskOutputStream.cs
@@ -280,10 +280,7 @@ namespace Microsoft.WindowsAzure.Commands.Storage.Common
 
             lock (confirmTaskLock)
             {
-                if (currentTaskSource != null)
-                {
-                    currentTaskSource.SetCanceled();
-                }
+                currentTaskSource?.SetCanceled();
 
                 currentTaskSource = null;
             }
@@ -413,7 +410,7 @@ namespace Microsoft.WindowsAzure.Commands.Storage.Common
                         }
                         catch (Exception e)
                         {
-                            Debug.Fail(String.Format("{0}", e));
+                            Debug.Fail($"{e}");
                             break;
                         }
                     }
diff --git a/src/Storage/Storage/Common/Util.cs b/src/Storage/Storage/Common/Util.cs
index fa9db1f672..0b95e5f757 100644
--- a/src/Storage/Storage/Common/Util.cs
+++ b/src/Storage/Storage/Common/Util.cs
@@ -513,17 +513,15 @@ namespace Microsoft.WindowsAzure.Commands.Storage.Common
             TimeSpan maxLifeTime = TimeSpan.FromDays(MAX_LIFE_TIME_DAYS);
             if (userDelegationKeyEndTime <= DateTimeOffset.UtcNow)
             {
-                throw new ArgumentException(string.Format("Expiry time {0} is earlier than now.", userDelegationKeyEndTime.ToString()));
+                throw new ArgumentException($"Expiry time {userDelegationKeyEndTime.ToString()} is earlier than now.");
             }
             else if (userDelegationKeyStartTime >= userDelegationKeyEndTime)
             {
-                throw new ArgumentException(string.Format("Start time {0} is later than expiry time {1}.", userDelegationKeyStartTime.ToString(), userDelegationKeyEndTime.ToString()));
+                throw new ArgumentException($"Start time {userDelegationKeyStartTime.ToString()} is later than expiry time {userDelegationKeyEndTime.ToString()}.");
             }
             else if (userDelegationKeyEndTime - DateTimeOffset.UtcNow > maxLifeTime)
             {
-                throw new ArgumentException(string.Format("Generate User Delegation SAS with OAuth bases Storage context. User Delegate Key expiry time {0} must be in {1} days from now.",
-                    userDelegationKeyEndTime.ToString(),
-                    MAX_LIFE_TIME_DAYS));
+                throw new ArgumentException($"Generate User Delegation SAS with OAuth bases Storage context. User Delegate Key expiry time {userDelegationKeyEndTime.ToString()} must be in {MAX_LIFE_TIME_DAYS} days from now.");
             }
         }
 
diff --git a/src/Storage/Storage/DatalakeGen2/Cmdlet/GetAzDataLakeGen2ChildItem.cs b/src/Storage/Storage/DatalakeGen2/Cmdlet/GetAzDataLakeGen2ChildItem.cs
index 9927c83bb8..c7f8a28d1e 100644
--- a/src/Storage/Storage/DatalakeGen2/Cmdlet/GetAzDataLakeGen2ChildItem.cs
+++ b/src/Storage/Storage/DatalakeGen2/Cmdlet/GetAzDataLakeGen2ChildItem.cs
@@ -127,7 +127,7 @@ namespace Microsoft.WindowsAzure.Commands.Storage.Blob.Cmdlet
             page = enumerator.Current;
             if(page.ContinuationToken != null && (MaxCount == null || page.Values.Count < MaxCount.Value))
             {
-                WriteWarning(string.Format("Not all result returned, to list the left items run this cmdlet again with parameter: '-ContinuationToken {0}'.", page.ContinuationToken));
+                WriteWarning($"Not all result returned, to list the left items run this cmdlet again with parameter: '-ContinuationToken {page.ContinuationToken}'.");
             }
             foreach (PathItem item in page.Values)
             {
diff --git a/src/Storage/Storage/DatalakeGen2/Cmdlet/GetAzDataLakeGen2FileContent.cs b/src/Storage/Storage/DatalakeGen2/Cmdlet/GetAzDataLakeGen2FileContent.cs
index d393cca732..5afa74eeff 100644
--- a/src/Storage/Storage/DatalakeGen2/Cmdlet/GetAzDataLakeGen2FileContent.cs
+++ b/src/Storage/Storage/DatalakeGen2/Cmdlet/GetAzDataLakeGen2FileContent.cs
@@ -244,7 +244,7 @@ namespace Microsoft.WindowsAzure.Commands.Storage.Blob.Cmdlet
                 DataLakeDirectoryClient dirClient;
                 if (GetExistDataLakeGen2Item(fileSystem, this.Path, out fileClient, out dirClient))
                 {
-                    throw new ArgumentException(String.Format("The input FileSystem '{0}', path '{1}' point to a Directory, can't download it.", this.FileSystem, this.Path));
+                    throw new ArgumentException($"The input FileSystem '{this.FileSystem}', path '{this.Path}' point to a Directory, can't download it.");
                 }
 
                 CloudBlobContainer container = GetCloudBlobContainerByName(Channel, this.FileSystem).ConfigureAwait(false).GetAwaiter().GetResult();
diff --git a/src/Storage/Storage/DatalakeGen2/Cmdlet/MoveAzDataLakeGen2Item.cs b/src/Storage/Storage/DatalakeGen2/Cmdlet/MoveAzDataLakeGen2Item.cs
index 3072fb3b71..4602d3893a 100644
--- a/src/Storage/Storage/DatalakeGen2/Cmdlet/MoveAzDataLakeGen2Item.cs
+++ b/src/Storage/Storage/DatalakeGen2/Cmdlet/MoveAzDataLakeGen2Item.cs
@@ -137,7 +137,7 @@ namespace Microsoft.WindowsAzure.Commands.Storage.Blob.Cmdlet
                         destExist = false;
                     }
 
-                    if (this.Force || !destExist || ShouldContinue(string.Format("Overwrite destination {0}", GetDataLakeItemUriWithoutSas(destBlobDir)), ""))
+                    if (this.Force || !destExist || ShouldContinue($"Overwrite destination {GetDataLakeItemUriWithoutSas(destBlobDir)}", ""))
                     {
                         destBlobDir = srcBlobDir.Rename(this.DestPath, this.DestFileSystem).Value;
                         WriteDataLakeGen2Item(localChannel, destBlobDir);
@@ -161,7 +161,7 @@ namespace Microsoft.WindowsAzure.Commands.Storage.Blob.Cmdlet
                         destExist = false;
                     }
 
-                    if (this.Force || !destExist || ShouldContinue(string.Format("Overwrite destination {0}", GetDataLakeItemUriWithoutSas(destFile)), ""))
+                    if (this.Force || !destExist || ShouldContinue($"Overwrite destination {GetDataLakeItemUriWithoutSas(destFile)}", ""))
                     {
                         destFile = srcBlob.Rename(this.DestPath, this.DestFileSystem).Value;
                         WriteDataLakeGen2Item(localChannel, destFile);
diff --git a/src/Storage/Storage/DatalakeGen2/Cmdlet/NewAzDataLakeGen2Item.cs b/src/Storage/Storage/DatalakeGen2/Cmdlet/NewAzDataLakeGen2Item.cs
index 1912033d80..85c6071dd7 100644
--- a/src/Storage/Storage/DatalakeGen2/Cmdlet/NewAzDataLakeGen2Item.cs
+++ b/src/Storage/Storage/DatalakeGen2/Cmdlet/NewAzDataLakeGen2Item.cs
@@ -178,7 +178,7 @@ namespace Microsoft.WindowsAzure.Commands.Storage.Blob.Cmdlet
                 {
                     if (dirClient.Exists())
                     {
-                        throw new ResourceAlreadyExistException(String.Format("Folder '{0}' already exists.", GetDataLakeItemUriWithoutSas(dirClient)));
+                        throw new ResourceAlreadyExistException($"Folder '{GetDataLakeItemUriWithoutSas(dirClient)}' already exists.");
                     }
                     DataLakeModels.PathPermissions pathPermissions = null;
                     if (this.Permission != null)
diff --git a/src/Storage/Storage/DatalakeGen2/Cmdlet/RemoveAzDataLakeGen2Item.cs b/src/Storage/Storage/DatalakeGen2/Cmdlet/RemoveAzDataLakeGen2Item.cs
index a4a274ce74..4cb56c3c44 100644
--- a/src/Storage/Storage/DatalakeGen2/Cmdlet/RemoveAzDataLakeGen2Item.cs
+++ b/src/Storage/Storage/DatalakeGen2/Cmdlet/RemoveAzDataLakeGen2Item.cs
@@ -129,14 +129,14 @@ namespace Microsoft.WindowsAzure.Commands.Storage.Blob.Cmdlet
 
             if (foundAFolder)
             {
-                if (force || ShouldContinue(string.Format("Remove Directory: {0}", GetDataLakeItemUriWithoutSas(dirClient)), ""))
+                if (force || ShouldContinue($"Remove Directory: {GetDataLakeItemUriWithoutSas(dirClient)}", ""))
                 {
                     dirClient.Delete(true);
                 }
             }
             else
             {
-                if (force || ShouldContinue(string.Format("Remove File: {0}", GetDataLakeItemUriWithoutSas(fileClient)), ""))
+                if (force || ShouldContinue($"Remove File: {GetDataLakeItemUriWithoutSas(fileClient)}", ""))
                 {
                     fileClient.Delete();
                 }
diff --git a/src/Storage/Storage/File/Cmdlet/CloseAzureStorageFileHandle.cs b/src/Storage/Storage/File/Cmdlet/CloseAzureStorageFileHandle.cs
index 61c725d41c..9b5152ef23 100644
--- a/src/Storage/Storage/File/Cmdlet/CloseAzureStorageFileHandle.cs
+++ b/src/Storage/Storage/File/Cmdlet/CloseAzureStorageFileHandle.cs
@@ -173,7 +173,7 @@ namespace Microsoft.WindowsAzure.Commands.Storage.File.Cmdlet
 
         public override void ExecuteCmdlet()
         {
-            if (this.ShouldProcess(string.Format("Close File Handles for File or FileDirectory on Path: {0}", this.Path != null? this.Path : (this.FileHandle != null? this.FileHandle.Path: null) ), "This operation will force the provided file handle(s) closed, which may cause data loss or corruption for active applications/users.", null))
+            if (this.ShouldProcess($"Close File Handles for File or FileDirectory on Path: {(this.Path != null ? this.Path : (this.FileHandle != null ? this.FileHandle.Path : null))}", "This operation will force the provided file handle(s) closed, which may cause data loss or corruption for active applications/users.", null))
             {
                 CloudFileDirectory baseDirectory = null;
                 switch (this.ParameterSetName)
@@ -245,7 +245,7 @@ namespace Microsoft.WindowsAzure.Commands.Storage.File.Cmdlet
                             // close single handle on fileDir
                             if (this.FileHandle.HandleId == null)
                             {
-                                throw new System.ArgumentException(string.Format("The HandleId of the FileHandle on path {0} should not be null.", this.FileHandle.Path), "FileHandle");
+                                throw new System.ArgumentException($"The HandleId of the FileHandle on path {this.FileHandle.Path} should not be null.", "FileHandle");
                             }
                             closeResult = targetDir.CloseHandleSegmented(this.FileHandle.HandleId.ToString(), continuationToken, Recursive, null, this.RequestOptions, this.OperationContext);
                         }
@@ -262,7 +262,7 @@ namespace Microsoft.WindowsAzure.Commands.Storage.File.Cmdlet
                             // close single handle on file
                             if (this.FileHandle.HandleId == null)
                             {
-                                throw new System.ArgumentException(string.Format("The HandleId of the FileHandle on path {0} should not be null.", this.FileHandle.Path), "FileHandle");
+                                throw new System.ArgumentException($"The HandleId of the FileHandle on path {this.FileHandle.Path} should not be null.", "FileHandle");
                             }
                             closeResult = targetFile.CloseHandleSegmented(this.FileHandle.HandleId.ToString(), continuationToken, null, this.RequestOptions, this.OperationContext);
                         }
@@ -274,7 +274,7 @@ namespace Microsoft.WindowsAzure.Commands.Storage.File.Cmdlet
                     }
                     numHandlesClosed += closeResult.NumHandlesClosed;
                     continuationToken = closeResult.ContinuationToken;
-                } while (continuationToken != null && continuationToken.NextMarker != null);
+                } while (continuationToken?.NextMarker != null);
 
                 if (PassThru)
                 {
diff --git a/src/Storage/Storage/File/Cmdlet/GetAzureStorageFileHandle.cs b/src/Storage/Storage/File/Cmdlet/GetAzureStorageFileHandle.cs
index 7207233b7d..46ac8ede53 100644
--- a/src/Storage/Storage/File/Cmdlet/GetAzureStorageFileHandle.cs
+++ b/src/Storage/Storage/File/Cmdlet/GetAzureStorageFileHandle.cs
@@ -184,7 +184,7 @@ namespace Microsoft.WindowsAzure.Commands.Storage.File.Cmdlet
                     }
                 }
                 continuationToken = listResult.ContinuationToken;
-            } while (continuationToken != null && continuationToken.NextMarker != null && currentCount < lastCount);
+            } while (continuationToken?.NextMarker != null && currentCount < lastCount);
 
             WriteObject(handleReturn, true);
         }
diff --git a/src/Storage/Storage/File/Cmdlet/RemoveAzureStorageShare.cs b/src/Storage/Storage/File/Cmdlet/RemoveAzureStorageShare.cs
index 9ff2eae777..4034f58e34 100644
--- a/src/Storage/Storage/File/Cmdlet/RemoveAzureStorageShare.cs
+++ b/src/Storage/Storage/File/Cmdlet/RemoveAzureStorageShare.cs
@@ -96,7 +96,7 @@ namespace Microsoft.WindowsAzure.Commands.Storage.File.Cmdlet
                         throw new PSArgumentException(string.Format(CultureInfo.InvariantCulture, "'IncludeAllSnapshot' should only be specified to delete a base share, and should not be specified to delete a Share snapshot: {0}", share.SnapshotQualifiedUri));
                     }
 
-                    if (force || ShareIsEmpty(share) || ShouldContinue(string.Format("Remove share and all content in it: {0}", share.Name), ""))
+                    if (force || ShareIsEmpty(share) || ShouldContinue($"Remove share and all content in it: {share.Name}", ""))
                     {
                         DeleteShareSnapshotsOption deleteShareSnapshotsOption = DeleteShareSnapshotsOption.None;
                         bool retryDeleteSnapshot = false;
@@ -128,14 +128,14 @@ namespace Microsoft.WindowsAzure.Commands.Storage.File.Cmdlet
 
                         if (retryDeleteSnapshot)
                         {
-                            if (force || await OutputStream.ConfirmAsync(string.Format("This share might have snapshots, remove the share and all snapshots?: {0}", share.Name)).ConfigureAwait(false))
+                            if (force || await OutputStream.ConfirmAsync($"This share might have snapshots, remove the share and all snapshots?: {share.Name}").ConfigureAwait(false))
                             {
                                 deleteShareSnapshotsOption = DeleteShareSnapshotsOption.IncludeSnapshots;
                                 await this.Channel.DeleteShareAsync(share, deleteShareSnapshotsOption, null, this.RequestOptions, this.OperationContext, this.CmdletCancellationToken).ConfigureAwait(false);
                             }
                             else
                             {
-                                string result = string.Format("The remove operation of share '{0}' has been cancelled.", share.Name);
+                                string result = $"The remove operation of share '{share.Name}' has been cancelled.";
                                 OutputStream.WriteVerbose(taskId, result);
                             }
                         }
diff --git a/src/Storage/Storage/File/StorageClientExtensions.cs b/src/Storage/Storage/File/StorageClientExtensions.cs
index f850e769a3..bbfc759b4f 100644
--- a/src/Storage/Storage/File/StorageClientExtensions.cs
+++ b/src/Storage/Storage/File/StorageClientExtensions.cs
@@ -91,14 +91,12 @@ namespace Microsoft.WindowsAzure.Commands.Storage.File
                 shareUri.Path = string.Concat(shareUri.Path, UriPathSeparator);
             }
 
-            CloudFile file = item as CloudFile;
-            if(file != null)
+            if(item is CloudFile file)
             {
                 return shareUri.Uri.MakeRelativeUri(file.SnapshotQualifiedUri).ToString();
             }
 
-            CloudFileDirectory dir = item as CloudFileDirectory;
-            if (dir != null)
+            if (item is CloudFileDirectory dir)
             {
                 return shareUri.Uri.MakeRelativeUri(dir.SnapshotQualifiedUri).ToString();
             }
diff --git a/src/Storage/Storage/Model/ResourceModel/PSCorsRule.cs b/src/Storage/Storage/Model/ResourceModel/PSCorsRule.cs
index b601a07603..6a41e033c9 100644
--- a/src/Storage/Storage/Model/ResourceModel/PSCorsRule.cs
+++ b/src/Storage/Storage/Model/ResourceModel/PSCorsRule.cs
@@ -41,7 +41,7 @@ namespace Microsoft.WindowsAzure.Commands.Storage.Model.ResourceModel
         {
             List<PSCorsRule> ruleList = new List<PSCorsRule>();
 
-            if (corsProperties != null && corsProperties.CorsRules != null)
+            if (corsProperties?.CorsRules != null)
             {
                 foreach (var corsRule in corsProperties.CorsRules)
                 {
@@ -67,7 +67,7 @@ namespace Microsoft.WindowsAzure.Commands.Storage.Model.ResourceModel
         {
             List<PSCorsRule> ruleList = new List<PSCorsRule>();
 
-            if (corsProperties != null && corsProperties.CorsRules != null)
+            if (corsProperties?.CorsRules != null)
             {
                 foreach (var corsRule in corsProperties.CorsRules)
                 {
diff --git a/src/Storage/Storage/Model/ResourceModel/PSPathAccessControl.cs b/src/Storage/Storage/Model/ResourceModel/PSPathAccessControl.cs
index b510c83225..6bcc74cbe3 100644
--- a/src/Storage/Storage/Model/ResourceModel/PSPathAccessControl.cs
+++ b/src/Storage/Storage/Model/ResourceModel/PSPathAccessControl.cs
@@ -46,7 +46,7 @@ namespace Microsoft.WindowsAzure.Commands.Storage.Model.ResourceModel
 
         public static List<PathAccessControlItem> ParseAccessControls(PSPathAccessControlEntry[] psacls)
         {
-            if (psacls == null || psacls.Count() == 0)
+            if (psacls == null || !psacls.Any())
             {
                 return null;
             }
@@ -66,7 +66,7 @@ namespace Microsoft.WindowsAzure.Commands.Storage.Model.ResourceModel
 
         public static List<RemovePathAccessControlItem> ParseRemoveAccessControls(PSPathAccessControlEntry[] psacls)
         {
-            if (psacls == null || psacls.Count() == 0)
+            if (psacls == null || !psacls.Any())
             {
                 return null;
             }
@@ -80,7 +80,7 @@ namespace Microsoft.WindowsAzure.Commands.Storage.Model.ResourceModel
 
         public static PSPathAccessControlEntry[] ParsePSPathAccessControlEntrys(IEnumerable<PathAccessControlItem> acls)
         {
-            if (acls == null || acls.Count() == 0)
+            if (acls == null || !acls.Any())
             {
                 return null;
             }
diff --git a/src/Storage/Storage/Queue/Cmdlet/RemoveAzureStorageQueue.cs b/src/Storage/Storage/Queue/Cmdlet/RemoveAzureStorageQueue.cs
index ef38ffdff1..fae4b63130 100644
--- a/src/Storage/Storage/Queue/Cmdlet/RemoveAzureStorageQueue.cs
+++ b/src/Storage/Storage/Queue/Cmdlet/RemoveAzureStorageQueue.cs
@@ -94,7 +94,7 @@ namespace Microsoft.WindowsAzure.Commands.Storage.Queue
                 throw new ResourceNotFoundException(String.Format(Resources.QueueNotFound, name));
             }
 
-            if (force || ShouldContinue(string.Format("Remove queue and all content in it: {0}", name), ""))
+            if (force || ShouldContinue($"Remove queue and all content in it: {name}", ""))
             {
                 Channel.DeleteQueue(queue, requestOptions, OperationContext);
                 return true;
diff --git a/src/Storage/Storage/Table/Cmdlet/RemoveStorageAzureTable.cs b/src/Storage/Storage/Table/Cmdlet/RemoveStorageAzureTable.cs
index 99b4e58060..1c93b04bb2 100644
--- a/src/Storage/Storage/Table/Cmdlet/RemoveStorageAzureTable.cs
+++ b/src/Storage/Storage/Table/Cmdlet/RemoveStorageAzureTable.cs
@@ -95,7 +95,7 @@ namespace Microsoft.WindowsAzure.Commands.Storage.Table.Cmdlet
                 throw new ResourceNotFoundException(String.Format(Resources.TableNotFound, name));
             }
 
-            if (force || TableIsEmpty(table) || ShouldContinue(string.Format("Remove table and all content in it: {0}", name), ""))
+            if (force || TableIsEmpty(table) || ShouldContinue($"Remove table and all content in it: {name}", ""))
             {
                 Channel.Delete(table, requestOptions, TableOperationContext);
                 return true;
diff --git a/src/StorageSync/StorageSync/Common/RegistryUtility.cs b/src/StorageSync/StorageSync/Common/RegistryUtility.cs
index 611538f708..b8aa1a215e 100644
--- a/src/StorageSync/StorageSync/Common/RegistryUtility.cs
+++ b/src/StorageSync/StorageSync/Common/RegistryUtility.cs
@@ -88,10 +88,7 @@ namespace Microsoft.Azure.Commands.StorageSync.Common
             {
                 using (var registryKey = Registry.LocalMachine.CreateSubKey(path))
                 {
-                    if (registryKey != null)
-                    {
-                        registryKey.SetValue(key, value, kind);
-                    }
+                    registryKey?.SetValue(key, value, kind);
                 }
             }
             catch (Exception) when (!throwException)
diff --git a/src/StorageSync/StorageSync/Interop/Clients/SyncServerCertificateRolloverClient.cs b/src/StorageSync/StorageSync/Interop/Clients/SyncServerCertificateRolloverClient.cs
index c8ec178d70..281978d553 100644
--- a/src/StorageSync/StorageSync/Interop/Clients/SyncServerCertificateRolloverClient.cs
+++ b/src/StorageSync/StorageSync/Interop/Clients/SyncServerCertificateRolloverClient.cs
@@ -85,10 +85,7 @@ namespace Commands.StorageSync.Interop.Clients
         {
             if (!m_isDisposed)
             {
-                if (EcsManagementInteropClient != null)
-                {
-                    EcsManagementInteropClient.Dispose();
-                }
+                EcsManagementInteropClient?.Dispose();
 
                 EcsManagementInteropClient = null;
                 m_isDisposed = true;
diff --git a/src/StorageSync/StorageSync/Interop/Clients/SyncServerRegistrationClientBase.cs b/src/StorageSync/StorageSync/Interop/Clients/SyncServerRegistrationClientBase.cs
index 05c7cb49f9..717e9b5fa6 100644
--- a/src/StorageSync/StorageSync/Interop/Clients/SyncServerRegistrationClientBase.cs
+++ b/src/StorageSync/StorageSync/Interop/Clients/SyncServerRegistrationClientBase.cs
@@ -99,10 +99,7 @@ namespace Commands.StorageSync.Interop.Clients
         {
             if (!m_isDisposed)
             {
-                if (EcsManagementInteropClient != null)
-                {
-                    EcsManagementInteropClient.Dispose();
-                }
+                EcsManagementInteropClient?.Dispose();
 
                 EcsManagementInteropClient = null;
                 m_isDisposed = true;
diff --git a/src/StorageSync/StorageSync/NamespaceValidationsProcessor.cs b/src/StorageSync/StorageSync/NamespaceValidationsProcessor.cs
index acc871a52b..de486be1ed 100644
--- a/src/StorageSync/StorageSync/NamespaceValidationsProcessor.cs
+++ b/src/StorageSync/StorageSync/NamespaceValidationsProcessor.cs
@@ -112,8 +112,7 @@ namespace Microsoft.Azure.Commands.StorageSync.Evaluation
         /// <param name="dir">The dir.</param>
         public void UnauthorizedDir(IDirectoryInfo dir)
         {
-            var firstValidation = _validations.FirstOrDefault() as IValidationDescription;
-            if (firstValidation != null)
+            if (_validations.FirstOrDefault() is IValidationDescription firstValidation)
             {
                 Broadcast(ValidationResult.UnauthorizedAccessDir(firstValidation.ValidationType, firstValidation.ValidationKind, dir));
             }
diff --git a/src/StorageSync/StorageSync/RegisteredServer/UnregisterServerCommand.cs b/src/StorageSync/StorageSync/RegisteredServer/UnregisterServerCommand.cs
index 133a8649cc..4a4c11f829 100644
--- a/src/StorageSync/StorageSync/RegisteredServer/UnregisterServerCommand.cs
+++ b/src/StorageSync/StorageSync/RegisteredServer/UnregisterServerCommand.cs
@@ -170,7 +170,7 @@ namespace Microsoft.Azure.Commands.StorageSync.Cmdlets
                 ActionMessage = StorageSyncResources.UnregisterServerActionMessage;
                 if (ShouldProcess(Target, ActionMessage))
                 {
-                    if (Force || ShouldContinue(string.Format("Remove Sync Server '{0}' and all content in it", resourceName), ""))
+                    if (Force || ShouldContinue($"Remove Sync Server '{resourceName}' and all content in it", ""))
                     {
                         StorageSyncClientWrapper.StorageSyncManagementClient.RegisteredServers.Delete(resourceGroupName, parentResourceName, resourceName);
                     }
diff --git a/src/StreamAnalytics/StreamAnalytics/Models/StreamAnalyticsClient.SubscriptionQuotas.cs b/src/StreamAnalytics/StreamAnalytics/Models/StreamAnalyticsClient.SubscriptionQuotas.cs
index 525bf3e95a..3ea499a8ab 100644
--- a/src/StreamAnalytics/StreamAnalytics/Models/StreamAnalyticsClient.SubscriptionQuotas.cs
+++ b/src/StreamAnalytics/StreamAnalytics/Models/StreamAnalyticsClient.SubscriptionQuotas.cs
@@ -24,7 +24,7 @@ namespace Microsoft.Azure.Commands.StreamAnalytics.Models
             List<PSQuota> quotas = new List<PSQuota>();
             var response = StreamAnalyticsManagementClient.Subscriptions.ListQuotas(location);
 
-            if (response != null && response.Value != null)
+            if (response?.Value != null)
             {
                 foreach (var quota in response.Value)
                 {
diff --git a/src/StreamAnalytics/StreamAnalytics/StreamAnalyticsBaseCmdlet.cs b/src/StreamAnalytics/StreamAnalytics/StreamAnalyticsBaseCmdlet.cs
index 4d29dc4223..1601c082da 100644
--- a/src/StreamAnalytics/StreamAnalytics/StreamAnalyticsBaseCmdlet.cs
+++ b/src/StreamAnalytics/StreamAnalytics/StreamAnalyticsBaseCmdlet.cs
@@ -47,8 +47,7 @@ namespace Microsoft.Azure.Commands.StreamAnalytics
         protected override void WriteExceptionError(Exception exception)
         {
             // Override the default error message into a formatted message which contains Request Id
-            CloudException cloudException = exception as CloudException;
-            if (cloudException != null)
+            if (exception is CloudException cloudException)
             {
                 exception = cloudException.CreateFormattedException();
             }
diff --git a/src/Support/Support/Communications/GetAzSupportTicketCommunication.cs b/src/Support/Support/Communications/GetAzSupportTicketCommunication.cs
index c72f5352a7..41016b37a1 100644
--- a/src/Support/Support/Communications/GetAzSupportTicketCommunication.cs
+++ b/src/Support/Support/Communications/GetAzSupportTicketCommunication.cs
@@ -82,8 +82,7 @@ namespace Microsoft.Azure.Commands.Support.Communications
             }
             catch (ExceptionResponseException ex)
             {
-                throw new PSArgumentException(string.Format("Error response received. Error Message: '{0}'",
-                                     ex.Response.Content));
+                throw new PSArgumentException($"Error response received. Error Message: '{ex.Response.Content}'");
             }
         }
 
diff --git a/src/Support/Support/Communications/NewAzSupportTicketCommunication.cs b/src/Support/Support/Communications/NewAzSupportTicketCommunication.cs
index 70361367bb..670a298fd2 100644
--- a/src/Support/Support/Communications/NewAzSupportTicketCommunication.cs
+++ b/src/Support/Support/Communications/NewAzSupportTicketCommunication.cs
@@ -73,7 +73,7 @@ namespace Microsoft.Azure.Commands.Support.Communications
 
                 if (checkNameResult.NameAvailable.HasValue && !checkNameResult.NameAvailable.Value)
                 {
-                    throw new PSArgumentException(string.Format("A Communication with name '{0}' for SupportTicket '{1}' already exists.", this.Name, this.SupportTicketName));
+                    throw new PSArgumentException($"A Communication with name '{this.Name}' for SupportTicket '{this.SupportTicketName}' already exists.");
                 }
 
                 var communicationDetails = new CommunicationDetails
@@ -83,7 +83,7 @@ namespace Microsoft.Azure.Commands.Support.Communications
                     Sender = this.Sender
                 };
 
-                if (this.ShouldProcess(this.Name, string.Format("Creating a new Communication for SupportTicket '{0}' with name '{1}'.", this.SupportTicketName, this.Name)))
+                if (this.ShouldProcess(this.Name, $"Creating a new Communication for SupportTicket '{this.SupportTicketName}' with name '{this.Name}'."))
                 {
                     var result = this.SupportClient.Communications.Create(this.SupportTicketName, this.Name, communicationDetails);
                     this.WriteObject(result.ToPSSupportTicketCommunication());
@@ -91,8 +91,7 @@ namespace Microsoft.Azure.Commands.Support.Communications
             }
             catch (ExceptionResponseException ex)
             {
-                throw new PSArgumentException(string.Format("Error response received. Error Message: '{0}'",
-                                     ex.Response.Content));
+                throw new PSArgumentException($"Error response received. Error Message: '{ex.Response.Content}'");
             }
         }
     }
diff --git a/src/Support/Support/Helpers/ResourceIdentifierHelper.cs b/src/Support/Support/Helpers/ResourceIdentifierHelper.cs
index bfdb3b8845..9f3155d284 100644
--- a/src/Support/Support/Helpers/ResourceIdentifierHelper.cs
+++ b/src/Support/Support/Helpers/ResourceIdentifierHelper.cs
@@ -122,7 +122,7 @@ namespace Microsoft.Azure.Commands.Support.Helpers
                     };
 
                 default:
-                    throw new PSArgumentException(string.Format("Unsupported resource type {0}", resourceType));
+                    throw new PSArgumentException($"Unsupported resource type {resourceType}");
             }
         }
     }
diff --git a/src/Support/Support/ProblemClassifications/GetAzSupportProblemClassification.cs b/src/Support/Support/ProblemClassifications/GetAzSupportProblemClassification.cs
index e027c805e9..8e2a9e29c2 100644
--- a/src/Support/Support/ProblemClassifications/GetAzSupportProblemClassification.cs
+++ b/src/Support/Support/ProblemClassifications/GetAzSupportProblemClassification.cs
@@ -70,8 +70,7 @@ namespace Microsoft.Azure.Commands.Support.ProblemClassifications
             }
             catch (ExceptionResponseException ex)
             {
-                throw new PSArgumentException(string.Format("Error response received. Error Message: '{0}'",
-                                     ex.Response.Content));
+                throw new PSArgumentException($"Error response received. Error Message: '{ex.Response.Content}'");
             }
         }
     }
diff --git a/src/Support/Support/Services/GetAzSupportService.cs b/src/Support/Support/Services/GetAzSupportService.cs
index 8d79606470..6d0dbe1584 100644
--- a/src/Support/Support/Services/GetAzSupportService.cs
+++ b/src/Support/Support/Services/GetAzSupportService.cs
@@ -52,8 +52,7 @@ namespace Microsoft.Azure.Commands.Support.Services
             }
             catch (ExceptionResponseException ex)
             {
-                throw new PSArgumentException(string.Format("Error response received. Error Message: '{0}'",
-                                     ex.Response.Content));
+                throw new PSArgumentException($"Error response received. Error Message: '{ex.Response.Content}'");
             }
         }
     }
diff --git a/src/Support/Support/SupportTickets/GetAzSupportTicket.cs b/src/Support/Support/SupportTickets/GetAzSupportTicket.cs
index 5dc7a0c5f1..37fdcd5749 100644
--- a/src/Support/Support/SupportTickets/GetAzSupportTicket.cs
+++ b/src/Support/Support/SupportTickets/GetAzSupportTicket.cs
@@ -67,8 +67,7 @@ namespace Microsoft.Azure.Commands.Support.SupportTickets
             }
             catch (ExceptionResponseException ex)
             {
-                throw new PSArgumentException(string.Format("Error response received. Error Message: '{0}'",
-                                     ex.Response.Content));
+                throw new PSArgumentException($"Error response received. Error Message: '{ex.Response.Content}'");
             }
         }
 
diff --git a/src/Support/Support/SupportTickets/NewAzSupportTicket.cs b/src/Support/Support/SupportTickets/NewAzSupportTicket.cs
index 8ba88cf2b7..6a6c60782b 100644
--- a/src/Support/Support/SupportTickets/NewAzSupportTicket.cs
+++ b/src/Support/Support/SupportTickets/NewAzSupportTicket.cs
@@ -157,7 +157,7 @@ namespace Microsoft.Azure.Commands.Support.SupportTickets
                 {
                     if (this.ProblemStartTime == DateTime.MinValue || this.ProblemStartTime > DateTime.Now)
                     {
-                        throw new PSArgumentException(string.Format("ProblemStartTime {0} is not valid.", this.ProblemStartTime));
+                        throw new PSArgumentException($"ProblemStartTime {this.ProblemStartTime} is not valid.");
                     }
                 }
 
@@ -174,7 +174,7 @@ namespace Microsoft.Azure.Commands.Support.SupportTickets
                 if (checkNameAvailabilityResult.NameAvailable.HasValue &&
                     !checkNameAvailabilityResult.NameAvailable.Value)
                 {
-                    throw new PSArgumentException(string.Format("A SupportTicket with name '{0}' cannot be created for the reason {1}.", this.Name, checkNameAvailabilityResult.Reason));
+                    throw new PSArgumentException($"A SupportTicket with name '{this.Name}' cannot be created for the reason {checkNameAvailabilityResult.Reason}.");
                 }
 
                 if (this.IsParameterBound(c => c.TechnicalTicketResourceId))
@@ -183,7 +183,7 @@ namespace Microsoft.Azure.Commands.Support.SupportTickets
 
                     if (!technicalResourceId.Subscription.Equals(this.SupportClient.SubscriptionId, StringComparison.OrdinalIgnoreCase))
                     {
-                        throw new PSArgumentException(string.Format("TechnicalResourceId {0} does not belong to subscription {1}.", this.TechnicalTicketResourceId, this.SupportClient.SubscriptionId));
+                        throw new PSArgumentException($"TechnicalResourceId {this.TechnicalTicketResourceId} does not belong to subscription {this.SupportClient.SubscriptionId}.");
                     }
 
                 }
@@ -193,7 +193,7 @@ namespace Microsoft.Azure.Commands.Support.SupportTickets
                 {
                     if (!Guid.TryParse(this.CSPHomeTenantId, out var result))
                     {
-                        throw new PSArgumentException(string.Format("CSPHomeTenantId {0} is not a valid Guid.", this.CSPHomeTenantId));
+                        throw new PSArgumentException($"CSPHomeTenantId {this.CSPHomeTenantId} is not a valid Guid.");
                     }
 
                     var auxToken = AzureSession.Instance.AuthenticationFactory.Authenticate(this.DefaultContext.Account, this.DefaultContext.Environment, this.CSPHomeTenantId, null, "Never", null);
@@ -237,7 +237,7 @@ namespace Microsoft.Azure.Commands.Support.SupportTickets
                     QuotaTicketDetail = this.QuotaTicketDetail,
                 };
 
-                if (this.ShouldProcess(this.Name, string.Format("Creating a new SupportTicket with name '{0}'.", this.Name)))
+                if (this.ShouldProcess(this.Name, $"Creating a new SupportTicket with name '{this.Name}'."))
                 {
                     var sdkSupportTicket = supportTicket.ToSdkSupportTicket();
                     var result = this.SupportClient.CreateSupportTicketForSubscription(this.Name, sdkSupportTicket, customHeaders);
@@ -247,8 +247,7 @@ namespace Microsoft.Azure.Commands.Support.SupportTickets
             }
             catch (ExceptionResponseException ex)
             {
-                throw new PSArgumentException(string.Format("Error response received. Error Message: '{0}'",
-                                     ex.Response.Content));
+                throw new PSArgumentException($"Error response received. Error Message: '{ex.Response.Content}'");
             }
         }
     }
diff --git a/src/Support/Support/SupportTickets/UpdateAzSupportTicket.cs b/src/Support/Support/SupportTickets/UpdateAzSupportTicket.cs
index cc3a7eea64..1f0926463c 100644
--- a/src/Support/Support/SupportTickets/UpdateAzSupportTicket.cs
+++ b/src/Support/Support/SupportTickets/UpdateAzSupportTicket.cs
@@ -156,7 +156,7 @@ namespace Microsoft.Azure.Commands.Support.SupportTickets
 
                 updateSupportTicket.ContactDetails = updateContactProfile;
 
-                if (this.ShouldProcess(this.Name, string.Format("Updating SupportTicket '{0}'.", this.Name)))
+                if (this.ShouldProcess(this.Name, $"Updating SupportTicket '{this.Name}'."))
                 {
                     var result = this.SupportClient.SupportTickets.Update(this.Name, updateSupportTicket);
                     this.WriteObject(result.ToPSSupportTicket());
@@ -164,8 +164,7 @@ namespace Microsoft.Azure.Commands.Support.SupportTickets
             }
             catch (ExceptionResponseException ex)
             {
-                throw new PSArgumentException(string.Format("Error response received. Error Message: '{0}'",
-                                     ex.Response.Content));
+                throw new PSArgumentException($"Error response received. Error Message: '{ex.Response.Content}'");
             }
         }
     }
diff --git a/src/Synapse/Synapse.Test/ScenarioTests/IntegrationRuntimeTests.cs b/src/Synapse/Synapse.Test/ScenarioTests/IntegrationRuntimeTests.cs
index dd1a5fc238..99edee3e4f 100644
--- a/src/Synapse/Synapse.Test/ScenarioTests/IntegrationRuntimeTests.cs
+++ b/src/Synapse/Synapse.Test/ScenarioTests/IntegrationRuntimeTests.cs
@@ -76,10 +76,7 @@ namespace Microsoft.Azure.Commands.Synapse.Test.ScenarioTests
 
             SynapseTestBase.NewInstance.RunPsTest(
                 _logger,
-                string.Format(
-                "Test-IntegrationRuntime-Piping -resourceGroupName '{0}' -workspaceName '{1}'",
-                testResourceGroupName,
-                testWorkspaceName));
+                $"Test-IntegrationRuntime-Piping -resourceGroupName '{testResourceGroupName}' -workspaceName '{testWorkspaceName}'");
         }
     }
 }
diff --git a/src/Synapse/Synapse.Test/ScenarioTests/SparkJobTests.cs b/src/Synapse/Synapse.Test/ScenarioTests/SparkJobTests.cs
index b9f8c3c302..bd46c86f1b 100644
--- a/src/Synapse/Synapse.Test/ScenarioTests/SparkJobTests.cs
+++ b/src/Synapse/Synapse.Test/ScenarioTests/SparkJobTests.cs
@@ -44,11 +44,7 @@ namespace Microsoft.Azure.Commands.Synapse.Test.ScenarioTests
 
             SynapseTestBase.NewInstance.RunPsTest(
                 _logger,
-                string.Format(
-                "Test-SynapseSparkJob -resourceGroupname '{0}' -workspaceName '{1}' -sparkPoolName {2}",
-                resourceGroupName,
-                testWorkspaceName,
-                testSparkPoolName));
+                $"Test-SynapseSparkJob -resourceGroupname '{resourceGroupName}' -workspaceName '{testWorkspaceName}' -sparkPoolName {testSparkPoolName}");
         }
     }
 }
diff --git a/src/Synapse/Synapse.Test/ScenarioTests/SqlDatabaseTests.cs b/src/Synapse/Synapse.Test/ScenarioTests/SqlDatabaseTests.cs
index ff1907c57e..0cbc90140b 100644
--- a/src/Synapse/Synapse.Test/ScenarioTests/SqlDatabaseTests.cs
+++ b/src/Synapse/Synapse.Test/ScenarioTests/SqlDatabaseTests.cs
@@ -46,10 +46,7 @@ namespace Microsoft.Azure.Commands.Synapse.Test.ScenarioTests
 
             SynapseTestBase.NewInstance.RunPsTest(
                 _logger,
-                string.Format(
-                "Test-SynapseSqlDatabase -resourceGroupName '{0}' -workspaceName '{1}'",
-                testResourceGroupName,
-                testWorkspaceName));
+                $"Test-SynapseSqlDatabase -resourceGroupName '{testResourceGroupName}' -workspaceName '{testWorkspaceName}'");
         }
     }
 }
diff --git a/src/Synapse/Synapse.Test/ScenarioTests/SqlPoolV3Tests.cs b/src/Synapse/Synapse.Test/ScenarioTests/SqlPoolV3Tests.cs
index 94f4358e90..b185b7f6b0 100644
--- a/src/Synapse/Synapse.Test/ScenarioTests/SqlPoolV3Tests.cs
+++ b/src/Synapse/Synapse.Test/ScenarioTests/SqlPoolV3Tests.cs
@@ -46,10 +46,7 @@ namespace Microsoft.Azure.Commands.Synapse.Test.ScenarioTests
 
             SynapseTestBase.NewInstance.RunPsTest(
                 _logger,
-                string.Format(
-                "Test-SynapseSqlPoolV3 -resourceGroupName '{0}' -workspaceName '{1}'",
-                testResourceGroupName,
-                testWorkspaceName));
+                $"Test-SynapseSqlPoolV3 -resourceGroupName '{testResourceGroupName}' -workspaceName '{testWorkspaceName}'");
         }
     }
 }
diff --git a/src/Synapse/Synapse/Commands/ManagementCommands/IntegrationRuntimes/GetAzureSynapseIntegrationRuntimeNode.cs b/src/Synapse/Synapse/Commands/ManagementCommands/IntegrationRuntimes/GetAzureSynapseIntegrationRuntimeNode.cs
index af0cbe5a6a..59e54fcca0 100644
--- a/src/Synapse/Synapse/Commands/ManagementCommands/IntegrationRuntimes/GetAzureSynapseIntegrationRuntimeNode.cs
+++ b/src/Synapse/Synapse/Commands/ManagementCommands/IntegrationRuntimes/GetAzureSynapseIntegrationRuntimeNode.cs
@@ -94,8 +94,7 @@ namespace Microsoft.Azure.Commands.Synapse
             var status = SynapseAnalyticsClient.GetIntegrationRuntimeStatusAsync(ResourceGroupName, WorkspaceName,
                 IntegrationRuntimeName).ConfigureAwait(false).GetAwaiter().GetResult();
 
-            var managedStatus = status as PSManagedIntegrationRuntimeStatus;
-            if (managedStatus != null)
+            if (status is PSManagedIntegrationRuntimeStatus managedStatus)
             {
                 if (IpAddress.IsPresent)
                 {
@@ -123,8 +122,7 @@ namespace Microsoft.Azure.Commands.Synapse
                 WriteObject(new PSManagedIntegrationRuntimeNode(ResourceGroupName, WorkspaceName, IntegrationRuntimeName, Name, node));
             }
 
-            var selfHostedStatus = status as PSSelfHostedIntegrationRuntimeStatus;
-            if (selfHostedStatus != null)
+            if (status is PSSelfHostedIntegrationRuntimeStatus selfHostedStatus)
             {
                 var node = selfHostedStatus.Nodes.FirstOrDefault(n => n.NodeName == Name);
                 if (node == null)
diff --git a/src/Synapse/Synapse/Commands/ManagementCommands/IntegrationRuntimes/SetAzureSynapseIntegrationRuntime.cs b/src/Synapse/Synapse/Commands/ManagementCommands/IntegrationRuntimes/SetAzureSynapseIntegrationRuntime.cs
index 64d8832c93..902527fd6a 100644
--- a/src/Synapse/Synapse/Commands/ManagementCommands/IntegrationRuntimes/SetAzureSynapseIntegrationRuntime.cs
+++ b/src/Synapse/Synapse/Commands/ManagementCommands/IntegrationRuntimes/SetAzureSynapseIntegrationRuntime.cs
@@ -449,8 +449,7 @@ namespace Microsoft.Azure.Commands.Synapse
 
             if (!string.IsNullOrWhiteSpace(SharedIntegrationRuntimeResourceId))
             {
-                var selfHostedIr = resource.Properties as SelfHostedIntegrationRuntime;
-                if (selfHostedIr != null)
+                if (resource.Properties is SelfHostedIntegrationRuntime selfHostedIr)
                 {
                     selfHostedIr.LinkedInfo = new LinkedIntegrationRuntimeRbacAuthorization(SharedIntegrationRuntimeResourceId);
                 }
@@ -469,8 +468,7 @@ namespace Microsoft.Azure.Commands.Synapse
                 resource.Properties.Description = Description;
             }
 
-            var managedIr = resource.Properties as ManagedIntegrationRuntime;
-            if (managedIr != null)
+            if (resource.Properties is ManagedIntegrationRuntime managedIr)
             {
                 HandleManagedIntegrationRuntime(managedIr);
             }
diff --git a/src/Synapse/Synapse/Commands/ManagementCommands/ThreatDetection/UpdateAzureSynapseSqlAdvancedThreatProtectionSetting.cs b/src/Synapse/Synapse/Commands/ManagementCommands/ThreatDetection/UpdateAzureSynapseSqlAdvancedThreatProtectionSetting.cs
index 11c3e63e54..7b3c6e03f7 100644
--- a/src/Synapse/Synapse/Commands/ManagementCommands/ThreatDetection/UpdateAzureSynapseSqlAdvancedThreatProtectionSetting.cs
+++ b/src/Synapse/Synapse/Commands/ManagementCommands/ThreatDetection/UpdateAzureSynapseSqlAdvancedThreatProtectionSetting.cs
@@ -119,8 +119,7 @@ namespace Microsoft.Azure.Commands.Synapse
 
             if (this.IsParameterBound(c => c.StorageAccountName))
             {
-                policy.StorageEndpoint = string.Format("https://{0}.blob.{1}", this.StorageAccountName,
-                    DefaultContext.Environment.GetEndpoint(AzureEnvironment.Endpoint.StorageEndpointSuffix));
+                policy.StorageEndpoint = $"https://{this.StorageAccountName}.blob.{DefaultContext.Environment.GetEndpoint(AzureEnvironment.Endpoint.StorageEndpointSuffix)}";
             }
 
             if (!string.IsNullOrEmpty(policy.StorageEndpoint))
diff --git a/src/Synapse/Synapse/Commands/ManagementCommands/ThreatDetection/UpdateAzureSynapseSqlPoolAdvancedThreatProtectionSetting.cs b/src/Synapse/Synapse/Commands/ManagementCommands/ThreatDetection/UpdateAzureSynapseSqlPoolAdvancedThreatProtectionSetting.cs
index 75fb36f44e..f0a86efbc0 100644
--- a/src/Synapse/Synapse/Commands/ManagementCommands/ThreatDetection/UpdateAzureSynapseSqlPoolAdvancedThreatProtectionSetting.cs
+++ b/src/Synapse/Synapse/Commands/ManagementCommands/ThreatDetection/UpdateAzureSynapseSqlPoolAdvancedThreatProtectionSetting.cs
@@ -142,8 +142,7 @@ namespace Microsoft.Azure.Commands.Synapse
 
             if (this.IsParameterBound(c => c.StorageAccountName))
             {
-                policy.StorageEndpoint = string.Format("https://{0}.blob.{1}", this.StorageAccountName,
-                    DefaultContext.Environment.GetEndpoint(AzureEnvironment.Endpoint.StorageEndpointSuffix));
+                policy.StorageEndpoint = $"https://{this.StorageAccountName}.blob.{DefaultContext.Environment.GetEndpoint(AzureEnvironment.Endpoint.StorageEndpointSuffix)}";
             }
 
             if (!string.IsNullOrEmpty(policy.StorageEndpoint))
diff --git a/src/Synapse/Synapse/Commands/ManagementCommands/Workspace/NewAzureSynapseWorkspace.cs b/src/Synapse/Synapse/Commands/ManagementCommands/Workspace/NewAzureSynapseWorkspace.cs
index aeeef5ed01..eec2a84dda 100644
--- a/src/Synapse/Synapse/Commands/ManagementCommands/Workspace/NewAzureSynapseWorkspace.cs
+++ b/src/Synapse/Synapse/Commands/ManagementCommands/Workspace/NewAzureSynapseWorkspace.cs
@@ -87,10 +87,7 @@ namespace Microsoft.Azure.Commands.Synaspe
                 }
             }
 
-            var defaultDataLakeStorageAccountUrl = string.Format(
-                "https://{0}.dfs.{1}",
-                this.DefaultDataLakeStorageAccountName,
-                this.DefaultContext.Environment.StorageEndpointSuffix);
+            var defaultDataLakeStorageAccountUrl = $"https://{this.DefaultDataLakeStorageAccountName}.dfs.{this.DefaultContext.Environment.StorageEndpointSuffix}";
             var createParams = new Workspace
             {
                 Tags = TagsConversionHelper.CreateTagDictionary(this.Tag, validate: true),
diff --git a/src/Synapse/Synapse/Common/Utils.cs b/src/Synapse/Synapse/Common/Utils.cs
index 568c8210ad..6c2eaa4aa2 100644
--- a/src/Synapse/Synapse/Common/Utils.cs
+++ b/src/Synapse/Synapse/Common/Utils.cs
@@ -163,9 +163,7 @@ namespace Microsoft.Azure.Commands.Synapse.Common
             }
 
             var emailRegex =
-                new Regex(string.Format("{0}{1}",
-                    @"^(?("")("".+?(?<!\\)""@)|(([0-9a-z]((\.(?!\.))|[-!#\$%&'\*\+/=\?\^`\{\}\|~\w])*)(?<=[0-9a-z])@))",
-                    @"(?(\[)(\[(\d{1,3}\.){3}\d{1,3}\])|(([0-9a-z][-\w]*[0-9a-z]*\.)+[a-z0-9][\-a-z0-9]{0,22}[a-z0-9]))$"));
+                new Regex($"{@"^(?("")("".+?(?<!\\)""@)|(([0-9a-z]((\.(?!\.))|[-!#\$%&'\*\+/=\?\^`\{\}\|~\w])*)(?<=[0-9a-z])@))"}{@"(?(\[)(\[(\d{1,3}\.){3}\d{1,3}\])|(([0-9a-z][-\w]*[0-9a-z]*\.)+[a-z0-9][\-a-z0-9]{0,22}[a-z0-9]))$"}");
             return !emailAddresses.Any(e => !emailRegex.IsMatch(e.ToLower()));
         }
 
diff --git a/src/Synapse/Synapse/Models/AbfsUri.cs b/src/Synapse/Synapse/Models/AbfsUri.cs
index 838ba6aaa6..f20f8a281d 100644
--- a/src/Synapse/Synapse/Models/AbfsUri.cs
+++ b/src/Synapse/Synapse/Models/AbfsUri.cs
@@ -31,8 +31,7 @@ namespace Microsoft.Azure.Commands.Synapse.Models
                 schema = "abfss";
             }
 
-            return new Uri(string.Format("{0}://{1}@{2}.dfs.{3}{4}",
-                    schema, FileSystem, AccountName, StorageEndpointSuffix, RelativePath));
+            return new Uri($"{schema}://{FileSystem}@{AccountName}.dfs.{StorageEndpointSuffix}{RelativePath}");
         }
 
         public static AbfsUri Parse(string rawUri)
diff --git a/src/Synapse/Synapse/Models/AzureSynapseSqlManagementCmdletBase.cs b/src/Synapse/Synapse/Models/AzureSynapseSqlManagementCmdletBase.cs
index c20196fe94..a1bfd3ecdb 100644
--- a/src/Synapse/Synapse/Models/AzureSynapseSqlManagementCmdletBase.cs
+++ b/src/Synapse/Synapse/Models/AzureSynapseSqlManagementCmdletBase.cs
@@ -35,7 +35,7 @@ namespace Microsoft.Azure.Commands.Synapse.Models
             {
                 if (!string.IsNullOrEmpty(sqlPoolName))
                 {
-                    return string.Format("{0}.{1}", workspaceName, sqlPoolName);
+                    return $"{workspaceName}.{sqlPoolName}";
                 }
                 return workspaceName;
             }
diff --git a/src/Synapse/Synapse/Models/DataClassification/SensitivityClassificationModel.cs b/src/Synapse/Synapse/Models/DataClassification/SensitivityClassificationModel.cs
index be83525a83..d1ca2330a6 100644
--- a/src/Synapse/Synapse/Models/DataClassification/SensitivityClassificationModel.cs
+++ b/src/Synapse/Synapse/Models/DataClassification/SensitivityClassificationModel.cs
@@ -55,10 +55,10 @@ namespace Microsoft.Azure.Commands.Synapse.Models.DataClassification
 
 
             int existingLabelsIndex = 0;
-            int existingLabelsCount = existingLabels.Count();
+            int existingLabelsCount = existingLabels.Count;
 
             int newLabelsIndex = 0;
-            int newLabelsCount = newLabels.Count();
+            int newLabelsCount = newLabels.Count;
 
             while (existingLabelsIndex < existingLabelsCount && newLabelsIndex < newLabelsCount)
             {
diff --git a/src/Synapse/Synapse/Models/LivyStatementOutputParser.cs b/src/Synapse/Synapse/Models/LivyStatementOutputParser.cs
index 13c8a50787..d524b29680 100644
--- a/src/Synapse/Synapse/Models/LivyStatementOutputParser.cs
+++ b/src/Synapse/Synapse/Models/LivyStatementOutputParser.cs
@@ -16,9 +16,9 @@ namespace Microsoft.Azure.Commands.Synapse.Models
     {
         public static object Parse(object rawLivyOutput)
         {
-            if (rawLivyOutput is JObject)
+            if (rawLivyOutput is JObject jObject)
             {
-                return Parse((JObject)rawLivyOutput);
+                return Parse(jObject);
             }
 
             return rawLivyOutput;
diff --git a/src/Synapse/Synapse/Models/PSSynapseExtendedSparkStatement.cs b/src/Synapse/Synapse/Models/PSSynapseExtendedSparkStatement.cs
index 89b78f480b..8522fc8d4a 100644
--- a/src/Synapse/Synapse/Models/PSSynapseExtendedSparkStatement.cs
+++ b/src/Synapse/Synapse/Models/PSSynapseExtendedSparkStatement.cs
@@ -28,9 +28,8 @@ namespace Microsoft.Azure.Commands.Synapse.Models
             if (SparkSessionStatementLivyState.Ok.Equals(livyOutput.Status, StringComparison.OrdinalIgnoreCase))
             {
                 var parsedData = LivyStatementOutputParser.Parse(livyOutput.Data);
-                if (parsedData is IList<PSSynapseLivyStatementOutputData>)
+                if (parsedData is IList<PSSynapseLivyStatementOutputData> outputs)
                 {
-                    var outputs = (IList<PSSynapseLivyStatementOutputData>)parsedData;
                     var contents = outputs.Where(o => o.ContentType == ContentType.TextPlain && o.Content is string).Select(o => (string)o.Content);
                     return string.Join(Environment.NewLine, contents);
                 }
diff --git a/src/Synapse/Synapse/Models/SynapseAnalyticsManagementClient.cs b/src/Synapse/Synapse/Models/SynapseAnalyticsManagementClient.cs
index ec365ecf3b..17bd310822 100644
--- a/src/Synapse/Synapse/Models/SynapseAnalyticsManagementClient.cs
+++ b/src/Synapse/Synapse/Models/SynapseAnalyticsManagementClient.cs
@@ -480,7 +480,7 @@ namespace Microsoft.Azure.Commands.Synapse.Models
             var userList = ActiveDirectoryClient.FilterUsers(filter).Where(gr => string.Equals(gr.DisplayName, displayName, StringComparison.OrdinalIgnoreCase));
 
             // No user was found. Check if the display name is a UPN
-            if (userList == null || userList.Count() == 0)
+            if (userList == null || !userList.Any())
             {
                 // Check if the display name is the UPN
                 filter = new ADObjectFilterOptions()
@@ -494,7 +494,7 @@ namespace Microsoft.Azure.Commands.Synapse.Models
             }
 
             // No user was found. Check if the display name is a guest user. 
-            if (userList == null || userList.Count() == 0)
+            if (userList == null || !userList.Any())
             {
                 // Check if the display name is the UPN
                 filter = new ADObjectFilterOptions()
@@ -508,7 +508,7 @@ namespace Microsoft.Azure.Commands.Synapse.Models
             }
 
             // No user was found
-            if (userList == null || userList.Count() == 0)
+            if (userList == null || !userList.Any())
             {
                 throw new ArgumentException(string.Format(Resources.ADObjectNotFound, displayName));
             }
@@ -588,16 +588,13 @@ namespace Microsoft.Azure.Commands.Synapse.Models
         private AuditActionGroup[] ExtractAuditActionGroups(IEnumerable<string> auditActionsAndGroups)
         {
             var groups = new List<AuditActionGroup>();
-            if (auditActionsAndGroups != null)
-            {
-                auditActionsAndGroups.ForEach(item =>
-                {
-                    if (Enum.TryParse(item, true, out AuditActionGroup group))
-                    {
-                        groups.Add(group);
-                    }
-                });
-            }
+            auditActionsAndGroups?.ForEach(item =>
+{
+    if (Enum.TryParse(item, true, out AuditActionGroup group))
+    {
+        groups.Add(group);
+    }
+});
 
             return groups.ToArray();
         }
@@ -605,16 +602,13 @@ namespace Microsoft.Azure.Commands.Synapse.Models
         private string[] ExtractAuditActions(IEnumerable<string> auditActionsAndGroups)
         {
             var actions = new List<string>();
-            if (auditActionsAndGroups != null)
-            {
-                auditActionsAndGroups.ForEach(item =>
-                {
-                    if (!Enum.TryParse(item, true, out AuditActionGroup group))
-                    {
-                        actions.Add(item);
-                    }
-                });
-            }
+            auditActionsAndGroups?.ForEach(item =>
+{
+    if (!Enum.TryParse(item, true, out AuditActionGroup group))
+    {
+        actions.Add(item);
+    }
+});
 
             return actions.ToArray();
         }
@@ -764,7 +758,7 @@ namespace Microsoft.Azure.Commands.Synapse.Models
                 string[] segments = storageAccountResourceId.Split('/');
                 Guid storageAccountSubscriptionId = Guid.Parse(segments[0]);
                 string storageAccountName = segments[6];
-                policy.StorageEndpoint = string.Format("https://{0}.blob.{1}", storageAccountName, Context.Environment.GetEndpoint(AzureEnvironment.Endpoint.StorageEndpointSuffix));
+                policy.StorageEndpoint = $"https://{storageAccountName}.blob.{Context.Environment.GetEndpoint(AzureEnvironment.Endpoint.StorageEndpointSuffix)}";
                 policy.StorageAccountSubscriptionId = storageAccountSubscriptionId;
 
                 if (IsStorageAccountInVNet(model.StorageAccountResourceId))
@@ -1353,7 +1347,7 @@ namespace Microsoft.Azure.Commands.Synapse.Models
             return new StorageContainerInfo
             {
                 StorageAccountAccessKey = key,
-                StorageContainerPath = string.Format("{0}{1}", storageAccountBlobPrimaryEndpoints, containerName)
+                StorageContainerPath = $"{storageAccountBlobPrimaryEndpoints}{containerName}"
             };
         }
 
diff --git a/src/Synapse/Synapse/Models/VulnerabilityAssessment/VulnerabilityAssessmentEndpointsCommunicator.cs b/src/Synapse/Synapse/Models/VulnerabilityAssessment/VulnerabilityAssessmentEndpointsCommunicator.cs
index 8d3e41ef20..b486b604ea 100644
--- a/src/Synapse/Synapse/Models/VulnerabilityAssessment/VulnerabilityAssessmentEndpointsCommunicator.cs
+++ b/src/Synapse/Synapse/Models/VulnerabilityAssessment/VulnerabilityAssessmentEndpointsCommunicator.cs
@@ -113,7 +113,7 @@ namespace Microsoft.Azure.Commands.Synapse.Models.VulnerabilityAssessment
             return new StorageContainerInfo
             {
                 StorageAccountAccessKey = key,
-                StorageContainerPath = string.Format("{0}{1}", storageAccountBlobPrimaryEndpoints, containerName)
+                StorageContainerPath = $"{storageAccountBlobPrimaryEndpoints}{containerName}"
             };
         }
 
diff --git a/src/TimeSeriesInsights/generated/runtime/Serialization/JsonSerializer.cs b/src/TimeSeriesInsights/generated/runtime/Serialization/JsonSerializer.cs
index 2b8fc1e95c..f1bed48393 100644
--- a/src/TimeSeriesInsights/generated/runtime/Serialization/JsonSerializer.cs
+++ b/src/TimeSeriesInsights/generated/runtime/Serialization/JsonSerializer.cs
@@ -312,7 +312,7 @@ namespace Microsoft.Azure.PowerShell.Cmdlets.TimeSeriesInsights.Runtime.Json
                     default: return ReadArray((IEnumerable)value);
                 }
             }
-            else if (value is IEnumerable)
+            else if (value is IEnumerable iEnumerable)
             {
                 if (type.IsList && type.ElementType != null)
                 {
@@ -330,7 +330,7 @@ namespace Microsoft.Azure.PowerShell.Cmdlets.TimeSeriesInsights.Runtime.Json
                     }
                 }
 
-                return ReadArray((IEnumerable)value);
+                return ReadArray(iEnumerable);
             }
             else
             {
diff --git a/src/TrafficManager/TrafficManager/Models/TrafficManagerEndpoint.cs b/src/TrafficManager/TrafficManager/Models/TrafficManagerEndpoint.cs
index fbb0b18fa9..a6a1b12af6 100644
--- a/src/TrafficManager/TrafficManager/Models/TrafficManagerEndpoint.cs
+++ b/src/TrafficManager/TrafficManager/Models/TrafficManagerEndpoint.cs
@@ -80,7 +80,7 @@ namespace Microsoft.Azure.Commands.TrafficManager.Models
         {
             return
                 !endpointType.StartsWith(Constants.ProfileType, StringComparison.OrdinalIgnoreCase) 
-                    ? string.Format("{0}/{1}", Constants.ProfileType, endpointType) 
+                    ? $"{Constants.ProfileType}/{endpointType}" 
                     : endpointType;
         }
 
diff --git a/src/VMware/generated/runtime/Serialization/JsonSerializer.cs b/src/VMware/generated/runtime/Serialization/JsonSerializer.cs
index e8ea6bb1e0..b0fb382a5d 100644
--- a/src/VMware/generated/runtime/Serialization/JsonSerializer.cs
+++ b/src/VMware/generated/runtime/Serialization/JsonSerializer.cs
@@ -312,7 +312,7 @@ namespace Microsoft.Azure.PowerShell.Cmdlets.VMware.Runtime.Json
                     default: return ReadArray((IEnumerable)value);
                 }
             }
-            else if (value is IEnumerable)
+            else if (value is IEnumerable iEnumerable)
             {
                 if (type.IsList && type.ElementType != null)
                 {
@@ -330,7 +330,7 @@ namespace Microsoft.Azure.PowerShell.Cmdlets.VMware.Runtime.Json
                     }
                 }
 
-                return ReadArray((IEnumerable)value);
+                return ReadArray(iEnumerable);
             }
             else
             {
diff --git a/src/Websites/Websites.Helper/Network/DefaultSecurityRulesOperations.cs b/src/Websites/Websites.Helper/Network/DefaultSecurityRulesOperations.cs
index 3d0a3f112f..f834a789f1 100644
--- a/src/Websites/Websites.Helper/Network/DefaultSecurityRulesOperations.cs
+++ b/src/Websites/Websites.Helper/Network/DefaultSecurityRulesOperations.cs
@@ -119,7 +119,7 @@ namespace Microsoft.Azure.PowerShell.Cmdlets.Websites.Helper.Network
             List<string> _queryParameters = new List<string>();
             if (Client.ApiVersion != null)
             {
-                _queryParameters.Add(string.Format("api-version={0}", System.Uri.EscapeDataString(Client.ApiVersion)));
+                _queryParameters.Add($"api-version={System.Uri.EscapeDataString(Client.ApiVersion)}");
             }
             if (_queryParameters.Count > 0)
             {
@@ -181,7 +181,7 @@ namespace Microsoft.Azure.PowerShell.Cmdlets.Websites.Helper.Network
             string _responseContent = null;
             if ((int)_statusCode != 200)
             {
-                var ex = new CloudException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
+                var ex = new CloudException($"Operation returned an invalid status code '{_statusCode}'");
                 try
                 {
                     _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
@@ -207,10 +207,7 @@ namespace Microsoft.Azure.PowerShell.Cmdlets.Websites.Helper.Network
                     ServiceClientTracing.Error(_invocationId, ex);
                 }
                 _httpRequest.Dispose();
-                if (_httpResponse != null)
-                {
-                    _httpResponse.Dispose();
-                }
+                _httpResponse?.Dispose();
                 throw ex;
             }
             // Create Result
@@ -232,10 +229,7 @@ namespace Microsoft.Azure.PowerShell.Cmdlets.Websites.Helper.Network
                 catch (JsonException ex)
                 {
                     _httpRequest.Dispose();
-                    if (_httpResponse != null)
-                    {
-                        _httpResponse.Dispose();
-                    }
+                    _httpResponse?.Dispose();
                     throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                 }
             }
@@ -324,7 +318,7 @@ namespace Microsoft.Azure.PowerShell.Cmdlets.Websites.Helper.Network
             List<string> _queryParameters = new List<string>();
             if (Client.ApiVersion != null)
             {
-                _queryParameters.Add(string.Format("api-version={0}", System.Uri.EscapeDataString(Client.ApiVersion)));
+                _queryParameters.Add($"api-version={System.Uri.EscapeDataString(Client.ApiVersion)}");
             }
             if (_queryParameters.Count > 0)
             {
@@ -386,7 +380,7 @@ namespace Microsoft.Azure.PowerShell.Cmdlets.Websites.Helper.Network
             string _responseContent = null;
             if ((int)_statusCode != 200)
             {
-                var ex = new CloudException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
+                var ex = new CloudException($"Operation returned an invalid status code '{_statusCode}'");
                 try
                 {
                     _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
@@ -412,10 +406,7 @@ namespace Microsoft.Azure.PowerShell.Cmdlets.Websites.Helper.Network
                     ServiceClientTracing.Error(_invocationId, ex);
                 }
                 _httpRequest.Dispose();
-                if (_httpResponse != null)
-                {
-                    _httpResponse.Dispose();
-                }
+                _httpResponse?.Dispose();
                 throw ex;
             }
             // Create Result
@@ -437,10 +428,7 @@ namespace Microsoft.Azure.PowerShell.Cmdlets.Websites.Helper.Network
                 catch (JsonException ex)
                 {
                     _httpRequest.Dispose();
-                    if (_httpResponse != null)
-                    {
-                        _httpResponse.Dispose();
-                    }
+                    _httpResponse?.Dispose();
                     throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                 }
             }
@@ -559,7 +547,7 @@ namespace Microsoft.Azure.PowerShell.Cmdlets.Websites.Helper.Network
             string _responseContent = null;
             if ((int)_statusCode != 200)
             {
-                var ex = new CloudException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
+                var ex = new CloudException($"Operation returned an invalid status code '{_statusCode}'");
                 try
                 {
                     _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
@@ -585,10 +573,7 @@ namespace Microsoft.Azure.PowerShell.Cmdlets.Websites.Helper.Network
                     ServiceClientTracing.Error(_invocationId, ex);
                 }
                 _httpRequest.Dispose();
-                if (_httpResponse != null)
-                {
-                    _httpResponse.Dispose();
-                }
+                _httpResponse?.Dispose();
                 throw ex;
             }
             // Create Result
@@ -610,10 +595,7 @@ namespace Microsoft.Azure.PowerShell.Cmdlets.Websites.Helper.Network
                 catch (JsonException ex)
                 {
                     _httpRequest.Dispose();
-                    if (_httpResponse != null)
-                    {
-                        _httpResponse.Dispose();
-                    }
+                    _httpResponse?.Dispose();
                     throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                 }
             }
diff --git a/src/Websites/Websites.Helper/Network/Models/FrontendIPConfiguration.cs b/src/Websites/Websites.Helper/Network/Models/FrontendIPConfiguration.cs
index 14375594f6..c29bc7be37 100644
--- a/src/Websites/Websites.Helper/Network/Models/FrontendIPConfiguration.cs
+++ b/src/Websites/Websites.Helper/Network/Models/FrontendIPConfiguration.cs
@@ -202,10 +202,7 @@ namespace Microsoft.Azure.PowerShell.Cmdlets.Websites.Helper.Network.Models
         /// </exception>
         public virtual void Validate()
         {
-            if (PublicIPAddress != null)
-            {
-                PublicIPAddress.Validate();
-            }
+            PublicIPAddress?.Validate();
         }
     }
 }
diff --git a/src/Websites/Websites.Helper/Network/Models/IPConfiguration.cs b/src/Websites/Websites.Helper/Network/Models/IPConfiguration.cs
index 5679155642..841a86df11 100644
--- a/src/Websites/Websites.Helper/Network/Models/IPConfiguration.cs
+++ b/src/Websites/Websites.Helper/Network/Models/IPConfiguration.cs
@@ -122,10 +122,7 @@ namespace Microsoft.Azure.PowerShell.Cmdlets.Websites.Helper.Network.Models
         /// </exception>
         public virtual void Validate()
         {
-            if (PublicIPAddress != null)
-            {
-                PublicIPAddress.Validate();
-            }
+            PublicIPAddress?.Validate();
         }
     }
 }
diff --git a/src/Websites/Websites.Helper/Network/Models/InboundNatRule.cs b/src/Websites/Websites.Helper/Network/Models/InboundNatRule.cs
index db01799286..74377281ee 100644
--- a/src/Websites/Websites.Helper/Network/Models/InboundNatRule.cs
+++ b/src/Websites/Websites.Helper/Network/Models/InboundNatRule.cs
@@ -190,10 +190,7 @@ namespace Microsoft.Azure.PowerShell.Cmdlets.Websites.Helper.Network.Models
         /// </exception>
         public virtual void Validate()
         {
-            if (BackendIPConfiguration != null)
-            {
-                BackendIPConfiguration.Validate();
-            }
+            BackendIPConfiguration?.Validate();
         }
     }
 }
diff --git a/src/Websites/Websites.Helper/Network/Models/LoadBalancer.cs b/src/Websites/Websites.Helper/Network/Models/LoadBalancer.cs
index 4f8ece5530..a5868225a5 100644
--- a/src/Websites/Websites.Helper/Network/Models/LoadBalancer.cs
+++ b/src/Websites/Websites.Helper/Network/Models/LoadBalancer.cs
@@ -198,68 +198,47 @@ namespace Microsoft.Azure.PowerShell.Cmdlets.Websites.Helper.Network.Models
         /// </exception>
         public virtual void Validate()
         {
-            if (ExtendedLocation != null)
-            {
-                ExtendedLocation.Validate();
-            }
+            ExtendedLocation?.Validate();
             if (FrontendIPConfigurations != null)
             {
                 foreach (var element in FrontendIPConfigurations)
                 {
-                    if (element != null)
-                    {
-                        element.Validate();
-                    }
+                    element?.Validate();
                 }
             }
             if (LoadBalancingRules != null)
             {
                 foreach (var element1 in LoadBalancingRules)
                 {
-                    if (element1 != null)
-                    {
-                        element1.Validate();
-                    }
+                    element1?.Validate();
                 }
             }
             if (Probes != null)
             {
                 foreach (var element2 in Probes)
                 {
-                    if (element2 != null)
-                    {
-                        element2.Validate();
-                    }
+                    element2?.Validate();
                 }
             }
             if (InboundNatRules != null)
             {
                 foreach (var element3 in InboundNatRules)
                 {
-                    if (element3 != null)
-                    {
-                        element3.Validate();
-                    }
+                    element3?.Validate();
                 }
             }
             if (InboundNatPools != null)
             {
                 foreach (var element4 in InboundNatPools)
                 {
-                    if (element4 != null)
-                    {
-                        element4.Validate();
-                    }
+                    element4?.Validate();
                 }
             }
             if (OutboundRules != null)
             {
                 foreach (var element5 in OutboundRules)
                 {
-                    if (element5 != null)
-                    {
-                        element5.Validate();
-                    }
+                    element5?.Validate();
                 }
             }
         }
diff --git a/src/Websites/Websites.Helper/Network/Models/NetworkInterface.cs b/src/Websites/Websites.Helper/Network/Models/NetworkInterface.cs
index 5e8c71b02c..66868ac2fe 100644
--- a/src/Websites/Websites.Helper/Network/Models/NetworkInterface.cs
+++ b/src/Websites/Websites.Helper/Network/Models/NetworkInterface.cs
@@ -211,28 +211,19 @@ namespace Microsoft.Azure.PowerShell.Cmdlets.Websites.Helper.Network.Models
         /// </exception>
         public virtual void Validate()
         {
-            if (ExtendedLocation != null)
-            {
-                ExtendedLocation.Validate();
-            }
+            ExtendedLocation?.Validate();
             if (IpConfigurations != null)
             {
                 foreach (var element in IpConfigurations)
                 {
-                    if (element != null)
-                    {
-                        element.Validate();
-                    }
+                    element?.Validate();
                 }
             }
             if (TapConfigurations != null)
             {
                 foreach (var element1 in TapConfigurations)
                 {
-                    if (element1 != null)
-                    {
-                        element1.Validate();
-                    }
+                    element1?.Validate();
                 }
             }
         }
diff --git a/src/Websites/Websites.Helper/Network/Models/NetworkInterfaceIPConfiguration.cs b/src/Websites/Websites.Helper/Network/Models/NetworkInterfaceIPConfiguration.cs
index b048cf783e..14f3c05e9b 100644
--- a/src/Websites/Websites.Helper/Network/Models/NetworkInterfaceIPConfiguration.cs
+++ b/src/Websites/Websites.Helper/Network/Models/NetworkInterfaceIPConfiguration.cs
@@ -208,26 +208,17 @@ namespace Microsoft.Azure.PowerShell.Cmdlets.Websites.Helper.Network.Models
             {
                 foreach (var element in VirtualNetworkTaps)
                 {
-                    if (element != null)
-                    {
-                        element.Validate();
-                    }
+                    element?.Validate();
                 }
             }
             if (LoadBalancerInboundNatRules != null)
             {
                 foreach (var element1 in LoadBalancerInboundNatRules)
                 {
-                    if (element1 != null)
-                    {
-                        element1.Validate();
-                    }
+                    element1?.Validate();
                 }
             }
-            if (PublicIPAddress != null)
-            {
-                PublicIPAddress.Validate();
-            }
+            PublicIPAddress?.Validate();
         }
     }
 }
diff --git a/src/Websites/Websites.Helper/Network/Models/NetworkInterfaceTapConfiguration.cs b/src/Websites/Websites.Helper/Network/Models/NetworkInterfaceTapConfiguration.cs
index 3c203f3f48..4647443bb6 100644
--- a/src/Websites/Websites.Helper/Network/Models/NetworkInterfaceTapConfiguration.cs
+++ b/src/Websites/Websites.Helper/Network/Models/NetworkInterfaceTapConfiguration.cs
@@ -104,10 +104,7 @@ namespace Microsoft.Azure.PowerShell.Cmdlets.Websites.Helper.Network.Models
         /// </exception>
         public virtual void Validate()
         {
-            if (VirtualNetworkTap != null)
-            {
-                VirtualNetworkTap.Validate();
-            }
+            VirtualNetworkTap?.Validate();
         }
     }
 }
diff --git a/src/Websites/Websites.Helper/Network/Models/PublicIPAddress.cs b/src/Websites/Websites.Helper/Network/Models/PublicIPAddress.cs
index 7b660cb914..ecb99d502e 100644
--- a/src/Websites/Websites.Helper/Network/Models/PublicIPAddress.cs
+++ b/src/Websites/Websites.Helper/Network/Models/PublicIPAddress.cs
@@ -205,14 +205,8 @@ namespace Microsoft.Azure.PowerShell.Cmdlets.Websites.Helper.Network.Models
         /// </exception>
         public virtual void Validate()
         {
-            if (ExtendedLocation != null)
-            {
-                ExtendedLocation.Validate();
-            }
-            if (IpConfiguration != null)
-            {
-                IpConfiguration.Validate();
-            }
+            ExtendedLocation?.Validate();
+            IpConfiguration?.Validate();
         }
     }
 }
diff --git a/src/Websites/Websites.Helper/Network/Models/VirtualNetwork.cs b/src/Websites/Websites.Helper/Network/Models/VirtualNetwork.cs
index 17a08c6244..5efa59e132 100644
--- a/src/Websites/Websites.Helper/Network/Models/VirtualNetwork.cs
+++ b/src/Websites/Websites.Helper/Network/Models/VirtualNetwork.cs
@@ -189,24 +189,15 @@ namespace Microsoft.Azure.PowerShell.Cmdlets.Websites.Helper.Network.Models
         /// </exception>
         public virtual void Validate()
         {
-            if (ExtendedLocation != null)
-            {
-                ExtendedLocation.Validate();
-            }
+            ExtendedLocation?.Validate();
             if (VirtualNetworkPeerings != null)
             {
                 foreach (var element in VirtualNetworkPeerings)
                 {
-                    if (element != null)
-                    {
-                        element.Validate();
-                    }
+                    element?.Validate();
                 }
             }
-            if (BgpCommunities != null)
-            {
-                BgpCommunities.Validate();
-            }
+            BgpCommunities?.Validate();
         }
     }
 }
diff --git a/src/Websites/Websites.Helper/Network/Models/VirtualNetworkPeering.cs b/src/Websites/Websites.Helper/Network/Models/VirtualNetworkPeering.cs
index 560afc920b..31ef522d58 100644
--- a/src/Websites/Websites.Helper/Network/Models/VirtualNetworkPeering.cs
+++ b/src/Websites/Websites.Helper/Network/Models/VirtualNetworkPeering.cs
@@ -182,10 +182,7 @@ namespace Microsoft.Azure.PowerShell.Cmdlets.Websites.Helper.Network.Models
         /// </exception>
         public virtual void Validate()
         {
-            if (RemoteBgpCommunities != null)
-            {
-                RemoteBgpCommunities.Validate();
-            }
+            RemoteBgpCommunities?.Validate();
         }
     }
 }
diff --git a/src/Websites/Websites.Helper/Network/Models/VirtualNetworkTap.cs b/src/Websites/Websites.Helper/Network/Models/VirtualNetworkTap.cs
index 6d7f9be521..0cf49cea0d 100644
--- a/src/Websites/Websites.Helper/Network/Models/VirtualNetworkTap.cs
+++ b/src/Websites/Websites.Helper/Network/Models/VirtualNetworkTap.cs
@@ -137,20 +137,11 @@ namespace Microsoft.Azure.PowerShell.Cmdlets.Websites.Helper.Network.Models
             {
                 foreach (var element in NetworkInterfaceTapConfigurations)
                 {
-                    if (element != null)
-                    {
-                        element.Validate();
-                    }
+                    element?.Validate();
                 }
             }
-            if (DestinationNetworkInterfaceIPConfiguration != null)
-            {
-                DestinationNetworkInterfaceIPConfiguration.Validate();
-            }
-            if (DestinationLoadBalancerFrontEndIPConfiguration != null)
-            {
-                DestinationLoadBalancerFrontEndIPConfiguration.Validate();
-            }
+            DestinationNetworkInterfaceIPConfiguration?.Validate();
+            DestinationLoadBalancerFrontEndIPConfiguration?.Validate();
         }
     }
 }
diff --git a/src/Websites/Websites.Helper/Network/NetworkInterfacesOperations.cs b/src/Websites/Websites.Helper/Network/NetworkInterfacesOperations.cs
index cc55f5c939..39179c6077 100644
--- a/src/Websites/Websites.Helper/Network/NetworkInterfacesOperations.cs
+++ b/src/Websites/Websites.Helper/Network/NetworkInterfacesOperations.cs
@@ -123,11 +123,11 @@ namespace Microsoft.Azure.PowerShell.Cmdlets.Websites.Helper.Network
             List<string> _queryParameters = new List<string>();
             if (Client.ApiVersion != null)
             {
-                _queryParameters.Add(string.Format("api-version={0}", System.Uri.EscapeDataString(Client.ApiVersion)));
+                _queryParameters.Add($"api-version={System.Uri.EscapeDataString(Client.ApiVersion)}");
             }
             if (expand != null)
             {
-                _queryParameters.Add(string.Format("$expand={0}", System.Uri.EscapeDataString(expand)));
+                _queryParameters.Add($"$expand={System.Uri.EscapeDataString(expand)}");
             }
             if (_queryParameters.Count > 0)
             {
@@ -189,7 +189,7 @@ namespace Microsoft.Azure.PowerShell.Cmdlets.Websites.Helper.Network
             string _responseContent = null;
             if ((int)_statusCode != 200)
             {
-                var ex = new CloudException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
+                var ex = new CloudException($"Operation returned an invalid status code '{_statusCode}'");
                 try
                 {
                     _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
@@ -215,10 +215,7 @@ namespace Microsoft.Azure.PowerShell.Cmdlets.Websites.Helper.Network
                     ServiceClientTracing.Error(_invocationId, ex);
                 }
                 _httpRequest.Dispose();
-                if (_httpResponse != null)
-                {
-                    _httpResponse.Dispose();
-                }
+                _httpResponse?.Dispose();
                 throw ex;
             }
             // Create Result
@@ -240,10 +237,7 @@ namespace Microsoft.Azure.PowerShell.Cmdlets.Websites.Helper.Network
                 catch (JsonException ex)
                 {
                     _httpRequest.Dispose();
-                    if (_httpResponse != null)
-                    {
-                        _httpResponse.Dispose();
-                    }
+                    _httpResponse?.Dispose();
                     throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                 }
             }
diff --git a/src/Websites/Websites.Helper/Network/NetworkSecurityGroupsOperations.cs b/src/Websites/Websites.Helper/Network/NetworkSecurityGroupsOperations.cs
index 8130e8117c..b631897d40 100644
--- a/src/Websites/Websites.Helper/Network/NetworkSecurityGroupsOperations.cs
+++ b/src/Websites/Websites.Helper/Network/NetworkSecurityGroupsOperations.cs
@@ -145,11 +145,11 @@ namespace Microsoft.Azure.PowerShell.Cmdlets.Websites.Helper.Network
             List<string> _queryParameters = new List<string>();
             if (Client.ApiVersion != null)
             {
-                _queryParameters.Add(string.Format("api-version={0}", System.Uri.EscapeDataString(Client.ApiVersion)));
+                _queryParameters.Add($"api-version={System.Uri.EscapeDataString(Client.ApiVersion)}");
             }
             if (expand != null)
             {
-                _queryParameters.Add(string.Format("$expand={0}", System.Uri.EscapeDataString(expand)));
+                _queryParameters.Add($"$expand={System.Uri.EscapeDataString(expand)}");
             }
             if (_queryParameters.Count > 0)
             {
@@ -211,7 +211,7 @@ namespace Microsoft.Azure.PowerShell.Cmdlets.Websites.Helper.Network
             string _responseContent = null;
             if ((int)_statusCode != 200)
             {
-                var ex = new CloudException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
+                var ex = new CloudException($"Operation returned an invalid status code '{_statusCode}'");
                 try
                 {
                     _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
@@ -237,10 +237,7 @@ namespace Microsoft.Azure.PowerShell.Cmdlets.Websites.Helper.Network
                     ServiceClientTracing.Error(_invocationId, ex);
                 }
                 _httpRequest.Dispose();
-                if (_httpResponse != null)
-                {
-                    _httpResponse.Dispose();
-                }
+                _httpResponse?.Dispose();
                 throw ex;
             }
             // Create Result
@@ -262,10 +259,7 @@ namespace Microsoft.Azure.PowerShell.Cmdlets.Websites.Helper.Network
                 catch (JsonException ex)
                 {
                     _httpRequest.Dispose();
-                    if (_httpResponse != null)
-                    {
-                        _httpResponse.Dispose();
-                    }
+                    _httpResponse?.Dispose();
                     throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                 }
             }
@@ -381,7 +375,7 @@ namespace Microsoft.Azure.PowerShell.Cmdlets.Websites.Helper.Network
             List<string> _queryParameters = new List<string>();
             if (Client.ApiVersion != null)
             {
-                _queryParameters.Add(string.Format("api-version={0}", System.Uri.EscapeDataString(Client.ApiVersion)));
+                _queryParameters.Add($"api-version={System.Uri.EscapeDataString(Client.ApiVersion)}");
             }
             if (_queryParameters.Count > 0)
             {
@@ -449,7 +443,7 @@ namespace Microsoft.Azure.PowerShell.Cmdlets.Websites.Helper.Network
             string _responseContent = null;
             if ((int)_statusCode != 200)
             {
-                var ex = new CloudException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
+                var ex = new CloudException($"Operation returned an invalid status code '{_statusCode}'");
                 try
                 {
                     _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
@@ -475,10 +469,7 @@ namespace Microsoft.Azure.PowerShell.Cmdlets.Websites.Helper.Network
                     ServiceClientTracing.Error(_invocationId, ex);
                 }
                 _httpRequest.Dispose();
-                if (_httpResponse != null)
-                {
-                    _httpResponse.Dispose();
-                }
+                _httpResponse?.Dispose();
                 throw ex;
             }
             // Create Result
@@ -500,10 +491,7 @@ namespace Microsoft.Azure.PowerShell.Cmdlets.Websites.Helper.Network
                 catch (JsonException ex)
                 {
                     _httpRequest.Dispose();
-                    if (_httpResponse != null)
-                    {
-                        _httpResponse.Dispose();
-                    }
+                    _httpResponse?.Dispose();
                     throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                 }
             }
@@ -565,7 +553,7 @@ namespace Microsoft.Azure.PowerShell.Cmdlets.Websites.Helper.Network
             List<string> _queryParameters = new List<string>();
             if (Client.ApiVersion != null)
             {
-                _queryParameters.Add(string.Format("api-version={0}", System.Uri.EscapeDataString(Client.ApiVersion)));
+                _queryParameters.Add($"api-version={System.Uri.EscapeDataString(Client.ApiVersion)}");
             }
             if (_queryParameters.Count > 0)
             {
@@ -627,7 +615,7 @@ namespace Microsoft.Azure.PowerShell.Cmdlets.Websites.Helper.Network
             string _responseContent = null;
             if ((int)_statusCode != 200)
             {
-                var ex = new CloudException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
+                var ex = new CloudException($"Operation returned an invalid status code '{_statusCode}'");
                 try
                 {
                     _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
@@ -653,10 +641,7 @@ namespace Microsoft.Azure.PowerShell.Cmdlets.Websites.Helper.Network
                     ServiceClientTracing.Error(_invocationId, ex);
                 }
                 _httpRequest.Dispose();
-                if (_httpResponse != null)
-                {
-                    _httpResponse.Dispose();
-                }
+                _httpResponse?.Dispose();
                 throw ex;
             }
             // Create Result
@@ -678,10 +663,7 @@ namespace Microsoft.Azure.PowerShell.Cmdlets.Websites.Helper.Network
                 catch (JsonException ex)
                 {
                     _httpRequest.Dispose();
-                    if (_httpResponse != null)
-                    {
-                        _httpResponse.Dispose();
-                    }
+                    _httpResponse?.Dispose();
                     throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                 }
             }
@@ -752,7 +734,7 @@ namespace Microsoft.Azure.PowerShell.Cmdlets.Websites.Helper.Network
             List<string> _queryParameters = new List<string>();
             if (Client.ApiVersion != null)
             {
-                _queryParameters.Add(string.Format("api-version={0}", System.Uri.EscapeDataString(Client.ApiVersion)));
+                _queryParameters.Add($"api-version={System.Uri.EscapeDataString(Client.ApiVersion)}");
             }
             if (_queryParameters.Count > 0)
             {
@@ -814,7 +796,7 @@ namespace Microsoft.Azure.PowerShell.Cmdlets.Websites.Helper.Network
             string _responseContent = null;
             if ((int)_statusCode != 200)
             {
-                var ex = new CloudException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
+                var ex = new CloudException($"Operation returned an invalid status code '{_statusCode}'");
                 try
                 {
                     _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
@@ -840,10 +822,7 @@ namespace Microsoft.Azure.PowerShell.Cmdlets.Websites.Helper.Network
                     ServiceClientTracing.Error(_invocationId, ex);
                 }
                 _httpRequest.Dispose();
-                if (_httpResponse != null)
-                {
-                    _httpResponse.Dispose();
-                }
+                _httpResponse?.Dispose();
                 throw ex;
             }
             // Create Result
@@ -865,10 +844,7 @@ namespace Microsoft.Azure.PowerShell.Cmdlets.Websites.Helper.Network
                 catch (JsonException ex)
                 {
                     _httpRequest.Dispose();
-                    if (_httpResponse != null)
-                    {
-                        _httpResponse.Dispose();
-                    }
+                    _httpResponse?.Dispose();
                     throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                 }
             }
@@ -945,7 +921,7 @@ namespace Microsoft.Azure.PowerShell.Cmdlets.Websites.Helper.Network
             List<string> _queryParameters = new List<string>();
             if (Client.ApiVersion != null)
             {
-                _queryParameters.Add(string.Format("api-version={0}", System.Uri.EscapeDataString(Client.ApiVersion)));
+                _queryParameters.Add($"api-version={System.Uri.EscapeDataString(Client.ApiVersion)}");
             }
             if (_queryParameters.Count > 0)
             {
@@ -1007,7 +983,7 @@ namespace Microsoft.Azure.PowerShell.Cmdlets.Websites.Helper.Network
             string _responseContent = null;
             if ((int)_statusCode != 200 && (int)_statusCode != 202 && (int)_statusCode != 204)
             {
-                var ex = new CloudException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
+                var ex = new CloudException($"Operation returned an invalid status code '{_statusCode}'");
                 try
                 {
                     _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
@@ -1033,10 +1009,7 @@ namespace Microsoft.Azure.PowerShell.Cmdlets.Websites.Helper.Network
                     ServiceClientTracing.Error(_invocationId, ex);
                 }
                 _httpRequest.Dispose();
-                if (_httpResponse != null)
-                {
-                    _httpResponse.Dispose();
-                }
+                _httpResponse?.Dispose();
                 throw ex;
             }
             // Create Result
@@ -1133,7 +1106,7 @@ namespace Microsoft.Azure.PowerShell.Cmdlets.Websites.Helper.Network
             List<string> _queryParameters = new List<string>();
             if (Client.ApiVersion != null)
             {
-                _queryParameters.Add(string.Format("api-version={0}", System.Uri.EscapeDataString(Client.ApiVersion)));
+                _queryParameters.Add($"api-version={System.Uri.EscapeDataString(Client.ApiVersion)}");
             }
             if (_queryParameters.Count > 0)
             {
@@ -1201,7 +1174,7 @@ namespace Microsoft.Azure.PowerShell.Cmdlets.Websites.Helper.Network
             string _responseContent = null;
             if ((int)_statusCode != 200 && (int)_statusCode != 201)
             {
-                var ex = new CloudException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
+                var ex = new CloudException($"Operation returned an invalid status code '{_statusCode}'");
                 try
                 {
                     _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
@@ -1227,10 +1200,7 @@ namespace Microsoft.Azure.PowerShell.Cmdlets.Websites.Helper.Network
                     ServiceClientTracing.Error(_invocationId, ex);
                 }
                 _httpRequest.Dispose();
-                if (_httpResponse != null)
-                {
-                    _httpResponse.Dispose();
-                }
+                _httpResponse?.Dispose();
                 throw ex;
             }
             // Create Result
@@ -1252,10 +1222,7 @@ namespace Microsoft.Azure.PowerShell.Cmdlets.Websites.Helper.Network
                 catch (JsonException ex)
                 {
                     _httpRequest.Dispose();
-                    if (_httpResponse != null)
-                    {
-                        _httpResponse.Dispose();
-                    }
+                    _httpResponse?.Dispose();
                     throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                 }
             }
@@ -1270,10 +1237,7 @@ namespace Microsoft.Azure.PowerShell.Cmdlets.Websites.Helper.Network
                 catch (JsonException ex)
                 {
                     _httpRequest.Dispose();
-                    if (_httpResponse != null)
-                    {
-                        _httpResponse.Dispose();
-                    }
+                    _httpResponse?.Dispose();
                     throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                 }
             }
@@ -1392,7 +1356,7 @@ namespace Microsoft.Azure.PowerShell.Cmdlets.Websites.Helper.Network
             string _responseContent = null;
             if ((int)_statusCode != 200)
             {
-                var ex = new CloudException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
+                var ex = new CloudException($"Operation returned an invalid status code '{_statusCode}'");
                 try
                 {
                     _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
@@ -1418,10 +1382,7 @@ namespace Microsoft.Azure.PowerShell.Cmdlets.Websites.Helper.Network
                     ServiceClientTracing.Error(_invocationId, ex);
                 }
                 _httpRequest.Dispose();
-                if (_httpResponse != null)
-                {
-                    _httpResponse.Dispose();
-                }
+                _httpResponse?.Dispose();
                 throw ex;
             }
             // Create Result
@@ -1443,10 +1404,7 @@ namespace Microsoft.Azure.PowerShell.Cmdlets.Websites.Helper.Network
                 catch (JsonException ex)
                 {
                     _httpRequest.Dispose();
-                    if (_httpResponse != null)
-                    {
-                        _httpResponse.Dispose();
-                    }
+                    _httpResponse?.Dispose();
                     throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                 }
             }
@@ -1565,7 +1523,7 @@ namespace Microsoft.Azure.PowerShell.Cmdlets.Websites.Helper.Network
             string _responseContent = null;
             if ((int)_statusCode != 200)
             {
-                var ex = new CloudException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
+                var ex = new CloudException($"Operation returned an invalid status code '{_statusCode}'");
                 try
                 {
                     _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
@@ -1591,10 +1549,7 @@ namespace Microsoft.Azure.PowerShell.Cmdlets.Websites.Helper.Network
                     ServiceClientTracing.Error(_invocationId, ex);
                 }
                 _httpRequest.Dispose();
-                if (_httpResponse != null)
-                {
-                    _httpResponse.Dispose();
-                }
+                _httpResponse?.Dispose();
                 throw ex;
             }
             // Create Result
@@ -1616,10 +1571,7 @@ namespace Microsoft.Azure.PowerShell.Cmdlets.Websites.Helper.Network
                 catch (JsonException ex)
                 {
                     _httpRequest.Dispose();
-                    if (_httpResponse != null)
-                    {
-                        _httpResponse.Dispose();
-                    }
+                    _httpResponse?.Dispose();
                     throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                 }
             }
diff --git a/src/Websites/Websites.Helper/Network/PrivateEndpointsOperations.cs b/src/Websites/Websites.Helper/Network/PrivateEndpointsOperations.cs
index a644294cb1..fbff496664 100644
--- a/src/Websites/Websites.Helper/Network/PrivateEndpointsOperations.cs
+++ b/src/Websites/Websites.Helper/Network/PrivateEndpointsOperations.cs
@@ -152,7 +152,7 @@ namespace Microsoft.Azure.PowerShell.Cmdlets.Websites.Helper.Network
             List<string> _queryParameters = new List<string>();
             if (Client.ApiVersion != null)
             {
-                _queryParameters.Add(string.Format("api-version={0}", System.Uri.EscapeDataString(Client.ApiVersion)));
+                _queryParameters.Add($"api-version={System.Uri.EscapeDataString(Client.ApiVersion)}");
             }
             if (_queryParameters.Count > 0)
             {
@@ -220,7 +220,7 @@ namespace Microsoft.Azure.PowerShell.Cmdlets.Websites.Helper.Network
             string _responseContent = null;
             if ((int)_statusCode != 200 && (int)_statusCode != 201)
             {
-                var ex = new ErrorException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
+                var ex = new ErrorException($"Operation returned an invalid status code '{_statusCode}'");
                 try
                 {
                     _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
@@ -241,10 +241,7 @@ namespace Microsoft.Azure.PowerShell.Cmdlets.Websites.Helper.Network
                     ServiceClientTracing.Error(_invocationId, ex);
                 }
                 _httpRequest.Dispose();
-                if (_httpResponse != null)
-                {
-                    _httpResponse.Dispose();
-                }
+                _httpResponse?.Dispose();
                 throw ex;
             }
             // Create Result
@@ -266,10 +263,7 @@ namespace Microsoft.Azure.PowerShell.Cmdlets.Websites.Helper.Network
                 catch (JsonException ex)
                 {
                     _httpRequest.Dispose();
-                    if (_httpResponse != null)
-                    {
-                        _httpResponse.Dispose();
-                    }
+                    _httpResponse?.Dispose();
                     throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                 }
             }
@@ -284,10 +278,7 @@ namespace Microsoft.Azure.PowerShell.Cmdlets.Websites.Helper.Network
                 catch (JsonException ex)
                 {
                     _httpRequest.Dispose();
-                    if (_httpResponse != null)
-                    {
-                        _httpResponse.Dispose();
-                    }
+                    _httpResponse?.Dispose();
                     throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                 }
             }
diff --git a/src/Websites/Websites.Helper/Network/RouteTablesOperations.cs b/src/Websites/Websites.Helper/Network/RouteTablesOperations.cs
index c2d4ec142c..fcf3d570e4 100644
--- a/src/Websites/Websites.Helper/Network/RouteTablesOperations.cs
+++ b/src/Websites/Websites.Helper/Network/RouteTablesOperations.cs
@@ -145,11 +145,11 @@ namespace Microsoft.Azure.PowerShell.Cmdlets.Websites.Helper.Network
             List<string> _queryParameters = new List<string>();
             if (Client.ApiVersion != null)
             {
-                _queryParameters.Add(string.Format("api-version={0}", System.Uri.EscapeDataString(Client.ApiVersion)));
+                _queryParameters.Add($"api-version={System.Uri.EscapeDataString(Client.ApiVersion)}");
             }
             if (expand != null)
             {
-                _queryParameters.Add(string.Format("$expand={0}", System.Uri.EscapeDataString(expand)));
+                _queryParameters.Add($"$expand={System.Uri.EscapeDataString(expand)}");
             }
             if (_queryParameters.Count > 0)
             {
@@ -211,7 +211,7 @@ namespace Microsoft.Azure.PowerShell.Cmdlets.Websites.Helper.Network
             string _responseContent = null;
             if ((int)_statusCode != 200)
             {
-                var ex = new CloudException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
+                var ex = new CloudException($"Operation returned an invalid status code '{_statusCode}'");
                 try
                 {
                     _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
@@ -237,10 +237,7 @@ namespace Microsoft.Azure.PowerShell.Cmdlets.Websites.Helper.Network
                     ServiceClientTracing.Error(_invocationId, ex);
                 }
                 _httpRequest.Dispose();
-                if (_httpResponse != null)
-                {
-                    _httpResponse.Dispose();
-                }
+                _httpResponse?.Dispose();
                 throw ex;
             }
             // Create Result
@@ -262,10 +259,7 @@ namespace Microsoft.Azure.PowerShell.Cmdlets.Websites.Helper.Network
                 catch (JsonException ex)
                 {
                     _httpRequest.Dispose();
-                    if (_httpResponse != null)
-                    {
-                        _httpResponse.Dispose();
-                    }
+                    _httpResponse?.Dispose();
                     throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                 }
             }
@@ -379,7 +373,7 @@ namespace Microsoft.Azure.PowerShell.Cmdlets.Websites.Helper.Network
             List<string> _queryParameters = new List<string>();
             if (Client.ApiVersion != null)
             {
-                _queryParameters.Add(string.Format("api-version={0}", System.Uri.EscapeDataString(Client.ApiVersion)));
+                _queryParameters.Add($"api-version={System.Uri.EscapeDataString(Client.ApiVersion)}");
             }
             if (_queryParameters.Count > 0)
             {
@@ -447,7 +441,7 @@ namespace Microsoft.Azure.PowerShell.Cmdlets.Websites.Helper.Network
             string _responseContent = null;
             if ((int)_statusCode != 200)
             {
-                var ex = new CloudException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
+                var ex = new CloudException($"Operation returned an invalid status code '{_statusCode}'");
                 try
                 {
                     _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
@@ -473,10 +467,7 @@ namespace Microsoft.Azure.PowerShell.Cmdlets.Websites.Helper.Network
                     ServiceClientTracing.Error(_invocationId, ex);
                 }
                 _httpRequest.Dispose();
-                if (_httpResponse != null)
-                {
-                    _httpResponse.Dispose();
-                }
+                _httpResponse?.Dispose();
                 throw ex;
             }
             // Create Result
@@ -498,10 +489,7 @@ namespace Microsoft.Azure.PowerShell.Cmdlets.Websites.Helper.Network
                 catch (JsonException ex)
                 {
                     _httpRequest.Dispose();
-                    if (_httpResponse != null)
-                    {
-                        _httpResponse.Dispose();
-                    }
+                    _httpResponse?.Dispose();
                     throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                 }
             }
@@ -572,7 +560,7 @@ namespace Microsoft.Azure.PowerShell.Cmdlets.Websites.Helper.Network
             List<string> _queryParameters = new List<string>();
             if (Client.ApiVersion != null)
             {
-                _queryParameters.Add(string.Format("api-version={0}", System.Uri.EscapeDataString(Client.ApiVersion)));
+                _queryParameters.Add($"api-version={System.Uri.EscapeDataString(Client.ApiVersion)}");
             }
             if (_queryParameters.Count > 0)
             {
@@ -634,7 +622,7 @@ namespace Microsoft.Azure.PowerShell.Cmdlets.Websites.Helper.Network
             string _responseContent = null;
             if ((int)_statusCode != 200)
             {
-                var ex = new CloudException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
+                var ex = new CloudException($"Operation returned an invalid status code '{_statusCode}'");
                 try
                 {
                     _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
@@ -660,10 +648,7 @@ namespace Microsoft.Azure.PowerShell.Cmdlets.Websites.Helper.Network
                     ServiceClientTracing.Error(_invocationId, ex);
                 }
                 _httpRequest.Dispose();
-                if (_httpResponse != null)
-                {
-                    _httpResponse.Dispose();
-                }
+                _httpResponse?.Dispose();
                 throw ex;
             }
             // Create Result
@@ -685,10 +670,7 @@ namespace Microsoft.Azure.PowerShell.Cmdlets.Websites.Helper.Network
                 catch (JsonException ex)
                 {
                     _httpRequest.Dispose();
-                    if (_httpResponse != null)
-                    {
-                        _httpResponse.Dispose();
-                    }
+                    _httpResponse?.Dispose();
                     throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                 }
             }
@@ -750,7 +732,7 @@ namespace Microsoft.Azure.PowerShell.Cmdlets.Websites.Helper.Network
             List<string> _queryParameters = new List<string>();
             if (Client.ApiVersion != null)
             {
-                _queryParameters.Add(string.Format("api-version={0}", System.Uri.EscapeDataString(Client.ApiVersion)));
+                _queryParameters.Add($"api-version={System.Uri.EscapeDataString(Client.ApiVersion)}");
             }
             if (_queryParameters.Count > 0)
             {
@@ -812,7 +794,7 @@ namespace Microsoft.Azure.PowerShell.Cmdlets.Websites.Helper.Network
             string _responseContent = null;
             if ((int)_statusCode != 200)
             {
-                var ex = new CloudException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
+                var ex = new CloudException($"Operation returned an invalid status code '{_statusCode}'");
                 try
                 {
                     _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
@@ -838,10 +820,7 @@ namespace Microsoft.Azure.PowerShell.Cmdlets.Websites.Helper.Network
                     ServiceClientTracing.Error(_invocationId, ex);
                 }
                 _httpRequest.Dispose();
-                if (_httpResponse != null)
-                {
-                    _httpResponse.Dispose();
-                }
+                _httpResponse?.Dispose();
                 throw ex;
             }
             // Create Result
@@ -863,10 +842,7 @@ namespace Microsoft.Azure.PowerShell.Cmdlets.Websites.Helper.Network
                 catch (JsonException ex)
                 {
                     _httpRequest.Dispose();
-                    if (_httpResponse != null)
-                    {
-                        _httpResponse.Dispose();
-                    }
+                    _httpResponse?.Dispose();
                     throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                 }
             }
@@ -943,7 +919,7 @@ namespace Microsoft.Azure.PowerShell.Cmdlets.Websites.Helper.Network
             List<string> _queryParameters = new List<string>();
             if (Client.ApiVersion != null)
             {
-                _queryParameters.Add(string.Format("api-version={0}", System.Uri.EscapeDataString(Client.ApiVersion)));
+                _queryParameters.Add($"api-version={System.Uri.EscapeDataString(Client.ApiVersion)}");
             }
             if (_queryParameters.Count > 0)
             {
@@ -1005,7 +981,7 @@ namespace Microsoft.Azure.PowerShell.Cmdlets.Websites.Helper.Network
             string _responseContent = null;
             if ((int)_statusCode != 200 && (int)_statusCode != 202 && (int)_statusCode != 204)
             {
-                var ex = new CloudException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
+                var ex = new CloudException($"Operation returned an invalid status code '{_statusCode}'");
                 try
                 {
                     _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
@@ -1031,10 +1007,7 @@ namespace Microsoft.Azure.PowerShell.Cmdlets.Websites.Helper.Network
                     ServiceClientTracing.Error(_invocationId, ex);
                 }
                 _httpRequest.Dispose();
-                if (_httpResponse != null)
-                {
-                    _httpResponse.Dispose();
-                }
+                _httpResponse?.Dispose();
                 throw ex;
             }
             // Create Result
@@ -1129,7 +1102,7 @@ namespace Microsoft.Azure.PowerShell.Cmdlets.Websites.Helper.Network
             List<string> _queryParameters = new List<string>();
             if (Client.ApiVersion != null)
             {
-                _queryParameters.Add(string.Format("api-version={0}", System.Uri.EscapeDataString(Client.ApiVersion)));
+                _queryParameters.Add($"api-version={System.Uri.EscapeDataString(Client.ApiVersion)}");
             }
             if (_queryParameters.Count > 0)
             {
@@ -1197,7 +1170,7 @@ namespace Microsoft.Azure.PowerShell.Cmdlets.Websites.Helper.Network
             string _responseContent = null;
             if ((int)_statusCode != 200 && (int)_statusCode != 201)
             {
-                var ex = new CloudException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
+                var ex = new CloudException($"Operation returned an invalid status code '{_statusCode}'");
                 try
                 {
                     _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
@@ -1223,10 +1196,7 @@ namespace Microsoft.Azure.PowerShell.Cmdlets.Websites.Helper.Network
                     ServiceClientTracing.Error(_invocationId, ex);
                 }
                 _httpRequest.Dispose();
-                if (_httpResponse != null)
-                {
-                    _httpResponse.Dispose();
-                }
+                _httpResponse?.Dispose();
                 throw ex;
             }
             // Create Result
@@ -1248,10 +1218,7 @@ namespace Microsoft.Azure.PowerShell.Cmdlets.Websites.Helper.Network
                 catch (JsonException ex)
                 {
                     _httpRequest.Dispose();
-                    if (_httpResponse != null)
-                    {
-                        _httpResponse.Dispose();
-                    }
+                    _httpResponse?.Dispose();
                     throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                 }
             }
@@ -1266,10 +1233,7 @@ namespace Microsoft.Azure.PowerShell.Cmdlets.Websites.Helper.Network
                 catch (JsonException ex)
                 {
                     _httpRequest.Dispose();
-                    if (_httpResponse != null)
-                    {
-                        _httpResponse.Dispose();
-                    }
+                    _httpResponse?.Dispose();
                     throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                 }
             }
@@ -1388,7 +1352,7 @@ namespace Microsoft.Azure.PowerShell.Cmdlets.Websites.Helper.Network
             string _responseContent = null;
             if ((int)_statusCode != 200)
             {
-                var ex = new CloudException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
+                var ex = new CloudException($"Operation returned an invalid status code '{_statusCode}'");
                 try
                 {
                     _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
@@ -1414,10 +1378,7 @@ namespace Microsoft.Azure.PowerShell.Cmdlets.Websites.Helper.Network
                     ServiceClientTracing.Error(_invocationId, ex);
                 }
                 _httpRequest.Dispose();
-                if (_httpResponse != null)
-                {
-                    _httpResponse.Dispose();
-                }
+                _httpResponse?.Dispose();
                 throw ex;
             }
             // Create Result
@@ -1439,10 +1400,7 @@ namespace Microsoft.Azure.PowerShell.Cmdlets.Websites.Helper.Network
                 catch (JsonException ex)
                 {
                     _httpRequest.Dispose();
-                    if (_httpResponse != null)
-                    {
-                        _httpResponse.Dispose();
-                    }
+                    _httpResponse?.Dispose();
                     throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                 }
             }
@@ -1561,7 +1519,7 @@ namespace Microsoft.Azure.PowerShell.Cmdlets.Websites.Helper.Network
             string _responseContent = null;
             if ((int)_statusCode != 200)
             {
-                var ex = new CloudException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
+                var ex = new CloudException($"Operation returned an invalid status code '{_statusCode}'");
                 try
                 {
                     _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
@@ -1587,10 +1545,7 @@ namespace Microsoft.Azure.PowerShell.Cmdlets.Websites.Helper.Network
                     ServiceClientTracing.Error(_invocationId, ex);
                 }
                 _httpRequest.Dispose();
-                if (_httpResponse != null)
-                {
-                    _httpResponse.Dispose();
-                }
+                _httpResponse?.Dispose();
                 throw ex;
             }
             // Create Result
@@ -1612,10 +1567,7 @@ namespace Microsoft.Azure.PowerShell.Cmdlets.Websites.Helper.Network
                 catch (JsonException ex)
                 {
                     _httpRequest.Dispose();
-                    if (_httpResponse != null)
-                    {
-                        _httpResponse.Dispose();
-                    }
+                    _httpResponse?.Dispose();
                     throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                 }
             }
diff --git a/src/Websites/Websites.Helper/Network/RoutesOperations.cs b/src/Websites/Websites.Helper/Network/RoutesOperations.cs
index 161746cd44..3fbc1439e8 100644
--- a/src/Websites/Websites.Helper/Network/RoutesOperations.cs
+++ b/src/Websites/Websites.Helper/Network/RoutesOperations.cs
@@ -153,7 +153,7 @@ namespace Microsoft.Azure.PowerShell.Cmdlets.Websites.Helper.Network
             List<string> _queryParameters = new List<string>();
             if (Client.ApiVersion != null)
             {
-                _queryParameters.Add(string.Format("api-version={0}", System.Uri.EscapeDataString(Client.ApiVersion)));
+                _queryParameters.Add($"api-version={System.Uri.EscapeDataString(Client.ApiVersion)}");
             }
             if (_queryParameters.Count > 0)
             {
@@ -215,7 +215,7 @@ namespace Microsoft.Azure.PowerShell.Cmdlets.Websites.Helper.Network
             string _responseContent = null;
             if ((int)_statusCode != 200)
             {
-                var ex = new CloudException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
+                var ex = new CloudException($"Operation returned an invalid status code '{_statusCode}'");
                 try
                 {
                     _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
@@ -241,10 +241,7 @@ namespace Microsoft.Azure.PowerShell.Cmdlets.Websites.Helper.Network
                     ServiceClientTracing.Error(_invocationId, ex);
                 }
                 _httpRequest.Dispose();
-                if (_httpResponse != null)
-                {
-                    _httpResponse.Dispose();
-                }
+                _httpResponse?.Dispose();
                 throw ex;
             }
             // Create Result
@@ -266,10 +263,7 @@ namespace Microsoft.Azure.PowerShell.Cmdlets.Websites.Helper.Network
                 catch (JsonException ex)
                 {
                     _httpRequest.Dispose();
-                    if (_httpResponse != null)
-                    {
-                        _httpResponse.Dispose();
-                    }
+                    _httpResponse?.Dispose();
                     throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                 }
             }
@@ -377,7 +371,7 @@ namespace Microsoft.Azure.PowerShell.Cmdlets.Websites.Helper.Network
             List<string> _queryParameters = new List<string>();
             if (Client.ApiVersion != null)
             {
-                _queryParameters.Add(string.Format("api-version={0}", System.Uri.EscapeDataString(Client.ApiVersion)));
+                _queryParameters.Add($"api-version={System.Uri.EscapeDataString(Client.ApiVersion)}");
             }
             if (_queryParameters.Count > 0)
             {
@@ -439,7 +433,7 @@ namespace Microsoft.Azure.PowerShell.Cmdlets.Websites.Helper.Network
             string _responseContent = null;
             if ((int)_statusCode != 200)
             {
-                var ex = new CloudException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
+                var ex = new CloudException($"Operation returned an invalid status code '{_statusCode}'");
                 try
                 {
                     _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
@@ -465,10 +459,7 @@ namespace Microsoft.Azure.PowerShell.Cmdlets.Websites.Helper.Network
                     ServiceClientTracing.Error(_invocationId, ex);
                 }
                 _httpRequest.Dispose();
-                if (_httpResponse != null)
-                {
-                    _httpResponse.Dispose();
-                }
+                _httpResponse?.Dispose();
                 throw ex;
             }
             // Create Result
@@ -490,10 +481,7 @@ namespace Microsoft.Azure.PowerShell.Cmdlets.Websites.Helper.Network
                 catch (JsonException ex)
                 {
                     _httpRequest.Dispose();
-                    if (_httpResponse != null)
-                    {
-                        _httpResponse.Dispose();
-                    }
+                    _httpResponse?.Dispose();
                     throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                 }
             }
@@ -579,7 +567,7 @@ namespace Microsoft.Azure.PowerShell.Cmdlets.Websites.Helper.Network
             List<string> _queryParameters = new List<string>();
             if (Client.ApiVersion != null)
             {
-                _queryParameters.Add(string.Format("api-version={0}", System.Uri.EscapeDataString(Client.ApiVersion)));
+                _queryParameters.Add($"api-version={System.Uri.EscapeDataString(Client.ApiVersion)}");
             }
             if (_queryParameters.Count > 0)
             {
@@ -641,7 +629,7 @@ namespace Microsoft.Azure.PowerShell.Cmdlets.Websites.Helper.Network
             string _responseContent = null;
             if ((int)_statusCode != 200 && (int)_statusCode != 202 && (int)_statusCode != 204)
             {
-                var ex = new CloudException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
+                var ex = new CloudException($"Operation returned an invalid status code '{_statusCode}'");
                 try
                 {
                     _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
@@ -667,10 +655,7 @@ namespace Microsoft.Azure.PowerShell.Cmdlets.Websites.Helper.Network
                     ServiceClientTracing.Error(_invocationId, ex);
                 }
                 _httpRequest.Dispose();
-                if (_httpResponse != null)
-                {
-                    _httpResponse.Dispose();
-                }
+                _httpResponse?.Dispose();
                 throw ex;
             }
             // Create Result
@@ -742,10 +727,7 @@ namespace Microsoft.Azure.PowerShell.Cmdlets.Websites.Helper.Network
             {
                 throw new ValidationException(ValidationRules.CannotBeNull, "routeParameters");
             }
-            if (routeParameters != null)
-            {
-                routeParameters.Validate();
-            }
+            routeParameters?.Validate();
             if (Client.ApiVersion == null)
             {
                 throw new ValidationException(ValidationRules.CannotBeNull, "this.Client.ApiVersion");
@@ -778,7 +760,7 @@ namespace Microsoft.Azure.PowerShell.Cmdlets.Websites.Helper.Network
             List<string> _queryParameters = new List<string>();
             if (Client.ApiVersion != null)
             {
-                _queryParameters.Add(string.Format("api-version={0}", System.Uri.EscapeDataString(Client.ApiVersion)));
+                _queryParameters.Add($"api-version={System.Uri.EscapeDataString(Client.ApiVersion)}");
             }
             if (_queryParameters.Count > 0)
             {
@@ -846,7 +828,7 @@ namespace Microsoft.Azure.PowerShell.Cmdlets.Websites.Helper.Network
             string _responseContent = null;
             if ((int)_statusCode != 200 && (int)_statusCode != 201)
             {
-                var ex = new CloudException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
+                var ex = new CloudException($"Operation returned an invalid status code '{_statusCode}'");
                 try
                 {
                     _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
@@ -872,10 +854,7 @@ namespace Microsoft.Azure.PowerShell.Cmdlets.Websites.Helper.Network
                     ServiceClientTracing.Error(_invocationId, ex);
                 }
                 _httpRequest.Dispose();
-                if (_httpResponse != null)
-                {
-                    _httpResponse.Dispose();
-                }
+                _httpResponse?.Dispose();
                 throw ex;
             }
             // Create Result
@@ -897,10 +876,7 @@ namespace Microsoft.Azure.PowerShell.Cmdlets.Websites.Helper.Network
                 catch (JsonException ex)
                 {
                     _httpRequest.Dispose();
-                    if (_httpResponse != null)
-                    {
-                        _httpResponse.Dispose();
-                    }
+                    _httpResponse?.Dispose();
                     throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                 }
             }
@@ -915,10 +891,7 @@ namespace Microsoft.Azure.PowerShell.Cmdlets.Websites.Helper.Network
                 catch (JsonException ex)
                 {
                     _httpRequest.Dispose();
-                    if (_httpResponse != null)
-                    {
-                        _httpResponse.Dispose();
-                    }
+                    _httpResponse?.Dispose();
                     throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                 }
             }
@@ -1037,7 +1010,7 @@ namespace Microsoft.Azure.PowerShell.Cmdlets.Websites.Helper.Network
             string _responseContent = null;
             if ((int)_statusCode != 200)
             {
-                var ex = new CloudException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
+                var ex = new CloudException($"Operation returned an invalid status code '{_statusCode}'");
                 try
                 {
                     _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
@@ -1063,10 +1036,7 @@ namespace Microsoft.Azure.PowerShell.Cmdlets.Websites.Helper.Network
                     ServiceClientTracing.Error(_invocationId, ex);
                 }
                 _httpRequest.Dispose();
-                if (_httpResponse != null)
-                {
-                    _httpResponse.Dispose();
-                }
+                _httpResponse?.Dispose();
                 throw ex;
             }
             // Create Result
@@ -1088,10 +1058,7 @@ namespace Microsoft.Azure.PowerShell.Cmdlets.Websites.Helper.Network
                 catch (JsonException ex)
                 {
                     _httpRequest.Dispose();
-                    if (_httpResponse != null)
-                    {
-                        _httpResponse.Dispose();
-                    }
+                    _httpResponse?.Dispose();
                     throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                 }
             }
diff --git a/src/Websites/Websites.Helper/Network/SecurityRulesOperations.cs b/src/Websites/Websites.Helper/Network/SecurityRulesOperations.cs
index 9348db9f39..5dd10fa3b2 100644
--- a/src/Websites/Websites.Helper/Network/SecurityRulesOperations.cs
+++ b/src/Websites/Websites.Helper/Network/SecurityRulesOperations.cs
@@ -153,7 +153,7 @@ namespace Microsoft.Azure.PowerShell.Cmdlets.Websites.Helper.Network
             List<string> _queryParameters = new List<string>();
             if (Client.ApiVersion != null)
             {
-                _queryParameters.Add(string.Format("api-version={0}", System.Uri.EscapeDataString(Client.ApiVersion)));
+                _queryParameters.Add($"api-version={System.Uri.EscapeDataString(Client.ApiVersion)}");
             }
             if (_queryParameters.Count > 0)
             {
@@ -215,7 +215,7 @@ namespace Microsoft.Azure.PowerShell.Cmdlets.Websites.Helper.Network
             string _responseContent = null;
             if ((int)_statusCode != 200)
             {
-                var ex = new CloudException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
+                var ex = new CloudException($"Operation returned an invalid status code '{_statusCode}'");
                 try
                 {
                     _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
@@ -241,10 +241,7 @@ namespace Microsoft.Azure.PowerShell.Cmdlets.Websites.Helper.Network
                     ServiceClientTracing.Error(_invocationId, ex);
                 }
                 _httpRequest.Dispose();
-                if (_httpResponse != null)
-                {
-                    _httpResponse.Dispose();
-                }
+                _httpResponse?.Dispose();
                 throw ex;
             }
             // Create Result
@@ -266,10 +263,7 @@ namespace Microsoft.Azure.PowerShell.Cmdlets.Websites.Helper.Network
                 catch (JsonException ex)
                 {
                     _httpRequest.Dispose();
-                    if (_httpResponse != null)
-                    {
-                        _httpResponse.Dispose();
-                    }
+                    _httpResponse?.Dispose();
                     throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                 }
             }
@@ -378,7 +372,7 @@ namespace Microsoft.Azure.PowerShell.Cmdlets.Websites.Helper.Network
             List<string> _queryParameters = new List<string>();
             if (Client.ApiVersion != null)
             {
-                _queryParameters.Add(string.Format("api-version={0}", System.Uri.EscapeDataString(Client.ApiVersion)));
+                _queryParameters.Add($"api-version={System.Uri.EscapeDataString(Client.ApiVersion)}");
             }
             if (_queryParameters.Count > 0)
             {
@@ -440,7 +434,7 @@ namespace Microsoft.Azure.PowerShell.Cmdlets.Websites.Helper.Network
             string _responseContent = null;
             if ((int)_statusCode != 200)
             {
-                var ex = new CloudException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
+                var ex = new CloudException($"Operation returned an invalid status code '{_statusCode}'");
                 try
                 {
                     _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
@@ -466,10 +460,7 @@ namespace Microsoft.Azure.PowerShell.Cmdlets.Websites.Helper.Network
                     ServiceClientTracing.Error(_invocationId, ex);
                 }
                 _httpRequest.Dispose();
-                if (_httpResponse != null)
-                {
-                    _httpResponse.Dispose();
-                }
+                _httpResponse?.Dispose();
                 throw ex;
             }
             // Create Result
@@ -491,10 +482,7 @@ namespace Microsoft.Azure.PowerShell.Cmdlets.Websites.Helper.Network
                 catch (JsonException ex)
                 {
                     _httpRequest.Dispose();
-                    if (_httpResponse != null)
-                    {
-                        _httpResponse.Dispose();
-                    }
+                    _httpResponse?.Dispose();
                     throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                 }
             }
@@ -580,7 +568,7 @@ namespace Microsoft.Azure.PowerShell.Cmdlets.Websites.Helper.Network
             List<string> _queryParameters = new List<string>();
             if (Client.ApiVersion != null)
             {
-                _queryParameters.Add(string.Format("api-version={0}", System.Uri.EscapeDataString(Client.ApiVersion)));
+                _queryParameters.Add($"api-version={System.Uri.EscapeDataString(Client.ApiVersion)}");
             }
             if (_queryParameters.Count > 0)
             {
@@ -642,7 +630,7 @@ namespace Microsoft.Azure.PowerShell.Cmdlets.Websites.Helper.Network
             string _responseContent = null;
             if ((int)_statusCode != 200 && (int)_statusCode != 202 && (int)_statusCode != 204)
             {
-                var ex = new CloudException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
+                var ex = new CloudException($"Operation returned an invalid status code '{_statusCode}'");
                 try
                 {
                     _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
@@ -668,10 +656,7 @@ namespace Microsoft.Azure.PowerShell.Cmdlets.Websites.Helper.Network
                     ServiceClientTracing.Error(_invocationId, ex);
                 }
                 _httpRequest.Dispose();
-                if (_httpResponse != null)
-                {
-                    _httpResponse.Dispose();
-                }
+                _httpResponse?.Dispose();
                 throw ex;
             }
             // Create Result
@@ -744,10 +729,7 @@ namespace Microsoft.Azure.PowerShell.Cmdlets.Websites.Helper.Network
             {
                 throw new ValidationException(ValidationRules.CannotBeNull, "securityRuleParameters");
             }
-            if (securityRuleParameters != null)
-            {
-                securityRuleParameters.Validate();
-            }
+            securityRuleParameters?.Validate();
             if (Client.ApiVersion == null)
             {
                 throw new ValidationException(ValidationRules.CannotBeNull, "this.Client.ApiVersion");
@@ -780,7 +762,7 @@ namespace Microsoft.Azure.PowerShell.Cmdlets.Websites.Helper.Network
             List<string> _queryParameters = new List<string>();
             if (Client.ApiVersion != null)
             {
-                _queryParameters.Add(string.Format("api-version={0}", System.Uri.EscapeDataString(Client.ApiVersion)));
+                _queryParameters.Add($"api-version={System.Uri.EscapeDataString(Client.ApiVersion)}");
             }
             if (_queryParameters.Count > 0)
             {
@@ -848,7 +830,7 @@ namespace Microsoft.Azure.PowerShell.Cmdlets.Websites.Helper.Network
             string _responseContent = null;
             if ((int)_statusCode != 200 && (int)_statusCode != 201)
             {
-                var ex = new CloudException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
+                var ex = new CloudException($"Operation returned an invalid status code '{_statusCode}'");
                 try
                 {
                     _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
@@ -874,10 +856,7 @@ namespace Microsoft.Azure.PowerShell.Cmdlets.Websites.Helper.Network
                     ServiceClientTracing.Error(_invocationId, ex);
                 }
                 _httpRequest.Dispose();
-                if (_httpResponse != null)
-                {
-                    _httpResponse.Dispose();
-                }
+                _httpResponse?.Dispose();
                 throw ex;
             }
             // Create Result
@@ -899,10 +878,7 @@ namespace Microsoft.Azure.PowerShell.Cmdlets.Websites.Helper.Network
                 catch (JsonException ex)
                 {
                     _httpRequest.Dispose();
-                    if (_httpResponse != null)
-                    {
-                        _httpResponse.Dispose();
-                    }
+                    _httpResponse?.Dispose();
                     throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                 }
             }
@@ -917,10 +893,7 @@ namespace Microsoft.Azure.PowerShell.Cmdlets.Websites.Helper.Network
                 catch (JsonException ex)
                 {
                     _httpRequest.Dispose();
-                    if (_httpResponse != null)
-                    {
-                        _httpResponse.Dispose();
-                    }
+                    _httpResponse?.Dispose();
                     throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                 }
             }
@@ -1039,7 +1012,7 @@ namespace Microsoft.Azure.PowerShell.Cmdlets.Websites.Helper.Network
             string _responseContent = null;
             if ((int)_statusCode != 200)
             {
-                var ex = new CloudException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
+                var ex = new CloudException($"Operation returned an invalid status code '{_statusCode}'");
                 try
                 {
                     _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
@@ -1065,10 +1038,7 @@ namespace Microsoft.Azure.PowerShell.Cmdlets.Websites.Helper.Network
                     ServiceClientTracing.Error(_invocationId, ex);
                 }
                 _httpRequest.Dispose();
-                if (_httpResponse != null)
-                {
-                    _httpResponse.Dispose();
-                }
+                _httpResponse?.Dispose();
                 throw ex;
             }
             // Create Result
@@ -1090,10 +1060,7 @@ namespace Microsoft.Azure.PowerShell.Cmdlets.Websites.Helper.Network
                 catch (JsonException ex)
                 {
                     _httpRequest.Dispose();
-                    if (_httpResponse != null)
-                    {
-                        _httpResponse.Dispose();
-                    }
+                    _httpResponse?.Dispose();
                     throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                 }
             }
diff --git a/src/Websites/Websites.Helper/Network/SubnetsOperations.cs b/src/Websites/Websites.Helper/Network/SubnetsOperations.cs
index 85fe2caa93..14ccb757a9 100644
--- a/src/Websites/Websites.Helper/Network/SubnetsOperations.cs
+++ b/src/Websites/Websites.Helper/Network/SubnetsOperations.cs
@@ -132,11 +132,11 @@ namespace Microsoft.Azure.PowerShell.Cmdlets.Websites.Helper.Network
             List<string> _queryParameters = new List<string>();
             if (Client.ApiVersion != null)
             {
-                _queryParameters.Add(string.Format("api-version={0}", System.Uri.EscapeDataString(Client.ApiVersion)));
+                _queryParameters.Add($"api-version={System.Uri.EscapeDataString(Client.ApiVersion)}");
             }
             if (expand != null)
             {
-                _queryParameters.Add(string.Format("$expand={0}", System.Uri.EscapeDataString(expand)));
+                _queryParameters.Add($"$expand={System.Uri.EscapeDataString(expand)}");
             }
             if (_queryParameters.Count > 0)
             {
@@ -198,7 +198,7 @@ namespace Microsoft.Azure.PowerShell.Cmdlets.Websites.Helper.Network
             string _responseContent = null;
             if ((int)_statusCode != 200)
             {
-                var ex = new CloudException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
+                var ex = new CloudException($"Operation returned an invalid status code '{_statusCode}'");
                 try
                 {
                     _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
@@ -224,10 +224,7 @@ namespace Microsoft.Azure.PowerShell.Cmdlets.Websites.Helper.Network
                     ServiceClientTracing.Error(_invocationId, ex);
                 }
                 _httpRequest.Dispose();
-                if (_httpResponse != null)
-                {
-                    _httpResponse.Dispose();
-                }
+                _httpResponse?.Dispose();
                 throw ex;
             }
             // Create Result
@@ -249,10 +246,7 @@ namespace Microsoft.Azure.PowerShell.Cmdlets.Websites.Helper.Network
                 catch (JsonException ex)
                 {
                     _httpRequest.Dispose();
-                    if (_httpResponse != null)
-                    {
-                        _httpResponse.Dispose();
-                    }
+                    _httpResponse?.Dispose();
                     throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                 }
             }
@@ -377,7 +371,7 @@ namespace Microsoft.Azure.PowerShell.Cmdlets.Websites.Helper.Network
             List<string> _queryParameters = new List<string>();
             if (Client.ApiVersion != null)
             {
-                _queryParameters.Add(string.Format("api-version={0}", System.Uri.EscapeDataString(Client.ApiVersion)));
+                _queryParameters.Add($"api-version={System.Uri.EscapeDataString(Client.ApiVersion)}");
             }
             if (_queryParameters.Count > 0)
             {
@@ -445,7 +439,7 @@ namespace Microsoft.Azure.PowerShell.Cmdlets.Websites.Helper.Network
             string _responseContent = null;
             if ((int)_statusCode != 200 && (int)_statusCode != 201)
             {
-                var ex = new CloudException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
+                var ex = new CloudException($"Operation returned an invalid status code '{_statusCode}'");
                 try
                 {
                     _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
@@ -471,10 +465,7 @@ namespace Microsoft.Azure.PowerShell.Cmdlets.Websites.Helper.Network
                     ServiceClientTracing.Error(_invocationId, ex);
                 }
                 _httpRequest.Dispose();
-                if (_httpResponse != null)
-                {
-                    _httpResponse.Dispose();
-                }
+                _httpResponse?.Dispose();
                 throw ex;
             }
             // Create Result
@@ -496,10 +487,7 @@ namespace Microsoft.Azure.PowerShell.Cmdlets.Websites.Helper.Network
                 catch (JsonException ex)
                 {
                     _httpRequest.Dispose();
-                    if (_httpResponse != null)
-                    {
-                        _httpResponse.Dispose();
-                    }
+                    _httpResponse?.Dispose();
                     throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                 }
             }
@@ -514,10 +502,7 @@ namespace Microsoft.Azure.PowerShell.Cmdlets.Websites.Helper.Network
                 catch (JsonException ex)
                 {
                     _httpRequest.Dispose();
-                    if (_httpResponse != null)
-                    {
-                        _httpResponse.Dispose();
-                    }
+                    _httpResponse?.Dispose();
                     throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                 }
             }
diff --git a/src/Websites/Websites.Helper/Network/VirtualNetworksOperations.cs b/src/Websites/Websites.Helper/Network/VirtualNetworksOperations.cs
index 6ef512477f..6d471beb99 100644
--- a/src/Websites/Websites.Helper/Network/VirtualNetworksOperations.cs
+++ b/src/Websites/Websites.Helper/Network/VirtualNetworksOperations.cs
@@ -101,7 +101,7 @@ namespace Microsoft.Azure.PowerShell.Cmdlets.Websites.Helper.Network
             List<string> _queryParameters = new List<string>();
             if (Client.ApiVersion != null)
             {
-                _queryParameters.Add(string.Format("api-version={0}", System.Uri.EscapeDataString(Client.ApiVersion)));
+                _queryParameters.Add($"api-version={System.Uri.EscapeDataString(Client.ApiVersion)}");
             }
             if (_queryParameters.Count > 0)
             {
@@ -163,7 +163,7 @@ namespace Microsoft.Azure.PowerShell.Cmdlets.Websites.Helper.Network
             string _responseContent = null;
             if ((int)_statusCode != 200)
             {
-                var ex = new CloudException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
+                var ex = new CloudException($"Operation returned an invalid status code '{_statusCode}'");
                 try
                 {
                     _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
@@ -189,10 +189,7 @@ namespace Microsoft.Azure.PowerShell.Cmdlets.Websites.Helper.Network
                     ServiceClientTracing.Error(_invocationId, ex);
                 }
                 _httpRequest.Dispose();
-                if (_httpResponse != null)
-                {
-                    _httpResponse.Dispose();
-                }
+                _httpResponse?.Dispose();
                 throw ex;
             }
             // Create Result
@@ -214,10 +211,7 @@ namespace Microsoft.Azure.PowerShell.Cmdlets.Websites.Helper.Network
                 catch (JsonException ex)
                 {
                     _httpRequest.Dispose();
-                    if (_httpResponse != null)
-                    {
-                        _httpResponse.Dispose();
-                    }
+                    _httpResponse?.Dispose();
                     throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                 }
             }
@@ -336,7 +330,7 @@ namespace Microsoft.Azure.PowerShell.Cmdlets.Websites.Helper.Network
             string _responseContent = null;
             if ((int)_statusCode != 200)
             {
-                var ex = new CloudException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
+                var ex = new CloudException($"Operation returned an invalid status code '{_statusCode}'");
                 try
                 {
                     _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
@@ -362,10 +356,7 @@ namespace Microsoft.Azure.PowerShell.Cmdlets.Websites.Helper.Network
                     ServiceClientTracing.Error(_invocationId, ex);
                 }
                 _httpRequest.Dispose();
-                if (_httpResponse != null)
-                {
-                    _httpResponse.Dispose();
-                }
+                _httpResponse?.Dispose();
                 throw ex;
             }
             // Create Result
@@ -387,10 +378,7 @@ namespace Microsoft.Azure.PowerShell.Cmdlets.Websites.Helper.Network
                 catch (JsonException ex)
                 {
                     _httpRequest.Dispose();
-                    if (_httpResponse != null)
-                    {
-                        _httpResponse.Dispose();
-                    }
+                    _httpResponse?.Dispose();
                     throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                 }
             }
diff --git a/src/Websites/Websites.Helper/PrivateDns/PrivateZonesOperations.cs b/src/Websites/Websites.Helper/PrivateDns/PrivateZonesOperations.cs
index a923074833..cc5b856309 100644
--- a/src/Websites/Websites.Helper/PrivateDns/PrivateZonesOperations.cs
+++ b/src/Websites/Websites.Helper/PrivateDns/PrivateZonesOperations.cs
@@ -174,7 +174,7 @@ namespace Microsoft.Azure.PowerShell.Cmdlets.Websites.Helper.PrivateDns
             List<string> _queryParameters = new List<string>();
             if (Client.ApiVersion != null)
             {
-                _queryParameters.Add(string.Format("api-version={0}", System.Uri.EscapeDataString(Client.ApiVersion)));
+                _queryParameters.Add($"api-version={System.Uri.EscapeDataString(Client.ApiVersion)}");
             }
             if (_queryParameters.Count > 0)
             {
@@ -258,7 +258,7 @@ namespace Microsoft.Azure.PowerShell.Cmdlets.Websites.Helper.PrivateDns
             string _responseContent = null;
             if ((int)_statusCode != 200 && (int)_statusCode != 201 && (int)_statusCode != 202)
             {
-                var ex = new CloudException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
+                var ex = new CloudException($"Operation returned an invalid status code '{_statusCode}'");
                 try
                 {
                     _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
@@ -284,10 +284,7 @@ namespace Microsoft.Azure.PowerShell.Cmdlets.Websites.Helper.PrivateDns
                     ServiceClientTracing.Error(_invocationId, ex);
                 }
                 _httpRequest.Dispose();
-                if (_httpResponse != null)
-                {
-                    _httpResponse.Dispose();
-                }
+                _httpResponse?.Dispose();
                 throw ex;
             }
             // Create Result
@@ -309,10 +306,7 @@ namespace Microsoft.Azure.PowerShell.Cmdlets.Websites.Helper.PrivateDns
                 catch (JsonException ex)
                 {
                     _httpRequest.Dispose();
-                    if (_httpResponse != null)
-                    {
-                        _httpResponse.Dispose();
-                    }
+                    _httpResponse?.Dispose();
                     throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                 }
             }
@@ -327,10 +321,7 @@ namespace Microsoft.Azure.PowerShell.Cmdlets.Websites.Helper.PrivateDns
                 catch (JsonException ex)
                 {
                     _httpRequest.Dispose();
-                    if (_httpResponse != null)
-                    {
-                        _httpResponse.Dispose();
-                    }
+                    _httpResponse?.Dispose();
                     throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                 }
             }
diff --git a/src/Websites/Websites.Helper/PrivateDns/RecordSetsOperations.cs b/src/Websites/Websites.Helper/PrivateDns/RecordSetsOperations.cs
index 8f386222eb..26b52c6fd4 100644
--- a/src/Websites/Websites.Helper/PrivateDns/RecordSetsOperations.cs
+++ b/src/Websites/Websites.Helper/PrivateDns/RecordSetsOperations.cs
@@ -155,7 +155,7 @@ namespace Microsoft.Azure.PowerShell.Cmdlets.Websites.Helper.PrivateDns
             List<string> _queryParameters = new List<string>();
             if (Client.ApiVersion != null)
             {
-                _queryParameters.Add(string.Format("api-version={0}", System.Uri.EscapeDataString(Client.ApiVersion)));
+                _queryParameters.Add($"api-version={System.Uri.EscapeDataString(Client.ApiVersion)}");
             }
             if (_queryParameters.Count > 0)
             {
@@ -239,7 +239,7 @@ namespace Microsoft.Azure.PowerShell.Cmdlets.Websites.Helper.PrivateDns
             string _responseContent = null;
             if ((int)_statusCode != 200 && (int)_statusCode != 201)
             {
-                var ex = new CloudException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
+                var ex = new CloudException($"Operation returned an invalid status code '{_statusCode}'");
                 try
                 {
                     _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
@@ -265,10 +265,7 @@ namespace Microsoft.Azure.PowerShell.Cmdlets.Websites.Helper.PrivateDns
                     ServiceClientTracing.Error(_invocationId, ex);
                 }
                 _httpRequest.Dispose();
-                if (_httpResponse != null)
-                {
-                    _httpResponse.Dispose();
-                }
+                _httpResponse?.Dispose();
                 throw ex;
             }
             // Create Result
@@ -290,10 +287,7 @@ namespace Microsoft.Azure.PowerShell.Cmdlets.Websites.Helper.PrivateDns
                 catch (JsonException ex)
                 {
                     _httpRequest.Dispose();
-                    if (_httpResponse != null)
-                    {
-                        _httpResponse.Dispose();
-                    }
+                    _httpResponse?.Dispose();
                     throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                 }
             }
@@ -308,10 +302,7 @@ namespace Microsoft.Azure.PowerShell.Cmdlets.Websites.Helper.PrivateDns
                 catch (JsonException ex)
                 {
                     _httpRequest.Dispose();
-                    if (_httpResponse != null)
-                    {
-                        _httpResponse.Dispose();
-                    }
+                    _httpResponse?.Dispose();
                     throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                 }
             }
diff --git a/src/Websites/Websites.Helper/PrivateDns/VirtualNetworkLinksOperations.cs b/src/Websites/Websites.Helper/PrivateDns/VirtualNetworkLinksOperations.cs
index c702c0906b..296a01fdbc 100644
--- a/src/Websites/Websites.Helper/PrivateDns/VirtualNetworkLinksOperations.cs
+++ b/src/Websites/Websites.Helper/PrivateDns/VirtualNetworkLinksOperations.cs
@@ -164,11 +164,11 @@ namespace Microsoft.Azure.PowerShell.Cmdlets.Websites.Helper.PrivateDns
             List<string> _queryParameters = new List<string>();
             if (top != null)
             {
-                _queryParameters.Add(string.Format("$top={0}", System.Uri.EscapeDataString(Rest.Serialization.SafeJsonConvert.SerializeObject(top, Client.SerializationSettings).Trim('"'))));
+                _queryParameters.Add($"$top={System.Uri.EscapeDataString(Rest.Serialization.SafeJsonConvert.SerializeObject(top, Client.SerializationSettings).Trim('"'))}");
             }
             if (Client.ApiVersion != null)
             {
-                _queryParameters.Add(string.Format("api-version={0}", System.Uri.EscapeDataString(Client.ApiVersion)));
+                _queryParameters.Add($"api-version={System.Uri.EscapeDataString(Client.ApiVersion)}");
             }
             if (_queryParameters.Count > 0)
             {
@@ -230,7 +230,7 @@ namespace Microsoft.Azure.PowerShell.Cmdlets.Websites.Helper.PrivateDns
             string _responseContent = null;
             if ((int)_statusCode != 200)
             {
-                var ex = new CloudException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
+                var ex = new CloudException($"Operation returned an invalid status code '{_statusCode}'");
                 try
                 {
                     _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
@@ -256,10 +256,7 @@ namespace Microsoft.Azure.PowerShell.Cmdlets.Websites.Helper.PrivateDns
                     ServiceClientTracing.Error(_invocationId, ex);
                 }
                 _httpRequest.Dispose();
-                if (_httpResponse != null)
-                {
-                    _httpResponse.Dispose();
-                }
+                _httpResponse?.Dispose();
                 throw ex;
             }
             // Create Result
@@ -281,10 +278,7 @@ namespace Microsoft.Azure.PowerShell.Cmdlets.Websites.Helper.PrivateDns
                 catch (JsonException ex)
                 {
                     _httpRequest.Dispose();
-                    if (_httpResponse != null)
-                    {
-                        _httpResponse.Dispose();
-                    }
+                    _httpResponse?.Dispose();
                     throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                 }
             }
@@ -395,7 +389,7 @@ namespace Microsoft.Azure.PowerShell.Cmdlets.Websites.Helper.PrivateDns
             List<string> _queryParameters = new List<string>();
             if (Client.ApiVersion != null)
             {
-                _queryParameters.Add(string.Format("api-version={0}", System.Uri.EscapeDataString(Client.ApiVersion)));
+                _queryParameters.Add($"api-version={System.Uri.EscapeDataString(Client.ApiVersion)}");
             }
             if (_queryParameters.Count > 0)
             {
@@ -479,7 +473,7 @@ namespace Microsoft.Azure.PowerShell.Cmdlets.Websites.Helper.PrivateDns
             string _responseContent = null;
             if ((int)_statusCode != 200 && (int)_statusCode != 201 && (int)_statusCode != 202)
             {
-                var ex = new CloudException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
+                var ex = new CloudException($"Operation returned an invalid status code '{_statusCode}'");
                 try
                 {
                     _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
@@ -505,10 +499,7 @@ namespace Microsoft.Azure.PowerShell.Cmdlets.Websites.Helper.PrivateDns
                     ServiceClientTracing.Error(_invocationId, ex);
                 }
                 _httpRequest.Dispose();
-                if (_httpResponse != null)
-                {
-                    _httpResponse.Dispose();
-                }
+                _httpResponse?.Dispose();
                 throw ex;
             }
             // Create Result
@@ -530,10 +521,7 @@ namespace Microsoft.Azure.PowerShell.Cmdlets.Websites.Helper.PrivateDns
                 catch (JsonException ex)
                 {
                     _httpRequest.Dispose();
-                    if (_httpResponse != null)
-                    {
-                        _httpResponse.Dispose();
-                    }
+                    _httpResponse?.Dispose();
                     throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                 }
             }
@@ -548,10 +536,7 @@ namespace Microsoft.Azure.PowerShell.Cmdlets.Websites.Helper.PrivateDns
                 catch (JsonException ex)
                 {
                     _httpRequest.Dispose();
-                    if (_httpResponse != null)
-                    {
-                        _httpResponse.Dispose();
-                    }
+                    _httpResponse?.Dispose();
                     throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                 }
             }
@@ -670,7 +655,7 @@ namespace Microsoft.Azure.PowerShell.Cmdlets.Websites.Helper.PrivateDns
             string _responseContent = null;
             if ((int)_statusCode != 200)
             {
-                var ex = new CloudException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
+                var ex = new CloudException($"Operation returned an invalid status code '{_statusCode}'");
                 try
                 {
                     _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
@@ -696,10 +681,7 @@ namespace Microsoft.Azure.PowerShell.Cmdlets.Websites.Helper.PrivateDns
                     ServiceClientTracing.Error(_invocationId, ex);
                 }
                 _httpRequest.Dispose();
-                if (_httpResponse != null)
-                {
-                    _httpResponse.Dispose();
-                }
+                _httpResponse?.Dispose();
                 throw ex;
             }
             // Create Result
@@ -721,10 +703,7 @@ namespace Microsoft.Azure.PowerShell.Cmdlets.Websites.Helper.PrivateDns
                 catch (JsonException ex)
                 {
                     _httpRequest.Dispose();
-                    if (_httpResponse != null)
-                    {
-                        _httpResponse.Dispose();
-                    }
+                    _httpResponse?.Dispose();
                     throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                 }
             }
diff --git a/src/Websites/Websites.Test/ScenarioTests/WebsitesController.cs b/src/Websites/Websites.Test/ScenarioTests/WebsitesController.cs
index bf7efce41b..e2f5255d7c 100644
--- a/src/Websites/Websites.Test/ScenarioTests/WebsitesController.cs
+++ b/src/Websites/Websites.Test/ScenarioTests/WebsitesController.cs
@@ -60,14 +60,14 @@ namespace Microsoft.Azure.Commands.Websites.Test.ScenarioTests
             var mockName = sf.GetMethod().Name;
             _helper.TracingInterceptor = logger;
 
-            logger.Information(string.Format("Test method entered: {0}.{1}", callingClassType, mockName));
+            logger.Information($"Test method entered: {callingClassType}.{mockName}");
             RunPsTestWorkflow(
                 () => scripts,
                 // no custom cleanup
                 null,
                 callingClassType,
                 mockName);
-            logger.Information(string.Format("Test method finished: {0}.{1}", callingClassType, mockName));
+            logger.Information($"Test method finished: {callingClassType}.{mockName}");
         }
 
         public void RunPsTestWorkflow(
diff --git a/src/Websites/Websites/Cmdlets/AppServiceEnvironment/RemoveAzureAppServiceEnvironment.cs b/src/Websites/Websites/Cmdlets/AppServiceEnvironment/RemoveAzureAppServiceEnvironment.cs
index 12a5b2d4e2..27207de092 100644
--- a/src/Websites/Websites/Cmdlets/AppServiceEnvironment/RemoveAzureAppServiceEnvironment.cs
+++ b/src/Websites/Websites/Cmdlets/AppServiceEnvironment/RemoveAzureAppServiceEnvironment.cs
@@ -46,7 +46,7 @@ namespace Microsoft.Azure.Commands.WebApps.Cmdlets.AppServiceEnvironment
             var aseResourceGroup = (ParameterSetName == InputValuesParameterSet) ? ResourceGroupName : InputObject.ResourceGroupName;
             ConfirmAction(
                 Force.IsPresent,
-                string.Format("Are you sure you want to remove the app service environment '{0}'?", aseName),
+                $"Are you sure you want to remove the app service environment '{aseName}'?",
                 "Removing app service environment",
                 aseName,
                 () =>
diff --git a/src/Websites/Websites/Cmdlets/AppServicePlans/GetAzureAppServicePlan.cs b/src/Websites/Websites/Cmdlets/AppServicePlans/GetAzureAppServicePlan.cs
index 80ff8592ec..61b98528ca 100644
--- a/src/Websites/Websites/Cmdlets/AppServicePlans/GetAzureAppServicePlan.cs
+++ b/src/Websites/Websites/Cmdlets/AppServicePlans/GetAzureAppServicePlan.cs
@@ -87,7 +87,7 @@ namespace Microsoft.Azure.Commands.WebApps.Cmdlets.AppServicePlans
         private void GetByAppServicePlanName()
         {
             const string progressDescriptionFormat = "Progress: {0}/{1} app service plans processed.";
-            var progressRecord = new ProgressRecord(1, string.Format("Get app service plans with name '{0}'", Name), "Progress:");
+            var progressRecord = new ProgressRecord(1, $"Get app service plans with name '{Name}'", "Progress:");
 
             WriteProgress(progressRecord);
 
@@ -175,7 +175,7 @@ namespace Microsoft.Azure.Commands.WebApps.Cmdlets.AppServicePlans
         private void GetByLocation()
         {
             const string progressDescriptionFormat = "Progress: {0}/{1} app service plans processed.";
-            var progressRecord = new ProgressRecord(1, string.Format("Get app service plans at location '{0}'", Location), "Progress:");
+            var progressRecord = new ProgressRecord(1, $"Get app service plans at location '{Location}'", "Progress:");
 
             WriteProgress(progressRecord);
 
diff --git a/src/Websites/Websites/Cmdlets/BackupRestore/BackupRestoreUtils.cs b/src/Websites/Websites/Cmdlets/BackupRestore/BackupRestoreUtils.cs
index a2f8199e76..fa48f987c3 100644
--- a/src/Websites/Websites/Cmdlets/BackupRestore/BackupRestoreUtils.cs
+++ b/src/Websites/Websites/Cmdlets/BackupRestore/BackupRestoreUtils.cs
@@ -29,7 +29,7 @@ namespace Microsoft.Azure.Commands.WebApps.Cmdlets.WebApps
             }
             catch (ArgumentException)
             {
-                throw new ArgumentException(string.Format("{0} is not a valid FrequencyUnit. Valid options are Hour and Day.", frequencyUnit));
+                throw new ArgumentException($"{frequencyUnit} is not a valid FrequencyUnit. Valid options are Hour and Day.");
             }
             return freq;
         }
diff --git a/src/Websites/Websites/Cmdlets/BackupRestore/GetAzureWebAppBackupList.cs b/src/Websites/Websites/Cmdlets/BackupRestore/GetAzureWebAppBackupList.cs
index 4df92b250f..62a41208b0 100644
--- a/src/Websites/Websites/Cmdlets/BackupRestore/GetAzureWebAppBackupList.cs
+++ b/src/Websites/Websites/Cmdlets/BackupRestore/GetAzureWebAppBackupList.cs
@@ -29,7 +29,7 @@ namespace Microsoft.Azure.Commands.WebApps.Cmdlets.WebApps
         {
             base.ExecuteCmdlet();
             var list = WebsitesClient.ListSiteBackups(ResourceGroupName, Name, Slot);
-            AzureWebAppBackup[] backups = new AzureWebAppBackup[list.Count()];
+            AzureWebAppBackup[] backups = new AzureWebAppBackup[list.Count];
             for (int i = 0; i < backups.Length; i++)
             {
                 backups[i] = BackupRestoreUtils.BackupItemToAppBackup(list.ElementAt(i), ResourceGroupName, Name, Slot);
diff --git a/src/Websites/Websites/Cmdlets/BackupRestore/RestoreAzureDeletedWebApp.cs b/src/Websites/Websites/Cmdlets/BackupRestore/RestoreAzureDeletedWebApp.cs
index 6e9a91d1ef..48c77ffc07 100644
--- a/src/Websites/Websites/Cmdlets/BackupRestore/RestoreAzureDeletedWebApp.cs
+++ b/src/Websites/Websites/Cmdlets/BackupRestore/RestoreAzureDeletedWebApp.cs
@@ -116,7 +116,7 @@ namespace Microsoft.Azure.Commands.WebApps.Cmdlets.BackupRestore
                             null, string.Empty, string.Empty);
                         restoreAction();
                     };
-                    string confirmMsg = string.Format("This web app will be created. App Name: {0}, Resource Group: {1}", TargetName, TargetResourceGroupName);
+                    string confirmMsg = $"This web app will be created. App Name: {TargetName}, Resource Group: {TargetResourceGroupName}";
                     if (!string.IsNullOrEmpty(TargetSlot))
                     {
                         confirmMsg += ", Slot: " + TargetSlot;
diff --git a/src/Websites/Websites/Cmdlets/Certificates/ImportAzWebAppKeyVaultCertificate.cs b/src/Websites/Websites/Cmdlets/Certificates/ImportAzWebAppKeyVaultCertificate.cs
index 3e4842216b..ffe89dba8a 100644
--- a/src/Websites/Websites/Cmdlets/Certificates/ImportAzWebAppKeyVaultCertificate.cs
+++ b/src/Websites/Websites/Cmdlets/Certificates/ImportAzWebAppKeyVaultCertificate.cs
@@ -74,7 +74,7 @@ namespace Microsoft.Azure.Commands.WebApps.Cmdlets.WebApps
                 {
                     WriteWarning("Unable to verify Key Vault permissions.");
                     WriteWarning("You may need to grant Microsoft.Azure.WebSites service principal the Secret:Get permission");
-                    WriteWarning(string.Format("Find more details here: '{0}'", lnk));
+                    WriteWarning($"Find more details here: '{lnk}'");
                 }
 
                 Certificate kvc = null;
diff --git a/src/Websites/Websites/Cmdlets/Certificates/NewAzureWebAppSSLBinding.cs b/src/Websites/Websites/Cmdlets/Certificates/NewAzureWebAppSSLBinding.cs
index b267d53b0c..47330c906e 100644
--- a/src/Websites/Websites/Cmdlets/Certificates/NewAzureWebAppSSLBinding.cs
+++ b/src/Websites/Websites/Cmdlets/Certificates/NewAzureWebAppSSLBinding.cs
@@ -164,12 +164,12 @@ namespace Microsoft.Azure.Commands.WebApps.Cmdlets.WebApps
 
         private string GenerateCertName(string thumbPrint, string hostingEnv, string location, string resourceGroupName)
         {
-            return string.Format("{0}{1}{2}", thumbPrint, CertNamePostFixSeparator, GenerateCertNamePostFix(hostingEnv, location, resourceGroupName));
+            return $"{thumbPrint}{CertNamePostFixSeparator}{GenerateCertNamePostFix(hostingEnv, location, resourceGroupName)}";
         }
 
         private string GenerateCertNamePostFix(string hostingEnv, string location, string resourceGroupName)
         {
-            return string.Format("{0}{1}{2}{3}{4}", string.IsNullOrEmpty(hostingEnv) ? "" : hostingEnv, CertNamePostFixSeparator, location, CertNamePostFixSeparator, resourceGroupName);
+            return $"{(string.IsNullOrEmpty(hostingEnv) ? "" : hostingEnv)}{CertNamePostFixSeparator}{location}{CertNamePostFixSeparator}{resourceGroupName}";
         }
     }
 }
diff --git a/src/Websites/Websites/Cmdlets/DeploymentSlots/SwitchAzureWebAppSlot.cs b/src/Websites/Websites/Cmdlets/DeploymentSlots/SwitchAzureWebAppSlot.cs
index 831916f6cd..d44bc087a8 100644
--- a/src/Websites/Websites/Cmdlets/DeploymentSlots/SwitchAzureWebAppSlot.cs
+++ b/src/Websites/Websites/Cmdlets/DeploymentSlots/SwitchAzureWebAppSlot.cs
@@ -96,7 +96,7 @@ namespace Microsoft.Azure.Commands.WebApps.Cmdlets.DeploymentSlots
 
             if (!SwapWithPreviewAction.HasValue)
             {
-                actionMessage = string.Format("Regular swap: Are you sure you want to swap {0} slot with {1} slot", SourceSlotName, DestinationSlotName);
+                actionMessage = $"Regular swap: Are you sure you want to swap {SourceSlotName} slot with {DestinationSlotName} slot";
                 processMessage = "Regular swap: Swapping the Web App slots";
             }
             else
@@ -105,17 +105,17 @@ namespace Microsoft.Azure.Commands.WebApps.Cmdlets.DeploymentSlots
                 {
 
                     case Utilities.SwapWithPreviewAction.ApplySlotConfig:
-                        actionMessage = string.Format("Swap with preview: Applying slot config from {0} slot onto {1} slot", DestinationSlotName, SourceSlotName);
+                        actionMessage = $"Swap with preview: Applying slot config from {DestinationSlotName} slot onto {SourceSlotName} slot";
                         processMessage = "Swap with preview: Applying slot config from destination slot onto source slot";
                         break;
 
                     case Utilities.SwapWithPreviewAction.CompleteSlotSwap:
-                        actionMessage = string.Format("Swap with preview: Completing the current on-going slot swap operation between {0} and {1} slots", SourceSlotName, DestinationSlotName);
+                        actionMessage = $"Swap with preview: Completing the current on-going slot swap operation between {SourceSlotName} and {DestinationSlotName} slots";
                         processMessage = "Swap with preview: Completing the current on-going slot swap operation";
                         break;
 
                     case Utilities.SwapWithPreviewAction.ResetSlotSwap:
-                        actionMessage = string.Format("Swap with preview: Resetting the current on-going slot swap operation between {0} and {1} slots", SourceSlotName, DestinationSlotName);
+                        actionMessage = $"Swap with preview: Resetting the current on-going slot swap operation between {SourceSlotName} and {DestinationSlotName} slots";
                         processMessage = "Swap with preview: Resetting the current on-going slot swap operation";
                         break;
 
diff --git a/src/Websites/Websites/Cmdlets/TrafficRouting/AddAzureWebAppTrafficRoutingRule.cs b/src/Websites/Websites/Cmdlets/TrafficRouting/AddAzureWebAppTrafficRoutingRule.cs
index b598bd567c..60e185be90 100644
--- a/src/Websites/Websites/Cmdlets/TrafficRouting/AddAzureWebAppTrafficRoutingRule.cs
+++ b/src/Websites/Websites/Cmdlets/TrafficRouting/AddAzureWebAppTrafficRoutingRule.cs
@@ -66,7 +66,7 @@ namespace Microsoft.Azure.Commands.WebApps.Cmdlets.TrafficRouting
                     var givenRampUpRuleObj = siteConfig.Experiments.RampUpRules.FirstOrDefault(item => item.Name == rampUpRule.Name);
                     if (givenRampUpRuleObj == null)
                     {
-                        if (this.ShouldProcess(this.WebAppName, string.Format("Creating a new Routing Rule for slot '{0}' in Web Application - {1}.", rampUpRule.Name, this.WebAppName)))
+                        if (this.ShouldProcess(this.WebAppName, $"Creating a new Routing Rule for slot '{rampUpRule.Name}' in Web Application - {this.WebAppName}."))
                         {
                             //Add the given rule to the existing config
                             siteConfig.Experiments.RampUpRules.Add(rampUpRule);
diff --git a/src/Websites/Websites/Cmdlets/TrafficRouting/RemoveAzureWebAppTrafficRoutingRule.cs b/src/Websites/Websites/Cmdlets/TrafficRouting/RemoveAzureWebAppTrafficRoutingRule.cs
index a37fcec43d..67c7f22b5e 100644
--- a/src/Websites/Websites/Cmdlets/TrafficRouting/RemoveAzureWebAppTrafficRoutingRule.cs
+++ b/src/Websites/Websites/Cmdlets/TrafficRouting/RemoveAzureWebAppTrafficRoutingRule.cs
@@ -56,7 +56,7 @@ namespace Microsoft.Azure.Commands.WebApps.Cmdlets.TrafficRouting
                 var givenRampUpRuleObj = siteConfig.Experiments.RampUpRules.FirstOrDefault(item => item.Name == RuleName);
                 if (givenRampUpRuleObj != null)
                 {
-                    if (this.ShouldProcess(this.RuleName, string.Format("Deleting Routing Rule for slot - '{0}' from Web Application - {1}", this.RuleName, this.WebAppName)))
+                    if (this.ShouldProcess(this.RuleName, $"Deleting Routing Rule for slot - '{this.RuleName}' from Web Application - {this.WebAppName}"))
                     {
                         //Remove the rule
                         siteConfig.Experiments.RampUpRules.Remove(givenRampUpRuleObj);
diff --git a/src/Websites/Websites/Cmdlets/TrafficRouting/UpdateAzureWebAppTrafficRoutingRule.cs b/src/Websites/Websites/Cmdlets/TrafficRouting/UpdateAzureWebAppTrafficRoutingRule.cs
index 53d45f665b..e76679fbb1 100644
--- a/src/Websites/Websites/Cmdlets/TrafficRouting/UpdateAzureWebAppTrafficRoutingRule.cs
+++ b/src/Websites/Websites/Cmdlets/TrafficRouting/UpdateAzureWebAppTrafficRoutingRule.cs
@@ -68,7 +68,7 @@ namespace Microsoft.Azure.Commands.WebApps.Cmdlets.TrafficRouting
                     var givenRampUpRuleObj = siteConfig.Experiments.RampUpRules.FirstOrDefault(item => item.Name == rampUpRule.Name);
                     if (givenRampUpRuleObj != null)
                     {
-                        if (this.ShouldProcess(this.WebAppName, string.Format("Updating the Routing Rule for slot - '{0}' in Web Application - {1}.", rampUpRule.Name, this.WebAppName)))
+                        if (this.ShouldProcess(this.WebAppName, $"Updating the Routing Rule for slot - '{rampUpRule.Name}' in Web Application - {this.WebAppName}."))
                         {
                             //Remove previous rule
                             siteConfig.Experiments.RampUpRules.Remove(givenRampUpRuleObj);
diff --git a/src/Websites/Websites/Cmdlets/WebApps/GetAzureWebApp.cs b/src/Websites/Websites/Cmdlets/WebApps/GetAzureWebApp.cs
index 6d4edf218b..4591b1e327 100644
--- a/src/Websites/Websites/Cmdlets/WebApps/GetAzureWebApp.cs
+++ b/src/Websites/Websites/Cmdlets/WebApps/GetAzureWebApp.cs
@@ -90,7 +90,7 @@ namespace Microsoft.Azure.Commands.WebApps.Cmdlets.WebApps
         private void GetByWebAppName()
         {
             const string progressDescriptionFormat = "Progress: {0}/{1} web apps processed.";
-            var progressRecord = new ProgressRecord(1, string.Format("Get web apps with name '{0}'", Name), "Progress:");
+            var progressRecord = new ProgressRecord(1, $"Get web apps with name '{Name}'", "Progress:");
 
             WriteProgress(progressRecord);
 
@@ -190,7 +190,7 @@ namespace Microsoft.Azure.Commands.WebApps.Cmdlets.WebApps
         private void GetByLocation()
         {
             const string progressDescriptionFormat = "Progress: {0}/{1} web apps processed.";
-            var progressRecord = new ProgressRecord(1, string.Format("Get web apps at location '{0}'", Location), "Progress:");
+            var progressRecord = new ProgressRecord(1, $"Get web apps at location '{Location}'", "Progress:");
 
             WriteProgress(progressRecord);
 
diff --git a/src/Websites/Websites/Cmdlets/WebApps/NewAzureWebApp.cs b/src/Websites/Websites/Cmdlets/WebApps/NewAzureWebApp.cs
index 3da7d27f06..17b65d5a3d 100644
--- a/src/Websites/Websites/Cmdlets/WebApps/NewAzureWebApp.cs
+++ b/src/Websites/Websites/Cmdlets/WebApps/NewAzureWebApp.cs
@@ -169,7 +169,7 @@ namespace Microsoft.Azure.Commands.WebApps.Cmdlets.WebApps
             else
             {
                 if (ShouldProcess(
-                    string.Format("WebApp '{0}' from WebApp '{1}'", Name, SourceWebApp?.Name),
+                    $"WebApp '{Name}' from WebApp '{SourceWebApp?.Name}'",
                     "Copy"))
                 {
                     CreateWithClonedWebApp();
@@ -183,8 +183,7 @@ namespace Microsoft.Azure.Commands.WebApps.Cmdlets.WebApps
             var available = WebsitesClient.WrappedWebsitesClient.CheckNameAvailability(name,"Site");
             if (available.NameAvailable.HasValue && !available.NameAvailable.Value)
             {
-                throw new InvalidOperationException(string.Format(
-                    "Website name '{0}' is not available.  Please try a different name.", name));
+                throw new InvalidOperationException($"Website name '{name}' is not available.  Please try a different name.");
             }
         }
 
@@ -496,7 +495,7 @@ namespace Microsoft.Azure.Commands.WebApps.Cmdlets.WebApps
                 }
             };
 
-            var deploymentName = string.Format("CloneSlotsFor{0}", Name);
+            var deploymentName = $"CloneSlotsFor{Name}";
             ResourcesClient.ResourceManagementClient.Deployments.CreateOrUpdate(ResourceGroupName, deploymentName, deployment);
             var result = ResourcesClient.ProvisionDeploymentStatus(ResourceGroupName, deploymentName, deployment);
             WriteObject(result.ToPSResourceGroupDeployment(ResourceGroupName));
diff --git a/src/Websites/Websites/Models.WebApp/ResourceClient.cs b/src/Websites/Websites/Models.WebApp/ResourceClient.cs
index 62c7cc61ea..70565c8868 100644
--- a/src/Websites/Websites/Models.WebApp/ResourceClient.cs
+++ b/src/Websites/Websites/Models.WebApp/ResourceClient.cs
@@ -213,10 +213,7 @@ namespace Microsoft.Azure.Commands.WebApps.Models
 
                     List<string> detailedMessage = ParseDetailErrorMessage(operation.Properties.StatusMessage.ToString());
 
-                    if (detailedMessage != null)
-                    {
-                        detailedMessage.ForEach(s => WriteError(s));
-                    }
+                    detailedMessage?.ForEach(s => WriteError(s));
                 }
             }
         }
@@ -264,7 +261,7 @@ namespace Microsoft.Azure.Commands.WebApps.Models
 
             do
             {
-                WriteVerbose(string.Format("Checking deployment status in {0} seconds.", counter / 1000));
+                WriteVerbose($"Checking deployment status in {counter / 1000} seconds.");
                 TestMockSupport.Delay(counter);
 
                 if (job != null)
@@ -371,7 +368,7 @@ namespace Microsoft.Azure.Commands.WebApps.Models
         /// <param name="selectLastSegment">When set to true, gets the last segment (default) otherwise gets the first one.</param>
         private static string GetSubstringAfterSegment(string resourceId, string segmentName, bool selectLastSegment = true)
         {
-            var segment = string.Format("/{0}/", segmentName.Trim('/').ToUpperInvariant());
+            var segment = $"/{segmentName.Trim('/').ToUpperInvariant()}/";
 
             var index = selectLastSegment
                 ? resourceId.LastIndexOf(segment, StringComparison.InvariantCultureIgnoreCase)
diff --git a/src/Websites/Websites/Utilities/CmdletHelpers.cs b/src/Websites/Websites/Utilities/CmdletHelpers.cs
index 9c0c4593ad..46fa4564b7 100644
--- a/src/Websites/Websites/Utilities/CmdletHelpers.cs
+++ b/src/Websites/Websites/Utilities/CmdletHelpers.cs
@@ -207,17 +207,17 @@ namespace Microsoft.Azure.Commands.WebApps.Utilities
 
             if (startTime.HasValue)
             {
-                filter += string.Format("and startTime eq {0}", startTime.Value.ToString(dateTimeFormat));
+                filter += $"and startTime eq {startTime.Value.ToString(dateTimeFormat)}";
             }
 
             if (endTime.HasValue)
             {
-                filter += string.Format("and endTime eq {0}", endTime.Value.ToString(dateTimeFormat));
+                filter += $"and endTime eq {endTime.Value.ToString(dateTimeFormat)}";
             }
 
             if (!string.IsNullOrWhiteSpace(timeGrain))
             {
-                filter += string.Format("and timeGrain eq duration'{0}'", timeGrain);
+                filter += $"and timeGrain eq duration'{timeGrain}'";
             }
 
             return filter;
diff --git a/src/Websites/Websites/Utilities/WebsitesClient.cs b/src/Websites/Websites/Utilities/WebsitesClient.cs
index ff9034f250..51569b64be 100644
--- a/src/Websites/Websites/Utilities/WebsitesClient.cs
+++ b/src/Websites/Websites/Utilities/WebsitesClient.cs
@@ -363,7 +363,7 @@ namespace Microsoft.Azure.Commands.WebApps.Utilities
                 }
 
                 // if there are no compatible versions subsequent to the minimum versions, we don't continue because the command will fail
-                if (compatibleVersions.Where(v => v.CompareTo(minimumVersion) > 0).Count() == 0)
+                if (!compatibleVersions.Any(v => v.CompareTo(minimumVersion) > 0))
                 {
                     WriteError(Properties.Resources.EnterContainerPSSessionPSCoreVersionNotSupported);
 
@@ -391,7 +391,7 @@ namespace Microsoft.Azure.Commands.WebApps.Utilities
 
                 Regex expression = new Regex(@"^\*$|((^\*|^" + (string.IsNullOrWhiteSpace(slotName) ? webSiteName : webSiteName + "-" + slotName) + ").azurewebsites.net)");
 
-                if (trustedHostsScriptResult.Split(',').Where(h => expression.IsMatch(h)).Count() < 1)
+                if (!trustedHostsScriptResult.Split(',').Where(h => expression.IsMatch(h)).Any())
                 {
                     WriteWarning(string.Format(Properties.Resources.EnterContainerPSSessionFormatForTrustedHostsWarning, string.IsNullOrWhiteSpace(trustedHostsScriptResult) ? defaultTrustedHostsScriptResult : trustedHostsScriptResult) +
                         Environment.NewLine +
@@ -419,9 +419,9 @@ namespace Microsoft.Azure.Commands.WebApps.Utilities
             cmdlet.ExecuteScript<object>(psSessionScript);
             if (newPSSession)
             {
-                cmdlet.WriteObject(cmdlet.GetVariableValue(string.Format("{0}NewPsSession", webAppContainerPSSessionVarPrefix)));
+                cmdlet.WriteObject(cmdlet.GetVariableValue($"{webAppContainerPSSessionVarPrefix}NewPsSession"));
             }
-            cmdlet.ExecuteScript<object>(string.Format("Clear-Variable {0}*", webAppContainerPSSessionVarPrefix)); //Clearing session variable
+            cmdlet.ExecuteScript<object>($"Clear-Variable {webAppContainerPSSessionVarPrefix}*"); //Clearing session variable
         }
 
         private string GetPsOperatingSystem(PSCmdlet cmdlet)
@@ -439,8 +439,7 @@ namespace Microsoft.Azure.Commands.WebApps.Utilities
 
             List<Version> versionResults = new List<Version>();
 
-            if (psVersionsTable != null
-                && psVersionsTable is Version[] versions)
+            if (psVersionsTable is Version[] versions)
             {
                 foreach (var version in versions)
                 {
diff --git a/src/Websites/Websites/Validations/ValidateConnectionStringsAttribute.cs b/src/Websites/Websites/Validations/ValidateConnectionStringsAttribute.cs
index 07ed862acd..60ae4ac2da 100644
--- a/src/Websites/Websites/Validations/ValidateConnectionStringsAttribute.cs
+++ b/src/Websites/Websites/Validations/ValidateConnectionStringsAttribute.cs
@@ -33,7 +33,7 @@ namespace Microsoft.Azure.Commands.WebApps.Validations
             {
                 if (key.GetType() != typeof(string))
                 {
-                    throw new ValidationMetadataException(string.Format("Key '{0}' should be of type string instead of {1}", key, key.GetType()));
+                    throw new ValidationMetadataException($"Key '{key}' should be of type string instead of {key.GetType()}");
                 }
 
                 var typeValuePair = hashtable[key] as Hashtable;
diff --git a/src/Websites/Websites/Validations/ValidateHttpHeaderAttribute.cs b/src/Websites/Websites/Validations/ValidateHttpHeaderAttribute.cs
index c3a020b140..ea42729d31 100644
--- a/src/Websites/Websites/Validations/ValidateHttpHeaderAttribute.cs
+++ b/src/Websites/Websites/Validations/ValidateHttpHeaderAttribute.cs
@@ -42,13 +42,13 @@ namespace Microsoft.Azure.Commands.WebApps.Validations
             {
                 if (key.GetType() != typeof(string))
                 {
-                    throw new ValidationMetadataException(string.Format("Key '{0}' should be of type string instead of {1}", key, key.GetType()));
+                    throw new ValidationMetadataException($"Key '{key}' should be of type string instead of {key.GetType()}");
                 }
 
                 var headerName = key as string;
                 if (!SupportedHttpHeaders.Contains(headerName, StringComparer.OrdinalIgnoreCase))
                 {
-                    throw new ValidationMetadataException(string.Format("'{0}' is not a supported http header name. only {1} are supported", headerName, SupportedHttpHeaders.ToString()));
+                    throw new ValidationMetadataException($"'{headerName}' is not a supported http header name. only {SupportedHttpHeaders.ToString()} are supported");
                 }
 
                 var value = hashtable[headerName];
@@ -56,11 +56,11 @@ namespace Microsoft.Azure.Commands.WebApps.Validations
                 {
                     var headerValues = value as object[];
                     if (headerValues.Length > 8)
-                        throw new ValidationMetadataException(string.Format("Header '{0}' contains more than 8 values", headerName));
+                        throw new ValidationMetadataException($"Header '{headerName}' contains more than 8 values");
 
                     if (headerName.Equals("x-forwarded-for", StringComparison.OrdinalIgnoreCase) && !headerValues.All(a => IsValidCIDR((string)a)))
                     {
-                        throw new ValidationMetadataException(string.Format("'{0}' must be in valid CIDR format. E.g. 192.168.0.0/24 (IPv4) or 2002::1234:abcd:ffff:c0a8:101/64 (IPv6)", headerName));
+                        throw new ValidationMetadataException($"'{headerName}' must be in valid CIDR format. E.g. 192.168.0.0/24 (IPv4) or 2002::1234:abcd:ffff:c0a8:101/64 (IPv6)");
                     }
                 }
                 else if (value.GetType() == typeof(string))
@@ -68,12 +68,12 @@ namespace Microsoft.Azure.Commands.WebApps.Validations
                     var headerValue = value as string;
                     if (headerName.Equals("x-forwarded-for", StringComparison.OrdinalIgnoreCase) && !IsValidCIDR(headerValue))
                     {
-                        throw new ValidationMetadataException(string.Format("'{0}' must be in valid CIDR format. E.g. 192.168.0.0/24 (IPv4) or 2002::1234:abcd:ffff:c0a8:101/64 (IPv6)", headerName));
+                        throw new ValidationMetadataException($"'{headerName}' must be in valid CIDR format. E.g. 192.168.0.0/24 (IPv4) or 2002::1234:abcd:ffff:c0a8:101/64 (IPv6)");
                     }
                 }
                 else
                 {
-                    throw new ValidationMetadataException(string.Format("Value(s) '{0}' should be of type string instead of {1}", key, key.GetType()));
+                    throw new ValidationMetadataException($"Value(s) '{key}' should be of type string instead of {key.GetType()}");
                 }
             }
         }
diff --git a/src/Websites/Websites/Validations/ValidateServerFarmAttribute.cs b/src/Websites/Websites/Validations/ValidateServerFarmAttribute.cs
index 7c818dcfc9..7ebed5e192 100644
--- a/src/Websites/Websites/Validations/ValidateServerFarmAttribute.cs
+++ b/src/Websites/Websites/Validations/ValidateServerFarmAttribute.cs
@@ -54,7 +54,7 @@ namespace Microsoft.Azure.Commands.WebApps.Validations
             var firstLetter = string.Equals("Shared", sku.Tier, StringComparison.OrdinalIgnoreCase) ? 'D' : sku.Tier[0];
             if (char.ToUpperInvariant(firstLetter) != char.ToUpperInvariant(sku.Name[0]))
             {
-                throw new ValidationMetadataException(string.Format("Arguments 'ServerFarm.SKU.Name' and 'ServerFarm.SKU.Tier' must point to the same tier. [F = Free, D = Shared, B = Basic, S = Standard, P = Premium, I=Isolated]. Current values: SKU.Name = {0}, SKU.Tier = {1}", sku.Name, sku.Tier));
+                throw new ValidationMetadataException($"Arguments 'ServerFarm.SKU.Name' and 'ServerFarm.SKU.Tier' must point to the same tier. [F = Free, D = Shared, B = Basic, S = Standard, P = Premium, I=Isolated]. Current values: SKU.Name = {sku.Name}, SKU.Tier = {sku.Tier}");
             }
         }
 
diff --git a/src/Websites/Websites/Validations/ValidateStringDictionaryAttribute.cs b/src/Websites/Websites/Validations/ValidateStringDictionaryAttribute.cs
index 4565cbd209..1ccf8a866b 100644
--- a/src/Websites/Websites/Validations/ValidateStringDictionaryAttribute.cs
+++ b/src/Websites/Websites/Validations/ValidateStringDictionaryAttribute.cs
@@ -31,13 +31,13 @@ namespace Microsoft.Azure.Commands.WebApps.Validations
             {
                 if (key.GetType() != typeof(string))
                 {
-                    throw new ValidationMetadataException(string.Format("Key '{0}' should be of type string instead of {1}", key, key.GetType()));
+                    throw new ValidationMetadataException($"Key '{key}' should be of type string instead of {key.GetType()}");
                 }
 
                 var value = hashtable[key];
                 if (value.GetType() != typeof(string))
                 {
-                    throw new ValidationMetadataException(string.Format("Value '{0}' should be of type string instead of {1}", value, value.GetType()));
+                    throw new ValidationMetadataException($"Value '{value}' should be of type string instead of {value.GetType()}");
                 }
             }
         }
diff --git a/src/Websites/Websites/Validations/ValidateWebAppNameAttribute.cs b/src/Websites/Websites/Validations/ValidateWebAppNameAttribute.cs
index 911b412bc0..9e8469c616 100644
--- a/src/Websites/Websites/Validations/ValidateWebAppNameAttribute.cs
+++ b/src/Websites/Websites/Validations/ValidateWebAppNameAttribute.cs
@@ -24,7 +24,7 @@ namespace Microsoft.Azure.Commands.WebApps.Validations
             var webAppName = arguments as string;
             if (CmdletHelpers.IsDeploymentSlot(webAppName))
             {
-                throw new ValidationMetadataException(string.Format("Specified resource '{0}' is a non-production web app slot. Please use the AzureRMWebAppSlot cmdlets to manage this resource", webAppName));
+                throw new ValidationMetadataException($"Specified resource '{webAppName}' is a non-production web app slot. Please use the AzureRMWebAppSlot cmdlets to manage this resource");
             }
         }
 
diff --git a/src/WindowsIotServices/generated/runtime/Serialization/JsonSerializer.cs b/src/WindowsIotServices/generated/runtime/Serialization/JsonSerializer.cs
index 32cb41ef25..dafe4aa65c 100644
--- a/src/WindowsIotServices/generated/runtime/Serialization/JsonSerializer.cs
+++ b/src/WindowsIotServices/generated/runtime/Serialization/JsonSerializer.cs
@@ -312,7 +312,7 @@ namespace Microsoft.Azure.PowerShell.Cmdlets.WindowsIotServices.Runtime.Json
                     default: return ReadArray((IEnumerable)value);
                 }
             }
-            else if (value is IEnumerable)
+            else if (value is IEnumerable iEnumerable)
             {
                 if (type.IsList && type.ElementType != null)
                 {
@@ -330,7 +330,7 @@ namespace Microsoft.Azure.PowerShell.Cmdlets.WindowsIotServices.Runtime.Json
                     }
                 }
 
-                return ReadArray((IEnumerable)value);
+                return ReadArray(iEnumerable);
             }
             else
             {
diff --git a/tools/ScenarioTest.ResourceManager/Mocks/MockClientFactory.cs b/tools/ScenarioTest.ResourceManager/Mocks/MockClientFactory.cs
index acef633f70..2d02659bee 100644
--- a/tools/ScenarioTest.ResourceManager/Mocks/MockClientFactory.cs
+++ b/tools/ScenarioTest.ResourceManager/Mocks/MockClientFactory.cs
@@ -113,8 +113,7 @@ namespace Microsoft.WindowsAzure.Commands.Common.Test.Mocks
                 if (throwWhenNotAvailable)
                 {
                     throw new ArgumentException(
-                        string.Format("TestManagementClientHelper class wasn't initialized with the {0} client.",
-                            typeof(TClient).Name));
+                        $"TestManagementClientHelper class wasn't initialized with the {typeof(TClient).Name} client.");
                 }
                 else
                 {
@@ -257,8 +256,7 @@ namespace Microsoft.WindowsAzure.Commands.Common.Test.Mocks
                 if (throwWhenNotAvailable)
                 {
                     throw new ArgumentException(
-                        string.Format("TestManagementClientHelper class wasn't initialized with the {0} client.",
-                            typeof(TClient).Name));
+                        $"TestManagementClientHelper class wasn't initialized with the {typeof(TClient).Name} client.");
                 }
                 else
                 {
@@ -273,8 +271,7 @@ namespace Microsoft.WindowsAzure.Commands.Common.Test.Mocks
 
             if (TestMockSupport.RunningMocked && HttpMockServer.GetCurrentMode() != HttpRecorderMode.Record)
             {
-                IAzureClient azureClient = client as IAzureClient;
-                if (azureClient != null)
+                if (client is IAzureClient azureClient)
                 {
                     azureClient.LongRunningOperationRetryTimeout = 0;
                 }
diff --git a/tools/ScenarioTest.ResourceManager/PermissiveRecordMatcher.cs b/tools/ScenarioTest.ResourceManager/PermissiveRecordMatcher.cs
index 5fb7fc4d4e..1330e6821c 100644
--- a/tools/ScenarioTest.ResourceManager/PermissiveRecordMatcher.cs
+++ b/tools/ScenarioTest.ResourceManager/PermissiveRecordMatcher.cs
@@ -29,7 +29,7 @@ namespace Microsoft.WindowsAzure.Commands.ScenarioTest
             }
 
             var encodedPath = Convert.ToBase64String(Encoding.UTF8.GetBytes(path));
-            return string.Format("{0} {1}", request.Method, encodedPath);
+            return $"{request.Method} {encodedPath}";
         }
 
         public string GetMatchingKey(RecordEntry recordEntry)
@@ -41,7 +41,7 @@ namespace Microsoft.WindowsAzure.Commands.ScenarioTest
                 encodedPath = Convert.ToBase64String(Encoding.UTF8.GetBytes(updatedPath));
             }
 
-            return string.Format("{0} {1}", recordEntry.RequestMethod, encodedPath);
+            return $"{recordEntry.RequestMethod} {encodedPath}";
         }
     }
 }
diff --git a/tools/ScenarioTest.ResourceManager/PermissiveRecordMatcherWithApiExclusion.cs b/tools/ScenarioTest.ResourceManager/PermissiveRecordMatcherWithApiExclusion.cs
index 6915fc1861..5ff22ef219 100644
--- a/tools/ScenarioTest.ResourceManager/PermissiveRecordMatcherWithApiExclusion.cs
+++ b/tools/ScenarioTest.ResourceManager/PermissiveRecordMatcherWithApiExclusion.cs
@@ -75,7 +75,7 @@ namespace Microsoft.WindowsAzure.Commands.ScenarioTest
             }
 
             var encodedPath = Convert.ToBase64String(Encoding.UTF8.GetBytes(path));
-            return string.Format("{0} {1}", request.Method, encodedPath);
+            return $"{request.Method} {encodedPath}";
         }
 
         public virtual string GetMatchingKey(RecordEntry recordEntry)
@@ -101,7 +101,7 @@ namespace Microsoft.WindowsAzure.Commands.ScenarioTest
                 encodedPath = Convert.ToBase64String(Encoding.UTF8.GetBytes(path));
             }
 
-            return string.Format("{0} {1}", recordEntry.RequestMethod, encodedPath);
+            return $"{recordEntry.RequestMethod} {encodedPath}";
         }
 
         protected bool ContainsIgnoredProvider(string requestUri, out string version)
@@ -122,7 +122,7 @@ namespace Microsoft.WindowsAzure.Commands.ScenarioTest
 
             foreach (var provider in _providersToIgnore)
             {
-                var providerString = string.Format("providers/{0}", provider.Key);
+                var providerString = $"providers/{provider.Key}";
                 if (requestUri.Contains(providerString))
                 {
                     version = provider.Value;
@@ -139,7 +139,7 @@ namespace Microsoft.WindowsAzure.Commands.ScenarioTest
         {
             if (!string.IsNullOrWhiteSpace(version))
             {
-                return Regex.Replace(requestUri, @"([\?&])api-version=[^&]+", string.Format("$1api-version={0}", version));
+                return Regex.Replace(requestUri, @"([\?&])api-version=[^&]+", $"$1api-version={version}");
             }
             else
             {
diff --git a/tools/ScenarioTest.ResourceManager/PermissiveRecordMatcherWithResourceApiExlcusion.cs b/tools/ScenarioTest.ResourceManager/PermissiveRecordMatcherWithResourceApiExlcusion.cs
index daa60ccfef..7a0a5dc384 100644
--- a/tools/ScenarioTest.ResourceManager/PermissiveRecordMatcherWithResourceApiExlcusion.cs
+++ b/tools/ScenarioTest.ResourceManager/PermissiveRecordMatcherWithResourceApiExlcusion.cs
@@ -90,7 +90,7 @@ namespace Microsoft.WindowsAzure.Commands.ScenarioTest
             }
 
             var encodedPath = Convert.ToBase64String(Encoding.UTF8.GetBytes(requestUri));
-            return string.Format("{0} {1}", request.Method, encodedPath);
+            return $"{request.Method} {encodedPath}";
         }
 
         public virtual string GetMatchingKey(RecordEntry recordEntry)
@@ -116,7 +116,7 @@ namespace Microsoft.WindowsAzure.Commands.ScenarioTest
                 encodedPath = Convert.ToBase64String(Encoding.UTF8.GetBytes(requestUri));
             }
 
-            return string.Format("{0} {1}", recordEntry.RequestMethod, encodedPath);
+            return $"{recordEntry.RequestMethod} {encodedPath}";
         }
 
         public bool ContainsIgnoredProvider(string requestUri, out string version)
@@ -154,7 +154,7 @@ namespace Microsoft.WindowsAzure.Commands.ScenarioTest
             // Ignore resource providers
             foreach (var provider in providersToIgnore)
             {
-                var providerString = string.Format("providers/{0}", provider.Key);
+                var providerString = $"providers/{provider.Key}";
                 if (requestUri.Contains(providerString))
                 {
                     apiVersion = provider.Value;
@@ -216,7 +216,7 @@ namespace Microsoft.WindowsAzure.Commands.ScenarioTest
         {
             if (!string.IsNullOrWhiteSpace(version))
             {
-                return Regex.Replace(requestUri, @"([\?&])api-version=[^&]+", string.Format("$1api-version={0}", version));
+                return Regex.Replace(requestUri, @"([\?&])api-version=[^&]+", $"$1api-version={version}");
             }
             else
             {
diff --git a/tools/ScenarioTest.ResourceManager/PowerShellExtensions.cs b/tools/ScenarioTest.ResourceManager/PowerShellExtensions.cs
index c94fe4bda2..7b7e29f5ca 100644
--- a/tools/ScenarioTest.ResourceManager/PowerShellExtensions.cs
+++ b/tools/ScenarioTest.ResourceManager/PowerShellExtensions.cs
@@ -105,19 +105,15 @@ namespace Microsoft.WindowsAzure.Commands.ScenarioTest
         {
             if (xunitLogger != null)
             {
-                xunitLogger.Information(string.Format("Caught Exception: {0}", runtimeException));
-                xunitLogger.Information(string.Format("Message: {0}", runtimeException.Message));
+                xunitLogger.Information($"Caught Exception: {runtimeException}");
+                xunitLogger.Information($"Message: {runtimeException.Message}");
             }
 
-            IContainsErrorRecord recordContainer = runtimeException as IContainsErrorRecord;
-            if (recordContainer != null)
+            if (runtimeException is IContainsErrorRecord recordContainer)
             {
                 ErrorRecord record = recordContainer.ErrorRecord;
 
-                if (xunitLogger != null)
-                {
-                    xunitLogger.Information(FormatErrorRecord(record));
-                }
+                xunitLogger?.Information(FormatErrorRecord(record));
             }
 
             if (runtimeException.InnerException != null)
@@ -159,7 +155,7 @@ namespace Microsoft.WindowsAzure.Commands.ScenarioTest
                 xunitLogger.Information("================== COMMANDS =======================\n");
                 foreach (Command command in powershell.Commands.Commands)
                 {
-                    xunitLogger.Information(string.Format("{0}\n", command.CommandText));
+                    xunitLogger.Information($"{command.CommandText}\n");
                 }
 
                 xunitLogger.Information("===================================================\n");
@@ -177,13 +173,7 @@ namespace Microsoft.WindowsAzure.Commands.ScenarioTest
         /// </summary>
         internal static string FormatErrorRecord(ErrorRecord record)
         {
-            return String.Format(
-                "PowerShell Error Record: {0}\nException:{1}\nDetails:{2}\nScript Stack Trace: {3}\n: Target: {4}\n",
-                record,
-                record.Exception,
-                record.ErrorDetails,
-                record.ScriptStackTrace,
-                record.TargetObject);
+            return $"PowerShell Error Record: {record}\nException:{record.Exception}\nDetails:{record.ErrorDetails}\nScript Stack Trace: {record.ScriptStackTrace}\n: Target: {record.TargetObject}\n";
         }
 
         /// <summary>
@@ -240,13 +230,13 @@ namespace Microsoft.WindowsAzure.Commands.ScenarioTest
             if (xunitLogger != null && stream != null && stream.Count > 0)
             {
                 xunitLogger.Information("---------------------------------------------------------------\n");
-                xunitLogger.Information(string.Format("{0} STREAM\n", name));
+                xunitLogger.Information($"{name} STREAM\n");
                 xunitLogger.Information("---------------------------------------------------------------\n");
                 foreach (T item in stream)
                 {
                     if (item != null)
                     {
-                        xunitLogger.Information(string.Format("{0}\n", item.ToString()));
+                        xunitLogger.Information($"{item.ToString()}\n");
                     }
                 }
                 xunitLogger.Information("---------------------------------------------------------------\n");
