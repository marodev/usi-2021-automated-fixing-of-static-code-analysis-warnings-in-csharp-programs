diff --git a/src/LogentriesCore/AsyncLogger.cs b/src/LogentriesCore/AsyncLogger.cs
index 12c588ec7..73de62c82 100644
--- a/src/LogentriesCore/AsyncLogger.cs
+++ b/src/LogentriesCore/AsyncLogger.cs
@@ -400,7 +400,7 @@ protected virtual void OpenConnection()
 
                 if (m_UseHttpPut)
                 {
-                    var header = String.Format("PUT /{0}/hosts/{1}/?realtime=1 HTTP/1.1\r\n\r\n", m_AccountKey, m_Location);
+                    var header = $"PUT /{m_AccountKey}/hosts/{m_Location}/?realtime=1 HTTP/1.1\r\n\r\n";
                     LeClient.Write(ASCII.GetBytes(header), 0, header.Length);
                 }
             }
diff --git a/src/LogentriesNLog/fastJSON/JSON.cs b/src/LogentriesNLog/fastJSON/JSON.cs
index aa730a947..0c9ccdb5b 100644
--- a/src/LogentriesNLog/fastJSON/JSON.cs
+++ b/src/LogentriesNLog/fastJSON/JSON.cs
@@ -132,8 +132,7 @@ private object FastCreateInstance(Type objtype)
             }
             catch (Exception exc)
             {
-                throw new Exception(string.Format("Failed to fast create instance for type '{0}' from assemebly '{1}'",
-                    objtype.FullName, objtype.AssemblyQualifiedName), exc);
+                throw new Exception($"Failed to fast create instance for type '{objtype.FullName}' from assemebly '{objtype.AssemblyQualifiedName}'", exc);
             }
         }
 
diff --git a/src/LogentriesNLog/fastJSON/JsonSerializer.cs b/src/LogentriesNLog/fastJSON/JsonSerializer.cs
index 8806d5d07..359dee5fd 100644
--- a/src/LogentriesNLog/fastJSON/JsonSerializer.cs
+++ b/src/LogentriesNLog/fastJSON/JsonSerializer.cs
@@ -72,8 +72,8 @@ private void WriteValue(object obj)
             else if (obj is string || obj is char)
                 WriteString((string)obj);
 
-            else if (obj is Guid)
-                WriteGuid((Guid)obj);
+            else if (obj is Guid guid)
+                WriteGuid(guid);
 
             else if (obj is bool)
                 _output.Append(((bool)obj) ? "true" : "false"); // conform to standard
@@ -87,29 +87,29 @@ private void WriteValue(object obj)
             )
                 _output.Append(((IConvertible)obj).ToString(NumberFormatInfo.InvariantInfo));
 
-            else if (obj is DateTime)
-                WriteDateTime((DateTime)obj);
+            else if (obj is DateTime dateTime)
+                WriteDateTime(dateTime);
 
             else if (obj is IDictionary && obj.GetType().IsGenericType && obj.GetType().GetGenericArguments()[0] == typeof(string))
                 WriteStringDictionary((IDictionary)obj);
 
-            else if (obj is IDictionary)
-                WriteDictionary((IDictionary)obj);
+            else if (obj is IDictionary iDictionary)
+                WriteDictionary(iDictionary);
 #if !SILVERLIGHT
-            else if (obj is DataSet)
-                WriteDataset((DataSet)obj);
+            else if (obj is DataSet dataSet)
+                WriteDataset(dataSet);
 
-            else if (obj is DataTable)
-                WriteDataTable((DataTable)obj);
+            else if (obj is DataTable dataTable)
+                WriteDataTable(dataTable);
 #endif
-            else if (obj is byte[])
-                WriteBytes((byte[])obj);
+            else if (obj is byte[] bytes)
+                WriteBytes(bytes);
 
             else if (obj is Array || obj is IList || obj is ICollection)
                 WriteArray((IEnumerable)obj);
 
-            else if (obj is Enum)
-                WriteEnum((Enum)obj);
+            else if (obj is Enum enum)
+                WriteEnum(enum);
 
 #if CUSTOMTYPE
             else if (JSON.Instance.IsTypeRegistered(obj.GetType()))
diff --git a/src/Marr.Data/Converters/BooleanIntConverter.cs b/src/Marr.Data/Converters/BooleanIntConverter.cs
index 18c964d15..49b600b06 100644
--- a/src/Marr.Data/Converters/BooleanIntConverter.cs
+++ b/src/Marr.Data/Converters/BooleanIntConverter.cs
@@ -38,9 +38,7 @@ public object FromDB(ConverterContext context)
                 return false;
             }
             throw new ConversionException(
-                string.Format(
-                    "The BooleanCharConverter could not convert the value '{0}' to a boolean.",
-                    context.DbValue));
+                $"The BooleanCharConverter could not convert the value '{context.DbValue}' to a boolean.");
         }
 
         public object FromDB(ColumnMap map, object dbValue)
diff --git a/src/Marr.Data/Converters/BooleanYNConverter.cs b/src/Marr.Data/Converters/BooleanYNConverter.cs
index 38003939c..acadc300c 100644
--- a/src/Marr.Data/Converters/BooleanYNConverter.cs
+++ b/src/Marr.Data/Converters/BooleanYNConverter.cs
@@ -38,9 +38,7 @@ public object FromDB(ConverterContext context)
                 return false;
             }
             throw new ConversionException(
-                string.Format(
-                    "The BooleanYNConverter could not convert the value '{0}' to a boolean.",
-                    context.DbValue));
+                $"The BooleanYNConverter could not convert the value '{context.DbValue}' to a boolean.");
         }
 
         public object FromDB(ColumnMap map, object dbValue)
diff --git a/src/Marr.Data/DataHelper.cs b/src/Marr.Data/DataHelper.cs
index 3c6e450f5..f9701e7e1 100644
--- a/src/Marr.Data/DataHelper.cs
+++ b/src/Marr.Data/DataHelper.cs
@@ -82,7 +82,7 @@ public static string GetColumnName(Type declaringType, string propertyName, bool
 
             if (columnMap == null)
             {
-                throw new InvalidOperationException(string.Format("Column map missing for field {0}.{1}", declaringType.FullName, propertyName));
+                throw new InvalidOperationException($"Column map missing for field {declaringType.FullName}.{propertyName}");
             }
 
             if (useAltName)
diff --git a/src/Marr.Data/DataMapper.cs b/src/Marr.Data/DataMapper.cs
index 51423b988..033cb80e7 100644
--- a/src/Marr.Data/DataMapper.cs
+++ b/src/Marr.Data/DataMapper.cs
@@ -877,7 +877,7 @@ private void WriteToTraceLog()
                 sb.AppendLine("PARAMETERS:");
                 foreach (IDbDataParameter p in Parameters)
                 {
-                    object val = (p.Value != null && p.Value is string) ? string.Format("\"{0}\"", p.Value) : p.Value;
+                    object val = (p.Value != null && p.Value is string) ? $"\"{p.Value}\"" : p.Value;
                     sb.AppendFormat("{0} = [{1}]", p.ParameterName, val ?? "NULL").AppendLine();
                 }
                 sb.AppendLine();
diff --git a/src/Marr.Data/EntityGraph.cs b/src/Marr.Data/EntityGraph.cs
index 72d28dcdf..e5f6489e1 100644
--- a/src/Marr.Data/EntityGraph.cs
+++ b/src/Marr.Data/EntityGraph.cs
@@ -313,8 +313,7 @@ private void InitOneToManyChildLists(EntityReference entityRef)
                     catch (Exception ex)
                     {
                         throw new DataMappingException(
-                            string.Format("{0}.{1} is a \"Many\" relationship type so it must derive from IList.",
-                                entityRef.Entity.GetType().Name, relationship.Member.Name),
+                            $"{entityRef.Entity.GetType().Name}.{relationship.Member.Name} is a \"Many\" relationship type so it must derive from IList.",
                             ex);
                     }
                 }
@@ -344,7 +343,7 @@ private GroupingKeyCollection GetGroupingKeyColumns()
             // * Only 1-1 entities with no children are allowed to have 0 PKs specified.
             if ((groupingKeyColumns.PrimaryKeys.Count == 0 && _children.Count > 0) ||
                 (groupingKeyColumns.PrimaryKeys.Count == 0 && !IsRoot && _relationship.RelationshipInfo.RelationType == RelationshipTypes.Many))
-                throw new MissingPrimaryKeyException(string.Format("There are no primary key mappings defined for the following entity: '{0}'.", EntityType.Name));
+                throw new MissingPrimaryKeyException($"There are no primary key mappings defined for the following entity: '{EntityType.Name}'.");
 
             // Add parent's keys
             if (IsChild)
diff --git a/src/Marr.Data/Mapping/ColumnMapBuilder.cs b/src/Marr.Data/Mapping/ColumnMapBuilder.cs
index 9a7b5531d..b00846b9f 100644
--- a/src/Marr.Data/Mapping/ColumnMapBuilder.cs
+++ b/src/Marr.Data/Mapping/ColumnMapBuilder.cs
@@ -212,9 +212,7 @@ private void TryAddColumnMapForField(string fieldName)
 
             if (columnMap == null)
             {
-                throw new DataMappingException(string.Format("Could not find the field '{0}' in '{1}'.",
-                    fieldName,
-                    typeof(TEntity).Name));
+                throw new DataMappingException($"Could not find the field '{fieldName}' in '{typeof(TEntity).Name}'.");
             }
             MappedColumns.Add(columnMap);
         }
diff --git a/src/Marr.Data/Mapping/MappingHelper.cs b/src/Marr.Data/Mapping/MappingHelper.cs
index 80e2acb47..5648f4ae5 100644
--- a/src/Marr.Data/Mapping/MappingHelper.cs
+++ b/src/Marr.Data/Mapping/MappingHelper.cs
@@ -73,8 +73,7 @@ public object LoadExistingEntity(ColumnMapCollection mappings, DbDataReader read
                 }
                 catch (Exception ex)
                 {
-                    string msg = string.Format("The DataMapper was unable to load the following field: '{0}' value: '{1}'. {2}",
-                        dataMap.ColumnInfo.Name, dbValue, ex.Message);
+                    string msg = $"The DataMapper was unable to load the following field: '{dataMap.ColumnInfo.Name}' value: '{dbValue}'. {ex.Message}";
 
                     throw new DataMappingException(msg, ex);
                 }
@@ -119,8 +118,7 @@ public T LoadSimpleValueFromFirstColumn<T>(DbDataReader reader)
             catch (Exception ex)
             {
                 string firstColumnName = reader.GetName(0);
-                string msg = string.Format("The DataMapper was unable to create a value of type '{0}' from the first column '{1}'.",
-                    typeof(T).Name, firstColumnName);
+                string msg = $"The DataMapper was unable to create a value of type '{typeof(T).Name}' from the first column '{firstColumnName}'.";
 
                 throw new DataMappingException(msg, ex);
             }
diff --git a/src/Marr.Data/Mapping/Relationship.cs b/src/Marr.Data/Mapping/Relationship.cs
index e7794c633..3177e6c2e 100644
--- a/src/Marr.Data/Mapping/Relationship.cs
+++ b/src/Marr.Data/Mapping/Relationship.cs
@@ -58,9 +58,7 @@ public Relationship(MemberInfo member, IRelationshipInfo relationshipInfo)
                     }
                     else
                     {
-                        throw new ArgumentException(string.Format(
-                            "The DataMapper could not determine the RelationshipAttribute EntityType for {0}.",
-                            MemberType.Name));
+                        throw new ArgumentException($"The DataMapper could not determine the RelationshipAttribute EntityType for {MemberType.Name}.");
                     }
                 }
                 else
diff --git a/src/Marr.Data/Mapping/RelationshipBuilder.cs b/src/Marr.Data/Mapping/RelationshipBuilder.cs
index b4926633f..b5eb26111 100644
--- a/src/Marr.Data/Mapping/RelationshipBuilder.cs
+++ b/src/Marr.Data/Mapping/RelationshipBuilder.cs
@@ -149,9 +149,7 @@ private void TryAddRelationshipForField(string fieldName)
 
             if (relationship == null)
             {
-                throw new DataMappingException(string.Format("Could not find the field '{0}' in '{1}'.",
-                    fieldName,
-                    typeof(TEntity).Name));
+                throw new DataMappingException($"Could not find the field '{fieldName}' in '{typeof(TEntity).Name}'.");
             }
             Relationships.Add(relationship);
         }
diff --git a/src/Marr.Data/QGen/DeleteQuery.cs b/src/Marr.Data/QGen/DeleteQuery.cs
index 7ea5a72fc..f5fcc740a 100644
--- a/src/Marr.Data/QGen/DeleteQuery.cs
+++ b/src/Marr.Data/QGen/DeleteQuery.cs
@@ -20,9 +20,7 @@ public DeleteQuery(Dialect dialect, Table targetTable, string whereClause)
 
         public string Generate()
         {
-            return string.Format("DELETE FROM {0} {1} ",
-                Dialect.CreateToken(TargetTable.Name), 
-                WhereClause);
+            return $"DELETE FROM {Dialect.CreateToken(TargetTable.Name)} {WhereClause} ";
         }
     }
 }
diff --git a/src/Marr.Data/QGen/InsertQueryBuilder.cs b/src/Marr.Data/QGen/InsertQueryBuilder.cs
index 85cd0098f..d750e0e7a 100644
--- a/src/Marr.Data/QGen/InsertQueryBuilder.cs
+++ b/src/Marr.Data/QGen/InsertQueryBuilder.cs
@@ -61,7 +61,7 @@ public virtual InsertQueryBuilder<T> GetIdentity()
         {
             if (!_dialect.HasIdentityQuery)
             {
-                string err = string.Format("The current dialect '{0}' does not have an identity query implemented.", _dialect.ToString());
+                string err = $"The current dialect '{_dialect.ToString()}' does not have an identity query implemented.";
                 throw new DataMappingException(err);
             }
 
diff --git a/src/Marr.Data/QGen/PagingQueryDecorator.cs b/src/Marr.Data/QGen/PagingQueryDecorator.cs
index 60a2ece05..1a56c35cf 100644
--- a/src/Marr.Data/QGen/PagingQueryDecorator.cs
+++ b/src/Marr.Data/QGen/PagingQueryDecorator.cs
@@ -163,7 +163,7 @@ private void BuildRowNumberColumn(StringBuilder sql)
             // Remove table prefixes from order columns
             foreach (Table t in _innerQuery.Tables)
             {
-                orderBy = orderBy.Replace(string.Format("[{0}].", t.Alias), "");
+                orderBy = orderBy.Replace($"[{t.Alias}].", "");
             }
             
             sql.AppendFormat(", ROW_NUMBER() OVER ({0}) As RowNumber ", orderBy);
diff --git a/src/Marr.Data/QGen/SortBuilder.cs b/src/Marr.Data/QGen/SortBuilder.cs
index 32c85eccd..b9946a0c5 100644
--- a/src/Marr.Data/QGen/SortBuilder.cs
+++ b/src/Marr.Data/QGen/SortBuilder.cs
@@ -209,10 +209,10 @@ public virtual string BuildQuery(bool useAltName)
                 string columnName = DataHelper.GetColumnName(sort.DeclaringType, sort.PropertyName, useAltName);
 
                 if (!useAltName)
-                    sb.Append(_dialect.CreateToken(string.Format("{0}.{1}", table.Alias, columnName)));
+                    sb.Append(_dialect.CreateToken($"{table.Alias}.{columnName}"));
 
                 else
-                    sb.Append(_dialect.CreateToken(string.Format("{0}", columnName)));
+                    sb.Append(_dialect.CreateToken($"{columnName}"));
 
                 if (sort.Direction == SortDirection.Desc)
                     sb.Append(" DESC");
diff --git a/src/Marr.Data/QGen/SqlitePagingQueryDecorator.cs b/src/Marr.Data/QGen/SqlitePagingQueryDecorator.cs
index f77614523..7db7e1387 100644
--- a/src/Marr.Data/QGen/SqlitePagingQueryDecorator.cs
+++ b/src/Marr.Data/QGen/SqlitePagingQueryDecorator.cs
@@ -45,7 +45,7 @@ private string SimplePaging()
             _innerQuery.BuildJoinClauses(sql);
             _innerQuery.BuildWhereClause(sql);
             _innerQuery.BuildOrderClause(sql);
-            sql.AppendLine(String.Format(" LIMIT {0},{1}", _skip, _take));
+            sql.AppendLine($" LIMIT {_skip},{_take}");
 
             return sql.ToString();
         }
diff --git a/src/Marr.Data/QGen/TableCollection.cs b/src/Marr.Data/QGen/TableCollection.cs
index 5a69fe978..fb34c9b35 100644
--- a/src/Marr.Data/QGen/TableCollection.cs
+++ b/src/Marr.Data/QGen/TableCollection.cs
@@ -26,7 +26,7 @@ public void Add(Table table)
             }
 
             // Create an alias (ex: "t0", "t1", "t2", etc...)
-            table.Alias = string.Format("t{0}", _tables.Count);
+            table.Alias = $"t{_tables.Count}";
             _tables.Add(table);
         }
 
@@ -41,7 +41,7 @@ public void ReplaceBaseTable(View view)
         /// </summary>
         public Table FindTable(Type declaringType)
         {
-            return EnumerateViewsAndTables().Where(t => t.EntityType == declaringType).FirstOrDefault();
+            return EnumerateViewsAndTables().FirstOrDefault(t => t.EntityType == declaringType);
         }
 
         public Table this[int index]
diff --git a/src/Marr.Data/QGen/WhereBuilder.cs b/src/Marr.Data/QGen/WhereBuilder.cs
index 64992d542..f7e8c5f46 100644
--- a/src/Marr.Data/QGen/WhereBuilder.cs
+++ b/src/Marr.Data/QGen/WhereBuilder.cs
@@ -94,7 +94,7 @@ protected override Expression VisitMethodCall(MethodCallExpression expression)
                     break;
 
                 default:
-                    string msg = string.Format("'{0}' expressions are not yet implemented in the where clause expression tree parser.", method);
+                    string msg = $"'{method}' expressions are not yet implemented in the where clause expression tree parser.";
                     throw new NotImplementedException(msg);
             }
 
@@ -148,8 +148,8 @@ private object GetRightValue(Expression rightExpression)
             if (right == null) // Value is not directly passed in as a constant
             {
                 var rightMemberExp = (rightExpression as MemberExpression);
-                var parentMemberExpression = rightMemberExp.Expression as MemberExpression;
-                if (parentMemberExpression != null) // Value is passed in as a property on a parent entity
+
+                if (rightMemberExp.Expression is MemberExpression parentMemberExpression) // Value is passed in as a property on a parent entity
                 {
                     string entityName = (rightMemberExp.Expression as MemberExpression).Member.Name;
                     var container = ((rightMemberExp.Expression as MemberExpression).Expression as ConstantExpression).Value;
@@ -186,7 +186,7 @@ protected string GetFullyQualifiedColumnName(MemberInfo member, Type declaringTy
                 }
 
                 string columnName = DataHelper.GetColumnName(declaringType, member.Name, _useAltName);
-                return _dialect.CreateToken(string.Format("{0}.{1}", table.Alias, columnName));
+                return _dialect.CreateToken($"{table.Alias}.{columnName}");
             }
             else
             {
@@ -222,7 +222,7 @@ private string Decode(BinaryExpression expression)
                 case ExpressionType.NotEqual: return "<>";
                 case ExpressionType.OrElse: return "OR";
                 case ExpressionType.Or: return "OR";
-                default: throw new NotSupportedException(string.Format("{0} statement is not supported", expression.NodeType.ToString()));
+                default: throw new NotSupportedException($"{expression.NodeType.ToString()} statement is not supported");
             }
         }
 
@@ -269,10 +269,7 @@ private void Write_EndsWith(MethodCallExpression body)
         /// <param name="appendType">AND / OR</param>
         internal void Append(WhereBuilder<T> where, WhereAppendType appendType)
         {
-            _constantWhereClause = string.Format("{0} {1} {2}",
-                ToString(),
-                appendType.ToString(),
-                where.ToString().Replace("WHERE ", string.Empty));
+            _constantWhereClause = $"{ToString()} {appendType.ToString()} {where.ToString().Replace("WHERE ", string.Empty)}";
         }
 
         public override string ToString()
diff --git a/src/Marr.Data/Reflection/SimpleReflectionStrategy.cs b/src/Marr.Data/Reflection/SimpleReflectionStrategy.cs
index 25b25de5b..5aa6d93fb 100644
--- a/src/Marr.Data/Reflection/SimpleReflectionStrategy.cs
+++ b/src/Marr.Data/Reflection/SimpleReflectionStrategy.cs
@@ -41,7 +41,7 @@ public object GetFieldValue(object entity, string fieldName)
             {
                 return BuildGetter(entity.GetType(), fieldName)(entity);
             }
-            throw new DataMappingException(string.Format("The DataMapper could not get the value for {0}.{1}.", entity.GetType().Name, fieldName));
+            throw new DataMappingException($"The DataMapper could not get the value for {entity.GetType().Name}.{fieldName}.");
         }
 
 
diff --git a/src/MonoTorrent/BEncoding/BEncodedDictionary.cs b/src/MonoTorrent/BEncoding/BEncodedDictionary.cs
index 3329c6848..4cf1edd86 100644
--- a/src/MonoTorrent/BEncoding/BEncodedDictionary.cs
+++ b/src/MonoTorrent/BEncoding/BEncodedDictionary.cs
@@ -82,9 +82,7 @@ private void DecodeInternal(RawReader reader, bool strictDecoding)
 
                 if (oldkey != null && oldkey.CompareTo(key) > 0)
                     if (strictDecoding)
-                        throw new BEncodingException(String.Format(
-                            "Illegal BEncodedDictionary. The attributes are not ordered correctly. Old key: {0}, New key: {1}",
-                            oldkey, key));
+                        throw new BEncodingException($"Illegal BEncodedDictionary. The attributes are not ordered correctly. Old key: {oldkey}, New key: {key}");
 
                 oldkey = key;
                 value = BEncodedValue.Decode(reader);                     // the value is a BEncoded value
diff --git a/src/MonoTorrent/BEncoding/BEncodedString.cs b/src/MonoTorrent/BEncoding/BEncodedString.cs
index 80958e5db..2e5db5246 100644
--- a/src/MonoTorrent/BEncoding/BEncodedString.cs
+++ b/src/MonoTorrent/BEncoding/BEncodedString.cs
@@ -123,7 +123,7 @@ internal override void DecodeInternal(RawReader reader)
                 throw new BEncodingException("Invalid data found. Aborting");
 
             if (!int.TryParse(length, out letterCount))
-                throw new BEncodingException(string.Format("Invalid BEncodedString. Length was '{0}' instead of a number", length));
+                throw new BEncodingException($"Invalid BEncodedString. Length was '{length}' instead of a number");
 
             this.textBytes = new byte[letterCount];
             if (reader.Read(textBytes, 0, letterCount) != letterCount)
@@ -188,10 +188,10 @@ public override bool Equals(object obj)
                 return false;
 
             BEncodedString other;
-            if (obj is string)
-                other = new BEncodedString((string)obj);
-            else if (obj is BEncodedString)
-                other = (BEncodedString)obj;
+            if (obj is string s)
+                other = new BEncodedString(s);
+            else if (obj is BEncodedString bEncodedString)
+                other = bEncodedString;
             else
                 return false;
 
diff --git a/src/MonoTorrent/Hashes.cs b/src/MonoTorrent/Hashes.cs
index f674f9e63..aa3326f20 100644
--- a/src/MonoTorrent/Hashes.cs
+++ b/src/MonoTorrent/Hashes.cs
@@ -58,10 +58,10 @@ public bool IsValid(byte[] hash, int hashIndex)
                 throw new ArgumentNullException("hash");
 
             if (hash.Length != HashCodeLength)
-                throw new ArgumentException(string.Format("Hash must be {0} bytes in length", HashCodeLength), "hash");
+                throw new ArgumentException($"Hash must be {HashCodeLength} bytes in length", "hash");
 
             if (hashIndex < 0 || hashIndex > this.count)
-                throw new ArgumentOutOfRangeException("hashIndex", string.Format("hashIndex must be between 0 and {0}", this.count)); 
+                throw new ArgumentOutOfRangeException("hashIndex", $"hashIndex must be between 0 and {this.count}"); 
 
             int start = hashIndex * HashCodeLength;
             for (int i = 0; i < HashCodeLength; i++)
diff --git a/src/MonoTorrent/Torrent.cs b/src/MonoTorrent/Torrent.cs
index 726131f94..5ec141639 100644
--- a/src/MonoTorrent/Torrent.cs
+++ b/src/MonoTorrent/Torrent.cs
@@ -767,7 +767,7 @@ protected void LoadInternal(BEncodedDictionary torrentInformation)
                                 if (e is ArgumentOutOfRangeException)
                                     throw new BEncodingException("Argument out of range exception when adding seconds to creation date.", e);
                                 else if (e is FormatException)
-                                    throw new BEncodingException(String.Format("Could not parse {0} into a number", keypair.Value), e);
+                                    throw new BEncodingException($"Could not parse {keypair.Value} into a number", e);
                                 else
                                     throw;
                             }
@@ -844,8 +844,7 @@ protected void LoadInternal(BEncodedDictionary torrentInformation)
                                 }
                                 else
                                 {
-                                    throw new BEncodingException(String.Format("Non-BEncodedList found in announce-list (found {0})",
-                                      announces[j].GetType()));
+                                    throw new BEncodingException($"Non-BEncodedList found in announce-list (found {announces[j].GetType()})");
                                 }
                             }
                             break;
diff --git a/src/NzbDrone.Api/Logs/LogFileModuleBase.cs b/src/NzbDrone.Api/Logs/LogFileModuleBase.cs
index 248cdf691..ec99c6b1f 100644
--- a/src/NzbDrone.Api/Logs/LogFileModuleBase.cs
+++ b/src/NzbDrone.Api/Logs/LogFileModuleBase.cs
@@ -45,8 +45,8 @@ private List<LogFileResource> GetLogFilesResponse()
                     Id = i + 1,
                     Filename = filename,
                     LastWriteTime = _diskProvider.FileGetLastWrite(file),
-                    ContentsUrl = string.Format("{0}/api/{1}/{2}", _configFileProvider.UrlBase, Resource, filename),
-                    DownloadUrl = string.Format("{0}/{1}/{2}", _configFileProvider.UrlBase, DownloadUrlRoot, filename)
+                    ContentsUrl = $"{_configFileProvider.UrlBase}/api/{Resource}/{filename}",
+                    DownloadUrl = $"{_configFileProvider.UrlBase}/{DownloadUrlRoot}/{filename}"
                 });
             }
 
diff --git a/src/NzbDrone.Api/Profiles/LegacyProfileModule.cs b/src/NzbDrone.Api/Profiles/LegacyProfileModule.cs
index 043ee4665..1b79da1ff 100644
--- a/src/NzbDrone.Api/Profiles/LegacyProfileModule.cs
+++ b/src/NzbDrone.Api/Profiles/LegacyProfileModule.cs
@@ -11,7 +11,7 @@ public LegacyProfileModule()
             Get("/", x =>
             {
                 string queryString = ConvertQueryParams(Request.Query);
-                var url = string.Format("/api/profile?{0}", queryString);
+                var url = $"/api/profile?{queryString}";
 
                 return Response.AsRedirect(url);
             });
diff --git a/src/NzbDrone.Api/ProviderModuleBase.cs b/src/NzbDrone.Api/ProviderModuleBase.cs
index 2c9a43def..5b6ab74d5 100644
--- a/src/NzbDrone.Api/ProviderModuleBase.cs
+++ b/src/NzbDrone.Api/ProviderModuleBase.cs
@@ -119,8 +119,7 @@ protected virtual void MapToResource(TProviderResource resource, TProviderDefini
 
             resource.Fields = SchemaBuilder.ToSchema(definition.Settings);
 
-            resource.InfoLink = string.Format("https://wiki.servarr.com/Sonarr_Supported_{0}",
-                definition.Implementation.ToLower());
+            resource.InfoLink = $"https://wiki.servarr.com/Sonarr_Supported_{definition.Implementation.ToLower()}";
         }
 
         protected virtual void MapToModel(TProviderDefinition definition, TProviderResource resource)
@@ -146,7 +145,7 @@ private object GetTemplates()
         {
             var defaultDefinitions = _providerFactory.GetDefaultDefinitions().OrderBy(p => p.ImplementationName).ToList();
 
-            var result = new List<TProviderResource>(defaultDefinitions.Count());
+            var result = new List<TProviderResource>(defaultDefinitions.Count);
 
             foreach (var providerDefinition in defaultDefinitions)
             {
diff --git a/src/NzbDrone.Api/Series/SeriesResource.cs b/src/NzbDrone.Api/Series/SeriesResource.cs
index 2fd16ca2c..fe7cd95c7 100644
--- a/src/NzbDrone.Api/Series/SeriesResource.cs
+++ b/src/NzbDrone.Api/Series/SeriesResource.cs
@@ -29,7 +29,7 @@ public int SeasonCount
             {
                 if (Seasons == null) return 0;
 
-                return Seasons.Where(s => s.SeasonNumber > 0).Count();
+                return Seasons.Count(s => s.SeasonNumber > 0);
             }
         }
 
diff --git a/src/NzbDrone.Api/Wanted/LegacyMissingModule.cs b/src/NzbDrone.Api/Wanted/LegacyMissingModule.cs
index f4af13b7a..e56126750 100644
--- a/src/NzbDrone.Api/Wanted/LegacyMissingModule.cs
+++ b/src/NzbDrone.Api/Wanted/LegacyMissingModule.cs
@@ -10,7 +10,7 @@ public LegacyMissingModule() : base("missing")
             Get("/", x =>
             {
                 string queryString = ConvertQueryParams(Request.Query);
-                var url = string.Format("/api/wanted/missing?{0}", queryString);
+                var url = $"/api/wanted/missing?{queryString}";
 
                 return Response.AsRedirect(url);
             });
diff --git a/src/NzbDrone.Common/ArchiveService.cs b/src/NzbDrone.Common/ArchiveService.cs
index 2a45d7215..570d1429a 100644
--- a/src/NzbDrone.Common/ArchiveService.cs
+++ b/src/NzbDrone.Common/ArchiveService.cs
@@ -64,7 +64,7 @@ private void ExtractZip(string compressedFile, string destination)
 
                 if (!zipFile.TestArchive(true, TestStrategy.FindFirstError, OnZipError))
                 {
-                    throw new IOException(string.Format("File {0} failed archive validation.", compressedFile));
+                    throw new IOException($"File {compressedFile} failed archive validation.");
                 }
 
                 foreach (ZipEntry zipEntry in zipFile)
diff --git a/src/NzbDrone.Common/Cache/CachedDictionary.cs b/src/NzbDrone.Common/Cache/CachedDictionary.cs
index 7bbda022a..42437aa8e 100644
--- a/src/NzbDrone.Common/Cache/CachedDictionary.cs
+++ b/src/NzbDrone.Common/Cache/CachedDictionary.cs
@@ -91,7 +91,7 @@ public TValue Get(string key)
 
             if (!_items.TryGetValue(key, out result))
             {
-                throw new KeyNotFoundException(string.Format("Item {0} not found in cache.", key));
+                throw new KeyNotFoundException($"Item {key} not found in cache.");
             }
 
             return result;
diff --git a/src/NzbDrone.Common/Disk/DiskProviderBase.cs b/src/NzbDrone.Common/Disk/DiskProviderBase.cs
index 1f91a9654..83f834578 100644
--- a/src/NzbDrone.Common/Disk/DiskProviderBase.cs
+++ b/src/NzbDrone.Common/Disk/DiskProviderBase.cs
@@ -207,7 +207,7 @@ public void CloneFile(string source, string destination, bool overwrite = false)
 
             if (source.PathEquals(destination))
             {
-                throw new IOException(string.Format("Source and destination can't be the same {0}", source));
+                throw new IOException($"Source and destination can't be the same {source}");
             }
 
             CloneFileInternal(source, destination, overwrite);
@@ -225,7 +225,7 @@ public void CopyFile(string source, string destination, bool overwrite = false)
 
             if (source.PathEquals(destination))
             {
-                throw new IOException(string.Format("Source and destination can't be the same {0}", source));
+                throw new IOException($"Source and destination can't be the same {source}");
             }
 
             CopyFileInternal(source, destination, overwrite);
@@ -243,7 +243,7 @@ public void MoveFile(string source, string destination, bool overwrite = false)
 
             if (source.PathEquals(destination))
             {
-                throw new IOException(string.Format("Source and destination can't be the same {0}", source));
+                throw new IOException($"Source and destination can't be the same {source}");
             }
 
             if (FileExists(destination) && overwrite)
@@ -451,7 +451,7 @@ public virtual IMount GetMount(string path)
             }
             catch (Exception ex)
             {
-                Logger.Debug(ex, string.Format("Failed to get mount for path {0}", path));
+                Logger.Debug(ex, $"Failed to get mount for path {path}");
                 return null;
             }
         }
diff --git a/src/NzbDrone.Common/Disk/DiskTransferService.cs b/src/NzbDrone.Common/Disk/DiskTransferService.cs
index 42e672e8a..34cd60928 100644
--- a/src/NzbDrone.Common/Disk/DiskTransferService.cs
+++ b/src/NzbDrone.Common/Disk/DiskTransferService.cs
@@ -53,7 +53,7 @@ public TransferMode TransferFolder(string sourcePath, string targetPath, Transfe
 
             if (sourcePath == targetPath)
             {
-                throw new IOException(string.Format("Source and destination can't be the same {0}", sourcePath));
+                throw new IOException($"Source and destination can't be the same {sourcePath}");
             }
 
             if (mode == TransferMode.Move && sourcePath.PathEquals(targetPath, StringComparison.InvariantCultureIgnoreCase) && _diskProvider.FolderExists(targetPath))
@@ -249,14 +249,14 @@ public TransferMode TransferFile(string sourcePath, string targetPath, TransferM
 
             if (sourcePath == targetPath)
             {
-                throw new IOException(string.Format("Source and destination can't be the same {0}", sourcePath));
+                throw new IOException($"Source and destination can't be the same {sourcePath}");
             }
 
             if (sourcePath.PathEquals(targetPath, StringComparison.InvariantCultureIgnoreCase))
             {
                 if (mode.HasFlag(TransferMode.HardLink) || mode.HasFlag(TransferMode.Copy))
                 {
-                    throw new IOException(string.Format("Source and destination can't be the same {0}", sourcePath));
+                    throw new IOException($"Source and destination can't be the same {sourcePath}");
                 }
 
                 if (mode.HasFlag(TransferMode.Move))
@@ -293,7 +293,7 @@ public TransferMode TransferFile(string sourcePath, string targetPath, TransferM
 
             if (sourcePath.IsParentPath(targetPath))
             {
-                throw new IOException(string.Format("Destination cannot be a child of the source [{0}] => [{1}]", sourcePath, targetPath));
+                throw new IOException($"Destination cannot be a child of the source [{sourcePath}] => [{targetPath}]");
             }
 
             ClearTargetPath(sourcePath, targetPath, overwrite);
@@ -459,7 +459,7 @@ private void TryCopyFileVerified(string sourcePath, string targetPath, long orig
                 var targetSize = _diskProvider.GetFileSize(targetPath);
                 if (targetSize != originalSize)
                 {
-                    throw new IOException(string.Format("File copy incomplete. [{0}] was {1} bytes long instead of {2} bytes.", targetPath, targetSize, originalSize));
+                    throw new IOException($"File copy incomplete. [{targetPath}] was {targetSize} bytes long instead of {originalSize} bytes.");
                 }
             }
             catch
@@ -478,7 +478,7 @@ private void TryMoveFileVerified(string sourcePath, string targetPath, long orig
                 var targetSize = _diskProvider.GetFileSize(targetPath);
                 if (targetSize != originalSize)
                 {
-                    throw new IOException(string.Format("File move incomplete, data loss may have occurred. [{0}] was {1} bytes long instead of the expected {2}.", targetPath, targetSize, originalSize));
+                    throw new IOException($"File move incomplete, data loss may have occurred. [{targetPath}] was {targetSize} bytes long instead of the expected {originalSize}.");
                 }
             }
             catch
diff --git a/src/NzbDrone.Common/Disk/DriveInfoMount.cs b/src/NzbDrone.Common/Disk/DriveInfoMount.cs
index 40f4fb6cd..b8c4049b7 100644
--- a/src/NzbDrone.Common/Disk/DriveInfoMount.cs
+++ b/src/NzbDrone.Common/Disk/DriveInfoMount.cs
@@ -56,7 +56,7 @@ public string VolumeName
                     return Name;
                 }
 
-                return string.Format("{0} ({1})", Name, VolumeLabel);
+                return $"{Name} ({VolumeLabel})";
             }
         }
     }
diff --git a/src/NzbDrone.Common/Disk/OsPath.cs b/src/NzbDrone.Common/Disk/OsPath.cs
index 9028ec1f7..41c3e11a2 100644
--- a/src/NzbDrone.Common/Disk/OsPath.cs
+++ b/src/NzbDrone.Common/Disk/OsPath.cs
@@ -192,9 +192,9 @@ public override int GetHashCode()
 
         public override bool Equals(object obj)
         {
-            if (obj is OsPath)
+            if (obj is OsPath osPath)
             {
-                return Equals((OsPath)obj);
+                return Equals(osPath);
             }
             if (obj is string)
             {
@@ -285,7 +285,7 @@ public bool Equals(OsPath other)
         {
             if (left.Kind != right.Kind && right.Kind != OsPathKind.Unknown)
             {
-                throw new Exception(string.Format("Cannot combine OsPaths of different platforms ('{0}' + '{1}')", left, right));
+                throw new Exception($"Cannot combine OsPaths of different platforms ('{left}' + '{right}')");
             }
 
             if (right.IsEmpty)
diff --git a/src/NzbDrone.Common/EnsureThat/EnsureStringExtensions.cs b/src/NzbDrone.Common/EnsureThat/EnsureStringExtensions.cs
index 99f348667..e18e259ce 100644
--- a/src/NzbDrone.Common/EnsureThat/EnsureStringExtensions.cs
+++ b/src/NzbDrone.Common/EnsureThat/EnsureStringExtensions.cs
@@ -82,12 +82,12 @@ public static Param<string> IsRelativePath(this Param<string> param)
 
             if (!param.Value.EndsWith("\\"))
             {
-                throw ExceptionFactory.CreateForParamValidation(param.Name, string.Format("value [{0}]  is not a valid relative path. relative paths must end with \\", param.Value));
+                throw ExceptionFactory.CreateForParamValidation(param.Name, $"value [{param.Value}]  is not a valid relative path. relative paths must end with \\");
             }
 
             if (param.Value.Length > 1 && param.Value.StartsWith("\\"))
             {
-                throw ExceptionFactory.CreateForParamValidation(param.Name, string.Format("value [{0}]  is not a valid relative path. relative paths can not start with \\", param.Value));
+                throw ExceptionFactory.CreateForParamValidation(param.Name, $"value [{param.Value}]  is not a valid relative path. relative paths can not start with \\");
             }
 
             return param;
@@ -103,10 +103,10 @@ public static Param<string> IsValidPath(this Param<string> param)
 
             if (OsInfo.IsWindows)
             {
-                throw ExceptionFactory.CreateForParamValidation(param.Name, string.Format("value [{0}]  is not a valid Windows path. paths must be a full path eg. C:\\Windows", param.Value));
+                throw ExceptionFactory.CreateForParamValidation(param.Name, $"value [{param.Value}]  is not a valid Windows path. paths must be a full path eg. C:\\Windows");
             }
 
-            throw ExceptionFactory.CreateForParamValidation(param.Name, string.Format("value [{0}]  is not a valid *nix path. paths must start with /", param.Value));
+            throw ExceptionFactory.CreateForParamValidation(param.Name, $"value [{param.Value}]  is not a valid *nix path. paths must start with /");
         }
     }
 }
diff --git a/src/NzbDrone.Common/EnsureThat/ExpressionExtensions.cs b/src/NzbDrone.Common/EnsureThat/ExpressionExtensions.cs
index dc4b25946..8824f01a5 100644
--- a/src/NzbDrone.Common/EnsureThat/ExpressionExtensions.cs
+++ b/src/NzbDrone.Common/EnsureThat/ExpressionExtensions.cs
@@ -7,9 +7,8 @@ internal static class ExpressionExtensions
         internal static string ToPath(this MemberExpression e)
         {
             var path = "";
-            var parent = e.Expression as MemberExpression;
 
-            if (parent != null)
+            if (e.Expression is MemberExpression parent)
                 path = parent.ToPath() + ".";
 
             return path + e.Member.Name;
@@ -22,16 +21,14 @@ internal static string GetPath(this Expression expression)
 
         private static MemberExpression GetRightMostMember(Expression e)
         {
-            if (e is LambdaExpression)
-                return GetRightMostMember(((LambdaExpression)e).Body);
+            if (e is LambdaExpression lambdaExpression)
+                return GetRightMostMember(lambdaExpression.Body);
 
             if (e is MemberExpression)
                 return (MemberExpression)e;
 
-            if (e is MethodCallExpression)
+            if (e is MethodCallExpression callExpression)
             {
-                var callExpression = (MethodCallExpression)e;
-
                 if (callExpression.Object is MethodCallExpression || callExpression.Object is MemberExpression)
                     return GetRightMostMember(callExpression.Object);
 
@@ -39,9 +36,8 @@ private static MemberExpression GetRightMostMember(Expression e)
                 return GetRightMostMember(member);
             }
 
-            if (e is UnaryExpression)
+            if (e is UnaryExpression unaryExpression)
             {
-                var unaryExpression = (UnaryExpression)e;
                 return GetRightMostMember(unaryExpression.Operand);
             }
 
diff --git a/src/NzbDrone.Common/Expansive/Expansive.cs b/src/NzbDrone.Common/Expansive/Expansive.cs
index 9ad255ce6..d1603731a 100644
--- a/src/NzbDrone.Common/Expansive/Expansive.cs
+++ b/src/NzbDrone.Common/Expansive/Expansive.cs
@@ -63,8 +63,8 @@ public static string Expand(this string source, params string[] args)
                     foreach (Match match in tokenPattern.Matches(newArg))
                     {
                         var token = _patternStyle.TokenReplaceFilter(match.Value);
-                        if (calls.Contains(string.Format("{0}:{1}", callingToken, token))) throw new CircularReferenceException(string.Format("Circular Reference Detected for token '{0}'.", callingToken));
-                        calls.Push(string.Format("{0}:{1}", callingToken, token));
+                        if (calls.Contains($"{callingToken}:{token}")) throw new CircularReferenceException($"Circular Reference Detected for token '{callingToken}'.");
+                        calls.Push($"{callingToken}:{token}");
                         callingToken = token;
                         newArg = Regex.Replace(newArg, _patternStyle.OutputFilter(match.Value), args[tokens.IndexOf(token)]);
                     }
@@ -139,9 +139,7 @@ private static string Explode(this string source, Regex pattern, PatternStyle pa
 
                     // if we have already encountered this token in this call tree, we have a circular reference
                     if (thisNode.CallTree.Contains(token))
-                        throw new CircularReferenceException(string.Format("Circular Reference Detected for token '{0}'. Call Tree: {1}->{2}",
-                                                                           token,
-                                                                           string.Join("->", thisNode.CallTree.ToArray().Reverse()), token));
+                        throw new CircularReferenceException($"Circular Reference Detected for token '{token}'. Call Tree: {string.Join("->", thisNode.CallTree.ToArray().Reverse())}->{token}");
 
                     // expand this match
                     var expandedValue = expansionFactory(token);
diff --git a/src/NzbDrone.Common/Http/HttpException.cs b/src/NzbDrone.Common/Http/HttpException.cs
index d3f5c2da4..6f6740305 100644
--- a/src/NzbDrone.Common/Http/HttpException.cs
+++ b/src/NzbDrone.Common/Http/HttpException.cs
@@ -15,7 +15,7 @@ public HttpException(HttpRequest request, HttpResponse response, string message)
         }
 
         public HttpException(HttpRequest request, HttpResponse response)
-            : this(request, response, string.Format("HTTP request failed: [{0}:{1}] [{2}] at [{3}]", (int)response.StatusCode, response.StatusCode, request.Method, request.Url))
+            : this(request, response, $"HTTP request failed: [{(int)response.StatusCode}:{response.StatusCode}] [{request.Method}] at [{request.Url}]")
         {
 
         }
diff --git a/src/NzbDrone.Common/Http/HttpRequestBuilder.cs b/src/NzbDrone.Common/Http/HttpRequestBuilder.cs
index d4ccc26d3..6f5b182e1 100644
--- a/src/NzbDrone.Common/Http/HttpRequestBuilder.cs
+++ b/src/NzbDrone.Common/Http/HttpRequestBuilder.cs
@@ -58,7 +58,7 @@ public static string BuildBaseUrl(bool useHttps, string host, int port, string u
                 urlBase = "/" + urlBase;
             }
 
-            return string.Format("{0}://{1}:{2}{3}", protocol, host, port, urlBase);
+            return $"{protocol}://{host}:{port}{urlBase}";
         }
 
         public virtual HttpRequestBuilder Clone()
@@ -160,8 +160,8 @@ protected virtual void ApplyFormData(HttpRequest request)
             if (shouldSendAsMultipart)
             {
                 var boundary = "-----------------------------" + DateTime.Now.Ticks.ToString("x14");
-                var partBoundary = string.Format("--{0}\r\n", boundary);
-                var endBoundary = string.Format("--{0}--\r\n", boundary);
+                var partBoundary = $"--{boundary}\r\n";
+                var endBoundary = $"--{boundary}--\r\n";
 
                 var bodyStream = new MemoryStream();
                 var summary = new StringBuilder();
@@ -212,7 +212,7 @@ protected virtual void ApplyFormData(HttpRequest request)
             }
             else
             {
-                var parameters = FormData.Select(v => string.Format("{0}={1}", v.Name, Uri.EscapeDataString(Encoding.UTF8.GetString(v.ContentData))));
+                var parameters = FormData.Select(v => $"{v.Name}={Uri.EscapeDataString(Encoding.UTF8.GetString(v.ContentData))}");
                 var urlencoded = string.Join("&", parameters);
                 var body = Encoding.UTF8.GetBytes(urlencoded);
 
@@ -234,7 +234,7 @@ public virtual HttpRequestBuilder Resource(string resourceUrl)
             }
             else
             {
-                ResourceUrl = string.Format("{0}/{1}", ResourceUrl.TrimEnd('/'), resourceUrl);
+                ResourceUrl = $"{ResourceUrl.TrimEnd('/')}/{resourceUrl}";
             }
 
             return this;
@@ -320,7 +320,7 @@ public virtual HttpRequestBuilder SetSegment(string segment, string value, bool
 
             if (!dontCheck && !CreateUri().ToString().Contains(key))
             {
-                throw new InvalidOperationException(string.Format("Segment {0} is not defined in Uri", segment));
+                throw new InvalidOperationException($"Segment {segment} is not defined in Uri");
             }
 
             Segments[key] = value;
diff --git a/src/NzbDrone.Common/Http/HttpResponse.cs b/src/NzbDrone.Common/Http/HttpResponse.cs
index 66563b6e0..d669eb251 100644
--- a/src/NzbDrone.Common/Http/HttpResponse.cs
+++ b/src/NzbDrone.Common/Http/HttpResponse.cs
@@ -82,7 +82,7 @@ public string[] GetCookieHeaders()
 
         public override string ToString()
         {
-            var result = string.Format("Res: [{0}] {1}: {2}.{3}", Request.Method, Request.Url, (int)StatusCode, StatusCode);
+            var result = $"Res: [{Request.Method}] {Request.Url}: {(int)StatusCode}.{StatusCode}";
 
             if (HasHttpError && Headers.ContentType.IsNotNullOrWhiteSpace() && !Headers.ContentType.Equals("text/html", StringComparison.InvariantCultureIgnoreCase))
             {
diff --git a/src/NzbDrone.Common/Http/HttpUri.cs b/src/NzbDrone.Common/Http/HttpUri.cs
index a1398e393..bb692d769 100644
--- a/src/NzbDrone.Common/Http/HttpUri.cs
+++ b/src/NzbDrone.Common/Http/HttpUri.cs
@@ -221,13 +221,13 @@ public override string ToString()
 
         public override bool Equals(object obj)
         {
-            if (obj is string)
+            if (obj is string s)
             {
-                return _uri.Equals((string)obj);
+                return _uri.Equals(s);
             }
-            else if (obj is Uri)
+            else if (obj is Uri uri)
             {
-                return _uri.Equals(((Uri)obj).OriginalString);
+                return _uri.Equals(uri.OriginalString);
             }
             else
             {
diff --git a/src/NzbDrone.Common/Http/JsonRpcRequestBuilder.cs b/src/NzbDrone.Common/Http/JsonRpcRequestBuilder.cs
index 3722fd9ce..851361030 100644
--- a/src/NzbDrone.Common/Http/JsonRpcRequestBuilder.cs
+++ b/src/NzbDrone.Common/Http/JsonRpcRequestBuilder.cs
@@ -68,7 +68,7 @@ protected override void Apply(HttpRequest request)
 
             if (request.ContentSummary == null)
             {
-                request.ContentSummary = string.Format("{0}({1})", JsonMethod, string.Join(", ", parameterSummary));
+                request.ContentSummary = $"{JsonMethod}({string.Join(", ", parameterSummary)})";
             }
         }
 
@@ -77,7 +77,7 @@ private void ConvertParameter(object value, out object data, out string summary)
             if (value is byte[])
             {
                 data = Convert.ToBase64String(value as byte[]);
-                summary = string.Format("[blob {0} bytes]", (value as byte[]).Length);
+                summary = $"[blob {(value as byte[]).Length} bytes]";
             }
             else if (value is Array && ((Array)value).Length > 0)
             {
diff --git a/src/NzbDrone.Common/Http/NzbDroneWebClient.cs b/src/NzbDrone.Common/Http/NzbDroneWebClient.cs
index ccd369bb7..123ed57f7 100644
--- a/src/NzbDrone.Common/Http/NzbDroneWebClient.cs
+++ b/src/NzbDrone.Common/Http/NzbDroneWebClient.cs
@@ -8,9 +8,9 @@ public class NzbDroneWebClient : WebClient
         protected override WebRequest GetWebRequest(Uri address)
         {
             var request = base.GetWebRequest(address);
-            if (request is HttpWebRequest)
+            if (request is HttpWebRequest httpWebRequest)
             {
-                ((HttpWebRequest)request).KeepAlive = false;
+                httpWebRequest.KeepAlive = false;
                 ((HttpWebRequest)request).ServicePoint.Expect100Continue = false;
             }
 
diff --git a/src/NzbDrone.Common/Http/Proxy/ManagedWebProxyFactory.cs b/src/NzbDrone.Common/Http/Proxy/ManagedWebProxyFactory.cs
index 4e0a8458b..4bf16cb56 100644
--- a/src/NzbDrone.Common/Http/Proxy/ManagedWebProxyFactory.cs
+++ b/src/NzbDrone.Common/Http/Proxy/ManagedWebProxyFactory.cs
@@ -64,7 +64,7 @@ private static IPAddress GetProxyIpAddress(string host)
                 }
                 catch (Exception e)
                 {
-                    throw new InvalidOperationException(string.Format("Unable to resolve proxy hostname '{0}' to a valid IP address.", host), e);
+                    throw new InvalidOperationException($"Unable to resolve proxy hostname '{host}' to a valid IP address.", e);
                 }
             }
 
diff --git a/src/NzbDrone.Common/Instrumentation/InitializeLogger.cs b/src/NzbDrone.Common/Instrumentation/InitializeLogger.cs
index aa7696204..fb0776a66 100644
--- a/src/NzbDrone.Common/Instrumentation/InitializeLogger.cs
+++ b/src/NzbDrone.Common/Instrumentation/InitializeLogger.cs
@@ -19,10 +19,7 @@ public InitializeLogger(IOsInfo osInfo)
         public void Initialize()
         {
             var sentryTarget = LogManager.Configuration.AllTargets.OfType<SentryTarget>().FirstOrDefault();
-            if (sentryTarget != null)
-            {
-                sentryTarget.UpdateScope(_osInfo);
-            }
+            sentryTarget?.UpdateScope(_osInfo);
         }
     }
 }
diff --git a/src/NzbDrone.Common/Instrumentation/Sentry/SentryTarget.cs b/src/NzbDrone.Common/Instrumentation/Sentry/SentryTarget.cs
index f782b6dd1..cb2918ce4 100644
--- a/src/NzbDrone.Common/Instrumentation/Sentry/SentryTarget.cs
+++ b/src/NzbDrone.Common/Instrumentation/Sentry/SentryTarget.cs
@@ -160,9 +160,7 @@ public void UpdateScope(IOsInfo osInfo)
 
         private void OnError(Exception ex)
         {
-            var webException = ex as WebException;
-
-            if (webException != null)
+            if (ex is WebException webException)
             {
                 var response = webException.Response as HttpWebResponse;
                 var statusCode = response?.StatusCode;
diff --git a/src/NzbDrone.Common/Model/ProcessInfo.cs b/src/NzbDrone.Common/Model/ProcessInfo.cs
index 9eb8df647..fa1cc11a2 100644
--- a/src/NzbDrone.Common/Model/ProcessInfo.cs
+++ b/src/NzbDrone.Common/Model/ProcessInfo.cs
@@ -8,7 +8,7 @@ public class ProcessInfo
 
         public override string ToString()
         {
-            return string.Format("{0}:{1} [{2}]", Id, Name ?? "Unknown", StartPath ?? "Unknown");
+            return $"{Id}:{Name ?? "Unknown"} [{StartPath ?? "Unknown"}]";
         }
     }
 }
\ No newline at end of file
diff --git a/src/NzbDrone.Common/OAuth/OAuthTools.cs b/src/NzbDrone.Common/OAuth/OAuthTools.cs
index 3d0f8aabc..6fc561a07 100644
--- a/src/NzbDrone.Common/OAuth/OAuthTools.cs
+++ b/src/NzbDrone.Common/OAuth/OAuthTools.cs
@@ -246,8 +246,8 @@ public static string ConstructRequestUrl(Uri url)
 
             var sb = new StringBuilder();
 
-            var requestUrl = string.Format("{0}://{1}", url.Scheme, url.Host);
-            var qualified = string.Format(":{0}", url.Port);
+            var requestUrl = $"{url.Scheme}://{url.Host}";
+            var qualified = $":{url.Port}";
             var basic = url.Scheme == "http" && url.Port == 80;
             var secure = url.Scheme == "https" && url.Port == 443;
 
diff --git a/src/NzbDrone.Common/OAuth/WebParameterCollection.cs b/src/NzbDrone.Common/OAuth/WebParameterCollection.cs
index af3e92439..96ddbc4df 100644
--- a/src/NzbDrone.Common/OAuth/WebParameterCollection.cs
+++ b/src/NzbDrone.Common/OAuth/WebParameterCollection.cs
@@ -16,7 +16,7 @@ public class WebParameterCollection : IList<WebParameter>
             {
                 var parameters = this.Where(p => p.Name.Equals(name));
                 
-                if(parameters.Count() == 0)
+                if(!parameters.Any())
                 {
                     return null;
                 }
diff --git a/src/NzbDrone.Common/Processes/ProcessOutputLine.cs b/src/NzbDrone.Common/Processes/ProcessOutputLine.cs
index 189c1f494..6d1899bfd 100644
--- a/src/NzbDrone.Common/Processes/ProcessOutputLine.cs
+++ b/src/NzbDrone.Common/Processes/ProcessOutputLine.cs
@@ -17,7 +17,7 @@ public ProcessOutputLine(ProcessOutputLevel level, string content)
 
         public override string ToString()
         {
-            return string.Format("{0} - {1} - {2}", Time, Level, Content);
+            return $"{Time} - {Level} - {Content}";
         }
     }
 
diff --git a/src/NzbDrone.Common/Reflection/ReflectionExtensions.cs b/src/NzbDrone.Common/Reflection/ReflectionExtensions.cs
index 2dba971c6..7d5792b05 100644
--- a/src/NzbDrone.Common/Reflection/ReflectionExtensions.cs
+++ b/src/NzbDrone.Common/Reflection/ReflectionExtensions.cs
@@ -54,7 +54,7 @@ public static bool IsWritable(this PropertyInfo propertyInfo)
 
             if (attribute == null && isRequired)
             {
-                throw new ArgumentException(string.Format("The {0} attribute must be defined on member {1}", typeof(T).Name, member.Name));
+                throw new ArgumentException($"The {typeof(T).Name} attribute must be defined on member {member.Name}");
             }
 
             return (T)attribute;
diff --git a/src/NzbDrone.Common/TinyIoC.cs b/src/NzbDrone.Common/TinyIoC.cs
index 7c5d7196f..7cb4bbb3e 100644
--- a/src/NzbDrone.Common/TinyIoC.cs
+++ b/src/NzbDrone.Common/TinyIoC.cs
@@ -1391,7 +1391,7 @@ public MultiRegisterOptions RegisterMultiple(Type registrationType, IEnumerable<
                 //#else
                 if (!registrationType.IsAssignableFrom(type))
                     //#endif
-                    throw new ArgumentException(string.Format("types: The type {0} is not assignable from {1}", registrationType.FullName, type.FullName));
+                    throw new ArgumentException($"types: The type {registrationType.FullName} is not assignable from {type.FullName}");
 
             if (implementationTypes.Count() != implementationTypes.Distinct().Count())
             {
@@ -1402,7 +1402,7 @@ into j
                                                   select j.Key.FullName;
 
                 var fullNamesOfDuplicatedTypes = string.Join(",\n", queryForDuplicatedTypes.ToArray());
-                var multipleRegMessage = string.Format("types: The same implementation type cannot be specified multiple times for {0}\n\n{1}", registrationType.FullName, fullNamesOfDuplicatedTypes);
+                var multipleRegMessage = $"types: The same implementation type cannot be specified multiple times for {registrationType.FullName}\n\n{fullNamesOfDuplicatedTypes}";
                 throw new ArgumentException(multipleRegMessage);
             }
 
@@ -2629,9 +2629,7 @@ public override void SetConstructor(ConstructorInfo constructor)
 
             public void Dispose()
             {
-                var disposable = _instance as IDisposable;
-
-                if (disposable != null)
+                if (_instance is IDisposable disposable)
                     disposable.Dispose();
             }
         }
@@ -2693,9 +2691,7 @@ public override void SetConstructor(ConstructorInfo constructor)
 
             public void Dispose()
             {
-                var disposable = _instance.Target as IDisposable;
-
-                if (disposable != null)
+                if (_instance.Target is IDisposable disposable)
                     disposable.Dispose();
             }
         }
@@ -2763,9 +2759,7 @@ public void Dispose()
                 if (this._Current == null)
                     return;
 
-                var disposable = this._Current as IDisposable;
-
-                if (disposable != null)
+                if (this._Current is IDisposable disposable)
                     disposable.Dispose();
             }
         }
diff --git a/src/NzbDrone.Core.Test/Download/Pending/PendingReleaseServiceTests/RemovePendingFixture.cs b/src/NzbDrone.Core.Test/Download/Pending/PendingReleaseServiceTests/RemovePendingFixture.cs
index d0629ad40..b1375bb79 100644
--- a/src/NzbDrone.Core.Test/Download/Pending/PendingReleaseServiceTests/RemovePendingFixture.cs
+++ b/src/NzbDrone.Core.Test/Download/Pending/PendingReleaseServiceTests/RemovePendingFixture.cs
@@ -65,7 +65,7 @@ public void should_remove_same_release()
         {
             AddPending(id: 1, seasonNumber: 2, episodes: new[] { 3 });
 
-            var queueId = HashConverter.GetHashInt31(string.Format("pending-{0}-ep{1}", 1, _episode.Id));
+            var queueId = HashConverter.GetHashInt31($"pending-{1}-ep{_episode.Id}");
 
             Subject.RemovePendingQueueItems(queueId);
 
@@ -80,7 +80,7 @@ public void should_remove_multiple_releases_release()
             AddPending(id: 3, seasonNumber: 2, episodes: new[] { 3 });
             AddPending(id: 4, seasonNumber: 2, episodes: new[] { 3 });
 
-            var queueId = HashConverter.GetHashInt31(string.Format("pending-{0}-ep{1}", 3, _episode.Id));
+            var queueId = HashConverter.GetHashInt31($"pending-{3}-ep{_episode.Id}");
 
             Subject.RemovePendingQueueItems(queueId);
 
@@ -95,7 +95,7 @@ public void should_not_remove_different_season()
             AddPending(id: 3, seasonNumber: 3, episodes: new[] { 1 });
             AddPending(id: 4, seasonNumber: 3, episodes: new[] { 1 });
 
-            var queueId = HashConverter.GetHashInt31(string.Format("pending-{0}-ep{1}", 1, _episode.Id));
+            var queueId = HashConverter.GetHashInt31($"pending-{1}-ep{_episode.Id}");
 
             Subject.RemovePendingQueueItems(queueId);
 
@@ -110,7 +110,7 @@ public void should_not_remove_different_episodes()
             AddPending(id: 3, seasonNumber: 2, episodes: new[] { 2 });
             AddPending(id: 4, seasonNumber: 2, episodes: new[] { 3 });
 
-            var queueId = HashConverter.GetHashInt31(string.Format("pending-{0}-ep{1}", 1, _episode.Id));
+            var queueId = HashConverter.GetHashInt31($"pending-{1}-ep{_episode.Id}");
 
             Subject.RemovePendingQueueItems(queueId);
 
@@ -123,7 +123,7 @@ public void should_not_remove_multiepisodes()
             AddPending(id: 1, seasonNumber: 2, episodes: new[] { 1 });
             AddPending(id: 2, seasonNumber: 2, episodes: new[] { 1, 2 });
 
-            var queueId = HashConverter.GetHashInt31(string.Format("pending-{0}-ep{1}", 1, _episode.Id));
+            var queueId = HashConverter.GetHashInt31($"pending-{1}-ep{_episode.Id}");
 
             Subject.RemovePendingQueueItems(queueId);
 
@@ -136,7 +136,7 @@ public void should_not_remove_singleepisodes()
             AddPending(id: 1, seasonNumber: 2, episodes: new[] { 1 });
             AddPending(id: 2, seasonNumber: 2, episodes: new[] { 1, 2 });
 
-            var queueId = HashConverter.GetHashInt31(string.Format("pending-{0}-ep{1}", 2, _episode.Id));
+            var queueId = HashConverter.GetHashInt31($"pending-{2}-ep{_episode.Id}");
 
             Subject.RemovePendingQueueItems(queueId);
 
diff --git a/src/NzbDrone.Core.Test/Framework/DirectDataMapper.cs b/src/NzbDrone.Core.Test/Framework/DirectDataMapper.cs
index a75daf167..b7a2deb7e 100644
--- a/src/NzbDrone.Core.Test/Framework/DirectDataMapper.cs
+++ b/src/NzbDrone.Core.Test/Framework/DirectDataMapper.cs
@@ -105,7 +105,7 @@ protected T MapToObject<T>(DataRow dataRow) where T : new()
 
                 if (propertyInfo == null)
                 {
-                    throw new Exception(string.Format("Column {0} doesn't exist on type {1}.", columnName, typeof(T)));
+                    throw new Exception($"Column {columnName} doesn't exist on type {typeof(T)}.");
                 }
 
                 var propertyType = propertyInfo.PropertyType;
diff --git a/src/NzbDrone.Core.Test/Framework/MigrationTest.cs b/src/NzbDrone.Core.Test/Framework/MigrationTest.cs
index 4e538546e..35f9a5ab2 100644
--- a/src/NzbDrone.Core.Test/Framework/MigrationTest.cs
+++ b/src/NzbDrone.Core.Test/Framework/MigrationTest.cs
@@ -25,8 +25,7 @@ protected virtual IDirectDataMapper WithMigrationTestDb(Action<TMigration> befor
             {
                 BeforeMigration = m =>
                 {
-                    var migration = m as TMigration;
-                    if (beforeMigration != null && migration != null)
+                    if (beforeMigration != null && m is TMigration migration)
                     {
                         beforeMigration(migration);
                     }
diff --git a/src/NzbDrone.Core.Test/NotificationTests/PlexClientServiceTest.cs b/src/NzbDrone.Core.Test/NotificationTests/PlexClientServiceTest.cs
index 35f7206a0..125b6672c 100644
--- a/src/NzbDrone.Core.Test/NotificationTests/PlexClientServiceTest.cs
+++ b/src/NzbDrone.Core.Test/NotificationTests/PlexClientServiceTest.cs
@@ -35,7 +35,7 @@ public void Notify_should_send_notification()
             const string header = "Test Header";
             const string message = "Test Message";
 
-            var expectedUrl = string.Format("http://localhost:3000/xbmcCmds/xbmcHttp?command=ExecBuiltIn(Notification({0}, {1}))", header, message);
+            var expectedUrl = $"http://localhost:3000/xbmcCmds/xbmcHttp?command=ExecBuiltIn(Notification({header}, {message}))";
 
             var fakeHttp = Mocker.GetMock<IHttpProvider>();
             fakeHttp.Setup(s => s.DownloadString(expectedUrl))
@@ -56,7 +56,7 @@ public void Notify_should_send_notification_with_credentials_when_configured()
             const string header = "Test Header";
             const string message = "Test Message";
 
-            var expectedUrl = string.Format("http://localhost:3000/xbmcCmds/xbmcHttp?command=ExecBuiltIn(Notification({0}, {1}))", header, message);
+            var expectedUrl = $"http://localhost:3000/xbmcCmds/xbmcHttp?command=ExecBuiltIn(Notification({header}, {message}))";
 
             var fakeHttp = Mocker.GetMock<IHttpProvider>();
             fakeHttp.Setup(s => s.DownloadString(expectedUrl, "plex", "plex"))
diff --git a/src/NzbDrone.Core.Test/NotificationTests/Xbmc/Http/ActivePlayersFixture.cs b/src/NzbDrone.Core.Test/NotificationTests/Xbmc/Http/ActivePlayersFixture.cs
index bf5f4de2b..d099350f1 100644
--- a/src/NzbDrone.Core.Test/NotificationTests/Xbmc/Http/ActivePlayersFixture.cs
+++ b/src/NzbDrone.Core.Test/NotificationTests/Xbmc/Http/ActivePlayersFixture.cs
@@ -45,7 +45,7 @@ public void Setup()
                 UpdateLibrary = true
             };
 
-            _expectedUrl = string.Format("http://{0}/xbmcCmds/xbmcHttp?command={1}", _settings.Address, "getcurrentlyplaying");
+            _expectedUrl = $"http://{_settings.Address}/xbmcCmds/xbmcHttp?command={"getcurrentlyplaying"}";
         }
 
         [Test]
diff --git a/src/NzbDrone.Core.Test/ParserTests/QualityParserFixture.cs b/src/NzbDrone.Core.Test/ParserTests/QualityParserFixture.cs
index 3084d66ad..7ea7ca961 100644
--- a/src/NzbDrone.Core.Test/ParserTests/QualityParserFixture.cs
+++ b/src/NzbDrone.Core.Test/ParserTests/QualityParserFixture.cs
@@ -364,7 +364,7 @@ public void quality_parse(string title, bool proper)
         [Test, TestCaseSource(nameof(SelfQualityParserCases))]
         public void parsing_our_own_quality_enum_name(Quality quality)
         {
-            var fileName = string.Format("My series S01E01 [{0}]", quality.Name);
+            var fileName = $"My series S01E01 [{quality.Name}]";
             var result = QualityParser.ParseQuality(fileName);
             result.Quality.Should().Be(quality);
         }
@@ -374,7 +374,7 @@ public void should_parse_quality_from_other_source(string qualityString, Quality
         {
             foreach (var c in new char[] { '-', '.', ' ', '_' })
             {
-                var title = string.Format("My series S01E01 {0}", qualityString.Replace(' ', c));
+                var title = $"My series S01E01 {qualityString.Replace(' ', c)}";
 
                 ParseAndVerifyQuality(title, quality, false);
             }
diff --git a/src/NzbDrone.Core/Configuration/ConfigFileProvider.cs b/src/NzbDrone.Core/Configuration/ConfigFileProvider.cs
index 556050b9a..9a99ef575 100644
--- a/src/NzbDrone.Core/Configuration/ConfigFileProvider.cs
+++ b/src/NzbDrone.Core/Configuration/ConfigFileProvider.cs
@@ -235,7 +235,7 @@ public string GetValue(string key, object defaultValue, bool persist = true)
 
                     var valueHolder = parentContainer.Descendants(key).ToList();
 
-                    if (valueHolder.Count() == 1)
+                    if (valueHolder.Count == 1)
                     {
                         return valueHolder.First().Value.Trim();
                     }
diff --git a/src/NzbDrone.Core/DataAugmentation/Scene/InvalidSceneMappingException.cs b/src/NzbDrone.Core/DataAugmentation/Scene/InvalidSceneMappingException.cs
index 9e291eeb6..dd091d499 100644
--- a/src/NzbDrone.Core/DataAugmentation/Scene/InvalidSceneMappingException.cs
+++ b/src/NzbDrone.Core/DataAugmentation/Scene/InvalidSceneMappingException.cs
@@ -16,7 +16,7 @@ public InvalidSceneMappingException(IEnumerable<SceneMapping> mappings, string r
 
         private static string FormatMessage(IEnumerable<SceneMapping> mappings, string releaseTitle)
         {
-            return string.Format("Scene Mappings contains a conflict for tvdbids {0}. Please notify Sonarr developers. ({1})", string.Join(",", mappings.Select(v => v.TvdbId.ToString())), releaseTitle);
+            return $"Scene Mappings contains a conflict for tvdbids {string.Join(",", mappings.Select(v => v.TvdbId.ToString()))}. Please notify Sonarr developers. ({releaseTitle})";
         }
     }
 }
diff --git a/src/NzbDrone.Core/Datastore/BasicRepository.cs b/src/NzbDrone.Core/Datastore/BasicRepository.cs
index 38f8d5c16..955bd9aba 100644
--- a/src/NzbDrone.Core/Datastore/BasicRepository.cs
+++ b/src/NzbDrone.Core/Datastore/BasicRepository.cs
@@ -88,10 +88,10 @@ public TModel Get(int id)
         public IEnumerable<TModel> Get(IEnumerable<int> ids)
         {
             var idList = ids.ToList();
-            var query = string.Format("Id IN ({0})", string.Join(",", idList));
+            var query = $"Id IN ({string.Join(",", idList)})";
             var result = Query.Where(query).ToList();
 
-            if (result.Count != idList.Count())
+            if (result.Count != idList.Count)
             {
                 throw new ApplicationException($"Expected query to return {idList.Count} rows but returned {result.Count}");
             }
diff --git a/src/NzbDrone.Core/Datastore/Converters/BooleanIntConverter.cs b/src/NzbDrone.Core/Datastore/Converters/BooleanIntConverter.cs
index 397746b23..7ddf405e5 100644
--- a/src/NzbDrone.Core/Datastore/Converters/BooleanIntConverter.cs
+++ b/src/NzbDrone.Core/Datastore/Converters/BooleanIntConverter.cs
@@ -22,7 +22,7 @@ public object FromDB(ConverterContext context)
                 case 0:
                     return false;
                 default:
-                    throw new ConversionException(string.Format("The BooleanCharConverter could not convert the value '{0}' to a Boolean.", context.DbValue));
+                    throw new ConversionException($"The BooleanCharConverter could not convert the value '{context.DbValue}' to a Boolean.");
             }
         }
 
diff --git a/src/NzbDrone.Core/Datastore/Extensions/MappingExtensions.cs b/src/NzbDrone.Core/Datastore/Extensions/MappingExtensions.cs
index 4d635024a..e95e6b72e 100644
--- a/src/NzbDrone.Core/Datastore/Extensions/MappingExtensions.cs
+++ b/src/NzbDrone.Core/Datastore/Extensions/MappingExtensions.cs
@@ -26,7 +26,7 @@ public static ColumnMapBuilder<T> RegisterModel<T>(this FluentMappings.MappingsF
             return mapBuilder.Table.MapTable(tableName)
                              .Columns
                              .AutoMapPropertiesWhere(IsMappableProperty)
-                             .PrefixAltNames(string.Format("{0}_", typeof(T).Name))
+                             .PrefixAltNames($"{typeof(T).Name}_")
                              .For(c => c.Id)
                              .SetPrimaryKey()
                              .SetReturnValue()
diff --git a/src/NzbDrone.Core/Datastore/Migration/018_remove_duplicates.cs b/src/NzbDrone.Core/Datastore/Migration/018_remove_duplicates.cs
index d788dd7dc..7d5bb80a0 100644
--- a/src/NzbDrone.Core/Datastore/Migration/018_remove_duplicates.cs
+++ b/src/NzbDrone.Core/Datastore/Migration/018_remove_duplicates.cs
@@ -35,7 +35,7 @@ private void RemoveDuplicates(IDbConnection conn, IDbTransaction tran)
         {
             var getDuplicates = conn.CreateCommand();
             getDuplicates.Transaction = tran;
-            getDuplicates.CommandText = string.Format("select id, {0} from {1}", columnName, tableName);
+            getDuplicates.CommandText = $"select id, {columnName} from {tableName}";
 
             var result = new List<KeyValuePair<int, T>>();
 
@@ -68,19 +68,19 @@ private void RemoveSeriesRows(IDbConnection conn, IDbTransaction tran, int serie
             var deleteCmd = conn.CreateCommand();
             deleteCmd.Transaction = tran;
 
-            deleteCmd.CommandText = string.Format("DELETE FROM Series WHERE Id = {0}", seriesId.ToString());
+            deleteCmd.CommandText = $"DELETE FROM Series WHERE Id = {seriesId.ToString()}";
             deleteCmd.ExecuteNonQuery();
 
-            deleteCmd.CommandText = string.Format("DELETE FROM Episodes WHERE SeriesId = {0}", seriesId.ToString());
+            deleteCmd.CommandText = $"DELETE FROM Episodes WHERE SeriesId = {seriesId.ToString()}";
             deleteCmd.ExecuteNonQuery();
 
-            deleteCmd.CommandText = string.Format("DELETE FROM Seasons WHERE SeriesId = {0}", seriesId.ToString());
+            deleteCmd.CommandText = $"DELETE FROM Seasons WHERE SeriesId = {seriesId.ToString()}";
             deleteCmd.ExecuteNonQuery();
 
-            deleteCmd.CommandText = string.Format("DELETE FROM History WHERE SeriesId = {0}", seriesId.ToString());
+            deleteCmd.CommandText = $"DELETE FROM History WHERE SeriesId = {seriesId.ToString()}";
             deleteCmd.ExecuteNonQuery();
 
-            deleteCmd.CommandText = string.Format("DELETE FROM EpisodeFiles WHERE SeriesId = {0}", seriesId.ToString());
+            deleteCmd.CommandText = $"DELETE FROM EpisodeFiles WHERE SeriesId = {seriesId.ToString()}";
             deleteCmd.ExecuteNonQuery();
         }
 
@@ -89,10 +89,10 @@ private void RemoveEpisodeRows(IDbConnection conn, IDbTransaction tran, int epis
             var deleteCmd = conn.CreateCommand();
             deleteCmd.Transaction = tran;
 
-            deleteCmd.CommandText = string.Format("DELETE FROM Episodes WHERE Id = {0}", episodeId.ToString());
+            deleteCmd.CommandText = $"DELETE FROM Episodes WHERE Id = {episodeId.ToString()}";
             deleteCmd.ExecuteNonQuery();
 
-            deleteCmd.CommandText = string.Format("DELETE FROM History WHERE EpisodeId = {0}", episodeId.ToString());
+            deleteCmd.CommandText = $"DELETE FROM History WHERE EpisodeId = {episodeId.ToString()}";
             deleteCmd.ExecuteNonQuery();
         }
     }
diff --git a/src/NzbDrone.Core/Datastore/Migration/020_add_year_and_seasons_to_series.cs b/src/NzbDrone.Core/Datastore/Migration/020_add_year_and_seasons_to_series.cs
index 0e2136141..6e4ed64d3 100644
--- a/src/NzbDrone.Core/Datastore/Migration/020_add_year_and_seasons_to_series.cs
+++ b/src/NzbDrone.Core/Datastore/Migration/020_add_year_and_seasons_to_series.cs
@@ -54,7 +54,7 @@ private void ConvertSeasons(IDbConnection conn, IDbTransaction tran)
 
                         using (IDbCommand updateCmd = conn.CreateCommand())
                         {
-                            var text = string.Format("UPDATE Series SET Seasons = '{0}' WHERE Id = {1}", seasons.ToJson() , seriesId);
+                            var text = $"UPDATE Series SET Seasons = '{seasons.ToJson()}' WHERE Id = {seriesId}";
 
                             updateCmd.Transaction = tran;
                             updateCmd.CommandText = text;
diff --git a/src/NzbDrone.Core/Datastore/Migration/029_add_formats_to_naming_config.cs b/src/NzbDrone.Core/Datastore/Migration/029_add_formats_to_naming_config.cs
index 6d3dd897b..a91153c07 100644
--- a/src/NzbDrone.Core/Datastore/Migration/029_add_formats_to_naming_config.cs
+++ b/src/NzbDrone.Core/Datastore/Migration/029_add_formats_to_naming_config.cs
@@ -77,13 +77,9 @@ private void ConvertConfig(IDbConnection conn, IDbTransaction tran)
                             }
                         }
 
-                        var standardEpisodeFormat = string.Format("{0}{1}{2}", seriesTitlePattern,
-                                                                             GetNumberStyle(numberStyle).Pattern,
-                                                                             episodeTitlePattern);
+                        var standardEpisodeFormat = $"{seriesTitlePattern}{GetNumberStyle(numberStyle).Pattern}{episodeTitlePattern}";
 
-                        var dailyEpisodeFormat = string.Format("{0}{1}{2}", seriesTitlePattern,
-                                                                            dailyEpisodePattern,
-                                                                            episodeTitlePattern);
+                        var dailyEpisodeFormat = $"{seriesTitlePattern}{dailyEpisodePattern}{episodeTitlePattern}";
 
                         if (includeQuality)
                         {
diff --git a/src/NzbDrone.Core/Datastore/Migration/069_quality_proper.cs b/src/NzbDrone.Core/Datastore/Migration/069_quality_proper.cs
index 9db5f2955..f4a386f77 100644
--- a/src/NzbDrone.Core/Datastore/Migration/069_quality_proper.cs
+++ b/src/NzbDrone.Core/Datastore/Migration/069_quality_proper.cs
@@ -60,15 +60,15 @@ private string GetNewFormat(string currentFormat)
             foreach (Match match in matches)
             {
                 var tokenMatch = GetTokenMatch(match);
-                var qualityFullToken = string.Format("Quality{0}Full", tokenMatch.Separator); ;
+                var qualityFullToken = $"Quality{tokenMatch.Separator}Full"; ;
 
                 if (tokenMatch.Token.All(t => !char.IsLetter(t) || char.IsLower(t)))
                 {
-                    qualityFullToken = string.Format("quality{0}full", tokenMatch.Separator);
+                    qualityFullToken = $"quality{tokenMatch.Separator}full";
                 }
                 else if (tokenMatch.Token.All(t => !char.IsLetter(t) || char.IsUpper(t)))
                 {
-                    qualityFullToken = string.Format("QUALITY{0}FULL", tokenMatch.Separator);
+                    qualityFullToken = $"QUALITY{tokenMatch.Separator}FULL";
                 }
 
                 result = result.Replace(match.Groups["token"].Value, qualityFullToken);
diff --git a/src/NzbDrone.Core/Datastore/Migration/070_delay_profile.cs b/src/NzbDrone.Core/Datastore/Migration/070_delay_profile.cs
index 1c9c7e58b..10b76ff54 100644
--- a/src/NzbDrone.Core/Datastore/Migration/070_delay_profile.cs
+++ b/src/NzbDrone.Core/Datastore/Migration/070_delay_profile.cs
@@ -50,9 +50,9 @@ private void ConvertProfile(IDbConnection conn, IDbTransaction tran)
                 var profile = profileClosure;
                 if (profile.GrabDelay == 0) continue;
 
-                var tag = string.Format("delay-{0}", profile.GrabDelay);
+                var tag = $"delay-{profile.GrabDelay}";
                 var tagId = InsertTag(conn, tran, tag);
-                var tags = string.Format("[{0}]", tagId);
+                var tags = $"[{tagId}]";
 
                 using (IDbCommand insertDelayProfileCmd = conn.CreateCommand())
                 {
diff --git a/src/NzbDrone.Core/Datastore/Migration/079_dedupe_tags.cs b/src/NzbDrone.Core/Datastore/Migration/079_dedupe_tags.cs
index b786747a2..475b829d6 100644
--- a/src/NzbDrone.Core/Datastore/Migration/079_dedupe_tags.cs
+++ b/src/NzbDrone.Core/Datastore/Migration/079_dedupe_tags.cs
@@ -73,7 +73,7 @@ private void UpdateTaggedModel(IDbConnection conn, IDbTransaction tran, string t
             using (IDbCommand tagCmd = conn.CreateCommand())
             {
                 tagCmd.Transaction = tran;
-                tagCmd.CommandText = string.Format("SELECT Id, Tags FROM {0}", table);
+                tagCmd.CommandText = $"SELECT Id, Tags FROM {table}";
 
                 using (IDataReader tagReader = tagCmd.ExecuteReader())
                 {
@@ -131,7 +131,7 @@ private void DeleteTags(IDbConnection conn, IDbTransaction tran, List<TagReplace
             using (IDbCommand removeCmd = conn.CreateCommand())
             {
                 removeCmd.Transaction = tran;
-                removeCmd.CommandText = string.Format("DELETE FROM Tags WHERE Id IN ({0})", string.Join(",", idsToRemove));
+                removeCmd.CommandText = $"DELETE FROM Tags WHERE Id IN ({string.Join(",", idsToRemove)})";
                 removeCmd.ExecuteNonQuery();
             }
         }
diff --git a/src/NzbDrone.Core/Datastore/Migration/085_expand_transmission_urlbase.cs b/src/NzbDrone.Core/Datastore/Migration/085_expand_transmission_urlbase.cs
index 956f87bcd..51cfd4186 100644
--- a/src/NzbDrone.Core/Datastore/Migration/085_expand_transmission_urlbase.cs
+++ b/src/NzbDrone.Core/Datastore/Migration/085_expand_transmission_urlbase.cs
@@ -39,7 +39,7 @@ private void UpdateTransmissionSettings(IDbConnection conn, IDbTransaction tran)
                         }
                         else
                         {
-                            settings["urlBase"] = string.Format("/{0}/transmission/", urlBase.Trim('/'));
+                            settings["urlBase"] = $"/{urlBase.Trim('/')}/transmission/";
                         }
 
                         using (var updateCmd = conn.CreateCommand())
diff --git a/src/NzbDrone.Core/Datastore/Migration/147_swap_filechmod_for_folderchmod.cs b/src/NzbDrone.Core/Datastore/Migration/147_swap_filechmod_for_folderchmod.cs
index 3e0c53652..67b2c4366 100644
--- a/src/NzbDrone.Core/Datastore/Migration/147_swap_filechmod_for_folderchmod.cs
+++ b/src/NzbDrone.Core/Datastore/Migration/147_swap_filechmod_for_folderchmod.cs
@@ -21,9 +21,8 @@ private void ConvertFileChmodToFolderChmod(IDbConnection conn, IDbTransaction tr
             {
                 getFileChmodCmd.Transaction = tran;
                 getFileChmodCmd.CommandText = @"SELECT Value FROM Config WHERE Key = 'filechmod'";
-                
-                var fileChmod = getFileChmodCmd.ExecuteScalar() as string;
-                if (fileChmod != null)
+
+                if (getFileChmodCmd.ExecuteScalar() is string fileChmod)
                 {
                     if (fileChmod.IsNotNullOrWhiteSpace())
                     {
diff --git a/src/NzbDrone.Core/Datastore/Migration/Framework/NzbDroneSqliteProcessor.cs b/src/NzbDrone.Core/Datastore/Migration/Framework/NzbDroneSqliteProcessor.cs
index 5b1fb0a58..0c34ef45b 100644
--- a/src/NzbDrone.Core/Datastore/Migration/Framework/NzbDroneSqliteProcessor.cs
+++ b/src/NzbDrone.Core/Datastore/Migration/Framework/NzbDroneSqliteProcessor.cs
@@ -32,7 +32,7 @@ public override void Process(AlterColumnExpression expression)
 
             if (columnIndex == -1)
             {
-                throw new ApplicationException(string.Format("Column {0} does not exist on table {1}.", expression.Column.Name, expression.TableName));
+                throw new ApplicationException($"Column {expression.Column.Name} does not exist on table {expression.TableName}.");
             }
 
             columnDefinitions[columnIndex] = expression.Column;
@@ -59,7 +59,7 @@ public override void Process(DeleteColumnExpression expression)
 
             if (columnsToRemove.Any())
             {
-                throw new ApplicationException(string.Format("Column {0} does not exist on table {1}.", columnsToRemove.First(), expression.TableName));
+                throw new ApplicationException($"Column {columnsToRemove.First()} does not exist on table {expression.TableName}.");
             }
 
             ProcessAlterTable(tableDefinition);
@@ -75,12 +75,12 @@ public override void Process(RenameColumnExpression expression)
 
             if (columnIndex == -1)
             {
-                throw new ApplicationException(string.Format("Column {0} does not exist on table {1}.", expression.OldName, expression.TableName));
+                throw new ApplicationException($"Column {expression.OldName} does not exist on table {expression.TableName}.");
             }
 
             if (columnDefinitions.Any(c => c.Name == expression.NewName))
             {
-                throw new ApplicationException(string.Format("Column {0} already exists on table {1}.", expression.NewName, expression.TableName));
+                throw new ApplicationException($"Column {expression.NewName} already exists on table {expression.TableName}.");
             }
 
             oldColumnDefinitions[columnIndex] = (ColumnDefinition)columnDefinitions[columnIndex].Clone();
@@ -131,7 +131,7 @@ protected virtual void ProcessAlterTable(TableDefinition tableDefinition, List<C
 
             Process(new CreateTableExpression() { TableName = tempTableName, Columns = tableDefinition.Columns.ToList() });
 
-            Process(string.Format("INSERT INTO {0} ({1}) SELECT {2} FROM {3}", quoter.QuoteTableName(tempTableName), columnsToInsert, columnsToFetch, quoter.QuoteTableName(tableName)));
+            Process($"INSERT INTO {quoter.QuoteTableName(tempTableName)} ({columnsToInsert}) SELECT {columnsToFetch} FROM {quoter.QuoteTableName(tableName)}");
 
             Process(new DeleteTableExpression() { TableName = tableName });
 
diff --git a/src/NzbDrone.Core/Datastore/Migration/Framework/SqliteSyntaxReader.cs b/src/NzbDrone.Core/Datastore/Migration/Framework/SqliteSyntaxReader.cs
index 703aff012..1be82ceed 100644
--- a/src/NzbDrone.Core/Datastore/Migration/Framework/SqliteSyntaxReader.cs
+++ b/src/NzbDrone.Core/Datastore/Migration/Framework/SqliteSyntaxReader.cs
@@ -245,7 +245,7 @@ protected string ReadEscapedString(char escape)
 
         public SyntaxErrorException CreateSyntaxException(string message, params object[] args)
         {
-            return new SyntaxErrorException(string.Format("{0}. Syntax Error near: {1}", string.Format(message, args), Buffer.Substring(_previousIndex)));
+            return new SyntaxErrorException($"{string.Format(message, args)}. Syntax Error near: {Buffer.Substring(_previousIndex)}");
         }
     }
 }
diff --git a/src/NzbDrone.Core/DecisionEngine/Rejection.cs b/src/NzbDrone.Core/DecisionEngine/Rejection.cs
index 723968f9b..02c960190 100644
--- a/src/NzbDrone.Core/DecisionEngine/Rejection.cs
+++ b/src/NzbDrone.Core/DecisionEngine/Rejection.cs
@@ -13,7 +13,7 @@ public Rejection(string reason, RejectionType type = RejectionType.Permanent)
 
         public override string ToString()
         {
-            return string.Format("[{0}] {1}", Type, Reason);
+            return $"[{Type}] {Reason}";
         }
     }
 }
diff --git a/src/NzbDrone.Core/DecisionEngine/Specifications/AcceptableSizeSpecification.cs b/src/NzbDrone.Core/DecisionEngine/Specifications/AcceptableSizeSpecification.cs
index fc2015ceb..127073bd5 100644
--- a/src/NzbDrone.Core/DecisionEngine/Specifications/AcceptableSizeSpecification.cs
+++ b/src/NzbDrone.Core/DecisionEngine/Specifications/AcceptableSizeSpecification.cs
@@ -80,9 +80,7 @@ public Decision IsSatisfiedBy(RemoteEpisode subject, SearchCriteriaBase searchCr
                 {
                     Episode episode = subject.Episodes.First();
                     List<Episode> seasonEpisodes;
-
-                    var seasonSearchCriteria = searchCriteria as SeasonSearchCriteria;
-                    if (seasonSearchCriteria != null && !seasonSearchCriteria.Series.UseSceneNumbering && seasonSearchCriteria.Episodes.Any(v => v.Id == episode.Id))
+                    if (searchCriteria is SeasonSearchCriteria seasonSearchCriteria && !seasonSearchCriteria.Series.UseSceneNumbering && seasonSearchCriteria.Episodes.Any(v => v.Id == episode.Id))
                     {
                         seasonEpisodes = seasonSearchCriteria.Episodes;
                     }
@@ -93,7 +91,7 @@ public Decision IsSatisfiedBy(RemoteEpisode subject, SearchCriteriaBase searchCr
 
                     //Ensure that this is either the first episode
                     //or is the last episode in a season that has 10 or more episodes
-                    if (seasonEpisodes.First().Id == episode.Id || (seasonEpisodes.Count() >= 10 && seasonEpisodes.Last().Id == episode.Id))
+                    if (seasonEpisodes.First().Id == episode.Id || (seasonEpisodes.Count >= 10 && seasonEpisodes.Last().Id == episode.Id))
                     {
                         _logger.Debug("Possible double episode, doubling allowed size.");
                         maxSize = maxSize * 2;
diff --git a/src/NzbDrone.Core/DecisionEngine/Specifications/Search/SingleEpisodeSearchMatchSpecification.cs b/src/NzbDrone.Core/DecisionEngine/Specifications/Search/SingleEpisodeSearchMatchSpecification.cs
index 3cc0a3ea1..539706368 100644
--- a/src/NzbDrone.Core/DecisionEngine/Specifications/Search/SingleEpisodeSearchMatchSpecification.cs
+++ b/src/NzbDrone.Core/DecisionEngine/Specifications/Search/SingleEpisodeSearchMatchSpecification.cs
@@ -27,11 +27,9 @@ public Decision IsSatisfiedBy(RemoteEpisode remoteEpisode, SearchCriteriaBase se
                 return Decision.Accept();
             }
 
-            var singleEpisodeSpec = searchCriteria as SingleEpisodeSearchCriteria;
-            if (singleEpisodeSpec != null) return IsSatisfiedBy(remoteEpisode, singleEpisodeSpec);
+            if (searchCriteria is SingleEpisodeSearchCriteria singleEpisodeSpec) return IsSatisfiedBy(remoteEpisode, singleEpisodeSpec);
 
-            var animeEpisodeSpec = searchCriteria as AnimeEpisodeSearchCriteria;
-            if (animeEpisodeSpec != null) return IsSatisfiedBy(remoteEpisode, animeEpisodeSpec);
+            if (searchCriteria is AnimeEpisodeSearchCriteria animeEpisodeSpec) return IsSatisfiedBy(remoteEpisode, animeEpisodeSpec);
 
             return Decision.Accept();
         }
diff --git a/src/NzbDrone.Core/DecisionEngine/Specifications/TorrentSeedingSpecification.cs b/src/NzbDrone.Core/DecisionEngine/Specifications/TorrentSeedingSpecification.cs
index 7caabeed5..1645ddec6 100644
--- a/src/NzbDrone.Core/DecisionEngine/Specifications/TorrentSeedingSpecification.cs
+++ b/src/NzbDrone.Core/DecisionEngine/Specifications/TorrentSeedingSpecification.cs
@@ -41,9 +41,7 @@ public Decision IsSatisfiedBy(RemoteEpisode remoteEpisode, SearchCriteriaBase se
                 return Decision.Accept();
             }
 
-            var torrentIndexerSettings = indexer.Settings as ITorrentIndexerSettings;
-
-            if (torrentIndexerSettings != null)
+            if (indexer.Settings is ITorrentIndexerSettings torrentIndexerSettings)
             {
                 var minimumSeeders = torrentIndexerSettings.MinimumSeeders;
 
diff --git a/src/NzbDrone.Core/Download/Clients/Blackhole/TorrentBlackhole.cs b/src/NzbDrone.Core/Download/Clients/Blackhole/TorrentBlackhole.cs
index 1d6395751..65a19f4ac 100644
--- a/src/NzbDrone.Core/Download/Clients/Blackhole/TorrentBlackhole.cs
+++ b/src/NzbDrone.Core/Download/Clients/Blackhole/TorrentBlackhole.cs
@@ -68,7 +68,7 @@ protected override string AddFromTorrentFile(RemoteEpisode remoteEpisode, string
 
             title = FileNameBuilder.CleanFileName(title);
 
-            var filepath = Path.Combine(Settings.TorrentFolder, string.Format("{0}.torrent", title));
+            var filepath = Path.Combine(Settings.TorrentFolder, $"{title}.torrent");
 
             using (var stream = _diskProvider.OpenWriteStream(filepath))
             {
diff --git a/src/NzbDrone.Core/Download/Clients/Deluge/DelugeProxy.cs b/src/NzbDrone.Core/Download/Clients/Deluge/DelugeProxy.cs
index abd6c8ba7..88303c0d4 100644
--- a/src/NzbDrone.Core/Download/Clients/Deluge/DelugeProxy.cs
+++ b/src/NzbDrone.Core/Download/Clients/Deluge/DelugeProxy.cs
@@ -283,7 +283,7 @@ private void VerifyResponse<TResult>(JsonRpcResponse<TResult> response)
 
         private void AuthenticateClient(JsonRpcRequestBuilder requestBuilder, DelugeSettings settings, bool reauthenticate = false)
         {
-            var authKey = string.Format("{0}:{1}", requestBuilder.BaseUrl, settings.Password);
+            var authKey = $"{requestBuilder.BaseUrl}:{settings.Password}";
 
             var cookies = _authCookieCache.Find(authKey);
 
diff --git a/src/NzbDrone.Core/Download/Clients/NzbVortex/NzbVortex.cs b/src/NzbDrone.Core/Download/Clients/NzbVortex/NzbVortex.cs
index 769dc0e82..176a9242d 100644
--- a/src/NzbDrone.Core/Download/Clients/NzbVortex/NzbVortex.cs
+++ b/src/NzbDrone.Core/Download/Clients/NzbVortex/NzbVortex.cs
@@ -242,7 +242,7 @@ private OsPath GetOutputPath(NzbVortexQueueItem vortexQueueItem, DownloadClientI
 
             if (filesResponse.Count > 1)
             {
-                var message = string.Format("Download contains multiple files and is not in a job folder: {0}", outputPath);
+                var message = $"Download contains multiple files and is not in a job folder: {outputPath}";
 
                 queueItem.Status = DownloadItemStatus.Warning;
                 queueItem.Message = message;
diff --git a/src/NzbDrone.Core/Download/Clients/NzbVortex/NzbVortexProxy.cs b/src/NzbDrone.Core/Download/Clients/NzbVortex/NzbVortexProxy.cs
index 299fa7f9d..2fb927af3 100644
--- a/src/NzbDrone.Core/Download/Clients/NzbVortex/NzbVortexProxy.cs
+++ b/src/NzbDrone.Core/Download/Clients/NzbVortex/NzbVortexProxy.cs
@@ -57,7 +57,7 @@ public string DownloadNzb(byte[] nzbData, string filename, int priority, NzbVort
 
         public void Remove(int id, bool deleteData, NzbVortexSettings settings)
         {
-            var requestBuilder = BuildRequest(settings).Resource(string.Format("nzb/{0}/{1}", id, deleteData ? "cancelDelete" : "cancel"));
+            var requestBuilder = BuildRequest(settings).Resource($"nzb/{id}/{(deleteData ? "cancelDelete" : "cancel")}");
 
             ProcessRequest<NzbVortexResponseBase>(requestBuilder, true, settings);
         }
@@ -107,7 +107,7 @@ public List<NzbVortexQueueItem> GetQueue(int doneLimit, NzbVortexSettings settin
 
         public List<NzbVortexFile> GetFiles(int id, NzbVortexSettings settings)
         {
-            var requestBuilder = BuildRequest(settings).Resource(string.Format("file/{0}", id));
+            var requestBuilder = BuildRequest(settings).Resource($"file/{id}");
 
             var response = ProcessRequest<NzbVortexFilesResponse>(requestBuilder, true, settings);
 
@@ -177,7 +177,7 @@ private T ProcessRequest<T>(HttpRequestBuilder requestBuilder, bool requiresAuth
 
         private void AuthenticateClient(HttpRequestBuilder requestBuilder, NzbVortexSettings settings, bool reauthenticate = false)
         {
-            var authKey = string.Format("{0}:{1}", requestBuilder.BaseUrl, settings.ApiKey);
+            var authKey = $"{requestBuilder.BaseUrl}:{settings.ApiKey}";
 
             var sessionId = _authSessionIdCache.Find(authKey);
 
@@ -192,7 +192,7 @@ private void AuthenticateClient(HttpRequestBuilder requestBuilder, NzbVortexSett
 
                 var cnonce = Guid.NewGuid().ToString();
 
-                var hashString = string.Format("{0}:{1}:{2}", nonce, cnonce, settings.ApiKey);
+                var hashString = $"{nonce}:{cnonce}:{settings.ApiKey}";
                 var hash = Convert.ToBase64String(hashString.SHA256Hash().HexToByteArray());
 
                 var authRequest = BuildRequest(settings).Resource("auth/login")
diff --git a/src/NzbDrone.Core/Download/Clients/Nzbget/ErrorModel.cs b/src/NzbDrone.Core/Download/Clients/Nzbget/ErrorModel.cs
index 5a917c636..0f227dad2 100644
--- a/src/NzbDrone.Core/Download/Clients/Nzbget/ErrorModel.cs
+++ b/src/NzbDrone.Core/Download/Clients/Nzbget/ErrorModel.cs
@@ -8,7 +8,7 @@ public class ErrorModel
 
         public override string ToString()
         {
-            return string.Format("Name: {0}, Code: {1}, Message: {2}", Name, Code, Message);
+            return $"Name: {Name}, Code: {Code}, Message: {Message}";
         }
     }
 }
diff --git a/src/NzbDrone.Core/Download/Clients/Pneumatic/Pneumatic.cs b/src/NzbDrone.Core/Download/Clients/Pneumatic/Pneumatic.cs
index 38c6a54aa..0720d0a9c 100644
--- a/src/NzbDrone.Core/Download/Clients/Pneumatic/Pneumatic.cs
+++ b/src/NzbDrone.Core/Download/Clients/Pneumatic/Pneumatic.cs
@@ -126,7 +126,7 @@ private string WriteStrmFile(string title, string nzbFile)
                 throw new DownloadClientException("Strm Folder needs to be set for Pneumatic Downloader");
             }
 
-            var contents = string.Format("plugin://plugin.program.pneumatic/?mode=strm&type=add_file&nzb={0}&nzbname={1}", nzbFile, title);
+            var contents = $"plugin://plugin.program.pneumatic/?mode=strm&type=add_file&nzb={nzbFile}&nzbname={title}";
             var filename = Path.Combine(Settings.StrmFolder, title + ".strm");
 
             _diskProvider.WriteAllText(filename, contents);
diff --git a/src/NzbDrone.Core/Download/Clients/QBittorrent/QBittorrentProxyV1.cs b/src/NzbDrone.Core/Download/Clients/QBittorrent/QBittorrentProxyV1.cs
index 4624bdf31..8e0f78aaf 100644
--- a/src/NzbDrone.Core/Download/Clients/QBittorrent/QBittorrentProxyV1.cs
+++ b/src/NzbDrone.Core/Download/Clients/QBittorrent/QBittorrentProxyV1.cs
@@ -325,7 +325,7 @@ private void AuthenticateClient(HttpRequestBuilder requestBuilder, QBittorrentSe
                 return;
             }
 
-            var authKey = string.Format("{0}:{1}", requestBuilder.BaseUrl, settings.Password);
+            var authKey = $"{requestBuilder.BaseUrl}:{settings.Password}";
 
             var cookies = _authCookieCache.Find(authKey);
 
diff --git a/src/NzbDrone.Core/Download/Clients/QBittorrent/QBittorrentProxyV2.cs b/src/NzbDrone.Core/Download/Clients/QBittorrent/QBittorrentProxyV2.cs
index ff104cb4f..be9c30334 100644
--- a/src/NzbDrone.Core/Download/Clients/QBittorrent/QBittorrentProxyV2.cs
+++ b/src/NzbDrone.Core/Download/Clients/QBittorrent/QBittorrentProxyV2.cs
@@ -347,7 +347,7 @@ private void AuthenticateClient(HttpRequestBuilder requestBuilder, QBittorrentSe
                 return;
             }
 
-            var authKey = string.Format("{0}:{1}", requestBuilder.BaseUrl, settings.Password);
+            var authKey = $"{requestBuilder.BaseUrl}:{settings.Password}";
 
             var cookies = _authCookieCache.Find(authKey);
 
diff --git a/src/NzbDrone.Core/Download/Clients/Transmission/TransmissionBase.cs b/src/NzbDrone.Core/Download/Clients/Transmission/TransmissionBase.cs
index 945276457..400a12656 100644
--- a/src/NzbDrone.Core/Download/Clients/Transmission/TransmissionBase.cs
+++ b/src/NzbDrone.Core/Download/Clients/Transmission/TransmissionBase.cs
@@ -160,7 +160,7 @@ public override DownloadClientInfo GetStatus()
 
             if (Settings.TvCategory.IsNotNullOrWhiteSpace())
             {
-                destDir = string.Format("{0}/.{1}", destDir, Settings.TvCategory);
+                destDir = $"{destDir}/.{Settings.TvCategory}";
             }
 
             return new DownloadClientInfo
diff --git a/src/NzbDrone.Core/Download/Clients/Transmission/TransmissionProxy.cs b/src/NzbDrone.Core/Download/Clients/Transmission/TransmissionProxy.cs
index 2d3aaa03a..ac6b2b331 100644
--- a/src/NzbDrone.Core/Download/Clients/Transmission/TransmissionProxy.cs
+++ b/src/NzbDrone.Core/Download/Clients/Transmission/TransmissionProxy.cs
@@ -205,7 +205,7 @@ private HttpRequestBuilder BuildRequest(TransmissionSettings settings)
 
         private void AuthenticateClient(HttpRequestBuilder requestBuilder, TransmissionSettings settings, bool reauthenticate = false)
         {
-            var authKey = string.Format("{0}:{1}", requestBuilder.BaseUrl, settings.Password);
+            var authKey = $"{requestBuilder.BaseUrl}:{settings.Password}";
 
             var sessionId = _authSessionIDCache.Find(authKey);
 
@@ -266,7 +266,7 @@ public TransmissionResponse ProcessRequest(string action, object arguments, Tran
                 }
 
                 request.SetContent(data.ToJson());
-                request.ContentSummary = string.Format("{0}(...)", action);
+                request.ContentSummary = $"{action}(...)";
 
                 var response = _httpClient.Execute(request);
 
@@ -277,7 +277,7 @@ public TransmissionResponse ProcessRequest(string action, object arguments, Tran
                     request = requestBuilder.Post().Build();
 
                     request.SetContent(data.ToJson());
-                    request.ContentSummary = string.Format("{0}(...)", action);
+                    request.ContentSummary = $"{action}(...)";
 
                     response = _httpClient.Execute(request);
                 }
diff --git a/src/NzbDrone.Core/Download/Clients/uTorrent/UTorrent.cs b/src/NzbDrone.Core/Download/Clients/uTorrent/UTorrent.cs
index 429cec5dd..3b5cc26a8 100644
--- a/src/NzbDrone.Core/Download/Clients/uTorrent/UTorrent.cs
+++ b/src/NzbDrone.Core/Download/Clients/uTorrent/UTorrent.cs
@@ -176,7 +176,7 @@ private List<UTorrentTorrent> GetTorrents()
         {
             List<UTorrentTorrent> torrents;
 
-            var cacheKey = string.Format("{0}:{1}:{2}", Settings.Host, Settings.Port, Settings.TvCategory);
+            var cacheKey = $"{Settings.Host}:{Settings.Port}:{Settings.TvCategory}";
             var cache = _torrentCache.Find(cacheKey);
 
             var response = _proxy.GetTorrents(cache == null ? null : cache.CacheID, Settings);
diff --git a/src/NzbDrone.Core/Download/Clients/uTorrent/UTorrentProxy.cs b/src/NzbDrone.Core/Download/Clients/uTorrent/UTorrentProxy.cs
index 1f524028a..74277432a 100644
--- a/src/NzbDrone.Core/Download/Clients/uTorrent/UTorrentProxy.cs
+++ b/src/NzbDrone.Core/Download/Clients/uTorrent/UTorrentProxy.cs
@@ -241,7 +241,7 @@ public UTorrentResponse ProcessRequest(HttpRequestBuilder requestBuilder, UTorre
 
         private void AuthenticateClient(HttpRequestBuilder requestBuilder, UTorrentSettings settings, bool reauthenticate = false)
         {
-            var authKey = string.Format("{0}:{1}", requestBuilder.BaseUrl, settings.Password);
+            var authKey = $"{requestBuilder.BaseUrl}:{settings.Password}";
 
             var cookies = _authCookieCache.Find(authKey);
             var authToken = _authTokenCache.Find(authKey);
diff --git a/src/NzbDrone.Core/Download/DownloadClientBase.cs b/src/NzbDrone.Core/Download/DownloadClientBase.cs
index 3746b4698..61d3e9c7e 100644
--- a/src/NzbDrone.Core/Download/DownloadClientBase.cs
+++ b/src/NzbDrone.Core/Download/DownloadClientBase.cs
@@ -109,7 +109,7 @@ protected virtual void DeleteItemData(string downloadId)
             }
             catch (Exception ex)
             {
-                _logger.Warn(ex, string.Format("[{0}] Error occurred while trying to delete data from '{1}'.", item.Title, item.OutputPath));
+                _logger.Warn(ex, $"[{item.Title}] Error occurred while trying to delete data from '{item.OutputPath}'.");
             }
         }
 
@@ -138,7 +138,7 @@ protected ValidationFailure TestFolder(string folder, string propertyName, bool
             {
                 return new NzbDroneValidationFailure(propertyName, "Folder does not exist")
                 {
-                    DetailedDescription = string.Format("The folder you specified does not exist or is inaccessible. Please verify the folder permissions for the user account '{0}', which is used to execute Sonarr.", Environment.UserName)
+                    DetailedDescription = $"The folder you specified does not exist or is inaccessible. Please verify the folder permissions for the user account '{Environment.UserName}', which is used to execute Sonarr."
                 };
             }
 
@@ -147,7 +147,7 @@ protected ValidationFailure TestFolder(string folder, string propertyName, bool
                 _logger.Error("Folder '{0}' is not writable.", folder);
                 return new NzbDroneValidationFailure(propertyName, "Unable to write to folder")
                 {
-                    DetailedDescription = string.Format("The folder you specified is not writable. Please verify the folder permissions for the user account '{0}', which is used to execute Sonarr.", Environment.UserName)
+                    DetailedDescription = $"The folder you specified is not writable. Please verify the folder permissions for the user account '{Environment.UserName}', which is used to execute Sonarr."
                 };
             }
 
diff --git a/src/NzbDrone.Core/Download/DownloadService.cs b/src/NzbDrone.Core/Download/DownloadService.cs
index 5f677f13e..8c9db6596 100644
--- a/src/NzbDrone.Core/Download/DownloadService.cs
+++ b/src/NzbDrone.Core/Download/DownloadService.cs
@@ -88,8 +88,7 @@ public void DownloadReport(RemoteEpisode remoteEpisode)
             }
             catch (ReleaseDownloadException ex)
             {
-                var http429 = ex.InnerException as TooManyRequestsException;
-                if (http429 != null)
+                if (ex.InnerException is TooManyRequestsException http429)
                 {
                     _indexerStatusService.RecordFailure(remoteEpisode.Release.IndexerId, http429.RetryAfter);
                 }
diff --git a/src/NzbDrone.Core/Download/Pending/PendingReleaseService.cs b/src/NzbDrone.Core/Download/Pending/PendingReleaseService.cs
index d0ca1be47..15816ea03 100644
--- a/src/NzbDrone.Core/Download/Pending/PendingReleaseService.cs
+++ b/src/NzbDrone.Core/Download/Pending/PendingReleaseService.cs
@@ -109,9 +109,9 @@ public void AddMany(List<Tuple<DownloadDecision, PendingReleaseReason>> decision
                             _logger.Debug("The release {0} is already pending with reason {1}, not adding again", decision.RemoteEpisode, reason);
                         }
 
-                        if (matchingReports.Count() > 1)
+                        if (matchingReports.Count > 1)
                         {
-                            _logger.Debug("The release {0} had {1} duplicate pending, removing duplicates.", decision.RemoteEpisode, matchingReports.Count() - 1);
+                            _logger.Debug("The release {0} had {1} duplicate pending, removing duplicates.", decision.RemoteEpisode, matchingReports.Count - 1);
 
                             foreach (var duplicate in matchingReports.Skip(1))
                             {
@@ -417,7 +417,7 @@ private PendingRelease FindPendingRelease(int queueId)
 
         private int GetQueueId(PendingRelease pendingRelease, Episode episode)
         {
-            return HashConverter.GetHashInt31(string.Format("pending-{0}-ep{1}", pendingRelease.Id, episode.Id));
+            return HashConverter.GetHashInt31($"pending-{pendingRelease.Id}-ep{episode.Id}");
         }
 
         private int PrioritizeDownloadProtocol(Series series, DownloadProtocol downloadProtocol)
diff --git a/src/NzbDrone.Core/Download/TorrentClientBase.cs b/src/NzbDrone.Core/Download/TorrentClientBase.cs
index 72b47a2db..4b950d1ec 100644
--- a/src/NzbDrone.Core/Download/TorrentClientBase.cs
+++ b/src/NzbDrone.Core/Download/TorrentClientBase.cs
@@ -43,7 +43,6 @@ public abstract class TorrentClientBase<TSettings> : DownloadClientBase<TSetting
 
         public override string Download(RemoteEpisode remoteEpisode)
         {
-            var torrentInfo = remoteEpisode.Release as TorrentInfo;
 
             string magnetUrl = null;
             string torrentUrl = null;
@@ -57,7 +56,7 @@ public override string Download(RemoteEpisode remoteEpisode)
                 torrentUrl = remoteEpisode.Release.DownloadUrl;
             }
 
-            if (torrentInfo != null && !torrentInfo.MagnetUrl.IsNullOrWhiteSpace())
+            if (remoteEpisode.Release is TorrentInfo torrentInfo && !torrentInfo.MagnetUrl.IsNullOrWhiteSpace())
             {
                 magnetUrl = torrentInfo.MagnetUrl;
             }
@@ -185,7 +184,7 @@ private string DownloadFromWebUrl(RemoteEpisode remoteEpisode, string torrentUrl
                 throw new ReleaseDownloadException(remoteEpisode.Release, "Downloading torrent failed", ex);
             }
 
-            var filename = string.Format("{0}.torrent", FileNameBuilder.CleanFileName(remoteEpisode.Release.Title));
+            var filename = $"{FileNameBuilder.CleanFileName(remoteEpisode.Release.Title)}.torrent";
             var hash = _torrentFileInfoReader.GetHashFromTorrentFile(torrentFile);
             var actualHash = AddFromTorrentFile(remoteEpisode, hash, filename, torrentFile);
 
diff --git a/src/NzbDrone.Core/Exceptions/SeriesNotFoundException.cs b/src/NzbDrone.Core/Exceptions/SeriesNotFoundException.cs
index b329bde8d..560c243b0 100644
--- a/src/NzbDrone.Core/Exceptions/SeriesNotFoundException.cs
+++ b/src/NzbDrone.Core/Exceptions/SeriesNotFoundException.cs
@@ -7,7 +7,7 @@ public class SeriesNotFoundException : NzbDroneException
         public int TvdbSeriesId { get; set; }
 
         public SeriesNotFoundException(int tvdbSeriesId)
-            : base(string.Format("Series with tvdbid {0} was not found, it may have been removed from TheTVDB.", tvdbSeriesId))
+            : base($"Series with tvdbid {tvdbSeriesId} was not found, it may have been removed from TheTVDB.")
         {
             TvdbSeriesId = tvdbSeriesId;
         }
diff --git a/src/NzbDrone.Core/Extras/Metadata/Consumers/Roksbox/RoksboxMetadata.cs b/src/NzbDrone.Core/Extras/Metadata/Consumers/Roksbox/RoksboxMetadata.cs
index 36e9e9b0d..0a500a064 100644
--- a/src/NzbDrone.Core/Extras/Metadata/Consumers/Roksbox/RoksboxMetadata.cs
+++ b/src/NzbDrone.Core/Extras/Metadata/Consumers/Roksbox/RoksboxMetadata.cs
@@ -148,7 +148,7 @@ public override MetadataFileResult EpisodeMetadata(Series series, EpisodeFile ep
                     var doc = new XDocument();
 
                     var details = new XElement("video");
-                    details.Add(new XElement("title", string.Format("{0} - {1}x{2} - {3}", series.Title, episode.SeasonNumber, episode.EpisodeNumber, episode.Title)));
+                    details.Add(new XElement("title", $"{series.Title} - {episode.SeasonNumber}x{episode.EpisodeNumber} - {episode.Title}"));
                     details.Add(new XElement("year", episode.AirDate));
                     details.Add(new XElement("genre", string.Join(" / ", series.Genres)));
                     var actors = string.Join(" , ", series.Actors.ConvertAll(c => c.Name + " - " + c.Character).GetRange(0, Math.Min(3, series.Actors.Count)));
diff --git a/src/NzbDrone.Core/Extras/Metadata/Consumers/Wdtv/WdtvMetadata.cs b/src/NzbDrone.Core/Extras/Metadata/Consumers/Wdtv/WdtvMetadata.cs
index d1846c963..df4d8127b 100644
--- a/src/NzbDrone.Core/Extras/Metadata/Consumers/Wdtv/WdtvMetadata.cs
+++ b/src/NzbDrone.Core/Extras/Metadata/Consumers/Wdtv/WdtvMetadata.cs
@@ -142,7 +142,7 @@ public override MetadataFileResult EpisodeMetadata(Series series, EpisodeFile ep
 
                     var details = new XElement("details");
                     details.Add(new XElement("id", series.Id));
-                    details.Add(new XElement("title", string.Format("{0} - {1}x{2:00} - {3}", series.Title, episode.SeasonNumber, episode.EpisodeNumber, episode.Title)));
+                    details.Add(new XElement("title", $"{series.Title} - {episode.SeasonNumber}x{episode.EpisodeNumber:00} - {episode.Title}"));
                     details.Add(new XElement("series_name", series.Title));
                     details.Add(new XElement("episode_name", episode.Title));
                     details.Add(new XElement("season_number", episode.SeasonNumber.ToString("00")));
diff --git a/src/NzbDrone.Core/Extras/Metadata/Consumers/Xbmc/XbmcMetadata.cs b/src/NzbDrone.Core/Extras/Metadata/Consumers/Xbmc/XbmcMetadata.cs
index 0422289c4..96cb98de3 100644
--- a/src/NzbDrone.Core/Extras/Metadata/Consumers/Xbmc/XbmcMetadata.cs
+++ b/src/NzbDrone.Core/Extras/Metadata/Consumers/Xbmc/XbmcMetadata.cs
@@ -148,7 +148,7 @@ public override MetadataFileResult SeriesMetadata(Series series)
             xws.OmitXmlDeclaration = true;
             xws.Indent = false;
 
-            var episodeGuideUrl = string.Format("http://www.thetvdb.com/api/1D62F2F90030C444/series/{0}/all/en.zip", series.TvdbId);
+            var episodeGuideUrl = $"http://www.thetvdb.com/api/1D62F2F90030C444/series/{series.TvdbId}/all/en.zip";
 
             using (var xw = XmlWriter.Create(sb, xws))
             {
@@ -410,11 +410,11 @@ private IEnumerable<ImageFileResult> ProcessSeasonImages(Series series, Season s
         {
             foreach (var image in season.Images)
             {
-                var filename = string.Format("season{0:00}-{1}.jpg", season.SeasonNumber, image.CoverType.ToString().ToLower());
+                var filename = $"season{season.SeasonNumber:00}-{image.CoverType.ToString().ToLower()}.jpg";
 
                 if (season.SeasonNumber == 0)
                 {
-                    filename = string.Format("season-specials-{0}.jpg", image.CoverType.ToString().ToLower());
+                    filename = $"season-specials-{image.CoverType.ToString().ToLower()}.jpg";
                 }
 
                 yield return new ImageFileResult(filename, image.Url);
diff --git a/src/NzbDrone.Core/HealthCheck/Checks/DownloadClientStatusCheck.cs b/src/NzbDrone.Core/HealthCheck/Checks/DownloadClientStatusCheck.cs
index 95fac5ef3..cb7149947 100644
--- a/src/NzbDrone.Core/HealthCheck/Checks/DownloadClientStatusCheck.cs
+++ b/src/NzbDrone.Core/HealthCheck/Checks/DownloadClientStatusCheck.cs
@@ -39,7 +39,7 @@ public override HealthCheck Check()
                 return new HealthCheck(GetType(), HealthCheckResult.Error, "All download clients are unavailable due to failures", "#download_clients_are_unavailable_due_to_failures");
             }
 
-            return new HealthCheck(GetType(), HealthCheckResult.Warning, string.Format("Download clients unavailable due to failures: {0}", string.Join(", ", backOffProviders.Select(v => v.Provider.Definition.Name))), "#download_clients_are_unavailable_due_to_failures");
+            return new HealthCheck(GetType(), HealthCheckResult.Warning, $"Download clients unavailable due to failures: {string.Join(", ", backOffProviders.Select(v => v.Provider.Definition.Name))}", "#download_clients_are_unavailable_due_to_failures");
         }
     }
 }
diff --git a/src/NzbDrone.Core/HealthCheck/Checks/ImportListRootFolderCheck.cs b/src/NzbDrone.Core/HealthCheck/Checks/ImportListRootFolderCheck.cs
index 2f7e81663..791c77da0 100644
--- a/src/NzbDrone.Core/HealthCheck/Checks/ImportListRootFolderCheck.cs
+++ b/src/NzbDrone.Core/HealthCheck/Checks/ImportListRootFolderCheck.cs
@@ -54,7 +54,7 @@ public override HealthCheck Check()
                     return new HealthCheck(GetType(), HealthCheckResult.Error, $"Missing root folder for import list(s): {FormatRootFolder(missingRootFolder.Key, missingRootFolder.Value)}", "#import_list_missing_root_folder");
                 }
 
-                var message = string.Format("Multiple root folders are missing for import lists: {0}", string.Join(" | ", missingRootFolders.Select(m => FormatRootFolder(m.Key, m.Value))));
+                var message = $"Multiple root folders are missing for import lists: {string.Join(" | ", missingRootFolders.Select(m => FormatRootFolder(m.Key, m.Value)))}";
                 return new HealthCheck(GetType(), HealthCheckResult.Error, message, "#import_list_missing_root_folder");
             }
 
diff --git a/src/NzbDrone.Core/HealthCheck/Checks/ImportListStatusCheck.cs b/src/NzbDrone.Core/HealthCheck/Checks/ImportListStatusCheck.cs
index 468d538bf..4e2baa8bf 100644
--- a/src/NzbDrone.Core/HealthCheck/Checks/ImportListStatusCheck.cs
+++ b/src/NzbDrone.Core/HealthCheck/Checks/ImportListStatusCheck.cs
@@ -38,7 +38,7 @@ public override HealthCheck Check()
                 return new HealthCheck(GetType(), HealthCheckResult.Error, "All import lists are unavailable due to failures", "#import_lists_are_unavailable_due_to_failures");
             }
 
-            return new HealthCheck(GetType(), HealthCheckResult.Warning, string.Format("Import lists unavailable due to failures: {0}", string.Join(", ", backOffProviders.Select(v => v.ImportList.Definition.Name))), "#import_lists_are_unavailable_due_to_failures");
+            return new HealthCheck(GetType(), HealthCheckResult.Warning, $"Import lists unavailable due to failures: {string.Join(", ", backOffProviders.Select(v => v.ImportList.Definition.Name))}", "#import_lists_are_unavailable_due_to_failures");
         }
     }
 }
\ No newline at end of file
diff --git a/src/NzbDrone.Core/HealthCheck/Checks/IndexerLongTermStatusCheck.cs b/src/NzbDrone.Core/HealthCheck/Checks/IndexerLongTermStatusCheck.cs
index 0402be33c..b6490a385 100644
--- a/src/NzbDrone.Core/HealthCheck/Checks/IndexerLongTermStatusCheck.cs
+++ b/src/NzbDrone.Core/HealthCheck/Checks/IndexerLongTermStatusCheck.cs
@@ -44,8 +44,7 @@ public override HealthCheck Check()
             }
 
             return new HealthCheck(GetType(), HealthCheckResult.Warning,
-                string.Format("Indexers unavailable due to failures for more than 6 hours: {0}",
-                    string.Join(", ", backOffProviders.Select(v => v.Provider.Definition.Name))),
+                $"Indexers unavailable due to failures for more than 6 hours: {string.Join(", ", backOffProviders.Select(v => v.Provider.Definition.Name))}",
                 "#indexers_are_unavailable_due_to_failures");
         }
     }
diff --git a/src/NzbDrone.Core/HealthCheck/Checks/IndexerStatusCheck.cs b/src/NzbDrone.Core/HealthCheck/Checks/IndexerStatusCheck.cs
index 96d4fe307..3ba5194ef 100644
--- a/src/NzbDrone.Core/HealthCheck/Checks/IndexerStatusCheck.cs
+++ b/src/NzbDrone.Core/HealthCheck/Checks/IndexerStatusCheck.cs
@@ -42,7 +42,7 @@ public override HealthCheck Check()
                 return new HealthCheck(GetType(), HealthCheckResult.Error, "All indexers are unavailable due to failures", "#indexers_are_unavailable_due_to_failures");
             }
 
-            return new HealthCheck(GetType(), HealthCheckResult.Warning, string.Format("Indexers unavailable due to failures: {0}", string.Join(", ", backOffProviders.Select(v => v.Provider.Definition.Name))), "#indexers_are_unavailable_due_to_failures");
+            return new HealthCheck(GetType(), HealthCheckResult.Warning, $"Indexers unavailable due to failures: {string.Join(", ", backOffProviders.Select(v => v.Provider.Definition.Name))}", "#indexers_are_unavailable_due_to_failures");
         }
     }
 }
diff --git a/src/NzbDrone.Core/HealthCheck/Checks/MountCheck.cs b/src/NzbDrone.Core/HealthCheck/Checks/MountCheck.cs
index c3bd46b23..6b25311b1 100644
--- a/src/NzbDrone.Core/HealthCheck/Checks/MountCheck.cs
+++ b/src/NzbDrone.Core/HealthCheck/Checks/MountCheck.cs
@@ -21,7 +21,7 @@ public override HealthCheck Check()
             // Not best for optimization but due to possible symlinks and junctions, we get mounts based on series path so internals can handle mount resolution.
             var mounts = _seriesService.GetAllSeriesPaths()
                                        .Select(s => _diskProvider.GetMount(s))
-                                       .Where(m => m != null && m.MountOptions != null && m.MountOptions.IsReadOnly)
+                                       .Where(m => m?.MountOptions != null && m.MountOptions.IsReadOnly)
                                        .DistinctBy(m => m.RootDirectory)
                                        .ToList();
 
diff --git a/src/NzbDrone.Core/HealthCheck/Checks/ProxyCheck.cs b/src/NzbDrone.Core/HealthCheck/Checks/ProxyCheck.cs
index ea742bc6c..370da9235 100644
--- a/src/NzbDrone.Core/HealthCheck/Checks/ProxyCheck.cs
+++ b/src/NzbDrone.Core/HealthCheck/Checks/ProxyCheck.cs
@@ -34,7 +34,7 @@ public override HealthCheck Check()
                 var addresses = Dns.GetHostAddresses(_configService.ProxyHostname);
                 if (!addresses.Any())
                 {
-                    return new HealthCheck(GetType(), HealthCheckResult.Error, string.Format("Failed to resolve the IP Address for the Configured Proxy Host {0}", _configService.ProxyHostname));
+                    return new HealthCheck(GetType(), HealthCheckResult.Error, $"Failed to resolve the IP Address for the Configured Proxy Host {_configService.ProxyHostname}");
                 }
 
                 var request = _cloudRequestBuilder.Create()
diff --git a/src/NzbDrone.Core/HealthCheck/Checks/RemovedSeriesCheck.cs b/src/NzbDrone.Core/HealthCheck/Checks/RemovedSeriesCheck.cs
index 67a0ba3f3..26323b49f 100644
--- a/src/NzbDrone.Core/HealthCheck/Checks/RemovedSeriesCheck.cs
+++ b/src/NzbDrone.Core/HealthCheck/Checks/RemovedSeriesCheck.cs
@@ -31,7 +31,7 @@ public override HealthCheck Check()
 
             var seriesText = deletedSeries.Select(s => $"{s.Title} (tvdbid {s.TvdbId})").Join(", ");
             
-            if (deletedSeries.Count() == 1)
+            if (deletedSeries.Count == 1)
             {
                 return new HealthCheck(GetType(), HealthCheckResult.Error, $"Series {seriesText} was removed from TheTVDB", "#series_removed_from_thetvdb");
             }
diff --git a/src/NzbDrone.Core/HealthCheck/Checks/RootFolderCheck.cs b/src/NzbDrone.Core/HealthCheck/Checks/RootFolderCheck.cs
index 89128a7c9..3d4d79215 100644
--- a/src/NzbDrone.Core/HealthCheck/Checks/RootFolderCheck.cs
+++ b/src/NzbDrone.Core/HealthCheck/Checks/RootFolderCheck.cs
@@ -40,7 +40,7 @@ public override HealthCheck Check()
                     return new HealthCheck(GetType(), HealthCheckResult.Error, "Missing root folder: " + missingRootFolders.First(), "#missing_root_folder");
                 }
 
-                var message = string.Format("Multiple root folders are missing: {0}", string.Join(" | ", missingRootFolders));
+                var message = $"Multiple root folders are missing: {string.Join(" | ", missingRootFolders)}";
                 return new HealthCheck(GetType(), HealthCheckResult.Error, message, "#missing_root_folder");
             }
 
diff --git a/src/NzbDrone.Core/HealthCheck/Checks/UpdateCheck.cs b/src/NzbDrone.Core/HealthCheck/Checks/UpdateCheck.cs
index 2d108ca00..432da214c 100644
--- a/src/NzbDrone.Core/HealthCheck/Checks/UpdateCheck.cs
+++ b/src/NzbDrone.Core/HealthCheck/Checks/UpdateCheck.cs
@@ -39,21 +39,21 @@ public override HealthCheck Check()
                 if (OsInfo.IsOsx && startupFolder.GetAncestorFolders().Contains("AppTranslocation"))
                 {
                     return new HealthCheck(GetType(), HealthCheckResult.Error,
-                        string.Format("Cannot install update because startup folder '{0}' is in an App Translocation folder.", startupFolder),
+                        $"Cannot install update because startup folder '{startupFolder}' is in an App Translocation folder.",
                         "#cannot_install_update_because_startup_folder_is_in_an_App_Translocation_folder");
                 }
 
                 if (!_diskProvider.FolderWritable(startupFolder))
                 {
                     return new HealthCheck(GetType(), HealthCheckResult.Error,
-                        string.Format("Cannot install update because startup folder '{0}' is not writable by the user '{1}'.", startupFolder, Environment.UserName),
+                        $"Cannot install update because startup folder '{startupFolder}' is not writable by the user '{Environment.UserName}'.",
                         "#cannot_install_update_because_startup_folder_is_not_writable_by_the_user");
                 }
 
                 if (!_diskProvider.FolderWritable(uiFolder))
                 {
                     return new HealthCheck(GetType(), HealthCheckResult.Error,
-                        string.Format("Cannot install update because UI folder '{0}' is not writable by the user '{1}'.", uiFolder, Environment.UserName),
+                        $"Cannot install update because UI folder '{uiFolder}' is not writable by the user '{Environment.UserName}'.",
                         "#cannot_install_update_because_UI_folder_is_not_writable_by_the_user");
                 }
             }
diff --git a/src/NzbDrone.Core/History/HistoryService.cs b/src/NzbDrone.Core/History/HistoryService.cs
index 274256974..a1c876d4b 100644
--- a/src/NzbDrone.Core/History/HistoryService.cs
+++ b/src/NzbDrone.Core/History/HistoryService.cs
@@ -175,9 +175,7 @@ public void Handle(EpisodeGrabbedEvent message)
                     history.Data.Add("ReleaseHash", message.Episode.ParsedEpisodeInfo.ReleaseHash);
                 }
 
-                var torrentRelease = message.Episode.Release as TorrentInfo;
-
-                if (torrentRelease != null)
+                if (message.Episode.Release is TorrentInfo torrentRelease)
                 {
                     history.Data.Add("TorrentInfoHash", torrentRelease.InfoHash);
                 }
diff --git a/src/NzbDrone.Core/ImportLists/ImportListSyncService.cs b/src/NzbDrone.Core/ImportLists/ImportListSyncService.cs
index 5db20193c..14cfe3777 100644
--- a/src/NzbDrone.Core/ImportLists/ImportListSyncService.cs
+++ b/src/NzbDrone.Core/ImportLists/ImportListSyncService.cs
@@ -53,7 +53,7 @@ private void SyncAll()
 
         private void SyncList(ImportListDefinition definition)
         {
-            _logger.ProgressInfo(string.Format("Starting Import List Refresh for List {0}", definition.Name));
+            _logger.ProgressInfo($"Starting Import List Refresh for List {definition.Name}");
 
             var rssReleases = _listFetcherAndParser.FetchSingleList(definition);
 
@@ -105,7 +105,7 @@ private void ProcessReports(List<ImportListItemInfo> reports)
                 }
 
                 // Check to see if series excluded
-                var excludedSeries = listExclusions.Where(s => s.TvdbId == report.TvdbId).SingleOrDefault();
+                var excludedSeries = listExclusions.SingleOrDefault(s => s.TvdbId == report.TvdbId);
 
                 if (excludedSeries != null)
                 {
@@ -139,7 +139,7 @@ private void ProcessReports(List<ImportListItemInfo> reports)
 
             _addSeriesService.AddSeries(seriesToAdd, true);
 
-            var message = string.Format("Import List Sync Completed. Items found: {0}, Series added: {1}", reports.Count, seriesToAdd.Count);
+            var message = $"Import List Sync Completed. Items found: {reports.Count}, Series added: {seriesToAdd.Count}";
 
             _logger.ProgressInfo(message);
         }
diff --git a/src/NzbDrone.Core/ImportLists/Trakt/TraktImportBase.cs b/src/NzbDrone.Core/ImportLists/Trakt/TraktImportBase.cs
index 3ae3f6593..0b68a5085 100644
--- a/src/NzbDrone.Core/ImportLists/Trakt/TraktImportBase.cs
+++ b/src/NzbDrone.Core/ImportLists/Trakt/TraktImportBase.cs
@@ -85,7 +85,7 @@ public override object RequestAction(string action, IDictionary<string, string>
 
         private string GetUserName(string accessToken)
         {
-            var request = new HttpRequestBuilder(string.Format("{0}/users/settings", Settings.BaseUrl))
+            var request = new HttpRequestBuilder($"{Settings.BaseUrl}/users/settings")
                 .Build();
 
             request.Headers.Add("trakt-api-version", "2");
@@ -100,7 +100,7 @@ private string GetUserName(string accessToken)
             {
                 var response = _httpClient.Get<UserSettingsResponse>(request);
 
-                if (response != null && response.Resource != null)
+                if (response?.Resource != null)
                 {
                     return response.Resource.User.Ids.Slug;
                 }
@@ -127,7 +127,7 @@ private void RefreshToken()
             {
                 var response = _httpClient.Get<RefreshRequestResponse>(request);
 
-                if (response != null && response.Resource != null)
+                if (response?.Resource != null)
                 {
                     var token = response.Resource;
                     Settings.AccessToken = token.AccessToken;
diff --git a/src/NzbDrone.Core/IndexerSearch/Definitions/DailySeasonSearchCriteria.cs b/src/NzbDrone.Core/IndexerSearch/Definitions/DailySeasonSearchCriteria.cs
index 503e3ca6b..2e0b6c465 100644
--- a/src/NzbDrone.Core/IndexerSearch/Definitions/DailySeasonSearchCriteria.cs
+++ b/src/NzbDrone.Core/IndexerSearch/Definitions/DailySeasonSearchCriteria.cs
@@ -8,7 +8,7 @@ public class DailySeasonSearchCriteria : SearchCriteriaBase
 
         public override string ToString()
         {
-            return string.Format("[{0} : {1}]", Series.Title, Year);
+            return $"[{Series.Title} : {Year}]";
         }
     }
 }
diff --git a/src/NzbDrone.Core/IndexerSearch/Definitions/SpecialEpisodeSearchCriteria.cs b/src/NzbDrone.Core/IndexerSearch/Definitions/SpecialEpisodeSearchCriteria.cs
index 2b5c0bc0c..ebda68e0e 100644
--- a/src/NzbDrone.Core/IndexerSearch/Definitions/SpecialEpisodeSearchCriteria.cs
+++ b/src/NzbDrone.Core/IndexerSearch/Definitions/SpecialEpisodeSearchCriteria.cs
@@ -12,10 +12,10 @@ public override string ToString()
 
             if (episodeTitles.Count > 0)
             {
-                return string.Format("[{0}] Specials", Series.Title);
+                return $"[{Series.Title}] Specials";
             }
 
-            return string.Format("[{0} : {1}]", Series.Title, string.Join(",", EpisodeQueryTitles));
+            return $"[{Series.Title} : {string.Join(",", EpisodeQueryTitles)}]";
         }
     }
 }
diff --git a/src/NzbDrone.Core/Indexers/BroadcastheNet/BroadcastheNetParser.cs b/src/NzbDrone.Core/Indexers/BroadcastheNet/BroadcastheNetParser.cs
index 6cecc3b86..ef6577b01 100644
--- a/src/NzbDrone.Core/Indexers/BroadcastheNet/BroadcastheNetParser.cs
+++ b/src/NzbDrone.Core/Indexers/BroadcastheNet/BroadcastheNetParser.cs
@@ -61,11 +61,11 @@ public IList<ReleaseInfo> ParseResponse(IndexerResponse indexerResponse)
             {
                 var torrentInfo = new TorrentInfo();
 
-                torrentInfo.Guid = string.Format("BTN-{0}", torrent.TorrentID);
+                torrentInfo.Guid = $"BTN-{torrent.TorrentID}";
                 torrentInfo.Title = CleanReleaseName(torrent.ReleaseName);
                 torrentInfo.Size = torrent.Size;
                 torrentInfo.DownloadUrl = RegexProtocol.Replace(torrent.DownloadURL, protocol);
-                torrentInfo.InfoUrl = string.Format("{0}//broadcasthe.net/torrents.php?id={1}&torrentid={2}", protocol, torrent.GroupID, torrent.TorrentID);
+                torrentInfo.InfoUrl = $"{protocol}//broadcasthe.net/torrents.php?id={torrent.GroupID}&torrentid={torrent.TorrentID}";
                 //torrentInfo.CommentUrl =
                 if (torrent.TvdbID.HasValue)
                 {
diff --git a/src/NzbDrone.Core/Indexers/BroadcastheNet/BroadcastheNetRequestGenerator.cs b/src/NzbDrone.Core/Indexers/BroadcastheNet/BroadcastheNetRequestGenerator.cs
index 438f86f62..a9102ca4c 100644
--- a/src/NzbDrone.Core/Indexers/BroadcastheNet/BroadcastheNetRequestGenerator.cs
+++ b/src/NzbDrone.Core/Indexers/BroadcastheNet/BroadcastheNetRequestGenerator.cs
@@ -70,14 +70,14 @@ public virtual IndexerPageableRequestChain GetSearchRequests(SeasonSearchCriteri
                 foreach (var seasonNumber in searchCriteria.Episodes.Select(v => v.SeasonNumber).Distinct())
                 {
                     parameters.Category = "Season";
-                    parameters.Name = string.Format("Season {0}%", seasonNumber);
+                    parameters.Name = $"Season {seasonNumber}%";
 
                     pageableRequests.Add(GetPagedRequests(MaxPages, parameters));
 
                     parameters = parameters.Clone();
 
                     parameters.Category = "Episode";
-                    parameters.Name = string.Format("S{0:00}E%", seasonNumber);
+                    parameters.Name = $"S{seasonNumber:00}E%";
 
                     pageableRequests.Add(GetPagedRequests(MaxPages, parameters));
                 }
@@ -122,7 +122,7 @@ public virtual IndexerPageableRequestChain GetSearchRequests(DailySeasonSearchCr
             if (AddSeriesSearchParameters(parameters, searchCriteria))
             {
                 parameters.Category = "Episode";
-                parameters.Name = string.Format("{0}%", searchCriteria.Year);
+                parameters.Name = $"{searchCriteria.Year}%";
 
                 pageableRequests.Add(GetPagedRequests(MaxPages, parameters));
 
@@ -164,7 +164,7 @@ public virtual IndexerPageableRequestChain GetSearchRequests(AnimeEpisodeSearchC
                     parameters = parameters.Clone();
 
                     parameters.Category = "Season";
-                    parameters.Name = string.Format("Season {0}%", seasonNumber);
+                    parameters.Name = $"Season {seasonNumber}%";
 
                     pageableRequests.Add(GetPagedRequests(MaxPages, parameters));
                 }
@@ -203,12 +203,12 @@ private bool AddSeriesSearchParameters(BroadcastheNetTorrentQuery parameters, Se
         {
             if (searchCriteria.Series.TvdbId != 0)
             {
-                parameters.Tvdb = string.Format("{0}", searchCriteria.Series.TvdbId);
+                parameters.Tvdb = $"{searchCriteria.Series.TvdbId}";
                 return true;
             }
             if (searchCriteria.Series.TvRageId != 0)
             {
-                parameters.Tvrage = string.Format("{0}", searchCriteria.Series.TvRageId);
+                parameters.Tvrage = $"{searchCriteria.Series.TvRageId}";
                 return true;
             }
             // BTN is very neatly managed, so it's unlikely they map tvrage/tvdb wrongly.
diff --git a/src/NzbDrone.Core/Indexers/FileList/FileListRequestGenerator.cs b/src/NzbDrone.Core/Indexers/FileList/FileListRequestGenerator.cs
index 89a900988..82983e830 100644
--- a/src/NzbDrone.Core/Indexers/FileList/FileListRequestGenerator.cs
+++ b/src/NzbDrone.Core/Indexers/FileList/FileListRequestGenerator.cs
@@ -113,7 +113,7 @@ private void AddImdbRequests(IndexerPageableRequestChain chain, SearchCriteriaBa
         {
             if (searchCriteria.Series.ImdbId.IsNotNullOrWhiteSpace())
             {
-                chain.Add(GetRequest(searchType, categories, string.Format("&type=imdb&query={0}{1}", searchCriteria.Series.ImdbId, parameters)));
+                chain.Add(GetRequest(searchType, categories, $"&type=imdb&query={searchCriteria.Series.ImdbId}{parameters}"));
             }
         }
 
@@ -121,7 +121,7 @@ private void AddNameRequests(IndexerPageableRequestChain chain, SearchCriteriaBa
         {
             foreach (var sceneTitle in searchCriteria.SceneTitles)
             {
-                chain.Add(GetRequest(searchType, categories, string.Format("&type=name&query={0}{1}", Uri.EscapeDataString(sceneTitle.Trim()), parameters)));
+                chain.Add(GetRequest(searchType, categories, $"&type=name&query={Uri.EscapeDataString(sceneTitle.Trim())}{parameters}"));
             }
         }
 
@@ -129,7 +129,7 @@ private IEnumerable<IndexerRequest> GetRequest(string searchType, IEnumerable<in
         {
             var categoriesQuery = string.Join(",", categories.Distinct());
 
-            var baseUrl = string.Format("{0}/api.php?action={1}&category={2}{3}", Settings.BaseUrl.TrimEnd('/'), searchType, categoriesQuery, parameters);
+            var baseUrl = $"{Settings.BaseUrl.TrimEnd('/')}/api.php?action={searchType}&category={categoriesQuery}{parameters}";
 
             var request = new IndexerRequest(baseUrl, HttpAccept.Json);
             request.HttpRequest.AddBasicAuthentication(Settings.Username.Trim(), Settings.Passkey.Trim());
diff --git a/src/NzbDrone.Core/Indexers/HDBits/HDBitsParser.cs b/src/NzbDrone.Core/Indexers/HDBits/HDBitsParser.cs
index c5a6dfa4a..2a03b75ba 100644
--- a/src/NzbDrone.Core/Indexers/HDBits/HDBitsParser.cs
+++ b/src/NzbDrone.Core/Indexers/HDBits/HDBitsParser.cs
@@ -52,7 +52,7 @@ public IList<ReleaseInfo> ParseResponse(IndexerResponse indexerResponse)
                 var id = result.Id;
                 torrentInfos.Add(new TorrentInfo()
                 {
-                    Guid = string.Format("HDBits-{0}", id),
+                    Guid = $"HDBits-{id}",
                     Title = result.Name,
                     Size = result.Size,
                     InfoHash = result.Hash,
diff --git a/src/NzbDrone.Core/Indexers/HDBits/HDBitsRequestGenerator.cs b/src/NzbDrone.Core/Indexers/HDBits/HDBitsRequestGenerator.cs
index fead12419..0a201c055 100644
--- a/src/NzbDrone.Core/Indexers/HDBits/HDBitsRequestGenerator.cs
+++ b/src/NzbDrone.Core/Indexers/HDBits/HDBitsRequestGenerator.cs
@@ -65,7 +65,7 @@ public virtual IndexerPageableRequestChain GetSearchRequests(DailySeasonSearchCr
             var query = new TorrentQuery();
             if (TryAddSearchParameters(query, searchCriteria))
             {
-                query.Search = string.Format("{0}-", searchCriteria.Year);
+                query.Search = $"{searchCriteria.Year}-";
 
                 pageableRequests.Add(GetRequest(query));
             }
diff --git a/src/NzbDrone.Core/Indexers/Newznab/NewznabCapabilitiesProvider.cs b/src/NzbDrone.Core/Indexers/Newznab/NewznabCapabilitiesProvider.cs
index 31f959412..8638dcb87 100644
--- a/src/NzbDrone.Core/Indexers/Newznab/NewznabCapabilitiesProvider.cs
+++ b/src/NzbDrone.Core/Indexers/Newznab/NewznabCapabilitiesProvider.cs
@@ -42,7 +42,7 @@ private NewznabCapabilities FetchCapabilities(NewznabSettings indexerSettings)
         {
             var capabilities = new NewznabCapabilities();
 
-            var url = string.Format("{0}{1}?t=caps", indexerSettings.BaseUrl.TrimEnd('/'), indexerSettings.ApiPath.TrimEnd('/'));
+            var url = $"{indexerSettings.BaseUrl.TrimEnd('/')}{indexerSettings.ApiPath.TrimEnd('/')}?t=caps";
 
             if (indexerSettings.ApiKey.IsNotNullOrWhiteSpace())
             {
diff --git a/src/NzbDrone.Core/Indexers/Newznab/NewznabRequestGenerator.cs b/src/NzbDrone.Core/Indexers/Newznab/NewznabRequestGenerator.cs
index 2b130b373..28d7f748f 100644
--- a/src/NzbDrone.Core/Indexers/Newznab/NewznabRequestGenerator.cs
+++ b/src/NzbDrone.Core/Indexers/Newznab/NewznabRequestGenerator.cs
@@ -166,17 +166,13 @@ public virtual IndexerPageableRequestChain GetSearchRequests(SingleEpisodeSearch
             if (searchCriteria.SearchMode.HasFlag(SearchMode.SearchID) || searchCriteria.SearchMode == SearchMode.Default)
             {
                 AddTvIdPageableRequests(pageableRequests, Settings.Categories, searchCriteria,
-                    string.Format("&season={0}&ep={1}",
-                        NewznabifySeasonNumber(searchCriteria.SeasonNumber),
-                        searchCriteria.EpisodeNumber));
+                    $"&season={NewznabifySeasonNumber(searchCriteria.SeasonNumber)}&ep={searchCriteria.EpisodeNumber}");
             }
 
             if (searchCriteria.SearchMode.HasFlag(SearchMode.SearchTitle))
             {
                 AddTitlePageableRequests(pageableRequests, Settings.Categories, searchCriteria,
-                    string.Format("&season={0}&ep={1}",
-                        NewznabifySeasonNumber(searchCriteria.SeasonNumber),
-                        searchCriteria.EpisodeNumber));
+                    $"&season={NewznabifySeasonNumber(searchCriteria.SeasonNumber)}&ep={searchCriteria.EpisodeNumber}");
             }
 
             pageableRequests.AddTier();
@@ -184,9 +180,7 @@ public virtual IndexerPageableRequestChain GetSearchRequests(SingleEpisodeSearch
             if (searchCriteria.SearchMode == SearchMode.Default)
             {
                 AddTitlePageableRequests(pageableRequests, Settings.Categories, searchCriteria,
-                    string.Format("&season={0}&ep={1}",
-                        NewznabifySeasonNumber(searchCriteria.SeasonNumber),
-                        searchCriteria.EpisodeNumber));
+                    $"&season={NewznabifySeasonNumber(searchCriteria.SeasonNumber)}&ep={searchCriteria.EpisodeNumber}");
             }
 
             return pageableRequests;
@@ -199,15 +193,13 @@ public virtual IndexerPageableRequestChain GetSearchRequests(SeasonSearchCriteri
             if (searchCriteria.SearchMode.HasFlag(SearchMode.SearchID) || searchCriteria.SearchMode == SearchMode.Default)
             {
                 AddTvIdPageableRequests(pageableRequests, Settings.Categories, searchCriteria,
-                    string.Format("&season={0}",
-                        NewznabifySeasonNumber(searchCriteria.SeasonNumber)));
+                    $"&season={NewznabifySeasonNumber(searchCriteria.SeasonNumber)}");
             }
 
             if (searchCriteria.SearchMode.HasFlag(SearchMode.SearchTitle))
             {
                 AddTitlePageableRequests(pageableRequests, Settings.Categories, searchCriteria,
-                    string.Format("&season={0}",
-                        NewznabifySeasonNumber(searchCriteria.SeasonNumber)));
+                    $"&season={NewznabifySeasonNumber(searchCriteria.SeasonNumber)}");
             }
 
             pageableRequests.AddTier();
@@ -215,8 +207,7 @@ public virtual IndexerPageableRequestChain GetSearchRequests(SeasonSearchCriteri
             if (searchCriteria.SearchMode == SearchMode.Default)
             {
                 AddTitlePageableRequests(pageableRequests, Settings.Categories, searchCriteria,
-                    string.Format("&season={0}",
-                        NewznabifySeasonNumber(searchCriteria.SeasonNumber)));
+                    $"&season={NewznabifySeasonNumber(searchCriteria.SeasonNumber)}");
             }
 
             return pageableRequests;
@@ -260,15 +251,13 @@ public virtual IndexerPageableRequestChain GetSearchRequests(DailySeasonSearchCr
             {
 
                 AddTvIdPageableRequests(pageableRequests, Settings.Categories, searchCriteria,
-                    string.Format("&season={0}",
-                    searchCriteria.Year));
+                    $"&season={searchCriteria.Year}");
             }
 
             if (searchCriteria.SearchMode.HasFlag(SearchMode.SearchTitle))
             {
                 AddTitlePageableRequests(pageableRequests, Settings.Categories, searchCriteria,
-                    string.Format("&season={0}",
-                    searchCriteria.Year));
+                    $"&season={searchCriteria.Year}");
             }
 
             pageableRequests.AddTier();
@@ -276,8 +265,7 @@ public virtual IndexerPageableRequestChain GetSearchRequests(DailySeasonSearchCr
             if (searchCriteria.SearchMode == SearchMode.Default)
             {
                 AddTitlePageableRequests(pageableRequests, Settings.Categories, searchCriteria,
-                    string.Format("&season={0}",
-                    searchCriteria.Year));
+                    $"&season={searchCriteria.Year}");
             }
 
             return pageableRequests;
@@ -314,8 +302,7 @@ public virtual IndexerPageableRequestChain GetSearchRequests(SpecialEpisodeSearc
                     query = System.Web.HttpUtility.UrlEncode(query);
 
                     pageableRequests.Add(GetPagedRequests(MaxPages, Settings.Categories.Concat(Settings.AnimeCategories), "search",
-                        string.Format("&q={0}",
-                        query)));
+                        $"&q={query}"));
                 }
             }
 
@@ -359,23 +346,23 @@ private void AddTvIdPageableRequests(IndexerPageableRequestChain chain, IEnumera
                 if (includeTvdbSearch)
                 {
                     chain.Add(GetPagedRequests(MaxPages, categories, "tvsearch",
-                        string.Format("&tvdbid={0}{1}", searchCriteria.Series.TvdbId, parameters)));
+                        $"&tvdbid={searchCriteria.Series.TvdbId}{parameters}"));
                 }
                 else if (includeImdbSearch)
                 {
                     chain.Add(GetPagedRequests(MaxPages, categories, "tvsearch",
-                        string.Format("&imdbid={0}{1}", searchCriteria.Series.ImdbId, parameters)));
+                        $"&imdbid={searchCriteria.Series.ImdbId}{parameters}"));
                 }
                 else if (includeTvRageSearch)
                 {
                     chain.Add(GetPagedRequests(MaxPages, categories, "tvsearch",
-                        string.Format("&rid={0}{1}", searchCriteria.Series.TvRageId, parameters)));
+                        $"&rid={searchCriteria.Series.TvRageId}{parameters}"));
                 }
 
                 else if (includeTvMazeSearch)
                 {
                     chain.Add(GetPagedRequests(MaxPages, categories, "tvsearch",
-                        string.Format("&tvmazeid={0}{1}", searchCriteria.Series.TvMazeId, parameters)));
+                        $"&tvmazeid={searchCriteria.Series.TvMazeId}{parameters}"));
                 }
             }
         }
@@ -387,9 +374,7 @@ private void AddTitlePageableRequests(IndexerPageableRequestChain chain, IEnumer
                 foreach (var searchTerm in searchCriteria.SceneTitles)
                 {
                     chain.Add(GetPagedRequests(MaxPages, Settings.Categories, "tvsearch",
-                        string.Format("&title={0}{1}",
-                        Uri.EscapeDataString(searchTerm),
-                        parameters)));
+                        $"&title={Uri.EscapeDataString(searchTerm)}{parameters}"));
                 }
             }
             else if (SupportsTvSearch)
@@ -398,9 +383,7 @@ private void AddTitlePageableRequests(IndexerPageableRequestChain chain, IEnumer
                 foreach (var queryTitle in queryTitles)
                 {
                     chain.Add(GetPagedRequests(MaxPages, Settings.Categories, "tvsearch",
-                        string.Format("&q={0}{1}",
-                        NewsnabifyTitle(queryTitle),
-                        parameters)));
+                        $"&q={NewsnabifyTitle(queryTitle)}{parameters}"));
                 }
             }
         }
@@ -414,7 +397,7 @@ private IEnumerable<IndexerRequest> GetPagedRequests(int maxPages, IEnumerable<i
 
             var categoriesQuery = string.Join(",", categories.Distinct());
 
-            var baseUrl = string.Format("{0}{1}?t={2}&cat={3}&extended=1{4}", Settings.BaseUrl.TrimEnd('/'), Settings.ApiPath.TrimEnd('/'), searchType, categoriesQuery, Settings.AdditionalParameters);
+            var baseUrl = $"{Settings.BaseUrl.TrimEnd('/')}{Settings.ApiPath.TrimEnd('/')}?t={searchType}&cat={categoriesQuery}&extended=1{Settings.AdditionalParameters}";
 
             if (Settings.ApiKey.IsNotNullOrWhiteSpace())
             {
@@ -423,13 +406,13 @@ private IEnumerable<IndexerRequest> GetPagedRequests(int maxPages, IEnumerable<i
 
             if (PageSize == 0)
             {
-                yield return new IndexerRequest(string.Format("{0}{1}", baseUrl, parameters), HttpAccept.Rss);
+                yield return new IndexerRequest($"{baseUrl}{parameters}", HttpAccept.Rss);
             }
             else
             {
                 for (var page = 0; page < maxPages; page++)
                 {
-                    yield return new IndexerRequest(string.Format("{0}&offset={1}&limit={2}{3}", baseUrl, page * PageSize, PageSize, parameters), HttpAccept.Rss);
+                    yield return new IndexerRequest($"{baseUrl}&offset={page * PageSize}&limit={PageSize}{parameters}", HttpAccept.Rss);
                 }
             }
         }
diff --git a/src/NzbDrone.Core/Indexers/Nyaa/NyaaRequestGenerator.cs b/src/NzbDrone.Core/Indexers/Nyaa/NyaaRequestGenerator.cs
index 2c8267cd3..d4e1ca369 100644
--- a/src/NzbDrone.Core/Indexers/Nyaa/NyaaRequestGenerator.cs
+++ b/src/NzbDrone.Core/Indexers/Nyaa/NyaaRequestGenerator.cs
@@ -72,8 +72,7 @@ public virtual IndexerPageableRequestChain GetSearchRequests(SpecialEpisodeSearc
             foreach (var queryTitle in searchCriteria.EpisodeQueryTitles)
             {
                 pageableRequests.Add(GetPagedRequests(MaxPages,
-                    string.Format("&term={0}",
-                    PrepareQuery(queryTitle))));
+                    $"&term={PrepareQuery(queryTitle)}"));
             }
 
             return pageableRequests;
@@ -81,7 +80,7 @@ public virtual IndexerPageableRequestChain GetSearchRequests(SpecialEpisodeSearc
 
         private IEnumerable<IndexerRequest> GetPagedRequests(int maxPages, string term)
         {
-            var baseUrl = string.Format("{0}/?page=rss{1}", Settings.BaseUrl.TrimEnd('/'), Settings.AdditionalParameters);
+            var baseUrl = $"{Settings.BaseUrl.TrimEnd('/')}/?page=rss{Settings.AdditionalParameters}";
 
             if (term != null)
             {
diff --git a/src/NzbDrone.Core/Indexers/Omgwtfnzbs/OmgwtfnzbsRequestGenerator.cs b/src/NzbDrone.Core/Indexers/Omgwtfnzbs/OmgwtfnzbsRequestGenerator.cs
index 19d1f46a8..351c867e7 100644
--- a/src/NzbDrone.Core/Indexers/Omgwtfnzbs/OmgwtfnzbsRequestGenerator.cs
+++ b/src/NzbDrone.Core/Indexers/Omgwtfnzbs/OmgwtfnzbsRequestGenerator.cs
@@ -74,9 +74,7 @@ public virtual IndexerPageableRequestChain GetSearchRequests(DailySeasonSearchCr
 
             foreach (var queryTitle in searchCriteria.QueryTitles)
             {
-                pageableRequests.Add(GetPagedRequests(string.Format("{0}+{1}",
-                    queryTitle,
-                    searchCriteria.Year)));
+                pageableRequests.Add(GetPagedRequests($"{queryTitle}+{searchCriteria.Year}"));
             }
 
             return pageableRequests;
diff --git a/src/NzbDrone.Core/Indexers/Rarbg/RarbgParser.cs b/src/NzbDrone.Core/Indexers/Rarbg/RarbgParser.cs
index 5dca6bf70..453206020 100644
--- a/src/NzbDrone.Core/Indexers/Rarbg/RarbgParser.cs
+++ b/src/NzbDrone.Core/Indexers/Rarbg/RarbgParser.cs
@@ -81,11 +81,11 @@ private string GetGuid(RarbgTorrent torrent)
 
             if (match.Success)
             {
-                return string.Format("rarbg-{0}", match.Groups[1].Value);
+                return $"rarbg-{match.Groups[1].Value}";
             }
             else
             {
-                return string.Format("rarbg-{0}", torrent.download);
+                return $"rarbg-{torrent.download}";
             }
         }
 
diff --git a/src/NzbDrone.Core/Indexers/RssParser.cs b/src/NzbDrone.Core/Indexers/RssParser.cs
index 3f225da49..829628e35 100644
--- a/src/NzbDrone.Core/Indexers/RssParser.cs
+++ b/src/NzbDrone.Core/Indexers/RssParser.cs
@@ -346,7 +346,7 @@ protected virtual string ParseUrl(string value)
             }
             catch (Exception ex)
             {
-                _logger.Debug(ex, string.Format("Failed to parse Url {0}, ignoring.", value));
+                _logger.Debug(ex, $"Failed to parse Url {value}, ignoring.");
                 return null;
             }
         }
diff --git a/src/NzbDrone.Core/Indexers/RssSyncService.cs b/src/NzbDrone.Core/Indexers/RssSyncService.cs
index 27c0256e4..288be3b2c 100644
--- a/src/NzbDrone.Core/Indexers/RssSyncService.cs
+++ b/src/NzbDrone.Core/Indexers/RssSyncService.cs
@@ -51,7 +51,7 @@ private ProcessedDecisions Sync()
             var decisions = _downloadDecisionMaker.GetRssDecision(reports);
             var processed = _processDownloadDecisions.ProcessDecisions(decisions);
 
-            var message = string.Format("RSS Sync Completed. Reports found: {0}, Reports grabbed: {1}", reports.Count, processed.Grabbed.Count);
+            var message = $"RSS Sync Completed. Reports found: {reports.Count}, Reports grabbed: {processed.Grabbed.Count}";
 
             if (processed.Pending.Any())
             {
diff --git a/src/NzbDrone.Core/Indexers/SeedConfigProvider.cs b/src/NzbDrone.Core/Indexers/SeedConfigProvider.cs
index ff07ec2b3..65a5a6635 100644
--- a/src/NzbDrone.Core/Indexers/SeedConfigProvider.cs
+++ b/src/NzbDrone.Core/Indexers/SeedConfigProvider.cs
@@ -32,7 +32,7 @@ public TorrentSeedConfiguration GetSeedConfiguration(RemoteEpisode remoteEpisode
                 var indexer = _indexerFactory.Get(remoteEpisode.Release.IndexerId);
                 var torrentIndexerSettings = indexer.Settings as ITorrentIndexerSettings;
 
-                if (torrentIndexerSettings != null && torrentIndexerSettings.SeedCriteria != null)
+                if (torrentIndexerSettings?.SeedCriteria != null)
                 {
                     var seedConfig = new TorrentSeedConfiguration
                     {
diff --git a/src/NzbDrone.Core/Indexers/TorrentRss/TorrentRssSettingsDetector.cs b/src/NzbDrone.Core/Indexers/TorrentRss/TorrentRssSettingsDetector.cs
index 53ee117cc..e121d0c83 100644
--- a/src/NzbDrone.Core/Indexers/TorrentRss/TorrentRssSettingsDetector.cs
+++ b/src/NzbDrone.Core/Indexers/TorrentRss/TorrentRssSettingsDetector.cs
@@ -52,7 +52,7 @@ public TorrentRssIndexerParserSettings Detect(TorrentRssIndexerSettings indexerS
                 }
                 catch (Exception ex)
                 {
-                    _logger.Warn(ex, string.Format("Unable to connect to indexer {0}: {1}", request.Url, ex.Message));
+                    _logger.Warn(ex, $"Unable to connect to indexer {request.Url}: {ex.Message}");
                     return null;
                 }
 
diff --git a/src/NzbDrone.Core/Indexers/Torrentleech/TorrentleechRequestGenerator.cs b/src/NzbDrone.Core/Indexers/Torrentleech/TorrentleechRequestGenerator.cs
index d50e25011..241a0ab36 100644
--- a/src/NzbDrone.Core/Indexers/Torrentleech/TorrentleechRequestGenerator.cs
+++ b/src/NzbDrone.Core/Indexers/Torrentleech/TorrentleechRequestGenerator.cs
@@ -49,7 +49,7 @@ public virtual IndexerPageableRequestChain GetSearchRequests(SpecialEpisodeSearc
 
         private IEnumerable<IndexerRequest> GetRssRequests(string searchParameters)
         {
-            yield return new IndexerRequest(string.Format("{0}/{1}{2}", Settings.BaseUrl.Trim().TrimEnd('/'), Settings.ApiKey, searchParameters), HttpAccept.Rss);
+            yield return new IndexerRequest($"{Settings.BaseUrl.Trim().TrimEnd('/')}/{Settings.ApiKey}{searchParameters}", HttpAccept.Rss);
         }
     }
 }
diff --git a/src/NzbDrone.Core/Jobs/TaskManager.cs b/src/NzbDrone.Core/Jobs/TaskManager.cs
index 7b862bf4a..984640de9 100644
--- a/src/NzbDrone.Core/Jobs/TaskManager.cs
+++ b/src/NzbDrone.Core/Jobs/TaskManager.cs
@@ -92,7 +92,7 @@ public void Handle(ApplicationStartedEvent message)
 
             var currentTasks = _scheduledTaskRepository.All().ToList();
 
-            _logger.Trace("Initializing jobs. Available: {0} Existing: {1}", defaultTasks.Count(), currentTasks.Count());
+            _logger.Trace("Initializing jobs. Available: {0} Existing: {1}", defaultTasks.Count(), currentTasks.Count);
 
             foreach (var job in currentTasks)
             {
diff --git a/src/NzbDrone.Core/MediaFiles/DownloadedEpisodesImportService.cs b/src/NzbDrone.Core/MediaFiles/DownloadedEpisodesImportService.cs
index 931c13b6a..d10965ede 100644
--- a/src/NzbDrone.Core/MediaFiles/DownloadedEpisodesImportService.cs
+++ b/src/NzbDrone.Core/MediaFiles/DownloadedEpisodesImportService.cs
@@ -224,7 +224,7 @@ private List<ImportResult> ProcessFile(FileInfo fileInfo, ImportMode importMode,
 
                 return new List<ImportResult>
                        {
-                           UnknownSeriesResult(string.Format("Unknown Series for file: {0}", fileInfo.Name), fileInfo.FullName)
+                           UnknownSeriesResult($"Unknown Series for file: {fileInfo.Name}", fileInfo.FullName)
                        };
             }
 
diff --git a/src/NzbDrone.Core/MediaFiles/EpisodeFile.cs b/src/NzbDrone.Core/MediaFiles/EpisodeFile.cs
index 250bd7eec..530a0c3d0 100644
--- a/src/NzbDrone.Core/MediaFiles/EpisodeFile.cs
+++ b/src/NzbDrone.Core/MediaFiles/EpisodeFile.cs
@@ -29,7 +29,7 @@ public class EpisodeFile : ModelBase
 
         public override string ToString()
         {
-            return string.Format("[{0}] {1}", Id, RelativePath);
+            return $"[{Id}] {RelativePath}";
         }
 
         public string GetSceneOrFileName()
diff --git a/src/NzbDrone.Core/MediaFiles/EpisodeFileMovingService.cs b/src/NzbDrone.Core/MediaFiles/EpisodeFileMovingService.cs
index 123d11484..5572b7c23 100644
--- a/src/NzbDrone.Core/MediaFiles/EpisodeFileMovingService.cs
+++ b/src/NzbDrone.Core/MediaFiles/EpisodeFileMovingService.cs
@@ -155,7 +155,7 @@ private void EnsureEpisodeFolder(EpisodeFile episodeFile, Series series, int sea
 
             if (!_diskProvider.FolderExists(rootFolder))
             {
-                throw new RootFolderNotFoundException(string.Format("Root folder '{0}' was not found.", rootFolder));
+                throw new RootFolderNotFoundException($"Root folder '{rootFolder}' was not found.");
             }
 
             var changed = false;
diff --git a/src/NzbDrone.Core/MediaFiles/EpisodeImport/ImportDecisionMaker.cs b/src/NzbDrone.Core/MediaFiles/EpisodeImport/ImportDecisionMaker.cs
index fd8cf8a06..b2f8b50ee 100644
--- a/src/NzbDrone.Core/MediaFiles/EpisodeImport/ImportDecisionMaker.cs
+++ b/src/NzbDrone.Core/MediaFiles/EpisodeImport/ImportDecisionMaker.cs
@@ -58,7 +58,7 @@ public List<ImportDecision> GetImportDecisions(List<string> videoFiles, Series s
         {
             var newFiles = filterExistingFiles ? _mediaFileService.FilterExistingFiles(videoFiles.ToList(), series) : videoFiles.ToList();
 
-            _logger.Debug("Analyzing {0}/{1} files.", newFiles.Count, videoFiles.Count());
+            _logger.Debug("Analyzing {0}/{1} files.", newFiles.Count, videoFiles.Count);
 
             ParsedEpisodeInfo downloadClientItemInfo = null;
 
diff --git a/src/NzbDrone.Core/MediaFiles/EpisodeImport/Manual/ManualImportService.cs b/src/NzbDrone.Core/MediaFiles/EpisodeImport/Manual/ManualImportService.cs
index 253fcbfcc..41a95fa45 100644
--- a/src/NzbDrone.Core/MediaFiles/EpisodeImport/Manual/ManualImportService.cs
+++ b/src/NzbDrone.Core/MediaFiles/EpisodeImport/Manual/ManualImportService.cs
@@ -194,7 +194,7 @@ private List<ManualImportItem> ProcessFolder(string rootFolder, string baseFolde
                 // If the series is unknown for the directory and there are more than 100 files in the folder don't process the items before returning.
                 var files = _diskScanService.FilterPaths(rootFolder, _diskScanService.GetVideoFiles(baseFolder, false));
 
-                if (files.Count() > 100)
+                if (files.Count > 100)
                 {
                     return ProcessDownloadDirectory(rootFolder, files);
                 }
diff --git a/src/NzbDrone.Core/MediaFiles/EpisodeImport/Specifications/EpisodeTitleSpecification.cs b/src/NzbDrone.Core/MediaFiles/EpisodeImport/Specifications/EpisodeTitleSpecification.cs
index 5586611c5..294db6659 100644
--- a/src/NzbDrone.Core/MediaFiles/EpisodeImport/Specifications/EpisodeTitleSpecification.cs
+++ b/src/NzbDrone.Core/MediaFiles/EpisodeImport/Specifications/EpisodeTitleSpecification.cs
@@ -58,12 +58,7 @@ public Decision IsSatisfiedBy(LocalEpisode localEpisode, DownloadClientItem down
                                               e.AirDateUtc.HasValue &&
                                               e.AirDateUtc.Value == firstEpisode.AirDateUtc.Value);
 
-            if (episodeTitleRequired == EpisodeTitleRequiredType.BulkSeasonReleases &&
-                allEpisodesOnTheSameDay &&
-                episodesInSeason.Count(e => e.AirDateUtc.HasValue &&
-                                            e.AirDateUtc.Value == firstEpisode.AirDateUtc.Value
-                                       ) < 4
-            )
+            if (episodeTitleRequired == EpisodeTitleRequiredType.BulkSeasonReleases && allEpisodesOnTheSameDay && episodesInSeason.Count(e => e.AirDateUtc.HasValue && e.AirDateUtc.Value == firstEpisode.AirDateUtc.Value) < 4            )
             {
                 _logger.Debug("Episode title only required for bulk season releases");
                 return Decision.Accept();
diff --git a/src/NzbDrone.Core/MediaFiles/MediaInfo/MediaInfoFormatter.cs b/src/NzbDrone.Core/MediaFiles/MediaInfo/MediaInfoFormatter.cs
index 872097434..5558fb550 100644
--- a/src/NzbDrone.Core/MediaFiles/MediaInfo/MediaInfoFormatter.cs
+++ b/src/NzbDrone.Core/MediaFiles/MediaInfo/MediaInfoFormatter.cs
@@ -480,7 +480,7 @@ public static string FormatVideoCodecLegacy(MediaInfoModel mediaInfo, string sce
 
                         if (channelSplit.Count() == 3)
                         {
-                            positions += decimal.Parse(string.Format("{0}.{1}", channelSplit[1], channelSplit[2]), CultureInfo.InvariantCulture);
+                            positions += decimal.Parse($"{channelSplit[1]}.{channelSplit[2]}", CultureInfo.InvariantCulture);
                         }
                         else
                         {
diff --git a/src/NzbDrone.Core/Messaging/Events/EventAggregator.cs b/src/NzbDrone.Core/Messaging/Events/EventAggregator.cs
index 6c9491e0d..1128ba23a 100644
--- a/src/NzbDrone.Core/Messaging/Events/EventAggregator.cs
+++ b/src/NzbDrone.Core/Messaging/Events/EventAggregator.cs
@@ -130,7 +130,7 @@ private static string GetEventName(Type eventType)
                 return eventType.Name;
             }
 
-            return string.Format("{0}<{1}>", eventType.Name.Remove(eventType.Name.IndexOf('`')), eventType.GetGenericArguments()[0].Name);
+            return $"{eventType.Name.Remove(eventType.Name.IndexOf('`'))}<{eventType.GetGenericArguments()[0].Name}>";
         }
 
         internal static int GetEventHandleOrder<TEvent>(IHandle<TEvent> eventHandler) where TEvent : class, IEvent
diff --git a/src/NzbDrone.Core/Notifications/Discord/Discord.cs b/src/NzbDrone.Core/Notifications/Discord/Discord.cs
index 40eec4698..ec9683746 100644
--- a/src/NzbDrone.Core/Notifications/Discord/Discord.cs
+++ b/src/NzbDrone.Core/Notifications/Discord/Discord.cs
@@ -95,7 +95,7 @@ public override void OnGrab(GrabMessage message)
                         break;
                     case DiscordGrabFieldType.Release:
                         discordField.Name = "Release";
-                        discordField.Value = string.Format("```{0}```", message.Episode.Release.Title);
+                        discordField.Value = $"```{message.Episode.Release.Title}```";
                         break;
                     case DiscordGrabFieldType.Links:
                         discordField.Name = "Links";
@@ -178,10 +178,7 @@ public override void OnDownload(DownloadMessage message)
                     case DiscordImportFieldType.Codecs:
                         discordField.Name = "Codecs";
                         discordField.Inline = true;
-                        discordField.Value = string.Format("{0} / {1} {2}",
-                            MediaInfoFormatter.FormatVideoCodec(message.EpisodeFile.MediaInfo, null),
-                            MediaInfoFormatter.FormatAudioCodec(message.EpisodeFile.MediaInfo, null),
-                            MediaInfoFormatter.FormatAudioChannels(message.EpisodeFile.MediaInfo));
+                        discordField.Value = $"{MediaInfoFormatter.FormatVideoCodec(message.EpisodeFile.MediaInfo, null)} / {MediaInfoFormatter.FormatAudioCodec(message.EpisodeFile.MediaInfo, null)} {MediaInfoFormatter.FormatAudioChannels(message.EpisodeFile.MediaInfo)}";
                         break;
                     case DiscordImportFieldType.Group:
                         discordField.Name = "Group";
@@ -357,7 +354,7 @@ private string BytesToString(long byteCount)
             var bytes = Math.Abs(byteCount);
             var place = Convert.ToInt32(Math.Floor(Math.Log(bytes, 1024)));
             var num = Math.Round(bytes / Math.Pow(1024, place), 1);
-            return string.Format("{0} {1}", (Math.Sign(byteCount) * num).ToString(), suf[place]);
+            return $"{(Math.Sign(byteCount) * num).ToString()} {suf[place]}";
         }
 
         private string GetLinksString(Series series)
@@ -385,7 +382,7 @@ private string GetTitle(Series series, List<Episode> episodes)
             }
 
             var episodeNumbers = string.Concat(episodes.Select(e => e.EpisodeNumber)
-                                                       .Select(i => string.Format("x{0:00}", i)));
+                                                       .Select(i => $"x{i:00}"));
 
             var episodeTitles = string.Join(" + ", episodes.Select(e => e.Title));
 
diff --git a/src/NzbDrone.Core/Notifications/NotificationService.cs b/src/NzbDrone.Core/Notifications/NotificationService.cs
index df520c1b8..ec51885dd 100644
--- a/src/NzbDrone.Core/Notifications/NotificationService.cs
+++ b/src/NzbDrone.Core/Notifications/NotificationService.cs
@@ -56,24 +56,15 @@ private string GetMessage(Series series, List<Episode> episodes, QualityModel qu
             {
                 var episode = episodes.First();
 
-                return string.Format("{0} - {1} - {2} [{3}]",
-                                         series.Title,
-                                         episode.AirDate,
-                                         episode.Title,
-                                         qualityString);
+                return $"{series.Title} - {episode.AirDate} - {episode.Title} [{qualityString}]";
             }
 
             var episodeNumbers = string.Concat(episodes.Select(e => e.EpisodeNumber)
-                                                       .Select(i => string.Format("x{0:00}", i)));
+                                                       .Select(i => $"x{i:00}"));
 
             var episodeTitles = string.Join(" + ", episodes.Select(e => e.Title));
 
-            return string.Format("{0} - {1}{2} - {3} [{4}]",
-                                    series.Title,
-                                    episodes.First().SeasonNumber,
-                                    episodeNumbers,
-                                    episodeTitles,
-                                    qualityString);
+            return $"{series.Title} - {episodes.First().SeasonNumber}{episodeNumbers} - {episodeTitles} [{qualityString}]";
         }
 
         private bool ShouldHandleSeries(ProviderDefinition definition, Series series)
diff --git a/src/NzbDrone.Core/Notifications/Plex/HomeTheater/PlexClientService.cs b/src/NzbDrone.Core/Notifications/Plex/HomeTheater/PlexClientService.cs
index 3d1411ec8..13d2629e7 100644
--- a/src/NzbDrone.Core/Notifications/Plex/HomeTheater/PlexClientService.cs
+++ b/src/NzbDrone.Core/Notifications/Plex/HomeTheater/PlexClientService.cs
@@ -26,7 +26,7 @@ public void Notify(PlexClientSettings settings, string header, string message)
         {
             try
             {
-                var command = string.Format("ExecBuiltIn(Notification({0}, {1}))", header, message);
+                var command = $"ExecBuiltIn(Notification({header}, {message}))";
                 SendCommand(settings.Host, settings.Port, command, settings.Username, settings.Password);
             }
             catch(Exception ex)
@@ -37,7 +37,7 @@ public void Notify(PlexClientSettings settings, string header, string message)
 
         private string SendCommand(string host, int port, string command, string username, string password)
         {
-            var url = string.Format("http://{0}:{1}/xbmcCmds/xbmcHttp?command={2}", host, port, command);
+            var url = $"http://{host}:{port}/xbmcCmds/xbmcHttp?command={command}";
 
             if (!string.IsNullOrEmpty(username))
             {
@@ -52,7 +52,7 @@ public ValidationFailure Test(PlexClientSettings settings)
             try
             {
                 _logger.Debug("Sending Test Notifcation to Plex Client: {0}", settings.Host);
-                var command = string.Format("ExecBuiltIn(Notification({0}, {1}))", "Test Notification", "Success! Notifications are setup correctly");
+                var command = $"ExecBuiltIn(Notification({"Test Notification"}, {"Success! Notifications are setup correctly"}))";
                 var result = SendCommand(settings.Host, settings.Port, command, settings.Username, settings.Password);
 
                 if (string.IsNullOrWhiteSpace(result) ||
diff --git a/src/NzbDrone.Core/Notifications/Slack/Slack.cs b/src/NzbDrone.Core/Notifications/Slack/Slack.cs
index 49efa3f55..887c96aa2 100644
--- a/src/NzbDrone.Core/Notifications/Slack/Slack.cs
+++ b/src/NzbDrone.Core/Notifications/Slack/Slack.cs
@@ -189,7 +189,7 @@ private string GetTitle(Series series, List<Episode> episodes)
             }
 
             var episodeNumbers = string.Concat(episodes.Select(e => e.EpisodeNumber)
-                                                       .Select(i => string.Format("x{0:00}", i)));
+                                                       .Select(i => $"x{i:00}"));
 
             var episodeTitles = string.Join(" + ", episodes.Select(e => e.Title));
 
diff --git a/src/NzbDrone.Core/Notifications/Synology/SynologyIndexerProxy.cs b/src/NzbDrone.Core/Notifications/Synology/SynologyIndexerProxy.cs
index 89d213567..2b6012457 100644
--- a/src/NzbDrone.Core/Notifications/Synology/SynologyIndexerProxy.cs
+++ b/src/NzbDrone.Core/Notifications/Synology/SynologyIndexerProxy.cs
@@ -89,7 +89,7 @@ private void ExecuteCommand(string args, bool throwOnStdOut = true)
 
         private string Escape(string arg)
         {
-            return string.Format("\"{0}\"", arg.Replace("\"", "\\\""));
+            return $"\"{arg.Replace("\"", "\\\"")}\"";
         }
     }
 }
diff --git a/src/NzbDrone.Core/Notifications/Twitter/TwitterService.cs b/src/NzbDrone.Core/Notifications/Twitter/TwitterService.cs
index 4e8af4780..a779edc64 100644
--- a/src/NzbDrone.Core/Notifications/Twitter/TwitterService.cs
+++ b/src/NzbDrone.Core/Notifications/Twitter/TwitterService.cs
@@ -61,7 +61,7 @@ public string GetOAuthRedirect(string consumerKey, string consumerSecret, string
             oAuthRequest.RequestUrl = "https://api.twitter.com/oauth/request_token";
             var qscoll = OAuthQuery(oAuthRequest);
 
-            return string.Format("https://api.twitter.com/oauth/authorize?oauth_token={0}", qscoll["oauth_token"]);
+            return $"https://api.twitter.com/oauth/authorize?oauth_token={qscoll["oauth_token"]}";
         }
 
         public void SendNotification(string message, TwitterSettings settings)
@@ -87,7 +87,7 @@ public void SendNotification(string message, TwitterSettings settings)
                 {
                     if (settings.Mention.IsNotNullOrWhiteSpace())
                     {
-                        message += string.Format(" @{0}", settings.Mention);
+                        message += $" @{settings.Mention}";
                     }
 
                     twitter.UpdateStatus(message);                    
diff --git a/src/NzbDrone.Core/Notifications/Xbmc/HttpApiProvider.cs b/src/NzbDrone.Core/Notifications/Xbmc/HttpApiProvider.cs
index 1065ecaff..08ce1f4bd 100644
--- a/src/NzbDrone.Core/Notifications/Xbmc/HttpApiProvider.cs
+++ b/src/NzbDrone.Core/Notifications/Xbmc/HttpApiProvider.cs
@@ -28,7 +28,7 @@ public bool CanHandle(XbmcVersion version)
 
         public void Notify(XbmcSettings settings, string title, string message)
         {
-            var notification = string.Format("Notification({0},{1},{2},{3})", title, message, settings.DisplayTime * 1000, "https://raw.github.com/Sonarr/Sonarr/develop/Logo/64.png");
+            var notification = $"Notification({title},{message},{settings.DisplayTime * 1000},{"https://raw.github.com/Sonarr/Sonarr/develop/Logo/64.png"})";
             var command = BuildExecBuiltInCommand(notification);
 
             SendCommand(settings, command);
@@ -95,10 +95,8 @@ internal List<ActivePlayer> GetActivePlayers(XbmcSettings settings)
         internal string GetSeriesPath(XbmcSettings settings, Series series)
         {
             var query =
-                string.Format(
-                    "select path.strPath from path, tvshow, tvshowlinkpath where tvshow.c12 = {0} and tvshowlinkpath.idShow = tvshow.idShow and tvshowlinkpath.idPath = path.idPath",
-                    series.TvdbId);
-            var command = string.Format("QueryVideoDatabase({0})", query);
+                $"select path.strPath from path, tvshow, tvshowlinkpath where tvshow.c12 = {series.TvdbId} and tvshowlinkpath.idShow = tvshow.idShow and tvshowlinkpath.idPath = path.idPath";
+            var command = $"QueryVideoDatabase({query})";
 
             const string setResponseCommand =
                 "SetResponseFormat(webheader;false;webfooter;false;header;<xml>;footer;</xml>;opentag;<tag>;closetag;</tag>;closefinaltag;false)";
@@ -160,7 +158,7 @@ private void UpdateLibrary(XbmcSettings settings, Series series)
                 if (!string.IsNullOrEmpty(xbmcSeriesPath))
                 {
                     _logger.Debug("Updating series [{0}] on XBMC host: {1}", series, settings.Address);
-                    var command = BuildExecBuiltInCommand(string.Format("UpdateLibrary(video,{0})", xbmcSeriesPath));
+                    var command = BuildExecBuiltInCommand($"UpdateLibrary(video,{xbmcSeriesPath})");
                     SendCommand(settings, command);
                 }
 
@@ -181,7 +179,7 @@ private void UpdateLibrary(XbmcSettings settings, Series series)
 
         private string SendCommand(XbmcSettings settings, string command)
         {
-            var url = string.Format("http://{0}/xbmcCmds/xbmcHttp?command={1}", settings.Address, command);
+            var url = $"http://{settings.Address}/xbmcCmds/xbmcHttp?command={command}";
 
             if (!string.IsNullOrEmpty(settings.Username))
             {
@@ -193,7 +191,7 @@ private string SendCommand(XbmcSettings settings, string command)
 
         private string BuildExecBuiltInCommand(string command)
         {
-            return string.Format("ExecBuiltIn({0})", command);
+            return $"ExecBuiltIn({command})";
         }
     }
 }
diff --git a/src/NzbDrone.Core/Notifications/Xbmc/Model/XbmcVersion.cs b/src/NzbDrone.Core/Notifications/Xbmc/Model/XbmcVersion.cs
index c4fc4358e..1010722e0 100644
--- a/src/NzbDrone.Core/Notifications/Xbmc/Model/XbmcVersion.cs
+++ b/src/NzbDrone.Core/Notifications/Xbmc/Model/XbmcVersion.cs
@@ -87,7 +87,7 @@ public int CompareTo(XbmcVersion other)
 
         public override string ToString()
         {
-            return string.Format("{0}.{1}.{2}", Major, Minor, Patch);
+            return $"{Major}.{Minor}.{Patch}";
         }
 
         public override int GetHashCode()
diff --git a/src/NzbDrone.Core/Notifications/Xbmc/Xbmc.cs b/src/NzbDrone.Core/Notifications/Xbmc/Xbmc.cs
index 762ad6e1c..799a66c96 100644
--- a/src/NzbDrone.Core/Notifications/Xbmc/Xbmc.cs
+++ b/src/NzbDrone.Core/Notifications/Xbmc/Xbmc.cs
@@ -88,7 +88,7 @@ private void Notify(XbmcSettings settings, string header, string message)
             }
             catch (SocketException ex)
             {
-                var logMessage = string.Format("Unable to connect to Kodi Host: {0}:{1}", Settings.Host, Settings.Port);
+                var logMessage = $"Unable to connect to Kodi Host: {Settings.Host}:{Settings.Port}";
                 _logger.Debug(ex, logMessage);
             }
         }
@@ -109,7 +109,7 @@ private void UpdateAndClean(Series series, bool clean = true)
             }
             catch (SocketException ex)
             {
-                var logMessage = string.Format("Unable to connect to Kodi Host: {0}:{1}", Settings.Host, Settings.Port);
+                var logMessage = $"Unable to connect to Kodi Host: {Settings.Host}:{Settings.Port}";
                 _logger.Debug(ex, logMessage);
             }
         }
diff --git a/src/NzbDrone.Core/Notifications/Xbmc/XbmcJsonApiProxy.cs b/src/NzbDrone.Core/Notifications/Xbmc/XbmcJsonApiProxy.cs
index bee146391..ac26055d7 100644
--- a/src/NzbDrone.Core/Notifications/Xbmc/XbmcJsonApiProxy.cs
+++ b/src/NzbDrone.Core/Notifications/Xbmc/XbmcJsonApiProxy.cs
@@ -111,7 +111,7 @@ private void CheckForError(HttpResponse response)
                 var code = error.Error["code"];
                 var message = error.Error["message"];
 
-                var errorMessage = string.Format("XBMC Json Error. Code = {0}, Message: {1}", code, message);
+                var errorMessage = $"XBMC Json Error. Code = {code}, Message: {message}";
                 throw new XbmcJsonException(errorMessage);
             }
         }
diff --git a/src/NzbDrone.Core/Notifications/Xbmc/XbmcService.cs b/src/NzbDrone.Core/Notifications/Xbmc/XbmcService.cs
index d9cacf8f8..5490c9c14 100644
--- a/src/NzbDrone.Core/Notifications/Xbmc/XbmcService.cs
+++ b/src/NzbDrone.Core/Notifications/Xbmc/XbmcService.cs
@@ -89,7 +89,7 @@ private IApiProvider GetApiProvider(XbmcSettings settings)
 
             if (apiProvider == null)
             {
-                var message = string.Format("Invalid API Version: {0} for {1}", version, settings.Address);
+                var message = $"Invalid API Version: {version} for {settings.Address}";
                 throw new InvalidXbmcVersionException(message);
             }
 
diff --git a/src/NzbDrone.Core/Notifications/Xbmc/XbmcSettings.cs b/src/NzbDrone.Core/Notifications/Xbmc/XbmcSettings.cs
index f007cb616..2bff5b358 100644
--- a/src/NzbDrone.Core/Notifications/Xbmc/XbmcSettings.cs
+++ b/src/NzbDrone.Core/Notifications/Xbmc/XbmcSettings.cs
@@ -55,7 +55,7 @@ public XbmcSettings()
         public bool AlwaysUpdate { get; set; }
 
         [JsonIgnore]
-        public string Address => string.Format("{0}:{1}", Host, Port);
+        public string Address => $"{Host}:{Port}";
 
         public NzbDroneValidationResult Validate()
         {
diff --git a/src/NzbDrone.Core/Organizer/FileNameBuilder.cs b/src/NzbDrone.Core/Organizer/FileNameBuilder.cs
index df03b5de9..22c3a0826 100644
--- a/src/NzbDrone.Core/Organizer/FileNameBuilder.cs
+++ b/src/NzbDrone.Core/Organizer/FileNameBuilder.cs
@@ -587,7 +587,7 @@ private void AddQualityTokens(Dictionary<string, Func<TokenMatch, string>> token
             var qualityProper = GetQualityProper(series, episodeFile.Quality);
             var qualityReal = GetQualityReal(series, episodeFile.Quality);
 
-            tokenHandlers["{Quality Full}"] = m => String.Format("{0} {1} {2}", qualityTitle, qualityProper, qualityReal);
+            tokenHandlers["{Quality Full}"] = m => $"{qualityTitle} {qualityProper} {qualityReal}";
             tokenHandlers["{Quality Title}"] = m => qualityTitle;
             tokenHandlers["{Quality Proper}"] = m => qualityProper;
             tokenHandlers["{Quality Real}"] = m => qualityReal;
diff --git a/src/NzbDrone.Core/Parser/Model/ImportListItemInfo.cs b/src/NzbDrone.Core/Parser/Model/ImportListItemInfo.cs
index de929ae7d..036daf057 100644
--- a/src/NzbDrone.Core/Parser/Model/ImportListItemInfo.cs
+++ b/src/NzbDrone.Core/Parser/Model/ImportListItemInfo.cs
@@ -13,7 +13,7 @@ public class ImportListItemInfo
 
         public override string ToString()
         {
-            return string.Format("[{0}] {1}", ReleaseDate, Title);
+            return $"[{ReleaseDate}] {Title}";
         }
     }
 }
diff --git a/src/NzbDrone.Core/Parser/Model/ParsedEpisodeInfo.cs b/src/NzbDrone.Core/Parser/Model/ParsedEpisodeInfo.cs
index b2c409419..65ad76732 100644
--- a/src/NzbDrone.Core/Parser/Model/ParsedEpisodeInfo.cs
+++ b/src/NzbDrone.Core/Parser/Model/ParsedEpisodeInfo.cs
@@ -93,29 +93,29 @@ public override string ToString()
 
             if (IsDaily && EpisodeNumbers.Empty())
             {
-                episodeString = string.Format("{0}", AirDate);
+                episodeString = $"{AirDate}";
             }
             else if (FullSeason)
             {
-                episodeString = string.Format("Season {0:00}", SeasonNumber);
+                episodeString = $"Season {SeasonNumber:00}";
             }
             else if (EpisodeNumbers != null && EpisodeNumbers.Any())
             {
-                episodeString = string.Format("S{0:00}E{1}", SeasonNumber, string.Join("-", EpisodeNumbers.Select(c => c.ToString("00"))));
+                episodeString = $"S{SeasonNumber:00}E{string.Join("-", EpisodeNumbers.Select(c => c.ToString("00")))}";
             }
             else if (AbsoluteEpisodeNumbers != null && AbsoluteEpisodeNumbers.Any())
             {
-                episodeString = string.Format("{0}", string.Join("-", AbsoluteEpisodeNumbers.Select(c => c.ToString("000"))));
+                episodeString = $"{string.Join("-", AbsoluteEpisodeNumbers.Select(c => c.ToString("000")))}";
             }
             else if (Special)
             {
                 if (SeasonNumber != 0)
-                    episodeString = string.Format("[Unknown Season {0:00} Special]", SeasonNumber);
+                    episodeString = $"[Unknown Season {SeasonNumber:00} Special]";
                 else
                     episodeString = "[Unknown Special]";
             }
 
-            return string.Format("{0} - {1} {2}", SeriesTitle, episodeString, Quality);
+            return $"{SeriesTitle} - {episodeString} {Quality}";
         }
     }
 }
diff --git a/src/NzbDrone.Core/Parser/Model/ReleaseInfo.cs b/src/NzbDrone.Core/Parser/Model/ReleaseInfo.cs
index ddfa63888..3a6873cd7 100644
--- a/src/NzbDrone.Core/Parser/Model/ReleaseInfo.cs
+++ b/src/NzbDrone.Core/Parser/Model/ReleaseInfo.cs
@@ -65,7 +65,7 @@ public double AgeMinutes
 
         public override string ToString()
         {
-            return string.Format("[{0}] {1} [{2}]", PublishDate, Title, Size);
+            return $"[{PublishDate}] {Title} [{Size}]";
         }
 
         public virtual string ToString(string format)
diff --git a/src/NzbDrone.Core/Parser/Parser.cs b/src/NzbDrone.Core/Parser/Parser.cs
index 3932daf70..349382673 100644
--- a/src/NzbDrone.Core/Parser/Parser.cs
+++ b/src/NzbDrone.Core/Parser/Parser.cs
@@ -522,7 +522,7 @@ public static ParsedEpisodeInfo ParseTitle(string title)
 
                     if (airMonth != "00" || airDay != "00")
                     {
-                        var fixedDate = string.Format("20{0}.{1}.{2}", airYear, airMonth, airDay);
+                        var fixedDate = $"20{airYear}.{airMonth}.{airDay}";
 
                         simpleTitle = simpleTitle.Replace(sixDigitAirDateMatch.Groups["airdate"].Value, fixedDate);
                     }
@@ -1011,7 +1011,7 @@ private static int ParseNumber(string value)
                 return number;
             }
 
-            throw new FormatException(string.Format("{0} isn't a number", value));
+            throw new FormatException($"{value} isn't a number");
         }
 
         private static decimal ParseDecimal(string value)
@@ -1026,7 +1026,7 @@ private static decimal ParseDecimal(string value)
             }
 
 
-            throw new FormatException(string.Format("{0} isn't a number", value));
+            throw new FormatException($"{value} isn't a number");
         }
     }
 }
diff --git a/src/NzbDrone.Core/Qualities/QualityModel.cs b/src/NzbDrone.Core/Qualities/QualityModel.cs
index 7695464d1..a02bb1a23 100644
--- a/src/NzbDrone.Core/Qualities/QualityModel.cs
+++ b/src/NzbDrone.Core/Qualities/QualityModel.cs
@@ -33,7 +33,7 @@ public QualityModel(Quality quality, Revision revision = null)
 
         public override string ToString()
         {
-            return string.Format("{0} {1}", Quality, Revision);
+            return $"{Quality} {Revision}";
         }
 
         public override int GetHashCode()
diff --git a/src/NzbDrone.Core/Queue/QueueService.cs b/src/NzbDrone.Core/Queue/QueueService.cs
index 5b3342e2a..dfd88cb20 100644
--- a/src/NzbDrone.Core/Queue/QueueService.cs
+++ b/src/NzbDrone.Core/Queue/QueueService.cs
@@ -84,11 +84,11 @@ private Queue MapQueueItem(TrackedDownload trackedDownload, Episode episode)
 
             if (episode != null)
             {
-                queue.Id = HashConverter.GetHashInt31(string.Format("trackedDownload-{0}-ep{1}", trackedDownload.DownloadItem.DownloadId, episode.Id));
+                queue.Id = HashConverter.GetHashInt31($"trackedDownload-{trackedDownload.DownloadItem.DownloadId}-ep{episode.Id}");
             }
             else
             {
-                queue.Id = HashConverter.GetHashInt31(string.Format("trackedDownload-{0}", trackedDownload.DownloadItem.DownloadId));
+                queue.Id = HashConverter.GetHashInt31($"trackedDownload-{trackedDownload.DownloadItem.DownloadId}");
             }
 
             if (queue.Timeleft.HasValue)
diff --git a/src/NzbDrone.Core/Rest/RestException.cs b/src/NzbDrone.Core/Rest/RestException.cs
index 207a20e75..c60b67d32 100644
--- a/src/NzbDrone.Core/Rest/RestException.cs
+++ b/src/NzbDrone.Core/Rest/RestException.cs
@@ -8,7 +8,7 @@ public class RestException : Exception
         public IRestResponse Response { get; private set; }
 
         public RestException(IRestResponse response, IRestClient restClient)
-            : base(string.Format("REST request failed: [{0}] [{1}] at [{2}]", (int)response.StatusCode, response.Request.Method, restClient.BuildUri(response.Request)))
+            : base($"REST request failed: [{(int)response.StatusCode}] [{response.Request.Method}] at [{restClient.BuildUri(response.Request)}]")
         {
             Response = response;
         }
diff --git a/src/NzbDrone.Core/RootFolders/RootFolderService.cs b/src/NzbDrone.Core/RootFolders/RootFolderService.cs
index b88e1e58d..7936a7499 100644
--- a/src/NzbDrone.Core/RootFolders/RootFolderService.cs
+++ b/src/NzbDrone.Core/RootFolders/RootFolderService.cs
@@ -106,7 +106,7 @@ public RootFolder Add(RootFolder rootFolder)
 
             if (!_diskProvider.FolderWritable(rootFolder.Path))
             {
-                throw new UnauthorizedAccessException(string.Format("Root folder path '{0}' is not writable by user '{1}'", rootFolder.Path, Environment.UserName));
+                throw new UnauthorizedAccessException($"Root folder path '{rootFolder.Path}' is not writable by user '{Environment.UserName}'");
             }
 
             _rootFolderRepository.Insert(rootFolder);
diff --git a/src/NzbDrone.Core/TinyTwitter.cs b/src/NzbDrone.Core/TinyTwitter.cs
index a908a7e99..99be51856 100644
--- a/src/NzbDrone.Core/TinyTwitter.cs
+++ b/src/NzbDrone.Core/TinyTwitter.cs
@@ -140,12 +140,12 @@ private string GetRequestUrl()
                 if (method != "GET" || customParameters.Count == 0)
                     return url;
 
-                return string.Format("{0}?{1}", url, GetCustomParametersString());
+                return $"{url}?{GetCustomParametersString()}";
             }
 
             private string GetCustomParametersString()
             {
-                return customParameters.Select(x => string.Format("{0}={1}", x.Key, x.Value)).Join("&");
+                return customParameters.Select(x => $"{x.Key}={x.Value}").Join("&");
             }
 
             private string GenerateAuthorizationHeaderValue(IEnumerable<KeyValuePair<string, string>> parameters, string signature)
@@ -153,7 +153,7 @@ private string GenerateAuthorizationHeaderValue(IEnumerable<KeyValuePair<string,
                 return new StringBuilder("OAuth ")
                     .Append(parameters.Concat(new KeyValuePair<string, string>("oauth_signature", signature))
                                 .Where(x => x.Key.StartsWith("oauth_"))
-                                .Select(x => string.Format("{0}=\"{1}\"", x.Key, x.Value.EncodeRFC3986()))
+                                .Select(x => $"{x.Key}=\"{x.Value.EncodeRFC3986()}\"")
                                 .Join(","))
                     .ToString();
             }
@@ -165,11 +165,11 @@ private string GenerateSignature(IEnumerable<KeyValuePair<string, string>> param
                     .Append(url.EncodeRFC3986()).Append("&")
                     .Append(parameters
                                 .OrderBy(x => x.Key)
-                                .Select(x => string.Format("{0}={1}", x.Key, x.Value))
+                                .Select(x => $"{x.Key}={x.Value}")
                                 .Join("&")
                                 .EncodeRFC3986());
 
-                var signatureKey = string.Format("{0}&{1}", oauth.ConsumerSecret.EncodeRFC3986(), oauth.AccessSecret.EncodeRFC3986());
+                var signatureKey = $"{oauth.ConsumerSecret.EncodeRFC3986()}&{oauth.AccessSecret.EncodeRFC3986()}";
                 var sha1 = new HMACSHA1(Encoding.ASCII.GetBytes(signatureKey));
 
                 var signatureBytes = sha1.ComputeHash(Encoding.ASCII.GetBytes(dataToSign.ToString()));
diff --git a/src/NzbDrone.Core/Tv/Episode.cs b/src/NzbDrone.Core/Tv/Episode.cs
index a54563fb9..9660e837d 100644
--- a/src/NzbDrone.Core/Tv/Episode.cs
+++ b/src/NzbDrone.Core/Tv/Episode.cs
@@ -47,7 +47,7 @@ public Episode()
 
         public override string ToString()
         {
-            return string.Format("[{0}]{1}", Id, Title.NullSafe());
+            return $"[{Id}]{Title.NullSafe()}";
         }
 
         public int CompareTo(object obj)
diff --git a/src/NzbDrone.Core/Tv/EpisodeRepository.cs b/src/NzbDrone.Core/Tv/EpisodeRepository.cs
index efab93031..75a3afce4 100644
--- a/src/NzbDrone.Core/Tv/EpisodeRepository.cs
+++ b/src/NzbDrone.Core/Tv/EpisodeRepository.cs
@@ -211,9 +211,7 @@ private SortBuilder<Episode> EpisodesWhereCutoffUnmetQuery(PagingSpec<Episode> p
                              .AndWhere(e => e.EpisodeFileId != 0)
                              .AndWhere(e => e.SeasonNumber >= startingSeasonNumber)
                              .AndWhere(
-                                String.Format("({0} OR {1})", 
-                                BuildLanguageCutoffWhereClause(languagesBelowCutoff), 
-                                BuildQualityCutoffWhereClause(qualitiesBelowCutoff)))
+                                $"({BuildLanguageCutoffWhereClause(languagesBelowCutoff)} OR {BuildQualityCutoffWhereClause(qualitiesBelowCutoff)})")
                              //.AndWhere(BuildQualityCutoffWhereClause(qualitiesBelowCutoff, languagesBelowCutoff))
                              .OrderBy(pagingSpec.OrderByClause(), pagingSpec.ToSortDirection())
                              .Skip(pagingSpec.PagingOffset())
@@ -222,8 +220,7 @@ private SortBuilder<Episode> EpisodesWhereCutoffUnmetQuery(PagingSpec<Episode> p
 
         private string BuildAirDateUtcCutoffWhereClause(DateTime currentTime)
         {
-            return string.Format("WHERE datetime(strftime('%s', [t0].[AirDateUtc]) + [t1].[RunTime] * 60,  'unixepoch') <= '{0}'",
-                                 currentTime.ToString("yyyy-MM-dd HH:mm:ss"));
+            return $"WHERE datetime(strftime('%s', [t0].[AirDateUtc]) + [t1].[RunTime] * 60,  'unixepoch') <= '{currentTime.ToString("yyyy-MM-dd HH:mm:ss")}'";
         }
 
         private string BuildLanguageCutoffWhereClause(List<LanguagesBelowCutoff> languagesBelowCutoff)
@@ -234,11 +231,11 @@ private string BuildLanguageCutoffWhereClause(List<LanguagesBelowCutoff> languag
             {
                 foreach (var belowCutoff in language.LanguageIds)
                 {
-                    clauses.Add(String.Format("([t1].[LanguageProfileId] = {0} AND [t2].[Language] = {1})", language.ProfileId, belowCutoff));
+                    clauses.Add($"([t1].[LanguageProfileId] = {language.ProfileId} AND [t2].[Language] = {belowCutoff})");
                 }
             }
 
-            return String.Format("({0})", String.Join(" OR ", clauses));
+            return $"({String.Join(" OR ", clauses)})";
         }
 
 
@@ -250,11 +247,11 @@ private string BuildQualityCutoffWhereClause(List<QualitiesBelowCutoff> qualitie
             {
                 foreach (var belowCutoff in profile.QualityIds)
                 {
-                    clauses.Add(string.Format("([t1].[QualityProfileId] = {0} AND [t2].[Quality] LIKE '%_quality_: {1},%')", profile.ProfileId, belowCutoff));
+                    clauses.Add($"([t1].[QualityProfileId] = {profile.ProfileId} AND [t2].[Quality] LIKE '%_quality_: {belowCutoff},%')");
                 }
             }
 
-            return string.Format("({0})", string.Join(" OR ", clauses));
+            return $"({string.Join(" OR ", clauses)})";
         }
 
         private Episode FindOneByAirDate(int seriesId, string date)
diff --git a/src/NzbDrone.Core/Tv/Series.cs b/src/NzbDrone.Core/Tv/Series.cs
index 9de6a86ee..2c2f17741 100644
--- a/src/NzbDrone.Core/Tv/Series.cs
+++ b/src/NzbDrone.Core/Tv/Series.cs
@@ -58,7 +58,7 @@ public Series()
 
         public override string ToString()
         {
-            return string.Format("[{0}][{1}]", TvdbId, Title.NullSafe());
+            return $"[{TvdbId}][{Title.NullSafe()}]";
         }
 
         public void ApplyChanges(Series otherSeries)
diff --git a/src/NzbDrone.Core/Validation/NzbDroneValidationExtensions.cs b/src/NzbDrone.Core/Validation/NzbDroneValidationExtensions.cs
index 648e0316c..09d8bcc35 100644
--- a/src/NzbDrone.Core/Validation/NzbDroneValidationExtensions.cs
+++ b/src/NzbDrone.Core/Validation/NzbDroneValidationExtensions.cs
@@ -26,8 +26,7 @@ public static bool HasErrors(this List<ValidationFailure> list)
         {
             foreach (var item in list)
             {
-                var extended = item as NzbDroneValidationFailure;
-                if (extended != null && extended.IsWarning)
+                if (item is NzbDroneValidationFailure extended && extended.IsWarning)
                 {
                     continue;
                 }
diff --git a/src/NzbDrone.Host/AccessControl/SslAdapter.cs b/src/NzbDrone.Host/AccessControl/SslAdapter.cs
index 12784ba87..9c0327346 100644
--- a/src/NzbDrone.Host/AccessControl/SslAdapter.cs
+++ b/src/NzbDrone.Host/AccessControl/SslAdapter.cs
@@ -49,7 +49,7 @@ public void Register()
         private bool IsRegistered()
         {
             var ipPort = "0.0.0.0:" + _configFileProvider.SslPort;
-            var arguments = string.Format("http show sslcert ipport={0}", ipPort);
+            var arguments = $"http show sslcert ipport={ipPort}";
 
             var output = _netshProvider.Run(arguments);
 
@@ -78,7 +78,7 @@ private bool IsRegistered()
         private void Unregister()
         {
             var ipPort = "0.0.0.0:" + _configFileProvider.SslPort;
-            var arguments = string.Format("http delete sslcert ipport={0}", ipPort);
+            var arguments = $"http delete sslcert ipport={ipPort}";
 
             _netshProvider.Run(arguments);
         }
diff --git a/src/NzbDrone.Host/AccessControl/UrlAcl.cs b/src/NzbDrone.Host/AccessControl/UrlAcl.cs
index 51af167a6..4d09fe25e 100644
--- a/src/NzbDrone.Host/AccessControl/UrlAcl.cs
+++ b/src/NzbDrone.Host/AccessControl/UrlAcl.cs
@@ -7,6 +7,6 @@ public class UrlAcl
         public int Port { get; set; }
         public string UrlBase { get; set; }
 
-        public string Url => string.Format("{0}://{1}:{2}/{3}", Scheme, Address, Port, UrlBase);
+        public string Url => $"{Scheme}://{Address}:{Port}/{UrlBase}";
     }
 }
diff --git a/src/NzbDrone.Host/AccessControl/UrlAclAdapter.cs b/src/NzbDrone.Host/AccessControl/UrlAclAdapter.cs
index ba32e165d..d9e80c4e2 100644
--- a/src/NzbDrone.Host/AccessControl/UrlAclAdapter.cs
+++ b/src/NzbDrone.Host/AccessControl/UrlAclAdapter.cs
@@ -182,7 +182,7 @@ private void GetRegisteredUrls()
 
         private void RegisterUrl(UrlAcl urlAcl)
         {
-            var arguments = string.Format("http add urlacl {0} sddl=D:(A;;GX;;;S-1-1-0)", urlAcl.Url);
+            var arguments = $"http add urlacl {urlAcl.Url} sddl=D:(A;;GX;;;S-1-1-0)";
             _netshProvider.Run(arguments);
         }
 
@@ -203,7 +203,7 @@ private void UnregisterUrl(UrlAcl urlAcl)
         {
             _logger.Trace("Removing URL ACL {0}", urlAcl.Url);
 
-            var arguments = string.Format("http delete urlacl {0}", urlAcl.Url);
+            var arguments = $"http delete urlacl {urlAcl.Url}";
             _netshProvider.Run(arguments);
         }
 
diff --git a/src/NzbDrone.Host/BrowserService.cs b/src/NzbDrone.Host/BrowserService.cs
index 7ccf23b59..e6f4ff047 100644
--- a/src/NzbDrone.Host/BrowserService.cs
+++ b/src/NzbDrone.Host/BrowserService.cs
@@ -28,7 +28,7 @@ public BrowserService(IProcessProvider processProvider, IConfigFileProvider conf
 
         public void LaunchWebUI()
         {
-            var url = string.Format("http://localhost:{0}", _configFileProvider.Port);
+            var url = $"http://localhost:{_configFileProvider.Port}";
             try
             {
                 if (_runtimeInfo.IsUserInteractive)
diff --git a/src/NzbDrone.Integration.Test/IntegrationTestBase.cs b/src/NzbDrone.Integration.Test/IntegrationTestBase.cs
index fe682753f..ff40adbe8 100644
--- a/src/NzbDrone.Integration.Test/IntegrationTestBase.cs
+++ b/src/NzbDrone.Integration.Test/IntegrationTestBase.cs
@@ -292,7 +292,7 @@ public EpisodeFileResource EnsureEpisodeFile(SeriesResource series, int season,
 
             if (result.EpisodeFile == null)
             {
-                var path = Path.Combine(SeriesRootFolder, series.Title, string.Format("Series.S{0}E{1}.{2}.mkv", season, episode, quality.Name));
+                var path = Path.Combine(SeriesRootFolder, series.Title, $"Series.S{season}E{episode}.{quality.Name}.mkv");
 
                 Directory.CreateDirectory(Path.GetDirectoryName(path));
                 File.WriteAllText(path, "Fake Episode");
diff --git a/src/NzbDrone.Mono/Disk/ProcMount.cs b/src/NzbDrone.Mono/Disk/ProcMount.cs
index 154af2971..0d52b6c1a 100644
--- a/src/NzbDrone.Mono/Disk/ProcMount.cs
+++ b/src/NzbDrone.Mono/Disk/ProcMount.cs
@@ -50,7 +50,7 @@ public string VolumeName
                     return Name;
                 }
 
-                return string.Format("{0} ({1})", Name, VolumeLabel);
+                return $"{Name} ({VolumeLabel})";
             }
         }
     }
diff --git a/src/NzbDrone.Test.Common/AutoMoq/AutoMoqer.cs b/src/NzbDrone.Test.Common/AutoMoq/AutoMoqer.cs
index 5c02ae197..dc21c808e 100644
--- a/src/NzbDrone.Test.Common/AutoMoq/AutoMoqer.cs
+++ b/src/NzbDrone.Test.Common/AutoMoq/AutoMoqer.cs
@@ -123,8 +123,7 @@ public void VerifyAllMocks()
         {
             foreach (var registeredMock in _registeredMocks)
             {
-                var mock = registeredMock.Value as Mock;
-                if (mock != null)
+                if (registeredMock.Value is Mock mock)
                     mock.VerifyAll();
             }
         }
diff --git a/src/NzbDrone.Test.Common/ExceptionVerification.cs b/src/NzbDrone.Test.Common/ExceptionVerification.cs
index a60d1297b..1acd67862 100644
--- a/src/NzbDrone.Test.Common/ExceptionVerification.cs
+++ b/src/NzbDrone.Test.Common/ExceptionVerification.cs
@@ -50,10 +50,10 @@ private static string GetLogsString(IEnumerable<LogEventInfo> logs)
                 string exception = "";
                 if (log.Exception != null)
                 {
-                    exception = string.Format("[{0}: {1}]", log.Exception.GetType(), log.Exception.Message);
+                    exception = $"[{log.Exception.GetType()}: {log.Exception.Message}]";
                 }
 
-                errors += Environment.NewLine + string.Format("[{0}] {1}: {2} {3}", log.Level, log.LoggerName, log.FormattedMessage, exception);
+                errors += Environment.NewLine + $"[{log.Level}] {log.LoggerName}: {log.FormattedMessage} {exception}";
             }
             return errors;
         }
@@ -143,8 +143,7 @@ private static void Expected(LogLevel level, int count)
                 if (levelLogs.Count != count)
                 {
 
-                    var message = string.Format("{0} {1}(s) were expected but {2} were logged.\n\r{3}",
-                        count, level, levelLogs.Count, GetLogsString(levelLogs));
+                    var message = $"{count} {level}(s) were expected but {levelLogs.Count} were logged.\n\r{GetLogsString(levelLogs)}";
 
                     message = "\n\r****************************************************************************************\n\r"
                         + message +
diff --git a/src/NzbDrone.Windows/Disk/DiskProvider.cs b/src/NzbDrone.Windows/Disk/DiskProvider.cs
index 14aa624fb..207abe493 100644
--- a/src/NzbDrone.Windows/Disk/DiskProvider.cs
+++ b/src/NzbDrone.Windows/Disk/DiskProvider.cs
@@ -166,7 +166,7 @@ public override bool TryCreateHardLink(string source, string destination)
             }
             catch (Exception ex)
             {
-                Logger.Debug(ex, string.Format("Hardlink '{0}' to '{1}' failed.", source, destination));
+                Logger.Debug(ex, $"Hardlink '{source}' to '{destination}' failed.");
                 return false;
             }
         }
diff --git a/src/NzbDrone/SysTray/SysTrayApp.cs b/src/NzbDrone/SysTray/SysTrayApp.cs
index 6325593e1..07f4cd545 100644
--- a/src/NzbDrone/SysTray/SysTrayApp.cs
+++ b/src/NzbDrone/SysTray/SysTrayApp.cs
@@ -38,7 +38,7 @@ public void Start()
             _trayMenu.MenuItems.Add("-");
             _trayMenu.MenuItems.Add("Exit", OnExit);
 
-            _trayIcon.Text = string.Format("Sonarr - {0}", BuildInfo.Version);
+            _trayIcon.Text = $"Sonarr - {BuildInfo.Version}";
             _trayIcon.Icon = Properties.Resources.NzbDroneIcon;
 
             _trayIcon.ContextMenu = _trayMenu;
diff --git a/src/Sonarr.Api.V3/Logs/LogFileModuleBase.cs b/src/Sonarr.Api.V3/Logs/LogFileModuleBase.cs
index 06abcd840..285bb01e9 100644
--- a/src/Sonarr.Api.V3/Logs/LogFileModuleBase.cs
+++ b/src/Sonarr.Api.V3/Logs/LogFileModuleBase.cs
@@ -44,8 +44,8 @@ private List<LogFileResource> GetLogFilesResponse()
                     Id = i + 1,
                     Filename = filename,
                     LastWriteTime = _diskProvider.FileGetLastWrite(file),
-                    ContentsUrl = string.Format("{0}/api/v3/{1}/{2}", _configFileProvider.UrlBase, Resource, filename),
-                    DownloadUrl = string.Format("{0}/{1}/{2}", _configFileProvider.UrlBase, DownloadUrlRoot, filename)
+                    ContentsUrl = $"{_configFileProvider.UrlBase}/api/v3/{Resource}/{filename}",
+                    DownloadUrl = $"{_configFileProvider.UrlBase}/{DownloadUrlRoot}/{filename}"
                 });
             }
 
diff --git a/src/Sonarr.Api.V3/ProviderModuleBase.cs b/src/Sonarr.Api.V3/ProviderModuleBase.cs
index a96faace1..39484c04e 100644
--- a/src/Sonarr.Api.V3/ProviderModuleBase.cs
+++ b/src/Sonarr.Api.V3/ProviderModuleBase.cs
@@ -117,7 +117,7 @@ private object GetTemplates()
         {
             var defaultDefinitions = _providerFactory.GetDefaultDefinitions().OrderBy(p => p.ImplementationName).ToList();
 
-            var result = new List<TProviderResource>(defaultDefinitions.Count());
+            var result = new List<TProviderResource>(defaultDefinitions.Count);
 
             foreach (var providerDefinition in defaultDefinitions)
             {
diff --git a/src/Sonarr.Api.V3/Series/SeriesStatisticsResource.cs b/src/Sonarr.Api.V3/Series/SeriesStatisticsResource.cs
index a2c797b95..f7ed3ccd5 100644
--- a/src/Sonarr.Api.V3/Series/SeriesStatisticsResource.cs
+++ b/src/Sonarr.Api.V3/Series/SeriesStatisticsResource.cs
@@ -33,7 +33,7 @@ public static SeriesStatisticsResource ToResource(this SeriesStatistics model, L
 
             return new SeriesStatisticsResource
             {
-                SeasonCount = seasons == null ? 0 : seasons.Where(s => s.SeasonNumber > 0).Count(),
+                SeasonCount = seasons == null ? 0 : seasons.Count(s => s.SeasonNumber > 0),
                 EpisodeFileCount = model.EpisodeFileCount,
                 EpisodeCount = model.EpisodeCount,
                 TotalEpisodeCount = model.TotalEpisodeCount,
diff --git a/src/Sonarr.Http/Frontend/Mappers/HtmlMapperBase.cs b/src/Sonarr.Http/Frontend/Mappers/HtmlMapperBase.cs
index 55f5a551d..534309e4b 100644
--- a/src/Sonarr.Http/Frontend/Mappers/HtmlMapperBase.cs
+++ b/src/Sonarr.Http/Frontend/Mappers/HtmlMapperBase.cs
@@ -71,7 +71,7 @@ protected string GetHtmlText()
                     url = cacheBreakProvider.AddCacheBreakerToPath(match.Groups["path"].Value);
                 }
 
-                return string.Format("{0}=\"{1}{2}\"", match.Groups["attribute"].Value, UrlBase, url);
+                return $"{match.Groups["attribute"].Value}=\"{UrlBase}{url}\"";
             });
 
             _generatedContent = text;
diff --git a/src/Sonarr.Http/Mapping/MappingValidation.cs b/src/Sonarr.Http/Mapping/MappingValidation.cs
index 4b055c73f..e37586346 100644
--- a/src/Sonarr.Http/Mapping/MappingValidation.cs
+++ b/src/Sonarr.Http/Mapping/MappingValidation.cs
@@ -45,7 +45,7 @@ private static string GetError(Type resourceType, PropertyInfo modelProperty)
 
             if (resourceProperty.PropertyType != modelProperty.PropertyType && !typeof(RestResource).IsAssignableFrom(resourceProperty.PropertyType))
             {
-                return string.Format("Expected {0}.{1} to have type of {2} but found {3}", resourceType.Name, resourceProperty.Name, modelProperty.PropertyType, resourceProperty.PropertyType);
+                return $"Expected {resourceType.Name}.{resourceProperty.Name} to have type of {modelProperty.PropertyType} but found {resourceProperty.PropertyType}";
             }
 
             return null;
diff --git a/src/Sonarr.Http/Validation/EmptyCollectionValidator.cs b/src/Sonarr.Http/Validation/EmptyCollectionValidator.cs
index b91604e79..287b103e3 100644
--- a/src/Sonarr.Http/Validation/EmptyCollectionValidator.cs
+++ b/src/Sonarr.Http/Validation/EmptyCollectionValidator.cs
@@ -15,9 +15,7 @@ protected override bool IsValid(PropertyValidatorContext context)
         {
             if (context.PropertyValue == null) return true;
 
-            var collection = context.PropertyValue as IEnumerable<T>;
-
-            return collection != null && collection.Empty();
+            return context.PropertyValue is IEnumerable<T> collection && collection.Empty();
         }
     }
 }
