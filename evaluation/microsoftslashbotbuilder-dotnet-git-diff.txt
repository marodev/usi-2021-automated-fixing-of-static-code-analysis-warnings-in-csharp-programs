diff --git a/FunctionalTests/Microsoft.Bot.Builder.FunctionalTests/DirectLineClientTests.cs b/FunctionalTests/Microsoft.Bot.Builder.FunctionalTests/DirectLineClientTests.cs
index f74c1af28..e6c5c15e9 100644
--- a/FunctionalTests/Microsoft.Bot.Builder.FunctionalTests/DirectLineClientTests.cs
+++ b/FunctionalTests/Microsoft.Bot.Builder.FunctionalTests/DirectLineClientTests.cs
@@ -77,7 +77,7 @@ private static async Task<string> ReadBotMessagesAsync(DirectLineClient client,
             int retries = 3;
 
             // Poll the bot for replies once per second.
-            while (answer.Equals(string.Empty) && retries-- > 0)
+            while (string.IsNullOrEmpty(answer)&& retries-- > 0)
             {
                 // Retrieve the activity sent from the bot.
                 var activitySet = await client.Conversations.GetActivitiesAsync(conversationId, watermark);
@@ -97,7 +97,7 @@ private static async Task<string> ReadBotMessagesAsync(DirectLineClient client,
                     }
                 }
 
-                if (answer.Equals(string.Empty))
+                if (string.IsNullOrEmpty(answer))
                 {
                     // Wait for one second before polling the bot again.
                     await Task.Delay(TimeSpan.FromSeconds(1)).ConfigureAwait(false);
diff --git a/FunctionalTests/Microsoft.Bot.Builder.FunctionalTests/DirectLineSpeechTests.cs b/FunctionalTests/Microsoft.Bot.Builder.FunctionalTests/DirectLineSpeechTests.cs
index c500747aa..0f2bb1487 100644
--- a/FunctionalTests/Microsoft.Bot.Builder.FunctionalTests/DirectLineSpeechTests.cs
+++ b/FunctionalTests/Microsoft.Bot.Builder.FunctionalTests/DirectLineSpeechTests.cs
@@ -78,7 +78,7 @@ public async Task SendDirectLineSpeechVoiceMessage()
 
             // Assert
             Assert.IsNotNull(botAnswer);
-            Assert.AreEqual(string.Format("Echo: {0}.", SoundFileMessage), botAnswer.Message);
+            Assert.AreEqual($"Echo: {SoundFileMessage}.", botAnswer.Message);
         }
 
         /// <summary>
diff --git a/libraries/AdaptiveExpressions/BuiltinFunctions/IsDefinite.cs b/libraries/AdaptiveExpressions/BuiltinFunctions/IsDefinite.cs
index 7f0e312da..9acaa1524 100644
--- a/libraries/AdaptiveExpressions/BuiltinFunctions/IsDefinite.cs
+++ b/libraries/AdaptiveExpressions/BuiltinFunctions/IsDefinite.cs
@@ -34,7 +34,7 @@ private static (object value, string error) Evaluator(Expression expression, IMe
 
             if (error == null)
             {
-                value = parsed != null && parsed.Year != null && parsed.Month != null && parsed.DayOfMonth != null;
+                value = parsed?.Year != null && parsed.Month != null && parsed.DayOfMonth != null;
             }
 
             return (value, error);
diff --git a/libraries/AdaptiveExpressions/Expression.cs b/libraries/AdaptiveExpressions/Expression.cs
index f781e84ff..b2e4b5db9 100644
--- a/libraries/AdaptiveExpressions/Expression.cs
+++ b/libraries/AdaptiveExpressions/Expression.cs
@@ -229,9 +229,9 @@ public static Expression SetPathToValue(Expression property, Expression value)
         /// <returns>New expression.</returns>
         public static Expression SetPathToValue(Expression property, object value)
         {
-            if (value is Expression)
+            if (value is Expression expression)
             {
-                return Expression.MakeExpression(ExpressionType.SetPathToValue, property, (Expression)value);
+                return Expression.MakeExpression(ExpressionType.SetPathToValue, property, expression);
             }
             else
             {
diff --git a/libraries/AdaptiveExpressions/FunctionUtils.cs b/libraries/AdaptiveExpressions/FunctionUtils.cs
index a199c7a35..097c7660e 100644
--- a/libraries/AdaptiveExpressions/FunctionUtils.cs
+++ b/libraries/AdaptiveExpressions/FunctionUtils.cs
@@ -810,7 +810,7 @@ internal static bool TryAccessProperty(object instance, string property, out obj
                     if (!idict.TryGetValue(property, out value))
                     {
                         // fall back to case insensitive
-                        var prop = idict.Keys.Where(k => k.ToLowerInvariant() == property).SingleOrDefault();
+                        var prop = idict.Keys.SingleOrDefault(k => k.ToLowerInvariant() == property);
                         if (prop != null)
                         {
                             isPresent = idict.TryGetValue(prop, out value);
diff --git a/libraries/AdaptiveExpressions/Generated/CommonRegexParser.cs b/libraries/AdaptiveExpressions/Generated/CommonRegexParser.cs
index 034ce2318..0fc6d5887 100644
--- a/libraries/AdaptiveExpressions/Generated/CommonRegexParser.cs
+++ b/libraries/AdaptiveExpressions/Generated/CommonRegexParser.cs
@@ -144,16 +144,13 @@ public ParseContext(ParserRuleContext parent, int invokingState)
 		}
 		public override int RuleIndex { get { return RULE_parse; } }
 		public override void EnterRule(IParseTreeListener listener) {
-			ICommonRegexListener typedListener = listener as ICommonRegexListener;
-			if (typedListener != null) typedListener.EnterParse(this);
+			if (listener is ICommonRegexListener typedListener) typedListener.EnterParse(this);
 		}
 		public override void ExitRule(IParseTreeListener listener) {
-			ICommonRegexListener typedListener = listener as ICommonRegexListener;
-			if (typedListener != null) typedListener.ExitParse(this);
+			if (listener is ICommonRegexListener typedListener) typedListener.ExitParse(this);
 		}
 		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
-			ICommonRegexVisitor<TResult> typedVisitor = visitor as ICommonRegexVisitor<TResult>;
-			if (typedVisitor != null) return typedVisitor.VisitParse(this);
+			if (visitor is ICommonRegexVisitor<TResult> typedVisitor) return typedVisitor.VisitParse(this);
 			else return visitor.VisitChildren(this);
 		}
 	}
@@ -197,16 +194,13 @@ public AlternationContext(ParserRuleContext parent, int invokingState)
 		}
 		public override int RuleIndex { get { return RULE_alternation; } }
 		public override void EnterRule(IParseTreeListener listener) {
-			ICommonRegexListener typedListener = listener as ICommonRegexListener;
-			if (typedListener != null) typedListener.EnterAlternation(this);
+			if (listener is ICommonRegexListener typedListener) typedListener.EnterAlternation(this);
 		}
 		public override void ExitRule(IParseTreeListener listener) {
-			ICommonRegexListener typedListener = listener as ICommonRegexListener;
-			if (typedListener != null) typedListener.ExitAlternation(this);
+			if (listener is ICommonRegexListener typedListener) typedListener.ExitAlternation(this);
 		}
 		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
-			ICommonRegexVisitor<TResult> typedVisitor = visitor as ICommonRegexVisitor<TResult>;
-			if (typedVisitor != null) return typedVisitor.VisitAlternation(this);
+			if (visitor is ICommonRegexVisitor<TResult> typedVisitor) return typedVisitor.VisitAlternation(this);
 			else return visitor.VisitChildren(this);
 		}
 	}
@@ -260,16 +254,13 @@ public ExprContext(ParserRuleContext parent, int invokingState)
 		}
 		public override int RuleIndex { get { return RULE_expr; } }
 		public override void EnterRule(IParseTreeListener listener) {
-			ICommonRegexListener typedListener = listener as ICommonRegexListener;
-			if (typedListener != null) typedListener.EnterExpr(this);
+			if (listener is ICommonRegexListener typedListener) typedListener.EnterExpr(this);
 		}
 		public override void ExitRule(IParseTreeListener listener) {
-			ICommonRegexListener typedListener = listener as ICommonRegexListener;
-			if (typedListener != null) typedListener.ExitExpr(this);
+			if (listener is ICommonRegexListener typedListener) typedListener.ExitExpr(this);
 		}
 		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
-			ICommonRegexVisitor<TResult> typedVisitor = visitor as ICommonRegexVisitor<TResult>;
-			if (typedVisitor != null) return typedVisitor.VisitExpr(this);
+			if (visitor is ICommonRegexVisitor<TResult> typedVisitor) return typedVisitor.VisitExpr(this);
 			else return visitor.VisitChildren(this);
 		}
 	}
@@ -321,16 +312,13 @@ public ElementContext(ParserRuleContext parent, int invokingState)
 		}
 		public override int RuleIndex { get { return RULE_element; } }
 		public override void EnterRule(IParseTreeListener listener) {
-			ICommonRegexListener typedListener = listener as ICommonRegexListener;
-			if (typedListener != null) typedListener.EnterElement(this);
+			if (listener is ICommonRegexListener typedListener) typedListener.EnterElement(this);
 		}
 		public override void ExitRule(IParseTreeListener listener) {
-			ICommonRegexListener typedListener = listener as ICommonRegexListener;
-			if (typedListener != null) typedListener.ExitElement(this);
+			if (listener is ICommonRegexListener typedListener) typedListener.ExitElement(this);
 		}
 		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
-			ICommonRegexVisitor<TResult> typedVisitor = visitor as ICommonRegexVisitor<TResult>;
-			if (typedVisitor != null) return typedVisitor.VisitElement(this);
+			if (visitor is ICommonRegexVisitor<TResult> typedVisitor) return typedVisitor.VisitElement(this);
 			else return visitor.VisitChildren(this);
 		}
 	}
@@ -387,16 +375,13 @@ public QuantifierContext(ParserRuleContext parent, int invokingState)
 		}
 		public override int RuleIndex { get { return RULE_quantifier; } }
 		public override void EnterRule(IParseTreeListener listener) {
-			ICommonRegexListener typedListener = listener as ICommonRegexListener;
-			if (typedListener != null) typedListener.EnterQuantifier(this);
+			if (listener is ICommonRegexListener typedListener) typedListener.EnterQuantifier(this);
 		}
 		public override void ExitRule(IParseTreeListener listener) {
-			ICommonRegexListener typedListener = listener as ICommonRegexListener;
-			if (typedListener != null) typedListener.ExitQuantifier(this);
+			if (listener is ICommonRegexListener typedListener) typedListener.ExitQuantifier(this);
 		}
 		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
-			ICommonRegexVisitor<TResult> typedVisitor = visitor as ICommonRegexVisitor<TResult>;
-			if (typedVisitor != null) return typedVisitor.VisitQuantifier(this);
+			if (visitor is ICommonRegexVisitor<TResult> typedVisitor) return typedVisitor.VisitQuantifier(this);
 			else return visitor.VisitChildren(this);
 		}
 	}
@@ -482,16 +467,13 @@ public Quantifier_typeContext(ParserRuleContext parent, int invokingState)
 		}
 		public override int RuleIndex { get { return RULE_quantifier_type; } }
 		public override void EnterRule(IParseTreeListener listener) {
-			ICommonRegexListener typedListener = listener as ICommonRegexListener;
-			if (typedListener != null) typedListener.EnterQuantifier_type(this);
+			if (listener is ICommonRegexListener typedListener) typedListener.EnterQuantifier_type(this);
 		}
 		public override void ExitRule(IParseTreeListener listener) {
-			ICommonRegexListener typedListener = listener as ICommonRegexListener;
-			if (typedListener != null) typedListener.ExitQuantifier_type(this);
+			if (listener is ICommonRegexListener typedListener) typedListener.ExitQuantifier_type(this);
 		}
 		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
-			ICommonRegexVisitor<TResult> typedVisitor = visitor as ICommonRegexVisitor<TResult>;
-			if (typedVisitor != null) return typedVisitor.VisitQuantifier_type(this);
+			if (visitor is ICommonRegexVisitor<TResult> typedVisitor) return typedVisitor.VisitQuantifier_type(this);
 			else return visitor.VisitChildren(this);
 		}
 	}
@@ -655,16 +637,13 @@ public Character_classContext(ParserRuleContext parent, int invokingState)
 		}
 		public override int RuleIndex { get { return RULE_character_class; } }
 		public override void EnterRule(IParseTreeListener listener) {
-			ICommonRegexListener typedListener = listener as ICommonRegexListener;
-			if (typedListener != null) typedListener.EnterCharacter_class(this);
+			if (listener is ICommonRegexListener typedListener) typedListener.EnterCharacter_class(this);
 		}
 		public override void ExitRule(IParseTreeListener listener) {
-			ICommonRegexListener typedListener = listener as ICommonRegexListener;
-			if (typedListener != null) typedListener.ExitCharacter_class(this);
+			if (listener is ICommonRegexListener typedListener) typedListener.ExitCharacter_class(this);
 		}
 		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
-			ICommonRegexVisitor<TResult> typedVisitor = visitor as ICommonRegexVisitor<TResult>;
-			if (typedVisitor != null) return typedVisitor.VisitCharacter_class(this);
+			if (visitor is ICommonRegexVisitor<TResult> typedVisitor) return typedVisitor.VisitCharacter_class(this);
 			else return visitor.VisitChildren(this);
 		}
 	}
@@ -750,16 +729,13 @@ public CaptureContext(ParserRuleContext parent, int invokingState)
 		}
 		public override int RuleIndex { get { return RULE_capture; } }
 		public override void EnterRule(IParseTreeListener listener) {
-			ICommonRegexListener typedListener = listener as ICommonRegexListener;
-			if (typedListener != null) typedListener.EnterCapture(this);
+			if (listener is ICommonRegexListener typedListener) typedListener.EnterCapture(this);
 		}
 		public override void ExitRule(IParseTreeListener listener) {
-			ICommonRegexListener typedListener = listener as ICommonRegexListener;
-			if (typedListener != null) typedListener.ExitCapture(this);
+			if (listener is ICommonRegexListener typedListener) typedListener.ExitCapture(this);
 		}
 		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
-			ICommonRegexVisitor<TResult> typedVisitor = visitor as ICommonRegexVisitor<TResult>;
-			if (typedVisitor != null) return typedVisitor.VisitCapture(this);
+			if (visitor is ICommonRegexVisitor<TResult> typedVisitor) return typedVisitor.VisitCapture(this);
 			else return visitor.VisitChildren(this);
 		}
 	}
@@ -819,16 +795,13 @@ public Non_captureContext(ParserRuleContext parent, int invokingState)
 		}
 		public override int RuleIndex { get { return RULE_non_capture; } }
 		public override void EnterRule(IParseTreeListener listener) {
-			ICommonRegexListener typedListener = listener as ICommonRegexListener;
-			if (typedListener != null) typedListener.EnterNon_capture(this);
+			if (listener is ICommonRegexListener typedListener) typedListener.EnterNon_capture(this);
 		}
 		public override void ExitRule(IParseTreeListener listener) {
-			ICommonRegexListener typedListener = listener as ICommonRegexListener;
-			if (typedListener != null) typedListener.ExitNon_capture(this);
+			if (listener is ICommonRegexListener typedListener) typedListener.ExitNon_capture(this);
 		}
 		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
-			ICommonRegexVisitor<TResult> typedVisitor = visitor as ICommonRegexVisitor<TResult>;
-			if (typedVisitor != null) return typedVisitor.VisitNon_capture(this);
+			if (visitor is ICommonRegexVisitor<TResult> typedVisitor) return typedVisitor.VisitNon_capture(this);
 			else return visitor.VisitChildren(this);
 		}
 	}
@@ -874,16 +847,13 @@ public OptionContext(ParserRuleContext parent, int invokingState)
 		}
 		public override int RuleIndex { get { return RULE_option; } }
 		public override void EnterRule(IParseTreeListener listener) {
-			ICommonRegexListener typedListener = listener as ICommonRegexListener;
-			if (typedListener != null) typedListener.EnterOption(this);
+			if (listener is ICommonRegexListener typedListener) typedListener.EnterOption(this);
 		}
 		public override void ExitRule(IParseTreeListener listener) {
-			ICommonRegexListener typedListener = listener as ICommonRegexListener;
-			if (typedListener != null) typedListener.ExitOption(this);
+			if (listener is ICommonRegexListener typedListener) typedListener.ExitOption(this);
 		}
 		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
-			ICommonRegexVisitor<TResult> typedVisitor = visitor as ICommonRegexVisitor<TResult>;
-			if (typedVisitor != null) return typedVisitor.VisitOption(this);
+			if (visitor is ICommonRegexVisitor<TResult> typedVisitor) return typedVisitor.VisitOption(this);
 			else return visitor.VisitChildren(this);
 		}
 	}
@@ -935,16 +905,13 @@ public Option_flagContext(ParserRuleContext parent, int invokingState)
 		}
 		public override int RuleIndex { get { return RULE_option_flag; } }
 		public override void EnterRule(IParseTreeListener listener) {
-			ICommonRegexListener typedListener = listener as ICommonRegexListener;
-			if (typedListener != null) typedListener.EnterOption_flag(this);
+			if (listener is ICommonRegexListener typedListener) typedListener.EnterOption_flag(this);
 		}
 		public override void ExitRule(IParseTreeListener listener) {
-			ICommonRegexListener typedListener = listener as ICommonRegexListener;
-			if (typedListener != null) typedListener.ExitOption_flag(this);
+			if (listener is ICommonRegexListener typedListener) typedListener.ExitOption_flag(this);
 		}
 		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
-			ICommonRegexVisitor<TResult> typedVisitor = visitor as ICommonRegexVisitor<TResult>;
-			if (typedVisitor != null) return typedVisitor.VisitOption_flag(this);
+			if (visitor is ICommonRegexVisitor<TResult> typedVisitor) return typedVisitor.VisitOption_flag(this);
 			else return visitor.VisitChildren(this);
 		}
 	}
@@ -1007,16 +974,13 @@ public AtomContext(ParserRuleContext parent, int invokingState)
 		}
 		public override int RuleIndex { get { return RULE_atom; } }
 		public override void EnterRule(IParseTreeListener listener) {
-			ICommonRegexListener typedListener = listener as ICommonRegexListener;
-			if (typedListener != null) typedListener.EnterAtom(this);
+			if (listener is ICommonRegexListener typedListener) typedListener.EnterAtom(this);
 		}
 		public override void ExitRule(IParseTreeListener listener) {
-			ICommonRegexListener typedListener = listener as ICommonRegexListener;
-			if (typedListener != null) typedListener.ExitAtom(this);
+			if (listener is ICommonRegexListener typedListener) typedListener.ExitAtom(this);
 		}
 		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
-			ICommonRegexVisitor<TResult> typedVisitor = visitor as ICommonRegexVisitor<TResult>;
-			if (typedVisitor != null) return typedVisitor.VisitAtom(this);
+			if (visitor is ICommonRegexVisitor<TResult> typedVisitor) return typedVisitor.VisitAtom(this);
 			else return visitor.VisitChildren(this);
 		}
 	}
@@ -1113,16 +1077,13 @@ public Cc_atomContext(ParserRuleContext parent, int invokingState)
 		}
 		public override int RuleIndex { get { return RULE_cc_atom; } }
 		public override void EnterRule(IParseTreeListener listener) {
-			ICommonRegexListener typedListener = listener as ICommonRegexListener;
-			if (typedListener != null) typedListener.EnterCc_atom(this);
+			if (listener is ICommonRegexListener typedListener) typedListener.EnterCc_atom(this);
 		}
 		public override void ExitRule(IParseTreeListener listener) {
-			ICommonRegexListener typedListener = listener as ICommonRegexListener;
-			if (typedListener != null) typedListener.ExitCc_atom(this);
+			if (listener is ICommonRegexListener typedListener) typedListener.ExitCc_atom(this);
 		}
 		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
-			ICommonRegexVisitor<TResult> typedVisitor = visitor as ICommonRegexVisitor<TResult>;
-			if (typedVisitor != null) return typedVisitor.VisitCc_atom(this);
+			if (visitor is ICommonRegexVisitor<TResult> typedVisitor) return typedVisitor.VisitCc_atom(this);
 			else return visitor.VisitChildren(this);
 		}
 	}
@@ -1184,16 +1145,13 @@ public Shared_atomContext(ParserRuleContext parent, int invokingState)
 		}
 		public override int RuleIndex { get { return RULE_shared_atom; } }
 		public override void EnterRule(IParseTreeListener listener) {
-			ICommonRegexListener typedListener = listener as ICommonRegexListener;
-			if (typedListener != null) typedListener.EnterShared_atom(this);
+			if (listener is ICommonRegexListener typedListener) typedListener.EnterShared_atom(this);
 		}
 		public override void ExitRule(IParseTreeListener listener) {
-			ICommonRegexListener typedListener = listener as ICommonRegexListener;
-			if (typedListener != null) typedListener.ExitShared_atom(this);
+			if (listener is ICommonRegexListener typedListener) typedListener.ExitShared_atom(this);
 		}
 		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
-			ICommonRegexVisitor<TResult> typedVisitor = visitor as ICommonRegexVisitor<TResult>;
-			if (typedVisitor != null) return typedVisitor.VisitShared_atom(this);
+			if (visitor is ICommonRegexVisitor<TResult> typedVisitor) return typedVisitor.VisitShared_atom(this);
 			else return visitor.VisitChildren(this);
 		}
 	}
@@ -1239,16 +1197,13 @@ public LiteralContext(ParserRuleContext parent, int invokingState)
 		}
 		public override int RuleIndex { get { return RULE_literal; } }
 		public override void EnterRule(IParseTreeListener listener) {
-			ICommonRegexListener typedListener = listener as ICommonRegexListener;
-			if (typedListener != null) typedListener.EnterLiteral(this);
+			if (listener is ICommonRegexListener typedListener) typedListener.EnterLiteral(this);
 		}
 		public override void ExitRule(IParseTreeListener listener) {
-			ICommonRegexListener typedListener = listener as ICommonRegexListener;
-			if (typedListener != null) typedListener.ExitLiteral(this);
+			if (listener is ICommonRegexListener typedListener) typedListener.ExitLiteral(this);
 		}
 		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
-			ICommonRegexVisitor<TResult> typedVisitor = visitor as ICommonRegexVisitor<TResult>;
-			if (typedVisitor != null) return typedVisitor.VisitLiteral(this);
+			if (visitor is ICommonRegexVisitor<TResult> typedVisitor) return typedVisitor.VisitLiteral(this);
 			else return visitor.VisitChildren(this);
 		}
 	}
@@ -1393,16 +1348,13 @@ public Cc_literalContext(ParserRuleContext parent, int invokingState)
 		}
 		public override int RuleIndex { get { return RULE_cc_literal; } }
 		public override void EnterRule(IParseTreeListener listener) {
-			ICommonRegexListener typedListener = listener as ICommonRegexListener;
-			if (typedListener != null) typedListener.EnterCc_literal(this);
+			if (listener is ICommonRegexListener typedListener) typedListener.EnterCc_literal(this);
 		}
 		public override void ExitRule(IParseTreeListener listener) {
-			ICommonRegexListener typedListener = listener as ICommonRegexListener;
-			if (typedListener != null) typedListener.ExitCc_literal(this);
+			if (listener is ICommonRegexListener typedListener) typedListener.ExitCc_literal(this);
 		}
 		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
-			ICommonRegexVisitor<TResult> typedVisitor = visitor as ICommonRegexVisitor<TResult>;
-			if (typedVisitor != null) return typedVisitor.VisitCc_literal(this);
+			if (visitor is ICommonRegexVisitor<TResult> typedVisitor) return typedVisitor.VisitCc_literal(this);
 			else return visitor.VisitChildren(this);
 		}
 	}
@@ -1620,16 +1572,13 @@ public Shared_literalContext(ParserRuleContext parent, int invokingState)
 		}
 		public override int RuleIndex { get { return RULE_shared_literal; } }
 		public override void EnterRule(IParseTreeListener listener) {
-			ICommonRegexListener typedListener = listener as ICommonRegexListener;
-			if (typedListener != null) typedListener.EnterShared_literal(this);
+			if (listener is ICommonRegexListener typedListener) typedListener.EnterShared_literal(this);
 		}
 		public override void ExitRule(IParseTreeListener listener) {
-			ICommonRegexListener typedListener = listener as ICommonRegexListener;
-			if (typedListener != null) typedListener.ExitShared_literal(this);
+			if (listener is ICommonRegexListener typedListener) typedListener.ExitShared_literal(this);
 		}
 		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
-			ICommonRegexVisitor<TResult> typedVisitor = visitor as ICommonRegexVisitor<TResult>;
-			if (typedVisitor != null) return typedVisitor.VisitShared_literal(this);
+			if (visitor is ICommonRegexVisitor<TResult> typedVisitor) return typedVisitor.VisitShared_literal(this);
 			else return visitor.VisitChildren(this);
 		}
 	}
@@ -1883,16 +1832,13 @@ public NumberContext(ParserRuleContext parent, int invokingState)
 		}
 		public override int RuleIndex { get { return RULE_number; } }
 		public override void EnterRule(IParseTreeListener listener) {
-			ICommonRegexListener typedListener = listener as ICommonRegexListener;
-			if (typedListener != null) typedListener.EnterNumber(this);
+			if (listener is ICommonRegexListener typedListener) typedListener.EnterNumber(this);
 		}
 		public override void ExitRule(IParseTreeListener listener) {
-			ICommonRegexListener typedListener = listener as ICommonRegexListener;
-			if (typedListener != null) typedListener.ExitNumber(this);
+			if (listener is ICommonRegexListener typedListener) typedListener.ExitNumber(this);
 		}
 		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
-			ICommonRegexVisitor<TResult> typedVisitor = visitor as ICommonRegexVisitor<TResult>;
-			if (typedVisitor != null) return typedVisitor.VisitNumber(this);
+			if (visitor is ICommonRegexVisitor<TResult> typedVisitor) return typedVisitor.VisitNumber(this);
 			else return visitor.VisitChildren(this);
 		}
 	}
@@ -1936,16 +1882,13 @@ public Octal_charContext(ParserRuleContext parent, int invokingState)
 		}
 		public override int RuleIndex { get { return RULE_octal_char; } }
 		public override void EnterRule(IParseTreeListener listener) {
-			ICommonRegexListener typedListener = listener as ICommonRegexListener;
-			if (typedListener != null) typedListener.EnterOctal_char(this);
+			if (listener is ICommonRegexListener typedListener) typedListener.EnterOctal_char(this);
 		}
 		public override void ExitRule(IParseTreeListener listener) {
-			ICommonRegexListener typedListener = listener as ICommonRegexListener;
-			if (typedListener != null) typedListener.ExitOctal_char(this);
+			if (listener is ICommonRegexListener typedListener) typedListener.ExitOctal_char(this);
 		}
 		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
-			ICommonRegexVisitor<TResult> typedVisitor = visitor as ICommonRegexVisitor<TResult>;
-			if (typedVisitor != null) return typedVisitor.VisitOctal_char(this);
+			if (visitor is ICommonRegexVisitor<TResult> typedVisitor) return typedVisitor.VisitOctal_char(this);
 			else return visitor.VisitChildren(this);
 		}
 	}
@@ -2013,16 +1956,13 @@ public Octal_digitContext(ParserRuleContext parent, int invokingState)
 		}
 		public override int RuleIndex { get { return RULE_octal_digit; } }
 		public override void EnterRule(IParseTreeListener listener) {
-			ICommonRegexListener typedListener = listener as ICommonRegexListener;
-			if (typedListener != null) typedListener.EnterOctal_digit(this);
+			if (listener is ICommonRegexListener typedListener) typedListener.EnterOctal_digit(this);
 		}
 		public override void ExitRule(IParseTreeListener listener) {
-			ICommonRegexListener typedListener = listener as ICommonRegexListener;
-			if (typedListener != null) typedListener.ExitOctal_digit(this);
+			if (listener is ICommonRegexListener typedListener) typedListener.ExitOctal_digit(this);
 		}
 		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
-			ICommonRegexVisitor<TResult> typedVisitor = visitor as ICommonRegexVisitor<TResult>;
-			if (typedVisitor != null) return typedVisitor.VisitOctal_digit(this);
+			if (visitor is ICommonRegexVisitor<TResult> typedVisitor) return typedVisitor.VisitOctal_digit(this);
 			else return visitor.VisitChildren(this);
 		}
 	}
@@ -2070,16 +2010,13 @@ public DigitsContext(ParserRuleContext parent, int invokingState)
 		}
 		public override int RuleIndex { get { return RULE_digits; } }
 		public override void EnterRule(IParseTreeListener listener) {
-			ICommonRegexListener typedListener = listener as ICommonRegexListener;
-			if (typedListener != null) typedListener.EnterDigits(this);
+			if (listener is ICommonRegexListener typedListener) typedListener.EnterDigits(this);
 		}
 		public override void ExitRule(IParseTreeListener listener) {
-			ICommonRegexListener typedListener = listener as ICommonRegexListener;
-			if (typedListener != null) typedListener.ExitDigits(this);
+			if (listener is ICommonRegexListener typedListener) typedListener.ExitDigits(this);
 		}
 		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
-			ICommonRegexVisitor<TResult> typedVisitor = visitor as ICommonRegexVisitor<TResult>;
-			if (typedVisitor != null) return typedVisitor.VisitDigits(this);
+			if (visitor is ICommonRegexVisitor<TResult> typedVisitor) return typedVisitor.VisitDigits(this);
 			else return visitor.VisitChildren(this);
 		}
 	}
@@ -2135,16 +2072,13 @@ public DigitContext(ParserRuleContext parent, int invokingState)
 		}
 		public override int RuleIndex { get { return RULE_digit; } }
 		public override void EnterRule(IParseTreeListener listener) {
-			ICommonRegexListener typedListener = listener as ICommonRegexListener;
-			if (typedListener != null) typedListener.EnterDigit(this);
+			if (listener is ICommonRegexListener typedListener) typedListener.EnterDigit(this);
 		}
 		public override void ExitRule(IParseTreeListener listener) {
-			ICommonRegexListener typedListener = listener as ICommonRegexListener;
-			if (typedListener != null) typedListener.ExitDigit(this);
+			if (listener is ICommonRegexListener typedListener) typedListener.ExitDigit(this);
 		}
 		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
-			ICommonRegexVisitor<TResult> typedVisitor = visitor as ICommonRegexVisitor<TResult>;
-			if (typedVisitor != null) return typedVisitor.VisitDigit(this);
+			if (visitor is ICommonRegexVisitor<TResult> typedVisitor) return typedVisitor.VisitDigit(this);
 			else return visitor.VisitChildren(this);
 		}
 	}
@@ -2189,16 +2123,13 @@ public NameContext(ParserRuleContext parent, int invokingState)
 		}
 		public override int RuleIndex { get { return RULE_name; } }
 		public override void EnterRule(IParseTreeListener listener) {
-			ICommonRegexListener typedListener = listener as ICommonRegexListener;
-			if (typedListener != null) typedListener.EnterName(this);
+			if (listener is ICommonRegexListener typedListener) typedListener.EnterName(this);
 		}
 		public override void ExitRule(IParseTreeListener listener) {
-			ICommonRegexListener typedListener = listener as ICommonRegexListener;
-			if (typedListener != null) typedListener.ExitName(this);
+			if (listener is ICommonRegexListener typedListener) typedListener.ExitName(this);
 		}
 		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
-			ICommonRegexVisitor<TResult> typedVisitor = visitor as ICommonRegexVisitor<TResult>;
-			if (typedVisitor != null) return typedVisitor.VisitName(this);
+			if (visitor is ICommonRegexVisitor<TResult> typedVisitor) return typedVisitor.VisitName(this);
 			else return visitor.VisitChildren(this);
 		}
 	}
@@ -2247,16 +2178,13 @@ public Alpha_numsContext(ParserRuleContext parent, int invokingState)
 		}
 		public override int RuleIndex { get { return RULE_alpha_nums; } }
 		public override void EnterRule(IParseTreeListener listener) {
-			ICommonRegexListener typedListener = listener as ICommonRegexListener;
-			if (typedListener != null) typedListener.EnterAlpha_nums(this);
+			if (listener is ICommonRegexListener typedListener) typedListener.EnterAlpha_nums(this);
 		}
 		public override void ExitRule(IParseTreeListener listener) {
-			ICommonRegexListener typedListener = listener as ICommonRegexListener;
-			if (typedListener != null) typedListener.ExitAlpha_nums(this);
+			if (listener is ICommonRegexListener typedListener) typedListener.ExitAlpha_nums(this);
 		}
 		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
-			ICommonRegexVisitor<TResult> typedVisitor = visitor as ICommonRegexVisitor<TResult>;
-			if (typedVisitor != null) return typedVisitor.VisitAlpha_nums(this);
+			if (visitor is ICommonRegexVisitor<TResult> typedVisitor) return typedVisitor.VisitAlpha_nums(this);
 			else return visitor.VisitChildren(this);
 		}
 	}
@@ -2453,16 +2381,13 @@ public Non_close_parensContext(ParserRuleContext parent, int invokingState)
 		}
 		public override int RuleIndex { get { return RULE_non_close_parens; } }
 		public override void EnterRule(IParseTreeListener listener) {
-			ICommonRegexListener typedListener = listener as ICommonRegexListener;
-			if (typedListener != null) typedListener.EnterNon_close_parens(this);
+			if (listener is ICommonRegexListener typedListener) typedListener.EnterNon_close_parens(this);
 		}
 		public override void ExitRule(IParseTreeListener listener) {
-			ICommonRegexListener typedListener = listener as ICommonRegexListener;
-			if (typedListener != null) typedListener.ExitNon_close_parens(this);
+			if (listener is ICommonRegexListener typedListener) typedListener.ExitNon_close_parens(this);
 		}
 		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
-			ICommonRegexVisitor<TResult> typedVisitor = visitor as ICommonRegexVisitor<TResult>;
-			if (typedVisitor != null) return typedVisitor.VisitNon_close_parens(this);
+			if (visitor is ICommonRegexVisitor<TResult> typedVisitor) return typedVisitor.VisitNon_close_parens(this);
 			else return visitor.VisitChildren(this);
 		}
 	}
@@ -2509,16 +2434,13 @@ public Non_close_parenContext(ParserRuleContext parent, int invokingState)
 		}
 		public override int RuleIndex { get { return RULE_non_close_paren; } }
 		public override void EnterRule(IParseTreeListener listener) {
-			ICommonRegexListener typedListener = listener as ICommonRegexListener;
-			if (typedListener != null) typedListener.EnterNon_close_paren(this);
+			if (listener is ICommonRegexListener typedListener) typedListener.EnterNon_close_paren(this);
 		}
 		public override void ExitRule(IParseTreeListener listener) {
-			ICommonRegexListener typedListener = listener as ICommonRegexListener;
-			if (typedListener != null) typedListener.ExitNon_close_paren(this);
+			if (listener is ICommonRegexListener typedListener) typedListener.ExitNon_close_paren(this);
 		}
 		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
-			ICommonRegexVisitor<TResult> typedVisitor = visitor as ICommonRegexVisitor<TResult>;
-			if (typedVisitor != null) return typedVisitor.VisitNon_close_paren(this);
+			if (visitor is ICommonRegexVisitor<TResult> typedVisitor) return typedVisitor.VisitNon_close_paren(this);
 			else return visitor.VisitChildren(this);
 		}
 	}
@@ -2612,16 +2534,13 @@ public LetterContext(ParserRuleContext parent, int invokingState)
 		}
 		public override int RuleIndex { get { return RULE_letter; } }
 		public override void EnterRule(IParseTreeListener listener) {
-			ICommonRegexListener typedListener = listener as ICommonRegexListener;
-			if (typedListener != null) typedListener.EnterLetter(this);
+			if (listener is ICommonRegexListener typedListener) typedListener.EnterLetter(this);
 		}
 		public override void ExitRule(IParseTreeListener listener) {
-			ICommonRegexListener typedListener = listener as ICommonRegexListener;
-			if (typedListener != null) typedListener.ExitLetter(this);
+			if (listener is ICommonRegexListener typedListener) typedListener.ExitLetter(this);
 		}
 		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
-			ICommonRegexVisitor<TResult> typedVisitor = visitor as ICommonRegexVisitor<TResult>;
-			if (typedVisitor != null) return typedVisitor.VisitLetter(this);
+			if (visitor is ICommonRegexVisitor<TResult> typedVisitor) return typedVisitor.VisitLetter(this);
 			else return visitor.VisitChildren(this);
 		}
 	}
diff --git a/libraries/AdaptiveExpressions/Generated/ExpressionAntlrParser.cs b/libraries/AdaptiveExpressions/Generated/ExpressionAntlrParser.cs
index 7a1c935ce..20d2b2b92 100644
--- a/libraries/AdaptiveExpressions/Generated/ExpressionAntlrParser.cs
+++ b/libraries/AdaptiveExpressions/Generated/ExpressionAntlrParser.cs
@@ -112,16 +112,13 @@ public FileContext(ParserRuleContext parent, int invokingState)
 		}
 		public override int RuleIndex { get { return RULE_file; } }
 		public override void EnterRule(IParseTreeListener listener) {
-			IExpressionAntlrParserListener typedListener = listener as IExpressionAntlrParserListener;
-			if (typedListener != null) typedListener.EnterFile(this);
+			if (listener is IExpressionAntlrParserListener typedListener) typedListener.EnterFile(this);
 		}
 		public override void ExitRule(IParseTreeListener listener) {
-			IExpressionAntlrParserListener typedListener = listener as IExpressionAntlrParserListener;
-			if (typedListener != null) typedListener.ExitFile(this);
+			if (listener is IExpressionAntlrParserListener typedListener) typedListener.ExitFile(this);
 		}
 		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
-			IExpressionAntlrParserVisitor<TResult> typedVisitor = visitor as IExpressionAntlrParserVisitor<TResult>;
-			if (typedVisitor != null) return typedVisitor.VisitFile(this);
+			if (visitor is IExpressionAntlrParserVisitor<TResult> typedVisitor) return typedVisitor.VisitFile(this);
 			else return visitor.VisitChildren(this);
 		}
 	}
@@ -169,16 +166,13 @@ public partial class UnaryOpExpContext : ExpressionContext {
 		public ITerminalNode PLUS() { return GetToken(ExpressionAntlrParser.PLUS, 0); }
 		public UnaryOpExpContext(ExpressionContext context) { CopyFrom(context); }
 		public override void EnterRule(IParseTreeListener listener) {
-			IExpressionAntlrParserListener typedListener = listener as IExpressionAntlrParserListener;
-			if (typedListener != null) typedListener.EnterUnaryOpExp(this);
+			if (listener is IExpressionAntlrParserListener typedListener) typedListener.EnterUnaryOpExp(this);
 		}
 		public override void ExitRule(IParseTreeListener listener) {
-			IExpressionAntlrParserListener typedListener = listener as IExpressionAntlrParserListener;
-			if (typedListener != null) typedListener.ExitUnaryOpExp(this);
+			if (listener is IExpressionAntlrParserListener typedListener) typedListener.ExitUnaryOpExp(this);
 		}
 		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
-			IExpressionAntlrParserVisitor<TResult> typedVisitor = visitor as IExpressionAntlrParserVisitor<TResult>;
-			if (typedVisitor != null) return typedVisitor.VisitUnaryOpExp(this);
+			if (visitor is IExpressionAntlrParserVisitor<TResult> typedVisitor) return typedVisitor.VisitUnaryOpExp(this);
 			else return visitor.VisitChildren(this);
 		}
 	}
@@ -207,16 +201,13 @@ public partial class BinaryOpExpContext : ExpressionContext {
 		public ITerminalNode NULL_COALESCE() { return GetToken(ExpressionAntlrParser.NULL_COALESCE, 0); }
 		public BinaryOpExpContext(ExpressionContext context) { CopyFrom(context); }
 		public override void EnterRule(IParseTreeListener listener) {
-			IExpressionAntlrParserListener typedListener = listener as IExpressionAntlrParserListener;
-			if (typedListener != null) typedListener.EnterBinaryOpExp(this);
+			if (listener is IExpressionAntlrParserListener typedListener) typedListener.EnterBinaryOpExp(this);
 		}
 		public override void ExitRule(IParseTreeListener listener) {
-			IExpressionAntlrParserListener typedListener = listener as IExpressionAntlrParserListener;
-			if (typedListener != null) typedListener.ExitBinaryOpExp(this);
+			if (listener is IExpressionAntlrParserListener typedListener) typedListener.ExitBinaryOpExp(this);
 		}
 		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
-			IExpressionAntlrParserVisitor<TResult> typedVisitor = visitor as IExpressionAntlrParserVisitor<TResult>;
-			if (typedVisitor != null) return typedVisitor.VisitBinaryOpExp(this);
+			if (visitor is IExpressionAntlrParserVisitor<TResult> typedVisitor) return typedVisitor.VisitBinaryOpExp(this);
 			else return visitor.VisitChildren(this);
 		}
 	}
@@ -226,16 +217,13 @@ public partial class PrimaryExpContext : ExpressionContext {
 		}
 		public PrimaryExpContext(ExpressionContext context) { CopyFrom(context); }
 		public override void EnterRule(IParseTreeListener listener) {
-			IExpressionAntlrParserListener typedListener = listener as IExpressionAntlrParserListener;
-			if (typedListener != null) typedListener.EnterPrimaryExp(this);
+			if (listener is IExpressionAntlrParserListener typedListener) typedListener.EnterPrimaryExp(this);
 		}
 		public override void ExitRule(IParseTreeListener listener) {
-			IExpressionAntlrParserListener typedListener = listener as IExpressionAntlrParserListener;
-			if (typedListener != null) typedListener.ExitPrimaryExp(this);
+			if (listener is IExpressionAntlrParserListener typedListener) typedListener.ExitPrimaryExp(this);
 		}
 		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
-			IExpressionAntlrParserVisitor<TResult> typedVisitor = visitor as IExpressionAntlrParserVisitor<TResult>;
-			if (typedVisitor != null) return typedVisitor.VisitPrimaryExp(this);
+			if (visitor is IExpressionAntlrParserVisitor<TResult> typedVisitor) return typedVisitor.VisitPrimaryExp(this);
 			else return visitor.VisitChildren(this);
 		}
 	}
@@ -250,16 +238,13 @@ public partial class TripleOpExpContext : ExpressionContext {
 		public ITerminalNode COLON() { return GetToken(ExpressionAntlrParser.COLON, 0); }
 		public TripleOpExpContext(ExpressionContext context) { CopyFrom(context); }
 		public override void EnterRule(IParseTreeListener listener) {
-			IExpressionAntlrParserListener typedListener = listener as IExpressionAntlrParserListener;
-			if (typedListener != null) typedListener.EnterTripleOpExp(this);
+			if (listener is IExpressionAntlrParserListener typedListener) typedListener.EnterTripleOpExp(this);
 		}
 		public override void ExitRule(IParseTreeListener listener) {
-			IExpressionAntlrParserListener typedListener = listener as IExpressionAntlrParserListener;
-			if (typedListener != null) typedListener.ExitTripleOpExp(this);
+			if (listener is IExpressionAntlrParserListener typedListener) typedListener.ExitTripleOpExp(this);
 		}
 		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
-			IExpressionAntlrParserVisitor<TResult> typedVisitor = visitor as IExpressionAntlrParserVisitor<TResult>;
-			if (typedVisitor != null) return typedVisitor.VisitTripleOpExp(this);
+			if (visitor is IExpressionAntlrParserVisitor<TResult> typedVisitor) return typedVisitor.VisitTripleOpExp(this);
 			else return visitor.VisitChildren(this);
 		}
 	}
@@ -514,16 +499,13 @@ public partial class FuncInvokeExpContext : PrimaryExpressionContext {
 		}
 		public FuncInvokeExpContext(PrimaryExpressionContext context) { CopyFrom(context); }
 		public override void EnterRule(IParseTreeListener listener) {
-			IExpressionAntlrParserListener typedListener = listener as IExpressionAntlrParserListener;
-			if (typedListener != null) typedListener.EnterFuncInvokeExp(this);
+			if (listener is IExpressionAntlrParserListener typedListener) typedListener.EnterFuncInvokeExp(this);
 		}
 		public override void ExitRule(IParseTreeListener listener) {
-			IExpressionAntlrParserListener typedListener = listener as IExpressionAntlrParserListener;
-			if (typedListener != null) typedListener.ExitFuncInvokeExp(this);
+			if (listener is IExpressionAntlrParserListener typedListener) typedListener.ExitFuncInvokeExp(this);
 		}
 		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
-			IExpressionAntlrParserVisitor<TResult> typedVisitor = visitor as IExpressionAntlrParserVisitor<TResult>;
-			if (typedVisitor != null) return typedVisitor.VisitFuncInvokeExp(this);
+			if (visitor is IExpressionAntlrParserVisitor<TResult> typedVisitor) return typedVisitor.VisitFuncInvokeExp(this);
 			else return visitor.VisitChildren(this);
 		}
 	}
@@ -531,16 +513,13 @@ public partial class IdAtomContext : PrimaryExpressionContext {
 		public ITerminalNode IDENTIFIER() { return GetToken(ExpressionAntlrParser.IDENTIFIER, 0); }
 		public IdAtomContext(PrimaryExpressionContext context) { CopyFrom(context); }
 		public override void EnterRule(IParseTreeListener listener) {
-			IExpressionAntlrParserListener typedListener = listener as IExpressionAntlrParserListener;
-			if (typedListener != null) typedListener.EnterIdAtom(this);
+			if (listener is IExpressionAntlrParserListener typedListener) typedListener.EnterIdAtom(this);
 		}
 		public override void ExitRule(IParseTreeListener listener) {
-			IExpressionAntlrParserListener typedListener = listener as IExpressionAntlrParserListener;
-			if (typedListener != null) typedListener.ExitIdAtom(this);
+			if (listener is IExpressionAntlrParserListener typedListener) typedListener.ExitIdAtom(this);
 		}
 		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
-			IExpressionAntlrParserVisitor<TResult> typedVisitor = visitor as IExpressionAntlrParserVisitor<TResult>;
-			if (typedVisitor != null) return typedVisitor.VisitIdAtom(this);
+			if (visitor is IExpressionAntlrParserVisitor<TResult> typedVisitor) return typedVisitor.VisitIdAtom(this);
 			else return visitor.VisitChildren(this);
 		}
 	}
@@ -552,16 +531,13 @@ public partial class JsonCreationExpContext : PrimaryExpressionContext {
 		}
 		public JsonCreationExpContext(PrimaryExpressionContext context) { CopyFrom(context); }
 		public override void EnterRule(IParseTreeListener listener) {
-			IExpressionAntlrParserListener typedListener = listener as IExpressionAntlrParserListener;
-			if (typedListener != null) typedListener.EnterJsonCreationExp(this);
+			if (listener is IExpressionAntlrParserListener typedListener) typedListener.EnterJsonCreationExp(this);
 		}
 		public override void ExitRule(IParseTreeListener listener) {
-			IExpressionAntlrParserListener typedListener = listener as IExpressionAntlrParserListener;
-			if (typedListener != null) typedListener.ExitJsonCreationExp(this);
+			if (listener is IExpressionAntlrParserListener typedListener) typedListener.ExitJsonCreationExp(this);
 		}
 		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
-			IExpressionAntlrParserVisitor<TResult> typedVisitor = visitor as IExpressionAntlrParserVisitor<TResult>;
-			if (typedVisitor != null) return typedVisitor.VisitJsonCreationExp(this);
+			if (visitor is IExpressionAntlrParserVisitor<TResult> typedVisitor) return typedVisitor.VisitJsonCreationExp(this);
 			else return visitor.VisitChildren(this);
 		}
 	}
@@ -569,16 +545,13 @@ public partial class StringAtomContext : PrimaryExpressionContext {
 		public ITerminalNode STRING() { return GetToken(ExpressionAntlrParser.STRING, 0); }
 		public StringAtomContext(PrimaryExpressionContext context) { CopyFrom(context); }
 		public override void EnterRule(IParseTreeListener listener) {
-			IExpressionAntlrParserListener typedListener = listener as IExpressionAntlrParserListener;
-			if (typedListener != null) typedListener.EnterStringAtom(this);
+			if (listener is IExpressionAntlrParserListener typedListener) typedListener.EnterStringAtom(this);
 		}
 		public override void ExitRule(IParseTreeListener listener) {
-			IExpressionAntlrParserListener typedListener = listener as IExpressionAntlrParserListener;
-			if (typedListener != null) typedListener.ExitStringAtom(this);
+			if (listener is IExpressionAntlrParserListener typedListener) typedListener.ExitStringAtom(this);
 		}
 		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
-			IExpressionAntlrParserVisitor<TResult> typedVisitor = visitor as IExpressionAntlrParserVisitor<TResult>;
-			if (typedVisitor != null) return typedVisitor.VisitStringAtom(this);
+			if (visitor is IExpressionAntlrParserVisitor<TResult> typedVisitor) return typedVisitor.VisitStringAtom(this);
 			else return visitor.VisitChildren(this);
 		}
 	}
@@ -593,16 +566,13 @@ public partial class IndexAccessExpContext : PrimaryExpressionContext {
 		public ITerminalNode CLOSE_SQUARE_BRACKET() { return GetToken(ExpressionAntlrParser.CLOSE_SQUARE_BRACKET, 0); }
 		public IndexAccessExpContext(PrimaryExpressionContext context) { CopyFrom(context); }
 		public override void EnterRule(IParseTreeListener listener) {
-			IExpressionAntlrParserListener typedListener = listener as IExpressionAntlrParserListener;
-			if (typedListener != null) typedListener.EnterIndexAccessExp(this);
+			if (listener is IExpressionAntlrParserListener typedListener) typedListener.EnterIndexAccessExp(this);
 		}
 		public override void ExitRule(IParseTreeListener listener) {
-			IExpressionAntlrParserListener typedListener = listener as IExpressionAntlrParserListener;
-			if (typedListener != null) typedListener.ExitIndexAccessExp(this);
+			if (listener is IExpressionAntlrParserListener typedListener) typedListener.ExitIndexAccessExp(this);
 		}
 		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
-			IExpressionAntlrParserVisitor<TResult> typedVisitor = visitor as IExpressionAntlrParserVisitor<TResult>;
-			if (typedVisitor != null) return typedVisitor.VisitIndexAccessExp(this);
+			if (visitor is IExpressionAntlrParserVisitor<TResult> typedVisitor) return typedVisitor.VisitIndexAccessExp(this);
 			else return visitor.VisitChildren(this);
 		}
 	}
@@ -612,16 +582,13 @@ public partial class StringInterpolationAtomContext : PrimaryExpressionContext {
 		}
 		public StringInterpolationAtomContext(PrimaryExpressionContext context) { CopyFrom(context); }
 		public override void EnterRule(IParseTreeListener listener) {
-			IExpressionAntlrParserListener typedListener = listener as IExpressionAntlrParserListener;
-			if (typedListener != null) typedListener.EnterStringInterpolationAtom(this);
+			if (listener is IExpressionAntlrParserListener typedListener) typedListener.EnterStringInterpolationAtom(this);
 		}
 		public override void ExitRule(IParseTreeListener listener) {
-			IExpressionAntlrParserListener typedListener = listener as IExpressionAntlrParserListener;
-			if (typedListener != null) typedListener.ExitStringInterpolationAtom(this);
+			if (listener is IExpressionAntlrParserListener typedListener) typedListener.ExitStringInterpolationAtom(this);
 		}
 		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
-			IExpressionAntlrParserVisitor<TResult> typedVisitor = visitor as IExpressionAntlrParserVisitor<TResult>;
-			if (typedVisitor != null) return typedVisitor.VisitStringInterpolationAtom(this);
+			if (visitor is IExpressionAntlrParserVisitor<TResult> typedVisitor) return typedVisitor.VisitStringInterpolationAtom(this);
 			else return visitor.VisitChildren(this);
 		}
 	}
@@ -633,16 +600,13 @@ public partial class MemberAccessExpContext : PrimaryExpressionContext {
 		public ITerminalNode IDENTIFIER() { return GetToken(ExpressionAntlrParser.IDENTIFIER, 0); }
 		public MemberAccessExpContext(PrimaryExpressionContext context) { CopyFrom(context); }
 		public override void EnterRule(IParseTreeListener listener) {
-			IExpressionAntlrParserListener typedListener = listener as IExpressionAntlrParserListener;
-			if (typedListener != null) typedListener.EnterMemberAccessExp(this);
+			if (listener is IExpressionAntlrParserListener typedListener) typedListener.EnterMemberAccessExp(this);
 		}
 		public override void ExitRule(IParseTreeListener listener) {
-			IExpressionAntlrParserListener typedListener = listener as IExpressionAntlrParserListener;
-			if (typedListener != null) typedListener.ExitMemberAccessExp(this);
+			if (listener is IExpressionAntlrParserListener typedListener) typedListener.ExitMemberAccessExp(this);
 		}
 		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
-			IExpressionAntlrParserVisitor<TResult> typedVisitor = visitor as IExpressionAntlrParserVisitor<TResult>;
-			if (typedVisitor != null) return typedVisitor.VisitMemberAccessExp(this);
+			if (visitor is IExpressionAntlrParserVisitor<TResult> typedVisitor) return typedVisitor.VisitMemberAccessExp(this);
 			else return visitor.VisitChildren(this);
 		}
 	}
@@ -654,16 +618,13 @@ public partial class ParenthesisExpContext : PrimaryExpressionContext {
 		public ITerminalNode CLOSE_BRACKET() { return GetToken(ExpressionAntlrParser.CLOSE_BRACKET, 0); }
 		public ParenthesisExpContext(PrimaryExpressionContext context) { CopyFrom(context); }
 		public override void EnterRule(IParseTreeListener listener) {
-			IExpressionAntlrParserListener typedListener = listener as IExpressionAntlrParserListener;
-			if (typedListener != null) typedListener.EnterParenthesisExp(this);
+			if (listener is IExpressionAntlrParserListener typedListener) typedListener.EnterParenthesisExp(this);
 		}
 		public override void ExitRule(IParseTreeListener listener) {
-			IExpressionAntlrParserListener typedListener = listener as IExpressionAntlrParserListener;
-			if (typedListener != null) typedListener.ExitParenthesisExp(this);
+			if (listener is IExpressionAntlrParserListener typedListener) typedListener.ExitParenthesisExp(this);
 		}
 		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
-			IExpressionAntlrParserVisitor<TResult> typedVisitor = visitor as IExpressionAntlrParserVisitor<TResult>;
-			if (typedVisitor != null) return typedVisitor.VisitParenthesisExp(this);
+			if (visitor is IExpressionAntlrParserVisitor<TResult> typedVisitor) return typedVisitor.VisitParenthesisExp(this);
 			else return visitor.VisitChildren(this);
 		}
 	}
@@ -671,16 +632,13 @@ public partial class NumericAtomContext : PrimaryExpressionContext {
 		public ITerminalNode NUMBER() { return GetToken(ExpressionAntlrParser.NUMBER, 0); }
 		public NumericAtomContext(PrimaryExpressionContext context) { CopyFrom(context); }
 		public override void EnterRule(IParseTreeListener listener) {
-			IExpressionAntlrParserListener typedListener = listener as IExpressionAntlrParserListener;
-			if (typedListener != null) typedListener.EnterNumericAtom(this);
+			if (listener is IExpressionAntlrParserListener typedListener) typedListener.EnterNumericAtom(this);
 		}
 		public override void ExitRule(IParseTreeListener listener) {
-			IExpressionAntlrParserListener typedListener = listener as IExpressionAntlrParserListener;
-			if (typedListener != null) typedListener.ExitNumericAtom(this);
+			if (listener is IExpressionAntlrParserListener typedListener) typedListener.ExitNumericAtom(this);
 		}
 		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
-			IExpressionAntlrParserVisitor<TResult> typedVisitor = visitor as IExpressionAntlrParserVisitor<TResult>;
-			if (typedVisitor != null) return typedVisitor.VisitNumericAtom(this);
+			if (visitor is IExpressionAntlrParserVisitor<TResult> typedVisitor) return typedVisitor.VisitNumericAtom(this);
 			else return visitor.VisitChildren(this);
 		}
 	}
@@ -692,16 +650,13 @@ public partial class ArrayCreationExpContext : PrimaryExpressionContext {
 		}
 		public ArrayCreationExpContext(PrimaryExpressionContext context) { CopyFrom(context); }
 		public override void EnterRule(IParseTreeListener listener) {
-			IExpressionAntlrParserListener typedListener = listener as IExpressionAntlrParserListener;
-			if (typedListener != null) typedListener.EnterArrayCreationExp(this);
+			if (listener is IExpressionAntlrParserListener typedListener) typedListener.EnterArrayCreationExp(this);
 		}
 		public override void ExitRule(IParseTreeListener listener) {
-			IExpressionAntlrParserListener typedListener = listener as IExpressionAntlrParserListener;
-			if (typedListener != null) typedListener.ExitArrayCreationExp(this);
+			if (listener is IExpressionAntlrParserListener typedListener) typedListener.ExitArrayCreationExp(this);
 		}
 		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
-			IExpressionAntlrParserVisitor<TResult> typedVisitor = visitor as IExpressionAntlrParserVisitor<TResult>;
-			if (typedVisitor != null) return typedVisitor.VisitArrayCreationExp(this);
+			if (visitor is IExpressionAntlrParserVisitor<TResult> typedVisitor) return typedVisitor.VisitArrayCreationExp(this);
 			else return visitor.VisitChildren(this);
 		}
 	}
@@ -915,16 +870,13 @@ public StringInterpolationContext(ParserRuleContext parent, int invokingState)
 		}
 		public override int RuleIndex { get { return RULE_stringInterpolation; } }
 		public override void EnterRule(IParseTreeListener listener) {
-			IExpressionAntlrParserListener typedListener = listener as IExpressionAntlrParserListener;
-			if (typedListener != null) typedListener.EnterStringInterpolation(this);
+			if (listener is IExpressionAntlrParserListener typedListener) typedListener.EnterStringInterpolation(this);
 		}
 		public override void ExitRule(IParseTreeListener listener) {
-			IExpressionAntlrParserListener typedListener = listener as IExpressionAntlrParserListener;
-			if (typedListener != null) typedListener.ExitStringInterpolation(this);
+			if (listener is IExpressionAntlrParserListener typedListener) typedListener.ExitStringInterpolation(this);
 		}
 		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
-			IExpressionAntlrParserVisitor<TResult> typedVisitor = visitor as IExpressionAntlrParserVisitor<TResult>;
-			if (typedVisitor != null) return typedVisitor.VisitStringInterpolation(this);
+			if (visitor is IExpressionAntlrParserVisitor<TResult> typedVisitor) return typedVisitor.VisitStringInterpolation(this);
 			else return visitor.VisitChildren(this);
 		}
 	}
@@ -994,16 +946,13 @@ public TextContentContext(ParserRuleContext parent, int invokingState)
 		}
 		public override int RuleIndex { get { return RULE_textContent; } }
 		public override void EnterRule(IParseTreeListener listener) {
-			IExpressionAntlrParserListener typedListener = listener as IExpressionAntlrParserListener;
-			if (typedListener != null) typedListener.EnterTextContent(this);
+			if (listener is IExpressionAntlrParserListener typedListener) typedListener.EnterTextContent(this);
 		}
 		public override void ExitRule(IParseTreeListener listener) {
-			IExpressionAntlrParserListener typedListener = listener as IExpressionAntlrParserListener;
-			if (typedListener != null) typedListener.ExitTextContent(this);
+			if (listener is IExpressionAntlrParserListener typedListener) typedListener.ExitTextContent(this);
 		}
 		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
-			IExpressionAntlrParserVisitor<TResult> typedVisitor = visitor as IExpressionAntlrParserVisitor<TResult>;
-			if (typedVisitor != null) return typedVisitor.VisitTextContent(this);
+			if (visitor is IExpressionAntlrParserVisitor<TResult> typedVisitor) return typedVisitor.VisitTextContent(this);
 			else return visitor.VisitChildren(this);
 		}
 	}
@@ -1071,16 +1020,13 @@ public ArgsListContext(ParserRuleContext parent, int invokingState)
 		}
 		public override int RuleIndex { get { return RULE_argsList; } }
 		public override void EnterRule(IParseTreeListener listener) {
-			IExpressionAntlrParserListener typedListener = listener as IExpressionAntlrParserListener;
-			if (typedListener != null) typedListener.EnterArgsList(this);
+			if (listener is IExpressionAntlrParserListener typedListener) typedListener.EnterArgsList(this);
 		}
 		public override void ExitRule(IParseTreeListener listener) {
-			IExpressionAntlrParserListener typedListener = listener as IExpressionAntlrParserListener;
-			if (typedListener != null) typedListener.ExitArgsList(this);
+			if (listener is IExpressionAntlrParserListener typedListener) typedListener.ExitArgsList(this);
 		}
 		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
-			IExpressionAntlrParserVisitor<TResult> typedVisitor = visitor as IExpressionAntlrParserVisitor<TResult>;
-			if (typedVisitor != null) return typedVisitor.VisitArgsList(this);
+			if (visitor is IExpressionAntlrParserVisitor<TResult> typedVisitor) return typedVisitor.VisitArgsList(this);
 			else return visitor.VisitChildren(this);
 		}
 	}
@@ -1159,16 +1105,13 @@ public LambdaContext(ParserRuleContext parent, int invokingState)
 		}
 		public override int RuleIndex { get { return RULE_lambda; } }
 		public override void EnterRule(IParseTreeListener listener) {
-			IExpressionAntlrParserListener typedListener = listener as IExpressionAntlrParserListener;
-			if (typedListener != null) typedListener.EnterLambda(this);
+			if (listener is IExpressionAntlrParserListener typedListener) typedListener.EnterLambda(this);
 		}
 		public override void ExitRule(IParseTreeListener listener) {
-			IExpressionAntlrParserListener typedListener = listener as IExpressionAntlrParserListener;
-			if (typedListener != null) typedListener.ExitLambda(this);
+			if (listener is IExpressionAntlrParserListener typedListener) typedListener.ExitLambda(this);
 		}
 		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
-			IExpressionAntlrParserVisitor<TResult> typedVisitor = visitor as IExpressionAntlrParserVisitor<TResult>;
-			if (typedVisitor != null) return typedVisitor.VisitLambda(this);
+			if (visitor is IExpressionAntlrParserVisitor<TResult> typedVisitor) return typedVisitor.VisitLambda(this);
 			else return visitor.VisitChildren(this);
 		}
 	}
@@ -1213,16 +1156,13 @@ public KeyValuePairListContext(ParserRuleContext parent, int invokingState)
 		}
 		public override int RuleIndex { get { return RULE_keyValuePairList; } }
 		public override void EnterRule(IParseTreeListener listener) {
-			IExpressionAntlrParserListener typedListener = listener as IExpressionAntlrParserListener;
-			if (typedListener != null) typedListener.EnterKeyValuePairList(this);
+			if (listener is IExpressionAntlrParserListener typedListener) typedListener.EnterKeyValuePairList(this);
 		}
 		public override void ExitRule(IParseTreeListener listener) {
-			IExpressionAntlrParserListener typedListener = listener as IExpressionAntlrParserListener;
-			if (typedListener != null) typedListener.ExitKeyValuePairList(this);
+			if (listener is IExpressionAntlrParserListener typedListener) typedListener.ExitKeyValuePairList(this);
 		}
 		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
-			IExpressionAntlrParserVisitor<TResult> typedVisitor = visitor as IExpressionAntlrParserVisitor<TResult>;
-			if (typedVisitor != null) return typedVisitor.VisitKeyValuePairList(this);
+			if (visitor is IExpressionAntlrParserVisitor<TResult> typedVisitor) return typedVisitor.VisitKeyValuePairList(this);
 			else return visitor.VisitChildren(this);
 		}
 	}
@@ -1277,16 +1217,13 @@ public KeyValuePairContext(ParserRuleContext parent, int invokingState)
 		}
 		public override int RuleIndex { get { return RULE_keyValuePair; } }
 		public override void EnterRule(IParseTreeListener listener) {
-			IExpressionAntlrParserListener typedListener = listener as IExpressionAntlrParserListener;
-			if (typedListener != null) typedListener.EnterKeyValuePair(this);
+			if (listener is IExpressionAntlrParserListener typedListener) typedListener.EnterKeyValuePair(this);
 		}
 		public override void ExitRule(IParseTreeListener listener) {
-			IExpressionAntlrParserListener typedListener = listener as IExpressionAntlrParserListener;
-			if (typedListener != null) typedListener.ExitKeyValuePair(this);
+			if (listener is IExpressionAntlrParserListener typedListener) typedListener.ExitKeyValuePair(this);
 		}
 		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
-			IExpressionAntlrParserVisitor<TResult> typedVisitor = visitor as IExpressionAntlrParserVisitor<TResult>;
-			if (typedVisitor != null) return typedVisitor.VisitKeyValuePair(this);
+			if (visitor is IExpressionAntlrParserVisitor<TResult> typedVisitor) return typedVisitor.VisitKeyValuePair(this);
 			else return visitor.VisitChildren(this);
 		}
 	}
@@ -1323,16 +1260,13 @@ public KeyContext(ParserRuleContext parent, int invokingState)
 		}
 		public override int RuleIndex { get { return RULE_key; } }
 		public override void EnterRule(IParseTreeListener listener) {
-			IExpressionAntlrParserListener typedListener = listener as IExpressionAntlrParserListener;
-			if (typedListener != null) typedListener.EnterKey(this);
+			if (listener is IExpressionAntlrParserListener typedListener) typedListener.EnterKey(this);
 		}
 		public override void ExitRule(IParseTreeListener listener) {
-			IExpressionAntlrParserListener typedListener = listener as IExpressionAntlrParserListener;
-			if (typedListener != null) typedListener.ExitKey(this);
+			if (listener is IExpressionAntlrParserListener typedListener) typedListener.ExitKey(this);
 		}
 		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
-			IExpressionAntlrParserVisitor<TResult> typedVisitor = visitor as IExpressionAntlrParserVisitor<TResult>;
-			if (typedVisitor != null) return typedVisitor.VisitKey(this);
+			if (visitor is IExpressionAntlrParserVisitor<TResult> typedVisitor) return typedVisitor.VisitKey(this);
 			else return visitor.VisitChildren(this);
 		}
 	}
diff --git a/libraries/Microsoft.Bot.Builder.Dialogs.Adaptive.Testing/Mocks/MockLuisRecognizer.cs b/libraries/Microsoft.Bot.Builder.Dialogs.Adaptive.Testing/Mocks/MockLuisRecognizer.cs
index 98dfba4da..154795549 100644
--- a/libraries/Microsoft.Bot.Builder.Dialogs.Adaptive.Testing/Mocks/MockLuisRecognizer.cs
+++ b/libraries/Microsoft.Bot.Builder.Dialogs.Adaptive.Testing/Mocks/MockLuisRecognizer.cs
@@ -72,10 +72,7 @@ public override async Task<RecognizerResult> RecognizeAsync(DialogContext dialog
             _recognizer.HttpClient = newHandler;
             var result = await _recognizer.RecognizeAsync(dialogContext, activity, cancellationToken, telemetryProperties, telemetryMetrics).ConfigureAwait(false);
             _recognizer.HttpClient = oldHandler;
-            if (middleware != null)
-            {
-                middleware.SetFallback(null);
-            }
+            middleware?.SetFallback(null);
 
             return result;
         }
diff --git a/libraries/Microsoft.Bot.Builder.Dialogs.Adaptive/Actions/ActionScope.cs b/libraries/Microsoft.Bot.Builder.Dialogs.Adaptive/Actions/ActionScope.cs
index fe530a7a9..be3a5e044 100644
--- a/libraries/Microsoft.Bot.Builder.Dialogs.Adaptive/Actions/ActionScope.cs
+++ b/libraries/Microsoft.Bot.Builder.Dialogs.Adaptive/Actions/ActionScope.cs
@@ -247,7 +247,7 @@ protected virtual async Task<DialogTurnResult> OnNextActionAsync(DialogContext d
             while (parent != null)
             {
                 var ac = parent as ActionContext;
-                if (ac != null && ac.Changes != null && ac.Changes.Count > 0)
+                if (ac?.Changes != null && ac.Changes.Count > 0)
                 {
                     hasChanges = true;
                 }
diff --git a/libraries/Microsoft.Bot.Builder.Dialogs.Adaptive/Actions/ForEachPage.cs b/libraries/Microsoft.Bot.Builder.Dialogs.Adaptive/Actions/ForEachPage.cs
index 74f3b76ee..ae7caeb2f 100644
--- a/libraries/Microsoft.Bot.Builder.Dialogs.Adaptive/Actions/ForEachPage.cs
+++ b/libraries/Microsoft.Bot.Builder.Dialogs.Adaptive/Actions/ForEachPage.cs
@@ -184,11 +184,11 @@ private List<object> GetPage(object list, int index, int pageSize)
                     page.Add(JArray.FromObject(list)[i]);
                 }
             }
-            else if (list != null && list is JObject)
+            else if (list is JObject jObject)
             {
                 for (int i = index; i < end; i++)
                 {
-                    if (((JObject)list).SelectToken(i.ToString(CultureInfo.InvariantCulture)).HasValues)
+                    if (jObject.SelectToken(i.ToString(CultureInfo.InvariantCulture)).HasValues)
                     {
                         page.Add(((JObject)list).SelectToken(i.ToString(CultureInfo.InvariantCulture)));
                     }
diff --git a/libraries/Microsoft.Bot.Builder.Dialogs.Adaptive/AdaptiveDialog.cs b/libraries/Microsoft.Bot.Builder.Dialogs.Adaptive/AdaptiveDialog.cs
index 70e279a8f..766cd5b32 100644
--- a/libraries/Microsoft.Bot.Builder.Dialogs.Adaptive/AdaptiveDialog.cs
+++ b/libraries/Microsoft.Bot.Builder.Dialogs.Adaptive/AdaptiveDialog.cs
@@ -692,7 +692,7 @@ protected async Task<DialogTurnResult> ContinueActionsAsync(DialogContext dc, ob
                 while (parent != null)
                 {
                     var ac = parent as ActionContext;
-                    if (ac != null && ac.Changes != null && ac.Changes.Count > 0)
+                    if (ac?.Changes != null && ac.Changes.Count > 0)
                     {
                         parentChanges = true;
                     }
diff --git a/libraries/Microsoft.Bot.Builder.Dialogs.Adaptive/Converters/ITemplateActivityConverter.cs b/libraries/Microsoft.Bot.Builder.Dialogs.Adaptive/Converters/ITemplateActivityConverter.cs
index f2a4eebe3..2687a8cd2 100644
--- a/libraries/Microsoft.Bot.Builder.Dialogs.Adaptive/Converters/ITemplateActivityConverter.cs
+++ b/libraries/Microsoft.Bot.Builder.Dialogs.Adaptive/Converters/ITemplateActivityConverter.cs
@@ -62,8 +62,7 @@ public override void WriteJson(JsonWriter writer, object value, JsonSerializer s
         // ActivityTemplateConverter treats unknown objects as Activity objects, which get wrapped as StaticActivityTemplate instances
         public override object ResolveUnknownObject(JToken jToken)
         {
-            var jObject = jToken as JObject;
-            if (jObject != null)
+            if (jToken is JObject jObject)
             {
                 return new StaticActivityTemplate()
                 {
diff --git a/libraries/Microsoft.Bot.Builder.Dialogs.Adaptive/SchemaHelper.cs b/libraries/Microsoft.Bot.Builder.Dialogs.Adaptive/SchemaHelper.cs
index dd0ee30db..6d32e603f 100644
--- a/libraries/Microsoft.Bot.Builder.Dialogs.Adaptive/SchemaHelper.cs
+++ b/libraries/Microsoft.Bot.Builder.Dialogs.Adaptive/SchemaHelper.cs
@@ -127,7 +127,7 @@ private bool Analyze(string path, JToken token, Func<string, JToken, bool> analy
                         var parent = prop.Parent;
                         var grand = parent?.Parent;
                         var newPath = path;
-                        if (grand != null && grand is JProperty grandProp && grandProp.Name == "properties")
+                        if (grand is JProperty grandProp && grandProp.Name == "properties")
                         {
                             newPath = path.Length == 0 ? prop.Name : $"{path}.{prop.Name}";
                         }
diff --git a/libraries/Microsoft.Bot.Builder.Dialogs.Declarative/Resources/FileResource.cs b/libraries/Microsoft.Bot.Builder.Dialogs.Declarative/Resources/FileResource.cs
index 86bf80c12..d0da7e29c 100644
--- a/libraries/Microsoft.Bot.Builder.Dialogs.Declarative/Resources/FileResource.cs
+++ b/libraries/Microsoft.Bot.Builder.Dialogs.Declarative/Resources/FileResource.cs
@@ -46,10 +46,7 @@ public override async Task<Stream> OpenStreamAsync()
                     }
                     finally
                     {
-                        if (stream != null)
-                        {
-                            stream.Close();
-                        }
+                        stream?.Close();
                     }
                 });
             }
diff --git a/libraries/Microsoft.Bot.Builder.Dialogs/ObjectPath.cs b/libraries/Microsoft.Bot.Builder.Dialogs/ObjectPath.cs
index 158a2fe7d..c964a0e8f 100644
--- a/libraries/Microsoft.Bot.Builder.Dialogs/ObjectPath.cs
+++ b/libraries/Microsoft.Bot.Builder.Dialogs/ObjectPath.cs
@@ -633,7 +633,7 @@ private static object GetObjectProperty(object obj, string property)
 
             if (obj is IDictionary<string, object> dict)
             {
-                var key = dict.Keys.Where(key => string.Equals(key, property, StringComparison.OrdinalIgnoreCase)).FirstOrDefault() ?? property;
+                var key = dict.Keys.FirstOrDefault(key => string.Equals(key, property, StringComparison.OrdinalIgnoreCase))?? property;
                 if (dict.TryGetValue(key, out var value))
                 {
                     return value;
@@ -690,23 +690,20 @@ private static void SetObjectSegment(object obj, object segment, object value, b
             var property = segment as string;
             if (obj is IDictionary<string, object> dict)
             {
-                var key = dict.Keys.Where(k => string.Equals(k, property, StringComparison.OrdinalIgnoreCase)).FirstOrDefault() ?? property;
+                var key = dict.Keys.FirstOrDefault(k => string.Equals(k, property, StringComparison.OrdinalIgnoreCase))?? property;
                 dict[key] = val;
                 return;
             }
 
             if (obj is JObject jobj)
             {
-                var key = jobj.Properties().Where(p => string.Equals(p.Name, property, StringComparison.OrdinalIgnoreCase)).FirstOrDefault()?.Name ?? property;
+                var key = jobj.Properties().FirstOrDefault(p => string.Equals(p.Name, property, StringComparison.OrdinalIgnoreCase))?.Name ?? property;
                 jobj[key] = val != null ? JToken.FromObject(val) : null;
                 return;
             }
 
             var prop = obj.GetType().GetProperty(property);
-            if (prop != null)
-            {
-                prop.SetValue(obj, val);
-            }
+            prop?.SetValue(obj, val);
         }
 
         /// <summary>
diff --git a/libraries/Microsoft.Bot.Builder.LanguageGeneration/Generated/LGFileParser.cs b/libraries/Microsoft.Bot.Builder.LanguageGeneration/Generated/LGFileParser.cs
index 040a0c48a..bd4955991 100644
--- a/libraries/Microsoft.Bot.Builder.LanguageGeneration/Generated/LGFileParser.cs
+++ b/libraries/Microsoft.Bot.Builder.LanguageGeneration/Generated/LGFileParser.cs
@@ -104,16 +104,13 @@ public FileContext(ParserRuleContext parent, int invokingState)
 		}
 		public override int RuleIndex { get { return RULE_file; } }
 		public override void EnterRule(IParseTreeListener listener) {
-			ILGFileParserListener typedListener = listener as ILGFileParserListener;
-			if (typedListener != null) typedListener.EnterFile(this);
+			if (listener is ILGFileParserListener typedListener) typedListener.EnterFile(this);
 		}
 		public override void ExitRule(IParseTreeListener listener) {
-			ILGFileParserListener typedListener = listener as ILGFileParserListener;
-			if (typedListener != null) typedListener.ExitFile(this);
+			if (listener is ILGFileParserListener typedListener) typedListener.ExitFile(this);
 		}
 		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
-			ILGFileParserVisitor<TResult> typedVisitor = visitor as ILGFileParserVisitor<TResult>;
-			if (typedVisitor != null) return typedVisitor.VisitFile(this);
+			if (visitor is ILGFileParserVisitor<TResult> typedVisitor) return typedVisitor.VisitFile(this);
 			else return visitor.VisitChildren(this);
 		}
 	}
@@ -183,16 +180,13 @@ public ParagraphContext(ParserRuleContext parent, int invokingState)
 		}
 		public override int RuleIndex { get { return RULE_paragraph; } }
 		public override void EnterRule(IParseTreeListener listener) {
-			ILGFileParserListener typedListener = listener as ILGFileParserListener;
-			if (typedListener != null) typedListener.EnterParagraph(this);
+			if (listener is ILGFileParserListener typedListener) typedListener.EnterParagraph(this);
 		}
 		public override void ExitRule(IParseTreeListener listener) {
-			ILGFileParserListener typedListener = listener as ILGFileParserListener;
-			if (typedListener != null) typedListener.ExitParagraph(this);
+			if (listener is ILGFileParserListener typedListener) typedListener.ExitParagraph(this);
 		}
 		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
-			ILGFileParserVisitor<TResult> typedVisitor = visitor as ILGFileParserVisitor<TResult>;
-			if (typedVisitor != null) return typedVisitor.VisitParagraph(this);
+			if (visitor is ILGFileParserVisitor<TResult> typedVisitor) return typedVisitor.VisitParagraph(this);
 			else return visitor.VisitChildren(this);
 		}
 	}
@@ -271,16 +265,13 @@ public CommentDefinitionContext(ParserRuleContext parent, int invokingState)
 		}
 		public override int RuleIndex { get { return RULE_commentDefinition; } }
 		public override void EnterRule(IParseTreeListener listener) {
-			ILGFileParserListener typedListener = listener as ILGFileParserListener;
-			if (typedListener != null) typedListener.EnterCommentDefinition(this);
+			if (listener is ILGFileParserListener typedListener) typedListener.EnterCommentDefinition(this);
 		}
 		public override void ExitRule(IParseTreeListener listener) {
-			ILGFileParserListener typedListener = listener as ILGFileParserListener;
-			if (typedListener != null) typedListener.ExitCommentDefinition(this);
+			if (listener is ILGFileParserListener typedListener) typedListener.ExitCommentDefinition(this);
 		}
 		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
-			ILGFileParserVisitor<TResult> typedVisitor = visitor as ILGFileParserVisitor<TResult>;
-			if (typedVisitor != null) return typedVisitor.VisitCommentDefinition(this);
+			if (visitor is ILGFileParserVisitor<TResult> typedVisitor) return typedVisitor.VisitCommentDefinition(this);
 			else return visitor.VisitChildren(this);
 		}
 	}
@@ -324,16 +315,13 @@ public ImportDefinitionContext(ParserRuleContext parent, int invokingState)
 		}
 		public override int RuleIndex { get { return RULE_importDefinition; } }
 		public override void EnterRule(IParseTreeListener listener) {
-			ILGFileParserListener typedListener = listener as ILGFileParserListener;
-			if (typedListener != null) typedListener.EnterImportDefinition(this);
+			if (listener is ILGFileParserListener typedListener) typedListener.EnterImportDefinition(this);
 		}
 		public override void ExitRule(IParseTreeListener listener) {
-			ILGFileParserListener typedListener = listener as ILGFileParserListener;
-			if (typedListener != null) typedListener.ExitImportDefinition(this);
+			if (listener is ILGFileParserListener typedListener) typedListener.ExitImportDefinition(this);
 		}
 		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
-			ILGFileParserVisitor<TResult> typedVisitor = visitor as ILGFileParserVisitor<TResult>;
-			if (typedVisitor != null) return typedVisitor.VisitImportDefinition(this);
+			if (visitor is ILGFileParserVisitor<TResult> typedVisitor) return typedVisitor.VisitImportDefinition(this);
 			else return visitor.VisitChildren(this);
 		}
 	}
@@ -377,16 +365,13 @@ public OptionDefinitionContext(ParserRuleContext parent, int invokingState)
 		}
 		public override int RuleIndex { get { return RULE_optionDefinition; } }
 		public override void EnterRule(IParseTreeListener listener) {
-			ILGFileParserListener typedListener = listener as ILGFileParserListener;
-			if (typedListener != null) typedListener.EnterOptionDefinition(this);
+			if (listener is ILGFileParserListener typedListener) typedListener.EnterOptionDefinition(this);
 		}
 		public override void ExitRule(IParseTreeListener listener) {
-			ILGFileParserListener typedListener = listener as ILGFileParserListener;
-			if (typedListener != null) typedListener.ExitOptionDefinition(this);
+			if (listener is ILGFileParserListener typedListener) typedListener.ExitOptionDefinition(this);
 		}
 		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
-			ILGFileParserVisitor<TResult> typedVisitor = visitor as ILGFileParserVisitor<TResult>;
-			if (typedVisitor != null) return typedVisitor.VisitOptionDefinition(this);
+			if (visitor is ILGFileParserVisitor<TResult> typedVisitor) return typedVisitor.VisitOptionDefinition(this);
 			else return visitor.VisitChildren(this);
 		}
 	}
@@ -430,16 +415,13 @@ public ErrorDefinitionContext(ParserRuleContext parent, int invokingState)
 		}
 		public override int RuleIndex { get { return RULE_errorDefinition; } }
 		public override void EnterRule(IParseTreeListener listener) {
-			ILGFileParserListener typedListener = listener as ILGFileParserListener;
-			if (typedListener != null) typedListener.EnterErrorDefinition(this);
+			if (listener is ILGFileParserListener typedListener) typedListener.EnterErrorDefinition(this);
 		}
 		public override void ExitRule(IParseTreeListener listener) {
-			ILGFileParserListener typedListener = listener as ILGFileParserListener;
-			if (typedListener != null) typedListener.ExitErrorDefinition(this);
+			if (listener is ILGFileParserListener typedListener) typedListener.ExitErrorDefinition(this);
 		}
 		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
-			ILGFileParserVisitor<TResult> typedVisitor = visitor as ILGFileParserVisitor<TResult>;
-			if (typedVisitor != null) return typedVisitor.VisitErrorDefinition(this);
+			if (visitor is ILGFileParserVisitor<TResult> typedVisitor) return typedVisitor.VisitErrorDefinition(this);
 			else return visitor.VisitChildren(this);
 		}
 	}
@@ -487,16 +469,13 @@ public TemplateDefinitionContext(ParserRuleContext parent, int invokingState)
 		}
 		public override int RuleIndex { get { return RULE_templateDefinition; } }
 		public override void EnterRule(IParseTreeListener listener) {
-			ILGFileParserListener typedListener = listener as ILGFileParserListener;
-			if (typedListener != null) typedListener.EnterTemplateDefinition(this);
+			if (listener is ILGFileParserListener typedListener) typedListener.EnterTemplateDefinition(this);
 		}
 		public override void ExitRule(IParseTreeListener listener) {
-			ILGFileParserListener typedListener = listener as ILGFileParserListener;
-			if (typedListener != null) typedListener.ExitTemplateDefinition(this);
+			if (listener is ILGFileParserListener typedListener) typedListener.ExitTemplateDefinition(this);
 		}
 		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
-			ILGFileParserVisitor<TResult> typedVisitor = visitor as ILGFileParserVisitor<TResult>;
-			if (typedVisitor != null) return typedVisitor.VisitTemplateDefinition(this);
+			if (visitor is ILGFileParserVisitor<TResult> typedVisitor) return typedVisitor.VisitTemplateDefinition(this);
 			else return visitor.VisitChildren(this);
 		}
 	}
@@ -532,16 +511,13 @@ public TemplateNameLineContext(ParserRuleContext parent, int invokingState)
 		}
 		public override int RuleIndex { get { return RULE_templateNameLine; } }
 		public override void EnterRule(IParseTreeListener listener) {
-			ILGFileParserListener typedListener = listener as ILGFileParserListener;
-			if (typedListener != null) typedListener.EnterTemplateNameLine(this);
+			if (listener is ILGFileParserListener typedListener) typedListener.EnterTemplateNameLine(this);
 		}
 		public override void ExitRule(IParseTreeListener listener) {
-			ILGFileParserListener typedListener = listener as ILGFileParserListener;
-			if (typedListener != null) typedListener.ExitTemplateNameLine(this);
+			if (listener is ILGFileParserListener typedListener) typedListener.ExitTemplateNameLine(this);
 		}
 		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
-			ILGFileParserVisitor<TResult> typedVisitor = visitor as ILGFileParserVisitor<TResult>;
-			if (typedVisitor != null) return typedVisitor.VisitTemplateNameLine(this);
+			if (visitor is ILGFileParserVisitor<TResult> typedVisitor) return typedVisitor.VisitTemplateNameLine(this);
 			else return visitor.VisitChildren(this);
 		}
 	}
@@ -589,16 +565,13 @@ public TemplateBodyContext(ParserRuleContext parent, int invokingState)
 		}
 		public override int RuleIndex { get { return RULE_templateBody; } }
 		public override void EnterRule(IParseTreeListener listener) {
-			ILGFileParserListener typedListener = listener as ILGFileParserListener;
-			if (typedListener != null) typedListener.EnterTemplateBody(this);
+			if (listener is ILGFileParserListener typedListener) typedListener.EnterTemplateBody(this);
 		}
 		public override void ExitRule(IParseTreeListener listener) {
-			ILGFileParserListener typedListener = listener as ILGFileParserListener;
-			if (typedListener != null) typedListener.ExitTemplateBody(this);
+			if (listener is ILGFileParserListener typedListener) typedListener.ExitTemplateBody(this);
 		}
 		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
-			ILGFileParserVisitor<TResult> typedVisitor = visitor as ILGFileParserVisitor<TResult>;
-			if (typedVisitor != null) return typedVisitor.VisitTemplateBody(this);
+			if (visitor is ILGFileParserVisitor<TResult> typedVisitor) return typedVisitor.VisitTemplateBody(this);
 			else return visitor.VisitChildren(this);
 		}
 	}
@@ -659,16 +632,13 @@ public TemplateBodyLineContext(ParserRuleContext parent, int invokingState)
 		}
 		public override int RuleIndex { get { return RULE_templateBodyLine; } }
 		public override void EnterRule(IParseTreeListener listener) {
-			ILGFileParserListener typedListener = listener as ILGFileParserListener;
-			if (typedListener != null) typedListener.EnterTemplateBodyLine(this);
+			if (listener is ILGFileParserListener typedListener) typedListener.EnterTemplateBodyLine(this);
 		}
 		public override void ExitRule(IParseTreeListener listener) {
-			ILGFileParserListener typedListener = listener as ILGFileParserListener;
-			if (typedListener != null) typedListener.ExitTemplateBodyLine(this);
+			if (listener is ILGFileParserListener typedListener) typedListener.ExitTemplateBodyLine(this);
 		}
 		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
-			ILGFileParserVisitor<TResult> typedVisitor = visitor as ILGFileParserVisitor<TResult>;
-			if (typedVisitor != null) return typedVisitor.VisitTemplateBodyLine(this);
+			if (visitor is ILGFileParserVisitor<TResult> typedVisitor) return typedVisitor.VisitTemplateBodyLine(this);
 			else return visitor.VisitChildren(this);
 		}
 	}
diff --git a/libraries/Microsoft.Bot.Builder.LanguageGeneration/Generated/LGTemplateParser.cs b/libraries/Microsoft.Bot.Builder.LanguageGeneration/Generated/LGTemplateParser.cs
index 6ba15a528..365cfa133 100644
--- a/libraries/Microsoft.Bot.Builder.LanguageGeneration/Generated/LGTemplateParser.cs
+++ b/libraries/Microsoft.Bot.Builder.LanguageGeneration/Generated/LGTemplateParser.cs
@@ -120,16 +120,13 @@ public ContextContext(ParserRuleContext parent, int invokingState)
 		}
 		public override int RuleIndex { get { return RULE_context; } }
 		public override void EnterRule(IParseTreeListener listener) {
-			ILGTemplateParserListener typedListener = listener as ILGTemplateParserListener;
-			if (typedListener != null) typedListener.EnterContext(this);
+			if (listener is ILGTemplateParserListener typedListener) typedListener.EnterContext(this);
 		}
 		public override void ExitRule(IParseTreeListener listener) {
-			ILGTemplateParserListener typedListener = listener as ILGTemplateParserListener;
-			if (typedListener != null) typedListener.ExitContext(this);
+			if (listener is ILGTemplateParserListener typedListener) typedListener.ExitContext(this);
 		}
 		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
-			ILGTemplateParserVisitor<TResult> typedVisitor = visitor as ILGTemplateParserVisitor<TResult>;
-			if (typedVisitor != null) return typedVisitor.VisitContext(this);
+			if (visitor is ILGTemplateParserVisitor<TResult> typedVisitor) return typedVisitor.VisitContext(this);
 			else return visitor.VisitChildren(this);
 		}
 	}
@@ -174,16 +171,13 @@ public partial class SwitchCaseBodyContext : BodyContext {
 		}
 		public SwitchCaseBodyContext(BodyContext context) { CopyFrom(context); }
 		public override void EnterRule(IParseTreeListener listener) {
-			ILGTemplateParserListener typedListener = listener as ILGTemplateParserListener;
-			if (typedListener != null) typedListener.EnterSwitchCaseBody(this);
+			if (listener is ILGTemplateParserListener typedListener) typedListener.EnterSwitchCaseBody(this);
 		}
 		public override void ExitRule(IParseTreeListener listener) {
-			ILGTemplateParserListener typedListener = listener as ILGTemplateParserListener;
-			if (typedListener != null) typedListener.ExitSwitchCaseBody(this);
+			if (listener is ILGTemplateParserListener typedListener) typedListener.ExitSwitchCaseBody(this);
 		}
 		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
-			ILGTemplateParserVisitor<TResult> typedVisitor = visitor as ILGTemplateParserVisitor<TResult>;
-			if (typedVisitor != null) return typedVisitor.VisitSwitchCaseBody(this);
+			if (visitor is ILGTemplateParserVisitor<TResult> typedVisitor) return typedVisitor.VisitSwitchCaseBody(this);
 			else return visitor.VisitChildren(this);
 		}
 	}
@@ -193,16 +187,13 @@ public partial class NormalBodyContext : BodyContext {
 		}
 		public NormalBodyContext(BodyContext context) { CopyFrom(context); }
 		public override void EnterRule(IParseTreeListener listener) {
-			ILGTemplateParserListener typedListener = listener as ILGTemplateParserListener;
-			if (typedListener != null) typedListener.EnterNormalBody(this);
+			if (listener is ILGTemplateParserListener typedListener) typedListener.EnterNormalBody(this);
 		}
 		public override void ExitRule(IParseTreeListener listener) {
-			ILGTemplateParserListener typedListener = listener as ILGTemplateParserListener;
-			if (typedListener != null) typedListener.ExitNormalBody(this);
+			if (listener is ILGTemplateParserListener typedListener) typedListener.ExitNormalBody(this);
 		}
 		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
-			ILGTemplateParserVisitor<TResult> typedVisitor = visitor as ILGTemplateParserVisitor<TResult>;
-			if (typedVisitor != null) return typedVisitor.VisitNormalBody(this);
+			if (visitor is ILGTemplateParserVisitor<TResult> typedVisitor) return typedVisitor.VisitNormalBody(this);
 			else return visitor.VisitChildren(this);
 		}
 	}
@@ -212,16 +203,13 @@ public partial class StructuredBodyContext : BodyContext {
 		}
 		public StructuredBodyContext(BodyContext context) { CopyFrom(context); }
 		public override void EnterRule(IParseTreeListener listener) {
-			ILGTemplateParserListener typedListener = listener as ILGTemplateParserListener;
-			if (typedListener != null) typedListener.EnterStructuredBody(this);
+			if (listener is ILGTemplateParserListener typedListener) typedListener.EnterStructuredBody(this);
 		}
 		public override void ExitRule(IParseTreeListener listener) {
-			ILGTemplateParserListener typedListener = listener as ILGTemplateParserListener;
-			if (typedListener != null) typedListener.ExitStructuredBody(this);
+			if (listener is ILGTemplateParserListener typedListener) typedListener.ExitStructuredBody(this);
 		}
 		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
-			ILGTemplateParserVisitor<TResult> typedVisitor = visitor as ILGTemplateParserVisitor<TResult>;
-			if (typedVisitor != null) return typedVisitor.VisitStructuredBody(this);
+			if (visitor is ILGTemplateParserVisitor<TResult> typedVisitor) return typedVisitor.VisitStructuredBody(this);
 			else return visitor.VisitChildren(this);
 		}
 	}
@@ -231,16 +219,13 @@ public partial class IfElseBodyContext : BodyContext {
 		}
 		public IfElseBodyContext(BodyContext context) { CopyFrom(context); }
 		public override void EnterRule(IParseTreeListener listener) {
-			ILGTemplateParserListener typedListener = listener as ILGTemplateParserListener;
-			if (typedListener != null) typedListener.EnterIfElseBody(this);
+			if (listener is ILGTemplateParserListener typedListener) typedListener.EnterIfElseBody(this);
 		}
 		public override void ExitRule(IParseTreeListener listener) {
-			ILGTemplateParserListener typedListener = listener as ILGTemplateParserListener;
-			if (typedListener != null) typedListener.ExitIfElseBody(this);
+			if (listener is ILGTemplateParserListener typedListener) typedListener.ExitIfElseBody(this);
 		}
 		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
-			ILGTemplateParserVisitor<TResult> typedVisitor = visitor as ILGTemplateParserVisitor<TResult>;
-			if (typedVisitor != null) return typedVisitor.VisitIfElseBody(this);
+			if (visitor is ILGTemplateParserVisitor<TResult> typedVisitor) return typedVisitor.VisitIfElseBody(this);
 			else return visitor.VisitChildren(this);
 		}
 	}
@@ -323,16 +308,13 @@ public StructuredTemplateBodyContext(ParserRuleContext parent, int invokingState
 		}
 		public override int RuleIndex { get { return RULE_structuredTemplateBody; } }
 		public override void EnterRule(IParseTreeListener listener) {
-			ILGTemplateParserListener typedListener = listener as ILGTemplateParserListener;
-			if (typedListener != null) typedListener.EnterStructuredTemplateBody(this);
+			if (listener is ILGTemplateParserListener typedListener) typedListener.EnterStructuredTemplateBody(this);
 		}
 		public override void ExitRule(IParseTreeListener listener) {
-			ILGTemplateParserListener typedListener = listener as ILGTemplateParserListener;
-			if (typedListener != null) typedListener.ExitStructuredTemplateBody(this);
+			if (listener is ILGTemplateParserListener typedListener) typedListener.ExitStructuredTemplateBody(this);
 		}
 		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
-			ILGTemplateParserVisitor<TResult> typedVisitor = visitor as ILGTemplateParserVisitor<TResult>;
-			if (typedVisitor != null) return typedVisitor.VisitStructuredTemplateBody(this);
+			if (visitor is ILGTemplateParserVisitor<TResult> typedVisitor) return typedVisitor.VisitStructuredTemplateBody(this);
 			else return visitor.VisitChildren(this);
 		}
 	}
@@ -423,16 +405,13 @@ public StructuredBodyNameLineContext(ParserRuleContext parent, int invokingState
 		}
 		public override int RuleIndex { get { return RULE_structuredBodyNameLine; } }
 		public override void EnterRule(IParseTreeListener listener) {
-			ILGTemplateParserListener typedListener = listener as ILGTemplateParserListener;
-			if (typedListener != null) typedListener.EnterStructuredBodyNameLine(this);
+			if (listener is ILGTemplateParserListener typedListener) typedListener.EnterStructuredBodyNameLine(this);
 		}
 		public override void ExitRule(IParseTreeListener listener) {
-			ILGTemplateParserListener typedListener = listener as ILGTemplateParserListener;
-			if (typedListener != null) typedListener.ExitStructuredBodyNameLine(this);
+			if (listener is ILGTemplateParserListener typedListener) typedListener.ExitStructuredBodyNameLine(this);
 		}
 		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
-			ILGTemplateParserVisitor<TResult> typedVisitor = visitor as ILGTemplateParserVisitor<TResult>;
-			if (typedVisitor != null) return typedVisitor.VisitStructuredBodyNameLine(this);
+			if (visitor is ILGTemplateParserVisitor<TResult> typedVisitor) return typedVisitor.VisitStructuredBodyNameLine(this);
 			else return visitor.VisitChildren(this);
 		}
 	}
@@ -487,16 +466,13 @@ public ErrorStructuredNameContext(ParserRuleContext parent, int invokingState)
 		}
 		public override int RuleIndex { get { return RULE_errorStructuredName; } }
 		public override void EnterRule(IParseTreeListener listener) {
-			ILGTemplateParserListener typedListener = listener as ILGTemplateParserListener;
-			if (typedListener != null) typedListener.EnterErrorStructuredName(this);
+			if (listener is ILGTemplateParserListener typedListener) typedListener.EnterErrorStructuredName(this);
 		}
 		public override void ExitRule(IParseTreeListener listener) {
-			ILGTemplateParserListener typedListener = listener as ILGTemplateParserListener;
-			if (typedListener != null) typedListener.ExitErrorStructuredName(this);
+			if (listener is ILGTemplateParserListener typedListener) typedListener.ExitErrorStructuredName(this);
 		}
 		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
-			ILGTemplateParserVisitor<TResult> typedVisitor = visitor as ILGTemplateParserVisitor<TResult>;
-			if (typedVisitor != null) return typedVisitor.VisitErrorStructuredName(this);
+			if (visitor is ILGTemplateParserVisitor<TResult> typedVisitor) return typedVisitor.VisitErrorStructuredName(this);
 			else return visitor.VisitChildren(this);
 		}
 	}
@@ -556,16 +532,13 @@ public StructuredBodyContentLineContext(ParserRuleContext parent, int invokingSt
 		}
 		public override int RuleIndex { get { return RULE_structuredBodyContentLine; } }
 		public override void EnterRule(IParseTreeListener listener) {
-			ILGTemplateParserListener typedListener = listener as ILGTemplateParserListener;
-			if (typedListener != null) typedListener.EnterStructuredBodyContentLine(this);
+			if (listener is ILGTemplateParserListener typedListener) typedListener.EnterStructuredBodyContentLine(this);
 		}
 		public override void ExitRule(IParseTreeListener listener) {
-			ILGTemplateParserListener typedListener = listener as ILGTemplateParserListener;
-			if (typedListener != null) typedListener.ExitStructuredBodyContentLine(this);
+			if (listener is ILGTemplateParserListener typedListener) typedListener.ExitStructuredBodyContentLine(this);
 		}
 		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
-			ILGTemplateParserVisitor<TResult> typedVisitor = visitor as ILGTemplateParserVisitor<TResult>;
-			if (typedVisitor != null) return typedVisitor.VisitStructuredBodyContentLine(this);
+			if (visitor is ILGTemplateParserVisitor<TResult> typedVisitor) return typedVisitor.VisitStructuredBodyContentLine(this);
 			else return visitor.VisitChildren(this);
 		}
 	}
@@ -638,16 +611,13 @@ public ErrorStructureLineContext(ParserRuleContext parent, int invokingState)
 		}
 		public override int RuleIndex { get { return RULE_errorStructureLine; } }
 		public override void EnterRule(IParseTreeListener listener) {
-			ILGTemplateParserListener typedListener = listener as ILGTemplateParserListener;
-			if (typedListener != null) typedListener.EnterErrorStructureLine(this);
+			if (listener is ILGTemplateParserListener typedListener) typedListener.EnterErrorStructureLine(this);
 		}
 		public override void ExitRule(IParseTreeListener listener) {
-			ILGTemplateParserListener typedListener = listener as ILGTemplateParserListener;
-			if (typedListener != null) typedListener.ExitErrorStructureLine(this);
+			if (listener is ILGTemplateParserListener typedListener) typedListener.ExitErrorStructureLine(this);
 		}
 		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
-			ILGTemplateParserVisitor<TResult> typedVisitor = visitor as ILGTemplateParserVisitor<TResult>;
-			if (typedVisitor != null) return typedVisitor.VisitErrorStructureLine(this);
+			if (visitor is ILGTemplateParserVisitor<TResult> typedVisitor) return typedVisitor.VisitErrorStructureLine(this);
 			else return visitor.VisitChildren(this);
 		}
 	}
@@ -744,16 +714,13 @@ public KeyValueStructureLineContext(ParserRuleContext parent, int invokingState)
 		}
 		public override int RuleIndex { get { return RULE_keyValueStructureLine; } }
 		public override void EnterRule(IParseTreeListener listener) {
-			ILGTemplateParserListener typedListener = listener as ILGTemplateParserListener;
-			if (typedListener != null) typedListener.EnterKeyValueStructureLine(this);
+			if (listener is ILGTemplateParserListener typedListener) typedListener.EnterKeyValueStructureLine(this);
 		}
 		public override void ExitRule(IParseTreeListener listener) {
-			ILGTemplateParserListener typedListener = listener as ILGTemplateParserListener;
-			if (typedListener != null) typedListener.ExitKeyValueStructureLine(this);
+			if (listener is ILGTemplateParserListener typedListener) typedListener.ExitKeyValueStructureLine(this);
 		}
 		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
-			ILGTemplateParserVisitor<TResult> typedVisitor = visitor as ILGTemplateParserVisitor<TResult>;
-			if (typedVisitor != null) return typedVisitor.VisitKeyValueStructureLine(this);
+			if (visitor is ILGTemplateParserVisitor<TResult> typedVisitor) return typedVisitor.VisitKeyValueStructureLine(this);
 			else return visitor.VisitChildren(this);
 		}
 	}
@@ -817,16 +784,13 @@ public KeyValueStructureValueContext(ParserRuleContext parent, int invokingState
 		}
 		public override int RuleIndex { get { return RULE_keyValueStructureValue; } }
 		public override void EnterRule(IParseTreeListener listener) {
-			ILGTemplateParserListener typedListener = listener as ILGTemplateParserListener;
-			if (typedListener != null) typedListener.EnterKeyValueStructureValue(this);
+			if (listener is ILGTemplateParserListener typedListener) typedListener.EnterKeyValueStructureValue(this);
 		}
 		public override void ExitRule(IParseTreeListener listener) {
-			ILGTemplateParserListener typedListener = listener as ILGTemplateParserListener;
-			if (typedListener != null) typedListener.ExitKeyValueStructureValue(this);
+			if (listener is ILGTemplateParserListener typedListener) typedListener.ExitKeyValueStructureValue(this);
 		}
 		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
-			ILGTemplateParserVisitor<TResult> typedVisitor = visitor as ILGTemplateParserVisitor<TResult>;
-			if (typedVisitor != null) return typedVisitor.VisitKeyValueStructureValue(this);
+			if (visitor is ILGTemplateParserVisitor<TResult> typedVisitor) return typedVisitor.VisitKeyValueStructureValue(this);
 			else return visitor.VisitChildren(this);
 		}
 	}
@@ -891,16 +855,13 @@ public StructuredBodyEndLineContext(ParserRuleContext parent, int invokingState)
 		}
 		public override int RuleIndex { get { return RULE_structuredBodyEndLine; } }
 		public override void EnterRule(IParseTreeListener listener) {
-			ILGTemplateParserListener typedListener = listener as ILGTemplateParserListener;
-			if (typedListener != null) typedListener.EnterStructuredBodyEndLine(this);
+			if (listener is ILGTemplateParserListener typedListener) typedListener.EnterStructuredBodyEndLine(this);
 		}
 		public override void ExitRule(IParseTreeListener listener) {
-			ILGTemplateParserListener typedListener = listener as ILGTemplateParserListener;
-			if (typedListener != null) typedListener.ExitStructuredBodyEndLine(this);
+			if (listener is ILGTemplateParserListener typedListener) typedListener.ExitStructuredBodyEndLine(this);
 		}
 		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
-			ILGTemplateParserVisitor<TResult> typedVisitor = visitor as ILGTemplateParserVisitor<TResult>;
-			if (typedVisitor != null) return typedVisitor.VisitStructuredBodyEndLine(this);
+			if (visitor is ILGTemplateParserVisitor<TResult> typedVisitor) return typedVisitor.VisitStructuredBodyEndLine(this);
 			else return visitor.VisitChildren(this);
 		}
 	}
@@ -939,16 +900,13 @@ public NormalTemplateBodyContext(ParserRuleContext parent, int invokingState)
 		}
 		public override int RuleIndex { get { return RULE_normalTemplateBody; } }
 		public override void EnterRule(IParseTreeListener listener) {
-			ILGTemplateParserListener typedListener = listener as ILGTemplateParserListener;
-			if (typedListener != null) typedListener.EnterNormalTemplateBody(this);
+			if (listener is ILGTemplateParserListener typedListener) typedListener.EnterNormalTemplateBody(this);
 		}
 		public override void ExitRule(IParseTreeListener listener) {
-			ILGTemplateParserListener typedListener = listener as ILGTemplateParserListener;
-			if (typedListener != null) typedListener.ExitNormalTemplateBody(this);
+			if (listener is ILGTemplateParserListener typedListener) typedListener.ExitNormalTemplateBody(this);
 		}
 		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
-			ILGTemplateParserVisitor<TResult> typedVisitor = visitor as ILGTemplateParserVisitor<TResult>;
-			if (typedVisitor != null) return typedVisitor.VisitNormalTemplateBody(this);
+			if (visitor is ILGTemplateParserVisitor<TResult> typedVisitor) return typedVisitor.VisitNormalTemplateBody(this);
 			else return visitor.VisitChildren(this);
 		}
 	}
@@ -1006,16 +964,13 @@ public TemplateStringContext(ParserRuleContext parent, int invokingState)
 		}
 		public override int RuleIndex { get { return RULE_templateString; } }
 		public override void EnterRule(IParseTreeListener listener) {
-			ILGTemplateParserListener typedListener = listener as ILGTemplateParserListener;
-			if (typedListener != null) typedListener.EnterTemplateString(this);
+			if (listener is ILGTemplateParserListener typedListener) typedListener.EnterTemplateString(this);
 		}
 		public override void ExitRule(IParseTreeListener listener) {
-			ILGTemplateParserListener typedListener = listener as ILGTemplateParserListener;
-			if (typedListener != null) typedListener.ExitTemplateString(this);
+			if (listener is ILGTemplateParserListener typedListener) typedListener.ExitTemplateString(this);
 		}
 		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
-			ILGTemplateParserVisitor<TResult> typedVisitor = visitor as ILGTemplateParserVisitor<TResult>;
-			if (typedVisitor != null) return typedVisitor.VisitTemplateString(this);
+			if (visitor is ILGTemplateParserVisitor<TResult> typedVisitor) return typedVisitor.VisitTemplateString(this);
 			else return visitor.VisitChildren(this);
 		}
 	}
@@ -1079,16 +1034,13 @@ public NormalTemplateStringContext(ParserRuleContext parent, int invokingState)
 		}
 		public override int RuleIndex { get { return RULE_normalTemplateString; } }
 		public override void EnterRule(IParseTreeListener listener) {
-			ILGTemplateParserListener typedListener = listener as ILGTemplateParserListener;
-			if (typedListener != null) typedListener.EnterNormalTemplateString(this);
+			if (listener is ILGTemplateParserListener typedListener) typedListener.EnterNormalTemplateString(this);
 		}
 		public override void ExitRule(IParseTreeListener listener) {
-			ILGTemplateParserListener typedListener = listener as ILGTemplateParserListener;
-			if (typedListener != null) typedListener.ExitNormalTemplateString(this);
+			if (listener is ILGTemplateParserListener typedListener) typedListener.ExitNormalTemplateString(this);
 		}
 		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
-			ILGTemplateParserVisitor<TResult> typedVisitor = visitor as ILGTemplateParserVisitor<TResult>;
-			if (typedVisitor != null) return typedVisitor.VisitNormalTemplateString(this);
+			if (visitor is ILGTemplateParserVisitor<TResult> typedVisitor) return typedVisitor.VisitNormalTemplateString(this);
 			else return visitor.VisitChildren(this);
 		}
 	}
@@ -1175,16 +1127,13 @@ public ErrorTemplateStringContext(ParserRuleContext parent, int invokingState)
 		}
 		public override int RuleIndex { get { return RULE_errorTemplateString; } }
 		public override void EnterRule(IParseTreeListener listener) {
-			ILGTemplateParserListener typedListener = listener as ILGTemplateParserListener;
-			if (typedListener != null) typedListener.EnterErrorTemplateString(this);
+			if (listener is ILGTemplateParserListener typedListener) typedListener.EnterErrorTemplateString(this);
 		}
 		public override void ExitRule(IParseTreeListener listener) {
-			ILGTemplateParserListener typedListener = listener as ILGTemplateParserListener;
-			if (typedListener != null) typedListener.ExitErrorTemplateString(this);
+			if (listener is ILGTemplateParserListener typedListener) typedListener.ExitErrorTemplateString(this);
 		}
 		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
-			ILGTemplateParserVisitor<TResult> typedVisitor = visitor as ILGTemplateParserVisitor<TResult>;
-			if (typedVisitor != null) return typedVisitor.VisitErrorTemplateString(this);
+			if (visitor is ILGTemplateParserVisitor<TResult> typedVisitor) return typedVisitor.VisitErrorTemplateString(this);
 			else return visitor.VisitChildren(this);
 		}
 	}
@@ -1242,16 +1191,13 @@ public IfElseTemplateBodyContext(ParserRuleContext parent, int invokingState)
 		}
 		public override int RuleIndex { get { return RULE_ifElseTemplateBody; } }
 		public override void EnterRule(IParseTreeListener listener) {
-			ILGTemplateParserListener typedListener = listener as ILGTemplateParserListener;
-			if (typedListener != null) typedListener.EnterIfElseTemplateBody(this);
+			if (listener is ILGTemplateParserListener typedListener) typedListener.EnterIfElseTemplateBody(this);
 		}
 		public override void ExitRule(IParseTreeListener listener) {
-			ILGTemplateParserListener typedListener = listener as ILGTemplateParserListener;
-			if (typedListener != null) typedListener.ExitIfElseTemplateBody(this);
+			if (listener is ILGTemplateParserListener typedListener) typedListener.ExitIfElseTemplateBody(this);
 		}
 		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
-			ILGTemplateParserVisitor<TResult> typedVisitor = visitor as ILGTemplateParserVisitor<TResult>;
-			if (typedVisitor != null) return typedVisitor.VisitIfElseTemplateBody(this);
+			if (visitor is ILGTemplateParserVisitor<TResult> typedVisitor) return typedVisitor.VisitIfElseTemplateBody(this);
 			else return visitor.VisitChildren(this);
 		}
 	}
@@ -1303,16 +1249,13 @@ public IfConditionRuleContext(ParserRuleContext parent, int invokingState)
 		}
 		public override int RuleIndex { get { return RULE_ifConditionRule; } }
 		public override void EnterRule(IParseTreeListener listener) {
-			ILGTemplateParserListener typedListener = listener as ILGTemplateParserListener;
-			if (typedListener != null) typedListener.EnterIfConditionRule(this);
+			if (listener is ILGTemplateParserListener typedListener) typedListener.EnterIfConditionRule(this);
 		}
 		public override void ExitRule(IParseTreeListener listener) {
-			ILGTemplateParserListener typedListener = listener as ILGTemplateParserListener;
-			if (typedListener != null) typedListener.ExitIfConditionRule(this);
+			if (listener is ILGTemplateParserListener typedListener) typedListener.ExitIfConditionRule(this);
 		}
 		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
-			ILGTemplateParserVisitor<TResult> typedVisitor = visitor as ILGTemplateParserVisitor<TResult>;
-			if (typedVisitor != null) return typedVisitor.VisitIfConditionRule(this);
+			if (visitor is ILGTemplateParserVisitor<TResult> typedVisitor) return typedVisitor.VisitIfConditionRule(this);
 			else return visitor.VisitChildren(this);
 		}
 	}
@@ -1372,16 +1315,13 @@ public IfConditionContext(ParserRuleContext parent, int invokingState)
 		}
 		public override int RuleIndex { get { return RULE_ifCondition; } }
 		public override void EnterRule(IParseTreeListener listener) {
-			ILGTemplateParserListener typedListener = listener as ILGTemplateParserListener;
-			if (typedListener != null) typedListener.EnterIfCondition(this);
+			if (listener is ILGTemplateParserListener typedListener) typedListener.EnterIfCondition(this);
 		}
 		public override void ExitRule(IParseTreeListener listener) {
-			ILGTemplateParserListener typedListener = listener as ILGTemplateParserListener;
-			if (typedListener != null) typedListener.ExitIfCondition(this);
+			if (listener is ILGTemplateParserListener typedListener) typedListener.ExitIfCondition(this);
 		}
 		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
-			ILGTemplateParserVisitor<TResult> typedVisitor = visitor as ILGTemplateParserVisitor<TResult>;
-			if (typedVisitor != null) return typedVisitor.VisitIfCondition(this);
+			if (visitor is ILGTemplateParserVisitor<TResult> typedVisitor) return typedVisitor.VisitIfCondition(this);
 			else return visitor.VisitChildren(this);
 		}
 	}
@@ -1461,16 +1401,13 @@ public SwitchCaseTemplateBodyContext(ParserRuleContext parent, int invokingState
 		}
 		public override int RuleIndex { get { return RULE_switchCaseTemplateBody; } }
 		public override void EnterRule(IParseTreeListener listener) {
-			ILGTemplateParserListener typedListener = listener as ILGTemplateParserListener;
-			if (typedListener != null) typedListener.EnterSwitchCaseTemplateBody(this);
+			if (listener is ILGTemplateParserListener typedListener) typedListener.EnterSwitchCaseTemplateBody(this);
 		}
 		public override void ExitRule(IParseTreeListener listener) {
-			ILGTemplateParserListener typedListener = listener as ILGTemplateParserListener;
-			if (typedListener != null) typedListener.ExitSwitchCaseTemplateBody(this);
+			if (listener is ILGTemplateParserListener typedListener) typedListener.ExitSwitchCaseTemplateBody(this);
 		}
 		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
-			ILGTemplateParserVisitor<TResult> typedVisitor = visitor as ILGTemplateParserVisitor<TResult>;
-			if (typedVisitor != null) return typedVisitor.VisitSwitchCaseTemplateBody(this);
+			if (visitor is ILGTemplateParserVisitor<TResult> typedVisitor) return typedVisitor.VisitSwitchCaseTemplateBody(this);
 			else return visitor.VisitChildren(this);
 		}
 	}
@@ -1522,16 +1459,13 @@ public SwitchCaseRuleContext(ParserRuleContext parent, int invokingState)
 		}
 		public override int RuleIndex { get { return RULE_switchCaseRule; } }
 		public override void EnterRule(IParseTreeListener listener) {
-			ILGTemplateParserListener typedListener = listener as ILGTemplateParserListener;
-			if (typedListener != null) typedListener.EnterSwitchCaseRule(this);
+			if (listener is ILGTemplateParserListener typedListener) typedListener.EnterSwitchCaseRule(this);
 		}
 		public override void ExitRule(IParseTreeListener listener) {
-			ILGTemplateParserListener typedListener = listener as ILGTemplateParserListener;
-			if (typedListener != null) typedListener.ExitSwitchCaseRule(this);
+			if (listener is ILGTemplateParserListener typedListener) typedListener.ExitSwitchCaseRule(this);
 		}
 		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
-			ILGTemplateParserVisitor<TResult> typedVisitor = visitor as ILGTemplateParserVisitor<TResult>;
-			if (typedVisitor != null) return typedVisitor.VisitSwitchCaseRule(this);
+			if (visitor is ILGTemplateParserVisitor<TResult> typedVisitor) return typedVisitor.VisitSwitchCaseRule(this);
 			else return visitor.VisitChildren(this);
 		}
 	}
@@ -1591,16 +1525,13 @@ public SwitchCaseStatContext(ParserRuleContext parent, int invokingState)
 		}
 		public override int RuleIndex { get { return RULE_switchCaseStat; } }
 		public override void EnterRule(IParseTreeListener listener) {
-			ILGTemplateParserListener typedListener = listener as ILGTemplateParserListener;
-			if (typedListener != null) typedListener.EnterSwitchCaseStat(this);
+			if (listener is ILGTemplateParserListener typedListener) typedListener.EnterSwitchCaseStat(this);
 		}
 		public override void ExitRule(IParseTreeListener listener) {
-			ILGTemplateParserListener typedListener = listener as ILGTemplateParserListener;
-			if (typedListener != null) typedListener.ExitSwitchCaseStat(this);
+			if (listener is ILGTemplateParserListener typedListener) typedListener.ExitSwitchCaseStat(this);
 		}
 		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
-			ILGTemplateParserVisitor<TResult> typedVisitor = visitor as ILGTemplateParserVisitor<TResult>;
-			if (typedVisitor != null) return typedVisitor.VisitSwitchCaseStat(this);
+			if (visitor is ILGTemplateParserVisitor<TResult> typedVisitor) return typedVisitor.VisitSwitchCaseStat(this);
 			else return visitor.VisitChildren(this);
 		}
 	}
@@ -1675,16 +1606,13 @@ public ExpressionContext(ParserRuleContext parent, int invokingState)
 		}
 		public override int RuleIndex { get { return RULE_expression; } }
 		public override void EnterRule(IParseTreeListener listener) {
-			ILGTemplateParserListener typedListener = listener as ILGTemplateParserListener;
-			if (typedListener != null) typedListener.EnterExpression(this);
+			if (listener is ILGTemplateParserListener typedListener) typedListener.EnterExpression(this);
 		}
 		public override void ExitRule(IParseTreeListener listener) {
-			ILGTemplateParserListener typedListener = listener as ILGTemplateParserListener;
-			if (typedListener != null) typedListener.ExitExpression(this);
+			if (listener is ILGTemplateParserListener typedListener) typedListener.ExitExpression(this);
 		}
 		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
-			ILGTemplateParserVisitor<TResult> typedVisitor = visitor as ILGTemplateParserVisitor<TResult>;
-			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
+			if (visitor is ILGTemplateParserVisitor<TResult> typedVisitor) return typedVisitor.VisitExpression(this);
 			else return visitor.VisitChildren(this);
 		}
 	}
@@ -1718,16 +1646,13 @@ public ExpressionInStructureContext(ParserRuleContext parent, int invokingState)
 		}
 		public override int RuleIndex { get { return RULE_expressionInStructure; } }
 		public override void EnterRule(IParseTreeListener listener) {
-			ILGTemplateParserListener typedListener = listener as ILGTemplateParserListener;
-			if (typedListener != null) typedListener.EnterExpressionInStructure(this);
+			if (listener is ILGTemplateParserListener typedListener) typedListener.EnterExpressionInStructure(this);
 		}
 		public override void ExitRule(IParseTreeListener listener) {
-			ILGTemplateParserListener typedListener = listener as ILGTemplateParserListener;
-			if (typedListener != null) typedListener.ExitExpressionInStructure(this);
+			if (listener is ILGTemplateParserListener typedListener) typedListener.ExitExpressionInStructure(this);
 		}
 		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
-			ILGTemplateParserVisitor<TResult> typedVisitor = visitor as ILGTemplateParserVisitor<TResult>;
-			if (typedVisitor != null) return typedVisitor.VisitExpressionInStructure(this);
+			if (visitor is ILGTemplateParserVisitor<TResult> typedVisitor) return typedVisitor.VisitExpressionInStructure(this);
 			else return visitor.VisitChildren(this);
 		}
 	}
diff --git a/libraries/Microsoft.Bot.Builder.TemplateManager/TemplateManager.cs b/libraries/Microsoft.Bot.Builder.TemplateManager/TemplateManager.cs
index 8ad85e737..0eeade4d9 100644
--- a/libraries/Microsoft.Bot.Builder.TemplateManager/TemplateManager.cs
+++ b/libraries/Microsoft.Bot.Builder.TemplateManager/TemplateManager.cs
@@ -158,9 +158,9 @@ public async Task<Activity> RenderTemplate(ITurnContext turnContext, string lang
                     object templateOutput = await renderer.RenderTemplate(turnContext, locale, templateId, data).ConfigureAwait(false);
                     if (templateOutput != null)
                     {
-                        if (templateOutput is string)
+                        if (templateOutput is string s)
                         {
-                            return new Activity(type: ActivityTypes.Message, text: (string)templateOutput);
+                            return new Activity(type: ActivityTypes.Message, s);
                         }
                         else
                         {
diff --git a/libraries/Microsoft.Bot.Builder/Adapters/TestAdapter.cs b/libraries/Microsoft.Bot.Builder/Adapters/TestAdapter.cs
index 20f1f412f..3cddcd22a 100644
--- a/libraries/Microsoft.Bot.Builder/Adapters/TestAdapter.cs
+++ b/libraries/Microsoft.Bot.Builder/Adapters/TestAdapter.cs
@@ -921,8 +921,7 @@ private class UserTokenKey
 
             public override bool Equals(object obj)
             {
-                var rhs = obj as UserTokenKey;
-                if (rhs != null)
+                if (obj is UserTokenKey rhs)
                 {
                     return string.Equals(this.ConnectionName, rhs.ConnectionName, StringComparison.Ordinal) &&
                         string.Equals(this.UserId, rhs.UserId, StringComparison.Ordinal) &&
@@ -946,8 +945,7 @@ private class ExchangableTokenKey : UserTokenKey
 
             public override bool Equals(object obj)
             {
-                var rhs = obj as ExchangableTokenKey;
-                if (rhs != null)
+                if (obj is ExchangableTokenKey rhs)
                 {
                     return string.Equals(this.ExchangableItem, rhs.ExchangableItem, StringComparison.Ordinal) &&
                         base.Equals(obj);
diff --git a/libraries/Microsoft.Bot.Configuration/BotConfiguration.cs b/libraries/Microsoft.Bot.Configuration/BotConfiguration.cs
index 0796d76a7..a9c05067d 100644
--- a/libraries/Microsoft.Bot.Configuration/BotConfiguration.cs
+++ b/libraries/Microsoft.Bot.Configuration/BotConfiguration.cs
@@ -288,7 +288,7 @@ public void ConnectService(ConnectedService newService)
                 newService.Id = (++maxValue).ToString();
 #pragma warning restore CA1305 // Specify IFormatProvider
             }
-            else if (this.Services.Where(s => s.Type == newService.Type && s.Id == newService.Id).Any())
+            else if (this.Services.Any(s => s.Type == newService.Type && s.Id == newService.Id))
             {
                 throw new InvalidOperationException($"service with {newService.Id} is already connected");
             }
diff --git a/libraries/Microsoft.Bot.Connector/Attachments.cs b/libraries/Microsoft.Bot.Connector/Attachments.cs
index eb4ea6fa4..15182e3c4 100644
--- a/libraries/Microsoft.Bot.Connector/Attachments.cs
+++ b/libraries/Microsoft.Bot.Connector/Attachments.cs
@@ -169,10 +169,7 @@ public async Task<HttpOperationResponse<AttachmentInfo>> GetAttachmentInfoWithHt
 
                 httpRequest.Dispose();
 
-                if (httpResponse != null)
-                {
-                    httpResponse.Dispose();
-                }
+                httpResponse?.Dispose();
 
                 throw ex;
             }
@@ -193,10 +190,7 @@ public async Task<HttpOperationResponse<AttachmentInfo>> GetAttachmentInfoWithHt
                 catch (JsonException ex)
                 {
                     httpRequest.Dispose();
-                    if (httpResponse != null)
-                    {
-                        httpResponse.Dispose();
-                    }
+                    httpResponse?.Dispose();
 
                     throw new SerializationException("Unable to deserialize the response.", responseContent, ex);
                 }
@@ -343,10 +337,7 @@ public async Task<HttpOperationResponse<Stream>> GetAttachmentWithHttpMessagesAs
                 }
 
                 httpRequest.Dispose();
-                if (httpResponse != null)
-                {
-                    httpResponse.Dispose();
-                }
+                httpResponse?.Dispose();
 
                 throw ex;
             }
diff --git a/libraries/Microsoft.Bot.Connector/Authentication/AdalAuthenticator.cs b/libraries/Microsoft.Bot.Connector/Authentication/AdalAuthenticator.cs
index 99e13e165..63ec0f2b1 100644
--- a/libraries/Microsoft.Bot.Connector/Authentication/AdalAuthenticator.cs
+++ b/libraries/Microsoft.Bot.Connector/Authentication/AdalAuthenticator.cs
@@ -140,12 +140,9 @@ private static RetryParams HandleAdalException(Exception ex, int currentRetryCou
             {
                 return ComputeAdalRetry(ex);
             }
-            else if (ex is ThrottleException)
+            else if (ex is ThrottleException throttlException)
             {
-                // This is an exception that we threw, with knowledge that
-                // one of our threads is trying to acquire a token from the server
-                // Use the retry parameters recommended in the exception
-                ThrottleException throttlException = (ThrottleException)ex;
+                // This is an exception that we threw, with knowledge that                // one of our threads is trying to acquire a token from the server                // Use the retry parameters recommended in the exception
                 return throttlException.RetryParams ?? RetryParams.DefaultBackOff(currentRetryCount);
             }
             else if (IsAdalServiceInvalidRequest(ex))
@@ -196,10 +193,8 @@ private static bool IsAdalServiceInvalidRequest(Exception ex)
 
         private static RetryParams ComputeAdalRetry(Exception ex)
         {
-            if (ex is AdalServiceException)
+            if (ex is AdalServiceException adalServiceException)
             {
-                AdalServiceException adalServiceException = (AdalServiceException)ex;
-
                 // When the Service Token Server (STS) is too busy because of “too many requests”,
                 // it returns an HTTP error 429 with a hint about when you can try again (Retry-After response field) as a delay in seconds
                 if (adalServiceException.ErrorCode == MsalTemporarilyUnavailable || adalServiceException.StatusCode == HttpTooManyRequests)
diff --git a/libraries/Microsoft.Bot.Connector/BotSignIn.cs b/libraries/Microsoft.Bot.Connector/BotSignIn.cs
index 8e6d7e9dd..41d935312 100644
--- a/libraries/Microsoft.Bot.Connector/BotSignIn.cs
+++ b/libraries/Microsoft.Bot.Connector/BotSignIn.cs
@@ -176,10 +176,7 @@ public async Task<HttpOperationResponse<string>> GetSignInUrlWithHttpMessagesAsy
 
                 httpRequest.Dispose();
 
-                if (httpResponse != null)
-                {
-                    httpResponse.Dispose();
-                }
+                httpResponse?.Dispose();
 
                 throw ex;
             }
@@ -201,10 +198,7 @@ public async Task<HttpOperationResponse<string>> GetSignInUrlWithHttpMessagesAsy
                 catch (JsonException ex)
                 {
                     httpRequest.Dispose();
-                    if (httpResponse != null)
-                    {
-                        httpResponse.Dispose();
-                    }
+                    httpResponse?.Dispose();
 
                     throw new SerializationException("Unable to deserialize the response.", responseContent, ex);
                 }
diff --git a/libraries/Microsoft.Bot.Connector/Conversations.cs b/libraries/Microsoft.Bot.Connector/Conversations.cs
index 2fb97e99a..2f6df8e30 100644
--- a/libraries/Microsoft.Bot.Connector/Conversations.cs
+++ b/libraries/Microsoft.Bot.Connector/Conversations.cs
@@ -176,10 +176,7 @@ public async Task<HttpOperationResponse<ConversationsResult>> GetConversationsWi
                 }
 
                 httpRequest.Dispose();
-                if (httpResponse != null)
-                {
-                    httpResponse.Dispose();
-                }
+                httpResponse?.Dispose();
 
                 throw ex;
             }
@@ -200,10 +197,7 @@ public async Task<HttpOperationResponse<ConversationsResult>> GetConversationsWi
                 catch (JsonException ex)
                 {
                     httpRequest.Dispose();
-                    if (httpResponse != null)
-                    {
-                        httpResponse.Dispose();
-                    }
+                    httpResponse?.Dispose();
 
                     throw new SerializationException("Unable to deserialize the response.", responseContent, ex);
                 }
@@ -368,10 +362,7 @@ public async Task<HttpOperationResponse<ConversationResourceResponse>> CreateCon
                 }
 
                 httpRequest.Dispose();
-                if (httpResponse != null)
-                {
-                    httpResponse.Dispose();
-                }
+                httpResponse?.Dispose();
 
                 throw ex;
             }
@@ -392,10 +383,7 @@ public async Task<HttpOperationResponse<ConversationResourceResponse>> CreateCon
                 catch (JsonException ex)
                 {
                     httpRequest.Dispose();
-                    if (httpResponse != null)
-                    {
-                        httpResponse.Dispose();
-                    }
+                    httpResponse?.Dispose();
 
                     throw new SerializationException("Unable to deserialize the response.", responseContent, ex);
                 }
@@ -412,10 +400,7 @@ public async Task<HttpOperationResponse<ConversationResourceResponse>> CreateCon
                 catch (JsonException ex)
                 {
                     httpRequest.Dispose();
-                    if (httpResponse != null)
-                    {
-                        httpResponse.Dispose();
-                    }
+                    httpResponse?.Dispose();
 
                     throw new SerializationException("Unable to deserialize the response.", responseContent, ex);
                 }
@@ -432,10 +417,7 @@ public async Task<HttpOperationResponse<ConversationResourceResponse>> CreateCon
                 catch (JsonException ex)
                 {
                     httpRequest.Dispose();
-                    if (httpResponse != null)
-                    {
-                        httpResponse.Dispose();
-                    }
+                    httpResponse?.Dispose();
 
                     throw new SerializationException("Unable to deserialize the response.", responseContent, ex);
                 }
@@ -601,10 +583,7 @@ public async Task<HttpOperationResponse<ResourceResponse>> SendToConversationWit
                 }
 
                 httpRequest.Dispose();
-                if (httpResponse != null)
-                {
-                    httpResponse.Dispose();
-                }
+                httpResponse?.Dispose();
 
                 throw ex;
             }
@@ -625,10 +604,7 @@ public async Task<HttpOperationResponse<ResourceResponse>> SendToConversationWit
                 catch (JsonException ex)
                 {
                     httpRequest.Dispose();
-                    if (httpResponse != null)
-                    {
-                        httpResponse.Dispose();
-                    }
+                    httpResponse?.Dispose();
 
                     throw new SerializationException("Unable to deserialize the response.", responseContent, ex);
                 }
@@ -645,10 +621,7 @@ public async Task<HttpOperationResponse<ResourceResponse>> SendToConversationWit
                 catch (JsonException ex)
                 {
                     httpRequest.Dispose();
-                    if (httpResponse != null)
-                    {
-                        httpResponse.Dispose();
-                    }
+                    httpResponse?.Dispose();
 
                     throw new SerializationException("Unable to deserialize the response.", responseContent, ex);
                 }
@@ -665,10 +638,7 @@ public async Task<HttpOperationResponse<ResourceResponse>> SendToConversationWit
                 catch (JsonException ex)
                 {
                     httpRequest.Dispose();
-                    if (httpResponse != null)
-                    {
-                        httpResponse.Dispose();
-                    }
+                    httpResponse?.Dispose();
 
                     throw new SerializationException("Unable to deserialize the response.", responseContent, ex);
                 }
@@ -828,10 +798,7 @@ public async Task<HttpOperationResponse<ResourceResponse>> SendConversationHisto
                 }
 
                 httpRequest.Dispose();
-                if (httpResponse != null)
-                {
-                    httpResponse.Dispose();
-                }
+                httpResponse?.Dispose();
 
                 throw ex;
             }
@@ -852,10 +819,7 @@ public async Task<HttpOperationResponse<ResourceResponse>> SendConversationHisto
                 catch (JsonException ex)
                 {
                     httpRequest.Dispose();
-                    if (httpResponse != null)
-                    {
-                        httpResponse.Dispose();
-                    }
+                    httpResponse?.Dispose();
 
                     throw new SerializationException("Unable to deserialize the response.", responseContent, ex);
                 }
@@ -872,10 +836,7 @@ public async Task<HttpOperationResponse<ResourceResponse>> SendConversationHisto
                 catch (JsonException ex)
                 {
                     httpRequest.Dispose();
-                    if (httpResponse != null)
-                    {
-                        httpResponse.Dispose();
-                    }
+                    httpResponse?.Dispose();
 
                     throw new SerializationException("Unable to deserialize the response.", responseContent, ex);
                 }
@@ -892,10 +853,7 @@ public async Task<HttpOperationResponse<ResourceResponse>> SendConversationHisto
                 catch (JsonException ex)
                 {
                     httpRequest.Dispose();
-                    if (httpResponse != null)
-                    {
-                        httpResponse.Dispose();
-                    }
+                    httpResponse?.Dispose();
 
                     throw new SerializationException("Unable to deserialize the response.", responseContent, ex);
                 }
@@ -1065,10 +1023,7 @@ public async Task<HttpOperationResponse<ResourceResponse>> UpdateActivityWithHtt
                 }
 
                 httpRequest.Dispose();
-                if (httpResponse != null)
-                {
-                    httpResponse.Dispose();
-                }
+                httpResponse?.Dispose();
 
                 throw ex;
             }
@@ -1089,10 +1044,7 @@ public async Task<HttpOperationResponse<ResourceResponse>> UpdateActivityWithHtt
                 catch (JsonException ex)
                 {
                     httpRequest.Dispose();
-                    if (httpResponse != null)
-                    {
-                        httpResponse.Dispose();
-                    }
+                    httpResponse?.Dispose();
 
                     throw new SerializationException("Unable to deserialize the response.", responseContent, ex);
                 }
@@ -1109,10 +1061,7 @@ public async Task<HttpOperationResponse<ResourceResponse>> UpdateActivityWithHtt
                 catch (JsonException ex)
                 {
                     httpRequest.Dispose();
-                    if (httpResponse != null)
-                    {
-                        httpResponse.Dispose();
-                    }
+                    httpResponse?.Dispose();
 
                     throw new SerializationException("Unable to deserialize the response.", responseContent, ex);
                 }
@@ -1129,10 +1078,7 @@ public async Task<HttpOperationResponse<ResourceResponse>> UpdateActivityWithHtt
                 catch (JsonException ex)
                 {
                     httpRequest.Dispose();
-                    if (httpResponse != null)
-                    {
-                        httpResponse.Dispose();
-                    }
+                    httpResponse?.Dispose();
 
                     throw new SerializationException("Unable to deserialize the response.", responseContent, ex);
                 }
@@ -1308,10 +1254,7 @@ public async Task<HttpOperationResponse<ResourceResponse>> ReplyToActivityWithHt
                 }
 
                 httpRequest.Dispose();
-                if (httpResponse != null)
-                {
-                    httpResponse.Dispose();
-                }
+                httpResponse?.Dispose();
 
                 throw ex;
             }
@@ -1332,10 +1275,7 @@ public async Task<HttpOperationResponse<ResourceResponse>> ReplyToActivityWithHt
                 catch (JsonException ex)
                 {
                     httpRequest.Dispose();
-                    if (httpResponse != null)
-                    {
-                        httpResponse.Dispose();
-                    }
+                    httpResponse?.Dispose();
 
                     throw new SerializationException("Unable to deserialize the response.", responseContent, ex);
                 }
@@ -1352,10 +1292,7 @@ public async Task<HttpOperationResponse<ResourceResponse>> ReplyToActivityWithHt
                 catch (JsonException ex)
                 {
                     httpRequest.Dispose();
-                    if (httpResponse != null)
-                    {
-                        httpResponse.Dispose();
-                    }
+                    httpResponse?.Dispose();
 
                     throw new SerializationException("Unable to deserialize the response.", responseContent, ex);
                 }
@@ -1372,10 +1309,7 @@ public async Task<HttpOperationResponse<ResourceResponse>> ReplyToActivityWithHt
                 catch (JsonException ex)
                 {
                     httpRequest.Dispose();
-                    if (httpResponse != null)
-                    {
-                        httpResponse.Dispose();
-                    }
+                    httpResponse?.Dispose();
 
                     throw new SerializationException("Unable to deserialize the response.", responseContent, ex);
                 }
@@ -1524,10 +1458,7 @@ public async Task<HttpOperationResponse> DeleteActivityWithHttpMessagesAsync(str
                 }
 
                 httpRequest.Dispose();
-                if (httpResponse != null)
-                {
-                    httpResponse.Dispose();
-                }
+                httpResponse?.Dispose();
 
                 throw ex;
             }
@@ -1672,10 +1603,7 @@ public async Task<HttpOperationResponse<IList<ChannelAccount>>> GetConversationM
                 }
 
                 httpRequest.Dispose();
-                if (httpResponse != null)
-                {
-                    httpResponse.Dispose();
-                }
+                httpResponse?.Dispose();
 
                 throw ex;
             }
@@ -1696,10 +1624,7 @@ public async Task<HttpOperationResponse<IList<ChannelAccount>>> GetConversationM
                 catch (JsonException ex)
                 {
                     httpRequest.Dispose();
-                    if (httpResponse != null)
-                    {
-                        httpResponse.Dispose();
-                    }
+                    httpResponse?.Dispose();
 
                     throw new SerializationException("Unable to deserialize the response.", responseContent, ex);
                 }
@@ -1851,10 +1776,7 @@ public async Task<HttpOperationResponse<ChannelAccount>> GetConversationMemberWi
                 }
 
                 httpRequest.Dispose();
-                if (httpResponse != null)
-                {
-                    httpResponse.Dispose();
-                }
+                httpResponse?.Dispose();
 
                 throw ex;
             }
@@ -1875,10 +1797,7 @@ public async Task<HttpOperationResponse<ChannelAccount>> GetConversationMemberWi
                 catch (JsonException ex)
                 {
                     httpRequest.Dispose();
-                    if (httpResponse != null)
-                    {
-                        httpResponse.Dispose();
-                    }
+                    httpResponse?.Dispose();
 
                     throw new SerializationException("Unable to deserialize the response.", responseContent, ex);
                 }
@@ -2051,10 +1970,7 @@ public async Task<HttpOperationResponse<PagedMembersResult>> GetConversationPage
                 }
 
                 httpRequest.Dispose();
-                if (httpResponse != null)
-                {
-                    httpResponse.Dispose();
-                }
+                httpResponse?.Dispose();
 
                 throw ex;
             }
@@ -2075,10 +1991,7 @@ public async Task<HttpOperationResponse<PagedMembersResult>> GetConversationPage
                 catch (JsonException ex)
                 {
                     httpRequest.Dispose();
-                    if (httpResponse != null)
-                    {
-                        httpResponse.Dispose();
-                    }
+                    httpResponse?.Dispose();
 
                     throw new SerializationException("Unable to deserialize the response.", responseContent, ex);
                 }
@@ -2229,10 +2142,7 @@ public async Task<HttpOperationResponse> DeleteConversationMemberWithHttpMessage
                 }
 
                 httpRequest.Dispose();
-                if (httpResponse != null)
-                {
-                    httpResponse.Dispose();
-                }
+                httpResponse?.Dispose();
 
                 throw ex;
             }
@@ -2388,10 +2298,7 @@ public async Task<HttpOperationResponse<IList<ChannelAccount>>> GetActivityMembe
                 }
 
                 httpRequest.Dispose();
-                if (httpResponse != null)
-                {
-                    httpResponse.Dispose();
-                }
+                httpResponse?.Dispose();
 
                 throw ex;
             }
@@ -2412,10 +2319,7 @@ public async Task<HttpOperationResponse<IList<ChannelAccount>>> GetActivityMembe
                 catch (JsonException ex)
                 {
                     httpRequest.Dispose();
-                    if (httpResponse != null)
-                    {
-                        httpResponse.Dispose();
-                    }
+                    httpResponse?.Dispose();
 
                     throw new SerializationException("Unable to deserialize the response.", responseContent, ex);
                 }
@@ -2575,10 +2479,7 @@ public async Task<HttpOperationResponse<ResourceResponse>> UploadAttachmentWithH
                 }
 
                 httpRequest.Dispose();
-                if (httpResponse != null)
-                {
-                    httpResponse.Dispose();
-                }
+                httpResponse?.Dispose();
 
                 throw ex;
             }
@@ -2599,10 +2500,7 @@ public async Task<HttpOperationResponse<ResourceResponse>> UploadAttachmentWithH
                 catch (JsonException ex)
                 {
                     httpRequest.Dispose();
-                    if (httpResponse != null)
-                    {
-                        httpResponse.Dispose();
-                    }
+                    httpResponse?.Dispose();
 
                     throw new SerializationException("Unable to deserialize the response.", responseContent, ex);
                 }
@@ -2619,10 +2517,7 @@ public async Task<HttpOperationResponse<ResourceResponse>> UploadAttachmentWithH
                 catch (JsonException ex)
                 {
                     httpRequest.Dispose();
-                    if (httpResponse != null)
-                    {
-                        httpResponse.Dispose();
-                    }
+                    httpResponse?.Dispose();
 
                     throw new SerializationException("Unable to deserialize the response.", responseContent, ex);
                 }
@@ -2639,10 +2534,7 @@ public async Task<HttpOperationResponse<ResourceResponse>> UploadAttachmentWithH
                 catch (JsonException ex)
                 {
                     httpRequest.Dispose();
-                    if (httpResponse != null)
-                    {
-                        httpResponse.Dispose();
-                    }
+                    httpResponse?.Dispose();
 
                     throw new SerializationException("Unable to deserialize the response.", responseContent, ex);
                 }
diff --git a/libraries/Microsoft.Bot.Connector/OAuthClient.cs b/libraries/Microsoft.Bot.Connector/OAuthClient.cs
index 1a4193b7f..2a04d31a3 100644
--- a/libraries/Microsoft.Bot.Connector/OAuthClient.cs
+++ b/libraries/Microsoft.Bot.Connector/OAuthClient.cs
@@ -440,10 +440,7 @@ public async Task<HttpOperationResponse<object>> ExchangeAsyncWithHttpMessagesAs
                 }
 
                 httpRequest.Dispose();
-                if (httpResponse != null)
-                {
-                    httpResponse.Dispose();
-                }
+                httpResponse?.Dispose();
 
                 throw ex;
             }
@@ -464,10 +461,7 @@ public async Task<HttpOperationResponse<object>> ExchangeAsyncWithHttpMessagesAs
                 catch (JsonException ex)
                 {
                     httpRequest.Dispose();
-                    if (httpResponse != null)
-                    {
-                        httpResponse.Dispose();
-                    }
+                    httpResponse?.Dispose();
 
                     throw new SerializationException("Unable to deserialize the response.", responseContent, ex);
                 }
@@ -484,10 +478,7 @@ public async Task<HttpOperationResponse<object>> ExchangeAsyncWithHttpMessagesAs
                 catch (JsonException ex)
                 {
                     httpRequest.Dispose();
-                    if (httpResponse != null)
-                    {
-                        httpResponse.Dispose();
-                    }
+                    httpResponse?.Dispose();
 
                     throw new SerializationException("Unable to deserialize the response.", responseContent, ex);
                 }
@@ -504,10 +495,7 @@ public async Task<HttpOperationResponse<object>> ExchangeAsyncWithHttpMessagesAs
                 catch (JsonException ex)
                 {
                     httpRequest.Dispose();
-                    if (httpResponse != null)
-                    {
-                        httpResponse.Dispose();
-                    }
+                    httpResponse?.Dispose();
 
                     throw new SerializationException("Unable to deserialize the response.", responseContent, ex);
                 }
@@ -650,10 +638,7 @@ public async Task<HttpOperationResponse<SignInResource>> GetSignInResourceWithHt
                 }
 
                 httpRequest.Dispose();
-                if (httpResponse != null)
-                {
-                    httpResponse.Dispose();
-                }
+                httpResponse?.Dispose();
 
                 throw ex;
             }
@@ -681,10 +666,7 @@ public async Task<HttpOperationResponse<SignInResource>> GetSignInResourceWithHt
                     else
                     {
                         httpRequest.Dispose();
-                        if (httpResponse != null)
-                        {
-                            httpResponse.Dispose();
-                        }
+                        httpResponse?.Dispose();
 
                         throw new SerializationException("Unable to deserialize the response.", responseContent, ex);
                     }
diff --git a/libraries/Microsoft.Bot.Connector/OAuthClientOld.cs b/libraries/Microsoft.Bot.Connector/OAuthClientOld.cs
index cca40dbab..515cfc0a7 100644
--- a/libraries/Microsoft.Bot.Connector/OAuthClientOld.cs
+++ b/libraries/Microsoft.Bot.Connector/OAuthClientOld.cs
@@ -150,10 +150,7 @@ public async Task<TokenResponse> GetUserTokenAsync(string userId, string connect
                 {
                     // ignore json exception and return null
                     httpRequest.Dispose();
-                    if (httpResponse != null)
-                    {
-                        httpResponse.Dispose();
-                    }
+                    httpResponse?.Dispose();
 
                     return null;
                 }
@@ -396,10 +393,7 @@ public async Task<TokenStatus[]> GetTokenStatusAsync(string userId, string inclu
                 {
                     // ignore json exception and return null
                     httpRequest.Dispose();
-                    if (httpResponse != null)
-                    {
-                        httpResponse.Dispose();
-                    }
+                    httpResponse?.Dispose();
 
                     return null;
                 }
@@ -554,10 +548,7 @@ public async Task<TokenStatus[]> GetTokenStatusAsync(string userId, string inclu
             finally
             {
                 httpRequest.Dispose();
-                if (httpResponse != null)
-                {
-                    httpResponse.Dispose();
-                }
+                httpResponse?.Dispose();
             }
         }
 
diff --git a/libraries/Microsoft.Bot.Connector/Teams/TeamsOperations.cs b/libraries/Microsoft.Bot.Connector/Teams/TeamsOperations.cs
index d6ed8edc9..b6a98d01e 100644
--- a/libraries/Microsoft.Bot.Connector/Teams/TeamsOperations.cs
+++ b/libraries/Microsoft.Bot.Connector/Teams/TeamsOperations.cs
@@ -301,10 +301,7 @@ private async Task<HttpOperationResponse<T>> GetResponseAsync<T>(string url, boo
                 }
 
                 httpRequest.Dispose();
-                if (httpResponse != null)
-                {
-                    httpResponse.Dispose();
-                }
+                httpResponse?.Dispose();
 
                 throw ex;
             }
@@ -325,10 +322,7 @@ private async Task<HttpOperationResponse<T>> GetResponseAsync<T>(string url, boo
                 catch (JsonException ex)
                 {
                     httpRequest.Dispose();
-                    if (httpResponse != null)
-                    {
-                        httpResponse.Dispose();
-                    }
+                    httpResponse?.Dispose();
 
                     throw new SerializationException("Unable to deserialize the response.", responseContent, ex);
                 }
diff --git a/libraries/Microsoft.Bot.Connector/UserToken.cs b/libraries/Microsoft.Bot.Connector/UserToken.cs
index 64b7debde..02fc2e635 100644
--- a/libraries/Microsoft.Bot.Connector/UserToken.cs
+++ b/libraries/Microsoft.Bot.Connector/UserToken.cs
@@ -172,10 +172,7 @@ public async Task<HttpOperationResponse<TokenResponse>> GetTokenWithHttpMessages
                 }
 
                 httpRequest.Dispose();
-                if (httpResponse != null)
-                {
-                    httpResponse.Dispose();
-                }
+                httpResponse?.Dispose();
 
                 throw ex;
             }
@@ -196,10 +193,7 @@ public async Task<HttpOperationResponse<TokenResponse>> GetTokenWithHttpMessages
                 catch (JsonException ex)
                 {
                     httpRequest.Dispose();
-                    if (httpResponse != null)
-                    {
-                        httpResponse.Dispose();
-                    }
+                    httpResponse?.Dispose();
 
                     throw new SerializationException("Unable to deserialize the response.", responseContent, ex);
                 }
@@ -216,10 +210,7 @@ public async Task<HttpOperationResponse<TokenResponse>> GetTokenWithHttpMessages
                 catch (JsonException ex)
                 {
                     httpRequest.Dispose();
-                    if (httpResponse != null)
-                    {
-                        httpResponse.Dispose();
-                    }
+                    httpResponse?.Dispose();
 
                     throw new SerializationException("Unable to deserialize the response.", responseContent, ex);
                 }
@@ -378,10 +369,7 @@ public async Task<HttpOperationResponse<TokenResponse>> GetTokenWithHttpMessages
                 }
 
                 httpRequest.Dispose();
-                if (httpResponse != null)
-                {
-                    httpResponse.Dispose();
-                }
+                httpResponse?.Dispose();
 
                 throw ex;
             }
@@ -402,10 +390,7 @@ public async Task<HttpOperationResponse<TokenResponse>> GetTokenWithHttpMessages
                 catch (JsonException ex)
                 {
                     httpRequest.Dispose();
-                    if (httpResponse != null)
-                    {
-                        httpResponse.Dispose();
-                    }
+                    httpResponse?.Dispose();
 
                     throw new SerializationException("Unable to deserialize the response.", responseContent, ex);
                 }
@@ -546,10 +531,7 @@ public async Task<HttpOperationResponse<object>> SignOutWithHttpMessagesAsync(st
                 }
 
                 httpRequest.Dispose();
-                if (httpResponse != null)
-                {
-                    httpResponse.Dispose();
-                }
+                httpResponse?.Dispose();
 
                 throw ex;
             }
@@ -570,10 +552,7 @@ public async Task<HttpOperationResponse<object>> SignOutWithHttpMessagesAsync(st
                 catch (JsonException ex)
                 {
                     httpRequest.Dispose();
-                    if (httpResponse != null)
-                    {
-                        httpResponse.Dispose();
-                    }
+                    httpResponse?.Dispose();
 
                     throw new SerializationException("Unable to deserialize the response.", responseContent, ex);
                 }
@@ -714,10 +693,7 @@ public async Task<HttpOperationResponse<IList<TokenStatus>>> GetTokenStatusWithH
                 }
 
                 httpRequest.Dispose();
-                if (httpResponse != null)
-                {
-                    httpResponse.Dispose();
-                }
+                httpResponse?.Dispose();
 
                 throw ex;
             }
@@ -738,10 +714,7 @@ public async Task<HttpOperationResponse<IList<TokenStatus>>> GetTokenStatusWithH
                 catch (JsonException ex)
                 {
                     httpRequest.Dispose();
-                    if (httpResponse != null)
-                    {
-                        httpResponse.Dispose();
-                    }
+                    httpResponse?.Dispose();
 
                     throw new SerializationException("Unable to deserialize the response.", responseContent, ex);
                 }
diff --git a/libraries/Microsoft.Bot.Streaming/Transport/WebSocket/WebSocketServer.cs b/libraries/Microsoft.Bot.Streaming/Transport/WebSocket/WebSocketServer.cs
index 4a60b3e41..17f71bfce 100644
--- a/libraries/Microsoft.Bot.Streaming/Transport/WebSocket/WebSocketServer.cs
+++ b/libraries/Microsoft.Bot.Streaming/Transport/WebSocket/WebSocketServer.cs
@@ -140,10 +140,7 @@ protected virtual void Dispose(bool disposing)
                 Disconnect();
 
                 // Dispose managed objects owned by the class here.
-                if (_webSocketTransport != null)
-                {
-                    _webSocketTransport.Dispose();
-                }
+                _webSocketTransport?.Dispose();
 
                 if (_sender is IDisposable disposableSender)
                 {
diff --git a/libraries/Parsers/Microsoft.Bot.Builder.Parsers.LU/Generated/LUFileParser.cs b/libraries/Parsers/Microsoft.Bot.Builder.Parsers.LU/Generated/LUFileParser.cs
index ea0c27192..9f5a3d357 100644
--- a/libraries/Parsers/Microsoft.Bot.Builder.Parsers.LU/Generated/LUFileParser.cs
+++ b/libraries/Parsers/Microsoft.Bot.Builder.Parsers.LU/Generated/LUFileParser.cs
@@ -144,16 +144,13 @@ public FileContext(ParserRuleContext parent, int invokingState)
 		}
 		public override int RuleIndex { get { return RULE_file; } }
 		public override void EnterRule(IParseTreeListener listener) {
-			ILUFileParserListener typedListener = listener as ILUFileParserListener;
-			if (typedListener != null) typedListener.EnterFile(this);
+			if (listener is ILUFileParserListener typedListener) typedListener.EnterFile(this);
 		}
 		public override void ExitRule(IParseTreeListener listener) {
-			ILUFileParserListener typedListener = listener as ILUFileParserListener;
-			if (typedListener != null) typedListener.ExitFile(this);
+			if (listener is ILUFileParserListener typedListener) typedListener.ExitFile(this);
 		}
 		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
-			ILUFileParserVisitor<TResult> typedVisitor = visitor as ILUFileParserVisitor<TResult>;
-			if (typedVisitor != null) return typedVisitor.VisitFile(this);
+			if (visitor is ILUFileParserVisitor<TResult> typedVisitor) return typedVisitor.VisitFile(this);
 			else return visitor.VisitChildren(this);
 		}
 	}
@@ -233,16 +230,13 @@ public ParagraphContext(ParserRuleContext parent, int invokingState)
 		}
 		public override int RuleIndex { get { return RULE_paragraph; } }
 		public override void EnterRule(IParseTreeListener listener) {
-			ILUFileParserListener typedListener = listener as ILUFileParserListener;
-			if (typedListener != null) typedListener.EnterParagraph(this);
+			if (listener is ILUFileParserListener typedListener) typedListener.EnterParagraph(this);
 		}
 		public override void ExitRule(IParseTreeListener listener) {
-			ILUFileParserListener typedListener = listener as ILUFileParserListener;
-			if (typedListener != null) typedListener.ExitParagraph(this);
+			if (listener is ILUFileParserListener typedListener) typedListener.ExitParagraph(this);
 		}
 		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
-			ILUFileParserVisitor<TResult> typedVisitor = visitor as ILUFileParserVisitor<TResult>;
-			if (typedVisitor != null) return typedVisitor.VisitParagraph(this);
+			if (visitor is ILUFileParserVisitor<TResult> typedVisitor) return typedVisitor.VisitParagraph(this);
 			else return visitor.VisitChildren(this);
 		}
 	}
@@ -335,16 +329,13 @@ public NewlineContext(ParserRuleContext parent, int invokingState)
 		}
 		public override int RuleIndex { get { return RULE_newline; } }
 		public override void EnterRule(IParseTreeListener listener) {
-			ILUFileParserListener typedListener = listener as ILUFileParserListener;
-			if (typedListener != null) typedListener.EnterNewline(this);
+			if (listener is ILUFileParserListener typedListener) typedListener.EnterNewline(this);
 		}
 		public override void ExitRule(IParseTreeListener listener) {
-			ILUFileParserListener typedListener = listener as ILUFileParserListener;
-			if (typedListener != null) typedListener.ExitNewline(this);
+			if (listener is ILUFileParserListener typedListener) typedListener.ExitNewline(this);
 		}
 		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
-			ILUFileParserVisitor<TResult> typedVisitor = visitor as ILUFileParserVisitor<TResult>;
-			if (typedVisitor != null) return typedVisitor.VisitNewline(this);
+			if (visitor is ILUFileParserVisitor<TResult> typedVisitor) return typedVisitor.VisitNewline(this);
 			else return visitor.VisitChildren(this);
 		}
 	}
@@ -407,16 +398,13 @@ public ErrorStringContext(ParserRuleContext parent, int invokingState)
 		}
 		public override int RuleIndex { get { return RULE_errorString; } }
 		public override void EnterRule(IParseTreeListener listener) {
-			ILUFileParserListener typedListener = listener as ILUFileParserListener;
-			if (typedListener != null) typedListener.EnterErrorString(this);
+			if (listener is ILUFileParserListener typedListener) typedListener.EnterErrorString(this);
 		}
 		public override void ExitRule(IParseTreeListener listener) {
-			ILUFileParserListener typedListener = listener as ILUFileParserListener;
-			if (typedListener != null) typedListener.ExitErrorString(this);
+			if (listener is ILUFileParserListener typedListener) typedListener.ExitErrorString(this);
 		}
 		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
-			ILUFileParserVisitor<TResult> typedVisitor = visitor as ILUFileParserVisitor<TResult>;
-			if (typedVisitor != null) return typedVisitor.VisitErrorString(this);
+			if (visitor is ILUFileParserVisitor<TResult> typedVisitor) return typedVisitor.VisitErrorString(this);
 			else return visitor.VisitChildren(this);
 		}
 	}
@@ -483,16 +471,13 @@ public NestedIntentSectionContext(ParserRuleContext parent, int invokingState)
 		}
 		public override int RuleIndex { get { return RULE_nestedIntentSection; } }
 		public override void EnterRule(IParseTreeListener listener) {
-			ILUFileParserListener typedListener = listener as ILUFileParserListener;
-			if (typedListener != null) typedListener.EnterNestedIntentSection(this);
+			if (listener is ILUFileParserListener typedListener) typedListener.EnterNestedIntentSection(this);
 		}
 		public override void ExitRule(IParseTreeListener listener) {
-			ILUFileParserListener typedListener = listener as ILUFileParserListener;
-			if (typedListener != null) typedListener.ExitNestedIntentSection(this);
+			if (listener is ILUFileParserListener typedListener) typedListener.ExitNestedIntentSection(this);
 		}
 		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
-			ILUFileParserVisitor<TResult> typedVisitor = visitor as ILUFileParserVisitor<TResult>;
-			if (typedVisitor != null) return typedVisitor.VisitNestedIntentSection(this);
+			if (visitor is ILUFileParserVisitor<TResult> typedVisitor) return typedVisitor.VisitNestedIntentSection(this);
 			else return visitor.VisitChildren(this);
 		}
 	}
@@ -534,16 +519,13 @@ public NestedIntentNameLineContext(ParserRuleContext parent, int invokingState)
 		}
 		public override int RuleIndex { get { return RULE_nestedIntentNameLine; } }
 		public override void EnterRule(IParseTreeListener listener) {
-			ILUFileParserListener typedListener = listener as ILUFileParserListener;
-			if (typedListener != null) typedListener.EnterNestedIntentNameLine(this);
+			if (listener is ILUFileParserListener typedListener) typedListener.EnterNestedIntentNameLine(this);
 		}
 		public override void ExitRule(IParseTreeListener listener) {
-			ILUFileParserListener typedListener = listener as ILUFileParserListener;
-			if (typedListener != null) typedListener.ExitNestedIntentNameLine(this);
+			if (listener is ILUFileParserListener typedListener) typedListener.ExitNestedIntentNameLine(this);
 		}
 		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
-			ILUFileParserVisitor<TResult> typedVisitor = visitor as ILUFileParserVisitor<TResult>;
-			if (typedVisitor != null) return typedVisitor.VisitNestedIntentNameLine(this);
+			if (visitor is ILUFileParserVisitor<TResult> typedVisitor) return typedVisitor.VisitNestedIntentNameLine(this);
 			else return visitor.VisitChildren(this);
 		}
 	}
@@ -614,16 +596,13 @@ public NestedIntentNameContext(ParserRuleContext parent, int invokingState)
 		}
 		public override int RuleIndex { get { return RULE_nestedIntentName; } }
 		public override void EnterRule(IParseTreeListener listener) {
-			ILUFileParserListener typedListener = listener as ILUFileParserListener;
-			if (typedListener != null) typedListener.EnterNestedIntentName(this);
+			if (listener is ILUFileParserListener typedListener) typedListener.EnterNestedIntentName(this);
 		}
 		public override void ExitRule(IParseTreeListener listener) {
-			ILUFileParserListener typedListener = listener as ILUFileParserListener;
-			if (typedListener != null) typedListener.ExitNestedIntentName(this);
+			if (listener is ILUFileParserListener typedListener) typedListener.ExitNestedIntentName(this);
 		}
 		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
-			ILUFileParserVisitor<TResult> typedVisitor = visitor as ILUFileParserVisitor<TResult>;
-			if (typedVisitor != null) return typedVisitor.VisitNestedIntentName(this);
+			if (visitor is ILUFileParserVisitor<TResult> typedVisitor) return typedVisitor.VisitNestedIntentName(this);
 			else return visitor.VisitChildren(this);
 		}
 	}
@@ -693,16 +672,13 @@ public NameIdentifierContext(ParserRuleContext parent, int invokingState)
 		}
 		public override int RuleIndex { get { return RULE_nameIdentifier; } }
 		public override void EnterRule(IParseTreeListener listener) {
-			ILUFileParserListener typedListener = listener as ILUFileParserListener;
-			if (typedListener != null) typedListener.EnterNameIdentifier(this);
+			if (listener is ILUFileParserListener typedListener) typedListener.EnterNameIdentifier(this);
 		}
 		public override void ExitRule(IParseTreeListener listener) {
-			ILUFileParserListener typedListener = listener as ILUFileParserListener;
-			if (typedListener != null) typedListener.ExitNameIdentifier(this);
+			if (listener is ILUFileParserListener typedListener) typedListener.ExitNameIdentifier(this);
 		}
 		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
-			ILUFileParserVisitor<TResult> typedVisitor = visitor as ILUFileParserVisitor<TResult>;
-			if (typedVisitor != null) return typedVisitor.VisitNameIdentifier(this);
+			if (visitor is ILUFileParserVisitor<TResult> typedVisitor) return typedVisitor.VisitNameIdentifier(this);
 			else return visitor.VisitChildren(this);
 		}
 	}
@@ -756,16 +732,13 @@ public NestedIntentBodyDefinitionContext(ParserRuleContext parent, int invokingS
 		}
 		public override int RuleIndex { get { return RULE_nestedIntentBodyDefinition; } }
 		public override void EnterRule(IParseTreeListener listener) {
-			ILUFileParserListener typedListener = listener as ILUFileParserListener;
-			if (typedListener != null) typedListener.EnterNestedIntentBodyDefinition(this);
+			if (listener is ILUFileParserListener typedListener) typedListener.EnterNestedIntentBodyDefinition(this);
 		}
 		public override void ExitRule(IParseTreeListener listener) {
-			ILUFileParserListener typedListener = listener as ILUFileParserListener;
-			if (typedListener != null) typedListener.ExitNestedIntentBodyDefinition(this);
+			if (listener is ILUFileParserListener typedListener) typedListener.ExitNestedIntentBodyDefinition(this);
 		}
 		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
-			ILUFileParserVisitor<TResult> typedVisitor = visitor as ILUFileParserVisitor<TResult>;
-			if (typedVisitor != null) return typedVisitor.VisitNestedIntentBodyDefinition(this);
+			if (visitor is ILUFileParserVisitor<TResult> typedVisitor) return typedVisitor.VisitNestedIntentBodyDefinition(this);
 			else return visitor.VisitChildren(this);
 		}
 	}
@@ -825,16 +798,13 @@ public SubIntentDefinitionContext(ParserRuleContext parent, int invokingState)
 		}
 		public override int RuleIndex { get { return RULE_subIntentDefinition; } }
 		public override void EnterRule(IParseTreeListener listener) {
-			ILUFileParserListener typedListener = listener as ILUFileParserListener;
-			if (typedListener != null) typedListener.EnterSubIntentDefinition(this);
+			if (listener is ILUFileParserListener typedListener) typedListener.EnterSubIntentDefinition(this);
 		}
 		public override void ExitRule(IParseTreeListener listener) {
-			ILUFileParserListener typedListener = listener as ILUFileParserListener;
-			if (typedListener != null) typedListener.ExitSubIntentDefinition(this);
+			if (listener is ILUFileParserListener typedListener) typedListener.ExitSubIntentDefinition(this);
 		}
 		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
-			ILUFileParserVisitor<TResult> typedVisitor = visitor as ILUFileParserVisitor<TResult>;
-			if (typedVisitor != null) return typedVisitor.VisitSubIntentDefinition(this);
+			if (visitor is ILUFileParserVisitor<TResult> typedVisitor) return typedVisitor.VisitSubIntentDefinition(this);
 			else return visitor.VisitChildren(this);
 		}
 	}
@@ -885,16 +855,13 @@ public SimpleIntentSectionContext(ParserRuleContext parent, int invokingState)
 		}
 		public override int RuleIndex { get { return RULE_simpleIntentSection; } }
 		public override void EnterRule(IParseTreeListener listener) {
-			ILUFileParserListener typedListener = listener as ILUFileParserListener;
-			if (typedListener != null) typedListener.EnterSimpleIntentSection(this);
+			if (listener is ILUFileParserListener typedListener) typedListener.EnterSimpleIntentSection(this);
 		}
 		public override void ExitRule(IParseTreeListener listener) {
-			ILUFileParserListener typedListener = listener as ILUFileParserListener;
-			if (typedListener != null) typedListener.ExitSimpleIntentSection(this);
+			if (listener is ILUFileParserListener typedListener) typedListener.ExitSimpleIntentSection(this);
 		}
 		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
-			ILUFileParserVisitor<TResult> typedVisitor = visitor as ILUFileParserVisitor<TResult>;
-			if (typedVisitor != null) return typedVisitor.VisitSimpleIntentSection(this);
+			if (visitor is ILUFileParserVisitor<TResult> typedVisitor) return typedVisitor.VisitSimpleIntentSection(this);
 			else return visitor.VisitChildren(this);
 		}
 	}
@@ -933,16 +900,13 @@ public IntentDefinitionContext(ParserRuleContext parent, int invokingState)
 		}
 		public override int RuleIndex { get { return RULE_intentDefinition; } }
 		public override void EnterRule(IParseTreeListener listener) {
-			ILUFileParserListener typedListener = listener as ILUFileParserListener;
-			if (typedListener != null) typedListener.EnterIntentDefinition(this);
+			if (listener is ILUFileParserListener typedListener) typedListener.EnterIntentDefinition(this);
 		}
 		public override void ExitRule(IParseTreeListener listener) {
-			ILUFileParserListener typedListener = listener as ILUFileParserListener;
-			if (typedListener != null) typedListener.ExitIntentDefinition(this);
+			if (listener is ILUFileParserListener typedListener) typedListener.ExitIntentDefinition(this);
 		}
 		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
-			ILUFileParserVisitor<TResult> typedVisitor = visitor as ILUFileParserVisitor<TResult>;
-			if (typedVisitor != null) return typedVisitor.VisitIntentDefinition(this);
+			if (visitor is ILUFileParserVisitor<TResult> typedVisitor) return typedVisitor.VisitIntentDefinition(this);
 			else return visitor.VisitChildren(this);
 		}
 	}
@@ -995,16 +959,13 @@ public IntentNameLineContext(ParserRuleContext parent, int invokingState)
 		}
 		public override int RuleIndex { get { return RULE_intentNameLine; } }
 		public override void EnterRule(IParseTreeListener listener) {
-			ILUFileParserListener typedListener = listener as ILUFileParserListener;
-			if (typedListener != null) typedListener.EnterIntentNameLine(this);
+			if (listener is ILUFileParserListener typedListener) typedListener.EnterIntentNameLine(this);
 		}
 		public override void ExitRule(IParseTreeListener listener) {
-			ILUFileParserListener typedListener = listener as ILUFileParserListener;
-			if (typedListener != null) typedListener.ExitIntentNameLine(this);
+			if (listener is ILUFileParserListener typedListener) typedListener.ExitIntentNameLine(this);
 		}
 		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
-			ILUFileParserVisitor<TResult> typedVisitor = visitor as ILUFileParserVisitor<TResult>;
-			if (typedVisitor != null) return typedVisitor.VisitIntentNameLine(this);
+			if (visitor is ILUFileParserVisitor<TResult> typedVisitor) return typedVisitor.VisitIntentNameLine(this);
 			else return visitor.VisitChildren(this);
 		}
 	}
@@ -1084,16 +1045,13 @@ public IntentNameContext(ParserRuleContext parent, int invokingState)
 		}
 		public override int RuleIndex { get { return RULE_intentName; } }
 		public override void EnterRule(IParseTreeListener listener) {
-			ILUFileParserListener typedListener = listener as ILUFileParserListener;
-			if (typedListener != null) typedListener.EnterIntentName(this);
+			if (listener is ILUFileParserListener typedListener) typedListener.EnterIntentName(this);
 		}
 		public override void ExitRule(IParseTreeListener listener) {
-			ILUFileParserListener typedListener = listener as ILUFileParserListener;
-			if (typedListener != null) typedListener.ExitIntentName(this);
+			if (listener is ILUFileParserListener typedListener) typedListener.ExitIntentName(this);
 		}
 		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
-			ILUFileParserVisitor<TResult> typedVisitor = visitor as ILUFileParserVisitor<TResult>;
-			if (typedVisitor != null) return typedVisitor.VisitIntentName(this);
+			if (visitor is ILUFileParserVisitor<TResult> typedVisitor) return typedVisitor.VisitIntentName(this);
 			else return visitor.VisitChildren(this);
 		}
 	}
@@ -1162,16 +1120,13 @@ public IntentBodyContext(ParserRuleContext parent, int invokingState)
 		}
 		public override int RuleIndex { get { return RULE_intentBody; } }
 		public override void EnterRule(IParseTreeListener listener) {
-			ILUFileParserListener typedListener = listener as ILUFileParserListener;
-			if (typedListener != null) typedListener.EnterIntentBody(this);
+			if (listener is ILUFileParserListener typedListener) typedListener.EnterIntentBody(this);
 		}
 		public override void ExitRule(IParseTreeListener listener) {
-			ILUFileParserListener typedListener = listener as ILUFileParserListener;
-			if (typedListener != null) typedListener.ExitIntentBody(this);
+			if (listener is ILUFileParserListener typedListener) typedListener.ExitIntentBody(this);
 		}
 		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
-			ILUFileParserVisitor<TResult> typedVisitor = visitor as ILUFileParserVisitor<TResult>;
-			if (typedVisitor != null) return typedVisitor.VisitIntentBody(this);
+			if (visitor is ILUFileParserVisitor<TResult> typedVisitor) return typedVisitor.VisitIntentBody(this);
 			else return visitor.VisitChildren(this);
 		}
 	}
@@ -1242,16 +1197,13 @@ public NormalIntentBodyContext(ParserRuleContext parent, int invokingState)
 		}
 		public override int RuleIndex { get { return RULE_normalIntentBody; } }
 		public override void EnterRule(IParseTreeListener listener) {
-			ILUFileParserListener typedListener = listener as ILUFileParserListener;
-			if (typedListener != null) typedListener.EnterNormalIntentBody(this);
+			if (listener is ILUFileParserListener typedListener) typedListener.EnterNormalIntentBody(this);
 		}
 		public override void ExitRule(IParseTreeListener listener) {
-			ILUFileParserListener typedListener = listener as ILUFileParserListener;
-			if (typedListener != null) typedListener.ExitNormalIntentBody(this);
+			if (listener is ILUFileParserListener typedListener) typedListener.ExitNormalIntentBody(this);
 		}
 		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
-			ILUFileParserVisitor<TResult> typedVisitor = visitor as ILUFileParserVisitor<TResult>;
-			if (typedVisitor != null) return typedVisitor.VisitNormalIntentBody(this);
+			if (visitor is ILUFileParserVisitor<TResult> typedVisitor) return typedVisitor.VisitNormalIntentBody(this);
 			else return visitor.VisitChildren(this);
 		}
 	}
@@ -1349,16 +1301,13 @@ public NormalIntentStringContext(ParserRuleContext parent, int invokingState)
 		}
 		public override int RuleIndex { get { return RULE_normalIntentString; } }
 		public override void EnterRule(IParseTreeListener listener) {
-			ILUFileParserListener typedListener = listener as ILUFileParserListener;
-			if (typedListener != null) typedListener.EnterNormalIntentString(this);
+			if (listener is ILUFileParserListener typedListener) typedListener.EnterNormalIntentString(this);
 		}
 		public override void ExitRule(IParseTreeListener listener) {
-			ILUFileParserListener typedListener = listener as ILUFileParserListener;
-			if (typedListener != null) typedListener.ExitNormalIntentString(this);
+			if (listener is ILUFileParserListener typedListener) typedListener.ExitNormalIntentString(this);
 		}
 		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
-			ILUFileParserVisitor<TResult> typedVisitor = visitor as ILUFileParserVisitor<TResult>;
-			if (typedVisitor != null) return typedVisitor.VisitNormalIntentString(this);
+			if (visitor is ILUFileParserVisitor<TResult> typedVisitor) return typedVisitor.VisitNormalIntentString(this);
 			else return visitor.VisitChildren(this);
 		}
 	}
@@ -1432,16 +1381,13 @@ public NewEntitySectionContext(ParserRuleContext parent, int invokingState)
 		}
 		public override int RuleIndex { get { return RULE_newEntitySection; } }
 		public override void EnterRule(IParseTreeListener listener) {
-			ILUFileParserListener typedListener = listener as ILUFileParserListener;
-			if (typedListener != null) typedListener.EnterNewEntitySection(this);
+			if (listener is ILUFileParserListener typedListener) typedListener.EnterNewEntitySection(this);
 		}
 		public override void ExitRule(IParseTreeListener listener) {
-			ILUFileParserListener typedListener = listener as ILUFileParserListener;
-			if (typedListener != null) typedListener.ExitNewEntitySection(this);
+			if (listener is ILUFileParserListener typedListener) typedListener.ExitNewEntitySection(this);
 		}
 		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
-			ILUFileParserVisitor<TResult> typedVisitor = visitor as ILUFileParserVisitor<TResult>;
-			if (typedVisitor != null) return typedVisitor.VisitNewEntitySection(this);
+			if (visitor is ILUFileParserVisitor<TResult> typedVisitor) return typedVisitor.VisitNewEntitySection(this);
 			else return visitor.VisitChildren(this);
 		}
 	}
@@ -1480,16 +1426,13 @@ public NewEntityDefinitionContext(ParserRuleContext parent, int invokingState)
 		}
 		public override int RuleIndex { get { return RULE_newEntityDefinition; } }
 		public override void EnterRule(IParseTreeListener listener) {
-			ILUFileParserListener typedListener = listener as ILUFileParserListener;
-			if (typedListener != null) typedListener.EnterNewEntityDefinition(this);
+			if (listener is ILUFileParserListener typedListener) typedListener.EnterNewEntityDefinition(this);
 		}
 		public override void ExitRule(IParseTreeListener listener) {
-			ILUFileParserListener typedListener = listener as ILUFileParserListener;
-			if (typedListener != null) typedListener.ExitNewEntityDefinition(this);
+			if (listener is ILUFileParserListener typedListener) typedListener.ExitNewEntityDefinition(this);
 		}
 		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
-			ILUFileParserVisitor<TResult> typedVisitor = visitor as ILUFileParserVisitor<TResult>;
-			if (typedVisitor != null) return typedVisitor.VisitNewEntityDefinition(this);
+			if (visitor is ILUFileParserVisitor<TResult> typedVisitor) return typedVisitor.VisitNewEntityDefinition(this);
 			else return visitor.VisitChildren(this);
 		}
 	}
@@ -1549,16 +1492,13 @@ public NewEntityListbodyContext(ParserRuleContext parent, int invokingState)
 		}
 		public override int RuleIndex { get { return RULE_newEntityListbody; } }
 		public override void EnterRule(IParseTreeListener listener) {
-			ILUFileParserListener typedListener = listener as ILUFileParserListener;
-			if (typedListener != null) typedListener.EnterNewEntityListbody(this);
+			if (listener is ILUFileParserListener typedListener) typedListener.EnterNewEntityListbody(this);
 		}
 		public override void ExitRule(IParseTreeListener listener) {
-			ILUFileParserListener typedListener = listener as ILUFileParserListener;
-			if (typedListener != null) typedListener.ExitNewEntityListbody(this);
+			if (listener is ILUFileParserListener typedListener) typedListener.ExitNewEntityListbody(this);
 		}
 		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
-			ILUFileParserVisitor<TResult> typedVisitor = visitor as ILUFileParserVisitor<TResult>;
-			if (typedVisitor != null) return typedVisitor.VisitNewEntityListbody(this);
+			if (visitor is ILUFileParserVisitor<TResult> typedVisitor) return typedVisitor.VisitNewEntityListbody(this);
 			else return visitor.VisitChildren(this);
 		}
 	}
@@ -1654,16 +1594,13 @@ public NewEntityLineContext(ParserRuleContext parent, int invokingState)
 		}
 		public override int RuleIndex { get { return RULE_newEntityLine; } }
 		public override void EnterRule(IParseTreeListener listener) {
-			ILUFileParserListener typedListener = listener as ILUFileParserListener;
-			if (typedListener != null) typedListener.EnterNewEntityLine(this);
+			if (listener is ILUFileParserListener typedListener) typedListener.EnterNewEntityLine(this);
 		}
 		public override void ExitRule(IParseTreeListener listener) {
-			ILUFileParserListener typedListener = listener as ILUFileParserListener;
-			if (typedListener != null) typedListener.ExitNewEntityLine(this);
+			if (listener is ILUFileParserListener typedListener) typedListener.ExitNewEntityLine(this);
 		}
 		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
-			ILUFileParserVisitor<TResult> typedVisitor = visitor as ILUFileParserVisitor<TResult>;
-			if (typedVisitor != null) return typedVisitor.VisitNewEntityLine(this);
+			if (visitor is ILUFileParserVisitor<TResult> typedVisitor) return typedVisitor.VisitNewEntityLine(this);
 			else return visitor.VisitChildren(this);
 		}
 	}
@@ -1873,16 +1810,13 @@ public NewCompositeDefinitionContext(ParserRuleContext parent, int invokingState
 		}
 		public override int RuleIndex { get { return RULE_newCompositeDefinition; } }
 		public override void EnterRule(IParseTreeListener listener) {
-			ILUFileParserListener typedListener = listener as ILUFileParserListener;
-			if (typedListener != null) typedListener.EnterNewCompositeDefinition(this);
+			if (listener is ILUFileParserListener typedListener) typedListener.EnterNewCompositeDefinition(this);
 		}
 		public override void ExitRule(IParseTreeListener listener) {
-			ILUFileParserListener typedListener = listener as ILUFileParserListener;
-			if (typedListener != null) typedListener.ExitNewCompositeDefinition(this);
+			if (listener is ILUFileParserListener typedListener) typedListener.ExitNewCompositeDefinition(this);
 		}
 		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
-			ILUFileParserVisitor<TResult> typedVisitor = visitor as ILUFileParserVisitor<TResult>;
-			if (typedVisitor != null) return typedVisitor.VisitNewCompositeDefinition(this);
+			if (visitor is ILUFileParserVisitor<TResult> typedVisitor) return typedVisitor.VisitNewCompositeDefinition(this);
 			else return visitor.VisitChildren(this);
 		}
 	}
@@ -1916,16 +1850,13 @@ public NewRegexDefinitionContext(ParserRuleContext parent, int invokingState)
 		}
 		public override int RuleIndex { get { return RULE_newRegexDefinition; } }
 		public override void EnterRule(IParseTreeListener listener) {
-			ILUFileParserListener typedListener = listener as ILUFileParserListener;
-			if (typedListener != null) typedListener.EnterNewRegexDefinition(this);
+			if (listener is ILUFileParserListener typedListener) typedListener.EnterNewRegexDefinition(this);
 		}
 		public override void ExitRule(IParseTreeListener listener) {
-			ILUFileParserListener typedListener = listener as ILUFileParserListener;
-			if (typedListener != null) typedListener.ExitNewRegexDefinition(this);
+			if (listener is ILUFileParserListener typedListener) typedListener.ExitNewRegexDefinition(this);
 		}
 		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
-			ILUFileParserVisitor<TResult> typedVisitor = visitor as ILUFileParserVisitor<TResult>;
-			if (typedVisitor != null) return typedVisitor.VisitNewRegexDefinition(this);
+			if (visitor is ILUFileParserVisitor<TResult> typedVisitor) return typedVisitor.VisitNewRegexDefinition(this);
 			else return visitor.VisitChildren(this);
 		}
 	}
@@ -1959,16 +1890,13 @@ public NewEntityTypeContext(ParserRuleContext parent, int invokingState)
 		}
 		public override int RuleIndex { get { return RULE_newEntityType; } }
 		public override void EnterRule(IParseTreeListener listener) {
-			ILUFileParserListener typedListener = listener as ILUFileParserListener;
-			if (typedListener != null) typedListener.EnterNewEntityType(this);
+			if (listener is ILUFileParserListener typedListener) typedListener.EnterNewEntityType(this);
 		}
 		public override void ExitRule(IParseTreeListener listener) {
-			ILUFileParserListener typedListener = listener as ILUFileParserListener;
-			if (typedListener != null) typedListener.ExitNewEntityType(this);
+			if (listener is ILUFileParserListener typedListener) typedListener.ExitNewEntityType(this);
 		}
 		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
-			ILUFileParserVisitor<TResult> typedVisitor = visitor as ILUFileParserVisitor<TResult>;
-			if (typedVisitor != null) return typedVisitor.VisitNewEntityType(this);
+			if (visitor is ILUFileParserVisitor<TResult> typedVisitor) return typedVisitor.VisitNewEntityType(this);
 			else return visitor.VisitChildren(this);
 		}
 	}
@@ -2009,16 +1937,13 @@ public NewEntityRolesContext(ParserRuleContext parent, int invokingState)
 		}
 		public override int RuleIndex { get { return RULE_newEntityRoles; } }
 		public override void EnterRule(IParseTreeListener listener) {
-			ILUFileParserListener typedListener = listener as ILUFileParserListener;
-			if (typedListener != null) typedListener.EnterNewEntityRoles(this);
+			if (listener is ILUFileParserListener typedListener) typedListener.EnterNewEntityRoles(this);
 		}
 		public override void ExitRule(IParseTreeListener listener) {
-			ILUFileParserListener typedListener = listener as ILUFileParserListener;
-			if (typedListener != null) typedListener.ExitNewEntityRoles(this);
+			if (listener is ILUFileParserListener typedListener) typedListener.ExitNewEntityRoles(this);
 		}
 		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
-			ILUFileParserVisitor<TResult> typedVisitor = visitor as ILUFileParserVisitor<TResult>;
-			if (typedVisitor != null) return typedVisitor.VisitNewEntityRoles(this);
+			if (visitor is ILUFileParserVisitor<TResult> typedVisitor) return typedVisitor.VisitNewEntityRoles(this);
 			else return visitor.VisitChildren(this);
 		}
 	}
@@ -2082,16 +2007,13 @@ public NewEntityUsesFeaturesContext(ParserRuleContext parent, int invokingState)
 		}
 		public override int RuleIndex { get { return RULE_newEntityUsesFeatures; } }
 		public override void EnterRule(IParseTreeListener listener) {
-			ILUFileParserListener typedListener = listener as ILUFileParserListener;
-			if (typedListener != null) typedListener.EnterNewEntityUsesFeatures(this);
+			if (listener is ILUFileParserListener typedListener) typedListener.EnterNewEntityUsesFeatures(this);
 		}
 		public override void ExitRule(IParseTreeListener listener) {
-			ILUFileParserListener typedListener = listener as ILUFileParserListener;
-			if (typedListener != null) typedListener.ExitNewEntityUsesFeatures(this);
+			if (listener is ILUFileParserListener typedListener) typedListener.ExitNewEntityUsesFeatures(this);
 		}
 		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
-			ILUFileParserVisitor<TResult> typedVisitor = visitor as ILUFileParserVisitor<TResult>;
-			if (typedVisitor != null) return typedVisitor.VisitNewEntityUsesFeatures(this);
+			if (visitor is ILUFileParserVisitor<TResult> typedVisitor) return typedVisitor.VisitNewEntityUsesFeatures(this);
 			else return visitor.VisitChildren(this);
 		}
 	}
@@ -2155,16 +2077,13 @@ public NewEntityRoleOrFeaturesContext(ParserRuleContext parent, int invokingStat
 		}
 		public override int RuleIndex { get { return RULE_newEntityRoleOrFeatures; } }
 		public override void EnterRule(IParseTreeListener listener) {
-			ILUFileParserListener typedListener = listener as ILUFileParserListener;
-			if (typedListener != null) typedListener.EnterNewEntityRoleOrFeatures(this);
+			if (listener is ILUFileParserListener typedListener) typedListener.EnterNewEntityRoleOrFeatures(this);
 		}
 		public override void ExitRule(IParseTreeListener listener) {
-			ILUFileParserListener typedListener = listener as ILUFileParserListener;
-			if (typedListener != null) typedListener.ExitNewEntityRoleOrFeatures(this);
+			if (listener is ILUFileParserListener typedListener) typedListener.ExitNewEntityRoleOrFeatures(this);
 		}
 		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
-			ILUFileParserVisitor<TResult> typedVisitor = visitor as ILUFileParserVisitor<TResult>;
-			if (typedVisitor != null) return typedVisitor.VisitNewEntityRoleOrFeatures(this);
+			if (visitor is ILUFileParserVisitor<TResult> typedVisitor) return typedVisitor.VisitNewEntityRoleOrFeatures(this);
 			else return visitor.VisitChildren(this);
 		}
 	}
@@ -2263,16 +2182,13 @@ public NewEntityNameContext(ParserRuleContext parent, int invokingState)
 		}
 		public override int RuleIndex { get { return RULE_newEntityName; } }
 		public override void EnterRule(IParseTreeListener listener) {
-			ILUFileParserListener typedListener = listener as ILUFileParserListener;
-			if (typedListener != null) typedListener.EnterNewEntityName(this);
+			if (listener is ILUFileParserListener typedListener) typedListener.EnterNewEntityName(this);
 		}
 		public override void ExitRule(IParseTreeListener listener) {
-			ILUFileParserListener typedListener = listener as ILUFileParserListener;
-			if (typedListener != null) typedListener.ExitNewEntityName(this);
+			if (listener is ILUFileParserListener typedListener) typedListener.ExitNewEntityName(this);
 		}
 		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
-			ILUFileParserVisitor<TResult> typedVisitor = visitor as ILUFileParserVisitor<TResult>;
-			if (typedVisitor != null) return typedVisitor.VisitNewEntityName(this);
+			if (visitor is ILUFileParserVisitor<TResult> typedVisitor) return typedVisitor.VisitNewEntityName(this);
 			else return visitor.VisitChildren(this);
 		}
 	}
@@ -2334,16 +2250,13 @@ public NewEntityNameWithWSContext(ParserRuleContext parent, int invokingState)
 		}
 		public override int RuleIndex { get { return RULE_newEntityNameWithWS; } }
 		public override void EnterRule(IParseTreeListener listener) {
-			ILUFileParserListener typedListener = listener as ILUFileParserListener;
-			if (typedListener != null) typedListener.EnterNewEntityNameWithWS(this);
+			if (listener is ILUFileParserListener typedListener) typedListener.EnterNewEntityNameWithWS(this);
 		}
 		public override void ExitRule(IParseTreeListener listener) {
-			ILUFileParserListener typedListener = listener as ILUFileParserListener;
-			if (typedListener != null) typedListener.ExitNewEntityNameWithWS(this);
+			if (listener is ILUFileParserListener typedListener) typedListener.ExitNewEntityNameWithWS(this);
 		}
 		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
-			ILUFileParserVisitor<TResult> typedVisitor = visitor as ILUFileParserVisitor<TResult>;
-			if (typedVisitor != null) return typedVisitor.VisitNewEntityNameWithWS(this);
+			if (visitor is ILUFileParserVisitor<TResult> typedVisitor) return typedVisitor.VisitNewEntityNameWithWS(this);
 			else return visitor.VisitChildren(this);
 		}
 	}
@@ -2402,16 +2315,13 @@ public EntitySectionContext(ParserRuleContext parent, int invokingState)
 		}
 		public override int RuleIndex { get { return RULE_entitySection; } }
 		public override void EnterRule(IParseTreeListener listener) {
-			ILUFileParserListener typedListener = listener as ILUFileParserListener;
-			if (typedListener != null) typedListener.EnterEntitySection(this);
+			if (listener is ILUFileParserListener typedListener) typedListener.EnterEntitySection(this);
 		}
 		public override void ExitRule(IParseTreeListener listener) {
-			ILUFileParserListener typedListener = listener as ILUFileParserListener;
-			if (typedListener != null) typedListener.ExitEntitySection(this);
+			if (listener is ILUFileParserListener typedListener) typedListener.ExitEntitySection(this);
 		}
 		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
-			ILUFileParserVisitor<TResult> typedVisitor = visitor as ILUFileParserVisitor<TResult>;
-			if (typedVisitor != null) return typedVisitor.VisitEntitySection(this);
+			if (visitor is ILUFileParserVisitor<TResult> typedVisitor) return typedVisitor.VisitEntitySection(this);
 			else return visitor.VisitChildren(this);
 		}
 	}
@@ -2450,16 +2360,13 @@ public EntityDefinitionContext(ParserRuleContext parent, int invokingState)
 		}
 		public override int RuleIndex { get { return RULE_entityDefinition; } }
 		public override void EnterRule(IParseTreeListener listener) {
-			ILUFileParserListener typedListener = listener as ILUFileParserListener;
-			if (typedListener != null) typedListener.EnterEntityDefinition(this);
+			if (listener is ILUFileParserListener typedListener) typedListener.EnterEntityDefinition(this);
 		}
 		public override void ExitRule(IParseTreeListener listener) {
-			ILUFileParserListener typedListener = listener as ILUFileParserListener;
-			if (typedListener != null) typedListener.ExitEntityDefinition(this);
+			if (listener is ILUFileParserListener typedListener) typedListener.ExitEntityDefinition(this);
 		}
 		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
-			ILUFileParserVisitor<TResult> typedVisitor = visitor as ILUFileParserVisitor<TResult>;
-			if (typedVisitor != null) return typedVisitor.VisitEntityDefinition(this);
+			if (visitor is ILUFileParserVisitor<TResult> typedVisitor) return typedVisitor.VisitEntityDefinition(this);
 			else return visitor.VisitChildren(this);
 		}
 	}
@@ -2513,16 +2420,13 @@ public EntityLineContext(ParserRuleContext parent, int invokingState)
 		}
 		public override int RuleIndex { get { return RULE_entityLine; } }
 		public override void EnterRule(IParseTreeListener listener) {
-			ILUFileParserListener typedListener = listener as ILUFileParserListener;
-			if (typedListener != null) typedListener.EnterEntityLine(this);
+			if (listener is ILUFileParserListener typedListener) typedListener.EnterEntityLine(this);
 		}
 		public override void ExitRule(IParseTreeListener listener) {
-			ILUFileParserListener typedListener = listener as ILUFileParserListener;
-			if (typedListener != null) typedListener.ExitEntityLine(this);
+			if (listener is ILUFileParserListener typedListener) typedListener.ExitEntityLine(this);
 		}
 		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
-			ILUFileParserVisitor<TResult> typedVisitor = visitor as ILUFileParserVisitor<TResult>;
-			if (typedVisitor != null) return typedVisitor.VisitEntityLine(this);
+			if (visitor is ILUFileParserVisitor<TResult> typedVisitor) return typedVisitor.VisitEntityLine(this);
 			else return visitor.VisitChildren(this);
 		}
 	}
@@ -2604,16 +2508,13 @@ public EntityNameContext(ParserRuleContext parent, int invokingState)
 		}
 		public override int RuleIndex { get { return RULE_entityName; } }
 		public override void EnterRule(IParseTreeListener listener) {
-			ILUFileParserListener typedListener = listener as ILUFileParserListener;
-			if (typedListener != null) typedListener.EnterEntityName(this);
+			if (listener is ILUFileParserListener typedListener) typedListener.EnterEntityName(this);
 		}
 		public override void ExitRule(IParseTreeListener listener) {
-			ILUFileParserListener typedListener = listener as ILUFileParserListener;
-			if (typedListener != null) typedListener.ExitEntityName(this);
+			if (listener is ILUFileParserListener typedListener) typedListener.ExitEntityName(this);
 		}
 		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
-			ILUFileParserVisitor<TResult> typedVisitor = visitor as ILUFileParserVisitor<TResult>;
-			if (typedVisitor != null) return typedVisitor.VisitEntityName(this);
+			if (visitor is ILUFileParserVisitor<TResult> typedVisitor) return typedVisitor.VisitEntityName(this);
 			else return visitor.VisitChildren(this);
 		}
 	}
@@ -2698,16 +2599,13 @@ public EntityTypeContext(ParserRuleContext parent, int invokingState)
 		}
 		public override int RuleIndex { get { return RULE_entityType; } }
 		public override void EnterRule(IParseTreeListener listener) {
-			ILUFileParserListener typedListener = listener as ILUFileParserListener;
-			if (typedListener != null) typedListener.EnterEntityType(this);
+			if (listener is ILUFileParserListener typedListener) typedListener.EnterEntityType(this);
 		}
 		public override void ExitRule(IParseTreeListener listener) {
-			ILUFileParserListener typedListener = listener as ILUFileParserListener;
-			if (typedListener != null) typedListener.ExitEntityType(this);
+			if (listener is ILUFileParserListener typedListener) typedListener.ExitEntityType(this);
 		}
 		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
-			ILUFileParserVisitor<TResult> typedVisitor = visitor as ILUFileParserVisitor<TResult>;
-			if (typedVisitor != null) return typedVisitor.VisitEntityType(this);
+			if (visitor is ILUFileParserVisitor<TResult> typedVisitor) return typedVisitor.VisitEntityType(this);
 			else return visitor.VisitChildren(this);
 		}
 	}
@@ -2788,16 +2686,13 @@ public CompositeEntityIdentifierContext(ParserRuleContext parent, int invokingSt
 		}
 		public override int RuleIndex { get { return RULE_compositeEntityIdentifier; } }
 		public override void EnterRule(IParseTreeListener listener) {
-			ILUFileParserListener typedListener = listener as ILUFileParserListener;
-			if (typedListener != null) typedListener.EnterCompositeEntityIdentifier(this);
+			if (listener is ILUFileParserListener typedListener) typedListener.EnterCompositeEntityIdentifier(this);
 		}
 		public override void ExitRule(IParseTreeListener listener) {
-			ILUFileParserListener typedListener = listener as ILUFileParserListener;
-			if (typedListener != null) typedListener.ExitCompositeEntityIdentifier(this);
+			if (listener is ILUFileParserListener typedListener) typedListener.ExitCompositeEntityIdentifier(this);
 		}
 		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
-			ILUFileParserVisitor<TResult> typedVisitor = visitor as ILUFileParserVisitor<TResult>;
-			if (typedVisitor != null) return typedVisitor.VisitCompositeEntityIdentifier(this);
+			if (visitor is ILUFileParserVisitor<TResult> typedVisitor) return typedVisitor.VisitCompositeEntityIdentifier(this);
 			else return visitor.VisitChildren(this);
 		}
 	}
@@ -2831,16 +2726,13 @@ public RegexEntityIdentifierContext(ParserRuleContext parent, int invokingState)
 		}
 		public override int RuleIndex { get { return RULE_regexEntityIdentifier; } }
 		public override void EnterRule(IParseTreeListener listener) {
-			ILUFileParserListener typedListener = listener as ILUFileParserListener;
-			if (typedListener != null) typedListener.EnterRegexEntityIdentifier(this);
+			if (listener is ILUFileParserListener typedListener) typedListener.EnterRegexEntityIdentifier(this);
 		}
 		public override void ExitRule(IParseTreeListener listener) {
-			ILUFileParserListener typedListener = listener as ILUFileParserListener;
-			if (typedListener != null) typedListener.ExitRegexEntityIdentifier(this);
+			if (listener is ILUFileParserListener typedListener) typedListener.ExitRegexEntityIdentifier(this);
 		}
 		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
-			ILUFileParserVisitor<TResult> typedVisitor = visitor as ILUFileParserVisitor<TResult>;
-			if (typedVisitor != null) return typedVisitor.VisitRegexEntityIdentifier(this);
+			if (visitor is ILUFileParserVisitor<TResult> typedVisitor) return typedVisitor.VisitRegexEntityIdentifier(this);
 			else return visitor.VisitChildren(this);
 		}
 	}
@@ -2891,16 +2783,13 @@ public EntityListBodyContext(ParserRuleContext parent, int invokingState)
 		}
 		public override int RuleIndex { get { return RULE_entityListBody; } }
 		public override void EnterRule(IParseTreeListener listener) {
-			ILUFileParserListener typedListener = listener as ILUFileParserListener;
-			if (typedListener != null) typedListener.EnterEntityListBody(this);
+			if (listener is ILUFileParserListener typedListener) typedListener.EnterEntityListBody(this);
 		}
 		public override void ExitRule(IParseTreeListener listener) {
-			ILUFileParserListener typedListener = listener as ILUFileParserListener;
-			if (typedListener != null) typedListener.ExitEntityListBody(this);
+			if (listener is ILUFileParserListener typedListener) typedListener.ExitEntityListBody(this);
 		}
 		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
-			ILUFileParserVisitor<TResult> typedVisitor = visitor as ILUFileParserVisitor<TResult>;
-			if (typedVisitor != null) return typedVisitor.VisitEntityListBody(this);
+			if (visitor is ILUFileParserVisitor<TResult> typedVisitor) return typedVisitor.VisitEntityListBody(this);
 			else return visitor.VisitChildren(this);
 		}
 	}
@@ -2983,16 +2872,13 @@ public NormalItemStringContext(ParserRuleContext parent, int invokingState)
 		}
 		public override int RuleIndex { get { return RULE_normalItemString; } }
 		public override void EnterRule(IParseTreeListener listener) {
-			ILUFileParserListener typedListener = listener as ILUFileParserListener;
-			if (typedListener != null) typedListener.EnterNormalItemString(this);
+			if (listener is ILUFileParserListener typedListener) typedListener.EnterNormalItemString(this);
 		}
 		public override void ExitRule(IParseTreeListener listener) {
-			ILUFileParserListener typedListener = listener as ILUFileParserListener;
-			if (typedListener != null) typedListener.ExitNormalItemString(this);
+			if (listener is ILUFileParserListener typedListener) typedListener.ExitNormalItemString(this);
 		}
 		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
-			ILUFileParserVisitor<TResult> typedVisitor = visitor as ILUFileParserVisitor<TResult>;
-			if (typedVisitor != null) return typedVisitor.VisitNormalItemString(this);
+			if (visitor is ILUFileParserVisitor<TResult> typedVisitor) return typedVisitor.VisitNormalItemString(this);
 			else return visitor.VisitChildren(this);
 		}
 	}
@@ -3066,16 +2952,13 @@ public ImportSectionContext(ParserRuleContext parent, int invokingState)
 		}
 		public override int RuleIndex { get { return RULE_importSection; } }
 		public override void EnterRule(IParseTreeListener listener) {
-			ILUFileParserListener typedListener = listener as ILUFileParserListener;
-			if (typedListener != null) typedListener.EnterImportSection(this);
+			if (listener is ILUFileParserListener typedListener) typedListener.EnterImportSection(this);
 		}
 		public override void ExitRule(IParseTreeListener listener) {
-			ILUFileParserListener typedListener = listener as ILUFileParserListener;
-			if (typedListener != null) typedListener.ExitImportSection(this);
+			if (listener is ILUFileParserListener typedListener) typedListener.ExitImportSection(this);
 		}
 		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
-			ILUFileParserVisitor<TResult> typedVisitor = visitor as ILUFileParserVisitor<TResult>;
-			if (typedVisitor != null) return typedVisitor.VisitImportSection(this);
+			if (visitor is ILUFileParserVisitor<TResult> typedVisitor) return typedVisitor.VisitImportSection(this);
 			else return visitor.VisitChildren(this);
 		}
 	}
@@ -3113,16 +2996,13 @@ public ImportDefinitionContext(ParserRuleContext parent, int invokingState)
 		}
 		public override int RuleIndex { get { return RULE_importDefinition; } }
 		public override void EnterRule(IParseTreeListener listener) {
-			ILUFileParserListener typedListener = listener as ILUFileParserListener;
-			if (typedListener != null) typedListener.EnterImportDefinition(this);
+			if (listener is ILUFileParserListener typedListener) typedListener.EnterImportDefinition(this);
 		}
 		public override void ExitRule(IParseTreeListener listener) {
-			ILUFileParserListener typedListener = listener as ILUFileParserListener;
-			if (typedListener != null) typedListener.ExitImportDefinition(this);
+			if (listener is ILUFileParserListener typedListener) typedListener.ExitImportDefinition(this);
 		}
 		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
-			ILUFileParserVisitor<TResult> typedVisitor = visitor as ILUFileParserVisitor<TResult>;
-			if (typedVisitor != null) return typedVisitor.VisitImportDefinition(this);
+			if (visitor is ILUFileParserVisitor<TResult> typedVisitor) return typedVisitor.VisitImportDefinition(this);
 			else return visitor.VisitChildren(this);
 		}
 	}
@@ -3188,16 +3068,13 @@ public ReferenceSectionContext(ParserRuleContext parent, int invokingState)
 		}
 		public override int RuleIndex { get { return RULE_referenceSection; } }
 		public override void EnterRule(IParseTreeListener listener) {
-			ILUFileParserListener typedListener = listener as ILUFileParserListener;
-			if (typedListener != null) typedListener.EnterReferenceSection(this);
+			if (listener is ILUFileParserListener typedListener) typedListener.EnterReferenceSection(this);
 		}
 		public override void ExitRule(IParseTreeListener listener) {
-			ILUFileParserListener typedListener = listener as ILUFileParserListener;
-			if (typedListener != null) typedListener.ExitReferenceSection(this);
+			if (listener is ILUFileParserListener typedListener) typedListener.ExitReferenceSection(this);
 		}
 		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
-			ILUFileParserVisitor<TResult> typedVisitor = visitor as ILUFileParserVisitor<TResult>;
-			if (typedVisitor != null) return typedVisitor.VisitReferenceSection(this);
+			if (visitor is ILUFileParserVisitor<TResult> typedVisitor) return typedVisitor.VisitReferenceSection(this);
 			else return visitor.VisitChildren(this);
 		}
 	}
@@ -3235,16 +3112,13 @@ public ReferenceDefinitionContext(ParserRuleContext parent, int invokingState)
 		}
 		public override int RuleIndex { get { return RULE_referenceDefinition; } }
 		public override void EnterRule(IParseTreeListener listener) {
-			ILUFileParserListener typedListener = listener as ILUFileParserListener;
-			if (typedListener != null) typedListener.EnterReferenceDefinition(this);
+			if (listener is ILUFileParserListener typedListener) typedListener.EnterReferenceDefinition(this);
 		}
 		public override void ExitRule(IParseTreeListener listener) {
-			ILUFileParserListener typedListener = listener as ILUFileParserListener;
-			if (typedListener != null) typedListener.ExitReferenceDefinition(this);
+			if (listener is ILUFileParserListener typedListener) typedListener.ExitReferenceDefinition(this);
 		}
 		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
-			ILUFileParserVisitor<TResult> typedVisitor = visitor as ILUFileParserVisitor<TResult>;
-			if (typedVisitor != null) return typedVisitor.VisitReferenceDefinition(this);
+			if (visitor is ILUFileParserVisitor<TResult> typedVisitor) return typedVisitor.VisitReferenceDefinition(this);
 			else return visitor.VisitChildren(this);
 		}
 	}
@@ -3310,16 +3184,13 @@ public QnaSectionContext(ParserRuleContext parent, int invokingState)
 		}
 		public override int RuleIndex { get { return RULE_qnaSection; } }
 		public override void EnterRule(IParseTreeListener listener) {
-			ILUFileParserListener typedListener = listener as ILUFileParserListener;
-			if (typedListener != null) typedListener.EnterQnaSection(this);
+			if (listener is ILUFileParserListener typedListener) typedListener.EnterQnaSection(this);
 		}
 		public override void ExitRule(IParseTreeListener listener) {
-			ILUFileParserListener typedListener = listener as ILUFileParserListener;
-			if (typedListener != null) typedListener.ExitQnaSection(this);
+			if (listener is ILUFileParserListener typedListener) typedListener.ExitQnaSection(this);
 		}
 		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
-			ILUFileParserVisitor<TResult> typedVisitor = visitor as ILUFileParserVisitor<TResult>;
-			if (typedVisitor != null) return typedVisitor.VisitQnaSection(this);
+			if (visitor is ILUFileParserVisitor<TResult> typedVisitor) return typedVisitor.VisitQnaSection(this);
 			else return visitor.VisitChildren(this);
 		}
 	}
@@ -3370,16 +3241,13 @@ public QnaDefinitionContext(ParserRuleContext parent, int invokingState)
 		}
 		public override int RuleIndex { get { return RULE_qnaDefinition; } }
 		public override void EnterRule(IParseTreeListener listener) {
-			ILUFileParserListener typedListener = listener as ILUFileParserListener;
-			if (typedListener != null) typedListener.EnterQnaDefinition(this);
+			if (listener is ILUFileParserListener typedListener) typedListener.EnterQnaDefinition(this);
 		}
 		public override void ExitRule(IParseTreeListener listener) {
-			ILUFileParserListener typedListener = listener as ILUFileParserListener;
-			if (typedListener != null) typedListener.ExitQnaDefinition(this);
+			if (listener is ILUFileParserListener typedListener) typedListener.ExitQnaDefinition(this);
 		}
 		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
-			ILUFileParserVisitor<TResult> typedVisitor = visitor as ILUFileParserVisitor<TResult>;
-			if (typedVisitor != null) return typedVisitor.VisitQnaDefinition(this);
+			if (visitor is ILUFileParserVisitor<TResult> typedVisitor) return typedVisitor.VisitQnaDefinition(this);
 			else return visitor.VisitChildren(this);
 		}
 	}
@@ -3446,16 +3314,13 @@ public QnaSourceInfoContext(ParserRuleContext parent, int invokingState)
 		}
 		public override int RuleIndex { get { return RULE_qnaSourceInfo; } }
 		public override void EnterRule(IParseTreeListener listener) {
-			ILUFileParserListener typedListener = listener as ILUFileParserListener;
-			if (typedListener != null) typedListener.EnterQnaSourceInfo(this);
+			if (listener is ILUFileParserListener typedListener) typedListener.EnterQnaSourceInfo(this);
 		}
 		public override void ExitRule(IParseTreeListener listener) {
-			ILUFileParserListener typedListener = listener as ILUFileParserListener;
-			if (typedListener != null) typedListener.ExitQnaSourceInfo(this);
+			if (listener is ILUFileParserListener typedListener) typedListener.ExitQnaSourceInfo(this);
 		}
 		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
-			ILUFileParserVisitor<TResult> typedVisitor = visitor as ILUFileParserVisitor<TResult>;
-			if (typedVisitor != null) return typedVisitor.VisitQnaSourceInfo(this);
+			if (visitor is ILUFileParserVisitor<TResult> typedVisitor) return typedVisitor.VisitQnaSourceInfo(this);
 			else return visitor.VisitChildren(this);
 		}
 	}
@@ -3507,16 +3372,13 @@ public QnaIdMarkContext(ParserRuleContext parent, int invokingState)
 		}
 		public override int RuleIndex { get { return RULE_qnaIdMark; } }
 		public override void EnterRule(IParseTreeListener listener) {
-			ILUFileParserListener typedListener = listener as ILUFileParserListener;
-			if (typedListener != null) typedListener.EnterQnaIdMark(this);
+			if (listener is ILUFileParserListener typedListener) typedListener.EnterQnaIdMark(this);
 		}
 		public override void ExitRule(IParseTreeListener listener) {
-			ILUFileParserListener typedListener = listener as ILUFileParserListener;
-			if (typedListener != null) typedListener.ExitQnaIdMark(this);
+			if (listener is ILUFileParserListener typedListener) typedListener.ExitQnaIdMark(this);
 		}
 		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
-			ILUFileParserVisitor<TResult> typedVisitor = visitor as ILUFileParserVisitor<TResult>;
-			if (typedVisitor != null) return typedVisitor.VisitQnaIdMark(this);
+			if (visitor is ILUFileParserVisitor<TResult> typedVisitor) return typedVisitor.VisitQnaIdMark(this);
 			else return visitor.VisitChildren(this);
 		}
 	}
@@ -3571,16 +3433,13 @@ public QnaQuestionContext(ParserRuleContext parent, int invokingState)
 		}
 		public override int RuleIndex { get { return RULE_qnaQuestion; } }
 		public override void EnterRule(IParseTreeListener listener) {
-			ILUFileParserListener typedListener = listener as ILUFileParserListener;
-			if (typedListener != null) typedListener.EnterQnaQuestion(this);
+			if (listener is ILUFileParserListener typedListener) typedListener.EnterQnaQuestion(this);
 		}
 		public override void ExitRule(IParseTreeListener listener) {
-			ILUFileParserListener typedListener = listener as ILUFileParserListener;
-			if (typedListener != null) typedListener.ExitQnaQuestion(this);
+			if (listener is ILUFileParserListener typedListener) typedListener.ExitQnaQuestion(this);
 		}
 		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
-			ILUFileParserVisitor<TResult> typedVisitor = visitor as ILUFileParserVisitor<TResult>;
-			if (typedVisitor != null) return typedVisitor.VisitQnaQuestion(this);
+			if (visitor is ILUFileParserVisitor<TResult> typedVisitor) return typedVisitor.VisitQnaQuestion(this);
 			else return visitor.VisitChildren(this);
 		}
 	}
@@ -3632,16 +3491,13 @@ public QuestionTextContext(ParserRuleContext parent, int invokingState)
 		}
 		public override int RuleIndex { get { return RULE_questionText; } }
 		public override void EnterRule(IParseTreeListener listener) {
-			ILUFileParserListener typedListener = listener as ILUFileParserListener;
-			if (typedListener != null) typedListener.EnterQuestionText(this);
+			if (listener is ILUFileParserListener typedListener) typedListener.EnterQuestionText(this);
 		}
 		public override void ExitRule(IParseTreeListener listener) {
-			ILUFileParserListener typedListener = listener as ILUFileParserListener;
-			if (typedListener != null) typedListener.ExitQuestionText(this);
+			if (listener is ILUFileParserListener typedListener) typedListener.ExitQuestionText(this);
 		}
 		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
-			ILUFileParserVisitor<TResult> typedVisitor = visitor as ILUFileParserVisitor<TResult>;
-			if (typedVisitor != null) return typedVisitor.VisitQuestionText(this);
+			if (visitor is ILUFileParserVisitor<TResult> typedVisitor) return typedVisitor.VisitQuestionText(this);
 			else return visitor.VisitChildren(this);
 		}
 	}
@@ -3709,16 +3565,13 @@ public MoreQuestionsBodyContext(ParserRuleContext parent, int invokingState)
 		}
 		public override int RuleIndex { get { return RULE_moreQuestionsBody; } }
 		public override void EnterRule(IParseTreeListener listener) {
-			ILUFileParserListener typedListener = listener as ILUFileParserListener;
-			if (typedListener != null) typedListener.EnterMoreQuestionsBody(this);
+			if (listener is ILUFileParserListener typedListener) typedListener.EnterMoreQuestionsBody(this);
 		}
 		public override void ExitRule(IParseTreeListener listener) {
-			ILUFileParserListener typedListener = listener as ILUFileParserListener;
-			if (typedListener != null) typedListener.ExitMoreQuestionsBody(this);
+			if (listener is ILUFileParserListener typedListener) typedListener.ExitMoreQuestionsBody(this);
 		}
 		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
-			ILUFileParserVisitor<TResult> typedVisitor = visitor as ILUFileParserVisitor<TResult>;
-			if (typedVisitor != null) return typedVisitor.VisitMoreQuestionsBody(this);
+			if (visitor is ILUFileParserVisitor<TResult> typedVisitor) return typedVisitor.VisitMoreQuestionsBody(this);
 			else return visitor.VisitChildren(this);
 		}
 	}
@@ -3807,16 +3660,13 @@ public MoreQuestionContext(ParserRuleContext parent, int invokingState)
 		}
 		public override int RuleIndex { get { return RULE_moreQuestion; } }
 		public override void EnterRule(IParseTreeListener listener) {
-			ILUFileParserListener typedListener = listener as ILUFileParserListener;
-			if (typedListener != null) typedListener.EnterMoreQuestion(this);
+			if (listener is ILUFileParserListener typedListener) typedListener.EnterMoreQuestion(this);
 		}
 		public override void ExitRule(IParseTreeListener listener) {
-			ILUFileParserListener typedListener = listener as ILUFileParserListener;
-			if (typedListener != null) typedListener.ExitMoreQuestion(this);
+			if (listener is ILUFileParserListener typedListener) typedListener.ExitMoreQuestion(this);
 		}
 		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
-			ILUFileParserVisitor<TResult> typedVisitor = visitor as ILUFileParserVisitor<TResult>;
-			if (typedVisitor != null) return typedVisitor.VisitMoreQuestion(this);
+			if (visitor is ILUFileParserVisitor<TResult> typedVisitor) return typedVisitor.VisitMoreQuestion(this);
 			else return visitor.VisitChildren(this);
 		}
 	}
@@ -3882,16 +3732,13 @@ public ErrorQuestionStringContext(ParserRuleContext parent, int invokingState)
 		}
 		public override int RuleIndex { get { return RULE_errorQuestionString; } }
 		public override void EnterRule(IParseTreeListener listener) {
-			ILUFileParserListener typedListener = listener as ILUFileParserListener;
-			if (typedListener != null) typedListener.EnterErrorQuestionString(this);
+			if (listener is ILUFileParserListener typedListener) typedListener.EnterErrorQuestionString(this);
 		}
 		public override void ExitRule(IParseTreeListener listener) {
-			ILUFileParserListener typedListener = listener as ILUFileParserListener;
-			if (typedListener != null) typedListener.ExitErrorQuestionString(this);
+			if (listener is ILUFileParserListener typedListener) typedListener.ExitErrorQuestionString(this);
 		}
 		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
-			ILUFileParserVisitor<TResult> typedVisitor = visitor as ILUFileParserVisitor<TResult>;
-			if (typedVisitor != null) return typedVisitor.VisitErrorQuestionString(this);
+			if (visitor is ILUFileParserVisitor<TResult> typedVisitor) return typedVisitor.VisitErrorQuestionString(this);
 			else return visitor.VisitChildren(this);
 		}
 	}
@@ -3958,16 +3805,13 @@ public QnaAnswerBodyContext(ParserRuleContext parent, int invokingState)
 		}
 		public override int RuleIndex { get { return RULE_qnaAnswerBody; } }
 		public override void EnterRule(IParseTreeListener listener) {
-			ILUFileParserListener typedListener = listener as ILUFileParserListener;
-			if (typedListener != null) typedListener.EnterQnaAnswerBody(this);
+			if (listener is ILUFileParserListener typedListener) typedListener.EnterQnaAnswerBody(this);
 		}
 		public override void ExitRule(IParseTreeListener listener) {
-			ILUFileParserListener typedListener = listener as ILUFileParserListener;
-			if (typedListener != null) typedListener.ExitQnaAnswerBody(this);
+			if (listener is ILUFileParserListener typedListener) typedListener.ExitQnaAnswerBody(this);
 		}
 		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
-			ILUFileParserVisitor<TResult> typedVisitor = visitor as ILUFileParserVisitor<TResult>;
-			if (typedVisitor != null) return typedVisitor.VisitQnaAnswerBody(this);
+			if (visitor is ILUFileParserVisitor<TResult> typedVisitor) return typedVisitor.VisitQnaAnswerBody(this);
 			else return visitor.VisitChildren(this);
 		}
 	}
@@ -4052,16 +3896,13 @@ public FilterSectionContext(ParserRuleContext parent, int invokingState)
 		}
 		public override int RuleIndex { get { return RULE_filterSection; } }
 		public override void EnterRule(IParseTreeListener listener) {
-			ILUFileParserListener typedListener = listener as ILUFileParserListener;
-			if (typedListener != null) typedListener.EnterFilterSection(this);
+			if (listener is ILUFileParserListener typedListener) typedListener.EnterFilterSection(this);
 		}
 		public override void ExitRule(IParseTreeListener listener) {
-			ILUFileParserListener typedListener = listener as ILUFileParserListener;
-			if (typedListener != null) typedListener.ExitFilterSection(this);
+			if (listener is ILUFileParserListener typedListener) typedListener.ExitFilterSection(this);
 		}
 		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
-			ILUFileParserVisitor<TResult> typedVisitor = visitor as ILUFileParserVisitor<TResult>;
-			if (typedVisitor != null) return typedVisitor.VisitFilterSection(this);
+			if (visitor is ILUFileParserVisitor<TResult> typedVisitor) return typedVisitor.VisitFilterSection(this);
 			else return visitor.VisitChildren(this);
 		}
 	}
@@ -4156,16 +3997,13 @@ public PromptSectionContext(ParserRuleContext parent, int invokingState)
 		}
 		public override int RuleIndex { get { return RULE_promptSection; } }
 		public override void EnterRule(IParseTreeListener listener) {
-			ILUFileParserListener typedListener = listener as ILUFileParserListener;
-			if (typedListener != null) typedListener.EnterPromptSection(this);
+			if (listener is ILUFileParserListener typedListener) typedListener.EnterPromptSection(this);
 		}
 		public override void ExitRule(IParseTreeListener listener) {
-			ILUFileParserListener typedListener = listener as ILUFileParserListener;
-			if (typedListener != null) typedListener.ExitPromptSection(this);
+			if (listener is ILUFileParserListener typedListener) typedListener.ExitPromptSection(this);
 		}
 		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
-			ILUFileParserVisitor<TResult> typedVisitor = visitor as ILUFileParserVisitor<TResult>;
-			if (typedVisitor != null) return typedVisitor.VisitPromptSection(this);
+			if (visitor is ILUFileParserVisitor<TResult> typedVisitor) return typedVisitor.VisitPromptSection(this);
 			else return visitor.VisitChildren(this);
 		}
 	}
@@ -4255,16 +4093,13 @@ public FilterLineContext(ParserRuleContext parent, int invokingState)
 		}
 		public override int RuleIndex { get { return RULE_filterLine; } }
 		public override void EnterRule(IParseTreeListener listener) {
-			ILUFileParserListener typedListener = listener as ILUFileParserListener;
-			if (typedListener != null) typedListener.EnterFilterLine(this);
+			if (listener is ILUFileParserListener typedListener) typedListener.EnterFilterLine(this);
 		}
 		public override void ExitRule(IParseTreeListener listener) {
-			ILUFileParserListener typedListener = listener as ILUFileParserListener;
-			if (typedListener != null) typedListener.ExitFilterLine(this);
+			if (listener is ILUFileParserListener typedListener) typedListener.ExitFilterLine(this);
 		}
 		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
-			ILUFileParserVisitor<TResult> typedVisitor = visitor as ILUFileParserVisitor<TResult>;
-			if (typedVisitor != null) return typedVisitor.VisitFilterLine(this);
+			if (visitor is ILUFileParserVisitor<TResult> typedVisitor) return typedVisitor.VisitFilterLine(this);
 			else return visitor.VisitChildren(this);
 		}
 	}
@@ -4344,16 +4179,13 @@ public ErrorFilterLineContext(ParserRuleContext parent, int invokingState)
 		}
 		public override int RuleIndex { get { return RULE_errorFilterLine; } }
 		public override void EnterRule(IParseTreeListener listener) {
-			ILUFileParserListener typedListener = listener as ILUFileParserListener;
-			if (typedListener != null) typedListener.EnterErrorFilterLine(this);
+			if (listener is ILUFileParserListener typedListener) typedListener.EnterErrorFilterLine(this);
 		}
 		public override void ExitRule(IParseTreeListener listener) {
-			ILUFileParserListener typedListener = listener as ILUFileParserListener;
-			if (typedListener != null) typedListener.ExitErrorFilterLine(this);
+			if (listener is ILUFileParserListener typedListener) typedListener.ExitErrorFilterLine(this);
 		}
 		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
-			ILUFileParserVisitor<TResult> typedVisitor = visitor as ILUFileParserVisitor<TResult>;
-			if (typedVisitor != null) return typedVisitor.VisitErrorFilterLine(this);
+			if (visitor is ILUFileParserVisitor<TResult> typedVisitor) return typedVisitor.VisitErrorFilterLine(this);
 			else return visitor.VisitChildren(this);
 		}
 	}
@@ -4419,16 +4251,13 @@ public MultiLineAnswerContext(ParserRuleContext parent, int invokingState)
 		}
 		public override int RuleIndex { get { return RULE_multiLineAnswer; } }
 		public override void EnterRule(IParseTreeListener listener) {
-			ILUFileParserListener typedListener = listener as ILUFileParserListener;
-			if (typedListener != null) typedListener.EnterMultiLineAnswer(this);
+			if (listener is ILUFileParserListener typedListener) typedListener.EnterMultiLineAnswer(this);
 		}
 		public override void ExitRule(IParseTreeListener listener) {
-			ILUFileParserListener typedListener = listener as ILUFileParserListener;
-			if (typedListener != null) typedListener.ExitMultiLineAnswer(this);
+			if (listener is ILUFileParserListener typedListener) typedListener.ExitMultiLineAnswer(this);
 		}
 		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
-			ILUFileParserVisitor<TResult> typedVisitor = visitor as ILUFileParserVisitor<TResult>;
-			if (typedVisitor != null) return typedVisitor.VisitMultiLineAnswer(this);
+			if (visitor is ILUFileParserVisitor<TResult> typedVisitor) return typedVisitor.VisitMultiLineAnswer(this);
 			else return visitor.VisitChildren(this);
 		}
 	}
@@ -4478,16 +4307,13 @@ public ModelInfoSectionContext(ParserRuleContext parent, int invokingState)
 		}
 		public override int RuleIndex { get { return RULE_modelInfoSection; } }
 		public override void EnterRule(IParseTreeListener listener) {
-			ILUFileParserListener typedListener = listener as ILUFileParserListener;
-			if (typedListener != null) typedListener.EnterModelInfoSection(this);
+			if (listener is ILUFileParserListener typedListener) typedListener.EnterModelInfoSection(this);
 		}
 		public override void ExitRule(IParseTreeListener listener) {
-			ILUFileParserListener typedListener = listener as ILUFileParserListener;
-			if (typedListener != null) typedListener.ExitModelInfoSection(this);
+			if (listener is ILUFileParserListener typedListener) typedListener.ExitModelInfoSection(this);
 		}
 		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
-			ILUFileParserVisitor<TResult> typedVisitor = visitor as ILUFileParserVisitor<TResult>;
-			if (typedVisitor != null) return typedVisitor.VisitModelInfoSection(this);
+			if (visitor is ILUFileParserVisitor<TResult> typedVisitor) return typedVisitor.VisitModelInfoSection(this);
 			else return visitor.VisitChildren(this);
 		}
 	}
@@ -4525,16 +4351,13 @@ public ModelInfoDefinitionContext(ParserRuleContext parent, int invokingState)
 		}
 		public override int RuleIndex { get { return RULE_modelInfoDefinition; } }
 		public override void EnterRule(IParseTreeListener listener) {
-			ILUFileParserListener typedListener = listener as ILUFileParserListener;
-			if (typedListener != null) typedListener.EnterModelInfoDefinition(this);
+			if (listener is ILUFileParserListener typedListener) typedListener.EnterModelInfoDefinition(this);
 		}
 		public override void ExitRule(IParseTreeListener listener) {
-			ILUFileParserListener typedListener = listener as ILUFileParserListener;
-			if (typedListener != null) typedListener.ExitModelInfoDefinition(this);
+			if (listener is ILUFileParserListener typedListener) typedListener.ExitModelInfoDefinition(this);
 		}
 		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
-			ILUFileParserVisitor<TResult> typedVisitor = visitor as ILUFileParserVisitor<TResult>;
-			if (typedVisitor != null) return typedVisitor.VisitModelInfoDefinition(this);
+			if (visitor is ILUFileParserVisitor<TResult> typedVisitor) return typedVisitor.VisitModelInfoDefinition(this);
 			else return visitor.VisitChildren(this);
 		}
 	}
diff --git a/libraries/integration/Microsoft.Bot.Builder.Integration.ApplicationInsights.Core/ServiceCollectionExtensions.cs b/libraries/integration/Microsoft.Bot.Builder.Integration.ApplicationInsights.Core/ServiceCollectionExtensions.cs
index f4ba488bd..9736c02a6 100644
--- a/libraries/integration/Microsoft.Bot.Builder.Integration.ApplicationInsights.Core/ServiceCollectionExtensions.cs
+++ b/libraries/integration/Microsoft.Bot.Builder.Integration.ApplicationInsights.Core/ServiceCollectionExtensions.cs
@@ -40,7 +40,7 @@ public static IServiceCollection AddBotApplicationInsights(this IServiceCollecti
             var instanceNameSpecified = appInsightsServiceInstanceName != null;
             if (instanceNameSpecified)
             {
-                appInsightService = appInsightsServices.Where(ais => ais.Name == appInsightsServiceInstanceName).FirstOrDefault();
+                appInsightService = appInsightsServices.FirstOrDefault(ais => ais.Name == appInsightsServiceInstanceName);
                 if (appInsightService == null)
                 {
                     throw new ArgumentException($"No Application Insights Service instance with the specified name \"{appInsightsServiceInstanceName}\" was found in the {nameof(BotConfiguration)}");
diff --git a/tests/AdaptiveExpressions.Tests/ExpressionPropertyTests.cs b/tests/AdaptiveExpressions.Tests/ExpressionPropertyTests.cs
index b47762be1..005c287f9 100644
--- a/tests/AdaptiveExpressions.Tests/ExpressionPropertyTests.cs
+++ b/tests/AdaptiveExpressions.Tests/ExpressionPropertyTests.cs
@@ -95,9 +95,9 @@ private void TestExpressionPropertyWithValue<T>(string value, T expected, object
         {
             var ep = new ExpressionProperty<T>(value);
             var (result, error) = ep.TryGetValue(memory ?? new object());
-            if (result is ICollection)
+            if (result is ICollection iCollection)
             {
-                Assert.Equal((ICollection)expected, (ICollection)result);
+                Assert.Equal((ICollection)expected, iCollection);
             }
             else
             {
diff --git a/tests/AdaptiveExpressions.Tests/TriggerTrees/Tests.cs b/tests/AdaptiveExpressions.Tests/TriggerTrees/Tests.cs
index e121092b2..7ec1d9c3f 100644
--- a/tests/AdaptiveExpressions.Tests/TriggerTrees/Tests.cs
+++ b/tests/AdaptiveExpressions.Tests/TriggerTrees/Tests.cs
@@ -69,7 +69,7 @@ public void TestTrueFalse()
 
             memory.Add("blah", 1);
             matches = tree.Matches(memory).ToList();
-            Assert.Equal(2, matches.Count());
+            Assert.Equal(2, matches.Count);
             Assert.Equal(1, matches[0].Action);
             Assert.Equal(3, matches[1].Action);
         }
@@ -115,7 +115,7 @@ public void TestTree()
                 var trigger = tree.AddTrigger(conjunction.Expression, conjunction.Bindings);
                 var matches = tree.Matches(memory);
                 triggers.Add(trigger);
-                Assert.True(matches.Count() >= 1);
+                Assert.True(matches.Any());
                 var first = matches.First().Clauses.First();
                 foreach (var match in matches)
                 {
diff --git a/tests/Microsoft.Bot.Builder.Dialogs.Adaptive.Tests/DebugComposer.cs b/tests/Microsoft.Bot.Builder.Dialogs.Adaptive.Tests/DebugComposer.cs
index 2096e483b..0e9630925 100644
--- a/tests/Microsoft.Bot.Builder.Dialogs.Adaptive.Tests/DebugComposer.cs
+++ b/tests/Microsoft.Bot.Builder.Dialogs.Adaptive.Tests/DebugComposer.cs
@@ -35,11 +35,10 @@ public async Task DebugComposerBot()
 
             var resourceExplorer = new ResourceExplorer()
                 .AddFolder(botPath, monitorChanges: false);
-
             // add luis settings if there are luis assets
-            var resource = resourceExplorer.GetResource($"luis.settings.{environment}.{region}.json") as FileResource;
             var builder = new ConfigurationBuilder().AddInMemoryCollection();
-            if (resource != null)
+
+            if (resourceExplorer.GetResource($"luis.settings.{environment}.{region}.json") is FileResource resource)
             {
                 builder.AddJsonFile(resource.FullName);
             }
diff --git a/tests/Microsoft.Bot.Builder.Dialogs.Adaptive.Tests/EntityRecognizerTests.cs b/tests/Microsoft.Bot.Builder.Dialogs.Adaptive.Tests/EntityRecognizerTests.cs
index 34434c8ac..11c829e6c 100644
--- a/tests/Microsoft.Bot.Builder.Dialogs.Adaptive.Tests/EntityRecognizerTests.cs
+++ b/tests/Microsoft.Bot.Builder.Dialogs.Adaptive.Tests/EntityRecognizerTests.cs
@@ -120,7 +120,7 @@ public void TestHashtag()
             var results = recognizers.Value.RecognizeEntitiesAsync(turnContext).Result;
 
             Assert.Equal(3, results.Count);
-            Assert.Equal(2, results.Where(entity => entity.Type == "hashtag").Count());
+            Assert.Equal(2, results.Count(entity => entity.Type == "hashtag"));
         }
 
         [Fact]
@@ -150,7 +150,7 @@ public void TestNumber()
             var results = recognizers.Value.RecognizeEntitiesAsync(turnContext).Result;
 
             Assert.Equal(4, results.Count);
-            Assert.Equal(3, results.Where(entity => entity.Type == "number").Count());
+            Assert.Equal(3, results.Count(entity => entity.Type == "number"));
         }
 
         [Fact]
@@ -170,7 +170,7 @@ public void TestOrdinal()
             var results = recognizers.Value.RecognizeEntitiesAsync(turnContext).Result;
 
             Assert.Equal(4, results.Count);
-            Assert.Equal(3, results.Where(entity => entity.Type == "ordinal").Count());
+            Assert.Equal(3, results.Count(entity => entity.Type == "ordinal"));
         }
 
         [Fact]
@@ -221,7 +221,7 @@ public void TestRegEx()
             var results = recognizers.Value.RecognizeEntitiesAsync(turnContext).Result;
 
             Assert.Equal(3, results.Count);
-            Assert.Equal(2, results.Where(entity => entity.Type == "color").Count());
+            Assert.Equal(2, results.Count(entity => entity.Type == "color"));
             Assert.Equal("red", results[1].Properties["text"]);
             Assert.Equal("Blue", results[2].Properties["text"]);
         }
diff --git a/tests/Microsoft.Bot.Builder.Tests/SimpleAdapter.cs b/tests/Microsoft.Bot.Builder.Tests/SimpleAdapter.cs
index 317da2baf..b82e7a4e2 100644
--- a/tests/Microsoft.Bot.Builder.Tests/SimpleAdapter.cs
+++ b/tests/Microsoft.Bot.Builder.Tests/SimpleAdapter.cs
@@ -46,7 +46,7 @@ public override Task DeleteActivityAsync(ITurnContext turnContext, ConversationR
         public override Task<ResourceResponse[]> SendActivitiesAsync(ITurnContext turnContext, Activity[] activities, CancellationToken cancellationToken)
         {
             Assert.NotNull(activities); // SimpleAdapter.deleteActivity: missing reference
-            Assert.True(activities.Count() > 0, "SimpleAdapter.sendActivities: empty activities array.");
+            Assert.True(activities.Any(), "SimpleAdapter.sendActivities: empty activities array.");
 
             _callOnSend?.Invoke(activities);
             List<ResourceResponse> responses = new List<ResourceResponse>();
diff --git a/tests/Microsoft.Bot.Builder.Tests/TranscriptBaseTests.cs b/tests/Microsoft.Bot.Builder.Tests/TranscriptBaseTests.cs
index 696c220da..9aa18d271 100644
--- a/tests/Microsoft.Bot.Builder.Tests/TranscriptBaseTests.cs
+++ b/tests/Microsoft.Bot.Builder.Tests/TranscriptBaseTests.cs
@@ -196,7 +196,7 @@ public async Task GetTranscriptActivities()
             }
             while (pagedResult.ContinuationToken != null);
 
-            Assert.Equal(activities.Count(), seen.Count);
+            Assert.Equal(activities.Count, seen.Count);
 
             foreach (var activity in activities)
             {
@@ -245,7 +245,7 @@ public async Task GetTranscriptActivitiesStartDate()
             }
             while (pagedResult.ContinuationToken != null);
 
-            Assert.Equal(activities.Count() / 2, seen.Count);
+            Assert.Equal(activities.Count / 2, seen.Count);
 
             foreach (var activity in activities.Where(a => a.Timestamp >= startDate))
             {
@@ -310,7 +310,7 @@ public async Task ListTranscripts()
             }
             while (pagedResult.ContinuationToken != null);
 
-            Assert.Equal(conversationIds.Count(), seen.Count);
+            Assert.Equal(conversationIds.Count, seen.Count);
 
             foreach (var conversationId in conversationIds)
             {
diff --git a/tests/Microsoft.Bot.Builder.Tests/TurnContextTests.cs b/tests/Microsoft.Bot.Builder.Tests/TurnContextTests.cs
index 8ccd2f473..b690a91c7 100644
--- a/tests/Microsoft.Bot.Builder.Tests/TurnContextTests.cs
+++ b/tests/Microsoft.Bot.Builder.Tests/TurnContextTests.cs
@@ -230,7 +230,7 @@ public async Task CallOnSendBeforeDelivery()
             c.OnSendActivities(async (context, activities, next) =>
             {
                 Assert.NotNull(activities); // Null Array passed in
-                count = activities.Count();
+                count = activities.Count;
                 return await next();
             });
 
@@ -256,7 +256,7 @@ void ValidateResponses(Activity[] activities)
             c.OnSendActivities((context, activities, next) =>
             {
                 Assert.NotNull(activities); // Null Array passed in
-                count = activities.Count();
+                count = activities.Count;
 
                 // Do not call next.
                 return Task.FromResult<ResourceResponse[]>(null);
@@ -286,7 +286,7 @@ void ValidateResponses(Activity[] activities)
             c.OnSendActivities(async (context, activities, next) =>
             {
                 Assert.NotNull(activities); // Null Array passed in
-                Assert.True(activities.Count() == 1);
+                Assert.True(activities.Count == 1);
                 Assert.True(activities[0].Id == "1234", "Unknown Id Passed In");
                 activities[0].Id = "changed";
                 return await next();
