Found the following rules to apply: UseMethodAnyRewriterR6, MergeSequentialChecksRewriterR2, NullChecksShouldNotBeUsedWithIsRewriterR3, SimplifyLinqRewriterR4, TypeCheckAndCastRewriterR5, UseNullPropagationRewriterR7, UsePatternMatchingRewriterR8, UseStringInterpolationRewriterR9, UseStringIsNullOrEmptyRewriterR10



Project: Accounts
    #1 Path: /Users/runner/work/1/s/src/Accounts/Accounts/Account/DisconnectAzureRmAccount.cs, Line: 125, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #2 Path: /Users/runner/work/1/s/src/Accounts/Accounts/Account/DisconnectAzureRmAccount.cs, Line: 136, Message: https://www.jetbrains.com/help/resharper/MergeSequentialChecks.html
    #3 Path: /Users/runner/work/1/s/src/Accounts/Accounts/Account/DisconnectAzureRmAccount.cs, Line: 83, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #4 Path: /Users/runner/work/1/s/src/Accounts/Accounts/AutoSave/EnableAzureRmContextAutosave.cs, Line: 71, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #5 Path: /Users/runner/work/1/s/src/Accounts/Accounts/AutoSave/EnableAzureRmContextAutosave.cs, Line: 76, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #6 Path: /Users/runner/work/1/s/src/Accounts/Accounts/AzureRmAlias/AliasHelper.cs, Line: 53, Message: ReSharper: ReplaceWithSingleCallToFirst. / SonarQube "IEnumerable" LINQs should be simplified. See https://rules.sonarsource.com/csharp/RSPEC-2971
    #7 Path: /Users/runner/work/1/s/src/Accounts/Accounts/AzureRmAlias/AliasHelper.cs, Line: 63, Message: ReSharper: ReplaceWithSingleCallToFirst. / SonarQube "IEnumerable" LINQs should be simplified. See https://rules.sonarsource.com/csharp/RSPEC-2971
    #8 Path: /Users/runner/work/1/s/src/Accounts/Accounts/Common/AzureContextModificationCmdlet.cs, Line: 171, Message: https://www.jetbrains.com/help/resharper/MergeSequentialChecks.html
    #9 Path: /Users/runner/work/1/s/src/Accounts/Accounts/Common/AzureContextModificationCmdlet.cs, Line: 198, Message: https://www.jetbrains.com/help/resharper/MergeSequentialChecks.html
    #10 Path: /Users/runner/work/1/s/src/Accounts/Accounts/CommonModule/AzModule.cs, Line: 161, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #11 Path: /Users/runner/work/1/s/src/Accounts/Accounts/CommonModule/AzModule.cs, Line: 294, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #12 Path: /Users/runner/work/1/s/src/Accounts/Accounts/Context/GetAzureRMContext.cs, Line: 151, Message: https://www.jetbrains.com/help/resharper/MergeSequentialChecks.html
    #13 Path: /Users/runner/work/1/s/src/Accounts/Accounts/Context/GetAzureRMContext.cs, Line: 98, Message: https://www.jetbrains.com/help/resharper/MergeSequentialChecks.html
    #14 Path: /Users/runner/work/1/s/src/Accounts/Accounts/Context/ImportAzureRMContext.cs, Line: 138, Message: https://www.jetbrains.com/help/resharper/MergeSequentialChecks.html
    #15 Path: /Users/runner/work/1/s/src/Accounts/Accounts/Context/RenameAzureRmContext.cs, Line: 79, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #16 Path: /Users/runner/work/1/s/src/Accounts/Accounts/Context/SetAzureRMContext.cs, Line: 141, Message: https://www.jetbrains.com/help/resharper/MergeSequentialChecks.html
    #17 Path: /Users/runner/work/1/s/src/Accounts/Accounts/Environment/AddAzureRMEnvironment.cs, Line: 273, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #18 Path: /Users/runner/work/1/s/src/Accounts/Accounts/Environment/AddAzureRMEnvironment.cs, Line: 275, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #19 Path: /Users/runner/work/1/s/src/Accounts/Accounts/Environment/SetAzureRMEnvironment.cs, Line: 244, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #20 Path: /Users/runner/work/1/s/src/Accounts/Accounts/Environment/SetAzureRMEnvironment.cs, Line: 246, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #21 Path: /Users/runner/work/1/s/src/Accounts/Accounts/Errors/ResolveError.cs, Line: 122, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #22 Path: /Users/runner/work/1/s/src/Accounts/Accounts/Errors/ResolveError.cs, Line: 129, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #23 Path: /Users/runner/work/1/s/src/Accounts/Accounts/Errors/ResolveError.cs, Line: 133, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #24 Path: /Users/runner/work/1/s/src/Accounts/Accounts/Errors/ResolveError.cs, Line: 94, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #25 Path: /Users/runner/work/1/s/src/Accounts/Accounts/Models/AzureRmProfileExtensions.cs, Line: 48, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #26 Path: /Users/runner/work/1/s/src/Accounts/Accounts/Models/RMProfileClient.cs, Line: 178, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #27 Path: /Users/runner/work/1/s/src/Accounts/Accounts/Models/RMProfileClient.cs, Line: 623, Message: https://www.jetbrains.com/help/resharper/MergeSequentialChecks.html



Project: Authentication.ResourceManager
    #28 Path: /Users/runner/work/1/s/src/Accounts/Authentication.ResourceManager/AzureRmProfile.cs, Line: 426, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #29 Path: /Users/runner/work/1/s/src/Accounts/Authentication.ResourceManager/AzureRmProfile.cs, Line: 431, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #30 Path: /Users/runner/work/1/s/src/Accounts/Authentication.ResourceManager/AzureRmProfile.cs, Line: 436, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #31 Path: /Users/runner/work/1/s/src/Accounts/Authentication.ResourceManager/AzureRmProfileConverter.cs, Line: 135, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #32 Path: /Users/runner/work/1/s/src/Accounts/Authentication.ResourceManager/AzureRmServicePrincipalKeyStore.Netcore.cs, Line: 44, Message: https://www.jetbrains.com/help/resharper/MergeSequentialChecks.html
    #33 Path: /Users/runner/work/1/s/src/Accounts/Authentication.ResourceManager/Common/PSObjectExtensions.cs, Line: 103, Message: https://www.jetbrains.com/help/resharper/MergeSequentialChecks.html
    #34 Path: /Users/runner/work/1/s/src/Accounts/Authentication.ResourceManager/Common/PSObjectExtensions.cs, Line: 130, Message: https://www.jetbrains.com/help/resharper/MergeSequentialChecks.html
    #35 Path: /Users/runner/work/1/s/src/Accounts/Authentication.ResourceManager/Common/PSObjectExtensions.cs, Line: 155, Message: https://www.jetbrains.com/help/resharper/MergeSequentialChecks.html
    #36 Path: /Users/runner/work/1/s/src/Accounts/Authentication.ResourceManager/Common/PSObjectExtensions.cs, Line: 197, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #37 Path: /Users/runner/work/1/s/src/Accounts/Authentication.ResourceManager/Common/PSObjectExtensions.cs, Line: 200, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #38 Path: /Users/runner/work/1/s/src/Accounts/Authentication.ResourceManager/Common/PSObjectExtensions.cs, Line: 224, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #39 Path: /Users/runner/work/1/s/src/Accounts/Authentication.ResourceManager/Common/PSObjectExtensions.cs, Line: 253, Message: https://www.jetbrains.com/help/resharper/MergeSequentialChecks.html
    #40 Path: /Users/runner/work/1/s/src/Accounts/Authentication.ResourceManager/Common/PSObjectExtensions.cs, Line: 256, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #41 Path: /Users/runner/work/1/s/src/Accounts/Authentication.ResourceManager/Common/PSObjectExtensions.cs, Line: 279, Message: https://www.jetbrains.com/help/resharper/MergeSequentialChecks.html
    #42 Path: /Users/runner/work/1/s/src/Accounts/Authentication.ResourceManager/Common/PSObjectExtensions.cs, Line: 282, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #43 Path: /Users/runner/work/1/s/src/Accounts/Authentication.ResourceManager/Common/PSObjectExtensions.cs, Line: 37, Message: https://www.jetbrains.com/help/resharper/MergeSequentialChecks.html
    #44 Path: /Users/runner/work/1/s/src/Accounts/Authentication.ResourceManager/Common/PSObjectExtensions.cs, Line: 56, Message: https://www.jetbrains.com/help/resharper/MergeSequentialChecks.html
    #45 Path: /Users/runner/work/1/s/src/Accounts/Authentication.ResourceManager/Common/PSObjectExtensions.cs, Line: 77, Message: https://www.jetbrains.com/help/resharper/MergeSequentialChecks.html
    #46 Path: /Users/runner/work/1/s/src/Accounts/Authentication.ResourceManager/ContextModelExtensions.cs, Line: 28, Message: https://www.jetbrains.com/help/resharper/MergeSequentialChecks.html
    #47 Path: /Users/runner/work/1/s/src/Accounts/Authentication.ResourceManager/ContextModelExtensions.cs, Line: 37, Message: https://www.jetbrains.com/help/resharper/MergeSequentialChecks.html
    #48 Path: /Users/runner/work/1/s/src/Accounts/Authentication.ResourceManager/Models/AzureContextConverter.cs, Line: 149, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #49 Path: /Users/runner/work/1/s/src/Accounts/Authentication.ResourceManager/Models/AzureContextConverter.cs, Line: 167, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #50 Path: /Users/runner/work/1/s/src/Accounts/Authentication.ResourceManager/Models/AzureContextConverter.cs, Line: 170, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #51 Path: /Users/runner/work/1/s/src/Accounts/Authentication.ResourceManager/Models/PSAzureEnvironment.cs, Line: 392, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #52 Path: /Users/runner/work/1/s/src/Accounts/Authentication.ResourceManager/ProtectedFileProvider.cs, Line: 144, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #53 Path: /Users/runner/work/1/s/src/Accounts/Authentication.ResourceManager/Serialization/ModelConversionExtensions.cs, Line: 78, Message: https://www.jetbrains.com/help/resharper/MergeSequentialChecks.html



Project: Authentication
    #54 Path: /Users/runner/work/1/s/src/Accounts/Authentication/Authentication/TokenCache/AdalTokenMigrator.cs, Line: 85, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #55 Path: /Users/runner/work/1/s/src/Accounts/Authentication/Authentication/TokenCache/AdalTokenMigrator.cs, Line: 86, Message: ReSharper: ReplaceWithSingleCallToFirstOrDefault. / SonarQube "IEnumerable" LINQs should be simplified. See https://rules.sonarsource.com/csharp/RSPEC-2971
    #56 Path: /Users/runner/work/1/s/src/Accounts/Authentication/Authentication/TokenCache/AdalTokenMigrator.cs, Line: 93, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #57 Path: /Users/runner/work/1/s/src/Accounts/Authentication/Authentication/TokenCache/PowerShellTokenCacheProvider.cs, Line: 125, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #58 Path: /Users/runner/work/1/s/src/Accounts/Authentication/Authentication/TokenCache/PowerShellTokenCacheProvider.cs, Line: 67, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #59 Path: /Users/runner/work/1/s/src/Accounts/Authentication/Authentication/TokenCache/PowerShellTokenCacheProvider.cs, Line: 81, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #60 Path: /Users/runner/work/1/s/src/Accounts/Authentication/Authentication/TokenCache/PowerShellTokenCacheProvider.cs, Line: 90, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #61 Path: /Users/runner/work/1/s/src/Accounts/Authentication/Factories/AuthenticationFactory.cs, Line: 149, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #62 Path: /Users/runner/work/1/s/src/Accounts/Authentication/Factories/AuthenticationFactory.cs, Line: 162, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #63 Path: /Users/runner/work/1/s/src/Accounts/Authentication/Factories/ClientFactory.cs, Line: 176, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #64 Path: /Users/runner/work/1/s/src/Accounts/Authentication/Factories/ClientFactory.cs, Line: 407, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #65 Path: /Users/runner/work/1/s/src/Accounts/Authentication/Factories/ClientFactory.cs, Line: 411, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #66 Path: /Users/runner/work/1/s/src/Accounts/Authentication/Models/MemoryDataStore.cs, Line: 281, Message: https://www.jetbrains.com/help/resharper/MergeSequentialChecks.html
    #67 Path: /Users/runner/work/1/s/src/Accounts/Authentication/Utilities/HttpClientWithRetry.cs, Line: 57, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html



Project: Az.ADDomainServices
    #68 Path: /Users/runner/work/1/s/src/ADDomainServices/generated/runtime/Serialization/JsonSerializer.cs, Line: 315, Message: ReSharper: Type check and casts can be merged. See https://www.jetbrains.com/help/resharper/MergeCastWithTypeCheck.html / SonarQube: Duplicate casts should not be made. See https://rules.sonarsource.com/csharp/RSPEC-3247



Project: Advisor
    #69 Path: /Users/runner/work/1/s/src/Advisor/Advisor/Cmdlets/Utilities/RecommendationHelper.cs, Line: 47, Message: ReSharper: Use '.Any()' to test whether this IEnumerable is empty or not. See ReSharper/UseMethodAny.0.html / SonarQube: "Any()" should be used to test for emptiness. See https://rules.sonarsource.com/csharp/RSPEC-1155



Project: Aks
    #70 Path: /Users/runner/work/1/s/src/Aks/Aks/Commands/NewAzureRmAks.cs, Line: 156, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #71 Path: /Users/runner/work/1/s/src/Aks/Aks/Commands/StopAzureRmAksDashboard.cs, Line: 35, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #72 Path: /Users/runner/work/1/s/src/Aks/Aks/Utils/AddonUtils.cs, Line: 106, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #73 Path: /Users/runner/work/1/s/src/Aks/Aks/Utils/AddonUtils.cs, Line: 28, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html



Project: AlertsManagement
    #74 Path: /Users/runner/work/1/s/src/AlertsManagement/AlertsManagement/OutputModels/PSAggregatedCounts.cs, Line: 49, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #75 Path: /Users/runner/work/1/s/src/AlertsManagement/AlertsManagement/OutputModels/PSAggregatedCounts.cs, Line: 53, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #76 Path: /Users/runner/work/1/s/src/AlertsManagement/AlertsManagement/OutputModels/PSAggregatedCounts.cs, Line: 58, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #77 Path: /Users/runner/work/1/s/src/AlertsManagement/AlertsManagement/OutputModels/PSAlertModificationItem.cs, Line: 36, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #78 Path: /Users/runner/work/1/s/src/AlertsManagement/AlertsManagement/OutputModels/PSAlertModificationItem.cs, Line: 37, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #79 Path: /Users/runner/work/1/s/src/AlertsManagement/AlertsManagement/OutputModels/PSAlertModificationItem.cs, Line: 38, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #80 Path: /Users/runner/work/1/s/src/AlertsManagement/AlertsManagement/OutputModels/PSSmartGroupModificationEvent.cs, Line: 36, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #81 Path: /Users/runner/work/1/s/src/AlertsManagement/AlertsManagement/OutputModels/PSSmartGroupModificationEvent.cs, Line: 37, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #82 Path: /Users/runner/work/1/s/src/AlertsManagement/AlertsManagement/OutputModels/PSSmartGroupModificationEvent.cs, Line: 38, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html



Project: AnalysisServices.Dataplane
    #83 Path: /Users/runner/work/1/s/src/AnalysisServices/AnalysisServices.Dataplane/Commands/Synchronize-AzureASInstance.cs, Line: 118, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #84 Path: /Users/runner/work/1/s/src/AnalysisServices/AnalysisServices.Dataplane/Commands/Synchronize-AzureASInstance.cs, Line: 313, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #85 Path: /Users/runner/work/1/s/src/AnalysisServices/AnalysisServices.Dataplane/Commands/Synchronize-AzureASInstance.cs, Line: 90, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #86 Path: /Users/runner/work/1/s/src/AnalysisServices/AnalysisServices.Dataplane/Commands/Synchronize-AzureASInstance.cs, Line: 92, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #87 Path: /Users/runner/work/1/s/src/AnalysisServices/AnalysisServices.Dataplane/Commands/Synchronize-AzureASInstance.cs, Line: 97, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #88 Path: /Users/runner/work/1/s/src/AnalysisServices/AnalysisServices.Dataplane/Models/AsAzureDataplaneCmdletBase.cs, Line: 150, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html



Project: ApiManagement.ServiceManagement
    #89 Path: /Users/runner/work/1/s/src/ApiManagement/ApiManagement.ServiceManagement/ApiManagementClient.cs, Line: 1706, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #90 Path: /Users/runner/work/1/s/src/ApiManagement/ApiManagement.ServiceManagement/ApiManagementClient.cs, Line: 1769, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #91 Path: /Users/runner/work/1/s/src/ApiManagement/ApiManagement.ServiceManagement/ApiManagementClient.cs, Line: 1811, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #92 Path: /Users/runner/work/1/s/src/ApiManagement/ApiManagement.ServiceManagement/ApiManagementClient.cs, Line: 1851, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #93 Path: /Users/runner/work/1/s/src/ApiManagement/ApiManagement.ServiceManagement/ApiManagementClient.cs, Line: 1863, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #94 Path: /Users/runner/work/1/s/src/ApiManagement/ApiManagement.ServiceManagement/ApiManagementClient.cs, Line: 2188, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #95 Path: /Users/runner/work/1/s/src/ApiManagement/ApiManagement.ServiceManagement/ApiManagementClient.cs, Line: 2198, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #96 Path: /Users/runner/work/1/s/src/ApiManagement/ApiManagement.ServiceManagement/ApiManagementClient.cs, Line: 2208, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #97 Path: /Users/runner/work/1/s/src/ApiManagement/ApiManagement.ServiceManagement/ApiManagementClient.cs, Line: 2218, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #98 Path: /Users/runner/work/1/s/src/ApiManagement/ApiManagement.ServiceManagement/ApiManagementClient.cs, Line: 2265, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #99 Path: /Users/runner/work/1/s/src/ApiManagement/ApiManagement.ServiceManagement/ApiManagementClient.cs, Line: 2867, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #100 Path: /Users/runner/work/1/s/src/ApiManagement/ApiManagement.ServiceManagement/ApiManagementClient.cs, Line: 2882, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #101 Path: /Users/runner/work/1/s/src/ApiManagement/ApiManagement.ServiceManagement/ApiManagementClient.cs, Line: 3009, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #102 Path: /Users/runner/work/1/s/src/ApiManagement/ApiManagement.ServiceManagement/ApiManagementClient.cs, Line: 717, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #103 Path: /Users/runner/work/1/s/src/ApiManagement/ApiManagement.ServiceManagement/Commands/GetAzureApiManagementGateway.cs, Line: 56, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #104 Path: /Users/runner/work/1/s/src/ApiManagement/ApiManagement.ServiceManagement/Commands/GetAzureApiManagementGatewayHostnameConfiguration.cs, Line: 77, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #105 Path: /Users/runner/work/1/s/src/ApiManagement/ApiManagement.ServiceManagement/Commands/GetAzureApiManagementGatewayKey.cs, Line: 56, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #106 Path: /Users/runner/work/1/s/src/ApiManagement/ApiManagement.ServiceManagement/Commands/GetAzureApiManagementGroup.cs, Line: 92, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #107 Path: /Users/runner/work/1/s/src/ApiManagement/ApiManagement.ServiceManagement/Commands/GetAzureApiManagementIdentityProvider.cs, Line: 57, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #108 Path: /Users/runner/work/1/s/src/ApiManagement/ApiManagement.ServiceManagement/Commands/GetAzureApiManagementIdentityProviderClientSecret.cs, Line: 51, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #109 Path: /Users/runner/work/1/s/src/ApiManagement/ApiManagement.ServiceManagement/Commands/GetAzureApiManagementLogger.cs, Line: 56, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #110 Path: /Users/runner/work/1/s/src/ApiManagement/ApiManagement.ServiceManagement/Commands/GetAzureApiManagementNamedValue.cs, Line: 83, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #111 Path: /Users/runner/work/1/s/src/ApiManagement/ApiManagement.ServiceManagement/Commands/GetAzureApiManagementOpenIdConnectProvider.cs, Line: 74, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #112 Path: /Users/runner/work/1/s/src/ApiManagement/ApiManagement.ServiceManagement/Commands/GetAzureApiManagementOperation.cs, Line: 89, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #113 Path: /Users/runner/work/1/s/src/ApiManagement/ApiManagement.ServiceManagement/Commands/GetAzureApiManagementPolicy.cs, Line: 147, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #114 Path: /Users/runner/work/1/s/src/ApiManagement/ApiManagement.ServiceManagement/Commands/GetAzureApiManagementProduct.cs, Line: 84, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #115 Path: /Users/runner/work/1/s/src/ApiManagement/ApiManagement.ServiceManagement/Commands/GetAzureApiManagementSubscription.cs, Line: 115, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #116 Path: /Users/runner/work/1/s/src/ApiManagement/ApiManagement.ServiceManagement/Commands/GetAzureApiManagementSubscriptionKey.cs, Line: 55, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #117 Path: /Users/runner/work/1/s/src/ApiManagement/ApiManagement.ServiceManagement/Commands/ImportAzureApiManagementApi.cs, Line: 184, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #118 Path: /Users/runner/work/1/s/src/ApiManagement/ApiManagement.ServiceManagement/Commands/NewAzureApiManagementApi.cs, Line: 196, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #119 Path: /Users/runner/work/1/s/src/ApiManagement/ApiManagement.ServiceManagement/Commands/NewAzureApiManagementApi.cs, Line: 205, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #120 Path: /Users/runner/work/1/s/src/ApiManagement/ApiManagement.ServiceManagement/Commands/NewAzureApiManagementCertificate.cs, Line: 91, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #121 Path: /Users/runner/work/1/s/src/ApiManagement/ApiManagement.ServiceManagement/Commands/RemoveAzureApiManagementPolicy.cs, Line: 105, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #122 Path: /Users/runner/work/1/s/src/ApiManagement/ApiManagement.ServiceManagement/Commands/SetAzureApiManagementCertificate.cs, Line: 101, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #123 Path: /Users/runner/work/1/s/src/ApiManagement/ApiManagement.ServiceManagement/Commands/SetAzureApiManagementPolicy.cs, Line: 168, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html



Project: Az.AppConfiguration
    #124 Path: /Users/runner/work/1/s/src/AppConfiguration/generated/runtime/Serialization/JsonSerializer.cs, Line: 315, Message: ReSharper: Type check and casts can be merged. See https://www.jetbrains.com/help/resharper/MergeCastWithTypeCheck.html / SonarQube: Duplicate casts should not be made. See https://rules.sonarsource.com/csharp/RSPEC-3247



Project: Attestation
    #125 Path: /Users/runner/work/1/s/src/Attestation/Attestation/Models/JwksHelper.cs, Line: 57, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #126 Path: /Users/runner/work/1/s/src/Attestation/Attestation/Models/JwksHelper.cs, Line: 58, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html



Project: Automation
    #127 Path: /Users/runner/work/1/s/src/Automation/Automation/Common/AutomationPSClientSoftwareUpdateConfiguration.cs, Line: 34, Message: https://www.jetbrains.com/help/resharper/MergeSequentialChecks.html
    #128 Path: /Users/runner/work/1/s/src/Automation/Automation/Common/AutomationPSClientSoftwareUpdateConfiguration.cs, Line: 66, Message: https://www.jetbrains.com/help/resharper/MergeSequentialChecks.html
    #129 Path: /Users/runner/work/1/s/src/Automation/Automation/Model/UpdateManagement/SoftwareUpdateConfiguration.cs, Line: 103, Message: https://www.jetbrains.com/help/resharper/MergeSequentialChecks.html



Project: Batch
    #130 Path: /Users/runner/work/1/s/src/Batch/Batch/BatchCmdletBase.cs, Line: 128, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #131 Path: /Users/runner/work/1/s/src/Batch/Batch/Models/BatchClient.Files.cs, Line: 235, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #132 Path: /Users/runner/work/1/s/src/Batch/Batch/Models/BatchClient.Files.cs, Line: 241, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html



Project: Az.Blockchain
    #133 Path: /Users/runner/work/1/s/src/Blockchain/generated/runtime/Serialization/JsonSerializer.cs, Line: 315, Message: ReSharper: Type check and casts can be merged. See https://www.jetbrains.com/help/resharper/MergeCastWithTypeCheck.html / SonarQube: Duplicate casts should not be made. See https://rules.sonarsource.com/csharp/RSPEC-3247



Project: Blueprint
    #134 Path: /Users/runner/work/1/s/src/Blueprint/Blueprint/Cmdlets/BlueprintCmdletBase.cs, Line: 109, Message: https://www.jetbrains.com/help/resharper/MergeSequentialChecks.html
    #135 Path: /Users/runner/work/1/s/src/Blueprint/Blueprint/Cmdlets/BlueprintDefinition/BlueprintDefinitionCmdletBase.cs, Line: 90, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html



Project: Az.BotService
    #136 Path: /Users/runner/work/1/s/src/BotService/generated/runtime/Serialization/JsonSerializer.cs, Line: 315, Message: ReSharper: Type check and casts can be merged. See https://www.jetbrains.com/help/resharper/MergeCastWithTypeCheck.html / SonarQube: Duplicate casts should not be made. See https://rules.sonarsource.com/csharp/RSPEC-3247



Project: Cdn
    #137 Path: /Users/runner/work/1/s/src/Cdn/Cdn/CustomDomain/DisableAzureRmCdnCustomDomainHttps.cs, Line: 95, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #138 Path: /Users/runner/work/1/s/src/Cdn/Cdn/CustomDomain/EnableAzureRmCdnCustomDomainHttps.cs, Line: 129, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #139 Path: /Users/runner/work/1/s/src/Cdn/Cdn/CustomDomain/RemoveAzureRmCdnCustomDomain.cs, Line: 80, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #140 Path: /Users/runner/work/1/s/src/Cdn/Cdn/Endpoint/NewAzureRmCdnEndpoint.cs, Line: 228, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #141 Path: /Users/runner/work/1/s/src/Cdn/Cdn/Endpoint/SetAzureRmCdnEndpoint.cs, Line: 70, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #142 Path: /Users/runner/work/1/s/src/Cdn/Cdn/Helpers/ModelExtensions.cs, Line: 888, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #143 Path: /Users/runner/work/1/s/src/Cdn/Cdn/Helpers/ModelExtensions.cs, Line: 903, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #144 Path: /Users/runner/work/1/s/src/Cdn/Cdn/Helpers/ModelExtensions.cs, Line: 913, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #145 Path: /Users/runner/work/1/s/src/Cdn/Cdn/Helpers/ModelExtensions.cs, Line: 921, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #146 Path: /Users/runner/work/1/s/src/Cdn/Cdn/Helpers/ModelExtensions.cs, Line: 932, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #147 Path: /Users/runner/work/1/s/src/Cdn/Cdn/Origin/NewAzCdnOrigin.cs, Line: 145, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #148 Path: /Users/runner/work/1/s/src/Cdn/Cdn/Origin/RemoveAzCdnOrigin.cs, Line: 98, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #149 Path: /Users/runner/work/1/s/src/Cdn/Cdn/Origin/SetAzureRmCdnOrigin.cs, Line: 116, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #150 Path: /Users/runner/work/1/s/src/Cdn/Cdn/Origin/SetAzureRmCdnOrigin.cs, Line: 145, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #151 Path: /Users/runner/work/1/s/src/Cdn/Cdn/OriginGroups/GetAzCdnOriginGroup.cs, Line: 69, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #152 Path: /Users/runner/work/1/s/src/Cdn/Cdn/OriginGroups/NewAzCdnOriginGroup.cs, Line: 146, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #153 Path: /Users/runner/work/1/s/src/Cdn/Cdn/OriginGroups/RmAzCdnOriginGroup.cs, Line: 95, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #154 Path: /Users/runner/work/1/s/src/Cdn/Cdn/OriginGroups/SetAzCdnOriginGroup.cs, Line: 146, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #155 Path: /Users/runner/work/1/s/src/Cdn/Cdn/Profile/RemoveAzureRmCdnProfile.cs, Line: 90, Message: ReSharper: Use '.Any()' to test whether this IEnumerable is empty or not. See ReSharper/UseMethodAny.0.html / SonarQube: "Any()" should be used to test for emptiness. See https://rules.sonarsource.com/csharp/RSPEC-1155



Project: Az.CloudService
    #156 Path: /Users/runner/work/1/s/src/CloudService/generated/runtime/Serialization/JsonSerializer.cs, Line: 315, Message: ReSharper: Type check and casts can be merged. See https://www.jetbrains.com/help/resharper/MergeCastWithTypeCheck.html / SonarQube: Duplicate casts should not be made. See https://rules.sonarsource.com/csharp/RSPEC-3247



Project: CognitiveServices
    #157 Path: /Users/runner/work/1/s/src/CognitiveServices/CognitiveServices/CognitiveServicesAccount/CognitiveServicesAccountBaseCmdlet.cs, Line: 110, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #158 Path: /Users/runner/work/1/s/src/CognitiveServices/CognitiveServices/CognitiveServicesAccount/RemoveAzureCognitiveServicesAccountNetworkRule.cs, Line: 122, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #159 Path: /Users/runner/work/1/s/src/CognitiveServices/CognitiveServices/CognitiveServicesAccount/RemoveAzureCognitiveServicesAccountNetworkRule.cs, Line: 132, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #160 Path: /Users/runner/work/1/s/src/CognitiveServices/CognitiveServices/CognitiveServicesAccount/RemoveAzureCognitiveServicesAccountNetworkRule.cs, Line: 141, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #161 Path: /Users/runner/work/1/s/src/CognitiveServices/CognitiveServices/CognitiveServicesAccount/RemoveAzureCognitiveServicesAccountNetworkRule.cs, Line: 150, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html



Project: Az.Communication
    #162 Path: /Users/runner/work/1/s/src/Communication/generated/runtime/Serialization/JsonSerializer.cs, Line: 315, Message: ReSharper: Type check and casts can be merged. See https://www.jetbrains.com/help/resharper/MergeCastWithTypeCheck.html / SonarQube: Duplicate casts should not be made. See https://rules.sonarsource.com/csharp/RSPEC-3247



Project: Compute
    #163 Path: /Users/runner/work/1/s/src/Compute/Compute/Common/DiagnosticsHelper.cs, Line: 294, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #164 Path: /Users/runner/work/1/s/src/Compute/Compute/Common/DiagnosticsHelper.cs, Line: 619, Message: https://www.jetbrains.com/help/resharper/MergeSequentialChecks.html
    #165 Path: /Users/runner/work/1/s/src/Compute/Compute/Common/Utils.cs, Line: 139, Message: ReSharper: Use '.Any()' to test whether this IEnumerable is empty or not. See ReSharper/UseMethodAny.0.html / SonarQube: "Any()" should be used to test for emptiness. See https://rules.sonarsource.com/csharp/RSPEC-1155
    #166 Path: /Users/runner/work/1/s/src/Compute/Compute/Common/Utils.cs, Line: 146, Message: ReSharper: Use '.Any()' to test whether this IEnumerable is empty or not. See ReSharper/UseMethodAny.0.html / SonarQube: "Any()" should be used to test for emptiness. See https://rules.sonarsource.com/csharp/RSPEC-1155
    #167 Path: /Users/runner/work/1/s/src/Compute/Compute/Disk/RemoveDiskAccessCommand.cs, Line: 94, Message: https://www.jetbrains.com/help/resharper/MergeSequentialChecks.html
    #168 Path: /Users/runner/work/1/s/src/Compute/Compute/Extension/AEM/AEMHelper.cs, Line: 1004, Message: ReSharper: Use '.Any()' to test whether this IEnumerable is empty or not. See ReSharper/UseMethodAny.0.html / SonarQube: "Any()" should be used to test for emptiness. See https://rules.sonarsource.com/csharp/RSPEC-1155
    #169 Path: /Users/runner/work/1/s/src/Compute/Compute/Extension/AEM/AEMHelper.cs, Line: 762, Message: https://www.jetbrains.com/help/resharper/MergeSequentialChecks.html
    #170 Path: /Users/runner/work/1/s/src/Compute/Compute/Extension/AEM/AEMHelper.cs, Line: 826, Message: https://www.jetbrains.com/help/resharper/MergeSequentialChecks.html
    #171 Path: /Users/runner/work/1/s/src/Compute/Compute/Extension/AEM/AEMHelper.cs, Line: 840, Message: https://www.jetbrains.com/help/resharper/MergeSequentialChecks.html
    #172 Path: /Users/runner/work/1/s/src/Compute/Compute/Extension/AEM/AEMHelper.cs, Line: 935, Message: ReSharper: Use '.Any()' to test whether this IEnumerable is empty or not. See ReSharper/UseMethodAny.0.html / SonarQube: "Any()" should be used to test for emptiness. See https://rules.sonarsource.com/csharp/RSPEC-1155
    #173 Path: /Users/runner/work/1/s/src/Compute/Compute/Extension/AEM/TestAzureRmVMAEMExtension.cs, Line: 655, Message: https://www.jetbrains.com/help/resharper/MergeSequentialChecks.html
    #174 Path: /Users/runner/work/1/s/src/Compute/Compute/Extension/AzureDiskEncryption/DisableAzureDiskEncryption.cs, Line: 129, Message: https://www.jetbrains.com/help/resharper/MergeSequentialChecks.html
    #175 Path: /Users/runner/work/1/s/src/Compute/Compute/Extension/AzureDiskEncryption/GetAzureDiskEncryptionStatus.cs, Line: 177, Message: https://www.jetbrains.com/help/resharper/MergeSequentialChecks.html
    #176 Path: /Users/runner/work/1/s/src/Compute/Compute/Extension/AzureDiskEncryption/GetAzureDiskEncryptionStatus.cs, Line: 495, Message: https://www.jetbrains.com/help/resharper/MergeSequentialChecks.html
    #177 Path: /Users/runner/work/1/s/src/Compute/Compute/Extension/AzureDiskEncryption/SetAzureDiskEncryptionExtension.cs, Line: 542, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #178 Path: /Users/runner/work/1/s/src/Compute/Compute/Extension/AzureDiskEncryption/SetAzureDiskEncryptionExtension.cs, Line: 545, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #179 Path: /Users/runner/work/1/s/src/Compute/Compute/Extension/AzureVMBackup/AzureVMBackupExtensionUtil.cs, Line: 133, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #180 Path: /Users/runner/work/1/s/src/Compute/Compute/Extension/DSC/ConfigurationParsingHelper.cs, Line: 51, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #181 Path: /Users/runner/work/1/s/src/Compute/Compute/Extension/DSC/DscExtensionCmdletCommonBase.cs, Line: 31, Message: https://www.jetbrains.com/help/resharper/MergeSequentialChecks.html
    #182 Path: /Users/runner/work/1/s/src/Compute/Compute/Extension/DSC/GetAzureVMDscExtensionStatusCommand.cs, Line: 94, Message: https://www.jetbrains.com/help/resharper/MergeSequentialChecks.html
    #183 Path: /Users/runner/work/1/s/src/Compute/Compute/Extension/SqlServer/GetAzureVMSqlServerExtensionCommand.cs, Line: 87, Message: ReSharper: ReplaceWithSingleCallToFirstOrDefault. / SonarQube "IEnumerable" LINQs should be simplified. See https://rules.sonarsource.com/csharp/RSPEC-2971
    #184 Path: /Users/runner/work/1/s/src/Compute/Compute/Extension/SqlServer/SetAzureVMSqlServerExtensionCommand.cs, Line: 109, Message: https://www.jetbrains.com/help/resharper/MergeSequentialChecks.html
    #185 Path: /Users/runner/work/1/s/src/Compute/Compute/Extension/SqlServer/SetAzureVMSqlServerExtensionCommand.cs, Line: 111, Message: ReSharper: ReplaceWithSingleCallToFirstOrDefault. / SonarQube "IEnumerable" LINQs should be simplified. See https://rules.sonarsource.com/csharp/RSPEC-2971
    #186 Path: /Users/runner/work/1/s/src/Compute/Compute/Extension/VmssDiskEncryption/DisableAzureVmssDiskEncryption.cs, Line: 151, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #187 Path: /Users/runner/work/1/s/src/Compute/Compute/Extension/VmssDiskEncryption/GetAzureVmssDiskEncryptionStatus.cs, Line: 189, Message: https://www.jetbrains.com/help/resharper/MergeSequentialChecks.html
    #188 Path: /Users/runner/work/1/s/src/Compute/Compute/Extension/VmssDiskEncryption/GetAzureVmssDiskEncryptionStatus.cs, Line: 197, Message: https://www.jetbrains.com/help/resharper/MergeSequentialChecks.html
    #189 Path: /Users/runner/work/1/s/src/Compute/Compute/Extension/VmssDiskEncryption/GetAzureVmssVMDiskEncryptionStatus.cs, Line: 130, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #190 Path: /Users/runner/work/1/s/src/Compute/Compute/Extension/VmssDiskEncryption/GetAzureVmssVMDiskEncryptionStatus.cs, Line: 133, Message: https://www.jetbrains.com/help/resharper/MergeSequentialChecks.html
    #191 Path: /Users/runner/work/1/s/src/Compute/Compute/Generated/ComputeAutomationBaseCmdlet.cs, Line: 276, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #192 Path: /Users/runner/work/1/s/src/Compute/Compute/Generated/ComputeAutomationBaseCmdlet.cs, Line: 296, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #193 Path: /Users/runner/work/1/s/src/Compute/Compute/Generated/ComputeAutomationBaseCmdlet.cs, Line: 330, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #194 Path: /Users/runner/work/1/s/src/Compute/Compute/Generated/DedicatedHost/DedicatedHostDeleteMethod.cs, Line: 74, Message: https://www.jetbrains.com/help/resharper/MergeSequentialChecks.html
    #195 Path: /Users/runner/work/1/s/src/Compute/Compute/Generated/DedicatedHostGroup/DedicatedHostGroupDeleteMethod.cs, Line: 70, Message: https://www.jetbrains.com/help/resharper/MergeSequentialChecks.html
    #196 Path: /Users/runner/work/1/s/src/Compute/Compute/Generated/Disk/DiskDeleteMethod.cs, Line: 59, Message: https://www.jetbrains.com/help/resharper/MergeSequentialChecks.html
    #197 Path: /Users/runner/work/1/s/src/Compute/Compute/Generated/Disk/DiskRevokeAccessMethod.cs, Line: 56, Message: https://www.jetbrains.com/help/resharper/MergeSequentialChecks.html
    #198 Path: /Users/runner/work/1/s/src/Compute/Compute/Generated/DiskEncryptionSet/DiskEncryptionSetDeleteMethod.cs, Line: 74, Message: https://www.jetbrains.com/help/resharper/MergeSequentialChecks.html
    #199 Path: /Users/runner/work/1/s/src/Compute/Compute/Generated/Gallery/GalleryDeleteMethod.cs, Line: 74, Message: https://www.jetbrains.com/help/resharper/MergeSequentialChecks.html
    #200 Path: /Users/runner/work/1/s/src/Compute/Compute/Generated/GalleryImage/GalleryImageDeleteMethod.cs, Line: 78, Message: https://www.jetbrains.com/help/resharper/MergeSequentialChecks.html
    #201 Path: /Users/runner/work/1/s/src/Compute/Compute/Generated/GalleryImageVersion/GalleryImageVersionDeleteMethod.cs, Line: 82, Message: https://www.jetbrains.com/help/resharper/MergeSequentialChecks.html
    #202 Path: /Users/runner/work/1/s/src/Compute/Compute/Generated/Image/ImageDeleteMethod.cs, Line: 59, Message: https://www.jetbrains.com/help/resharper/MergeSequentialChecks.html
    #203 Path: /Users/runner/work/1/s/src/Compute/Compute/Generated/ProximityPlacementGroup/ProximityPlacementGroupDeleteMethod.cs, Line: 73, Message: https://www.jetbrains.com/help/resharper/MergeSequentialChecks.html
    #204 Path: /Users/runner/work/1/s/src/Compute/Compute/Generated/ResourceSku/ResourceSkuListMethod.cs, Line: 55, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #205 Path: /Users/runner/work/1/s/src/Compute/Compute/Generated/Snapshot/SnapshotCreateOrUpdateMethod.cs, Line: 56, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #206 Path: /Users/runner/work/1/s/src/Compute/Compute/Generated/Snapshot/SnapshotDeleteMethod.cs, Line: 59, Message: https://www.jetbrains.com/help/resharper/MergeSequentialChecks.html
    #207 Path: /Users/runner/work/1/s/src/Compute/Compute/Generated/Snapshot/SnapshotRevokeAccessMethod.cs, Line: 56, Message: https://www.jetbrains.com/help/resharper/MergeSequentialChecks.html
    #208 Path: /Users/runner/work/1/s/src/Compute/Compute/Generated/VirtualMachine/VirtualMachineConvertToManagedDisksMethod.cs, Line: 56, Message: https://www.jetbrains.com/help/resharper/MergeSequentialChecks.html
    #209 Path: /Users/runner/work/1/s/src/Compute/Compute/Generated/VirtualMachine/VirtualMachineReimageMethod.cs, Line: 57, Message: https://www.jetbrains.com/help/resharper/MergeSequentialChecks.html
    #210 Path: /Users/runner/work/1/s/src/Compute/Compute/Generated/VirtualMachineScaleSet/VirtualMachineScaleSetDeallocateMethod.cs, Line: 70, Message: https://www.jetbrains.com/help/resharper/MergeSequentialChecks.html
    #211 Path: /Users/runner/work/1/s/src/Compute/Compute/Generated/VirtualMachineScaleSet/VirtualMachineScaleSetDeleteInstancesMethod.cs, Line: 69, Message: https://www.jetbrains.com/help/resharper/MergeSequentialChecks.html
    #212 Path: /Users/runner/work/1/s/src/Compute/Compute/Generated/VirtualMachineScaleSet/VirtualMachineScaleSetReimageMethod.cs, Line: 77, Message: https://www.jetbrains.com/help/resharper/MergeSequentialChecks.html
    #213 Path: /Users/runner/work/1/s/src/Compute/Compute/Generated/VirtualMachineScaleSet/VirtualMachineScaleSetRestartMethod.cs, Line: 57, Message: https://www.jetbrains.com/help/resharper/MergeSequentialChecks.html
    #214 Path: /Users/runner/work/1/s/src/Compute/Compute/Generated/VirtualMachineScaleSet/VirtualMachineScaleSetSetOrchestrationServiceStateMethod.cs, Line: 75, Message: https://www.jetbrains.com/help/resharper/MergeSequentialChecks.html
    #215 Path: /Users/runner/work/1/s/src/Compute/Compute/Generated/VirtualMachineScaleSet/VirtualMachineScaleSetStartMethod.cs, Line: 57, Message: https://www.jetbrains.com/help/resharper/MergeSequentialChecks.html
    #216 Path: /Users/runner/work/1/s/src/Compute/Compute/Generated/VirtualMachineScaleSet/VirtualMachineScaleSetUpdateInstancesMethod.cs, Line: 57, Message: https://www.jetbrains.com/help/resharper/MergeSequentialChecks.html
    #217 Path: /Users/runner/work/1/s/src/Compute/Compute/Generated/VirtualMachineScaleSetRollingUpgrade/VirtualMachineScaleSetRollingUpgradeCancelMethod.cs, Line: 59, Message: https://www.jetbrains.com/help/resharper/MergeSequentialChecks.html
    #218 Path: /Users/runner/work/1/s/src/Compute/Compute/Generated/VirtualMachineScaleSetRollingUpgrade/VirtualMachineScaleSetRollingUpgradeStartOSUpgradeMethod.cs, Line: 56, Message: https://www.jetbrains.com/help/resharper/MergeSequentialChecks.html
    #219 Path: /Users/runner/work/1/s/src/Compute/Compute/Generated/VirtualMachineScaleSetVM/VirtualMachineScaleSetVMReimageMethod.cs, Line: 78, Message: https://www.jetbrains.com/help/resharper/MergeSequentialChecks.html
    #220 Path: /Users/runner/work/1/s/src/Compute/Compute/Manual/RemoveAzureRmVmssVMDataDiskCommand.cs, Line: 46, Message: https://www.jetbrains.com/help/resharper/MergeSequentialChecks.html
    #221 Path: /Users/runner/work/1/s/src/Compute/Compute/Manual/VirtualMachineScaleSetRollingUpgrade/VirtualMachineScaleSetRollingExtensionStartUpgrade.cs, Line: 93, Message: https://www.jetbrains.com/help/resharper/MergeSequentialChecks.html
    #222 Path: /Users/runner/work/1/s/src/Compute/Compute/Models/PSSyncOutputEvents.cs, Line: 111, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #223 Path: /Users/runner/work/1/s/src/Compute/Compute/Models/PSSyncOutputEvents.cs, Line: 234, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #224 Path: /Users/runner/work/1/s/src/Compute/Compute/Strategies/ComputeRp/VirtualMachineStrategy.cs, Line: 37, Message: https://www.jetbrains.com/help/resharper/MergeSequentialChecks.html
    #225 Path: /Users/runner/work/1/s/src/Compute/Compute/Sync/Download/Downloader.cs, Line: 101, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #226 Path: /Users/runner/work/1/s/src/Compute/Compute/Sync/Download/Downloader.cs, Line: 132, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #227 Path: /Users/runner/work/1/s/src/Compute/Compute/Sync/Download/Downloader.cs, Line: 59, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #228 Path: /Users/runner/work/1/s/src/Compute/Compute/Sync/Download/Downloader.cs, Line: 77, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #229 Path: /Users/runner/work/1/s/src/Compute/Compute/Sync/Upload/BlobCreatorBase.cs, Line: 103, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #230 Path: /Users/runner/work/1/s/src/Compute/Compute/Sync/Upload/BlobCreatorBase.cs, Line: 170, Message: ReSharper: Use '.Any()' to test whether this IEnumerable is empty or not. See ReSharper/UseMethodAny.0.html / SonarQube: "Any()" should be used to test for emptiness. See https://rules.sonarsource.com/csharp/RSPEC-1155
    #231 Path: /Users/runner/work/1/s/src/Compute/Compute/Sync/Upload/BlobCreatorBase.cs, Line: 172, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #232 Path: /Users/runner/work/1/s/src/Compute/Compute/Sync/Upload/BlobCreatorBase.cs, Line: 333, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #233 Path: /Users/runner/work/1/s/src/Compute/Compute/Sync/Upload/BlobCreatorBase.cs, Line: 353, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #234 Path: /Users/runner/work/1/s/src/Compute/Compute/Sync/Upload/BlobCreatorBase.cs, Line: 361, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #235 Path: /Users/runner/work/1/s/src/Compute/Compute/Sync/Upload/BlobCreatorBase.cs, Line: 369, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #236 Path: /Users/runner/work/1/s/src/Compute/Compute/Sync/Upload/BlobCreatorBase.cs, Line: 378, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #237 Path: /Users/runner/work/1/s/src/Compute/Compute/Sync/Upload/BlobCreatorBase.cs, Line: 386, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #238 Path: /Users/runner/work/1/s/src/Compute/Compute/Sync/Upload/BlobCreatorBase.cs, Line: 394, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #239 Path: /Users/runner/work/1/s/src/Compute/Compute/Sync/Upload/ExtensionMethods.cs, Line: 115, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #240 Path: /Users/runner/work/1/s/src/Compute/Compute/Sync/Upload/ExtensionMethods.cs, Line: 127, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #241 Path: /Users/runner/work/1/s/src/Compute/Compute/Sync/Upload/ExtensionMethods.cs, Line: 190, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #242 Path: /Users/runner/work/1/s/src/Compute/Compute/Sync/Upload/PatchingBlobCreator.cs, Line: 131, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #243 Path: /Users/runner/work/1/s/src/Compute/Compute/Sync/Upload/PatchingBlobCreator.cs, Line: 155, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #244 Path: /Users/runner/work/1/s/src/Compute/Compute/Sync/Upload/PatchingBlobCreator.cs, Line: 53, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #245 Path: /Users/runner/work/1/s/src/Compute/Compute/Sync/Upload/PatchingBlobCreator.cs, Line: 72, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #246 Path: /Users/runner/work/1/s/src/Compute/Compute/VhdManagement/Async/AsyncMachine.cs, Line: 824, Message: https://www.jetbrains.com/help/resharper/MergeSequentialChecks.html
    #247 Path: /Users/runner/work/1/s/src/Compute/Compute/VhdManagement/Model/AttributeHelper.cs, Line: 33, Message: ReSharper: Use '.Any()' to test whether this IEnumerable is empty or not. See ReSharper/UseMethodAny.0.html / SonarQube: "Any()" should be used to test for emptiness. See https://rules.sonarsource.com/csharp/RSPEC-1155
    #248 Path: /Users/runner/work/1/s/src/Compute/Compute/VhdManagement/Model/AttributeHelper.cs, Line: 35, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #249 Path: /Users/runner/work/1/s/src/Compute/Compute/VhdManagement/Model/AttributeHelper.cs, Line: 61, Message: ReSharper: Use '.Any()' to test whether this IEnumerable is empty or not. See ReSharper/UseMethodAny.0.html / SonarQube: "Any()" should be used to test for emptiness. See https://rules.sonarsource.com/csharp/RSPEC-1155
    #250 Path: /Users/runner/work/1/s/src/Compute/Compute/VhdManagement/Model/AttributeHelper.cs, Line: 88, Message: ReSharper: Use '.Any()' to test whether this IEnumerable is empty or not. See ReSharper/UseMethodAny.0.html / SonarQube: "Any()" should be used to test for emptiness. See https://rules.sonarsource.com/csharp/RSPEC-1155
    #251 Path: /Users/runner/work/1/s/src/Compute/Compute/VhdManagement/Model/DiskGeometry.cs, Line: 95, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #252 Path: /Users/runner/work/1/s/src/Compute/Compute/VhdManagement/Model/IndexRange.cs, Line: 200, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #253 Path: /Users/runner/work/1/s/src/Compute/Compute/VhdManagement/Model/IndexRange.cs, Line: 206, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #254 Path: /Users/runner/work/1/s/src/Compute/Compute/VhdManagement/Model/Persistence/DiskTypeFactory.cs, Line: 30, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #255 Path: /Users/runner/work/1/s/src/Compute/Compute/VhdManagement/Model/Persistence/SectorFactory.cs, Line: 36, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #256 Path: /Users/runner/work/1/s/src/Compute/Compute/VhdManagement/Model/Persistence/VhdDataReader.cs, Line: 62, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #257 Path: /Users/runner/work/1/s/src/Compute/Compute/VhdManagement/Model/Persistence/VhdFooterFactory.cs, Line: 474, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #258 Path: /Users/runner/work/1/s/src/Compute/Compute/VhdManagement/Model/Persistence/VhdFooterFactory.cs, Line: 487, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #259 Path: /Users/runner/work/1/s/src/Compute/Compute/VhdManagement/Model/Persistence/VhdFooterFactory.cs, Line: 512, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #260 Path: /Users/runner/work/1/s/src/Compute/Compute/VhdManagement/Model/Persistence/VhdHeaderFactory.cs, Line: 393, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #261 Path: /Users/runner/work/1/s/src/Compute/Compute/VhdManagement/Model/Persistence/VhdHeaderFactory.cs, Line: 407, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #262 Path: /Users/runner/work/1/s/src/Compute/Compute/VhdManagement/Model/Persistence/VhdParentLocatorFactory.cs, Line: 102, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #263 Path: /Users/runner/work/1/s/src/Compute/Compute/VhdManagement/Model/Persistence/VhdParentLocatorFactory.cs, Line: 110, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #264 Path: /Users/runner/work/1/s/src/Compute/Compute/VhdManagement/Model/VhdFile.cs, Line: 68, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #265 Path: /Users/runner/work/1/s/src/Compute/Compute/VhdManagement/Model/VhdFile.cs, Line: 98, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #266 Path: /Users/runner/work/1/s/src/Compute/Compute/VhdManagement/Model/VhdTimeStamp.cs, Line: 28, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #267 Path: /Users/runner/work/1/s/src/Compute/Compute/VirtualMachine/Config/RemoveAzureVMDataDiskCommand.cs, Line: 51, Message: https://www.jetbrains.com/help/resharper/MergeSequentialChecks.html
    #268 Path: /Users/runner/work/1/s/src/Compute/Compute/VirtualMachine/Config/RemoveAzureVMNetworkInterfaceCommand.cs, Line: 62, Message: https://www.jetbrains.com/help/resharper/MergeSequentialChecks.html
    #269 Path: /Users/runner/work/1/s/src/Compute/Compute/VirtualMachine/Config/RemoveAzureVMSecretCommand.cs, Line: 49, Message: https://www.jetbrains.com/help/resharper/MergeSequentialChecks.html
    #270 Path: /Users/runner/work/1/s/src/Compute/Compute/VirtualMachine/Config/SetAzureVMDataDiskCommand.cs, Line: 166, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #271 Path: /Users/runner/work/1/s/src/Compute/Compute/VirtualMachine/Operation/GetAzureVMCommand.cs, Line: 224, Message: https://www.jetbrains.com/help/resharper/MergeSequentialChecks.html
    #272 Path: /Users/runner/work/1/s/src/Compute/Compute/VirtualMachine/Operation/NewAzureVMCommand.cs, Line: 322, Message: ReSharper: ReplaceWithSingleCallToFirstOrDefault. / SonarQube "IEnumerable" LINQs should be simplified. See https://rules.sonarsource.com/csharp/RSPEC-2971
    #273 Path: /Users/runner/work/1/s/src/Compute/Compute/VirtualMachine/Operation/NewAzureVMCommand.cs, Line: 501, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #274 Path: /Users/runner/work/1/s/src/Compute/Compute/VirtualMachine/Operation/NewAzureVMCommand.cs, Line: 507, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #275 Path: /Users/runner/work/1/s/src/Compute/Compute/VirtualMachine/Operation/NewAzureVMCommand.cs, Line: 725, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #276 Path: /Users/runner/work/1/s/src/Compute/Compute/VirtualMachine/Operation/NewAzureVMCommand.cs, Line: 818, Message: ReSharper: Use '.Any()' to test whether this IEnumerable is empty or not. See ReSharper/UseMethodAny.0.html / SonarQube: "Any()" should be used to test for emptiness. See https://rules.sonarsource.com/csharp/RSPEC-1155
    #277 Path: /Users/runner/work/1/s/src/Compute/Compute/VirtualMachine/Operation/NewAzureVMCommand.cs, Line: 821, Message: ReSharper: Use '.Any()' to test whether this IEnumerable is empty or not. See ReSharper/UseMethodAny.0.html / SonarQube: "Any()" should be used to test for emptiness. See https://rules.sonarsource.com/csharp/RSPEC-1155
    #278 Path: /Users/runner/work/1/s/src/Compute/Compute/VirtualMachine/VirtualMachineBaseCmdlet.cs, Line: 105, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #279 Path: /Users/runner/work/1/s/src/Compute/Compute/VirtualMachine/VirtualMachineBaseCmdlet.cs, Line: 125, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #280 Path: /Users/runner/work/1/s/src/Compute/Compute/VirtualMachine/VirtualMachineBaseCmdlet.cs, Line: 183, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html



Project: Az.Confluent
    #281 Path: /Users/runner/work/1/s/src/Confluent/generated/runtime/Serialization/JsonSerializer.cs, Line: 315, Message: ReSharper: Type check and casts can be merged. See https://www.jetbrains.com/help/resharper/MergeCastWithTypeCheck.html / SonarQube: Duplicate casts should not be made. See https://rules.sonarsource.com/csharp/RSPEC-3247



Project: Az.ConnectedKubernetes
    #282 Path: /Users/runner/work/1/s/src/ConnectedKubernetes/generated/runtime/Serialization/JsonSerializer.cs, Line: 315, Message: ReSharper: Type check and casts can be merged. See https://www.jetbrains.com/help/resharper/MergeCastWithTypeCheck.html / SonarQube: Duplicate casts should not be made. See https://rules.sonarsource.com/csharp/RSPEC-3247



Project: Az.ConnectedMachine
    #283 Path: /Users/runner/work/1/s/src/ConnectedMachine/generated/runtime/Serialization/JsonSerializer.cs, Line: 315, Message: ReSharper: Type check and casts can be merged. See https://www.jetbrains.com/help/resharper/MergeCastWithTypeCheck.html / SonarQube: Duplicate casts should not be made. See https://rules.sonarsource.com/csharp/RSPEC-3247



Project: ContainerRegistry
    #284 Path: /Users/runner/work/1/s/src/ContainerRegistry/ContainerRegistry/Commands/ConnectAzureContainerRegistry.cs, Line: 61, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #285 Path: /Users/runner/work/1/s/src/ContainerRegistry/ContainerRegistry/Commands/RemoveAzureContainerRegistryManifest.cs, Line: 40, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #286 Path: /Users/runner/work/1/s/src/ContainerRegistry/ContainerRegistry/Commands/RemoveAzureContainerRegistryManifest.cs, Line: 47, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #287 Path: /Users/runner/work/1/s/src/ContainerRegistry/ContainerRegistry/Commands/RemoveAzureContainerRegistryRepository.cs, Line: 30, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #288 Path: /Users/runner/work/1/s/src/ContainerRegistry/ContainerRegistry/Commands/RemoveContainerRegistryTag.cs, Line: 33, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #289 Path: /Users/runner/work/1/s/src/ContainerRegistry/ContainerRegistry/Commands/UpdateAzureContainerRegistryCredential.cs, Line: 69, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #290 Path: /Users/runner/work/1/s/src/ContainerRegistry/ContainerRegistry/Commands/UpdateAzureContainerRegistryManifest.cs, Line: 59, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #291 Path: /Users/runner/work/1/s/src/ContainerRegistry/ContainerRegistry/Commands/UpdateAzureContainerRegistryManifest.cs, Line: 66, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #292 Path: /Users/runner/work/1/s/src/ContainerRegistry/ContainerRegistry/Commands/UpdateAzureContainerRegistryRepository.cs, Line: 47, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #293 Path: /Users/runner/work/1/s/src/ContainerRegistry/ContainerRegistry/Commands/UpdateAzureContainerRegistryTag.cs, Line: 52, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #294 Path: /Users/runner/work/1/s/src/ContainerRegistry/ContainerRegistry/DataPlaneOperations/ContainerRegistryDataPlaneOperationBase.cs, Line: 27, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #295 Path: /Users/runner/work/1/s/src/ContainerRegistry/ContainerRegistry/DataPlaneOperations/ContainerRegistryRepositoryListOperation.cs, Line: 83, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #296 Path: /Users/runner/work/1/s/src/ContainerRegistry/ContainerRegistry/Models/ContainerRegistryDataPlaneClient.cs, Line: 89, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #297 Path: /Users/runner/work/1/s/src/ContainerRegistry/ContainerRegistry/Models/PSAcrManifest.cs, Line: 34, Message: https://www.jetbrains.com/help/resharper/MergeSequentialChecks.html
    #298 Path: /Users/runner/work/1/s/src/ContainerRegistry/ContainerRegistry/Models/PSTagList.cs, Line: 38, Message: https://www.jetbrains.com/help/resharper/MergeSequentialChecks.html



Project: Az.CostManagement
    #299 Path: /Users/runner/work/1/s/src/CostManagement/generated/runtime/Serialization/JsonSerializer.cs, Line: 315, Message: ReSharper: Type check and casts can be merged. See https://www.jetbrains.com/help/resharper/MergeCastWithTypeCheck.html / SonarQube: Duplicate casts should not be made. See https://rules.sonarsource.com/csharp/RSPEC-3247



Project: Az.CustomProviders
    #300 Path: /Users/runner/work/1/s/src/CustomProviders/generated/runtime/Serialization/JsonSerializer.cs, Line: 315, Message: ReSharper: Type check and casts can be merged. See https://www.jetbrains.com/help/resharper/MergeCastWithTypeCheck.html / SonarQube: Duplicate casts should not be made. See https://rules.sonarsource.com/csharp/RSPEC-3247



Project: DataBoxEdge
    #301 Path: /Users/runner/work/1/s/src/DataBoxEdge/DataBoxEdge/Common/Cmdlets/Bandwidth/DataBoxEdgeBandwidthScheduleNewCmdletBase.cs, Line: 151, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #302 Path: /Users/runner/work/1/s/src/DataBoxEdge/DataBoxEdge/Common/Cmdlets/Bandwidth/DataBoxEdgeBandwidthScheduleNewCmdletBase.cs, Line: 98, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #303 Path: /Users/runner/work/1/s/src/DataBoxEdge/DataBoxEdge/Common/Cmdlets/Bandwidth/DataBoxEdgeBandwidthScheduleRemoveCmdletBase.cs, Line: 106, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #304 Path: /Users/runner/work/1/s/src/DataBoxEdge/DataBoxEdge/Common/Cmdlets/Bandwidth/DataBoxEdgeBandwidthScheduleSetCmdletBase.cs, Line: 200, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #305 Path: /Users/runner/work/1/s/src/DataBoxEdge/DataBoxEdge/Common/Cmdlets/Devices/DataBoxEdgeDeviceNewCmdletBase.cs, Line: 117, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #306 Path: /Users/runner/work/1/s/src/DataBoxEdge/DataBoxEdge/Common/Cmdlets/Devices/DataBoxEdgeDeviceNewCmdletBase.cs, Line: 76, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #307 Path: /Users/runner/work/1/s/src/DataBoxEdge/DataBoxEdge/Common/Cmdlets/Devices/DataBoxEdgeDeviceRemoveCmdletBase.cs, Line: 94, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #308 Path: /Users/runner/work/1/s/src/DataBoxEdge/DataBoxEdge/Common/Cmdlets/EdgeStorageAccounts/DataBoxEdgeStorageAccountNewCmdlet.cs, Line: 132, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #309 Path: /Users/runner/work/1/s/src/DataBoxEdge/DataBoxEdge/Common/Cmdlets/EdgeStorageAccounts/DataBoxEdgeStorageAccountNewCmdlet.cs, Line: 84, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #310 Path: /Users/runner/work/1/s/src/DataBoxEdge/DataBoxEdge/Common/Cmdlets/EdgeStorageAccounts/DataBoxEdgeStorageAccountRemoveCmdlet.cs, Line: 111, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #311 Path: /Users/runner/work/1/s/src/DataBoxEdge/DataBoxEdge/Common/Cmdlets/EdgeStorageContainers/DataBoxEdgeStorageContainerNewCmdlet.cs, Line: 135, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #312 Path: /Users/runner/work/1/s/src/DataBoxEdge/DataBoxEdge/Common/Cmdlets/EdgeStorageContainers/DataBoxEdgeStorageContainerNewCmdlet.cs, Line: 89, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #313 Path: /Users/runner/work/1/s/src/DataBoxEdge/DataBoxEdge/Common/Cmdlets/EdgeStorageContainers/DataBoxEdgeStorageContainerRemoveCmdlet.cs, Line: 120, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #314 Path: /Users/runner/work/1/s/src/DataBoxEdge/DataBoxEdge/Common/Cmdlets/Orders/DataBoxEdgeOrderNewCmdlet.cs, Line: 126, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #315 Path: /Users/runner/work/1/s/src/DataBoxEdge/DataBoxEdge/Common/Cmdlets/Orders/DataBoxEdgeOrderNewCmdlet.cs, Line: 176, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #316 Path: /Users/runner/work/1/s/src/DataBoxEdge/DataBoxEdge/Common/Cmdlets/Orders/DataBoxEdgeOrderRemoveCmdlet.cs, Line: 100, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #317 Path: /Users/runner/work/1/s/src/DataBoxEdge/DataBoxEdge/Common/Cmdlets/Roles/DataBoxEdgeRoleNewCmdletBase.cs, Line: 156, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #318 Path: /Users/runner/work/1/s/src/DataBoxEdge/DataBoxEdge/Common/Cmdlets/Roles/DataBoxEdgeRoleNewCmdletBase.cs, Line: 182, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #319 Path: /Users/runner/work/1/s/src/DataBoxEdge/DataBoxEdge/Common/Cmdlets/Roles/DataBoxEdgeRoleNewCmdletBase.cs, Line: 314, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #320 Path: /Users/runner/work/1/s/src/DataBoxEdge/DataBoxEdge/Common/Cmdlets/Roles/DataBoxEdgeRoleNewCmdletBase.cs, Line: 322, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #321 Path: /Users/runner/work/1/s/src/DataBoxEdge/DataBoxEdge/Common/Cmdlets/Roles/DataBoxEdgeRoleRemoveCmdletBase.cs, Line: 100, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #322 Path: /Users/runner/work/1/s/src/DataBoxEdge/DataBoxEdge/Common/Cmdlets/Share/DataBoxEdgeShareInvokeCmdlet.cs, Line: 114, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #323 Path: /Users/runner/work/1/s/src/DataBoxEdge/DataBoxEdge/Common/Cmdlets/Share/DataBoxEdgeShareNewCmdletBase.cs, Line: 157, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #324 Path: /Users/runner/work/1/s/src/DataBoxEdge/DataBoxEdge/Common/Cmdlets/Share/DataBoxEdgeShareNewCmdletBase.cs, Line: 265, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #325 Path: /Users/runner/work/1/s/src/DataBoxEdge/DataBoxEdge/Common/Cmdlets/Share/DataBoxEdgeShareRemoveCmdletBase.cs, Line: 112, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #326 Path: /Users/runner/work/1/s/src/DataBoxEdge/DataBoxEdge/Common/Cmdlets/Share/DataBoxEdgeShareSetCmdletBase.cs, Line: 203, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #327 Path: /Users/runner/work/1/s/src/DataBoxEdge/DataBoxEdge/Common/Cmdlets/StorageAccountCredential/DataBoxEdgeStorageAccountCredentialNewCmdletBase.cs, Line: 163, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #328 Path: /Users/runner/work/1/s/src/DataBoxEdge/DataBoxEdge/Common/Cmdlets/StorageAccountCredential/DataBoxEdgeStorageAccountCredentialNewCmdletBase.cs, Line: 94, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #329 Path: /Users/runner/work/1/s/src/DataBoxEdge/DataBoxEdge/Common/Cmdlets/StorageAccountCredential/DataBoxEdgeStorageAccountCredentialRemoveCmdletBase.cs, Line: 109, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #330 Path: /Users/runner/work/1/s/src/DataBoxEdge/DataBoxEdge/Common/Cmdlets/Triggers/DataBoxEdgeTriggerNewCmdlet.cs, Line: 173, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #331 Path: /Users/runner/work/1/s/src/DataBoxEdge/DataBoxEdge/Common/Cmdlets/Triggers/DataBoxEdgeTriggerNewCmdlet.cs, Line: 234, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #332 Path: /Users/runner/work/1/s/src/DataBoxEdge/DataBoxEdge/Common/Cmdlets/Triggers/DataBoxEdgeTriggerRemoveCmdlet.cs, Line: 111, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #333 Path: /Users/runner/work/1/s/src/DataBoxEdge/DataBoxEdge/Common/Cmdlets/Users/DataBoxEdgeUserNewCmdletBase.cs, Line: 162, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #334 Path: /Users/runner/work/1/s/src/DataBoxEdge/DataBoxEdge/Common/Cmdlets/Users/DataBoxEdgeUserNewCmdletBase.cs, Line: 96, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #335 Path: /Users/runner/work/1/s/src/DataBoxEdge/DataBoxEdge/Common/Cmdlets/Users/DataBoxEdgeUserRemoveCmdletBase.cs, Line: 109, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #336 Path: /Users/runner/work/1/s/src/DataBoxEdge/DataBoxEdge/Common/Cmdlets/Users/DataBoxEdgeUserSetCmdletBase.cs, Line: 141, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html



Project: Az.Databricks
    #337 Path: /Users/runner/work/1/s/src/Databricks/generated/runtime/Serialization/JsonSerializer.cs, Line: 315, Message: ReSharper: Type check and casts can be merged. See https://www.jetbrains.com/help/resharper/MergeCastWithTypeCheck.html / SonarQube: Duplicate casts should not be made. See https://rules.sonarsource.com/csharp/RSPEC-3247



Project: DataFactories
    #338 Path: /Users/runner/work/1/s/src/DataFactory/DataFactories/DataFactoryBaseCmdlet.cs, Line: 56, Message: ReSharper: Type check and casts can be merged. See https://www.jetbrains.com/help/resharper/MergeCastWithTypeCheck.html / SonarQube: Duplicate casts should not be made. See https://rules.sonarsource.com/csharp/RSPEC-3247
    #339 Path: /Users/runner/work/1/s/src/DataFactory/DataFactories/DataFactoryBaseCmdlet.cs, Line: 6, Message: ReSharper: Type check and casts can be merged. See https://www.jetbrains.com/help/resharper/MergeCastWithTypeCheck.html / SonarQube: Duplicate casts should not be made. See https://rules.sonarsource.com/csharp/RSPEC-3247
    #340 Path: /Users/runner/work/1/s/src/DataFactory/DataFactories/Models/DataFactoryClient.DataFactories.cs, Line: 52, Message: https://www.jetbrains.com/help/resharper/MergeSequentialChecks.html
    #341 Path: /Users/runner/work/1/s/src/DataFactory/DataFactories/Models/DataFactoryClient.Datasets.cs, Line: 73, Message: https://www.jetbrains.com/help/resharper/MergeSequentialChecks.html
    #342 Path: /Users/runner/work/1/s/src/DataFactory/DataFactories/Models/DataFactoryClient.DataSlices.cs, Line: 53, Message: https://www.jetbrains.com/help/resharper/MergeSequentialChecks.html
    #343 Path: /Users/runner/work/1/s/src/DataFactory/DataFactories/Models/DataFactoryClient.DataSlices.cs, Line: 93, Message: https://www.jetbrains.com/help/resharper/MergeSequentialChecks.html
    #344 Path: /Users/runner/work/1/s/src/DataFactory/DataFactories/Models/DataFactoryClient.Hubs.cs, Line: 133, Message: https://www.jetbrains.com/help/resharper/MergeSequentialChecks.html
    #345 Path: /Users/runner/work/1/s/src/DataFactory/DataFactories/Models/DataFactoryClient.LinkedServices.cs, Line: 76, Message: https://www.jetbrains.com/help/resharper/MergeSequentialChecks.html
    #346 Path: /Users/runner/work/1/s/src/DataFactory/DataFactories/Models/DataFactoryClient.Pipelines.cs, Line: 85, Message: https://www.jetbrains.com/help/resharper/MergeSequentialChecks.html



Project: DataFactoryV2
    #347 Path: /Users/runner/work/1/s/src/DataFactory/DataFactoryV2/DataFactories/SetAzureDataFactoryCommand.cs, Line: 494, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #348 Path: /Users/runner/work/1/s/src/DataFactory/DataFactoryV2/DataFactories/SetAzureDataFactoryCommand.cs, Line: 502, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #349 Path: /Users/runner/work/1/s/src/DataFactory/DataFactoryV2/DataFactoryBaseCmdlet.cs, Line: 46, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #350 Path: /Users/runner/work/1/s/src/DataFactory/DataFactoryV2/DataFactoryBaseCmdlet.cs, Line: 60, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #351 Path: /Users/runner/work/1/s/src/DataFactory/DataFactoryV2/DataFactoryBaseCmdlet.cs, Line: 73, Message: https://www.jetbrains.com/help/resharper/MergeSequentialChecks.html
    #352 Path: /Users/runner/work/1/s/src/DataFactory/DataFactoryV2/IntegrationRuntimes/GetAzureDataFactoryIntegrationRuntimeNodeCommand.cs, Line: 46, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #353 Path: /Users/runner/work/1/s/src/DataFactory/DataFactoryV2/IntegrationRuntimes/GetAzureDataFactoryIntegrationRuntimeNodeCommand.cs, Line: 75, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #354 Path: /Users/runner/work/1/s/src/DataFactory/DataFactoryV2/IntegrationRuntimes/SetAzureDataFactoryIntegrationRuntimeCommand.cs, Line: 581, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #355 Path: /Users/runner/work/1/s/src/DataFactory/DataFactoryV2/IntegrationRuntimes/SetAzureDataFactoryIntegrationRuntimeCommand.cs, Line: 601, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #356 Path: /Users/runner/work/1/s/src/DataFactory/DataFactoryV2/Models/DataFactoryClient.LinkedServices.cs, Line: 46, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #357 Path: /Users/runner/work/1/s/src/DataFactory/DataFactoryV2/Models/DataFactoryClient.Pipelines.cs, Line: 46, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #358 Path: /Users/runner/work/1/s/src/DataFactory/DataFactoryV2/Models/DataFactoryClient.Trigger.cs, Line: 149, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html



Project: DataLakeAnalytics
    #359 Path: /Users/runner/work/1/s/src/DataLakeAnalytics/DataLakeAnalytics/Commands/GetAzureRmDataLakeAnalyticsJob.cs, Line: 144, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #360 Path: /Users/runner/work/1/s/src/DataLakeAnalytics/DataLakeAnalytics/Commands/GetAzureRmDataLakeAnalyticsJob.cs, Line: 151, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #361 Path: /Users/runner/work/1/s/src/DataLakeAnalytics/DataLakeAnalytics/Commands/GetAzureRmDataLakeAnalyticsJob.cs, Line: 158, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #362 Path: /Users/runner/work/1/s/src/DataLakeAnalytics/DataLakeAnalytics/Commands/GetAzureRmDataLakeAnalyticsJob.cs, Line: 164, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #363 Path: /Users/runner/work/1/s/src/DataLakeAnalytics/DataLakeAnalytics/Commands/GetAzureRmDataLakeAnalyticsJob.cs, Line: 171, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #364 Path: /Users/runner/work/1/s/src/DataLakeAnalytics/DataLakeAnalytics/Commands/GetAzureRmDataLakeAnalyticsJob.cs, Line: 178, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #365 Path: /Users/runner/work/1/s/src/DataLakeAnalytics/DataLakeAnalytics/Commands/GetAzureRmDataLakeAnalyticsJob.cs, Line: 183, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #366 Path: /Users/runner/work/1/s/src/DataLakeAnalytics/DataLakeAnalytics/Commands/GetAzureRmDataLakeAnalyticsJob.cs, Line: 188, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #367 Path: /Users/runner/work/1/s/src/DataLakeAnalytics/DataLakeAnalytics/Commands/NewAzureRmDataLakeAnalyticsCatalogCredential.cs, Line: 78, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #368 Path: /Users/runner/work/1/s/src/DataLakeAnalytics/DataLakeAnalytics/Commands/SetAzureRmDataLakeAnalyticsCatalogCredential.cs, Line: 86, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #369 Path: /Users/runner/work/1/s/src/DataLakeAnalytics/DataLakeAnalytics/Commands/SubmitAzureRmDataLakeAnalyticsJob.cs, Line: 419, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #370 Path: /Users/runner/work/1/s/src/DataLakeAnalytics/DataLakeAnalytics/Commands/SubmitAzureRmDataLakeAnalyticsJob.cs, Line: 425, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #371 Path: /Users/runner/work/1/s/src/DataLakeAnalytics/DataLakeAnalytics/Commands/SubmitAzureRmDataLakeAnalyticsJob.cs, Line: 431, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #372 Path: /Users/runner/work/1/s/src/DataLakeAnalytics/DataLakeAnalytics/Commands/SubmitAzureRmDataLakeAnalyticsJob.cs, Line: 437, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #373 Path: /Users/runner/work/1/s/src/DataLakeAnalytics/DataLakeAnalytics/Commands/SubmitAzureRmDataLakeAnalyticsJob.cs, Line: 443, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #374 Path: /Users/runner/work/1/s/src/DataLakeAnalytics/DataLakeAnalytics/Commands/SubmitAzureRmDataLakeAnalyticsJob.cs, Line: 449, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #375 Path: /Users/runner/work/1/s/src/DataLakeAnalytics/DataLakeAnalytics/Commands/SubmitAzureRmDataLakeAnalyticsJob.cs, Line: 455, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #376 Path: /Users/runner/work/1/s/src/DataLakeAnalytics/DataLakeAnalytics/Commands/SubmitAzureRmDataLakeAnalyticsJob.cs, Line: 461, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #377 Path: /Users/runner/work/1/s/src/DataLakeAnalytics/DataLakeAnalytics/Commands/SubmitAzureRmDataLakeAnalyticsJob.cs, Line: 467, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #378 Path: /Users/runner/work/1/s/src/DataLakeAnalytics/DataLakeAnalytics/Commands/SubmitAzureRmDataLakeAnalyticsJob.cs, Line: 473, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #379 Path: /Users/runner/work/1/s/src/DataLakeAnalytics/DataLakeAnalytics/Commands/SubmitAzureRmDataLakeAnalyticsJob.cs, Line: 479, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #380 Path: /Users/runner/work/1/s/src/DataLakeAnalytics/DataLakeAnalytics/Commands/SubmitAzureRmDataLakeAnalyticsJob.cs, Line: 485, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #381 Path: /Users/runner/work/1/s/src/DataLakeAnalytics/DataLakeAnalytics/Commands/SubmitAzureRmDataLakeAnalyticsJob.cs, Line: 491, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #382 Path: /Users/runner/work/1/s/src/DataLakeAnalytics/DataLakeAnalytics/Commands/SubmitAzureRmDataLakeAnalyticsJob.cs, Line: 499, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #383 Path: /Users/runner/work/1/s/src/DataLakeAnalytics/DataLakeAnalytics/Commands/SubmitAzureRmDataLakeAnalyticsJob.cs, Line: 513, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #384 Path: /Users/runner/work/1/s/src/DataLakeAnalytics/DataLakeAnalytics/Commands/SubmitAzureRmDataLakeAnalyticsJob.cs, Line: 517, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #385 Path: /Users/runner/work/1/s/src/DataLakeAnalytics/DataLakeAnalytics/Commands/SubmitAzureRmDataLakeAnalyticsJob.cs, Line: 522, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #386 Path: /Users/runner/work/1/s/src/DataLakeAnalytics/DataLakeAnalytics/Commands/SubmitAzureRmDataLakeAnalyticsJob.cs, Line: 535, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #387 Path: /Users/runner/work/1/s/src/DataLakeAnalytics/DataLakeAnalytics/Models/DataLakeAnalyticsClient.cs, Line: 1482, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #388 Path: /Users/runner/work/1/s/src/DataLakeAnalytics/DataLakeAnalytics/Models/DataLakeAnalyticsClient.cs, Line: 1494, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #389 Path: /Users/runner/work/1/s/src/DataLakeAnalytics/DataLakeAnalytics/Models/DataLakeAnalyticsClient.cs, Line: 1500, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html



Project: DataLakeStore
    #390 Path: /Users/runner/work/1/s/src/DataLakeStore/DataLakeStore/DataPlaneCommands/RestoreAzureRmDataLakeStoreDeletedItem.cs, Line: 105, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #391 Path: /Users/runner/work/1/s/src/DataLakeStore/DataLakeStore/DataPlaneCommands/RestoreAzureRmDataLakeStoreDeletedItem.cs, Line: 112, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #392 Path: /Users/runner/work/1/s/src/DataLakeStore/DataLakeStore/DataPlaneModels/DataLakeStoreFileSystemClient.cs, Line: 671, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #393 Path: /Users/runner/work/1/s/src/DataLakeStore/DataLakeStore/DataPlaneModels/DataLakeStoreFileSystemCmdletBase.cs, Line: 100, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #394 Path: /Users/runner/work/1/s/src/DataLakeStore/DataLakeStore/DataPlaneModels/DataLakeStoreItemAce.cs, Line: 158, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #395 Path: /Users/runner/work/1/s/src/DataLakeStore/DataLakeStore/DataPlaneModels/EncodingUtils.cs, Line: 30, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #396 Path: /Users/runner/work/1/s/src/DataLakeStore/DataLakeStore/Models/DataLakeStoreTraceLogger.cs, Line: 169, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #397 Path: /Users/runner/work/1/s/src/DataLakeStore/DataLakeStore/Models/DataLakeStoreTracingInterceptor.cs, Line: 103, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #398 Path: /Users/runner/work/1/s/src/DataLakeStore/DataLakeStore/Models/DataLakeStoreTracingInterceptor.cs, Line: 47, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #399 Path: /Users/runner/work/1/s/src/DataLakeStore/DataLakeStore/Models/DataLakeStoreTracingInterceptor.cs, Line: 91, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html



Project: DataMigration
    #400 Path: /Users/runner/work/1/s/src/DataMigration/DataMigration/Cmdlets/GetDataMigrationTask.cs, Line: 196, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #401 Path: /Users/runner/work/1/s/src/DataMigration/DataMigration/Common/PagingExtensions.cs, Line: 111, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #402 Path: /Users/runner/work/1/s/src/DataMigration/DataMigration/Models/DatabaseInfo/MongoDbConnectionInfo.cs, Line: 53, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #403 Path: /Users/runner/work/1/s/src/DataMigration/DataMigration/Models/DatabaseInfo/MongoDbConnectionInfo.cs, Line: 54, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #404 Path: /Users/runner/work/1/s/src/DataMigration/DataMigration/Models/DatabaseInfo/MongoDbConnectionInfo.cs, Line: 55, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html



Project: Az.DedicatedHsm
    #405 Path: /Users/runner/work/1/s/src/DedicatedHsm/generated/runtime/Serialization/JsonSerializer.cs, Line: 315, Message: ReSharper: Type check and casts can be merged. See https://www.jetbrains.com/help/resharper/MergeCastWithTypeCheck.html / SonarQube: Duplicate casts should not be made. See https://rules.sonarsource.com/csharp/RSPEC-3247



Project: DeploymentManager
    #406 Path: /Users/runner/work/1/s/src/DeploymentManager/DeploymentManager/Commands/RolloutCmdletBase.cs, Line: 164, Message: https://www.jetbrains.com/help/resharper/MergeSequentialChecks.html
    #407 Path: /Users/runner/work/1/s/src/DeploymentManager/DeploymentManager/Commands/RolloutCmdletBase.cs, Line: 323, Message: https://www.jetbrains.com/help/resharper/MergeSequentialChecks.html
    #408 Path: /Users/runner/work/1/s/src/DeploymentManager/DeploymentManager/Commands/RolloutCmdletBase.cs, Line: 77, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #409 Path: /Users/runner/work/1/s/src/DeploymentManager/DeploymentManager/Commands/RolloutCmdletBase.cs, Line: 84, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html



Project: Az.DesktopVirtualization
    #410 Path: /Users/runner/work/1/s/src/DesktopVirtualization/generated/runtime/Serialization/JsonSerializer.cs, Line: 315, Message: ReSharper: Type check and casts can be merged. See https://www.jetbrains.com/help/resharper/MergeCastWithTypeCheck.html / SonarQube: Duplicate casts should not be made. See https://rules.sonarsource.com/csharp/RSPEC-3247



Project: DeviceProvisioningServices
    #411 Path: /Users/runner/work/1/s/src/DeviceProvisioningServices/DeviceProvisioningServices/Common/IotDpsUtils.cs, Line: 212, Message: ReSharper: ReplaceWithSingleCallToFirstOrDefault. / SonarQube "IEnumerable" LINQs should be simplified. See https://rules.sonarsource.com/csharp/RSPEC-2971
    #412 Path: /Users/runner/work/1/s/src/DeviceProvisioningServices/DeviceProvisioningServices/Common/IotDpsUtils.cs, Line: 214, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html



Project: Az.DigitalTwins
    #413 Path: /Users/runner/work/1/s/src/DigitalTwins/generated/runtime/Serialization/JsonSerializer.cs, Line: 315, Message: ReSharper: Type check and casts can be merged. See https://www.jetbrains.com/help/resharper/MergeCastWithTypeCheck.html / SonarQube: Duplicate casts should not be made. See https://rules.sonarsource.com/csharp/RSPEC-3247



Project: Dns
    #414 Path: /Users/runner/work/1/s/src/Dns/Dns/Models/DnsClient.cs, Line: 131, Message: https://www.jetbrains.com/help/resharper/MergeSequentialChecks.html
    #415 Path: /Users/runner/work/1/s/src/Dns/Dns/Models/DnsClient.cs, Line: 141, Message: https://www.jetbrains.com/help/resharper/MergeSequentialChecks.html
    #416 Path: /Users/runner/work/1/s/src/Dns/Dns/Models/DnsClient.cs, Line: 152, Message: https://www.jetbrains.com/help/resharper/MergeSequentialChecks.html
    #417 Path: /Users/runner/work/1/s/src/Dns/Dns/Models/DnsClient.cs, Line: 162, Message: https://www.jetbrains.com/help/resharper/MergeSequentialChecks.html
    #418 Path: /Users/runner/work/1/s/src/Dns/Dns/Models/DnsClient.cs, Line: 370, Message: https://www.jetbrains.com/help/resharper/MergeSequentialChecks.html
    #419 Path: /Users/runner/work/1/s/src/Dns/Dns/Models/DnsClient.cs, Line: 384, Message: https://www.jetbrains.com/help/resharper/MergeSequentialChecks.html
    #420 Path: /Users/runner/work/1/s/src/Dns/Dns/Models/DnsClient.cs, Line: 396, Message: https://www.jetbrains.com/help/resharper/MergeSequentialChecks.html
    #421 Path: /Users/runner/work/1/s/src/Dns/Dns/Models/DnsClient.cs, Line: 408, Message: https://www.jetbrains.com/help/resharper/MergeSequentialChecks.html
    #422 Path: /Users/runner/work/1/s/src/Dns/Dns/Models/DnsClient.cs, Line: 534, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #423 Path: /Users/runner/work/1/s/src/Dns/Dns/Models/DnsRecordSet.cs, Line: 452, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #424 Path: /Users/runner/work/1/s/src/Dns/Dns/Models/DnsRecordSet.cs, Line: 501, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #425 Path: /Users/runner/work/1/s/src/Dns/Dns/Models/DnsRecordSet.cs, Line: 573, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #426 Path: /Users/runner/work/1/s/src/Dns/Dns/Records/GetAzureDnsRecordSet.cs, Line: 72, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #427 Path: /Users/runner/work/1/s/src/Dns/Dns/Records/NewAzureDnsRecordSet.cs, Line: 117, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #428 Path: /Users/runner/work/1/s/src/Dns/Dns/Records/RemoveAzureDnsRecordSet.cs, Line: 115, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #429 Path: /Users/runner/work/1/s/src/Dns/Dns/Records/RemoveAzureDnsRecordSet.cs, Line: 73, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #430 Path: /Users/runner/work/1/s/src/Dns/Dns/Records/RemoveAzureDnsRecordSet.cs, Line: 90, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #431 Path: /Users/runner/work/1/s/src/Dns/Dns/Records/SetAzureDnsRecordSet.cs, Line: 45, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #432 Path: /Users/runner/work/1/s/src/Dns/Dns/Zones/GetAzureDnsZone.cs, Line: 45, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #433 Path: /Users/runner/work/1/s/src/Dns/Dns/Zones/NewAzureDnsZone.cs, Line: 89, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #434 Path: /Users/runner/work/1/s/src/Dns/Dns/Zones/RemoveAzureDnsZone.cs, Line: 58, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #435 Path: /Users/runner/work/1/s/src/Dns/Dns/Zones/RemoveAzureDnsZone.cs, Line: 76, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #436 Path: /Users/runner/work/1/s/src/Dns/Dns/Zones/SetAzureDnsZone.cs, Line: 133, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #437 Path: /Users/runner/work/1/s/src/Dns/Dns/Zones/SetAzureDnsZone.cs, Line: 86, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html



Project: EventGrid
    #438 Path: /Users/runner/work/1/s/src/EventGrid/EventGrid/EventSubscription/UpdateAzureEventGridSubscription.cs, Line: 678, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #439 Path: /Users/runner/work/1/s/src/EventGrid/EventGrid/Utilities/EventGridClient.cs, Line: 595, Message: ReSharper: Use '.Any()' to test whether this IEnumerable is empty or not. See ReSharper/UseMethodAny.0.html / SonarQube: "Any()" should be used to test for emptiness. See https://rules.sonarsource.com/csharp/RSPEC-1155
    #440 Path: /Users/runner/work/1/s/src/EventGrid/EventGrid/Utilities/EventGridClient.cs, Line: 734, Message: ReSharper: Use '.Any()' to test whether this IEnumerable is empty or not. See ReSharper/UseMethodAny.0.html / SonarQube: "Any()" should be used to test for emptiness. See https://rules.sonarsource.com/csharp/RSPEC-1155



Project: EventHub
    #441 Path: /Users/runner/work/1/s/src/EventHub/EventHub/Cmdlets/Clusters/NewAzureEventHubCluster.cs, Line: 87, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #442 Path: /Users/runner/work/1/s/src/EventHub/EventHub/Cmdlets/Clusters/RemoveAzureEventHubCluster.cs, Line: 67, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #443 Path: /Users/runner/work/1/s/src/EventHub/EventHub/Cmdlets/Clusters/SetAzureEventHubCluster.cs, Line: 99, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #444 Path: /Users/runner/work/1/s/src/EventHub/EventHub/Cmdlets/NetworkRuleSet/AddAzureEventHubIPRule.cs, Line: 59, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #445 Path: /Users/runner/work/1/s/src/EventHub/EventHub/Cmdlets/NetworkRuleSet/AddAzureEventHubVirtualNetworkrule.cs, Line: 57, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #446 Path: /Users/runner/work/1/s/src/EventHub/EventHub/Cmdlets/NetworkRuleSet/RemoveAzureEventHubIPRule.cs, Line: 80, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #447 Path: /Users/runner/work/1/s/src/EventHub/EventHub/Cmdlets/NetworkRuleSet/RemoveAzureEventHubNetworkRuleSet.cs, Line: 68, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #448 Path: /Users/runner/work/1/s/src/EventHub/EventHub/Cmdlets/NetworkRuleSet/RemoveAzureEventHubVirtualNetworkrule.cs, Line: 81, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #449 Path: /Users/runner/work/1/s/src/EventHub/EventHub/Cmdlets/NetworkRuleSet/SetAzureEventHubNetworkrule.cs, Line: 73, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #450 Path: /Users/runner/work/1/s/src/EventHub/EventHub/Utilities/EventHubsClient.cs, Line: 265, Message: ReSharper: Use '.Any()' to test whether this IEnumerable is empty or not. See ReSharper/UseMethodAny.0.html / SonarQube: "Any()" should be used to test for emptiness. See https://rules.sonarsource.com/csharp/RSPEC-1155



Project: FrontDoor
    #451 Path: /Users/runner/work/1/s/src/FrontDoor/FrontDoor/Cmdlets/NewFrontDoor.cs, Line: 108, Message: ReSharper: Use '.Any()' to test whether this IEnumerable is empty or not. See ReSharper/UseMethodAny.0.html / SonarQube: "Any()" should be used to test for emptiness. See https://rules.sonarsource.com/csharp/RSPEC-1155
    #452 Path: /Users/runner/work/1/s/src/FrontDoor/FrontDoor/Cmdlets/NewFrontDoorBackendPoolObject.cs, Line: 73, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #453 Path: /Users/runner/work/1/s/src/FrontDoor/FrontDoor/Cmdlets/NewFrontDoorBackendPoolObject.cs, Line: 75, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #454 Path: /Users/runner/work/1/s/src/FrontDoor/FrontDoor/Cmdlets/NewFrontDoorRoutingRuleObject.cs, Line: 160, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #455 Path: /Users/runner/work/1/s/src/FrontDoor/FrontDoor/Cmdlets/NewFrontDoorRoutingRuleObject.cs, Line: 162, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #456 Path: /Users/runner/work/1/s/src/FrontDoor/FrontDoor/Cmdlets/NewFrontDoorRoutingRuleObject.cs, Line: 164, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #457 Path: /Users/runner/work/1/s/src/FrontDoor/FrontDoor/Cmdlets/NewFrontDoorRulesEngineActionObject.cs, Line: 94, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #458 Path: /Users/runner/work/1/s/src/FrontDoor/FrontDoor/Cmdlets/NewFrontDoorWafPolicy.cs, Line: 106, Message: ReSharper: Use '.Any()' to test whether this IEnumerable is empty or not. See ReSharper/UseMethodAny.0.html / SonarQube: "Any()" should be used to test for emptiness. See https://rules.sonarsource.com/csharp/RSPEC-1155
    #459 Path: /Users/runner/work/1/s/src/FrontDoor/FrontDoor/Helpers/ModelExtensions.cs, Line: 736, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #460 Path: /Users/runner/work/1/s/src/FrontDoor/FrontDoor/Helpers/ModelExtensions.cs, Line: 740, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #461 Path: /Users/runner/work/1/s/src/FrontDoor/FrontDoor/Helpers/ModelExtensions.cs, Line: 751, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #462 Path: /Users/runner/work/1/s/src/FrontDoor/FrontDoor/Helpers/ModelExtensions.cs, Line: 755, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #463 Path: /Users/runner/work/1/s/src/FrontDoor/FrontDoor/Helpers/ModelExtensions.cs, Line: 766, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #464 Path: /Users/runner/work/1/s/src/FrontDoor/FrontDoor/Helpers/ModelExtensions.cs, Line: 770, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #465 Path: /Users/runner/work/1/s/src/FrontDoor/FrontDoor/Helpers/ModelExtensions.cs, Line: 781, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #466 Path: /Users/runner/work/1/s/src/FrontDoor/FrontDoor/Helpers/ModelExtensions.cs, Line: 785, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #467 Path: /Users/runner/work/1/s/src/FrontDoor/FrontDoor/Helpers/ModelExtensions.cs, Line: 796, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #468 Path: /Users/runner/work/1/s/src/FrontDoor/FrontDoor/Helpers/ModelExtensions.cs, Line: 800, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #469 Path: /Users/runner/work/1/s/src/FrontDoor/FrontDoor/Helpers/ModelExtensions.cs, Line: 816, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #470 Path: /Users/runner/work/1/s/src/FrontDoor/FrontDoor/Helpers/ModelExtensions.cs, Line: 828, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #471 Path: /Users/runner/work/1/s/src/FrontDoor/FrontDoor/Helpers/ModelExtensions.cs, Line: 840, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #472 Path: /Users/runner/work/1/s/src/FrontDoor/FrontDoor/Helpers/ModelExtensions.cs, Line: 848, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html



Project: Az.Functions
    #473 Path: /Users/runner/work/1/s/src/Functions/generated/runtime/Serialization/JsonSerializer.cs, Line: 315, Message: ReSharper: Type check and casts can be merged. See https://www.jetbrains.com/help/resharper/MergeCastWithTypeCheck.html / SonarQube: Duplicate casts should not be made. See https://rules.sonarsource.com/csharp/RSPEC-3247



Project: GuestConfiguration
    #474 Path: /Users/runner/work/1/s/src/GuestConfiguration/GuestConfiguration/Cmdlets/GetAzVMGuestPolicyStatus.cs, Line: 101, Message: ReSharper: Use '.Any()' to test whether this IEnumerable is empty or not. See ReSharper/UseMethodAny.0.html / SonarQube: "Any()" should be used to test for emptiness. See https://rules.sonarsource.com/csharp/RSPEC-1155
    #475 Path: /Users/runner/work/1/s/src/GuestConfiguration/GuestConfiguration/Cmdlets/GetAzVMGuestPolicyStatus.cs, Line: 70, Message: ReSharper: Use '.Any()' to test whether this IEnumerable is empty or not. See ReSharper/UseMethodAny.0.html / SonarQube: "Any()" should be used to test for emptiness. See https://rules.sonarsource.com/csharp/RSPEC-1155
    #476 Path: /Users/runner/work/1/s/src/GuestConfiguration/GuestConfiguration/Cmdlets/GetAzVMGuestPolicyStatus.cs, Line: 82, Message: ReSharper: Use '.Any()' to test whether this IEnumerable is empty or not. See ReSharper/UseMethodAny.0.html / SonarQube: "Any()" should be used to test for emptiness. See https://rules.sonarsource.com/csharp/RSPEC-1155
    #477 Path: /Users/runner/work/1/s/src/GuestConfiguration/GuestConfiguration/Cmdlets/GetAzVMGuestPolicyStatusHistory.cs, Line: 69, Message: ReSharper: Use '.Any()' to test whether this IEnumerable is empty or not. See ReSharper/UseMethodAny.0.html / SonarQube: "Any()" should be used to test for emptiness. See https://rules.sonarsource.com/csharp/RSPEC-1155
    #478 Path: /Users/runner/work/1/s/src/GuestConfiguration/GuestConfiguration/Cmdlets/GetAzVMGuestPolicyStatusHistory.cs, Line: 85, Message: ReSharper: Use '.Any()' to test whether this IEnumerable is empty or not. See ReSharper/UseMethodAny.0.html / SonarQube: "Any()" should be used to test for emptiness. See https://rules.sonarsource.com/csharp/RSPEC-1155
    #479 Path: /Users/runner/work/1/s/src/GuestConfiguration/GuestConfiguration/Common/GuestConfigurationCmdletBase.cs, Line: 109, Message: ReSharper: Use '.Any()' to test whether this IEnumerable is empty or not. See ReSharper/UseMethodAny.0.html / SonarQube: "Any()" should be used to test for emptiness. See https://rules.sonarsource.com/csharp/RSPEC-1155
    #480 Path: /Users/runner/work/1/s/src/GuestConfiguration/GuestConfiguration/Common/GuestConfigurationCmdletBase.cs, Line: 117, Message: ReSharper: Use '.Any()' to test whether this IEnumerable is empty or not. See ReSharper/UseMethodAny.0.html / SonarQube: "Any()" should be used to test for emptiness. See https://rules.sonarsource.com/csharp/RSPEC-1155
    #481 Path: /Users/runner/work/1/s/src/GuestConfiguration/GuestConfiguration/Common/GuestConfigurationCmdletBase.cs, Line: 186, Message: ReSharper: Use '.Any()' to test whether this IEnumerable is empty or not. See ReSharper/UseMethodAny.0.html / SonarQube: "Any()" should be used to test for emptiness. See https://rules.sonarsource.com/csharp/RSPEC-1155
    #482 Path: /Users/runner/work/1/s/src/GuestConfiguration/GuestConfiguration/Common/GuestConfigurationCmdletBase.cs, Line: 231, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #483 Path: /Users/runner/work/1/s/src/GuestConfiguration/GuestConfiguration/Common/GuestConfigurationCmdletBase.cs, Line: 357, Message: https://www.jetbrains.com/help/resharper/MergeSequentialChecks.html
    #484 Path: /Users/runner/work/1/s/src/GuestConfiguration/GuestConfiguration/Common/GuestConfigurationCmdletBase.cs, Line: 372, Message: ReSharper: Use '.Any()' to test whether this IEnumerable is empty or not. See ReSharper/UseMethodAny.0.html / SonarQube: "Any()" should be used to test for emptiness. See https://rules.sonarsource.com/csharp/RSPEC-1155
    #485 Path: /Users/runner/work/1/s/src/GuestConfiguration/GuestConfiguration/Common/GuestConfigurationCmdletBase.cs, Line: 476, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #486 Path: /Users/runner/work/1/s/src/GuestConfiguration/GuestConfiguration/Common/GuestConfigurationCmdletBase.cs, Line: 477, Message: ReSharper: Use '.Any()' to test whether this IEnumerable is empty or not. See ReSharper/UseMethodAny.0.html / SonarQube: "Any()" should be used to test for emptiness. See https://rules.sonarsource.com/csharp/RSPEC-1155
    #487 Path: /Users/runner/work/1/s/src/GuestConfiguration/GuestConfiguration/Models/PolicyStatus.cs, Line: 38, Message: https://www.jetbrains.com/help/resharper/MergeSequentialChecks.html
    #488 Path: /Users/runner/work/1/s/src/GuestConfiguration/GuestConfiguration/Models/PolicyStatusDetailed.cs, Line: 33, Message: https://www.jetbrains.com/help/resharper/MergeSequentialChecks.html



Project: Az.HanaOnAzure
    #489 Path: /Users/runner/work/1/s/src/HanaOnAzure/generated/runtime/Serialization/JsonSerializer.cs, Line: 315, Message: ReSharper: Type check and casts can be merged. See https://www.jetbrains.com/help/resharper/MergeCastWithTypeCheck.html / SonarQube: Duplicate casts should not be made. See https://rules.sonarsource.com/csharp/RSPEC-3247



Project: HDInsight
    #490 Path: /Users/runner/work/1/s/src/HDInsight/HDInsight/ClusterCreateHelper.cs, Line: 214, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #491 Path: /Users/runner/work/1/s/src/HDInsight/HDInsight/ClusterCreateHelper.cs, Line: 54, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #492 Path: /Users/runner/work/1/s/src/HDInsight/HDInsight/ClusterCreateHelper.cs, Line: 90, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #493 Path: /Users/runner/work/1/s/src/HDInsight/HDInsight/HDInsightCmdletBase.cs, Line: 109, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #494 Path: /Users/runner/work/1/s/src/HDInsight/HDInsight/HDInsightCmdletBase.cs, Line: 124, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #495 Path: /Users/runner/work/1/s/src/HDInsight/HDInsight/HDInsightCmdletBase.cs, Line: 63, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #496 Path: /Users/runner/work/1/s/src/HDInsight/HDInsight/HDInsightCmdletBase.cs, Line: 73, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #497 Path: /Users/runner/work/1/s/src/HDInsight/HDInsight/HDInsightCmdletBase.cs, Line: 81, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #498 Path: /Users/runner/work/1/s/src/HDInsight/HDInsight/HDInsightCmdletBase.cs, Line: 99, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #499 Path: /Users/runner/work/1/s/src/HDInsight/HDInsight/JobCommands/GetAzureHDInsightJobOutputCommand.cs, Line: 179, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #500 Path: /Users/runner/work/1/s/src/HDInsight/HDInsight/JobCommands/InvokeHiveCommand.cs, Line: 140, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #501 Path: /Users/runner/work/1/s/src/HDInsight/HDInsight/JobCommands/StartAzureHDInsightJobCommand.cs, Line: 106, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #502 Path: /Users/runner/work/1/s/src/HDInsight/HDInsight/JobCommands/StartAzureHDInsightJobCommand.cs, Line: 110, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #503 Path: /Users/runner/work/1/s/src/HDInsight/HDInsight/JobCommands/StartAzureHDInsightJobCommand.cs, Line: 114, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #504 Path: /Users/runner/work/1/s/src/HDInsight/HDInsight/JobCommands/StartAzureHDInsightJobCommand.cs, Line: 118, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #505 Path: /Users/runner/work/1/s/src/HDInsight/HDInsight/JobCommands/StartAzureHDInsightJobCommand.cs, Line: 122, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #506 Path: /Users/runner/work/1/s/src/HDInsight/HDInsight/JobCommands/UseAzureHDInsightClusterCommand.cs, Line: 80, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html



Project: Az.HealthBot
    #507 Path: /Users/runner/work/1/s/src/HealthBot/generated/runtime/Serialization/JsonSerializer.cs, Line: 315, Message: ReSharper: Type check and casts can be merged. See https://www.jetbrains.com/help/resharper/MergeCastWithTypeCheck.html / SonarQube: Duplicate casts should not be made. See https://rules.sonarsource.com/csharp/RSPEC-3247



Project: HPCCache
    #508 Path: /Users/runner/work/1/s/src/HPCCache/HPCCache/Commands/GetAzHpcCache.cs, Line: 61, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #509 Path: /Users/runner/work/1/s/src/HPCCache/HPCCache/Commands/GetAzHpcCacheStorageTarget.cs, Line: 98, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #510 Path: /Users/runner/work/1/s/src/HPCCache/HPCCache/Commands/NewAzHpcCache.cs, Line: 120, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #511 Path: /Users/runner/work/1/s/src/HPCCache/HPCCache/Commands/NewAzHpcCache.cs, Line: 97, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #512 Path: /Users/runner/work/1/s/src/HPCCache/HPCCache/Commands/RemoveAzHpcCache.cs, Line: 88, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #513 Path: /Users/runner/work/1/s/src/HPCCache/HPCCache/Commands/RemoveAzHpcCacheStorageTarget.cs, Line: 95, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #514 Path: /Users/runner/work/1/s/src/HPCCache/HPCCache/Commands/SetAzHpcCache.cs, Line: 111, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #515 Path: /Users/runner/work/1/s/src/HPCCache/HPCCache/Commands/SetAzHpcStorageTarget.cs, Line: 133, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #516 Path: /Users/runner/work/1/s/src/HPCCache/HPCCache/Commands/StartAzHpcCache.cs, Line: 134, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #517 Path: /Users/runner/work/1/s/src/HPCCache/HPCCache/Commands/StopAzHpcCache.cs, Line: 129, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #518 Path: /Users/runner/work/1/s/src/HPCCache/HPCCache/Commands/UpdateAzHpcCache.cs, Line: 163, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #519 Path: /Users/runner/work/1/s/src/HPCCache/HPCCache/Commands/UpdateAzHpcCache.cs, Line: 193, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html



Project: Az.ImageBuilder
    #520 Path: /Users/runner/work/1/s/src/ImageBuilder/generated/runtime/Serialization/JsonSerializer.cs, Line: 315, Message: ReSharper: Type check and casts can be merged. See https://www.jetbrains.com/help/resharper/MergeCastWithTypeCheck.html / SonarQube: Duplicate casts should not be made. See https://rules.sonarsource.com/csharp/RSPEC-3247



Project: Az.ImportExport
    #521 Path: /Users/runner/work/1/s/src/ImportExport/generated/runtime/Serialization/JsonSerializer.cs, Line: 315, Message: ReSharper: Type check and casts can be merged. See https://www.jetbrains.com/help/resharper/MergeCastWithTypeCheck.html / SonarQube: Duplicate casts should not be made. See https://rules.sonarsource.com/csharp/RSPEC-3247



Project: IotHub
    #522 Path: /Users/runner/work/1/s/src/IotHub/IotHub/Common/IotHubUtils.cs, Line: 101, Message: ReSharper: ReplaceWithSingleCallToFirstOrDefault. / SonarQube "IEnumerable" LINQs should be simplified. See https://rules.sonarsource.com/csharp/RSPEC-2971
    #523 Path: /Users/runner/work/1/s/src/IotHub/IotHub/Common/IotHubUtils.cs, Line: 103, Message: ReSharper: ReplaceWithSingleCallToFirstOrDefault. / SonarQube "IEnumerable" LINQs should be simplified. See https://rules.sonarsource.com/csharp/RSPEC-2971
    #524 Path: /Users/runner/work/1/s/src/IotHub/IotHub/Common/IotHubUtils.cs, Line: 107, Message: ReSharper: ReplaceWithSingleCallToFirstOrDefault. / SonarQube "IEnumerable" LINQs should be simplified. See https://rules.sonarsource.com/csharp/RSPEC-2971
    #525 Path: /Users/runner/work/1/s/src/IotHub/IotHub/Common/IotHubUtils.cs, Line: 109, Message: ReSharper: ReplaceWithSingleCallToFirstOrDefault. / SonarQube "IEnumerable" LINQs should be simplified. See https://rules.sonarsource.com/csharp/RSPEC-2971
    #526 Path: /Users/runner/work/1/s/src/IotHub/IotHub/Common/IotHubUtils.cs, Line: 111, Message: ReSharper: ReplaceWithSingleCallToFirstOrDefault. / SonarQube "IEnumerable" LINQs should be simplified. See https://rules.sonarsource.com/csharp/RSPEC-2971
    #527 Path: /Users/runner/work/1/s/src/IotHub/IotHub/Common/IotHubUtils.cs, Line: 113, Message: ReSharper: ReplaceWithSingleCallToFirstOrDefault. / SonarQube "IEnumerable" LINQs should be simplified. See https://rules.sonarsource.com/csharp/RSPEC-2971
    #528 Path: /Users/runner/work/1/s/src/IotHub/IotHub/Common/IotHubUtils.cs, Line: 115, Message: ReSharper: ReplaceWithSingleCallToFirstOrDefault. / SonarQube "IEnumerable" LINQs should be simplified. See https://rules.sonarsource.com/csharp/RSPEC-2971
    #529 Path: /Users/runner/work/1/s/src/IotHub/IotHub/Common/IotHubUtils.cs, Line: 117, Message: ReSharper: ReplaceWithSingleCallToFirstOrDefault. / SonarQube "IEnumerable" LINQs should be simplified. See https://rules.sonarsource.com/csharp/RSPEC-2971
    #530 Path: /Users/runner/work/1/s/src/IotHub/IotHub/Common/IotHubUtils.cs, Line: 119, Message: ReSharper: ReplaceWithSingleCallToFirstOrDefault. / SonarQube "IEnumerable" LINQs should be simplified. See https://rules.sonarsource.com/csharp/RSPEC-2971
    #531 Path: /Users/runner/work/1/s/src/IotHub/IotHub/Common/IotHubUtils.cs, Line: 123, Message: ReSharper: ReplaceWithSingleCallToFirstOrDefault. / SonarQube "IEnumerable" LINQs should be simplified. See https://rules.sonarsource.com/csharp/RSPEC-2971
    #532 Path: /Users/runner/work/1/s/src/IotHub/IotHub/Common/IotHubUtils.cs, Line: 125, Message: ReSharper: ReplaceWithSingleCallToFirstOrDefault. / SonarQube "IEnumerable" LINQs should be simplified. See https://rules.sonarsource.com/csharp/RSPEC-2971
    #533 Path: /Users/runner/work/1/s/src/IotHub/IotHub/Common/IotHubUtils.cs, Line: 127, Message: ReSharper: ReplaceWithSingleCallToFirstOrDefault. / SonarQube "IEnumerable" LINQs should be simplified. See https://rules.sonarsource.com/csharp/RSPEC-2971
    #534 Path: /Users/runner/work/1/s/src/IotHub/IotHub/Common/IotHubUtils.cs, Line: 129, Message: ReSharper: ReplaceWithSingleCallToFirstOrDefault. / SonarQube "IEnumerable" LINQs should be simplified. See https://rules.sonarsource.com/csharp/RSPEC-2971
    #535 Path: /Users/runner/work/1/s/src/IotHub/IotHub/Common/IotHubUtils.cs, Line: 131, Message: ReSharper: ReplaceWithSingleCallToFirstOrDefault. / SonarQube "IEnumerable" LINQs should be simplified. See https://rules.sonarsource.com/csharp/RSPEC-2971
    #536 Path: /Users/runner/work/1/s/src/IotHub/IotHub/Common/IotHubUtils.cs, Line: 133, Message: ReSharper: ReplaceWithSingleCallToFirstOrDefault. / SonarQube "IEnumerable" LINQs should be simplified. See https://rules.sonarsource.com/csharp/RSPEC-2971
    #537 Path: /Users/runner/work/1/s/src/IotHub/IotHub/Common/IotHubUtils.cs, Line: 135, Message: ReSharper: ReplaceWithSingleCallToFirstOrDefault. / SonarQube "IEnumerable" LINQs should be simplified. See https://rules.sonarsource.com/csharp/RSPEC-2971
    #538 Path: /Users/runner/work/1/s/src/IotHub/IotHub/Common/IotHubUtils.cs, Line: 413, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #539 Path: /Users/runner/work/1/s/src/IotHub/IotHub/Common/IotHubUtils.cs, Line: 418, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #540 Path: /Users/runner/work/1/s/src/IotHub/IotHub/Common/IotHubUtils.cs, Line: 74, Message: ReSharper: ReplaceWithSingleCallToFirstOrDefault. / SonarQube "IEnumerable" LINQs should be simplified. See https://rules.sonarsource.com/csharp/RSPEC-2971
    #541 Path: /Users/runner/work/1/s/src/IotHub/IotHub/Common/IotHubUtils.cs, Line: 81, Message: ReSharper: ReplaceWithSingleCallToFirstOrDefault. / SonarQube "IEnumerable" LINQs should be simplified. See https://rules.sonarsource.com/csharp/RSPEC-2971
    #542 Path: /Users/runner/work/1/s/src/IotHub/IotHub/Common/IotHubUtils.cs, Line: 83, Message: ReSharper: ReplaceWithSingleCallToFirstOrDefault. / SonarQube "IEnumerable" LINQs should be simplified. See https://rules.sonarsource.com/csharp/RSPEC-2971
    #543 Path: /Users/runner/work/1/s/src/IotHub/IotHub/Common/IotHubUtils.cs, Line: 85, Message: ReSharper: ReplaceWithSingleCallToFirstOrDefault. / SonarQube "IEnumerable" LINQs should be simplified. See https://rules.sonarsource.com/csharp/RSPEC-2971
    #544 Path: /Users/runner/work/1/s/src/IotHub/IotHub/Common/IotHubUtils.cs, Line: 87, Message: ReSharper: ReplaceWithSingleCallToFirstOrDefault. / SonarQube "IEnumerable" LINQs should be simplified. See https://rules.sonarsource.com/csharp/RSPEC-2971
    #545 Path: /Users/runner/work/1/s/src/IotHub/IotHub/Common/IotHubUtils.cs, Line: 91, Message: ReSharper: ReplaceWithSingleCallToFirstOrDefault. / SonarQube "IEnumerable" LINQs should be simplified. See https://rules.sonarsource.com/csharp/RSPEC-2971
    #546 Path: /Users/runner/work/1/s/src/IotHub/IotHub/Common/IotHubUtils.cs, Line: 93, Message: ReSharper: ReplaceWithSingleCallToFirstOrDefault. / SonarQube "IEnumerable" LINQs should be simplified. See https://rules.sonarsource.com/csharp/RSPEC-2971
    #547 Path: /Users/runner/work/1/s/src/IotHub/IotHub/Common/IotHubUtils.cs, Line: 95, Message: ReSharper: ReplaceWithSingleCallToFirstOrDefault. / SonarQube "IEnumerable" LINQs should be simplified. See https://rules.sonarsource.com/csharp/RSPEC-2971
    #548 Path: /Users/runner/work/1/s/src/IotHub/IotHub/Common/IotHubUtils.cs, Line: 97, Message: ReSharper: ReplaceWithSingleCallToFirstOrDefault. / SonarQube "IEnumerable" LINQs should be simplified. See https://rules.sonarsource.com/csharp/RSPEC-2971
    #549 Path: /Users/runner/work/1/s/src/IotHub/IotHub/Common/IotHubUtils.cs, Line: 99, Message: ReSharper: ReplaceWithSingleCallToFirstOrDefault. / SonarQube "IEnumerable" LINQs should be simplified. See https://rules.sonarsource.com/csharp/RSPEC-2971
    #550 Path: /Users/runner/work/1/s/src/IotHub/IotHub/IotHub/DataPlane/Configuration/InvokeAzIotHubConfigurationMetricsQuery.cs, Line: 130, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #551 Path: /Users/runner/work/1/s/src/IotHub/IotHub/IotHub/DataPlane/Deployment/InvokeAzIotHubDeploymentMetricQuery.cs, Line: 141, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #552 Path: /Users/runner/work/1/s/src/IotHub/IotHub/IotHub/DataPlane/Device/GetAzIotHubDeviceConnectionString.cs, Line: 117, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #553 Path: /Users/runner/work/1/s/src/IotHub/IotHub/IotHub/DataPlane/Module/GetAzIotHubModuleConnectionString.cs, Line: 126, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #554 Path: /Users/runner/work/1/s/src/IotHub/IotHub/IotHub/DataPlane/NewAzIotHubSasToken.cs, Line: 129, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #555 Path: /Users/runner/work/1/s/src/IotHub/IotHub/IotHub/DataPlane/NewAzIotHubSasToken.cs, Line: 149, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html



Project: KeyVault
    #556 Path: /Users/runner/work/1/s/src/KeyVault/KeyVault/Commands/SetAzureKeyVaultAccessPolicy.cs, Line: 541, Message: https://www.jetbrains.com/help/resharper/MergeSequentialChecks.html
    #557 Path: /Users/runner/work/1/s/src/KeyVault/KeyVault/Commands/SetAzureKeyVaultAccessPolicy.cs, Line: 544, Message: https://www.jetbrains.com/help/resharper/MergeSequentialChecks.html
    #558 Path: /Users/runner/work/1/s/src/KeyVault/KeyVault/Commands/SetAzureKeyVaultAccessPolicy.cs, Line: 547, Message: https://www.jetbrains.com/help/resharper/MergeSequentialChecks.html
    #559 Path: /Users/runner/work/1/s/src/KeyVault/KeyVault/Commands/SetAzureKeyVaultAccessPolicy.cs, Line: 550, Message: https://www.jetbrains.com/help/resharper/MergeSequentialChecks.html
    #560 Path: /Users/runner/work/1/s/src/KeyVault/KeyVault/Commands/UpdateAzureKeyVault.cs, Line: 90, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #561 Path: /Users/runner/work/1/s/src/KeyVault/KeyVault/Commands/UpdateAzureKeyVault.cs, Line: 93, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #562 Path: /Users/runner/work/1/s/src/KeyVault/KeyVault/Models/KeyVaultCmdletBase.cs, Line: 76, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #563 Path: /Users/runner/work/1/s/src/KeyVault/KeyVault/Models/PfxWebKeyConverter.cs, Line: 95, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #564 Path: /Users/runner/work/1/s/src/KeyVault/KeyVault/Models/PfxWebKeyConverter.cs, Line: 99, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #565 Path: /Users/runner/work/1/s/src/KeyVault/KeyVault/Models/PSKeyVaultCertificate.cs, Line: 146, Message: ReSharper: Use '.Any()' to test whether this IEnumerable is empty or not. See ReSharper/UseMethodAny.0.html / SonarQube: "Any()" should be used to test for emptiness. See https://rules.sonarsource.com/csharp/RSPEC-1155
    #566 Path: /Users/runner/work/1/s/src/KeyVault/KeyVault/Models/PSKeyVaultCertificateAdministratorDetails.cs, Line: 58, Message: ReSharper: Use '.Any()' to test whether this IEnumerable is empty or not. See ReSharper/UseMethodAny.0.html / SonarQube: "Any()" should be used to test for emptiness. See https://rules.sonarsource.com/csharp/RSPEC-1155
    #567 Path: /Users/runner/work/1/s/src/KeyVault/KeyVault/Models/PSKeyVaultCertificateAdministratorDetails.cs, Line: 68, Message: ReSharper: Use '.Any()' to test whether this IEnumerable is empty or not. See ReSharper/UseMethodAny.0.html / SonarQube: "Any()" should be used to test for emptiness. See https://rules.sonarsource.com/csharp/RSPEC-1155
    #568 Path: /Users/runner/work/1/s/src/KeyVault/KeyVault/Models/PSKeyVaultCertificateContact.cs, Line: 39, Message: https://www.jetbrains.com/help/resharper/MergeSequentialChecks.html
    #569 Path: /Users/runner/work/1/s/src/KeyVault/KeyVault/SecurityDomain/Models/Base64UrlEncoder.cs, Line: 109, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html



Project: Az.KubernetesConfiguration
    #570 Path: /Users/runner/work/1/s/src/KubernetesConfiguration/generated/runtime/Serialization/JsonSerializer.cs, Line: 315, Message: ReSharper: Type check and casts can be merged. See https://www.jetbrains.com/help/resharper/MergeCastWithTypeCheck.html / SonarQube: Duplicate casts should not be made. See https://rules.sonarsource.com/csharp/RSPEC-3247



Project: Az.Kusto
    #571 Path: /Users/runner/work/1/s/src/Kusto/generated/runtime/Serialization/JsonSerializer.cs, Line: 315, Message: ReSharper: Type check and casts can be merged. See https://www.jetbrains.com/help/resharper/MergeCastWithTypeCheck.html / SonarQube: Duplicate casts should not be made. See https://rules.sonarsource.com/csharp/RSPEC-3247



Project: LogicApp
    #572 Path: /Users/runner/work/1/s/src/LogicApp/LogicApp/Utilities/CmdletHelper.cs, Line: 182, Message: ReSharper: Use '.Any()' to test whether this IEnumerable is empty or not. See ReSharper/UseMethodAny.0.html / SonarQube: "Any()" should be used to test for emptiness. See https://rules.sonarsource.com/csharp/RSPEC-1155
    #573 Path: /Users/runner/work/1/s/src/LogicApp/LogicApp/Utilities/CmdletHelper.cs, Line: 194, Message: SonarQube: Null checks should not be used with "is". See https://rules.sonarsource.com/csharp/RSPEC-4201 / ReSharper: Merge sequential checks in && or || expressions. See https://www.jetbrains.com/help/resharper/MergeSequentialChecks.html
    #574 Path: /Users/runner/work/1/s/src/LogicApp/LogicApp/Utilities/IntegrationAccountGeneratedControlNumberOperations.cs, Line: 149, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html



Project: MachineLearning
    #575 Path: /Users/runner/work/1/s/src/MachineLearning/MachineLearning/Cmdlets/MachineLearningCmdletBase.cs, Line: 301, Message: ReSharper: Type check and casts can be merged. See https://www.jetbrains.com/help/resharper/MergeCastWithTypeCheck.html / SonarQube: Duplicate casts should not be made. See https://rules.sonarsource.com/csharp/RSPEC-3247



Project: Maintenance
    #576 Path: /Users/runner/work/1/s/src/Maintenance/Maintenance/MaintenanceAutomationBaseCmdlet.cs, Line: 156, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #577 Path: /Users/runner/work/1/s/src/Maintenance/Maintenance/MaintenanceAutomationBaseCmdlet.cs, Line: 176, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #578 Path: /Users/runner/work/1/s/src/Maintenance/Maintenance/MaintenanceAutomationBaseCmdlet.cs, Line: 210, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html



Project: Maps
    #579 Path: /Users/runner/work/1/s/src/Maps/Maps/MapsAccount/MapsAccountBaseCmdlet.cs, Line: 103, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html



Project: Az.MariaDb
    #580 Path: /Users/runner/work/1/s/src/MariaDb/generated/runtime/Serialization/JsonSerializer.cs, Line: 315, Message: ReSharper: Type check and casts can be merged. See https://www.jetbrains.com/help/resharper/MergeCastWithTypeCheck.html / SonarQube: Duplicate casts should not be made. See https://rules.sonarsource.com/csharp/RSPEC-3247



Project: Az.Migrate
    #581 Path: /Users/runner/work/1/s/src/Migrate/generated/runtime/Serialization/JsonSerializer.cs, Line: 315, Message: ReSharper: Type check and casts can be merged. See https://www.jetbrains.com/help/resharper/MergeCastWithTypeCheck.html / SonarQube: Duplicate casts should not be made. See https://rules.sonarsource.com/csharp/RSPEC-3247



Project: Monitor
    #582 Path: /Users/runner/work/1/s/src/Monitor/Monitor/ActionGroups/RemoveAzureRmActionGroupCommand.cs, Line: 75, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #583 Path: /Users/runner/work/1/s/src/Monitor/Monitor/ActionGroups/SetAzureRmActionGroupCommand.cs, Line: 111, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #584 Path: /Users/runner/work/1/s/src/Monitor/Monitor/ActivityLogAlert/DisableAzureRmActivityLogAlertCommand.cs, Line: 73, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #585 Path: /Users/runner/work/1/s/src/Monitor/Monitor/ActivityLogAlert/EnableAzureRmActivityLogAlertCommand.cs, Line: 73, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #586 Path: /Users/runner/work/1/s/src/Monitor/Monitor/ActivityLogAlert/RemoveAzureRmActivityLogAlertCommand.cs, Line: 71, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #587 Path: /Users/runner/work/1/s/src/Monitor/Monitor/ActivityLogAlert/SetAzureRmActivityLogAlertCommand.cs, Line: 136, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #588 Path: /Users/runner/work/1/s/src/Monitor/Monitor/Alerts/AddAzureRmAlertRuleCommandBase.cs, Line: 84, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #589 Path: /Users/runner/work/1/s/src/Monitor/Monitor/Alerts/AddAzureRmMetricAlertRuleV2Command.cs, Line: 246, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #590 Path: /Users/runner/work/1/s/src/Monitor/Monitor/Alerts/GetAzureRmAlertRuleCommand.cs, Line: 104, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #591 Path: /Users/runner/work/1/s/src/Monitor/Monitor/Alerts/GetAzureRmAlertRuleCommand.cs, Line: 76, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #592 Path: /Users/runner/work/1/s/src/Monitor/Monitor/Alerts/GetAzureRmAlertRuleCommand.cs, Line: 84, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #593 Path: /Users/runner/work/1/s/src/Monitor/Monitor/Alerts/GetAzureRmAlertRuleCommand.cs, Line: 90, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #594 Path: /Users/runner/work/1/s/src/Monitor/Monitor/Alerts/GetAzureRmAlertRuleCommand.cs, Line: 96, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #595 Path: /Users/runner/work/1/s/src/Monitor/Monitor/Alerts/NewAzureRmMetricAlertRuleV2CriteriaCommand.cs, Line: 164, Message: ReSharper: Use '.Any()' to test whether this IEnumerable is empty or not. See ReSharper/UseMethodAny.0.html / SonarQube: "Any()" should be used to test for emptiness. See https://rules.sonarsource.com/csharp/RSPEC-1155
    #596 Path: /Users/runner/work/1/s/src/Monitor/Monitor/Alerts/NewAzureRmMetricAlertRuleV2CriteriaCommand.cs, Line: 168, Message: ReSharper: Use '.Any()' to test whether this IEnumerable is empty or not. See ReSharper/UseMethodAny.0.html / SonarQube: "Any()" should be used to test for emptiness. See https://rules.sonarsource.com/csharp/RSPEC-1155
    #597 Path: /Users/runner/work/1/s/src/Monitor/Monitor/Alerts/RemoveAzureRmAlertRuleCommand.cs, Line: 55, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #598 Path: /Users/runner/work/1/s/src/Monitor/Monitor/Alerts/RemoveAzureRmMetricAlertRuleV2Command.cs, Line: 89, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #599 Path: /Users/runner/work/1/s/src/Monitor/Monitor/Autoscale/AddAzureRmAutoscaleSettingCommand.cs, Line: 110, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #600 Path: /Users/runner/work/1/s/src/Monitor/Monitor/Autoscale/RemoveAzureRmAutoscaleSettingCommand.cs, Line: 55, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #601 Path: /Users/runner/work/1/s/src/Monitor/Monitor/DataCollectionRules/NewAzureRmDataCollectionRuleAssociationCommand.cs, Line: 103, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #602 Path: /Users/runner/work/1/s/src/Monitor/Monitor/DataCollectionRules/NewAzureRmDataCollectionRuleCommand.cs, Line: 119, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #603 Path: /Users/runner/work/1/s/src/Monitor/Monitor/DataCollectionRules/RemoveAzureRmDataCollectionRuleAssociationCommand.cs, Line: 99, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #604 Path: /Users/runner/work/1/s/src/Monitor/Monitor/DataCollectionRules/RemoveAzureRmDataCollectionRuleCommand.cs, Line: 97, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #605 Path: /Users/runner/work/1/s/src/Monitor/Monitor/DataCollectionRules/SetAzureRmDataCollectionRuleCommand.cs, Line: 153, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #606 Path: /Users/runner/work/1/s/src/Monitor/Monitor/DataCollectionRules/UpdateAzureRmDataCollectionRuleCommand.cs, Line: 107, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #607 Path: /Users/runner/work/1/s/src/Monitor/Monitor/Diagnostics/RemoveAzureRmDiagnosticSettingCommand.cs, Line: 128, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #608 Path: /Users/runner/work/1/s/src/Monitor/Monitor/Diagnostics/SetAzureRmDiagnosticSettingCommand.cs, Line: 185, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #609 Path: /Users/runner/work/1/s/src/Monitor/Monitor/Diagnostics/SetAzureRmDiagnosticSettingCommand.cs, Line: 286, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #610 Path: /Users/runner/work/1/s/src/Monitor/Monitor/LogProfiles/AddAzureRmLogProfileCommand.cs, Line: 80, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #611 Path: /Users/runner/work/1/s/src/Monitor/Monitor/LogProfiles/RemoveAzureRmLogProfileCommand.cs, Line: 44, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #612 Path: /Users/runner/work/1/s/src/Monitor/Monitor/LogsCmdletBase.cs, Line: 228, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #613 Path: /Users/runner/work/1/s/src/Monitor/Monitor/LogsCmdletBase.cs, Line: 230, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #614 Path: /Users/runner/work/1/s/src/Monitor/Monitor/LogsCmdletBase.cs, Line: 92, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #615 Path: /Users/runner/work/1/s/src/Monitor/Monitor/Metrics/GetAzureRmMetricCommand.cs, Line: 155, Message: ReSharper: Use '.Any()' to test whether this IEnumerable is empty or not. See ReSharper/UseMethodAny.0.html / SonarQube: "Any()" should be used to test for emptiness. See https://rules.sonarsource.com/csharp/RSPEC-1155
    #616 Path: /Users/runner/work/1/s/src/Monitor/Monitor/Metrics/GetAzureRmMetricCommand.cs, Line: 175, Message: https://www.jetbrains.com/help/resharper/MergeSequentialChecks.html
    #617 Path: /Users/runner/work/1/s/src/Monitor/Monitor/Metrics/GetAzureRmMetricDefinitionCommand.cs, Line: 75, Message: ReSharper: Use '.Any()' to test whether this IEnumerable is empty or not. See ReSharper/UseMethodAny.0.html / SonarQube: "Any()" should be used to test for emptiness. See https://rules.sonarsource.com/csharp/RSPEC-1155
    #618 Path: /Users/runner/work/1/s/src/Monitor/Monitor/MonitorCmdletBase.cs, Line: 113, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #619 Path: /Users/runner/work/1/s/src/Monitor/Monitor/MonitorCmdletBase.cs, Line: 124, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #620 Path: /Users/runner/work/1/s/src/Monitor/Monitor/OutputClasses/CustomPrinter.cs, Line: 60, Message: ReSharper: Type check and casts can be merged. See https://www.jetbrains.com/help/resharper/MergeCastWithTypeCheck.html / SonarQube: Duplicate casts should not be made. See https://rules.sonarsource.com/csharp/RSPEC-3247
    #621 Path: /Users/runner/work/1/s/src/Monitor/Monitor/OutputClasses/CustomPrinter.cs, Line: 87, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #622 Path: /Users/runner/work/1/s/src/Monitor/Monitor/OutputClasses/PSDictionaryElement.cs, Line: 52, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #623 Path: /Users/runner/work/1/s/src/Monitor/Monitor/OutputClasses/PSPrivateEndpointConnection.cs, Line: 91, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #624 Path: /Users/runner/work/1/s/src/Monitor/Monitor/OutputClasses/PSToStringExtensions.cs, Line: 161, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #625 Path: /Users/runner/work/1/s/src/Monitor/Monitor/OutputClasses/PSToStringExtensions.cs, Line: 169, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #626 Path: /Users/runner/work/1/s/src/Monitor/Monitor/OutputClasses/PSToStringExtensions.cs, Line: 175, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #627 Path: /Users/runner/work/1/s/src/Monitor/Monitor/OutputClasses/PSToStringExtensions.cs, Line: 474, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #628 Path: /Users/runner/work/1/s/src/Monitor/Monitor/PrivateLinkScopes/NewAzureInsightsPrivateLinkScope.cs, Line: 54, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #629 Path: /Users/runner/work/1/s/src/Monitor/Monitor/PrivateLinkScopes/NewAzureInsightsPrivateLinkScope.cs, Line: 64, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #630 Path: /Users/runner/work/1/s/src/Monitor/Monitor/PrivateLinkScopes/NewAzureInsightsPrivateLinkScopedResource.cs, Line: 50, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #631 Path: /Users/runner/work/1/s/src/Monitor/Monitor/PrivateLinkScopes/NewAzureInsightsPrivateLinkScopedResource.cs, Line: 53, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #632 Path: /Users/runner/work/1/s/src/Monitor/Monitor/PrivateLinkScopes/RemoveAzureInsightsPrivateLinkScope.cs, Line: 81, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #633 Path: /Users/runner/work/1/s/src/Monitor/Monitor/PrivateLinkScopes/RemoveAzureInsightsPrivateLinkScopedResource.cs, Line: 94, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #634 Path: /Users/runner/work/1/s/src/Monitor/Monitor/PrivateLinkScopes/UpdateAzureInsightsPrivateLinkScope.cs, Line: 68, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #635 Path: /Users/runner/work/1/s/src/Monitor/Monitor/ScheduledQueryRules/NewScheduledQueryRuleCommand.cs, Line: 117, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #636 Path: /Users/runner/work/1/s/src/Monitor/Monitor/ScheduledQueryRules/RemoveScheduledQueryRuleCommand.cs, Line: 88, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #637 Path: /Users/runner/work/1/s/src/Monitor/Monitor/ScheduledQueryRules/SetScheduledQueryRuleCommand.cs, Line: 173, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #638 Path: /Users/runner/work/1/s/src/Monitor/Monitor/ScheduledQueryRules/UpdateScheduledQueryRuleCommand.cs, Line: 116, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #639 Path: /Users/runner/work/1/s/src/Monitor/Monitor/TransitionalClasses/TransitionHelpers.cs, Line: 104, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #640 Path: /Users/runner/work/1/s/src/Monitor/Monitor/TransitionalClasses/TransitionHelpers.cs, Line: 118, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #641 Path: /Users/runner/work/1/s/src/Monitor/Monitor/TransitionalClasses/TransitionHelpers.cs, Line: 140, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #642 Path: /Users/runner/work/1/s/src/Monitor/Monitor/TransitionalClasses/TransitionHelpers.cs, Line: 163, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #643 Path: /Users/runner/work/1/s/src/Monitor/Monitor/TransitionalClasses/TransitionHelpers.cs, Line: 35, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #644 Path: /Users/runner/work/1/s/src/Monitor/Monitor/TransitionalClasses/TransitionHelpers.cs, Line: 44, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #645 Path: /Users/runner/work/1/s/src/Monitor/Monitor/TransitionalClasses/TransitionHelpers.cs, Line: 58, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #646 Path: /Users/runner/work/1/s/src/Monitor/Monitor/TransitionalClasses/TransitionHelpers.cs, Line: 65, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #647 Path: /Users/runner/work/1/s/src/Monitor/Monitor/TransitionalClasses/TransitionHelpers.cs, Line: 77, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #648 Path: /Users/runner/work/1/s/src/Monitor/Monitor/TransitionalClasses/TransitionHelpers.cs, Line: 89, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #649 Path: /Users/runner/work/1/s/src/Monitor/Monitor/Utilities.cs, Line: 65, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html



Project: Az.MonitoringSolutions
    #650 Path: /Users/runner/work/1/s/src/MonitoringSolutions/generated/runtime/Serialization/JsonSerializer.cs, Line: 315, Message: ReSharper: Type check and casts can be merged. See https://www.jetbrains.com/help/resharper/MergeCastWithTypeCheck.html / SonarQube: Duplicate casts should not be made. See https://rules.sonarsource.com/csharp/RSPEC-3247



Project: Az.MySql
    #651 Path: /Users/runner/work/1/s/src/MySql/generated/runtime/Serialization/JsonSerializer.cs, Line: 315, Message: ReSharper: Type check and casts can be merged. See https://www.jetbrains.com/help/resharper/MergeCastWithTypeCheck.html / SonarQube: Duplicate casts should not be made. See https://rules.sonarsource.com/csharp/RSPEC-3247



Project: Network
    #652 Path: /Users/runner/work/1/s/src/Network/Network/ApplicationGateway/ApplicationGatewayChildResourceHelper.cs, Line: 51, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #653 Path: /Users/runner/work/1/s/src/Network/Network/BYOIP/CustomIpPrefix/NewAzureCustomIpPrefixCommand.cs, Line: 82, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #654 Path: /Users/runner/work/1/s/src/Network/Network/Common/NetworkClient.cs, Line: 150, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #655 Path: /Users/runner/work/1/s/src/Network/Network/Common/NetworkClient.cs, Line: 182, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #656 Path: /Users/runner/work/1/s/src/Network/Network/Common/NetworkClient.cs, Line: 304, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #657 Path: /Users/runner/work/1/s/src/Network/Network/Common/NetworkClient.cs, Line: 336, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #658 Path: /Users/runner/work/1/s/src/Network/Network/Common/NetworkClient.cs, Line: 447, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #659 Path: /Users/runner/work/1/s/src/Network/Network/Common/NetworkClient.cs, Line: 475, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #660 Path: /Users/runner/work/1/s/src/Network/Network/Common/NetworkClient.cs, Line: 565, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #661 Path: /Users/runner/work/1/s/src/Network/Network/Common/NetworkClient.cs, Line: 588, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #662 Path: /Users/runner/work/1/s/src/Network/Network/Common/NetworkClient.cs, Line: 617, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #663 Path: /Users/runner/work/1/s/src/Network/Network/Common/NetworkClient.cs, Line: 640, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #664 Path: /Users/runner/work/1/s/src/Network/Network/Common/NetworkClient.cs, Line: 668, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #665 Path: /Users/runner/work/1/s/src/Network/Network/Common/NetworkClient.cs, Line: 750, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #666 Path: /Users/runner/work/1/s/src/Network/Network/Common/NetworkCloudException.cs, Line: 97, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #667 Path: /Users/runner/work/1/s/src/Network/Network/Cortex/P2SVpnGateway/ResetAzureP2SVpnGatewayCommand.cs, Line: 96, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #668 Path: /Users/runner/work/1/s/src/Network/Network/Cortex/VpnConnection/NewAzureRmVpnConnectionCommand.cs, Line: 327, Message: ReSharper: ReplaceWithSingleCallToFirstOrDefault. / SonarQube "IEnumerable" LINQs should be simplified. See https://rules.sonarsource.com/csharp/RSPEC-2971
    #669 Path: /Users/runner/work/1/s/src/Network/Network/Cortex/VpnConnection/UpdateAzureRmVpnConnectionCommand.cs, Line: 243, Message: ReSharper: ReplaceWithSingleCallToFirstOrDefault. / SonarQube "IEnumerable" LINQs should be simplified. See https://rules.sonarsource.com/csharp/RSPEC-2971
    #670 Path: /Users/runner/work/1/s/src/Network/Network/Cortex/VpnGateway/ResetAzureVpnGatewayCommand.cs, Line: 95, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #671 Path: /Users/runner/work/1/s/src/Network/Network/Cortex/VpnGatewayNatRule/NewAzureRmVpnGatewayNatRuleCommand.cs, Line: 211, Message: ReSharper: ReplaceWithSingleCallToFirstOrDefault. / SonarQube "IEnumerable" LINQs should be simplified. See https://rules.sonarsource.com/csharp/RSPEC-2971
    #672 Path: /Users/runner/work/1/s/src/Network/Network/Cortex/VpnGatewayNatRule/UpdateAzureRmVpnGatewayNatRuleCommand.cs, Line: 208, Message: ReSharper: ReplaceWithSingleCallToFirstOrDefault. / SonarQube "IEnumerable" LINQs should be simplified. See https://rules.sonarsource.com/csharp/RSPEC-2971
    #673 Path: /Users/runner/work/1/s/src/Network/Network/Cortex/VpnServerConfiguration/UpdateAzureRmVpnServerConfigurationCommand.cs, Line: 349, Message: ReSharper: Use '.Any()' to test whether this IEnumerable is empty or not. See ReSharper/UseMethodAny.0.html / SonarQube: "Any()" should be used to test for emptiness. See https://rules.sonarsource.com/csharp/RSPEC-1155
    #674 Path: /Users/runner/work/1/s/src/Network/Network/Cortex/VpnServerConfiguration/UpdateAzureRmVpnServerConfigurationCommand.cs, Line: 354, Message: ReSharper: Use '.Any()' to test whether this IEnumerable is empty or not. See ReSharper/UseMethodAny.0.html / SonarQube: "Any()" should be used to test for emptiness. See https://rules.sonarsource.com/csharp/RSPEC-1155
    #675 Path: /Users/runner/work/1/s/src/Network/Network/ExpressRouteCrossConnection/CrossConnectionPeering/AzureRMExpressRouteCrossConnectionPeeringBase.cs, Line: 128, Message: ReSharper: Use '.Any()' to test whether this IEnumerable is empty or not. See ReSharper/UseMethodAny.0.html / SonarQube: "Any()" should be used to test for emptiness. See https://rules.sonarsource.com/csharp/RSPEC-1155
    #676 Path: /Users/runner/work/1/s/src/Network/Network/FirewallPolicy/ManagedRules/AzureApplicationGatewayFirewallPolicyManagedRules.cs, Line: 49, Message: ReSharper: Use '.Any()' to test whether this IEnumerable is empty or not. See ReSharper/UseMethodAny.0.html / SonarQube: "Any()" should be used to test for emptiness. See https://rules.sonarsource.com/csharp/RSPEC-1155
    #677 Path: /Users/runner/work/1/s/src/Network/Network/Generated/LoadBalancer/BackendAddressPool/AddAzureRmLoadBalancerBackendAddressPoolConfigCommand.cs, Line: 70, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #678 Path: /Users/runner/work/1/s/src/Network/Network/Generated/LoadBalancer/BackendAddressPool/NewAzureRmLoadBalancerBackendAddressPoolConfigCommand.cs, Line: 51, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #679 Path: /Users/runner/work/1/s/src/Network/Network/Generated/LoadBalancer/FrontendIPConfiguration/AddAzureRmLoadBalancerFrontendIpConfigCommand.cs, Line: 211, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #680 Path: /Users/runner/work/1/s/src/Network/Network/Generated/LoadBalancer/FrontendIPConfiguration/NewAzureRmLoadBalancerFrontendIpConfigCommand.cs, Line: 195, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #681 Path: /Users/runner/work/1/s/src/Network/Network/Generated/LoadBalancer/InboundNatPool/AddAzureRmLoadBalancerInboundNatPoolConfigCommand.cs, Line: 155, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #682 Path: /Users/runner/work/1/s/src/Network/Network/Generated/LoadBalancer/InboundNatPool/NewAzureRmLoadBalancerInboundNatPoolConfigCommand.cs, Line: 135, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #683 Path: /Users/runner/work/1/s/src/Network/Network/Generated/LoadBalancer/InboundNatRule/AddAzureRmLoadBalancerInboundNatRuleConfigCommand.cs, Line: 148, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #684 Path: /Users/runner/work/1/s/src/Network/Network/Generated/LoadBalancer/InboundNatRule/NewAzureRmLoadBalancerInboundNatRuleConfigCommand.cs, Line: 128, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #685 Path: /Users/runner/work/1/s/src/Network/Network/Generated/LoadBalancer/LoadBalancerRule/AddAzureRmLoadBalancerRuleConfigCommand.cs, Line: 220, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #686 Path: /Users/runner/work/1/s/src/Network/Network/Generated/LoadBalancer/LoadBalancerRule/NewAzureRmLoadBalancerRuleConfigCommand.cs, Line: 200, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #687 Path: /Users/runner/work/1/s/src/Network/Network/Generated/LoadBalancer/OutboundRule/AddAzureRmLoadBalancerOutboundRuleConfigCommand.cs, Line: 153, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #688 Path: /Users/runner/work/1/s/src/Network/Network/Generated/LoadBalancer/OutboundRule/NewAzureRmLoadBalancerOutboundRuleConfigCommand.cs, Line: 133, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #689 Path: /Users/runner/work/1/s/src/Network/Network/Generated/LoadBalancer/Probe/AddAzureRmLoadBalancerProbeConfigCommand.cs, Line: 112, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #690 Path: /Users/runner/work/1/s/src/Network/Network/Generated/LoadBalancer/Probe/NewAzureRmLoadBalancerProbeConfigCommand.cs, Line: 92, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #691 Path: /Users/runner/work/1/s/src/Network/Network/Models/AzureFirewall/PSAzureFirewall.cs, Line: 140, Message: ReSharper: Use '.Any()' to test whether this IEnumerable is empty or not. See ReSharper/UseMethodAny.0.html / SonarQube: "Any()" should be used to test for emptiness. See https://rules.sonarsource.com/csharp/RSPEC-1155
    #692 Path: /Users/runner/work/1/s/src/Network/Network/Models/AzureFirewall/PSAzureFirewall.cs, Line: 387, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #693 Path: /Users/runner/work/1/s/src/Network/Network/Models/AzureFirewall/PSAzureFirewall.cs, Line: 395, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #694 Path: /Users/runner/work/1/s/src/Network/Network/Models/AzureFirewall/PSAzureFirewall.cs, Line: 403, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #695 Path: /Users/runner/work/1/s/src/Network/Network/Models/AzureFirewall/PSAzureFirewall.cs, Line: 410, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #696 Path: /Users/runner/work/1/s/src/Network/Network/Models/AzureFirewall/PSAzureFirewall.cs, Line: 439, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #697 Path: /Users/runner/work/1/s/src/Network/Network/Models/AzureFirewall/PSAzureFirewallThreatIntelWhitelist.cs, Line: 61, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #698 Path: /Users/runner/work/1/s/src/Network/Network/Models/AzureFirewall/PSAzureFirewallThreatIntelWhitelist.cs, Line: 76, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #699 Path: /Users/runner/work/1/s/src/Network/Network/Models/AzureFirewallPolicy/PSAzureFirewallPolicyThreatIntelWhitelist.cs, Line: 61, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #700 Path: /Users/runner/work/1/s/src/Network/Network/Models/AzureFirewallPolicy/PSAzureFirewallPolicyThreatIntelWhitelist.cs, Line: 76, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #701 Path: /Users/runner/work/1/s/src/Network/Network/Models/PSTrafficAnalyticsProperties.cs, Line: 45, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #702 Path: /Users/runner/work/1/s/src/Network/Network/NetworkProfile/ContainerNetworkInterfaceConfiguration/NewAzureNetworkProfileContainerNetworkInterfaceConfigCommand.cs, Line: 37, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #703 Path: /Users/runner/work/1/s/src/Network/Network/NetworkProfile/IpConfigurationProfile/NewAzureNetworkProfileContainerNetworkInterfaceConfigIpConfigCommand.cs, Line: 47, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #704 Path: /Users/runner/work/1/s/src/Network/Network/NetworkWatcher/ConnectionMonitor/ConnectionMonitorBaseCmdlet.cs, Line: 1044, Message: ReSharper: Use '.Any()' to test whether this IEnumerable is empty or not. See ReSharper/UseMethodAny.0.html / SonarQube: "Any()" should be used to test for emptiness. See https://rules.sonarsource.com/csharp/RSPEC-1155
    #705 Path: /Users/runner/work/1/s/src/Network/Network/NetworkWatcher/ConnectionMonitor/ConnectionMonitorBaseCmdlet.cs, Line: 649, Message: ReSharper: Use '.Any()' to test whether this IEnumerable is empty or not. See ReSharper/UseMethodAny.0.html / SonarQube: "Any()" should be used to test for emptiness. See https://rules.sonarsource.com/csharp/RSPEC-1155
    #706 Path: /Users/runner/work/1/s/src/Network/Network/NetworkWatcher/ConnectionMonitor/ConnectionMonitorBaseCmdlet.cs, Line: 966, Message: ReSharper: Use '.Any()' to test whether this IEnumerable is empty or not. See ReSharper/UseMethodAny.0.html / SonarQube: "Any()" should be used to test for emptiness. See https://rules.sonarsource.com/csharp/RSPEC-1155
    #707 Path: /Users/runner/work/1/s/src/Network/Network/PrivateLinkService/Models/PrivateEndpointConnection.cs, Line: 92, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #708 Path: /Users/runner/work/1/s/src/Network/Network/VirtualNetworkGateway/ChildResourceHelp.cs, Line: 72, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #709 Path: /Users/runner/work/1/s/src/Network/Network/VirtualNetworkGateway/NewAzureVpnClientConfigurationCommand.cs, Line: 82, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #710 Path: /Users/runner/work/1/s/src/Network/Network/VirtualNetworkGateway/SetAzureVpnClientIpsecParametersCommand.cs, Line: 90, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #711 Path: /Users/runner/work/1/s/src/Network/Network/VirtualNetworkGateway/UpdateAzureVirtualNetworkGatewayCommand.cs, Line: 430, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html



Project: NotificationHubs
    #712 Path: /Users/runner/work/1/s/src/NotificationHubs/NotificationHubs/NotificationHubsManagementClient.cs, Line: 116, Message: ReSharper: Use '.Any()' to test whether this IEnumerable is empty or not. See ReSharper/UseMethodAny.0.html / SonarQube: "Any()" should be used to test for emptiness. See https://rules.sonarsource.com/csharp/RSPEC-1155



Project: OperationalInsights
    #713 Path: /Users/runner/work/1/s/src/OperationalInsights/OperationalInsights/Client/OperationalInsightsClient.Clusters.cs, Line: 72, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #714 Path: /Users/runner/work/1/s/src/OperationalInsights/OperationalInsights/Client/OperationalInsightsClient.DataSources.cs, Line: 50, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #715 Path: /Users/runner/work/1/s/src/OperationalInsights/OperationalInsights/Client/OperationalInsightsClient.Search.cs, Line: 1, Message: ReSharper: Use 'String.IsNullOrEmpty'. See https://www.jetbrains.com/help/resharper/ReplaceWithStringIsNullOrEmpty.html / SonarQube: "string.IsNullOrEmpty" should be used. See https://rules.sonarsource.com/csharp/RSPEC-3256
    #716 Path: /Users/runner/work/1/s/src/OperationalInsights/OperationalInsights/Client/OperationalInsightsClient.Search.cs, Line: 1, Message: ReSharper: Use 'String.IsNullOrEmpty'. See https://www.jetbrains.com/help/resharper/ReplaceWithStringIsNullOrEmpty.html / SonarQube: "string.IsNullOrEmpty" should be used. See https://rules.sonarsource.com/csharp/RSPEC-3256
    #717 Path: /Users/runner/work/1/s/src/OperationalInsights/OperationalInsights/Client/OperationalInsightsClient.StorageInsights.cs, Line: 43, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #718 Path: /Users/runner/work/1/s/src/OperationalInsights/OperationalInsights/Client/OperationalInsightsClient.Workspaces.cs, Line: 318, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #719 Path: /Users/runner/work/1/s/src/OperationalInsights/OperationalInsights/Client/OperationalInsightsClient.Workspaces.cs, Line: 351, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #720 Path: /Users/runner/work/1/s/src/OperationalInsights/OperationalInsights/Client/OperationalInsightsClient.Workspaces.cs, Line: 47, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #721 Path: /Users/runner/work/1/s/src/OperationalInsights/OperationalInsights/Client/OperationalInsightsClient.Workspaces.cs, Line: 60, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #722 Path: /Users/runner/work/1/s/src/OperationalInsights/OperationalInsights/Clusters/NewAzureOperationalInsightsClusterCommand.cs, Line: 80, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #723 Path: /Users/runner/work/1/s/src/OperationalInsights/OperationalInsights/Clusters/RemoveAzureOperationalInsightsClusterCommand.cs, Line: 41, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #724 Path: /Users/runner/work/1/s/src/OperationalInsights/OperationalInsights/Clusters/UpdateAzureOperationalInsightsClusterCommand.cs, Line: 81, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #725 Path: /Users/runner/work/1/s/src/OperationalInsights/OperationalInsights/OperationalInsightsBaseCmdlet.cs, Line: 50, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #726 Path: /Users/runner/work/1/s/src/OperationalInsights/OperationalInsights/Workspaces/NewAzureOperationalInsightsLinkedStorageAccountCommand.cs, Line: 56, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #727 Path: /Users/runner/work/1/s/src/OperationalInsights/OperationalInsights/Workspaces/RemoveAzureOperationalInsightsLinkedServiceCommand.cs, Line: 46, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #728 Path: /Users/runner/work/1/s/src/OperationalInsights/OperationalInsights/Workspaces/SetAzureOperationalInsightsLinkedServiceCommand.cs, Line: 69, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #729 Path: /Users/runner/work/1/s/src/OperationalInsights/OperationalInsights/Workspaces/SetAzureOperationalInsightsLinkedStorageAccountCommand.cs, Line: 58, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html



Project: Az.Portal
    #730 Path: /Users/runner/work/1/s/src/Portal/generated/runtime/Serialization/JsonSerializer.cs, Line: 315, Message: ReSharper: Type check and casts can be merged. See https://www.jetbrains.com/help/resharper/MergeCastWithTypeCheck.html / SonarQube: Duplicate casts should not be made. See https://rules.sonarsource.com/csharp/RSPEC-3247



Project: Az.PostgreSql
    #731 Path: /Users/runner/work/1/s/src/PostgreSql/generated/runtime/Serialization/JsonSerializer.cs, Line: 315, Message: ReSharper: Type check and casts can be merged. See https://www.jetbrains.com/help/resharper/MergeCastWithTypeCheck.html / SonarQube: Duplicate casts should not be made. See https://rules.sonarsource.com/csharp/RSPEC-3247



Project: PrivateDns
    #732 Path: /Users/runner/work/1/s/src/PrivateDns/PrivateDns/Models/PrivateDnsClient.cs, Line: 510, Message: https://www.jetbrains.com/help/resharper/MergeSequentialChecks.html



Project: RecoveryServices.Backup.Helpers
    #733 Path: /Users/runner/work/1/s/src/RecoveryServices/RecoveryServices.Backup.Helpers/Conversions/ConversionHelpers.cs, Line: 37, Message: https://www.jetbrains.com/help/resharper/MergeSequentialChecks.html
    #734 Path: /Users/runner/work/1/s/src/RecoveryServices/RecoveryServices.Backup.Helpers/Conversions/ConversionHelpers.cs, Line: 423, Message: https://www.jetbrains.com/help/resharper/MergeSequentialChecks.html
    #735 Path: /Users/runner/work/1/s/src/RecoveryServices/RecoveryServices.Backup.Helpers/Conversions/ConversionHelpers.cs, Line: 578, Message: https://www.jetbrains.com/help/resharper/MergeSequentialChecks.html
    #736 Path: /Users/runner/work/1/s/src/RecoveryServices/RecoveryServices.Backup.Helpers/Conversions/ConversionHelpers.cs, Line: 76, Message: https://www.jetbrains.com/help/resharper/MergeSequentialChecks.html



Project: RecoveryServices.Backup.Models
    #737 Path: /Users/runner/work/1/s/src/RecoveryServices/RecoveryServices.Backup.Models/AzureDbModels/AzureDbPolicy.cs, Line: 72, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #738 Path: /Users/runner/work/1/s/src/RecoveryServices/RecoveryServices.Backup.Models/AzureDbModels/AzureDbPolicy.cs, Line: 76, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #739 Path: /Users/runner/work/1/s/src/RecoveryServices/RecoveryServices.Backup.Models/AzureDbModels/AzureDbPolicy.cs, Line: 82, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #740 Path: /Users/runner/work/1/s/src/RecoveryServices/RecoveryServices.Backup.Models/AzureDbModels/AzureDbPolicy.cs, Line: 86, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #741 Path: /Users/runner/work/1/s/src/RecoveryServices/RecoveryServices.Backup.Models/CommonModels/PolicyRetentionObjects.cs, Line: 231, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #742 Path: /Users/runner/work/1/s/src/RecoveryServices/RecoveryServices.Backup.Models/CommonModels/PolicyRetentionObjects.cs, Line: 264, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #743 Path: /Users/runner/work/1/s/src/RecoveryServices/RecoveryServices.Backup.Models/CommonModels/PolicyRetentionObjects.cs, Line: 306, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #744 Path: /Users/runner/work/1/s/src/RecoveryServices/RecoveryServices.Backup.Models/CommonModels/PolicyRetentionObjects.cs, Line: 34, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #745 Path: /Users/runner/work/1/s/src/RecoveryServices/RecoveryServices.Backup.Models/CommonModels/PolicyRetentionObjects.cs, Line: 520, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #746 Path: /Users/runner/work/1/s/src/RecoveryServices/RecoveryServices.Backup.Models/CommonModels/PolicyRetentionObjects.cs, Line: 554, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #747 Path: /Users/runner/work/1/s/src/RecoveryServices/RecoveryServices.Backup.Models/CommonModels/PolicyRetentionObjects.cs, Line: 590, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #748 Path: /Users/runner/work/1/s/src/RecoveryServices/RecoveryServices.Backup.Models/CommonModels/PolicyScheduleObjects.cs, Line: 70, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html



Project: RecoveryServices.Backup.Providers
    #749 Path: /Users/runner/work/1/s/src/RecoveryServices/RecoveryServices.Backup.Providers/Providers/IaasVmPsBackupProvider.cs, Line: 1276, Message: ReSharper: ReplaceWithSingleCallToCount. / SonarQube "IEnumerable" LINQs should be simplified. See https://rules.sonarsource.com/csharp/RSPEC-2971
    #750 Path: /Users/runner/work/1/s/src/RecoveryServices/RecoveryServices.Backup.Providers/Providers/IaasVmPsBackupProvider.cs, Line: 1277, Message: ReSharper: Use '.Any()' to test whether this IEnumerable is empty or not. See ReSharper/UseMethodAny.0.html / SonarQube: "Any()" should be used to test for emptiness. See https://rules.sonarsource.com/csharp/RSPEC-1155
    #751 Path: /Users/runner/work/1/s/src/RecoveryServices/RecoveryServices.Backup.Providers/Providers/IaasVmPsBackupProvider.cs, Line: 558, Message: https://www.jetbrains.com/help/resharper/MergeSequentialChecks.html
    #752 Path: /Users/runner/work/1/s/src/RecoveryServices/RecoveryServices.Backup.Providers/Providers/IaasVmPsBackupProvider.cs, Line: 635, Message: https://www.jetbrains.com/help/resharper/MergeSequentialChecks.html



Project: RecoveryServices.Backup.ServiceClientAdapter
    #753 Path: /Users/runner/work/1/s/src/RecoveryServices/RecoveryServices.Backup.ServiceClientAdapter/QueryBuilder.cs, Line: 67, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #754 Path: /Users/runner/work/1/s/src/RecoveryServices/RecoveryServices.Backup.ServiceClientAdapter/QueryBuilder.cs, Line: 80, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #755 Path: /Users/runner/work/1/s/src/RecoveryServices/RecoveryServices.Backup.ServiceClientAdapter/QueryBuilder.cs, Line: 85, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #756 Path: /Users/runner/work/1/s/src/RecoveryServices/RecoveryServices.Backup.ServiceClientAdapter/QueryBuilder.cs, Line: 91, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #757 Path: /Users/runner/work/1/s/src/RecoveryServices/RecoveryServices.Backup.ServiceClientAdapter/StringExtensions.cs, Line: 30, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html



Project: RecoveryServices.Backup
    #758 Path: /Users/runner/work/1/s/src/RecoveryServices/RecoveryServices.Backup/Cmdlets/Item/EnableAzureRmRecoveryServicesBackupProtection.cs, Line: 181, Message: ReSharper: ReplaceWithSingleCallToCount. / SonarQube "IEnumerable" LINQs should be simplified. See https://rules.sonarsource.com/csharp/RSPEC-2971
    #759 Path: /Users/runner/work/1/s/src/RecoveryServices/RecoveryServices.Backup/Cmdlets/Jobs/WaitAzureRmRecoveryServicesBackupJob.cs, Line: 169, Message: ReSharper: Type check and casts can be merged. See https://www.jetbrains.com/help/resharper/MergeCastWithTypeCheck.html / SonarQube: Duplicate casts should not be made. See https://rules.sonarsource.com/csharp/RSPEC-3247
    #760 Path: /Users/runner/work/1/s/src/RecoveryServices/RecoveryServices.Backup/Cmdlets/RecoveryPoint/GetAzureRmRecoveryServicesBackupRecoveryPoint.cs, Line: 181, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #761 Path: /Users/runner/work/1/s/src/RecoveryServices/RecoveryServices.Backup/Cmdlets/Restore/GetAzureRmRecoveryServicesBackupWorkloadRecoveryConfig.cs, Line: 277, Message: ReSharper: ReplaceWithSingleCallToCount. / SonarQube "IEnumerable" LINQs should be simplified. See https://rules.sonarsource.com/csharp/RSPEC-2971



Project: RecoveryServices.SiteRecovery
    #762 Path: /Users/runner/work/1/s/src/RecoveryServices/RecoveryServices.SiteRecovery/Common/AsrCmdletBase.cs, Line: 119, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #763 Path: /Users/runner/work/1/s/src/RecoveryServices/RecoveryServices.SiteRecovery/Common/AsrCmdletBase.cs, Line: 258, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #764 Path: /Users/runner/work/1/s/src/RecoveryServices/RecoveryServices.SiteRecovery/Common/PSAsrClient.cs, Line: 520, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #765 Path: /Users/runner/work/1/s/src/RecoveryServices/RecoveryServices.SiteRecovery/Models/PSEvent.cs, Line: 153, Message: ReSharper: Type check and casts can be merged. See https://www.jetbrains.com/help/resharper/MergeCastWithTypeCheck.html / SonarQube: Duplicate casts should not be made. See https://rules.sonarsource.com/csharp/RSPEC-3247
    #766 Path: /Users/runner/work/1/s/src/RecoveryServices/RecoveryServices.SiteRecovery/Models/PSEvent.cs, Line: 169, Message: ReSharper: Type check and casts can be merged. See https://www.jetbrains.com/help/resharper/MergeCastWithTypeCheck.html / SonarQube: Duplicate casts should not be made. See https://rules.sonarsource.com/csharp/RSPEC-3247
    #767 Path: /Users/runner/work/1/s/src/RecoveryServices/RecoveryServices.SiteRecovery/Models/PSEvent.cs, Line: 6, Message: ReSharper: Type check and casts can be merged. See https://www.jetbrains.com/help/resharper/MergeCastWithTypeCheck.html / SonarQube: Duplicate casts should not be made. See https://rules.sonarsource.com/csharp/RSPEC-3247
    #768 Path: /Users/runner/work/1/s/src/RecoveryServices/RecoveryServices.SiteRecovery/Models/PSEvent.cs, Line: 6, Message: ReSharper: Type check and casts can be merged. See https://www.jetbrains.com/help/resharper/MergeCastWithTypeCheck.html / SonarQube: Duplicate casts should not be made. See https://rules.sonarsource.com/csharp/RSPEC-3247
    #769 Path: /Users/runner/work/1/s/src/RecoveryServices/RecoveryServices.SiteRecovery/Models/PSEvent.cs, Line: 6, Message: ReSharper: Type check and casts can be merged. See https://www.jetbrains.com/help/resharper/MergeCastWithTypeCheck.html / SonarQube: Duplicate casts should not be made. See https://rules.sonarsource.com/csharp/RSPEC-3247
    #770 Path: /Users/runner/work/1/s/src/RecoveryServices/RecoveryServices.SiteRecovery/Models/PSRecoveryPlanObjects.cs, Line: 398, Message: ReSharper: Type check and casts can be merged. See https://www.jetbrains.com/help/resharper/MergeCastWithTypeCheck.html / SonarQube: Duplicate casts should not be made. See https://rules.sonarsource.com/csharp/RSPEC-3247
    #771 Path: /Users/runner/work/1/s/src/RecoveryServices/RecoveryServices.SiteRecovery/RecoveryPlan/NewAzureRmRecoveryServicesAsrRecoveryPlan.cs, Line: 378, Message: ReSharper: Type check and casts can be merged. See https://www.jetbrains.com/help/resharper/MergeCastWithTypeCheck.html / SonarQube: Duplicate casts should not be made. See https://rules.sonarsource.com/csharp/RSPEC-3247
    #772 Path: /Users/runner/work/1/s/src/RecoveryServices/RecoveryServices.SiteRecovery/ReplicationProtectedItem/SetAzureRmRecoveryServicesAsrReplicationProtectedItem.cs, Line: 621, Message: ReSharper: Use '.Any()' to test whether this IEnumerable is empty or not. See ReSharper/UseMethodAny.0.html / SonarQube: "Any()" should be used to test for emptiness. See https://rules.sonarsource.com/csharp/RSPEC-1155
    #773 Path: /Users/runner/work/1/s/src/RecoveryServices/RecoveryServices.SiteRecovery/ReplicationProtectedItem/SetAzureRmRecoveryServicesAsrReplicationProtectedItem.cs, Line: 642, Message: ReSharper: ReplaceWithSingleCallToCount. / SonarQube "IEnumerable" LINQs should be simplified. See https://rules.sonarsource.com/csharp/RSPEC-2971
    #774 Path: /Users/runner/work/1/s/src/RecoveryServices/RecoveryServices.SiteRecovery/ReplicationProtectedItem/SetAzureRmRecoveryServicesAsrReplicationProtectedItem.cs, Line: 648, Message: ReSharper: ReplaceWithSingleCallToCount. / SonarQube "IEnumerable" LINQs should be simplified. See https://rules.sonarsource.com/csharp/RSPEC-2971
    #775 Path: /Users/runner/work/1/s/src/RecoveryServices/RecoveryServices.SiteRecovery/ReplicationProtectedItem/SetAzureRmRecoveryServicesAsrReplicationProtectedItem.cs, Line: 737, Message: ReSharper: Use '.Any()' to test whether this IEnumerable is empty or not. See ReSharper/UseMethodAny.0.html / SonarQube: "Any()" should be used to test for emptiness. See https://rules.sonarsource.com/csharp/RSPEC-1155
    #776 Path: /Users/runner/work/1/s/src/RecoveryServices/RecoveryServices.SiteRecovery/Utilities/Utilities.cs, Line: 263, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #777 Path: /Users/runner/work/1/s/src/RecoveryServices/RecoveryServices.SiteRecovery/Utilities/Utilities.cs, Line: 405, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html



Project: RecoveryServices
    #778 Path: /Users/runner/work/1/s/src/RecoveryServices/RecoveryServices/Common/PSRecoveryServicesVaultExtendedInfoClient.cs, Line: 150, Message: https://www.jetbrains.com/help/resharper/MergeSequentialChecks.html
    #779 Path: /Users/runner/work/1/s/src/RecoveryServices/RecoveryServices/Common/PSRecoveryServicesVaultExtendedInfoClient.cs, Line: 94, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #780 Path: /Users/runner/work/1/s/src/RecoveryServices/RecoveryServices/Common/RecoveryServicesCmdletBase.cs, Line: 74, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #781 Path: /Users/runner/work/1/s/src/RecoveryServices/RecoveryServices/Utilities/CertUtils.cs, Line: 211, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #782 Path: /Users/runner/work/1/s/src/RecoveryServices/RecoveryServices/Vault/GetAzureRMRecoveryServicesVaultSettingsFile.cs, Line: 250, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #783 Path: /Users/runner/work/1/s/src/RecoveryServices/RecoveryServices/Vault/GetAzureRMRecoveryServicesVaultSettingsFile.cs, Line: 321, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #784 Path: /Users/runner/work/1/s/src/RecoveryServices/RecoveryServices/Vault/GetAzureRMRecoveryServicesVaultSettingsFile.cs, Line: 456, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #785 Path: /Users/runner/work/1/s/src/RecoveryServices/RecoveryServices/Vault/GetAzureRMRecoveryServicesVaultSettingsFile.cs, Line: 460, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #786 Path: /Users/runner/work/1/s/src/RecoveryServices/RecoveryServices/Vault/GetAzureRMRecoveryServicesVaultSettingsFile.cs, Line: 624, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html



Project: Az.RedisEnterpriseCache
    #787 Path: /Users/runner/work/1/s/src/RedisEnterpriseCache/generated/runtime/Serialization/JsonSerializer.cs, Line: 315, Message: ReSharper: Type check and casts can be merged. See https://www.jetbrains.com/help/resharper/MergeCastWithTypeCheck.html / SonarQube: Duplicate casts should not be made. See https://rules.sonarsource.com/csharp/RSPEC-3247



Project: Relay
    #788 Path: /Users/runner/work/1/s/src/Relay/Relay/Cmdlets/HybridConnections/NewAzureRelayHybridConnections.cs, Line: 91, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #789 Path: /Users/runner/work/1/s/src/Relay/Relay/Cmdlets/Namespace/NewAzureRelayNamespace.cs, Line: 82, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #790 Path: /Users/runner/work/1/s/src/Relay/Relay/Cmdlets/WcfRelay/NewAzureWcfRelay.cs, Line: 110, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #791 Path: /Users/runner/work/1/s/src/Relay/Relay/Utilities/RelayClient.cs, Line: 106, Message: ReSharper: Use '.Any()' to test whether this IEnumerable is empty or not. See ReSharper/UseMethodAny.0.html / SonarQube: "Any()" should be used to test for emptiness. See https://rules.sonarsource.com/csharp/RSPEC-1155



Project: Reservations
    #792 Path: /Users/runner/work/1/s/src/Reservations/Reservations/Cmdlets/MergeReservation.cs, Line: 56, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #793 Path: /Users/runner/work/1/s/src/Reservations/Reservations/Cmdlets/SplitReservation.cs, Line: 63, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html



Project: Az.ResourceGraph
    #794 Path: /Users/runner/work/1/s/src/ResourceGraph/ResourceGraph.Autorest/generated/runtime/Serialization/JsonSerializer.cs, Line: 315, Message: ReSharper: Type check and casts can be merged. See https://www.jetbrains.com/help/resharper/MergeCastWithTypeCheck.html / SonarQube: Duplicate casts should not be made. See https://rules.sonarsource.com/csharp/RSPEC-3247



Project: ResourceGraph
    #795 Path: /Users/runner/work/1/s/src/ResourceGraph/ResourceGraph/Cmdlets/SearchAzureRmGraph.cs, Line: 1, Message: ReSharper: Use 'String.IsNullOrEmpty'. See https://www.jetbrains.com/help/resharper/ReplaceWithStringIsNullOrEmpty.html / SonarQube: "string.IsNullOrEmpty" should be used. See https://rules.sonarsource.com/csharp/RSPEC-3256
    #796 Path: /Users/runner/work/1/s/src/ResourceGraph/ResourceGraph/Cmdlets/SearchAzureRmGraph.cs, Line: 194, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html



Project: Az.ResourceMover
    #797 Path: /Users/runner/work/1/s/src/ResourceMover/generated/runtime/Serialization/JsonSerializer.cs, Line: 315, Message: ReSharper: Type check and casts can be merged. See https://www.jetbrains.com/help/resharper/MergeCastWithTypeCheck.html / SonarQube: Duplicate casts should not be made. See https://rules.sonarsource.com/csharp/RSPEC-3247



Project: ResourceManager
    #798 Path: /Users/runner/work/1/s/src/Resources/ResourceManager/Components/ApiVersionHelper.cs, Line: 117, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #799 Path: /Users/runner/work/1/s/src/Resources/ResourceManager/Components/ApiVersionHelper.cs, Line: 246, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #800 Path: /Users/runner/work/1/s/src/Resources/ResourceManager/Components/LongRunningOperationHelper.cs, Line: 135, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #801 Path: /Users/runner/work/1/s/src/Resources/ResourceManager/Components/LongRunningOperationHelper.cs, Line: 150, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #802 Path: /Users/runner/work/1/s/src/Resources/ResourceManager/Components/LongRunningOperationHelper.cs, Line: 202, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #803 Path: /Users/runner/work/1/s/src/Resources/ResourceManager/Components/ResourceIdUtility.cs, Line: 112, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #804 Path: /Users/runner/work/1/s/src/Resources/ResourceManager/Components/ResourceIdUtility.cs, Line: 144, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #805 Path: /Users/runner/work/1/s/src/Resources/ResourceManager/Components/ResourceIdUtility.cs, Line: 414, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #806 Path: /Users/runner/work/1/s/src/Resources/ResourceManager/Components/ResourceIdUtility.cs, Line: 447, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #807 Path: /Users/runner/work/1/s/src/Resources/ResourceManager/Extensions/PsObjectExtensions.cs, Line: 104, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #808 Path: /Users/runner/work/1/s/src/Resources/ResourceManager/Extensions/PsObjectExtensions.cs, Line: 124, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #809 Path: /Users/runner/work/1/s/src/Resources/ResourceManager/Extensions/PsObjectExtensions.cs, Line: 69, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #810 Path: /Users/runner/work/1/s/src/Resources/ResourceManager/Handlers/RetryHandler.cs, Line: 84, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #811 Path: /Users/runner/work/1/s/src/Resources/ResourceManager/Implementation/CmdletBase/DeploymentScriptCmdletBase.cs, Line: 57, Message: https://www.jetbrains.com/help/resharper/MergeSequentialChecks.html
    #812 Path: /Users/runner/work/1/s/src/Resources/ResourceManager/Implementation/CmdletBase/ResourceWithParameterCmdletBase.cs, Line: 336, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #813 Path: /Users/runner/work/1/s/src/Resources/ResourceManager/Implementation/CmdletBase/TemplateSpecCmdletBase.cs, Line: 51, Message: https://www.jetbrains.com/help/resharper/MergeSequentialChecks.html
    #814 Path: /Users/runner/work/1/s/src/Resources/ResourceManager/Implementation/Features/GetAzureProviderFeatureCmdlet.cs, Line: 75, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #815 Path: /Users/runner/work/1/s/src/Resources/ResourceManager/Implementation/Lock/NewAzureResourceLockCmdlet.cs, Line: 91, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #816 Path: /Users/runner/work/1/s/src/Resources/ResourceManager/Implementation/Lock/RemoveAzureResourceLockCmdlet.cs, Line: 52, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #817 Path: /Users/runner/work/1/s/src/Resources/ResourceManager/Implementation/Lock/RemoveAzureResourceLockCmdlet.cs, Line: 66, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #818 Path: /Users/runner/work/1/s/src/Resources/ResourceManager/Implementation/Lock/RemoveAzureResourceLockCmdlet.cs, Line: 74, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #819 Path: /Users/runner/work/1/s/src/Resources/ResourceManager/Implementation/Lock/ResourceLockManagementCmdletBase.cs, Line: 129, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #820 Path: /Users/runner/work/1/s/src/Resources/ResourceManager/Implementation/ManagedApplications/GetAzureManagedApplication.cs, Line: 134, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #821 Path: /Users/runner/work/1/s/src/Resources/ResourceManager/Implementation/ManagedApplications/GetAzureManagedApplication.cs, Line: 140, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #822 Path: /Users/runner/work/1/s/src/Resources/ResourceManager/Implementation/ManagedApplications/GetAzureManagedApplication.cs, Line: 147, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #823 Path: /Users/runner/work/1/s/src/Resources/ResourceManager/Implementation/ManagedApplications/GetAzureManagedApplicationDefinition.cs, Line: 129, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #824 Path: /Users/runner/work/1/s/src/Resources/ResourceManager/Implementation/ManagedApplications/GetAzureManagedApplicationDefinition.cs, Line: 136, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #825 Path: /Users/runner/work/1/s/src/Resources/ResourceManager/Implementation/ManagedApplications/NewAzureManagedApplication.cs, Line: 128, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #826 Path: /Users/runner/work/1/s/src/Resources/ResourceManager/Implementation/ManagedApplications/NewAzureManagedApplication.cs, Line: 142, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #827 Path: /Users/runner/work/1/s/src/Resources/ResourceManager/Implementation/ManagedApplications/NewAzureManagedApplication.cs, Line: 162, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #828 Path: /Users/runner/work/1/s/src/Resources/ResourceManager/Implementation/ManagedApplications/NewAzureManagedApplicationDefinition.cs, Line: 150, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #829 Path: /Users/runner/work/1/s/src/Resources/ResourceManager/Implementation/ManagedApplications/NewAzureManagedApplicationDefinition.cs, Line: 163, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #830 Path: /Users/runner/work/1/s/src/Resources/ResourceManager/Implementation/ManagedApplications/RemoveAzureManagedApplication.cs, Line: 106, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #831 Path: /Users/runner/work/1/s/src/Resources/ResourceManager/Implementation/ManagedApplications/RemoveAzureManagedApplication.cs, Line: 121, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #832 Path: /Users/runner/work/1/s/src/Resources/ResourceManager/Implementation/ManagedApplications/RemoveAzureManagedApplication.cs, Line: 87, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #833 Path: /Users/runner/work/1/s/src/Resources/ResourceManager/Implementation/ManagedApplications/RemoveAzureManagedApplicationDefinition.cs, Line: 106, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #834 Path: /Users/runner/work/1/s/src/Resources/ResourceManager/Implementation/ManagedApplications/RemoveAzureManagedApplicationDefinition.cs, Line: 121, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #835 Path: /Users/runner/work/1/s/src/Resources/ResourceManager/Implementation/ManagedApplications/RemoveAzureManagedApplicationDefinition.cs, Line: 87, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #836 Path: /Users/runner/work/1/s/src/Resources/ResourceManager/Implementation/ManagedApplications/SetAzureManagedApplication.cs, Line: 151, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #837 Path: /Users/runner/work/1/s/src/Resources/ResourceManager/Implementation/ManagedApplications/SetAzureManagedApplication.cs, Line: 165, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #838 Path: /Users/runner/work/1/s/src/Resources/ResourceManager/Implementation/ManagedApplications/SetAzureManagedApplication.cs, Line: 234, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #839 Path: /Users/runner/work/1/s/src/Resources/ResourceManager/Implementation/ManagedApplications/SetAzureManagedApplicationDefinition.cs, Line: 133, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #840 Path: /Users/runner/work/1/s/src/Resources/ResourceManager/Implementation/ManagedApplications/SetAzureManagedApplicationDefinition.cs, Line: 146, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #841 Path: /Users/runner/work/1/s/src/Resources/ResourceManager/Implementation/Policy/NewAzurePolicyAssignment.cs, Line: 176, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #842 Path: /Users/runner/work/1/s/src/Resources/ResourceManager/Implementation/Policy/NewAzurePolicyAssignment.cs, Line: 242, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #843 Path: /Users/runner/work/1/s/src/Resources/ResourceManager/Implementation/Policy/NewAzurePolicyAssignment.cs, Line: 246, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #844 Path: /Users/runner/work/1/s/src/Resources/ResourceManager/Implementation/Policy/NewAzurePolicyDefinition.cs, Line: 122, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #845 Path: /Users/runner/work/1/s/src/Resources/ResourceManager/Implementation/Policy/NewAzurePolicySetDefinition.cs, Line: 123, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #846 Path: /Users/runner/work/1/s/src/Resources/ResourceManager/Implementation/Policy/PolicyCmdletBase.cs, Line: 369, Message: ReSharper: Use '.Any()' to test whether this IEnumerable is empty or not. See ReSharper/UseMethodAny.0.html / SonarQube: "Any()" should be used to test for emptiness. See https://rules.sonarsource.com/csharp/RSPEC-1155
    #847 Path: /Users/runner/work/1/s/src/Resources/ResourceManager/Implementation/Policy/RemoveAzurePolicyAssignment.cs, Line: 93, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #848 Path: /Users/runner/work/1/s/src/Resources/ResourceManager/Implementation/Policy/RemoveAzurePolicyDefinition.cs, Line: 111, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #849 Path: /Users/runner/work/1/s/src/Resources/ResourceManager/Implementation/Policy/RemoveAzurePolicyDefinition.cs, Line: 92, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #850 Path: /Users/runner/work/1/s/src/Resources/ResourceManager/Implementation/Policy/RemoveAzurePolicySetDefinition.cs, Line: 111, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #851 Path: /Users/runner/work/1/s/src/Resources/ResourceManager/Implementation/Policy/RemoveAzurePolicySetDefinition.cs, Line: 92, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #852 Path: /Users/runner/work/1/s/src/Resources/ResourceManager/Implementation/Policy/SetAzurePolicyAssignment.cs, Line: 157, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #853 Path: /Users/runner/work/1/s/src/Resources/ResourceManager/Implementation/Policy/SetAzurePolicyDefinition.cs, Line: 137, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #854 Path: /Users/runner/work/1/s/src/Resources/ResourceManager/Implementation/Policy/SetAzurePolicySetDefinition.cs, Line: 137, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #855 Path: /Users/runner/work/1/s/src/Resources/ResourceManager/Implementation/Resource/GetAzureResourceCmdlet.cs, Line: 198, Message: ReSharper: ReplaceWithSingleCallToAny. / SonarQube "IEnumerable" LINQs should be simplified. See https://rules.sonarsource.com/csharp/RSPEC-2971
    #856 Path: /Users/runner/work/1/s/src/Resources/ResourceManager/Implementation/Resource/GetAzureResourceCmdlet.cs, Line: 205, Message: ReSharper: ReplaceWithSingleCallToAny. / SonarQube "IEnumerable" LINQs should be simplified. See https://rules.sonarsource.com/csharp/RSPEC-2971
    #857 Path: /Users/runner/work/1/s/src/Resources/ResourceManager/Implementation/Resource/GetAzureResourceCmdlet.cs, Line: 222, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #858 Path: /Users/runner/work/1/s/src/Resources/ResourceManager/Implementation/Resource/InvokeAzureResourceActionCmdlet.cs, Line: 82, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #859 Path: /Users/runner/work/1/s/src/Resources/ResourceManager/Implementation/Resource/MoveAzureResourceCmdlet.cs, Line: 117, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #860 Path: /Users/runner/work/1/s/src/Resources/ResourceManager/Implementation/Resource/MoveAzureResourceCmdlet.cs, Line: 130, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #861 Path: /Users/runner/work/1/s/src/Resources/ResourceManager/Implementation/Resource/MoveAzureResourceCmdlet.cs, Line: 165, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #862 Path: /Users/runner/work/1/s/src/Resources/ResourceManager/Implementation/Resource/NewAzureResourceCmdlet.cs, Line: 122, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #863 Path: /Users/runner/work/1/s/src/Resources/ResourceManager/Implementation/Resource/RemoveAzureResourceCmdlet.cs, Line: 39, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #864 Path: /Users/runner/work/1/s/src/Resources/ResourceManager/Implementation/Resource/RemoveAzureResourceCmdlet.cs, Line: 60, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #865 Path: /Users/runner/work/1/s/src/Resources/ResourceManager/Implementation/Resource/SetAzureResourceCmdlet.cs, Line: 139, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #866 Path: /Users/runner/work/1/s/src/Resources/ResourceManager/Implementation/ResourceGroups/ExportAzureResourceGroupCmdlet.cs, Line: 130, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #867 Path: /Users/runner/work/1/s/src/Resources/ResourceManager/Implementation/ResourceGroups/ExportAzureResourceGroupCmdlet.cs, Line: 133, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #868 Path: /Users/runner/work/1/s/src/Resources/ResourceManager/Implementation/ResourceGroups/ExportAzureResourceGroupCmdlet.cs, Line: 160, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #869 Path: /Users/runner/work/1/s/src/Resources/ResourceManager/Implementation/ResourceGroups/ExportAzureResourceGroupCmdlet.cs, Line: 172, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #870 Path: /Users/runner/work/1/s/src/Resources/ResourceManager/Implementation/ResourceGroups/ExportAzureResourceGroupCmdlet.cs, Line: 175, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #871 Path: /Users/runner/work/1/s/src/Resources/ResourceManager/RestClients/ResourceManagerRestRestClient.cs, Line: 125, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #872 Path: /Users/runner/work/1/s/src/Resources/ResourceManager/RestClients/ResourceManagerRestRestClient.cs, Line: 126, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #873 Path: /Users/runner/work/1/s/src/Resources/ResourceManager/RestClients/ResourceManagerRestRestClient.cs, Line: 161, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #874 Path: /Users/runner/work/1/s/src/Resources/ResourceManager/RestClients/ResourceManagerRestRestClient.cs, Line: 162, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #875 Path: /Users/runner/work/1/s/src/Resources/ResourceManager/RestClients/ResourceManagerRestRestClient.cs, Line: 450, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #876 Path: /Users/runner/work/1/s/src/Resources/ResourceManager/RestClients/ResourceManagerRestRestClient.cs, Line: 91, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #877 Path: /Users/runner/work/1/s/src/Resources/ResourceManager/RestClients/ResourceManagerRestRestClient.cs, Line: 92, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #878 Path: /Users/runner/work/1/s/src/Resources/ResourceManager/SdkClient/ResourceManagerSdkClient.cs, Line: 1738, Message: ReSharper: ReplaceWithSingleCallToFirstOrDefault. / SonarQube "IEnumerable" LINQs should be simplified. See https://rules.sonarsource.com/csharp/RSPEC-2971
    #879 Path: /Users/runner/work/1/s/src/Resources/ResourceManager/SdkClient/ResourceManagerSdkClient.cs, Line: 1739, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #880 Path: /Users/runner/work/1/s/src/Resources/ResourceManager/SdkClient/ResourceManagerSdkClient.cs, Line: 1744, Message: ReSharper: ReplaceWithSingleCallToFirstOrDefault. / SonarQube "IEnumerable" LINQs should be simplified. See https://rules.sonarsource.com/csharp/RSPEC-2971
    #881 Path: /Users/runner/work/1/s/src/Resources/ResourceManager/SdkExtensions/ResourcesExtensions.cs, Line: 188, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #882 Path: /Users/runner/work/1/s/src/Resources/ResourceManager/SdkExtensions/ResourcesExtensions.cs, Line: 189, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html



Project: Resources
    #883 Path: /Users/runner/work/1/s/src/Resources/Resources/ActiveDirectory/Cmdlets/AddAzureADGroupMemberCommand.cs, Line: 87, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #884 Path: /Users/runner/work/1/s/src/Resources/Resources/ActiveDirectory/Cmdlets/AddAzureADGroupMemberCommand.cs, Line: 93, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #885 Path: /Users/runner/work/1/s/src/Resources/Resources/ActiveDirectory/Cmdlets/NewAzureADAppCredentialCommand.cs, Line: 119, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #886 Path: /Users/runner/work/1/s/src/Resources/Resources/ActiveDirectory/Cmdlets/NewAzureADAppCredentialCommand.cs, Line: 136, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #887 Path: /Users/runner/work/1/s/src/Resources/Resources/ActiveDirectory/Cmdlets/NewAzureADApplicationCommand.cs, Line: 186, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #888 Path: /Users/runner/work/1/s/src/Resources/Resources/ActiveDirectory/Cmdlets/NewAzureADGroupCommand.cs, Line: 53, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #889 Path: /Users/runner/work/1/s/src/Resources/Resources/ActiveDirectory/Cmdlets/NewAzureADServicePrincipalCommand.cs, Line: 230, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #890 Path: /Users/runner/work/1/s/src/Resources/Resources/ActiveDirectory/Cmdlets/NewAzureADServicePrincipalCommand.cs, Line: 243, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #891 Path: /Users/runner/work/1/s/src/Resources/Resources/ActiveDirectory/Cmdlets/NewAzureADServicePrincipalCommand.cs, Line: 270, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #892 Path: /Users/runner/work/1/s/src/Resources/Resources/ActiveDirectory/Cmdlets/NewAzureADServicePrincipalCommand.cs, Line: 302, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #893 Path: /Users/runner/work/1/s/src/Resources/Resources/ActiveDirectory/Cmdlets/NewAzureADServicePrincipalCommand.cs, Line: 306, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #894 Path: /Users/runner/work/1/s/src/Resources/Resources/ActiveDirectory/Cmdlets/NewAzureADServicePrincipalCommand.cs, Line: 324, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #895 Path: /Users/runner/work/1/s/src/Resources/Resources/ActiveDirectory/Cmdlets/NewAzureADServicePrincipalCommand.cs, Line: 325, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #896 Path: /Users/runner/work/1/s/src/Resources/Resources/ActiveDirectory/Cmdlets/NewAzureADServicePrincipalCommand.cs, Line: 333, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #897 Path: /Users/runner/work/1/s/src/Resources/Resources/ActiveDirectory/Cmdlets/NewAzureADServicePrincipalCommand.cs, Line: 358, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #898 Path: /Users/runner/work/1/s/src/Resources/Resources/ActiveDirectory/Cmdlets/NewAzureADServicePrincipalCommand.cs, Line: 384, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #899 Path: /Users/runner/work/1/s/src/Resources/Resources/ActiveDirectory/Cmdlets/NewAzureADSpCredentialCommand.cs, Line: 107, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #900 Path: /Users/runner/work/1/s/src/Resources/Resources/ActiveDirectory/Cmdlets/NewAzureADSpCredentialCommand.cs, Line: 126, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #901 Path: /Users/runner/work/1/s/src/Resources/Resources/ActiveDirectory/Cmdlets/NewAzureADUserCommand.cs, Line: 75, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #902 Path: /Users/runner/work/1/s/src/Resources/Resources/ActiveDirectory/Cmdlets/RemoveAzureADGroupMemberCommand.cs, Line: 86, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #903 Path: /Users/runner/work/1/s/src/Resources/Resources/ActiveDirectory/Cmdlets/RemoveAzureADServicePrincipalCommand.cs, Line: 95, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #904 Path: /Users/runner/work/1/s/src/Resources/Resources/ActiveDirectory/Cmdlets/UpdateAzureADApplicationCommand.cs, Line: 108, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #905 Path: /Users/runner/work/1/s/src/Resources/Resources/ActiveDirectory/Cmdlets/UpdateAzureADServicePrincipalCommand.cs, Line: 112, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #906 Path: /Users/runner/work/1/s/src/Resources/Resources/ActiveDirectory/Cmdlets/UpdateAzureADServicePrincipalCommand.cs, Line: 126, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #907 Path: /Users/runner/work/1/s/src/Resources/Resources/ActiveDirectory/Cmdlets/UpdateAzureADUserCommand.cs, Line: 112, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #908 Path: /Users/runner/work/1/s/src/Resources/Resources/ActiveDirectory/Models/ActiveDirectoryClient.cs, Line: 303, Message: ReSharper: Use '.Any()' to test whether this IEnumerable is empty or not. See ReSharper/UseMethodAny.0.html / SonarQube: "Any()" should be used to test for emptiness. See https://rules.sonarsource.com/csharp/RSPEC-1155
    #909 Path: /Users/runner/work/1/s/src/Resources/Resources/ActiveDirectory/Models/ActiveDirectoryClient.cs, Line: 319, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #910 Path: /Users/runner/work/1/s/src/Resources/Resources/ActiveDirectory/Models/ActiveDirectoryClient.cs, Line: 394, Message: https://www.jetbrains.com/help/resharper/MergeSequentialChecks.html
    #911 Path: /Users/runner/work/1/s/src/Resources/Resources/Gallery/ItemOperations.cs, Line: 497, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #912 Path: /Users/runner/work/1/s/src/Resources/Resources/Gallery/ItemOperations.cs, Line: 505, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #913 Path: /Users/runner/work/1/s/src/Resources/Resources/Gallery/ItemOperations.cs, Line: 547, Message: https://www.jetbrains.com/help/resharper/MergeSequentialChecks.html
    #914 Path: /Users/runner/work/1/s/src/Resources/Resources/Gallery/ItemOperations.cs, Line: 555, Message: https://www.jetbrains.com/help/resharper/MergeSequentialChecks.html
    #915 Path: /Users/runner/work/1/s/src/Resources/Resources/Gallery/ItemOperations.cs, Line: 983, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #916 Path: /Users/runner/work/1/s/src/Resources/Resources/Gallery/ItemOperations.cs, Line: 991, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #917 Path: /Users/runner/work/1/s/src/Resources/Resources/Models.Authorization/AuthorizationClientExtensions.cs, Line: 260, Message: ReSharper: Type check and casts can be merged. See https://www.jetbrains.com/help/resharper/MergeCastWithTypeCheck.html / SonarQube: Duplicate casts should not be made. See https://rules.sonarsource.com/csharp/RSPEC-3247
    #918 Path: /Users/runner/work/1/s/src/Resources/Resources/Models.ResourceGroups/PSDeploymentEventData.cs, Line: 73, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #919 Path: /Users/runner/work/1/s/src/Resources/Resources/Models.ResourceGroups/PSDeploymentEventData.cs, Line: 92, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #920 Path: /Users/runner/work/1/s/src/Resources/Resources/Models.ResourceGroups/ResourceClient.cs, Line: 205, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #921 Path: /Users/runner/work/1/s/src/Resources/Resources/Models.ResourceGroups/ResourceClient.cs, Line: 253, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #922 Path: /Users/runner/work/1/s/src/Resources/Resources/Models.ResourceGroups/ResourcesExtensions.cs, Line: 90, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #923 Path: /Users/runner/work/1/s/src/Resources/Resources/Models.ResourceGroups/ResourcesExtensions.cs, Line: 91, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #924 Path: /Users/runner/work/1/s/src/Resources/Resources/RoleAssignments/NewAzureRoleAssignmentCommand.cs, Line: 238, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #925 Path: /Users/runner/work/1/s/src/Resources/Resources/RoleAssignments/SetAzureRoleAssignmentCommand.cs, Line: 58, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #926 Path: /Users/runner/work/1/s/src/Resources/Resources/RoleDefinitions/NewAzureRoleDefinitionCommand.cs, Line: 50, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #927 Path: /Users/runner/work/1/s/src/Resources/Resources/RoleDefinitions/SetAzureRoleDefinitionCommand.cs, Line: 47, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html



Project: Tags
    #928 Path: /Users/runner/work/1/s/src/Resources/Tags/Client/TagsClient.cs, Line: 117, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html



Project: Search
    #929 Path: /Users/runner/work/1/s/src/Search/Search/SearchService/SearchServiceBaseCmdlet.cs, Line: 124, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #930 Path: /Users/runner/work/1/s/src/Search/Search/SearchService/SearchServiceBaseCmdlet.cs, Line: 97, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html



Project: Security
    #931 Path: /Users/runner/work/1/s/src/Security/Security/Models/ExternalSecuritySolutions/PSSecurityExternalSecuritySolutionConverters.cs, Line: 27, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #932 Path: /Users/runner/work/1/s/src/Security/Security/Models/ExternalSecuritySolutions/PSSecurityExternalSecuritySolutionConverters.cs, Line: 34, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #933 Path: /Users/runner/work/1/s/src/Security/Security/Models/ExternalSecuritySolutions/PSSecurityExternalSecuritySolutionConverters.cs, Line: 41, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html



Project: SecurityInsights
    #934 Path: /Users/runner/work/1/s/src/SecurityInsights/SecurityInsights/Cmdlets/Actions/UpdateAlertRuleActions.cs, Line: 102, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #935 Path: /Users/runner/work/1/s/src/SecurityInsights/SecurityInsights/Cmdlets/Actions/UpdateAlertRuleActions.cs, Line: 111, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #936 Path: /Users/runner/work/1/s/src/SecurityInsights/SecurityInsights/Cmdlets/AlertRules/UpdateAlertRules.cs, Line: 160, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #937 Path: /Users/runner/work/1/s/src/SecurityInsights/SecurityInsights/Cmdlets/AlertRules/UpdateAlertRules.cs, Line: 255, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #938 Path: /Users/runner/work/1/s/src/SecurityInsights/SecurityInsights/Cmdlets/Bookmarks/UpdateBookmarks.cs, Line: 112, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #939 Path: /Users/runner/work/1/s/src/SecurityInsights/SecurityInsights/Cmdlets/Bookmarks/UpdateBookmarks.cs, Line: 99, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #940 Path: /Users/runner/work/1/s/src/SecurityInsights/SecurityInsights/Cmdlets/DataConnectors/UpdateDataConnectors.cs, Line: 121, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #941 Path: /Users/runner/work/1/s/src/SecurityInsights/SecurityInsights/Cmdlets/DataConnectors/UpdateDataConnectors.cs, Line: 208, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #942 Path: /Users/runner/work/1/s/src/SecurityInsights/SecurityInsights/Cmdlets/Incidents/UpdateIncidents.cs, Line: 112, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #943 Path: /Users/runner/work/1/s/src/SecurityInsights/SecurityInsights/Cmdlets/Incidents/UpdateIncidents.cs, Line: 126, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #944 Path: /Users/runner/work/1/s/src/SecurityInsights/SecurityInsights/Models/AlertRules/PSSentinelAlertRulesConvertors.cs, Line: 131, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #945 Path: /Users/runner/work/1/s/src/SecurityInsights/SecurityInsights/Models/AlertRules/PSSentinelAlertRulesConvertors.cs, Line: 138, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #946 Path: /Users/runner/work/1/s/src/SecurityInsights/SecurityInsights/Models/AlertRules/PSSentinelAlertRulesConvertors.cs, Line: 145, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #947 Path: /Users/runner/work/1/s/src/SecurityInsights/SecurityInsights/Models/AlertRules/PSSentinelAlertRulesConvertors.cs, Line: 29, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #948 Path: /Users/runner/work/1/s/src/SecurityInsights/SecurityInsights/Models/AlertRules/PSSentinelAlertRulesConvertors.cs, Line: 36, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #949 Path: /Users/runner/work/1/s/src/SecurityInsights/SecurityInsights/Models/AlertRules/PSSentinelAlertRulesConvertors.cs, Line: 43, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #950 Path: /Users/runner/work/1/s/src/SecurityInsights/SecurityInsights/Models/AlertRuleTemplates/PSSentinelAlertRuleTemplatesConvertors.cs, Line: 29, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #951 Path: /Users/runner/work/1/s/src/SecurityInsights/SecurityInsights/Models/AlertRuleTemplates/PSSentinelAlertRuleTemplatesConvertors.cs, Line: 36, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #952 Path: /Users/runner/work/1/s/src/SecurityInsights/SecurityInsights/Models/AlertRuleTemplates/PSSentinelAlertRuleTemplatesConvertors.cs, Line: 43, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #953 Path: /Users/runner/work/1/s/src/SecurityInsights/SecurityInsights/Models/DataConnectors/PSSentinelDataConnectorConvertors.cs, Line: 29, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #954 Path: /Users/runner/work/1/s/src/SecurityInsights/SecurityInsights/Models/DataConnectors/PSSentinelDataConnectorConvertors.cs, Line: 294, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #955 Path: /Users/runner/work/1/s/src/SecurityInsights/SecurityInsights/Models/DataConnectors/PSSentinelDataConnectorConvertors.cs, Line: 301, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #956 Path: /Users/runner/work/1/s/src/SecurityInsights/SecurityInsights/Models/DataConnectors/PSSentinelDataConnectorConvertors.cs, Line: 308, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #957 Path: /Users/runner/work/1/s/src/SecurityInsights/SecurityInsights/Models/DataConnectors/PSSentinelDataConnectorConvertors.cs, Line: 315, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #958 Path: /Users/runner/work/1/s/src/SecurityInsights/SecurityInsights/Models/DataConnectors/PSSentinelDataConnectorConvertors.cs, Line: 322, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #959 Path: /Users/runner/work/1/s/src/SecurityInsights/SecurityInsights/Models/DataConnectors/PSSentinelDataConnectorConvertors.cs, Line: 329, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #960 Path: /Users/runner/work/1/s/src/SecurityInsights/SecurityInsights/Models/DataConnectors/PSSentinelDataConnectorConvertors.cs, Line: 336, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #961 Path: /Users/runner/work/1/s/src/SecurityInsights/SecurityInsights/Models/DataConnectors/PSSentinelDataConnectorConvertors.cs, Line: 343, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #962 Path: /Users/runner/work/1/s/src/SecurityInsights/SecurityInsights/Models/DataConnectors/PSSentinelDataConnectorConvertors.cs, Line: 36, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #963 Path: /Users/runner/work/1/s/src/SecurityInsights/SecurityInsights/Models/DataConnectors/PSSentinelDataConnectorConvertors.cs, Line: 43, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #964 Path: /Users/runner/work/1/s/src/SecurityInsights/SecurityInsights/Models/DataConnectors/PSSentinelDataConnectorConvertors.cs, Line: 50, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #965 Path: /Users/runner/work/1/s/src/SecurityInsights/SecurityInsights/Models/DataConnectors/PSSentinelDataConnectorConvertors.cs, Line: 57, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #966 Path: /Users/runner/work/1/s/src/SecurityInsights/SecurityInsights/Models/DataConnectors/PSSentinelDataConnectorConvertors.cs, Line: 64, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #967 Path: /Users/runner/work/1/s/src/SecurityInsights/SecurityInsights/Models/DataConnectors/PSSentinelDataConnectorConvertors.cs, Line: 71, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #968 Path: /Users/runner/work/1/s/src/SecurityInsights/SecurityInsights/Models/DataConnectors/PSSentinelDataConnectorConvertors.cs, Line: 78, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html



Project: ServiceBus
    #969 Path: /Users/runner/work/1/s/src/ServiceBus/ServiceBus/Cmdlets/NetworkRuleSet/AddAzureServicebusIPRule.cs, Line: 59, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #970 Path: /Users/runner/work/1/s/src/ServiceBus/ServiceBus/Cmdlets/NetworkRuleSet/AddAzureServiceBusVirtualNetworkrule.cs, Line: 57, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #971 Path: /Users/runner/work/1/s/src/ServiceBus/ServiceBus/Cmdlets/NetworkRuleSet/RemoveAzureEventHubVirtualNetworkrule.cs, Line: 82, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #972 Path: /Users/runner/work/1/s/src/ServiceBus/ServiceBus/Cmdlets/NetworkRuleSet/RemoveAzureServiceBusIPRule.cs, Line: 81, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #973 Path: /Users/runner/work/1/s/src/ServiceBus/ServiceBus/Cmdlets/NetworkRuleSet/RemoveAzureServiceBusNetworkRuleSet.cs, Line: 68, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #974 Path: /Users/runner/work/1/s/src/ServiceBus/ServiceBus/Cmdlets/NetworkRuleSet/SetAzureServiceBusNetworkrule.cs, Line: 69, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html



Project: ServiceFabric
    #975 Path: /Users/runner/work/1/s/src/ServiceFabric/ServiceFabric/Commands/AddAzureRmServiceFabricNode.cs, Line: 48, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #976 Path: /Users/runner/work/1/s/src/ServiceFabric/ServiceFabric/Commands/AddAzureRmServiceFabricNodeType.cs, Line: 123, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #977 Path: /Users/runner/work/1/s/src/ServiceFabric/ServiceFabric/Commands/AddAzureRmServiceFabricNodeType.cs, Line: 258, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #978 Path: /Users/runner/work/1/s/src/ServiceFabric/ServiceFabric/Commands/AddAzureRmServiceFabricNodeType.cs, Line: 265, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #979 Path: /Users/runner/work/1/s/src/ServiceFabric/ServiceFabric/Commands/AddAzureRmServiceFabricNodeType.cs, Line: 289, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #980 Path: /Users/runner/work/1/s/src/ServiceFabric/ServiceFabric/Commands/AddAzureRmServiceFabricNodeType.cs, Line: 294, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #981 Path: /Users/runner/work/1/s/src/ServiceFabric/ServiceFabric/Commands/GetAzServiceFabricApplication.cs, Line: 106, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #982 Path: /Users/runner/work/1/s/src/ServiceFabric/ServiceFabric/Commands/GetAzServiceFabricApplicationType.cs, Line: 106, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #983 Path: /Users/runner/work/1/s/src/ServiceFabric/ServiceFabric/Commands/GetAzServiceFabricApplicationTypeVersion.cs, Line: 116, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #984 Path: /Users/runner/work/1/s/src/ServiceFabric/ServiceFabric/Commands/GetAzServiceFabricService.cs, Line: 115, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #985 Path: /Users/runner/work/1/s/src/ServiceFabric/ServiceFabric/Commands/ManagedClusters/AddAzServiceFabricManagedClusterClientCertificate.cs, Line: 102, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #986 Path: /Users/runner/work/1/s/src/ServiceFabric/ServiceFabric/Commands/ManagedClusters/AddAzServiceFabricManagedNodeTypeVMExtension.cs, Line: 96, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #987 Path: /Users/runner/work/1/s/src/ServiceFabric/ServiceFabric/Commands/ManagedClusters/AddAzServiceFabricManagedNodeTypeVMSecret.cs, Line: 79, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #988 Path: /Users/runner/work/1/s/src/ServiceFabric/ServiceFabric/Commands/ManagedClusters/NewAzServiceFabricManagedCluster.cs, Line: 139, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #989 Path: /Users/runner/work/1/s/src/ServiceFabric/ServiceFabric/Commands/ManagedClusters/NewAzServiceFabricManagedCluster.cs, Line: 146, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #990 Path: /Users/runner/work/1/s/src/ServiceFabric/ServiceFabric/Commands/ManagedClusters/NewAzServiceFabricManagedCluster.cs, Line: 155, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #991 Path: /Users/runner/work/1/s/src/ServiceFabric/ServiceFabric/Commands/ManagedClusters/NewAzServiceFabricManagedNodeType.cs, Line: 103, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #992 Path: /Users/runner/work/1/s/src/ServiceFabric/ServiceFabric/Commands/ManagedClusters/NewAzServiceFabricManagedNodeType.cs, Line: 110, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #993 Path: /Users/runner/work/1/s/src/ServiceFabric/ServiceFabric/Commands/ManagedClusters/RemoveAzServiceFabricManagedCluster.cs, Line: 65, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #994 Path: /Users/runner/work/1/s/src/ServiceFabric/ServiceFabric/Commands/ManagedClusters/RemoveAzServiceFabricManagedClusterClientCertificate.cs, Line: 121, Message: ReSharper: Use '.Any()' to test whether this IEnumerable is empty or not. See ReSharper/UseMethodAny.0.html / SonarQube: "Any()" should be used to test for emptiness. See https://rules.sonarsource.com/csharp/RSPEC-1155
    #995 Path: /Users/runner/work/1/s/src/ServiceFabric/ServiceFabric/Commands/ManagedClusters/RemoveAzServiceFabricManagedClusterClientCertificate.cs, Line: 143, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #996 Path: /Users/runner/work/1/s/src/ServiceFabric/ServiceFabric/Commands/ManagedClusters/RemoveAzServiceFabricManagedClusterClientCertificate.cs, Line: 89, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #997 Path: /Users/runner/work/1/s/src/ServiceFabric/ServiceFabric/Commands/ManagedClusters/RemoveAzServiceFabricManagedNodeType.cs, Line: 110, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #998 Path: /Users/runner/work/1/s/src/ServiceFabric/ServiceFabric/Commands/ManagedClusters/RemoveAzServiceFabricManagedNodeType.cs, Line: 128, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #999 Path: /Users/runner/work/1/s/src/ServiceFabric/ServiceFabric/Commands/ManagedClusters/RemoveAzServiceFabricManagedNodeTypeVMExtension.cs, Line: 112, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1000 Path: /Users/runner/work/1/s/src/ServiceFabric/ServiceFabric/Commands/ManagedClusters/RemoveAzServiceFabricManagedNodeTypeVMExtension.cs, Line: 75, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1001 Path: /Users/runner/work/1/s/src/ServiceFabric/ServiceFabric/Commands/ManagedClusters/RestartAzServiceFabricManagedNodeType.cs, Line: 67, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1002 Path: /Users/runner/work/1/s/src/ServiceFabric/ServiceFabric/Commands/ManagedClusters/SetAzServiceFabricManagedCluster.cs, Line: 93, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1003 Path: /Users/runner/work/1/s/src/ServiceFabric/ServiceFabric/Commands/ManagedClusters/SetAzServiceFabricManagedNodeType.cs, Line: 150, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1004 Path: /Users/runner/work/1/s/src/ServiceFabric/ServiceFabric/Commands/ManagedClusters/SetAzServiceFabricManagedNodeType.cs, Line: 180, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1005 Path: /Users/runner/work/1/s/src/ServiceFabric/ServiceFabric/Commands/NewAzServiceFabricApplication.cs, Line: 130, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1006 Path: /Users/runner/work/1/s/src/ServiceFabric/ServiceFabric/Commands/NewAzServiceFabricApplication.cs, Line: 134, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1007 Path: /Users/runner/work/1/s/src/ServiceFabric/ServiceFabric/Commands/NewAzServiceFabricApplication.cs, Line: 161, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1008 Path: /Users/runner/work/1/s/src/ServiceFabric/ServiceFabric/Commands/NewAzServiceFabricApplication.cs, Line: 98, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1009 Path: /Users/runner/work/1/s/src/ServiceFabric/ServiceFabric/Commands/NewAzServiceFabricApplicationType.cs, Line: 45, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1010 Path: /Users/runner/work/1/s/src/ServiceFabric/ServiceFabric/Commands/NewAzServiceFabricApplicationTypeVersion.cs, Line: 65, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1011 Path: /Users/runner/work/1/s/src/ServiceFabric/ServiceFabric/Commands/NewAzServiceFabricService.cs, Line: 260, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1012 Path: /Users/runner/work/1/s/src/ServiceFabric/ServiceFabric/Commands/NewAzServiceFabricService.cs, Line: 266, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1013 Path: /Users/runner/work/1/s/src/ServiceFabric/ServiceFabric/Commands/NewAzServiceFabricService.cs, Line: 292, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1014 Path: /Users/runner/work/1/s/src/ServiceFabric/ServiceFabric/Commands/NewAzServiceFabricService.cs, Line: 296, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1015 Path: /Users/runner/work/1/s/src/ServiceFabric/ServiceFabric/Commands/NewAzServiceFabricService.cs, Line: 311, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1016 Path: /Users/runner/work/1/s/src/ServiceFabric/ServiceFabric/Commands/NewAzServiceFabricService.cs, Line: 472, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1017 Path: /Users/runner/work/1/s/src/ServiceFabric/ServiceFabric/Commands/NewAzServiceFabricService.cs, Line: 495, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1018 Path: /Users/runner/work/1/s/src/ServiceFabric/ServiceFabric/Commands/NewAzureRmServiceFabricCluster.cs, Line: 276, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1019 Path: /Users/runner/work/1/s/src/ServiceFabric/ServiceFabric/Commands/NewAzureRmServiceFabricCluster.cs, Line: 693, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1020 Path: /Users/runner/work/1/s/src/ServiceFabric/ServiceFabric/Commands/ProxyResourceCmdletBase.cs, Line: 110, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1021 Path: /Users/runner/work/1/s/src/ServiceFabric/ServiceFabric/Commands/ProxyResourceCmdletBase.cs, Line: 47, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1022 Path: /Users/runner/work/1/s/src/ServiceFabric/ServiceFabric/Commands/ProxyResourceCmdletBase.cs, Line: 51, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1023 Path: /Users/runner/work/1/s/src/ServiceFabric/ServiceFabric/Commands/ProxyResourceCmdletBase.cs, Line: 67, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1024 Path: /Users/runner/work/1/s/src/ServiceFabric/ServiceFabric/Commands/ProxyResourceCmdletBase.cs, Line: 70, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1025 Path: /Users/runner/work/1/s/src/ServiceFabric/ServiceFabric/Commands/ProxyResourceCmdletBase.cs, Line: 72, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1026 Path: /Users/runner/work/1/s/src/ServiceFabric/ServiceFabric/Commands/ProxyResourceCmdletBase.cs, Line: 88, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1027 Path: /Users/runner/work/1/s/src/ServiceFabric/ServiceFabric/Commands/ProxyResourceCmdletBase.cs, Line: 96, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1028 Path: /Users/runner/work/1/s/src/ServiceFabric/ServiceFabric/Commands/RemoveAzServiceFabricApplication.cs, Line: 123, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1029 Path: /Users/runner/work/1/s/src/ServiceFabric/ServiceFabric/Commands/RemoveAzServiceFabricApplication.cs, Line: 88, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1030 Path: /Users/runner/work/1/s/src/ServiceFabric/ServiceFabric/Commands/RemoveAzServiceFabricApplication.cs, Line: 89, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1031 Path: /Users/runner/work/1/s/src/ServiceFabric/ServiceFabric/Commands/RemoveAzServiceFabricApplicationType.cs, Line: 123, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1032 Path: /Users/runner/work/1/s/src/ServiceFabric/ServiceFabric/Commands/RemoveAzServiceFabricApplicationType.cs, Line: 88, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1033 Path: /Users/runner/work/1/s/src/ServiceFabric/ServiceFabric/Commands/RemoveAzServiceFabricApplicationType.cs, Line: 89, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1034 Path: /Users/runner/work/1/s/src/ServiceFabric/ServiceFabric/Commands/RemoveAzServiceFabricApplicationTypeVersion.cs, Line: 129, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1035 Path: /Users/runner/work/1/s/src/ServiceFabric/ServiceFabric/Commands/RemoveAzServiceFabricApplicationTypeVersion.cs, Line: 92, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1036 Path: /Users/runner/work/1/s/src/ServiceFabric/ServiceFabric/Commands/RemoveAzServiceFabricApplicationTypeVersion.cs, Line: 93, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1037 Path: /Users/runner/work/1/s/src/ServiceFabric/ServiceFabric/Commands/RemoveAzServiceFabricService.cs, Line: 129, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1038 Path: /Users/runner/work/1/s/src/ServiceFabric/ServiceFabric/Commands/RemoveAzServiceFabricService.cs, Line: 92, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1039 Path: /Users/runner/work/1/s/src/ServiceFabric/ServiceFabric/Commands/RemoveAzServiceFabricService.cs, Line: 93, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1040 Path: /Users/runner/work/1/s/src/ServiceFabric/ServiceFabric/Commands/RemoveAzureRmServiceFabricNode.cs, Line: 52, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1041 Path: /Users/runner/work/1/s/src/ServiceFabric/ServiceFabric/Commands/RemoveAzureRmServiceFabricNodeType.cs, Line: 83, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1042 Path: /Users/runner/work/1/s/src/ServiceFabric/ServiceFabric/Commands/ServiceFabricClusterCertificateCmdlet.cs, Line: 247, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1043 Path: /Users/runner/work/1/s/src/ServiceFabric/ServiceFabric/Commands/ServiceFabricClusterCertificateCmdlet.cs, Line: 265, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1044 Path: /Users/runner/work/1/s/src/ServiceFabric/ServiceFabric/Commands/ServiceFabricClusterCertificateCmdlet.cs, Line: 299, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1045 Path: /Users/runner/work/1/s/src/ServiceFabric/ServiceFabric/Commands/ServiceFabricClusterCertificateCmdlet.cs, Line: 463, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1046 Path: /Users/runner/work/1/s/src/ServiceFabric/ServiceFabric/Commands/ServiceFabricClusterCertificateCmdlet.cs, Line: 531, Message: ReSharper: Use '.Any()' to test whether this IEnumerable is empty or not. See ReSharper/UseMethodAny.0.html / SonarQube: "Any()" should be used to test for emptiness. See https://rules.sonarsource.com/csharp/RSPEC-1155
    #1047 Path: /Users/runner/work/1/s/src/ServiceFabric/ServiceFabric/Commands/ServiceFabricClusterCertificateCmdlet.cs, Line: 545, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1048 Path: /Users/runner/work/1/s/src/ServiceFabric/ServiceFabric/Commands/ServiceFabricClusterCertificateCmdlet.cs, Line: 547, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1049 Path: /Users/runner/work/1/s/src/ServiceFabric/ServiceFabric/Commands/ServiceFabricClusterCertificateCmdlet.cs, Line: 586, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1050 Path: /Users/runner/work/1/s/src/ServiceFabric/ServiceFabric/Commands/ServiceFabricCmdletBase.cs, Line: 184, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1051 Path: /Users/runner/work/1/s/src/ServiceFabric/ServiceFabric/Commands/ServiceFabricCmdletBase.cs, Line: 428, Message: ReSharper: Use '.Any()' to test whether this IEnumerable is empty or not. See ReSharper/UseMethodAny.0.html / SonarQube: "Any()" should be used to test for emptiness. See https://rules.sonarsource.com/csharp/RSPEC-1155
    #1052 Path: /Users/runner/work/1/s/src/ServiceFabric/ServiceFabric/Commands/ServiceFabricCmdletBase.cs, Line: 435, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1053 Path: /Users/runner/work/1/s/src/ServiceFabric/ServiceFabric/Commands/ServiceFabricCmdletBase.cs, Line: 450, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1054 Path: /Users/runner/work/1/s/src/ServiceFabric/ServiceFabric/Commands/ServiceFabricCmdletBase.cs, Line: 463, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1055 Path: /Users/runner/work/1/s/src/ServiceFabric/ServiceFabric/Commands/ServiceFabricCmdletBase.cs, Line: 472, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1056 Path: /Users/runner/work/1/s/src/ServiceFabric/ServiceFabric/Commands/ServiceFabricCmdletBase.cs, Line: 535, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1057 Path: /Users/runner/work/1/s/src/ServiceFabric/ServiceFabric/Commands/ServiceFabricCmdletBase.cs, Line: 565, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1058 Path: /Users/runner/work/1/s/src/ServiceFabric/ServiceFabric/Commands/ServiceFabricCmdletBase.cs, Line: 584, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1059 Path: /Users/runner/work/1/s/src/ServiceFabric/ServiceFabric/Commands/ServiceFabricCommonCmdletBase.cs, Line: 12, Message: ReSharper: Type check and casts can be merged. See https://www.jetbrains.com/help/resharper/MergeCastWithTypeCheck.html / SonarQube: Duplicate casts should not be made. See https://rules.sonarsource.com/csharp/RSPEC-3247
    #1060 Path: /Users/runner/work/1/s/src/ServiceFabric/ServiceFabric/Commands/ServiceFabricCommonCmdletBase.cs, Line: 186, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1061 Path: /Users/runner/work/1/s/src/ServiceFabric/ServiceFabric/Commands/ServiceFabricCommonCmdletBase.cs, Line: 366, Message: ReSharper: Type check and casts can be merged. See https://www.jetbrains.com/help/resharper/MergeCastWithTypeCheck.html / SonarQube: Duplicate casts should not be made. See https://rules.sonarsource.com/csharp/RSPEC-3247
    #1062 Path: /Users/runner/work/1/s/src/ServiceFabric/ServiceFabric/Commands/ServiceFabricCommonCmdletBase.cs, Line: 439, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1063 Path: /Users/runner/work/1/s/src/ServiceFabric/ServiceFabric/Commands/ServiceFabricCommonCmdletBase.cs, Line: 87, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1064 Path: /Users/runner/work/1/s/src/ServiceFabric/ServiceFabric/Commands/SetAzureRmServiceFabricSetting.cs, Line: 48, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1065 Path: /Users/runner/work/1/s/src/ServiceFabric/ServiceFabric/Commands/SetAzureRmServiceFabricUpgradeType.cs, Line: 71, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1066 Path: /Users/runner/work/1/s/src/ServiceFabric/ServiceFabric/Commands/UpdateAzServiceFabricApplication.cs, Line: 214, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1067 Path: /Users/runner/work/1/s/src/ServiceFabric/ServiceFabric/Commands/UpdateAzServiceFabricApplication.cs, Line: 224, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1068 Path: /Users/runner/work/1/s/src/ServiceFabric/ServiceFabric/Commands/UpdateAzServiceFabricApplication.cs, Line: 238, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1069 Path: /Users/runner/work/1/s/src/ServiceFabric/ServiceFabric/Commands/UpdateAzServiceFabricApplication.cs, Line: 243, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1070 Path: /Users/runner/work/1/s/src/ServiceFabric/ServiceFabric/Commands/UpdateAzServiceFabricApplication.cs, Line: 259, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1071 Path: /Users/runner/work/1/s/src/ServiceFabric/ServiceFabric/Commands/UpdateAzServiceFabricApplication.cs, Line: 299, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1072 Path: /Users/runner/work/1/s/src/ServiceFabric/ServiceFabric/Commands/UpdateAzServiceFabricApplication.cs, Line: 462, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1073 Path: /Users/runner/work/1/s/src/ServiceFabric/ServiceFabric/Commands/UpdateAzureRmServiceFabricDurability.cs, Line: 121, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1074 Path: /Users/runner/work/1/s/src/ServiceFabric/ServiceFabric/Commands/UpdateAzureRmServiceFabricReliability.cs, Line: 83, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1075 Path: /Users/runner/work/1/s/src/ServiceFabric/ServiceFabric/Models/PSDeploymentExtended.cs, Line: 32, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1076 Path: /Users/runner/work/1/s/src/ServiceFabric/ServiceFabric/Models/PSDeploymentExtended.cs, Line: 33, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1077 Path: /Users/runner/work/1/s/src/ServiceFabric/ServiceFabric/Models/PSDeploymentExtended.cs, Line: 34, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1078 Path: /Users/runner/work/1/s/src/ServiceFabric/ServiceFabric/Models/PSDeploymentExtended.cs, Line: 35, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1079 Path: /Users/runner/work/1/s/src/ServiceFabric/ServiceFabric/Models/PSDeploymentExtended.cs, Line: 36, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1080 Path: /Users/runner/work/1/s/src/ServiceFabric/ServiceFabric/Models/PSDeploymentExtended.cs, Line: 37, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1081 Path: /Users/runner/work/1/s/src/ServiceFabric/ServiceFabric/Models/PSDeploymentResult.cs, Line: 72, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1082 Path: /Users/runner/work/1/s/src/ServiceFabric/ServiceFabric/Models/PSDeploymentResult.cs, Line: 75, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1083 Path: /Users/runner/work/1/s/src/ServiceFabric/ServiceFabric/Models/PSKeyVault.cs, Line: 43, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1084 Path: /Users/runner/work/1/s/src/ServiceFabric/ServiceFabric/Models/PSKeyVault.cs, Line: 44, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1085 Path: /Users/runner/work/1/s/src/ServiceFabric/ServiceFabric/Models/PSKeyVault.cs, Line: 45, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1086 Path: /Users/runner/work/1/s/src/ServiceFabric/ServiceFabric/Models/PSKeyVault.cs, Line: 46, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1087 Path: /Users/runner/work/1/s/src/ServiceFabric/ServiceFabric/Models/PSKeyVault.cs, Line: 48, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1088 Path: /Users/runner/work/1/s/src/ServiceFabric/ServiceFabric/Models/PSKeyVault.cs, Line: 51, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1089 Path: /Users/runner/work/1/s/src/ServiceFabric/ServiceFabric/Models/PSKeyVault.cs, Line: 52, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1090 Path: /Users/runner/work/1/s/src/ServiceFabric/ServiceFabric/Models/PSKeyVault.cs, Line: 53, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1091 Path: /Users/runner/work/1/s/src/ServiceFabric/ServiceFabric/Models/PSKeyVault.cs, Line: 54, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1092 Path: /Users/runner/work/1/s/src/ServiceFabric/ServiceFabric/Models/PSKeyVault.cs, Line: 57, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1093 Path: /Users/runner/work/1/s/src/ServiceFabric/ServiceFabric/Models/PSKeyVault.cs, Line: 58, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html



Project: Az.SpringCloud
    #1094 Path: /Users/runner/work/1/s/src/SpringCloud/generated/runtime/Serialization/JsonSerializer.cs, Line: 315, Message: ReSharper: Type check and casts can be merged. See https://www.jetbrains.com/help/resharper/MergeCastWithTypeCheck.html / SonarQube: Duplicate casts should not be made. See https://rules.sonarsource.com/csharp/RSPEC-3247



Project: Sql.LegacySdk
    #1095 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/AuditingPolicyOperations.cs, Line: 1121, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1096 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/AuditingPolicyOperations.cs, Line: 1129, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1097 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/AuditingPolicyOperations.cs, Line: 299, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1098 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/AuditingPolicyOperations.cs, Line: 307, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1099 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/AuditingPolicyOperations.cs, Line: 529, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1100 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/AuditingPolicyOperations.cs, Line: 537, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1101 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/AuditingPolicyOperations.cs, Line: 834, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1102 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/AuditingPolicyOperations.cs, Line: 842, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1103 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/BlobAuditingOperations.cs, Line: 1239, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1104 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/BlobAuditingOperations.cs, Line: 1247, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1105 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/BlobAuditingOperations.cs, Line: 277, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1106 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/BlobAuditingOperations.cs, Line: 285, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1107 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/BlobAuditingOperations.cs, Line: 508, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1108 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/BlobAuditingOperations.cs, Line: 516, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1109 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/BlobAuditingOperations.cs, Line: 781, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1110 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/BlobAuditingOperations.cs, Line: 789, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1111 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/BlobAuditingOperations.cs, Line: 977, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1112 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/BlobAuditingOperations.cs, Line: 985, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1113 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/CapabilitiesOperations.cs, Line: 328, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1114 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/CapabilitiesOperations.cs, Line: 336, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1115 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/DatabaseActivationOperations.cs, Line: 1117, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1116 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/DatabaseActivationOperations.cs, Line: 1125, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1117 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/DatabaseActivationOperations.cs, Line: 2181, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1118 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/DatabaseActivationOperations.cs, Line: 2189, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1119 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/DatabaseActivationOperations.cs, Line: 3187, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1120 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/DatabaseActivationOperations.cs, Line: 3195, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1121 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/DatabaseAdvisorOperations.cs, Line: 1367, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1122 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/DatabaseAdvisorOperations.cs, Line: 1375, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1123 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/DatabaseAdvisorOperations.cs, Line: 2085, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1124 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/DatabaseAdvisorOperations.cs, Line: 2093, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1125 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/DatabaseAdvisorOperations.cs, Line: 711, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1126 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/DatabaseAdvisorOperations.cs, Line: 719, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1127 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/DatabaseBackupOperations.cs, Line: 1183, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1128 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/DatabaseBackupOperations.cs, Line: 1191, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1129 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/DatabaseBackupOperations.cs, Line: 1410, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1130 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/DatabaseBackupOperations.cs, Line: 1418, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1131 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/DatabaseBackupOperations.cs, Line: 1622, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1132 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/DatabaseBackupOperations.cs, Line: 1630, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1133 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/DatabaseBackupOperations.cs, Line: 1866, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1134 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/DatabaseBackupOperations.cs, Line: 1874, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1135 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/DatabaseBackupOperations.cs, Line: 2085, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1136 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/DatabaseBackupOperations.cs, Line: 2093, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1137 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/DatabaseBackupOperations.cs, Line: 2363, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1138 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/DatabaseBackupOperations.cs, Line: 2371, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1139 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/DatabaseBackupOperations.cs, Line: 2612, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1140 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/DatabaseBackupOperations.cs, Line: 2620, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1141 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/DatabaseBackupOperations.cs, Line: 2851, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1142 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/DatabaseBackupOperations.cs, Line: 2859, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1143 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/DatabaseBackupOperations.cs, Line: 3083, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1144 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/DatabaseBackupOperations.cs, Line: 3091, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1145 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/DatabaseBackupOperations.cs, Line: 3325, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1146 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/DatabaseBackupOperations.cs, Line: 3333, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1147 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/DatabaseBackupOperations.cs, Line: 3600, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1148 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/DatabaseBackupOperations.cs, Line: 3608, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1149 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/DatabaseBackupOperations.cs, Line: 371, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1150 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/DatabaseBackupOperations.cs, Line: 379, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1151 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/DatabaseBackupOperations.cs, Line: 3836, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1152 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/DatabaseBackupOperations.cs, Line: 3844, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1153 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/DatabaseBackupOperations.cs, Line: 4082, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1154 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/DatabaseBackupOperations.cs, Line: 4090, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1155 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/DatabaseBackupOperations.cs, Line: 4332, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1156 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/DatabaseBackupOperations.cs, Line: 4340, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1157 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/DatabaseBackupOperations.cs, Line: 711, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1158 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/DatabaseBackupOperations.cs, Line: 719, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1159 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/DatabaseOperations.cs, Line: 1221, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1160 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/DatabaseOperations.cs, Line: 1229, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1161 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/DatabaseOperations.cs, Line: 1462, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1162 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/DatabaseOperations.cs, Line: 1470, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1163 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/DatabaseOperations.cs, Line: 2486, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1164 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/DatabaseOperations.cs, Line: 2494, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1165 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/DatabaseOperations.cs, Line: 3522, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1166 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/DatabaseOperations.cs, Line: 3530, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1167 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/DatabaseOperations.cs, Line: 4531, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1168 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/DatabaseOperations.cs, Line: 4539, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1169 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/DatabaseOperations.cs, Line: 5565, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1170 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/DatabaseOperations.cs, Line: 5573, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1171 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/DatabaseOperations.cs, Line: 6587, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1172 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/DatabaseOperations.cs, Line: 6595, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1173 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/DatabaseOperations.cs, Line: 7619, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1174 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/DatabaseOperations.cs, Line: 7627, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1175 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/DatabaseOperations.cs, Line: 7843, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1176 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/DatabaseOperations.cs, Line: 7851, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1177 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/DatabaseRecommendedActionOperations.cs, Line: 1187, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1178 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/DatabaseRecommendedActionOperations.cs, Line: 1195, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1179 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/DatabaseRecommendedActionOperations.cs, Line: 1829, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1180 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/DatabaseRecommendedActionOperations.cs, Line: 1837, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1181 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/DatabaseRecommendedActionOperations.cs, Line: 622, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1182 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/DatabaseRecommendedActionOperations.cs, Line: 630, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1183 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/DataMaskingOperations.cs, Line: 1213, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1184 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/DataMaskingOperations.cs, Line: 1221, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1185 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/DataMaskingOperations.cs, Line: 252, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1186 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/DataMaskingOperations.cs, Line: 260, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1187 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/DataMaskingOperations.cs, Line: 505, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1188 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/DataMaskingOperations.cs, Line: 513, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1189 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/DataMaskingOperations.cs, Line: 673, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1190 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/DataMaskingOperations.cs, Line: 681, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1191 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/DataMaskingOperations.cs, Line: 908, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1192 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/DataMaskingOperations.cs, Line: 916, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1193 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/DataSyncOperations.cs, Line: 1259, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1194 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/DataSyncOperations.cs, Line: 1267, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1195 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/DataSyncOperations.cs, Line: 1470, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1196 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/DataSyncOperations.cs, Line: 1478, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1197 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/DataSyncOperations.cs, Line: 1690, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1198 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/DataSyncOperations.cs, Line: 1698, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1199 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/DataSyncOperations.cs, Line: 1920, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1200 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/DataSyncOperations.cs, Line: 1928, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1201 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/DataSyncOperations.cs, Line: 2138, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1202 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/DataSyncOperations.cs, Line: 2146, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1203 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/DataSyncOperations.cs, Line: 2366, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1204 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/DataSyncOperations.cs, Line: 2374, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1205 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/DataSyncOperations.cs, Line: 2842, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1206 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/DataSyncOperations.cs, Line: 2850, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1207 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/DataSyncOperations.cs, Line: 3231, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1208 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/DataSyncOperations.cs, Line: 3239, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1209 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/DataSyncOperations.cs, Line: 3649, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1210 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/DataSyncOperations.cs, Line: 3657, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1211 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/DataSyncOperations.cs, Line: 387, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1212 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/DataSyncOperations.cs, Line: 395, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1213 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/DataSyncOperations.cs, Line: 4132, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1214 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/DataSyncOperations.cs, Line: 4140, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1215 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/DataSyncOperations.cs, Line: 4440, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1216 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/DataSyncOperations.cs, Line: 4448, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1217 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/DataSyncOperations.cs, Line: 4700, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1218 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/DataSyncOperations.cs, Line: 4708, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1219 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/DataSyncOperations.cs, Line: 4855, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1220 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/DataSyncOperations.cs, Line: 4863, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1221 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/DataSyncOperations.cs, Line: 5010, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1222 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/DataSyncOperations.cs, Line: 5018, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1223 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/DataSyncOperations.cs, Line: 5165, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1224 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/DataSyncOperations.cs, Line: 5173, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1225 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/DataSyncOperations.cs, Line: 5317, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1226 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/DataSyncOperations.cs, Line: 5325, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1227 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/DataSyncOperations.cs, Line: 5468, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1228 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/DataSyncOperations.cs, Line: 5476, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1229 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/DataSyncOperations.cs, Line: 5729, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1230 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/DataSyncOperations.cs, Line: 5737, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1231 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/DataSyncOperations.cs, Line: 6061, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1232 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/DataSyncOperations.cs, Line: 6069, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1233 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/DataSyncOperations.cs, Line: 6356, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1234 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/DataSyncOperations.cs, Line: 6364, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1235 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/DataSyncOperations.cs, Line: 6650, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1236 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/DataSyncOperations.cs, Line: 6658, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1237 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/DataSyncOperations.cs, Line: 6955, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1238 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/DataSyncOperations.cs, Line: 6963, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1239 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/DataSyncOperations.cs, Line: 7259, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1240 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/DataSyncOperations.cs, Line: 7267, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1241 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/DataSyncOperations.cs, Line: 7515, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1242 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/DataSyncOperations.cs, Line: 7523, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1243 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/DataSyncOperations.cs, Line: 7902, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1244 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/DataSyncOperations.cs, Line: 7910, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1245 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/DataSyncOperations.cs, Line: 8160, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1246 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/DataSyncOperations.cs, Line: 8168, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1247 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/DataSyncOperations.cs, Line: 8430, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1248 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/DataSyncOperations.cs, Line: 8438, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1249 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/DataSyncOperations.cs, Line: 866, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1250 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/DataSyncOperations.cs, Line: 874, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1251 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/DataSyncOperations.cs, Line: 8760, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1252 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/DataSyncOperations.cs, Line: 8768, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1253 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/DataSyncOperations.cs, Line: 9008, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1254 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/DataSyncOperations.cs, Line: 9016, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1255 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/DataSyncOperations.cs, Line: 9300, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1256 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/DataSyncOperations.cs, Line: 9308, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1257 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/DataSyncOperations.cs, Line: 9467, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1258 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/DataSyncOperations.cs, Line: 9475, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1259 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/DataSyncOperations.cs, Line: 9634, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1260 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/DataSyncOperations.cs, Line: 9642, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1261 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/ElasticPoolAdvisorOperations.cs, Line: 1368, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1262 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/ElasticPoolAdvisorOperations.cs, Line: 1376, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1263 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/ElasticPoolAdvisorOperations.cs, Line: 2086, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1264 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/ElasticPoolAdvisorOperations.cs, Line: 2094, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1265 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/ElasticPoolAdvisorOperations.cs, Line: 712, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1266 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/ElasticPoolAdvisorOperations.cs, Line: 720, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1267 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/ElasticPoolOperations.cs, Line: 1977, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1268 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/ElasticPoolOperations.cs, Line: 1985, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1269 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/ElasticPoolOperations.cs, Line: 2231, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1270 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/ElasticPoolOperations.cs, Line: 2239, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1271 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/ElasticPoolOperations.cs, Line: 2497, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1272 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/ElasticPoolOperations.cs, Line: 2505, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1273 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/ElasticPoolOperations.cs, Line: 2838, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1274 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/ElasticPoolOperations.cs, Line: 2846, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1275 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/ElasticPoolOperations.cs, Line: 3172, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1276 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/ElasticPoolOperations.cs, Line: 3180, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1277 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/ElasticPoolOperations.cs, Line: 4206, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1278 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/ElasticPoolOperations.cs, Line: 4214, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1279 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/ElasticPoolOperations.cs, Line: 430, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1280 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/ElasticPoolOperations.cs, Line: 438, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1281 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/ElasticPoolOperations.cs, Line: 672, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1282 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/ElasticPoolOperations.cs, Line: 680, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1283 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/ElasticPoolOperations.cs, Line: 941, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1284 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/ElasticPoolOperations.cs, Line: 949, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1285 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/ElasticPoolRecommendedActionOperations.cs, Line: 1187, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1286 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/ElasticPoolRecommendedActionOperations.cs, Line: 1195, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1287 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/ElasticPoolRecommendedActionOperations.cs, Line: 1829, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1288 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/ElasticPoolRecommendedActionOperations.cs, Line: 1837, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1289 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/ElasticPoolRecommendedActionOperations.cs, Line: 622, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1290 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/ElasticPoolRecommendedActionOperations.cs, Line: 630, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1291 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/FailoverGroupOperations.cs, Line: 1065, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1292 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/FailoverGroupOperations.cs, Line: 1073, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1293 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/FailoverGroupOperations.cs, Line: 1497, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1294 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/FailoverGroupOperations.cs, Line: 1505, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1295 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/FailoverGroupOperations.cs, Line: 2130, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1296 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/FailoverGroupOperations.cs, Line: 2138, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1297 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/FailoverGroupOperations.cs, Line: 2287, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1298 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/FailoverGroupOperations.cs, Line: 2295, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1299 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/FailoverGroupOperations.cs, Line: 2444, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1300 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/FailoverGroupOperations.cs, Line: 2452, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1301 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/FailoverGroupOperations.cs, Line: 2739, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1302 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/FailoverGroupOperations.cs, Line: 2747, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1303 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/FailoverGroupOperations.cs, Line: 3034, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1304 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/FailoverGroupOperations.cs, Line: 3042, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1305 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/FailoverGroupOperations.cs, Line: 3340, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1306 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/FailoverGroupOperations.cs, Line: 3348, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1307 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/FailoverGroupOperations.cs, Line: 516, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1308 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/FailoverGroupOperations.cs, Line: 524, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1309 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/FailoverGroupOperations.cs, Line: 729, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1310 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/FailoverGroupOperations.cs, Line: 737, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1311 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/FailoverGroupOperations.cs, Line: 897, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1312 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/FailoverGroupOperations.cs, Line: 905, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1313 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/FirewallRuleOperations.cs, Line: 323, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1314 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/FirewallRuleOperations.cs, Line: 331, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1315 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/FirewallRuleOperations.cs, Line: 480, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1316 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/FirewallRuleOperations.cs, Line: 488, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1317 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/FirewallRuleOperations.cs, Line: 713, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1318 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/FirewallRuleOperations.cs, Line: 721, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1319 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/FirewallRuleOperations.cs, Line: 944, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1320 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/FirewallRuleOperations.cs, Line: 952, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1321 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/ImportExportOperations.cs, Line: 1177, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1322 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/ImportExportOperations.cs, Line: 1185, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1323 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/ImportExportOperations.cs, Line: 311, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1324 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/ImportExportOperations.cs, Line: 319, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1325 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/ImportExportOperations.cs, Line: 634, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1326 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/ImportExportOperations.cs, Line: 642, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1327 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/ImportExportOperations.cs, Line: 898, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1328 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/ImportExportOperations.cs, Line: 906, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1329 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/JobAccountOperations.cs, Line: 1190, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1330 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/JobAccountOperations.cs, Line: 1198, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1331 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/JobAccountOperations.cs, Line: 1414, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1332 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/JobAccountOperations.cs, Line: 1422, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1333 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/JobAccountOperations.cs, Line: 373, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1334 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/JobAccountOperations.cs, Line: 381, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1335 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/JobAccountOperations.cs, Line: 585, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1336 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/JobAccountOperations.cs, Line: 593, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1337 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/JobAccountOperations.cs, Line: 974, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1338 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/JobAccountOperations.cs, Line: 982, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1339 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/RecommendedElasticPoolOperations.cs, Line: 1226, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1340 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/RecommendedElasticPoolOperations.cs, Line: 1234, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1341 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/RecommendedElasticPoolOperations.cs, Line: 2262, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1342 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/RecommendedElasticPoolOperations.cs, Line: 2270, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1343 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/RecommendedElasticPoolOperations.cs, Line: 3435, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1344 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/RecommendedElasticPoolOperations.cs, Line: 3443, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1345 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/RecommendedElasticPoolOperations.cs, Line: 4469, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1346 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/RecommendedElasticPoolOperations.cs, Line: 4477, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1347 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/RecommendedElasticPoolOperations.cs, Line: 5652, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1348 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/RecommendedElasticPoolOperations.cs, Line: 5660, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1349 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/RecommendedElasticPoolOperations.cs, Line: 5855, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1350 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/RecommendedElasticPoolOperations.cs, Line: 5863, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1351 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/RecommendedIndexOperations.cs, Line: 451, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1352 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/RecommendedIndexOperations.cs, Line: 459, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1353 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/RecommendedIndexOperations.cs, Line: 925, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1354 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/RecommendedIndexOperations.cs, Line: 933, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1355 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/ReplicationLinkOperations.cs, Line: 1038, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1356 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/ReplicationLinkOperations.cs, Line: 1046, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1357 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/ReplicationLinkOperations.cs, Line: 1153, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1358 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/ReplicationLinkOperations.cs, Line: 1161, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1359 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/ReplicationLinkOperations.cs, Line: 1437, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1360 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/ReplicationLinkOperations.cs, Line: 1445, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1361 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/ReplicationLinkOperations.cs, Line: 234, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1362 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/ReplicationLinkOperations.cs, Line: 242, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1363 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/ReplicationLinkOperations.cs, Line: 416, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1364 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/ReplicationLinkOperations.cs, Line: 424, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1365 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/ReplicationLinkOperations.cs, Line: 584, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1366 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/ReplicationLinkOperations.cs, Line: 592, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1367 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/SecureConnectionPolicyOperations.cs, Line: 245, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1368 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/SecureConnectionPolicyOperations.cs, Line: 253, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1369 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/SecureConnectionPolicyOperations.cs, Line: 487, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1370 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/SecureConnectionPolicyOperations.cs, Line: 495, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1371 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/SecurityAlertPolicyOperations.cs, Line: 1210, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1372 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/SecurityAlertPolicyOperations.cs, Line: 1218, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1373 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/SecurityAlertPolicyOperations.cs, Line: 272, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1374 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/SecurityAlertPolicyOperations.cs, Line: 280, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1375 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/SecurityAlertPolicyOperations.cs, Line: 483, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1376 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/SecurityAlertPolicyOperations.cs, Line: 491, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1377 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/SecurityAlertPolicyOperations.cs, Line: 754, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1378 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/SecurityAlertPolicyOperations.cs, Line: 762, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1379 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/SecurityAlertPolicyOperations.cs, Line: 950, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1380 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/SecurityAlertPolicyOperations.cs, Line: 958, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1381 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/ServerAdministratorOperations.cs, Line: 1018, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1382 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/ServerAdministratorOperations.cs, Line: 1026, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1383 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/ServerAdministratorOperations.cs, Line: 1175, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1384 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/ServerAdministratorOperations.cs, Line: 1183, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1385 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/ServerAdministratorOperations.cs, Line: 1409, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1386 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/ServerAdministratorOperations.cs, Line: 1417, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1387 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/ServerAdministratorOperations.cs, Line: 1655, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1388 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/ServerAdministratorOperations.cs, Line: 1663, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1389 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/ServerAdministratorOperations.cs, Line: 390, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1390 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/ServerAdministratorOperations.cs, Line: 398, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1391 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/ServerAdministratorOperations.cs, Line: 604, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1392 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/ServerAdministratorOperations.cs, Line: 612, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1393 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/ServerAdvisorOperations.cs, Line: 1347, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1394 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/ServerAdvisorOperations.cs, Line: 1355, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1395 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/ServerAdvisorOperations.cs, Line: 2055, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1396 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/ServerAdvisorOperations.cs, Line: 2063, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1397 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/ServerAdvisorOperations.cs, Line: 701, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1398 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/ServerAdvisorOperations.cs, Line: 709, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1399 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/ServerCommunicationLinkOperations.cs, Line: 1070, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1400 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/ServerCommunicationLinkOperations.cs, Line: 1078, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1401 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/ServerCommunicationLinkOperations.cs, Line: 1301, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1402 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/ServerCommunicationLinkOperations.cs, Line: 1309, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1403 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/ServerCommunicationLinkOperations.cs, Line: 376, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1404 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/ServerCommunicationLinkOperations.cs, Line: 384, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1405 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/ServerCommunicationLinkOperations.cs, Line: 617, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1406 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/ServerCommunicationLinkOperations.cs, Line: 625, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1407 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/ServerCommunicationLinkOperations.cs, Line: 850, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1408 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/ServerCommunicationLinkOperations.cs, Line: 858, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1409 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/ServerDisasterRecoveryConfigurationOperations.cs, Line: 1124, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1410 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/ServerDisasterRecoveryConfigurationOperations.cs, Line: 1132, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1411 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/ServerDisasterRecoveryConfigurationOperations.cs, Line: 1243, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1412 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/ServerDisasterRecoveryConfigurationOperations.cs, Line: 1251, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1413 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/ServerDisasterRecoveryConfigurationOperations.cs, Line: 1503, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1414 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/ServerDisasterRecoveryConfigurationOperations.cs, Line: 1511, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1415 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/ServerDisasterRecoveryConfigurationOperations.cs, Line: 301, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1416 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/ServerDisasterRecoveryConfigurationOperations.cs, Line: 309, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1417 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/ServerDisasterRecoveryConfigurationOperations.cs, Line: 543, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1418 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/ServerDisasterRecoveryConfigurationOperations.cs, Line: 551, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1419 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/ServerDisasterRecoveryConfigurationOperations.cs, Line: 702, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1420 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/ServerDisasterRecoveryConfigurationOperations.cs, Line: 710, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1421 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/ServerDisasterRecoveryConfigurationOperations.cs, Line: 861, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1422 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/ServerDisasterRecoveryConfigurationOperations.cs, Line: 869, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1423 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/ServerKeyOperations.cs, Line: 1027, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1424 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/ServerKeyOperations.cs, Line: 1035, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1425 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/ServerKeyOperations.cs, Line: 1274, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1426 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/ServerKeyOperations.cs, Line: 1282, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1427 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/ServerKeyOperations.cs, Line: 1443, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1428 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/ServerKeyOperations.cs, Line: 1451, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1429 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/ServerKeyOperations.cs, Line: 1687, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1430 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/ServerKeyOperations.cs, Line: 1695, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1431 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/ServerKeyOperations.cs, Line: 394, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1432 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/ServerKeyOperations.cs, Line: 402, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1433 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/ServerKeyOperations.cs, Line: 619, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1434 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/ServerKeyOperations.cs, Line: 627, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1435 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/ServerOperations.cs, Line: 1179, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1436 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/ServerOperations.cs, Line: 1187, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1437 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/ServerOperations.cs, Line: 349, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1438 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/ServerOperations.cs, Line: 357, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1439 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/ServerOperations.cs, Line: 495, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1440 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/ServerOperations.cs, Line: 503, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1441 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/ServerOperations.cs, Line: 731, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1442 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/ServerOperations.cs, Line: 739, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1443 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/ServerOperations.cs, Line: 965, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1444 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/ServerOperations.cs, Line: 973, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1445 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/ServerRecommendedActionOperations.cs, Line: 1167, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1446 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/ServerRecommendedActionOperations.cs, Line: 1175, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1447 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/ServerRecommendedActionOperations.cs, Line: 1799, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1448 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/ServerRecommendedActionOperations.cs, Line: 1807, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1449 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/ServerRecommendedActionOperations.cs, Line: 612, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1450 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/ServerRecommendedActionOperations.cs, Line: 620, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1451 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/ServerUpgradeOperations.cs, Line: 200, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1452 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/ServerUpgradeOperations.cs, Line: 208, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1453 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/ServerUpgradeOperations.cs, Line: 376, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1454 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/ServerUpgradeOperations.cs, Line: 384, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1455 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/ServerUpgradeOperations.cs, Line: 640, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1456 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/ServerUpgradeOperations.cs, Line: 648, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1457 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/ServiceObjectiveOperations.cs, Line: 305, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1458 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/ServiceObjectiveOperations.cs, Line: 313, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1459 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/ServiceObjectiveOperations.cs, Line: 558, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1460 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/ServiceObjectiveOperations.cs, Line: 566, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1461 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/ServiceTierAdvisorOperations.cs, Line: 473, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1462 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/ServiceTierAdvisorOperations.cs, Line: 481, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1463 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/ServiceTierAdvisorOperations.cs, Line: 895, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1464 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/ServiceTierAdvisorOperations.cs, Line: 903, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1465 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/SqlManagementClient.cs, Line: 859, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1466 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/SqlManagementClient.cs, Line: 867, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1467 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/TransparentDataEncryptionOperations.cs, Line: 1190, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1468 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/TransparentDataEncryptionOperations.cs, Line: 1198, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1469 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/TransparentDataEncryptionOperations.cs, Line: 1422, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1470 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/TransparentDataEncryptionOperations.cs, Line: 1430, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1471 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/TransparentDataEncryptionOperations.cs, Line: 1666, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1472 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/TransparentDataEncryptionOperations.cs, Line: 1674, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1473 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/TransparentDataEncryptionOperations.cs, Line: 1905, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1474 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/TransparentDataEncryptionOperations.cs, Line: 1913, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1475 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/TransparentDataEncryptionOperations.cs, Line: 379, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1476 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/TransparentDataEncryptionOperations.cs, Line: 387, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1477 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/TransparentDataEncryptionOperations.cs, Line: 641, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1478 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/TransparentDataEncryptionOperations.cs, Line: 649, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1479 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/TransparentDataEncryptionOperations.cs, Line: 949, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1480 Path: /Users/runner/work/1/s/src/Sql/Sql.LegacySdk/Generated/TransparentDataEncryptionOperations.cs, Line: 957, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html



Project: Sql
    #1481 Path: /Users/runner/work/1/s/src/Sql/Sql/Auditing/Services/SqlAuditAdapter.cs, Line: 375, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1482 Path: /Users/runner/work/1/s/src/Sql/Sql/Auditing/Services/SqlAuditAdapter.cs, Line: 795, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1483 Path: /Users/runner/work/1/s/src/Sql/Sql/Auditing/Services/SqlAuditAdapter.cs, Line: 921, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1484 Path: /Users/runner/work/1/s/src/Sql/Sql/Common/AzureSqlCmdletBase.cs, Line: 43, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1485 Path: /Users/runner/work/1/s/src/Sql/Sql/Common/TdeKeyHelper.cs, Line: 59, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1486 Path: /Users/runner/work/1/s/src/Sql/Sql/Data Masking/Services/SqlDataMaskingAdapter.cs, Line: 142, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1487 Path: /Users/runner/work/1/s/src/Sql/Sql/Data Sync/Cmdlet/NewAzureSqlSyncAgent.cs, Line: 154, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1488 Path: /Users/runner/work/1/s/src/Sql/Sql/Data Sync/Cmdlet/NewAzureSqlSyncGroup.cs, Line: 168, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1489 Path: /Users/runner/work/1/s/src/Sql/Sql/Data Sync/Cmdlet/NewAzureSqlSyncMember.cs, Line: 249, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1490 Path: /Users/runner/work/1/s/src/Sql/Sql/Data Sync/Model/AzureSqlSyncGroupSchemaTableModel.cs, Line: 50, Message: https://www.jetbrains.com/help/resharper/MergeSequentialChecks.html
    #1491 Path: /Users/runner/work/1/s/src/Sql/Sql/Data Sync/Services/AzureSqlDataSyncCommunicator.cs, Line: 114, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1492 Path: /Users/runner/work/1/s/src/Sql/Sql/Data Sync/Services/AzureSqlDataSyncCommunicator.cs, Line: 207, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1493 Path: /Users/runner/work/1/s/src/Sql/Sql/Data Sync/Services/AzureSqlDataSyncCommunicator.cs, Line: 252, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1494 Path: /Users/runner/work/1/s/src/Sql/Sql/DataClassification/Model/SensitivityClassificationModel.cs, Line: 59, Message: ReSharper: ReplaceWithSingleCallToCount. / SonarQube "IEnumerable" LINQs should be simplified. See https://rules.sonarsource.com/csharp/RSPEC-2971
    #1495 Path: /Users/runner/work/1/s/src/Sql/Sql/DataClassification/Model/SensitivityClassificationModel.cs, Line: 62, Message: ReSharper: ReplaceWithSingleCallToCount. / SonarQube "IEnumerable" LINQs should be simplified. See https://rules.sonarsource.com/csharp/RSPEC-2971
    #1496 Path: /Users/runner/work/1/s/src/Sql/Sql/Elastic Jobs/Services/AzureSqlElasticJobAdapter.cs, Line: 61, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1497 Path: /Users/runner/work/1/s/src/Sql/Sql/Elastic Pools/Services/AzureSqlElasticPoolAdapter.cs, Line: 442, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1498 Path: /Users/runner/work/1/s/src/Sql/Sql/InstanceActiveDirectoryAdministrator/Services/AzureSqlInstanceActiveDirectoryAdministratorAdapter.cs, Line: 261, Message: ReSharper: Use '.Any()' to test whether this IEnumerable is empty or not. See ReSharper/UseMethodAny.0.html / SonarQube: "Any()" should be used to test for emptiness. See https://rules.sonarsource.com/csharp/RSPEC-1155
    #1499 Path: /Users/runner/work/1/s/src/Sql/Sql/InstanceActiveDirectoryAdministrator/Services/AzureSqlInstanceActiveDirectoryAdministratorAdapter.cs, Line: 275, Message: ReSharper: Use '.Any()' to test whether this IEnumerable is empty or not. See ReSharper/UseMethodAny.0.html / SonarQube: "Any()" should be used to test for emptiness. See https://rules.sonarsource.com/csharp/RSPEC-1155
    #1500 Path: /Users/runner/work/1/s/src/Sql/Sql/InstanceActiveDirectoryAdministrator/Services/AzureSqlInstanceActiveDirectoryAdministratorAdapter.cs, Line: 289, Message: ReSharper: Use '.Any()' to test whether this IEnumerable is empty or not. See ReSharper/UseMethodAny.0.html / SonarQube: "Any()" should be used to test for emptiness. See https://rules.sonarsource.com/csharp/RSPEC-1155
    #1501 Path: /Users/runner/work/1/s/src/Sql/Sql/Location Capabilities/Cmdlet/GetAzureSqlCapability.cs, Line: 210, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1502 Path: /Users/runner/work/1/s/src/Sql/Sql/Location Capabilities/Cmdlet/GetAzureSqlCapability.cs, Line: 221, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1503 Path: /Users/runner/work/1/s/src/Sql/Sql/Location Capabilities/Cmdlet/GetAzureSqlCapability.cs, Line: 232, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1504 Path: /Users/runner/work/1/s/src/Sql/Sql/ManagedDatabase Backup/Cmdlet/AzureSqlManagedDatabaseBackupCmdletBase.cs, Line: 132, Message: ReSharper: Type check and casts can be merged. See https://www.jetbrains.com/help/resharper/MergeCastWithTypeCheck.html / SonarQube: Duplicate casts should not be made. See https://rules.sonarsource.com/csharp/RSPEC-3247
    #1505 Path: /Users/runner/work/1/s/src/Sql/Sql/ManagedDatabase/Cmdlet/RestoreAzureSqlManagedDatabase.cs, Line: 433, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1506 Path: /Users/runner/work/1/s/src/Sql/Sql/ManagedDatabase/Services/AzureSqlManagedDatabaseCommunicator.cs, Line: 121, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1507 Path: /Users/runner/work/1/s/src/Sql/Sql/ManagedInstance/Services/AzureSqlManagedInstanceAdapter.cs, Line: 139, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1508 Path: /Users/runner/work/1/s/src/Sql/Sql/ServerActiveDirectoryAdministrator/Services/AzureSqlServerActiveDirectoryAdministratorAdapter.cs, Line: 263, Message: ReSharper: Use '.Any()' to test whether this IEnumerable is empty or not. See ReSharper/UseMethodAny.0.html / SonarQube: "Any()" should be used to test for emptiness. See https://rules.sonarsource.com/csharp/RSPEC-1155
    #1509 Path: /Users/runner/work/1/s/src/Sql/Sql/ServerActiveDirectoryAdministrator/Services/AzureSqlServerActiveDirectoryAdministratorAdapter.cs, Line: 277, Message: ReSharper: Use '.Any()' to test whether this IEnumerable is empty or not. See ReSharper/UseMethodAny.0.html / SonarQube: "Any()" should be used to test for emptiness. See https://rules.sonarsource.com/csharp/RSPEC-1155
    #1510 Path: /Users/runner/work/1/s/src/Sql/Sql/ServerActiveDirectoryAdministrator/Services/AzureSqlServerActiveDirectoryAdministratorAdapter.cs, Line: 291, Message: ReSharper: Use '.Any()' to test whether this IEnumerable is empty or not. See ReSharper/UseMethodAny.0.html / SonarQube: "Any()" should be used to test for emptiness. See https://rules.sonarsource.com/csharp/RSPEC-1155
    #1511 Path: /Users/runner/work/1/s/src/Sql/Sql/ServerDisasterRecoveryConfiguration/Cmdlet/NewAzureSqlServerDisasterRecoveryConfiguration.cs, Line: 128, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1512 Path: /Users/runner/work/1/s/src/Sql/Sql/Services/Util.cs, Line: 90, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1513 Path: /Users/runner/work/1/s/src/Sql/Sql/ThreatDetection/Services/SqlThreatDetectionAdapter.cs, Line: 349, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1514 Path: /Users/runner/work/1/s/src/Sql/Sql/VulnerabilityAssessment/Services/VulnerabilityAssessmentEndpointsCommunicator.cs, Line: 324, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html



Project: SqlVirtualMachine
    #1515 Path: /Users/runner/work/1/s/src/SqlVirtualMachine/SqlVirtualMachine/Common/AzureSqlVirtualMachineCmdletBase.cs, Line: 40, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html



Project: StackEdge
    #1516 Path: /Users/runner/work/1/s/src/StackEdge/StackEdge/Common/Cmdlets/BandwidthSchedules/StackEdgeBandwidthScheduleNewCmdletBase.cs, Line: 100, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1517 Path: /Users/runner/work/1/s/src/StackEdge/StackEdge/Common/Cmdlets/BandwidthSchedules/StackEdgeBandwidthScheduleNewCmdletBase.cs, Line: 151, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1518 Path: /Users/runner/work/1/s/src/StackEdge/StackEdge/Common/Cmdlets/BandwidthSchedules/StackEdgeBandwidthScheduleRemoveCmdletBase.cs, Line: 112, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1519 Path: /Users/runner/work/1/s/src/StackEdge/StackEdge/Common/Cmdlets/BandwidthSchedules/StackEdgeBandwidthScheduleSetCmdletBase.cs, Line: 230, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1520 Path: /Users/runner/work/1/s/src/StackEdge/StackEdge/Common/Cmdlets/Devices/StackEdgeDeviceNewCmdletBase.cs, Line: 114, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1521 Path: /Users/runner/work/1/s/src/StackEdge/StackEdge/Common/Cmdlets/Devices/StackEdgeDeviceNewCmdletBase.cs, Line: 75, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1522 Path: /Users/runner/work/1/s/src/StackEdge/StackEdge/Common/Cmdlets/Devices/StackEdgeDeviceRemoveCmdletBase.cs, Line: 98, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1523 Path: /Users/runner/work/1/s/src/StackEdge/StackEdge/Common/Cmdlets/EdgeStorageAccounts/StackEdgeStorageAccountNewCmdlet.cs, Line: 133, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1524 Path: /Users/runner/work/1/s/src/StackEdge/StackEdge/Common/Cmdlets/EdgeStorageAccounts/StackEdgeStorageAccountNewCmdlet.cs, Line: 85, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1525 Path: /Users/runner/work/1/s/src/StackEdge/StackEdge/Common/Cmdlets/EdgeStorageAccounts/StackEdgeStorageAccountRemoveCmdlet.cs, Line: 113, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1526 Path: /Users/runner/work/1/s/src/StackEdge/StackEdge/Common/Cmdlets/EdgeStorageContainers/StackEdgeStorageContainerNewCmdlet.cs, Line: 136, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1527 Path: /Users/runner/work/1/s/src/StackEdge/StackEdge/Common/Cmdlets/EdgeStorageContainers/StackEdgeStorageContainerNewCmdlet.cs, Line: 90, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1528 Path: /Users/runner/work/1/s/src/StackEdge/StackEdge/Common/Cmdlets/EdgeStorageContainers/StackEdgeStorageContainerRemoveCmdlet.cs, Line: 122, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1529 Path: /Users/runner/work/1/s/src/StackEdge/StackEdge/Common/Cmdlets/Orders/StackEdgeOrderNewCmdlet.cs, Line: 124, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1530 Path: /Users/runner/work/1/s/src/StackEdge/StackEdge/Common/Cmdlets/Orders/StackEdgeOrderNewCmdlet.cs, Line: 173, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1531 Path: /Users/runner/work/1/s/src/StackEdge/StackEdge/Common/Cmdlets/Orders/StackEdgeOrderRemoveCmdlet.cs, Line: 98, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1532 Path: /Users/runner/work/1/s/src/StackEdge/StackEdge/Common/Cmdlets/Roles/StackEdgeRoleNewCmdletBase.cs, Line: 158, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1533 Path: /Users/runner/work/1/s/src/StackEdge/StackEdge/Common/Cmdlets/Roles/StackEdgeRoleNewCmdletBase.cs, Line: 184, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1534 Path: /Users/runner/work/1/s/src/StackEdge/StackEdge/Common/Cmdlets/Roles/StackEdgeRoleNewCmdletBase.cs, Line: 332, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1535 Path: /Users/runner/work/1/s/src/StackEdge/StackEdge/Common/Cmdlets/Roles/StackEdgeRoleRemoveCmdletBase.cs, Line: 109, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1536 Path: /Users/runner/work/1/s/src/StackEdge/StackEdge/Common/Cmdlets/Shares/StackEdgeShareInvokeCmdlet.cs, Line: 114, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1537 Path: /Users/runner/work/1/s/src/StackEdge/StackEdge/Common/Cmdlets/Shares/StackEdgeShareNewCmdletBase.cs, Line: 158, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1538 Path: /Users/runner/work/1/s/src/StackEdge/StackEdge/Common/Cmdlets/Shares/StackEdgeShareNewCmdletBase.cs, Line: 265, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1539 Path: /Users/runner/work/1/s/src/StackEdge/StackEdge/Common/Cmdlets/Shares/StackEdgeShareRemoveCmdletBase.cs, Line: 113, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1540 Path: /Users/runner/work/1/s/src/StackEdge/StackEdge/Common/Cmdlets/Shares/StackEdgeShareSetCmdletBase.cs, Line: 208, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1541 Path: /Users/runner/work/1/s/src/StackEdge/StackEdge/Common/Cmdlets/StorageAccountCredentials/StackEdgeStorageAccountCredentialNewCmdletBase.cs, Line: 164, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1542 Path: /Users/runner/work/1/s/src/StackEdge/StackEdge/Common/Cmdlets/StorageAccountCredentials/StackEdgeStorageAccountCredentialNewCmdletBase.cs, Line: 96, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1543 Path: /Users/runner/work/1/s/src/StackEdge/StackEdge/Common/Cmdlets/StorageAccountCredentials/StackEdgeStorageAccountCredentialRemoveCmdletBase.cs, Line: 114, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1544 Path: /Users/runner/work/1/s/src/StackEdge/StackEdge/Common/Cmdlets/Triggers/StackEdgeTriggerNewCmdlet.cs, Line: 176, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1545 Path: /Users/runner/work/1/s/src/StackEdge/StackEdge/Common/Cmdlets/Triggers/StackEdgeTriggerNewCmdlet.cs, Line: 237, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1546 Path: /Users/runner/work/1/s/src/StackEdge/StackEdge/Common/Cmdlets/Triggers/StackEdgeTriggerRemoveCmdlet.cs, Line: 114, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1547 Path: /Users/runner/work/1/s/src/StackEdge/StackEdge/Common/Cmdlets/Users/StackEdgeUserNewCmdletBase.cs, Line: 164, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1548 Path: /Users/runner/work/1/s/src/StackEdge/StackEdge/Common/Cmdlets/Users/StackEdgeUserNewCmdletBase.cs, Line: 98, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1549 Path: /Users/runner/work/1/s/src/StackEdge/StackEdge/Common/Cmdlets/Users/StackEdgeUserRemoveCmdletBase.cs, Line: 112, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1550 Path: /Users/runner/work/1/s/src/StackEdge/StackEdge/Common/Cmdlets/Users/StackEdgeUserSetCmdletBase.cs, Line: 147, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html



Project: Storage.Management
    #1551 Path: /Users/runner/work/1/s/src/Storage/Storage.Management/Blob/LockAzureStorageContainerImmutabilityPolicy.cs, Line: 149, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1552 Path: /Users/runner/work/1/s/src/Storage/Storage.Management/Blob/RemoveAzureStorageContainer.cs, Line: 118, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1553 Path: /Users/runner/work/1/s/src/Storage/Storage.Management/File/RemoveAzureStorageShare.cs, Line: 131, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1554 Path: /Users/runner/work/1/s/src/Storage/Storage.Management/File/RestoreAzureStorageShare.cs, Line: 110, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1555 Path: /Users/runner/work/1/s/src/Storage/Storage.Management/StorageAccount/AddAzureStorageAccountNetworkRule.cs, Line: 159, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1556 Path: /Users/runner/work/1/s/src/Storage/Storage.Management/StorageAccount/AddAzureStorageAccountNetworkRule.cs, Line: 182, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1557 Path: /Users/runner/work/1/s/src/Storage/Storage.Management/StorageAccount/AddAzureStorageAccountNetworkRule.cs, Line: 206, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1558 Path: /Users/runner/work/1/s/src/Storage/Storage.Management/StorageAccount/AddAzureStorageAccountNetworkRule.cs, Line: 228, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1559 Path: /Users/runner/work/1/s/src/Storage/Storage.Management/StorageAccount/AddAzureStorageAccountNetworkRule.cs, Line: 253, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1560 Path: /Users/runner/work/1/s/src/Storage/Storage.Management/StorageAccount/AddAzureStorageAccountNetworkRule.cs, Line: 276, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1561 Path: /Users/runner/work/1/s/src/Storage/Storage.Management/StorageAccount/RemoveAzureStorageAccount.cs, Line: 57, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1562 Path: /Users/runner/work/1/s/src/Storage/Storage.Management/StorageAccount/RemoveAzureStorageAccountNetworkRule.cs, Line: 154, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1563 Path: /Users/runner/work/1/s/src/Storage/Storage.Management/StorageAccount/RemoveAzureStorageAccountNetworkRule.cs, Line: 164, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1564 Path: /Users/runner/work/1/s/src/Storage/Storage.Management/StorageAccount/RemoveAzureStorageAccountNetworkRule.cs, Line: 174, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1565 Path: /Users/runner/work/1/s/src/Storage/Storage.Management/StorageAccount/RemoveAzureStorageAccountNetworkRule.cs, Line: 183, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1566 Path: /Users/runner/work/1/s/src/Storage/Storage.Management/StorageAccount/RemoveAzureStorageAccountNetworkRule.cs, Line: 192, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1567 Path: /Users/runner/work/1/s/src/Storage/Storage.Management/StorageAccount/RemoveAzureStorageAccountNetworkRule.cs, Line: 203, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1568 Path: /Users/runner/work/1/s/src/Storage/Storage.Management/StorageAccount/RestoreAzStorageBlobRange.cs, Line: 133, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1569 Path: /Users/runner/work/1/s/src/Storage/Storage.Management/StorageAccount/RestoreAzStorageBlobRange.cs, Line: 142, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html



Project: Storage
    #1570 Path: /Users/runner/work/1/s/src/Storage/Storage/Blob/Cmdlet/CopyAzureStorageBlob.cs, Line: 293, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1571 Path: /Users/runner/work/1/s/src/Storage/Storage/Blob/Cmdlet/CopyAzureStorageBlob.cs, Line: 314, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1572 Path: /Users/runner/work/1/s/src/Storage/Storage/Blob/Cmdlet/CopyAzureStorageBlob.cs, Line: 358, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1573 Path: /Users/runner/work/1/s/src/Storage/Storage/Blob/Cmdlet/CopyAzureStorageBlob.cs, Line: 367, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1574 Path: /Users/runner/work/1/s/src/Storage/Storage/Blob/Cmdlet/CopyAzureStorageBlob.cs, Line: 421, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1575 Path: /Users/runner/work/1/s/src/Storage/Storage/Blob/Cmdlet/GetAzureStorageContainer.cs, Line: 214, Message: https://www.jetbrains.com/help/resharper/MergeSequentialChecks.html
    #1576 Path: /Users/runner/work/1/s/src/Storage/Storage/Blob/Cmdlet/RemoveAzureStorageContainer.cs, Line: 93, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1577 Path: /Users/runner/work/1/s/src/Storage/Storage/Blob/Cmdlet/SetAzureStorageBlobContent.cs, Line: 482, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1578 Path: /Users/runner/work/1/s/src/Storage/Storage/Blob/Cmdlet/SetAzureStorageBlobContent.cs, Line: 579, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #1579 Path: /Users/runner/work/1/s/src/Storage/Storage/Blob/Cmdlet/StartAzureStorageBlobIncrementalCopy.cs, Line: 461, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1580 Path: /Users/runner/work/1/s/src/Storage/Storage/Blob/StorageCloudBlobCmdletBase.cs, Line: 391, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1581 Path: /Users/runner/work/1/s/src/Storage/Storage/Blob/StorageCloudBlobCmdletBase.cs, Line: 396, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1582 Path: /Users/runner/work/1/s/src/Storage/Storage/Blob/StorageCloudBlobCmdletBase.cs, Line: 491, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1583 Path: /Users/runner/work/1/s/src/Storage/Storage/Common/BlobToFileNameResolver.cs, Line: 185, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1584 Path: /Users/runner/work/1/s/src/Storage/Storage/Common/BlobToFileNameResolver.cs, Line: 296, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1585 Path: /Users/runner/work/1/s/src/Storage/Storage/Common/BlobToFileNameResolver.cs, Line: 306, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1586 Path: /Users/runner/work/1/s/src/Storage/Storage/Common/InvalidCloudBlob.cs, Line: 41, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1587 Path: /Users/runner/work/1/s/src/Storage/Storage/Common/StorageCloudCmdletBase.cs, Line: 445, Message: ReSharper: Type check and casts can be merged. See https://www.jetbrains.com/help/resharper/MergeCastWithTypeCheck.html / SonarQube: Duplicate casts should not be made. See https://rules.sonarsource.com/csharp/RSPEC-3247
    #1588 Path: /Users/runner/work/1/s/src/Storage/Storage/Common/StorageCloudCmdletBase.cs, Line: 6, Message: ReSharper: Type check and casts can be merged. See https://www.jetbrains.com/help/resharper/MergeCastWithTypeCheck.html / SonarQube: Duplicate casts should not be made. See https://rules.sonarsource.com/csharp/RSPEC-3247
    #1589 Path: /Users/runner/work/1/s/src/Storage/Storage/Common/StorageExceptionUtil.cs, Line: 102, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1590 Path: /Users/runner/work/1/s/src/Storage/Storage/Common/StorageExceptionUtil.cs, Line: 75, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1591 Path: /Users/runner/work/1/s/src/Storage/Storage/Common/StorageExceptionUtil.cs, Line: 83, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1592 Path: /Users/runner/work/1/s/src/Storage/Storage/Common/StorageExceptionUtil.cs, Line: 94, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1593 Path: /Users/runner/work/1/s/src/Storage/Storage/Common/TaskOutputStream.cs, Line: 283, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1594 Path: /Users/runner/work/1/s/src/Storage/Storage/Common/TaskOutputStream.cs, Line: 413, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1595 Path: /Users/runner/work/1/s/src/Storage/Storage/Common/Util.cs, Line: 516, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1596 Path: /Users/runner/work/1/s/src/Storage/Storage/Common/Util.cs, Line: 520, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1597 Path: /Users/runner/work/1/s/src/Storage/Storage/Common/Util.cs, Line: 524, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1598 Path: /Users/runner/work/1/s/src/Storage/Storage/DatalakeGen2/Cmdlet/GetAzDataLakeGen2ChildItem.cs, Line: 130, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1599 Path: /Users/runner/work/1/s/src/Storage/Storage/DatalakeGen2/Cmdlet/GetAzDataLakeGen2FileContent.cs, Line: 247, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1600 Path: /Users/runner/work/1/s/src/Storage/Storage/DatalakeGen2/Cmdlet/MoveAzDataLakeGen2Item.cs, Line: 140, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1601 Path: /Users/runner/work/1/s/src/Storage/Storage/DatalakeGen2/Cmdlet/MoveAzDataLakeGen2Item.cs, Line: 164, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1602 Path: /Users/runner/work/1/s/src/Storage/Storage/DatalakeGen2/Cmdlet/NewAzDataLakeGen2Item.cs, Line: 181, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1603 Path: /Users/runner/work/1/s/src/Storage/Storage/DatalakeGen2/Cmdlet/RemoveAzDataLakeGen2Item.cs, Line: 132, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1604 Path: /Users/runner/work/1/s/src/Storage/Storage/DatalakeGen2/Cmdlet/RemoveAzDataLakeGen2Item.cs, Line: 139, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1605 Path: /Users/runner/work/1/s/src/Storage/Storage/File/Cmdlet/CloseAzureStorageFileHandle.cs, Line: 176, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1606 Path: /Users/runner/work/1/s/src/Storage/Storage/File/Cmdlet/CloseAzureStorageFileHandle.cs, Line: 248, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1607 Path: /Users/runner/work/1/s/src/Storage/Storage/File/Cmdlet/CloseAzureStorageFileHandle.cs, Line: 265, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1608 Path: /Users/runner/work/1/s/src/Storage/Storage/File/Cmdlet/CloseAzureStorageFileHandle.cs, Line: 277, Message: https://www.jetbrains.com/help/resharper/MergeSequentialChecks.html
    #1609 Path: /Users/runner/work/1/s/src/Storage/Storage/File/Cmdlet/GetAzureStorageFileHandle.cs, Line: 187, Message: https://www.jetbrains.com/help/resharper/MergeSequentialChecks.html
    #1610 Path: /Users/runner/work/1/s/src/Storage/Storage/File/Cmdlet/RemoveAzureStorageShare.cs, Line: 131, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1611 Path: /Users/runner/work/1/s/src/Storage/Storage/File/Cmdlet/RemoveAzureStorageShare.cs, Line: 138, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1612 Path: /Users/runner/work/1/s/src/Storage/Storage/File/Cmdlet/RemoveAzureStorageShare.cs, Line: 99, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1613 Path: /Users/runner/work/1/s/src/Storage/Storage/File/StorageClientExtensions.cs, Line: 101, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #1614 Path: /Users/runner/work/1/s/src/Storage/Storage/File/StorageClientExtensions.cs, Line: 95, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #1615 Path: /Users/runner/work/1/s/src/Storage/Storage/Model/ResourceModel/PSCorsRule.cs, Line: 44, Message: https://www.jetbrains.com/help/resharper/MergeSequentialChecks.html
    #1616 Path: /Users/runner/work/1/s/src/Storage/Storage/Model/ResourceModel/PSCorsRule.cs, Line: 70, Message: https://www.jetbrains.com/help/resharper/MergeSequentialChecks.html
    #1617 Path: /Users/runner/work/1/s/src/Storage/Storage/Model/ResourceModel/PSPathAccessControl.cs, Line: 49, Message: ReSharper: Use '.Any()' to test whether this IEnumerable is empty or not. See ReSharper/UseMethodAny.0.html / SonarQube: "Any()" should be used to test for emptiness. See https://rules.sonarsource.com/csharp/RSPEC-1155
    #1618 Path: /Users/runner/work/1/s/src/Storage/Storage/Model/ResourceModel/PSPathAccessControl.cs, Line: 69, Message: ReSharper: Use '.Any()' to test whether this IEnumerable is empty or not. See ReSharper/UseMethodAny.0.html / SonarQube: "Any()" should be used to test for emptiness. See https://rules.sonarsource.com/csharp/RSPEC-1155
    #1619 Path: /Users/runner/work/1/s/src/Storage/Storage/Model/ResourceModel/PSPathAccessControl.cs, Line: 83, Message: ReSharper: Use '.Any()' to test whether this IEnumerable is empty or not. See ReSharper/UseMethodAny.0.html / SonarQube: "Any()" should be used to test for emptiness. See https://rules.sonarsource.com/csharp/RSPEC-1155
    #1620 Path: /Users/runner/work/1/s/src/Storage/Storage/Queue/Cmdlet/RemoveAzureStorageQueue.cs, Line: 97, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1621 Path: /Users/runner/work/1/s/src/Storage/Storage/Table/Cmdlet/RemoveStorageAzureTable.cs, Line: 98, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html



Project: StorageSync
    #1622 Path: /Users/runner/work/1/s/src/StorageSync/StorageSync/Common/RegistryUtility.cs, Line: 91, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1623 Path: /Users/runner/work/1/s/src/StorageSync/StorageSync/Interop/Clients/SyncServerCertificateRolloverClient.cs, Line: 88, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1624 Path: /Users/runner/work/1/s/src/StorageSync/StorageSync/Interop/Clients/SyncServerRegistrationClientBase.cs, Line: 102, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1625 Path: /Users/runner/work/1/s/src/StorageSync/StorageSync/NamespaceValidationsProcessor.cs, Line: 116, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #1626 Path: /Users/runner/work/1/s/src/StorageSync/StorageSync/RegisteredServer/UnregisterServerCommand.cs, Line: 173, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html



Project: StreamAnalytics
    #1627 Path: /Users/runner/work/1/s/src/StreamAnalytics/StreamAnalytics/Models/StreamAnalyticsClient.SubscriptionQuotas.cs, Line: 27, Message: https://www.jetbrains.com/help/resharper/MergeSequentialChecks.html
    #1628 Path: /Users/runner/work/1/s/src/StreamAnalytics/StreamAnalytics/StreamAnalyticsBaseCmdlet.cs, Line: 51, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html



Project: Support
    #1629 Path: /Users/runner/work/1/s/src/Support/Support/Communications/GetAzSupportTicketCommunication.cs, Line: 85, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1630 Path: /Users/runner/work/1/s/src/Support/Support/Communications/NewAzSupportTicketCommunication.cs, Line: 76, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1631 Path: /Users/runner/work/1/s/src/Support/Support/Communications/NewAzSupportTicketCommunication.cs, Line: 86, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1632 Path: /Users/runner/work/1/s/src/Support/Support/Communications/NewAzSupportTicketCommunication.cs, Line: 94, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1633 Path: /Users/runner/work/1/s/src/Support/Support/Helpers/ResourceIdentifierHelper.cs, Line: 125, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1634 Path: /Users/runner/work/1/s/src/Support/Support/ProblemClassifications/GetAzSupportProblemClassification.cs, Line: 73, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1635 Path: /Users/runner/work/1/s/src/Support/Support/Services/GetAzSupportService.cs, Line: 55, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1636 Path: /Users/runner/work/1/s/src/Support/Support/SupportTickets/GetAzSupportTicket.cs, Line: 70, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1637 Path: /Users/runner/work/1/s/src/Support/Support/SupportTickets/NewAzSupportTicket.cs, Line: 160, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1638 Path: /Users/runner/work/1/s/src/Support/Support/SupportTickets/NewAzSupportTicket.cs, Line: 177, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1639 Path: /Users/runner/work/1/s/src/Support/Support/SupportTickets/NewAzSupportTicket.cs, Line: 186, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1640 Path: /Users/runner/work/1/s/src/Support/Support/SupportTickets/NewAzSupportTicket.cs, Line: 196, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1641 Path: /Users/runner/work/1/s/src/Support/Support/SupportTickets/NewAzSupportTicket.cs, Line: 240, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1642 Path: /Users/runner/work/1/s/src/Support/Support/SupportTickets/NewAzSupportTicket.cs, Line: 250, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1643 Path: /Users/runner/work/1/s/src/Support/Support/SupportTickets/UpdateAzSupportTicket.cs, Line: 159, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1644 Path: /Users/runner/work/1/s/src/Support/Support/SupportTickets/UpdateAzSupportTicket.cs, Line: 167, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html



Project: Synapse
    #1645 Path: /Users/runner/work/1/s/src/Synapse/Synapse/Commands/ManagementCommands/IntegrationRuntimes/GetAzureSynapseIntegrationRuntimeNode.cs, Line: 127, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #1646 Path: /Users/runner/work/1/s/src/Synapse/Synapse/Commands/ManagementCommands/IntegrationRuntimes/GetAzureSynapseIntegrationRuntimeNode.cs, Line: 98, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #1647 Path: /Users/runner/work/1/s/src/Synapse/Synapse/Commands/ManagementCommands/IntegrationRuntimes/SetAzureSynapseIntegrationRuntime.cs, Line: 453, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #1648 Path: /Users/runner/work/1/s/src/Synapse/Synapse/Commands/ManagementCommands/IntegrationRuntimes/SetAzureSynapseIntegrationRuntime.cs, Line: 473, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #1649 Path: /Users/runner/work/1/s/src/Synapse/Synapse/Commands/ManagementCommands/ThreatDetection/UpdateAzureSynapseSqlAdvancedThreatProtectionSetting.cs, Line: 122, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1650 Path: /Users/runner/work/1/s/src/Synapse/Synapse/Commands/ManagementCommands/ThreatDetection/UpdateAzureSynapseSqlPoolAdvancedThreatProtectionSetting.cs, Line: 145, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1651 Path: /Users/runner/work/1/s/src/Synapse/Synapse/Commands/ManagementCommands/Workspace/NewAzureSynapseWorkspace.cs, Line: 90, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1652 Path: /Users/runner/work/1/s/src/Synapse/Synapse/Common/Utils.cs, Line: 166, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1653 Path: /Users/runner/work/1/s/src/Synapse/Synapse/Models/AbfsUri.cs, Line: 34, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1654 Path: /Users/runner/work/1/s/src/Synapse/Synapse/Models/AzureSynapseSqlManagementCmdletBase.cs, Line: 38, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1655 Path: /Users/runner/work/1/s/src/Synapse/Synapse/Models/DataClassification/SensitivityClassificationModel.cs, Line: 58, Message: ReSharper: ReplaceWithSingleCallToCount. / SonarQube "IEnumerable" LINQs should be simplified. See https://rules.sonarsource.com/csharp/RSPEC-2971
    #1656 Path: /Users/runner/work/1/s/src/Synapse/Synapse/Models/DataClassification/SensitivityClassificationModel.cs, Line: 61, Message: ReSharper: ReplaceWithSingleCallToCount. / SonarQube "IEnumerable" LINQs should be simplified. See https://rules.sonarsource.com/csharp/RSPEC-2971
    #1657 Path: /Users/runner/work/1/s/src/Synapse/Synapse/Models/LivyStatementOutputParser.cs, Line: 19, Message: ReSharper: Type check and casts can be merged. See https://www.jetbrains.com/help/resharper/MergeCastWithTypeCheck.html / SonarQube: Duplicate casts should not be made. See https://rules.sonarsource.com/csharp/RSPEC-3247
    #1658 Path: /Users/runner/work/1/s/src/Synapse/Synapse/Models/PSSynapseExtendedSparkStatement.cs, Line: 31, Message: ReSharper: Type check and casts can be merged. See https://www.jetbrains.com/help/resharper/MergeCastWithTypeCheck.html / SonarQube: Duplicate casts should not be made. See https://rules.sonarsource.com/csharp/RSPEC-3247
    #1659 Path: /Users/runner/work/1/s/src/Synapse/Synapse/Models/SynapseAnalyticsManagementClient.cs, Line: 1350, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1660 Path: /Users/runner/work/1/s/src/Synapse/Synapse/Models/SynapseAnalyticsManagementClient.cs, Line: 483, Message: ReSharper: Use '.Any()' to test whether this IEnumerable is empty or not. See ReSharper/UseMethodAny.0.html / SonarQube: "Any()" should be used to test for emptiness. See https://rules.sonarsource.com/csharp/RSPEC-1155
    #1661 Path: /Users/runner/work/1/s/src/Synapse/Synapse/Models/SynapseAnalyticsManagementClient.cs, Line: 497, Message: ReSharper: Use '.Any()' to test whether this IEnumerable is empty or not. See ReSharper/UseMethodAny.0.html / SonarQube: "Any()" should be used to test for emptiness. See https://rules.sonarsource.com/csharp/RSPEC-1155
    #1662 Path: /Users/runner/work/1/s/src/Synapse/Synapse/Models/SynapseAnalyticsManagementClient.cs, Line: 511, Message: ReSharper: Use '.Any()' to test whether this IEnumerable is empty or not. See ReSharper/UseMethodAny.0.html / SonarQube: "Any()" should be used to test for emptiness. See https://rules.sonarsource.com/csharp/RSPEC-1155
    #1663 Path: /Users/runner/work/1/s/src/Synapse/Synapse/Models/SynapseAnalyticsManagementClient.cs, Line: 591, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1664 Path: /Users/runner/work/1/s/src/Synapse/Synapse/Models/SynapseAnalyticsManagementClient.cs, Line: 608, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1665 Path: /Users/runner/work/1/s/src/Synapse/Synapse/Models/SynapseAnalyticsManagementClient.cs, Line: 761, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1666 Path: /Users/runner/work/1/s/src/Synapse/Synapse/Models/VulnerabilityAssessment/VulnerabilityAssessmentEndpointsCommunicator.cs, Line: 116, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html



Project: Az.TimeSeriesInsights
    #1667 Path: /Users/runner/work/1/s/src/TimeSeriesInsights/generated/runtime/Serialization/JsonSerializer.cs, Line: 315, Message: ReSharper: Type check and casts can be merged. See https://www.jetbrains.com/help/resharper/MergeCastWithTypeCheck.html / SonarQube: Duplicate casts should not be made. See https://rules.sonarsource.com/csharp/RSPEC-3247



Project: TrafficManager
    #1668 Path: /Users/runner/work/1/s/src/TrafficManager/TrafficManager/Models/TrafficManagerEndpoint.cs, Line: 83, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html



Project: Az.VMware
    #1669 Path: /Users/runner/work/1/s/src/VMware/generated/runtime/Serialization/JsonSerializer.cs, Line: 315, Message: ReSharper: Type check and casts can be merged. See https://www.jetbrains.com/help/resharper/MergeCastWithTypeCheck.html / SonarQube: Duplicate casts should not be made. See https://rules.sonarsource.com/csharp/RSPEC-3247



Project: Websites.Helper
    #1670 Path: /Users/runner/work/1/s/src/Websites/Websites.Helper/Network/DefaultSecurityRulesOperations.cs, Line: 122, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1671 Path: /Users/runner/work/1/s/src/Websites/Websites.Helper/Network/DefaultSecurityRulesOperations.cs, Line: 184, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1672 Path: /Users/runner/work/1/s/src/Websites/Websites.Helper/Network/DefaultSecurityRulesOperations.cs, Line: 210, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1673 Path: /Users/runner/work/1/s/src/Websites/Websites.Helper/Network/DefaultSecurityRulesOperations.cs, Line: 235, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1674 Path: /Users/runner/work/1/s/src/Websites/Websites.Helper/Network/DefaultSecurityRulesOperations.cs, Line: 321, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1675 Path: /Users/runner/work/1/s/src/Websites/Websites.Helper/Network/DefaultSecurityRulesOperations.cs, Line: 383, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1676 Path: /Users/runner/work/1/s/src/Websites/Websites.Helper/Network/DefaultSecurityRulesOperations.cs, Line: 415, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1677 Path: /Users/runner/work/1/s/src/Websites/Websites.Helper/Network/DefaultSecurityRulesOperations.cs, Line: 440, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1678 Path: /Users/runner/work/1/s/src/Websites/Websites.Helper/Network/DefaultSecurityRulesOperations.cs, Line: 550, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1679 Path: /Users/runner/work/1/s/src/Websites/Websites.Helper/Network/DefaultSecurityRulesOperations.cs, Line: 588, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1680 Path: /Users/runner/work/1/s/src/Websites/Websites.Helper/Network/DefaultSecurityRulesOperations.cs, Line: 613, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1681 Path: /Users/runner/work/1/s/src/Websites/Websites.Helper/Network/Models/FrontendIPConfiguration.cs, Line: 205, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1682 Path: /Users/runner/work/1/s/src/Websites/Websites.Helper/Network/Models/InboundNatRule.cs, Line: 193, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1683 Path: /Users/runner/work/1/s/src/Websites/Websites.Helper/Network/Models/IPConfiguration.cs, Line: 125, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1684 Path: /Users/runner/work/1/s/src/Websites/Websites.Helper/Network/Models/LoadBalancer.cs, Line: 201, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1685 Path: /Users/runner/work/1/s/src/Websites/Websites.Helper/Network/Models/LoadBalancer.cs, Line: 209, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1686 Path: /Users/runner/work/1/s/src/Websites/Websites.Helper/Network/Models/LoadBalancer.cs, Line: 219, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1687 Path: /Users/runner/work/1/s/src/Websites/Websites.Helper/Network/Models/LoadBalancer.cs, Line: 229, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1688 Path: /Users/runner/work/1/s/src/Websites/Websites.Helper/Network/Models/LoadBalancer.cs, Line: 239, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1689 Path: /Users/runner/work/1/s/src/Websites/Websites.Helper/Network/Models/LoadBalancer.cs, Line: 249, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1690 Path: /Users/runner/work/1/s/src/Websites/Websites.Helper/Network/Models/LoadBalancer.cs, Line: 259, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1691 Path: /Users/runner/work/1/s/src/Websites/Websites.Helper/Network/Models/NetworkInterface.cs, Line: 214, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1692 Path: /Users/runner/work/1/s/src/Websites/Websites.Helper/Network/Models/NetworkInterface.cs, Line: 222, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1693 Path: /Users/runner/work/1/s/src/Websites/Websites.Helper/Network/Models/NetworkInterface.cs, Line: 232, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1694 Path: /Users/runner/work/1/s/src/Websites/Websites.Helper/Network/Models/NetworkInterfaceIPConfiguration.cs, Line: 211, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1695 Path: /Users/runner/work/1/s/src/Websites/Websites.Helper/Network/Models/NetworkInterfaceIPConfiguration.cs, Line: 221, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1696 Path: /Users/runner/work/1/s/src/Websites/Websites.Helper/Network/Models/NetworkInterfaceIPConfiguration.cs, Line: 227, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1697 Path: /Users/runner/work/1/s/src/Websites/Websites.Helper/Network/Models/NetworkInterfaceTapConfiguration.cs, Line: 107, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1698 Path: /Users/runner/work/1/s/src/Websites/Websites.Helper/Network/Models/PublicIPAddress.cs, Line: 208, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1699 Path: /Users/runner/work/1/s/src/Websites/Websites.Helper/Network/Models/PublicIPAddress.cs, Line: 212, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1700 Path: /Users/runner/work/1/s/src/Websites/Websites.Helper/Network/Models/VirtualNetwork.cs, Line: 192, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1701 Path: /Users/runner/work/1/s/src/Websites/Websites.Helper/Network/Models/VirtualNetwork.cs, Line: 200, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1702 Path: /Users/runner/work/1/s/src/Websites/Websites.Helper/Network/Models/VirtualNetwork.cs, Line: 206, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1703 Path: /Users/runner/work/1/s/src/Websites/Websites.Helper/Network/Models/VirtualNetworkPeering.cs, Line: 185, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1704 Path: /Users/runner/work/1/s/src/Websites/Websites.Helper/Network/Models/VirtualNetworkTap.cs, Line: 140, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1705 Path: /Users/runner/work/1/s/src/Websites/Websites.Helper/Network/Models/VirtualNetworkTap.cs, Line: 146, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1706 Path: /Users/runner/work/1/s/src/Websites/Websites.Helper/Network/Models/VirtualNetworkTap.cs, Line: 150, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1707 Path: /Users/runner/work/1/s/src/Websites/Websites.Helper/Network/NetworkInterfacesOperations.cs, Line: 126, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1708 Path: /Users/runner/work/1/s/src/Websites/Websites.Helper/Network/NetworkInterfacesOperations.cs, Line: 130, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1709 Path: /Users/runner/work/1/s/src/Websites/Websites.Helper/Network/NetworkInterfacesOperations.cs, Line: 192, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1710 Path: /Users/runner/work/1/s/src/Websites/Websites.Helper/Network/NetworkInterfacesOperations.cs, Line: 218, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1711 Path: /Users/runner/work/1/s/src/Websites/Websites.Helper/Network/NetworkInterfacesOperations.cs, Line: 243, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1712 Path: /Users/runner/work/1/s/src/Websites/Websites.Helper/Network/NetworkSecurityGroupsOperations.cs, Line: 1036, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1713 Path: /Users/runner/work/1/s/src/Websites/Websites.Helper/Network/NetworkSecurityGroupsOperations.cs, Line: 1109, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1714 Path: /Users/runner/work/1/s/src/Websites/Websites.Helper/Network/NetworkSecurityGroupsOperations.cs, Line: 1177, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1715 Path: /Users/runner/work/1/s/src/Websites/Websites.Helper/Network/NetworkSecurityGroupsOperations.cs, Line: 1230, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1716 Path: /Users/runner/work/1/s/src/Websites/Websites.Helper/Network/NetworkSecurityGroupsOperations.cs, Line: 1255, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1717 Path: /Users/runner/work/1/s/src/Websites/Websites.Helper/Network/NetworkSecurityGroupsOperations.cs, Line: 1273, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1718 Path: /Users/runner/work/1/s/src/Websites/Websites.Helper/Network/NetworkSecurityGroupsOperations.cs, Line: 1359, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1719 Path: /Users/runner/work/1/s/src/Websites/Websites.Helper/Network/NetworkSecurityGroupsOperations.cs, Line: 1421, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1720 Path: /Users/runner/work/1/s/src/Websites/Websites.Helper/Network/NetworkSecurityGroupsOperations.cs, Line: 1446, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1721 Path: /Users/runner/work/1/s/src/Websites/Websites.Helper/Network/NetworkSecurityGroupsOperations.cs, Line: 148, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1722 Path: /Users/runner/work/1/s/src/Websites/Websites.Helper/Network/NetworkSecurityGroupsOperations.cs, Line: 152, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1723 Path: /Users/runner/work/1/s/src/Websites/Websites.Helper/Network/NetworkSecurityGroupsOperations.cs, Line: 1526, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1724 Path: /Users/runner/work/1/s/src/Websites/Websites.Helper/Network/NetworkSecurityGroupsOperations.cs, Line: 1594, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1725 Path: /Users/runner/work/1/s/src/Websites/Websites.Helper/Network/NetworkSecurityGroupsOperations.cs, Line: 1619, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1726 Path: /Users/runner/work/1/s/src/Websites/Websites.Helper/Network/NetworkSecurityGroupsOperations.cs, Line: 214, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1727 Path: /Users/runner/work/1/s/src/Websites/Websites.Helper/Network/NetworkSecurityGroupsOperations.cs, Line: 240, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1728 Path: /Users/runner/work/1/s/src/Websites/Websites.Helper/Network/NetworkSecurityGroupsOperations.cs, Line: 265, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1729 Path: /Users/runner/work/1/s/src/Websites/Websites.Helper/Network/NetworkSecurityGroupsOperations.cs, Line: 378, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1730 Path: /Users/runner/work/1/s/src/Websites/Websites.Helper/Network/NetworkSecurityGroupsOperations.cs, Line: 446, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1731 Path: /Users/runner/work/1/s/src/Websites/Websites.Helper/Network/NetworkSecurityGroupsOperations.cs, Line: 478, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1732 Path: /Users/runner/work/1/s/src/Websites/Websites.Helper/Network/NetworkSecurityGroupsOperations.cs, Line: 503, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1733 Path: /Users/runner/work/1/s/src/Websites/Websites.Helper/Network/NetworkSecurityGroupsOperations.cs, Line: 556, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1734 Path: /Users/runner/work/1/s/src/Websites/Websites.Helper/Network/NetworkSecurityGroupsOperations.cs, Line: 618, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1735 Path: /Users/runner/work/1/s/src/Websites/Websites.Helper/Network/NetworkSecurityGroupsOperations.cs, Line: 656, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1736 Path: /Users/runner/work/1/s/src/Websites/Websites.Helper/Network/NetworkSecurityGroupsOperations.cs, Line: 681, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1737 Path: /Users/runner/work/1/s/src/Websites/Websites.Helper/Network/NetworkSecurityGroupsOperations.cs, Line: 737, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1738 Path: /Users/runner/work/1/s/src/Websites/Websites.Helper/Network/NetworkSecurityGroupsOperations.cs, Line: 799, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1739 Path: /Users/runner/work/1/s/src/Websites/Websites.Helper/Network/NetworkSecurityGroupsOperations.cs, Line: 843, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1740 Path: /Users/runner/work/1/s/src/Websites/Websites.Helper/Network/NetworkSecurityGroupsOperations.cs, Line: 868, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1741 Path: /Users/runner/work/1/s/src/Websites/Websites.Helper/Network/NetworkSecurityGroupsOperations.cs, Line: 924, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1742 Path: /Users/runner/work/1/s/src/Websites/Websites.Helper/Network/NetworkSecurityGroupsOperations.cs, Line: 986, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1743 Path: /Users/runner/work/1/s/src/Websites/Websites.Helper/Network/PrivateEndpointsOperations.cs, Line: 155, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1744 Path: /Users/runner/work/1/s/src/Websites/Websites.Helper/Network/PrivateEndpointsOperations.cs, Line: 223, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1745 Path: /Users/runner/work/1/s/src/Websites/Websites.Helper/Network/PrivateEndpointsOperations.cs, Line: 244, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1746 Path: /Users/runner/work/1/s/src/Websites/Websites.Helper/Network/PrivateEndpointsOperations.cs, Line: 269, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1747 Path: /Users/runner/work/1/s/src/Websites/Websites.Helper/Network/PrivateEndpointsOperations.cs, Line: 287, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1748 Path: /Users/runner/work/1/s/src/Websites/Websites.Helper/Network/RoutesOperations.cs, Line: 1013, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1749 Path: /Users/runner/work/1/s/src/Websites/Websites.Helper/Network/RoutesOperations.cs, Line: 1066, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1750 Path: /Users/runner/work/1/s/src/Websites/Websites.Helper/Network/RoutesOperations.cs, Line: 1091, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1751 Path: /Users/runner/work/1/s/src/Websites/Websites.Helper/Network/RoutesOperations.cs, Line: 156, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1752 Path: /Users/runner/work/1/s/src/Websites/Websites.Helper/Network/RoutesOperations.cs, Line: 218, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1753 Path: /Users/runner/work/1/s/src/Websites/Websites.Helper/Network/RoutesOperations.cs, Line: 244, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1754 Path: /Users/runner/work/1/s/src/Websites/Websites.Helper/Network/RoutesOperations.cs, Line: 269, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1755 Path: /Users/runner/work/1/s/src/Websites/Websites.Helper/Network/RoutesOperations.cs, Line: 374, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1756 Path: /Users/runner/work/1/s/src/Websites/Websites.Helper/Network/RoutesOperations.cs, Line: 436, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1757 Path: /Users/runner/work/1/s/src/Websites/Websites.Helper/Network/RoutesOperations.cs, Line: 468, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1758 Path: /Users/runner/work/1/s/src/Websites/Websites.Helper/Network/RoutesOperations.cs, Line: 493, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1759 Path: /Users/runner/work/1/s/src/Websites/Websites.Helper/Network/RoutesOperations.cs, Line: 570, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1760 Path: /Users/runner/work/1/s/src/Websites/Websites.Helper/Network/RoutesOperations.cs, Line: 632, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1761 Path: /Users/runner/work/1/s/src/Websites/Websites.Helper/Network/RoutesOperations.cs, Line: 670, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1762 Path: /Users/runner/work/1/s/src/Websites/Websites.Helper/Network/RoutesOperations.cs, Line: 745, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1763 Path: /Users/runner/work/1/s/src/Websites/Websites.Helper/Network/RoutesOperations.cs, Line: 763, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1764 Path: /Users/runner/work/1/s/src/Websites/Websites.Helper/Network/RoutesOperations.cs, Line: 831, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1765 Path: /Users/runner/work/1/s/src/Websites/Websites.Helper/Network/RoutesOperations.cs, Line: 875, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1766 Path: /Users/runner/work/1/s/src/Websites/Websites.Helper/Network/RoutesOperations.cs, Line: 900, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1767 Path: /Users/runner/work/1/s/src/Websites/Websites.Helper/Network/RoutesOperations.cs, Line: 918, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1768 Path: /Users/runner/work/1/s/src/Websites/Websites.Helper/Network/RouteTablesOperations.cs, Line: 1034, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1769 Path: /Users/runner/work/1/s/src/Websites/Websites.Helper/Network/RouteTablesOperations.cs, Line: 1105, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1770 Path: /Users/runner/work/1/s/src/Websites/Websites.Helper/Network/RouteTablesOperations.cs, Line: 1173, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1771 Path: /Users/runner/work/1/s/src/Websites/Websites.Helper/Network/RouteTablesOperations.cs, Line: 1226, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1772 Path: /Users/runner/work/1/s/src/Websites/Websites.Helper/Network/RouteTablesOperations.cs, Line: 1251, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1773 Path: /Users/runner/work/1/s/src/Websites/Websites.Helper/Network/RouteTablesOperations.cs, Line: 1269, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1774 Path: /Users/runner/work/1/s/src/Websites/Websites.Helper/Network/RouteTablesOperations.cs, Line: 1355, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1775 Path: /Users/runner/work/1/s/src/Websites/Websites.Helper/Network/RouteTablesOperations.cs, Line: 1417, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1776 Path: /Users/runner/work/1/s/src/Websites/Websites.Helper/Network/RouteTablesOperations.cs, Line: 1442, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1777 Path: /Users/runner/work/1/s/src/Websites/Websites.Helper/Network/RouteTablesOperations.cs, Line: 148, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1778 Path: /Users/runner/work/1/s/src/Websites/Websites.Helper/Network/RouteTablesOperations.cs, Line: 152, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1779 Path: /Users/runner/work/1/s/src/Websites/Websites.Helper/Network/RouteTablesOperations.cs, Line: 1522, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1780 Path: /Users/runner/work/1/s/src/Websites/Websites.Helper/Network/RouteTablesOperations.cs, Line: 1590, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1781 Path: /Users/runner/work/1/s/src/Websites/Websites.Helper/Network/RouteTablesOperations.cs, Line: 1615, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1782 Path: /Users/runner/work/1/s/src/Websites/Websites.Helper/Network/RouteTablesOperations.cs, Line: 214, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1783 Path: /Users/runner/work/1/s/src/Websites/Websites.Helper/Network/RouteTablesOperations.cs, Line: 240, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1784 Path: /Users/runner/work/1/s/src/Websites/Websites.Helper/Network/RouteTablesOperations.cs, Line: 265, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1785 Path: /Users/runner/work/1/s/src/Websites/Websites.Helper/Network/RouteTablesOperations.cs, Line: 376, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1786 Path: /Users/runner/work/1/s/src/Websites/Websites.Helper/Network/RouteTablesOperations.cs, Line: 444, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1787 Path: /Users/runner/work/1/s/src/Websites/Websites.Helper/Network/RouteTablesOperations.cs, Line: 476, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1788 Path: /Users/runner/work/1/s/src/Websites/Websites.Helper/Network/RouteTablesOperations.cs, Line: 501, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1789 Path: /Users/runner/work/1/s/src/Websites/Websites.Helper/Network/RouteTablesOperations.cs, Line: 563, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1790 Path: /Users/runner/work/1/s/src/Websites/Websites.Helper/Network/RouteTablesOperations.cs, Line: 625, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1791 Path: /Users/runner/work/1/s/src/Websites/Websites.Helper/Network/RouteTablesOperations.cs, Line: 663, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1792 Path: /Users/runner/work/1/s/src/Websites/Websites.Helper/Network/RouteTablesOperations.cs, Line: 688, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1793 Path: /Users/runner/work/1/s/src/Websites/Websites.Helper/Network/RouteTablesOperations.cs, Line: 735, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1794 Path: /Users/runner/work/1/s/src/Websites/Websites.Helper/Network/RouteTablesOperations.cs, Line: 797, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1795 Path: /Users/runner/work/1/s/src/Websites/Websites.Helper/Network/RouteTablesOperations.cs, Line: 841, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1796 Path: /Users/runner/work/1/s/src/Websites/Websites.Helper/Network/RouteTablesOperations.cs, Line: 866, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1797 Path: /Users/runner/work/1/s/src/Websites/Websites.Helper/Network/RouteTablesOperations.cs, Line: 922, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1798 Path: /Users/runner/work/1/s/src/Websites/Websites.Helper/Network/RouteTablesOperations.cs, Line: 984, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1799 Path: /Users/runner/work/1/s/src/Websites/Websites.Helper/Network/SecurityRulesOperations.cs, Line: 1015, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1800 Path: /Users/runner/work/1/s/src/Websites/Websites.Helper/Network/SecurityRulesOperations.cs, Line: 1068, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1801 Path: /Users/runner/work/1/s/src/Websites/Websites.Helper/Network/SecurityRulesOperations.cs, Line: 1093, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1802 Path: /Users/runner/work/1/s/src/Websites/Websites.Helper/Network/SecurityRulesOperations.cs, Line: 156, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1803 Path: /Users/runner/work/1/s/src/Websites/Websites.Helper/Network/SecurityRulesOperations.cs, Line: 218, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1804 Path: /Users/runner/work/1/s/src/Websites/Websites.Helper/Network/SecurityRulesOperations.cs, Line: 244, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1805 Path: /Users/runner/work/1/s/src/Websites/Websites.Helper/Network/SecurityRulesOperations.cs, Line: 269, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1806 Path: /Users/runner/work/1/s/src/Websites/Websites.Helper/Network/SecurityRulesOperations.cs, Line: 375, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1807 Path: /Users/runner/work/1/s/src/Websites/Websites.Helper/Network/SecurityRulesOperations.cs, Line: 437, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1808 Path: /Users/runner/work/1/s/src/Websites/Websites.Helper/Network/SecurityRulesOperations.cs, Line: 469, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1809 Path: /Users/runner/work/1/s/src/Websites/Websites.Helper/Network/SecurityRulesOperations.cs, Line: 494, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1810 Path: /Users/runner/work/1/s/src/Websites/Websites.Helper/Network/SecurityRulesOperations.cs, Line: 571, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1811 Path: /Users/runner/work/1/s/src/Websites/Websites.Helper/Network/SecurityRulesOperations.cs, Line: 633, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1812 Path: /Users/runner/work/1/s/src/Websites/Websites.Helper/Network/SecurityRulesOperations.cs, Line: 671, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1813 Path: /Users/runner/work/1/s/src/Websites/Websites.Helper/Network/SecurityRulesOperations.cs, Line: 747, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1814 Path: /Users/runner/work/1/s/src/Websites/Websites.Helper/Network/SecurityRulesOperations.cs, Line: 765, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1815 Path: /Users/runner/work/1/s/src/Websites/Websites.Helper/Network/SecurityRulesOperations.cs, Line: 833, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1816 Path: /Users/runner/work/1/s/src/Websites/Websites.Helper/Network/SecurityRulesOperations.cs, Line: 877, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1817 Path: /Users/runner/work/1/s/src/Websites/Websites.Helper/Network/SecurityRulesOperations.cs, Line: 902, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1818 Path: /Users/runner/work/1/s/src/Websites/Websites.Helper/Network/SecurityRulesOperations.cs, Line: 920, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1819 Path: /Users/runner/work/1/s/src/Websites/Websites.Helper/Network/SubnetsOperations.cs, Line: 135, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1820 Path: /Users/runner/work/1/s/src/Websites/Websites.Helper/Network/SubnetsOperations.cs, Line: 139, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1821 Path: /Users/runner/work/1/s/src/Websites/Websites.Helper/Network/SubnetsOperations.cs, Line: 201, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1822 Path: /Users/runner/work/1/s/src/Websites/Websites.Helper/Network/SubnetsOperations.cs, Line: 227, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1823 Path: /Users/runner/work/1/s/src/Websites/Websites.Helper/Network/SubnetsOperations.cs, Line: 252, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1824 Path: /Users/runner/work/1/s/src/Websites/Websites.Helper/Network/SubnetsOperations.cs, Line: 374, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1825 Path: /Users/runner/work/1/s/src/Websites/Websites.Helper/Network/SubnetsOperations.cs, Line: 442, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1826 Path: /Users/runner/work/1/s/src/Websites/Websites.Helper/Network/SubnetsOperations.cs, Line: 474, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1827 Path: /Users/runner/work/1/s/src/Websites/Websites.Helper/Network/SubnetsOperations.cs, Line: 499, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1828 Path: /Users/runner/work/1/s/src/Websites/Websites.Helper/Network/SubnetsOperations.cs, Line: 517, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1829 Path: /Users/runner/work/1/s/src/Websites/Websites.Helper/Network/VirtualNetworksOperations.cs, Line: 104, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1830 Path: /Users/runner/work/1/s/src/Websites/Websites.Helper/Network/VirtualNetworksOperations.cs, Line: 166, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1831 Path: /Users/runner/work/1/s/src/Websites/Websites.Helper/Network/VirtualNetworksOperations.cs, Line: 192, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1832 Path: /Users/runner/work/1/s/src/Websites/Websites.Helper/Network/VirtualNetworksOperations.cs, Line: 217, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1833 Path: /Users/runner/work/1/s/src/Websites/Websites.Helper/Network/VirtualNetworksOperations.cs, Line: 333, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1834 Path: /Users/runner/work/1/s/src/Websites/Websites.Helper/Network/VirtualNetworksOperations.cs, Line: 365, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1835 Path: /Users/runner/work/1/s/src/Websites/Websites.Helper/Network/VirtualNetworksOperations.cs, Line: 390, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1836 Path: /Users/runner/work/1/s/src/Websites/Websites.Helper/PrivateDns/PrivateZonesOperations.cs, Line: 177, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1837 Path: /Users/runner/work/1/s/src/Websites/Websites.Helper/PrivateDns/PrivateZonesOperations.cs, Line: 261, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1838 Path: /Users/runner/work/1/s/src/Websites/Websites.Helper/PrivateDns/PrivateZonesOperations.cs, Line: 287, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1839 Path: /Users/runner/work/1/s/src/Websites/Websites.Helper/PrivateDns/PrivateZonesOperations.cs, Line: 312, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1840 Path: /Users/runner/work/1/s/src/Websites/Websites.Helper/PrivateDns/PrivateZonesOperations.cs, Line: 330, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1841 Path: /Users/runner/work/1/s/src/Websites/Websites.Helper/PrivateDns/RecordSetsOperations.cs, Line: 158, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1842 Path: /Users/runner/work/1/s/src/Websites/Websites.Helper/PrivateDns/RecordSetsOperations.cs, Line: 242, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1843 Path: /Users/runner/work/1/s/src/Websites/Websites.Helper/PrivateDns/RecordSetsOperations.cs, Line: 268, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1844 Path: /Users/runner/work/1/s/src/Websites/Websites.Helper/PrivateDns/RecordSetsOperations.cs, Line: 293, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1845 Path: /Users/runner/work/1/s/src/Websites/Websites.Helper/PrivateDns/RecordSetsOperations.cs, Line: 311, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1846 Path: /Users/runner/work/1/s/src/Websites/Websites.Helper/PrivateDns/VirtualNetworkLinksOperations.cs, Line: 167, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1847 Path: /Users/runner/work/1/s/src/Websites/Websites.Helper/PrivateDns/VirtualNetworkLinksOperations.cs, Line: 171, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1848 Path: /Users/runner/work/1/s/src/Websites/Websites.Helper/PrivateDns/VirtualNetworkLinksOperations.cs, Line: 233, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1849 Path: /Users/runner/work/1/s/src/Websites/Websites.Helper/PrivateDns/VirtualNetworkLinksOperations.cs, Line: 259, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1850 Path: /Users/runner/work/1/s/src/Websites/Websites.Helper/PrivateDns/VirtualNetworkLinksOperations.cs, Line: 284, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1851 Path: /Users/runner/work/1/s/src/Websites/Websites.Helper/PrivateDns/VirtualNetworkLinksOperations.cs, Line: 392, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1852 Path: /Users/runner/work/1/s/src/Websites/Websites.Helper/PrivateDns/VirtualNetworkLinksOperations.cs, Line: 476, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1853 Path: /Users/runner/work/1/s/src/Websites/Websites.Helper/PrivateDns/VirtualNetworkLinksOperations.cs, Line: 508, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1854 Path: /Users/runner/work/1/s/src/Websites/Websites.Helper/PrivateDns/VirtualNetworkLinksOperations.cs, Line: 533, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1855 Path: /Users/runner/work/1/s/src/Websites/Websites.Helper/PrivateDns/VirtualNetworkLinksOperations.cs, Line: 551, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1856 Path: /Users/runner/work/1/s/src/Websites/Websites.Helper/PrivateDns/VirtualNetworkLinksOperations.cs, Line: 658, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1857 Path: /Users/runner/work/1/s/src/Websites/Websites.Helper/PrivateDns/VirtualNetworkLinksOperations.cs, Line: 699, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1858 Path: /Users/runner/work/1/s/src/Websites/Websites.Helper/PrivateDns/VirtualNetworkLinksOperations.cs, Line: 724, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html



Project: Websites
    #1859 Path: /Users/runner/work/1/s/src/Websites/Websites/Cmdlets/AppServiceEnvironment/RemoveAzureAppServiceEnvironment.cs, Line: 49, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1860 Path: /Users/runner/work/1/s/src/Websites/Websites/Cmdlets/AppServicePlans/GetAzureAppServicePlan.cs, Line: 178, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1861 Path: /Users/runner/work/1/s/src/Websites/Websites/Cmdlets/AppServicePlans/GetAzureAppServicePlan.cs, Line: 90, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1862 Path: /Users/runner/work/1/s/src/Websites/Websites/Cmdlets/BackupRestore/BackupRestoreUtils.cs, Line: 32, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1863 Path: /Users/runner/work/1/s/src/Websites/Websites/Cmdlets/BackupRestore/GetAzureWebAppBackupList.cs, Line: 32, Message: ReSharper: ReplaceWithSingleCallToCount. / SonarQube "IEnumerable" LINQs should be simplified. See https://rules.sonarsource.com/csharp/RSPEC-2971
    #1864 Path: /Users/runner/work/1/s/src/Websites/Websites/Cmdlets/BackupRestore/RestoreAzureDeletedWebApp.cs, Line: 119, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1865 Path: /Users/runner/work/1/s/src/Websites/Websites/Cmdlets/Certificates/ImportAzWebAppKeyVaultCertificate.cs, Line: 77, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1866 Path: /Users/runner/work/1/s/src/Websites/Websites/Cmdlets/Certificates/NewAzureWebAppSSLBinding.cs, Line: 167, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1867 Path: /Users/runner/work/1/s/src/Websites/Websites/Cmdlets/Certificates/NewAzureWebAppSSLBinding.cs, Line: 172, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1868 Path: /Users/runner/work/1/s/src/Websites/Websites/Cmdlets/DeploymentSlots/SwitchAzureWebAppSlot.cs, Line: 108, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1869 Path: /Users/runner/work/1/s/src/Websites/Websites/Cmdlets/DeploymentSlots/SwitchAzureWebAppSlot.cs, Line: 113, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1870 Path: /Users/runner/work/1/s/src/Websites/Websites/Cmdlets/DeploymentSlots/SwitchAzureWebAppSlot.cs, Line: 118, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1871 Path: /Users/runner/work/1/s/src/Websites/Websites/Cmdlets/DeploymentSlots/SwitchAzureWebAppSlot.cs, Line: 99, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1872 Path: /Users/runner/work/1/s/src/Websites/Websites/Cmdlets/TrafficRouting/AddAzureWebAppTrafficRoutingRule.cs, Line: 69, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1873 Path: /Users/runner/work/1/s/src/Websites/Websites/Cmdlets/TrafficRouting/RemoveAzureWebAppTrafficRoutingRule.cs, Line: 59, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1874 Path: /Users/runner/work/1/s/src/Websites/Websites/Cmdlets/TrafficRouting/UpdateAzureWebAppTrafficRoutingRule.cs, Line: 71, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1875 Path: /Users/runner/work/1/s/src/Websites/Websites/Cmdlets/WebApps/GetAzureWebApp.cs, Line: 193, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1876 Path: /Users/runner/work/1/s/src/Websites/Websites/Cmdlets/WebApps/GetAzureWebApp.cs, Line: 93, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1877 Path: /Users/runner/work/1/s/src/Websites/Websites/Cmdlets/WebApps/NewAzureWebApp.cs, Line: 172, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1878 Path: /Users/runner/work/1/s/src/Websites/Websites/Cmdlets/WebApps/NewAzureWebApp.cs, Line: 186, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1879 Path: /Users/runner/work/1/s/src/Websites/Websites/Cmdlets/WebApps/NewAzureWebApp.cs, Line: 499, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1880 Path: /Users/runner/work/1/s/src/Websites/Websites/Models.WebApp/ResourceClient.cs, Line: 216, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1881 Path: /Users/runner/work/1/s/src/Websites/Websites/Models.WebApp/ResourceClient.cs, Line: 264, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1882 Path: /Users/runner/work/1/s/src/Websites/Websites/Models.WebApp/ResourceClient.cs, Line: 371, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1883 Path: /Users/runner/work/1/s/src/Websites/Websites/Utilities/CmdletHelpers.cs, Line: 210, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1884 Path: /Users/runner/work/1/s/src/Websites/Websites/Utilities/CmdletHelpers.cs, Line: 215, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1885 Path: /Users/runner/work/1/s/src/Websites/Websites/Utilities/CmdletHelpers.cs, Line: 220, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1886 Path: /Users/runner/work/1/s/src/Websites/Websites/Utilities/WebsitesClient.cs, Line: 366, Message: ReSharper: Use '.Any()' to test whether this IEnumerable is empty or not. See ReSharper/UseMethodAny.0.html / SonarQube: "Any()" should be used to test for emptiness. See https://rules.sonarsource.com/csharp/RSPEC-1155
    #1887 Path: /Users/runner/work/1/s/src/Websites/Websites/Utilities/WebsitesClient.cs, Line: 366, Message: ReSharper: ReplaceWithSingleCallToAny. / SonarQube "IEnumerable" LINQs should be simplified. See https://rules.sonarsource.com/csharp/RSPEC-2971
    #1888 Path: /Users/runner/work/1/s/src/Websites/Websites/Utilities/WebsitesClient.cs, Line: 394, Message: ReSharper: Use '.Any()' to test whether this IEnumerable is empty or not. See ReSharper/UseMethodAny.0.html / SonarQube: "Any()" should be used to test for emptiness. See https://rules.sonarsource.com/csharp/RSPEC-1155
    #1889 Path: /Users/runner/work/1/s/src/Websites/Websites/Utilities/WebsitesClient.cs, Line: 422, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1890 Path: /Users/runner/work/1/s/src/Websites/Websites/Utilities/WebsitesClient.cs, Line: 424, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1891 Path: /Users/runner/work/1/s/src/Websites/Websites/Utilities/WebsitesClient.cs, Line: 442, Message: SonarQube: Null checks should not be used with "is". See https://rules.sonarsource.com/csharp/RSPEC-4201 / ReSharper: Merge sequential checks in && or || expressions. See https://www.jetbrains.com/help/resharper/MergeSequentialChecks.html
    #1892 Path: /Users/runner/work/1/s/src/Websites/Websites/Validations/ValidateConnectionStringsAttribute.cs, Line: 36, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1893 Path: /Users/runner/work/1/s/src/Websites/Websites/Validations/ValidateHttpHeaderAttribute.cs, Line: 45, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1894 Path: /Users/runner/work/1/s/src/Websites/Websites/Validations/ValidateHttpHeaderAttribute.cs, Line: 51, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1895 Path: /Users/runner/work/1/s/src/Websites/Websites/Validations/ValidateHttpHeaderAttribute.cs, Line: 59, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1896 Path: /Users/runner/work/1/s/src/Websites/Websites/Validations/ValidateHttpHeaderAttribute.cs, Line: 63, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1897 Path: /Users/runner/work/1/s/src/Websites/Websites/Validations/ValidateHttpHeaderAttribute.cs, Line: 71, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1898 Path: /Users/runner/work/1/s/src/Websites/Websites/Validations/ValidateHttpHeaderAttribute.cs, Line: 76, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1899 Path: /Users/runner/work/1/s/src/Websites/Websites/Validations/ValidateServerFarmAttribute.cs, Line: 57, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1900 Path: /Users/runner/work/1/s/src/Websites/Websites/Validations/ValidateStringDictionaryAttribute.cs, Line: 34, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1901 Path: /Users/runner/work/1/s/src/Websites/Websites/Validations/ValidateStringDictionaryAttribute.cs, Line: 40, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1902 Path: /Users/runner/work/1/s/src/Websites/Websites/Validations/ValidateWebAppNameAttribute.cs, Line: 27, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html



Project: Az.WindowsIotServices
    #1903 Path: /Users/runner/work/1/s/src/WindowsIotServices/generated/runtime/Serialization/JsonSerializer.cs, Line: 315, Message: ReSharper: Type check and casts can be merged. See https://www.jetbrains.com/help/resharper/MergeCastWithTypeCheck.html / SonarQube: Duplicate casts should not be made. See https://rules.sonarsource.com/csharp/RSPEC-3247



Project: Accounts.Test
    #1904 Path: /Users/runner/work/1/s/src/Accounts/Accounts.Test/AzureRMProfileTests.cs, Line: 413, Message: ReSharper: ReplaceWithSingleCallToCount. / SonarQube "IEnumerable" LINQs should be simplified. See https://rules.sonarsource.com/csharp/RSPEC-2971
    #1905 Path: /Users/runner/work/1/s/src/Accounts/Accounts.Test/EnvironmentCmdletTests.cs, Line: 558, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1906 Path: /Users/runner/work/1/s/src/Accounts/Accounts.Test/EnvironmentCmdletTests.cs, Line: 570, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1907 Path: /Users/runner/work/1/s/src/Accounts/Accounts.Test/LoginCmdletTests.cs, Line: 87, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1908 Path: /Users/runner/work/1/s/src/Accounts/Accounts.Test/Mocks/MockDataStore.cs, Line: 287, Message: https://www.jetbrains.com/help/resharper/MergeSequentialChecks.html



Project: Authentication.Test
    #1909 Path: /Users/runner/work/1/s/src/Accounts/Authentication.Test/Cmdlets/ConnectAccount.cs, Line: 259, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1910 Path: /Users/runner/work/1/s/src/Accounts/Authentication.Test/Cmdlets/ConnectAccount.cs, Line: 263, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1911 Path: /Users/runner/work/1/s/src/Accounts/Authentication.Test/Cmdlets/ConnectAccount.cs, Line: 588, Message: https://www.jetbrains.com/help/resharper/MergeSequentialChecks.html
    #1912 Path: /Users/runner/work/1/s/src/Accounts/Authentication.Test/LoginTests.cs, Line: 114, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1913 Path: /Users/runner/work/1/s/src/Accounts/Authentication.Test/LoginTests.cs, Line: 119, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1914 Path: /Users/runner/work/1/s/src/Accounts/Authentication.Test/LongRunningCmdletTests.cs, Line: 270, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1915 Path: /Users/runner/work/1/s/src/Accounts/Authentication.Test/LongRunningCmdletTests.cs, Line: 279, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #1916 Path: /Users/runner/work/1/s/src/Accounts/Authentication.Test/Mocks/MockDataStore.cs, Line: 281, Message: https://www.jetbrains.com/help/resharper/MergeSequentialChecks.html
    #1917 Path: /Users/runner/work/1/s/src/Accounts/Authentication.Test/TelemetryTests.cs, Line: 124, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #1918 Path: /Users/runner/work/1/s/src/Accounts/Authentication.Test/TestHttpOperationsFactory.cs, Line: 93, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html



Project: AnalysisServices.Test
    #1919 Path: /Users/runner/work/1/s/src/AnalysisServices/AnalysisServices.Test/ScenarioTests/UrlDecodingRecordMatcher.cs, Line: 73, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html



Project: ApiManagement.ServiceManagement.Test
    #1920 Path: /Users/runner/work/1/s/src/ApiManagement/ApiManagement.ServiceManagement.Test/ScenarioTests/TestsFixture.cs, Line: 123, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html



Project: Attestation.Test
    #1921 Path: /Users/runner/work/1/s/src/Attestation/Attestation.Test/ScenarioTests/AttestationController.cs, Line: 48, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1922 Path: /Users/runner/work/1/s/src/Attestation/Attestation.Test/ScenarioTests/AttestationController.cs, Line: 67, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html



Project: Automation.Test
    #1923 Path: /Users/runner/work/1/s/src/Automation/Automation.Test/ScenarioTests/RunbookJobTests.cs, Line: 43, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1924 Path: /Users/runner/work/1/s/src/Automation/Automation.Test/ScenarioTests/RunbookJobTests.cs, Line: 52, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1925 Path: /Users/runner/work/1/s/src/Automation/Automation.Test/ScenarioTests/RunbookJobTests.cs, Line: 61, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html



Project: Batch.Test
    #1926 Path: /Users/runner/work/1/s/src/Batch/Batch.Test/BatchTestHelpers.cs, Line: 253, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #1927 Path: /Users/runner/work/1/s/src/Batch/Batch.Test/BatchTestHelpers.cs, Line: 295, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #1928 Path: /Users/runner/work/1/s/src/Batch/Batch.Test/BatchTestHelpers.cs, Line: 332, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #1929 Path: /Users/runner/work/1/s/src/Batch/Batch.Test/BatchTestHelpers.cs, Line: 62, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1930 Path: /Users/runner/work/1/s/src/Batch/Batch.Test/BatchTestHelpers.cs, Line: 66, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1931 Path: /Users/runner/work/1/s/src/Batch/Batch.Test/Models/BatchAccountContextTest.cs, Line: 37, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1932 Path: /Users/runner/work/1/s/src/Batch/Batch.Test/Models/BatchAccountContextTest.cs, Line: 40, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1933 Path: /Users/runner/work/1/s/src/Batch/Batch.Test/Models/BatchAccountContextTest.cs, Line: 43, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1934 Path: /Users/runner/work/1/s/src/Batch/Batch.Test/Models/BatchAccountContextTest.cs, Line: 66, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1935 Path: /Users/runner/work/1/s/src/Batch/Batch.Test/ScenarioTests/BatchApplicationPackageTests.cs, Line: 112, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1936 Path: /Users/runner/work/1/s/src/Batch/Batch.Test/ScenarioTests/BatchApplicationPackageTests.cs, Line: 142, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1937 Path: /Users/runner/work/1/s/src/Batch/Batch.Test/ScenarioTests/BatchApplicationPackageTests.cs, Line: 49, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1938 Path: /Users/runner/work/1/s/src/Batch/Batch.Test/ScenarioTests/BatchApplicationPackageTests.cs, Line: 80, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1939 Path: /Users/runner/work/1/s/src/Batch/Batch.Test/ScenarioTests/CertificateTests.cs, Line: 51, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1940 Path: /Users/runner/work/1/s/src/Batch/Batch.Test/ScenarioTests/ComputeNodeTests.cs, Line: 113, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1941 Path: /Users/runner/work/1/s/src/Batch/Batch.Test/ScenarioTests/ComputeNodeTests.cs, Line: 43, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1942 Path: /Users/runner/work/1/s/src/Batch/Batch.Test/ScenarioTests/ComputeNodeTests.cs, Line: 68, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1943 Path: /Users/runner/work/1/s/src/Batch/Batch.Test/ScenarioTests/ComputeNodeTests.cs, Line: 91, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1944 Path: /Users/runner/work/1/s/src/Batch/Batch.Test/ScenarioTests/ComputeNodeUserTests.cs, Line: 42, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1945 Path: /Users/runner/work/1/s/src/Batch/Batch.Test/ScenarioTests/FileTests.cs, Line: 116, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1946 Path: /Users/runner/work/1/s/src/Batch/Batch.Test/ScenarioTests/FileTests.cs, Line: 119, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1947 Path: /Users/runner/work/1/s/src/Batch/Batch.Test/ScenarioTests/FileTests.cs, Line: 124, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1948 Path: /Users/runner/work/1/s/src/Batch/Batch.Test/ScenarioTests/FileTests.cs, Line: 145, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1949 Path: /Users/runner/work/1/s/src/Batch/Batch.Test/ScenarioTests/FileTests.cs, Line: 148, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1950 Path: /Users/runner/work/1/s/src/Batch/Batch.Test/ScenarioTests/FileTests.cs, Line: 153, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1951 Path: /Users/runner/work/1/s/src/Batch/Batch.Test/ScenarioTests/FileTests.cs, Line: 45, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1952 Path: /Users/runner/work/1/s/src/Batch/Batch.Test/ScenarioTests/FileTests.cs, Line: 50, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1953 Path: /Users/runner/work/1/s/src/Batch/Batch.Test/ScenarioTests/FileTests.cs, Line: 55, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1954 Path: /Users/runner/work/1/s/src/Batch/Batch.Test/ScenarioTests/FileTests.cs, Line: 76, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1955 Path: /Users/runner/work/1/s/src/Batch/Batch.Test/ScenarioTests/FileTests.cs, Line: 96, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1956 Path: /Users/runner/work/1/s/src/Batch/Batch.Test/ScenarioTests/JobScheduleTests.cs, Line: 50, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1957 Path: /Users/runner/work/1/s/src/Batch/Batch.Test/ScenarioTests/JobTests.cs, Line: 51, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1958 Path: /Users/runner/work/1/s/src/Batch/Batch.Test/ScenarioTests/JobTests.cs, Line: 76, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1959 Path: /Users/runner/work/1/s/src/Batch/Batch.Test/ScenarioTests/PoolTests.cs, Line: 52, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1960 Path: /Users/runner/work/1/s/src/Batch/Batch.Test/ScenarioTests/PoolTests.cs, Line: 75, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1961 Path: /Users/runner/work/1/s/src/Batch/Batch.Test/ScenarioTests/TaskTests.cs, Line: 117, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1962 Path: /Users/runner/work/1/s/src/Batch/Batch.Test/ScenarioTests/TaskTests.cs, Line: 41, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1963 Path: /Users/runner/work/1/s/src/Batch/Batch.Test/ScenarioTests/TaskTests.cs, Line: 64, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1964 Path: /Users/runner/work/1/s/src/Batch/Batch.Test/ScenarioTests/TaskTests.cs, Line: 89, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html



Project: Compute.Test
    #1965 Path: /Users/runner/work/1/s/src/Compute/Compute.Test/ScenarioTests/RunnerTests.cs, Line: 70, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html



Project: DataLakeAnalytics.Test
    #1966 Path: /Users/runner/work/1/s/src/DataLakeAnalytics/DataLakeAnalytics.Test/ScenarioTests/AdlaAliasTests.cs, Line: 107, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1967 Path: /Users/runner/work/1/s/src/DataLakeAnalytics/DataLakeAnalytics.Test/ScenarioTests/AdlaAliasTests.cs, Line: 118, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1968 Path: /Users/runner/work/1/s/src/DataLakeAnalytics/DataLakeAnalytics.Test/ScenarioTests/AdlaAliasTests.cs, Line: 129, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1969 Path: /Users/runner/work/1/s/src/DataLakeAnalytics/DataLakeAnalytics.Test/ScenarioTests/AdlaAliasTests.cs, Line: 37, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1970 Path: /Users/runner/work/1/s/src/DataLakeAnalytics/DataLakeAnalytics.Test/ScenarioTests/AdlaAliasTests.cs, Line: 48, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1971 Path: /Users/runner/work/1/s/src/DataLakeAnalytics/DataLakeAnalytics.Test/ScenarioTests/AdlaAliasTests.cs, Line: 59, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1972 Path: /Users/runner/work/1/s/src/DataLakeAnalytics/DataLakeAnalytics.Test/ScenarioTests/AdlaAliasTests.cs, Line: 70, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1973 Path: /Users/runner/work/1/s/src/DataLakeAnalytics/DataLakeAnalytics.Test/ScenarioTests/AdlaAliasTests.cs, Line: 85, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1974 Path: /Users/runner/work/1/s/src/DataLakeAnalytics/DataLakeAnalytics.Test/ScenarioTests/AdlaAliasTests.cs, Line: 96, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1975 Path: /Users/runner/work/1/s/src/DataLakeAnalytics/DataLakeAnalytics.Test/ScenarioTests/AdlaTests.cs, Line: 107, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1976 Path: /Users/runner/work/1/s/src/DataLakeAnalytics/DataLakeAnalytics.Test/ScenarioTests/AdlaTests.cs, Line: 118, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1977 Path: /Users/runner/work/1/s/src/DataLakeAnalytics/DataLakeAnalytics.Test/ScenarioTests/AdlaTests.cs, Line: 129, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1978 Path: /Users/runner/work/1/s/src/DataLakeAnalytics/DataLakeAnalytics.Test/ScenarioTests/AdlaTests.cs, Line: 37, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1979 Path: /Users/runner/work/1/s/src/DataLakeAnalytics/DataLakeAnalytics.Test/ScenarioTests/AdlaTests.cs, Line: 48, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1980 Path: /Users/runner/work/1/s/src/DataLakeAnalytics/DataLakeAnalytics.Test/ScenarioTests/AdlaTests.cs, Line: 59, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1981 Path: /Users/runner/work/1/s/src/DataLakeAnalytics/DataLakeAnalytics.Test/ScenarioTests/AdlaTests.cs, Line: 70, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1982 Path: /Users/runner/work/1/s/src/DataLakeAnalytics/DataLakeAnalytics.Test/ScenarioTests/AdlaTests.cs, Line: 85, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1983 Path: /Users/runner/work/1/s/src/DataLakeAnalytics/DataLakeAnalytics.Test/ScenarioTests/AdlaTests.cs, Line: 96, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1984 Path: /Users/runner/work/1/s/src/DataLakeAnalytics/DataLakeAnalytics.Test/ScenarioTests/AdlaTestsBase.cs, Line: 137, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1985 Path: /Users/runner/work/1/s/src/DataLakeAnalytics/DataLakeAnalytics.Test/ScenarioTests/AdlaTestsBase.cs, Line: 227, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html



Project: DataLakeStore.Test
    #1986 Path: /Users/runner/work/1/s/src/DataLakeStore/DataLakeStore.Test/ScenarioTests/AdlsAliasTests.cs, Line: 39, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1987 Path: /Users/runner/work/1/s/src/DataLakeStore/DataLakeStore.Test/ScenarioTests/AdlsAliasTests.cs, Line: 46, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1988 Path: /Users/runner/work/1/s/src/DataLakeStore/DataLakeStore.Test/ScenarioTests/AdlsAliasTests.cs, Line: 53, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1989 Path: /Users/runner/work/1/s/src/DataLakeStore/DataLakeStore.Test/ScenarioTests/AdlsAliasTests.cs, Line: 60, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1990 Path: /Users/runner/work/1/s/src/DataLakeStore/DataLakeStore.Test/ScenarioTests/AdlsAliasTests.cs, Line: 67, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1991 Path: /Users/runner/work/1/s/src/DataLakeStore/DataLakeStore.Test/ScenarioTests/AdlsAliasTests.cs, Line: 76, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1992 Path: /Users/runner/work/1/s/src/DataLakeStore/DataLakeStore.Test/ScenarioTests/AdlsAliasTests.cs, Line: 83, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1993 Path: /Users/runner/work/1/s/src/DataLakeStore/DataLakeStore.Test/ScenarioTests/AdlsAliasTests.cs, Line: 90, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1994 Path: /Users/runner/work/1/s/src/DataLakeStore/DataLakeStore.Test/ScenarioTests/AdlsAliasTests.cs, Line: 97, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1995 Path: /Users/runner/work/1/s/src/DataLakeStore/DataLakeStore.Test/ScenarioTests/AdlsTests.cs, Line: 38, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1996 Path: /Users/runner/work/1/s/src/DataLakeStore/DataLakeStore.Test/ScenarioTests/AdlsTests.cs, Line: 45, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1997 Path: /Users/runner/work/1/s/src/DataLakeStore/DataLakeStore.Test/ScenarioTests/AdlsTests.cs, Line: 52, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1998 Path: /Users/runner/work/1/s/src/DataLakeStore/DataLakeStore.Test/ScenarioTests/AdlsTests.cs, Line: 59, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #1999 Path: /Users/runner/work/1/s/src/DataLakeStore/DataLakeStore.Test/ScenarioTests/AdlsTests.cs, Line: 66, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #2000 Path: /Users/runner/work/1/s/src/DataLakeStore/DataLakeStore.Test/ScenarioTests/AdlsTests.cs, Line: 75, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #2001 Path: /Users/runner/work/1/s/src/DataLakeStore/DataLakeStore.Test/ScenarioTests/AdlsTests.cs, Line: 82, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #2002 Path: /Users/runner/work/1/s/src/DataLakeStore/DataLakeStore.Test/ScenarioTests/AdlsTests.cs, Line: 89, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #2003 Path: /Users/runner/work/1/s/src/DataLakeStore/DataLakeStore.Test/ScenarioTests/AdlsTests.cs, Line: 96, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #2004 Path: /Users/runner/work/1/s/src/DataLakeStore/DataLakeStore.Test/ScenarioTests/UrlDecodingRecordMatcher.cs, Line: 100, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #2005 Path: /Users/runner/work/1/s/src/DataLakeStore/DataLakeStore.Test/ScenarioTests/UrlDecodingRecordMatcher.cs, Line: 104, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #2006 Path: /Users/runner/work/1/s/src/DataLakeStore/DataLakeStore.Test/ScenarioTests/UrlDecodingRecordMatcher.cs, Line: 105, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #2007 Path: /Users/runner/work/1/s/src/DataLakeStore/DataLakeStore.Test/ScenarioTests/UrlDecodingRecordMatcher.cs, Line: 70, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html



Project: HPCCache.Test
    #2008 Path: /Users/runner/work/1/s/src/HPCCache/HPCCache.Test/Fixtures/StorageAccountFixture.cs, Line: 111, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #2009 Path: /Users/runner/work/1/s/src/HPCCache/HPCCache.Test/Fixtures/StorageAccountFixture.cs, Line: 129, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #2010 Path: /Users/runner/work/1/s/src/HPCCache/HPCCache.Test/Fixtures/StorageAccountFixture.cs, Line: 160, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #2011 Path: /Users/runner/work/1/s/src/HPCCache/HPCCache.Test/Fixtures/StorageAccountFixture.cs, Line: 264, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #2012 Path: /Users/runner/work/1/s/src/HPCCache/HPCCache.Test/Helper/CacheHelper.cs, Line: 218, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #2013 Path: /Users/runner/work/1/s/src/HPCCache/HPCCache.Test/Helper/CacheHelper.cs, Line: 383, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #2014 Path: /Users/runner/work/1/s/src/HPCCache/HPCCache.Test/ScenarioTests/HPCCacheController.cs, Line: 78, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #2015 Path: /Users/runner/work/1/s/src/HPCCache/HPCCache.Test/ScenarioTests/HPCCacheController.cs, Line: 85, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #2016 Path: /Users/runner/work/1/s/src/HPCCache/HPCCache.Test/ScenarioTests/HpcCacheStorageTargetTest.cs, Line: 111, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #2017 Path: /Users/runner/work/1/s/src/HPCCache/HPCCache.Test/ScenarioTests/HpcCacheStorageTargetTest.cs, Line: 73, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #2018 Path: /Users/runner/work/1/s/src/HPCCache/HPCCache.Test/ScenarioTests/HpcCacheStorageTargetTest.cs, Line: 92, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #2019 Path: /Users/runner/work/1/s/src/HPCCache/HPCCache.Test/ScenarioTests/HpcCacheTest.cs, Line: 102, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #2020 Path: /Users/runner/work/1/s/src/HPCCache/HPCCache.Test/ScenarioTests/HpcCacheTest.cs, Line: 121, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #2021 Path: /Users/runner/work/1/s/src/HPCCache/HPCCache.Test/ScenarioTests/HpcCacheTest.cs, Line: 142, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #2022 Path: /Users/runner/work/1/s/src/HPCCache/HPCCache.Test/ScenarioTests/HpcCacheTest.cs, Line: 160, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #2023 Path: /Users/runner/work/1/s/src/HPCCache/HPCCache.Test/ScenarioTests/HpcCacheTest.cs, Line: 176, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #2024 Path: /Users/runner/work/1/s/src/HPCCache/HPCCache.Test/ScenarioTests/HpcCacheTest.cs, Line: 66, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #2025 Path: /Users/runner/work/1/s/src/HPCCache/HPCCache.Test/ScenarioTests/HpcCacheTest.cs, Line: 84, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #2026 Path: /Users/runner/work/1/s/src/HPCCache/HPCCache.Test/Utilities/HpcCacheTestEnvironmentUtilities.cs, Line: 209, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #2027 Path: /Users/runner/work/1/s/src/HPCCache/HPCCache.Test/Utilities/StorageCacheTestUtilities.cs, Line: 39, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #2028 Path: /Users/runner/work/1/s/src/HPCCache/HPCCache.Test/Utilities/StorageCacheTestUtilities.cs, Line: 61, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html



Project: KeyVault.Test
    #2029 Path: /Users/runner/work/1/s/src/KeyVault/KeyVault.Test/ScenarioTests/KeyVaultManagementController.cs, Line: 61, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #2030 Path: /Users/runner/work/1/s/src/KeyVault/KeyVault.Test/ScenarioTests/KeyVaultManagementController.cs, Line: 69, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #2031 Path: /Users/runner/work/1/s/src/KeyVault/KeyVault.Test/ScenarioTests/KeyVaultManagementTests.cs, Line: 157, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #2032 Path: /Users/runner/work/1/s/src/KeyVault/KeyVault.Test/ScenarioTests/KeyVaultManagementTests.cs, Line: 174, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #2033 Path: /Users/runner/work/1/s/src/KeyVault/KeyVault.Test/ScenarioTests/KeyVaultManagementTests.cs, Line: 195, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #2034 Path: /Users/runner/work/1/s/src/KeyVault/KeyVault.Test/ScenarioTests/KeyVaultManagementTests.cs, Line: 218, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #2035 Path: /Users/runner/work/1/s/src/KeyVault/KeyVault.Test/ScenarioTests/KeyVaultManagementTests.cs, Line: 239, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #2036 Path: /Users/runner/work/1/s/src/KeyVault/KeyVault.Test/ScenarioTests/KeyVaultManagementTests.cs, Line: 262, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #2037 Path: /Users/runner/work/1/s/src/KeyVault/KeyVault.Test/ScenarioTests/KeyVaultManagementTests.cs, Line: 265, Message: ReSharper: ReplaceWithSingleCallToFirstOrDefault. / SonarQube "IEnumerable" LINQs should be simplified. See https://rules.sonarsource.com/csharp/RSPEC-2971
    #2038 Path: /Users/runner/work/1/s/src/KeyVault/KeyVault.Test/ScenarioTests/KeyVaultManagementTests.cs, Line: 292, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #2039 Path: /Users/runner/work/1/s/src/KeyVault/KeyVault.Test/ScenarioTests/KeyVaultManagementTests.cs, Line: 310, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #2040 Path: /Users/runner/work/1/s/src/KeyVault/KeyVault.Test/ScenarioTests/KeyVaultManagementTests.cs, Line: 329, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #2041 Path: /Users/runner/work/1/s/src/KeyVault/KeyVault.Test/ScenarioTests/KeyVaultManagementTests.cs, Line: 347, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #2042 Path: /Users/runner/work/1/s/src/KeyVault/KeyVault.Test/ScenarioTests/KeyVaultManagementTests.cs, Line: 384, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #2043 Path: /Users/runner/work/1/s/src/KeyVault/KeyVault.Test/ScenarioTests/KeyVaultManagementTests.cs, Line: 401, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #2044 Path: /Users/runner/work/1/s/src/KeyVault/KeyVault.Test/ScenarioTests/KeyVaultManagementTests.cs, Line: 428, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html



Project: Monitor.Test
    #2045 Path: /Users/runner/work/1/s/src/Monitor/Monitor.Test/Diagnostics/SetDiagnosticSettingCommandTests.cs, Line: 362, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #2046 Path: /Users/runner/work/1/s/src/Monitor/Monitor.Test/Diagnostics/SetDiagnosticSettingCommandTests.cs, Line: 379, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #2047 Path: /Users/runner/work/1/s/src/Monitor/Monitor.Test/Utilities.cs, Line: 120, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #2048 Path: /Users/runner/work/1/s/src/Monitor/Monitor.Test/Utilities.cs, Line: 196, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #2049 Path: /Users/runner/work/1/s/src/Monitor/Monitor.Test/Utilities.cs, Line: 197, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #2050 Path: /Users/runner/work/1/s/src/Monitor/Monitor.Test/Utilities.cs, Line: 276, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #2051 Path: /Users/runner/work/1/s/src/Monitor/Monitor.Test/Utilities.cs, Line: 394, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html



Project: Network.Test
    #2052 Path: /Users/runner/work/1/s/src/Network/Network.Test/ScenarioTests/ApplicationGatewayTests.cs, Line: 100, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #2053 Path: /Users/runner/work/1/s/src/Network/Network.Test/ScenarioTests/ApplicationGatewayTests.cs, Line: 108, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #2054 Path: /Users/runner/work/1/s/src/Network/Network.Test/ScenarioTests/ApplicationGatewayTests.cs, Line: 124, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #2055 Path: /Users/runner/work/1/s/src/Network/Network.Test/ScenarioTests/ApplicationGatewayTests.cs, Line: 132, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #2056 Path: /Users/runner/work/1/s/src/Network/Network.Test/ScenarioTests/ApplicationGatewayTests.cs, Line: 140, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #2057 Path: /Users/runner/work/1/s/src/Network/Network.Test/ScenarioTests/ApplicationGatewayTests.cs, Line: 148, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #2058 Path: /Users/runner/work/1/s/src/Network/Network.Test/ScenarioTests/ApplicationGatewayTests.cs, Line: 156, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #2059 Path: /Users/runner/work/1/s/src/Network/Network.Test/ScenarioTests/ApplicationGatewayTests.cs, Line: 164, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #2060 Path: /Users/runner/work/1/s/src/Network/Network.Test/ScenarioTests/ApplicationGatewayTests.cs, Line: 172, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #2061 Path: /Users/runner/work/1/s/src/Network/Network.Test/ScenarioTests/ApplicationGatewayTests.cs, Line: 180, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #2062 Path: /Users/runner/work/1/s/src/Network/Network.Test/ScenarioTests/ApplicationGatewayTests.cs, Line: 188, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #2063 Path: /Users/runner/work/1/s/src/Network/Network.Test/ScenarioTests/ApplicationGatewayTests.cs, Line: 52, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #2064 Path: /Users/runner/work/1/s/src/Network/Network.Test/ScenarioTests/ApplicationGatewayTests.cs, Line: 60, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #2065 Path: /Users/runner/work/1/s/src/Network/Network.Test/ScenarioTests/ApplicationGatewayTests.cs, Line: 68, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #2066 Path: /Users/runner/work/1/s/src/Network/Network.Test/ScenarioTests/ApplicationGatewayTests.cs, Line: 92, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #2067 Path: /Users/runner/work/1/s/src/Network/Network.Test/ScenarioTests/AzureFirewallPolicyTests.cs, Line: 109, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #2068 Path: /Users/runner/work/1/s/src/Network/Network.Test/ScenarioTests/NetworkInterfaceTestsGenerated.cs, Line: 77, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #2069 Path: /Users/runner/work/1/s/src/Network/Network.Test/ScenarioTests/VirtualNetworkGatewayTests.cs, Line: 83, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html



Project: PowerBI.Test
    #2070 Path: /Users/runner/work/1/s/src/PowerBIEmbedded/PowerBI.Test/ScenarioTests/UrlDecodingRecordMatcher.cs, Line: 73, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html



Project: Resources.Test
    #2071 Path: /Users/runner/work/1/s/src/Resources/Resources.Test/Features/GetAzureProviderFeatureCmdletTests.cs, Line: 174, Message: ReSharper: ReplaceWithSingleCallToCount. / SonarQube "IEnumerable" LINQs should be simplified. See https://rules.sonarsource.com/csharp/RSPEC-2971
    #2072 Path: /Users/runner/work/1/s/src/Resources/Resources.Test/Mocks/MockDataStore.cs, Line: 290, Message: https://www.jetbrains.com/help/resharper/MergeSequentialChecks.html
    #2073 Path: /Users/runner/work/1/s/src/Resources/Resources.Test/Models.ResourceGroups/ResourceClientTests.cs, Line: 508, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #2074 Path: /Users/runner/work/1/s/src/Resources/Resources.Test/Models.ResourceGroups/ResourceClientTests.cs, Line: 513, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #2075 Path: /Users/runner/work/1/s/src/Resources/Resources.Test/Models.ResourceGroups/ResourceClientTests.cs, Line: 518, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #2076 Path: /Users/runner/work/1/s/src/Resources/Resources.Test/Models.ResourceGroups/ResourceClientTests.cs, Line: 578, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #2077 Path: /Users/runner/work/1/s/src/Resources/Resources.Test/Models.ResourceGroups/ResourceClientTests.cs, Line: 674, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #2078 Path: /Users/runner/work/1/s/src/Resources/Resources.Test/Models.ResourceGroups/ResourceClientTests.cs, Line: 681, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #2079 Path: /Users/runner/work/1/s/src/Resources/Resources.Test/Models.ResourceGroups/ResourceClientTests.cs, Line: 787, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #2080 Path: /Users/runner/work/1/s/src/Resources/Resources.Test/Models.ResourceGroups/ResourceClientTests.cs, Line: 868, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #2081 Path: /Users/runner/work/1/s/src/Resources/Resources.Test/ScenarioTests/ActiveDirectoryTests.cs, Line: 192, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #2082 Path: /Users/runner/work/1/s/src/Resources/Resources.Test/ScenarioTests/ActiveDirectoryTests.cs, Line: 700, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #2083 Path: /Users/runner/work/1/s/src/Resources/Resources.Test/ScenarioTests/RoleAssignmentTests.cs, Line: 272, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #2084 Path: /Users/runner/work/1/s/src/Resources/Resources.Test/ScenarioTests/RoleAssignmentTests.cs, Line: 297, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html



Project: ServiceFabric.Test
    #2085 Path: /Users/runner/work/1/s/src/ServiceFabric/ServiceFabric.Test/ScenarioTests/TestServiceFabric.cs, Line: 179, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #2086 Path: /Users/runner/work/1/s/src/ServiceFabric/ServiceFabric.Test/ScenarioTests/TestServiceFabric.cs, Line: 180, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #2087 Path: /Users/runner/work/1/s/src/ServiceFabric/ServiceFabric.Test/ScenarioTests/TestServiceFabric.cs, Line: 185, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #2088 Path: /Users/runner/work/1/s/src/ServiceFabric/ServiceFabric.Test/ScenarioTests/TestServiceFabric.cs, Line: 186, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html



Project: Storage.Test
    #2089 Path: /Users/runner/work/1/s/src/Storage/Storage.Test/Blob/StorageBlobTestBase.cs, Line: 154, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #2090 Path: /Users/runner/work/1/s/src/Storage/Storage.Test/Common/Cmdlet/NewAzureStorageContextTest.cs, Line: 118, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #2091 Path: /Users/runner/work/1/s/src/Storage/Storage.Test/Common/NameUtilTest.cs, Line: 228, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #2092 Path: /Users/runner/work/1/s/src/Storage/Storage.Test/Common/PSServicePropertiesTest.cs, Line: 101, Message: https://www.jetbrains.com/help/resharper/MergeSequentialChecks.html
    #2093 Path: /Users/runner/work/1/s/src/Storage/Storage.Test/Common/PSServicePropertiesTest.cs, Line: 101, Message: https://www.jetbrains.com/help/resharper/MergeSequentialChecks.html
    #2094 Path: /Users/runner/work/1/s/src/Storage/Storage.Test/Common/PSServicePropertiesTest.cs, Line: 107, Message: https://www.jetbrains.com/help/resharper/MergeSequentialChecks.html
    #2095 Path: /Users/runner/work/1/s/src/Storage/Storage.Test/Common/PSServicePropertiesTest.cs, Line: 107, Message: https://www.jetbrains.com/help/resharper/MergeSequentialChecks.html
    #2096 Path: /Users/runner/work/1/s/src/Storage/Storage.Test/Common/PSServicePropertiesTest.cs, Line: 113, Message: https://www.jetbrains.com/help/resharper/MergeSequentialChecks.html
    #2097 Path: /Users/runner/work/1/s/src/Storage/Storage.Test/Common/PSServicePropertiesTest.cs, Line: 113, Message: https://www.jetbrains.com/help/resharper/MergeSequentialChecks.html
    #2098 Path: /Users/runner/work/1/s/src/Storage/Storage.Test/Common/PSServicePropertiesTest.cs, Line: 117, Message: https://www.jetbrains.com/help/resharper/MergeSequentialChecks.html
    #2099 Path: /Users/runner/work/1/s/src/Storage/Storage.Test/Common/PSServicePropertiesTest.cs, Line: 117, Message: https://www.jetbrains.com/help/resharper/MergeSequentialChecks.html
    #2100 Path: /Users/runner/work/1/s/src/Storage/Storage.Test/Common/PSServicePropertiesTest.cs, Line: 121, Message: https://www.jetbrains.com/help/resharper/MergeSequentialChecks.html
    #2101 Path: /Users/runner/work/1/s/src/Storage/Storage.Test/Common/PSServicePropertiesTest.cs, Line: 121, Message: https://www.jetbrains.com/help/resharper/MergeSequentialChecks.html
    #2102 Path: /Users/runner/work/1/s/src/Storage/Storage.Test/Common/PSServicePropertiesTest.cs, Line: 126, Message: https://www.jetbrains.com/help/resharper/MergeSequentialChecks.html
    #2103 Path: /Users/runner/work/1/s/src/Storage/Storage.Test/Common/PSServicePropertiesTest.cs, Line: 126, Message: https://www.jetbrains.com/help/resharper/MergeSequentialChecks.html
    #2104 Path: /Users/runner/work/1/s/src/Storage/Storage.Test/Common/PSServicePropertiesTest.cs, Line: 165, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #2105 Path: /Users/runner/work/1/s/src/Storage/Storage.Test/Common/PSServicePropertiesTest.cs, Line: 95, Message: https://www.jetbrains.com/help/resharper/MergeSequentialChecks.html
    #2106 Path: /Users/runner/work/1/s/src/Storage/Storage.Test/Common/PSServicePropertiesTest.cs, Line: 95, Message: https://www.jetbrains.com/help/resharper/MergeSequentialChecks.html
    #2107 Path: /Users/runner/work/1/s/src/Storage/Storage.Test/File/Cmdlet/GetAzureStorageFileTest.cs, Line: 35, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #2108 Path: /Users/runner/work/1/s/src/Storage/Storage.Test/File/Cmdlet/GetAzureStorageFileTest.cs, Line: 36, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #2109 Path: /Users/runner/work/1/s/src/Storage/Storage.Test/File/Cmdlet/GetAzureStorageFileTest.cs, Line: 49, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #2110 Path: /Users/runner/work/1/s/src/Storage/Storage.Test/File/Cmdlet/GetAzureStorageFileTest.cs, Line: 50, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #2111 Path: /Users/runner/work/1/s/src/Storage/Storage.Test/File/Cmdlet/GetAzureStorageFileTest.cs, Line: 64, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #2112 Path: /Users/runner/work/1/s/src/Storage/Storage.Test/File/Cmdlet/GetAzureStorageFileTest.cs, Line: 65, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #2113 Path: /Users/runner/work/1/s/src/Storage/Storage.Test/File/Cmdlet/NewAzureStorageDirectoryTest.cs, Line: 104, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #2114 Path: /Users/runner/work/1/s/src/Storage/Storage.Test/File/Cmdlet/NewAzureStorageDirectoryTest.cs, Line: 108, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #2115 Path: /Users/runner/work/1/s/src/Storage/Storage.Test/File/Cmdlet/NewAzureStorageShareTest.cs, Line: 103, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #2116 Path: /Users/runner/work/1/s/src/Storage/Storage.Test/File/Cmdlet/NewAzureStorageShareTest.cs, Line: 99, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #2117 Path: /Users/runner/work/1/s/src/Storage/Storage.Test/File/FileAssertUtil.cs, Line: 55, Message: ReSharper: Type check and casts can be merged. See https://www.jetbrains.com/help/resharper/MergeCastWithTypeCheck.html / SonarQube: Duplicate casts should not be made. See https://rules.sonarsource.com/csharp/RSPEC-3247
    #2118 Path: /Users/runner/work/1/s/src/Storage/Storage.Test/File/FileAssertUtil.cs, Line: 6, Message: ReSharper: Type check and casts can be merged. See https://www.jetbrains.com/help/resharper/MergeCastWithTypeCheck.html / SonarQube: Duplicate casts should not be made. See https://rules.sonarsource.com/csharp/RSPEC-3247
    #2119 Path: /Users/runner/work/1/s/src/Storage/Storage.Test/File/PSCmdletReflectionHelper.cs, Line: 68, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #2120 Path: /Users/runner/work/1/s/src/Storage/Storage.Test/Service/MockStorageBlobManagement.cs, Line: 156, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #2121 Path: /Users/runner/work/1/s/src/Storage/Storage.Test/Service/MockStorageQueueManagement.cs, Line: 87, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #2122 Path: /Users/runner/work/1/s/src/Storage/Storage.Test/Service/MockStorageTableManagement.cs, Line: 101, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html



Project: Synapse.Test
    #2123 Path: /Users/runner/work/1/s/src/Synapse/Synapse.Test/ScenarioTests/IntegrationRuntimeTests.cs, Line: 79, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #2124 Path: /Users/runner/work/1/s/src/Synapse/Synapse.Test/ScenarioTests/SparkJobTests.cs, Line: 47, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #2125 Path: /Users/runner/work/1/s/src/Synapse/Synapse.Test/ScenarioTests/SqlDatabaseTests.cs, Line: 49, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #2126 Path: /Users/runner/work/1/s/src/Synapse/Synapse.Test/ScenarioTests/SqlPoolV3Tests.cs, Line: 49, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html



Project: Websites.Test
    #2127 Path: /Users/runner/work/1/s/src/Websites/Websites.Test/ScenarioTests/WebsitesController.cs, Line: 63, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #2128 Path: /Users/runner/work/1/s/src/Websites/Websites.Test/ScenarioTests/WebsitesController.cs, Line: 70, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html



Project: Authenticators
    #2129 Path: /Users/runner/work/1/s/src/Accounts/Authenticators/AccessTokenAuthenticator.cs, Line: 49, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #2130 Path: /Users/runner/work/1/s/src/Accounts/Authenticators/AccessTokenAuthenticator.cs, Line: 58, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #2131 Path: /Users/runner/work/1/s/src/Accounts/Authenticators/AccessTokenAuthenticator.cs, Line: 67, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #2132 Path: /Users/runner/work/1/s/src/Accounts/Authenticators/DefaultAuthenticatorBuilder.cs, Line: 49, Message: https://www.jetbrains.com/help/resharper/MergeSequentialChecks.html
    #2133 Path: /Users/runner/work/1/s/src/Accounts/Authenticators/InteractiveUserAuthenticator.cs, Line: 102, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html



Project: ScenarioTest.ResourceManager
    #2134 Path: /Users/runner/work/1/s/tools/ScenarioTest.ResourceManager/Mocks/MockClientFactory.cs, Line: 116, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #2135 Path: /Users/runner/work/1/s/tools/ScenarioTest.ResourceManager/Mocks/MockClientFactory.cs, Line: 260, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #2136 Path: /Users/runner/work/1/s/tools/ScenarioTest.ResourceManager/Mocks/MockClientFactory.cs, Line: 277, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #2137 Path: /Users/runner/work/1/s/tools/ScenarioTest.ResourceManager/PermissiveRecordMatcher.cs, Line: 32, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #2138 Path: /Users/runner/work/1/s/tools/ScenarioTest.ResourceManager/PermissiveRecordMatcher.cs, Line: 44, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #2139 Path: /Users/runner/work/1/s/tools/ScenarioTest.ResourceManager/PermissiveRecordMatcherWithApiExclusion.cs, Line: 104, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #2140 Path: /Users/runner/work/1/s/tools/ScenarioTest.ResourceManager/PermissiveRecordMatcherWithApiExclusion.cs, Line: 125, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #2141 Path: /Users/runner/work/1/s/tools/ScenarioTest.ResourceManager/PermissiveRecordMatcherWithApiExclusion.cs, Line: 142, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #2142 Path: /Users/runner/work/1/s/tools/ScenarioTest.ResourceManager/PermissiveRecordMatcherWithApiExclusion.cs, Line: 78, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #2143 Path: /Users/runner/work/1/s/tools/ScenarioTest.ResourceManager/PermissiveRecordMatcherWithResourceApiExlcusion.cs, Line: 119, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #2144 Path: /Users/runner/work/1/s/tools/ScenarioTest.ResourceManager/PermissiveRecordMatcherWithResourceApiExlcusion.cs, Line: 157, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #2145 Path: /Users/runner/work/1/s/tools/ScenarioTest.ResourceManager/PermissiveRecordMatcherWithResourceApiExlcusion.cs, Line: 219, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #2146 Path: /Users/runner/work/1/s/tools/ScenarioTest.ResourceManager/PermissiveRecordMatcherWithResourceApiExlcusion.cs, Line: 93, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #2147 Path: /Users/runner/work/1/s/tools/ScenarioTest.ResourceManager/PowerShellExtensions.cs, Line: 108, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #2148 Path: /Users/runner/work/1/s/tools/ScenarioTest.ResourceManager/PowerShellExtensions.cs, Line: 109, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #2149 Path: /Users/runner/work/1/s/tools/ScenarioTest.ResourceManager/PowerShellExtensions.cs, Line: 113, Message: ReSharper: Convert 'as' expression type check and the following null check into pattern matching. See https://www.jetbrains.com/help/resharper/UsePatternMatching.html
    #2150 Path: /Users/runner/work/1/s/tools/ScenarioTest.ResourceManager/PowerShellExtensions.cs, Line: 117, Message: ReSharper: Replace if statement with null-propagating code. See https://www.jetbrains.com/help/resharper/UseNullPropagation.html
    #2151 Path: /Users/runner/work/1/s/tools/ScenarioTest.ResourceManager/PowerShellExtensions.cs, Line: 158, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #2152 Path: /Users/runner/work/1/s/tools/ScenarioTest.ResourceManager/PowerShellExtensions.cs, Line: 176, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #2153 Path: /Users/runner/work/1/s/tools/ScenarioTest.ResourceManager/PowerShellExtensions.cs, Line: 239, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html
    #2154 Path: /Users/runner/work/1/s/tools/ScenarioTest.ResourceManager/PowerShellExtensions.cs, Line: 245, Message: ReSharper: Use string interpolation expression. See https://www.jetbrains.com/help/resharper/UseStringInterpolation.html



--- Rules Summary ---
R9: 1148
R7: 544
R2: 140
R8: 138
R6: 67
R5: 57
R4: 55
R10: 3
R3: 2

--- Summary ---
Fixed ReSharper issues: 2014
Fixed SonarQube issues: 184
Total fixed issues: 2154

Finished in: 4 min 35 s

######################################################################
Nr: 1 - UsePatternMatchingRewriterR8
Filepath: /Users/runner/work/1/s/src/Accounts/Accounts/Context/GetAzureRMContext.cs
Description: Error: The created Syntax Tree is semantically incorrect.
------------------------------------------------------------------------
---- Original Tree ----
using System;
using System.Collections.ObjectModel;
using System.Linq;
using System.Management.Automation;

using Microsoft.Azure.Commands.Common.Authentication;
using Microsoft.Azure.Commands.Common.Authentication.Abstractions;
using Microsoft.Azure.Commands.Common.Authentication.Models;
using Microsoft.Azure.Commands.Profile.Models.Core;
using Microsoft.Azure.Commands.ResourceManager.Common;
using Microsoft.WindowsAzure.Commands.Utilities.Common;

namespace Microsoft.Azure.Commands.Profile
{
    /// <summary>
    /// Cmdlet to get current context.
    /// </summary>
    [Cmdlet("Get", ResourceManager.Common.AzureRMConstants.AzureRMPrefix + "Context", DefaultParameterSetName = GetSingleParameterSet)]
    [OutputType(typeof(PSAzureContext))]
    public class GetAzureRMContextCommand : AzureRMCmdlet, IDynamicParameters
    {
        public const string ListAllParameterSet = "ListAllContexts", GetSingleParameterSet = "GetSingleContext";
        /// <summary>
        /// Gets the current default context.
        /// </summary>
        protected override IAzureContext DefaultContext
        {
            get
            {
                try
                {
                    if (DefaultProfile == null || DefaultProfile.DefaultContext == null)
                    {
                        return null;
                    }
                }
                catch (InvalidOperationException)
                {
                    return null;
                }

                return DefaultProfile.DefaultContext;
            }
        }

        [Parameter(Mandatory = true, ParameterSetName = ListAllParameterSet, HelpMessage = "List all available contexts in the current session.")]
        public SwitchParameter ListAvailable { get; set; }

        [Parameter(Mandatory = false, ParameterSetName = ListAllParameterSet, HelpMessage = "Refresh contexts from token cache")]
        public SwitchParameter RefreshContextFromTokenCache { get; set; }

        protected override void BeginProcessing()
        {
            // Skip BeginProcessing()
        }

        public override void ExecuteCmdlet()
        {
            if (ListAvailable.IsPresent && RefreshContextFromTokenCache.IsPresent)
            {
                try
                {
                    var defaultProfile = DefaultProfile as AzureRmProfile;
                    if (defaultProfile != null && string.Equals(AzureSession.Instance?.ARMContextSaveMode, "CurrentUser"))
                    {
                        defaultProfile.RefreshContextsFromCache();
                    }
                }
                catch (Exception e)
                {
                    WriteWarning(e.ToString());
                }
            }

            // If no context is found, return
            if (DefaultContext == null && !this.ListAvailable.IsPresent)
            {
                return;
            }

            if (this.ListAvailable.IsPresent)
            {
                var profile = DefaultProfile as AzureRmProfile;
                if (profile?.Contexts != null)
                {
                    foreach (var context in profile.Contexts)
                    {
                        WriteContext(context.Value, context.Key);
                    }
                }

            }
            else
            {
                var profile = DefaultProfile as AzureRmProfile;
                var context = DefaultContext;
                if (profile != null && MyInvocation.BoundParameters.ContainsKey("Name"))
                {
                    var key = MyInvocation.BoundParameters["Name"] as string;
                    if (profile.Contexts != null && profile.Contexts.ContainsKey(key))
                    {
                        context = profile.Contexts[key];
                        WriteContext(context, key);
                    }
                }
                else
                {
                    WriteContext(context, (profile)?.DefaultContextKey);
                }
            }
        }

        void WriteContext(IAzureContext azureContext, string name)
        {
            var context = new PSAzureContext(azureContext);
            if (name != null)
            {
                context.Name = name;
            }

            // Don't write the default (empty) context to the output stream
            if (context.Account == null &&
                context.Environment == null &&
                context.Subscription == null &&
                context.Tenant == null)
            {
                return;
            }

            WriteObject(context);
        }

        public object GetDynamicParameters()
        {
            var parameters = new RuntimeDefinedParameterDictionary();
            AzureRmProfile localProfile = DefaultProfile as AzureRmProfile;
            if (localProfile?.Contexts != null && localProfile.Contexts.Count > 0)
            {
                var nameParameter = new RuntimeDefinedParameter(
                "Name", typeof(string),
                    new Collection<Attribute>()
                    {
                        new ParameterAttribute { Position =0, Mandatory=false, HelpMessage="The name of the context", ParameterSetName=GetSingleParameterSet },
                        new ValidateSetAttribute((DefaultProfile as AzureRmProfile).Contexts.Keys.ToArray())
                    }
                );
                parameters.Add(nameParameter.Name, nameParameter);
            }

            return parameters;
        }
    }
}

---- Transformed Tree ----
using System;
using System.Collections.ObjectModel;
using System.Linq;
using System.Management.Automation;

using Microsoft.Azure.Commands.Common.Authentication;
using Microsoft.Azure.Commands.Common.Authentication.Abstractions;
using Microsoft.Azure.Commands.Common.Authentication.Models;
using Microsoft.Azure.Commands.Profile.Models.Core;
using Microsoft.Azure.Commands.ResourceManager.Common;
using Microsoft.WindowsAzure.Commands.Utilities.Common;

namespace Microsoft.Azure.Commands.Profile
{
    /// <summary>
    /// Cmdlet to get current context.
    /// </summary>
    [Cmdlet("Get", ResourceManager.Common.AzureRMConstants.AzureRMPrefix + "Context", DefaultParameterSetName = GetSingleParameterSet)]
    [OutputType(typeof(PSAzureContext))]
    public class GetAzureRMContextCommand : AzureRMCmdlet, IDynamicParameters
    {
        public const string ListAllParameterSet = "ListAllContexts", GetSingleParameterSet = "GetSingleContext";
        /// <summary>
        /// Gets the current default context.
        /// </summary>
        protected override IAzureContext DefaultContext
        {
            get
            {
                try
                {
                    if (DefaultProfile == null || DefaultProfile.DefaultContext == null)
                    {
                        return null;
                    }
                }
                catch (InvalidOperationException)
                {
                    return null;
                }

                return DefaultProfile.DefaultContext;
            }
        }

        [Parameter(Mandatory = true, ParameterSetName = ListAllParameterSet, HelpMessage = "List all available contexts in the current session.")]
        public SwitchParameter ListAvailable { get; set; }

        [Parameter(Mandatory = false, ParameterSetName = ListAllParameterSet, HelpMessage = "Refresh contexts from token cache")]
        public SwitchParameter RefreshContextFromTokenCache { get; set; }

        protected override void BeginProcessing()
        {
            // Skip BeginProcessing()
        }

        public override void ExecuteCmdlet()
        {
            if (ListAvailable.IsPresent && RefreshContextFromTokenCache.IsPresent)
            {
                try
                {
                    if (DefaultProfile is AzureRmProfile defaultProfile && string.Equals(AzureSession.Instance?.ARMContextSaveMode, "CurrentUser"))
                    {
                        defaultProfile.RefreshContextsFromCache();
                    }
                }
                catch (Exception e)
                {
                    WriteWarning(e.ToString());
                }
            }

            // If no context is found, return
            if (DefaultContext == null && !this.ListAvailable.IsPresent)
            {
                return;
            }

            if (this.ListAvailable.IsPresent)
            {
                if (profile?.Contexts != null)
                {
                    foreach (var context in profile.Contexts)
                    {
                        WriteContext(context.Value, context.Key);
                    }
                }

            }
            else
            {
                var context = DefaultContext;

                if (DefaultProfile is AzureRmProfile profile && MyInvocation.BoundParameters.ContainsKey("Name"))
                {
                    var key = MyInvocation.BoundParameters["Name"] as string;
                    if (profile.Contexts != null && profile.Contexts.ContainsKey(key))
                    {
                        context = profile.Contexts[key];
                        WriteContext(context, key);
                    }
                }
                else
                {
                    WriteContext(context, (profile)?.DefaultContextKey);
                }
            }
        }

        void WriteContext(IAzureContext azureContext, string name)
        {
            var context = new PSAzureContext(azureContext);
            if (name != null)
            {
                context.Name = name;
            }

            // Don't write the default (empty) context to the output stream
            if (context.Account == null &&
                context.Environment == null &&
                context.Subscription == null &&
                context.Tenant == null)
            {
                return;
            }

            WriteObject(context);
        }

        public object GetDynamicParameters()
        {
            var parameters = new RuntimeDefinedParameterDictionary();
            AzureRmProfile localProfile = DefaultProfile as AzureRmProfile;
            if (localProfile?.Contexts != null && localProfile.Contexts.Count > 0)
            {
                var nameParameter = new RuntimeDefinedParameter(
                "Name", typeof(string),
                    new Collection<Attribute>()
                    {
                        new ParameterAttribute { Position =0, Mandatory=false, HelpMessage="The name of the context", ParameterSetName=GetSingleParameterSet },
                        new ValidateSetAttribute((DefaultProfile as AzureRmProfile).Contexts.Keys.ToArray())
                    }
                );
                parameters.Add(nameParameter.Name, nameParameter);
            }

            return parameters;
        }
    }
}

---- Semantic diagnostics *before* transformation ----
/Users/runner/work/1/s/src/Accounts/Accounts/Context/GetAzureRMContext.cs(25,1): hidden CS8019: Unnecessary using directive.
---- Semantic diagnostics *after* transformation ----
/Users/runner/work/1/s/src/Accounts/Accounts/Context/GetAzureRMContext.cs(96,21): error CS0103: The name 'profile' does not exist in the current context,/Users/runner/work/1/s/src/Accounts/Accounts/Context/GetAzureRMContext.cs(98,45): error CS0103: The name 'profile' does not exist in the current context,/Users/runner/work/1/s/src/Accounts/Accounts/Context/GetAzureRMContext.cs(120,44): error CS0165: Use of unassigned local variable 'profile',/Users/runner/work/1/s/src/Accounts/Accounts/Context/GetAzureRMContext.cs(25,1): hidden CS8019: Unnecessary using directive.
######################################################################


######################################################################
Nr: 2 - UsePatternMatchingRewriterR8
Filepath: /Users/runner/work/1/s/src/Compute/Compute/Extension/DSC/DscExtensionSettingsSerializer.cs
Description: Error: The created Syntax Tree is semantically incorrect.
------------------------------------------------------------------------
---- Original Tree ----
using Newtonsoft.Json;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Globalization;
using System.Management.Automation;
using System.Runtime.InteropServices;
using System.Security;

namespace Microsoft.WindowsAzure.Commands.Common.Extensions.DSC
{
    public class DscExtensionSettingsSerializer
    {
        /// <summary>
        /// Serialize DscExtensionPublicSettings to string.
        /// </summary>
        /// <param name="extensionPublicSettings"></param>
        /// <returns></returns>
        public static string SerializePublicSettings(DscExtensionPublicSettings extensionPublicSettings)
        {
            return JsonConvert.SerializeObject(extensionPublicSettings);
        }

        /// <summary>
        /// Serialize DscPrivateSettings to string.
        /// </summary>
        /// <param name="privateSettings"></param>
        /// <returns></returns>
        public static string SerializePrivateSettings(DscExtensionPrivateSettings privateSettings)
        {
            return JsonConvert.SerializeObject(privateSettings);
        }

        public static DscExtensionPublicSettings DeserializePublicSettings(string publicSettingsString)
        {
            DscExtensionPublicSettings extensionPublicSettings;
            try
            {
                extensionPublicSettings = string.IsNullOrEmpty(publicSettingsString)
                                     ? null
                                     : JsonConvert.DeserializeObject<DscExtensionPublicSettings>(publicSettingsString);
            }
            catch (JsonException)
            {
                // Try deserialize as version 1.0
                try
                {
                    DscExtensionPublicSettings.Version1 publicSettingsV1 =
                        JsonConvert.DeserializeObject<DscExtensionPublicSettings.Version1>(publicSettingsString);
                    extensionPublicSettings = publicSettingsV1.ToCurrentVersion();
                }
                catch (JsonException)
                {
                    throw;
                }
            }
            return extensionPublicSettings;
        }

        /// <summary>
        /// Convert hashtable of public settings into two parts:
        /// 1) Array of public settings in format:
        /// [
        ///             {
        ///                 "Name":  "String Parameter",
        ///                 "Value":  "String Value",
        ///                 "TypeName":  "System.String"
        ///             }
        /// ]
        /// 2) Private settings hashtable. We extract all sensitive information (like password from PSCredential)
        ///    and store it in private settings. Public settings will reference them in form:
        ///             {
        ///                 "Name":  "AdminCredential",
        ///                 "Value":  
        ///                 {
        ///                     "Password" : "PrivateSettings:28AC4D36-A99B-41DE-8421-2BCC1C7C1A3B"
        ///                     "UserName" : "DOMAIN\LOGIN"
        ///                 },
        ///                 "TypeName":  "System.Management.Automation.PSCredential"
        ///             }
        /// and private hashtable will look like that:
        /// {
        ///     "28AC4D36-A99B-41DE-8421-2BCC1C7C1A3B" : "password"
        /// }
        /// </summary>
        /// <param name="arguments"></param>
        /// <returns>tuple of array (public settings) and hashtable (private settings)</returns>
        public static Tuple<DscExtensionPublicSettings.Property[], Hashtable> SeparatePrivateItems(Hashtable arguments)
        {
            var publicSettings = new List<DscExtensionPublicSettings.Property>();
            var privateSettings = new Hashtable();
            if (arguments != null)
            {
                foreach (DictionaryEntry argument in arguments)
                {
                    object entryValue = argument.Value;
                    string entryType = argument.Value == null ? "null" : argument.Value.GetType().ToString();
                    string entryName = argument.Key.ToString();
                    // Special case for PSCredential
                    PSCredential credential = argument.Value as PSCredential;
                    if (credential == null)
                    {
                        PSObject psObject = argument.Value as PSObject;
                        if (psObject != null)
                        {
                            credential = psObject.BaseObject as PSCredential;
                        }
                    }
                    if (credential != null)
                    {
                        // plainTextPassword is a string object with sensitive information  in plain text. 
                        // We pass it to 3rd party serializer which may create copies of the string.
                        string plainTextPassword = ConvertToUnsecureString(credential.Password);
                        string userName = credential.UserName;
                        string passwordRef = Guid.NewGuid().ToString();
                        privateSettings.Add(passwordRef, plainTextPassword);
                        var newValue = new Hashtable();
                        newValue["UserName"] = String.Format(CultureInfo.InvariantCulture, userName);
                        newValue["Password"] = String.Format(CultureInfo.InvariantCulture, "PrivateSettingsRef:{0}",
                            passwordRef);
                        entryValue = newValue;
                        entryType = typeof(PSCredential).ToString();
                    }

                    var entry = new DscExtensionPublicSettings.Property
                    {
                        Name = entryName,
                        TypeName = entryType,
                        Value = entryValue,
                    };
                    publicSettings.Add(entry);
                }
            }
            return new Tuple<DscExtensionPublicSettings.Property[], Hashtable>(publicSettings.ToArray(), privateSettings);
        }

        /// <summary>
        /// Converte SecureString to String.
        /// </summary>
        /// <remarks>
        /// This method creates a managed object with sensitive information and undetermined lifecycle.
        /// </remarks>
        /// <param name="source"></param>
        /// <returns></returns>
        private static string ConvertToUnsecureString(SecureString source)
        {
            if (source == null)
                throw new ArgumentNullException("source");

            IntPtr unmanagedString = IntPtr.Zero;
            try
            {
                unmanagedString = Marshal.SecureStringToGlobalAllocUnicode(source);
                return Marshal.PtrToStringUni(unmanagedString);
            }
            finally
            {
                Marshal.ZeroFreeGlobalAllocUnicode(unmanagedString);
            }
        }

    }
}

---- Transformed Tree ----
using Newtonsoft.Json;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Globalization;
using System.Management.Automation;
using System.Runtime.InteropServices;
using System.Security;

namespace Microsoft.WindowsAzure.Commands.Common.Extensions.DSC
{
    public class DscExtensionSettingsSerializer
    {
        /// <summary>
        /// Serialize DscExtensionPublicSettings to string.
        /// </summary>
        /// <param name="extensionPublicSettings"></param>
        /// <returns></returns>
        public static string SerializePublicSettings(DscExtensionPublicSettings extensionPublicSettings)
        {
            return JsonConvert.SerializeObject(extensionPublicSettings);
        }

        /// <summary>
        /// Serialize DscPrivateSettings to string.
        /// </summary>
        /// <param name="privateSettings"></param>
        /// <returns></returns>
        public static string SerializePrivateSettings(DscExtensionPrivateSettings privateSettings)
        {
            return JsonConvert.SerializeObject(privateSettings);
        }

        public static DscExtensionPublicSettings DeserializePublicSettings(string publicSettingsString)
        {
            DscExtensionPublicSettings extensionPublicSettings;
            try
            {
                extensionPublicSettings = string.IsNullOrEmpty(publicSettingsString)
                                     ? null
                                     : JsonConvert.DeserializeObject<DscExtensionPublicSettings>(publicSettingsString);
            }
            catch (JsonException)
            {
                // Try deserialize as version 1.0
                try
                {
                    DscExtensionPublicSettings.Version1 publicSettingsV1 =
                        JsonConvert.DeserializeObject<DscExtensionPublicSettings.Version1>(publicSettingsString);
                    extensionPublicSettings = publicSettingsV1.ToCurrentVersion();
                }
                catch (JsonException)
                {
                    throw;
                }
            }
            return extensionPublicSettings;
        }

        /// <summary>
        /// Convert hashtable of public settings into two parts:
        /// 1) Array of public settings in format:
        /// [
        ///             {
        ///                 "Name":  "String Parameter",
        ///                 "Value":  "String Value",
        ///                 "TypeName":  "System.String"
        ///             }
        /// ]
        /// 2) Private settings hashtable. We extract all sensitive information (like password from PSCredential)
        ///    and store it in private settings. Public settings will reference them in form:
        ///             {
        ///                 "Name":  "AdminCredential",
        ///                 "Value":  
        ///                 {
        ///                     "Password" : "PrivateSettings:28AC4D36-A99B-41DE-8421-2BCC1C7C1A3B"
        ///                     "UserName" : "DOMAIN\LOGIN"
        ///                 },
        ///                 "TypeName":  "System.Management.Automation.PSCredential"
        ///             }
        /// and private hashtable will look like that:
        /// {
        ///     "28AC4D36-A99B-41DE-8421-2BCC1C7C1A3B" : "password"
        /// }
        /// </summary>
        /// <param name="arguments"></param>
        /// <returns>tuple of array (public settings) and hashtable (private settings)</returns>
        public static Tuple<DscExtensionPublicSettings.Property[], Hashtable> SeparatePrivateItems(Hashtable arguments)
        {
            var publicSettings = new List<DscExtensionPublicSettings.Property>();
            var privateSettings = new Hashtable();
            if (arguments != null)
            {
                foreach (DictionaryEntry argument in arguments)
                {
                    object entryValue = argument.Value;
                    string entryType = argument.Value == null ? "null" : argument.Value.GetType().ToString();
                    string entryName = argument.Key.ToString();
                    // Special case for PSCredential
                    if (credential == null)
                    {
                        if (argument.Value is PSObject psObject)
                        {
                            credential = psObject.BaseObject as PSCredential;
                        }
                    }

                    if (argument.Value is PSCredential credential)
                    {
                        // plainTextPassword is a string object with sensitive information  in plain text. 
                        // We pass it to 3rd party serializer which may create copies of the string.
                        string plainTextPassword = ConvertToUnsecureString(credential.Password);
                        string userName = credential.UserName;
                        string passwordRef = Guid.NewGuid().ToString();
                        privateSettings.Add(passwordRef, plainTextPassword);
                        var newValue = new Hashtable();
                        newValue["UserName"] = String.Format(CultureInfo.InvariantCulture, userName);
                        newValue["Password"] = String.Format(CultureInfo.InvariantCulture, "PrivateSettingsRef:{0}",
                            passwordRef);
                        entryValue = newValue;
                        entryType = typeof(PSCredential).ToString();
                    }

                    var entry = new DscExtensionPublicSettings.Property
                    {
                        Name = entryName,
                        TypeName = entryType,
                        Value = entryValue,
                    };
                    publicSettings.Add(entry);
                }
            }
            return new Tuple<DscExtensionPublicSettings.Property[], Hashtable>(publicSettings.ToArray(), privateSettings);
        }

        /// <summary>
        /// Converte SecureString to String.
        /// </summary>
        /// <remarks>
        /// This method creates a managed object with sensitive information and undetermined lifecycle.
        /// </remarks>
        /// <param name="source"></param>
        /// <returns></returns>
        private static string ConvertToUnsecureString(SecureString source)
        {
            if (source == null)
                throw new ArgumentNullException("source");

            IntPtr unmanagedString = IntPtr.Zero;
            try
            {
                unmanagedString = Marshal.SecureStringToGlobalAllocUnicode(source);
                return Marshal.PtrToStringUni(unmanagedString);
            }
            finally
            {
                Marshal.ZeroFreeGlobalAllocUnicode(unmanagedString);
            }
        }

    }
}

---- Semantic diagnostics *before* transformation ----

---- Semantic diagnostics *after* transformation ----
/Users/runner/work/1/s/src/Compute/Compute/Extension/DSC/DscExtensionSettingsSerializer.cs(114,25): error CS0841: Cannot use local variable 'credential' before it is declared,/Users/runner/work/1/s/src/Compute/Compute/Extension/DSC/DscExtensionSettingsSerializer.cs(118,29): error CS0841: Cannot use local variable 'credential' before it is declared
######################################################################


######################################################################
Nr: 3 - UsePatternMatchingRewriterR8
Filepath: /Users/runner/work/1/s/src/DataFactory/DataFactoryV2/Models/DataFactoryClient.IntegrationRuntimes.cs
Description: Error: The created Syntax Tree is semantically incorrect.
------------------------------------------------------------------------
---- Original Tree ----
using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Management.Automation;
using System.Net;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Azure.Commands.DataFactoryV2.Models;
using Microsoft.Azure.Commands.DataFactoryV2.Properties;
using Microsoft.Azure.Management.DataFactory;
using Microsoft.Azure.Management.DataFactory.Models;
using Microsoft.Rest.Azure;

namespace Microsoft.Azure.Commands.DataFactoryV2
{
    public partial class DataFactoryClient
    {
        public virtual async Task<IntegrationRuntimeResource> CreateOrUpdateIntegrationRuntimeAsync(
            string resourceGroupName,
            string dataFactoryName,
            string integrationRuntimeName,
            IntegrationRuntimeResource resource)
        {
            return await this.DataFactoryManagementClient.IntegrationRuntimes.CreateOrUpdateAsync(
                    resourceGroupName,
                    dataFactoryName,
                    integrationRuntimeName,
                    resource);
        }

        public virtual PSIntegrationRuntime CreateOrUpdateIntegrationRuntime(CreatePSIntegrationRuntimeParameters parameters)
        {
            PSIntegrationRuntime psIntegrationRuntime = null;

            Action createOrUpdateIntegrationRuntime = () =>
            {
                var integrationRuntime = this.CreateOrUpdateIntegrationRuntimeAsync(
                    parameters.ResourceGroupName,
                    parameters.DataFactoryName,
                    parameters.Name,
                    parameters.IntegrationRuntimeResource).ConfigureAwait(true).GetAwaiter().GetResult();

                var managed = integrationRuntime.Properties as ManagedIntegrationRuntime;
                if (managed != null)
                {
                    psIntegrationRuntime = new PSManagedIntegrationRuntime(integrationRuntime,
                            parameters.ResourceGroupName,
                            parameters.DataFactoryName);
                }
                else
                {
                    psIntegrationRuntime = CreateSelfHostedIntegrationRuntime(integrationRuntime,
                        parameters.ResourceGroupName,
                        parameters.DataFactoryName);
                }
            };

            parameters.ConfirmAction(
                    parameters.Force,  // prompt only if the integration runtime exists
                    string.Format(
                        CultureInfo.InvariantCulture,
                        Resources.IntegrationRuntimeExists,
                        parameters.Name,
                        parameters.DataFactoryName),
                    string.Format(
                        CultureInfo.InvariantCulture,
                        Resources.IntegrationRuntimeUpdating,
                        parameters.Name,
                        parameters.DataFactoryName),
                    parameters.Name,
                    createOrUpdateIntegrationRuntime,
                    () => parameters.IsUpdate);

            return psIntegrationRuntime;
        }

        public virtual async Task<List<PSIntegrationRuntime>> ListIntegrationRuntimesAsync(AdfEntityFilterOptions filterOptions)
        {
            var integrationRuntimes = new List<PSIntegrationRuntime>();

            IPage<IntegrationRuntimeResource> response;
            if (filterOptions.NextLink.IsNextPageLink())
            {
                response = await this.DataFactoryManagementClient.IntegrationRuntimes.ListByFactoryNextAsync(filterOptions.NextLink);
            }
            else
            {
                response = await this.DataFactoryManagementClient.IntegrationRuntimes.ListByFactoryAsync(
                    filterOptions.ResourceGroupName,
                    filterOptions.DataFactoryName);
            }

            filterOptions.NextLink = response?.NextPageLink;
            if (response == null)
            {
                return integrationRuntimes;
            }

            foreach (var integrationRuntime in response.ToList())
            {
                var managed = integrationRuntime.Properties as ManagedIntegrationRuntime;
                if (managed != null)
                {
                    integrationRuntimes.Add(new PSManagedIntegrationRuntime(
                        integrationRuntime,
                        filterOptions.ResourceGroupName,
                        filterOptions.DataFactoryName));
                }
                else
                {
                    var selfHosted = integrationRuntime.Properties as SelfHostedIntegrationRuntime;
                    if (selfHosted != null)
                    {
                        integrationRuntimes.Add(CreateSelfHostedIntegrationRuntime(
                            integrationRuntime,
                            filterOptions.ResourceGroupName,
                            filterOptions.DataFactoryName));
                    }
                    else
                    {
                        integrationRuntimes.Add(new PSIntegrationRuntime(
                            integrationRuntime,
                            filterOptions.ResourceGroupName,
                            filterOptions.DataFactoryName));
                    }
                }
            }

            return integrationRuntimes;
        }

        public virtual async Task<PSIntegrationRuntime> GetIntegrationRuntimeAsync(
            string resourceGroupName,
            string dataFactoryName,
            string integrationRuntimeName)
        {
            var response = await this.DataFactoryManagementClient.IntegrationRuntimes.GetAsync(
                resourceGroupName,
                dataFactoryName,
                integrationRuntimeName);

            return GenerateIntegraionRuntimeObject(response, null, resourceGroupName, dataFactoryName);
        }

        public virtual async Task<PSIntegrationRuntime> GetIntegrationRuntimeStatusAsync(
            string resourceGroupName,
            string dataFactoryName,
            string integrationRuntimeName)
        {
            var taskGetIntegrationRuntime = Task.Run(
                async () => await this.DataFactoryManagementClient.IntegrationRuntimes.GetAsync(
                    resourceGroupName,
                    dataFactoryName,
                    integrationRuntimeName));
            var taskGetStatus = Task.Run(
                async () => await this.DataFactoryManagementClient.IntegrationRuntimes.GetStatusAsync(
                    resourceGroupName,
                    dataFactoryName,
                    integrationRuntimeName));
            await Task.WhenAll(taskGetIntegrationRuntime, taskGetStatus);

            return GenerateIntegraionRuntimeObject(
                taskGetIntegrationRuntime.Result,
                taskGetStatus.Result,
                resourceGroupName,
                dataFactoryName);
        }

        public virtual async Task<HttpStatusCode> DeleteIntegrationRuntimeAsync(
            string resourceGroupName,
            string dataFactoryName,
            string integrationRuntimeName)
        {
            var response = await this.DataFactoryManagementClient.IntegrationRuntimes.DeleteWithHttpMessagesAsync(
                resourceGroupName,
                dataFactoryName,
                integrationRuntimeName);

            return response.Response.StatusCode;
        }

        public virtual async Task<PSIntegrationRuntimeKeys> RegenerateIntegrationRuntimeAuthKeyAsync(
            string resourceGroupName,
            string dataFactoryName,
            string integrationRuntimeName,
            string keyName)
        {
            var response =
                await this.DataFactoryManagementClient.IntegrationRuntimes.RegenerateAuthKeyAsync(
                    resourceGroupName,
                    dataFactoryName,
                    integrationRuntimeName,
                    new IntegrationRuntimeRegenerateKeyParameters(keyName));

            return new PSIntegrationRuntimeKeys(response.AuthKey1, response.AuthKey2);
        }

        public virtual async Task<PSIntegrationRuntimeKeys> GetIntegrationRuntimeKeyAsync(
            string resourceGroupName,
            string dataFactoryName,
            string integrationRuntimeName)
        {
            var response = await this.DataFactoryManagementClient.IntegrationRuntimes.ListAuthKeysAsync(
                resourceGroupName,
                dataFactoryName,
                integrationRuntimeName);

            return new PSIntegrationRuntimeKeys(response.AuthKey1, response.AuthKey2);
        }

        public virtual async Task<PSManagedIntegrationRuntimeStatus> StartIntegrationRuntimeAsync(
            string resourceGroupName,
            string dataFactoryName,
            string integrationRuntimeName,
            IntegrationRuntimeResource integrationRuntime)
        {
            var response = await this.DataFactoryManagementClient.IntegrationRuntimes.BeginStartWithHttpMessagesAsync(
                resourceGroupName,
                dataFactoryName,
                integrationRuntimeName);

            try
            {
                var result = await this.DataFactoryManagementClient.GetLongRunningOperationResultAsync(response, null, default(CancellationToken));
                return (PSManagedIntegrationRuntimeStatus)GenerateIntegraionRuntimeObject(integrationRuntime,
                    result.Body,
                    resourceGroupName,
                    dataFactoryName);
            }
            catch (Exception e)
            {
                throw RethrowLongingRunningException(e);
            }
        }

        public virtual async Task StopIntegrationRuntimeAsync(
            string resourceGroupName,
            string dataFactoryName,
            string integrationRuntimeName)
        {
            var response = await this.DataFactoryManagementClient.IntegrationRuntimes.BeginStopWithHttpMessagesAsync(
                resourceGroupName,
                dataFactoryName,
                integrationRuntimeName);

            try
            {
                await this.DataFactoryManagementClient.GetLongRunningOperationResultAsync(response, null, default(CancellationToken));
            }
            catch (Exception e)
            {
                throw RethrowLongingRunningException(e);
            }
        }

        public virtual async Task<PSIntegrationRuntimeMetrics> GetIntegrationRuntimeMetricAsync(
            string resourceGroupName,
            string dataFactoryName,
            string integrationRuntimeName)
        {
            var data = await this.DataFactoryManagementClient.IntegrationRuntimes.GetMonitoringDataAsync(
                resourceGroupName,
                dataFactoryName,
                integrationRuntimeName);

            return new PSIntegrationRuntimeMetrics(data, resourceGroupName, dataFactoryName);
        }

        public virtual async Task<HttpStatusCode> RemoveIntegrationRuntimeNodeAsync(
            string resourceGroupName,
            string dataFactoryName,
            string integrationRuntimeName,
            string nodeName)
        {
            var response = await this.DataFactoryManagementClient.IntegrationRuntimeNodes.DeleteWithHttpMessagesAsync(
                resourceGroupName,
                dataFactoryName,
                integrationRuntimeName,
                nodeName);

            return response.Response.StatusCode;
        }

        public virtual async Task SyncIntegrationRuntimeCredentialInNodesAsync(
            string resourceGroupName,
            string dataFactoryName,
            string integrationRuntimeName)
        {
            await this.DataFactoryManagementClient.IntegrationRuntimes.SyncCredentialsAsync(
                resourceGroupName,
                dataFactoryName,
                integrationRuntimeName);
        }

        public virtual async Task<SelfHostedIntegrationRuntimeNode> UpdateIntegrationRuntimeNodesAsync(
            string resourceGroupName,
            string dataFactoryName,
            string integrationRuntimeName,
            string nodeName,
            UpdateIntegrationRuntimeNodeRequest request)
        {
            return await this.DataFactoryManagementClient.IntegrationRuntimeNodes.UpdateAsync(
                resourceGroupName,
                dataFactoryName,
                integrationRuntimeName,
                nodeName,
                request);
        }

        public virtual async Task<IntegrationRuntimeNodeIpAddress> GetIntegrationRuntimeNodeIpAsync(
            string resourceGroupName,
            string dataFactoryName,
            string integrationRuntimeName,
            string nodeName)
        {
            return await this.DataFactoryManagementClient.IntegrationRuntimeNodes.GetIpAddressAsync(
                resourceGroupName,
                dataFactoryName,
                integrationRuntimeName,
                nodeName);
        }

        public virtual async Task UpgradeIntegrationRuntimeAsync(
            string resourceGroupName,
            string dataFactoryName,
            string integrationRuntimeName)
        {
            await this.DataFactoryManagementClient.IntegrationRuntimes.UpgradeAsync(
                resourceGroupName,
                dataFactoryName,
                integrationRuntimeName);
        }

        public virtual async Task<PSIntegrationRuntime> UpdateIntegrationRuntimeAsync(
            string resourceGroupName,
            string dataFactoryName,
            string integrationRuntimeName,
            IntegrationRuntimeResource resource,
            UpdateIntegrationRuntimeRequest request)
        {
            var response = await this.DataFactoryManagementClient.IntegrationRuntimes.UpdateAsync(
                resourceGroupName,
                dataFactoryName,
                integrationRuntimeName,
                request);

            return new PSSelfHostedIntegrationRuntime(
                response,
                resourceGroupName,
                dataFactoryName);
        }

        public virtual async Task<HttpStatusCode> RemoveIntegrationRuntimeLinksAsync(
            string resourceGroupName,
            string dataFactoryName,
            string integrationRuntimeName,
            string linkedDataFactoryName)
        {
            var response = await this.DataFactoryManagementClient.IntegrationRuntimes.RemoveLinksWithHttpMessagesAsync(
                resourceGroupName,
                dataFactoryName,
                integrationRuntimeName,
                new LinkedIntegrationRuntimeRequest(linkedDataFactoryName));

            return response.Response.StatusCode;
        }

        internal async Task<bool> CheckIntegrationRuntimeExistsAsync(
            string resourceGroupName,
            string dataFactoryName,
            string integrationRuntimeName)
        {
            try
            {
                PSIntegrationRuntime integrationRuntime = await this.GetIntegrationRuntimeAsync(
                    resourceGroupName,
                    dataFactoryName,
                    integrationRuntimeName);

                return integrationRuntime != null;
            }
            catch (CloudException e)
            {
                // Get throws Exception message with NotFound Status
                if (e.Response.StatusCode == HttpStatusCode.NotFound)
                {
                    return false;
                }

                throw;
            }
        }

        private PSIntegrationRuntime GenerateIntegraionRuntimeObject(
            IntegrationRuntimeResource integrationRuntime,
            IntegrationRuntimeStatusResponse status,
            string resourceGroupName,
            string dataFactoryName)
        {
            var managed = integrationRuntime.Properties as ManagedIntegrationRuntime;
            if (status == null)
            {
                PSIntegrationRuntime ir = (managed != null
                    ? new PSManagedIntegrationRuntime(integrationRuntime, resourceGroupName, dataFactoryName)
                    : CreateSelfHostedIntegrationRuntime(integrationRuntime, resourceGroupName, dataFactoryName))
                        ?? new PSIntegrationRuntime(integrationRuntime, resourceGroupName, dataFactoryName);

                return ir;
            }

            if (managed != null)
            {
                return new PSManagedIntegrationRuntimeStatus(
                    integrationRuntime,
                    (ManagedIntegrationRuntimeStatus)status.Properties,
                    resourceGroupName,
                    dataFactoryName);
            }
            else
            {
                var selfHosted = integrationRuntime.Properties as SelfHostedIntegrationRuntime;
                if (selfHosted != null)
                {
                    if (selfHosted.LinkedInfo != null)
                    {
                        return new PSLinkedIntegrationRuntimeStatus(
                            integrationRuntime,
                            (SelfHostedIntegrationRuntimeStatus) status.Properties,
                            resourceGroupName,
                            dataFactoryName,
                            DataFactoryManagementClient.DeserializationSettings,
                            selfHosted.LinkedInfo is LinkedIntegrationRuntimeKeyAuthorization
                                ? Constants.LinkedIntegrationRuntimeKeyAuth
                                : Constants.LinkedIntegrationRuntimeRbacAuth,
                            status.Name,
                            status.Properties.DataFactoryName);
                    }

                    return new PSSelfHostedIntegrationRuntimeStatus(
                        integrationRuntime,
                        (SelfHostedIntegrationRuntimeStatus)status.Properties,
                        resourceGroupName,
                        dataFactoryName,
                        DataFactoryManagementClient.DeserializationSettings);
                }
            }

            // Don't support get status for legacy integraiton runtime.
            throw new PSInvalidOperationException("This type of integration runtime is not supported by this version powershell cmdlets.");
        }

        private Exception RethrowLongingRunningException(Exception e)
        {
            var ce = e as CloudException;
            if (ce?.Body != null)
            {
                return new CloudException()
                {
                    Body = new CloudError()
                    {
                        Code = ce.Body.Code,
                        Message = Resources.LongRunningStatusError + "\n" + ce.Body.Message,
                        Target = ce.Body.Target
                    },
                    Request = ce.Request,
                    Response = ce.Response,
                    RequestId = ce.RequestId
                };
            }

            return new Exception(Resources.LongRunningStatusError, e);
        }

        private PSIntegrationRuntime CreateSelfHostedIntegrationRuntime(
            IntegrationRuntimeResource integrationRuntime,
            string resourceGroupName,
            string dataFactoryName)
        {
            PSIntegrationRuntime psIntegrationRuntime = null;
            var selfHosted = integrationRuntime.Properties as SelfHostedIntegrationRuntime;
            if (selfHosted != null)
            {
                if (selfHosted.LinkedInfo != null)
                {
                    psIntegrationRuntime = new PSLinkedIntegrationRuntime(integrationRuntime,
                            resourceGroupName,
                            dataFactoryName)
                    {
                        AuthorizationType = selfHosted.LinkedInfo is LinkedIntegrationRuntimeKeyAuthorization
                            ? Constants.LinkedIntegrationRuntimeKeyAuth
                            : Constants.LinkedIntegrationRuntimeRbacAuth
                    };
                }
                else
                {
                    psIntegrationRuntime = new PSSelfHostedIntegrationRuntime(integrationRuntime,
                            resourceGroupName,
                            dataFactoryName);
                }
            }

            return psIntegrationRuntime;
        }
    }
}
---- Transformed Tree ----
using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Management.Automation;
using System.Net;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Azure.Commands.DataFactoryV2.Models;
using Microsoft.Azure.Commands.DataFactoryV2.Properties;
using Microsoft.Azure.Management.DataFactory;
using Microsoft.Azure.Management.DataFactory.Models;
using Microsoft.Rest.Azure;

namespace Microsoft.Azure.Commands.DataFactoryV2
{
    public partial class DataFactoryClient
    {
        public virtual async Task<IntegrationRuntimeResource> CreateOrUpdateIntegrationRuntimeAsync(
            string resourceGroupName,
            string dataFactoryName,
            string integrationRuntimeName,
            IntegrationRuntimeResource resource)
        {
            return await this.DataFactoryManagementClient.IntegrationRuntimes.CreateOrUpdateAsync(
                    resourceGroupName,
                    dataFactoryName,
                    integrationRuntimeName,
                    resource);
        }

        public virtual PSIntegrationRuntime CreateOrUpdateIntegrationRuntime(CreatePSIntegrationRuntimeParameters parameters)
        {
            PSIntegrationRuntime psIntegrationRuntime = null;

            Action createOrUpdateIntegrationRuntime = () =>
            {
                var integrationRuntime = this.CreateOrUpdateIntegrationRuntimeAsync(
                    parameters.ResourceGroupName,
                    parameters.DataFactoryName,
                    parameters.Name,
                    parameters.IntegrationRuntimeResource).ConfigureAwait(true).GetAwaiter().GetResult();

                if (integrationRuntime.Properties is ManagedIntegrationRuntime managed)
                {
                    psIntegrationRuntime = new PSManagedIntegrationRuntime(integrationRuntime,
                            parameters.ResourceGroupName,
                            parameters.DataFactoryName);
                }
                else
                {
                    psIntegrationRuntime = CreateSelfHostedIntegrationRuntime(integrationRuntime,
                        parameters.ResourceGroupName,
                        parameters.DataFactoryName);
                }
            };

            parameters.ConfirmAction(
                    parameters.Force,  // prompt only if the integration runtime exists
                    string.Format(
                        CultureInfo.InvariantCulture,
                        Resources.IntegrationRuntimeExists,
                        parameters.Name,
                        parameters.DataFactoryName),
                    string.Format(
                        CultureInfo.InvariantCulture,
                        Resources.IntegrationRuntimeUpdating,
                        parameters.Name,
                        parameters.DataFactoryName),
                    parameters.Name,
                    createOrUpdateIntegrationRuntime,
                    () => parameters.IsUpdate);

            return psIntegrationRuntime;
        }

        public virtual async Task<List<PSIntegrationRuntime>> ListIntegrationRuntimesAsync(AdfEntityFilterOptions filterOptions)
        {
            var integrationRuntimes = new List<PSIntegrationRuntime>();

            IPage<IntegrationRuntimeResource> response;
            if (filterOptions.NextLink.IsNextPageLink())
            {
                response = await this.DataFactoryManagementClient.IntegrationRuntimes.ListByFactoryNextAsync(filterOptions.NextLink);
            }
            else
            {
                response = await this.DataFactoryManagementClient.IntegrationRuntimes.ListByFactoryAsync(
                    filterOptions.ResourceGroupName,
                    filterOptions.DataFactoryName);
            }

            filterOptions.NextLink = response?.NextPageLink;
            if (response == null)
            {
                return integrationRuntimes;
            }

            foreach (var integrationRuntime in response.ToList())
            {
                if (integrationRuntime.Properties is ManagedIntegrationRuntime managed)
                {
                    integrationRuntimes.Add(new PSManagedIntegrationRuntime(
                        integrationRuntime,
                        filterOptions.ResourceGroupName,
                        filterOptions.DataFactoryName));
                }
                else
                {
                    if (integrationRuntime.Properties is SelfHostedIntegrationRuntime selfHosted)
                    {
                        integrationRuntimes.Add(CreateSelfHostedIntegrationRuntime(
                            integrationRuntime,
                            filterOptions.ResourceGroupName,
                            filterOptions.DataFactoryName));
                    }
                    else
                    {
                        integrationRuntimes.Add(new PSIntegrationRuntime(
                            integrationRuntime,
                            filterOptions.ResourceGroupName,
                            filterOptions.DataFactoryName));
                    }
                }
            }

            return integrationRuntimes;
        }

        public virtual async Task<PSIntegrationRuntime> GetIntegrationRuntimeAsync(
            string resourceGroupName,
            string dataFactoryName,
            string integrationRuntimeName)
        {
            var response = await this.DataFactoryManagementClient.IntegrationRuntimes.GetAsync(
                resourceGroupName,
                dataFactoryName,
                integrationRuntimeName);

            return GenerateIntegraionRuntimeObject(response, null, resourceGroupName, dataFactoryName);
        }

        public virtual async Task<PSIntegrationRuntime> GetIntegrationRuntimeStatusAsync(
            string resourceGroupName,
            string dataFactoryName,
            string integrationRuntimeName)
        {
            var taskGetIntegrationRuntime = Task.Run(
                async () => await this.DataFactoryManagementClient.IntegrationRuntimes.GetAsync(
                    resourceGroupName,
                    dataFactoryName,
                    integrationRuntimeName));
            var taskGetStatus = Task.Run(
                async () => await this.DataFactoryManagementClient.IntegrationRuntimes.GetStatusAsync(
                    resourceGroupName,
                    dataFactoryName,
                    integrationRuntimeName));
            await Task.WhenAll(taskGetIntegrationRuntime, taskGetStatus);

            return GenerateIntegraionRuntimeObject(
                taskGetIntegrationRuntime.Result,
                taskGetStatus.Result,
                resourceGroupName,
                dataFactoryName);
        }

        public virtual async Task<HttpStatusCode> DeleteIntegrationRuntimeAsync(
            string resourceGroupName,
            string dataFactoryName,
            string integrationRuntimeName)
        {
            var response = await this.DataFactoryManagementClient.IntegrationRuntimes.DeleteWithHttpMessagesAsync(
                resourceGroupName,
                dataFactoryName,
                integrationRuntimeName);

            return response.Response.StatusCode;
        }

        public virtual async Task<PSIntegrationRuntimeKeys> RegenerateIntegrationRuntimeAuthKeyAsync(
            string resourceGroupName,
            string dataFactoryName,
            string integrationRuntimeName,
            string keyName)
        {
            var response =
                await this.DataFactoryManagementClient.IntegrationRuntimes.RegenerateAuthKeyAsync(
                    resourceGroupName,
                    dataFactoryName,
                    integrationRuntimeName,
                    new IntegrationRuntimeRegenerateKeyParameters(keyName));

            return new PSIntegrationRuntimeKeys(response.AuthKey1, response.AuthKey2);
        }

        public virtual async Task<PSIntegrationRuntimeKeys> GetIntegrationRuntimeKeyAsync(
            string resourceGroupName,
            string dataFactoryName,
            string integrationRuntimeName)
        {
            var response = await this.DataFactoryManagementClient.IntegrationRuntimes.ListAuthKeysAsync(
                resourceGroupName,
                dataFactoryName,
                integrationRuntimeName);

            return new PSIntegrationRuntimeKeys(response.AuthKey1, response.AuthKey2);
        }

        public virtual async Task<PSManagedIntegrationRuntimeStatus> StartIntegrationRuntimeAsync(
            string resourceGroupName,
            string dataFactoryName,
            string integrationRuntimeName,
            IntegrationRuntimeResource integrationRuntime)
        {
            var response = await this.DataFactoryManagementClient.IntegrationRuntimes.BeginStartWithHttpMessagesAsync(
                resourceGroupName,
                dataFactoryName,
                integrationRuntimeName);

            try
            {
                var result = await this.DataFactoryManagementClient.GetLongRunningOperationResultAsync(response, null, default(CancellationToken));
                return (PSManagedIntegrationRuntimeStatus)GenerateIntegraionRuntimeObject(integrationRuntime,
                    result.Body,
                    resourceGroupName,
                    dataFactoryName);
            }
            catch (Exception e)
            {
                throw RethrowLongingRunningException(e);
            }
        }

        public virtual async Task StopIntegrationRuntimeAsync(
            string resourceGroupName,
            string dataFactoryName,
            string integrationRuntimeName)
        {
            var response = await this.DataFactoryManagementClient.IntegrationRuntimes.BeginStopWithHttpMessagesAsync(
                resourceGroupName,
                dataFactoryName,
                integrationRuntimeName);

            try
            {
                await this.DataFactoryManagementClient.GetLongRunningOperationResultAsync(response, null, default(CancellationToken));
            }
            catch (Exception e)
            {
                throw RethrowLongingRunningException(e);
            }
        }

        public virtual async Task<PSIntegrationRuntimeMetrics> GetIntegrationRuntimeMetricAsync(
            string resourceGroupName,
            string dataFactoryName,
            string integrationRuntimeName)
        {
            var data = await this.DataFactoryManagementClient.IntegrationRuntimes.GetMonitoringDataAsync(
                resourceGroupName,
                dataFactoryName,
                integrationRuntimeName);

            return new PSIntegrationRuntimeMetrics(data, resourceGroupName, dataFactoryName);
        }

        public virtual async Task<HttpStatusCode> RemoveIntegrationRuntimeNodeAsync(
            string resourceGroupName,
            string dataFactoryName,
            string integrationRuntimeName,
            string nodeName)
        {
            var response = await this.DataFactoryManagementClient.IntegrationRuntimeNodes.DeleteWithHttpMessagesAsync(
                resourceGroupName,
                dataFactoryName,
                integrationRuntimeName,
                nodeName);

            return response.Response.StatusCode;
        }

        public virtual async Task SyncIntegrationRuntimeCredentialInNodesAsync(
            string resourceGroupName,
            string dataFactoryName,
            string integrationRuntimeName)
        {
            await this.DataFactoryManagementClient.IntegrationRuntimes.SyncCredentialsAsync(
                resourceGroupName,
                dataFactoryName,
                integrationRuntimeName);
        }

        public virtual async Task<SelfHostedIntegrationRuntimeNode> UpdateIntegrationRuntimeNodesAsync(
            string resourceGroupName,
            string dataFactoryName,
            string integrationRuntimeName,
            string nodeName,
            UpdateIntegrationRuntimeNodeRequest request)
        {
            return await this.DataFactoryManagementClient.IntegrationRuntimeNodes.UpdateAsync(
                resourceGroupName,
                dataFactoryName,
                integrationRuntimeName,
                nodeName,
                request);
        }

        public virtual async Task<IntegrationRuntimeNodeIpAddress> GetIntegrationRuntimeNodeIpAsync(
            string resourceGroupName,
            string dataFactoryName,
            string integrationRuntimeName,
            string nodeName)
        {
            return await this.DataFactoryManagementClient.IntegrationRuntimeNodes.GetIpAddressAsync(
                resourceGroupName,
                dataFactoryName,
                integrationRuntimeName,
                nodeName);
        }

        public virtual async Task UpgradeIntegrationRuntimeAsync(
            string resourceGroupName,
            string dataFactoryName,
            string integrationRuntimeName)
        {
            await this.DataFactoryManagementClient.IntegrationRuntimes.UpgradeAsync(
                resourceGroupName,
                dataFactoryName,
                integrationRuntimeName);
        }

        public virtual async Task<PSIntegrationRuntime> UpdateIntegrationRuntimeAsync(
            string resourceGroupName,
            string dataFactoryName,
            string integrationRuntimeName,
            IntegrationRuntimeResource resource,
            UpdateIntegrationRuntimeRequest request)
        {
            var response = await this.DataFactoryManagementClient.IntegrationRuntimes.UpdateAsync(
                resourceGroupName,
                dataFactoryName,
                integrationRuntimeName,
                request);

            return new PSSelfHostedIntegrationRuntime(
                response,
                resourceGroupName,
                dataFactoryName);
        }

        public virtual async Task<HttpStatusCode> RemoveIntegrationRuntimeLinksAsync(
            string resourceGroupName,
            string dataFactoryName,
            string integrationRuntimeName,
            string linkedDataFactoryName)
        {
            var response = await this.DataFactoryManagementClient.IntegrationRuntimes.RemoveLinksWithHttpMessagesAsync(
                resourceGroupName,
                dataFactoryName,
                integrationRuntimeName,
                new LinkedIntegrationRuntimeRequest(linkedDataFactoryName));

            return response.Response.StatusCode;
        }

        internal async Task<bool> CheckIntegrationRuntimeExistsAsync(
            string resourceGroupName,
            string dataFactoryName,
            string integrationRuntimeName)
        {
            try
            {
                PSIntegrationRuntime integrationRuntime = await this.GetIntegrationRuntimeAsync(
                    resourceGroupName,
                    dataFactoryName,
                    integrationRuntimeName);

                return integrationRuntime != null;
            }
            catch (CloudException e)
            {
                // Get throws Exception message with NotFound Status
                if (e.Response.StatusCode == HttpStatusCode.NotFound)
                {
                    return false;
                }

                throw;
            }
        }

        private PSIntegrationRuntime GenerateIntegraionRuntimeObject(
            IntegrationRuntimeResource integrationRuntime,
            IntegrationRuntimeStatusResponse status,
            string resourceGroupName,
            string dataFactoryName)
        {
            if (status == null)
            {
                PSIntegrationRuntime ir = (integrationRuntime.Properties is ManagedIntegrationRuntime managed
                    ? new PSManagedIntegrationRuntime(integrationRuntime, resourceGroupName, dataFactoryName)
                    : CreateSelfHostedIntegrationRuntime(integrationRuntime, resourceGroupName, dataFactoryName))
                        ?? new PSIntegrationRuntime(integrationRuntime, resourceGroupName, dataFactoryName);

                return ir;
            }

            if (integrationRuntime.Properties is ManagedIntegrationRuntime managed)
            {
                return new PSManagedIntegrationRuntimeStatus(
                    integrationRuntime,
                    (ManagedIntegrationRuntimeStatus)status.Properties,
                    resourceGroupName,
                    dataFactoryName);
            }
            else
            {
                if (integrationRuntime.Properties is SelfHostedIntegrationRuntime selfHosted)
                {
                    if (selfHosted.LinkedInfo != null)
                    {
                        return new PSLinkedIntegrationRuntimeStatus(
                            integrationRuntime,
                            (SelfHostedIntegrationRuntimeStatus) status.Properties,
                            resourceGroupName,
                            dataFactoryName,
                            DataFactoryManagementClient.DeserializationSettings,
                            selfHosted.LinkedInfo is LinkedIntegrationRuntimeKeyAuthorization
                                ? Constants.LinkedIntegrationRuntimeKeyAuth
                                : Constants.LinkedIntegrationRuntimeRbacAuth,
                            status.Name,
                            status.Properties.DataFactoryName);
                    }

                    return new PSSelfHostedIntegrationRuntimeStatus(
                        integrationRuntime,
                        (SelfHostedIntegrationRuntimeStatus)status.Properties,
                        resourceGroupName,
                        dataFactoryName,
                        DataFactoryManagementClient.DeserializationSettings);
                }
            }

            // Don't support get status for legacy integraiton runtime.
            throw new PSInvalidOperationException("This type of integration runtime is not supported by this version powershell cmdlets.");
        }

        private Exception RethrowLongingRunningException(Exception e)
        {
            var ce = e as CloudException;
            if (ce?.Body != null)
            {
                return new CloudException()
                {
                    Body = new CloudError()
                    {
                        Code = ce.Body.Code,
                        Message = Resources.LongRunningStatusError + "\n" + ce.Body.Message,
                        Target = ce.Body.Target
                    },
                    Request = ce.Request,
                    Response = ce.Response,
                    RequestId = ce.RequestId
                };
            }

            return new Exception(Resources.LongRunningStatusError, e);
        }

        private PSIntegrationRuntime CreateSelfHostedIntegrationRuntime(
            IntegrationRuntimeResource integrationRuntime,
            string resourceGroupName,
            string dataFactoryName)
        {
            PSIntegrationRuntime psIntegrationRuntime = null;

            if (integrationRuntime.Properties is SelfHostedIntegrationRuntime selfHosted)
            {
                if (selfHosted.LinkedInfo != null)
                {
                    psIntegrationRuntime = new PSLinkedIntegrationRuntime(integrationRuntime,
                            resourceGroupName,
                            dataFactoryName)
                    {
                        AuthorizationType = selfHosted.LinkedInfo is LinkedIntegrationRuntimeKeyAuthorization
                            ? Constants.LinkedIntegrationRuntimeKeyAuth
                            : Constants.LinkedIntegrationRuntimeRbacAuth
                    };
                }
                else
                {
                    psIntegrationRuntime = new PSSelfHostedIntegrationRuntime(integrationRuntime,
                            resourceGroupName,
                            dataFactoryName);
                }
            }

            return psIntegrationRuntime;
        }
    }
}
---- Semantic diagnostics *before* transformation ----

---- Semantic diagnostics *after* transformation ----
/Users/runner/work/1/s/src/DataFactory/DataFactoryV2/Models/DataFactoryClient.IntegrationRuntimes.cs(414,103): error CS0136: A local or parameter named 'managed' cannot be declared in this scope because that name is used in an enclosing local scope to define a local or parameter
######################################################################


######################################################################
Nr: 4 - TypeCheckAndCastRewriterR5
Filepath: /Users/runner/work/1/s/src/Dns/Dns/Models/DnsRecordSet.cs
Description: Error: The created Syntax Tree is semantically incorrect.
------------------------------------------------------------------------
---- Original Tree ----
using Microsoft.Azure.Management.Dns.Models;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace Microsoft.Azure.Commands.Dns
{
    /// <summary>
    /// Represents a set of records with the same name, with the same type and in the same zone.
    /// </summary>
    public class DnsRecordSet : ICloneable
    {
        /// <summary>
        /// Gets or sets the ID of the record set.
        /// </summary>
        public string Id { get; set; }

        /// <summary>
        /// Gets or sets the name of this record set, relative to the name of the zone to which it belongs and WITHOUT a terminating '.' (dot) character.
        /// </summary>
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets the name of the zone to which this recordset belongs.
        /// </summary>
        public string ZoneName { get; set; }

        /// <summary>
        /// Gets or sets the name of the resource group to which this record set belongs.
        /// </summary>
        public string ResourceGroupName { get; set; }

        /// <summary>
        /// Gets or sets the TTL of all the records in this record set.
        /// </summary>
        public uint Ttl { get; set; }

        /// <summary>
        /// Gets or sets the Etag of this record set.
        /// </summary>
        public string Etag { get; set; }

        /// <summary>
        /// Gets or sets the type of DNS records in this record set. Only records of this type may be added to this record set.
        /// </summary>
        public RecordType RecordType { get; set; }

        /// <summary>
        /// Gets or sets the alias target resource Id of the record set
        /// </summary>
        public string TargetResourceId { get; set; }

        /// <summary>
        /// Gets or sets the list of records in this record set.
        /// </summary>
        public List<DnsRecordBase> Records { get; set; }

        /// <summary>
        /// Gets or sets the tags of this record set.
        /// </summary>
        public Hashtable Metadata { get; set; }

        /// <summary>
        /// Gets or sets the provisioning state of the record set
        /// </summary>
        public string ProvisioningState { get; set; }

        /// <summary>
        /// Returns a deep copy of this record set
        /// </summary>
        /// <returns></returns>
        public object Clone()
        {
            var clone = new DnsRecordSet();

            clone.Name = this.Name;
            clone.TargetResourceId = this.TargetResourceId;
            clone.ProvisioningState = this.ProvisioningState;
            clone.Id = this.Id;
            clone.ZoneName = this.ZoneName;
            clone.ResourceGroupName = this.ResourceGroupName;
            clone.Ttl = this.Ttl;
            clone.Etag = this.Etag;
            clone.RecordType = this.RecordType;

            if (this.Records != null)
            {
                clone.Records = this.Records.Select(record => record.Clone()).Cast<DnsRecordBase>().ToList();
            }

            if (this.Metadata != null)
            {
                clone.Metadata = (Hashtable)this.Metadata.Clone();
            }

            return clone;
        }
    }

    /// <summary>
    /// Represents a DNS record that is part of a <see cref="DnsRecordSet"/>.
    /// </summary>
    public abstract class DnsRecordBase : ICloneable
    {
        public abstract object Clone();

        public const int TxtRecordMaxLength = 1024;

        public const int TxtRecordMinLength = 0;

        public const int TxtRecordChunkSize = 255;

        public const int CaaRecordMaxLength = 1024;

        public const int CaaRecordMinLength = 0;

        internal abstract object ToMamlRecord();

        internal static DnsRecordBase FromMamlRecord(object record)
        {
            if (record is Management.Dns.Models.ARecord)
            {
                var mamlRecord = (Management.Dns.Models.ARecord)record;
                return new ARecord
                {
                    Ipv4Address = mamlRecord.Ipv4Address
                };
            }
            else if (record is Management.Dns.Models.AaaaRecord)
            {
                var mamlRecord = (Management.Dns.Models.AaaaRecord)record;
                return new AaaaRecord
                {
                    Ipv6Address = mamlRecord.Ipv6Address
                };
            }
            else if (record is Management.Dns.Models.CnameRecord)
            {
                var mamlRecord = (Management.Dns.Models.CnameRecord)record;
                return new CnameRecord
                {
                    Cname = mamlRecord.Cname
                };
            }
            else if (record is Management.Dns.Models.NsRecord)
            {
                var mamlRecord = (Management.Dns.Models.NsRecord)record;
                return new NsRecord
                {
                    Nsdname = mamlRecord.Nsdname
                };
            }
            else if (record is Management.Dns.Models.MxRecord)
            {
                var mamlRecord = (Management.Dns.Models.MxRecord)record;
                return new MxRecord
                {
                    Exchange = mamlRecord.Exchange,
                    Preference = (ushort) mamlRecord.Preference,
                };
            }
            else if (record is Management.Dns.Models.SrvRecord)
            {
                var mamlRecord = (Management.Dns.Models.SrvRecord)record;
                return new SrvRecord
                {
                    Port = (ushort) mamlRecord.Port,
                    Priority = (ushort) mamlRecord.Priority,
                    Target = mamlRecord.Target,
                    Weight = (ushort) mamlRecord.Weight,
                };
            }
            else if (record is Management.Dns.Models.SoaRecord)
            {
                var mamlRecord = (Management.Dns.Models.SoaRecord)record;
                return new SoaRecord
                {
                    Email = mamlRecord.Email,
                    ExpireTime = (uint) mamlRecord.ExpireTime.GetValueOrDefault(),
                    Host = mamlRecord.Host,
                    MinimumTtl = (uint) mamlRecord.MinimumTtl.GetValueOrDefault(),
                    RefreshTime = (uint) mamlRecord.RefreshTime.GetValueOrDefault(),
                    RetryTime = (uint) mamlRecord.RetryTime.GetValueOrDefault(),
                    SerialNumber = (uint) mamlRecord.SerialNumber.GetValueOrDefault(),
                };
            }
            else if (record is Management.Dns.Models.TxtRecord)
            {
                var mamlRecord = (Management.Dns.Models.TxtRecord)record;
                return new TxtRecord
                {
                    Value = ToPowerShellTxtValue(mamlRecord.Value),
                };
            }
            else if (record is Management.Dns.Models.PtrRecord)
            {
                var mamlRecord = (Management.Dns.Models.PtrRecord)record;
                return new PtrRecord
                {
                    Ptrdname = mamlRecord.Ptrdname,
                };
            }
            else if (record is Management.Dns.Models.CaaRecord)
            {
                var mamlRecord = (Management.Dns.Models.CaaRecord)record;
                return new CaaRecord
                {
                    Flags = (byte) mamlRecord.Flags.GetValueOrDefault(),
                    Value = mamlRecord.Value,
                    Tag = mamlRecord.Tag,
                };
            }

            return null;
        }

        private static string ToPowerShellTxtValue(ICollection<string> value)
        {
            if (value == null || value.Count == 0)
            {
                return null;
            }
            
            var sb = new StringBuilder();
            foreach (var s in value)
            {
                sb.Append(s);
            }

            return sb.ToString();
        }
    }

    /// <summary>
    /// Represents a DNS record of type A that is part of a <see cref="DnsRecordSet"/>.
    /// </summary>
    public class ARecord : DnsRecordBase
    {
        /// <summary>
        /// Gets or sets the IPv4 address of this A record in string notation
        /// </summary>
        public string Ipv4Address { get; set; }

        public override string ToString()
        {
            return this.Ipv4Address;
        }

        internal override object ToMamlRecord()
        {
            return new Management.Dns.Models.ARecord
            {
                Ipv4Address = this.Ipv4Address,
            };
        }

        /// <summary>
        /// Cerates a deep copy of this object
        /// </summary>
        /// <returns>A clone of this object</returns>
        public override object Clone()
        {
            return new ARecord { Ipv4Address = this.Ipv4Address };
        }
    }

    /// <summary>
    /// Represents a DNS record of type AAAA that is part of a <see cref="DnsRecordSet"/>.
    /// </summary>
    public class AaaaRecord : DnsRecordBase
    {
        /// <summary>
        /// Gets or sets the IPv6 address of this AAAA record in string notation.
        /// </summary>
        public string Ipv6Address { get; set; }

        public override string ToString()
        {
            return this.Ipv6Address;
        }

        internal override object ToMamlRecord()
        {
            return new Management.Dns.Models.AaaaRecord
            {
                Ipv6Address = this.Ipv6Address,
            };
        }

        /// <summary>
        /// Cerates a deep copy of this object
        /// </summary>
        /// <returns>A clone of this object</returns>
        public override object Clone()
        {
            return new AaaaRecord { Ipv6Address = this.Ipv6Address };
        }
    }

    /// <summary>
    /// Represents a DNS record of type CNAME that is part of a <see cref="DnsRecordSet"/>.
    /// </summary>
    public class CnameRecord : DnsRecordBase
    {
        /// <summary>
        /// Gets or sets the canonical name for this CNAME record without a terminating dot.
        /// </summary>
        public string Cname { get; set; }

        public override string ToString()
        {
            return this.Cname;
        }

        internal override object ToMamlRecord()
        {
            return new Management.Dns.Models.CnameRecord
            {
                Cname = this.Cname,
            };
        }

        /// <summary>
        /// Cerates a deep copy of this object
        /// </summary>
        /// <returns>A clone of this object</returns>
        public override object Clone()
        {
            return new CnameRecord { Cname = this.Cname };
        }
    }

    /// <summary>
    /// Represents a DNS record of type NS that is part of a <see cref="DnsRecordSet"/>.
    /// </summary>
    public class NsRecord : DnsRecordBase
    {
        /// <summary>
        /// Gets or sets the name server name for this NS record, without a terminating dot.
        /// </summary>
        public string Nsdname { get; set; }

        public override string ToString()
        {
            return this.Nsdname;
        }

        internal override object ToMamlRecord()
        {
            return new Management.Dns.Models.NsRecord
            {
                Nsdname = this.Nsdname,
            };
        }

        /// <summary>
        /// Cerates a deep copy of this object
        /// </summary>
        /// <returns>A clone of this object</returns>
        public override object Clone()
        {
            return new NsRecord { Nsdname = this.Nsdname };
        }
    }

    /// <summary>
    /// Represents a DNS record of type TXT that is part of a <see cref="DnsRecordSet"/>.
    /// </summary>
    public class TxtRecord : DnsRecordBase
    {
        /// <summary>
        /// Gets or sets the text value of this TXT record.
        /// </summary>
        public string Value { get; set; }

        public override string ToString()
        {
            return this.Value;
        }

        internal override object ToMamlRecord()
        {
            char[] letters = this.Value.ToCharArray();
            var splitValues = new List<string>();

            int remaining = letters.Length;
            int begin = 0;
            while (remaining > 0)
            {
                if (remaining < TxtRecordChunkSize)
                {
                    splitValues.Add(new string(letters, begin, remaining));
                    remaining = 0;
                }
                else
                {
                    splitValues.Add(new string(letters, begin, TxtRecordChunkSize));
                    begin += TxtRecordChunkSize;
                    remaining -= TxtRecordChunkSize;
                }
            }

            return new Management.Dns.Models.TxtRecord
            {
                Value = splitValues,
            };
        }

        /// <summary>
        /// Cerates a deep copy of this object
        /// </summary>
        /// <returns>A clone of this object</returns>
        public override object Clone()
        {
            return new TxtRecord { Value = this.Value };
        }
    }

    /// <summary>
    /// Represents a DNS record of type MX that is part of a <see cref="DnsRecordSet"/>.
    /// </summary>
    public class MxRecord : DnsRecordBase
    {
        /// <summary>
        /// Gets or sets the preference metric for this MX record.
        /// </summary>
        public ushort Preference { get; set; }

        /// <summary>
        /// Gets or sets the domain name of the mail host, without a terminating dot
        /// </summary>
        public string Exchange { get; set; }

        public override string ToString()
        {
            return string.Format("[{0},{1}]", Preference, Exchange);
        }

        internal override object ToMamlRecord()
        {
            return new Management.Dns.Models.MxRecord
            {
                Exchange = this.Exchange,
                Preference = this.Preference,
            };
        }

        /// <summary>
        /// Cerates a deep copy of this object
        /// </summary>
        /// <returns>A clone of this object</returns>
        public override object Clone()
        {
            return new MxRecord { Exchange = this.Exchange, Preference = this.Preference };
        }
    }

    /// <summary>
    /// Represents a DNS record of type SRV that is part of a <see cref="DnsRecordSet"/>.
    /// </summary>
    public class SrvRecord : DnsRecordBase
    {
        /// <summary>
        /// Gets or sets the domain name of the target for this SRV record, without a terminating dot.
        /// </summary>
        public string Target { get; set; }

        /// <summary>
        /// Gets or sets the weight metric for this SRV record.
        /// </summary>
        public ushort Weight { get; set; }

        /// <summary>
        /// Gets or sets the port for this SRV record
        /// </summary>
        public ushort Port { get; set; }

        /// <summary>
        /// Gets or sets the priority metric for this SRV record.
        /// </summary>
        public ushort Priority { get; set; }

        public override string ToString()
        {
            return string.Format("[{0},{1},{2},{3}]", Priority, Weight, Port, Target);
        }

        internal override object ToMamlRecord()
        {
            return new Management.Dns.Models.SrvRecord
            {
                Priority = this.Priority,
                Target = this.Target,
                Weight = this.Weight,
                Port = this.Port,
            };
        }

        /// <summary>
        /// Cerates a deep copy of this object
        /// </summary>
        /// <returns>A clone of this object</returns>
        public override object Clone()
        {
            return new SrvRecord
            {
                Priority = this.Priority,
                Target = this.Target,
                Weight = this.Weight,
                Port = this.Port
            };
        }
    }

    /// <summary>
    /// Represents a DNS record of type SOA that is part of a <see cref="DnsRecordSet"/>.
    /// </summary>
    public class SoaRecord : DnsRecordBase
    {
        /// <summary>
        /// Gets or sets the domain name of the authoritative name server for this SOA record, without a temrinating dot.
        /// </summary>
        public string Host { get; set; }

        /// <summary>
        /// Gets or sets the email for this SOA record.
        /// </summary>
        public string Email { get; set; }

        /// <summary>
        /// Gets or sets the serial number of this SOA record.
        /// </summary>
        public uint SerialNumber { get; set; }

        /// <summary>
        /// Gets or sets the refresh value for this SOA record.
        /// </summary>
        public uint RefreshTime { get; set; }

        /// <summary>
        /// Gets or sets the retry time for SOA record.
        /// </summary>
        public uint RetryTime { get; set; }

        /// <summary>
        /// Gets or sets the expire time for this SOA record.
        /// </summary>
        public uint ExpireTime { get; set; }

        /// <summary>
        /// Gets or sets the minimum TTL for this SOA record.
        /// </summary>
        public uint MinimumTtl { get; set; }

        public override string ToString()
        {
            return string.Format("[{0},{1},{2},{3},{4},{5}]", Host, Email, RefreshTime, RetryTime, ExpireTime, MinimumTtl);
        }

        internal override object ToMamlRecord()
        {
            return new Management.Dns.Models.SoaRecord
            {
                Host = this.Host,
                Email = this.Email,
                SerialNumber = this.SerialNumber,
                RefreshTime = this.RefreshTime,
                RetryTime = this.RetryTime,
                ExpireTime = this.ExpireTime,
                MinimumTtl = this.MinimumTtl,
            };
        }

        /// <summary>
        /// Cerates a deep copy of this object
        /// </summary>
        /// <returns>A clone of this object</returns>
        public override object Clone()
        {
            return new SoaRecord
            {
                Host = this.Host,
                Email = this.Email,
                SerialNumber = this.SerialNumber,
                RefreshTime = this.RefreshTime,
                RetryTime = this.RetryTime,
                ExpireTime = this.ExpireTime,
                MinimumTtl = this.MinimumTtl,
            };
        }
    }

    /// <summary>
    /// Represents a DNS record of type PTR that is part of a <see cref="DnsRecordSet"/>.
    /// </summary>
    public class PtrRecord : DnsRecordBase
    {
        /// <summary>
        /// Gets or sets the ptr for this record.
        /// </summary>
        public string Ptrdname { get; set; }

        public override string ToString()
        {
            return this.Ptrdname;
        }

        public override object Clone()
        {
            return new PtrRecord()
            {
                Ptrdname = this.Ptrdname,
            };
        }

        internal override object ToMamlRecord()
        {
            return new Management.Dns.Models.PtrRecord
            {
                Ptrdname = this.Ptrdname,
            };
        }
    }

    /// <summary>
    /// Represents a DNS record of type CAA that is part of a <see cref="DnsRecordSet"/>.
    /// </summary>
    public class CaaRecord : DnsRecordBase
    {
        /// <summary>
        /// Gets or sets the flags field for this record.
        /// </summary>
        public byte Flags { get; set; }

        /// <summary>
        /// Gets or sets the property tag for this record.
        /// </summary>
        public string Tag { get; set; }

        /// <summary>
        /// Gets or sets the property value for this record.
        /// </summary>
        public string Value { get; set; }

        public override string ToString()
        {
            return $"[{Flags},{Tag},{Value}]";
        }

        public override object Clone()
        {
            return new CaaRecord()
            {
                Flags = this.Flags,
                Tag = this.Tag,
                Value = this.Value
            };
        }

        internal override object ToMamlRecord()
        {
            return new Management.Dns.Models.CaaRecord(
                this.Flags,
                this.Tag,
                this.Value);
        }
    }

}

---- Transformed Tree ----
using Microsoft.Azure.Management.Dns.Models;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace Microsoft.Azure.Commands.Dns
{
    /// <summary>
    /// Represents a set of records with the same name, with the same type and in the same zone.
    /// </summary>
    public class DnsRecordSet : ICloneable
    {
        /// <summary>
        /// Gets or sets the ID of the record set.
        /// </summary>
        public string Id { get; set; }

        /// <summary>
        /// Gets or sets the name of this record set, relative to the name of the zone to which it belongs and WITHOUT a terminating '.' (dot) character.
        /// </summary>
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets the name of the zone to which this recordset belongs.
        /// </summary>
        public string ZoneName { get; set; }

        /// <summary>
        /// Gets or sets the name of the resource group to which this record set belongs.
        /// </summary>
        public string ResourceGroupName { get; set; }

        /// <summary>
        /// Gets or sets the TTL of all the records in this record set.
        /// </summary>
        public uint Ttl { get; set; }

        /// <summary>
        /// Gets or sets the Etag of this record set.
        /// </summary>
        public string Etag { get; set; }

        /// <summary>
        /// Gets or sets the type of DNS records in this record set. Only records of this type may be added to this record set.
        /// </summary>
        public RecordType RecordType { get; set; }

        /// <summary>
        /// Gets or sets the alias target resource Id of the record set
        /// </summary>
        public string TargetResourceId { get; set; }

        /// <summary>
        /// Gets or sets the list of records in this record set.
        /// </summary>
        public List<DnsRecordBase> Records { get; set; }

        /// <summary>
        /// Gets or sets the tags of this record set.
        /// </summary>
        public Hashtable Metadata { get; set; }

        /// <summary>
        /// Gets or sets the provisioning state of the record set
        /// </summary>
        public string ProvisioningState { get; set; }

        /// <summary>
        /// Returns a deep copy of this record set
        /// </summary>
        /// <returns></returns>
        public object Clone()
        {
            var clone = new DnsRecordSet();

            clone.Name = this.Name;
            clone.TargetResourceId = this.TargetResourceId;
            clone.ProvisioningState = this.ProvisioningState;
            clone.Id = this.Id;
            clone.ZoneName = this.ZoneName;
            clone.ResourceGroupName = this.ResourceGroupName;
            clone.Ttl = this.Ttl;
            clone.Etag = this.Etag;
            clone.RecordType = this.RecordType;

            if (this.Records != null)
            {
                clone.Records = this.Records.Select(record => record.Clone()).Cast<DnsRecordBase>().ToList();
            }

            if (this.Metadata != null)
            {
                clone.Metadata = (Hashtable)this.Metadata.Clone();
            }

            return clone;
        }
    }

    /// <summary>
    /// Represents a DNS record that is part of a <see cref="DnsRecordSet"/>.
    /// </summary>
    public abstract class DnsRecordBase : ICloneable
    {
        public abstract object Clone();

        public const int TxtRecordMaxLength = 1024;

        public const int TxtRecordMinLength = 0;

        public const int TxtRecordChunkSize = 255;

        public const int CaaRecordMaxLength = 1024;

        public const int CaaRecordMinLength = 0;

        internal abstract object ToMamlRecord();

        internal static DnsRecordBase FromMamlRecord(object record)
        {
            if (record is Management.Dns.Models.ARecord mamlRecord)
            {
                return new ARecord
                {
                    Ipv4Address = mamlRecord.Ipv4Address
                };
            }
            else if (record is Management.Dns.Models.AaaaRecord mamlRecord)
            {
                return new AaaaRecord
                {
                    Ipv6Address = mamlRecord.Ipv6Address
                };
            }
            else if (record is Management.Dns.Models.CnameRecord mamlRecord)
            {
                return new CnameRecord
                {
                    Cname = mamlRecord.Cname
                };
            }
            else if (record is Management.Dns.Models.NsRecord mamlRecord)
            {
                return new NsRecord
                {
                    Nsdname = mamlRecord.Nsdname
                };
            }
            else if (record is Management.Dns.Models.MxRecord mamlRecord)
            {
                return new MxRecord
                {
                    Exchange = mamlRecord.Exchange,
                    Preference = (ushort) mamlRecord.Preference,
                };
            }
            else if (record is Management.Dns.Models.SrvRecord mamlRecord)
            {
                return new SrvRecord
                {
                    Port = (ushort) mamlRecord.Port,
                    Priority = (ushort) mamlRecord.Priority,
                    Target = mamlRecord.Target,
                    Weight = (ushort) mamlRecord.Weight,
                };
            }
            else if (record is Management.Dns.Models.SoaRecord mamlRecord)
            {
                return new SoaRecord
                {
                    Email = mamlRecord.Email,
                    ExpireTime = (uint) mamlRecord.ExpireTime.GetValueOrDefault(),
                    Host = mamlRecord.Host,
                    MinimumTtl = (uint) mamlRecord.MinimumTtl.GetValueOrDefault(),
                    RefreshTime = (uint) mamlRecord.RefreshTime.GetValueOrDefault(),
                    RetryTime = (uint) mamlRecord.RetryTime.GetValueOrDefault(),
                    SerialNumber = (uint) mamlRecord.SerialNumber.GetValueOrDefault(),
                };
            }
            else if (record is Management.Dns.Models.TxtRecord mamlRecord)
            {
                return new TxtRecord
                {
                    Value = ToPowerShellTxtValue(mamlRecord.Value),
                };
            }
            else if (record is Management.Dns.Models.PtrRecord mamlRecord)
            {
                return new PtrRecord
                {
                    Ptrdname = mamlRecord.Ptrdname,
                };
            }
            else if (record is Management.Dns.Models.CaaRecord mamlRecord)
            {
                return new CaaRecord
                {
                    Flags = (byte) mamlRecord.Flags.GetValueOrDefault(),
                    Value = mamlRecord.Value,
                    Tag = mamlRecord.Tag,
                };
            }

            return null;
        }

        private static string ToPowerShellTxtValue(ICollection<string> value)
        {
            if (value == null || value.Count == 0)
            {
                return null;
            }
            
            var sb = new StringBuilder();
            foreach (var s in value)
            {
                sb.Append(s);
            }

            return sb.ToString();
        }
    }

    /// <summary>
    /// Represents a DNS record of type A that is part of a <see cref="DnsRecordSet"/>.
    /// </summary>
    public class ARecord : DnsRecordBase
    {
        /// <summary>
        /// Gets or sets the IPv4 address of this A record in string notation
        /// </summary>
        public string Ipv4Address { get; set; }

        public override string ToString()
        {
            return this.Ipv4Address;
        }

        internal override object ToMamlRecord()
        {
            return new Management.Dns.Models.ARecord
            {
                Ipv4Address = this.Ipv4Address,
            };
        }

        /// <summary>
        /// Cerates a deep copy of this object
        /// </summary>
        /// <returns>A clone of this object</returns>
        public override object Clone()
        {
            return new ARecord { Ipv4Address = this.Ipv4Address };
        }
    }

    /// <summary>
    /// Represents a DNS record of type AAAA that is part of a <see cref="DnsRecordSet"/>.
    /// </summary>
    public class AaaaRecord : DnsRecordBase
    {
        /// <summary>
        /// Gets or sets the IPv6 address of this AAAA record in string notation.
        /// </summary>
        public string Ipv6Address { get; set; }

        public override string ToString()
        {
            return this.Ipv6Address;
        }

        internal override object ToMamlRecord()
        {
            return new Management.Dns.Models.AaaaRecord
            {
                Ipv6Address = this.Ipv6Address,
            };
        }

        /// <summary>
        /// Cerates a deep copy of this object
        /// </summary>
        /// <returns>A clone of this object</returns>
        public override object Clone()
        {
            return new AaaaRecord { Ipv6Address = this.Ipv6Address };
        }
    }

    /// <summary>
    /// Represents a DNS record of type CNAME that is part of a <see cref="DnsRecordSet"/>.
    /// </summary>
    public class CnameRecord : DnsRecordBase
    {
        /// <summary>
        /// Gets or sets the canonical name for this CNAME record without a terminating dot.
        /// </summary>
        public string Cname { get; set; }

        public override string ToString()
        {
            return this.Cname;
        }

        internal override object ToMamlRecord()
        {
            return new Management.Dns.Models.CnameRecord
            {
                Cname = this.Cname,
            };
        }

        /// <summary>
        /// Cerates a deep copy of this object
        /// </summary>
        /// <returns>A clone of this object</returns>
        public override object Clone()
        {
            return new CnameRecord { Cname = this.Cname };
        }
    }

    /// <summary>
    /// Represents a DNS record of type NS that is part of a <see cref="DnsRecordSet"/>.
    /// </summary>
    public class NsRecord : DnsRecordBase
    {
        /// <summary>
        /// Gets or sets the name server name for this NS record, without a terminating dot.
        /// </summary>
        public string Nsdname { get; set; }

        public override string ToString()
        {
            return this.Nsdname;
        }

        internal override object ToMamlRecord()
        {
            return new Management.Dns.Models.NsRecord
            {
                Nsdname = this.Nsdname,
            };
        }

        /// <summary>
        /// Cerates a deep copy of this object
        /// </summary>
        /// <returns>A clone of this object</returns>
        public override object Clone()
        {
            return new NsRecord { Nsdname = this.Nsdname };
        }
    }

    /// <summary>
    /// Represents a DNS record of type TXT that is part of a <see cref="DnsRecordSet"/>.
    /// </summary>
    public class TxtRecord : DnsRecordBase
    {
        /// <summary>
        /// Gets or sets the text value of this TXT record.
        /// </summary>
        public string Value { get; set; }

        public override string ToString()
        {
            return this.Value;
        }

        internal override object ToMamlRecord()
        {
            char[] letters = this.Value.ToCharArray();
            var splitValues = new List<string>();

            int remaining = letters.Length;
            int begin = 0;
            while (remaining > 0)
            {
                if (remaining < TxtRecordChunkSize)
                {
                    splitValues.Add(new string(letters, begin, remaining));
                    remaining = 0;
                }
                else
                {
                    splitValues.Add(new string(letters, begin, TxtRecordChunkSize));
                    begin += TxtRecordChunkSize;
                    remaining -= TxtRecordChunkSize;
                }
            }

            return new Management.Dns.Models.TxtRecord
            {
                Value = splitValues,
            };
        }

        /// <summary>
        /// Cerates a deep copy of this object
        /// </summary>
        /// <returns>A clone of this object</returns>
        public override object Clone()
        {
            return new TxtRecord { Value = this.Value };
        }
    }

    /// <summary>
    /// Represents a DNS record of type MX that is part of a <see cref="DnsRecordSet"/>.
    /// </summary>
    public class MxRecord : DnsRecordBase
    {
        /// <summary>
        /// Gets or sets the preference metric for this MX record.
        /// </summary>
        public ushort Preference { get; set; }

        /// <summary>
        /// Gets or sets the domain name of the mail host, without a terminating dot
        /// </summary>
        public string Exchange { get; set; }

        public override string ToString()
        {
            return string.Format("[{0},{1}]", Preference, Exchange);
        }

        internal override object ToMamlRecord()
        {
            return new Management.Dns.Models.MxRecord
            {
                Exchange = this.Exchange,
                Preference = this.Preference,
            };
        }

        /// <summary>
        /// Cerates a deep copy of this object
        /// </summary>
        /// <returns>A clone of this object</returns>
        public override object Clone()
        {
            return new MxRecord { Exchange = this.Exchange, Preference = this.Preference };
        }
    }

    /// <summary>
    /// Represents a DNS record of type SRV that is part of a <see cref="DnsRecordSet"/>.
    /// </summary>
    public class SrvRecord : DnsRecordBase
    {
        /// <summary>
        /// Gets or sets the domain name of the target for this SRV record, without a terminating dot.
        /// </summary>
        public string Target { get; set; }

        /// <summary>
        /// Gets or sets the weight metric for this SRV record.
        /// </summary>
        public ushort Weight { get; set; }

        /// <summary>
        /// Gets or sets the port for this SRV record
        /// </summary>
        public ushort Port { get; set; }

        /// <summary>
        /// Gets or sets the priority metric for this SRV record.
        /// </summary>
        public ushort Priority { get; set; }

        public override string ToString()
        {
            return string.Format("[{0},{1},{2},{3}]", Priority, Weight, Port, Target);
        }

        internal override object ToMamlRecord()
        {
            return new Management.Dns.Models.SrvRecord
            {
                Priority = this.Priority,
                Target = this.Target,
                Weight = this.Weight,
                Port = this.Port,
            };
        }

        /// <summary>
        /// Cerates a deep copy of this object
        /// </summary>
        /// <returns>A clone of this object</returns>
        public override object Clone()
        {
            return new SrvRecord
            {
                Priority = this.Priority,
                Target = this.Target,
                Weight = this.Weight,
                Port = this.Port
            };
        }
    }

    /// <summary>
    /// Represents a DNS record of type SOA that is part of a <see cref="DnsRecordSet"/>.
    /// </summary>
    public class SoaRecord : DnsRecordBase
    {
        /// <summary>
        /// Gets or sets the domain name of the authoritative name server for this SOA record, without a temrinating dot.
        /// </summary>
        public string Host { get; set; }

        /// <summary>
        /// Gets or sets the email for this SOA record.
        /// </summary>
        public string Email { get; set; }

        /// <summary>
        /// Gets or sets the serial number of this SOA record.
        /// </summary>
        public uint SerialNumber { get; set; }

        /// <summary>
        /// Gets or sets the refresh value for this SOA record.
        /// </summary>
        public uint RefreshTime { get; set; }

        /// <summary>
        /// Gets or sets the retry time for SOA record.
        /// </summary>
        public uint RetryTime { get; set; }

        /// <summary>
        /// Gets or sets the expire time for this SOA record.
        /// </summary>
        public uint ExpireTime { get; set; }

        /// <summary>
        /// Gets or sets the minimum TTL for this SOA record.
        /// </summary>
        public uint MinimumTtl { get; set; }

        public override string ToString()
        {
            return string.Format("[{0},{1},{2},{3},{4},{5}]", Host, Email, RefreshTime, RetryTime, ExpireTime, MinimumTtl);
        }

        internal override object ToMamlRecord()
        {
            return new Management.Dns.Models.SoaRecord
            {
                Host = this.Host,
                Email = this.Email,
                SerialNumber = this.SerialNumber,
                RefreshTime = this.RefreshTime,
                RetryTime = this.RetryTime,
                ExpireTime = this.ExpireTime,
                MinimumTtl = this.MinimumTtl,
            };
        }

        /// <summary>
        /// Cerates a deep copy of this object
        /// </summary>
        /// <returns>A clone of this object</returns>
        public override object Clone()
        {
            return new SoaRecord
            {
                Host = this.Host,
                Email = this.Email,
                SerialNumber = this.SerialNumber,
                RefreshTime = this.RefreshTime,
                RetryTime = this.RetryTime,
                ExpireTime = this.ExpireTime,
                MinimumTtl = this.MinimumTtl,
            };
        }
    }

    /// <summary>
    /// Represents a DNS record of type PTR that is part of a <see cref="DnsRecordSet"/>.
    /// </summary>
    public class PtrRecord : DnsRecordBase
    {
        /// <summary>
        /// Gets or sets the ptr for this record.
        /// </summary>
        public string Ptrdname { get; set; }

        public override string ToString()
        {
            return this.Ptrdname;
        }

        public override object Clone()
        {
            return new PtrRecord()
            {
                Ptrdname = this.Ptrdname,
            };
        }

        internal override object ToMamlRecord()
        {
            return new Management.Dns.Models.PtrRecord
            {
                Ptrdname = this.Ptrdname,
            };
        }
    }

    /// <summary>
    /// Represents a DNS record of type CAA that is part of a <see cref="DnsRecordSet"/>.
    /// </summary>
    public class CaaRecord : DnsRecordBase
    {
        /// <summary>
        /// Gets or sets the flags field for this record.
        /// </summary>
        public byte Flags { get; set; }

        /// <summary>
        /// Gets or sets the property tag for this record.
        /// </summary>
        public string Tag { get; set; }

        /// <summary>
        /// Gets or sets the property value for this record.
        /// </summary>
        public string Value { get; set; }

        public override string ToString()
        {
            return $"[{Flags},{Tag},{Value}]";
        }

        public override object Clone()
        {
            return new CaaRecord()
            {
                Flags = this.Flags,
                Tag = this.Tag,
                Value = this.Value
            };
        }

        internal override object ToMamlRecord()
        {
            return new Management.Dns.Models.CaaRecord(
                this.Flags,
                this.Tag,
                this.Value);
        }
    }

}

---- Semantic diagnostics *before* transformation ----

---- Semantic diagnostics *after* transformation ----
/Users/runner/work/1/s/src/Dns/Dns/Models/DnsRecordSet.cs(144,65): error CS0136: A local or parameter named 'mamlRecord' cannot be declared in this scope because that name is used in an enclosing local scope to define a local or parameter,/Users/runner/work/1/s/src/Dns/Dns/Models/DnsRecordSet.cs(151,66): error CS0136: A local or parameter named 'mamlRecord' cannot be declared in this scope because that name is used in an enclosing local scope to define a local or parameter,/Users/runner/work/1/s/src/Dns/Dns/Models/DnsRecordSet.cs(158,63): error CS0136: A local or parameter named 'mamlRecord' cannot be declared in this scope because that name is used in an enclosing local scope to define a local or parameter,/Users/runner/work/1/s/src/Dns/Dns/Models/DnsRecordSet.cs(165,63): error CS0136: A local or parameter named 'mamlRecord' cannot be declared in this scope because that name is used in an enclosing local scope to define a local or parameter,/Users/runner/work/1/s/src/Dns/Dns/Models/DnsRecordSet.cs(173,64): error CS0136: A local or parameter named 'mamlRecord' cannot be declared in this scope because that name is used in an enclosing local scope to define a local or parameter,/Users/runner/work/1/s/src/Dns/Dns/Models/DnsRecordSet.cs(183,64): error CS0136: A local or parameter named 'mamlRecord' cannot be declared in this scope because that name is used in an enclosing local scope to define a local or parameter,/Users/runner/work/1/s/src/Dns/Dns/Models/DnsRecordSet.cs(196,64): error CS0136: A local or parameter named 'mamlRecord' cannot be declared in this scope because that name is used in an enclosing local scope to define a local or parameter,/Users/runner/work/1/s/src/Dns/Dns/Models/DnsRecordSet.cs(203,64): error CS0136: A local or parameter named 'mamlRecord' cannot be declared in this scope because that name is used in an enclosing local scope to define a local or parameter,/Users/runner/work/1/s/src/Dns/Dns/Models/DnsRecordSet.cs(210,64): error CS0136: A local or parameter named 'mamlRecord' cannot be declared in this scope because that name is used in an enclosing local scope to define a local or parameter
######################################################################


######################################################################
Nr: 5 - UsePatternMatchingRewriterR8
Filepath: /Users/runner/work/1/s/src/LogicApp/LogicApp/Utilities/CmdletHelper.cs
Description: Error: The created Syntax Tree is semantically incorrect.
------------------------------------------------------------------------
---- Original Tree ----
using System.Linq;
// ----------------------------------------------------------------------------------
//
// Copyright Microsoft Corporation
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// ----------------------------------------------------------------------------------

namespace Microsoft.Azure.Commands.LogicApp.Utilities
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Globalization;
    using System.IO;
    using System.Linq;
    using System.Management.Automation;
    using Microsoft.Azure.Management.Logic.Models;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Linq;

    /// <summary>
    /// Helper class for the logic app commands 
    /// </summary>
    public static class CmdletHelper
    {
        /// <summary>
        /// Creates the definition object from file.
        /// </summary>
        /// <param name="definitionFilePath">File path of the definition</param>
        /// <returns>JSON model definition object</returns>
        internal static JToken GetDefinitionFromFile(string definitionFilePath)
        {
            JToken definition = null;

            if (!string.IsNullOrEmpty(definitionFilePath))
            {
                if (!(new FileInfo(definitionFilePath)).Exists)
                {
                    throw new PSArgumentException(string.Format(CultureInfo.InvariantCulture, Properties.Resource.FileDoesNotExist, definitionFilePath));
                }

                definition = JToken.Parse(File.ReadAllText(definitionFilePath));
            }

            return definition;
        }

        /// <summary>
        /// Get file content.
        /// </summary>
        /// <param name="filePath">The File path.</param>
        /// <returns>String content</returns>
        internal static string GetStringContentFromFile(string filePath)
        {
            var content = string.Empty;

            if (!string.IsNullOrEmpty(filePath))
            {
                if (!(new FileInfo(filePath)).Exists)
                {
                    throw new PSArgumentException(string.Format(CultureInfo.InvariantCulture, Properties.Resource.FileDoesNotExist, filePath));
                }

                content = File.ReadAllText(filePath);
            }

            return content;
        }

        /// <summary>
        /// Get file content.
        /// </summary>
        /// <param name="filePath">The File path.</param>
        /// <returns>Binary content</returns>
        internal static byte[] GetBinaryContentFromFile(string filePath)
        {
            var content = new byte[0];

            if (!string.IsNullOrEmpty(filePath))
            {
                if (!(new FileInfo(filePath)).Exists)
                {
                    throw new PSArgumentException(string.Format(CultureInfo.InvariantCulture, Properties.Resource.FileDoesNotExist, filePath));
                }

                content = File.ReadAllBytes(filePath);
            }

            return content;
        }

        /// <summary>
        /// Check if file exists
        /// </summary>
        /// <param name="filePath">File path</param>
        /// <returns>Boolean result indicating whether file exists.</returns>
        internal static bool FileExists(string filePath)
        {
            if (!new FileInfo(filePath).Exists)
            {
                throw new PSArgumentException(string.Format(CultureInfo.InvariantCulture, Properties.Resource.FileDoesNotExist, filePath));
            }
            else
            {
                return true;
            }
        }

        /// <summary>
        /// Convert string content to AgreementContent object.
        /// </summary>
        /// <param name="content">The agreement content.</param>
        /// <returns>AgreementContent object.</returns>
        internal static AgreementContent ConvertToAgreementContent(string content)
        {
            AgreementContent agreementContent = null;

            if (!string.IsNullOrEmpty(content))
            {
                agreementContent = JsonConvert.DeserializeObject<AgreementContent>(content);
            }

            return agreementContent;
        }

        /// <summary>
        /// Convert string content to BatchConfigurationProperties object.
        /// </summary>
        /// <param name="content">The agreement content.</param>
        /// <returns>AgreementContent object.</returns>
        internal static BatchConfigurationProperties ConvertToBatchConfigurationProperties(string content)
        {
            BatchConfigurationProperties batchConfigurationProperties = null;

            if (!string.IsNullOrEmpty(content))
            {
                batchConfigurationProperties = JsonConvert.DeserializeObject<BatchConfiguration>(content).Properties;
            }

            return batchConfigurationProperties;
        }

        /// <summary>
        /// Converts IEnumerator to IEnumerable
        /// </summary>
        /// <typeparam name="T">Generic Type</typeparam>
        /// <param name="enumerator">Enumerator to be converted</param>
        /// <returns>IEnumerable collection</returns>
        public static IEnumerable<T> ToIEnumerable<T>(this IEnumerator<T> enumerator)
        {
            while (enumerator.MoveNext())
            {
                yield return enumerator.Current;
            }
        }

        /// <summary>
        /// Convert object to business identity list.
        /// </summary>
        /// <param name="businessIdentityObject">business identity object.</param>
        /// <returns>List of business identity.</returns>
        internal static IList<BusinessIdentity> ConvertToBusinessIdentityList(object businessIdentityObject)
        {
            if (!(businessIdentityObject is Array))
            {
                throw new PSArgumentException(Properties.Resource.InvalidBusinessIdentity, "BusinessIdentities");
            }

            var arr = businessIdentityObject as object[];

            if (arr != null && arr[0] is Array)
            {
                var validateresult = arr.Where(item => (((object[])item).Length != 2));

                if (validateresult != null && validateresult.Any())
                {
                    throw new PSArgumentException(Properties.Resource.InvalidBusinessIdentity, "BusinessIdentities");
                }

                return arr.Select(item => new BusinessIdentity()
                {
                    Qualifier = ((object[])item)[0].ToString(),
                    Value = ((object[])item)[1].ToString()
                }).ToList();
            }
            else if (arr is Array)
            {
                if (arr.Count() != 2)
                {
                    throw new PSArgumentException(Properties.Resource.InvalidBusinessIdentity, "BusinessIdentities");
                }

                var identities = new List<BusinessIdentity>
                {
                    new BusinessIdentity
                    {
                        Qualifier = arr[0].ToString(),
                        Value = arr[1].ToString(),
                    }
                };

                return identities;
            }
            else
            {
                throw new PSArgumentException(Properties.Resource.InvalidBusinessIdentity, "BusinessIdentities");
            }
        }

        /// <summary>
        /// Convert the valid metadata object.
        /// </summary>
        /// <param name="metadata">The metadata object.</param>
        /// <returns>JSON object</returns>
        internal static JObject ConvertToMetadataJObject(object metadata)
        {
            try
            {
                return JObject.Parse(metadata.ToString());
            }
            catch
            {
                throw new PSArgumentException(Properties.Resource.InvalidMetadata);
            }
        }

        /// <summary>
        /// Creates the dictionary collection from the parameter file
        /// </summary>
        /// <param name="parametersFilePath">Parameter file path</param>
        /// <returns>Workflow parameter dictionary</returns>
        internal static Dictionary<string, WorkflowParameter> GetParametersFromFile(string parametersFilePath)
        {
            Dictionary<string, WorkflowParameter> inputParameters = null;

            if (!string.IsNullOrEmpty(parametersFilePath))
            {
                if (!(new FileInfo(parametersFilePath)).Exists)
                {
                    throw new PSArgumentException(string.Format(CultureInfo.InvariantCulture,
                        Properties.Resource.FileDoesNotExist, parametersFilePath));
                }

                var inputParametersObject = JObject.Parse(File.ReadAllText(parametersFilePath));
                var values = JsonConvert.DeserializeObject<Dictionary<string, object>>(inputParametersObject.ToString());

                inputParameters = new Dictionary<string, WorkflowParameter>();

                foreach (var parameter in values)
                {
                    var workflowParameter = JsonConvert.DeserializeObject<WorkflowParameter>(parameter.Value.ToString());
                    inputParameters.Add(parameter.Key, workflowParameter);
                }
            }
            return inputParameters;
        }

        /// <summary>
        /// Convert object to WorkflowParameter dictionary.
        /// </summary>
        /// <param name="parametersObject">Parameters object</param>
        /// <returns>Workflow parameter dictionary</returns>
        internal static Dictionary<string, WorkflowParameter> ConvertToWorkflowParameterDictionary(object parametersObject)
        {
            Dictionary<string, WorkflowParameter> workflowParameters = null;
            if (parametersObject is Hashtable)
            {
                var collection = parametersObject as Hashtable;
                var inputParameters = new Dictionary<string, WorkflowParameter>();

                foreach (var key in collection.Keys)
                {
                    inputParameters.Add(key.ToString(), new WorkflowParameter
                    {
                        Value = collection[key].ToString()
                    });
                }
                workflowParameters = inputParameters;
            }
            else if (parametersObject is Dictionary<string, WorkflowParameter>)
            {
                workflowParameters = parametersObject as Dictionary<string, WorkflowParameter>;
            }
            return workflowParameters;
        }
    }
}
---- Transformed Tree ----
using System.Linq;
// ----------------------------------------------------------------------------------
//
// Copyright Microsoft Corporation
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// ----------------------------------------------------------------------------------

namespace Microsoft.Azure.Commands.LogicApp.Utilities
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Globalization;
    using System.IO;
    using System.Linq;
    using System.Management.Automation;
    using Microsoft.Azure.Management.Logic.Models;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Linq;

    /// <summary>
    /// Helper class for the logic app commands 
    /// </summary>
    public static class CmdletHelper
    {
        /// <summary>
        /// Creates the definition object from file.
        /// </summary>
        /// <param name="definitionFilePath">File path of the definition</param>
        /// <returns>JSON model definition object</returns>
        internal static JToken GetDefinitionFromFile(string definitionFilePath)
        {
            JToken definition = null;

            if (!string.IsNullOrEmpty(definitionFilePath))
            {
                if (!(new FileInfo(definitionFilePath)).Exists)
                {
                    throw new PSArgumentException(string.Format(CultureInfo.InvariantCulture, Properties.Resource.FileDoesNotExist, definitionFilePath));
                }

                definition = JToken.Parse(File.ReadAllText(definitionFilePath));
            }

            return definition;
        }

        /// <summary>
        /// Get file content.
        /// </summary>
        /// <param name="filePath">The File path.</param>
        /// <returns>String content</returns>
        internal static string GetStringContentFromFile(string filePath)
        {
            var content = string.Empty;

            if (!string.IsNullOrEmpty(filePath))
            {
                if (!(new FileInfo(filePath)).Exists)
                {
                    throw new PSArgumentException(string.Format(CultureInfo.InvariantCulture, Properties.Resource.FileDoesNotExist, filePath));
                }

                content = File.ReadAllText(filePath);
            }

            return content;
        }

        /// <summary>
        /// Get file content.
        /// </summary>
        /// <param name="filePath">The File path.</param>
        /// <returns>Binary content</returns>
        internal static byte[] GetBinaryContentFromFile(string filePath)
        {
            var content = new byte[0];

            if (!string.IsNullOrEmpty(filePath))
            {
                if (!(new FileInfo(filePath)).Exists)
                {
                    throw new PSArgumentException(string.Format(CultureInfo.InvariantCulture, Properties.Resource.FileDoesNotExist, filePath));
                }

                content = File.ReadAllBytes(filePath);
            }

            return content;
        }

        /// <summary>
        /// Check if file exists
        /// </summary>
        /// <param name="filePath">File path</param>
        /// <returns>Boolean result indicating whether file exists.</returns>
        internal static bool FileExists(string filePath)
        {
            if (!new FileInfo(filePath).Exists)
            {
                throw new PSArgumentException(string.Format(CultureInfo.InvariantCulture, Properties.Resource.FileDoesNotExist, filePath));
            }
            else
            {
                return true;
            }
        }

        /// <summary>
        /// Convert string content to AgreementContent object.
        /// </summary>
        /// <param name="content">The agreement content.</param>
        /// <returns>AgreementContent object.</returns>
        internal static AgreementContent ConvertToAgreementContent(string content)
        {
            AgreementContent agreementContent = null;

            if (!string.IsNullOrEmpty(content))
            {
                agreementContent = JsonConvert.DeserializeObject<AgreementContent>(content);
            }

            return agreementContent;
        }

        /// <summary>
        /// Convert string content to BatchConfigurationProperties object.
        /// </summary>
        /// <param name="content">The agreement content.</param>
        /// <returns>AgreementContent object.</returns>
        internal static BatchConfigurationProperties ConvertToBatchConfigurationProperties(string content)
        {
            BatchConfigurationProperties batchConfigurationProperties = null;

            if (!string.IsNullOrEmpty(content))
            {
                batchConfigurationProperties = JsonConvert.DeserializeObject<BatchConfiguration>(content).Properties;
            }

            return batchConfigurationProperties;
        }

        /// <summary>
        /// Converts IEnumerator to IEnumerable
        /// </summary>
        /// <typeparam name="T">Generic Type</typeparam>
        /// <param name="enumerator">Enumerator to be converted</param>
        /// <returns>IEnumerable collection</returns>
        public static IEnumerable<T> ToIEnumerable<T>(this IEnumerator<T> enumerator)
        {
            while (enumerator.MoveNext())
            {
                yield return enumerator.Current;
            }
        }

        /// <summary>
        /// Convert object to business identity list.
        /// </summary>
        /// <param name="businessIdentityObject">business identity object.</param>
        /// <returns>List of business identity.</returns>
        internal static IList<BusinessIdentity> ConvertToBusinessIdentityList(object businessIdentityObject)
        {
            if (!(businessIdentityObject is Array))
            {
                throw new PSArgumentException(Properties.Resource.InvalidBusinessIdentity, "BusinessIdentities");
            }

            if (businessIdentityObject is object[] arr && arr[0] is Array)
            {
                var validateresult = arr.Where(item => (((object[])item).Length != 2));

                if (validateresult != null && validateresult.Any())
                {
                    throw new PSArgumentException(Properties.Resource.InvalidBusinessIdentity, "BusinessIdentities");
                }

                return arr.Select(item => new BusinessIdentity()
                {
                    Qualifier = ((object[])item)[0].ToString(),
                    Value = ((object[])item)[1].ToString()
                }).ToList();
            }
            else if (arr is Array)
            {
                if (arr.Count() != 2)
                {
                    throw new PSArgumentException(Properties.Resource.InvalidBusinessIdentity, "BusinessIdentities");
                }

                var identities = new List<BusinessIdentity>
                {
                    new BusinessIdentity
                    {
                        Qualifier = arr[0].ToString(),
                        Value = arr[1].ToString(),
                    }
                };

                return identities;
            }
            else
            {
                throw new PSArgumentException(Properties.Resource.InvalidBusinessIdentity, "BusinessIdentities");
            }
        }

        /// <summary>
        /// Convert the valid metadata object.
        /// </summary>
        /// <param name="metadata">The metadata object.</param>
        /// <returns>JSON object</returns>
        internal static JObject ConvertToMetadataJObject(object metadata)
        {
            try
            {
                return JObject.Parse(metadata.ToString());
            }
            catch
            {
                throw new PSArgumentException(Properties.Resource.InvalidMetadata);
            }
        }

        /// <summary>
        /// Creates the dictionary collection from the parameter file
        /// </summary>
        /// <param name="parametersFilePath">Parameter file path</param>
        /// <returns>Workflow parameter dictionary</returns>
        internal static Dictionary<string, WorkflowParameter> GetParametersFromFile(string parametersFilePath)
        {
            Dictionary<string, WorkflowParameter> inputParameters = null;

            if (!string.IsNullOrEmpty(parametersFilePath))
            {
                if (!(new FileInfo(parametersFilePath)).Exists)
                {
                    throw new PSArgumentException(string.Format(CultureInfo.InvariantCulture,
                        Properties.Resource.FileDoesNotExist, parametersFilePath));
                }

                var inputParametersObject = JObject.Parse(File.ReadAllText(parametersFilePath));
                var values = JsonConvert.DeserializeObject<Dictionary<string, object>>(inputParametersObject.ToString());

                inputParameters = new Dictionary<string, WorkflowParameter>();

                foreach (var parameter in values)
                {
                    var workflowParameter = JsonConvert.DeserializeObject<WorkflowParameter>(parameter.Value.ToString());
                    inputParameters.Add(parameter.Key, workflowParameter);
                }
            }
            return inputParameters;
        }

        /// <summary>
        /// Convert object to WorkflowParameter dictionary.
        /// </summary>
        /// <param name="parametersObject">Parameters object</param>
        /// <returns>Workflow parameter dictionary</returns>
        internal static Dictionary<string, WorkflowParameter> ConvertToWorkflowParameterDictionary(object parametersObject)
        {
            Dictionary<string, WorkflowParameter> workflowParameters = null;
            if (parametersObject is Hashtable)
            {
                var collection = parametersObject as Hashtable;
                var inputParameters = new Dictionary<string, WorkflowParameter>();

                foreach (var key in collection.Keys)
                {
                    inputParameters.Add(key.ToString(), new WorkflowParameter
                    {
                        Value = collection[key].ToString()
                    });
                }
                workflowParameters = inputParameters;
            }
            else if (parametersObject is Dictionary<string, WorkflowParameter>)
            {
                workflowParameters = parametersObject as Dictionary<string, WorkflowParameter>;
            }
            return workflowParameters;
        }
    }
}
---- Semantic diagnostics *before* transformation ----
/Users/runner/work/1/s/src/LogicApp/LogicApp/Utilities/CmdletHelper.cs(1,1): hidden CS8019: Unnecessary using directive.
---- Semantic diagnostics *after* transformation ----
/Users/runner/work/1/s/src/LogicApp/LogicApp/Utilities/CmdletHelper.cs(192,22): error CS0165: Use of unassigned local variable 'arr',/Users/runner/work/1/s/src/LogicApp/LogicApp/Utilities/CmdletHelper.cs(1,1): hidden CS8019: Unnecessary using directive.
######################################################################


######################################################################
Nr: 6 - UsePatternMatchingRewriterR8
Filepath: /Users/runner/work/1/s/src/MachineLearning/MachineLearning/Cmdlets/MachineLearningCmdletBase.cs
Description: Error: The created Syntax Tree is semantically incorrect.
------------------------------------------------------------------------
---- Original Tree ----
using System;
using System.Collections.Generic;
using System.Linq;
using System.Management.Automation;
using System.Runtime.ExceptionServices;
using System.Runtime.InteropServices;
using System.Security;
using System.Text;
using System.Threading;

using Microsoft.Azure.Commands.ResourceManager.Common;
using Microsoft.Rest.Azure;

using Microsoft.WindowsAzure.Commands.Common;
using Microsoft.Azure.Commands.Common.Authentication.Abstractions;

namespace Microsoft.Azure.Commands.MachineLearning
{
    public abstract class MachineLearningCmdletBase : AzureRMCmdlet
    {
        /// <summary>
        /// The cancellation source.
        /// </summary>
        private CancellationTokenSource cancellationSource;

        protected CancellationToken? CancellationToken
        {
            get
            {
                return this.cancellationSource == null ? null : (CancellationToken?)this.cancellationSource.Token;
            }
        }

        #region Processing life cycle

        protected override void BeginProcessing()
        {
            try
            {
                if (this.cancellationSource == null)
                {
                    this.cancellationSource = new CancellationTokenSource();
                }

                base.BeginProcessing();
            }
            catch (Exception ex)
            {
                this.WriteVersionInfoToDebugChannel();
                if (this.IsFatalException(ex))
                {
                    ThrowTerminatingError(
                        new ErrorRecord(
                                ex,
                                string.Empty,
                                ErrorCategory.InvalidOperation,
                                this));
                }

                var capturedException = ExceptionDispatchInfo.Capture(ex);
                this.HandleException(capturedException: capturedException);
            }
        }

        protected override void EndProcessing()
        {
            try
            {
                base.EndProcessing();
            }
            catch (Exception ex)
            {
                this.WriteVersionInfoToDebugChannel();
                if (this.IsFatalException(ex))
                {
                    ThrowTerminatingError(
                            new ErrorRecord(
                                    ex,
                                    string.Empty,
                                    ErrorCategory.InvalidOperation,
                                    this));
                }

                var capturedException = ExceptionDispatchInfo.Capture(ex);
                this.HandleException(capturedException: capturedException);
            }
            finally
            {
                this.DisposeOfCancellationSource();
            }
        }

        protected override void StopProcessing()
        {
            try
            {
                if (this.cancellationSource != null &&
                    !this.cancellationSource.IsCancellationRequested)
                {
                    this.cancellationSource.Cancel();
                }

                base.StopProcessing();
            }
            catch (Exception ex)
            {
                this.WriteVersionInfoToDebugChannel();
                if (this.IsFatalException(ex))
                {
                    throw;
                }

                var capturedException = ExceptionDispatchInfo.Capture(ex);
                this.HandleException(capturedException: capturedException);
            }
            finally
            {
                this.DisposeOfCancellationSource();
            }
        }

        /// <summary>
        /// Actual cmdlet logic goes here in child classes
        /// </summary>
        protected virtual void RunCmdlet()
        {
            // No op
        }

        public override void ExecuteCmdlet()
        {
            try
            {
                base.ExecuteCmdlet();
                this.RunCmdlet();
            }
            catch (Exception ex)
            {
               this.WriteVersionInfoToDebugChannel();

                if (this.IsFatalException(ex))
                {
                    throw;
                }

                var capturedException = ExceptionDispatchInfo.Capture(ex);
                this.HandleException(capturedException: capturedException);
            }
        }

        #endregion

        private void DisposeOfCancellationSource()
        {
            if (this.cancellationSource != null)
            {
                if (!this.cancellationSource.IsCancellationRequested)
                {
                    this.cancellationSource.Cancel();
                }

                this.cancellationSource.Dispose();
                this.cancellationSource = null;
            }
        }

        /// <summary>
        /// Provides specialized exception handling.
        /// </summary>
        /// <param name="capturedException">The captured exception</param>
        private void HandleException(ExceptionDispatchInfo capturedException)
        {
            try
            {
                ErrorRecord errorRecord;
                var cloudException = capturedException.SourceException as CloudException;
                if (cloudException != null)
                {
                    errorRecord = this.CreateErrorRecordForCloudException(cloudException);
                }
                else
                {
                    var errorResponseException =
                            capturedException.SourceException as ErrorResponseMessageException;
                    if (errorResponseException != null)
                    {
                        errorRecord = errorResponseException.ToErrorRecord();
                    }
                    else
                    {
                        var aggregateException =
                                capturedException.SourceException as AggregateException;
                        if (aggregateException != null)
                        {
                            errorResponseException =
                                aggregateException.InnerException as ErrorResponseMessageException;
                            if (errorResponseException != null)
                            {
                                errorRecord = errorResponseException.ToErrorRecord();
                            }
                            else
                            {
                                errorRecord = new ErrorRecord(
                                                    aggregateException.InnerException,
                                                    aggregateException.InnerException.Message,
                                                    ErrorCategory.CloseError,
                                                    null);
                            }
                        }
                        else
                        {
                            errorRecord = new ErrorRecord(
                                                    capturedException.SourceException,
                                                    capturedException.SourceException.Message,
                                                    ErrorCategory.CloseError,
                                                    null);
                        }
                    }
                }

                this.WriteError(errorRecord);
            }
            finally
            {
                this.DisposeOfCancellationSource();
            }
        }


        /// <summary>
        /// Converts <see cref="CloudException"/> objects into <see cref="ErrorRecord"/>
        /// </summary>
        /// <param name="cloudException">The exception</param>
        private ErrorRecord CreateErrorRecordForCloudException(CloudException cloudException)
        {
            var errorReport = new StringBuilder();

            string requestId = cloudException.RequestId;
            if (string.IsNullOrWhiteSpace(requestId) && cloudException.Response != null)
            {
                // Try to obtain the request id from the HTTP response associated with the exception
                IEnumerable<string> headerValues = Enumerable.Empty<string>();
                if (cloudException.Response.Headers != null &&
                    cloudException.Response.Headers.TryGetValue("x-ms-request-id", out headerValues))
                {
                    requestId = headerValues.First();
                }
            }

            errorReport.AppendLine();
            errorReport.AppendLine("Request Id: {0}".FormatInvariant(requestId));
            if (cloudException.Body != null)
            {
                errorReport.AppendLine("Error Code: {0}".FormatInvariant(cloudException.Body.Code));
                errorReport.AppendLine("Error Message: {0}".FormatInvariant(cloudException.Body.Message));
                errorReport.AppendLine("Error Target: {0}".FormatInvariant(cloudException.Body.Target));
                if (cloudException.Body.Details.Any())
                {
                    errorReport.AppendLine("Error Details:");
                    foreach (var errorDetail in cloudException.Body.Details)
                    {
                        errorReport.AppendLine(
                                        "\t[Code={0}, Message={1}]".FormatInvariant(
                                                                        errorDetail.Code,
                                                                        errorDetail.Message));
                    }
                }
            }
            else
            {
                if (cloudException.Response != null)
                {
                    errorReport.AppendLine("Error Content: {0}".FormatInvariant(cloudException.Response.Content));
                }
            }

            var returnedError = new Exception(errorReport.ToString(), cloudException);
            return new ErrorRecord(returnedError, "Resource Provider Error", ErrorCategory.CloseError, null);
        }

        /// <summary>
        /// Test if an exception is a fatal exception. 
        /// </summary>
        /// <param name="ex">Exception object.</param>
        private bool IsFatalException(Exception ex)
        {
            if (ex is AggregateException aggregateException)
            {
                return aggregateException.Flatten().InnerExceptions.Any(exception => this.IsFatalException(exception));
            }

            if (ex.InnerException != null && this.IsFatalException(ex.InnerException))
            {
                return true;
            }

            return
                ex is TypeInitializationException ||
                ex is AppDomainUnloadedException ||
                ex is ThreadInterruptedException ||
                ex is AccessViolationException ||
                ex is InvalidProgramException ||
                ex is BadImageFormatException ||
                ex is StackOverflowException ||
                ex is ThreadAbortException ||
                ex is OutOfMemoryException ||
                ex is SecurityException ||
                ex is SEHException;
        }

        private void WriteVersionInfoToDebugChannel()
        {
            var versionInfo = this.MyInvocation.MyCommand.Module.Version;
            this.WriteDebug(Resources.VersionInfo.FormatInvariant(versionInfo.ToString(3)));
        }
    }
}

---- Transformed Tree ----
using System;
using System.Collections.Generic;
using System.Linq;
using System.Management.Automation;
using System.Runtime.ExceptionServices;
using System.Runtime.InteropServices;
using System.Security;
using System.Text;
using System.Threading;

using Microsoft.Azure.Commands.ResourceManager.Common;
using Microsoft.Rest.Azure;

using Microsoft.WindowsAzure.Commands.Common;
using Microsoft.Azure.Commands.Common.Authentication.Abstractions;

namespace Microsoft.Azure.Commands.MachineLearning
{
    public abstract class MachineLearningCmdletBase : AzureRMCmdlet
    {
        /// <summary>
        /// The cancellation source.
        /// </summary>
        private CancellationTokenSource cancellationSource;

        protected CancellationToken? CancellationToken
        {
            get
            {
                return this.cancellationSource == null ? null : (CancellationToken?)this.cancellationSource.Token;
            }
        }

        #region Processing life cycle

        protected override void BeginProcessing()
        {
            try
            {
                if (this.cancellationSource == null)
                {
                    this.cancellationSource = new CancellationTokenSource();
                }

                base.BeginProcessing();
            }
            catch (Exception ex)
            {
                this.WriteVersionInfoToDebugChannel();
                if (this.IsFatalException(ex))
                {
                    ThrowTerminatingError(
                        new ErrorRecord(
                                ex,
                                string.Empty,
                                ErrorCategory.InvalidOperation,
                                this));
                }

                var capturedException = ExceptionDispatchInfo.Capture(ex);
                this.HandleException(capturedException: capturedException);
            }
        }

        protected override void EndProcessing()
        {
            try
            {
                base.EndProcessing();
            }
            catch (Exception ex)
            {
                this.WriteVersionInfoToDebugChannel();
                if (this.IsFatalException(ex))
                {
                    ThrowTerminatingError(
                            new ErrorRecord(
                                    ex,
                                    string.Empty,
                                    ErrorCategory.InvalidOperation,
                                    this));
                }

                var capturedException = ExceptionDispatchInfo.Capture(ex);
                this.HandleException(capturedException: capturedException);
            }
            finally
            {
                this.DisposeOfCancellationSource();
            }
        }

        protected override void StopProcessing()
        {
            try
            {
                if (this.cancellationSource != null &&
                    !this.cancellationSource.IsCancellationRequested)
                {
                    this.cancellationSource.Cancel();
                }

                base.StopProcessing();
            }
            catch (Exception ex)
            {
                this.WriteVersionInfoToDebugChannel();
                if (this.IsFatalException(ex))
                {
                    throw;
                }

                var capturedException = ExceptionDispatchInfo.Capture(ex);
                this.HandleException(capturedException: capturedException);
            }
            finally
            {
                this.DisposeOfCancellationSource();
            }
        }

        /// <summary>
        /// Actual cmdlet logic goes here in child classes
        /// </summary>
        protected virtual void RunCmdlet()
        {
            // No op
        }

        public override void ExecuteCmdlet()
        {
            try
            {
                base.ExecuteCmdlet();
                this.RunCmdlet();
            }
            catch (Exception ex)
            {
               this.WriteVersionInfoToDebugChannel();

                if (this.IsFatalException(ex))
                {
                    throw;
                }

                var capturedException = ExceptionDispatchInfo.Capture(ex);
                this.HandleException(capturedException: capturedException);
            }
        }

        #endregion

        private void DisposeOfCancellationSource()
        {
            if (this.cancellationSource != null)
            {
                if (!this.cancellationSource.IsCancellationRequested)
                {
                    this.cancellationSource.Cancel();
                }

                this.cancellationSource.Dispose();
                this.cancellationSource = null;
            }
        }

        /// <summary>
        /// Provides specialized exception handling.
        /// </summary>
        /// <param name="capturedException">The captured exception</param>
        private void HandleException(ExceptionDispatchInfo capturedException)
        {
            try
            {
                ErrorRecord errorRecord;

                if (capturedException.SourceException is CloudException cloudException)
                {
                    errorRecord = this.CreateErrorRecordForCloudException(cloudException);
                }
                else
                {
                    if (capturedException.SourceException is ErrorResponseMessageException errorResponseException)
                    {
                        errorRecord = errorResponseException.ToErrorRecord();
                    }
                    else
                    {
                        if (capturedException.SourceException is AggregateException aggregateException)
                        {
                            errorResponseException =
                                aggregateException.InnerException as ErrorResponseMessageException;
                            if (capturedException.SourceException is ErrorResponseMessageException errorResponseException)
                            {
                                errorRecord = errorResponseException.ToErrorRecord();
                            }
                            else
                            {
                                errorRecord = new ErrorRecord(
                                                    aggregateException.InnerException,
                                                    aggregateException.InnerException.Message,
                                                    ErrorCategory.CloseError,
                                                    null);
                            }
                        }
                        else
                        {
                            errorRecord = new ErrorRecord(
                                                    capturedException.SourceException,
                                                    capturedException.SourceException.Message,
                                                    ErrorCategory.CloseError,
                                                    null);
                        }
                    }
                }

                this.WriteError(errorRecord);
            }
            finally
            {
                this.DisposeOfCancellationSource();
            }
        }


        /// <summary>
        /// Converts <see cref="CloudException"/> objects into <see cref="ErrorRecord"/>
        /// </summary>
        /// <param name="cloudException">The exception</param>
        private ErrorRecord CreateErrorRecordForCloudException(CloudException cloudException)
        {
            var errorReport = new StringBuilder();

            string requestId = cloudException.RequestId;
            if (string.IsNullOrWhiteSpace(requestId) && cloudException.Response != null)
            {
                // Try to obtain the request id from the HTTP response associated with the exception
                IEnumerable<string> headerValues = Enumerable.Empty<string>();
                if (cloudException.Response.Headers != null &&
                    cloudException.Response.Headers.TryGetValue("x-ms-request-id", out headerValues))
                {
                    requestId = headerValues.First();
                }
            }

            errorReport.AppendLine();
            errorReport.AppendLine("Request Id: {0}".FormatInvariant(requestId));
            if (cloudException.Body != null)
            {
                errorReport.AppendLine("Error Code: {0}".FormatInvariant(cloudException.Body.Code));
                errorReport.AppendLine("Error Message: {0}".FormatInvariant(cloudException.Body.Message));
                errorReport.AppendLine("Error Target: {0}".FormatInvariant(cloudException.Body.Target));
                if (cloudException.Body.Details.Any())
                {
                    errorReport.AppendLine("Error Details:");
                    foreach (var errorDetail in cloudException.Body.Details)
                    {
                        errorReport.AppendLine(
                                        "\t[Code={0}, Message={1}]".FormatInvariant(
                                                                        errorDetail.Code,
                                                                        errorDetail.Message));
                    }
                }
            }
            else
            {
                if (cloudException.Response != null)
                {
                    errorReport.AppendLine("Error Content: {0}".FormatInvariant(cloudException.Response.Content));
                }
            }

            var returnedError = new Exception(errorReport.ToString(), cloudException);
            return new ErrorRecord(returnedError, "Resource Provider Error", ErrorCategory.CloseError, null);
        }

        /// <summary>
        /// Test if an exception is a fatal exception. 
        /// </summary>
        /// <param name="ex">Exception object.</param>
        private bool IsFatalException(Exception ex)
        {
            if (ex is AggregateException aggregateException)
            {
                return aggregateException.Flatten().InnerExceptions.Any(exception => this.IsFatalException(exception));
            }

            if (ex.InnerException != null && this.IsFatalException(ex.InnerException))
            {
                return true;
            }

            return
                ex is TypeInitializationException ||
                ex is AppDomainUnloadedException ||
                ex is ThreadInterruptedException ||
                ex is AccessViolationException ||
                ex is InvalidProgramException ||
                ex is BadImageFormatException ||
                ex is StackOverflowException ||
                ex is ThreadAbortException ||
                ex is OutOfMemoryException ||
                ex is SecurityException ||
                ex is SEHException;
        }

        private void WriteVersionInfoToDebugChannel()
        {
            var versionInfo = this.MyInvocation.MyCommand.Module.Version;
            this.WriteDebug(Resources.VersionInfo.FormatInvariant(versionInfo.ToString(3)));
        }
    }
}

---- Semantic diagnostics *before* transformation ----
/Users/runner/work/1/s/src/MachineLearning/MachineLearning/Cmdlets/MachineLearningCmdletBase.cs(28,1): hidden CS8019: Unnecessary using directive.
---- Semantic diagnostics *after* transformation ----
/Users/runner/work/1/s/src/MachineLearning/MachineLearning/Cmdlets/MachineLearningCmdletBase.cs(205,29): error CS0841: Cannot use local variable 'errorResponseException' before it is declared,/Users/runner/work/1/s/src/MachineLearning/MachineLearning/Cmdlets/MachineLearningCmdletBase.cs(207,100): error CS0136: A local or parameter named 'errorResponseException' cannot be declared in this scope because that name is used in an enclosing local scope to define a local or parameter,/Users/runner/work/1/s/src/MachineLearning/MachineLearning/Cmdlets/MachineLearningCmdletBase.cs(28,1): hidden CS8019: Unnecessary using directive.
######################################################################


######################################################################
Nr: 7 - UsePatternMatchingRewriterR8
Filepath: /Users/runner/work/1/s/src/Resources/ResourceManager/Json/PSJsonSerializer.cs
Description: Error: The created Syntax Tree is semantically incorrect.
------------------------------------------------------------------------
---- Original Tree ----
using System;
using System.Collections;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Management.Automation;
using System.Management.Automation.Internal;
using System.Management.Automation.Language;
using System.Reflection;
using Microsoft.Azure.Commands.ResourceManager.Cmdlets.Extensions;
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;

namespace Microsoft.Azure.Commands.ResourceManager.Cmdlets.Json
{
    public static class PSJsonSerializer
    {
        public struct SerializeContext
        {
            public SerializeContext(int maxDepth)
            {
                this.MaxDepth = maxDepth;
            }

            public int MaxDepth { get; }
        }

        public static string Serialize(object value)
        {
            var context = new SerializeContext(1024);

            return Serialize(value, context);
        }

        public static string Serialize(object value, SerializeContext context)
        {
            try
            {
                object processed = ProcessValue(value, 0, context);

                return JsonConvert.SerializeObject(processed);
            }
            catch (OperationCanceledException)
            {
                return null;
            }
        }

        private static object ProcessValue(object value, int currentDepth, SerializeContext context)
        {
            if (value == null || value == AutomationNull.Value)
            {
                return null;
            }

            var psObject = value as PSObject;

            if (psObject != null)
            {
                value = psObject.BaseObject;
            }

            if (value == NullString.Value || value == DBNull.Value)
            {
                return null;
            }

            if (IsPrimitive(value))
            {
                return value;
            }

            if (value is JValue jValue)
            {
                return jValue.Value<object>();
            }

            if (value is JObject jObject)
            {
                return jObject.ToObject<Dictionary<object, object>>();
            }

            Type type = value.GetType();

            if (type.IsPrimitive)
            {
                return value;
            }

            if (type.IsEnum)
            {
                // Win8:378368 Enums based on System.Int64 or System.UInt64 are not JSON-serializable
                // because JavaScript does not support the necessary precision.
                Type enumUnderlyingType = Enum.GetUnderlyingType(value.GetType());

                return enumUnderlyingType.Equals(typeof(long)) || enumUnderlyingType.Equals(typeof(ulong))
                    ? value.ToString()
                    : value;
            }

            if (currentDepth > context.MaxDepth)
            {
                object valueToConvert = IsPurePsObject(psObject) ? psObject : value;

                return LanguagePrimitives.ConvertTo(valueToConvert, typeof(string), CultureInfo.InvariantCulture);
            }

            if (value is IDictionary dict)
            {
                return ProcessDictionary(dict, currentDepth, context);
            }

            if (value is IEnumerable enumerable)
            {
                return ProcessEnumerable(enumerable, currentDepth, context);
            }

            return ProcessObject(value, currentDepth, context);
        }

        private static object ProcessDictionary(IDictionary dictionary, int depth, SerializeContext context)
        {
            var result = new Dictionary<string, object>(dictionary.Count);

            foreach (DictionaryEntry entry in dictionary)
            {
                if (!(entry.Key is string name))
                {
                    throw new InvalidOperationException("Non-string key in dictionary");
                }

                result.Add(name, ProcessValue(entry.Value, depth + 1, context));
            }

            return result;
        }

        private static object ProcessEnumerable(IEnumerable enumerable, int depth, SerializeContext context)
        {
            var result = new List<object>();

            foreach (object o in enumerable)
            {
                result.Add(ProcessValue(o, depth + 1, context));
            }

            return result;
        }

        private static object ProcessObject(object @object, int depth, SerializeContext context)
        {
            var result = new Dictionary<string, object>();
            Type type = @object.GetType();
            BindingFlags bindingFlags = BindingFlags.Public | BindingFlags.Instance;

            foreach (FieldInfo info in type.GetFields(bindingFlags).Where(HasNoJsonIgnoreAttribute))
            {
                object value;

                try
                {
                    value = info.GetValue(@object);
                }
                catch (Exception)
                {
                    value = null;
                }

                result.Add(info.Name, ProcessValue(value, depth + 1, context));
            }

            foreach (PropertyInfo info in type.GetProperties(bindingFlags).Where(HasNoJsonIgnoreAttribute))
            {
                MethodInfo getMethod = info.GetGetMethod();

                if (getMethod != null && getMethod.GetParameters().Length == 0)
                {
                    object value;

                    try
                    {
                        value = getMethod.Invoke(@object, Array.Empty<object>());
                    }
                    catch (Exception)
                    {
                        value = null;
                    }

                    result.Add(info.Name, ProcessValue(value, depth + 1, context));
                }
            }

            return result;
        }

        private static bool IsPurePsObject(PSObject psObject)
        {
            return psObject != null && !(psObject.BaseObject is PSCustomObject);
        }

        private static bool IsPrimitive(object value)
        {
            return value is string
                || value is char
                || value is bool
                || value is DateTime
                || value is DateTimeOffset
                || value is Guid
                || value is Uri
                || value is double
                || value is float
                || value is decimal;
        }

        private static bool HasNoJsonIgnoreAttribute(MemberInfo info)
        {
            return !info.IsDefined(typeof(JsonIgnoreAttribute), true);
        }
    }
}
---- Transformed Tree ----
using System;
using System.Collections;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Management.Automation;
using System.Management.Automation.Internal;
using System.Management.Automation.Language;
using System.Reflection;
using Microsoft.Azure.Commands.ResourceManager.Cmdlets.Extensions;
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;

namespace Microsoft.Azure.Commands.ResourceManager.Cmdlets.Json
{
    public static class PSJsonSerializer
    {
        public struct SerializeContext
        {
            public SerializeContext(int maxDepth)
            {
                this.MaxDepth = maxDepth;
            }

            public int MaxDepth { get; }
        }

        public static string Serialize(object value)
        {
            var context = new SerializeContext(1024);

            return Serialize(value, context);
        }

        public static string Serialize(object value, SerializeContext context)
        {
            try
            {
                object processed = ProcessValue(value, 0, context);

                return JsonConvert.SerializeObject(processed);
            }
            catch (OperationCanceledException)
            {
                return null;
            }
        }

        private static object ProcessValue(object value, int currentDepth, SerializeContext context)
        {
            if (value == null || value == AutomationNull.Value)
            {
                return null;
            }

            if (value is PSObject psObject)
            {
                value = psObject.BaseObject;
            }

            if (value == NullString.Value || value == DBNull.Value)
            {
                return null;
            }

            if (IsPrimitive(value))
            {
                return value;
            }

            if (value is JValue jValue)
            {
                return jValue.Value<object>();
            }

            if (value is JObject jObject)
            {
                return jObject.ToObject<Dictionary<object, object>>();
            }

            Type type = value.GetType();

            if (type.IsPrimitive)
            {
                return value;
            }

            if (type.IsEnum)
            {
                // Win8:378368 Enums based on System.Int64 or System.UInt64 are not JSON-serializable
                // because JavaScript does not support the necessary precision.
                Type enumUnderlyingType = Enum.GetUnderlyingType(value.GetType());

                return enumUnderlyingType.Equals(typeof(long)) || enumUnderlyingType.Equals(typeof(ulong))
                    ? value.ToString()
                    : value;
            }

            if (currentDepth > context.MaxDepth)
            {
                object valueToConvert = IsPurePsObject(psObject) ? psObject : value;

                return LanguagePrimitives.ConvertTo(valueToConvert, typeof(string), CultureInfo.InvariantCulture);
            }

            if (value is IDictionary dict)
            {
                return ProcessDictionary(dict, currentDepth, context);
            }

            if (value is IEnumerable enumerable)
            {
                return ProcessEnumerable(enumerable, currentDepth, context);
            }

            return ProcessObject(value, currentDepth, context);
        }

        private static object ProcessDictionary(IDictionary dictionary, int depth, SerializeContext context)
        {
            var result = new Dictionary<string, object>(dictionary.Count);

            foreach (DictionaryEntry entry in dictionary)
            {
                if (!(entry.Key is string name))
                {
                    throw new InvalidOperationException("Non-string key in dictionary");
                }

                result.Add(name, ProcessValue(entry.Value, depth + 1, context));
            }

            return result;
        }

        private static object ProcessEnumerable(IEnumerable enumerable, int depth, SerializeContext context)
        {
            var result = new List<object>();

            foreach (object o in enumerable)
            {
                result.Add(ProcessValue(o, depth + 1, context));
            }

            return result;
        }

        private static object ProcessObject(object @object, int depth, SerializeContext context)
        {
            var result = new Dictionary<string, object>();
            Type type = @object.GetType();
            BindingFlags bindingFlags = BindingFlags.Public | BindingFlags.Instance;

            foreach (FieldInfo info in type.GetFields(bindingFlags).Where(HasNoJsonIgnoreAttribute))
            {
                object value;

                try
                {
                    value = info.GetValue(@object);
                }
                catch (Exception)
                {
                    value = null;
                }

                result.Add(info.Name, ProcessValue(value, depth + 1, context));
            }

            foreach (PropertyInfo info in type.GetProperties(bindingFlags).Where(HasNoJsonIgnoreAttribute))
            {
                MethodInfo getMethod = info.GetGetMethod();

                if (getMethod != null && getMethod.GetParameters().Length == 0)
                {
                    object value;

                    try
                    {
                        value = getMethod.Invoke(@object, Array.Empty<object>());
                    }
                    catch (Exception)
                    {
                        value = null;
                    }

                    result.Add(info.Name, ProcessValue(value, depth + 1, context));
                }
            }

            return result;
        }

        private static bool IsPurePsObject(PSObject psObject)
        {
            return psObject != null && !(psObject.BaseObject is PSCustomObject);
        }

        private static bool IsPrimitive(object value)
        {
            return value is string
                || value is char
                || value is bool
                || value is DateTime
                || value is DateTimeOffset
                || value is Guid
                || value is Uri
                || value is double
                || value is float
                || value is decimal;
        }

        private static bool HasNoJsonIgnoreAttribute(MemberInfo info)
        {
            return !info.IsDefined(typeof(JsonIgnoreAttribute), true);
        }
    }
}
---- Semantic diagnostics *before* transformation ----
/Users/runner/work/1/s/src/Resources/ResourceManager/Json/PSJsonSerializer.cs(24,1): hidden CS8019: Unnecessary using directive.
---- Semantic diagnostics *after* transformation ----
/Users/runner/work/1/s/src/Resources/ResourceManager/Json/PSJsonSerializer.cs(115,56): error CS0165: Use of unassigned local variable 'psObject',/Users/runner/work/1/s/src/Resources/ResourceManager/Json/PSJsonSerializer.cs(24,1): hidden CS8019: Unnecessary using directive.
######################################################################


######################################################################
Nr: 8 - UsePatternMatchingRewriterR8
Filepath: /Users/runner/work/1/s/src/Storage/Storage/Common/StorageCloudCmdletBase.cs
Description: Error: The created Syntax Tree is semantically incorrect.
------------------------------------------------------------------------
---- Original Tree ----
using Microsoft.Azure.Commands.Common.Authentication.Abstractions;
// TODO: Remove IfDef
#if NETSTANDARD
using Microsoft.Azure.Commands.Common.Authentication.Abstractions.Core;
#endif
using Microsoft.WindowsAzure.Commands.Common;
using Microsoft.WindowsAzure.Commands.Common.Storage;
using Microsoft.WindowsAzure.Commands.Common.Storage.ResourceModel;
using Microsoft.WindowsAzure.Commands.Storage.Adapters;
using Microsoft.WindowsAzure.Commands.Storage.File;
using Microsoft.WindowsAzure.Commands.Utilities.Common;
using Microsoft.Azure.Storage;
using Microsoft.Azure.Storage.Blob;
using Microsoft.Azure.Storage.File;
using Microsoft.Azure.Storage.Queue;
using XTable= Microsoft.Azure.Cosmos.Table;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Globalization;
using System.Management.Automation;
using System.Net;
using System.Threading;
using System.Threading.Tasks;

namespace Microsoft.WindowsAzure.Commands.Storage.Common
{

    /// <summary>
    /// Base cmdlet for all storage cmdlet that works with cloud
    /// </summary>
    public class StorageCloudCmdletBase<T> : AzureDataCmdlet
        where T : class
    {
        [Parameter(HelpMessage = "Azure Storage Context Object",
            ValueFromPipeline = true, ValueFromPipelineByPropertyName = true)]
        public virtual IStorageContext Context { get; set; }

        [Parameter(HelpMessage = "The server time out for each request in seconds.")]
        [Alias("ServerTimeoutPerRequestInSeconds")]
        public virtual int? ServerTimeoutPerRequest { get; set; }

        [Parameter(HelpMessage = "The client side maximum execution time for each request in seconds.")]
        [Alias("ClientTimeoutPerRequestInSeconds")]
        public virtual int? ClientTimeoutPerRequest { get; set; }

        /// <summary>
        /// Gets or sets the global profile for ARM cmdlets.
        /// </summary>
        [Parameter(Mandatory = false, HelpMessage = "The credentials, account, tenant, and subscription used for communication with Azure.")]
        [Alias("AzureRmContext", "AzureCredential")]
        public IAzureContextContainer DefaultProfile { get; set; }

        /// <summary>
        /// Amount of concurrent async tasks to run per available core.
        /// </summary>
        private int _concurrentTaskCount = 10;

        /// <summary>
        /// Amount of concurrent async tasks to run per available core.
        /// </summary>
        [Parameter(HelpMessage = "The total amount of concurrent async tasks. The default value is 10.")]
        [ValidateNotNull]
        [ValidateRange(1, 1000)]
        public virtual int? ConcurrentTaskCount
        {
            get { return _concurrentTaskCount; }
            set
            {
                var count = value.Value;

                if (count > 0)
                {
                    _concurrentTaskCount = count;
                }
            }
        }

        public T Channel
        {
            get;
            set;
        }

        protected void InitChannelCurrentSubscription()
        {
            InitChannelCurrentSubscription(false);
        }

        protected void DoInitChannelCurrentSubscription(bool force)
        {
            if (DefaultContext.Subscription == null)
            {
                throw new ArgumentException("No default subscription was specified please log in to Azure and try again.");
            }

            if (DefaultContext.Account == null)
            {
                throw new ArgumentException("No account was specified.  Please log in to Azure and try again.");
            }

            if (Channel == null || force)
            {
                Channel = CreateChannel();
            }
        }

        protected override void ProcessRecord()
        {
            Validate.ValidateInternetConnection();
            InitChannelCurrentSubscription();
            base.ProcessRecord();
        }


        /// <summary>
        /// Gets or sets a flag indicating whether CreateChannel should share
        /// the command's current Channel when asking for a new one.  This is
        /// only used for testing.
        /// </summary>
        public bool ShareChannel { get; set; }

        protected virtual T CreateChannel()
        {
            return null;
        }

        /// <summary>
        /// Cancellation Token Source
        /// </summary>
        protected readonly CancellationTokenSource _cancellationTokenSource = new CancellationTokenSource();
        protected CancellationToken CmdletCancellationToken;

        /// <summary>
        /// whether stop processing
        /// </summary>
        protected bool ShouldForceQuit { get { return _cancellationTokenSource.Token.IsCancellationRequested; } }

        /// <summary>
        /// Enable or disable multithread
        ///     If the storage cmdlet want to disable the multithread feature,
        ///     it can disable when construct and beginProcessing
        /// </summary>
        protected bool EnableMultiThread
        {
            get { return _enableMultiThread; }
            set { _enableMultiThread = value; }
        }
        protected bool _enableMultiThread = true;

        internal TaskOutputStream OutputStream;

        //CountDownEvent wait time out and output time interval.
        protected const int WaitTimeout = 1000;//ms

        /// <summary>
        /// Summary progress record on multithread task
        /// </summary>
        protected ProgressRecord summaryRecord;

        private LimitedConcurrencyTaskScheduler _taskScheduler;

        /// <summary>
        /// Cmdlet operation context.
        /// </summary>
        protected OperationContext OperationContext
        {
            get
            {
                return CmdletOperationContext.GetStorageOperationContext(WriteDebugLog);
            }
        }

        /// <summary>
        /// Cmdlet operation context.
        /// </summary>
        protected XTable.OperationContext TableOperationContext
        {
            get
            {
                return CmdletOperationContext.GetStorageTableOperationContext(WriteDebugLog);
            }
        }

        /// <summary>
        /// Write log in debug mode
        /// </summary>
        /// <param name="msg">Debug log</param>
        internal void WriteDebugLog(string msg)
        {
            WriteDebugWithTimestamp(msg);
        }

        /// <summary>
        /// Get a request options
        /// </summary>
        /// <param name="type">Service type</param>
        /// <returns>Request options</returns>
        public IRequestOptions GetRequestOptions(StorageServiceType type)
        {
            IRequestOptions options;

            switch (type)
            {
                case StorageServiceType.Blob:
                    options = new BlobRequestOptions();
                    break;
                case StorageServiceType.Queue:
                    options = new QueueRequestOptions();
                    break;
                case StorageServiceType.File:
                    options = new FileRequestOptions();
                    break;
                default:
                    throw new ArgumentException(Resources.InvalidStorageServiceType, "type");
            }

            if (ServerTimeoutPerRequest.HasValue)
            {
                options.ServerTimeout = ConvertToTimeSpan(ServerTimeoutPerRequest.Value);
            }

            if (ClientTimeoutPerRequest.HasValue)
            {
                options.MaximumExecutionTime = ConvertToTimeSpan(ClientTimeoutPerRequest.Value);
            }

            return options;
        }


        /// <summary>
        /// Get a request options
        /// </summary>
        /// <param name="type">Service type</param>
        /// <returns>Request options</returns>
        public XTable.TableRequestOptions GetTableRequestOptions()
        {
            XTable.TableRequestOptions options = new XTable.TableRequestOptions();

            if (ServerTimeoutPerRequest.HasValue)
            {
                options.ServerTimeout = ConvertToTimeSpan(ServerTimeoutPerRequest.Value);
            }

            if (ClientTimeoutPerRequest.HasValue)
            {
                options.MaximumExecutionTime = ConvertToTimeSpan(ClientTimeoutPerRequest.Value);
            }

            return options;
        }

        /// <summary>
        /// Get cloud storage account 
        /// </summary>
        /// <returns>Storage account</returns>
        internal AzureStorageContext GetCmdletStorageContext()
        {
            var context = GetCmdletStorageContext(Context);
            Context = context;
            return context;
        }

        internal AzureStorageContext GetCmdletStorageContext(IStorageContext inContext)
        {
            var context = inContext as AzureStorageContext;
            if (context == null && inContext != null)
            {
                context = new AzureStorageContext(inContext.GetCloudStorageAccount(), null, DefaultContext, WriteDebug);
            }

            if (context != null)
            {
                WriteDebugLog(String.Format(Resources.UseStorageAccountFromContext, context.StorageAccountName));
            }
            else
            {
                CloudStorageAccount account = null;
                string storageAccount;
                try
                {
                    if (TryGetStorageAccount(DefaultProfile, out storageAccount)
                        || TryGetStorageAccount(RMProfile, out storageAccount)
                        || TryGetStorageAccount(SMProfile, out storageAccount)
                        || TryGetStorageAccountFromEnvironmentVariable(out storageAccount))
                    {
                        account = GetStorageAccountFromConnectionString(storageAccount);
                    }
                    else
                    {
                        throw new InvalidOperationException("Could not get the storage context.  Please pass in a storage context or set the current storage context.");
                    }
                }
                catch (Exception e)
                {
                    //stop the pipeline if storage account is missed.
                    WriteTerminatingError(e);
                }

                //Set the storage context and use it in pipeline
                context = new AzureStorageContext(account, null, DefaultContext, WriteDebug);
            }

            return context;
        }

        /// <summary>
        /// Output azure storage object with storage context
        /// </summary>
        /// <param name="item">An AzureStorageBase object</param>
        internal void WriteObjectWithStorageContext(AzureStorageBase item)
        {
            item.Context = Context;

            WriteObject(item);
        }

        /// <summary>
        /// Init channel with or without subscription in storage cmdlet
        /// </summary>
        /// <param name="force">Force to create a new channel</param>
        protected virtual void InitChannelCurrentSubscription(bool force)
        {
            //Create storage management channel
            CreateChannel();
        }

        /// <summary>
        /// Get the current storage account
        /// </summary>
        /// <returns>True if it need to init the service channel, otherwise false</returns>
        internal virtual bool TryGetStorageAccount(IAzureContextContainer profile, out string account)
        {
            account = null;
            //Storage Context is empty and have already set the current storage account in subscription
            if (Context != null || profile?.DefaultContext?.Subscription == null) return false;

            account = profile.DefaultContext.GetCurrentStorageAccountConnectionString();
            var result = !string.IsNullOrWhiteSpace(account);

            return result;
        }

        /// <summary>
        /// Output azure storage object with storage context
        /// </summary>
        /// <param name="itemList">An enumerable collection fo azurestorage object</param>
        internal void WriteObjectWithStorageContext(IEnumerable<AzureStorageBase> itemList)
        {
            if (null == itemList)
            {
                return;
            }

            foreach (var item in itemList)
            {
                WriteObjectWithStorageContext(item);
            }
        }

        /// <summary>
        /// Convert the timeout in seconds into objects of TimeSpan. Notice
        /// that xSCL does not accept a TimeSpan whose TotalMilliseconds
        /// property exceeded int.MaxValue (2147483647) so if user specified a
        /// value beyond that, we will use Infinite instead.
        /// </summary>
        /// <param name="timeoutInSeconds"></param>
        /// <returns></returns>
        private static TimeSpan? ConvertToTimeSpan(int timeoutInSeconds)
        {
            if (timeoutInSeconds > 0)
            {
                var timeSpan = TimeSpan.FromSeconds(timeoutInSeconds);
                if ((long)timeSpan.TotalMilliseconds > int.MaxValue)
                {
                    return null;
                }

                return timeSpan;
            }

            if (timeoutInSeconds == Timeout.Infinite)
            {
                return null;
            }

            throw new ArgumentOutOfRangeException(string.Format(CultureInfo.CurrentCulture, Resources.InvalidTimeoutValue, timeoutInSeconds));
        }


        /// <summary>
        /// Get storage account from a connection string
        /// </summary>
        /// <returns>Cloud storage account</returns>
        private static bool TryGetStorageAccountFromEnvironmentVariable(out string connectionString)
        {
            connectionString = Environment.GetEnvironmentVariable(Resources.EnvConnectionString);

            return !String.IsNullOrEmpty(connectionString);
        }

        private CloudStorageAccount GetStorageAccountFromConnectionString(string connectionString)
        {
            if (String.IsNullOrEmpty(connectionString))
            {
                throw new ArgumentException(Resources.DefaultStorageCredentialsNotFound);
            }

            WriteDebugLog(Resources.GetStorageAccountFromEnvironmentVariable);

            try
            {
                return CloudStorageAccount.Parse(connectionString);
            }
            catch
            {
                WriteVerboseWithTimestamp(Resources.CannotGetStorageAccountFromEnvironmentVariable);
                throw;
            }
        }

        /// <summary>
        /// Write error with category and identifier
        /// </summary>
        /// <param name="e">an exception object</param>
        protected override void WriteExceptionError(Exception e)
        {
            Debug.Assert(e != null, Resources.ExceptionCannotEmpty);

            if (e is StorageException storageException)
            {
                e = storageException.RepackStorageException();
            }
            else if (e is AzureStorageFileException azureStorageFileException)
            {
                WriteError(azureStorageFileException.GetErrorRecord());
                return;
            }

            WriteError(new ErrorRecord(e, e.GetType().Name, GetExceptionErrorCategory(e), null));
        }

        /// <summary>
        /// Get the error category for specified exception
        /// </summary>
        /// <param name="e">Exception object</param>
        /// <returns>Error category</returns>
        protected ErrorCategory GetExceptionErrorCategory(Exception e)
        {
            var errorCategory = ErrorCategory.CloseError; //default error category

            if (e is ArgumentException)
            {
                errorCategory = ErrorCategory.InvalidArgument;
            }
            else if (e is ResourceNotFoundException)
            {
                errorCategory = ErrorCategory.ObjectNotFound;
            }
            else if (e is ResourceAlreadyExistException)
            {
                errorCategory = ErrorCategory.ResourceExists;
            }

            return errorCategory;
        }

        /// <summary>
        /// write terminating error
        /// </summary>
        /// <param name="e">exception object</param>
        protected void WriteTerminatingError(Exception e)
        {
            Debug.Assert(e != null, Resources.ExceptionCannotEmpty);
            ThrowTerminatingError(new ErrorRecord(e, e.GetType().Name, GetExceptionErrorCategory(e), null));
        }

        /// <summary>
        /// Get the concurrency value
        /// </summary>
        /// <returns>The max number of concurrent task/rest call</returns>
        protected int GetCmdletConcurrency()
        {
            return _concurrentTaskCount;
        }

        /// <summary>
        /// Configure Service Point
        /// </summary>
        private void ConfigureServicePointManager()
        {
            var maxConcurrency = 1000;
            var cmdletConcurrency = GetCmdletConcurrency();
            maxConcurrency = Math.Max(maxConcurrency, cmdletConcurrency);
            //Set the default connection limit to a very high value and control the concurrency with LimitedConcurrencyTaskScheduler.
            //If so, there is no need to set the ConnectionLimit for each ServicePoint.
            ServicePointManager.DefaultConnectionLimit = maxConcurrency;
            ServicePointManager.Expect100Continue = false;
            ServicePointManager.UseNagleAlgorithm = true;
        }

        private void TaskErrorHandler(object sender, TaskExceptionEventArgs args)
        {
            OutputStream?.WriteError(args.TaskId, args.Exception);
        }

        /// <summary>
        /// Init the multithread run time resource
        /// </summary>
        internal void InitMutltiThreadResources()
        {
            _taskScheduler = new LimitedConcurrencyTaskScheduler(GetCmdletConcurrency(), CmdletCancellationToken);
            OutputStream = new TaskOutputStream(CmdletCancellationToken)
            {
                OutputWriter = WriteObject,
                ErrorWriter = WriteExceptionError,
                ProgressWriter = WriteProgress,
                VerboseWriter = WriteVerbose,
                DebugWriter = WriteDebugWithTimestamp,
                ConfirmWriter = ShouldProcess,
                TaskStatusQueryer = _taskScheduler.IsTaskCompleted
            };
            _taskScheduler.OnError += TaskErrorHandler;

            const int summaryRecordId = 0;
            var summary = String.Format(Resources.TransmitActiveSummary, _taskScheduler.TotalTaskCount,
                _taskScheduler.FinishedTaskCount, _taskScheduler.FailedTaskCount, _taskScheduler.ActiveTaskCount);
            var activity = string.Format(Resources.TransmitActivity, MyInvocation.MyCommand);
            summaryRecord = new ProgressRecord(summaryRecordId, activity, summary);
            CmdletCancellationToken.Register(() => OutputStream.CancelConfirmRequest());
        }

        /// <summary>
        /// Set up MultiThread environment
        /// </summary>
        internal void SetUpMultiThreadEnvironment()
        {
            ConfigureServicePointManager();
            InitMutltiThreadResources();
        }

        /// <summary>
        /// End processing in multi thread environment
        /// </summary>
        internal void MultiThreadEndProcessing()
        {
            do
            {
                WriteTransmitSummaryStatus();
                //When task add to datamovement library, it will immediately start.
                //So, we'd better output status at first.
                OutputStream.Output();
            }
            while (!_taskScheduler.WaitForComplete(WaitTimeout, CmdletCancellationToken));

            CloseSummaryProgressBar();
            OutputStream.Output();
        }

        protected void WriteTaskSummary()
        {
            WriteVerbose(String.Format(Resources.TransferSummary, _taskScheduler.TotalTaskCount,
                _taskScheduler.FinishedTaskCount, _taskScheduler.FailedTaskCount, _taskScheduler.ActiveTaskCount));
        }

        /// <summary>
        /// Close the summary progress bar, otherwise it'll cause a very bad performance on output.
        /// </summary>
        private void CloseSummaryProgressBar()
        {
            OutputStream.DisableProgressBar = true;
            summaryRecord.RecordType = ProgressRecordType.Completed;
            WriteProgress(summaryRecord);
        }

        internal void RunTask(Func<long, Task> taskGenerator)
        {
            _taskScheduler.RunTask(taskGenerator);
        }

        /// <summary>
        /// Write transmit summary status
        /// </summary>
        protected virtual void WriteTransmitSummaryStatus()
        {
            var summary = String.Format(Resources.TransmitActiveSummary, _taskScheduler.TotalTaskCount,
                _taskScheduler.FinishedTaskCount, _taskScheduler.FailedTaskCount, _taskScheduler.ActiveTaskCount);
            summaryRecord.StatusDescription = summary;
            WriteProgress(summaryRecord);
        }

        /// <summary>
        /// Cmdlet begin process
        /// </summary>
        protected override void BeginProcessing()
        {
            CmdletOperationContext.Init();
            CmdletCancellationToken = _cancellationTokenSource.Token;
            WriteDebugLog(String.Format(Resources.InitOperationContextLog, GetType().Name, CmdletOperationContext.ClientRequestId));

            if (_enableMultiThread)
            {
                SetUpMultiThreadEnvironment();
            }

            OperationContext.GlobalSendingRequest +=
                (sender, args) =>
                {
                    //https://github.com/Azure/azure-storage-net/issues/658
                };

            base.BeginProcessing();
        }

        /// <summary>
        /// End processing
        /// </summary>
        protected override void EndProcessing()
        {
            if (_enableMultiThread)
            {
                MultiThreadEndProcessing();
            }

            var timespan = CmdletOperationContext.GetRunningMilliseconds();
            var message = string.Format(Resources.EndProcessingLog,
                GetType().Name, CmdletOperationContext.StartedRemoteCallCounter, CmdletOperationContext.FinishedRemoteCallCounter, timespan, CmdletOperationContext.ClientRequestId);
            WriteDebugLog(message);
            base.EndProcessing();
        }

        /// <summary>
        /// stop processing
        /// time-consuming operation should work with ShouldForceQuit
        /// </summary>
        protected override void StopProcessing()
        {
            //ctrl + c and etc
            _cancellationTokenSource.Cancel();
            base.StopProcessing();
        }

        /// <summary>
        /// true if FIPS policy is enabled on the current machine
        /// </summary>
        public static bool fipsEnabled { get; } = IsFIPSEnabled();

        internal static bool IsFIPSEnabled()
        {
            try
            {
                System.Security.Cryptography.MD5.Create();
                return false;
            }
            catch (System.Reflection.TargetInvocationException)
            {
                return true;
            }
        }
    }
}

---- Transformed Tree ----
using Microsoft.Azure.Commands.Common.Authentication.Abstractions;
// TODO: Remove IfDef
#if NETSTANDARD
using Microsoft.Azure.Commands.Common.Authentication.Abstractions.Core;
#endif
using Microsoft.WindowsAzure.Commands.Common;
using Microsoft.WindowsAzure.Commands.Common.Storage;
using Microsoft.WindowsAzure.Commands.Common.Storage.ResourceModel;
using Microsoft.WindowsAzure.Commands.Storage.Adapters;
using Microsoft.WindowsAzure.Commands.Storage.File;
using Microsoft.WindowsAzure.Commands.Utilities.Common;
using Microsoft.Azure.Storage;
using Microsoft.Azure.Storage.Blob;
using Microsoft.Azure.Storage.File;
using Microsoft.Azure.Storage.Queue;
using XTable= Microsoft.Azure.Cosmos.Table;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Globalization;
using System.Management.Automation;
using System.Net;
using System.Threading;
using System.Threading.Tasks;

namespace Microsoft.WindowsAzure.Commands.Storage.Common
{

    /// <summary>
    /// Base cmdlet for all storage cmdlet that works with cloud
    /// </summary>
    public class StorageCloudCmdletBase<T> : AzureDataCmdlet
        where T : class
    {
        [Parameter(HelpMessage = "Azure Storage Context Object",
            ValueFromPipeline = true, ValueFromPipelineByPropertyName = true)]
        public virtual IStorageContext Context { get; set; }

        [Parameter(HelpMessage = "The server time out for each request in seconds.")]
        [Alias("ServerTimeoutPerRequestInSeconds")]
        public virtual int? ServerTimeoutPerRequest { get; set; }

        [Parameter(HelpMessage = "The client side maximum execution time for each request in seconds.")]
        [Alias("ClientTimeoutPerRequestInSeconds")]
        public virtual int? ClientTimeoutPerRequest { get; set; }

        /// <summary>
        /// Gets or sets the global profile for ARM cmdlets.
        /// </summary>
        [Parameter(Mandatory = false, HelpMessage = "The credentials, account, tenant, and subscription used for communication with Azure.")]
        [Alias("AzureRmContext", "AzureCredential")]
        public IAzureContextContainer DefaultProfile { get; set; }

        /// <summary>
        /// Amount of concurrent async tasks to run per available core.
        /// </summary>
        private int _concurrentTaskCount = 10;

        /// <summary>
        /// Amount of concurrent async tasks to run per available core.
        /// </summary>
        [Parameter(HelpMessage = "The total amount of concurrent async tasks. The default value is 10.")]
        [ValidateNotNull]
        [ValidateRange(1, 1000)]
        public virtual int? ConcurrentTaskCount
        {
            get { return _concurrentTaskCount; }
            set
            {
                var count = value.Value;

                if (count > 0)
                {
                    _concurrentTaskCount = count;
                }
            }
        }

        public T Channel
        {
            get;
            set;
        }

        protected void InitChannelCurrentSubscription()
        {
            InitChannelCurrentSubscription(false);
        }

        protected void DoInitChannelCurrentSubscription(bool force)
        {
            if (DefaultContext.Subscription == null)
            {
                throw new ArgumentException("No default subscription was specified please log in to Azure and try again.");
            }

            if (DefaultContext.Account == null)
            {
                throw new ArgumentException("No account was specified.  Please log in to Azure and try again.");
            }

            if (Channel == null || force)
            {
                Channel = CreateChannel();
            }
        }

        protected override void ProcessRecord()
        {
            Validate.ValidateInternetConnection();
            InitChannelCurrentSubscription();
            base.ProcessRecord();
        }


        /// <summary>
        /// Gets or sets a flag indicating whether CreateChannel should share
        /// the command's current Channel when asking for a new one.  This is
        /// only used for testing.
        /// </summary>
        public bool ShareChannel { get; set; }

        protected virtual T CreateChannel()
        {
            return null;
        }

        /// <summary>
        /// Cancellation Token Source
        /// </summary>
        protected readonly CancellationTokenSource _cancellationTokenSource = new CancellationTokenSource();
        protected CancellationToken CmdletCancellationToken;

        /// <summary>
        /// whether stop processing
        /// </summary>
        protected bool ShouldForceQuit { get { return _cancellationTokenSource.Token.IsCancellationRequested; } }

        /// <summary>
        /// Enable or disable multithread
        ///     If the storage cmdlet want to disable the multithread feature,
        ///     it can disable when construct and beginProcessing
        /// </summary>
        protected bool EnableMultiThread
        {
            get { return _enableMultiThread; }
            set { _enableMultiThread = value; }
        }
        protected bool _enableMultiThread = true;

        internal TaskOutputStream OutputStream;

        //CountDownEvent wait time out and output time interval.
        protected const int WaitTimeout = 1000;//ms

        /// <summary>
        /// Summary progress record on multithread task
        /// </summary>
        protected ProgressRecord summaryRecord;

        private LimitedConcurrencyTaskScheduler _taskScheduler;

        /// <summary>
        /// Cmdlet operation context.
        /// </summary>
        protected OperationContext OperationContext
        {
            get
            {
                return CmdletOperationContext.GetStorageOperationContext(WriteDebugLog);
            }
        }

        /// <summary>
        /// Cmdlet operation context.
        /// </summary>
        protected XTable.OperationContext TableOperationContext
        {
            get
            {
                return CmdletOperationContext.GetStorageTableOperationContext(WriteDebugLog);
            }
        }

        /// <summary>
        /// Write log in debug mode
        /// </summary>
        /// <param name="msg">Debug log</param>
        internal void WriteDebugLog(string msg)
        {
            WriteDebugWithTimestamp(msg);
        }

        /// <summary>
        /// Get a request options
        /// </summary>
        /// <param name="type">Service type</param>
        /// <returns>Request options</returns>
        public IRequestOptions GetRequestOptions(StorageServiceType type)
        {
            IRequestOptions options;

            switch (type)
            {
                case StorageServiceType.Blob:
                    options = new BlobRequestOptions();
                    break;
                case StorageServiceType.Queue:
                    options = new QueueRequestOptions();
                    break;
                case StorageServiceType.File:
                    options = new FileRequestOptions();
                    break;
                default:
                    throw new ArgumentException(Resources.InvalidStorageServiceType, "type");
            }

            if (ServerTimeoutPerRequest.HasValue)
            {
                options.ServerTimeout = ConvertToTimeSpan(ServerTimeoutPerRequest.Value);
            }

            if (ClientTimeoutPerRequest.HasValue)
            {
                options.MaximumExecutionTime = ConvertToTimeSpan(ClientTimeoutPerRequest.Value);
            }

            return options;
        }


        /// <summary>
        /// Get a request options
        /// </summary>
        /// <param name="type">Service type</param>
        /// <returns>Request options</returns>
        public XTable.TableRequestOptions GetTableRequestOptions()
        {
            XTable.TableRequestOptions options = new XTable.TableRequestOptions();

            if (ServerTimeoutPerRequest.HasValue)
            {
                options.ServerTimeout = ConvertToTimeSpan(ServerTimeoutPerRequest.Value);
            }

            if (ClientTimeoutPerRequest.HasValue)
            {
                options.MaximumExecutionTime = ConvertToTimeSpan(ClientTimeoutPerRequest.Value);
            }

            return options;
        }

        /// <summary>
        /// Get cloud storage account 
        /// </summary>
        /// <returns>Storage account</returns>
        internal AzureStorageContext GetCmdletStorageContext()
        {
            var context = GetCmdletStorageContext(Context);
            Context = context;
            return context;
        }

        internal AzureStorageContext GetCmdletStorageContext(IStorageContext inContext)
        {
            if (context == null && inContext != null)
            {
                context = new AzureStorageContext(inContext.GetCloudStorageAccount(), null, DefaultContext, WriteDebug);
            }

            if (inContext is AzureStorageContext context)
            {
                WriteDebugLog(String.Format(Resources.UseStorageAccountFromContext, context.StorageAccountName));
            }
            else
            {
                CloudStorageAccount account = null;
                string storageAccount;
                try
                {
                    if (TryGetStorageAccount(DefaultProfile, out storageAccount)
                        || TryGetStorageAccount(RMProfile, out storageAccount)
                        || TryGetStorageAccount(SMProfile, out storageAccount)
                        || TryGetStorageAccountFromEnvironmentVariable(out storageAccount))
                    {
                        account = GetStorageAccountFromConnectionString(storageAccount);
                    }
                    else
                    {
                        throw new InvalidOperationException("Could not get the storage context.  Please pass in a storage context or set the current storage context.");
                    }
                }
                catch (Exception e)
                {
                    //stop the pipeline if storage account is missed.
                    WriteTerminatingError(e);
                }

                //Set the storage context and use it in pipeline
                context = new AzureStorageContext(account, null, DefaultContext, WriteDebug);
            }

            return context;
        }

        /// <summary>
        /// Output azure storage object with storage context
        /// </summary>
        /// <param name="item">An AzureStorageBase object</param>
        internal void WriteObjectWithStorageContext(AzureStorageBase item)
        {
            item.Context = Context;

            WriteObject(item);
        }

        /// <summary>
        /// Init channel with or without subscription in storage cmdlet
        /// </summary>
        /// <param name="force">Force to create a new channel</param>
        protected virtual void InitChannelCurrentSubscription(bool force)
        {
            //Create storage management channel
            CreateChannel();
        }

        /// <summary>
        /// Get the current storage account
        /// </summary>
        /// <returns>True if it need to init the service channel, otherwise false</returns>
        internal virtual bool TryGetStorageAccount(IAzureContextContainer profile, out string account)
        {
            account = null;
            //Storage Context is empty and have already set the current storage account in subscription
            if (Context != null || profile?.DefaultContext?.Subscription == null) return false;

            account = profile.DefaultContext.GetCurrentStorageAccountConnectionString();
            var result = !string.IsNullOrWhiteSpace(account);

            return result;
        }

        /// <summary>
        /// Output azure storage object with storage context
        /// </summary>
        /// <param name="itemList">An enumerable collection fo azurestorage object</param>
        internal void WriteObjectWithStorageContext(IEnumerable<AzureStorageBase> itemList)
        {
            if (null == itemList)
            {
                return;
            }

            foreach (var item in itemList)
            {
                WriteObjectWithStorageContext(item);
            }
        }

        /// <summary>
        /// Convert the timeout in seconds into objects of TimeSpan. Notice
        /// that xSCL does not accept a TimeSpan whose TotalMilliseconds
        /// property exceeded int.MaxValue (2147483647) so if user specified a
        /// value beyond that, we will use Infinite instead.
        /// </summary>
        /// <param name="timeoutInSeconds"></param>
        /// <returns></returns>
        private static TimeSpan? ConvertToTimeSpan(int timeoutInSeconds)
        {
            if (timeoutInSeconds > 0)
            {
                var timeSpan = TimeSpan.FromSeconds(timeoutInSeconds);
                if ((long)timeSpan.TotalMilliseconds > int.MaxValue)
                {
                    return null;
                }

                return timeSpan;
            }

            if (timeoutInSeconds == Timeout.Infinite)
            {
                return null;
            }

            throw new ArgumentOutOfRangeException(string.Format(CultureInfo.CurrentCulture, Resources.InvalidTimeoutValue, timeoutInSeconds));
        }


        /// <summary>
        /// Get storage account from a connection string
        /// </summary>
        /// <returns>Cloud storage account</returns>
        private static bool TryGetStorageAccountFromEnvironmentVariable(out string connectionString)
        {
            connectionString = Environment.GetEnvironmentVariable(Resources.EnvConnectionString);

            return !String.IsNullOrEmpty(connectionString);
        }

        private CloudStorageAccount GetStorageAccountFromConnectionString(string connectionString)
        {
            if (String.IsNullOrEmpty(connectionString))
            {
                throw new ArgumentException(Resources.DefaultStorageCredentialsNotFound);
            }

            WriteDebugLog(Resources.GetStorageAccountFromEnvironmentVariable);

            try
            {
                return CloudStorageAccount.Parse(connectionString);
            }
            catch
            {
                WriteVerboseWithTimestamp(Resources.CannotGetStorageAccountFromEnvironmentVariable);
                throw;
            }
        }

        /// <summary>
        /// Write error with category and identifier
        /// </summary>
        /// <param name="e">an exception object</param>
        protected override void WriteExceptionError(Exception e)
        {
            Debug.Assert(e != null, Resources.ExceptionCannotEmpty);

            if (e is StorageException storageException)
            {
                e = storageException.RepackStorageException();
            }
            else if (e is AzureStorageFileException azureStorageFileException)
            {
                WriteError(azureStorageFileException.GetErrorRecord());
                return;
            }

            WriteError(new ErrorRecord(e, e.GetType().Name, GetExceptionErrorCategory(e), null));
        }

        /// <summary>
        /// Get the error category for specified exception
        /// </summary>
        /// <param name="e">Exception object</param>
        /// <returns>Error category</returns>
        protected ErrorCategory GetExceptionErrorCategory(Exception e)
        {
            var errorCategory = ErrorCategory.CloseError; //default error category

            if (e is ArgumentException)
            {
                errorCategory = ErrorCategory.InvalidArgument;
            }
            else if (e is ResourceNotFoundException)
            {
                errorCategory = ErrorCategory.ObjectNotFound;
            }
            else if (e is ResourceAlreadyExistException)
            {
                errorCategory = ErrorCategory.ResourceExists;
            }

            return errorCategory;
        }

        /// <summary>
        /// write terminating error
        /// </summary>
        /// <param name="e">exception object</param>
        protected void WriteTerminatingError(Exception e)
        {
            Debug.Assert(e != null, Resources.ExceptionCannotEmpty);
            ThrowTerminatingError(new ErrorRecord(e, e.GetType().Name, GetExceptionErrorCategory(e), null));
        }

        /// <summary>
        /// Get the concurrency value
        /// </summary>
        /// <returns>The max number of concurrent task/rest call</returns>
        protected int GetCmdletConcurrency()
        {
            return _concurrentTaskCount;
        }

        /// <summary>
        /// Configure Service Point
        /// </summary>
        private void ConfigureServicePointManager()
        {
            var maxConcurrency = 1000;
            var cmdletConcurrency = GetCmdletConcurrency();
            maxConcurrency = Math.Max(maxConcurrency, cmdletConcurrency);
            //Set the default connection limit to a very high value and control the concurrency with LimitedConcurrencyTaskScheduler.
            //If so, there is no need to set the ConnectionLimit for each ServicePoint.
            ServicePointManager.DefaultConnectionLimit = maxConcurrency;
            ServicePointManager.Expect100Continue = false;
            ServicePointManager.UseNagleAlgorithm = true;
        }

        private void TaskErrorHandler(object sender, TaskExceptionEventArgs args)
        {
            OutputStream?.WriteError(args.TaskId, args.Exception);
        }

        /// <summary>
        /// Init the multithread run time resource
        /// </summary>
        internal void InitMutltiThreadResources()
        {
            _taskScheduler = new LimitedConcurrencyTaskScheduler(GetCmdletConcurrency(), CmdletCancellationToken);
            OutputStream = new TaskOutputStream(CmdletCancellationToken)
            {
                OutputWriter = WriteObject,
                ErrorWriter = WriteExceptionError,
                ProgressWriter = WriteProgress,
                VerboseWriter = WriteVerbose,
                DebugWriter = WriteDebugWithTimestamp,
                ConfirmWriter = ShouldProcess,
                TaskStatusQueryer = _taskScheduler.IsTaskCompleted
            };
            _taskScheduler.OnError += TaskErrorHandler;

            const int summaryRecordId = 0;
            var summary = String.Format(Resources.TransmitActiveSummary, _taskScheduler.TotalTaskCount,
                _taskScheduler.FinishedTaskCount, _taskScheduler.FailedTaskCount, _taskScheduler.ActiveTaskCount);
            var activity = string.Format(Resources.TransmitActivity, MyInvocation.MyCommand);
            summaryRecord = new ProgressRecord(summaryRecordId, activity, summary);
            CmdletCancellationToken.Register(() => OutputStream.CancelConfirmRequest());
        }

        /// <summary>
        /// Set up MultiThread environment
        /// </summary>
        internal void SetUpMultiThreadEnvironment()
        {
            ConfigureServicePointManager();
            InitMutltiThreadResources();
        }

        /// <summary>
        /// End processing in multi thread environment
        /// </summary>
        internal void MultiThreadEndProcessing()
        {
            do
            {
                WriteTransmitSummaryStatus();
                //When task add to datamovement library, it will immediately start.
                //So, we'd better output status at first.
                OutputStream.Output();
            }
            while (!_taskScheduler.WaitForComplete(WaitTimeout, CmdletCancellationToken));

            CloseSummaryProgressBar();
            OutputStream.Output();
        }

        protected void WriteTaskSummary()
        {
            WriteVerbose(String.Format(Resources.TransferSummary, _taskScheduler.TotalTaskCount,
                _taskScheduler.FinishedTaskCount, _taskScheduler.FailedTaskCount, _taskScheduler.ActiveTaskCount));
        }

        /// <summary>
        /// Close the summary progress bar, otherwise it'll cause a very bad performance on output.
        /// </summary>
        private void CloseSummaryProgressBar()
        {
            OutputStream.DisableProgressBar = true;
            summaryRecord.RecordType = ProgressRecordType.Completed;
            WriteProgress(summaryRecord);
        }

        internal void RunTask(Func<long, Task> taskGenerator)
        {
            _taskScheduler.RunTask(taskGenerator);
        }

        /// <summary>
        /// Write transmit summary status
        /// </summary>
        protected virtual void WriteTransmitSummaryStatus()
        {
            var summary = String.Format(Resources.TransmitActiveSummary, _taskScheduler.TotalTaskCount,
                _taskScheduler.FinishedTaskCount, _taskScheduler.FailedTaskCount, _taskScheduler.ActiveTaskCount);
            summaryRecord.StatusDescription = summary;
            WriteProgress(summaryRecord);
        }

        /// <summary>
        /// Cmdlet begin process
        /// </summary>
        protected override void BeginProcessing()
        {
            CmdletOperationContext.Init();
            CmdletCancellationToken = _cancellationTokenSource.Token;
            WriteDebugLog(String.Format(Resources.InitOperationContextLog, GetType().Name, CmdletOperationContext.ClientRequestId));

            if (_enableMultiThread)
            {
                SetUpMultiThreadEnvironment();
            }

            OperationContext.GlobalSendingRequest +=
                (sender, args) =>
                {
                    //https://github.com/Azure/azure-storage-net/issues/658
                };

            base.BeginProcessing();
        }

        /// <summary>
        /// End processing
        /// </summary>
        protected override void EndProcessing()
        {
            if (_enableMultiThread)
            {
                MultiThreadEndProcessing();
            }

            var timespan = CmdletOperationContext.GetRunningMilliseconds();
            var message = string.Format(Resources.EndProcessingLog,
                GetType().Name, CmdletOperationContext.StartedRemoteCallCounter, CmdletOperationContext.FinishedRemoteCallCounter, timespan, CmdletOperationContext.ClientRequestId);
            WriteDebugLog(message);
            base.EndProcessing();
        }

        /// <summary>
        /// stop processing
        /// time-consuming operation should work with ShouldForceQuit
        /// </summary>
        protected override void StopProcessing()
        {
            //ctrl + c and etc
            _cancellationTokenSource.Cancel();
            base.StopProcessing();
        }

        /// <summary>
        /// true if FIPS policy is enabled on the current machine
        /// </summary>
        public static bool fipsEnabled { get; } = IsFIPSEnabled();

        internal static bool IsFIPSEnabled()
        {
            try
            {
                System.Security.Cryptography.MD5.Create();
                return false;
            }
            catch (System.Reflection.TargetInvocationException)
            {
                return true;
            }
        }
    }
}

---- Semantic diagnostics *before* transformation ----
/Users/runner/work/1/s/src/Storage/Storage/Common/StorageCloudCmdletBase.cs(21,1): hidden CS8019: Unnecessary using directive.
---- Semantic diagnostics *after* transformation ----
/Users/runner/work/1/s/src/Storage/Storage/Common/StorageCloudCmdletBase.cs(281,17): error CS0841: Cannot use local variable 'context' before it is declared,/Users/runner/work/1/s/src/Storage/Storage/Common/StorageCloudCmdletBase.cs(283,17): error CS0841: Cannot use local variable 'context' before it is declared,/Users/runner/work/1/s/src/Storage/Storage/Common/StorageCloudCmdletBase.cs(21,1): hidden CS8019: Unnecessary using directive.
######################################################################


######################################################################
Nr: 9 - UsePatternMatchingRewriterR8
Filepath: /Users/runner/work/1/s/src/Synapse/Synapse/Models/SynapseAnalyticsManagementClient.cs
Description: Error: The created Syntax Tree is semantically incorrect.
------------------------------------------------------------------------
---- Original Tree ----
using Microsoft.Azure.Commands.Common.Authentication;
using Microsoft.Azure.Commands.Common.Authentication.Abstractions;
using Microsoft.Azure.Commands.Common.Exceptions;
using Microsoft.Azure.Commands.Common.Strategies;
using Microsoft.Azure.Commands.Synapse.Common;
using Microsoft.Azure.Commands.Synapse.Properties;
using Microsoft.Azure.Commands.Synapse.VulnerabilityAssessment.Model;
using Microsoft.Azure.Graph.RBAC.Version1_6.ActiveDirectory;
using Microsoft.Azure.Graph.RBAC.Version1_6.Models;
using Microsoft.Azure.Management.Internal.Resources;
using Microsoft.Azure.Management.Internal.Resources.Models;
using Microsoft.Azure.Management.Internal.Resources.Utilities.Models;
using Microsoft.Azure.Management.Monitor.Version2018_09_01;
using Microsoft.Azure.Management.Storage.Version2017_10_01;
using Microsoft.Azure.Management.Synapse;
using Microsoft.Azure.Management.Synapse.Models;
using Microsoft.Rest;
using Microsoft.Rest.Azure;
using Microsoft.Rest.Azure.OData;
using Microsoft.WindowsAzure.Commands.Utilities.Common;
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;
using System;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Management.Automation;
using System.Net;
using System.Net.Http;
using System.Reflection;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using TriggerType = Microsoft.Azure.Commands.Synapse.VulnerabilityAssessment.Model.TriggerType;
using Action = System.Action;
using ResourceIdentityType = Microsoft.Azure.Management.Synapse.Models.ResourceIdentityType;
using Microsoft.Azure.Commands.Synapse.Model;

namespace Microsoft.Azure.Commands.Synapse.Models
{
    public class SynapseAnalyticsManagementClient
    {
        public IAzureContext Context;
        private readonly Guid _subscriptionId;
        private readonly Guid _tenantId;
        private readonly SynapseManagementClient _synapseManagementClient;
        private readonly SynapseSqlV3ManagementClient _synapseSqlV3ManagementClient;
        private ActiveDirectoryClient _activeDirectoryClient;
        private ResourceManagementClient _resourceManagementClient;
        private StorageManagementClient _storageManagementClient;

        public SynapseAnalyticsManagementClient(IAzureContext context)
        {
            if (context == null)
            {
                throw new AzPSInvalidOperationException(Resources.InvalidDefaultSubscription);
            }

            Context = context;

            _subscriptionId = context.Subscription.GetId();

            _tenantId = context.Tenant.GetId();

            _synapseManagementClient = SynapseCmdletBase.CreateSynapseClient<SynapseManagementClient>(context,
                AzureEnvironment.Endpoint.ResourceManager);

            _synapseSqlV3ManagementClient = SynapseCmdletBase.CreateSynapseClient<SynapseSqlV3ManagementClient>(context,
                AzureEnvironment.Endpoint.ResourceManager);
        }

        public ActiveDirectoryClient ActiveDirectoryClient
        {
            get
            {
                if (_activeDirectoryClient == null)
                {
                    _activeDirectoryClient = new ActiveDirectoryClient(Context);
                }
                return this._activeDirectoryClient;
            }

            set { this._activeDirectoryClient = value; }
        }

        public ResourceManagementClient ResourceManagementClient
        {
            get
            {
                if (_resourceManagementClient == null)
                {
                    _resourceManagementClient = AzureSession.Instance.ClientFactory.CreateArmClient<ResourceManagementClient>(Context,
                        AzureEnvironment.Endpoint.ResourceManager);
                }
                return this._resourceManagementClient;
            }

            set { this._resourceManagementClient = value; }
        }

        public StorageManagementClient StorageManagementClient
        {
            get
            {
                if (_storageManagementClient == null)
                {
                    _storageManagementClient = AzureSession.Instance.ClientFactory.CreateArmClient<StorageManagementClient>(Context,
                        AzureEnvironment.Endpoint.ResourceManager);
                }
                return this._storageManagementClient;
            }

            set { this._storageManagementClient = value; }
        }

        #region Workspace operations

        public Workspace CreateWorkspace(string resourceGroupName, string workspaceName, Workspace createParams)
        {
            try
            {
                return _synapseManagementClient.Workspaces.CreateOrUpdate(resourceGroupName, workspaceName, createParams);
            }
            catch (ErrorContractException ex)
            {
                throw GetAzurePowerShellException(ex);
            }
        }

        public Workspace UpdateWorkspace(string resourceGroupName, string workspaceName, WorkspacePatchInfo updateParams)
        {
            try
            {
                return _synapseManagementClient.Workspaces.Update(resourceGroupName, workspaceName, updateParams);
            }
            catch (ErrorContractException ex)
            {
                throw GetAzurePowerShellException(ex);
            }
        }

        internal Workspace GetWorkspace(string resourceGroupName, string workspaceName)
        {
            try
            {
                if (string.IsNullOrEmpty(resourceGroupName))
                {
                    resourceGroupName = GetResourceGroupByWorkspaceName(workspaceName);
                }

                return _synapseManagementClient.Workspaces.Get(resourceGroupName, workspaceName);
            }
            catch (ErrorContractException ex)
            {
                throw GetAzurePowerShellException(ex);
            }
        }

        internal Workspace GetWorkspaceOrDefault(string resourceGroupName, string workspaceName)
        {
            try
            {
                return GetWorkspace(resourceGroupName, workspaceName);
            }
            catch
            {
                return null;
            }
        }

        public List<Workspace> ListWorkspaces(string resourceGroupName = null)
        {
            try
            {
                var firstPage = string.IsNullOrEmpty(resourceGroupName)
                     ? _synapseManagementClient.Workspaces.List()
                     : _synapseManagementClient.Workspaces.ListByResourceGroup(resourceGroupName);

                return ListResources(firstPage, _synapseManagementClient.Workspaces.ListNext);
            }
            catch (ErrorContractException ex)
            {
                throw GetAzurePowerShellException(ex);
            }
        }

        public void DeleteWorkspace(string resourceGroupName, string workspaceName)
        {

            if (string.IsNullOrEmpty(resourceGroupName))
            {
                resourceGroupName = GetResourceGroupByWorkspaceName(workspaceName);
            }

            if (!TestWorkspace(resourceGroupName, workspaceName))
            {
                throw new InvalidOperationException(string.Format(Properties.Resources.WorkspaceDoesNotExist, workspaceName));
            }

            try
            {
                _synapseManagementClient.Workspaces.Delete(resourceGroupName, workspaceName);
            }
            catch (CloudException ex)
            {
                if (ex.Response.StatusCode == HttpStatusCode.NotFound)
                {
                    // parent resource not found, indicates the workspace is deleted successfully.
                    // TODO: investigate why this error is thrown.
                }
                else
                {
                    throw GetAzurePowerShellException(ex);
                }
            }
        }

        public IpFirewallRuleInfo CreateOrUpdateWorkspaceFirewallRule(
            string resourceGroupName,
            string workspaceName,
            string ruleName,
            IpFirewallRuleInfo createOrUpdateParams)
        {
            try
            {
                if (string.IsNullOrEmpty(resourceGroupName))
                {
                    resourceGroupName = GetResourceGroupByWorkspaceName(workspaceName);
                }
                return _synapseManagementClient.IpFirewallRules.CreateOrUpdate(
                    resourceGroupName,
                    workspaceName,
                    ruleName,
                    createOrUpdateParams);
            }
            catch (ErrorContractException ex)
            {
                throw GetAzurePowerShellException(ex);
            }
        }

        public IpFirewallRuleInfo GetFirewallRule(string resourceGroupName, string workspaceName, string ruleName)
        {
            try
            {
                if (string.IsNullOrEmpty(resourceGroupName))
                {
                    resourceGroupName = GetResourceGroupByWorkspaceName(workspaceName);
                }

                return _synapseManagementClient.IpFirewallRules.Get(resourceGroupName, workspaceName, ruleName);
            }
            catch (ErrorContractException ex)
            {
                throw GetAzurePowerShellException(ex);
            }
        }

        public List<IpFirewallRuleInfo> ListFirewallRules(string resourceGroupName, string workspaceName)
        {
            try
            {
                if (string.IsNullOrEmpty(resourceGroupName))
                {
                    resourceGroupName = GetResourceGroupByWorkspaceName(workspaceName);
                }

                var firstPage = _synapseManagementClient.IpFirewallRules.ListByWorkspace(resourceGroupName, workspaceName);
                return ListResources(firstPage, _synapseManagementClient.IpFirewallRules.ListByWorkspaceNext);
            }
            catch
            {
                throw new AzPSResourceNotFoundCloudException(string.Format(Properties.Resources.FailedToDiscoverFirewallRuleByWorkspace, workspaceName));
            }
        }

        public void DeleteFirewallRule(string resourceGroupName, string workspaceName, string ruleName)
        {

            if (string.IsNullOrEmpty(resourceGroupName))
            {
                resourceGroupName = GetResourceGroupByWorkspaceName(workspaceName);
            }

            if (!TestWorkspace(resourceGroupName, workspaceName))
            {
                throw new InvalidOperationException(string.Format(Properties.Resources.WorkspaceDoesNotExist, workspaceName));
            }


            if (!TestFirewallRule(resourceGroupName, workspaceName, ruleName))
            {
                throw new InvalidOperationException(string.Format(Properties.Resources.FirewallRuleDoesNotExist, ruleName));
            }

            try
            {
                _synapseManagementClient.IpFirewallRules.Delete(resourceGroupName, workspaceName, ruleName);
            }
            catch (CloudException ex)
            {
                throw GetAzurePowerShellException(ex);
            }
        }

        public bool TestWorkspace(string resourceGroupName, string workspaceName)
        {
            try
            {
                GetWorkspace(resourceGroupName, workspaceName);
                return true;
            }
            catch (AzPSResourceNotFoundCloudException)
            {
                return false;
            }
        }

        public bool TestFirewallRule(string resourceGroupName, string workspaceName, string ruleName)
        {
            try
            {
                GetFirewallRule(resourceGroupName, workspaceName, ruleName);
                return true;
            }
            catch (AzPSResourceNotFoundCloudException)
            {
                return false;
            }
        }

        public string GetResourceGroupByWorkspaceName(string workspaceName)
        {
            var workspaceId = ListWorkspaces()
                    .FirstOrDefault(x => x.Name.Equals(workspaceName, StringComparison.InvariantCultureIgnoreCase))
                    ?.Id;

            if (workspaceId == null)
            {
                throw new AzPSResourceNotFoundCloudException(string.Format(Properties.Resources.FailedToDiscoverResourceGroup, workspaceName, _subscriptionId));
            }

            try
            {
                return new ResourceIdentifier(workspaceId).ResourceGroupName;
            }
            catch
            {
                throw new AzPSResourceNotFoundCloudException(string.Format(Properties.Resources.FailedToDiscoverResourceGroup, workspaceName, _subscriptionId));
            }
        }

        #endregion

        #region Workspace SQL Active Directory Administrator

        public WorkspaceAadAdminInfo GetSqlActiveDirectoryAdministrators(string resourceGroupName, string workspaceName)
        {
            try
            {
                return _synapseManagementClient.WorkspaceAadAdmins.Get(resourceGroupName, workspaceName);
            }
            catch (CloudException ex)
            {
                throw GetAzurePowerShellException(ex);
            }
        }

        public WorkspaceAadAdminInfo CreateOrUpdateSqlActiveDirectoryAdministrators(string resourceGroupName, string workspaceName, string displayName, Guid objectId)
        {
            try
            {
                return _synapseManagementClient.WorkspaceAadAdmins.CreateOrUpdate(resourceGroupName, workspaceName, GetActiveDirectoryInformation(displayName, objectId));
            }
            catch (CloudException ex)
            {
                throw GetAzurePowerShellException(ex);
            }
        }

        private WorkspaceAadAdminInfo GetActiveDirectoryInformation(string displayName, Guid objectId)
        {
            // Gets the default Tenant id for the subscriptions
            Guid tenantId = _tenantId;

            // Check for a Azure Active Directory group. Recommended to always use group.
            IEnumerable<PSADGroup> groupList = null;
            PSADGroup group = null;

            var filter = new ADObjectFilterOptions()
            {
                Id = (objectId != null && objectId != Guid.Empty) ? objectId.ToString() : null,
                SearchString = displayName,
                Paging = true,
            };

            // Get a list of groups from Azure Active Directory
            groupList = ActiveDirectoryClient.FilterGroups(filter).Where(gr => string.Equals(gr.DisplayName, displayName, StringComparison.OrdinalIgnoreCase));

            if (groupList != null && groupList.Count() > 1)
            {
                // More than one group was found with that display name.
                throw new ArgumentException(string.Format(Resources.ADGroupMoreThanOneFound, displayName));
            }
            else if (groupList != null && groupList.Count() == 1)
            {
                // Only one group was found. Get the group display name and object id
                group = groupList.First();

                // Only support Security Groups
                if (group.SecurityEnabled.HasValue && !group.SecurityEnabled.Value)
                {
                    throw new ArgumentException(string.Format(Resources.InvalidADGroupNotSecurity, displayName));
                }
            }

            // Lookup for serviceprincipals
            ODataQuery<ServicePrincipal> odataQueryFilter;

            if ((objectId != null && objectId != Guid.Empty))
            {
                var applicationIdString = objectId.ToString();
                odataQueryFilter = new Rest.Azure.OData.ODataQuery<ServicePrincipal>(a => a.AppId == applicationIdString);
            }
            else
            {
                odataQueryFilter = new Rest.Azure.OData.ODataQuery<ServicePrincipal>(a => a.DisplayName == displayName);
            }

            var servicePrincipalList = ActiveDirectoryClient.FilterServicePrincipals(odataQueryFilter);

            if (servicePrincipalList != null && servicePrincipalList.Count() > 1)
            {
                // More than one service principal was found.
                throw new ArgumentException(string.Format(Resources.ADApplicationMoreThanOneFound, displayName));
            }
            else if (servicePrincipalList != null && servicePrincipalList.Count() == 1)
            {
                // Only one user was found. Get the user display name and object id
                PSADServicePrincipal app = servicePrincipalList.First();

                if (displayName != null && string.CompareOrdinal(displayName, app.DisplayName) != 0)
                {
                    throw new ArgumentException(string.Format(Resources.ADApplicationDisplayNameMismatch, displayName, app.DisplayName));
                }

                if (group != null)
                {
                    throw new ArgumentException(string.Format(Resources.ADDuplicateGroupAndApplicationFound, displayName));
                }

                return new WorkspaceAadAdminInfo()
                {
                    Login = displayName,
                    Sid = app.ApplicationId.ToString(),
                    TenantId = tenantId.ToString()
                };
            }

            if (group != null)
            {
                return new WorkspaceAadAdminInfo()
                {
                    Login = group.DisplayName,
                    Sid = group.Id.ToString(),
                    TenantId = tenantId.ToString()
                };
            }

            // No group or service principal was found. Check for a user
            filter = new ADObjectFilterOptions()
            {
                Id = (objectId != null && objectId != Guid.Empty) ? objectId.ToString() : null,
                SearchString = displayName,
                Paging = true,
            };

            // Get a list of user from Azure Active Directory
            var userList = ActiveDirectoryClient.FilterUsers(filter).Where(gr => string.Equals(gr.DisplayName, displayName, StringComparison.OrdinalIgnoreCase));

            // No user was found. Check if the display name is a UPN
            if (userList == null || !userList.Any())
            {
                // Check if the display name is the UPN
                filter = new ADObjectFilterOptions()
                {
                    Id = (objectId != null && objectId != Guid.Empty) ? objectId.ToString() : null,
                    UPN = displayName,
                    Paging = true,
                };

                userList = ActiveDirectoryClient.FilterUsers(filter).Where(gr => string.Equals(gr.UserPrincipalName, displayName, StringComparison.OrdinalIgnoreCase));
            }

            // No user was found. Check if the display name is a guest user. 
            if (userList == null || !userList.Any())
            {
                // Check if the display name is the UPN
                filter = new ADObjectFilterOptions()
                {
                    Id = (objectId != null && objectId != Guid.Empty) ? objectId.ToString() : null,
                    Mail = displayName,
                    Paging = true,
                };

                userList = ActiveDirectoryClient.FilterUsers(filter);
            }

            // No user was found
            if (userList == null || !userList.Any())
            {
                throw new ArgumentException(string.Format(Resources.ADObjectNotFound, displayName));
            }
            else if (userList.Count() > 1)
            {
                // More than one user was found.
                throw new ArgumentException(string.Format(Resources.ADUserMoreThanOneFound, displayName));
            }
            else
            {
                // Only one user was found. Get the user display name and object id
                var obj = userList.First();

                return new WorkspaceAadAdminInfo()
                {
                    Login = displayName,
                    Sid = obj.Id.ToString(),
                    TenantId = tenantId.ToString()
                };
            }
        }

        public void DeleteSqlActiveDirectoryAdministrators(string resourceGroupName, string workspaceName)
        {
            try
            {
                if (string.IsNullOrEmpty(resourceGroupName))
                {
                    resourceGroupName = GetResourceGroupByWorkspaceName(workspaceName);
                }

                _synapseManagementClient.WorkspaceAadAdmins.Delete(resourceGroupName, workspaceName);
            }
            catch (CloudException ex)
            {
                throw GetAzurePowerShellException(ex);
            }
        }

        #endregion

        #region Auditing

        public SqlPoolAuditModel GetSqlPoolAudit(string resourceGroupName, string workspaceName, string sqlPoolName)
        {
            try
            {
                if (string.IsNullOrEmpty(resourceGroupName))
                {
                    resourceGroupName = GetResourceGroupByWorkspaceName(workspaceName);
                }

                var policy = this._synapseManagementClient.ExtendedSqlPoolBlobAuditingPolicies.Get(resourceGroupName, workspaceName, sqlPoolName);
                var model = new SqlPoolAuditModel
                {
                    ResourceGroupName = resourceGroupName,
                    WorkspaceName = workspaceName,
                    SqlPoolName = sqlPoolName
                };

                model.IsAzureMonitorTargetEnabled = policy.IsAzureMonitorTargetEnabled;
                model.PredicateExpression = policy.PredicateExpression;
                model.AuditActionGroup = ExtractAuditActionGroups(policy.AuditActionsAndGroups);
                model.AuditAction = ExtractAuditActions(policy.AuditActionsAndGroups);
                ModelizeStorageInfo(model, policy.StorageEndpoint, policy.IsStorageSecondaryKeyInUse, policy.StorageAccountSubscriptionId,
                    IsAuditEnabled(policy.State), policy.RetentionDays);
                model.BlobStorageTargetState = policy.State == BlobAuditingPolicyState.Enabled ? AuditStateType.Enabled : AuditStateType.Disabled;

                return model;
            }
            catch (CloudException ex)
            {
                throw GetAzurePowerShellException(ex);
            }
        }

        private AuditActionGroup[] ExtractAuditActionGroups(IEnumerable<string> auditActionsAndGroups)
        {
            var groups = new List<AuditActionGroup>();
            auditActionsAndGroups?.ForEach(item =>
{
    if (Enum.TryParse(item, true, out AuditActionGroup group))
    {
        groups.Add(group);
    }
});

            return groups.ToArray();
        }

        private string[] ExtractAuditActions(IEnumerable<string> auditActionsAndGroups)
        {
            var actions = new List<string>();
            auditActionsAndGroups?.ForEach(item =>
{
    if (!Enum.TryParse(item, true, out AuditActionGroup group))
    {
        actions.Add(item);
    }
});

            return actions.ToArray();
        }

        private void ModelizeStorageInfo(WorkspaceAuditModel model,
            string storageEndpoint, bool? isSecondary, Guid? storageAccountSubscriptionId,
            bool isAuditEnabled, int? retentionDays)
        {
            if (string.IsNullOrEmpty(storageEndpoint))
            {
                return;
            }

            model.StorageKeyType = GetStorageKeyKind(isSecondary);

            if (isAuditEnabled)
            {
                if (storageAccountSubscriptionId == null || Guid.Empty.Equals(storageAccountSubscriptionId))
                {
                    storageAccountSubscriptionId = _subscriptionId;
                }

                model.StorageAccountResourceId = RetrieveStorageAccountIdAsync(
                    storageAccountSubscriptionId.Value,
                    GetStorageAccountName(storageEndpoint)).GetAwaiter().GetResult();

                model.RetentionInDays = Convert.ToUInt32(retentionDays);
            }
        }

        internal async Task<string> RetrieveStorageAccountIdAsync(Guid storageAccountSubscriptionId, string storageAccountName)
        {
            // Build a URI for calling corresponding REST-API.
            //
            var uriBuilder = new StringBuilder(Context.Environment.GetEndpointAsUri(AzureEnvironment.Endpoint.ResourceManager).ToString());
            uriBuilder.AppendFormat("/resources?api-version=2018-05-01&$filter=(subscriptionId%20eq%20'{0}')%20and%20((resourceType%20eq%20'microsoft.storage/storageaccounts')%20or%20(resourceType%20eq%20'microsoft.classicstorage/storageaccounts'))%20and%20(name%20eq%20'{1}')",
                storageAccountSubscriptionId,
                storageAccountName);

            var nextLink = uriBuilder.ToString();
            string id = null;
            while (!string.IsNullOrEmpty(nextLink))
            {
                JToken response = await SendAsync(nextLink, HttpMethod.Get, new Exception(string.Format(Properties.Resources.RetrievingStorageAccountIdUnderSubscriptionFailed, storageAccountName, storageAccountSubscriptionId)));
                var valuesArray = (JArray)response["value"];
                if (valuesArray.HasValues)
                {
                    var idValueToken = valuesArray[0];
                    id = (string)idValueToken["id"];
                    if (string.IsNullOrEmpty(id))
                    {
                        throw new Exception(string.Format(Resources.RetrievingStorageAccountIdUnderSubscriptionFailed, storageAccountName, storageAccountSubscriptionId));
                    }
                }
                nextLink = (string)response["nextLink"];
            }

            if (string.IsNullOrEmpty(id))
            {
                throw new Exception(string.Format(Resources.StorageAccountNotFound, storageAccountName));
            }

            return id;
        }

        internal async Task<JToken> SendAsync(string url, HttpMethod method, Exception exceptionToThrowOnFailure)
        {
            var httpRequest = new HttpRequestMessage { Method = method, RequestUri = new Uri(url) };
            await ResourceManagementClient.Credentials.ProcessHttpRequestAsync(httpRequest, CancellationToken.None).ConfigureAwait(false);
            var httpResponse = await ResourceManagementClient.HttpClient.SendAsync(httpRequest, CancellationToken.None).ConfigureAwait(false);
            if (!httpResponse.IsSuccessStatusCode)
            {
                throw exceptionToThrowOnFailure;
            }

            return JToken.Parse(await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
        }

        private static string GetStorageAccountName(string storageEndpoint)
        {
            int accountNameStartIndex = storageEndpoint.StartsWith("https://", StringComparison.InvariantCultureIgnoreCase) ? 8 : 7; // https:// or http://
            int accountNameEndIndex = storageEndpoint.IndexOf(".blob", StringComparison.InvariantCultureIgnoreCase);
            return storageEndpoint.Substring(accountNameStartIndex, accountNameEndIndex - accountNameStartIndex);
        }

        private StorageKeyKind GetStorageKeyKind(bool? isSecondary)
        {
            if (isSecondary.HasValue)
            {
                return isSecondary.Value ? StorageKeyKind.Secondary : StorageKeyKind.Primary;
            }

            return StorageKeyKind.Primary;
        }

        private bool IsAuditEnabled(BlobAuditingPolicyState state)
        {
            return state == BlobAuditingPolicyState.Enabled;
        }

        public void CreateOrUpdateSqlPoolAudit(SqlPoolAuditModel model)
        {
            try
            {
                if (string.IsNullOrEmpty(model.PredicateExpression))
                {
                    SqlPoolBlobAuditingPolicy policy = new SqlPoolBlobAuditingPolicy();
                    PolicizeAuditModel(model, policy);
                    _synapseManagementClient.SqlPoolBlobAuditingPolicies.CreateOrUpdate(model.ResourceGroupName, model.WorkspaceName, model.SqlPoolName, policy);
                }
                else
                {
                    ExtendedSqlPoolBlobAuditingPolicy policy = new ExtendedSqlPoolBlobAuditingPolicy
                    {
                        PredicateExpression = model.PredicateExpression
                    };

                    PolicizeAuditModel(model, policy);
                    _synapseManagementClient.ExtendedSqlPoolBlobAuditingPolicies.CreateOrUpdate(model.ResourceGroupName, model.WorkspaceName, model.SqlPoolName, policy);
                }
            }
            catch (CloudException ex)
            {
                throw GetAzurePowerShellException(ex);
            }
        }

        private void PolicizeAuditModel(WorkspaceAuditModel model, dynamic policy)
        {
            policy.State = model.BlobStorageTargetState == AuditStateType.Enabled ?
                           BlobAuditingPolicyState.Enabled : BlobAuditingPolicyState.Disabled;

            policy.IsAzureMonitorTargetEnabled = model.IsAzureMonitorTargetEnabled;
            if (model is SqlPoolAuditModel dbModel)
            {
                policy.AuditActionsAndGroups = ExtractAuditActionsAndGroups(dbModel.AuditActionGroup, dbModel.AuditAction);
            }
            else
            {
                policy.AuditActionsAndGroups = ExtractAuditActionsAndGroups(model.AuditActionGroup);
            }

            if (model.BlobStorageTargetState == AuditStateType.Enabled)
            {
                const string separator = "subscriptions/";
                string storageAccountResourceId = model.StorageAccountResourceId.Substring(model.StorageAccountResourceId.IndexOf(separator) + separator.Length);
                string[] segments = storageAccountResourceId.Split('/');
                Guid storageAccountSubscriptionId = Guid.Parse(segments[0]);
                string storageAccountName = segments[6];
                policy.StorageEndpoint = string.Format("https://{0}.blob.{1}", storageAccountName, Context.Environment.GetEndpoint(AzureEnvironment.Endpoint.StorageEndpointSuffix));
                policy.StorageAccountSubscriptionId = storageAccountSubscriptionId;

                if (IsStorageAccountInVNet(model.StorageAccountResourceId))
                {
                    Guid? principalId = AssignServerIdentityIfNotAssigned(model.ResourceGroupName, model.WorkspaceName);
                    AssignRoleForServerIdentityOnStorageIfNotAssigned(model.StorageAccountResourceId, principalId.Value, default(Guid));
                }
                else
                {
                    policy.IsStorageSecondaryKeyInUse = model.StorageKeyType == StorageKeyKind.Secondary;
                    policy.StorageAccountAccessKey = RetrieveStorageKeysAsync(
                        model.StorageAccountResourceId).GetAwaiter().GetResult()[model.StorageKeyType == StorageKeyKind.Secondary ? StorageKeyKind.Secondary : StorageKeyKind.Primary];
                }

                if (model.RetentionInDays != null)
                {
                    policy.RetentionDays = (int)model.RetentionInDays;
                }
            }
        }

        private static IList<string> ExtractAuditActionsAndGroups(AuditActionGroup[] auditActionGroup, string[] auditAction = null)
        {
            var actionsAndGroups = new List<string>();
            if (auditAction != null)
            {
                actionsAndGroups.AddRange(auditAction);
            }

            auditActionGroup?.ToList().ForEach(aag => actionsAndGroups.Add(aag.ToString()));
            if (actionsAndGroups.Count == 0) // default audit actions and groups in case nothing was defined by the user
            {
                actionsAndGroups.Add("SUCCESSFUL_DATABASE_AUTHENTICATION_GROUP");
                actionsAndGroups.Add("FAILED_DATABASE_AUTHENTICATION_GROUP");
                actionsAndGroups.Add("BATCH_COMPLETED_GROUP");
            }

            return actionsAndGroups;
        }

        private bool IsStorageAccountInVNet(string storageAccountResourceId)
        {
            if (IsClassicStorage(storageAccountResourceId))
            {
                return false;
            }

            string uri = $"{Context.Environment.GetEndpointAsUri(AzureEnvironment.Endpoint.ResourceManager).ToString()}{storageAccountResourceId}?api-version=2019-06-01";
            Exception exception = new Exception(
                string.Format(Resources.RetrievingStorageAccountPropertiesFailed,
                storageAccountResourceId));
            JToken storageAccountPropertiesToken = SendAsync(uri, HttpMethod.Get, exception).Result;
            return GetNetworkAclsDefaultAction(storageAccountPropertiesToken, exception).Equals("Deny");
        }

        private bool IsClassicStorage(string storageAccountResourceId)
        {
            return storageAccountResourceId.Contains("Microsoft.ClassicStorage/storageAccounts");
        }

        private string GetNetworkAclsDefaultAction(JToken storageAccountPropertiesToken, Exception exceptionToThrowOnFailure)
        {
            JToken value;
            try
            {
                value = storageAccountPropertiesToken["properties"]["networkAcls"]["defaultAction"];
            }
            catch (Exception)
            {
                throw exceptionToThrowOnFailure;
            }

            return value?.ToString();
        }

        public Guid? AssignServerIdentityIfNotAssigned(string resourceGroupName, string workspaceName)
        {
            var workspaceInfo = _synapseManagementClient.Workspaces.Get(resourceGroupName, workspaceName);
            if (workspaceInfo.Identity == null ||
                workspaceInfo.Identity.Type != ResourceIdentityType.SystemAssigned)
            {
                workspaceInfo.Identity = new ManagedIdentity
                {
                    Type = ResourceIdentityType.SystemAssigned
                };
                workspaceInfo = _synapseManagementClient.Workspaces.CreateOrUpdate(resourceGroupName, workspaceName, workspaceInfo);
            }

            try
            {
                return new Guid(workspaceInfo.Identity.PrincipalId);
            }
            catch (Exception)
            {
                return null;
            }
        }

        private void AssignRoleForServerIdentityOnStorageIfNotAssigned(string storageAccountResourceId, Guid principalId, Guid roleAssignmentId)
        {
            if (IsRoleAssignedForServerIdentitiyOnStorage(storageAccountResourceId, principalId))
            {
                return;
            }

            roleAssignmentId = roleAssignmentId == default(Guid) ? Guid.NewGuid() : roleAssignmentId;
            Uri endpoint = Context.Environment.GetEndpointAsUri(AzureEnvironment.Endpoint.ResourceManager);
            string uri = $"{endpoint}/{storageAccountResourceId}/providers/Microsoft.Authorization/roleAssignments/{roleAssignmentId}?api-version=2018-01-01-preview";

            string roleDefinitionId = $"/subscriptions/{GetStorageAccountSubscription(storageAccountResourceId)}/providers/Microsoft.Authorization/roleDefinitions/ba92f5b4-2d11-453d-a403-e96b0029c9fe";
            string content = $"{{\"properties\": {{ \"roleDefinitionId\": \"{roleDefinitionId}\", \"principalId\": \"{principalId}\", \"principalType\": \"ServicePrincipal\"}}}}";

            int numberOfTries = 20;
            const int SecondsToWaitBetweenTries = 20;
            HttpResponseMessage response = null;
            bool isARetry = false;
            System.Net.HttpStatusCode responseStatusCode;
            string responseContent = null;
            do
            {
                if (isARetry)
                {
                    Thread.Sleep(TimeSpan.FromSeconds(SecondsToWaitBetweenTries));
                }

                HttpRequestMessage httpRequest = new HttpRequestMessage
                {
                    Method = HttpMethod.Put,
                    RequestUri = new Uri(uri),
                    Content = new StringContent(content, Encoding.UTF8, "application/json")
                };
                ResourceManagementClient.Credentials.ProcessHttpRequestAsync(httpRequest, CancellationToken.None).ConfigureAwait(false).GetAwaiter().GetResult();
                response = ResourceManagementClient.HttpClient.SendAsync(httpRequest, CancellationToken.None).ConfigureAwait(false).GetAwaiter().GetResult();
                if (response.IsSuccessStatusCode)
                {
                    return;
                }
                else if (response.StatusCode == System.Net.HttpStatusCode.Forbidden)
                {
                    throw new Exception(string.Format(Resources.AddingStorageBlobDataContributorRoleForStorageAccountIsForbidden, storageAccountResourceId));
                }

                responseStatusCode = response.StatusCode;
                responseContent = response.Content.ReadAsStringAsync().Result;
                numberOfTries--;
                isARetry = true;
            } while (numberOfTries > 0);

            throw new Exception(string.Format(Resources.FailedToAddRoleAssignmentForStorageAccount, storageAccountResourceId, responseStatusCode.ToString(), responseContent));
        }

        private bool IsRoleAssignedForServerIdentitiyOnStorage(string storageAccountResourceId, Guid principalId)
        {
            string StorageBlobDataContributorId = "ba92f5b4-2d11-453d-a403-e96b0029c9fe";
            Uri endpoint = Context.Environment.GetEndpointAsUri(AzureEnvironment.Endpoint.ResourceManager);
            string uri = $"{endpoint}/{storageAccountResourceId}/providers/Microsoft.Authorization/roleAssignments/?api-version=2018-01-01-preview&$filter=assignedTo('{principalId}')";
            JToken roleDefinitionsToken = SendAsync(uri, HttpMethod.Get,
                new Exception(string.Format(Resources.FailedToGetRoleAssignmentsForStorageAccount, storageAccountResourceId))).Result;
            try
            {
                JArray roleDefinitionsArray = (JArray)roleDefinitionsToken["value"];
                return roleDefinitionsArray.Any((token =>
                {
                    JToken roleDefinitionId = token["properties"]["roleDefinitionId"];
                    return roleDefinitionId != null && roleDefinitionId.ToString().Contains(StorageBlobDataContributorId);
                }));
            }
            catch (Exception) { }

            return false;
        }

        private static string GetStorageAccountSubscription(string storageAccountResourceId)
        {
            const string separator = "subscriptions/";
            int subscriptionStartIndex = storageAccountResourceId.IndexOf(separator) + separator.Length;
            return storageAccountResourceId.Substring(subscriptionStartIndex, Guid.Empty.ToString().Length);
        }

        internal async Task<Dictionary<StorageKeyKind, string>> RetrieveStorageKeysAsync(string storageAccountId)
        {
            var isClassicStorage = IsClassicStorage(storageAccountId);

            // Build a URI for calling corresponding REST-API
            //
            var uriBuilder = new StringBuilder(Context.Environment.GetEndpointAsUri(AzureEnvironment.Endpoint.ResourceManager).ToString());
            uriBuilder.AppendFormat("{0}/listKeys?api-version={1}",
                storageAccountId,
                isClassicStorage ? "2016-11-01" : "2017-06-01");

            // Define an exception to be thrown on failure.
            //
            var exception = new Exception(string.Format(Resources.RetrievingStorageAccountKeysFailed, storageAccountId));

            // Call the URI and get storage account keys.
            //
            var storageAccountKeysResponse = await SendAsync(uriBuilder.ToString(), HttpMethod.Post, exception);

            // Extract keys out of response.
            //
            var storageAccountKeys = new Dictionary<StorageKeyKind, string>();
            string primaryKey;
            string secondaryKey;
            if (isClassicStorage)
            {
                primaryKey = (string)storageAccountKeysResponse["primaryKey"];
                secondaryKey = (string)storageAccountKeysResponse["secondaryKey"];
            }
            else
            {
                var storageAccountKeysArray = (JArray)storageAccountKeysResponse["keys"];
                if (storageAccountKeysArray == null)
                {
                    throw exception;
                }

                primaryKey = (string)storageAccountKeysArray[0]["value"];
                secondaryKey = (string)storageAccountKeysArray[1]["value"];
            }

            if (string.IsNullOrEmpty(primaryKey) || string.IsNullOrEmpty(secondaryKey))
            {
                throw exception;
            }

            storageAccountKeys.Add(StorageKeyKind.Primary, primaryKey);
            storageAccountKeys.Add(StorageKeyKind.Secondary, secondaryKey);
            return storageAccountKeys;
        }

        internal dynamic GetSqlAuditing(string resourceGroupName, string workspaceName, string sqlPoolName = null)
        {
            if (sqlPoolName == null)
            {
                return _synapseManagementClient.WorkspaceManagedSqlServerBlobAuditingPolicies.Get(resourceGroupName, workspaceName);
            }
            else
            {
                return _synapseManagementClient.SqlPoolBlobAuditingPolicies.Get(resourceGroupName, workspaceName, sqlPoolName);
            }
        }

        public void RemoveSqlPoolAudit(string resourceGroupName, string workspaceName, string sqlPoolName)
        {
            try
            {
                if (string.IsNullOrEmpty(resourceGroupName))
                {
                    resourceGroupName = GetResourceGroupByWorkspaceName(workspaceName);
                }

                SqlPoolBlobAuditingPolicy policy = GetSqlAuditing(resourceGroupName, workspaceName, sqlPoolName);
                policy.State = BlobAuditingPolicyState.Disabled;
                _synapseManagementClient.SqlPoolBlobAuditingPolicies.CreateOrUpdate(resourceGroupName, workspaceName, sqlPoolName, policy);
            }
            catch (CloudException ex)
            {
                throw GetAzurePowerShellException(ex);
            }
        }

        public WorkspaceAuditModel GetWorkspaceAudit(string resourceGroupName, string workspaceName)
        {
            try
            {
                if (string.IsNullOrEmpty(resourceGroupName))
                {
                    resourceGroupName = GetResourceGroupByWorkspaceName(workspaceName);
                }

                var policy = _synapseManagementClient.WorkspaceManagedSqlServerExtendedBlobAuditingPolicies.Get(resourceGroupName, workspaceName);
                var model = new WorkspaceAuditModel
                {
                    ResourceGroupName = resourceGroupName,
                    WorkspaceName = workspaceName
                };

                model.IsAzureMonitorTargetEnabled = policy.IsAzureMonitorTargetEnabled;
                model.PredicateExpression = policy.PredicateExpression;
                model.AuditActionGroup = ExtractAuditActionGroups(policy.AuditActionsAndGroups);
                ModelizeStorageInfo(model, policy.StorageEndpoint, policy.IsStorageSecondaryKeyInUse, policy.StorageAccountSubscriptionId,
                    IsAuditEnabled(policy.State), policy.RetentionDays);
                model.BlobStorageTargetState = policy.State == BlobAuditingPolicyState.Enabled ? AuditStateType.Enabled : AuditStateType.Disabled;

                return model;
            }
            catch (CloudException ex)
            {
                throw GetAzurePowerShellException(ex);
            }
        }

        public void CreateOrUpdateWorkspaceAudit(WorkspaceAuditModel model)
        {
            try
            {
                if (string.IsNullOrEmpty(model.PredicateExpression))
                {
                    var policy = new ServerBlobAuditingPolicy();
                    PolicizeAuditModel(model, policy);
                    _synapseManagementClient.WorkspaceManagedSqlServerBlobAuditingPolicies.CreateOrUpdate(model.ResourceGroupName, model.WorkspaceName, policy);
                }
                else
                {
                    var policy = new ExtendedServerBlobAuditingPolicy
                    {
                        PredicateExpression = model.PredicateExpression
                    };
                    PolicizeAuditModel(model, policy);
                    _synapseManagementClient.WorkspaceManagedSqlServerExtendedBlobAuditingPolicies.CreateOrUpdate(model.ResourceGroupName, model.WorkspaceName, policy);
                }
            }
            catch (CloudException ex)
            {
                throw GetAzurePowerShellException(ex);
            }
        }

        public void RemoveWorkspaceAudit(string resourceGroupName, string workspaceName)
        {
            try
            {
                if (string.IsNullOrEmpty(resourceGroupName))
                {
                    resourceGroupName = GetResourceGroupByWorkspaceName(workspaceName);
                }

                ServerBlobAuditingPolicy policy = GetSqlAuditing(resourceGroupName, workspaceName);
                policy.State = BlobAuditingPolicyState.Disabled;
                _synapseManagementClient.WorkspaceManagedSqlServerBlobAuditingPolicies.CreateOrUpdate(resourceGroupName, workspaceName, policy);
            }
            catch (CloudException ex)
            {
                throw GetAzurePowerShellException(ex);
            }
        }

        #endregion

        #region Threat Detection

        public ServerSecurityAlertPolicy GetWorkspaceThreatDetectionPolicy(string resourceGroupName, string workspaceName)
        {
            try
            {
                return _synapseManagementClient.WorkspaceManagedSqlServerSecurityAlertPolicy.Get(resourceGroupName, workspaceName);
            }
            catch (CloudException ex)
            {
                throw GetAzurePowerShellException(ex);
            }
        }

        public Dictionary<StorageKeyKind, string> GetStorageKeys(string storageEndpoint)
        {
            var storageName = GetStorageAccountName(storageEndpoint);
            var resourceGroup = GetStorageResourceGroup(storageName);
            return GetStorageKeys(resourceGroup, storageName);
        }

        private static class StorageAccountType
        {
            public const string ClassicStorage = "Microsoft.ClassicStorage/storageAccounts";
            public const string Storage = "Microsoft.Storage/storageAccounts";
        }

        public string GetStorageResourceGroup(string storageAccountName)
        {
            foreach (var storageAccountType in new[] { StorageAccountType.ClassicStorage, StorageAccountType.Storage })
            {
                var resourceGroup = GetStorageResourceGroup(
                    ResourceManagementClient,
                    storageAccountName,
                    storageAccountType);

                if (resourceGroup != null)
                {
                    return resourceGroup;
                }
            }

            throw new Exception(string.Format(Properties.Resources.StorageAccountNotFound, storageAccountName));
        }

        private static string GetStorageResourceGroup(
            ResourceManagementClient resourcesClient,
            string storageAccountName,
            string resourceType)
        {
            var query = new Rest.Azure.OData.ODataQuery<GenericResourceFilter>(r => r.ResourceType == resourceType);
            var res = resourcesClient.Resources.List(query);
            var allResources = new List<GenericResource>(res);
            var account = allResources.Find(r => r.Name == storageAccountName);
            if (account == null)
            {
                return null;
            }

            var resId = account.Id;
            var segments = resId.Split('/');
            var indexOfResourceGroup = new List<string>(segments).IndexOf("resourceGroups") + 1;
            return segments[indexOfResourceGroup];
        }

        private Dictionary<StorageKeyKind, string> GetStorageKeys(string resourceGroupName, string storageAccountName)
        {
            try
            {
                return GetStorageKeysAsync(resourceGroupName, storageAccountName).GetAwaiter().GetResult();
            }
            catch (Exception e)
            {
                throw new Exception(string.Format(Resources.StorageAccountNotFound, storageAccountName), e);
            }
        }

        private async Task<Dictionary<StorageKeyKind, string>> GetStorageKeysAsync(string resourceGroupName, string storageAccountName)
        {
            var url = Context.Environment.GetEndpointAsUri(AzureEnvironment.Endpoint.ResourceManager).ToString();
            if (!url.EndsWith("/"))
            {
                url = url + "/";
            }
            // TODO: Remove IfDef
#if NETSTANDARD
            url = url + "subscriptions/" + (StorageManagementClient.SubscriptionId != null ? StorageManagementClient.SubscriptionId.Trim() : "");
#else
            url = url + "subscriptions/" + (client.Credentials.SubscriptionId != null ? client.Credentials.SubscriptionId.Trim() : "");
#endif
            url = url + "/resourceGroups/" + resourceGroupName;
            url = url + "/providers/Microsoft.ClassicStorage/storageAccounts/" + storageAccountName;
            url = url + "/listKeys?api-version=2014-06-01";

            var httpRequest = new HttpRequestMessage { Method = HttpMethod.Post, RequestUri = new Uri(url) };

            await StorageManagementClient.Credentials.ProcessHttpRequestAsync(httpRequest, CancellationToken.None).ConfigureAwait(false);
            var httpResponse = await StorageManagementClient.HttpClient.SendAsync(httpRequest, CancellationToken.None).ConfigureAwait(false);
            var responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
            var result = new Dictionary<StorageKeyKind, string>();
            try
            {
                var responseDoc = JToken.Parse(responseContent);
                var primaryKey = (string)responseDoc["primaryKey"];
                var secondaryKey = (string)responseDoc["secondaryKey"];
                if (string.IsNullOrEmpty(primaryKey) || string.IsNullOrEmpty(secondaryKey))
                {
                    throw new Exception(); // this is caught by the synced wrapper
                }

                result.Add(StorageKeyKind.Primary, primaryKey);
                result.Add(StorageKeyKind.Secondary, secondaryKey);
                return result;
            }
            catch
            {
                return GetV2Keys(resourceGroupName, storageAccountName);
            }
        }

        private Dictionary<StorageKeyKind, string> GetV2Keys(string resourceGroupName, string storageAccountName)
        {
            var r = StorageManagementClient.StorageAccounts.ListKeys(resourceGroupName, storageAccountName);
            // TODO: Remove IfDef
#if NETSTANDARD
            var k1 = r.Keys[0].Value;
            var k2 = r.Keys[1].Value;
#else
            string k1 = r.StorageAccountKeys.Key1;
            string k2 = r.StorageAccountKeys.Key2;
#endif
            var result = new Dictionary<StorageKeyKind, String>
            {
                {StorageKeyKind.Primary, k1}, {StorageKeyKind.Secondary, k2}
            };
            return result;
        }

        public ServerSecurityAlertPolicy SetWorkspaceThreatDetectionPolicy(string resourceGroupName, string workspaceName, ServerSecurityAlertPolicy policy)
        {
            try
            {
                return _synapseManagementClient.WorkspaceManagedSqlServerSecurityAlertPolicy.CreateOrUpdate(resourceGroupName, workspaceName, policy);
            }
            catch (CloudException ex)
            {
                throw GetAzurePowerShellException(ex);
            }
        }

        public void RemoveWorkspaceThreatDetectionPolicy(string resourceGroupName, string workspaceName)
        {
            try
            {
                if (string.IsNullOrEmpty(resourceGroupName))
                {
                    resourceGroupName = GetResourceGroupByWorkspaceName(workspaceName);
                }

                var policy = GetWorkspaceThreatDetectionPolicy(resourceGroupName, workspaceName);
                policy.State = SecurityAlertPolicyState.Disabled;
                _synapseManagementClient.WorkspaceManagedSqlServerSecurityAlertPolicy.CreateOrUpdate(resourceGroupName, workspaceName, policy);
            }
            catch (CloudException ex)
            {
                throw GetAzurePowerShellException(ex);
            }
        }

        public SqlPoolSecurityAlertPolicy GetSqlPoolThreatDetectionPolicy(string resourceGroupName, string workspaceName, string sqlPoolName)
        {
            try
            {
                return _synapseManagementClient.SqlPoolSecurityAlertPolicies.Get(resourceGroupName, workspaceName, sqlPoolName);
            }
            catch (CloudException ex)
            {
                throw GetAzurePowerShellException(ex);
            }
        }

        public SqlPoolSecurityAlertPolicy SetSqlPoolThreatDetectionPolicy(string resourceGroupName, string workspaceName, string sqlPoolName, SqlPoolSecurityAlertPolicy policy)
        {
            try
            {
                return _synapseManagementClient.SqlPoolSecurityAlertPolicies.CreateOrUpdate(resourceGroupName, workspaceName, sqlPoolName, policy);
            }
            catch (CloudException ex)
            {
                throw GetAzurePowerShellException(ex);
            }
        }

        public void RemoveSqlPoolThreatDetectionPolicy(string resourceGroupName, string workspaceName, string sqlPoolName)
        {
            try
            {
                if (string.IsNullOrEmpty(resourceGroupName))
                {
                    resourceGroupName = GetResourceGroupByWorkspaceName(workspaceName);
                }

                var policy = GetSqlPoolThreatDetectionPolicy(resourceGroupName, workspaceName, sqlPoolName);
                policy.State = SecurityAlertPolicyState.Disabled;
                _synapseManagementClient.SqlPoolSecurityAlertPolicies.CreateOrUpdate(resourceGroupName, workspaceName, sqlPoolName, policy);
            }
            catch (CloudException ex)
            {
                throw GetAzurePowerShellException(ex);
            }
        }

        #endregion

        #region Vulnerability Assessment

        public ServerVulnerabilityAssessment GetWorkspaceVulnerabilityAssessmentSettings(string resourceGroupName, string workspaceName)
        {
            try
            {
                return _synapseManagementClient.WorkspaceManagedSqlServerVulnerabilityAssessments.Get(resourceGroupName, workspaceName);
            }
            catch (CloudException ex)
            {
                throw GetAzurePowerShellException(ex);
            }
        }

        public struct StorageContainerInfo
        {
            public string StorageAccountAccessKey;
            public string StorageContainerPath;
        }

        public StorageContainerInfo GetStorageContainerInfo(string resourceGroupName, string storageAccountName, string containerName)
        {
            var storageAccountObject = StorageManagementClient.StorageAccounts.GetProperties(resourceGroupName, storageAccountName);
            var keysObject = StorageManagementClient.StorageAccounts.ListKeys(resourceGroupName, storageAccountName);
            // TODO: Remove IfDef
#if NETSTANDARD
            var storageAccountBlobPrimaryEndpoints = storageAccountObject.PrimaryEndpoints.Blob;
            var key = keysObject.Keys.FirstOrDefault().Value;
#else
            var storageAccountBlobPrimaryEndpoints = storageAccountObject.StorageAccount.PrimaryEndpoints.Blob;
            var key = keysObject.StorageAccountKeys.Key1;
#endif
            return new StorageContainerInfo
            {
                StorageAccountAccessKey = key,
                StorageContainerPath = string.Format("{0}{1}", storageAccountBlobPrimaryEndpoints, containerName)
            };
        }

        public ServerVulnerabilityAssessment CreateOrUpdateWorkspaceVulnerabilityAssessmentSettings(string resourceGroupName, string workspaceName, ServerVulnerabilityAssessment parameters)
        {
            try
            {
                return _synapseManagementClient.WorkspaceManagedSqlServerVulnerabilityAssessments.CreateOrUpdate(resourceGroupName, workspaceName, parameters);
            }
            catch (CloudException ex)
            {
                throw GetAzurePowerShellException(ex);
            }
        }

        public void RemoveWorkspaceVulnerabilityAssessmentSettings(string resourceGroupName, string workspaceName)
        {
            try
            {
                if (string.IsNullOrEmpty(resourceGroupName))
                {
                    resourceGroupName = GetResourceGroupByWorkspaceName(workspaceName);
                }

                _synapseManagementClient.WorkspaceManagedSqlServerVulnerabilityAssessments.Delete(resourceGroupName, workspaceName);
            }
            catch (CloudException ex)
            {
                throw GetAzurePowerShellException(ex);
            }
        }

        public SqlPoolVulnerabilityAssessment GetSqlPoolVulnerabilityAssessmentSettings(string resourceGroupName, string workspaceName, string sqlPoolName)
        {
            try
            {
                return _synapseManagementClient.SqlPoolVulnerabilityAssessments.Get(resourceGroupName, workspaceName, sqlPoolName);
            }
            catch (CloudException ex)
            {
                throw GetAzurePowerShellException(ex);
            }
        }

        public SqlPoolVulnerabilityAssessment CreateOrUpdateSqlPoolVulnerabilityAssessmentSettings(string resourceGroupName, string workspaceName, string sqlPoolName, SqlPoolVulnerabilityAssessment parameters)
        {
            try
            {
                return _synapseManagementClient.SqlPoolVulnerabilityAssessments.CreateOrUpdate(resourceGroupName, workspaceName, sqlPoolName, parameters);
            }
            catch (CloudException ex)
            {
                throw GetAzurePowerShellException(ex);
            }
        }

        public void RemoveSqlPoolVulnerabilityAssessmentSettings(string resourceGroupName, string workspaceName, string sqlPoolName)
        {
            try
            {
                if (string.IsNullOrEmpty(resourceGroupName))
                {
                    resourceGroupName = GetResourceGroupByWorkspaceName(workspaceName);
                }

                _synapseManagementClient.SqlPoolVulnerabilityAssessments.Delete(resourceGroupName, workspaceName, sqlPoolName);
            }
            catch (CloudException ex)
            {
                throw GetAzurePowerShellException(ex);
            }
        }

        #endregion

        #region Advanced Threat Protection

        public void EnableWorkspaceVa(string resourceGroupName, string workspaceName, string workspaceLocation, string deploymentName)
        {
            AutoEnableVa(resourceGroupName, workspaceName, workspaceLocation, "DeployWorkspaceVaTemplate.json", deploymentName);
        }

        private void AutoEnableVa(string resourceGroupName, string workspaceName, string workspaceLocation, string templateName, string deploymentName)
        {
            // Generate deployment name if it was not provided
            if (string.IsNullOrEmpty(deploymentName))
            {
                deploymentName = "EnableVA_" + workspaceName + "_" + Guid.NewGuid().ToString("N");
            }

            // Trim deployment name as it has a maximum of 64 chars
            if (deploymentName.Length > 64)
            {
                deploymentName = deploymentName.Substring(0, 64);
            }

            Dictionary<string, object> parametersDictionary = new Dictionary<string, object>
            {
                {"workspaceName", new Dictionary<string, object> { {"value", workspaceName } }},
                {"location", new Dictionary<string, object> { {"value", workspaceLocation } }},
            };
            string parameters = Newtonsoft.Json.JsonConvert.SerializeObject(parametersDictionary, new JsonSerializerSettings
            {
                TypeNameHandling = TypeNameHandling.None,
                Formatting = Formatting.Indented
            });

            var properties = new DeploymentProperties
            {
                Mode = DeploymentMode.Incremental,
                Parameters = JObject.Parse(parameters),
                Template = JObject.Parse(GetArmTemplateContent(templateName)),
            };

            Deployment deployment = new Deployment(properties);

            ResourceManagementClient.Deployments.CreateOrUpdate(resourceGroupName, deploymentName, deployment);
        }

        private string GetArmTemplateContent(string templateName)
        {
            var assembly = Assembly.GetExecutingAssembly();
            var resourceName = assembly.GetManifestResourceNames().FirstOrDefault(str => str.EndsWith(templateName));
            string template;
            using (Stream stream = assembly.GetManifestResourceStream(resourceName))
            {
                using (StreamReader reader = new StreamReader(stream))
                {
                    template = reader.ReadToEnd();
                }
            }

            return template;
        }

        #endregion

        #region Transparent Data Encryption

        public TransparentDataEncryption GetSqlPoolTransparentDataEncryption(string resourceGroupName, string workspaceName, string sqlPoolName)
        {
            try
            {
                return _synapseManagementClient.SqlPoolTransparentDataEncryptions.Get(resourceGroupName, workspaceName, sqlPoolName);
            }
            catch (CloudException ex)
            {
                throw GetAzurePowerShellException(ex);
            }
        }

        public TransparentDataEncryption SetSqlPoolTransparentDataEncryption(string resourceGroupName, string workspaceName, string sqlPoolName, TransparentDataEncryption parameters)
        {
            try
            {
                return _synapseManagementClient.SqlPoolTransparentDataEncryptions.CreateOrUpdate(resourceGroupName, workspaceName, sqlPoolName, parameters);
            }
            catch (CloudException ex)
            {
                throw GetAzurePowerShellException(ex);
            }
        }

        #endregion

        #region SQL pool operations

        public SqlPool CreateSqlPool(string resourceGroupName, string workspaceName, string sqlPoolName, SqlPool createOrUpdateParams)
        {
            try
            {
                return _synapseManagementClient.SqlPools.Create(resourceGroupName, workspaceName, sqlPoolName, createOrUpdateParams);
            }
            catch (ErrorContractException ex)
            {
                throw GetAzurePowerShellException(ex);
            }
        }

        internal SqlPool GetSqlPool(string resourceGroupName, string workspaceName, string sqlPoolName)
        {
            try
            {
                if (string.IsNullOrEmpty(resourceGroupName))
                {
                    resourceGroupName = GetResourceGroupByWorkspaceName(workspaceName);
                }

                return _synapseManagementClient.SqlPools.Get(resourceGroupName, workspaceName, sqlPoolName);
            }
            catch (ErrorContractException ex)
            {
                throw GetAzurePowerShellException(ex);
            }
        }

        public void StartVulnerabilityAssessmentScan(string resourceGroup, string workspaceName, string sqlPoolName, string scanId)
        {
            try
            {
                _synapseManagementClient.SqlPoolVulnerabilityAssessmentScans.InitiateScan(resourceGroup, workspaceName, sqlPoolName, scanId);
            }
            catch (ErrorContractException ex)
            {
                throw GetAzurePowerShellException(ex);
            }
          
        }
        internal PSVulnerabilityAssessmentScanRecordModel GetVulnerabilityAssessmentScanRecord(string resourceGroupName, string workspaceName, string sqlPoolName, string scanId)
        {
            try
            {
                var result = _synapseManagementClient.SqlPoolVulnerabilityAssessmentScans.Get(resourceGroupName, workspaceName, sqlPoolName, scanId);
                return ConvertVulnerabilityAssessmentScanRecord(resourceGroupName, workspaceName, sqlPoolName, result);
            }
            catch (ErrorContractException ex)
            {
                throw GetAzurePowerShellException(ex);
            }
        }

        internal List<PSVulnerabilityAssessmentScanRecordModel> ListVulnerabilityAssessmentScanRecords(string resourceGroupName, string workspaceName, string sqlPoolName)
        {
            try
            {
                var firstPage = _synapseManagementClient.SqlPoolVulnerabilityAssessmentScans.List(resourceGroupName, workspaceName, sqlPoolName);
                return ListResources(firstPage, _synapseManagementClient.SqlPoolVulnerabilityAssessmentScans.ListNext).Select(scanRecord => ConvertVulnerabilityAssessmentScanRecord(resourceGroupName, workspaceName, sqlPoolName, scanRecord)).ToList();
            }
            catch (ErrorContractException ex)
            {
                throw GetAzurePowerShellException(ex);
            }
        }

        public PSVulnerabilityAssessmentScanExportModel ConvertSqlPoolVulnerabilityAssessmentScan(string resourceGroupName, string workSpaceName,
           string sqlPoolName, string scanId)
        {
            var response = _synapseManagementClient.SqlPoolVulnerabilityAssessmentScans.Export(resourceGroupName, workSpaceName, sqlPoolName, scanId);
            return new PSVulnerabilityAssessmentScanExportModel(resourceGroupName, workSpaceName, sqlPoolName, scanId, response.ExportedReportLocation);
        }

        private PSVulnerabilityAssessmentScanRecordModel ConvertVulnerabilityAssessmentScanRecord(string resourceGroup, string workSpace, string sqlPool, VulnerabilityAssessmentScanRecord scanRecord)
        {
            TriggerType scanTriggerType;
            Enum.TryParse(scanRecord.TriggerType, true, out scanTriggerType);

            return new PSVulnerabilityAssessmentScanRecordModel()
            {
                ResourceGroupName = resourceGroup,
                workspaceName = workSpace,
                sqlPoolName = sqlPool,
                ScanId = scanRecord.ScanId,
                TriggerType = scanTriggerType,
                State = scanRecord.State,
                StartTime = scanRecord.StartTime,
                EndTime = scanRecord.EndTime,
                Errors = scanRecord.Errors?.Select(scanError =>
                  new PSVulnerabilityAssessmentScanErrorModel()
                  {
                      Code = scanError.Code,
                      Message = scanError.Message
                  }).ToList(),
                ScanResultsLocationPath = scanRecord.StorageContainerPath,
                NumberOfFailedSecurityChecks = scanRecord.NumberOfFailedSecurityChecks
            };
        }

        internal SqlPool GetSqlPoolOrDefault(string resourceGroupName, string workspaceName, string sqlPoolName)
        {
            try
            {
                return GetSqlPool(resourceGroupName, workspaceName, sqlPoolName);
            }
            catch
            {
                return null;
            }
        }

        public List<SqlPool> ListSqlPools(string resourceGroupName, string workspaceName)
        {
            try
            {
                if (string.IsNullOrEmpty(resourceGroupName))
                {
                    resourceGroupName = GetResourceGroupByWorkspaceName(workspaceName);
                }

                var firstPage = this._synapseManagementClient.SqlPools.ListByWorkspace(resourceGroupName, workspaceName);
                return ListResources(firstPage, _synapseManagementClient.SqlPools.ListByWorkspaceNext);
            }
            catch (ErrorContractException ex)
            {
                throw GetAzurePowerShellException(ex);
            }
        }

        public void UpdateSqlPool(string resourceGroupName, string workspaceName, string sqlPoolName, SqlPoolPatchInfo updateParams)
        {
            try
            {
                if (string.IsNullOrEmpty(resourceGroupName))
                {
                    resourceGroupName = GetResourceGroupByWorkspaceName(workspaceName);
                }

                _synapseManagementClient.SqlPools.Update(resourceGroupName, workspaceName, sqlPoolName, updateParams);
            }
            catch (ErrorContractException ex)
            {
                throw GetAzurePowerShellException(ex);
            }
        }

        public void DeleteSqlPool(string resourceGroupName, string workspaceName, string sqlPoolName)
        {
            try
            {
                if (string.IsNullOrEmpty(resourceGroupName))
                {
                    resourceGroupName = GetResourceGroupByWorkspaceName(workspaceName);
                }

                if (!TestSqlPool(resourceGroupName, workspaceName, sqlPoolName))
                {
                    throw new InvalidOperationException(string.Format(Properties.Resources.SqlPoolDoesNotExist, sqlPoolName));
                }

                _synapseManagementClient.SqlPools.Delete(resourceGroupName, workspaceName, sqlPoolName);
            }
            catch (ErrorContractException ex)
            {
                throw GetAzurePowerShellException(ex);
            }
        }

        public bool TestSqlPool(string resourceGroupName, string workspaceName, string sqlPoolName)
        {
            try
            {
                GetSqlPool(resourceGroupName, workspaceName, sqlPoolName);
                return true;
            }
            catch (AzPSResourceNotFoundCloudException)
            {
                return false;
            }
        }

        public void RenameSqlPool(string resourceGroupName, string workspaceName, string sqlPoolName, string newSqlPoolName)
        {
            throw new NotImplementedException("SQL pool rename operation is not supported.");
            //try
            //{
            //    if (string.IsNullOrEmpty(resourceGroupName))
            //    {
            //        resourceGroupName = GetResourceGroupByWorkspaceName(workspaceName);
            //    }

            //    this._synapseManagementClient.SqlPools.Rename(
            //        resourceGroupName,
            //        workspaceName,
            //        sqlPoolName,
            //        new ResourceMoveDefinition
            //        {
            //            Id = Utils.ConstructResourceId(
            //                _synapseManagementClient.SubscriptionId,
            //                resourceGroupName,
            //                ResourceTypes.SqlPool,
            //                newSqlPoolName,
            //                $"workspaces/{workspaceName}")
            //        });
            //}
            //catch (ErrorContractException ex)
            //{
            //    throw GetSynapseException(ex);
            //}
        }

        public void PauseSqlPool(string resourceGroupName, string workspaceName, string sqlPoolName)
        {
            try
            {
                if (string.IsNullOrEmpty(resourceGroupName))
                {
                    resourceGroupName = GetResourceGroupByWorkspaceName(workspaceName);
                }

                this._synapseManagementClient.SqlPools.Pause(resourceGroupName, workspaceName, sqlPoolName);
            }
            catch (ErrorContractException ex)
            {
                throw GetAzurePowerShellException(ex);
            }
        }

        public void ResumeSqlPool(string resourceGroupName, string workspaceName, string sqlPoolName)
        {
            try
            {
                if (string.IsNullOrEmpty(resourceGroupName))
                {
                    resourceGroupName = GetResourceGroupByWorkspaceName(workspaceName);
                }

                this._synapseManagementClient.SqlPools.Resume(resourceGroupName, workspaceName, sqlPoolName);
            }
            catch (ErrorContractException ex)
            {
                throw GetAzurePowerShellException(ex);
            }
        }

        #endregion

        #region SQL Pool Backup

        public List<RestorePoint> ListSqlPoolRestorePoints(string resourceGroupName, string workspaceName, string sqlPoolName)
        {
            try
            {
                if (string.IsNullOrEmpty(resourceGroupName))
                {
                    resourceGroupName = GetResourceGroupByWorkspaceName(workspaceName);
                }

                return this._synapseManagementClient.SqlPoolRestorePoints.List(
                    resourceGroupName,
                    workspaceName,
                    sqlPoolName)
                    .ToList();
            }
            catch (ErrorContractException ex)
            {
                throw GetAzurePowerShellException(ex);
            }
        }

        public RestorePoint CreateSqlPoolRestorePoint(string resourceGroupName, string workspaceName, string sqlPoolName, CreateSqlPoolRestorePointDefinition parameters)
        {
            try
            {
                if (string.IsNullOrEmpty(resourceGroupName))
                {
                    resourceGroupName = GetResourceGroupByWorkspaceName(workspaceName);
                }

                return this._synapseManagementClient.SqlPoolRestorePoints.Create(resourceGroupName, workspaceName, sqlPoolName, parameters);
            }
            catch (ErrorContractException ex)
            {
                throw GetAzurePowerShellException(ex);
            }
        }

        public void DeleteSqlPoolRestorePoint(string resourceGroupName, string workspaceName, string sqlPoolName, string sqlPoolRestorePointCreationDate)
        {
            try
            {
                if (string.IsNullOrEmpty(resourceGroupName))
                {
                    resourceGroupName = GetResourceGroupByWorkspaceName(workspaceName);
                }

                if (!TestSqlPoolRestorePoint(resourceGroupName, workspaceName, sqlPoolName, sqlPoolRestorePointCreationDate))
                {
                    throw new InvalidOperationException(string.Format(Properties.Resources.SqlPoolRestorePointDoesNotExist, sqlPoolRestorePointCreationDate));
                }

                this._synapseManagementClient.SqlPoolRestorePoints.Delete(resourceGroupName, workspaceName, sqlPoolName, sqlPoolRestorePointCreationDate);
            }
            catch (ErrorContractException ex)
            {
                throw GetAzurePowerShellException(ex);
            }
        }

        public bool TestSqlPoolRestorePoint(string resourceGroupName, string workspaceName, string sqlPoolName, string sqlPoolRestorePointName)
        {
            try
            {
                RestorePoint respoint = this._synapseManagementClient.SqlPoolRestorePoints.Get(resourceGroupName,
                    workspaceName,
                    sqlPoolName,
                    sqlPoolRestorePointName);

                return respoint != null;
            }
            catch (ErrorContractException)
            {
                return false;
            }
        }

        #endregion

        #region SQL Pool V3 operations

        public SqlPoolV3 CreateSqlPoolV3(string resourceGroupName, string workspaceName, string sqlPoolName, SqlPoolV3 createOrUpdateParams)
        {
            try
            {
                return _synapseSqlV3ManagementClient.SqlPoolsV3.CreateOrUpdate(resourceGroupName, workspaceName, sqlPoolName, createOrUpdateParams);
            }
            catch (ErrorContractException ex)
            {
                throw GetAzurePowerShellException(ex);
            }
        }

        internal SqlPoolV3 GetSqlPoolV3(string resourceGroupName, string workspaceName, string sqlPoolName)
        {
            try
            {
                if (string.IsNullOrEmpty(resourceGroupName))
                {
                    resourceGroupName = GetResourceGroupByWorkspaceName(workspaceName);
                }

                return _synapseSqlV3ManagementClient.SqlPoolsV3.Get(resourceGroupName, workspaceName, sqlPoolName);
            }
            catch (ErrorContractException ex)
            {
                throw GetAzurePowerShellException(ex);
            }
        }

        internal SqlPoolV3 GetSqlPoolV3OrDefault(string resourceGroupName, string workspaceName, string sqlPoolName)
        {
            try
            {
                return GetSqlPoolV3(resourceGroupName, workspaceName, sqlPoolName);
            }
            catch
            {
                return null;
            }
        }

        public List<SqlPoolV3> ListSqlPoolsV3(string resourceGroupName, string workspaceName)
        {
            try
            {
                if (string.IsNullOrEmpty(resourceGroupName))
                {
                    resourceGroupName = GetResourceGroupByWorkspaceName(workspaceName);
                }

                var firstPage = this._synapseSqlV3ManagementClient.SqlPoolsV3.ListByWorkspace(resourceGroupName, workspaceName);
                return ListResources(firstPage, _synapseSqlV3ManagementClient.SqlPoolsV3.ListByWorkspaceNext);
            }
            catch (ErrorContractException ex)
            {
                throw GetAzurePowerShellException(ex);
            }
        }

        public void UpdateSqlPoolV3(string resourceGroupName, string workspaceName, string sqlPoolName, SqlPoolUpdate updateParams)
        {
            try
            {
                if (string.IsNullOrEmpty(resourceGroupName))
                {
                    resourceGroupName = GetResourceGroupByWorkspaceName(workspaceName);
                }

                _synapseSqlV3ManagementClient.SqlPoolsV3.Update(resourceGroupName, workspaceName, sqlPoolName, updateParams);
            }
            catch (ErrorContractException ex)
            {
                throw GetAzurePowerShellException(ex);
            }
        }

        public void DeleteSqlPoolV3(string resourceGroupName, string workspaceName, string sqlPoolName)
        {
            try
            {
                if (string.IsNullOrEmpty(resourceGroupName))
                {
                    resourceGroupName = GetResourceGroupByWorkspaceName(workspaceName);
                }

                if (!TestSqlPoolV3(resourceGroupName, workspaceName, sqlPoolName))
                {
                    throw new InvalidOperationException(string.Format(Properties.Resources.SqlPoolDoesNotExist, sqlPoolName));
                }

                _synapseSqlV3ManagementClient.SqlPoolsV3.Delete(resourceGroupName, workspaceName, sqlPoolName);
            }
            catch (ErrorContractException ex)
            {
                throw GetAzurePowerShellException(ex);
            }
        }

        public bool TestSqlPoolV3(string resourceGroupName, string workspaceName, string sqlPoolName)
        {
            try
            {
                GetSqlPoolV3(resourceGroupName, workspaceName, sqlPoolName);
                return true;
            }
            catch (AzPSResourceNotFoundCloudException)
            {
                return false;
            }
        }

        #endregion

        #region SQL Database operations

        public SqlDatabase CreateSqlDatabase(string resourceGroupName, string workspaceName, string sqlDatabaseName, SqlDatabase createOrUpdateParams)
        {
            try
            {
                return _synapseSqlV3ManagementClient.SqlDatabases.CreateOrUpdate(resourceGroupName, workspaceName, sqlDatabaseName, createOrUpdateParams);
            }
            catch (ErrorContractException ex)
            {
                throw GetAzurePowerShellException(ex);
            }
        }

        public PSRecoverableSqlPool GetRecoverableSqlPool(string resourceGroupName, string workspaceName, string sqlPoolName)
        {
            try
            {
                var recoverableSqlPool = this._synapseManagementClient.WorkspaceManagedSqlServerRecoverableSqlpools.Get(resourceGroupName, workspaceName, sqlPoolName);

                return new PSRecoverableSqlPool(recoverableSqlPool);
            }
            catch (ErrorContractException ex)
            {
                throw GetAzurePowerShellException(ex);
            }
        }

        public List<RecoverableSqlPool> ListRecoverableSqlPool(string resourceGroupName, string workspaceName)
        {
            try
            {
                var firstPage =  this._synapseManagementClient.WorkspaceManagedSqlServerRecoverableSqlpools.List(resourceGroupName, workspaceName);
                return ListResources(firstPage, _synapseManagementClient.WorkspaceManagedSqlServerRecoverableSqlpools.ListNext);
            }
            catch (ErrorContractException ex)
            {
                throw GetAzurePowerShellException(ex);
            }
        }

        public PSRestorableDroppedSqlPool GetDroppedSqlPoolBackup(string resourceGroupName, string workspaceName, string sqlPoolAndTimeName)
        {
            try
            {
                var restorableDroppedSqlPool = this._synapseManagementClient.RestorableDroppedSqlPools.Get(resourceGroupName, workspaceName, sqlPoolAndTimeName);

                return new PSRestorableDroppedSqlPool(restorableDroppedSqlPool);
            }
            catch (ErrorContractException ex)
            {
                throw GetAzurePowerShellException(ex);
            }
        }

        public List<RestorableDroppedSqlPool> ListDroppedSqlPoolBackups (string resourceGroupName, string workspaceName)
        {
            try
            {
                var restorableDroppedSqlPoolList = this._synapseManagementClient.RestorableDroppedSqlPools.ListByWorkspace(resourceGroupName, workspaceName);
                return restorableDroppedSqlPoolList.ToList();
            }
            catch (ErrorContractException ex)
            {
                throw GetAzurePowerShellException(ex);
            }
        }

        internal SqlDatabase GetSqlDatabase(string resourceGroupName, string workspaceName, string sqlDatabaseName)
        {
            try
            {
                if (string.IsNullOrEmpty(resourceGroupName))
                {
                    resourceGroupName = GetResourceGroupByWorkspaceName(workspaceName);
                }

                return _synapseSqlV3ManagementClient.SqlDatabases.Get(resourceGroupName, workspaceName, sqlDatabaseName);
            }
            catch (ErrorContractException ex)
            {
                throw GetAzurePowerShellException(ex);
            }
        }

        internal SqlDatabase GetSqlDatabaseOrDefault(string resourceGroupName, string workspaceName, string sqlDatabaseName)
        {
            try
            {
                return GetSqlDatabase(resourceGroupName, workspaceName, sqlDatabaseName);
            }
            catch
            {
                return null;
            }
        }

        public List<SqlDatabase> ListSqlDatabases(string resourceGroupName, string workspaceName)
        {
            try
            {
                if (string.IsNullOrEmpty(resourceGroupName))
                {
                    resourceGroupName = GetResourceGroupByWorkspaceName(workspaceName);
                }

                var firstPage = this._synapseSqlV3ManagementClient.SqlDatabases.ListByWorkspace(resourceGroupName, workspaceName);
                return ListResources(firstPage, _synapseSqlV3ManagementClient.SqlDatabases.ListByWorkspaceNext);
            }
            catch (ErrorContractException ex)
            {
                throw GetAzurePowerShellException(ex);
            }
        }

        public void UpdateSqlDatabase(string resourceGroupName, string workspaceName, string sqlDatabaseName, SqlDatabaseUpdate updateParams)
        {
            try
            {
                if (string.IsNullOrEmpty(resourceGroupName))
                {
                    resourceGroupName = GetResourceGroupByWorkspaceName(workspaceName);
                }

                _synapseSqlV3ManagementClient.SqlDatabases.Update(resourceGroupName, workspaceName, sqlDatabaseName, updateParams);
            }
            catch (ErrorContractException ex)
            {
                throw GetAzurePowerShellException(ex);
            }
        }

        public void DeleteSqlDatabase(string resourceGroupName, string workspaceName, string sqlDatabaseName)
        {
            try
            {
                if (string.IsNullOrEmpty(resourceGroupName))
                {
                    resourceGroupName = GetResourceGroupByWorkspaceName(workspaceName);
                }

                if (!TestSqlDatabase(resourceGroupName, workspaceName, sqlDatabaseName))
                {
                    throw new InvalidOperationException(string.Format(Properties.Resources.SqlDatabaseDoesNotExist, sqlDatabaseName));
                }

                _synapseSqlV3ManagementClient.SqlDatabases.Delete(resourceGroupName, workspaceName, sqlDatabaseName);
            }
            catch (ErrorContractException ex)
            {
                throw GetAzurePowerShellException(ex);
            }
        }

        public bool TestSqlDatabase(string resourceGroupName, string workspaceName, string sqlDatabaseName)
        {
            try
            {
                GetSqlDatabase(resourceGroupName, workspaceName, sqlDatabaseName);
                return true;
            }
            catch (AzPSResourceNotFoundCloudException)
            {
                return false;
            }
        }

        #endregion

        #region Spark pool operations

        public BigDataPoolResourceInfo CreateOrUpdateSparkPool(string resourceGroupName, string workspaceName, string sparkPoolName, BigDataPoolResourceInfo createOrUpdateParams)
        {
            try
            {
                return _synapseManagementClient.BigDataPools.CreateOrUpdate(resourceGroupName, workspaceName, sparkPoolName, createOrUpdateParams);
            }
            catch (ErrorContractException ex)
            {
                throw GetAzurePowerShellException(ex);
            }
        }

        internal BigDataPoolResourceInfo GetSparkPool(string resourceGroupName, string workspaceName, string sparkPoolName)
        {
            try
            {
                if (string.IsNullOrEmpty(resourceGroupName))
                {
                    resourceGroupName = GetResourceGroupByWorkspaceName(workspaceName);
                }

                return _synapseManagementClient.BigDataPools.Get(resourceGroupName, workspaceName, sparkPoolName);
            }
            catch (ErrorContractException ex)
            {
                throw GetAzurePowerShellException(ex);
            }
        }

        public List<BigDataPoolResourceInfo> ListSparkPools(string resourceGroupName, string workspaceName)
        {
            try
            {
                if (string.IsNullOrEmpty(resourceGroupName))
                {
                    resourceGroupName = GetResourceGroupByWorkspaceName(workspaceName);
                }

                var firstPage = this._synapseManagementClient.BigDataPools.ListByWorkspace(resourceGroupName, workspaceName);
                return ListResources(firstPage, _synapseManagementClient.BigDataPools.ListByWorkspaceNext);
            }
            catch (ErrorContractException ex)
            {
                throw GetAzurePowerShellException(ex);
            }
        }

        public void DeleteSparkPool(string resourceGroupName, string workspaceName, string sparkPoolName)
        {
            try
            {
                if (string.IsNullOrEmpty(resourceGroupName))
                {
                    resourceGroupName = GetResourceGroupByWorkspaceName(workspaceName);
                }

                if (!TestSparkPool(resourceGroupName, workspaceName, sparkPoolName))
                {
                    throw new InvalidOperationException(string.Format(Properties.Resources.SparkPoolDoesNotExist, sparkPoolName));
                }

                _synapseManagementClient.BigDataPools.Delete(resourceGroupName, workspaceName, sparkPoolName);
            }
            catch (ErrorContractException ex)
            {
                throw GetAzurePowerShellException(ex);
            }
        }

        public bool TestSparkPool(string resourceGroupName, string workspaceName, string sparkPoolName)
        {
            try
            {
                GetSparkPool(resourceGroupName, workspaceName, sparkPoolName);
                return true;
            }
            catch (AzPSResourceNotFoundCloudException)
            {
                return false;
            }
        }

        #endregion

        #region integration runtime operations

        public virtual async Task<List<PSIntegrationRuntime>> ListIntegrationRuntimesAsync(SynapseEntityFilterOptions filterOptions)
        {
            try
            {
                if (string.IsNullOrEmpty(filterOptions.ResourceGroupName))
                {
                    filterOptions.ResourceGroupName = GetResourceGroupByWorkspaceName(filterOptions.WorkspaceName);
                }

                var integrationRuntimes = new List<PSIntegrationRuntime>();

                IPage<IntegrationRuntimeResource> response;
                if (filterOptions.NextLink.IsNextPageLink())
                {
                    response = await _synapseManagementClient.IntegrationRuntimes.ListByWorkspaceNextAsync(filterOptions.NextLink);
                }
                else
                {
                    response = await _synapseManagementClient.IntegrationRuntimes.ListByWorkspaceAsync(
                        filterOptions.ResourceGroupName,
                        filterOptions.WorkspaceName);
                }

                filterOptions.NextLink = response?.NextPageLink;
                if (response == null)
                {
                    return integrationRuntimes;
                }

                foreach (var integrationRuntime in response.ToList())
                {
                    var managed = integrationRuntime.Properties as ManagedIntegrationRuntime;
                    if (managed != null)
                    {
                        integrationRuntimes.Add(new PSManagedIntegrationRuntime(
                            integrationRuntime,
                            filterOptions.ResourceGroupName,
                            filterOptions.WorkspaceName));
                    }
                    else
                    {
                        var selfHosted = integrationRuntime.Properties as SelfHostedIntegrationRuntime;
                        if (selfHosted != null)
                        {
                            integrationRuntimes.Add(CreateSelfHostedIntegrationRuntime(
                                integrationRuntime,
                                filterOptions.ResourceGroupName,
                                filterOptions.WorkspaceName));
                        }
                        else
                        {
                            integrationRuntimes.Add(new PSIntegrationRuntime(
                                integrationRuntime,
                                filterOptions.ResourceGroupName,
                                filterOptions.WorkspaceName));
                        }
                    }
                }

                return integrationRuntimes;
            }
            catch (ErrorContractException ex)
            {
                throw GetAzurePowerShellException(ex);
            }

        }

        private PSIntegrationRuntime CreateSelfHostedIntegrationRuntime(
            IntegrationRuntimeResource integrationRuntime,
            string resourceGroupName,
            string workspaceName)
        {
            PSIntegrationRuntime psIntegrationRuntime = null;
            var selfHosted = integrationRuntime.Properties as SelfHostedIntegrationRuntime;
            if (selfHosted != null)
            {
                if (selfHosted.LinkedInfo != null)
                {
                    psIntegrationRuntime = new PSLinkedIntegrationRuntime(integrationRuntime,
                            resourceGroupName,
                            workspaceName)
                    {
                        AuthorizationType = selfHosted.LinkedInfo is LinkedIntegrationRuntimeKeyAuthorization
                            ? SynapseConstants.LinkedIntegrationRuntimeKeyAuth
                            : SynapseConstants.LinkedIntegrationRuntimeRbacAuth
                    };
                }
                else
                {
                    psIntegrationRuntime = new PSSelfHostedIntegrationRuntime(integrationRuntime,
                            resourceGroupName,
                            workspaceName);
                }
            }

            return psIntegrationRuntime;
        }

        public virtual async Task<PSIntegrationRuntime> GetIntegrationRuntimeStatusAsync(
            string resourceGroupName,
            string workspaceName,
            string integrationRuntimeName)
        {
            try
            {
                if (string.IsNullOrEmpty(resourceGroupName))
                {
                    resourceGroupName = GetResourceGroupByWorkspaceName(workspaceName);
                }

                var taskGetIntegrationRuntime = Task.Run(
                async () => await _synapseManagementClient.IntegrationRuntimes.GetAsync(
                    resourceGroupName,
                    workspaceName,
                    integrationRuntimeName));
                var taskGetStatus = Task.Run(
                    async () => await _synapseManagementClient.IntegrationRuntimeStatus.GetWithHttpMessagesAsync(
                        resourceGroupName,
                        workspaceName,
                        integrationRuntimeName));
                await Task.WhenAll(taskGetIntegrationRuntime, taskGetStatus);

                return GenerateIntegraionRuntimeObject(
                    taskGetIntegrationRuntime.Result,
                    taskGetStatus.Result.Body,
                    resourceGroupName,
                    workspaceName);
            }
            catch (ErrorContractException ex)
            {
                throw GetAzurePowerShellException(ex);
            }

        }

        public virtual async Task<PSIntegrationRuntime> GetIntegrationRuntimeAsync(
            string resourceGroupName,
            string workspaceName,
            string integrationRuntimeName)
        {
            try
            {
                if (string.IsNullOrEmpty(resourceGroupName))
                {
                    resourceGroupName = GetResourceGroupByWorkspaceName(workspaceName);
                }

                var response = await _synapseManagementClient.IntegrationRuntimes.GetAsync(
                resourceGroupName,
                workspaceName,
                integrationRuntimeName);

                return GenerateIntegraionRuntimeObject(response, null, resourceGroupName, workspaceName);
            }
            catch (ErrorContractException ex)
            {
                throw GetAzurePowerShellException(ex);
            }
            catch (NullReferenceException)
            {
                throw new CloudException()
                {
                    Response = new HttpResponseMessageWrapper(new HttpResponseMessage(HttpStatusCode.NotFound), "")
                };
            }
        }

        private PSIntegrationRuntime GenerateIntegraionRuntimeObject(
            IntegrationRuntimeResource integrationRuntime,
            IntegrationRuntimeStatusResponse status,
            string resourceGroupName,
            string workspaceName)
        {
            var managed = integrationRuntime.Properties as ManagedIntegrationRuntime;
            if (status == null)
            {
                PSIntegrationRuntime ir = (managed != null
                    ? new PSManagedIntegrationRuntime(integrationRuntime, resourceGroupName, workspaceName)
                    : CreateSelfHostedIntegrationRuntime(integrationRuntime, resourceGroupName, workspaceName))
                        ?? new PSIntegrationRuntime(integrationRuntime, resourceGroupName, workspaceName);

                return ir;
            }

            if (managed != null)
            {
                return new PSManagedIntegrationRuntimeStatus(
                    integrationRuntime,
                    (ManagedIntegrationRuntimeStatus)status.Properties,
                    resourceGroupName,
                    workspaceName);
            }
            else
            {
                var selfHosted = integrationRuntime.Properties as SelfHostedIntegrationRuntime;
                if (selfHosted != null)
                {
                    if (selfHosted.LinkedInfo != null)
                    {
                        return new PSLinkedIntegrationRuntimeStatus(
                            integrationRuntime,
                            (SelfHostedIntegrationRuntimeStatus)status.Properties,
                            resourceGroupName,
                            workspaceName,
                            _synapseManagementClient.DeserializationSettings,
                            selfHosted.LinkedInfo is LinkedIntegrationRuntimeKeyAuthorization
                                ? SynapseConstants.LinkedIntegrationRuntimeKeyAuth
                                : SynapseConstants.LinkedIntegrationRuntimeRbacAuth,
                            status.Name,
                            status.Properties.DataFactoryName);
                    }

                    return new PSSelfHostedIntegrationRuntimeStatus(
                        integrationRuntime,
                        (SelfHostedIntegrationRuntimeStatus)status.Properties,
                        resourceGroupName,
                        workspaceName,
                        _synapseManagementClient.DeserializationSettings);
                }
            }

            // Don't support get status for legacy integraiton runtime.
            throw new PSInvalidOperationException("This type of integration runtime is not supported by this version powershell cmdlets.");
        }

        public virtual async Task<PSIntegrationRuntimeKeys> GetIntegrationRuntimeKeyAsync(
            string resourceGroupName,
            string workspaceName,
            string integrationRuntimeName)
        {
            try
            {
                if (string.IsNullOrEmpty(resourceGroupName))
                {
                    resourceGroupName = GetResourceGroupByWorkspaceName(workspaceName);
                }

                var response = await _synapseManagementClient.IntegrationRuntimeAuthKeys.ListWithHttpMessagesAsync(
                resourceGroupName,
                workspaceName,
                integrationRuntimeName);

                return new PSIntegrationRuntimeKeys(response.Body.AuthKey1, response.Body.AuthKey2);
            }
            catch (ErrorContractException ex)
            {
                throw GetAzurePowerShellException(ex);
            }
        }

        public virtual async Task<PSIntegrationRuntimeMetrics> GetIntegrationRuntimeMetricAsync(
            string resourceGroupName,
            string workspaceName,
            string integrationRuntimeName)
        {
            try
            {
                if (string.IsNullOrEmpty(resourceGroupName))
                {
                    resourceGroupName = GetResourceGroupByWorkspaceName(workspaceName);
                }

                var data = await _synapseManagementClient.IntegrationRuntimeMonitoringData.ListWithHttpMessagesAsync(
                resourceGroupName,
                workspaceName,
                integrationRuntimeName);

                return new PSIntegrationRuntimeMetrics(data.Body, resourceGroupName, workspaceName);
            }
            catch (ErrorContractException ex)
            {
                throw GetAzurePowerShellException(ex);
            }
        }

        public virtual async Task<AzureOperationResponse<IntegrationRuntimeNodeIpAddress>> GetIntegrationRuntimeNodeIpAsync(
            string resourceGroupName,
            string workspaceName,
            string integrationRuntimeName,
            string nodeName)
        {
            try
            {
                if (string.IsNullOrEmpty(resourceGroupName))
                {
                    resourceGroupName = GetResourceGroupByWorkspaceName(workspaceName);
                }

                return await _synapseManagementClient.IntegrationRuntimeNodeIpAddress.GetWithHttpMessagesAsync(
                resourceGroupName,
                workspaceName,
                integrationRuntimeName,
                nodeName);
            }
            catch (ErrorContractException ex)
            {
                throw GetAzurePowerShellException(ex);
            }
        }

        public virtual async Task UpgradeIntegrationRuntimeAsync(
            string resourceGroupName,
            string workspaceName,
            string integrationRuntimeName)
        {
            try
            {
                if (string.IsNullOrEmpty(resourceGroupName))
                {
                    resourceGroupName = GetResourceGroupByWorkspaceName(workspaceName);
                }

                await _synapseManagementClient.IntegrationRuntimes.UpgradeAsync(
                resourceGroupName,
                workspaceName,
                integrationRuntimeName);
            }
            catch (ErrorContractException ex)
            {
                throw GetAzurePowerShellException(ex);
            }
        }

        public virtual async Task<PSIntegrationRuntimeKeys> RegenerateIntegrationRuntimeAuthKeyAsync(
            string resourceGroupName,
            string workspaceName,
            string integrationRuntimeName,
            string keyName)
        {
            try
            {
                if (string.IsNullOrEmpty(resourceGroupName))
                {
                    resourceGroupName = GetResourceGroupByWorkspaceName(workspaceName);
                }

                var response =
                await _synapseManagementClient.IntegrationRuntimeAuthKeys.RegenerateWithHttpMessagesAsync(
                    resourceGroupName,
                    workspaceName,
                    integrationRuntimeName,
                    new IntegrationRuntimeRegenerateKeyParameters(keyName));

                return new PSIntegrationRuntimeKeys(response.Body.AuthKey1, response.Body.AuthKey2);
            }
            catch (ErrorContractException ex)
            {
                throw GetAzurePowerShellException(ex);
            }
        }

        internal async Task<bool> CheckIntegrationRuntimeExistsAsync(
            string resourceGroupName,
            string workspaceName,
            string integrationRuntimeName)
        {
            try
            {
                if (string.IsNullOrEmpty(resourceGroupName))
                {
                    resourceGroupName = GetResourceGroupByWorkspaceName(workspaceName);
                }

                PSIntegrationRuntime integrationRuntime = await this.GetIntegrationRuntimeAsync(
                    resourceGroupName,
                    workspaceName,
                    integrationRuntimeName);

                return integrationRuntime != null;
            }
            catch (ErrorContractException ex)
            {
                throw GetAzurePowerShellException(ex);
            }
            catch (CloudException e)
            {
                // Get throws Exception message with NotFound Status
                if (e.Response.StatusCode == HttpStatusCode.NotFound)
                {
                    return false;
                }

                throw;
            }
        }

        public virtual async Task<HttpStatusCode> DeleteIntegrationRuntimeAsync(
            string resourceGroupName,
            string workspaceName,
            string integrationRuntimeName)
        {
            try
            {
                if (string.IsNullOrEmpty(resourceGroupName))
                {
                    resourceGroupName = GetResourceGroupByWorkspaceName(workspaceName);
                }

                var response = await _synapseManagementClient.IntegrationRuntimes.DeleteWithHttpMessagesAsync(
                resourceGroupName,
                workspaceName,
                integrationRuntimeName);

                return response.Response.StatusCode;
            }
            catch (ErrorContractException ex)
            {
                throw GetAzurePowerShellException(ex);
            }
        }

        public virtual async Task<HttpStatusCode> RemoveIntegrationRuntimeNodeAsync(
            string resourceGroupName,
            string workspaceName,
            string integrationRuntimeName,
            string nodeName)
        {
            try
            {
                if (string.IsNullOrEmpty(resourceGroupName))
                {
                    resourceGroupName = GetResourceGroupByWorkspaceName(workspaceName);
                }

                var response = await _synapseManagementClient.IntegrationRuntimeNodes.DeleteWithHttpMessagesAsync(
                resourceGroupName,
                workspaceName,
                integrationRuntimeName,
                nodeName);

                return response.Response.StatusCode;
            }
            catch (ErrorContractException ex)
            {
                throw GetAzurePowerShellException(ex);
            }
        }

        public virtual PSIntegrationRuntime CreateOrUpdateIntegrationRuntime(CreatePSIntegrationRuntimeParameters parameters)
        {
            try
            {
                if (string.IsNullOrEmpty(parameters.ResourceGroupName))
                {
                    parameters.ResourceGroupName = GetResourceGroupByWorkspaceName(parameters.WorkspaceName);
                }

                PSIntegrationRuntime psIntegrationRuntime = null;

                Action createOrUpdateIntegrationRuntime = () =>
                {
                    var integrationRuntime = this.CreateOrUpdateIntegrationRuntimeAsync(
                        parameters.ResourceGroupName,
                        parameters.WorkspaceName,
                        parameters.Name,
                        parameters.IntegrationRuntimeResource).ConfigureAwait(true).GetAwaiter().GetResult();

                    var managed = integrationRuntime.Body.Properties as ManagedIntegrationRuntime;
                    if (managed != null)
                    {
                        psIntegrationRuntime = new PSManagedIntegrationRuntime(integrationRuntime.Body,
                                parameters.ResourceGroupName,
                                parameters.WorkspaceName);
                    }
                    else
                    {
                        psIntegrationRuntime = CreateSelfHostedIntegrationRuntime(integrationRuntime.Body,
                            parameters.ResourceGroupName,
                            parameters.WorkspaceName);
                    }
                };

                parameters.ConfirmAction(
                        parameters.Force,  // prompt only if the integration runtime exists
                        string.Format(
                            CultureInfo.InvariantCulture,
                            Resources.IntegrationRuntimeExists,
                            parameters.Name,
                            parameters.WorkspaceName),
                        string.Format(
                            CultureInfo.InvariantCulture,
                            Resources.UpdatingIntegrationRuntime,
                            parameters.Name,
                            parameters.WorkspaceName),
                        parameters.Name,
                        createOrUpdateIntegrationRuntime,
                        () => parameters.IsUpdate);

                return psIntegrationRuntime;
            }
            catch (ErrorContractException ex)
            {
                throw GetAzurePowerShellException(ex);
            }
        }

        public virtual async Task<AzureOperationResponse<IntegrationRuntimeResource>> CreateOrUpdateIntegrationRuntimeAsync(
            string resourceGroupName,
            string dataFactoryName,
            string integrationRuntimeName,
            IntegrationRuntimeResource resource)
        {
            return await _synapseManagementClient.IntegrationRuntimes.CreateWithHttpMessagesAsync(
                    resourceGroupName,
                    dataFactoryName,
                    integrationRuntimeName,
                    resource);
        }

        public virtual async Task SyncIntegrationRuntimeCredentialInNodesAsync(
            string resourceGroupName,
            string workspaceName,
            string integrationRuntimeName)
        {
            try
            {
                if (string.IsNullOrEmpty(resourceGroupName))
                {
                    resourceGroupName = GetResourceGroupByWorkspaceName(workspaceName);
                }
            }
            catch (ErrorContractException ex)
            {
                throw GetAzurePowerShellException(ex);
            }

            await _synapseManagementClient.IntegrationRuntimeCredentials.SyncWithHttpMessagesAsync(
                resourceGroupName,
                workspaceName,
                integrationRuntimeName);
        }

        public JsonSerializerSettings GetSerializationSettings()
        {
            return _synapseManagementClient.SerializationSettings;
        }

        public virtual async Task<PSIntegrationRuntime> UpdateIntegrationRuntimeAsync(
            string resourceGroupName,
            string workspaceName,
            string integrationRuntimeName,
            IntegrationRuntimeResource resource,
            UpdateIntegrationRuntimeRequest request)
        {
            try
            {
                if (string.IsNullOrEmpty(resourceGroupName))
                {
                    resourceGroupName = GetResourceGroupByWorkspaceName(workspaceName);
                }
            }
            catch (ErrorContractException ex)
            {
                throw GetAzurePowerShellException(ex);
            }

            var response = await _synapseManagementClient.IntegrationRuntimes.UpdateAsync(
                resourceGroupName,
                workspaceName,
                integrationRuntimeName,
                request);

            return new PSSelfHostedIntegrationRuntime(
                response,
                resourceGroupName,
                workspaceName);
        }

        public virtual async Task<SelfHostedIntegrationRuntimeNode> UpdateIntegrationRuntimeNodesAsync(
            string resourceGroupName,
            string workspaceName,
            string integrationRuntimeName,
            string nodeName,
            UpdateIntegrationRuntimeNodeRequest request)
        {
            try
            {
                if (string.IsNullOrEmpty(resourceGroupName))
                {
                    resourceGroupName = GetResourceGroupByWorkspaceName(workspaceName);
                }
            }
            catch (ErrorContractException ex)
            {
                throw GetAzurePowerShellException(ex);
            }

            return await _synapseManagementClient.IntegrationRuntimeNodes.UpdateAsync(
                resourceGroupName,
                workspaceName,
                integrationRuntimeName,
                nodeName,
                request);
        }

        #endregion

        #region helpers

        private static List<T> ListResources<T>(
            IPage<T> firstPage,
            Func<string, IPage<T>> listNext)
        {
            var resourceList = new List<T>();
            var response = firstPage;
            resourceList.AddRange(response);

            while (!string.IsNullOrEmpty(response.NextPageLink))
            {
                response = listNext(response.NextPageLink);
                resourceList.AddRange(response);
            }

            return resourceList;
        }

        private static Exception GetAzurePowerShellException(ErrorContractException ex)
        {
            return Utils.CreateAzurePowerShellException(ex);
        }

        private static Exception GetAzurePowerShellException(CloudException ex)
        {
            return Utils.CreateAzurePowerShellException(ex);
        }

        #endregion
    }
}

---- Transformed Tree ----
using Microsoft.Azure.Commands.Common.Authentication;
using Microsoft.Azure.Commands.Common.Authentication.Abstractions;
using Microsoft.Azure.Commands.Common.Exceptions;
using Microsoft.Azure.Commands.Common.Strategies;
using Microsoft.Azure.Commands.Synapse.Common;
using Microsoft.Azure.Commands.Synapse.Properties;
using Microsoft.Azure.Commands.Synapse.VulnerabilityAssessment.Model;
using Microsoft.Azure.Graph.RBAC.Version1_6.ActiveDirectory;
using Microsoft.Azure.Graph.RBAC.Version1_6.Models;
using Microsoft.Azure.Management.Internal.Resources;
using Microsoft.Azure.Management.Internal.Resources.Models;
using Microsoft.Azure.Management.Internal.Resources.Utilities.Models;
using Microsoft.Azure.Management.Monitor.Version2018_09_01;
using Microsoft.Azure.Management.Storage.Version2017_10_01;
using Microsoft.Azure.Management.Synapse;
using Microsoft.Azure.Management.Synapse.Models;
using Microsoft.Rest;
using Microsoft.Rest.Azure;
using Microsoft.Rest.Azure.OData;
using Microsoft.WindowsAzure.Commands.Utilities.Common;
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;
using System;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Management.Automation;
using System.Net;
using System.Net.Http;
using System.Reflection;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using TriggerType = Microsoft.Azure.Commands.Synapse.VulnerabilityAssessment.Model.TriggerType;
using Action = System.Action;
using ResourceIdentityType = Microsoft.Azure.Management.Synapse.Models.ResourceIdentityType;
using Microsoft.Azure.Commands.Synapse.Model;

namespace Microsoft.Azure.Commands.Synapse.Models
{
    public class SynapseAnalyticsManagementClient
    {
        public IAzureContext Context;
        private readonly Guid _subscriptionId;
        private readonly Guid _tenantId;
        private readonly SynapseManagementClient _synapseManagementClient;
        private readonly SynapseSqlV3ManagementClient _synapseSqlV3ManagementClient;
        private ActiveDirectoryClient _activeDirectoryClient;
        private ResourceManagementClient _resourceManagementClient;
        private StorageManagementClient _storageManagementClient;

        public SynapseAnalyticsManagementClient(IAzureContext context)
        {
            if (context == null)
            {
                throw new AzPSInvalidOperationException(Resources.InvalidDefaultSubscription);
            }

            Context = context;

            _subscriptionId = context.Subscription.GetId();

            _tenantId = context.Tenant.GetId();

            _synapseManagementClient = SynapseCmdletBase.CreateSynapseClient<SynapseManagementClient>(context,
                AzureEnvironment.Endpoint.ResourceManager);

            _synapseSqlV3ManagementClient = SynapseCmdletBase.CreateSynapseClient<SynapseSqlV3ManagementClient>(context,
                AzureEnvironment.Endpoint.ResourceManager);
        }

        public ActiveDirectoryClient ActiveDirectoryClient
        {
            get
            {
                if (_activeDirectoryClient == null)
                {
                    _activeDirectoryClient = new ActiveDirectoryClient(Context);
                }
                return this._activeDirectoryClient;
            }

            set { this._activeDirectoryClient = value; }
        }

        public ResourceManagementClient ResourceManagementClient
        {
            get
            {
                if (_resourceManagementClient == null)
                {
                    _resourceManagementClient = AzureSession.Instance.ClientFactory.CreateArmClient<ResourceManagementClient>(Context,
                        AzureEnvironment.Endpoint.ResourceManager);
                }
                return this._resourceManagementClient;
            }

            set { this._resourceManagementClient = value; }
        }

        public StorageManagementClient StorageManagementClient
        {
            get
            {
                if (_storageManagementClient == null)
                {
                    _storageManagementClient = AzureSession.Instance.ClientFactory.CreateArmClient<StorageManagementClient>(Context,
                        AzureEnvironment.Endpoint.ResourceManager);
                }
                return this._storageManagementClient;
            }

            set { this._storageManagementClient = value; }
        }

        #region Workspace operations

        public Workspace CreateWorkspace(string resourceGroupName, string workspaceName, Workspace createParams)
        {
            try
            {
                return _synapseManagementClient.Workspaces.CreateOrUpdate(resourceGroupName, workspaceName, createParams);
            }
            catch (ErrorContractException ex)
            {
                throw GetAzurePowerShellException(ex);
            }
        }

        public Workspace UpdateWorkspace(string resourceGroupName, string workspaceName, WorkspacePatchInfo updateParams)
        {
            try
            {
                return _synapseManagementClient.Workspaces.Update(resourceGroupName, workspaceName, updateParams);
            }
            catch (ErrorContractException ex)
            {
                throw GetAzurePowerShellException(ex);
            }
        }

        internal Workspace GetWorkspace(string resourceGroupName, string workspaceName)
        {
            try
            {
                if (string.IsNullOrEmpty(resourceGroupName))
                {
                    resourceGroupName = GetResourceGroupByWorkspaceName(workspaceName);
                }

                return _synapseManagementClient.Workspaces.Get(resourceGroupName, workspaceName);
            }
            catch (ErrorContractException ex)
            {
                throw GetAzurePowerShellException(ex);
            }
        }

        internal Workspace GetWorkspaceOrDefault(string resourceGroupName, string workspaceName)
        {
            try
            {
                return GetWorkspace(resourceGroupName, workspaceName);
            }
            catch
            {
                return null;
            }
        }

        public List<Workspace> ListWorkspaces(string resourceGroupName = null)
        {
            try
            {
                var firstPage = string.IsNullOrEmpty(resourceGroupName)
                     ? _synapseManagementClient.Workspaces.List()
                     : _synapseManagementClient.Workspaces.ListByResourceGroup(resourceGroupName);

                return ListResources(firstPage, _synapseManagementClient.Workspaces.ListNext);
            }
            catch (ErrorContractException ex)
            {
                throw GetAzurePowerShellException(ex);
            }
        }

        public void DeleteWorkspace(string resourceGroupName, string workspaceName)
        {

            if (string.IsNullOrEmpty(resourceGroupName))
            {
                resourceGroupName = GetResourceGroupByWorkspaceName(workspaceName);
            }

            if (!TestWorkspace(resourceGroupName, workspaceName))
            {
                throw new InvalidOperationException(string.Format(Properties.Resources.WorkspaceDoesNotExist, workspaceName));
            }

            try
            {
                _synapseManagementClient.Workspaces.Delete(resourceGroupName, workspaceName);
            }
            catch (CloudException ex)
            {
                if (ex.Response.StatusCode == HttpStatusCode.NotFound)
                {
                    // parent resource not found, indicates the workspace is deleted successfully.
                    // TODO: investigate why this error is thrown.
                }
                else
                {
                    throw GetAzurePowerShellException(ex);
                }
            }
        }

        public IpFirewallRuleInfo CreateOrUpdateWorkspaceFirewallRule(
            string resourceGroupName,
            string workspaceName,
            string ruleName,
            IpFirewallRuleInfo createOrUpdateParams)
        {
            try
            {
                if (string.IsNullOrEmpty(resourceGroupName))
                {
                    resourceGroupName = GetResourceGroupByWorkspaceName(workspaceName);
                }
                return _synapseManagementClient.IpFirewallRules.CreateOrUpdate(
                    resourceGroupName,
                    workspaceName,
                    ruleName,
                    createOrUpdateParams);
            }
            catch (ErrorContractException ex)
            {
                throw GetAzurePowerShellException(ex);
            }
        }

        public IpFirewallRuleInfo GetFirewallRule(string resourceGroupName, string workspaceName, string ruleName)
        {
            try
            {
                if (string.IsNullOrEmpty(resourceGroupName))
                {
                    resourceGroupName = GetResourceGroupByWorkspaceName(workspaceName);
                }

                return _synapseManagementClient.IpFirewallRules.Get(resourceGroupName, workspaceName, ruleName);
            }
            catch (ErrorContractException ex)
            {
                throw GetAzurePowerShellException(ex);
            }
        }

        public List<IpFirewallRuleInfo> ListFirewallRules(string resourceGroupName, string workspaceName)
        {
            try
            {
                if (string.IsNullOrEmpty(resourceGroupName))
                {
                    resourceGroupName = GetResourceGroupByWorkspaceName(workspaceName);
                }

                var firstPage = _synapseManagementClient.IpFirewallRules.ListByWorkspace(resourceGroupName, workspaceName);
                return ListResources(firstPage, _synapseManagementClient.IpFirewallRules.ListByWorkspaceNext);
            }
            catch
            {
                throw new AzPSResourceNotFoundCloudException(string.Format(Properties.Resources.FailedToDiscoverFirewallRuleByWorkspace, workspaceName));
            }
        }

        public void DeleteFirewallRule(string resourceGroupName, string workspaceName, string ruleName)
        {

            if (string.IsNullOrEmpty(resourceGroupName))
            {
                resourceGroupName = GetResourceGroupByWorkspaceName(workspaceName);
            }

            if (!TestWorkspace(resourceGroupName, workspaceName))
            {
                throw new InvalidOperationException(string.Format(Properties.Resources.WorkspaceDoesNotExist, workspaceName));
            }


            if (!TestFirewallRule(resourceGroupName, workspaceName, ruleName))
            {
                throw new InvalidOperationException(string.Format(Properties.Resources.FirewallRuleDoesNotExist, ruleName));
            }

            try
            {
                _synapseManagementClient.IpFirewallRules.Delete(resourceGroupName, workspaceName, ruleName);
            }
            catch (CloudException ex)
            {
                throw GetAzurePowerShellException(ex);
            }
        }

        public bool TestWorkspace(string resourceGroupName, string workspaceName)
        {
            try
            {
                GetWorkspace(resourceGroupName, workspaceName);
                return true;
            }
            catch (AzPSResourceNotFoundCloudException)
            {
                return false;
            }
        }

        public bool TestFirewallRule(string resourceGroupName, string workspaceName, string ruleName)
        {
            try
            {
                GetFirewallRule(resourceGroupName, workspaceName, ruleName);
                return true;
            }
            catch (AzPSResourceNotFoundCloudException)
            {
                return false;
            }
        }

        public string GetResourceGroupByWorkspaceName(string workspaceName)
        {
            var workspaceId = ListWorkspaces()
                    .FirstOrDefault(x => x.Name.Equals(workspaceName, StringComparison.InvariantCultureIgnoreCase))
                    ?.Id;

            if (workspaceId == null)
            {
                throw new AzPSResourceNotFoundCloudException(string.Format(Properties.Resources.FailedToDiscoverResourceGroup, workspaceName, _subscriptionId));
            }

            try
            {
                return new ResourceIdentifier(workspaceId).ResourceGroupName;
            }
            catch
            {
                throw new AzPSResourceNotFoundCloudException(string.Format(Properties.Resources.FailedToDiscoverResourceGroup, workspaceName, _subscriptionId));
            }
        }

        #endregion

        #region Workspace SQL Active Directory Administrator

        public WorkspaceAadAdminInfo GetSqlActiveDirectoryAdministrators(string resourceGroupName, string workspaceName)
        {
            try
            {
                return _synapseManagementClient.WorkspaceAadAdmins.Get(resourceGroupName, workspaceName);
            }
            catch (CloudException ex)
            {
                throw GetAzurePowerShellException(ex);
            }
        }

        public WorkspaceAadAdminInfo CreateOrUpdateSqlActiveDirectoryAdministrators(string resourceGroupName, string workspaceName, string displayName, Guid objectId)
        {
            try
            {
                return _synapseManagementClient.WorkspaceAadAdmins.CreateOrUpdate(resourceGroupName, workspaceName, GetActiveDirectoryInformation(displayName, objectId));
            }
            catch (CloudException ex)
            {
                throw GetAzurePowerShellException(ex);
            }
        }

        private WorkspaceAadAdminInfo GetActiveDirectoryInformation(string displayName, Guid objectId)
        {
            // Gets the default Tenant id for the subscriptions
            Guid tenantId = _tenantId;

            // Check for a Azure Active Directory group. Recommended to always use group.
            IEnumerable<PSADGroup> groupList = null;
            PSADGroup group = null;

            var filter = new ADObjectFilterOptions()
            {
                Id = (objectId != null && objectId != Guid.Empty) ? objectId.ToString() : null,
                SearchString = displayName,
                Paging = true,
            };

            // Get a list of groups from Azure Active Directory
            groupList = ActiveDirectoryClient.FilterGroups(filter).Where(gr => string.Equals(gr.DisplayName, displayName, StringComparison.OrdinalIgnoreCase));

            if (groupList != null && groupList.Count() > 1)
            {
                // More than one group was found with that display name.
                throw new ArgumentException(string.Format(Resources.ADGroupMoreThanOneFound, displayName));
            }
            else if (groupList != null && groupList.Count() == 1)
            {
                // Only one group was found. Get the group display name and object id
                group = groupList.First();

                // Only support Security Groups
                if (group.SecurityEnabled.HasValue && !group.SecurityEnabled.Value)
                {
                    throw new ArgumentException(string.Format(Resources.InvalidADGroupNotSecurity, displayName));
                }
            }

            // Lookup for serviceprincipals
            ODataQuery<ServicePrincipal> odataQueryFilter;

            if ((objectId != null && objectId != Guid.Empty))
            {
                var applicationIdString = objectId.ToString();
                odataQueryFilter = new Rest.Azure.OData.ODataQuery<ServicePrincipal>(a => a.AppId == applicationIdString);
            }
            else
            {
                odataQueryFilter = new Rest.Azure.OData.ODataQuery<ServicePrincipal>(a => a.DisplayName == displayName);
            }

            var servicePrincipalList = ActiveDirectoryClient.FilterServicePrincipals(odataQueryFilter);

            if (servicePrincipalList != null && servicePrincipalList.Count() > 1)
            {
                // More than one service principal was found.
                throw new ArgumentException(string.Format(Resources.ADApplicationMoreThanOneFound, displayName));
            }
            else if (servicePrincipalList != null && servicePrincipalList.Count() == 1)
            {
                // Only one user was found. Get the user display name and object id
                PSADServicePrincipal app = servicePrincipalList.First();

                if (displayName != null && string.CompareOrdinal(displayName, app.DisplayName) != 0)
                {
                    throw new ArgumentException(string.Format(Resources.ADApplicationDisplayNameMismatch, displayName, app.DisplayName));
                }

                if (group != null)
                {
                    throw new ArgumentException(string.Format(Resources.ADDuplicateGroupAndApplicationFound, displayName));
                }

                return new WorkspaceAadAdminInfo()
                {
                    Login = displayName,
                    Sid = app.ApplicationId.ToString(),
                    TenantId = tenantId.ToString()
                };
            }

            if (group != null)
            {
                return new WorkspaceAadAdminInfo()
                {
                    Login = group.DisplayName,
                    Sid = group.Id.ToString(),
                    TenantId = tenantId.ToString()
                };
            }

            // No group or service principal was found. Check for a user
            filter = new ADObjectFilterOptions()
            {
                Id = (objectId != null && objectId != Guid.Empty) ? objectId.ToString() : null,
                SearchString = displayName,
                Paging = true,
            };

            // Get a list of user from Azure Active Directory
            var userList = ActiveDirectoryClient.FilterUsers(filter).Where(gr => string.Equals(gr.DisplayName, displayName, StringComparison.OrdinalIgnoreCase));

            // No user was found. Check if the display name is a UPN
            if (userList == null || !userList.Any())
            {
                // Check if the display name is the UPN
                filter = new ADObjectFilterOptions()
                {
                    Id = (objectId != null && objectId != Guid.Empty) ? objectId.ToString() : null,
                    UPN = displayName,
                    Paging = true,
                };

                userList = ActiveDirectoryClient.FilterUsers(filter).Where(gr => string.Equals(gr.UserPrincipalName, displayName, StringComparison.OrdinalIgnoreCase));
            }

            // No user was found. Check if the display name is a guest user. 
            if (userList == null || !userList.Any())
            {
                // Check if the display name is the UPN
                filter = new ADObjectFilterOptions()
                {
                    Id = (objectId != null && objectId != Guid.Empty) ? objectId.ToString() : null,
                    Mail = displayName,
                    Paging = true,
                };

                userList = ActiveDirectoryClient.FilterUsers(filter);
            }

            // No user was found
            if (userList == null || !userList.Any())
            {
                throw new ArgumentException(string.Format(Resources.ADObjectNotFound, displayName));
            }
            else if (userList.Count() > 1)
            {
                // More than one user was found.
                throw new ArgumentException(string.Format(Resources.ADUserMoreThanOneFound, displayName));
            }
            else
            {
                // Only one user was found. Get the user display name and object id
                var obj = userList.First();

                return new WorkspaceAadAdminInfo()
                {
                    Login = displayName,
                    Sid = obj.Id.ToString(),
                    TenantId = tenantId.ToString()
                };
            }
        }

        public void DeleteSqlActiveDirectoryAdministrators(string resourceGroupName, string workspaceName)
        {
            try
            {
                if (string.IsNullOrEmpty(resourceGroupName))
                {
                    resourceGroupName = GetResourceGroupByWorkspaceName(workspaceName);
                }

                _synapseManagementClient.WorkspaceAadAdmins.Delete(resourceGroupName, workspaceName);
            }
            catch (CloudException ex)
            {
                throw GetAzurePowerShellException(ex);
            }
        }

        #endregion

        #region Auditing

        public SqlPoolAuditModel GetSqlPoolAudit(string resourceGroupName, string workspaceName, string sqlPoolName)
        {
            try
            {
                if (string.IsNullOrEmpty(resourceGroupName))
                {
                    resourceGroupName = GetResourceGroupByWorkspaceName(workspaceName);
                }

                var policy = this._synapseManagementClient.ExtendedSqlPoolBlobAuditingPolicies.Get(resourceGroupName, workspaceName, sqlPoolName);
                var model = new SqlPoolAuditModel
                {
                    ResourceGroupName = resourceGroupName,
                    WorkspaceName = workspaceName,
                    SqlPoolName = sqlPoolName
                };

                model.IsAzureMonitorTargetEnabled = policy.IsAzureMonitorTargetEnabled;
                model.PredicateExpression = policy.PredicateExpression;
                model.AuditActionGroup = ExtractAuditActionGroups(policy.AuditActionsAndGroups);
                model.AuditAction = ExtractAuditActions(policy.AuditActionsAndGroups);
                ModelizeStorageInfo(model, policy.StorageEndpoint, policy.IsStorageSecondaryKeyInUse, policy.StorageAccountSubscriptionId,
                    IsAuditEnabled(policy.State), policy.RetentionDays);
                model.BlobStorageTargetState = policy.State == BlobAuditingPolicyState.Enabled ? AuditStateType.Enabled : AuditStateType.Disabled;

                return model;
            }
            catch (CloudException ex)
            {
                throw GetAzurePowerShellException(ex);
            }
        }

        private AuditActionGroup[] ExtractAuditActionGroups(IEnumerable<string> auditActionsAndGroups)
        {
            var groups = new List<AuditActionGroup>();
            auditActionsAndGroups?.ForEach(item =>
{
    if (Enum.TryParse(item, true, out AuditActionGroup group))
    {
        groups.Add(group);
    }
});

            return groups.ToArray();
        }

        private string[] ExtractAuditActions(IEnumerable<string> auditActionsAndGroups)
        {
            var actions = new List<string>();
            auditActionsAndGroups?.ForEach(item =>
{
    if (!Enum.TryParse(item, true, out AuditActionGroup group))
    {
        actions.Add(item);
    }
});

            return actions.ToArray();
        }

        private void ModelizeStorageInfo(WorkspaceAuditModel model,
            string storageEndpoint, bool? isSecondary, Guid? storageAccountSubscriptionId,
            bool isAuditEnabled, int? retentionDays)
        {
            if (string.IsNullOrEmpty(storageEndpoint))
            {
                return;
            }

            model.StorageKeyType = GetStorageKeyKind(isSecondary);

            if (isAuditEnabled)
            {
                if (storageAccountSubscriptionId == null || Guid.Empty.Equals(storageAccountSubscriptionId))
                {
                    storageAccountSubscriptionId = _subscriptionId;
                }

                model.StorageAccountResourceId = RetrieveStorageAccountIdAsync(
                    storageAccountSubscriptionId.Value,
                    GetStorageAccountName(storageEndpoint)).GetAwaiter().GetResult();

                model.RetentionInDays = Convert.ToUInt32(retentionDays);
            }
        }

        internal async Task<string> RetrieveStorageAccountIdAsync(Guid storageAccountSubscriptionId, string storageAccountName)
        {
            // Build a URI for calling corresponding REST-API.
            //
            var uriBuilder = new StringBuilder(Context.Environment.GetEndpointAsUri(AzureEnvironment.Endpoint.ResourceManager).ToString());
            uriBuilder.AppendFormat("/resources?api-version=2018-05-01&$filter=(subscriptionId%20eq%20'{0}')%20and%20((resourceType%20eq%20'microsoft.storage/storageaccounts')%20or%20(resourceType%20eq%20'microsoft.classicstorage/storageaccounts'))%20and%20(name%20eq%20'{1}')",
                storageAccountSubscriptionId,
                storageAccountName);

            var nextLink = uriBuilder.ToString();
            string id = null;
            while (!string.IsNullOrEmpty(nextLink))
            {
                JToken response = await SendAsync(nextLink, HttpMethod.Get, new Exception(string.Format(Properties.Resources.RetrievingStorageAccountIdUnderSubscriptionFailed, storageAccountName, storageAccountSubscriptionId)));
                var valuesArray = (JArray)response["value"];
                if (valuesArray.HasValues)
                {
                    var idValueToken = valuesArray[0];
                    id = (string)idValueToken["id"];
                    if (string.IsNullOrEmpty(id))
                    {
                        throw new Exception(string.Format(Resources.RetrievingStorageAccountIdUnderSubscriptionFailed, storageAccountName, storageAccountSubscriptionId));
                    }
                }
                nextLink = (string)response["nextLink"];
            }

            if (string.IsNullOrEmpty(id))
            {
                throw new Exception(string.Format(Resources.StorageAccountNotFound, storageAccountName));
            }

            return id;
        }

        internal async Task<JToken> SendAsync(string url, HttpMethod method, Exception exceptionToThrowOnFailure)
        {
            var httpRequest = new HttpRequestMessage { Method = method, RequestUri = new Uri(url) };
            await ResourceManagementClient.Credentials.ProcessHttpRequestAsync(httpRequest, CancellationToken.None).ConfigureAwait(false);
            var httpResponse = await ResourceManagementClient.HttpClient.SendAsync(httpRequest, CancellationToken.None).ConfigureAwait(false);
            if (!httpResponse.IsSuccessStatusCode)
            {
                throw exceptionToThrowOnFailure;
            }

            return JToken.Parse(await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
        }

        private static string GetStorageAccountName(string storageEndpoint)
        {
            int accountNameStartIndex = storageEndpoint.StartsWith("https://", StringComparison.InvariantCultureIgnoreCase) ? 8 : 7; // https:// or http://
            int accountNameEndIndex = storageEndpoint.IndexOf(".blob", StringComparison.InvariantCultureIgnoreCase);
            return storageEndpoint.Substring(accountNameStartIndex, accountNameEndIndex - accountNameStartIndex);
        }

        private StorageKeyKind GetStorageKeyKind(bool? isSecondary)
        {
            if (isSecondary.HasValue)
            {
                return isSecondary.Value ? StorageKeyKind.Secondary : StorageKeyKind.Primary;
            }

            return StorageKeyKind.Primary;
        }

        private bool IsAuditEnabled(BlobAuditingPolicyState state)
        {
            return state == BlobAuditingPolicyState.Enabled;
        }

        public void CreateOrUpdateSqlPoolAudit(SqlPoolAuditModel model)
        {
            try
            {
                if (string.IsNullOrEmpty(model.PredicateExpression))
                {
                    SqlPoolBlobAuditingPolicy policy = new SqlPoolBlobAuditingPolicy();
                    PolicizeAuditModel(model, policy);
                    _synapseManagementClient.SqlPoolBlobAuditingPolicies.CreateOrUpdate(model.ResourceGroupName, model.WorkspaceName, model.SqlPoolName, policy);
                }
                else
                {
                    ExtendedSqlPoolBlobAuditingPolicy policy = new ExtendedSqlPoolBlobAuditingPolicy
                    {
                        PredicateExpression = model.PredicateExpression
                    };

                    PolicizeAuditModel(model, policy);
                    _synapseManagementClient.ExtendedSqlPoolBlobAuditingPolicies.CreateOrUpdate(model.ResourceGroupName, model.WorkspaceName, model.SqlPoolName, policy);
                }
            }
            catch (CloudException ex)
            {
                throw GetAzurePowerShellException(ex);
            }
        }

        private void PolicizeAuditModel(WorkspaceAuditModel model, dynamic policy)
        {
            policy.State = model.BlobStorageTargetState == AuditStateType.Enabled ?
                           BlobAuditingPolicyState.Enabled : BlobAuditingPolicyState.Disabled;

            policy.IsAzureMonitorTargetEnabled = model.IsAzureMonitorTargetEnabled;
            if (model is SqlPoolAuditModel dbModel)
            {
                policy.AuditActionsAndGroups = ExtractAuditActionsAndGroups(dbModel.AuditActionGroup, dbModel.AuditAction);
            }
            else
            {
                policy.AuditActionsAndGroups = ExtractAuditActionsAndGroups(model.AuditActionGroup);
            }

            if (model.BlobStorageTargetState == AuditStateType.Enabled)
            {
                const string separator = "subscriptions/";
                string storageAccountResourceId = model.StorageAccountResourceId.Substring(model.StorageAccountResourceId.IndexOf(separator) + separator.Length);
                string[] segments = storageAccountResourceId.Split('/');
                Guid storageAccountSubscriptionId = Guid.Parse(segments[0]);
                string storageAccountName = segments[6];
                policy.StorageEndpoint = string.Format("https://{0}.blob.{1}", storageAccountName, Context.Environment.GetEndpoint(AzureEnvironment.Endpoint.StorageEndpointSuffix));
                policy.StorageAccountSubscriptionId = storageAccountSubscriptionId;

                if (IsStorageAccountInVNet(model.StorageAccountResourceId))
                {
                    Guid? principalId = AssignServerIdentityIfNotAssigned(model.ResourceGroupName, model.WorkspaceName);
                    AssignRoleForServerIdentityOnStorageIfNotAssigned(model.StorageAccountResourceId, principalId.Value, default(Guid));
                }
                else
                {
                    policy.IsStorageSecondaryKeyInUse = model.StorageKeyType == StorageKeyKind.Secondary;
                    policy.StorageAccountAccessKey = RetrieveStorageKeysAsync(
                        model.StorageAccountResourceId).GetAwaiter().GetResult()[model.StorageKeyType == StorageKeyKind.Secondary ? StorageKeyKind.Secondary : StorageKeyKind.Primary];
                }

                if (model.RetentionInDays != null)
                {
                    policy.RetentionDays = (int)model.RetentionInDays;
                }
            }
        }

        private static IList<string> ExtractAuditActionsAndGroups(AuditActionGroup[] auditActionGroup, string[] auditAction = null)
        {
            var actionsAndGroups = new List<string>();
            if (auditAction != null)
            {
                actionsAndGroups.AddRange(auditAction);
            }

            auditActionGroup?.ToList().ForEach(aag => actionsAndGroups.Add(aag.ToString()));
            if (actionsAndGroups.Count == 0) // default audit actions and groups in case nothing was defined by the user
            {
                actionsAndGroups.Add("SUCCESSFUL_DATABASE_AUTHENTICATION_GROUP");
                actionsAndGroups.Add("FAILED_DATABASE_AUTHENTICATION_GROUP");
                actionsAndGroups.Add("BATCH_COMPLETED_GROUP");
            }

            return actionsAndGroups;
        }

        private bool IsStorageAccountInVNet(string storageAccountResourceId)
        {
            if (IsClassicStorage(storageAccountResourceId))
            {
                return false;
            }

            string uri = $"{Context.Environment.GetEndpointAsUri(AzureEnvironment.Endpoint.ResourceManager).ToString()}{storageAccountResourceId}?api-version=2019-06-01";
            Exception exception = new Exception(
                string.Format(Resources.RetrievingStorageAccountPropertiesFailed,
                storageAccountResourceId));
            JToken storageAccountPropertiesToken = SendAsync(uri, HttpMethod.Get, exception).Result;
            return GetNetworkAclsDefaultAction(storageAccountPropertiesToken, exception).Equals("Deny");
        }

        private bool IsClassicStorage(string storageAccountResourceId)
        {
            return storageAccountResourceId.Contains("Microsoft.ClassicStorage/storageAccounts");
        }

        private string GetNetworkAclsDefaultAction(JToken storageAccountPropertiesToken, Exception exceptionToThrowOnFailure)
        {
            JToken value;
            try
            {
                value = storageAccountPropertiesToken["properties"]["networkAcls"]["defaultAction"];
            }
            catch (Exception)
            {
                throw exceptionToThrowOnFailure;
            }

            return value?.ToString();
        }

        public Guid? AssignServerIdentityIfNotAssigned(string resourceGroupName, string workspaceName)
        {
            var workspaceInfo = _synapseManagementClient.Workspaces.Get(resourceGroupName, workspaceName);
            if (workspaceInfo.Identity == null ||
                workspaceInfo.Identity.Type != ResourceIdentityType.SystemAssigned)
            {
                workspaceInfo.Identity = new ManagedIdentity
                {
                    Type = ResourceIdentityType.SystemAssigned
                };
                workspaceInfo = _synapseManagementClient.Workspaces.CreateOrUpdate(resourceGroupName, workspaceName, workspaceInfo);
            }

            try
            {
                return new Guid(workspaceInfo.Identity.PrincipalId);
            }
            catch (Exception)
            {
                return null;
            }
        }

        private void AssignRoleForServerIdentityOnStorageIfNotAssigned(string storageAccountResourceId, Guid principalId, Guid roleAssignmentId)
        {
            if (IsRoleAssignedForServerIdentitiyOnStorage(storageAccountResourceId, principalId))
            {
                return;
            }

            roleAssignmentId = roleAssignmentId == default(Guid) ? Guid.NewGuid() : roleAssignmentId;
            Uri endpoint = Context.Environment.GetEndpointAsUri(AzureEnvironment.Endpoint.ResourceManager);
            string uri = $"{endpoint}/{storageAccountResourceId}/providers/Microsoft.Authorization/roleAssignments/{roleAssignmentId}?api-version=2018-01-01-preview";

            string roleDefinitionId = $"/subscriptions/{GetStorageAccountSubscription(storageAccountResourceId)}/providers/Microsoft.Authorization/roleDefinitions/ba92f5b4-2d11-453d-a403-e96b0029c9fe";
            string content = $"{{\"properties\": {{ \"roleDefinitionId\": \"{roleDefinitionId}\", \"principalId\": \"{principalId}\", \"principalType\": \"ServicePrincipal\"}}}}";

            int numberOfTries = 20;
            const int SecondsToWaitBetweenTries = 20;
            HttpResponseMessage response = null;
            bool isARetry = false;
            System.Net.HttpStatusCode responseStatusCode;
            string responseContent = null;
            do
            {
                if (isARetry)
                {
                    Thread.Sleep(TimeSpan.FromSeconds(SecondsToWaitBetweenTries));
                }

                HttpRequestMessage httpRequest = new HttpRequestMessage
                {
                    Method = HttpMethod.Put,
                    RequestUri = new Uri(uri),
                    Content = new StringContent(content, Encoding.UTF8, "application/json")
                };
                ResourceManagementClient.Credentials.ProcessHttpRequestAsync(httpRequest, CancellationToken.None).ConfigureAwait(false).GetAwaiter().GetResult();
                response = ResourceManagementClient.HttpClient.SendAsync(httpRequest, CancellationToken.None).ConfigureAwait(false).GetAwaiter().GetResult();
                if (response.IsSuccessStatusCode)
                {
                    return;
                }
                else if (response.StatusCode == System.Net.HttpStatusCode.Forbidden)
                {
                    throw new Exception(string.Format(Resources.AddingStorageBlobDataContributorRoleForStorageAccountIsForbidden, storageAccountResourceId));
                }

                responseStatusCode = response.StatusCode;
                responseContent = response.Content.ReadAsStringAsync().Result;
                numberOfTries--;
                isARetry = true;
            } while (numberOfTries > 0);

            throw new Exception(string.Format(Resources.FailedToAddRoleAssignmentForStorageAccount, storageAccountResourceId, responseStatusCode.ToString(), responseContent));
        }

        private bool IsRoleAssignedForServerIdentitiyOnStorage(string storageAccountResourceId, Guid principalId)
        {
            string StorageBlobDataContributorId = "ba92f5b4-2d11-453d-a403-e96b0029c9fe";
            Uri endpoint = Context.Environment.GetEndpointAsUri(AzureEnvironment.Endpoint.ResourceManager);
            string uri = $"{endpoint}/{storageAccountResourceId}/providers/Microsoft.Authorization/roleAssignments/?api-version=2018-01-01-preview&$filter=assignedTo('{principalId}')";
            JToken roleDefinitionsToken = SendAsync(uri, HttpMethod.Get,
                new Exception(string.Format(Resources.FailedToGetRoleAssignmentsForStorageAccount, storageAccountResourceId))).Result;
            try
            {
                JArray roleDefinitionsArray = (JArray)roleDefinitionsToken["value"];
                return roleDefinitionsArray.Any((token =>
                {
                    JToken roleDefinitionId = token["properties"]["roleDefinitionId"];
                    return roleDefinitionId != null && roleDefinitionId.ToString().Contains(StorageBlobDataContributorId);
                }));
            }
            catch (Exception) { }

            return false;
        }

        private static string GetStorageAccountSubscription(string storageAccountResourceId)
        {
            const string separator = "subscriptions/";
            int subscriptionStartIndex = storageAccountResourceId.IndexOf(separator) + separator.Length;
            return storageAccountResourceId.Substring(subscriptionStartIndex, Guid.Empty.ToString().Length);
        }

        internal async Task<Dictionary<StorageKeyKind, string>> RetrieveStorageKeysAsync(string storageAccountId)
        {
            var isClassicStorage = IsClassicStorage(storageAccountId);

            // Build a URI for calling corresponding REST-API
            //
            var uriBuilder = new StringBuilder(Context.Environment.GetEndpointAsUri(AzureEnvironment.Endpoint.ResourceManager).ToString());
            uriBuilder.AppendFormat("{0}/listKeys?api-version={1}",
                storageAccountId,
                isClassicStorage ? "2016-11-01" : "2017-06-01");

            // Define an exception to be thrown on failure.
            //
            var exception = new Exception(string.Format(Resources.RetrievingStorageAccountKeysFailed, storageAccountId));

            // Call the URI and get storage account keys.
            //
            var storageAccountKeysResponse = await SendAsync(uriBuilder.ToString(), HttpMethod.Post, exception);

            // Extract keys out of response.
            //
            var storageAccountKeys = new Dictionary<StorageKeyKind, string>();
            string primaryKey;
            string secondaryKey;
            if (isClassicStorage)
            {
                primaryKey = (string)storageAccountKeysResponse["primaryKey"];
                secondaryKey = (string)storageAccountKeysResponse["secondaryKey"];
            }
            else
            {
                var storageAccountKeysArray = (JArray)storageAccountKeysResponse["keys"];
                if (storageAccountKeysArray == null)
                {
                    throw exception;
                }

                primaryKey = (string)storageAccountKeysArray[0]["value"];
                secondaryKey = (string)storageAccountKeysArray[1]["value"];
            }

            if (string.IsNullOrEmpty(primaryKey) || string.IsNullOrEmpty(secondaryKey))
            {
                throw exception;
            }

            storageAccountKeys.Add(StorageKeyKind.Primary, primaryKey);
            storageAccountKeys.Add(StorageKeyKind.Secondary, secondaryKey);
            return storageAccountKeys;
        }

        internal dynamic GetSqlAuditing(string resourceGroupName, string workspaceName, string sqlPoolName = null)
        {
            if (sqlPoolName == null)
            {
                return _synapseManagementClient.WorkspaceManagedSqlServerBlobAuditingPolicies.Get(resourceGroupName, workspaceName);
            }
            else
            {
                return _synapseManagementClient.SqlPoolBlobAuditingPolicies.Get(resourceGroupName, workspaceName, sqlPoolName);
            }
        }

        public void RemoveSqlPoolAudit(string resourceGroupName, string workspaceName, string sqlPoolName)
        {
            try
            {
                if (string.IsNullOrEmpty(resourceGroupName))
                {
                    resourceGroupName = GetResourceGroupByWorkspaceName(workspaceName);
                }

                SqlPoolBlobAuditingPolicy policy = GetSqlAuditing(resourceGroupName, workspaceName, sqlPoolName);
                policy.State = BlobAuditingPolicyState.Disabled;
                _synapseManagementClient.SqlPoolBlobAuditingPolicies.CreateOrUpdate(resourceGroupName, workspaceName, sqlPoolName, policy);
            }
            catch (CloudException ex)
            {
                throw GetAzurePowerShellException(ex);
            }
        }

        public WorkspaceAuditModel GetWorkspaceAudit(string resourceGroupName, string workspaceName)
        {
            try
            {
                if (string.IsNullOrEmpty(resourceGroupName))
                {
                    resourceGroupName = GetResourceGroupByWorkspaceName(workspaceName);
                }

                var policy = _synapseManagementClient.WorkspaceManagedSqlServerExtendedBlobAuditingPolicies.Get(resourceGroupName, workspaceName);
                var model = new WorkspaceAuditModel
                {
                    ResourceGroupName = resourceGroupName,
                    WorkspaceName = workspaceName
                };

                model.IsAzureMonitorTargetEnabled = policy.IsAzureMonitorTargetEnabled;
                model.PredicateExpression = policy.PredicateExpression;
                model.AuditActionGroup = ExtractAuditActionGroups(policy.AuditActionsAndGroups);
                ModelizeStorageInfo(model, policy.StorageEndpoint, policy.IsStorageSecondaryKeyInUse, policy.StorageAccountSubscriptionId,
                    IsAuditEnabled(policy.State), policy.RetentionDays);
                model.BlobStorageTargetState = policy.State == BlobAuditingPolicyState.Enabled ? AuditStateType.Enabled : AuditStateType.Disabled;

                return model;
            }
            catch (CloudException ex)
            {
                throw GetAzurePowerShellException(ex);
            }
        }

        public void CreateOrUpdateWorkspaceAudit(WorkspaceAuditModel model)
        {
            try
            {
                if (string.IsNullOrEmpty(model.PredicateExpression))
                {
                    var policy = new ServerBlobAuditingPolicy();
                    PolicizeAuditModel(model, policy);
                    _synapseManagementClient.WorkspaceManagedSqlServerBlobAuditingPolicies.CreateOrUpdate(model.ResourceGroupName, model.WorkspaceName, policy);
                }
                else
                {
                    var policy = new ExtendedServerBlobAuditingPolicy
                    {
                        PredicateExpression = model.PredicateExpression
                    };
                    PolicizeAuditModel(model, policy);
                    _synapseManagementClient.WorkspaceManagedSqlServerExtendedBlobAuditingPolicies.CreateOrUpdate(model.ResourceGroupName, model.WorkspaceName, policy);
                }
            }
            catch (CloudException ex)
            {
                throw GetAzurePowerShellException(ex);
            }
        }

        public void RemoveWorkspaceAudit(string resourceGroupName, string workspaceName)
        {
            try
            {
                if (string.IsNullOrEmpty(resourceGroupName))
                {
                    resourceGroupName = GetResourceGroupByWorkspaceName(workspaceName);
                }

                ServerBlobAuditingPolicy policy = GetSqlAuditing(resourceGroupName, workspaceName);
                policy.State = BlobAuditingPolicyState.Disabled;
                _synapseManagementClient.WorkspaceManagedSqlServerBlobAuditingPolicies.CreateOrUpdate(resourceGroupName, workspaceName, policy);
            }
            catch (CloudException ex)
            {
                throw GetAzurePowerShellException(ex);
            }
        }

        #endregion

        #region Threat Detection

        public ServerSecurityAlertPolicy GetWorkspaceThreatDetectionPolicy(string resourceGroupName, string workspaceName)
        {
            try
            {
                return _synapseManagementClient.WorkspaceManagedSqlServerSecurityAlertPolicy.Get(resourceGroupName, workspaceName);
            }
            catch (CloudException ex)
            {
                throw GetAzurePowerShellException(ex);
            }
        }

        public Dictionary<StorageKeyKind, string> GetStorageKeys(string storageEndpoint)
        {
            var storageName = GetStorageAccountName(storageEndpoint);
            var resourceGroup = GetStorageResourceGroup(storageName);
            return GetStorageKeys(resourceGroup, storageName);
        }

        private static class StorageAccountType
        {
            public const string ClassicStorage = "Microsoft.ClassicStorage/storageAccounts";
            public const string Storage = "Microsoft.Storage/storageAccounts";
        }

        public string GetStorageResourceGroup(string storageAccountName)
        {
            foreach (var storageAccountType in new[] { StorageAccountType.ClassicStorage, StorageAccountType.Storage })
            {
                var resourceGroup = GetStorageResourceGroup(
                    ResourceManagementClient,
                    storageAccountName,
                    storageAccountType);

                if (resourceGroup != null)
                {
                    return resourceGroup;
                }
            }

            throw new Exception(string.Format(Properties.Resources.StorageAccountNotFound, storageAccountName));
        }

        private static string GetStorageResourceGroup(
            ResourceManagementClient resourcesClient,
            string storageAccountName,
            string resourceType)
        {
            var query = new Rest.Azure.OData.ODataQuery<GenericResourceFilter>(r => r.ResourceType == resourceType);
            var res = resourcesClient.Resources.List(query);
            var allResources = new List<GenericResource>(res);
            var account = allResources.Find(r => r.Name == storageAccountName);
            if (account == null)
            {
                return null;
            }

            var resId = account.Id;
            var segments = resId.Split('/');
            var indexOfResourceGroup = new List<string>(segments).IndexOf("resourceGroups") + 1;
            return segments[indexOfResourceGroup];
        }

        private Dictionary<StorageKeyKind, string> GetStorageKeys(string resourceGroupName, string storageAccountName)
        {
            try
            {
                return GetStorageKeysAsync(resourceGroupName, storageAccountName).GetAwaiter().GetResult();
            }
            catch (Exception e)
            {
                throw new Exception(string.Format(Resources.StorageAccountNotFound, storageAccountName), e);
            }
        }

        private async Task<Dictionary<StorageKeyKind, string>> GetStorageKeysAsync(string resourceGroupName, string storageAccountName)
        {
            var url = Context.Environment.GetEndpointAsUri(AzureEnvironment.Endpoint.ResourceManager).ToString();
            if (!url.EndsWith("/"))
            {
                url = url + "/";
            }
            // TODO: Remove IfDef
#if NETSTANDARD
            url = url + "subscriptions/" + (StorageManagementClient.SubscriptionId != null ? StorageManagementClient.SubscriptionId.Trim() : "");
#else
            url = url + "subscriptions/" + (client.Credentials.SubscriptionId != null ? client.Credentials.SubscriptionId.Trim() : "");
#endif
            url = url + "/resourceGroups/" + resourceGroupName;
            url = url + "/providers/Microsoft.ClassicStorage/storageAccounts/" + storageAccountName;
            url = url + "/listKeys?api-version=2014-06-01";

            var httpRequest = new HttpRequestMessage { Method = HttpMethod.Post, RequestUri = new Uri(url) };

            await StorageManagementClient.Credentials.ProcessHttpRequestAsync(httpRequest, CancellationToken.None).ConfigureAwait(false);
            var httpResponse = await StorageManagementClient.HttpClient.SendAsync(httpRequest, CancellationToken.None).ConfigureAwait(false);
            var responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
            var result = new Dictionary<StorageKeyKind, string>();
            try
            {
                var responseDoc = JToken.Parse(responseContent);
                var primaryKey = (string)responseDoc["primaryKey"];
                var secondaryKey = (string)responseDoc["secondaryKey"];
                if (string.IsNullOrEmpty(primaryKey) || string.IsNullOrEmpty(secondaryKey))
                {
                    throw new Exception(); // this is caught by the synced wrapper
                }

                result.Add(StorageKeyKind.Primary, primaryKey);
                result.Add(StorageKeyKind.Secondary, secondaryKey);
                return result;
            }
            catch
            {
                return GetV2Keys(resourceGroupName, storageAccountName);
            }
        }

        private Dictionary<StorageKeyKind, string> GetV2Keys(string resourceGroupName, string storageAccountName)
        {
            var r = StorageManagementClient.StorageAccounts.ListKeys(resourceGroupName, storageAccountName);
            // TODO: Remove IfDef
#if NETSTANDARD
            var k1 = r.Keys[0].Value;
            var k2 = r.Keys[1].Value;
#else
            string k1 = r.StorageAccountKeys.Key1;
            string k2 = r.StorageAccountKeys.Key2;
#endif
            var result = new Dictionary<StorageKeyKind, String>
            {
                {StorageKeyKind.Primary, k1}, {StorageKeyKind.Secondary, k2}
            };
            return result;
        }

        public ServerSecurityAlertPolicy SetWorkspaceThreatDetectionPolicy(string resourceGroupName, string workspaceName, ServerSecurityAlertPolicy policy)
        {
            try
            {
                return _synapseManagementClient.WorkspaceManagedSqlServerSecurityAlertPolicy.CreateOrUpdate(resourceGroupName, workspaceName, policy);
            }
            catch (CloudException ex)
            {
                throw GetAzurePowerShellException(ex);
            }
        }

        public void RemoveWorkspaceThreatDetectionPolicy(string resourceGroupName, string workspaceName)
        {
            try
            {
                if (string.IsNullOrEmpty(resourceGroupName))
                {
                    resourceGroupName = GetResourceGroupByWorkspaceName(workspaceName);
                }

                var policy = GetWorkspaceThreatDetectionPolicy(resourceGroupName, workspaceName);
                policy.State = SecurityAlertPolicyState.Disabled;
                _synapseManagementClient.WorkspaceManagedSqlServerSecurityAlertPolicy.CreateOrUpdate(resourceGroupName, workspaceName, policy);
            }
            catch (CloudException ex)
            {
                throw GetAzurePowerShellException(ex);
            }
        }

        public SqlPoolSecurityAlertPolicy GetSqlPoolThreatDetectionPolicy(string resourceGroupName, string workspaceName, string sqlPoolName)
        {
            try
            {
                return _synapseManagementClient.SqlPoolSecurityAlertPolicies.Get(resourceGroupName, workspaceName, sqlPoolName);
            }
            catch (CloudException ex)
            {
                throw GetAzurePowerShellException(ex);
            }
        }

        public SqlPoolSecurityAlertPolicy SetSqlPoolThreatDetectionPolicy(string resourceGroupName, string workspaceName, string sqlPoolName, SqlPoolSecurityAlertPolicy policy)
        {
            try
            {
                return _synapseManagementClient.SqlPoolSecurityAlertPolicies.CreateOrUpdate(resourceGroupName, workspaceName, sqlPoolName, policy);
            }
            catch (CloudException ex)
            {
                throw GetAzurePowerShellException(ex);
            }
        }

        public void RemoveSqlPoolThreatDetectionPolicy(string resourceGroupName, string workspaceName, string sqlPoolName)
        {
            try
            {
                if (string.IsNullOrEmpty(resourceGroupName))
                {
                    resourceGroupName = GetResourceGroupByWorkspaceName(workspaceName);
                }

                var policy = GetSqlPoolThreatDetectionPolicy(resourceGroupName, workspaceName, sqlPoolName);
                policy.State = SecurityAlertPolicyState.Disabled;
                _synapseManagementClient.SqlPoolSecurityAlertPolicies.CreateOrUpdate(resourceGroupName, workspaceName, sqlPoolName, policy);
            }
            catch (CloudException ex)
            {
                throw GetAzurePowerShellException(ex);
            }
        }

        #endregion

        #region Vulnerability Assessment

        public ServerVulnerabilityAssessment GetWorkspaceVulnerabilityAssessmentSettings(string resourceGroupName, string workspaceName)
        {
            try
            {
                return _synapseManagementClient.WorkspaceManagedSqlServerVulnerabilityAssessments.Get(resourceGroupName, workspaceName);
            }
            catch (CloudException ex)
            {
                throw GetAzurePowerShellException(ex);
            }
        }

        public struct StorageContainerInfo
        {
            public string StorageAccountAccessKey;
            public string StorageContainerPath;
        }

        public StorageContainerInfo GetStorageContainerInfo(string resourceGroupName, string storageAccountName, string containerName)
        {
            var storageAccountObject = StorageManagementClient.StorageAccounts.GetProperties(resourceGroupName, storageAccountName);
            var keysObject = StorageManagementClient.StorageAccounts.ListKeys(resourceGroupName, storageAccountName);
            // TODO: Remove IfDef
#if NETSTANDARD
            var storageAccountBlobPrimaryEndpoints = storageAccountObject.PrimaryEndpoints.Blob;
            var key = keysObject.Keys.FirstOrDefault().Value;
#else
            var storageAccountBlobPrimaryEndpoints = storageAccountObject.StorageAccount.PrimaryEndpoints.Blob;
            var key = keysObject.StorageAccountKeys.Key1;
#endif
            return new StorageContainerInfo
            {
                StorageAccountAccessKey = key,
                StorageContainerPath = string.Format("{0}{1}", storageAccountBlobPrimaryEndpoints, containerName)
            };
        }

        public ServerVulnerabilityAssessment CreateOrUpdateWorkspaceVulnerabilityAssessmentSettings(string resourceGroupName, string workspaceName, ServerVulnerabilityAssessment parameters)
        {
            try
            {
                return _synapseManagementClient.WorkspaceManagedSqlServerVulnerabilityAssessments.CreateOrUpdate(resourceGroupName, workspaceName, parameters);
            }
            catch (CloudException ex)
            {
                throw GetAzurePowerShellException(ex);
            }
        }

        public void RemoveWorkspaceVulnerabilityAssessmentSettings(string resourceGroupName, string workspaceName)
        {
            try
            {
                if (string.IsNullOrEmpty(resourceGroupName))
                {
                    resourceGroupName = GetResourceGroupByWorkspaceName(workspaceName);
                }

                _synapseManagementClient.WorkspaceManagedSqlServerVulnerabilityAssessments.Delete(resourceGroupName, workspaceName);
            }
            catch (CloudException ex)
            {
                throw GetAzurePowerShellException(ex);
            }
        }

        public SqlPoolVulnerabilityAssessment GetSqlPoolVulnerabilityAssessmentSettings(string resourceGroupName, string workspaceName, string sqlPoolName)
        {
            try
            {
                return _synapseManagementClient.SqlPoolVulnerabilityAssessments.Get(resourceGroupName, workspaceName, sqlPoolName);
            }
            catch (CloudException ex)
            {
                throw GetAzurePowerShellException(ex);
            }
        }

        public SqlPoolVulnerabilityAssessment CreateOrUpdateSqlPoolVulnerabilityAssessmentSettings(string resourceGroupName, string workspaceName, string sqlPoolName, SqlPoolVulnerabilityAssessment parameters)
        {
            try
            {
                return _synapseManagementClient.SqlPoolVulnerabilityAssessments.CreateOrUpdate(resourceGroupName, workspaceName, sqlPoolName, parameters);
            }
            catch (CloudException ex)
            {
                throw GetAzurePowerShellException(ex);
            }
        }

        public void RemoveSqlPoolVulnerabilityAssessmentSettings(string resourceGroupName, string workspaceName, string sqlPoolName)
        {
            try
            {
                if (string.IsNullOrEmpty(resourceGroupName))
                {
                    resourceGroupName = GetResourceGroupByWorkspaceName(workspaceName);
                }

                _synapseManagementClient.SqlPoolVulnerabilityAssessments.Delete(resourceGroupName, workspaceName, sqlPoolName);
            }
            catch (CloudException ex)
            {
                throw GetAzurePowerShellException(ex);
            }
        }

        #endregion

        #region Advanced Threat Protection

        public void EnableWorkspaceVa(string resourceGroupName, string workspaceName, string workspaceLocation, string deploymentName)
        {
            AutoEnableVa(resourceGroupName, workspaceName, workspaceLocation, "DeployWorkspaceVaTemplate.json", deploymentName);
        }

        private void AutoEnableVa(string resourceGroupName, string workspaceName, string workspaceLocation, string templateName, string deploymentName)
        {
            // Generate deployment name if it was not provided
            if (string.IsNullOrEmpty(deploymentName))
            {
                deploymentName = "EnableVA_" + workspaceName + "_" + Guid.NewGuid().ToString("N");
            }

            // Trim deployment name as it has a maximum of 64 chars
            if (deploymentName.Length > 64)
            {
                deploymentName = deploymentName.Substring(0, 64);
            }

            Dictionary<string, object> parametersDictionary = new Dictionary<string, object>
            {
                {"workspaceName", new Dictionary<string, object> { {"value", workspaceName } }},
                {"location", new Dictionary<string, object> { {"value", workspaceLocation } }},
            };
            string parameters = Newtonsoft.Json.JsonConvert.SerializeObject(parametersDictionary, new JsonSerializerSettings
            {
                TypeNameHandling = TypeNameHandling.None,
                Formatting = Formatting.Indented
            });

            var properties = new DeploymentProperties
            {
                Mode = DeploymentMode.Incremental,
                Parameters = JObject.Parse(parameters),
                Template = JObject.Parse(GetArmTemplateContent(templateName)),
            };

            Deployment deployment = new Deployment(properties);

            ResourceManagementClient.Deployments.CreateOrUpdate(resourceGroupName, deploymentName, deployment);
        }

        private string GetArmTemplateContent(string templateName)
        {
            var assembly = Assembly.GetExecutingAssembly();
            var resourceName = assembly.GetManifestResourceNames().FirstOrDefault(str => str.EndsWith(templateName));
            string template;
            using (Stream stream = assembly.GetManifestResourceStream(resourceName))
            {
                using (StreamReader reader = new StreamReader(stream))
                {
                    template = reader.ReadToEnd();
                }
            }

            return template;
        }

        #endregion

        #region Transparent Data Encryption

        public TransparentDataEncryption GetSqlPoolTransparentDataEncryption(string resourceGroupName, string workspaceName, string sqlPoolName)
        {
            try
            {
                return _synapseManagementClient.SqlPoolTransparentDataEncryptions.Get(resourceGroupName, workspaceName, sqlPoolName);
            }
            catch (CloudException ex)
            {
                throw GetAzurePowerShellException(ex);
            }
        }

        public TransparentDataEncryption SetSqlPoolTransparentDataEncryption(string resourceGroupName, string workspaceName, string sqlPoolName, TransparentDataEncryption parameters)
        {
            try
            {
                return _synapseManagementClient.SqlPoolTransparentDataEncryptions.CreateOrUpdate(resourceGroupName, workspaceName, sqlPoolName, parameters);
            }
            catch (CloudException ex)
            {
                throw GetAzurePowerShellException(ex);
            }
        }

        #endregion

        #region SQL pool operations

        public SqlPool CreateSqlPool(string resourceGroupName, string workspaceName, string sqlPoolName, SqlPool createOrUpdateParams)
        {
            try
            {
                return _synapseManagementClient.SqlPools.Create(resourceGroupName, workspaceName, sqlPoolName, createOrUpdateParams);
            }
            catch (ErrorContractException ex)
            {
                throw GetAzurePowerShellException(ex);
            }
        }

        internal SqlPool GetSqlPool(string resourceGroupName, string workspaceName, string sqlPoolName)
        {
            try
            {
                if (string.IsNullOrEmpty(resourceGroupName))
                {
                    resourceGroupName = GetResourceGroupByWorkspaceName(workspaceName);
                }

                return _synapseManagementClient.SqlPools.Get(resourceGroupName, workspaceName, sqlPoolName);
            }
            catch (ErrorContractException ex)
            {
                throw GetAzurePowerShellException(ex);
            }
        }

        public void StartVulnerabilityAssessmentScan(string resourceGroup, string workspaceName, string sqlPoolName, string scanId)
        {
            try
            {
                _synapseManagementClient.SqlPoolVulnerabilityAssessmentScans.InitiateScan(resourceGroup, workspaceName, sqlPoolName, scanId);
            }
            catch (ErrorContractException ex)
            {
                throw GetAzurePowerShellException(ex);
            }
          
        }
        internal PSVulnerabilityAssessmentScanRecordModel GetVulnerabilityAssessmentScanRecord(string resourceGroupName, string workspaceName, string sqlPoolName, string scanId)
        {
            try
            {
                var result = _synapseManagementClient.SqlPoolVulnerabilityAssessmentScans.Get(resourceGroupName, workspaceName, sqlPoolName, scanId);
                return ConvertVulnerabilityAssessmentScanRecord(resourceGroupName, workspaceName, sqlPoolName, result);
            }
            catch (ErrorContractException ex)
            {
                throw GetAzurePowerShellException(ex);
            }
        }

        internal List<PSVulnerabilityAssessmentScanRecordModel> ListVulnerabilityAssessmentScanRecords(string resourceGroupName, string workspaceName, string sqlPoolName)
        {
            try
            {
                var firstPage = _synapseManagementClient.SqlPoolVulnerabilityAssessmentScans.List(resourceGroupName, workspaceName, sqlPoolName);
                return ListResources(firstPage, _synapseManagementClient.SqlPoolVulnerabilityAssessmentScans.ListNext).Select(scanRecord => ConvertVulnerabilityAssessmentScanRecord(resourceGroupName, workspaceName, sqlPoolName, scanRecord)).ToList();
            }
            catch (ErrorContractException ex)
            {
                throw GetAzurePowerShellException(ex);
            }
        }

        public PSVulnerabilityAssessmentScanExportModel ConvertSqlPoolVulnerabilityAssessmentScan(string resourceGroupName, string workSpaceName,
           string sqlPoolName, string scanId)
        {
            var response = _synapseManagementClient.SqlPoolVulnerabilityAssessmentScans.Export(resourceGroupName, workSpaceName, sqlPoolName, scanId);
            return new PSVulnerabilityAssessmentScanExportModel(resourceGroupName, workSpaceName, sqlPoolName, scanId, response.ExportedReportLocation);
        }

        private PSVulnerabilityAssessmentScanRecordModel ConvertVulnerabilityAssessmentScanRecord(string resourceGroup, string workSpace, string sqlPool, VulnerabilityAssessmentScanRecord scanRecord)
        {
            TriggerType scanTriggerType;
            Enum.TryParse(scanRecord.TriggerType, true, out scanTriggerType);

            return new PSVulnerabilityAssessmentScanRecordModel()
            {
                ResourceGroupName = resourceGroup,
                workspaceName = workSpace,
                sqlPoolName = sqlPool,
                ScanId = scanRecord.ScanId,
                TriggerType = scanTriggerType,
                State = scanRecord.State,
                StartTime = scanRecord.StartTime,
                EndTime = scanRecord.EndTime,
                Errors = scanRecord.Errors?.Select(scanError =>
                  new PSVulnerabilityAssessmentScanErrorModel()
                  {
                      Code = scanError.Code,
                      Message = scanError.Message
                  }).ToList(),
                ScanResultsLocationPath = scanRecord.StorageContainerPath,
                NumberOfFailedSecurityChecks = scanRecord.NumberOfFailedSecurityChecks
            };
        }

        internal SqlPool GetSqlPoolOrDefault(string resourceGroupName, string workspaceName, string sqlPoolName)
        {
            try
            {
                return GetSqlPool(resourceGroupName, workspaceName, sqlPoolName);
            }
            catch
            {
                return null;
            }
        }

        public List<SqlPool> ListSqlPools(string resourceGroupName, string workspaceName)
        {
            try
            {
                if (string.IsNullOrEmpty(resourceGroupName))
                {
                    resourceGroupName = GetResourceGroupByWorkspaceName(workspaceName);
                }

                var firstPage = this._synapseManagementClient.SqlPools.ListByWorkspace(resourceGroupName, workspaceName);
                return ListResources(firstPage, _synapseManagementClient.SqlPools.ListByWorkspaceNext);
            }
            catch (ErrorContractException ex)
            {
                throw GetAzurePowerShellException(ex);
            }
        }

        public void UpdateSqlPool(string resourceGroupName, string workspaceName, string sqlPoolName, SqlPoolPatchInfo updateParams)
        {
            try
            {
                if (string.IsNullOrEmpty(resourceGroupName))
                {
                    resourceGroupName = GetResourceGroupByWorkspaceName(workspaceName);
                }

                _synapseManagementClient.SqlPools.Update(resourceGroupName, workspaceName, sqlPoolName, updateParams);
            }
            catch (ErrorContractException ex)
            {
                throw GetAzurePowerShellException(ex);
            }
        }

        public void DeleteSqlPool(string resourceGroupName, string workspaceName, string sqlPoolName)
        {
            try
            {
                if (string.IsNullOrEmpty(resourceGroupName))
                {
                    resourceGroupName = GetResourceGroupByWorkspaceName(workspaceName);
                }

                if (!TestSqlPool(resourceGroupName, workspaceName, sqlPoolName))
                {
                    throw new InvalidOperationException(string.Format(Properties.Resources.SqlPoolDoesNotExist, sqlPoolName));
                }

                _synapseManagementClient.SqlPools.Delete(resourceGroupName, workspaceName, sqlPoolName);
            }
            catch (ErrorContractException ex)
            {
                throw GetAzurePowerShellException(ex);
            }
        }

        public bool TestSqlPool(string resourceGroupName, string workspaceName, string sqlPoolName)
        {
            try
            {
                GetSqlPool(resourceGroupName, workspaceName, sqlPoolName);
                return true;
            }
            catch (AzPSResourceNotFoundCloudException)
            {
                return false;
            }
        }

        public void RenameSqlPool(string resourceGroupName, string workspaceName, string sqlPoolName, string newSqlPoolName)
        {
            throw new NotImplementedException("SQL pool rename operation is not supported.");
            //try
            //{
            //    if (string.IsNullOrEmpty(resourceGroupName))
            //    {
            //        resourceGroupName = GetResourceGroupByWorkspaceName(workspaceName);
            //    }

            //    this._synapseManagementClient.SqlPools.Rename(
            //        resourceGroupName,
            //        workspaceName,
            //        sqlPoolName,
            //        new ResourceMoveDefinition
            //        {
            //            Id = Utils.ConstructResourceId(
            //                _synapseManagementClient.SubscriptionId,
            //                resourceGroupName,
            //                ResourceTypes.SqlPool,
            //                newSqlPoolName,
            //                $"workspaces/{workspaceName}")
            //        });
            //}
            //catch (ErrorContractException ex)
            //{
            //    throw GetSynapseException(ex);
            //}
        }

        public void PauseSqlPool(string resourceGroupName, string workspaceName, string sqlPoolName)
        {
            try
            {
                if (string.IsNullOrEmpty(resourceGroupName))
                {
                    resourceGroupName = GetResourceGroupByWorkspaceName(workspaceName);
                }

                this._synapseManagementClient.SqlPools.Pause(resourceGroupName, workspaceName, sqlPoolName);
            }
            catch (ErrorContractException ex)
            {
                throw GetAzurePowerShellException(ex);
            }
        }

        public void ResumeSqlPool(string resourceGroupName, string workspaceName, string sqlPoolName)
        {
            try
            {
                if (string.IsNullOrEmpty(resourceGroupName))
                {
                    resourceGroupName = GetResourceGroupByWorkspaceName(workspaceName);
                }

                this._synapseManagementClient.SqlPools.Resume(resourceGroupName, workspaceName, sqlPoolName);
            }
            catch (ErrorContractException ex)
            {
                throw GetAzurePowerShellException(ex);
            }
        }

        #endregion

        #region SQL Pool Backup

        public List<RestorePoint> ListSqlPoolRestorePoints(string resourceGroupName, string workspaceName, string sqlPoolName)
        {
            try
            {
                if (string.IsNullOrEmpty(resourceGroupName))
                {
                    resourceGroupName = GetResourceGroupByWorkspaceName(workspaceName);
                }

                return this._synapseManagementClient.SqlPoolRestorePoints.List(
                    resourceGroupName,
                    workspaceName,
                    sqlPoolName)
                    .ToList();
            }
            catch (ErrorContractException ex)
            {
                throw GetAzurePowerShellException(ex);
            }
        }

        public RestorePoint CreateSqlPoolRestorePoint(string resourceGroupName, string workspaceName, string sqlPoolName, CreateSqlPoolRestorePointDefinition parameters)
        {
            try
            {
                if (string.IsNullOrEmpty(resourceGroupName))
                {
                    resourceGroupName = GetResourceGroupByWorkspaceName(workspaceName);
                }

                return this._synapseManagementClient.SqlPoolRestorePoints.Create(resourceGroupName, workspaceName, sqlPoolName, parameters);
            }
            catch (ErrorContractException ex)
            {
                throw GetAzurePowerShellException(ex);
            }
        }

        public void DeleteSqlPoolRestorePoint(string resourceGroupName, string workspaceName, string sqlPoolName, string sqlPoolRestorePointCreationDate)
        {
            try
            {
                if (string.IsNullOrEmpty(resourceGroupName))
                {
                    resourceGroupName = GetResourceGroupByWorkspaceName(workspaceName);
                }

                if (!TestSqlPoolRestorePoint(resourceGroupName, workspaceName, sqlPoolName, sqlPoolRestorePointCreationDate))
                {
                    throw new InvalidOperationException(string.Format(Properties.Resources.SqlPoolRestorePointDoesNotExist, sqlPoolRestorePointCreationDate));
                }

                this._synapseManagementClient.SqlPoolRestorePoints.Delete(resourceGroupName, workspaceName, sqlPoolName, sqlPoolRestorePointCreationDate);
            }
            catch (ErrorContractException ex)
            {
                throw GetAzurePowerShellException(ex);
            }
        }

        public bool TestSqlPoolRestorePoint(string resourceGroupName, string workspaceName, string sqlPoolName, string sqlPoolRestorePointName)
        {
            try
            {
                RestorePoint respoint = this._synapseManagementClient.SqlPoolRestorePoints.Get(resourceGroupName,
                    workspaceName,
                    sqlPoolName,
                    sqlPoolRestorePointName);

                return respoint != null;
            }
            catch (ErrorContractException)
            {
                return false;
            }
        }

        #endregion

        #region SQL Pool V3 operations

        public SqlPoolV3 CreateSqlPoolV3(string resourceGroupName, string workspaceName, string sqlPoolName, SqlPoolV3 createOrUpdateParams)
        {
            try
            {
                return _synapseSqlV3ManagementClient.SqlPoolsV3.CreateOrUpdate(resourceGroupName, workspaceName, sqlPoolName, createOrUpdateParams);
            }
            catch (ErrorContractException ex)
            {
                throw GetAzurePowerShellException(ex);
            }
        }

        internal SqlPoolV3 GetSqlPoolV3(string resourceGroupName, string workspaceName, string sqlPoolName)
        {
            try
            {
                if (string.IsNullOrEmpty(resourceGroupName))
                {
                    resourceGroupName = GetResourceGroupByWorkspaceName(workspaceName);
                }

                return _synapseSqlV3ManagementClient.SqlPoolsV3.Get(resourceGroupName, workspaceName, sqlPoolName);
            }
            catch (ErrorContractException ex)
            {
                throw GetAzurePowerShellException(ex);
            }
        }

        internal SqlPoolV3 GetSqlPoolV3OrDefault(string resourceGroupName, string workspaceName, string sqlPoolName)
        {
            try
            {
                return GetSqlPoolV3(resourceGroupName, workspaceName, sqlPoolName);
            }
            catch
            {
                return null;
            }
        }

        public List<SqlPoolV3> ListSqlPoolsV3(string resourceGroupName, string workspaceName)
        {
            try
            {
                if (string.IsNullOrEmpty(resourceGroupName))
                {
                    resourceGroupName = GetResourceGroupByWorkspaceName(workspaceName);
                }

                var firstPage = this._synapseSqlV3ManagementClient.SqlPoolsV3.ListByWorkspace(resourceGroupName, workspaceName);
                return ListResources(firstPage, _synapseSqlV3ManagementClient.SqlPoolsV3.ListByWorkspaceNext);
            }
            catch (ErrorContractException ex)
            {
                throw GetAzurePowerShellException(ex);
            }
        }

        public void UpdateSqlPoolV3(string resourceGroupName, string workspaceName, string sqlPoolName, SqlPoolUpdate updateParams)
        {
            try
            {
                if (string.IsNullOrEmpty(resourceGroupName))
                {
                    resourceGroupName = GetResourceGroupByWorkspaceName(workspaceName);
                }

                _synapseSqlV3ManagementClient.SqlPoolsV3.Update(resourceGroupName, workspaceName, sqlPoolName, updateParams);
            }
            catch (ErrorContractException ex)
            {
                throw GetAzurePowerShellException(ex);
            }
        }

        public void DeleteSqlPoolV3(string resourceGroupName, string workspaceName, string sqlPoolName)
        {
            try
            {
                if (string.IsNullOrEmpty(resourceGroupName))
                {
                    resourceGroupName = GetResourceGroupByWorkspaceName(workspaceName);
                }

                if (!TestSqlPoolV3(resourceGroupName, workspaceName, sqlPoolName))
                {
                    throw new InvalidOperationException(string.Format(Properties.Resources.SqlPoolDoesNotExist, sqlPoolName));
                }

                _synapseSqlV3ManagementClient.SqlPoolsV3.Delete(resourceGroupName, workspaceName, sqlPoolName);
            }
            catch (ErrorContractException ex)
            {
                throw GetAzurePowerShellException(ex);
            }
        }

        public bool TestSqlPoolV3(string resourceGroupName, string workspaceName, string sqlPoolName)
        {
            try
            {
                GetSqlPoolV3(resourceGroupName, workspaceName, sqlPoolName);
                return true;
            }
            catch (AzPSResourceNotFoundCloudException)
            {
                return false;
            }
        }

        #endregion

        #region SQL Database operations

        public SqlDatabase CreateSqlDatabase(string resourceGroupName, string workspaceName, string sqlDatabaseName, SqlDatabase createOrUpdateParams)
        {
            try
            {
                return _synapseSqlV3ManagementClient.SqlDatabases.CreateOrUpdate(resourceGroupName, workspaceName, sqlDatabaseName, createOrUpdateParams);
            }
            catch (ErrorContractException ex)
            {
                throw GetAzurePowerShellException(ex);
            }
        }

        public PSRecoverableSqlPool GetRecoverableSqlPool(string resourceGroupName, string workspaceName, string sqlPoolName)
        {
            try
            {
                var recoverableSqlPool = this._synapseManagementClient.WorkspaceManagedSqlServerRecoverableSqlpools.Get(resourceGroupName, workspaceName, sqlPoolName);

                return new PSRecoverableSqlPool(recoverableSqlPool);
            }
            catch (ErrorContractException ex)
            {
                throw GetAzurePowerShellException(ex);
            }
        }

        public List<RecoverableSqlPool> ListRecoverableSqlPool(string resourceGroupName, string workspaceName)
        {
            try
            {
                var firstPage =  this._synapseManagementClient.WorkspaceManagedSqlServerRecoverableSqlpools.List(resourceGroupName, workspaceName);
                return ListResources(firstPage, _synapseManagementClient.WorkspaceManagedSqlServerRecoverableSqlpools.ListNext);
            }
            catch (ErrorContractException ex)
            {
                throw GetAzurePowerShellException(ex);
            }
        }

        public PSRestorableDroppedSqlPool GetDroppedSqlPoolBackup(string resourceGroupName, string workspaceName, string sqlPoolAndTimeName)
        {
            try
            {
                var restorableDroppedSqlPool = this._synapseManagementClient.RestorableDroppedSqlPools.Get(resourceGroupName, workspaceName, sqlPoolAndTimeName);

                return new PSRestorableDroppedSqlPool(restorableDroppedSqlPool);
            }
            catch (ErrorContractException ex)
            {
                throw GetAzurePowerShellException(ex);
            }
        }

        public List<RestorableDroppedSqlPool> ListDroppedSqlPoolBackups (string resourceGroupName, string workspaceName)
        {
            try
            {
                var restorableDroppedSqlPoolList = this._synapseManagementClient.RestorableDroppedSqlPools.ListByWorkspace(resourceGroupName, workspaceName);
                return restorableDroppedSqlPoolList.ToList();
            }
            catch (ErrorContractException ex)
            {
                throw GetAzurePowerShellException(ex);
            }
        }

        internal SqlDatabase GetSqlDatabase(string resourceGroupName, string workspaceName, string sqlDatabaseName)
        {
            try
            {
                if (string.IsNullOrEmpty(resourceGroupName))
                {
                    resourceGroupName = GetResourceGroupByWorkspaceName(workspaceName);
                }

                return _synapseSqlV3ManagementClient.SqlDatabases.Get(resourceGroupName, workspaceName, sqlDatabaseName);
            }
            catch (ErrorContractException ex)
            {
                throw GetAzurePowerShellException(ex);
            }
        }

        internal SqlDatabase GetSqlDatabaseOrDefault(string resourceGroupName, string workspaceName, string sqlDatabaseName)
        {
            try
            {
                return GetSqlDatabase(resourceGroupName, workspaceName, sqlDatabaseName);
            }
            catch
            {
                return null;
            }
        }

        public List<SqlDatabase> ListSqlDatabases(string resourceGroupName, string workspaceName)
        {
            try
            {
                if (string.IsNullOrEmpty(resourceGroupName))
                {
                    resourceGroupName = GetResourceGroupByWorkspaceName(workspaceName);
                }

                var firstPage = this._synapseSqlV3ManagementClient.SqlDatabases.ListByWorkspace(resourceGroupName, workspaceName);
                return ListResources(firstPage, _synapseSqlV3ManagementClient.SqlDatabases.ListByWorkspaceNext);
            }
            catch (ErrorContractException ex)
            {
                throw GetAzurePowerShellException(ex);
            }
        }

        public void UpdateSqlDatabase(string resourceGroupName, string workspaceName, string sqlDatabaseName, SqlDatabaseUpdate updateParams)
        {
            try
            {
                if (string.IsNullOrEmpty(resourceGroupName))
                {
                    resourceGroupName = GetResourceGroupByWorkspaceName(workspaceName);
                }

                _synapseSqlV3ManagementClient.SqlDatabases.Update(resourceGroupName, workspaceName, sqlDatabaseName, updateParams);
            }
            catch (ErrorContractException ex)
            {
                throw GetAzurePowerShellException(ex);
            }
        }

        public void DeleteSqlDatabase(string resourceGroupName, string workspaceName, string sqlDatabaseName)
        {
            try
            {
                if (string.IsNullOrEmpty(resourceGroupName))
                {
                    resourceGroupName = GetResourceGroupByWorkspaceName(workspaceName);
                }

                if (!TestSqlDatabase(resourceGroupName, workspaceName, sqlDatabaseName))
                {
                    throw new InvalidOperationException(string.Format(Properties.Resources.SqlDatabaseDoesNotExist, sqlDatabaseName));
                }

                _synapseSqlV3ManagementClient.SqlDatabases.Delete(resourceGroupName, workspaceName, sqlDatabaseName);
            }
            catch (ErrorContractException ex)
            {
                throw GetAzurePowerShellException(ex);
            }
        }

        public bool TestSqlDatabase(string resourceGroupName, string workspaceName, string sqlDatabaseName)
        {
            try
            {
                GetSqlDatabase(resourceGroupName, workspaceName, sqlDatabaseName);
                return true;
            }
            catch (AzPSResourceNotFoundCloudException)
            {
                return false;
            }
        }

        #endregion

        #region Spark pool operations

        public BigDataPoolResourceInfo CreateOrUpdateSparkPool(string resourceGroupName, string workspaceName, string sparkPoolName, BigDataPoolResourceInfo createOrUpdateParams)
        {
            try
            {
                return _synapseManagementClient.BigDataPools.CreateOrUpdate(resourceGroupName, workspaceName, sparkPoolName, createOrUpdateParams);
            }
            catch (ErrorContractException ex)
            {
                throw GetAzurePowerShellException(ex);
            }
        }

        internal BigDataPoolResourceInfo GetSparkPool(string resourceGroupName, string workspaceName, string sparkPoolName)
        {
            try
            {
                if (string.IsNullOrEmpty(resourceGroupName))
                {
                    resourceGroupName = GetResourceGroupByWorkspaceName(workspaceName);
                }

                return _synapseManagementClient.BigDataPools.Get(resourceGroupName, workspaceName, sparkPoolName);
            }
            catch (ErrorContractException ex)
            {
                throw GetAzurePowerShellException(ex);
            }
        }

        public List<BigDataPoolResourceInfo> ListSparkPools(string resourceGroupName, string workspaceName)
        {
            try
            {
                if (string.IsNullOrEmpty(resourceGroupName))
                {
                    resourceGroupName = GetResourceGroupByWorkspaceName(workspaceName);
                }

                var firstPage = this._synapseManagementClient.BigDataPools.ListByWorkspace(resourceGroupName, workspaceName);
                return ListResources(firstPage, _synapseManagementClient.BigDataPools.ListByWorkspaceNext);
            }
            catch (ErrorContractException ex)
            {
                throw GetAzurePowerShellException(ex);
            }
        }

        public void DeleteSparkPool(string resourceGroupName, string workspaceName, string sparkPoolName)
        {
            try
            {
                if (string.IsNullOrEmpty(resourceGroupName))
                {
                    resourceGroupName = GetResourceGroupByWorkspaceName(workspaceName);
                }

                if (!TestSparkPool(resourceGroupName, workspaceName, sparkPoolName))
                {
                    throw new InvalidOperationException(string.Format(Properties.Resources.SparkPoolDoesNotExist, sparkPoolName));
                }

                _synapseManagementClient.BigDataPools.Delete(resourceGroupName, workspaceName, sparkPoolName);
            }
            catch (ErrorContractException ex)
            {
                throw GetAzurePowerShellException(ex);
            }
        }

        public bool TestSparkPool(string resourceGroupName, string workspaceName, string sparkPoolName)
        {
            try
            {
                GetSparkPool(resourceGroupName, workspaceName, sparkPoolName);
                return true;
            }
            catch (AzPSResourceNotFoundCloudException)
            {
                return false;
            }
        }

        #endregion

        #region integration runtime operations

        public virtual async Task<List<PSIntegrationRuntime>> ListIntegrationRuntimesAsync(SynapseEntityFilterOptions filterOptions)
        {
            try
            {
                if (string.IsNullOrEmpty(filterOptions.ResourceGroupName))
                {
                    filterOptions.ResourceGroupName = GetResourceGroupByWorkspaceName(filterOptions.WorkspaceName);
                }

                var integrationRuntimes = new List<PSIntegrationRuntime>();

                IPage<IntegrationRuntimeResource> response;
                if (filterOptions.NextLink.IsNextPageLink())
                {
                    response = await _synapseManagementClient.IntegrationRuntimes.ListByWorkspaceNextAsync(filterOptions.NextLink);
                }
                else
                {
                    response = await _synapseManagementClient.IntegrationRuntimes.ListByWorkspaceAsync(
                        filterOptions.ResourceGroupName,
                        filterOptions.WorkspaceName);
                }

                filterOptions.NextLink = response?.NextPageLink;
                if (response == null)
                {
                    return integrationRuntimes;
                }

                foreach (var integrationRuntime in response.ToList())
                {
                    if (integrationRuntime.Properties is ManagedIntegrationRuntime managed)
                    {
                        integrationRuntimes.Add(new PSManagedIntegrationRuntime(
                            integrationRuntime,
                            filterOptions.ResourceGroupName,
                            filterOptions.WorkspaceName));
                    }
                    else
                    {
                        if (integrationRuntime.Properties is SelfHostedIntegrationRuntime selfHosted)
                        {
                            integrationRuntimes.Add(CreateSelfHostedIntegrationRuntime(
                                integrationRuntime,
                                filterOptions.ResourceGroupName,
                                filterOptions.WorkspaceName));
                        }
                        else
                        {
                            integrationRuntimes.Add(new PSIntegrationRuntime(
                                integrationRuntime,
                                filterOptions.ResourceGroupName,
                                filterOptions.WorkspaceName));
                        }
                    }
                }

                return integrationRuntimes;
            }
            catch (ErrorContractException ex)
            {
                throw GetAzurePowerShellException(ex);
            }

        }

        private PSIntegrationRuntime CreateSelfHostedIntegrationRuntime(
            IntegrationRuntimeResource integrationRuntime,
            string resourceGroupName,
            string workspaceName)
        {
            PSIntegrationRuntime psIntegrationRuntime = null;

            if (integrationRuntime.Properties is SelfHostedIntegrationRuntime selfHosted)
            {
                if (selfHosted.LinkedInfo != null)
                {
                    psIntegrationRuntime = new PSLinkedIntegrationRuntime(integrationRuntime,
                            resourceGroupName,
                            workspaceName)
                    {
                        AuthorizationType = selfHosted.LinkedInfo is LinkedIntegrationRuntimeKeyAuthorization
                            ? SynapseConstants.LinkedIntegrationRuntimeKeyAuth
                            : SynapseConstants.LinkedIntegrationRuntimeRbacAuth
                    };
                }
                else
                {
                    psIntegrationRuntime = new PSSelfHostedIntegrationRuntime(integrationRuntime,
                            resourceGroupName,
                            workspaceName);
                }
            }

            return psIntegrationRuntime;
        }

        public virtual async Task<PSIntegrationRuntime> GetIntegrationRuntimeStatusAsync(
            string resourceGroupName,
            string workspaceName,
            string integrationRuntimeName)
        {
            try
            {
                if (string.IsNullOrEmpty(resourceGroupName))
                {
                    resourceGroupName = GetResourceGroupByWorkspaceName(workspaceName);
                }

                var taskGetIntegrationRuntime = Task.Run(
                async () => await _synapseManagementClient.IntegrationRuntimes.GetAsync(
                    resourceGroupName,
                    workspaceName,
                    integrationRuntimeName));
                var taskGetStatus = Task.Run(
                    async () => await _synapseManagementClient.IntegrationRuntimeStatus.GetWithHttpMessagesAsync(
                        resourceGroupName,
                        workspaceName,
                        integrationRuntimeName));
                await Task.WhenAll(taskGetIntegrationRuntime, taskGetStatus);

                return GenerateIntegraionRuntimeObject(
                    taskGetIntegrationRuntime.Result,
                    taskGetStatus.Result.Body,
                    resourceGroupName,
                    workspaceName);
            }
            catch (ErrorContractException ex)
            {
                throw GetAzurePowerShellException(ex);
            }

        }

        public virtual async Task<PSIntegrationRuntime> GetIntegrationRuntimeAsync(
            string resourceGroupName,
            string workspaceName,
            string integrationRuntimeName)
        {
            try
            {
                if (string.IsNullOrEmpty(resourceGroupName))
                {
                    resourceGroupName = GetResourceGroupByWorkspaceName(workspaceName);
                }

                var response = await _synapseManagementClient.IntegrationRuntimes.GetAsync(
                resourceGroupName,
                workspaceName,
                integrationRuntimeName);

                return GenerateIntegraionRuntimeObject(response, null, resourceGroupName, workspaceName);
            }
            catch (ErrorContractException ex)
            {
                throw GetAzurePowerShellException(ex);
            }
            catch (NullReferenceException)
            {
                throw new CloudException()
                {
                    Response = new HttpResponseMessageWrapper(new HttpResponseMessage(HttpStatusCode.NotFound), "")
                };
            }
        }

        private PSIntegrationRuntime GenerateIntegraionRuntimeObject(
            IntegrationRuntimeResource integrationRuntime,
            IntegrationRuntimeStatusResponse status,
            string resourceGroupName,
            string workspaceName)
        {
            if (status == null)
            {
                PSIntegrationRuntime ir = (integrationRuntime.Properties is ManagedIntegrationRuntime managed
                    ? new PSManagedIntegrationRuntime(integrationRuntime, resourceGroupName, workspaceName)
                    : CreateSelfHostedIntegrationRuntime(integrationRuntime, resourceGroupName, workspaceName))
                        ?? new PSIntegrationRuntime(integrationRuntime, resourceGroupName, workspaceName);

                return ir;
            }

            if (integrationRuntime.Properties is ManagedIntegrationRuntime managed)
            {
                return new PSManagedIntegrationRuntimeStatus(
                    integrationRuntime,
                    (ManagedIntegrationRuntimeStatus)status.Properties,
                    resourceGroupName,
                    workspaceName);
            }
            else
            {
                if (integrationRuntime.Properties is SelfHostedIntegrationRuntime selfHosted)
                {
                    if (selfHosted.LinkedInfo != null)
                    {
                        return new PSLinkedIntegrationRuntimeStatus(
                            integrationRuntime,
                            (SelfHostedIntegrationRuntimeStatus)status.Properties,
                            resourceGroupName,
                            workspaceName,
                            _synapseManagementClient.DeserializationSettings,
                            selfHosted.LinkedInfo is LinkedIntegrationRuntimeKeyAuthorization
                                ? SynapseConstants.LinkedIntegrationRuntimeKeyAuth
                                : SynapseConstants.LinkedIntegrationRuntimeRbacAuth,
                            status.Name,
                            status.Properties.DataFactoryName);
                    }

                    return new PSSelfHostedIntegrationRuntimeStatus(
                        integrationRuntime,
                        (SelfHostedIntegrationRuntimeStatus)status.Properties,
                        resourceGroupName,
                        workspaceName,
                        _synapseManagementClient.DeserializationSettings);
                }
            }

            // Don't support get status for legacy integraiton runtime.
            throw new PSInvalidOperationException("This type of integration runtime is not supported by this version powershell cmdlets.");
        }

        public virtual async Task<PSIntegrationRuntimeKeys> GetIntegrationRuntimeKeyAsync(
            string resourceGroupName,
            string workspaceName,
            string integrationRuntimeName)
        {
            try
            {
                if (string.IsNullOrEmpty(resourceGroupName))
                {
                    resourceGroupName = GetResourceGroupByWorkspaceName(workspaceName);
                }

                var response = await _synapseManagementClient.IntegrationRuntimeAuthKeys.ListWithHttpMessagesAsync(
                resourceGroupName,
                workspaceName,
                integrationRuntimeName);

                return new PSIntegrationRuntimeKeys(response.Body.AuthKey1, response.Body.AuthKey2);
            }
            catch (ErrorContractException ex)
            {
                throw GetAzurePowerShellException(ex);
            }
        }

        public virtual async Task<PSIntegrationRuntimeMetrics> GetIntegrationRuntimeMetricAsync(
            string resourceGroupName,
            string workspaceName,
            string integrationRuntimeName)
        {
            try
            {
                if (string.IsNullOrEmpty(resourceGroupName))
                {
                    resourceGroupName = GetResourceGroupByWorkspaceName(workspaceName);
                }

                var data = await _synapseManagementClient.IntegrationRuntimeMonitoringData.ListWithHttpMessagesAsync(
                resourceGroupName,
                workspaceName,
                integrationRuntimeName);

                return new PSIntegrationRuntimeMetrics(data.Body, resourceGroupName, workspaceName);
            }
            catch (ErrorContractException ex)
            {
                throw GetAzurePowerShellException(ex);
            }
        }

        public virtual async Task<AzureOperationResponse<IntegrationRuntimeNodeIpAddress>> GetIntegrationRuntimeNodeIpAsync(
            string resourceGroupName,
            string workspaceName,
            string integrationRuntimeName,
            string nodeName)
        {
            try
            {
                if (string.IsNullOrEmpty(resourceGroupName))
                {
                    resourceGroupName = GetResourceGroupByWorkspaceName(workspaceName);
                }

                return await _synapseManagementClient.IntegrationRuntimeNodeIpAddress.GetWithHttpMessagesAsync(
                resourceGroupName,
                workspaceName,
                integrationRuntimeName,
                nodeName);
            }
            catch (ErrorContractException ex)
            {
                throw GetAzurePowerShellException(ex);
            }
        }

        public virtual async Task UpgradeIntegrationRuntimeAsync(
            string resourceGroupName,
            string workspaceName,
            string integrationRuntimeName)
        {
            try
            {
                if (string.IsNullOrEmpty(resourceGroupName))
                {
                    resourceGroupName = GetResourceGroupByWorkspaceName(workspaceName);
                }

                await _synapseManagementClient.IntegrationRuntimes.UpgradeAsync(
                resourceGroupName,
                workspaceName,
                integrationRuntimeName);
            }
            catch (ErrorContractException ex)
            {
                throw GetAzurePowerShellException(ex);
            }
        }

        public virtual async Task<PSIntegrationRuntimeKeys> RegenerateIntegrationRuntimeAuthKeyAsync(
            string resourceGroupName,
            string workspaceName,
            string integrationRuntimeName,
            string keyName)
        {
            try
            {
                if (string.IsNullOrEmpty(resourceGroupName))
                {
                    resourceGroupName = GetResourceGroupByWorkspaceName(workspaceName);
                }

                var response =
                await _synapseManagementClient.IntegrationRuntimeAuthKeys.RegenerateWithHttpMessagesAsync(
                    resourceGroupName,
                    workspaceName,
                    integrationRuntimeName,
                    new IntegrationRuntimeRegenerateKeyParameters(keyName));

                return new PSIntegrationRuntimeKeys(response.Body.AuthKey1, response.Body.AuthKey2);
            }
            catch (ErrorContractException ex)
            {
                throw GetAzurePowerShellException(ex);
            }
        }

        internal async Task<bool> CheckIntegrationRuntimeExistsAsync(
            string resourceGroupName,
            string workspaceName,
            string integrationRuntimeName)
        {
            try
            {
                if (string.IsNullOrEmpty(resourceGroupName))
                {
                    resourceGroupName = GetResourceGroupByWorkspaceName(workspaceName);
                }

                PSIntegrationRuntime integrationRuntime = await this.GetIntegrationRuntimeAsync(
                    resourceGroupName,
                    workspaceName,
                    integrationRuntimeName);

                return integrationRuntime != null;
            }
            catch (ErrorContractException ex)
            {
                throw GetAzurePowerShellException(ex);
            }
            catch (CloudException e)
            {
                // Get throws Exception message with NotFound Status
                if (e.Response.StatusCode == HttpStatusCode.NotFound)
                {
                    return false;
                }

                throw;
            }
        }

        public virtual async Task<HttpStatusCode> DeleteIntegrationRuntimeAsync(
            string resourceGroupName,
            string workspaceName,
            string integrationRuntimeName)
        {
            try
            {
                if (string.IsNullOrEmpty(resourceGroupName))
                {
                    resourceGroupName = GetResourceGroupByWorkspaceName(workspaceName);
                }

                var response = await _synapseManagementClient.IntegrationRuntimes.DeleteWithHttpMessagesAsync(
                resourceGroupName,
                workspaceName,
                integrationRuntimeName);

                return response.Response.StatusCode;
            }
            catch (ErrorContractException ex)
            {
                throw GetAzurePowerShellException(ex);
            }
        }

        public virtual async Task<HttpStatusCode> RemoveIntegrationRuntimeNodeAsync(
            string resourceGroupName,
            string workspaceName,
            string integrationRuntimeName,
            string nodeName)
        {
            try
            {
                if (string.IsNullOrEmpty(resourceGroupName))
                {
                    resourceGroupName = GetResourceGroupByWorkspaceName(workspaceName);
                }

                var response = await _synapseManagementClient.IntegrationRuntimeNodes.DeleteWithHttpMessagesAsync(
                resourceGroupName,
                workspaceName,
                integrationRuntimeName,
                nodeName);

                return response.Response.StatusCode;
            }
            catch (ErrorContractException ex)
            {
                throw GetAzurePowerShellException(ex);
            }
        }

        public virtual PSIntegrationRuntime CreateOrUpdateIntegrationRuntime(CreatePSIntegrationRuntimeParameters parameters)
        {
            try
            {
                if (string.IsNullOrEmpty(parameters.ResourceGroupName))
                {
                    parameters.ResourceGroupName = GetResourceGroupByWorkspaceName(parameters.WorkspaceName);
                }

                PSIntegrationRuntime psIntegrationRuntime = null;

                Action createOrUpdateIntegrationRuntime = () =>
                {
                    var integrationRuntime = this.CreateOrUpdateIntegrationRuntimeAsync(
                        parameters.ResourceGroupName,
                        parameters.WorkspaceName,
                        parameters.Name,
                        parameters.IntegrationRuntimeResource).ConfigureAwait(true).GetAwaiter().GetResult();

                    if (integrationRuntime.Body.Properties is ManagedIntegrationRuntime managed)
                    {
                        psIntegrationRuntime = new PSManagedIntegrationRuntime(integrationRuntime.Body,
                                parameters.ResourceGroupName,
                                parameters.WorkspaceName);
                    }
                    else
                    {
                        psIntegrationRuntime = CreateSelfHostedIntegrationRuntime(integrationRuntime.Body,
                            parameters.ResourceGroupName,
                            parameters.WorkspaceName);
                    }
                };

                parameters.ConfirmAction(
                        parameters.Force,  // prompt only if the integration runtime exists
                        string.Format(
                            CultureInfo.InvariantCulture,
                            Resources.IntegrationRuntimeExists,
                            parameters.Name,
                            parameters.WorkspaceName),
                        string.Format(
                            CultureInfo.InvariantCulture,
                            Resources.UpdatingIntegrationRuntime,
                            parameters.Name,
                            parameters.WorkspaceName),
                        parameters.Name,
                        createOrUpdateIntegrationRuntime,
                        () => parameters.IsUpdate);

                return psIntegrationRuntime;
            }
            catch (ErrorContractException ex)
            {
                throw GetAzurePowerShellException(ex);
            }
        }

        public virtual async Task<AzureOperationResponse<IntegrationRuntimeResource>> CreateOrUpdateIntegrationRuntimeAsync(
            string resourceGroupName,
            string dataFactoryName,
            string integrationRuntimeName,
            IntegrationRuntimeResource resource)
        {
            return await _synapseManagementClient.IntegrationRuntimes.CreateWithHttpMessagesAsync(
                    resourceGroupName,
                    dataFactoryName,
                    integrationRuntimeName,
                    resource);
        }

        public virtual async Task SyncIntegrationRuntimeCredentialInNodesAsync(
            string resourceGroupName,
            string workspaceName,
            string integrationRuntimeName)
        {
            try
            {
                if (string.IsNullOrEmpty(resourceGroupName))
                {
                    resourceGroupName = GetResourceGroupByWorkspaceName(workspaceName);
                }
            }
            catch (ErrorContractException ex)
            {
                throw GetAzurePowerShellException(ex);
            }

            await _synapseManagementClient.IntegrationRuntimeCredentials.SyncWithHttpMessagesAsync(
                resourceGroupName,
                workspaceName,
                integrationRuntimeName);
        }

        public JsonSerializerSettings GetSerializationSettings()
        {
            return _synapseManagementClient.SerializationSettings;
        }

        public virtual async Task<PSIntegrationRuntime> UpdateIntegrationRuntimeAsync(
            string resourceGroupName,
            string workspaceName,
            string integrationRuntimeName,
            IntegrationRuntimeResource resource,
            UpdateIntegrationRuntimeRequest request)
        {
            try
            {
                if (string.IsNullOrEmpty(resourceGroupName))
                {
                    resourceGroupName = GetResourceGroupByWorkspaceName(workspaceName);
                }
            }
            catch (ErrorContractException ex)
            {
                throw GetAzurePowerShellException(ex);
            }

            var response = await _synapseManagementClient.IntegrationRuntimes.UpdateAsync(
                resourceGroupName,
                workspaceName,
                integrationRuntimeName,
                request);

            return new PSSelfHostedIntegrationRuntime(
                response,
                resourceGroupName,
                workspaceName);
        }

        public virtual async Task<SelfHostedIntegrationRuntimeNode> UpdateIntegrationRuntimeNodesAsync(
            string resourceGroupName,
            string workspaceName,
            string integrationRuntimeName,
            string nodeName,
            UpdateIntegrationRuntimeNodeRequest request)
        {
            try
            {
                if (string.IsNullOrEmpty(resourceGroupName))
                {
                    resourceGroupName = GetResourceGroupByWorkspaceName(workspaceName);
                }
            }
            catch (ErrorContractException ex)
            {
                throw GetAzurePowerShellException(ex);
            }

            return await _synapseManagementClient.IntegrationRuntimeNodes.UpdateAsync(
                resourceGroupName,
                workspaceName,
                integrationRuntimeName,
                nodeName,
                request);
        }

        #endregion

        #region helpers

        private static List<T> ListResources<T>(
            IPage<T> firstPage,
            Func<string, IPage<T>> listNext)
        {
            var resourceList = new List<T>();
            var response = firstPage;
            resourceList.AddRange(response);

            while (!string.IsNullOrEmpty(response.NextPageLink))
            {
                response = listNext(response.NextPageLink);
                resourceList.AddRange(response);
            }

            return resourceList;
        }

        private static Exception GetAzurePowerShellException(ErrorContractException ex)
        {
            return Utils.CreateAzurePowerShellException(ex);
        }

        private static Exception GetAzurePowerShellException(CloudException ex)
        {
            return Utils.CreateAzurePowerShellException(ex);
        }

        #endregion
    }
}

---- Semantic diagnostics *before* transformation ----

---- Semantic diagnostics *after* transformation ----
/Users/runner/work/1/s/src/Synapse/Synapse/Models/SynapseAnalyticsManagementClient.cs(2393,103): error CS0136: A local or parameter named 'managed' cannot be declared in this scope because that name is used in an enclosing local scope to define a local or parameter
######################################################################


